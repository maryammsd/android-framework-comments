{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryUsageStats.java",
  "packageName" : "android.os",
  "className" : "Builder",
  "comment" : "\n     * Builder for BatteryUsageStats.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mBatteryConsumersCursorWindow",
    "type" : "CursorWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomPowerComponentNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludePowerModels",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludesProcessStateData",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinConsumedPowerThreshold",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryConsumerDataLayout",
    "type" : "BatteryConsumer.BatteryConsumerDataLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsStartTimestampMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsEndTimestampMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsDurationMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryCapacityMah",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargePercentage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargedPowerLowerBoundMah",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargedPowerUpperBoundMah",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargeDurationMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryTimeRemainingMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChargeTimeRemainingMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAggregateBatteryConsumersBuilders",
    "type" : "AggregateBatteryConsumer.Builder[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUidBatteryConsumerBuilders",
    "type" : "SparseArray<UidBatteryConsumer.Builder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserBatteryConsumerBuilders",
    "type" : "SparseArray<UserBatteryConsumer.Builder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryStatsHistory",
    "type" : "BatteryStatsHistory",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isProcessStateDataNeeded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BatteryUsageStats build()",
    "returnType" : "BatteryUsageStats",
    "comment" : "\n         * Constructs a read-only object using the Builder values.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBatteryCapacity(double batteryCapacityMah)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the battery capacity in milli-amp-hours.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStatsStartTimestamp(long statsStartTimestampMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the timestamp of the latest battery stats reset, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStatsEndTimestamp(long statsEndTimestampMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the timestamp of when the battery stats snapshot was taken, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStatsDuration(long statsDurationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the duration of the stats session.  The default value of this field is\n         * statsEndTimestamp - statsStartTimestamp.\n         ",
    "links" : [ ]
  }, {
    "name" : "private long getStatsDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setDischargePercentage(int dischargePercentage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the battery discharge amount since BatteryStats reset as percentage of the full\n         * charge.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDischargedPowerRange(double dischargedPowerLowerBoundMah, double dischargedPowerUpperBoundMah)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the estimated battery discharge range.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDischargeDurationMs(long durationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the total battery discharge time, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBatteryTimeRemainingMs(long batteryTimeRemainingMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an approximation for how much time (in milliseconds) remains until the battery\n         * is fully discharged.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setChargeTimeRemainingMs(long chargeTimeRemainingMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an approximation for how much time (in milliseconds) remains until the battery\n         * is fully charged.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBatteryHistory(BatteryStatsHistory batteryStatsHistory)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the parceled recent history.\n         ",
    "links" : [ ]
  }, {
    "name" : "public AggregateBatteryConsumer.Builder getAggregateBatteryConsumerBuilder(@AggregateBatteryConsumerScope int scope)",
    "returnType" : "AggregateBatteryConsumer.Builder",
    "comment" : "\n         * Creates or returns an AggregateBatteryConsumer builder, which represents aggregate\n         * battery consumption data for the specified scope.\n         ",
    "links" : [ ]
  }, {
    "name" : "public UidBatteryConsumer.Builder getOrCreateUidBatteryConsumerBuilder(@NonNull BatteryStats.Uid batteryStatsUid)",
    "returnType" : "UidBatteryConsumer.Builder",
    "comment" : "\n         * Creates or returns a UidBatteryConsumer, which represents battery attribution\n         * data for an individual UID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public UidBatteryConsumer.Builder getOrCreateUidBatteryConsumerBuilder(int uid)",
    "returnType" : "UidBatteryConsumer.Builder",
    "comment" : "\n         * Creates or returns a UidBatteryConsumer, which represents battery attribution\n         * data for an individual UID. This version of the method is not suitable for use\n         * with PowerCalculators.\n         ",
    "links" : [ ]
  }, {
    "name" : "public UserBatteryConsumer.Builder getOrCreateUserBatteryConsumerBuilder(int userId)",
    "returnType" : "UserBatteryConsumer.Builder",
    "comment" : "\n         * Creates or returns a UserBatteryConsumer, which represents battery attribution\n         * data for an individual {@link UserHandle}.\n         ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public SparseArray<UidBatteryConsumer.Builder> getUidBatteryConsumerBuilders()",
    "returnType" : "SparseArray<UidBatteryConsumer.Builder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder add(BatteryUsageStats stats)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds battery usage stats from another snapshots. The two snapshots are assumed to be\n         * non-overlapping, meaning that the power consumption estimates and session durations\n         * can be simply summed across the two snapshots.  This remains true even if the timestamps\n         * seem to indicate that the sessions are in fact overlapping: timestamps may be off as a\n         * result of realtime clock adjustments by the user or the system.\n         ",
    "links" : [ ]
  }, {
    "name" : " void dump(PrintWriter writer)",
    "returnType" : "void",
    "comment" : "\n         * Dumps raw contents of the cursor window for debugging.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isProcessStateDataNeeded()", "public BatteryUsageStats build()", "public Builder setBatteryCapacity(double batteryCapacityMah)", "public Builder setStatsStartTimestamp(long statsStartTimestampMs)", "public Builder setStatsEndTimestamp(long statsEndTimestampMs)", "public Builder setStatsDuration(long statsDurationMs)", "private long getStatsDuration()", "public Builder setDischargePercentage(int dischargePercentage)", "public Builder setDischargedPowerRange(double dischargedPowerLowerBoundMah, double dischargedPowerUpperBoundMah)", "public Builder setDischargeDurationMs(long durationMs)", "public Builder setBatteryTimeRemainingMs(long batteryTimeRemainingMs)", "public Builder setChargeTimeRemainingMs(long chargeTimeRemainingMs)", "public Builder setBatteryHistory(BatteryStatsHistory batteryStatsHistory)", "public AggregateBatteryConsumer.Builder getAggregateBatteryConsumerBuilder(@AggregateBatteryConsumerScope int scope)", "public UidBatteryConsumer.Builder getOrCreateUidBatteryConsumerBuilder(@NonNull BatteryStats.Uid batteryStatsUid)", "public UidBatteryConsumer.Builder getOrCreateUidBatteryConsumerBuilder(int uid)", "public UserBatteryConsumer.Builder getOrCreateUserBatteryConsumerBuilder(int userId)", "public SparseArray<UidBatteryConsumer.Builder> getUidBatteryConsumerBuilders()", "public Builder add(BatteryUsageStats stats)", " void dump(PrintWriter writer)" ],
  "variableNames" : [ "mBatteryConsumersCursorWindow", "mCustomPowerComponentNames", "mIncludePowerModels", "mIncludesProcessStateData", "mMinConsumedPowerThreshold", "mBatteryConsumerDataLayout", "mStatsStartTimestampMs", "mStatsEndTimestampMs", "mStatsDurationMs", "mBatteryCapacityMah", "mDischargePercentage", "mDischargedPowerLowerBoundMah", "mDischargedPowerUpperBoundMah", "mDischargeDurationMs", "mBatteryTimeRemainingMs", "mChargeTimeRemainingMs", "mAggregateBatteryConsumersBuilders", "mUidBatteryConsumerBuilders", "mUserBatteryConsumerBuilders", "mBatteryStatsHistory" ]
}