{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/SoftCache.java",
  "packageName" : "android.icu.impl",
  "className" : "SoftCache",
  "comment" : "\n * Generic, thread-safe cache implementation, usually storing cached instances\n * in {@link java.lang.ref.Reference}s via {@link CacheValue}s.\n * To use, instantiate a subclass which implements the createInstance() method,\n * and call get() with the key and the data. The get() call will use the data\n * only if it needs to call createInstance(), otherwise the data is ignored.\n *\n * <p>When caching instances while the CacheValue \"strength\" is {@code SOFT},\n * the Java runtime can later release these instances once they are not used any more at all.\n * If such an instance is then requested again,\n * the getInstance() method will call createInstance() again and reset the CacheValue.\n * The cache holds on to its map of keys to CacheValues forever.\n *\n * <p>A value can be null if createInstance() returns null.\n * In this case, it must do so consistently for the same key and data.\n *\n * @param <K> Cache lookup key type\n * @param <V> Cache instance value type (must not be a CacheValue)\n * @param <D> Data type for creating a new instance value\n *\n * @author Markus Scherer, Mark Davis\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "java.lang.ref.Reference", "android.icu.impl.CacheValue" ],
  "variables" : [ {
    "name" : "map",
    "type" : "ConcurrentHashMap<K, Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final V getInstance(K key, D data)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final V getInstance(K key, D data)" ],
  "variableNames" : [ "map" ]
}