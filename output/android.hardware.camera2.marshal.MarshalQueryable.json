{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/marshal/MarshalQueryable.java",
  "packageName" : "android.hardware.camera2.marshal",
  "className" : "MarshalQueryable",
  "comment" : "\n * Query if a marshaler can marshal to/from a particular native and managed type; if it supports\n * the combination, allow creating a marshaler instance to do the serialization.\n *\n * <p>Not all queryable instances will support exactly one combination. Some, such as the\n * primitive queryable will support all primitive to/from managed mappings (as long as they are\n * 1:1). Others, such as the rectangle queryable will only support integer to rectangle mappings.\n * </p>\n *\n * <p>Yet some others are codependent on other queryables; e.g. array queryables might only support\n * a type map for {@code T[]} if another queryable exists with support for the component type\n * {@code T}.</p>\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Marshaler<T> createMarshaler(TypeReference<T> managedType, int nativeType)",
    "returnType" : "Marshaler<T>",
    "comment" : "\n     * Create a marshaler between the selected managed and native type.\n     *\n     * <p>This marshaler instance is only good for that specific type mapping; and will refuse\n     * to map other managed types, other native types, or an other combination that isn't\n     * this exact one.</p>\n     *\n     * @param managedType a managed type reference\n     * @param nativeType the native type, e.g.\n     *          {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}\n     * @return\n     *\n     * @throws UnsupportedOperationException\n     *          if {@link #isTypeMappingSupported} returns {@code false}\n     ",
    "links" : [ "android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE", "#isTypeMappingSupported" ]
  }, {
    "name" : "public boolean isTypeMappingSupported(TypeReference<T> managedType, int nativeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether or not this query marshal is able to create a marshaler that will\n     * support the managed type and native type mapping.\n     *\n     * <p>If this returns {@code true}, then a marshaler can be instantiated by\n     * {@link #createMarshaler} that will marshal data to/from the native type\n     * from/to the managed type.</p>\n     *\n     * <p>Most marshalers are likely to only support one type map.</p>\n     ",
    "links" : [ "#createMarshaler" ]
  } ],
  "methodNames" : [ "public Marshaler<T> createMarshaler(TypeReference<T> managedType, int nativeType)", "public boolean isTypeMappingSupported(TypeReference<T> managedType, int nativeType)" ],
  "variableNames" : [ ]
}