{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/ScanResult.java",
  "packageName" : "android.bluetooth.le",
  "className" : "ScanResult",
  "comment" : "\n * ScanResult for Bluetooth LE scan.\n ",
  "variables" : [ {
    "name" : "DATA_COMPLETE",
    "type" : "int",
    "comment" : "\n     * For chained advertisements, inidcates tha the data contained in this\n     * scan result is complete.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_TRUNCATED",
    "type" : "int",
    "comment" : "\n     * For chained advertisements, indicates that the controller was\n     * unable to receive all chained packets and the scan result contains\n     * incomplete truncated data.\n     ",
    "links" : [ ]
  }, {
    "name" : "PHY_UNUSED",
    "type" : "int",
    "comment" : "\n     * Indicates that the secondary physical layer was not used.\n     ",
    "links" : [ ]
  }, {
    "name" : "SID_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * Advertising Set ID is not present in the packet.\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * TX power is not present in the packet.\n     ",
    "links" : [ ]
  }, {
    "name" : "PERIODIC_INTERVAL_NOT_PRESENT",
    "type" : "int",
    "comment" : "\n     * Periodic advertising interval is not present in the packet.\n     ",
    "links" : [ ]
  }, {
    "name" : "ET_LEGACY_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for checking whether event type represents legacy advertisement.\n     ",
    "links" : [ ]
  }, {
    "name" : "ET_CONNECTABLE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for checking whether event type represents connectable advertisement.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "BluetoothDevice",
    "comment" : " Remote Bluetooth device.",
    "links" : [ ]
  }, {
    "name" : "mScanRecord",
    "type" : "ScanRecord",
    "comment" : " Scan record, including advertising data and scan response data.",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : " Received signal strength.",
    "links" : [ ]
  }, {
    "name" : "mTimestampNanos",
    "type" : "long",
    "comment" : " Device timestamp when the result was last seen.",
    "links" : [ ]
  }, {
    "name" : "mEventType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdvertisingSid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxPower",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeriodicAdvertisingInterval",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ScanResult>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothDevice getDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Returns the remote Bluetooth device identified by the Bluetooth device address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ScanRecord getScanRecord()",
    "returnType" : "ScanRecord",
    "comment" : "\n     * Returns the scan record, which is a combination of advertisement and scan response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Returns the received signal strength in dBm. The valid range is [-127, 126].\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimestampNanos()",
    "returnType" : "long",
    "comment" : "\n     * Returns timestamp since boot when the scan record was observed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLegacy()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object represents legacy scan result.\n     * Legacy scan results do not contain advanced advertising information\n     * as specified in the Bluetooth Core Specification v5.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnectable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object represents connectable scan result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns the data status.\n     * Can be one of {@link ScanResult#DATA_COMPLETE} or\n     * {@link ScanResult#DATA_TRUNCATED}.\n     ",
    "links" : [ "android.bluetooth.le.ScanResult#DATA_COMPLETE", "android.bluetooth.le.ScanResult#DATA_TRUNCATED" ]
  }, {
    "name" : "public int getPrimaryPhy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the primary Physical Layer\n     * on which this advertisment was received.\n     * Can be one of {@link BluetoothDevice#PHY_LE_1M} or\n     * {@link BluetoothDevice#PHY_LE_CODED}.\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public int getSecondaryPhy()",
    "returnType" : "int",
    "comment" : "\n     * Returns the secondary Physical Layer\n     * on which this advertisment was received.\n     * Can be one of {@link BluetoothDevice#PHY_LE_1M},\n     * {@link BluetoothDevice#PHY_LE_2M}, {@link BluetoothDevice#PHY_LE_CODED}\n     * or {@link ScanResult#PHY_UNUSED} - if the advertisement\n     * was not received on a secondary physical channel.\n     ",
    "links" : [ "android.bluetooth.le.ScanResult#PHY_UNUSED", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_2M", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public int getAdvertisingSid()",
    "returnType" : "int",
    "comment" : "\n     * Returns the advertising set id.\n     * May return {@link ScanResult#SID_NOT_PRESENT} if\n     * no set id was is present.\n     ",
    "links" : [ "android.bluetooth.le.ScanResult#SID_NOT_PRESENT" ]
  }, {
    "name" : "public int getTxPower()",
    "returnType" : "int",
    "comment" : "\n     * Returns the transmit power in dBm.\n     * Valid range is [-127, 126]. A value of {@link ScanResult#TX_POWER_NOT_PRESENT}\n     * indicates that the TX power is not present.\n     ",
    "links" : [ "android.bluetooth.le.ScanResult#TX_POWER_NOT_PRESENT" ]
  }, {
    "name" : "public int getPeriodicAdvertisingInterval()",
    "returnType" : "int",
    "comment" : "\n     * Returns the periodic advertising interval in units of 1.25ms.\n     * Valid range is 6 (7.5ms) to 65536 (81918.75ms). A value of\n     * {@link ScanResult#PERIODIC_INTERVAL_NOT_PRESENT} means periodic\n     * advertising interval is not present.\n     ",
    "links" : [ "android.bluetooth.le.ScanResult#PERIODIC_INTERVAL_NOT_PRESENT" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DATA_COMPLETE", "DATA_TRUNCATED", "PHY_UNUSED", "SID_NOT_PRESENT", "TX_POWER_NOT_PRESENT", "PERIODIC_INTERVAL_NOT_PRESENT", "ET_LEGACY_MASK", "ET_CONNECTABLE_MASK", "mDevice", "mScanRecord", "mRssi", "mTimestampNanos", "mEventType", "mPrimaryPhy", "mSecondaryPhy", "mAdvertisingSid", "mTxPower", "mPeriodicAdvertisingInterval", "CREATOR" ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "private void readFromParcel(Parcel in)", "public int describeContents()", "public BluetoothDevice getDevice()", "public ScanRecord getScanRecord()", "public int getRssi()", "public long getTimestampNanos()", "public boolean isLegacy()", "public boolean isConnectable()", "public int getDataStatus()", "public int getPrimaryPhy()", "public int getSecondaryPhy()", "public int getAdvertisingSid()", "public int getTxPower()", "public int getPeriodicAdvertisingInterval()", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()" ]
}