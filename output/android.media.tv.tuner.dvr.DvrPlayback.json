{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/dvr/DvrPlayback.java",
  "packageName" : "android.media.tv.tuner.dvr",
  "className" : "DvrPlayback",
  "comment" : "\n * Digital Video Record (DVR) class which provides playback control on Demux's input buffer.\n *\n * <p>It's used to play recorded programs.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PLAYBACK_STATUS_EMPTY",
    "type" : "int",
    "comment" : "\n     * The space of the playback is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_STATUS_ALMOST_EMPTY",
    "type" : "int",
    "comment" : "\n     * The space of the playback is almost empty.\n     *\n     * <p> the threshold is set in {@link DvrSettings}.\n     ",
    "links" : [ "android.media.tv.tuner.dvr.DvrSettings" ]
  }, {
    "name" : "PLAYBACK_STATUS_ALMOST_FULL",
    "type" : "int",
    "comment" : "\n     * The space of the playback is almost full.\n     *\n     * <p> the threshold is set in {@link DvrSettings}.\n     ",
    "links" : [ "android.media.tv.tuner.dvr.DvrSettings" ]
  }, {
    "name" : "PLAYBACK_STATUS_FULL",
    "type" : "int",
    "comment" : "\n     * The space of the playback is full.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnPlaybackStatusChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstantId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSegmentId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnderflow",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeAttachFilter(Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeDetachFilter(Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeConfigureDvr(DvrSettings settings)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetStatusCheckIntervalHint(long durationInMs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStartDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeFlushDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeSetFileDescriptor(int fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeRead(long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeRead(byte[] bytes, long offset, long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeSeek(long pos)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setListener(@NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void onPlaybackStatusChanged(int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int attachFilter(@NonNull Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Attaches a filter to DVR interface for playback.\n     *\n     * @deprecated attaching filters is not valid in Dvr Playback use case. This API is a no-op.\n     *             Filters opened by {@link Tuner#openFilter} are used for DVR playback.\n     *\n     * @param filter the filter to be attached.\n     * @return result status of the operation.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner#openFilter" ]
  }, {
    "name" : "public int detachFilter(@NonNull Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Detaches a filter from DVR interface.\n     *\n     * @deprecated detaching filters is not valid in Dvr Playback use case. This API is a no-op.\n     *             Filters opened by {@link Tuner#openFilter} are used for DVR playback.\n     *\n     * @param filter the filter to be detached.\n     * @return result status of the operation.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner#openFilter" ]
  }, {
    "name" : "public int configure(@NonNull DvrSettings settings)",
    "returnType" : "int",
    "comment" : "\n     * Configures the DVR.\n     *\n     * @param settings the settings of the DVR interface.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setPlaybackBufferStatusCheckIntervalHint(long durationInMs)",
    "returnType" : "int",
    "comment" : "\n     * Set playback buffer status check time interval.\n     *\n     * This status check time interval will be used by the Dvr to decide how often to evaluate\n     * data. The default value will be decided by HAL if itâ€™s not set.\n     *\n     * <p>This functionality is only available in Tuner version 3.0 and higher and will otherwise\n     * return a {@link Tuner#RESULT_UNAVAILABLE}. Use {@link TunerVersionChecker#getTunerVersion()}\n     * to get the version information.\n     *\n     * @param durationInMs specifies the duration of the delay in milliseconds.\n     *\n     * @return one of the following results:\n     * {@link Tuner#RESULT_SUCCESS} if succeed,\n     * {@link Tuner#RESULT_UNAVAILABLE} if Dvr is unavailable or unsupported HAL versions,\n     * {@link Tuner#RESULT_NOT_INITIALIZED} if Dvr is not initialized,\n     * {@link Tuner#RESULT_INVALID_STATE} if Dvr is in a wrong state,\n     * {@link Tuner#RESULT_INVALID_ARGUMENT}  if the input parameter is invalid.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner#RESULT_NOT_INITIALIZED", "android.media.tv.tuner.TunerVersionChecker#getTunerVersion()", "android.media.tv.tuner.Tuner#RESULT_UNAVAILABLE", "android.media.tv.tuner.Tuner#RESULT_SUCCESS", "android.media.tv.tuner.Tuner#RESULT_INVALID_ARGUMENT", "android.media.tv.tuner.Tuner#RESULT_INVALID_STATE" ]
  }, {
    "name" : "public int start()",
    "returnType" : "int",
    "comment" : "\n     * Starts DVR.\n     *\n     * <p>Starts consuming playback data or producing data for recording.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int stop()",
    "returnType" : "int",
    "comment" : "\n     * Stops DVR.\n     *\n     * <p>Stops consuming playback data or producing data for recording.\n     * <p>Does nothing if the filter is stopped or not started.</p>\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int flush()",
    "returnType" : "int",
    "comment" : "\n     * Flushed DVR data.\n     *\n     * <p>The data in DVR buffer is cleared.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the DVR instance to release resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFileDescriptor(@NonNull ParcelFileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * Sets file descriptor to read data.\n     *\n     * <p>When a read operation of the filter object is happening, this method should not be\n     * called.\n     *\n     * @param fd the file descriptor to read data.\n     * @see #read(long)\n     * @see #seek(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long read(@BytesLong long size)",
    "returnType" : "long",
    "comment" : "\n     * Reads data from the file for DVR playback.\n     *\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)",
    "returnType" : "long",
    "comment" : "\n     * Reads data from the buffer for DVR playback.\n     *\n     * @param buffer the byte array where DVR reads data from.\n     * @param offset the index of the first byte in {@code buffer} to read.\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long seek(@BytesLong long position)",
    "returnType" : "long",
    "comment" : "\n     * Sets the file pointer offset of the file descriptor.\n     *\n     * @param position the offset position, measured in bytes from the beginning of the file.\n     * @return the new offset position. On error, {@code -1} is returned.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native int nativeAttachFilter(Filter filter)", "private native int nativeDetachFilter(Filter filter)", "private native int nativeConfigureDvr(DvrSettings settings)", "private native int nativeSetStatusCheckIntervalHint(long durationInMs)", "private native int nativeStartDvr()", "private native int nativeStopDvr()", "private native int nativeFlushDvr()", "private native int nativeClose()", "private native void nativeSetFileDescriptor(int fd)", "private native long nativeRead(long size)", "private native long nativeRead(byte[] bytes, long offset, long size)", "private native long nativeSeek(long pos)", "public void setListener(@NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener listener)", "private void onPlaybackStatusChanged(int status)", "public int attachFilter(@NonNull Filter filter)", "public int detachFilter(@NonNull Filter filter)", "public int configure(@NonNull DvrSettings settings)", "public int setPlaybackBufferStatusCheckIntervalHint(long durationInMs)", "public int start()", "public int stop()", "public int flush()", "public void close()", "public void setFileDescriptor(@NonNull ParcelFileDescriptor fd)", "public long read(@BytesLong long size)", "public long read(@NonNull byte[] buffer, @BytesLong long offset, @BytesLong long size)", "public long seek(@BytesLong long position)" ],
  "variableNames" : [ "PLAYBACK_STATUS_EMPTY", "PLAYBACK_STATUS_ALMOST_EMPTY", "PLAYBACK_STATUS_ALMOST_FULL", "PLAYBACK_STATUS_FULL", "TAG", "mNativeContext", "mListener", "mExecutor", "mUserId", "sInstantId", "mSegmentId", "mUnderflow", "mListenerLock" ]
}