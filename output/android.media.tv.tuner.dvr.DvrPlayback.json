{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/tuner/dvr/DvrPlayback.java",
  "packageName" : "android.media.tv.tuner.dvr",
  "className" : "DvrPlayback",
  "comment" : "\n * Digital Video Record (DVR) class which provides playback control on Demux's input buffer.\n *\n * <p>It's used to play recorded programs.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "PLAYBACK_STATUS_EMPTY",
    "type" : "int",
    "comment" : "\n     * The space of the playback is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "PLAYBACK_STATUS_ALMOST_EMPTY",
    "type" : "int",
    "comment" : "\n     * The space of the playback is almost empty.\n     *\n     * <p> the threshold is set in {@link DvrSettings}.\n     ",
    "links" : [ "android.media.tv.tuner.dvr.DvrSettings" ]
  }, {
    "name" : "PLAYBACK_STATUS_ALMOST_FULL",
    "type" : "int",
    "comment" : "\n     * The space of the playback is almost full.\n     *\n     * <p> the threshold is set in {@link DvrSettings}.\n     ",
    "links" : [ "android.media.tv.tuner.dvr.DvrSettings" ]
  }, {
    "name" : "PLAYBACK_STATUS_FULL",
    "type" : "int",
    "comment" : "\n     * The space of the playback is full.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnPlaybackStatusChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInstantId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSegmentId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnderflow",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeAttachFilter(Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeDetachFilter(Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeConfigureDvr(DvrSettings settings)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStartDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeStopDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeFlushDvr()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeSetFileDescriptor(int fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeRead(long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nativeRead(byte[] bytes, long offset, long size)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setListener(@NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void onPlaybackStatusChanged(int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int attachFilter(@NonNull Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Attaches a filter to DVR interface for playback.\n     *\n     * <p>This method will be deprecated. Now it's a no-op.\n     * <p>Filters opened by {@link Tuner#openFilter} are used for DVR playback.\n     *\n     * @param filter the filter to be attached.\n     * @return result status of the operation.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner#openFilter" ]
  }, {
    "name" : "public int detachFilter(@NonNull Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Detaches a filter from DVR interface.\n     *\n     * <p>This method will be deprecated. Now it's a no-op.\n     * <p>Filters opened by {@link Tuner#openFilter} are used for DVR playback.\n     *\n     * @param filter the filter to be detached.\n     * @return result status of the operation.\n     ",
    "links" : [ "android.media.tv.tuner.Tuner#openFilter" ]
  }, {
    "name" : "public int configure(@NonNull DvrSettings settings)",
    "returnType" : "int",
    "comment" : "\n     * Configures the DVR.\n     *\n     * @param settings the settings of the DVR interface.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int start()",
    "returnType" : "int",
    "comment" : "\n     * Starts DVR.\n     *\n     * <p>Starts consuming playback data or producing data for recording.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int stop()",
    "returnType" : "int",
    "comment" : "\n     * Stops DVR.\n     *\n     * <p>Stops consuming playback data or producing data for recording.\n     * <p>Does nothing if the filter is stopped or not started.</p>\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int flush()",
    "returnType" : "int",
    "comment" : "\n     * Flushed DVR data.\n     *\n     * <p>The data in DVR buffer is cleared.\n     *\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the DVR instance to release resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFileDescriptor(@NonNull ParcelFileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * Sets file descriptor to read data.\n     *\n     * <p>When a read operation of the filter object is happening, this method should not be\n     * called.\n     *\n     * @param fd the file descriptor to read data.\n     * @see #read(long)\n     * @see #read(byte[], long, long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long read(@BytesLong long size)",
    "returnType" : "long",
    "comment" : "\n     * Reads data from the file for DVR playback.\n     *\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long read(@NonNull byte[] bytes, @BytesLong long offset, @BytesLong long size)",
    "returnType" : "long",
    "comment" : "\n     * Reads data from the buffer for DVR playback and copies to the given byte array.\n     *\n     * @param bytes the byte array to store the data.\n     * @param offset the index of the first byte in {@code bytes} to copy to.\n     * @param size the maximum number of bytes to read.\n     * @return the number of bytes read.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "PLAYBACK_STATUS_EMPTY", "PLAYBACK_STATUS_ALMOST_EMPTY", "PLAYBACK_STATUS_ALMOST_FULL", "PLAYBACK_STATUS_FULL", "TAG", "mNativeContext", "mListener", "mExecutor", "mUserId", "sInstantId", "mSegmentId", "mUnderflow" ],
  "methodNames" : [ "private native int nativeAttachFilter(Filter filter)", "private native int nativeDetachFilter(Filter filter)", "private native int nativeConfigureDvr(DvrSettings settings)", "private native int nativeStartDvr()", "private native int nativeStopDvr()", "private native int nativeFlushDvr()", "private native int nativeClose()", "private native void nativeSetFileDescriptor(int fd)", "private native long nativeRead(long size)", "private native long nativeRead(byte[] bytes, long offset, long size)", "public void setListener(@NonNull Executor executor, @NonNull OnPlaybackStatusChangedListener listener)", "private void onPlaybackStatusChanged(int status)", "public int attachFilter(@NonNull Filter filter)", "public int detachFilter(@NonNull Filter filter)", "public int configure(@NonNull DvrSettings settings)", "public int start()", "public int stop()", "public int flush()", "public void close()", "public void setFileDescriptor(@NonNull ParcelFileDescriptor fd)", "public long read(@BytesLong long size)", "public long read(@NonNull byte[] bytes, @BytesLong long offset, @BytesLong long size)" ]
}