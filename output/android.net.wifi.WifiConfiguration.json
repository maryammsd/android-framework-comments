{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiConfiguration",
  "comment" : "\n * A class representing a configured Wi-Fi network, including the\n * security configuration.\n *\n * @deprecated Use {@link WifiNetworkSpecifier.Builder} to create {@link NetworkSpecifier} and\n * {@link WifiNetworkSuggestion.Builder} to create {@link WifiNetworkSuggestion}. This class can\n * still be used with privileged APIs such as\n * {@link WifiManager#addNetwork(WifiConfiguration)}.\n ",
  "links" : [ "android.net.wifi.WifiManager#addNetwork(WifiConfiguration)", "WifiNetworkSpecifier.Builder", "android.net.wifi.WifiNetworkSuggestion", "android.net.NetworkSpecifier", "WifiNetworkSuggestion.Builder" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACKUP_VERSION",
    "type" : "int",
    "comment" : "\n     * Current Version of the Backup Serializer.\n    ",
    "links" : [ ]
  }, {
    "name" : "ssidVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "bssidVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "pskVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "wepKeyVarNames",
    "type" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "wepTxKeyIdxVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "priorityVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "hiddenSSIDVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "pmfVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "updateIdentiferVarName",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INVALID_NETWORK_ID",
    "type" : "int",
    "comment" : "\n     * The network ID for an invalid network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_ONLY_NETWORK_ID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mPasspointManagementObjectTree",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_RANDOM_MAC_GENERATION_RETRY",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OPEN",
    "type" : "int",
    "comment" : " Security type for an open network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WEP",
    "type" : "int",
    "comment" : " Security type for a WEP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PSK",
    "type" : "int",
    "comment" : " Security type for a PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP",
    "type" : "int",
    "comment" : " Security type for an EAP network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_SAE",
    "type" : "int",
    "comment" : " Security type for an SAE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT",
    "type" : "int",
    "comment" : "\n     * Security type for a WPA3-Enterprise in 192-bit security network.\n     * This is the same as {@link #SECURITY_TYPE_EAP_SUITE_B} and uses the same value.\n     ",
    "links" : [ "#SECURITY_TYPE_EAP_SUITE_B" ]
  }, {
    "name" : "SECURITY_TYPE_EAP_SUITE_B",
    "type" : "int",
    "comment" : "\n     * Security type for a WPA3-Enterprise in 192-bit security network.\n     * @deprecated Use the {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT} constant\n     * (which is the same value).\n     ",
    "links" : [ "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT" ]
  }, {
    "name" : "SECURITY_TYPE_OWE",
    "type" : "int",
    "comment" : " Security type for an OWE network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_PSK",
    "type" : "int",
    "comment" : " Security type for a WAPI PSK network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WAPI_CERT",
    "type" : "int",
    "comment" : " Security type for a WAPI Certificate network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_EAP_WPA3_ENTERPRISE",
    "type" : "int",
    "comment" : " Security type for a WPA3-Enterprise network. ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OSEN",
    "type" : "int",
    "comment" : "\n     * Security type for an OSEN network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PASSPOINT_R1_R2",
    "type" : "int",
    "comment" : "\n     * Security type for a Passpoint R1/R2 network.\n     * Passpoint R1/R2 uses Enterprise security, where TKIP and WEP are not allowed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_PASSPOINT_R3",
    "type" : "int",
    "comment" : "\n     * Security type for a Passpoint R3 network.\n     * Passpoint R3 uses Enterprise security, where TKIP and WEP are not allowed,\n     * and PMF must be set to Required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_DPP",
    "type" : "int",
    "comment" : " Security type for Easy Connect (DPP) network ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_NUM",
    "type" : "int",
    "comment" : "\n     * This is used for the boundary check and should be the same as the last type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_NAMES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecurityParamsList",
    "type" : "List<SecurityParams>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_UID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "networkId",
    "type" : "int",
    "comment" : "\n     * The ID number that the supplicant uses to identify this\n     * network configuration entry. This must be passed as an argument\n     * to most calls into the supplicant.\n     ",
    "links" : [ ]
  }, {
    "name" : "status",
    "type" : "int",
    "comment" : "\n     * The current status of this network configuration entry.\n     * @see Status\n     ",
    "links" : [ ]
  }, {
    "name" : "SSID",
    "type" : "String",
    "comment" : "\n     * The network's SSID. Can either be a UTF-8 string,\n     * which must be enclosed in double quotation marks\n     * (e.g., {@code \"MyNetwork\"}), or a string of\n     * hex digits, which are not enclosed in quotes\n     * (e.g., {@code 01a243f405}).\n     ",
    "links" : [ ]
  }, {
    "name" : "BSSID",
    "type" : "String",
    "comment" : "\n     * When set, this network configuration entry should only be used when\n     * associating with the AP having the specified BSSID. The value is\n     * a string in the format of an Ethernet MAC address, e.g.,\n     * <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBssidAllowlist",
    "type" : "List<MacAddress>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptedPreSharedKey",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptedPreSharedKeyIv",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPreSharedKeyChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_2GHZ",
    "type" : "int",
    "comment" : "\n     * 2GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_5GHZ",
    "type" : "int",
    "comment" : "\n     * 5GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_60GHZ",
    "type" : "int",
    "comment" : "\n     * 60GHz band\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "AP_BAND_ANY",
    "type" : "int",
    "comment" : "\n     * Device is allowed to choose the optimal band (2Ghz or 5Ghz) based on device capability,\n     * operating country code and current radio conditions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "apBand",
    "type" : "int",
    "comment" : "\n     * The band which the AP resides on.\n     * One of {@link #AP_BAND_2GHZ}, {@link #AP_BAND_5GHZ}, or {@link #AP_BAND_ANY}.\n     * By default, {@link #AP_BAND_2GHZ} is chosen.\n     *\n     * @hide\n     ",
    "links" : [ "#AP_BAND_5GHZ", "#AP_BAND_2GHZ", "#AP_BAND_ANY" ]
  }, {
    "name" : "apChannel",
    "type" : "int",
    "comment" : "\n     * The channel which AP resides on,currently, US only\n     * 2G  1-11\n     * 5G  36,40,44,48,149,153,157,161,165\n     * 0 - find a random available channel according to the apBand\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "preSharedKey",
    "type" : "String",
    "comment" : "\n     * Pre-shared key for use with WPA-PSK. Either an ASCII string enclosed in\n     * double quotation marks (e.g., {@code \"abcdefghij\"} for PSK passphrase or\n     * a string of 64 hex digits for raw PSK.\n     * <p/>\n     * When the value of this key is read, the actual key is\n     * not returned, just a \"*\" if the key has a value, or the null\n     * string otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "wepKeys",
    "type" : "String[]",
    "comment" : "\n     * Four WEP keys. For each of the four values, provide either an ASCII\n     * string enclosed in double quotation marks (e.g., {@code \"abcdef\"})\n     * or a string of hex digits (e.g., {@code 0102030405}).\n     * <p/>\n     * When the value of one of these keys is read, the actual key is\n     * not returned, just a \"*\" if the key has a value, or the null\n     * string otherwise.\n     * @deprecated Due to security and performance limitations, use of WEP networks\n     * is discouraged.\n     ",
    "links" : [ ]
  }, {
    "name" : "wepTxKeyIndex",
    "type" : "int",
    "comment" : " Default WEP key index, ranging from 0 to 3.\n     * @deprecated Due to security and performance limitations, use of WEP networks\n     * is discouraged. ",
    "links" : [ ]
  }, {
    "name" : "priority",
    "type" : "int",
    "comment" : "\n     * Priority determines the preference given to a network by {@code wpa_supplicant}\n     * when choosing an access point with which to associate.\n     * @deprecated This field does not exist anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDeletionPriority",
    "type" : "int",
    "comment" : "\n     * The deletion priority of this configuration.\n     *\n     * Deletion priority is a non-negative value (default 0) indicating the priority for deletion\n     * when auto-pruning the amount of saved configurations. Networks with a lower value will be\n     * pruned before networks with a higher value.\n     ",
    "links" : [ ]
  }, {
    "name" : "hiddenSSID",
    "type" : "boolean",
    "comment" : "\n     * This is a network that does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "requirePmf",
    "type" : "boolean",
    "comment" : "\n     * True if the network requires Protected Management Frames (PMF), false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "updateIdentifier",
    "type" : "String",
    "comment" : "\n     * Update identifier, for Passpoint network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "allowedKeyManagement",
    "type" : "BitSet",
    "comment" : "\n     * The set of key management protocols supported by this configuration.\n     * See {@link KeyMgmt} for descriptions of the values.\n     * Defaults to WPA-PSK WPA-EAP.\n     ",
    "links" : [ "KeyMgmt" ]
  }, {
    "name" : "allowedProtocols",
    "type" : "BitSet",
    "comment" : "\n     * The set of security protocols supported by this configuration.\n     * See {@link Protocol} for descriptions of the values.\n     * Defaults to WPA RSN.\n     ",
    "links" : [ "Protocol" ]
  }, {
    "name" : "allowedAuthAlgorithms",
    "type" : "BitSet",
    "comment" : "\n     * The set of authentication protocols supported by this configuration.\n     * See {@link AuthAlgorithm} for descriptions of the values.\n     * Defaults to automatic selection.\n     ",
    "links" : [ "AuthAlgorithm" ]
  }, {
    "name" : "allowedPairwiseCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of pairwise ciphers for WPA supported by this configuration.\n     * See {@link PairwiseCipher} for descriptions of the values.\n     * Defaults to CCMP TKIP.\n     ",
    "links" : [ "PairwiseCipher" ]
  }, {
    "name" : "allowedGroupCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group ciphers supported by this configuration.\n     * See {@link GroupCipher} for descriptions of the values.\n     * Defaults to CCMP TKIP WEP104 WEP40.\n     ",
    "links" : [ "GroupCipher" ]
  }, {
    "name" : "allowedGroupManagementCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of group management ciphers supported by this configuration.\n     * See {@link GroupMgmtCipher} for descriptions of the values.\n     ",
    "links" : [ "GroupMgmtCipher" ]
  }, {
    "name" : "allowedSuiteBCiphers",
    "type" : "BitSet",
    "comment" : "\n     * The set of SuiteB ciphers supported by this configuration.\n     * To be used for WPA3-Enterprise mode. Set automatically by the framework based on the\n     * certificate type that is used in this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "enterpriseConfig",
    "type" : "WifiEnterpriseConfig",
    "comment" : "\n     * The enterprise configuration details specifying the EAP method,\n     * certificates and other settings associated with the EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "FQDN",
    "type" : "String",
    "comment" : "\n     * Fully qualified domain name of a Passpoint configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "providerFriendlyName",
    "type" : "String",
    "comment" : "\n     * Name of Passpoint credential provider\n     ",
    "links" : [ ]
  }, {
    "name" : "isHomeProviderNetwork",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if this network is provided by a home Passpoint provider or a roaming\n     * Passpoint provider.  This flag will be {@code true} if this network is provided by\n     * a home Passpoint provider and {@code false} if is provided by a roaming Passpoint provider\n     * or is a non-Passpoint network.\n     ",
    "links" : [ ]
  }, {
    "name" : "roamingConsortiumIds",
    "type" : "long[]",
    "comment" : "\n     * Roaming Consortium Id list for Passpoint credential; identifies a set of networks where\n     * Passpoint credential will be considered valid\n     ",
    "links" : [ ]
  }, {
    "name" : "shared",
    "type" : "boolean",
    "comment" : "\n     * True if this network configuration is visible to and usable by other users on the\n     * same device, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mIpConfiguration",
    "type" : "IpConfiguration",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "dhcpServer",
    "type" : "String",
    "comment" : "\n     * dhcp server MAC address if known\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultGwMacAddress",
    "type" : "String",
    "comment" : "\n     * default Gateway MAC address if known\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "validatedInternetAccess",
    "type" : "boolean",
    "comment" : "\n     * last time we connected, this configuration had validated internet access\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "dtimInterval",
    "type" : "int",
    "comment" : "\n     * The number of beacon intervals between Delivery Traffic Indication Maps (DTIM)\n     * This value is populated from scan results that contain Beacon Frames, which are infrequent.\n     * The value is not guaranteed to be set or current (Although it SHOULDNT change once set)\n     * Valid values are from 1 - 255. Initialized here as 0, use this to check if set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isLegacyPasspointConfig",
    "type" : "boolean",
    "comment" : "\n     * Flag indicating if this configuration represents a legacy Passpoint configuration\n     * (Release N or older).  This is used for migrating Passpoint configuration from N to O.\n     * This will no longer be needed after O.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "creatorUid",
    "type" : "int",
    "comment" : "\n     * Uid of app creating the configuration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastConnectUid",
    "type" : "int",
    "comment" : "\n     * Uid of last app issuing a connection related command\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastUpdateUid",
    "type" : "int",
    "comment" : "\n     * Uid of last app modifying the configuration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "creatorName",
    "type" : "String",
    "comment" : "\n     * Universal name for app creating the configuration\n     *    see {@link PackageManager#getNameForUid(int)}\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getNameForUid(int)" ]
  }, {
    "name" : "lastUpdateName",
    "type" : "String",
    "comment" : "\n     * Universal name for app updating the configuration\n     *    see {@link PackageManager#getNameForUid(int)}\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getNameForUid(int)" ]
  }, {
    "name" : "carrierId",
    "type" : "int",
    "comment" : "\n     * The carrier ID identifies the operator who provides this network configuration.\n     *    see {@link TelephonyManager#getSimCarrierId()}\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#getSimCarrierId()" ]
  }, {
    "name" : "subscriptionId",
    "type" : "int",
    "comment" : "\n     * The subscription ID identifies the SIM card for which this network configuration is valid.\n     * See {@link SubscriptionInfo#getSubscriptionId()}\n     * @hide\n     ",
    "links" : [ "android.telephony.SubscriptionInfo#getSubscriptionId()" ]
  }, {
    "name" : "mSubscriptionGroup",
    "type" : "ParcelUuid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowAutojoin",
    "type" : "boolean",
    "comment" : "\n     * Auto-join is allowed by user for this network.\n     * Default true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mWifi7Enabled",
    "type" : "boolean",
    "comment" : "\n     * Wi-Fi7 is enabled by user for this network.\n     * Default true.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_RSSI",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "numNoInternetAccessReports",
    "type" : "int",
    "comment" : "\n     * Number of reports indicating no Internet Access\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "noInternetAccessExpected",
    "type" : "boolean",
    "comment" : "\n     * The WiFi configuration is expected not to have Internet access (e.g., a wireless printer, a\n     * Chromecast hotspot, etc.). This will be set if the user explicitly confirms a connection to\n     * this configuration and selects \"don't ask again\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "osu",
    "type" : "boolean",
    "comment" : "\n     * This Wifi configuration is expected for OSU(Online Sign Up) of Passpoint Release 2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastConnected",
    "type" : "long",
    "comment" : "\n     * Last time the system was connected to this configuration represented as the difference,\n     * measured in milliseconds, between the last connected time and midnight, January 1, 1970 UTC.\n     * <P>\n     * Note that this information is only in memory will be cleared (reset to 0) for all\n     * WifiConfiguration(s) after a reboot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastDisconnected",
    "type" : "long",
    "comment" : "\n     * Last time the system was disconnected to this configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastUpdated",
    "type" : "long",
    "comment" : "\n     * Last time this configuration was updated or created.\n     * Note: This field only exists in-memory and is not persisted in WifiConfigStore.xml for\n     *       privacy reasons.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numRebootsSinceLastUse",
    "type" : "int",
    "comment" : "\n     * Number of reboots since this config was last used (either connected or updated).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "selfAdded",
    "type" : "boolean",
    "comment" : "\n     * Set if the configuration was self added by the framework\n     * This boolean is cleared if we get a connect/save/ update or\n     * any wifiManager command that indicate the user interacted with the configuration\n     * since we will now consider that the configuration belong to him.\n     * @deprecated only kept for @UnsupportedAppUsage\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "peerWifiConfiguration",
    "type" : "String",
    "comment" : "\n     * Peer WifiConfiguration this WifiConfiguration was added for\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ephemeral",
    "type" : "boolean",
    "comment" : "\n     * Indicate that a WifiConfiguration is temporary and should not be saved\n     * nor considered by AutoJoin.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "trusted",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether the network is trusted or not. Networks are considered trusted\n     * if the user explicitly allowed this network connection.\n     * This bit can be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setUntrusted(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setUntrusted(boolean)" ]
  }, {
    "name" : "oemPaid",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether the network is oem paid or not. Networks are considered oem paid\n     * if the corresponding connection is only available to system apps.\n     *\n     * This bit can only be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setOemPaid(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setOemPaid(boolean)" ]
  }, {
    "name" : "oemPrivate",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether the network is oem private or not. Networks are considered oem private\n     * if the corresponding connection is only available to system apps.\n     *\n     * This bit can only be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setOemPrivate(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setOemPrivate(boolean)" ]
  }, {
    "name" : "carrierMerged",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether or not the network is a carrier merged network.\n     * This bit can only be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setCarrierMerged(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setCarrierMerged(boolean)" ]
  }, {
    "name" : "fromWifiNetworkSuggestion",
    "type" : "boolean",
    "comment" : "\n     * True if this Wifi configuration is created from a {@link WifiNetworkSuggestion},\n     * false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiNetworkSuggestion" ]
  }, {
    "name" : "fromWifiNetworkSpecifier",
    "type" : "boolean",
    "comment" : "\n     * True if this Wifi configuration is created from a {@link WifiNetworkSpecifier},\n     * false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiNetworkSpecifier" ]
  }, {
    "name" : "meteredHint",
    "type" : "boolean",
    "comment" : "\n     * True if the creator of this configuration has expressed that it\n     * should be considered metered, false otherwise.\n     *\n     * @see #isMetered(WifiConfiguration, WifiInfo)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsRepeaterEnabled",
    "type" : "boolean",
    "comment" : "\n     * True if this configuration is intended to be repeater enabled to expand coverage.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIpProvisioningTimedOut",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "restricted",
    "type" : "boolean",
    "comment" : "\n     * Indicate whether the network is restricted or not.\n     *\n     * This bit can only be used by suggestion network, see\n     * {@link WifiNetworkSuggestion.Builder#setRestricted(boolean)}\n     * @hide\n     ",
    "links" : [ "WifiNetworkSuggestion.Builder#setRestricted(boolean)" ]
  }, {
    "name" : "METERED_OVERRIDE_NONE",
    "type" : "int",
    "comment" : "\n     * No metered override.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METERED_OVERRIDE_METERED",
    "type" : "int",
    "comment" : "\n     * Override network to be metered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METERED_OVERRIDE_NOT_METERED",
    "type" : "int",
    "comment" : "\n     * Override network to be unmetered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "meteredOverride",
    "type" : "int",
    "comment" : "\n     * Indicates if the end user has expressed an explicit opinion about the\n     * meteredness of this network, such as through the Settings app.\n     * This value is one of {@link #METERED_OVERRIDE_NONE}, {@link #METERED_OVERRIDE_METERED},\n     * or {@link #METERED_OVERRIDE_NOT_METERED}.\n     * <p>\n     * This should always override any values from {@link #meteredHint} or\n     * {@link WifiInfo#getMeteredHint()}.\n     *\n     * By default this field is set to {@link #METERED_OVERRIDE_NONE}.\n     *\n     * @see #isMetered(WifiConfiguration, WifiInfo)\n     * @hide\n     ",
    "links" : [ "#METERED_OVERRIDE_NONE", "#meteredHint", "#METERED_OVERRIDE_NOT_METERED", "android.net.wifi.WifiInfo#getMeteredHint()", "#METERED_OVERRIDE_METERED" ]
  }, {
    "name" : "useExternalScores",
    "type" : "boolean",
    "comment" : "\n     * Setting this value will force scan results associated with this configuration to\n     * be included in the bucket of networks that are externally scored.\n     * If not set, associated scan results will be treated as legacy saved networks and\n     * will take precedence over networks in the scored category.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numScorerOverride",
    "type" : "int",
    "comment" : "\n     * Number of time the scorer overrode a the priority based choice, when comparing two\n     * WifiConfigurations, note that since comparing WifiConfiguration happens very often\n     * potentially at every scan, this number might become very large, even on an idle\n     * system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numScorerOverrideAndSwitchedNetwork",
    "type" : "int",
    "comment" : "\n     * Number of time the scorer overrode a the priority based choice, and the comparison\n     * triggered a network switch\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numAssociation",
    "type" : "int",
    "comment" : "\n     * Number of times we associated to this configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_NONE",
    "type" : "int",
    "comment" : "\n     * Use factory MAC when connecting to this network\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Generate a randomized MAC once and reuse it for all connections to this network\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_NON_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Use a randomly generated MAC address for connections to this network.\n     * This option does not persist the randomized MAC address.\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_AUTO",
    "type" : "int",
    "comment" : "\n     * Let the wifi framework automatically decide the MAC randomization strategy.\n     ",
    "links" : [ ]
  }, {
    "name" : "macRandomizationSetting",
    "type" : "int",
    "comment" : "\n     * Level of MAC randomization for this network.\n     * One of {@link #RANDOMIZATION_NONE}, {@link #RANDOMIZATION_AUTO},\n     * {@link #RANDOMIZATION_PERSISTENT} or {@link #RANDOMIZATION_NON_PERSISTENT}.\n     * By default this field is set to {@link #RANDOMIZATION_AUTO}.\n     * @hide\n     ",
    "links" : [ "#RANDOMIZATION_NON_PERSISTENT", "#RANDOMIZATION_NONE", "#RANDOMIZATION_PERSISTENT", "#RANDOMIZATION_AUTO" ]
  }, {
    "name" : "mRandomizedMacAddress",
    "type" : "MacAddress",
    "comment" : "\n     * Randomized MAC address to use with this particular network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "randomizedMacExpirationTimeMs",
    "type" : "long",
    "comment" : "\n     * The wall clock time of when |mRandomizedMacAddress| should be re-randomized in non-persistent\n     * MAC randomization mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "randomizedMacLastModifiedTimeMs",
    "type" : "long",
    "comment" : "\n     * The wall clock time of when |mRandomizedMacAddress| is last modified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsSendDhcpHostnameEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDppConfigurator",
    "type" : "boolean",
    "comment" : "\n     * This network supports DPP AKM and the device is configured to\n     * onboard peer enrollee devices with {@link #SECURITY_TYPE_DPP}\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_DPP" ]
  }, {
    "name" : "mDppPrivateEcKey",
    "type" : "byte[]",
    "comment" : "\n     * Private elliptic curve key used by DPP Configurator to generate other DPP Keys\n     * for DPP-AKM based network configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDppConnector",
    "type" : "byte[]",
    "comment" : "\n     * Signed DPP connector. The connector is used by a pair of Enrollee devices to establish\n     * a security association using the DPP Introduction Protocol.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDppCSignKey",
    "type" : "byte[]",
    "comment" : "\n     * The public signing key of the DPP configurator.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDppNetAccessKey",
    "type" : "byte[]",
    "comment" : "\n     * DPP network access key (own private key)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HOME_NETWORK_RSSI_BOOST",
    "type" : "int",
    "comment" : " @hide\n     * Boost given to RSSI on a home network for the purpose of calculating the score\n     * This adds stickiness to home networks, as defined by:\n     * - less than 4 known BSSIDs\n     * - PSK only\n     * - TODO: add a test to verify that all BSSIDs are behind same gateway\n     **",
    "links" : [ ]
  }, {
    "name" : "mNetworkSelectionStatus",
    "type" : "NetworkSelectionStatus",
    "comment" : "\n     * network selection related member\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "recentFailure",
    "type" : "RecentFailure",
    "comment" : "  rename to mRecentFailure",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_NONE",
    "type" : "int",
    "comment" : "\n     * No recent failure, or no specific reason given for the recent connection failure\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA",
    "type" : "int",
    "comment" : "\n     * Connection to this network recently failed due to Association Rejection Status 17\n     * (AP is full)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_REFUSED_TEMPORARILY",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP.\n     * IEEE 802.11 association status code 30.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_POOR_CHANNEL_CONDITIONS",
    "type" : "int",
    "comment" : "\n     * Failed to connect because of excess frame loss and/or poor channel conditions.\n     * IEEE 802.11 association status code 34.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_DISCONNECTION_AP_BUSY",
    "type" : "int",
    "comment" : "\n     * Disconnected by the AP because the AP can't handle all the associated stations.\n     * IEEE 802.11 disconnection reason code 5.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * MBO association disallowed Reason code: 1 - Unspecified or 0/6-255 - Reserved.\n     * Details in MBO spec v1.2, 4.2.4 Table 13: MBO Association Disallowed attribute\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_MAX_NUM_STA_ASSOCIATED",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * MBO association disallowed Reason code: 2 - Maximum number of associated stations reached.\n     * Details in MBO spec v1.2, 4.2.4 Table 13: MBO Association Disallowed attribute\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AIR_INTERFACE_OVERLOADED",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * MBO association disallowed Reason code: 3 - Air interface is overloaded.\n     * Details in MBO spec v1.2, 4.2.4 Table 13: MBO Association Disallowed attribute\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AUTH_SERVER_OVERLOADED",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * MBO association disallowed Reason code: 4 - Authentication server overloaded.\n     * Details in MBO spec v1.2, 4.2.4 Table 13: MBO Association Disallowed attribute\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_INSUFFICIENT_RSSI",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * MBO association disallowed Reason code: 5 - Insufficient RSSI.\n     * Details in MBO spec v1.2, 4.2.4 Table 13: MBO Association Disallowed attribute\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_OCE_RSSI_BASED_ASSOCIATION_REJECTION",
    "type" : "int",
    "comment" : "\n     * Failed to connect because the association is rejected by the AP with\n     * OCE rssi based association rejection attribute.\n     * Details in OCE spec v1.0, 3.14 Presence of OCE rssi based association rejection attribute.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECENT_FAILURE_NETWORK_NOT_FOUND",
    "type" : "int",
    "comment" : "\n     * Failed to connect because supplicant failed to find a network in scan result which\n     * matches the network requested by framework for connection (including network capabilities).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "linkedConfigurations",
    "type" : "HashMap<String, Integer>",
    "comment" : "\n     * Linked Configurations: represent the set of Wificonfigurations that are equivalent\n     * regarding roaming and auto-joining.\n     * The linked configuration may or may not have same SSID, and may or may not have same\n     * credentials.\n     * For instance, linked configurations will have same defaultGwMacAddress or same dhcp server.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : " List of {@link OuiKeyedData} providing vendor-specific configuration data. ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiConfiguration>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "mPasspointUniqueId",
    "type" : "String",
    "comment" : "\n     * Passpoint Unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isMostRecentlyConnected",
    "type" : "boolean",
    "comment" : "\n     * If network is one of the most recently connected.\n     * For framework internal use only. Do not parcel.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isCurrentlyConnected",
    "type" : "boolean",
    "comment" : "\n     * Whether the network is currently connected or not.\n     * Note: May be true even if {@link #status} is not CURRENT, since a config\n     *       can be connected, but disabled for network selection.\n     * TODO (b/235236813): This field may be redundant, since we have information\n     *       like {@link #status} and quality network selection status. May need\n     *       to clean up the fields used for network selection.\n     * @hide\n     ",
    "links" : [ "#status" ]
  }, {
    "name" : "mIsUserSelected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void updateLegacySecurityParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSecurityParams(@SecurityType int securityType)",
    "returnType" : "void",
    "comment" : "\n     * Set the various security params to correspond to the provided security type.\n     * This is accomplished by setting the various BitSets exposed in WifiConfiguration.\n     * <br>\n     * This API would clear existing security types and add a default one.\n     *\n     * Before calling this API with {@link #SECURITY_TYPE_DPP} as securityType,\n     * call {@link WifiManager#isEasyConnectDppAkmSupported() to know whether this security type is\n     * supported or not.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_DPP},\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "android.net.wifi.WifiManager#isEasyConnectDppAkmSupported()", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public void setSecurityParams(@NonNull BitSet givenAllowedKeyManagement)",
    "returnType" : "void",
    "comment" : "\n     * Set security params by the given key management mask.\n     *\n     * @param givenAllowedKeyManagement the given allowed key management mask.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecurityParams(SecurityParams params)",
    "returnType" : "void",
    "comment" : "\n     * Add the various security params.\n     * <br>\n     * This API would clear existing security types and add a default one.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecurityParams(@NonNull List<SecurityParams> securityParamsList)",
    "returnType" : "void",
    "comment" : "\n     * Set the security params by the given security params list.\n     *\n     * This will overwrite existing security params list directly.\n     *\n     * @param securityParamsList the desired security params list.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSecurityParams(@SecurityType int securityType)",
    "returnType" : "void",
    "comment" : "\n     * Add the various security params to correspond to the provided security type.\n     * This is accomplished by setting the various BitSets exposed in WifiConfiguration.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_DPP},\n     *\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public void addSecurityParams(@NonNull SecurityParams newParams)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWpa3EnterpriseConfiguration()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWpaPersonalOnlyConfiguration()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the configuration is a WPA-Personal network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void convertLegacyFieldsToSecurityParamsIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * If there is no security params, generate one according to legacy fields.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSecurityParamsEnabled(@SecurityType int securityType, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Disable the various security params to correspond to the provided security type.\n     * This is accomplished by setting the various BitSets exposed in WifiConfiguration.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_DPP},\n     *\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public void setSecurityParamsIsAddedByAutoUpgrade(@SecurityType int securityType, boolean isAddedByAutoUpgrade)",
    "returnType" : "void",
    "comment" : "\n     * Set whether a type is added by auto-upgrade.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     *\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public SecurityParams getSecurityParams(@SecurityType int securityType)",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Get the specific security param.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_DPP},\n     *\n     * @return the copy of specific security params if found; otherwise null.\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public boolean isSecurityType(@SecurityType int securityType)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate whether this configuration is the specific security type.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_DPP},\n     *\n     * @return true if there is a security params matches the type.\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE" ]
  }, {
    "name" : "public List<SecurityParams> getSecurityParamsList()",
    "returnType" : "List<SecurityParams>",
    "comment" : "\n     * Get the security params list of this configuration.\n     *\n     * The returning list is a priority list, the first is the lowest priority and default one.\n     *\n     * @return this list of security params.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SecurityParams getDefaultSecurityParams()",
    "returnType" : "SecurityParams",
    "comment" : "\n     * Get the default params which is the same as the legacy fields.\n     *\n     * @return the default security params.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableFils(boolean enableFilsSha256, boolean enableFilsSha384)",
    "returnType" : "void",
    "comment" : "\n     * Enable the support of Fast Initial Link Set-up (FILS).\n     *\n     * FILS can be applied to all security types.\n     * @param enableFilsSha256 Enable FILS SHA256.\n     * @param enableFilsSha384 Enable FILS SHA256.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilsSha256Enabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate FILS SHA256 is enabled.\n     *\n     * @return true if FILS SHA256 is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilsSha384Enabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate FILS SHA384 is enabled.\n     *\n     * @return true if FILS SHA384 is enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableSuiteBCiphers(boolean enableEcdheEcdsa, boolean enableEcdheRsa)",
    "returnType" : "void",
    "comment" : "\n     * Enable Suite-B ciphers.\n     *\n     * @param enableEcdheEcdsa enable Diffie-Hellman with Elliptic Curve ECDSA cipher support.\n     * @param enableEcdheRsa enable Diffie-Hellman with RSA cipher support.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSuiteBCipherEcdheEcdsaEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate ECDHE_ECDSA is enabled.\n     *\n     * @return true if enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSuiteBCipherEcdheRsaEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate ECDHE_RSA is enabled.\n     *\n     * @return true if enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableSaeH2eOnlyMode(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Set SAE Hash-toElement only mode enabled.\n     * Before calling this API, call {@link WifiManager#isWpa3SaeH2eSupported()\n     * to know whether WPA3 SAE Hash-toElement is supported or not.\n     *\n     * @param enable true if enabled; false otherwise.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#isWpa3SaeH2eSupported()" ]
  }, {
    "name" : "public void enableSaePkOnlyMode(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Set SAE Public-Key only mode enabled.\n     * Before calling this API, call {@link WifiManager#isWpa3SaePkSupported()\n     * to know whether WPA3 SAE Public-Key is supported or not.\n     *\n     * @param enable true if enabled; false otherwise.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#isWpa3SaePkSupported()" ]
  }, {
    "name" : "public void setBssidAllowlist(@Nullable List<MacAddress> bssidAllowlist)",
    "returnType" : "void",
    "comment" : "\n     * Set a list of BSSIDs to control if this network configuration entry should be used to\n     * associate an AP.\n     * <ul>\n     * <li>If set with {@code null}, then there are no restrictions on the connection. The\n     * configuration will associate to any AP.</li>\n     * <li>If set to an empty list then the configuration will not associate to any AP.</li>\n     * <li>If set to a non-empty list then the configuration will only associate to APs whose BSSID\n     * is on the list.</li>\n     * </ul>\n     * @param bssidAllowlist A list of {@link MacAddress} representing the BSSID of APs,\n     * {@code null} to allow all BSSIDs (no restriction).\n     * @hide\n     ",
    "links" : [ "android.net.MacAddress" ]
  }, {
    "name" : "public List<MacAddress> getBssidAllowlist()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * Get a list of BSSIDs specified on this network configuration entry, set by\n     * {@link #setBssidAllowlist(List)}.\n     * @return A list of {@link MacAddress} representing BSSID to allow associate, {@code null} for\n     * allowing all BSSIDs (no restriction).\n     * @hide\n     ",
    "links" : [ "#setBssidAllowlist(List)", "android.net.MacAddress" ]
  }, {
    "name" : "public List<MacAddress> getBssidAllowlistInternal()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeletionPriority(int priority) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Sets the deletion priority of this configuration.\n     *\n     * Deletion priority is a non-negative value (default 0) indicating the priority for deletion\n     * when auto-pruning the amount of saved configurations. Networks with a lower value will be\n     * pruned before networks with a higher value.\n     *\n     * @param priority non-negative deletion priority\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeletionPriority()",
    "returnType" : "int",
    "comment" : "\n     * Returns the deletion priority of this configuration.\n     *\n     * Deletion priority is a non-negative value (default 0) indicating the priority for deletion\n     * when auto-pruning the amount of saved configurations. Networks with a lower value will be\n     * pruned before networks with a higher value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIpProvisioningTimedOut(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIpProvisioningTimedOut()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNoInternetAccess()",
    "returnType" : "boolean",
    "comment" : "\n     * The WiFi configuration had no internet access the last time we connected to it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNoInternetAccessExpected()",
    "returnType" : "boolean",
    "comment" : "\n     * The WiFi configuration is expected not to have Internet access (e.g., a wireless printer, a\n     * Chromecast hotspot, etc.). This will be set if the user explicitly confirms a connection to\n     * this configuration and selects \"don't ask again\".\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEphemeral()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate that a WifiConfiguration is temporary and should not be saved\n     * nor considered by AutoJoin.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRepeaterEnabled(boolean isRepeaterEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this configuration is intended to be repeater enabled for expanded coverage.\n     *\n     * @param isRepeaterEnabled true if this network is intended to be repeater enabled,\n     *        false otherwise.\n     *\n     * This request is only accepted if the caller is holding\n     * {@link android.Manifest.permission#NETWORK_SETTINGS}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#NETWORK_SETTINGS" ]
  }, {
    "name" : "public boolean isRepeaterEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if this configuration is intended to be repeater enabled for expanded coverage.\n     *\n     * @return true if this network is intended to be repeater enabled, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMetered(@Nullable WifiConfiguration config, @Nullable WifiInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * Blend together all the various opinions to decide if the given network\n     * should be considered metered or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasWepKeys()",
    "returnType" : "boolean",
    "comment" : " Check whether wep keys exist. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpenNetwork()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this WiFi config is for an Open or Enhanced Open network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)",
    "returnType" : "void",
    "comment" : "\n     * Set the MAC randomization setting for this network.\n     * <p>\n     * Caller must satify one of the following conditions:\n     * </p>\n     * <ul>\n     * <li>Have {@code android.Manifest.permission#NETWORK_SETTINGS} permission.</li>\n     * <li>Have {@code android.Manifest.permission#NETWORK_SETUP_WIZARD} permission.</li>\n     * <li>Be in Demo Mode.</li>\n     * <li>Be the creator adding or updating a passpoint network.</li>\n     * <li>Be an admin updating their own network.</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMacRandomizationSetting()",
    "returnType" : "int",
    "comment" : "\n     * Get the MAC randomization setting for this network.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidMacAddressForRandomization(MacAddress mac)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given MAC address can be used for Connected Mac Randomization\n     * by verifying that it is non-null, unicast, locally assigned, and not default mac.\n     * @param mac MacAddress to check\n     * @return true if mac is good to use\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getRandomizedMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns MAC address set to be the local randomized MAC address.\n     * Depending on user preference, the device may or may not use the returned MAC address for\n     * connections to this network.\n     * <p>\n     * Information is restricted to Device Owner, Profile Owner, and Carrier apps\n     * (which will only obtain addresses for configurations which they create). Other callers\n     * will receive a default \"02:00:00:00:00:00\" MAC address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRandomizedMacAddress(@NonNull MacAddress mac)",
    "returnType" : "void",
    "comment" : "\n     * @param mac MacAddress to change into\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSendDhcpHostnameEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether to send the hostname of the device to this network's DHCP server.\n     *\n     * @param enabled {@code true} to send the hostname during DHCP,\n     *             {@code false} to not send the hostname during DHCP.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSendDhcpHostnameEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether to send the hostname of the device to this network's DHCP server.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDppConnectionKeys(byte[] connector, byte[] cSignKey, byte[] netAccessKey)",
    "returnType" : "void",
    "comment" : "\n     * Set DPP Connection keys which are used for network access.\n     * This is required for SECURITY_TYPE_DPP network connection.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDppConfigurator(byte[] ecKey)",
    "returnType" : "void",
    "comment" : "\n     * Allow this profile as configurable DPP profile.\n     * This is required to allow SECURITY_TYPE_DPP profile to be eligible for Configuration\n     * of DPP-Enrollees.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDppConfigurator()",
    "returnType" : "boolean",
    "comment" : "\n     * To check if this WifiConfiguration supports configuring a peer Enrollee device with\n     * SECURITY_TYPE_DPP\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDppPrivateEcKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get private elliptic curve key used by DPP Configurator to generate other DPP Keys\n     * for DPP-AKM based network configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDppConnector()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get DPP signed connector. The connector is used by a pair of Enrollee devices to establish\n     * a security association using the DPP Introduction Protocol.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDppCSignKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get public signing key of the DPP configurator. This key is used by provisioned devices\n     * to verify Connectors of other devices are signed by the same Configurator. The configurator\n     * derives and sets the C-sign-key in each DPP Configuration object.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getDppNetAccessKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get DPP network access key. Own private key used to generate common secret, PMK.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRecentFailureReason()",
    "returnType" : "int",
    "comment" : "\n     * Get the failure reason for the most recent connection attempt, or\n     * {@link #RECENT_FAILURE_NONE} if there was no failure.\n     *\n     * Failure reasons include:\n     * {@link #RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA}\n     * {@link #RECENT_FAILURE_REFUSED_TEMPORARILY}\n     * {@link #RECENT_FAILURE_POOR_CHANNEL_CONDITIONS}\n     * {@link #RECENT_FAILURE_DISCONNECTION_AP_BUSY}\n     * {@link #RECENT_FAILURE_MBO_ASSOC_DISALLOWED_UNSPECIFIED}\n     * {@link #RECENT_FAILURE_MBO_ASSOC_DISALLOWED_MAX_NUM_STA_ASSOCIATED}\n     * {@link #RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AIR_INTERFACE_OVERLOADED}\n     * {@link #RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AUTH_SERVER_OVERLOADED}\n     * {@link #RECENT_FAILURE_MBO_ASSOC_DISALLOWED_INSUFFICIENT_RSSI}\n     * {@link #RECENT_FAILURE_OCE_RSSI_BASED_ASSOCIATION_REJECTION}\n     * {@link #RECENT_FAILURE_NETWORK_NOT_FOUND}\n     * @hide\n     ",
    "links" : [ "#RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA", "#RECENT_FAILURE_MBO_ASSOC_DISALLOWED_INSUFFICIENT_RSSI", "#RECENT_FAILURE_REFUSED_TEMPORARILY", "#RECENT_FAILURE_POOR_CHANNEL_CONDITIONS", "#RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AIR_INTERFACE_OVERLOADED", "#RECENT_FAILURE_DISCONNECTION_AP_BUSY", "#RECENT_FAILURE_MBO_ASSOC_DISALLOWED_UNSPECIFIED", "#RECENT_FAILURE_NONE", "#RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AUTH_SERVER_OVERLOADED", "#RECENT_FAILURE_NETWORK_NOT_FOUND", "#RECENT_FAILURE_OCE_RSSI_BASED_ASSOCIATION_REJECTION", "#RECENT_FAILURE_MBO_ASSOC_DISALLOWED_MAX_NUM_STA_ASSOCIATED" ]
  }, {
    "name" : "public NetworkSelectionStatus getNetworkSelectionStatus()",
    "returnType" : "NetworkSelectionStatus",
    "comment" : "\n     * Get the network selection status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkSelectionStatus(@NonNull NetworkSelectionStatus status)",
    "returnType" : "void",
    "comment" : "\n     * Set the network selection status.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspoint()",
    "returnType" : "boolean",
    "comment" : "\n     * Identify if this configuration represents a Passpoint network\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLinked(WifiConfiguration config)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper function, identify if a configuration is linked\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnterprise()",
    "returnType" : "boolean",
    "comment" : "\n     * Helper function, idenfity if a configuration should be treated as an enterprise network\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String logTimeOfDay(long millis)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPrintableSsid()",
    "returnType" : "String",
    "comment" : "\n     * Get the SSID in a human-readable format, with all additional formatting removed\n     * e.g. quotation marks around the SSID, \"P\" prefix\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getKeyIdForCredentials(WifiConfiguration current)",
    "returnType" : "String",
    "comment" : "\n     * Get an identifier for associating credentials with this config\n     * @param current configuration contains values for additional fields\n     *                that are not part of this configuration. Used\n     *                when a config with some fields is passed by an application.\n     * @throws IllegalStateException if config is invalid for key id generation\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String trimStringForKeyId(String string)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static BitSet readBitSet(Parcel src)",
    "returnType" : "BitSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBitSet(Parcel dest, BitSet set)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAuthType()",
    "returnType" : "int",
    "comment" : "\n     * Get the authentication type of the network.\n     * @return One of the {@link KeyMgmt} constants. e.g. {@link KeyMgmt#WPA2_PSK}.\n     * @throws IllegalStateException if config is invalid for authentication type.\n     * @hide\n     ",
    "links" : [ "KeyMgmt", "#WPA2_PSK" ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n     * Return a String that can be used to uniquely identify this WifiConfiguration.\n     * <br />\n     * Note: Do not persist this value! This value is not guaranteed to remain backwards compatible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNetworkKey()",
    "returnType" : "String",
    "comment" : "\n     * Get a unique key which represent this Wi-Fi network. If two profiles are for\n     * the same Wi-Fi network, but from different provider, they would have the same key.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSsidAndSecurityTypeString()",
    "returnType" : "String",
    "comment" : " @hide\n     *  return the SSID + security type in String format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration getIpConfiguration()",
    "returnType" : "IpConfiguration",
    "comment" : "\n     * Get the IpConfiguration object associated with this WifiConfiguration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIpConfiguration(@Nullable IpConfiguration ipConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link IpConfiguration} for this network.\n     *\n     * @param ipConfiguration a {@link IpConfiguration} to use for this Wi-Fi configuration, or\n     *                        {@code null} to use the default configuration.\n     ",
    "links" : [ "android.net.IpConfiguration" ]
  }, {
    "name" : "public StaticIpConfiguration getStaticIpConfiguration()",
    "returnType" : "StaticIpConfiguration",
    "comment" : "\n     * Get the {@link StaticIpConfiguration} for this network.\n     * @return the {@link StaticIpConfiguration}, or null if unset.\n     * @hide\n     ",
    "links" : [ "android.net.StaticIpConfiguration" ]
  }, {
    "name" : "public void setStaticIpConfiguration(StaticIpConfiguration staticIpConfiguration)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration.IpAssignment getIpAssignment()",
    "returnType" : "IpConfiguration.IpAssignment",
    "comment" : "\n     * Get the {@link IpConfiguration.IpAssignment} for this network.\n     * @hide\n     ",
    "links" : [ "IpConfiguration.IpAssignment" ]
  }, {
    "name" : "public void setIpAssignment(IpConfiguration.IpAssignment ipAssignment)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IpConfiguration.ProxySettings getProxySettings()",
    "returnType" : "IpConfiguration.ProxySettings",
    "comment" : "\n     * Get the {@link IpConfiguration.ProxySettings} for this network.\n     * @hide\n     ",
    "links" : [ "IpConfiguration.ProxySettings" ]
  }, {
    "name" : "public void setProxySettings(IpConfiguration.ProxySettings proxySettings)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ProxyInfo getHttpProxy()",
    "returnType" : "ProxyInfo",
    "comment" : "\n     * Returns the HTTP proxy used by this object.\n     * @return a {@link ProxyInfo httpProxy} representing the proxy specified by this\n     *                  WifiConfiguration, or {@code null} if no proxy is specified.\n     ",
    "links" : [ "android.net.ProxyInfo" ]
  }, {
    "name" : "public void setHttpProxy(ProxyInfo httpProxy)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link ProxyInfo} for this WifiConfiguration. This method should only be used by a\n     * device owner or profile owner. When other apps attempt to save a {@link WifiConfiguration}\n     * with modified proxy settings, the methods {@link WifiManager#addNetwork} and\n     * {@link WifiManager#updateNetwork} fail and return {@code -1}.\n     *\n     * @param httpProxy {@link ProxyInfo} representing the httpProxy to be used by this\n     *                  WifiConfiguration. Setting this to {@code null} will explicitly set no\n     *                  proxy, removing any proxy that was previously set.\n     ",
    "links" : [ "android.net.wifi.WifiManager#addNetwork", "android.net.wifi.WifiManager#updateNetwork", "android.net.ProxyInfo", "android.net.wifi.WifiConfiguration" ]
  }, {
    "name" : "public void setProxy(@NonNull ProxySettings settings, @NonNull ProxyInfo proxy)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link ProxySettings} and {@link ProxyInfo} for this network.\n     * @hide\n     ",
    "links" : [ "android.net.IpConfiguration.ProxySettings", "android.net.ProxyInfo" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointManagementObjectTree(String passpointManagementObjectTree)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getMoTree()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointUniqueId(String uniqueId)",
    "returnType" : "void",
    "comment" : "\n     * Set the Passpoint unique identifier\n     * @param uniqueId Passpoint unique identifier to be set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPasspointUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Set the Passpoint unique identifier\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setIsUserSelected(boolean isUserSelected)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets whether the network is connected by user selection or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserSelected()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the network is connected by user selection or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean needsPreSharedKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the key mgmt indicates if the WifiConfiguration needs a preSharedKey or not.\n     * @return true if preSharedKey is needed, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEncryptedPreSharedKey()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if the encrypted data is present\n     * @return true if encrypted data is present\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEncryptedPreSharedKey(byte[] encryptedPreSharedKey, byte[] encryptedPreSharedKeyIv)",
    "returnType" : "void",
    "comment" : "\n     * Set the encrypted data for preSharedKey\n     * @param encryptedPreSharedKey encrypted preSharedKey\n     * @param encryptedPreSharedKeyIv encrypted preSharedKey\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncryptedPreSharedKey()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the encrypted data\n     *\n     * @return encrypted data of the WifiConfiguration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getEncryptedPreSharedKeyIv()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the encrypted data IV\n     *\n     * @return encrypted data IV of the WifiConfiguration\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPreSharedKeyChanged()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the configuration's password has changed.\n     * If true, the encrypted data is no longer valid.\n     *\n     * @return true if preSharedKey encryption is needed, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHasPreSharedKeyChanged(boolean changed)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the WifiConfiguration needs a preSharedKey encryption.\n     *\n     * @param changed true if preSharedKey is changed, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProfileKey()",
    "returnType" : "String",
    "comment" : "\n     * Get a unique key which represent this Wi-Fi configuration profile. If two profiles are for\n     * the same Wi-Fi network, but from different providers (apps, carriers, or data subscriptions),\n     * they would have different keys.\n     * @return a unique key which represent this profile.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultSecurityType()",
    "returnType" : "String",
    "comment" : "\n     * Get the default security type string.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getSecurityTypeName(@SecurityType int securityType)",
    "returnType" : "String",
    "comment" : "\n     * Get the security type name.\n     *\n     * @param securityType One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WEP},\n     * {@link #SECURITY_TYPE_PSK},\n     * {@link #SECURITY_TYPE_EAP},\n     * {@link #SECURITY_TYPE_SAE},\n     * {@link #SECURITY_TYPE_OWE},\n     * {@link #SECURITY_TYPE_WAPI_PSK},\n     * {@link #SECURITY_TYPE_WAPI_CERT},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE},\n     * {@link #SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT},\n     * {@link #SECURITY_TYPE_PASSPOINT_R1_R2},\n     * {@link #SECURITY_TYPE_PASSPOINT_R3},\n     * or {@link #SECURITY_TYPE_DPP}.\n     * @return the name of the given type.\n     * @hide\n     ",
    "links" : [ "#SECURITY_TYPE_PASSPOINT_R3", "#SECURITY_TYPE_EAP", "#SECURITY_TYPE_SAE", "#SECURITY_TYPE_WAPI_CERT", "#SECURITY_TYPE_PASSPOINT_R1_R2", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE", "#SECURITY_TYPE_WEP", "#SECURITY_TYPE_DPP", "#SECURITY_TYPE_WAPI_PSK", "#SECURITY_TYPE_PSK", "#SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_OWE" ]
  }, {
    "name" : "public String getNetworkKeyFromSecurityType(@SecurityType int securityType)",
    "returnType" : "String",
    "comment" : "\n     * Returns the key for storing the data usage bucket.\n     *\n     * Note: DO NOT change this function. It is used to be a key to store Wi-Fi data usage data.\n     * Create a new function if we plan to change the key for Wi-Fi data usage and add the new key\n     * to {@link #getAllNetworkKeys()}.\n     *\n     * @param securityType the security type corresponding to the target network.\n     * @hide\n     ",
    "links" : [ "#getAllNetworkKeys()" ]
  }, {
    "name" : "public Set<String> getAllNetworkKeys()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns a list of all persistable network keys corresponding to this configuration.\n     * There may be multiple keys since they are security-type specific and a configuration may\n     * support multiple security types. The persistable key of a specific network connection may\n     * be obtained from {@link WifiInfo#getNetworkKey()}.\n     * An example of usage of such persistable network keys is to query the Wi-Fi data usage\n     * corresponding to this configuration. See {@code NetworkTemplate} to know the detail.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiInfo#getNetworkKey()" ]
  }, {
    "name" : "public void setSubscriptionGroup(@Nullable ParcelUuid subscriptionGroup)",
    "returnType" : "void",
    "comment" : "\n     * Set the subscription group uuid associated with current configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelUuid getSubscriptionGroup()",
    "returnType" : "ParcelUuid",
    "comment" : "\n     * Get the subscription group uuid associated with current configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Return the vendor-provided configuration data, if it exists. See also {@link\n     * #setVendorData(List)}\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ "#setVendorData(List)" ]
  }, {
    "name" : "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)",
    "returnType" : "void",
    "comment" : "\n     * Set additional vendor-provided configuration data.\n     *\n     * Setting this field requires the MANAGE_WIFI_NETWORK_SELECTION permission. Otherwise,\n     * if this data is set, the configuration will be rejected upon add or update.\n     *\n     * @param vendorData List of {@link OuiKeyedData} containing the vendor-provided\n     *     configuration data. Note that multiple elements with the same OUI are allowed.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "public boolean isWifi7Enabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether Wi-Fi 7 is enabled for this network.\n     *\n     * @return true if enabled; false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWifi7Enabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether Wi-Fi 7 is enabled for this network.\n     *\n     * @param enabled true if enabled; false otherwise\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void updateLegacySecurityParams()", "public void setSecurityParams(@SecurityType int securityType)", "public void setSecurityParams(@NonNull BitSet givenAllowedKeyManagement)", "public void setSecurityParams(SecurityParams params)", "public void setSecurityParams(@NonNull List<SecurityParams> securityParamsList)", "public void addSecurityParams(@SecurityType int securityType)", "public void addSecurityParams(@NonNull SecurityParams newParams)", "private boolean isWpa3EnterpriseConfiguration()", "public boolean isWpaPersonalOnlyConfiguration()", "public void convertLegacyFieldsToSecurityParamsIfNeeded()", "public void setSecurityParamsEnabled(@SecurityType int securityType, boolean enable)", "public void setSecurityParamsIsAddedByAutoUpgrade(@SecurityType int securityType, boolean isAddedByAutoUpgrade)", "public SecurityParams getSecurityParams(@SecurityType int securityType)", "public boolean isSecurityType(@SecurityType int securityType)", "public List<SecurityParams> getSecurityParamsList()", "public SecurityParams getDefaultSecurityParams()", "public void enableFils(boolean enableFilsSha256, boolean enableFilsSha384)", "public boolean isFilsSha256Enabled()", "public boolean isFilsSha384Enabled()", "public void enableSuiteBCiphers(boolean enableEcdheEcdsa, boolean enableEcdheRsa)", "public boolean isSuiteBCipherEcdheEcdsaEnabled()", "public boolean isSuiteBCipherEcdheRsaEnabled()", "public void enableSaeH2eOnlyMode(boolean enable)", "public void enableSaePkOnlyMode(boolean enable)", "public void setBssidAllowlist(@Nullable List<MacAddress> bssidAllowlist)", "public List<MacAddress> getBssidAllowlist()", "public List<MacAddress> getBssidAllowlistInternal()", "public void setDeletionPriority(int priority) throws IllegalArgumentException", "public int getDeletionPriority()", "public void setIpProvisioningTimedOut(boolean value)", "public boolean isIpProvisioningTimedOut()", "public boolean hasNoInternetAccess()", "public boolean isNoInternetAccessExpected()", "public boolean isEphemeral()", "public void setRepeaterEnabled(boolean isRepeaterEnabled)", "public boolean isRepeaterEnabled()", "public static boolean isMetered(@Nullable WifiConfiguration config, @Nullable WifiInfo info)", "private boolean hasWepKeys()", "public boolean isOpenNetwork()", "public void setMacRandomizationSetting(@MacRandomizationSetting int macRandomizationSetting)", "public int getMacRandomizationSetting()", "public static boolean isValidMacAddressForRandomization(MacAddress mac)", "public MacAddress getRandomizedMacAddress()", "public void setRandomizedMacAddress(@NonNull MacAddress mac)", "public void setSendDhcpHostnameEnabled(boolean enabled)", "public boolean isSendDhcpHostnameEnabled()", "public void setDppConnectionKeys(byte[] connector, byte[] cSignKey, byte[] netAccessKey)", "public void setDppConfigurator(byte[] ecKey)", "public boolean isDppConfigurator()", "public byte[] getDppPrivateEcKey()", "public byte[] getDppConnector()", "public byte[] getDppCSignKey()", "public byte[] getDppNetAccessKey()", "public int getRecentFailureReason()", "public NetworkSelectionStatus getNetworkSelectionStatus()", "public void setNetworkSelectionStatus(@NonNull NetworkSelectionStatus status)", "public boolean isPasspoint()", "public boolean isLinked(WifiConfiguration config)", "public boolean isEnterprise()", "private static String logTimeOfDay(long millis)", "public String toString()", "public String getPrintableSsid()", "public String getKeyIdForCredentials(WifiConfiguration current)", "private String trimStringForKeyId(String string)", "private static BitSet readBitSet(Parcel src)", "private static void writeBitSet(Parcel dest, BitSet set)", "public int getAuthType()", "public String getKey()", "public String getNetworkKey()", "public String getSsidAndSecurityTypeString()", "public IpConfiguration getIpConfiguration()", "public void setIpConfiguration(@Nullable IpConfiguration ipConfiguration)", "public StaticIpConfiguration getStaticIpConfiguration()", "public void setStaticIpConfiguration(StaticIpConfiguration staticIpConfiguration)", "public IpConfiguration.IpAssignment getIpAssignment()", "public void setIpAssignment(IpConfiguration.IpAssignment ipAssignment)", "public IpConfiguration.ProxySettings getProxySettings()", "public void setProxySettings(IpConfiguration.ProxySettings proxySettings)", "public ProxyInfo getHttpProxy()", "public void setHttpProxy(ProxyInfo httpProxy)", "public void setProxy(@NonNull ProxySettings settings, @NonNull ProxyInfo proxy)", "public int describeContents()", "public void setPasspointManagementObjectTree(String passpointManagementObjectTree)", "public String getMoTree()", "public void writeToParcel(Parcel dest, int flags)", "public void setPasspointUniqueId(String uniqueId)", "public String getPasspointUniqueId()", "public boolean setIsUserSelected(boolean isUserSelected)", "public boolean isUserSelected()", "public boolean needsPreSharedKey()", "public boolean hasEncryptedPreSharedKey()", "public void setEncryptedPreSharedKey(byte[] encryptedPreSharedKey, byte[] encryptedPreSharedKeyIv)", "public byte[] getEncryptedPreSharedKey()", "public byte[] getEncryptedPreSharedKeyIv()", "public boolean hasPreSharedKeyChanged()", "public void setHasPreSharedKeyChanged(boolean changed)", "public String getProfileKey()", "public String getDefaultSecurityType()", "public static String getSecurityTypeName(@SecurityType int securityType)", "public String getNetworkKeyFromSecurityType(@SecurityType int securityType)", "public Set<String> getAllNetworkKeys()", "public void setSubscriptionGroup(@Nullable ParcelUuid subscriptionGroup)", "public ParcelUuid getSubscriptionGroup()", "public List<OuiKeyedData> getVendorData()", "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)", "public boolean isWifi7Enabled()", "public void setWifi7Enabled(boolean enabled)" ],
  "variableNames" : [ "TAG", "BACKUP_VERSION", "ssidVarName", "bssidVarName", "pskVarName", "wepKeyVarNames", "wepTxKeyIdxVarName", "priorityVarName", "hiddenSSIDVarName", "pmfVarName", "updateIdentiferVarName", "INVALID_NETWORK_ID", "LOCAL_ONLY_NETWORK_ID", "mPasspointManagementObjectTree", "MAXIMUM_RANDOM_MAC_GENERATION_RETRY", "SECURITY_TYPE_OPEN", "SECURITY_TYPE_WEP", "SECURITY_TYPE_PSK", "SECURITY_TYPE_EAP", "SECURITY_TYPE_SAE", "SECURITY_TYPE_EAP_WPA3_ENTERPRISE_192_BIT", "SECURITY_TYPE_EAP_SUITE_B", "SECURITY_TYPE_OWE", "SECURITY_TYPE_WAPI_PSK", "SECURITY_TYPE_WAPI_CERT", "SECURITY_TYPE_EAP_WPA3_ENTERPRISE", "SECURITY_TYPE_OSEN", "SECURITY_TYPE_PASSPOINT_R1_R2", "SECURITY_TYPE_PASSPOINT_R3", "SECURITY_TYPE_DPP", "SECURITY_TYPE_NUM", "SECURITY_TYPE_NAMES", "mSecurityParamsList", "UNKNOWN_UID", "networkId", "status", "SSID", "BSSID", "mBssidAllowlist", "mEncryptedPreSharedKey", "mEncryptedPreSharedKeyIv", "mHasPreSharedKeyChanged", "AP_BAND_2GHZ", "AP_BAND_5GHZ", "AP_BAND_60GHZ", "AP_BAND_ANY", "apBand", "apChannel", "preSharedKey", "wepKeys", "wepTxKeyIndex", "priority", "mDeletionPriority", "hiddenSSID", "requirePmf", "updateIdentifier", "allowedKeyManagement", "allowedProtocols", "allowedAuthAlgorithms", "allowedPairwiseCiphers", "allowedGroupCiphers", "allowedGroupManagementCiphers", "allowedSuiteBCiphers", "enterpriseConfig", "FQDN", "providerFriendlyName", "isHomeProviderNetwork", "roamingConsortiumIds", "shared", "mIpConfiguration", "dhcpServer", "defaultGwMacAddress", "validatedInternetAccess", "dtimInterval", "isLegacyPasspointConfig", "creatorUid", "lastConnectUid", "lastUpdateUid", "creatorName", "lastUpdateName", "carrierId", "subscriptionId", "mSubscriptionGroup", "allowAutojoin", "mWifi7Enabled", "INVALID_RSSI", "numNoInternetAccessReports", "noInternetAccessExpected", "osu", "lastConnected", "lastDisconnected", "lastUpdated", "numRebootsSinceLastUse", "selfAdded", "peerWifiConfiguration", "ephemeral", "trusted", "oemPaid", "oemPrivate", "carrierMerged", "fromWifiNetworkSuggestion", "fromWifiNetworkSpecifier", "meteredHint", "mIsRepeaterEnabled", "mIpProvisioningTimedOut", "restricted", "METERED_OVERRIDE_NONE", "METERED_OVERRIDE_METERED", "METERED_OVERRIDE_NOT_METERED", "meteredOverride", "useExternalScores", "numScorerOverride", "numScorerOverrideAndSwitchedNetwork", "numAssociation", "RANDOMIZATION_NONE", "RANDOMIZATION_PERSISTENT", "RANDOMIZATION_NON_PERSISTENT", "RANDOMIZATION_AUTO", "macRandomizationSetting", "mRandomizedMacAddress", "randomizedMacExpirationTimeMs", "randomizedMacLastModifiedTimeMs", "mIsSendDhcpHostnameEnabled", "mIsDppConfigurator", "mDppPrivateEcKey", "mDppConnector", "mDppCSignKey", "mDppNetAccessKey", "HOME_NETWORK_RSSI_BOOST", "mNetworkSelectionStatus", "recentFailure", "RECENT_FAILURE_NONE", "RECENT_FAILURE_AP_UNABLE_TO_HANDLE_NEW_STA", "RECENT_FAILURE_REFUSED_TEMPORARILY", "RECENT_FAILURE_POOR_CHANNEL_CONDITIONS", "RECENT_FAILURE_DISCONNECTION_AP_BUSY", "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_UNSPECIFIED", "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_MAX_NUM_STA_ASSOCIATED", "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AIR_INTERFACE_OVERLOADED", "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_AUTH_SERVER_OVERLOADED", "RECENT_FAILURE_MBO_ASSOC_DISALLOWED_INSUFFICIENT_RSSI", "RECENT_FAILURE_OCE_RSSI_BASED_ASSOCIATION_REJECTION", "RECENT_FAILURE_NETWORK_NOT_FOUND", "linkedConfigurations", "mVendorData", "CREATOR", "mPasspointUniqueId", "isMostRecentlyConnected", "isCurrentlyConnected", "mIsUserSelected" ]
}