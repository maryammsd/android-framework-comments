{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/GradientColor.java",
  "packageName" : "android.content.res",
  "className" : "GradientColor",
  "comment" : "\n * Lets you define a gradient color, which is used inside\n * {@link android.graphics.drawable.VectorDrawable}.\n *\n * {@link android.content.res.GradientColor}s are created from XML resource files defined in the\n * \"color\" subdirectory directory of an application's resource directory.  The XML file contains\n * a single \"gradient\" element with a number of attributes and elements inside.  For example:\n * <pre>\n * &lt;gradient xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n *   &lt;android:startColor=\"?android:attr/colorPrimary\"/&gt;\n *   &lt;android:endColor=\"?android:attr/colorControlActivated\"/&gt;\n *   &lt;.../&gt;\n *   &lt;android:type=\"linear\"/&gt;\n * &lt;/gradient&gt;\n * </pre>\n *\n * This can describe either a {@link android.graphics.LinearGradient},\n * {@link android.graphics.RadialGradient}, or {@link android.graphics.SweepGradient}.\n *\n * Note that different attributes are relevant for different types of gradient.\n * For example, android:gradientRadius is only applied to RadialGradient.\n * android:centerX and android:centerY are only applied to SweepGradient or RadialGradient.\n * android:startX, android:startY, android:endX and android:endY are only applied to LinearGradient.\n *\n * Also note if any color \"item\" element is defined, then startColor, centerColor and endColor will\n * be ignored.\n * @hide\n ",
  "links" : [ "android.graphics.LinearGradient", "android.graphics.drawable.VectorDrawable", "android.content.res.GradientColor", "android.graphics.SweepGradient", "android.graphics.RadialGradient" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG_GRADIENT",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_CLAMP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TILE_MODE_MIRROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFactory",
    "type" : "GradientColorFactory",
    "comment" : " Lazily-created factory for this GradientColor. ",
    "links" : [ ]
  }, {
    "name" : "mChangingConfigurations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShader",
    "type" : "Shader",
    "comment" : " all the XML information.",
    "links" : [ ]
  }, {
    "name" : "mGradientType",
    "type" : "int",
    "comment" : " NOTE: they need to be copied in the copy constructor!",
    "links" : [ ]
  }, {
    "name" : "mCenterX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCenterY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCenterColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasCenterColor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTileMode",
    "type" : "int",
    "comment" : " Clamp mode.",
    "links" : [ ]
  }, {
    "name" : "mGradientRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItemColors",
    "type" : "int[]",
    "comment" : " Below are the attributes for the <item> element.",
    "links" : [ ]
  }, {
    "name" : "mItemOffsets",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeAttrs",
    "type" : "int[]",
    "comment" : " Theme attributes for the root and item elements.",
    "links" : [ ]
  }, {
    "name" : "mItemsThemeAttrs",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Shader.TileMode parseTileMode(@GradientTileMode int tileMode)",
    "returnType" : "Shader.TileMode",
    "comment" : " Set the default to clamp mode.",
    "links" : [ ]
  }, {
    "name" : "private void updateRootElementState(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Update the root level's attributes, either for inflate or applyTheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void validateXmlContent() throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Check if the XML content is valid.\n     *\n     * @throws XmlPullParserException if errors were found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Shader getShader()",
    "returnType" : "Shader",
    "comment" : "\n     * The shader information will be applied to the native VectorDrawable's path.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static GradientColor createFromXml(Resources r, XmlResourceParser parser, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "GradientColor",
    "comment" : "\n     * A public method to create GradientColor from a XML resource.\n     ",
    "links" : [ ]
  }, {
    "name" : " static GradientColor createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "GradientColor",
    "comment" : "\n     * Create from inside an XML document. Called on a parser positioned at a\n     * tag in an XML document, tries to create a GradientColor from that tag.\n     *\n     * @return A new GradientColor for the current tag.\n     * @throws XmlPullParserException if the current tag is not &lt;gradient>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Fill in this object based on the contents of an XML \"gradient\" element.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildElements(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @NonNull Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflates child elements \"item\"s for each color stop.\n     *\n     * Note that at root level, we need to save ThemeAttrs for theme applied later.\n     * Here similarly, at each child item, we need to save the theme's attributes, and apply theme\n     * later as applyItemsAttrsTheme().\n     ",
    "links" : [ ]
  }, {
    "name" : "private void applyItemsAttrsTheme(Theme t)",
    "returnType" : "void",
    "comment" : "\n     * Apply theme to all the items.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onColorsChange()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultColor()",
    "returnType" : "int",
    "comment" : "\n     * For Gradient color, the default color is not very useful, since the gradient will override\n     * the color information anyway.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState<ComplexColor> getConstantState()",
    "returnType" : "ConstantState<ComplexColor>",
    "comment" : "\n     * Similar to ColorStateList, setup constant state and its factory.\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  }, {
    "name" : "public GradientColor obtainForTheme(Theme t)",
    "returnType" : "GradientColor",
    "comment" : "\n     * Returns an appropriately themed gradient color.\n     *\n     * @param t the theme to apply\n     * @return a copy of the gradient color the theme applied, or the\n     * gradient itself if there were no unresolved theme\n     * attributes\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Returns a mask of the configuration parameters for which this gradient\n     * may change, requiring that it be re-created.\n     *\n     * @return a mask of the changing configuration parameters, as defined by\n     *         {@link android.content.pm.ActivityInfo}\n     *\n     * @see android.content.pm.ActivityInfo\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "private void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyRootAttrsTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a theme can be applied to this gradient color, which\n     * usually indicates that the gradient color has unresolved theme\n     * attributes.\n     *\n     * @return whether a theme can be applied to this gradient color.\n     * @hide only for resource preloading\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Shader.TileMode parseTileMode(@GradientTileMode int tileMode)", "private void updateRootElementState(TypedArray a)", "private void validateXmlContent() throws XmlPullParserException", "public Shader getShader()", "public static GradientColor createFromXml(Resources r, XmlResourceParser parser, Theme theme) throws XmlPullParserException, IOException", " static GradientColor createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "private void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "private void inflateChildElements(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @NonNull Theme theme) throws XmlPullParserException, IOException", "private void applyItemsAttrsTheme(Theme t)", "private void onColorsChange()", "public int getDefaultColor()", "public ConstantState<ComplexColor> getConstantState()", "public GradientColor obtainForTheme(Theme t)", "public int getChangingConfigurations()", "private void applyTheme(Theme t)", "private void applyRootAttrsTheme(Theme t)", "public boolean canApplyTheme()" ],
  "variableNames" : [ "TAG", "DBG_GRADIENT", "TILE_MODE_CLAMP", "TILE_MODE_REPEAT", "TILE_MODE_MIRROR", "mFactory", "mChangingConfigurations", "mDefaultColor", "mShader", "mGradientType", "mCenterX", "mCenterY", "mStartX", "mStartY", "mEndX", "mEndY", "mStartColor", "mCenterColor", "mEndColor", "mHasCenterColor", "mTileMode", "mGradientRadius", "mItemColors", "mItemOffsets", "mThemeAttrs", "mItemsThemeAttrs" ]
}