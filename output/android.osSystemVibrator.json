{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/SystemVibrator.java",
  "packageName" : "android.os",
  "className" : "SystemVibrator",
  "comment" : "\n * Vibrator implementation that controls the main system vibrator.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IVibratorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelegates",
    "type" : "ArrayMap<OnVibratorStateChangedListener, OnVibratorStateChangedListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasVibrator()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVibrating()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the vibrator is vibrating.\n     *\n     * @return True if the hardware is vibrating, otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state change. If the listener was previously added and not\n     * removed, this call will be ignored.\n     *\n     * @param listener Listener to be added.\n     * @param executor The {@link Executor} on which the listener's callbacks will be executed on.\n     ",
    "links" : [ "Executor" ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state changes. Callbacks will be executed on the main thread.\n     * If the listener was previously added and not removed, this call will be ignored.\n     *\n     * @param listener listener to be added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes the listener for vibrator state changes. If the listener was not previously\n     * registered, this call will do nothing.\n     *\n     * @param listener Listener to be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, VibrationEffect effect, AudioAttributes attributes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void vibrate(int uid, String opPkg, VibrationEffect effect, String reason, AudioAttributes attributes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] areEffectsSupported(@VibrationEffect.EffectType int... effectIds)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean[] arePrimitivesSupported(@NonNull @VibrationEffect.Composition.Primitive int... primitiveIds)",
    "returnType" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mService", "mToken", "mContext", "mDelegates" ],
  "methodNames" : [ "public boolean hasVibrator()", "public boolean isVibrating()", "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)", "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public boolean hasAmplitudeControl()", "public boolean setAlwaysOnEffect(int uid, String opPkg, int alwaysOnId, VibrationEffect effect, AudioAttributes attributes)", "public void vibrate(int uid, String opPkg, VibrationEffect effect, String reason, AudioAttributes attributes)", "public int[] areEffectsSupported(@VibrationEffect.EffectType int... effectIds)", "public boolean[] arePrimitivesSupported(@NonNull @VibrationEffect.Composition.Primitive int... primitiveIds)", "public void cancel()" ]
}