{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemUse.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemUse",
  "comment" : "\n * Implement xsl:use.\n * This acts as a superclass for ElemCopy, ElemAttributeSet,\n * ElemElement, and ElemLiteralResult, on order to implement\n * shared behavior the use-attribute-sets attribute.\n * @see <a href=\"http://www.w3.org/TR/xslt#attribute-sets\">attribute-sets in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_attributeSetsNames",
    "type" : "QName[]",
    "comment" : "\n   * The value of the \"use-attribute-sets\" attribute.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUseAttributeSets(Vector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"use-attribute-sets\" attribute.\n   * Attribute sets are used by specifying a use-attribute-sets\n   * attribute on xsl:element, xsl:copy (see [7.5 Copying]) or\n   * xsl:attribute-set elements. The value of the use-attribute-sets\n   * attribute is a whitespace-separated list of names of attribute\n   * sets. Each name is specified as a QName, which is expanded as\n   * described in [2.4 Qualified Names].\n   *\n   * @param v The value to set for the \"use-attribute-sets\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setUseAttributeSets(QName[] v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"use-attribute-sets\" attribute.\n   * Attribute sets are used by specifying a use-attribute-sets\n   * attribute on xsl:element, xsl:copy (see [7.5 Copying]) or\n   * xsl:attribute-set elements. The value of the use-attribute-sets\n   * attribute is a whitespace-separated list of names of attribute\n   * sets. Each name is specified as a QName, which is expanded as\n   * described in [2.4 Qualified Names].\n   *\n   * @param v The value to set for the \"use-attribute-sets\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public QName[] getUseAttributeSets()",
    "returnType" : "QName[]",
    "comment" : "\n   * Get the \"use-attribute-sets\" attribute.\n   * Attribute sets are used by specifying a use-attribute-sets\n   * attribute on xsl:element, xsl:copy (see [7.5 Copying]) or\n   * xsl:attribute-set elements, or a xsl:use-attribute-sets attribute on\n   * Literal Result Elements.\n   * The value of the use-attribute-sets\n   * attribute is a whitespace-separated list of names of attribute\n   * sets. Each name is specified as a QName, which is expanded as\n   * described in [2.4 Qualified Names].\n   *\n   * @return The value of the \"use-attribute-sets\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public void applyAttrSets(TransformerImpl transformer, StylesheetRoot stylesheet) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Add the attributes from the named attribute sets to the attribute list.\n   * TODO: Error handling for: \"It is an error if there are two attribute sets\n   * with the same expanded-name and with equal import precedence and that both\n   * contain the same attribute unless there is a definition of the attribute\n   * set with higher import precedence that also contains the attribute.\"\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param stylesheet The owning root stylesheet\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private void applyAttrSets(TransformerImpl transformer, StylesheetRoot stylesheet, QName[] attributeSetsNames) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Add the attributes from the named attribute sets to the attribute list.\n   * TODO: Error handling for: \"It is an error if there are two attribute sets\n   * with the same expanded-name and with equal import precedence and that both\n   * contain the same attribute unless there is a definition of the attribute\n   * set with higher import precedence that also contains the attribute.\"\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param stylesheet The owning root stylesheet\n   * @param attributeSetsNames List of attribute sets names to apply\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy attributes specified by use-attribute-sets to the result tree.\n   * Specifying a use-attribute-sets attribute is equivalent to adding\n   * xsl:attribute elements for each of the attributes in each of the\n   * named attribute sets to the beginning of the content of the element\n   * with the use-attribute-sets attribute, in the same order in which\n   * the names of the attribute sets are specified in the use-attribute-sets\n   * attribute. It is an error if use of use-attribute-sets attributes\n   * on xsl:attribute-set elements causes an attribute set to directly\n   * or indirectly use itself.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setUseAttributeSets(Vector v)", "public void setUseAttributeSets(QName[] v)", "public QName[] getUseAttributeSets()", "public void applyAttrSets(TransformerImpl transformer, StylesheetRoot stylesheet) throws TransformerException", "private void applyAttrSets(TransformerImpl transformer, StylesheetRoot stylesheet, QName[] attributeSetsNames) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_attributeSetsNames" ]
}