{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/ccil/cowan/tagsoup/Parser.java",
  "packageName" : "org.ccil.cowan.tagsoup",
  "className" : "Parser",
  "comment" : "\nThe SAX parser class.\n*",
  "links" : [ ],
  "variables" : [ {
    "name" : "theContentHandler",
    "type" : "ContentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theLexicalHandler",
    "type" : "LexicalHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theDTDHandler",
    "type" : "DTDHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theErrorHandler",
    "type" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theEntityResolver",
    "type" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theSchema",
    "type" : "Schema",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theScanner",
    "type" : "Scanner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theAutoDetector",
    "type" : "AutoDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_NAMESPACES",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IGNORE_BOGONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BOGONS_EMPTY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ROOT_BOGONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DEFAULT_ATTRIBUTES",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TRANSLATE_COLONS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_RESTART_ELEMENTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IGNORABLE_WHITESPACE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CDATA_ELEMENTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaces",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ignoreBogons",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bogonsEmpty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rootBogons",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultAttributes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "translateColons",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "restartElements",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ignorableWhitespace",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CDATAElements",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespacesFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates namespace URIs and unprefixed local\n\tnames for element and attribute names will be available.\n\t*",
    "links" : [ ]
  }, {
    "name" : "namespacePrefixesFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that XML qualified names (with prefixes)\n\tand attributes (including xmlns* attributes) will be available.\n\tWe don't support this value.\n\t*",
    "links" : [ ]
  }, {
    "name" : "externalGeneralEntitiesFeature",
    "type" : "String",
    "comment" : "\n\tReports whether this parser processes external general entities\n\t(it doesn't).\n\t*",
    "links" : [ ]
  }, {
    "name" : "externalParameterEntitiesFeature",
    "type" : "String",
    "comment" : "\n\tReports whether this parser processes external parameter entities\n\t(it doesn't).\n\t*",
    "links" : [ ]
  }, {
    "name" : "isStandaloneFeature",
    "type" : "String",
    "comment" : "\n\tMay be examined only during a parse, after the startDocument()\n\tcallback has been completed; read-only. The value is true if\n\tthe document specified standalone=\"yes\" in its XML declaration,\n\tand otherwise is false.  (It's always false.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "lexicalHandlerParameterEntitiesFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the LexicalHandler will report\n\tthe beginning and end of parameter entities (it won't).\n\t*",
    "links" : [ ]
  }, {
    "name" : "resolveDTDURIsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that system IDs in declarations will\n\tbe absolutized (relative to their base URIs) before reporting.\n\t(This returns true but doesn't actually do anything.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "stringInterningFeature",
    "type" : "String",
    "comment" : "\n\tHas a value of \"true\" if all XML names (for elements,\n\tprefixes, attributes, entities, notations, and local\n\tnames), as well as Namespace URIs, will have been interned\n\tusing java.lang.String.intern. This supports fast testing of\n\tequality/inequality against string constants, rather than forcing\n\tslower calls to String.equals().  (We always intern.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "useAttributes2Feature",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "useLocator2Feature",
    "type" : "String",
    "comment" : "\n\tReturns \"true\" if the Locator objects passed by this parser\n\tin ContentHandler.setDocumentLocator() implement the\n\torg.xml.sax.ext.Locator2 interface.  (They don't.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "useEntityResolver2Feature",
    "type" : "String",
    "comment" : "\n\tReturns \"true\" if, when setEntityResolver is given an object\n\timplementing the org.xml.sax.ext.EntityResolver2 interface,\n\tthose new methods will be used.  (They won't be.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "validationFeature",
    "type" : "String",
    "comment" : "\n\tControls whether the parser is reporting all validity errors\n\t(We don't report any validity errors.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "unicodeNormalizationCheckingFeature",
    "type" : "String",
    "comment" : "\n\tControls whether the parser reports Unicode normalization\n\terrors as described in section 2.13 and Appendix B of the XML\n\t1.1 Recommendation.  (We don't normalize.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "xmlnsURIsFeature",
    "type" : "String",
    "comment" : "\n\tControls whether, when the namespace-prefixes feature is set,\n\tthe parser treats namespace declaration attributes as being in\n\tthe http://www.w3.org/2000/xmlns/ namespace.  (It doesn't.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "XML11Feature",
    "type" : "String",
    "comment" : "\n\tReturns \"true\" if the parser supports both XML 1.1 and XML 1.0.\n\t(Always false.)\n\t*",
    "links" : [ ]
  }, {
    "name" : "ignoreBogonsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will ignore\n\tunknown elements.\n\t*",
    "links" : [ ]
  }, {
    "name" : "bogonsEmptyFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will give unknown\n\telements a content model of EMPTY; a value of \"false\", a\n\tcontent model of ANY.\n\t*",
    "links" : [ ]
  }, {
    "name" : "rootBogonsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will allow unknown\n\telements to be the root element.\n\t*",
    "links" : [ ]
  }, {
    "name" : "defaultAttributesFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will return default\n\tattribute values for missing attributes that have default values.\n\t*",
    "links" : [ ]
  }, {
    "name" : "translateColonsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will \n\ttranslate colons into underscores in names.\n\t*",
    "links" : [ ]
  }, {
    "name" : "restartElementsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will \n\tattempt to restart the restartable elements.\n\t*",
    "links" : [ ]
  }, {
    "name" : "ignorableWhitespaceFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will \n\ttransmit whitespace in element-only content via the SAX\n\tignorableWhitespace callback.  Normally this is not done,\n\tbecause HTML is an SGML application and SGML suppresses\n\tsuch whitespace.\n\t*",
    "links" : [ ]
  }, {
    "name" : "CDATAElementsFeature",
    "type" : "String",
    "comment" : "\n\tA value of \"true\" indicates that the parser will treat CDATA\n\telements specially.  Normally true, since the input is by\n\tdefault HTML.\n\t*",
    "links" : [ ]
  }, {
    "name" : "lexicalHandlerProperty",
    "type" : "String",
    "comment" : "\n\tUsed to see some syntax events that are essential in some\n\tapplications: comments, CDATA delimiters, selected general\n\tentity inclusions, and the start and end of the DTD (and\n\tdeclaration of document element name). The Object must implement\n\torg.xml.sax.ext.LexicalHandler.\n\t*",
    "links" : [ ]
  }, {
    "name" : "scannerProperty",
    "type" : "String",
    "comment" : "\n\tSpecifies the Scanner object this Parser uses.\n\t*",
    "links" : [ ]
  }, {
    "name" : "schemaProperty",
    "type" : "String",
    "comment" : "\n\tSpecifies the Schema object this Parser uses.\n\t*",
    "links" : [ ]
  }, {
    "name" : "autoDetectorProperty",
    "type" : "String",
    "comment" : "\n\tSpecifies the AutoDetector (for encoding detection) this Parser uses.\n\t*",
    "links" : [ ]
  }, {
    "name" : "theFeatures",
    "type" : "HashMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theNewElement",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theAttributeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theDoctypeIsPresent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theDoctypePublicId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theDoctypeSystemId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theDoctypeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thePITarget",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theStack",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theSaved",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thePCDATA",
    "type" : "Element",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "theEntity",
    "type" : "int",
    "comment" : " needs to support chars past U+FFFF",
    "links" : [ ]
  }, {
    "name" : "etagchars",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "virginStack",
    "type" : "boolean",
    "comment" : " Push element onto stack",
    "links" : [ ]
  }, {
    "name" : "legal",
    "type" : "String",
    "comment" : " Replace junk in publicids with spaces",
    "links" : [ ]
  }, {
    "name" : "theCommentBuffer",
    "type" : "char[]",
    "comment" : " Comment buffer is twice the size of the output buffer",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Boolean truthValue(boolean b)",
    "returnType" : "Boolean",
    "comment" : " Boolean.TRUE or Boolean.FALSE",
    "links" : [ ]
  }, {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public EntityResolver getEntityResolver()",
    "returnType" : "EntityResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DTDHandler getDTDHandler()",
    "returnType" : "DTDHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setContentHandler(ContentHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentHandler getContentHandler()",
    "returnType" : "ContentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parse(InputSource input) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void parse(String systemid) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setup()",
    "returnType" : "void",
    "comment" : " Sets up instance variables that haven't been set by setFeature",
    "links" : [ ]
  }, {
    "name" : "private Reader getReader(InputSource s) throws SAXException, IOException",
    "returnType" : "Reader",
    "comment" : " Buffer both the InputStream and the Reader",
    "links" : [ ]
  }, {
    "name" : "private InputStream getInputStream(String publicid, String systemid) throws IOException, SAXException",
    "returnType" : "InputStream",
    "comment" : " Get an InputStream based on a publicid and a systemid",
    "links" : [ ]
  }, {
    "name" : "public void adup(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void aname(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void aval(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String expandEntities(String src)",
    "returnType" : "String",
    "comment" : " with a semicolon.",
    "links" : [ ]
  }, {
    "name" : "public void entity(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int lookupEntity(char[] buff, int offset, int length)",
    "returnType" : "int",
    "comment" : " deferring to the schema for named ones.",
    "links" : [ ]
  }, {
    "name" : "public void eof(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void etag(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean etag_cdata(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void etag_basic(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void restart(Element e) throws SAXException",
    "returnType" : "void",
    "comment" : " e is the next element to be started, if we know what it is",
    "links" : [ ]
  }, {
    "name" : "private void pop() throws SAXException",
    "returnType" : "void",
    "comment" : " Pop the stack irrevocably",
    "links" : [ ]
  }, {
    "name" : "private void restartablyPop() throws SAXException",
    "returnType" : "void",
    "comment" : " Pop the stack restartably",
    "links" : [ ]
  }, {
    "name" : "private void push(Element e) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String prefixOf(String name)",
    "returnType" : "String",
    "comment" : " Get the prefix from a QName",
    "links" : [ ]
  }, {
    "name" : "private boolean foreign(String prefix, String namespace)",
    "returnType" : "boolean",
    "comment" : " Return true if we have a foreign name",
    "links" : [ ]
  }, {
    "name" : "public void decl(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n         * Parsing the complete XML Document Type Definition is way too complex,\n         * but for many simple cases we can extract something useful from it.\n         *\n         * doctypedecl  ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'\n         *  DeclSep     ::= PEReference | S\n         *  intSubset   ::= (markupdecl | DeclSep)*\n         *  markupdecl  ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment\n         *  ExternalID  ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral\n         ",
    "links" : [ ]
  }, {
    "name" : "private static String trimquotes(String in)",
    "returnType" : "String",
    "comment" : " If the String is quoted, trim the quotes.",
    "links" : [ ]
  }, {
    "name" : "private static String[] split(String val) throws IllegalArgumentException",
    "returnType" : "String[]",
    "comment" : " Recognises quotes around a phrase and doesn't split it.",
    "links" : [ ]
  }, {
    "name" : "private String cleanPublicid(String src)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void gi(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cdsect(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pcdata(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pitarget(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pi(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stagc(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stage(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cmnt(char[] buff, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void rectify(Element e) throws SAXException",
    "returnType" : "void",
    "comment" : " so that the argument can be safely pushed",
    "links" : [ ]
  }, {
    "name" : "public int getEntity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String makeName(char[] buff, int offset, int length)",
    "returnType" : "String",
    "comment" : " canonicalize case.",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicid, String systemid) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Boolean truthValue(boolean b)", "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setEntityResolver(EntityResolver resolver)", "public EntityResolver getEntityResolver()", "public void setDTDHandler(DTDHandler handler)", "public DTDHandler getDTDHandler()", "public void setContentHandler(ContentHandler handler)", "public ContentHandler getContentHandler()", "public void setErrorHandler(ErrorHandler handler)", "public ErrorHandler getErrorHandler()", "public void parse(InputSource input) throws IOException, SAXException", "public void parse(String systemid) throws IOException, SAXException", "private void setup()", "private Reader getReader(InputSource s) throws SAXException, IOException", "private InputStream getInputStream(String publicid, String systemid) throws IOException, SAXException", "public void adup(char[] buff, int offset, int length) throws SAXException", "public void aname(char[] buff, int offset, int length) throws SAXException", "public void aval(char[] buff, int offset, int length) throws SAXException", "private String expandEntities(String src)", "public void entity(char[] buff, int offset, int length) throws SAXException", "private int lookupEntity(char[] buff, int offset, int length)", "public void eof(char[] buff, int offset, int length) throws SAXException", "public void etag(char[] buff, int offset, int length) throws SAXException", "public boolean etag_cdata(char[] buff, int offset, int length) throws SAXException", "public void etag_basic(char[] buff, int offset, int length) throws SAXException", "private void restart(Element e) throws SAXException", "private void pop() throws SAXException", "private void restartablyPop() throws SAXException", "private void push(Element e) throws SAXException", "private String prefixOf(String name)", "private boolean foreign(String prefix, String namespace)", "public void decl(char[] buff, int offset, int length) throws SAXException", "private static String trimquotes(String in)", "private static String[] split(String val) throws IllegalArgumentException", "private String cleanPublicid(String src)", "public void gi(char[] buff, int offset, int length) throws SAXException", "public void cdsect(char[] buff, int offset, int length) throws SAXException", "public void pcdata(char[] buff, int offset, int length) throws SAXException", "public void pitarget(char[] buff, int offset, int length) throws SAXException", "public void pi(char[] buff, int offset, int length) throws SAXException", "public void stagc(char[] buff, int offset, int length) throws SAXException", "public void stage(char[] buff, int offset, int length) throws SAXException", "public void cmnt(char[] buff, int offset, int length) throws SAXException", "private void rectify(Element e) throws SAXException", "public int getEntity()", "private String makeName(char[] buff, int offset, int length)", "public void comment(char[] ch, int start, int length) throws SAXException", "public void endCDATA() throws SAXException", "public void endDTD() throws SAXException", "public void endEntity(String name) throws SAXException", "public void startCDATA() throws SAXException", "public void startDTD(String name, String publicid, String systemid) throws SAXException", "public void startEntity(String name) throws SAXException" ],
  "variableNames" : [ "theContentHandler", "theLexicalHandler", "theDTDHandler", "theErrorHandler", "theEntityResolver", "theSchema", "theScanner", "theAutoDetector", "DEFAULT_NAMESPACES", "DEFAULT_IGNORE_BOGONS", "DEFAULT_BOGONS_EMPTY", "DEFAULT_ROOT_BOGONS", "DEFAULT_DEFAULT_ATTRIBUTES", "DEFAULT_TRANSLATE_COLONS", "DEFAULT_RESTART_ELEMENTS", "DEFAULT_IGNORABLE_WHITESPACE", "DEFAULT_CDATA_ELEMENTS", "namespaces", "ignoreBogons", "bogonsEmpty", "rootBogons", "defaultAttributes", "translateColons", "restartElements", "ignorableWhitespace", "CDATAElements", "namespacesFeature", "namespacePrefixesFeature", "externalGeneralEntitiesFeature", "externalParameterEntitiesFeature", "isStandaloneFeature", "lexicalHandlerParameterEntitiesFeature", "resolveDTDURIsFeature", "stringInterningFeature", "useAttributes2Feature", "useLocator2Feature", "useEntityResolver2Feature", "validationFeature", "unicodeNormalizationCheckingFeature", "xmlnsURIsFeature", "XML11Feature", "ignoreBogonsFeature", "bogonsEmptyFeature", "rootBogonsFeature", "defaultAttributesFeature", "translateColonsFeature", "restartElementsFeature", "ignorableWhitespaceFeature", "CDATAElementsFeature", "lexicalHandlerProperty", "scannerProperty", "schemaProperty", "autoDetectorProperty", "theFeatures", "theNewElement", "theAttributeName", "theDoctypeIsPresent", "theDoctypePublicId", "theDoctypeSystemId", "theDoctypeName", "thePITarget", "theStack", "theSaved", "thePCDATA", "theEntity", "etagchars", "virginStack", "legal", "theCommentBuffer" ]
}