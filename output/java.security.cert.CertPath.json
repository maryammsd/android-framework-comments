{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPath.java",
  "packageName" : "java.security.cert",
  "className" : "CertPath",
  "comment" : "\n * An immutable sequence of certificates (a certification path).\n * <p>\n * This is an abstract class that defines the methods common to all\n * {@code CertPath}s. Subclasses can handle different kinds of\n * certificates (X.509, PGP, etc.).\n * <p>\n * All {@code CertPath} objects have a type, a list of\n * {@code Certificate}s, and one or more supported encodings. Because the\n * {@code CertPath} class is immutable, a {@code CertPath} cannot\n * change in any externally visible way after being constructed. This\n * stipulation applies to all public fields and methods of this class and any\n * added or overridden by subclasses.\n * <p>\n * The type is a {@code String} that identifies the type of\n * {@code Certificate}s in the certification path. For each\n * certificate {@code cert} in a certification path {@code certPath},\n * {@code cert.getType().equals(certPath.getType())} must be\n * {@code true}.\n * <p>\n * The list of {@code Certificate}s is an ordered {@code List} of\n * zero or more {@code Certificate}s. This {@code List} and all\n * of the {@code Certificate}s contained in it must be immutable.\n * <p>\n * Each {@code CertPath} object must support one or more encodings\n * so that the object can be translated into a byte array for storage or\n * transmission to other parties. Preferably, these encodings should be\n * well-documented standards (such as PKCS#7). One of the encodings supported\n * by a {@code CertPath} is considered the default encoding. This\n * encoding is used if no encoding is explicitly requested (for the\n * {@link #getEncoded() getEncoded()} method, for instance).\n * <p>\n * All {@code CertPath} objects are also {@code Serializable}.\n * {@code CertPath} objects are resolved into an alternate\n * {@link CertPathRep CertPathRep} object during serialization. This allows\n * a {@code CertPath} object to be serialized into an equivalent\n * representation regardless of its underlying implementation.\n * <p>\n * {@code CertPath} objects can be created with a\n * {@code CertificateFactory} or they can be returned by other classes,\n * such as a {@code CertPathBuilder}.\n * <p>\n * By convention, X.509 {@code CertPath}s (consisting of\n * {@code X509Certificate}s), are ordered starting with the target\n * certificate and ending with a certificate issued by the trust anchor. That\n * is, the issuer of one certificate is the subject of the following one. The\n * certificate representing the {@link TrustAnchor TrustAnchor} should not be\n * included in the certification path. Unvalidated X.509 {@code CertPath}s\n * may not follow these conventions. PKIX {@code CertPathValidator}s will\n * detect any departure from these conventions that cause the certification\n * path to be invalid and throw a {@code CertPathValidatorException}.\n *\n * <p> Every implementation of the Java platform is required to support the\n * following standard {@code CertPath} encodings:\n * <ul>\n * <li>{@code PKCS7}</li>\n * <li>{@code PkiPath}</li>\n * </ul>\n * These encodings are described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#certpath-encodings\">\n * CertPath Encodings section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other encodings are supported.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * All {@code CertPath} objects must be thread-safe. That is, multiple\n * threads may concurrently invoke the methods defined in this class on a\n * single {@code CertPath} object (or more than one) with no\n * ill effects. This is also true for the {@code List} returned by\n * {@code CertPath.getCertificates}.\n * <p>\n * Requiring {@code CertPath} objects to be immutable and thread-safe\n * allows them to be passed around to various pieces of code without worrying\n * about coordinating access.  Providing this thread-safety is\n * generally not difficult, since the {@code CertPath} and\n * {@code List} objects in question are immutable.\n *\n * @see CertificateFactory\n * @see CertPathBuilder\n *\n * @author      Yassir Elley\n * @since       1.4\n ",
  "links" : [ "CertPathRep", "#getEncoded()", "java.security.cert.TrustAnchor" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "String",
    "comment" : " the type of certificates in this chain",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the type of {@code Certificate}s in this certification\n     * path. This is the same string that would be returned by\n     * {@link java.security.cert.Certificate#getType() cert.getType()}\n     * for all {@code Certificate}s in the certification path.\n     *\n     * @return the type of {@code Certificate}s in this certification\n     * path (never null)\n     ",
    "links" : [ "java.security.cert.Certificate#getType()" ]
  }, {
    "name" : "public abstract Iterator<String> getEncodings()",
    "returnType" : "Iterator<String>",
    "comment" : "\n     * Returns an iteration of the encodings supported by this certification\n     * path, with the default encoding first. Attempts to modify the returned\n     * {@code Iterator} via its {@code remove} method result in an\n     * {@code UnsupportedOperationException}.\n     *\n     * @return an {@code Iterator} over the names of the supported\n     *         encodings (as Strings)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this certification path for equality with the specified\n     * object. Two {@code CertPath}s are equal if and only if their\n     * types are equal and their certificate {@code List}s (and by\n     * implication the {@code Certificate}s in those {@code List}s)\n     * are equal. A {@code CertPath} is never equal to an object that is\n     * not a {@code CertPath}.\n     * <p>\n     * This algorithm is implemented by this method. If it is overridden,\n     * the behavior specified here must be maintained.\n     *\n     * @param other the object to test for equality with this certification path\n     * @return true if the specified object is equal to this certification path,\n     * false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hashcode for this certification path. The hash code of\n     * a certification path is defined to be the result of the following\n     * calculation:\n     * <pre>{@code\n     *  hashCode = path.getType().hashCode();\n     *  hashCode = 31*hashCode + path.getCertificates().hashCode();\n     * }</pre>\n     * This ensures that {@code path1.equals(path2)} implies that\n     * {@code path1.hashCode()==path2.hashCode()} for any two certification\n     * paths, {@code path1} and {@code path2}, as required by the\n     * general contract of {@code Object.hashCode}.\n     *\n     * @return the hashcode value for this certification path\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this certification path.\n     * This calls the {@code toString} method on each of the\n     * {@code Certificate}s in the path.\n     *\n     * @return a string representation of this certification path\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getEncoded() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encoded form of this certification path, using the default\n     * encoding.\n     *\n     * @return the encoded bytes\n     * @exception CertificateEncodingException if an encoding error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getEncoded(String encoding) throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encoded form of this certification path, using the\n     * specified encoding.\n     *\n     * @param encoding the name of the encoding to use\n     * @return the encoded bytes\n     * @exception CertificateEncodingException if an encoding error occurs or\n     *   the encoding requested is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<? extends Certificate> getCertificates()",
    "returnType" : "List<? extends Certificate>",
    "comment" : "\n     * Returns the list of certificates in this certification path.\n     * The {@code List} returned must be immutable and thread-safe.\n     *\n     * @return an immutable {@code List} of {@code Certificate}s\n     *         (may be empty, but not null)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object writeReplace() throws ObjectStreamException",
    "returnType" : "Object",
    "comment" : "\n     * Replaces the {@code CertPath} to be serialized with a\n     * {@code CertPathRep} object.\n     *\n     * @return the {@code CertPathRep} to be serialized\n     *\n     * @throws ObjectStreamException if a {@code CertPathRep} object\n     * representing this certification path could not be created\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getType()", "public abstract Iterator<String> getEncodings()", "public boolean equals(Object other)", "public int hashCode()", "public String toString()", "public abstract byte[] getEncoded() throws CertificateEncodingException", "public abstract byte[] getEncoded(String encoding) throws CertificateEncodingException", "public abstract List<? extends Certificate> getCertificates()", "protected Object writeReplace() throws ObjectStreamException" ],
  "variableNames" : [ "serialVersionUID", "type" ]
}