{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/RemoteViews.java",
  "packageName" : "android.widget",
  "className" : "RemoteViews",
  "comment" : "\n * A class that describes a view hierarchy that can be displayed in\n * another process. The hierarchy is inflated from a layout resource\n * file, and this class provides some basic operations for modifying\n * the content of the inflated hierarchy.\n *\n * <p>{@code RemoteViews} is limited to support for the following layouts:</p>\n * <ul>\n *   <li>{@link android.widget.AdapterViewFlipper}</li>\n *   <li>{@link android.widget.FrameLayout}</li>\n *   <li>{@link android.widget.GridLayout}</li>\n *   <li>{@link android.widget.GridView}</li>\n *   <li>{@link android.widget.LinearLayout}</li>\n *   <li>{@link android.widget.ListView}</li>\n *   <li>{@link android.widget.RelativeLayout}</li>\n *   <li>{@link android.widget.StackView}</li>\n *   <li>{@link android.widget.ViewFlipper}</li>\n * </ul>\n * <p>And the following widgets:</p>\n * <ul>\n *   <li>{@link android.widget.AnalogClock}</li>\n *   <li>{@link android.widget.Button}</li>\n *   <li>{@link android.widget.Chronometer}</li>\n *   <li>{@link android.widget.ImageButton}</li>\n *   <li>{@link android.widget.ImageView}</li>\n *   <li>{@link android.widget.ProgressBar}</li>\n *   <li>{@link android.widget.TextClock}</li>\n *   <li>{@link android.widget.TextView}</li>\n * </ul>\n * <p>Descendants of these classes are not supported.</p>\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REMOTEADAPTER_APPWIDGET_ID",
    "type" : "String",
    "comment" : "\n     * The intent extra that contains the appWidgetId.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REMOTEADAPTER_ON_LIGHT_BACKGROUND",
    "type" : "String",
    "comment" : "\n     * The intent extra that contains {@code true} if inflating as dak text theme.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHARED_ELEMENT_BOUNDS",
    "type" : "String",
    "comment" : "\n     * The intent extra that contains the bounds for all shared elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_NESTED_VIEWS",
    "type" : "int",
    "comment" : "\n     * Maximum depth of nested views calls from {@link #addView(int, RemoteViews)} and\n     * {@link #RemoteViews(RemoteViews, RemoteViews)}.\n     ",
    "links" : [ "#addView(int", "#RemoteViews(RemoteViews" ]
  }, {
    "name" : "SET_ON_CLICK_RESPONSE_TAG",
    "type" : "int",
    "comment" : " The unique identifiers for each custom {@link Action}.",
    "links" : [ "Action" ]
  }, {
    "name" : "REFLECTION_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_DRAWABLE_TINT_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_GROUP_ACTION_ADD_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_CONTENT_NAVIGATION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_EMPTY_VIEW_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_GROUP_ACTION_REMOVE_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_PENDING_INTENT_TEMPLATE_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_REMOTE_VIEW_ADAPTER_INTENT_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_VIEW_DRAWABLE_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITMAP_REFLECTION_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT_VIEW_SIZE_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_PADDING_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_REMOTE_VIEW_ADAPTER_LIST_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_REMOTE_INPUTS_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAYOUT_PARAM_ACTION_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OVERRIDE_TEXT_COLORS_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_RIPPLE_DRAWABLE_COLOR_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SET_INT_TAG_TAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REAPPLY_DISALLOWED",
    "type" : "int",
    "comment" : "\n     * Whether reapply is disallowed on this remoteview. This maybe be true if some actions modify\n     * the layout in a way that isn't recoverable, since views are being removed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_WIDGET_IS_COLLECTION_CHILD",
    "type" : "int",
    "comment" : "\n     * This flag indicates whether this RemoteViews object is being created from a\n     * RemoteViewsService for use as a child of a widget collection. This flag is used\n     * to determine whether or not certain features are available, in particular,\n     * setting on click extras and setting on click pending intents. The former is enabled,\n     * and the latter disabled when this flag is true.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_USE_LIGHT_BACKGROUND_LAYOUT",
    "type" : "int",
    "comment" : "\n     * When this flag is set, the views is inflated with {@link #mLightBackgroundLayoutId} instead\n     * of {link #mLayoutId}\n     * @hide\n     ",
    "links" : [ "#mLightBackgroundLayoutId" ]
  }, {
    "name" : "INFLATER_FILTER",
    "type" : "LayoutInflater.Filter",
    "comment" : "\n     * Used to restrict the views which can be inflated\n     *\n     * @see android.view.LayoutInflater.Filter#onLoadClass(java.lang.Class)\n     ",
    "links" : [ ]
  }, {
    "name" : "mApplication",
    "type" : "ApplicationInfo",
    "comment" : "\n     * Application that hosts the remote views.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLayoutId",
    "type" : "int",
    "comment" : "\n     * The resource ID of the layout file. (Added to the parcel)\n     ",
    "links" : [ ]
  }, {
    "name" : "mLightBackgroundLayoutId",
    "type" : "int",
    "comment" : "\n     * The resource ID of the layout file in dark text mode. (Added to the parcel)\n     ",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "ArrayList<Action>",
    "comment" : "\n     * An array of actions to perform on the view tree once it has been\n     * inflated\n     ",
    "links" : [ ]
  }, {
    "name" : "mBitmapCache",
    "type" : "BitmapCache",
    "comment" : "\n     * Maps bitmaps to unique indicies to avoid Bitmap duplication.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsRoot",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether or not this RemoteViews object is contained as a child of any other\n     * RemoteViews.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Constants to whether or not this RemoteViews is composed of a landscape and portrait\n     * RemoteViews.\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_HAS_LANDSCAPE_AND_PORTRAIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLandscape",
    "type" : "RemoteViews",
    "comment" : "\n     * Used in conjunction with the special constructor\n     * {@link #RemoteViews(RemoteViews, RemoteViews)} to keep track of the landscape and portrait\n     * RemoteViews.\n     ",
    "links" : [ "#RemoteViews(RemoteViews" ]
  }, {
    "name" : "mPortrait",
    "type" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplyFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassCookies",
    "type" : "Map<Class, Object>",
    "comment" : " Class cookies of the Parcel this instance was read from. ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ON_CLICK_HANDLER",
    "type" : "OnClickHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMethods",
    "type" : "ArrayMap<MethodKey, MethodArgs>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLookupKey",
    "type" : "MethodKey",
    "comment" : "\n     * This key is used to perform lookups in sMethods without causing allocations.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_NOOP",
    "type" : "Action",
    "comment" : " Constant used during async execution. It is not parcelable.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<RemoteViews>",
    "comment" : "\n     * Parcelable.Creator that instantiates RemoteViews objects\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRemoteInputs(int viewId, RemoteInput[] remoteInputs)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reduceImageSizes(int maxWidth, int maxHeight)",
    "returnType" : "void",
    "comment" : "\n     * Reduces all images and ensures that they are all below the given sizes.\n     *\n     * @param maxWidth the maximum width allowed\n     * @param maxHeight the maximum height allowed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void overrideTextColors(int textColor)",
    "returnType" : "void",
    "comment" : "\n     * Override all text colors in this layout and replace them by the given text color.\n     *\n     * @param textColor The color to use.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntTag(int viewId, int key, int tag)",
    "returnType" : "void",
    "comment" : "\n     * Sets an integer tag to the view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFlags(@ApplyFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set that it is disallowed to reapply another remoteview with the same layout as this view.\n     * This should be done if an action is destroying the view tree of the base layout.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFlags(@ApplyFlags int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mergeRemoteViews(RemoteViews newRv)",
    "returnType" : "void",
    "comment" : "\n     * Merges the passed RemoteViews actions with this RemoteViews actions according to\n     * action-specific merge rules.\n     *\n     * @param newRv\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "\n     * Note all {@link Uri} that are referenced internally, with the expectation\n     * that Uri permission grants will need to be issued to ensure the recipient\n     * of this object is able to render its contents.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "private static void visitIconUri(Icon icon, @NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Rect getSourceBounds(View v)",
    "returnType" : "Rect",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private MethodHandle getMethod(View view, String methodName, Class<?> paramType, boolean async)",
    "returnType" : "MethodHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getParameters(Class<?> paramType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureRemoteViewsAsChild(RemoteViews rv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setNotRoot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasLandscapeAndPortraitLayouts()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readActionsFromParcel(Parcel parcel, int depth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Action getActionFromParcel(Parcel parcel, int depth)",
    "returnType" : "Action",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews clone()",
    "returnType" : "RemoteViews",
    "comment" : "\n     * Returns a deep copy of the RemoteViews object. The RemoteView may not be\n     * attached to another RemoteView -- it must be the root of a hierarchy.\n     *\n     * @deprecated use {@link #RemoteViews(RemoteViews)} instead.\n     * @throws IllegalStateException if this is not the root of a RemoteView\n     *         hierarchy\n     ",
    "links" : [ "#RemoteViews(RemoteViews)" ]
  }, {
    "name" : "public String getPackage()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLayoutId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the layout id of the root layout associated with this RemoteViews. In the case\n     * that the RemoteViews has both a landscape and portrait root, this will return the layout\n     * id associated with the portrait layout.\n     *\n     * @return the layout id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBitmapCache(BitmapCache bitmapCache)",
    "returnType" : "void",
    "comment" : "\n     * Recursively sets BitmapCache in the hierarchy and update the bitmap ids.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int estimateMemoryUsage()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void addAction(Action a)",
    "returnType" : "void",
    "comment" : "\n     * Add an action to be executed on the remote side when apply is called.\n     *\n     * @param a The action to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addView(int viewId, RemoteViews nestedView)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ViewGroup#addView(View)} after inflating the\n     * given {@link RemoteViews}. This allows users to build \"nested\"\n     * {@link RemoteViews}. In cases where consumers of {@link RemoteViews} may\n     * recycle layouts, use {@link #removeAllViews(int)} to clear any existing\n     * children.\n     *\n     * @param viewId The id of the parent {@link ViewGroup} to add child into.\n     * @param nestedView {@link RemoteViews} that describes the child.\n     ",
    "links" : [ "android.widget.RemoteViews", "#removeAllViews(int)", "android.view.ViewGroup#addView(View)", "android.view.ViewGroup" ]
  }, {
    "name" : "public void addView(int viewId, RemoteViews nestedView, int index)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ViewGroup#addView(View, int)} after inflating the\n     * given {@link RemoteViews}.\n     *\n     * @param viewId The id of the parent {@link ViewGroup} to add the child into.\n     * @param nestedView {@link RemoteViews} of the child to add.\n     * @param index The position at which to add the child.\n     *\n     * @hide\n     ",
    "links" : [ "android.widget.RemoteViews", "android.view.ViewGroup#addView(View", "android.view.ViewGroup" ]
  }, {
    "name" : "public void removeAllViews(int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ViewGroup#removeAllViews()}.\n     *\n     * @param viewId The id of the parent {@link ViewGroup} to remove all\n     *            children from.\n     ",
    "links" : [ "android.view.ViewGroup#removeAllViews()", "android.view.ViewGroup" ]
  }, {
    "name" : "public void removeAllViewsExceptId(int viewId, int viewIdToKeep)",
    "returnType" : "void",
    "comment" : "\n     * Removes all views in the {@link ViewGroup} specified by the {@code viewId} except for any\n     * child that has the {@code viewIdToKeep} as its id.\n     *\n     * @param viewId The id of the parent {@link ViewGroup} to remove children from.\n     * @param viewIdToKeep The id of a child that should not be removed.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.ViewGroup" ]
  }, {
    "name" : "public void showNext(int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link AdapterViewAnimator#showNext()}\n     *\n     * @param viewId The id of the view on which to call {@link AdapterViewAnimator#showNext()}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator#showNext()" ]
  }, {
    "name" : "public void showPrevious(int viewId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link AdapterViewAnimator#showPrevious()}\n     *\n     * @param viewId The id of the view on which to call {@link AdapterViewAnimator#showPrevious()}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator#showPrevious()" ]
  }, {
    "name" : "public void setDisplayedChild(int viewId, int childIndex)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link AdapterViewAnimator#setDisplayedChild(int)}\n     *\n     * @param viewId The id of the view on which to call\n     *               {@link AdapterViewAnimator#setDisplayedChild(int)}\n     ",
    "links" : [ "android.widget.AdapterViewAnimator#setDisplayedChild(int)" ]
  }, {
    "name" : "public void setViewVisibility(int viewId, int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link View#setVisibility(int)}\n     *\n     * @param viewId The id of the view whose visibility should change\n     * @param visibility The new visibility for the view\n     ",
    "links" : [ "android.appwidget.AppWidgetHostView#setVisibility(int)" ]
  }, {
    "name" : "public void setTextViewText(int viewId, CharSequence text)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link TextView#setText(CharSequence)}\n     *\n     * @param viewId The id of the view whose text should change\n     * @param text The new text for the view\n     ",
    "links" : [ "android.widget.TextView#setText(CharSequence)" ]
  }, {
    "name" : "public void setTextViewTextSize(int viewId, int units, float size)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link TextView#setTextSize(int, float)}\n     *\n     * @param viewId The id of the view whose text size should change\n     * @param units The units of size (e.g. COMPLEX_UNIT_SP)\n     * @param size The size of the text\n     ",
    "links" : [ "android.widget.TextView#setTextSize(int" ]
  }, {
    "name" : "public void setTextViewCompoundDrawables(int viewId, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling\n     * {@link TextView#setCompoundDrawablesWithIntrinsicBounds(int, int, int, int)}.\n     *\n     * @param viewId The id of the view whose text should change\n     * @param left The id of a drawable to place to the left of the text, or 0\n     * @param top The id of a drawable to place above the text, or 0\n     * @param right The id of a drawable to place to the right of the text, or 0\n     * @param bottom The id of a drawable to place below the text, or 0\n     ",
    "links" : [ "android.widget.TextView#setCompoundDrawablesWithIntrinsicBounds(int" ]
  }, {
    "name" : "public void setTextViewCompoundDrawablesRelative(int viewId, int start, int top, int end, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link\n     * TextView#setCompoundDrawablesRelativeWithIntrinsicBounds(int, int, int, int)}.\n     *\n     * @param viewId The id of the view whose text should change\n     * @param start The id of a drawable to place before the text (relative to the\n     * layout direction), or 0\n     * @param top The id of a drawable to place above the text, or 0\n     * @param end The id of a drawable to place after the text, or 0\n     * @param bottom The id of a drawable to place below the text, or 0\n     ",
    "links" : [ "android.widget.TextView#setCompoundDrawablesRelativeWithIntrinsicBounds(int" ]
  }, {
    "name" : "public void setTextViewCompoundDrawables(int viewId, Icon left, Icon top, Icon right, Icon bottom)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link\n     * TextView#setCompoundDrawablesWithIntrinsicBounds(Drawable, Drawable, Drawable, Drawable)}\n     * using the drawables yielded by {@link Icon#loadDrawable(Context)}.\n     *\n     * @param viewId The id of the view whose text should change\n     * @param left an Icon to place to the left of the text, or 0\n     * @param top an Icon to place above the text, or 0\n     * @param right an Icon to place to the right of the text, or 0\n     * @param bottom an Icon to place below the text, or 0\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.drawable.Icon#loadDrawable(Context)", "android.widget.TextView#setCompoundDrawablesWithIntrinsicBounds(Drawable" ]
  }, {
    "name" : "public void setTextViewCompoundDrawablesRelative(int viewId, Icon start, Icon top, Icon end, Icon bottom)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link\n     * TextView#setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable, Drawable, Drawable, Drawable)}\n     * using the drawables yielded by {@link Icon#loadDrawable(Context)}.\n     *\n     * @param viewId The id of the view whose text should change\n     * @param start an Icon to place before the text (relative to the\n     * layout direction), or 0\n     * @param top an Icon to place above the text, or 0\n     * @param end an Icon to place after the text, or 0\n     * @param bottom an Icon to place below the text, or 0\n     *\n     * @hide\n     ",
    "links" : [ "android.widget.TextView#setCompoundDrawablesRelativeWithIntrinsicBounds(Drawable", "android.graphics.drawable.Icon#loadDrawable(Context)" ]
  }, {
    "name" : "public void setImageViewResource(int viewId, int srcId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ImageView#setImageResource(int)}\n     *\n     * @param viewId The id of the view whose drawable should change\n     * @param srcId The new resource id for the drawable\n     ",
    "links" : [ "android.widget.ImageView#setImageResource(int)" ]
  }, {
    "name" : "public void setImageViewUri(int viewId, Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ImageView#setImageURI(Uri)}\n     *\n     * @param viewId The id of the view whose drawable should change\n     * @param uri The Uri for the image\n     ",
    "links" : [ "android.widget.ImageView#setImageURI(Uri)" ]
  }, {
    "name" : "public void setImageViewBitmap(int viewId, Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ImageView#setImageBitmap(Bitmap)}\n     *\n     * @param viewId The id of the view whose bitmap should change\n     * @param bitmap The new Bitmap for the drawable\n     ",
    "links" : [ "android.widget.ImageView#setImageBitmap(Bitmap)" ]
  }, {
    "name" : "public void setImageViewIcon(int viewId, Icon icon)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ImageView#setImageIcon(Icon)}\n     *\n     * @param viewId The id of the view whose bitmap should change\n     * @param icon The new Icon for the ImageView\n     ",
    "links" : [ "android.widget.ImageView#setImageIcon(Icon)" ]
  }, {
    "name" : "public void setEmptyView(int viewId, int emptyViewId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link AdapterView#setEmptyView(View)}\n     *\n     * @param viewId The id of the view on which to set the empty view\n     * @param emptyViewId The view id of the empty view\n     ",
    "links" : [ "android.widget.AdapterView#setEmptyView(View)" ]
  }, {
    "name" : "public void setChronometer(int viewId, long base, String format, boolean started)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link Chronometer#setBase Chronometer.setBase},\n     * {@link Chronometer#setFormat Chronometer.setFormat},\n     * and {@link Chronometer#start Chronometer.start()} or\n     * {@link Chronometer#stop Chronometer.stop()}.\n     *\n     * @param viewId The id of the {@link Chronometer} to change\n     * @param base The time at which the timer would have read 0:00.  This\n     *             time should be based off of\n     *             {@link android.os.SystemClock#elapsedRealtime SystemClock.elapsedRealtime()}.\n     * @param format The Chronometer format string, or null to\n     *               simply display the timer value.\n     * @param started True if you want the clock to be started, false if not.\n     *\n     * @see #setChronometerCountDown(int, boolean)\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime", "android.widget.Chronometer#setFormat", "android.widget.Chronometer#start", "android.widget.Chronometer#setBase", "android.widget.Chronometer#stop", "android.widget.Chronometer" ]
  }, {
    "name" : "public void setChronometerCountDown(int viewId, boolean isCountDown)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link Chronometer#setCountDown(boolean) Chronometer.setCountDown} on\n     * the chronometer with the given viewId.\n     *\n     * @param viewId The id of the {@link Chronometer} to change\n     * @param isCountDown True if you want the chronometer to count down to base instead of\n     *                    counting up.\n     ",
    "links" : [ "android.widget.Chronometer#setCountDown(boolean)", "android.widget.Chronometer" ]
  }, {
    "name" : "public void setProgressBar(int viewId, int max, int progress, boolean indeterminate)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ProgressBar#setMax ProgressBar.setMax},\n     * {@link ProgressBar#setProgress ProgressBar.setProgress}, and\n     * {@link ProgressBar#setIndeterminate ProgressBar.setIndeterminate}\n     *\n     * If indeterminate is true, then the values for max and progress are ignored.\n     *\n     * @param viewId The id of the {@link ProgressBar} to change\n     * @param max The 100% value for the progress bar\n     * @param progress The current value of the progress bar.\n     * @param indeterminate True if the progress bar is indeterminate,\n     *                false if not.\n     ",
    "links" : [ "android.widget.ProgressBar", "android.widget.ProgressBar#setIndeterminate", "android.widget.ProgressBar#setMax", "android.widget.ProgressBar#setProgress" ]
  }, {
    "name" : "public void setOnClickPendingIntent(int viewId, PendingIntent pendingIntent)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling\n     * {@link android.view.View#setOnClickListener(android.view.View.OnClickListener)}\n     * to launch the provided {@link PendingIntent}. The source bounds\n     * ({@link Intent#getSourceBounds()}) of the intent will be set to the bounds of the clicked\n     * view in screen space.\n     * Note that any activity options associated with the mPendingIntent may get overridden\n     * before starting the intent.\n     *\n     * When setting the on-click action of items within collections (eg. {@link ListView},\n     * {@link StackView} etc.), this method will not work. Instead, use {@link\n     * RemoteViews#setPendingIntentTemplate(int, PendingIntent)} in conjunction with\n     * {@link RemoteViews#setOnClickFillInIntent(int, Intent)}.\n     *\n     * @param viewId The id of the view that will trigger the {@link PendingIntent} when clicked\n     * @param pendingIntent The {@link PendingIntent} to send when user clicks\n     ",
    "links" : [ "android.widget.StackView", "android.widget.RemoteViews#setOnClickFillInIntent(int", "android.app.PendingIntent", "android.widget.ListView", "android.view.View#setOnClickListener(android.view.View.OnClickListener)", "android.widget.RemoteViews#setPendingIntentTemplate(int", "android.app.PendingIntent#getSourceBounds()" ]
  }, {
    "name" : "public void setOnClickResponse(int viewId, @NonNull RemoteResponse response)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent of calling\n     * {@link android.view.View#setOnClickListener(android.view.View.OnClickListener)}\n     * to launch the provided {@link RemoteResponse}.\n     *\n     * @param viewId The id of the view that will trigger the {@link RemoteResponse} when clicked\n     * @param response The {@link RemoteResponse} to send when user clicks\n     ",
    "links" : [ "RemoteResponse", "android.view.View#setOnClickListener(android.view.View.OnClickListener)" ]
  }, {
    "name" : "public void setPendingIntentTemplate(int viewId, PendingIntent pendingIntentTemplate)",
    "returnType" : "void",
    "comment" : "\n     * When using collections (eg. {@link ListView}, {@link StackView} etc.) in widgets, it is very\n     * costly to set PendingIntents on the individual items, and is hence not recommended. Instead\n     * this method should be used to set a single PendingIntent template on the collection, and\n     * individual items can differentiate their on-click behavior using\n     * {@link RemoteViews#setOnClickFillInIntent(int, Intent)}.\n     *\n     * @param viewId The id of the collection who's children will use this PendingIntent template\n     *          when clicked\n     * @param pendingIntentTemplate The {@link PendingIntent} to be combined with extras specified\n     *          by a child of viewId and executed when that child is clicked\n     ",
    "links" : [ "android.widget.StackView", "android.widget.RemoteViews#setOnClickFillInIntent(int", "android.widget.ListView", "android.app.PendingIntent" ]
  }, {
    "name" : "public void setOnClickFillInIntent(int viewId, Intent fillInIntent)",
    "returnType" : "void",
    "comment" : "\n     * When using collections (eg. {@link ListView}, {@link StackView} etc.) in widgets, it is very\n     * costly to set PendingIntents on the individual items, and is hence not recommended. Instead\n     * a single PendingIntent template can be set on the collection, see {@link\n     * RemoteViews#setPendingIntentTemplate(int, PendingIntent)}, and the individual on-click\n     * action of a given item can be distinguished by setting a fillInIntent on that item. The\n     * fillInIntent is then combined with the PendingIntent template in order to determine the final\n     * intent which will be executed when the item is clicked. This works as follows: any fields\n     * which are left blank in the PendingIntent template, but are provided by the fillInIntent\n     * will be overwritten, and the resulting PendingIntent will be used. The rest\n     * of the PendingIntent template will then be filled in with the associated fields that are\n     * set in fillInIntent. See {@link Intent#fillIn(Intent, int)} for more details.\n     *\n     * @param viewId The id of the view on which to set the fillInIntent\n     * @param fillInIntent The intent which will be combined with the parent's PendingIntent\n     *        in order to determine the on-click behavior of the view specified by viewId\n     ",
    "links" : [ "android.widget.StackView", "android.app.PendingIntent#fillIn(Intent", "android.widget.ListView", "android.widget.RemoteViews#setPendingIntentTemplate(int" ]
  }, {
    "name" : "public void setDrawableTint(int viewId, boolean targetBackground, int colorFilter, @NonNull PorterDuff.Mode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling\n     * {@link Drawable#setColorFilter(int, android.graphics.PorterDuff.Mode)},\n     * on the {@link Drawable} of a given view.\n     * <p>\n     *\n     * @param viewId The id of the view that contains the target\n     *            {@link Drawable}\n     * @param targetBackground If true, apply these parameters to the\n     *            {@link Drawable} returned by\n     *            {@link android.view.View#getBackground()}. Otherwise, assume\n     *            the target view is an {@link ImageView} and apply them to\n     *            {@link ImageView#getDrawable()}.\n     * @param colorFilter Specify a color for a\n     *            {@link android.graphics.ColorFilter} for this drawable. This will be ignored if\n     *            {@code mode} is {@code null}.\n     * @param mode Specify a PorterDuff mode for this drawable, or null to leave\n     *            unchanged.\n     ",
    "links" : [ "android.graphics.ColorFilter", "android.graphics.drawable.Drawable#setColorFilter(int", "android.view.View#getBackground()", "android.widget.ImageView#getDrawable()", "android.widget.ImageView", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setRippleDrawableColor(int viewId, ColorStateList colorStateList)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling\n     * {@link RippleDrawable#setColor(ColorStateList)} on the {@link Drawable} of a given view,\n     * assuming it's a {@link RippleDrawable}.\n     * <p>\n     *\n     * @param viewId The id of the view that contains the target\n     *            {@link RippleDrawable}\n     * @param colorStateList Specify a color for a\n     *            {@link ColorStateList} for this drawable.\n     ",
    "links" : [ "android.content.res.ColorStateList", "android.graphics.drawable.RippleDrawable#setColor(ColorStateList)", "android.graphics.drawable.RippleDrawable", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public void setProgressTintList(int viewId, ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling {@link android.widget.ProgressBar#setProgressTintList}.\n     *\n     * @param viewId The id of the view whose tint should change\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     ",
    "links" : [ "android.widget.ProgressBar#setProgressTintList" ]
  }, {
    "name" : "public void setProgressBackgroundTintList(int viewId, ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling {@link android.widget.ProgressBar#setProgressBackgroundTintList}.\n     *\n     * @param viewId The id of the view whose tint should change\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     ",
    "links" : [ "android.widget.ProgressBar#setProgressBackgroundTintList" ]
  }, {
    "name" : "public void setProgressIndeterminateTintList(int viewId, ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling {@link android.widget.ProgressBar#setIndeterminateTintList}.\n     *\n     * @param viewId The id of the view whose tint should change\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     ",
    "links" : [ "android.widget.ProgressBar#setIndeterminateTintList" ]
  }, {
    "name" : "public void setTextColor(int viewId, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.widget.TextView#setTextColor(int)}.\n     *\n     * @param viewId The id of the view whose text color should change\n     * @param color Sets the text color for all the states (normal, selected,\n     *            focused) to be this color.\n     ",
    "links" : [ "android.widget.TextView#setTextColor(int)" ]
  }, {
    "name" : "public void setTextColor(int viewId, @ColorInt ColorStateList colors)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling {@link android.widget.TextView#setTextColor(ColorStateList)}.\n     *\n     * @param viewId The id of the view whose text color should change\n     * @param colors the text colors to set\n     ",
    "links" : [ "android.widget.TextView#setTextColor(ColorStateList)" ]
  }, {
    "name" : "public void setRemoteAdapter(int appWidgetId, int viewId, Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}.\n     *\n     * @param appWidgetId The id of the app widget which contains the specified view. (This\n     *      parameter is ignored in this deprecated method)\n     * @param viewId The id of the {@link AdapterView}\n     * @param intent The intent of the service which will be\n     *            providing data to the RemoteViewsAdapter\n     * @deprecated This method has been deprecated. See\n     *      {@link android.widget.RemoteViews#setRemoteAdapter(int, Intent)}\n     ",
    "links" : [ "android.widget.RemoteViews#setRemoteAdapter(int", "android.widget.AbsListView#setRemoteViewsAdapter(Intent)", "android.widget.AdapterView" ]
  }, {
    "name" : "public void setRemoteAdapter(int viewId, Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.widget.AbsListView#setRemoteViewsAdapter(Intent)}.\n     * Can only be used for App Widgets.\n     *\n     * @param viewId The id of the {@link AdapterView}\n     * @param intent The intent of the service which will be\n     *            providing data to the RemoteViewsAdapter\n     ",
    "links" : [ "android.widget.AbsListView#setRemoteViewsAdapter(Intent)", "android.widget.AdapterView" ]
  }, {
    "name" : "public void setRemoteAdapter(int viewId, ArrayList<RemoteViews> list, int viewTypeCount)",
    "returnType" : "void",
    "comment" : "\n     * Creates a simple Adapter for the viewId specified. The viewId must point to an AdapterView,\n     * ie. {@link ListView}, {@link GridView}, {@link StackView} or {@link AdapterViewAnimator}.\n     * This is a simpler but less flexible approach to populating collection widgets. Its use is\n     * encouraged for most scenarios, as long as the total memory within the list of RemoteViews\n     * is relatively small (ie. doesn't contain large or numerous Bitmaps, see {@link\n     * RemoteViews#setImageViewBitmap}). In the case of numerous images, the use of API is still\n     * possible by setting image URIs instead of Bitmaps, see {@link RemoteViews#setImageViewUri}.\n     *\n     * This API is supported in the compatibility library for previous API levels, see\n     * RemoteViewsCompat.\n     *\n     * @param viewId The id of the {@link AdapterView}\n     * @param list The list of RemoteViews which will populate the view specified by viewId.\n     * @param viewTypeCount The maximum number of unique layout id's used to construct the list of\n     *      RemoteViews. This count cannot change during the life-cycle of a given widget, so this\n     *      parameter should account for the maximum possible number of types that may appear in the\n     *      See {@link Adapter#getViewTypeCount()}.\n     *\n     * @hide\n     * @deprecated this appears to have no users outside of UnsupportedAppUsage?\n     ",
    "links" : [ "android.widget.AdapterViewAnimator", "android.widget.StackView", "android.widget.GridView", "android.widget.RemoteViews#setImageViewUri", "android.widget.ListView", "android.widget.RemoteViews#setImageViewBitmap", "android.widget.AdapterView", "android.widget.Adapter#getViewTypeCount()" ]
  }, {
    "name" : "public void setScrollPosition(int viewId, int position)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ListView#smoothScrollToPosition(int)}.\n     *\n     * @param viewId The id of the view to change\n     * @param position Scroll to this adapter position\n     ",
    "links" : [ "android.widget.ListView#smoothScrollToPosition(int)" ]
  }, {
    "name" : "public void setRelativeScrollPosition(int viewId, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link ListView#smoothScrollByOffset(int)}.\n     *\n     * @param viewId The id of the view to change\n     * @param offset Scroll by this adapter position offset\n     ",
    "links" : [ "android.widget.ListView#smoothScrollByOffset(int)" ]
  }, {
    "name" : "public void setViewPadding(int viewId, int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.view.View#setPadding(int, int, int, int)}.\n     *\n     * @param viewId The id of the view to change\n     * @param left the left padding in pixels\n     * @param top the top padding in pixels\n     * @param right the right padding in pixels\n     * @param bottom the bottom padding in pixels\n     ",
    "links" : [ "android.view.View#setPadding(int" ]
  }, {
    "name" : "public void setViewLayoutMarginEndDimen(int viewId, @DimenRes int endMarginDimen)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Equivalent to calling {@link android.view.ViewGroup.MarginLayoutParams#setMarginEnd(int)}.\n     * Only works if the {@link View#getLayoutParams()} supports margins.\n     * Hidden for now since we don't want to support this for all different layout margins yet.\n     *\n     * @param viewId The id of the view to change\n     * @param endMarginDimen a dimen resource to read the margin from or 0 to clear the margin.\n     ",
    "links" : [ "android.view.ViewGroup.MarginLayoutParams#setMarginEnd(int)", "android.appwidget.AppWidgetHostView#getLayoutParams()" ]
  }, {
    "name" : "public void setViewLayoutMarginEnd(int viewId, @DimenRes int endMargin)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.view.ViewGroup.MarginLayoutParams#setMarginEnd(int)}.\n     * Only works if the {@link View#getLayoutParams()} supports margins.\n     * Hidden for now since we don't want to support this for all different layout margins yet.\n     *\n     * @param viewId The id of the view to change\n     * @param endMargin a value in pixels for the end margin.\n     * @hide\n     ",
    "links" : [ "android.view.ViewGroup.MarginLayoutParams#setMarginEnd(int)", "android.appwidget.AppWidgetHostView#getLayoutParams()" ]
  }, {
    "name" : "public void setViewLayoutMarginBottomDimen(int viewId, @DimenRes int bottomMarginDimen)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to setting {@link android.view.ViewGroup.MarginLayoutParams#bottomMargin}.\n     *\n     * @param bottomMarginDimen a dimen resource to read the margin from or 0 to clear the margin.\n     * @hide\n     ",
    "links" : [ "android.view.ViewGroup.MarginLayoutParams#bottomMargin" ]
  }, {
    "name" : "public void setViewLayoutWidth(int viewId, int layoutWidth)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to setting {@link android.view.ViewGroup.LayoutParams#width}.\n     *\n     * @param layoutWidth one of 0, MATCH_PARENT or WRAP_CONTENT. Other sizes are not allowed\n     *                    because they behave poorly when the density changes.\n     * @hide\n     ",
    "links" : [ "android.view.ViewGroup.LayoutParams#width" ]
  }, {
    "name" : "public void setBoolean(int viewId, String methodName, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one boolean on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setByte(int viewId, String methodName, byte value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one byte on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShort(int viewId, String methodName, short value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one short on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInt(int viewId, String methodName, int value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one int on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorStateList(int viewId, String methodName, ColorStateList value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one ColorStateList on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLong(int viewId, String methodName, long value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one long on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFloat(int viewId, String methodName, float value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one float on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDouble(int viewId, String methodName, double value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one double on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChar(int viewId, String methodName, char value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one char on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setString(int viewId, String methodName, String value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one String on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCharSequence(int viewId, String methodName, CharSequence value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one CharSequence on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUri(int viewId, String methodName, Uri value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one Uri on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBitmap(int viewId, String methodName, Bitmap value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one Bitmap on a view in the layout for this RemoteViews.\n     * @more\n     * <p class=\"note\">The bitmap will be flattened into the parcel if this object is\n     * sent across processes, so it may end up using a lot of memory, and may be fairly slow.</p>\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBundle(int viewId, String methodName, Bundle value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one Bundle on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The value to pass to the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntent(int viewId, String methodName, Intent value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one Intent on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The {@link android.content.Intent} to pass the method.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "public void setIcon(int viewId, String methodName, Icon value)",
    "returnType" : "void",
    "comment" : "\n     * Call a method taking one Icon on a view in the layout for this RemoteViews.\n     *\n     * @param viewId The id of the view on which to call the method.\n     * @param methodName The name of the method to call.\n     * @param value The {@link android.graphics.drawable.Icon} to pass the method.\n     ",
    "links" : [ "android.graphics.drawable.Icon" ]
  }, {
    "name" : "public void setContentDescription(int viewId, CharSequence contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling View.setContentDescription(CharSequence).\n     *\n     * @param viewId The id of the view whose content description should change.\n     * @param contentDescription The new content description for the view.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityTraversalBefore(int viewId, int nextId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.view.View#setAccessibilityTraversalBefore(int)}.\n     *\n     * @param viewId The id of the view whose before view in accessibility traversal to set.\n     * @param nextId The id of the next in the accessibility traversal.\n     *",
    "links" : [ "android.view.View#setAccessibilityTraversalBefore(int)" ]
  }, {
    "name" : "public void setAccessibilityTraversalAfter(int viewId, int nextId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link android.view.View#setAccessibilityTraversalAfter(int)}.\n     *\n     * @param viewId The id of the view whose after view in accessibility traversal to set.\n     * @param nextId The id of the next in the accessibility traversal.\n     *",
    "links" : [ "android.view.View#setAccessibilityTraversalAfter(int)" ]
  }, {
    "name" : "public void setLabelFor(int viewId, int labeledId)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link View#setLabelFor(int)}.\n     *\n     * @param viewId The id of the view whose property to set.\n     * @param labeledId The id of a view for which this view serves as a label.\n     ",
    "links" : [ "android.appwidget.AppWidgetHostView#setLabelFor(int)" ]
  }, {
    "name" : "public void setLightBackgroundLayoutId(@LayoutRes int layoutId)",
    "returnType" : "void",
    "comment" : "\n     * Provides an alternate layout ID, which can be used to inflate this view. This layout will be\n     * used by the host when the widgets displayed on a light-background where foreground elements\n     * and text can safely draw using a dark color without any additional background protection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews getDarkTextViews()",
    "returnType" : "RemoteViews",
    "comment" : "\n     * If this view supports dark text versions, creates a copy representing that version,\n     * otherwise returns itself.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private RemoteViews getRemoteViewsToApply(Context context)",
    "returnType" : "RemoteViews",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View apply(Context context, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Inflates the view hierarchy represented by this object and applies\n     * all of the actions.\n     *\n     * <p><strong>Caller beware: this may throw</strong>\n     *\n     * @param context Default context to use\n     * @param parent Parent that the resulting view hierarchy will be attached to. This method\n     * does <strong>not</strong> attach the hierarchy. The caller should do so when appropriate.\n     * @return The inflated view hierarchy\n     ",
    "links" : [ ]
  }, {
    "name" : "public View apply(Context context, ViewGroup parent, OnClickHandler handler)",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View applyWithTheme(Context context, ViewGroup parent, OnClickHandler handler, @StyleRes int applyThemeResId)",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private View inflateView(Context context, RemoteViews rv, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View inflateView(Context context, RemoteViews rv, ViewGroup parent, @StyleRes int applyThemeResId)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean shouldUseStaticFilter()",
    "returnType" : "boolean",
    "comment" : "\n     * A static filter is much lighter than RemoteViews itself. It's optimized here only for\n     * RemoteVies class. Subclasses should always override this and return true if not overriding\n     * {@link this#onLoadClass(Class)}.\n     *\n     * @hide\n     ",
    "links" : [ "#onLoadClass(Class)" ]
  }, {
    "name" : "public CancellationSignal applyAsync(Context context, ViewGroup parent, Executor executor, OnViewAppliedListener listener)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Applies the views asynchronously, moving as much of the task on the background\n     * thread as possible.\n     *\n     * @see #apply(Context, ViewGroup)\n     * @param context Default context to use\n     * @param parent Parent that the resulting view hierarchy will be attached to. This method\n     * does <strong>not</strong> attach the hierarchy. The caller should do so when appropriate.\n     * @param listener the callback to run when all actions have been applied. May be null.\n     * @param executor The executor to use. If null {@link AsyncTask#THREAD_POOL_EXECUTOR} is used.\n     * @return CancellationSignal\n     * @hide\n     ",
    "links" : [ "android.os.AsyncTask#THREAD_POOL_EXECUTOR" ]
  }, {
    "name" : "public CancellationSignal applyAsync(Context context, ViewGroup parent, Executor executor, OnViewAppliedListener listener, OnClickHandler handler)",
    "returnType" : "CancellationSignal",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private AsyncApplyTask getAsyncApplyTask(Context context, ViewGroup parent, OnViewAppliedListener listener, OnClickHandler handler)",
    "returnType" : "AsyncApplyTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reapply(Context context, View v)",
    "returnType" : "void",
    "comment" : "\n     * Applies all of the actions to the provided view.\n     *\n     * <p><strong>Caller beware: this may throw</strong>\n     *\n     * @param v The view to apply the actions to.  This should be the result of\n     * the {@link #apply(Context,ViewGroup)} call.\n     ",
    "links" : [ "#apply(Context" ]
  }, {
    "name" : "public void reapply(Context context, View v, OnClickHandler handler)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CancellationSignal reapplyAsync(Context context, View v, Executor executor, OnViewAppliedListener listener)",
    "returnType" : "CancellationSignal",
    "comment" : "\n     * Applies all the actions to the provided view, moving as much of the task on the background\n     * thread as possible.\n     *\n     * @see #reapply(Context, View)\n     * @param context Default context to use\n     * @param v The view to apply the actions to.  This should be the result of\n     * the {@link #apply(Context,ViewGroup)} call.\n     * @param listener the callback to run when all actions have been applied. May be null.\n     * @param executor The executor to use. If null {@link AsyncTask#THREAD_POOL_EXECUTOR} is used\n     * @return CancellationSignal\n     * @hide\n     ",
    "links" : [ "#apply(Context", "android.os.AsyncTask#THREAD_POOL_EXECUTOR" ]
  }, {
    "name" : "public CancellationSignal reapplyAsync(Context context, View v, Executor executor, OnViewAppliedListener listener, OnClickHandler handler)",
    "returnType" : "CancellationSignal",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void performApply(View v, ViewGroup parent, OnClickHandler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean prefersAsyncApply()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the RemoteViews contains potentially costly operations and should be\n     * applied asynchronously.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Context getContextForResources(Context context)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSequenceNumber()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of actions in this RemoteViews. Can be used as a sequence number.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onLoadClass(Class clazz)",
    "returnType" : "boolean",
    "comment" : "\n     * Used to restrict the views which can be inflated\n     *\n     * @see android.view.LayoutInflater.Filter#onLoadClass(java.lang.Class)\n     * @deprecated Used by system to enforce safe inflation of {@link RemoteViews}. Apps should not\n     * override this method. Changing of this method will NOT affect the process where RemoteViews\n     * is rendered.\n     ",
    "links" : [ "android.widget.RemoteViews" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeActionsToParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo getApplicationInfo(String packageName, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSameAppInfo(ApplicationInfo info)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the {@link #mApplication} is same as the provided info.\n     *\n     * @hide\n     ",
    "links" : [ "#mApplication" ]
  }, {
    "name" : "public static boolean startPendingIntent(View view, PendingIntent pendingIntent, Pair<Intent, ActivityOptions> options)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "EXTRA_REMOTEADAPTER_APPWIDGET_ID", "EXTRA_REMOTEADAPTER_ON_LIGHT_BACKGROUND", "EXTRA_SHARED_ELEMENT_BOUNDS", "MAX_NESTED_VIEWS", "SET_ON_CLICK_RESPONSE_TAG", "REFLECTION_ACTION_TAG", "SET_DRAWABLE_TINT_TAG", "VIEW_GROUP_ACTION_ADD_TAG", "VIEW_CONTENT_NAVIGATION_TAG", "SET_EMPTY_VIEW_ACTION_TAG", "VIEW_GROUP_ACTION_REMOVE_TAG", "SET_PENDING_INTENT_TEMPLATE_TAG", "SET_REMOTE_VIEW_ADAPTER_INTENT_TAG", "TEXT_VIEW_DRAWABLE_ACTION_TAG", "BITMAP_REFLECTION_ACTION_TAG", "TEXT_VIEW_SIZE_ACTION_TAG", "VIEW_PADDING_ACTION_TAG", "SET_REMOTE_VIEW_ADAPTER_LIST_TAG", "SET_REMOTE_INPUTS_ACTION_TAG", "LAYOUT_PARAM_ACTION_TAG", "OVERRIDE_TEXT_COLORS_TAG", "SET_RIPPLE_DRAWABLE_COLOR_TAG", "SET_INT_TAG_TAG", "FLAG_REAPPLY_DISALLOWED", "FLAG_WIDGET_IS_COLLECTION_CHILD", "FLAG_USE_LIGHT_BACKGROUND_LAYOUT", "INFLATER_FILTER", "mApplication", "mLayoutId", "mLightBackgroundLayoutId", "mActions", "mBitmapCache", "mIsRoot", "MODE_NORMAL", "MODE_HAS_LANDSCAPE_AND_PORTRAIT", "mLandscape", "mPortrait", "mApplyFlags", "mClassCookies", "DEFAULT_ON_CLICK_HANDLER", "sMethods", "sLookupKey", "ACTION_NOOP", "CREATOR" ],
  "methodNames" : [ "public void setRemoteInputs(int viewId, RemoteInput[] remoteInputs)", "public void reduceImageSizes(int maxWidth, int maxHeight)", "public void overrideTextColors(int textColor)", "public void setIntTag(int viewId, int key, int tag)", "public void addFlags(@ApplyFlags int flags)", "public boolean hasFlags(@ApplyFlags int flag)", "public void mergeRemoteViews(RemoteViews newRv)", "public void visitUris(@NonNull Consumer<Uri> visitor)", "private static void visitIconUri(Icon icon, @NonNull Consumer<Uri> visitor)", "public static Rect getSourceBounds(View v)", "private MethodHandle getMethod(View view, String methodName, Class<?> paramType, boolean async)", "private static String getParameters(Class<?> paramType)", "private void configureRemoteViewsAsChild(RemoteViews rv)", " void setNotRoot()", "private boolean hasLandscapeAndPortraitLayouts()", "private void readActionsFromParcel(Parcel parcel, int depth)", "private Action getActionFromParcel(Parcel parcel, int depth)", "public RemoteViews clone()", "public String getPackage()", "public int getLayoutId()", "private void setBitmapCache(BitmapCache bitmapCache)", "public int estimateMemoryUsage()", "private void addAction(Action a)", "public void addView(int viewId, RemoteViews nestedView)", "public void addView(int viewId, RemoteViews nestedView, int index)", "public void removeAllViews(int viewId)", "public void removeAllViewsExceptId(int viewId, int viewIdToKeep)", "public void showNext(int viewId)", "public void showPrevious(int viewId)", "public void setDisplayedChild(int viewId, int childIndex)", "public void setViewVisibility(int viewId, int visibility)", "public void setTextViewText(int viewId, CharSequence text)", "public void setTextViewTextSize(int viewId, int units, float size)", "public void setTextViewCompoundDrawables(int viewId, int left, int top, int right, int bottom)", "public void setTextViewCompoundDrawablesRelative(int viewId, int start, int top, int end, int bottom)", "public void setTextViewCompoundDrawables(int viewId, Icon left, Icon top, Icon right, Icon bottom)", "public void setTextViewCompoundDrawablesRelative(int viewId, Icon start, Icon top, Icon end, Icon bottom)", "public void setImageViewResource(int viewId, int srcId)", "public void setImageViewUri(int viewId, Uri uri)", "public void setImageViewBitmap(int viewId, Bitmap bitmap)", "public void setImageViewIcon(int viewId, Icon icon)", "public void setEmptyView(int viewId, int emptyViewId)", "public void setChronometer(int viewId, long base, String format, boolean started)", "public void setChronometerCountDown(int viewId, boolean isCountDown)", "public void setProgressBar(int viewId, int max, int progress, boolean indeterminate)", "public void setOnClickPendingIntent(int viewId, PendingIntent pendingIntent)", "public void setOnClickResponse(int viewId, @NonNull RemoteResponse response)", "public void setPendingIntentTemplate(int viewId, PendingIntent pendingIntentTemplate)", "public void setOnClickFillInIntent(int viewId, Intent fillInIntent)", "public void setDrawableTint(int viewId, boolean targetBackground, int colorFilter, @NonNull PorterDuff.Mode mode)", "public void setRippleDrawableColor(int viewId, ColorStateList colorStateList)", "public void setProgressTintList(int viewId, ColorStateList tint)", "public void setProgressBackgroundTintList(int viewId, ColorStateList tint)", "public void setProgressIndeterminateTintList(int viewId, ColorStateList tint)", "public void setTextColor(int viewId, @ColorInt int color)", "public void setTextColor(int viewId, @ColorInt ColorStateList colors)", "public void setRemoteAdapter(int appWidgetId, int viewId, Intent intent)", "public void setRemoteAdapter(int viewId, Intent intent)", "public void setRemoteAdapter(int viewId, ArrayList<RemoteViews> list, int viewTypeCount)", "public void setScrollPosition(int viewId, int position)", "public void setRelativeScrollPosition(int viewId, int offset)", "public void setViewPadding(int viewId, int left, int top, int right, int bottom)", "public void setViewLayoutMarginEndDimen(int viewId, @DimenRes int endMarginDimen)", "public void setViewLayoutMarginEnd(int viewId, @DimenRes int endMargin)", "public void setViewLayoutMarginBottomDimen(int viewId, @DimenRes int bottomMarginDimen)", "public void setViewLayoutWidth(int viewId, int layoutWidth)", "public void setBoolean(int viewId, String methodName, boolean value)", "public void setByte(int viewId, String methodName, byte value)", "public void setShort(int viewId, String methodName, short value)", "public void setInt(int viewId, String methodName, int value)", "public void setColorStateList(int viewId, String methodName, ColorStateList value)", "public void setLong(int viewId, String methodName, long value)", "public void setFloat(int viewId, String methodName, float value)", "public void setDouble(int viewId, String methodName, double value)", "public void setChar(int viewId, String methodName, char value)", "public void setString(int viewId, String methodName, String value)", "public void setCharSequence(int viewId, String methodName, CharSequence value)", "public void setUri(int viewId, String methodName, Uri value)", "public void setBitmap(int viewId, String methodName, Bitmap value)", "public void setBundle(int viewId, String methodName, Bundle value)", "public void setIntent(int viewId, String methodName, Intent value)", "public void setIcon(int viewId, String methodName, Icon value)", "public void setContentDescription(int viewId, CharSequence contentDescription)", "public void setAccessibilityTraversalBefore(int viewId, int nextId)", "public void setAccessibilityTraversalAfter(int viewId, int nextId)", "public void setLabelFor(int viewId, int labeledId)", "public void setLightBackgroundLayoutId(@LayoutRes int layoutId)", "public RemoteViews getDarkTextViews()", "private RemoteViews getRemoteViewsToApply(Context context)", "public View apply(Context context, ViewGroup parent)", "public View apply(Context context, ViewGroup parent, OnClickHandler handler)", "public View applyWithTheme(Context context, ViewGroup parent, OnClickHandler handler, @StyleRes int applyThemeResId)", "private View inflateView(Context context, RemoteViews rv, ViewGroup parent)", "private View inflateView(Context context, RemoteViews rv, ViewGroup parent, @StyleRes int applyThemeResId)", "protected boolean shouldUseStaticFilter()", "public CancellationSignal applyAsync(Context context, ViewGroup parent, Executor executor, OnViewAppliedListener listener)", "public CancellationSignal applyAsync(Context context, ViewGroup parent, Executor executor, OnViewAppliedListener listener, OnClickHandler handler)", "private AsyncApplyTask getAsyncApplyTask(Context context, ViewGroup parent, OnViewAppliedListener listener, OnClickHandler handler)", "public void reapply(Context context, View v)", "public void reapply(Context context, View v, OnClickHandler handler)", "public CancellationSignal reapplyAsync(Context context, View v, Executor executor, OnViewAppliedListener listener)", "public CancellationSignal reapplyAsync(Context context, View v, Executor executor, OnViewAppliedListener listener, OnClickHandler handler)", "private void performApply(View v, ViewGroup parent, OnClickHandler handler)", "public boolean prefersAsyncApply()", "private Context getContextForResources(Context context)", "public int getSequenceNumber()", "public boolean onLoadClass(Class clazz)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private void writeActionsToParcel(Parcel parcel)", "private static ApplicationInfo getApplicationInfo(String packageName, int userId)", "public boolean hasSameAppInfo(ApplicationInfo info)", "public static boolean startPendingIntent(View view, PendingIntent pendingIntent, Pair<Intent, ActivityOptions> options)" ]
}