{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/JapaneseCalendar.java",
  "packageName" : "android.icu.util",
  "className" : "JapaneseCalendar",
  "comment" : "\n * <code>JapaneseCalendar</code> is a subclass of <code>GregorianCalendar</code>\n * that numbers years and eras based on the reigns of the Japanese emperors.\n * The Japanese calendar is identical to the Gregorian calendar in all respects\n * except for the year and era.  The ascension of each  emperor to the throne\n * begins a new era, and the years of that era are numbered starting with the\n * year of ascension as year 1.\n * <p>\n * Note that in the year of an imperial ascension, there are two possible sets\n * of year and era values: that for the old era and for the new.  For example, a\n * new era began on January 7, 1989 AD.  Strictly speaking, the first six days\n * of that year were in the Showa era, e.g. \"January 6, 64 Showa\", while the rest\n * of the year was in the Heisei era, e.g. \"January 7, 1 Heisei\".  This class\n * handles this distinction correctly when computing dates.  However, in lenient\n * mode either form of date is acceptable as input.\n * <p>\n * In modern times, eras have started on January 8, 1868 AD, Gregorian (Meiji),\n * July 30, 1912 (Taisho), December 25, 1926 (Showa), and January 7, 1989 (Heisei).  Constants\n * for these eras, suitable for use in the <code>ERA</code> field, are provided\n * in this class.  Note that the <em>number</em> used for each era is more or\n * less arbitrary.  Currently, the era starting in 645 AD is era #0; however this\n * may change in the future.  Use the predefined constants rather than using actual,\n * absolute numbers.\n * <p>\n * Since ICU4J 63, start date of each era is imported from CLDR. CLDR era data\n * may contain tentative era in near future with placeholder names. By default,\n * such era data is not enabled. ICU4J users who want to test the behavior of\n * the future era can enable this by one of following settings (in the priority\n * order):\n * <ol>\n * <li>Java system property <code>ICU_ENABLE_TENTATIVE_ERA=true</code>.</li>\n * <li>Environment variable <code>ICU_ENABLE_TENTATIVE_ERA=true</code>.</li>\n * <li>Java system property <code>jdk.calendar.japanese.supplemental.era=xxx</code>.\n *     (Note: This configuration is used for specifying a new era's start date and\n *     names in OpenJDK. ICU4J implementation enables the CLDR tentative era when\n *     this property is defined, but it does not use the start date and names specified\n *     by the property value.)</li>\n * </ol>\n * <p>\n * This class should not be subclassed.</p>\n * <p>\n * JapaneseCalendar usually should be instantiated using\n * {@link android.icu.util.Calendar#getInstance(ULocale)} passing in a <code>ULocale</code>\n * with the tag <code>\"@calendar=japanese\"</code>.</p>\n *\n * @see android.icu.util.GregorianCalendar\n * @see android.icu.util.Calendar\n *\n * @author Laura Werner\n * @author Alan Liu\n ",
  "links" : [ "android.icu.util.Calendar#getInstance(ULocale)" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " jdk1.4.2 serialver",
    "links" : [ ]
  }, {
    "name" : "GREGORIAN_EPOCH",
    "type" : "int",
    "comment" : " Use 1970 as the default value of EXTENDED_YEAR",
    "links" : [ ]
  }, {
    "name" : "ERA_RULES",
    "type" : "EraRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CURRENT_ERA",
    "type" : "int",
    "comment" : "\n     * @deprecated Use era constants, e.g. {@link #REIWA}, instead.\n     * @removed on Android but @stable in ICU\n     ",
    "links" : [ "#REIWA" ]
  }, {
    "name" : "MEIJI",
    "type" : "int",
    "comment" : "\n     * Constant for the era starting on Sept. 8, 1868 AD.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAISHO",
    "type" : "int",
    "comment" : "\n     * Constant for the era starting on July 30, 1912 AD.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOWA",
    "type" : "int",
    "comment" : "\n     * Constant for the era starting on Dec. 25, 1926 AD.\n     ",
    "links" : [ ]
  }, {
    "name" : "HEISEI",
    "type" : "int",
    "comment" : "\n     * Constant for the era starting on Jan. 7, 1989 AD.\n     ",
    "links" : [ ]
  }, {
    "name" : "REIWA",
    "type" : "int",
    "comment" : "\n     * Constant for the era starting on May 1, 2019 AD.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean enableTentativeEra()",
    "returnType" : "boolean",
    "comment" : "\n     * Check environment variable that enables use of future eras.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetExtendedYear()",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getDefaultMonthInYear(int extendedYear)",
    "returnType" : "int",
    "comment" : "\n     * Called by handleComputeJulianDay.  Returns the default month (0-based) for the year,\n     * taking year and era into account.  Defaults to 0 (JANUARY) for Gregorian.\n     * @param extendedYear the extendedYear, as returned by handleGetExtendedYear\n     * @return the default month\n     * @see #MONTH\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getDefaultDayInMonth(int extendedYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * Called by handleComputeJulianDay.  Returns the default day (1-based) for the month,\n     * taking currently-set year and era into account.  Defaults to 1 for Gregorian.\n     * @param extendedYear the extendedYear, as returned by handleGetExtendedYear\n     * @param month the month, as returned by getDefaultMonthInYear\n     * @return the default day of the month\n     * @see #DAY_OF_MONTH\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void handleComputeFields(int julianDay)",
    "returnType" : "void",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetLimit(int field, int limitType)",
    "returnType" : "int",
    "comment" : "\n     * Override GregorianCalendar.  We should really handle YEAR_WOY and\n     * EXTENDED_YEAR here too to implement the 1..5000000 range, but it's\n     * not critical.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean haveDefaultCentury()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActualMaximum(int field)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean isEra0CountingBackward()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean enableTentativeEra()", "protected int handleGetExtendedYear()", "protected int getDefaultMonthInYear(int extendedYear)", "protected int getDefaultDayInMonth(int extendedYear, int month)", "protected void handleComputeFields(int julianDay)", "protected int handleGetLimit(int field, int limitType)", "public String getType()", "public boolean haveDefaultCentury()", "public int getActualMaximum(int field)", "protected boolean isEra0CountingBackward()" ],
  "variableNames" : [ "serialVersionUID", "GREGORIAN_EPOCH", "ERA_RULES", "CURRENT_ERA", "MEIJI", "TAISHO", "SHOWA", "HEISEI", "REIWA" ]
}