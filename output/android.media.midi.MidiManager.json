{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/midi/MidiManager.java",
  "packageName" : "android.media.midi",
  "className" : "MidiManager",
  "comment" : "\n * This class is the public application interface to the MIDI service.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_MIDI_BYTE_STREAM",
    "type" : "int",
    "comment" : "\n     * Constant representing MIDI devices.\n     * These devices do NOT support Universal MIDI Packets by default.\n     * These support the original MIDI 1.0 byte stream.\n     * When communicating to a USB device, a raw byte stream will be padded for USB.\n     * Likewise, for a Bluetooth device, the raw bytes will be converted for Bluetooth.\n     * For virtual devices, the byte stream will be passed directly.\n     * If Universal MIDI Packets are needed, please use MIDI-CI.\n     * @see MidiManager#getDevicesForTransport\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSPORT_UNIVERSAL_MIDI_PACKETS",
    "type" : "int",
    "comment" : "\n     * Constant representing Universal MIDI devices.\n     * These devices do support Universal MIDI Packets (UMP) by default.\n     * When sending data to these devices, please send UMP.\n     * Packets should always be a multiple of 4 bytes.\n     * UMP is defined in the USB MIDI 2.0 spec. Please read the standard for more info.\n     * @see MidiManager#getDevicesForTransport\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_INTENT",
    "type" : "String",
    "comment" : "\n     * Intent for starting BluetoothMidiService\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_PACKAGE",
    "type" : "String",
    "comment" : "\n     * BluetoothMidiService package name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_CLASS",
    "type" : "String",
    "comment" : "\n     * BluetoothMidiService class name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMidiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceListeners",
    "type" : "ConcurrentHashMap<DeviceCallback, DeviceListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerDeviceCallback(DeviceCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive notifications when MIDI 1.0 devices are added and removed.\n     * These are devices that do not default to Universal MIDI Packets. To register for a callback\n     * for those, call {@link #registerDeviceCallback} instead.\n     *\n     * The {@link  DeviceCallback#onDeviceStatusChanged} method will be called immediately\n     * for any devices that have open ports. This allows applications to know which input\n     * ports are already in use and, therefore, unavailable.\n     *\n     * Applications should call {@link #getDevices} before registering the callback\n     * to get a list of devices already added.\n     *\n     * @param callback a {@link DeviceCallback} for MIDI device notifications\n     * @param handler The {@link android.os.Handler Handler} that will be used for delivering the\n     *                device notifications. If handler is null, then the thread used for the\n     *                callback is unspecified.\n     * @deprecated Use {@link #registerDeviceCallback(int, Executor, DeviceCallback)} instead.\n     ",
    "links" : [ "#getDevices", "#onDeviceStatusChanged", "#registerDeviceCallback(int", "android.os.Handler", "#registerDeviceCallback", "DeviceCallback" ]
  }, {
    "name" : "public void registerDeviceCallback(@Transport int transport, @NonNull Executor executor, @NonNull DeviceCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive notifications when MIDI devices are added and removed\n     * for a specific transport type.\n     *\n     * The {@link  DeviceCallback#onDeviceStatusChanged} method will be called immediately\n     * for any devices that have open ports. This allows applications to know which input\n     * ports are already in use and, therefore, unavailable.\n     *\n     * Applications should call {@link #getDevicesForTransport} before registering the callback\n     * to get a list of devices already added.\n     *\n     * @param transport The transport to be used. This is either TRANSPORT_MIDI_BYTE_STREAM or\n     *            TRANSPORT_UNIVERSAL_MIDI_PACKETS.\n     * @param executor The {@link Executor} that will be used for delivering the\n     *                device notifications.\n     * @param callback a {@link DeviceCallback} for MIDI device notifications\n     ",
    "links" : [ "#onDeviceStatusChanged", "java.util.concurrent.Executor", "#getDevicesForTransport", "DeviceCallback" ]
  }, {
    "name" : "public void unregisterDeviceCallback(DeviceCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link DeviceCallback}.\n     *\n     * @param callback a {@link DeviceCallback} to unregister\n     ",
    "links" : [ "DeviceCallback" ]
  }, {
    "name" : "public MidiDeviceInfo[] getDevices()",
    "returnType" : "MidiDeviceInfo[]",
    "comment" : "\n     * Gets a list of connected MIDI devices. This returns all devices that do\n     * not default to Universal MIDI Packets. To get those instead, please call\n     * {@link #getDevicesForTransport} instead.\n     *\n     * @return an array of MIDI devices\n     * @deprecated Use {@link #getDevicesForTransport} instead.\n     ",
    "links" : [ "#getDevicesForTransport" ]
  }, {
    "name" : "public Set<MidiDeviceInfo> getDevicesForTransport(@Transport int transport)",
    "returnType" : "Set<MidiDeviceInfo>",
    "comment" : "\n     * Gets a list of connected MIDI devices by transport. TRANSPORT_MIDI_BYTE_STREAM\n     * is used for MIDI 1.0 and is the most common.\n     * For devices with built in Universal MIDI Packet support, use\n     * TRANSPORT_UNIVERSAL_MIDI_PACKETS instead.\n     *\n     * @param transport The transport to be used. This is either TRANSPORT_MIDI_BYTE_STREAM or\n     *                  TRANSPORT_UNIVERSAL_MIDI_PACKETS.\n     * @return a collection of MIDI devices\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendOpenDeviceResponse(final MidiDevice device, final OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void openDevice(MidiDeviceInfo deviceInfo, OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Opens a MIDI device for reading and writing.\n     *\n     * @param deviceInfo a {@link android.media.midi.MidiDeviceInfo} to open\n     * @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called\n     *                 to receive the result\n     * @param handler the {@link android.os.Handler Handler} that will be used for delivering\n     *                the result. If handler is null, then the thread used for the\n     *                listener is unspecified.\n     ",
    "links" : [ "MidiManager.OnDeviceOpenedListener", "android.os.Handler", "android.media.midi.MidiDeviceInfo" ]
  }, {
    "name" : "public void openBluetoothDevice(BluetoothDevice bluetoothDevice, OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Opens a Bluetooth MIDI device for reading and writing.\n     *\n     * @param bluetoothDevice a {@link android.bluetooth.BluetoothDevice} to open as a MIDI device\n     * @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called to receive the\n     * result\n     * @param handler the {@link android.os.Handler Handler} that will be used for delivering\n     *                the result. If handler is null, then the thread used for the\n     *                listener is unspecified.\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "MidiManager.OnDeviceOpenedListener", "android.os.Handler" ]
  }, {
    "name" : "public void closeBluetoothDevice(@NonNull MidiDevice midiDevice)",
    "returnType" : "void",
    "comment" : " for now",
    "links" : [ ]
  }, {
    "name" : "public MidiDeviceServer createDeviceServer(MidiReceiver[] inputPortReceivers, int numOutputPorts, String[] inputPortNames, String[] outputPortNames, Bundle properties, int type, int defaultProtocol, MidiDeviceServer.Callback callback)",
    "returnType" : "MidiDeviceServer",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerDeviceCallback(DeviceCallback callback, Handler handler)", "public void registerDeviceCallback(@Transport int transport, @NonNull Executor executor, @NonNull DeviceCallback callback)", "public void unregisterDeviceCallback(DeviceCallback callback)", "public MidiDeviceInfo[] getDevices()", "public Set<MidiDeviceInfo> getDevicesForTransport(@Transport int transport)", "private void sendOpenDeviceResponse(final MidiDevice device, final OnDeviceOpenedListener listener, Handler handler)", "public void openDevice(MidiDeviceInfo deviceInfo, OnDeviceOpenedListener listener, Handler handler)", "public void openBluetoothDevice(BluetoothDevice bluetoothDevice, OnDeviceOpenedListener listener, Handler handler)", "public void closeBluetoothDevice(@NonNull MidiDevice midiDevice)", "public MidiDeviceServer createDeviceServer(MidiReceiver[] inputPortReceivers, int numOutputPorts, String[] inputPortNames, String[] outputPortNames, Bundle properties, int type, int defaultProtocol, MidiDeviceServer.Callback callback)" ],
  "variableNames" : [ "TAG", "TRANSPORT_MIDI_BYTE_STREAM", "TRANSPORT_UNIVERSAL_MIDI_PACKETS", "BLUETOOTH_MIDI_SERVICE_INTENT", "BLUETOOTH_MIDI_SERVICE_PACKAGE", "BLUETOOTH_MIDI_SERVICE_CLASS", "mService", "mToken", "mDeviceListeners" ]
}