{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/midi/MidiManager.java",
  "packageName" : "android.media.midi",
  "className" : "MidiManager",
  "comment" : "\n * This class is the public application interface to the MIDI service.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_INTENT",
    "type" : "String",
    "comment" : "\n     * Intent for starting BluetoothMidiService\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_PACKAGE",
    "type" : "String",
    "comment" : "\n     * BluetoothMidiService package name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_MIDI_SERVICE_CLASS",
    "type" : "String",
    "comment" : "\n     * BluetoothMidiService class name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMidiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceListeners",
    "type" : "ConcurrentHashMap<DeviceCallback, DeviceListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerDeviceCallback(DeviceCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to receive notifications when MIDI devices are added and removed.\n     *\n     * The {@link  DeviceCallback#onDeviceStatusChanged} method will be called immediately\n     * for any devices that have open ports. This allows applications to know which input\n     * ports are already in use and, therefore, unavailable.\n     *\n     * Applications should call {@link #getDevices} before registering the callback\n     * to get a list of devices already added.\n     *\n     * @param callback a {@link DeviceCallback} for MIDI device notifications\n     * @param handler The {@link android.os.Handler Handler} that will be used for delivering the\n     *                device notifications. If handler is null, then the thread used for the\n     *                callback is unspecified.\n     ",
    "links" : [ "#getDevices", "#onDeviceStatusChanged", "android.os.Handler", "DeviceCallback" ]
  }, {
    "name" : "public void unregisterDeviceCallback(DeviceCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link DeviceCallback}.\n      *\n     * @param callback a {@link DeviceCallback} to unregister\n     ",
    "links" : [ "DeviceCallback" ]
  }, {
    "name" : "public MidiDeviceInfo[] getDevices()",
    "returnType" : "MidiDeviceInfo[]",
    "comment" : "\n     * Gets the list of all connected MIDI devices.\n     *\n     * @return an array of all MIDI devices\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendOpenDeviceResponse(final MidiDevice device, final OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void openDevice(MidiDeviceInfo deviceInfo, OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Opens a MIDI device for reading and writing.\n     *\n     * @param deviceInfo a {@link android.media.midi.MidiDeviceInfo} to open\n     * @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called\n     *                 to receive the result\n     * @param handler the {@link android.os.Handler Handler} that will be used for delivering\n     *                the result. If handler is null, then the thread used for the\n     *                listener is unspecified.\n     ",
    "links" : [ "MidiManager.OnDeviceOpenedListener", "android.os.Handler", "android.media.midi.MidiDeviceInfo" ]
  }, {
    "name" : "public void openBluetoothDevice(BluetoothDevice bluetoothDevice, OnDeviceOpenedListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Opens a Bluetooth MIDI device for reading and writing.\n     *\n     * @param bluetoothDevice a {@link android.bluetooth.BluetoothDevice} to open as a MIDI device\n     * @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called to receive the\n     * result\n     * @param handler the {@link android.os.Handler Handler} that will be used for delivering\n     *                the result. If handler is null, then the thread used for the\n     *                listener is unspecified.\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "MidiManager.OnDeviceOpenedListener", "android.os.Handler" ]
  }, {
    "name" : "public MidiDeviceServer createDeviceServer(MidiReceiver[] inputPortReceivers, int numOutputPorts, String[] inputPortNames, String[] outputPortNames, Bundle properties, int type, MidiDeviceServer.Callback callback)",
    "returnType" : "MidiDeviceServer",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "BLUETOOTH_MIDI_SERVICE_INTENT", "BLUETOOTH_MIDI_SERVICE_PACKAGE", "BLUETOOTH_MIDI_SERVICE_CLASS", "mService", "mToken", "mDeviceListeners" ],
  "methodNames" : [ "public void registerDeviceCallback(DeviceCallback callback, Handler handler)", "public void unregisterDeviceCallback(DeviceCallback callback)", "public MidiDeviceInfo[] getDevices()", "private void sendOpenDeviceResponse(final MidiDevice device, final OnDeviceOpenedListener listener, Handler handler)", "public void openDevice(MidiDeviceInfo deviceInfo, OnDeviceOpenedListener listener, Handler handler)", "public void openBluetoothDevice(BluetoothDevice bluetoothDevice, OnDeviceOpenedListener listener, Handler handler)", "public MidiDeviceServer createDeviceServer(MidiReceiver[] inputPortReceivers, int numOutputPorts, String[] inputPortNames, String[] outputPortNames, Bundle properties, int type, MidiDeviceServer.Callback callback)" ]
}