{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/usage/UsageEvents.java",
  "packageName" : "android.app.usage",
  "className" : "Event",
  "comment" : "\n     * An event representing a state change for a component.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "NONE",
    "type" : "int",
    "comment" : "\n         * No event type.\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EVENT_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n         * A device level event like {@link #DEVICE_SHUTDOWN} does not have package name, but some\n         * user code always expect a non-null {@link #mPackage} for every event. Use\n         * {@link #DEVICE_EVENT_PACKAGE_NAME} as packageName for these device level events.\n         * @hide\n         ",
    "links" : [ "#mPackage", "#DEVICE_SHUTDOWN", "#DEVICE_EVENT_PACKAGE_NAME" ]
  }, {
    "name" : "MOVE_TO_FOREGROUND",
    "type" : "int",
    "comment" : "\n         * @deprecated by {@link #ACTIVITY_RESUMED}\n         ",
    "links" : [ "#ACTIVITY_RESUMED" ]
  }, {
    "name" : "ACTIVITY_RESUMED",
    "type" : "int",
    "comment" : "\n         * An event type denoting that an {@link android.app.Activity} moved to the foreground.\n         * This event has a package name and class name associated with it and can be retrieved\n         * using {@link #getPackageName()} and {@link #getClassName()}.\n         * If a package has multiple activities, this event is reported for each activity that moves\n         * to foreground.\n         * This event is corresponding to {@link android.app.Activity#onResume()} of the\n         * activity's lifecycle.\n         ",
    "links" : [ "#getPackageName()", "android.app.Activity#onResume()", "#getClassName()", "android.app.Activity" ]
  }, {
    "name" : "MOVE_TO_BACKGROUND",
    "type" : "int",
    "comment" : "\n         * @deprecated by {@link #ACTIVITY_PAUSED}\n         ",
    "links" : [ "#ACTIVITY_PAUSED" ]
  }, {
    "name" : "ACTIVITY_PAUSED",
    "type" : "int",
    "comment" : "\n         * An event type denoting that an {@link android.app.Activity} moved to the background.\n         * This event has a package name and class name associated with it and can be retrieved\n         * using {@link #getPackageName()} and {@link #getClassName()}.\n         * If a package has multiple activities, this event is reported for each activity that moves\n         * to background.\n         * This event is corresponding to {@link android.app.Activity#onPause()} of the activity's\n         * lifecycle.\n         ",
    "links" : [ "#getPackageName()", "#getClassName()", "android.app.Activity", "android.app.Activity#onPause()" ]
  }, {
    "name" : "END_OF_DAY",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a component was in the foreground when the stats\n         * rolled-over. This is effectively treated as a {@link #ACTIVITY_PAUSED}.\n         * This event has a non-null packageName, and a null className.\n         * {@hide}\n         ",
    "links" : [ "#ACTIVITY_PAUSED" ]
  }, {
    "name" : "CONTINUE_PREVIOUS_DAY",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a component was in the foreground the previous day.\n         * This is effectively treated as a {@link #ACTIVITY_RESUMED}.\n         * {@hide}\n         ",
    "links" : [ "#ACTIVITY_RESUMED" ]
  }, {
    "name" : "CONFIGURATION_CHANGE",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the device configuration has changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_INTERACTION",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a package was interacted with in some way by the system.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_INTERACTION",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a package was interacted with in some way by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "SHORTCUT_INVOCATION",
    "type" : "int",
    "comment" : "\n         * An event type denoting that an action equivalent to a ShortcutInfo is taken by the user.\n         *\n         * @see android.content.pm.ShortcutManager#reportShortcutUsed(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "CHOOSER_ACTION",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a package was selected by the user for ChooserActivity.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_SEEN",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a notification was viewed by the user.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "STANDBY_BUCKET_CHANGED",
    "type" : "int",
    "comment" : "\n         * An event type denoting a change in App Standby Bucket. The new bucket can be\n         * retrieved by calling {@link #getAppStandbyBucket()}.\n         *\n         * @see UsageStatsManager#getAppStandbyBucket()\n         ",
    "links" : [ "#getAppStandbyBucket()" ]
  }, {
    "name" : "NOTIFICATION_INTERRUPTION",
    "type" : "int",
    "comment" : "\n         * An event type denoting that an app posted an interruptive notification. Visual and\n         * audible interruptions are included.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SLICE_PINNED_PRIV",
    "type" : "int",
    "comment" : "\n         * A Slice was pinned by the default launcher or the default assistant.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SLICE_PINNED",
    "type" : "int",
    "comment" : "\n         * A Slice was pinned by an app.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_INTERACTIVE",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the screen has gone in to an interactive state (turned\n         * on for full user interaction, not ambient display or other non-interactive state).\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREEN_NON_INTERACTIVE",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the screen has gone in to a non-interactive state\n         * (completely turned off or turned on only in a non-interactive state like ambient\n         * display).\n         ",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_SHOWN",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the screen's keyguard has been shown, whether or not\n         * the screen is off.\n         ",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_HIDDEN",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the screen's keyguard has been hidden.  This typically\n         * happens when the user unlocks their phone after turning it on.\n         ",
    "links" : [ ]
  }, {
    "name" : "FOREGROUND_SERVICE_START",
    "type" : "int",
    "comment" : "\n         * An event type denoting start of a foreground service.\n         * This event has a package name and class name associated with it and can be retrieved\n         * using {@link #getPackageName()} and {@link #getClassName()}.\n         * If a package has multiple foreground services, this event is reported for each service\n         * that is started.\n         ",
    "links" : [ "#getPackageName()", "#getClassName()" ]
  }, {
    "name" : "FOREGROUND_SERVICE_STOP",
    "type" : "int",
    "comment" : "\n         * An event type denoting stop of a foreground service.\n         * This event has a package name and class name associated with it and can be retrieved\n         * using {@link #getPackageName()} and {@link #getClassName()}.\n         * If a package has multiple foreground services, this event is reported for each service\n         * that is stopped.\n         ",
    "links" : [ "#getPackageName()", "#getClassName()" ]
  }, {
    "name" : "CONTINUING_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a foreground service is at started state at beginning of a\n         * time interval.\n         * This is effectively treated as a {@link #FOREGROUND_SERVICE_START}.\n         * {@hide}\n         ",
    "links" : [ "#FOREGROUND_SERVICE_START" ]
  }, {
    "name" : "ROLLOVER_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a foreground service is at started state when the stats\n         * rolled-over at the end of a time interval.\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_STOPPED",
    "type" : "int",
    "comment" : "\n         * An activity becomes invisible on the UI, corresponding to\n         * {@link android.app.Activity#onStop()} of the activity's lifecycle.\n         ",
    "links" : [ "android.app.Activity#onStop()" ]
  }, {
    "name" : "ACTIVITY_DESTROYED",
    "type" : "int",
    "comment" : "\n         * An activity object is destroyed, corresponding to\n         * {@link android.app.Activity#onDestroy()} of the activity's lifecycle.\n         * {@hide}\n         ",
    "links" : [ "android.app.Activity#onDestroy()" ]
  }, {
    "name" : "FLUSH_TO_DISK",
    "type" : "int",
    "comment" : "\n         * The event type demoting that a flush of UsageStatsDatabase to file system. Before the\n         * flush all usage stats need to be updated to latest timestamp to make sure the most\n         * up to date stats are persisted.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_SHUTDOWN",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the Android runtime underwent a shutdown process.\n         * A DEVICE_SHUTDOWN event should be treated as if all started activities and foreground\n         * services are now stopped and no explicit {@link #ACTIVITY_STOPPED} and\n         * {@link #FOREGROUND_SERVICE_STOP} events will be generated for them.\n         *\n         * <p>The DEVICE_SHUTDOWN timestamp is actually the last time UsageStats database is\n         * persisted before the actual shutdown. Events (if there are any) between this timestamp\n         * and the actual shutdown is not persisted in the database. So any open events without\n         * matching close events between DEVICE_SHUTDOWN and {@link #DEVICE_STARTUP} should be\n         * ignored because the closing time is unknown.</p>\n         ",
    "links" : [ "#ACTIVITY_STOPPED", "#DEVICE_STARTUP", "#FOREGROUND_SERVICE_STOP" ]
  }, {
    "name" : "DEVICE_STARTUP",
    "type" : "int",
    "comment" : "\n         * An event type denoting that the Android runtime started up. This could be after a\n         * shutdown or a runtime restart. Any open events without matching close events between\n         * {@link #DEVICE_SHUTDOWN} and DEVICE_STARTUP should be ignored because the closing time is\n         * unknown.\n         ",
    "links" : [ "#DEVICE_SHUTDOWN" ]
  }, {
    "name" : "USER_UNLOCKED",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a user has been unlocked for the first time. This event\n         * mainly indicates when the user's credential encrypted storage was first accessible.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_STOPPED",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a user has been stopped. This typically happens when the\n         * system is being turned off or when users are being switched.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCUS_ID_SET",
    "type" : "int",
    "comment" : "\n         * An event type denoting that new locusId has been set for a given activity.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "APP_COMPONENT_USED",
    "type" : "int",
    "comment" : "\n         * An event type denoting that a component in the package has been used (e.g. broadcast\n         * receiver, service, content provider). This generally matches up with usage that would\n         * cause an app to leave force stop. The component itself is not provided as we are only\n         * interested in whether the package is used, not the component itself.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MAX_EVENT_TYPE",
    "type" : "int",
    "comment" : "\n         * Keep in sync with the greatest event type value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IS_PACKAGE_INSTANT_APP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VALID_FLAG_BITS",
    "type" : "int",
    "comment" : "\n         * Bitwise OR all valid flag constants to create this constant.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "UNASSIGNED_TOKEN",
    "type" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "mPackage",
    "type" : "String",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mPackageToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "String",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mClassToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mInstanceId",
    "type" : "int",
    "comment" : "\n         * Uniquely identifies an activity. It's possible for two activities with the same\n         * pkg/class name to be in lifecycle at the same time. The mInstanceId is guaranteed to be\n         * unique per activity across all apps (not just within a single app).\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mTaskRootPackage",
    "type" : "String",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mTaskRootPackageToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mTaskRootClass",
    "type" : "String",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mTaskRootClassToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mTimeStamp",
    "type" : "long",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mEventType",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "\n         * Only present for {@link #CONFIGURATION_CHANGE} event types.\n         * {@hide}\n         ",
    "links" : [ "#CONFIGURATION_CHANGE" ]
  }, {
    "name" : "mShortcutId",
    "type" : "String",
    "comment" : "\n         * ID of the shortcut.\n         * Only present for {@link #SHORTCUT_INVOCATION} event types.\n         * {@hide}\n         ",
    "links" : [ "#SHORTCUT_INVOCATION" ]
  }, {
    "name" : "mShortcutIdToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mAction",
    "type" : "String",
    "comment" : "\n         * Action type passed to ChooserActivity\n         * Only present for {@link #CHOOSER_ACTION} event types.\n         * {@hide}\n         ",
    "links" : [ "#CHOOSER_ACTION" ]
  }, {
    "name" : "mContentType",
    "type" : "String",
    "comment" : "\n         * Content type passed to ChooserActivity.\n         * Only present for {@link #CHOOSER_ACTION} event types.\n         * {@hide}\n         ",
    "links" : [ "#CHOOSER_ACTION" ]
  }, {
    "name" : "mContentAnnotations",
    "type" : "String[]",
    "comment" : "\n         * Content annotations passed to ChooserActivity.\n         * Only present for {@link #CHOOSER_ACTION} event types.\n         * {@hide}\n         ",
    "links" : [ "#CHOOSER_ACTION" ]
  }, {
    "name" : "mBucketAndReason",
    "type" : "int",
    "comment" : "\n         * The app standby bucket assigned and reason. Bucket is the high order 16 bits, reason\n         * is the low order 16 bits.\n         * Only present for {@link #STANDBY_BUCKET_CHANGED} event types\n         * {@hide}\n         ",
    "links" : [ "#STANDBY_BUCKET_CHANGED" ]
  }, {
    "name" : "mNotificationChannelId",
    "type" : "String",
    "comment" : "\n         * The id of the {@link android.app.NotificationChannel} to which an interruptive\n         * notification was posted.\n         * Only present for {@link #NOTIFICATION_INTERRUPTION} event types.\n         * {@hide}\n         ",
    "links" : [ "#NOTIFICATION_INTERRUPTION", "android.app.NotificationChannel" ]
  }, {
    "name" : "mNotificationChannelIdToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mLocusId",
    "type" : "String",
    "comment" : "\n         * LocusId.\n         * Currently LocusId only present for {@link #LOCUS_ID_SET} event types.\n         * {@hide}\n         ",
    "links" : [ "#LOCUS_ID_SET" ]
  }, {
    "name" : "mLocusIdToken",
    "type" : "int",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mUserInteractionExtrasToken",
    "type" : "UserInteractionEventExtrasToken",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n         * The package name of the source of this event.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp()",
    "returnType" : "boolean",
    "comment" : "\n         * Indicates whether it is an instant app.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getClassName()",
    "returnType" : "String",
    "comment" : "\n         * The class name of the source of this event. This may be null for\n         * certain events.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getInstanceId()",
    "returnType" : "int",
    "comment" : "\n         *  An activity can be instantiated multiple times, this is the unique activity instance ID.\n         *  For non-activity class, instance ID is always zero.\n         *  @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getTaskRootPackageName()",
    "returnType" : "String",
    "comment" : "\n         * The package name of the task root when this event was reported.\n         * Or {@code null} for queries from apps without {@link\n         * android.Manifest.permission#PACKAGE_USAGE_STATS}\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#PACKAGE_USAGE_STATS" ]
  }, {
    "name" : "public String getTaskRootClassName()",
    "returnType" : "String",
    "comment" : "\n         * The class name of the task root when this event was reported.\n         * Or {@code null} for queries from apps without {@link\n         * android.Manifest.permission#PACKAGE_USAGE_STATS}\n         * @hide\n         ",
    "links" : [ "android.Manifest.permission#PACKAGE_USAGE_STATS" ]
  }, {
    "name" : "public long getTimeStamp()",
    "returnType" : "long",
    "comment" : "\n         * The time at which this event occurred, measured in milliseconds since the epoch.\n         * <p/>\n         * See {@link System#currentTimeMillis()}.\n         ",
    "links" : [ "#currentTimeMillis()" ]
  }, {
    "name" : "public int getEventType()",
    "returnType" : "int",
    "comment" : "\n         * The event type.\n         * @see #ACTIVITY_PAUSED\n         * @see #ACTIVITY_RESUMED\n         * @see #CONFIGURATION_CHANGE\n         * @see #USER_INTERACTION\n         * @see #STANDBY_BUCKET_CHANGED\n         * @see #FOREGROUND_SERVICE_START\n         * @see #FOREGROUND_SERVICE_STOP\n         * @see #ACTIVITY_STOPPED\n         ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n         * Retrieves a map of extended data from the event if the event is of type\n         * {@link #USER_INTERACTION}.\n         *\n         * @return the map of all extras that associated with the reported user interaction\n         *         event. The returned {@link PersistableBundle} will contain the extras\n         *         {@link UsageStatsManager#EXTRA_EVENT_CATEGORY} and\n         *         {@link UsageStatsManager#EXTRA_EVENT_ACTION}. {@link PersistableBundle#EMPTY}\n         *         will be returned if the details are not available.\n         ",
    "links" : [ "android.app.usage.UsageStatsManager#EXTRA_EVENT_ACTION", "#USER_INTERACTION", "android.os.PersistableBundle", "android.os.PersistableBundle#EMPTY", "android.app.usage.UsageStatsManager#EXTRA_EVENT_CATEGORY" ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "\n         * Returns a {@link Configuration} for this event if the event is of type\n         * {@link #CONFIGURATION_CHANGE}, otherwise it returns null.\n         ",
    "links" : [ "#CONFIGURATION_CHANGE", "android.content.res.Configuration" ]
  }, {
    "name" : "public String getShortcutId()",
    "returnType" : "String",
    "comment" : "\n         * Returns the ID of a {@link android.content.pm.ShortcutInfo} for this event\n         * if the event is of type {@link #SHORTCUT_INVOCATION}, otherwise it returns null.\n         *\n         * @see android.content.pm.ShortcutManager#reportShortcutUsed(String)\n         ",
    "links" : [ "android.content.pm.ShortcutInfo", "#SHORTCUT_INVOCATION" ]
  }, {
    "name" : "public int getAppStandbyBucket()",
    "returnType" : "int",
    "comment" : "\n         * Returns the standby bucket of the app, if the event is of type\n         * {@link #STANDBY_BUCKET_CHANGED}, otherwise returns 0.\n         * @return the standby bucket associated with the event.\n         ",
    "links" : [ "#STANDBY_BUCKET_CHANGED" ]
  }, {
    "name" : "public int getStandbyReason()",
    "returnType" : "int",
    "comment" : "\n         * Returns the reason for the bucketing, if the event is of type\n         * {@link #STANDBY_BUCKET_CHANGED}, otherwise returns 0. Reason values include\n         * the main reason which is one of REASON_MAIN_*, OR'ed with REASON_SUB_*, if there\n         * are sub-reasons for the main reason, such as REASON_SUB_USAGE_* when the main reason\n         * is REASON_MAIN_USAGE.\n         * @hide\n         ",
    "links" : [ "#STANDBY_BUCKET_CHANGED" ]
  }, {
    "name" : "public String getNotificationChannelId()",
    "returnType" : "String",
    "comment" : "\n         * Returns the ID of the {@link android.app.NotificationChannel} for this event if the\n         * event is of type {@link #NOTIFICATION_INTERRUPTION}, otherwise it returns null;\n         * @hide\n         ",
    "links" : [ "#NOTIFICATION_INTERRUPTION", "android.app.NotificationChannel" ]
  }, {
    "name" : "public Event getObfuscatedIfInstantApp()",
    "returnType" : "Event",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Event getObfuscatedNotificationEvent()",
    "returnType" : "Event",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getLocusId()",
    "returnType" : "String",
    "comment" : "\n         * Returns the locusId for this event if the event is of type {@link #LOCUS_ID_SET},\n         * otherwise it returns null.\n         * @hide\n         ",
    "links" : [ "#LOCUS_ID_SET" ]
  }, {
    "name" : "private void copyFrom(Event orig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getPackageName()", "public boolean isInstantApp()", "public String getClassName()", "public int getInstanceId()", "public String getTaskRootPackageName()", "public String getTaskRootClassName()", "public long getTimeStamp()", "public int getEventType()", "public PersistableBundle getExtras()", "public Configuration getConfiguration()", "public String getShortcutId()", "public int getAppStandbyBucket()", "public int getStandbyReason()", "public String getNotificationChannelId()", "public Event getObfuscatedIfInstantApp()", "public Event getObfuscatedNotificationEvent()", "public String getLocusId()", "private void copyFrom(Event orig)" ],
  "variableNames" : [ "NONE", "DEVICE_EVENT_PACKAGE_NAME", "MOVE_TO_FOREGROUND", "ACTIVITY_RESUMED", "MOVE_TO_BACKGROUND", "ACTIVITY_PAUSED", "END_OF_DAY", "CONTINUE_PREVIOUS_DAY", "CONFIGURATION_CHANGE", "SYSTEM_INTERACTION", "USER_INTERACTION", "SHORTCUT_INVOCATION", "CHOOSER_ACTION", "NOTIFICATION_SEEN", "STANDBY_BUCKET_CHANGED", "NOTIFICATION_INTERRUPTION", "SLICE_PINNED_PRIV", "SLICE_PINNED", "SCREEN_INTERACTIVE", "SCREEN_NON_INTERACTIVE", "KEYGUARD_SHOWN", "KEYGUARD_HIDDEN", "FOREGROUND_SERVICE_START", "FOREGROUND_SERVICE_STOP", "CONTINUING_FOREGROUND_SERVICE", "ROLLOVER_FOREGROUND_SERVICE", "ACTIVITY_STOPPED", "ACTIVITY_DESTROYED", "FLUSH_TO_DISK", "DEVICE_SHUTDOWN", "DEVICE_STARTUP", "USER_UNLOCKED", "USER_STOPPED", "LOCUS_ID_SET", "APP_COMPONENT_USED", "MAX_EVENT_TYPE", "FLAG_IS_PACKAGE_INSTANT_APP", "VALID_FLAG_BITS", "UNASSIGNED_TOKEN", "mPackage", "mPackageToken", "mClass", "mClassToken", "mInstanceId", "mTaskRootPackage", "mTaskRootPackageToken", "mTaskRootClass", "mTaskRootClassToken", "mTimeStamp", "mEventType", "mConfiguration", "mShortcutId", "mShortcutIdToken", "mAction", "mContentType", "mContentAnnotations", "mBucketAndReason", "mNotificationChannelId", "mNotificationChannelIdToken", "mLocusId", "mLocusIdToken", "mExtras", "mUserInteractionExtrasToken", "mFlags" ]
}