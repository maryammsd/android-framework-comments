{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/scheduling/RebootReadinessManager.java",
  "packageName" : "android.scheduling",
  "className" : "RebootReadinessManager",
  "comment" : "\n * Gathers signals from the device to determine whether it is safe to reboot or not.\n *\n * <p>This service may be used by entities that are applying updates which require the device to be\n * rebooted, to determine when the device is in an unused state and is ready to be rebooted. When\n * an updater has notified this service that there is a pending update that requires a reboot, this\n * service will periodically check several signals which contribute to the reboot readiness\n * decision. When the device's reboot-readiness changes, a\n * {@link #ACTION_REBOOT_READY} broadcast will be sent. The associated extra\n * {@link #EXTRA_IS_READY_TO_REBOOT} will be {@code true} when the device is ready to reboot,\n * and {@code false} when it is not ready to reboot.\n *\n * <p>Subsystems may register callbacks with this service. These callbacks allow subsystems to\n * inform the reboot readiness decision in the case that they are performing important work\n * that should not be interrupted by a reboot. An example of reboot-blocking work is tethering\n * to another device.\n *\n * @hide\n ",
  "links" : [ "#EXTRA_IS_READY_TO_REBOOT", "#ACTION_REBOOT_READY" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IRebootReadinessManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyList",
    "type" : "ArrayMap<RequestRebootReadinessStatusListener, RebootReadinessCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_REBOOT_READY",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: Indicates that the device's reboot readiness has changed.\n     *\n     * <p>This broadcast will be sent with an extra that indicates whether or not the device is\n     * ready to reboot.\n     * <p>\n     * The receiver <em>must</em> have the {@link android.Manifest.permission#REBOOT} permission.\n     * <p class=\"note\">\n     * This is a protected intent that can only be sent by the system.\n     *\n     * @see #EXTRA_IS_READY_TO_REBOOT\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#REBOOT" ]
  }, {
    "name" : "EXTRA_IS_READY_TO_REBOOT",
    "type" : "String",
    "comment" : "\n     * A boolean extra used with {@link #ACTION_REBOOT_READY} which indicates if the\n     * device is ready to reboot.\n     * Will be {@code true} if ready to reboot, {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "#ACTION_REBOOT_READY" ]
  }, {
    "name" : "IS_REBOOT_READY_KEY",
    "type" : "String",
    "comment" : "\n     * Key used to communicate between {@link RebootReadinessManager} and the system server,\n     * indicating the reboot readiness of a component that has registered a\n     * {@link RequestRebootReadinessStatusListener}. The associated value is a boolean.\n     *\n     * @hide\n     ",
    "links" : [ "RequestRebootReadinessStatusListener", "android.scheduling.RebootReadinessManager" ]
  }, {
    "name" : "ESTIMATED_FINISH_TIME_KEY",
    "type" : "String",
    "comment" : "\n     * Key used to communicate between {@link RebootReadinessManager} and the system server,\n     * indicating the estimated finish time of the reboot-blocking work of a component that has\n     * registered a {@link RequestRebootReadinessStatusListener}. The associated value is a long.\n     *\n     * @hide\n     ",
    "links" : [ "RequestRebootReadinessStatusListener", "android.scheduling.RebootReadinessManager" ]
  }, {
    "name" : "SUBSYSTEM_NAME_KEY",
    "type" : "String",
    "comment" : "\n     * Key used to communicate between {@link RebootReadinessManager} and the system server,\n     * indicating the identifier of a component that has registered a\n     * {@link RequestRebootReadinessStatusListener}. The associated value is a String.\n     *\n     * @hide\n     ",
    "links" : [ "RequestRebootReadinessStatusListener", "android.scheduling.RebootReadinessManager" ]
  } ],
  "methods" : [ {
    "name" : "public void markRebootPending()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the RebootReadinessManager that there is a pending update that requires a reboot to\n     * be applied.\n     *\n     * <p>When the device's reboot-readiness changes, a {@link #ACTION_REBOOT_READY} broadcast\n     * will be sent. The associated extra {@link #EXTRA_IS_READY_TO_REBOOT} will be\n     * {@code true} when the device is ready to reboot, and {@code false} when it is not ready to\n     * reboot.\n     *\n     * <p>If the same caller calls this method twice, the second call will be a no-op.\n     *\n     * TODO(b/161353402): Document and test multi-client cases.\n     ",
    "links" : [ "#EXTRA_IS_READY_TO_REBOOT", "#ACTION_REBOOT_READY" ]
  }, {
    "name" : "public void cancelPendingReboot()",
    "returnType" : "void",
    "comment" : "\n     * Removes the caller from the set of packages that will receive reboot readiness broadcasts.\n     * If the caller is the only client that is receiving broadcasts, reboot readiness checks will\n     * be stopped.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReadyToReboot()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the device is ready to be rebooted to apply an update.\n     *\n     * @return {@code true} if the device is ready to reboot, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRequestRebootReadinessStatusListener(@NonNull @CallbackExecutor Executor executor, @NonNull RequestRebootReadinessStatusListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link RequestRebootReadinessStatusListener} with the RebootReadinessManager.\n     *\n     * @param executor the executor that the callback will be executed on\n     * @param callback the callback to be registered\n     ",
    "links" : [ "RequestRebootReadinessStatusListener" ]
  }, {
    "name" : "public void removeRequestRebootReadinessStatusListener(@NonNull RequestRebootReadinessStatusListener callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link RequestRebootReadinessStatusListener} from the RebootReadinessManager.\n     *\n     * @param callback the callback to unregister\n     ",
    "links" : [ "RequestRebootReadinessStatusListener" ]
  } ],
  "methodNames" : [ "public void markRebootPending()", "public void cancelPendingReboot()", "public boolean isReadyToReboot()", "public void addRequestRebootReadinessStatusListener(@NonNull @CallbackExecutor Executor executor, @NonNull RequestRebootReadinessStatusListener callback)", "public void removeRequestRebootReadinessStatusListener(@NonNull RequestRebootReadinessStatusListener callback)" ],
  "variableNames" : [ "TAG", "mService", "mContext", "mProxyList", "ACTION_REBOOT_READY", "EXTRA_IS_READY_TO_REBOOT", "IS_REBOOT_READY_KEY", "ESTIMATED_FINISH_TIME_KEY", "SUBSYSTEM_NAME_KEY" ]
}