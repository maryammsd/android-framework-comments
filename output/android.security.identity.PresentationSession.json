{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/identity/PresentationSession.java",
  "packageName" : "android.security.identity",
  "className" : "PresentationSession",
  "comment" : "\n * Class for presenting multiple documents to a remote verifier.\n *\n * <p>This should be used for all interactions with a remote verifier instead of the now deprecated\n * {@link IdentityCredential#getEntries(byte[], Map, byte[], byte[])} method.\n *\n * Use {@link IdentityCredentialStore#createPresentationSession(int)} to create a {@link\n * PresentationSession} instance.\n ",
  "links" : [ "android.security.identity.IdentityCredential#getEntries(byte", "android.security.identity.PresentationSession", "android.security.identity.IdentityCredentialStore#createPresentationSession(int)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract KeyPair getEphemeralKeyPair()",
    "returnType" : "KeyPair",
    "comment" : "\n     * Gets the ephemeral key pair to use to establish a secure channel with the verifier.\n     *\n     * <p>Applications should use this key-pair for the communications channel with the verifier\n     * using a protocol / cipher-suite appropriate for the application. One example of such a\n     * protocol is the one used for Mobile Driving Licenses, see ISO 18013-5.\n     *\n     * <p>The ephemeral key pair is tied to the {@link PresentationSession} instance so subsequent\n     * calls to this method will return the same key-pair.\n     *\n     * @return ephemeral key pair to use to establish a secure channel with a reader.\n     ",
    "links" : [ "android.security.identity.PresentationSession" ]
  }, {
    "name" : "public abstract void setReaderEphemeralPublicKey(@NonNull PublicKey readerEphemeralPublicKey) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Set the ephemeral public key provided by the verifier.\n     *\n     * <p>If called, this must be called before any calls to\n     * {@link #getCredentialData(String, CredentialDataRequest)}.\n     *\n     * <p>This method can only be called once per {@link PresentationSession} instance.\n     *\n     * @param readerEphemeralPublicKey The ephemeral public key provided by the reader to\n     *                                 establish a secure session.\n     * @throws InvalidKeyException if the given key is invalid.\n     ",
    "links" : [ "android.security.identity.PresentationSession", "#getCredentialData(String" ]
  }, {
    "name" : "public abstract void setSessionTranscript(@NonNull byte[] sessionTranscript)",
    "returnType" : "void",
    "comment" : "\n     * Set the session transcript.\n     *\n     * <p>If called, this must be called before any calls to\n     * {@link #getCredentialData(String, CredentialDataRequest)}.\n     *\n     * <p>If mdoc session encryption is used (e.g. if {@link #getEphemeralKeyPair()} has been\n     * called) then the X and Y coordinates of the public part of the key-pair returned by {@link\n     * #getEphemeralKeyPair()} must appear somewhere in the bytes of the passed in CBOR.  Each of\n     * these coordinates must appear encoded with the most significant bits first and use the exact\n     * amount of bits indicated by the key size of the ephemeral keys. For example, if the\n     * ephemeral key is using the P-256 curve then the 32 bytes for the X coordinate encoded with\n     * the most significant bits first must appear somewhere and ditto for the 32 bytes for the Y\n     * coordinate.\n     *\n     * <p>This method can only be called once per {@link PresentationSession} instance.\n     *\n     * @param sessionTranscript the session transcript.\n     ",
    "links" : [ "android.security.identity.PresentationSession", "#getEphemeralKeyPair()", "#getCredentialData(String" ]
  }, {
    "name" : "public abstract CredentialDataResult getCredentialData(@NonNull String credentialName, @NonNull CredentialDataRequest request) throws NoAuthenticationKeyAvailableException, InvalidReaderSignatureException, InvalidRequestMessageException, EphemeralPublicKeyNotFoundException",
    "returnType" : "CredentialDataResult",
    "comment" : "\n     * Retrieves data from a named credential in the current presentation session.\n     *\n     * <p>If an access control check fails for one of the requested entries or if the entry\n     * doesn't exist, the entry is simply not returned. The application can detect this\n     * by using the {@link CredentialDataResult.Entries#getStatus(String, String)} method on\n     * each of the requested entries.\n     *\n     * <p>The application should not make any assumptions on whether user authentication is needed.\n     * Instead, the application should request the data elements values first and then examine\n     * the returned {@link CredentialDataResult.Entries}. If\n     * {@link CredentialDataResult.Entries#STATUS_USER_AUTHENTICATION_FAILED} is returned the\n     * application should get a\n     * {@link android.hardware.biometrics.BiometricPrompt.CryptoObject} which references this\n     * object and use it with a {@link android.hardware.biometrics.BiometricPrompt}. Upon successful\n     * authentication the application may call\n     * {@link #getCredentialData(String, CredentialDataRequest)} again.\n     *\n     * <p>It is permissible to call this method multiple times using the same credential name.\n     * If this is done the same auth-key will be used.\n     *\n     * <p>If the reader signature is set in the request parameter (via the\n     * {@link CredentialDataRequest.Builder#setReaderSignature(byte[])} method) it must contain\n     * the bytes of a {@code COSE_Sign1} structure as defined in RFC 8152. For the payload\n     * {@code nil} shall be used and the detached payload is the {@code ReaderAuthenticationBytes}\n     * CBOR described below.\n     * <pre>\n     *     ReaderAuthentication = [\n     *       \"ReaderAuthentication\",\n     *       SessionTranscript,\n     *       ItemsRequestBytes\n     *     ]\n     *\n     *     ItemsRequestBytes = #6.24(bstr .cbor ItemsRequest)\n     *\n     *     ReaderAuthenticationBytes = #6.24(bstr .cbor ReaderAuthentication)\n     * </pre>\n     *\n     * <p>where {@code ItemsRequestBytes} are the bytes of the request message set in\n     * the request parameter (via the\n     * {@link CredentialDataRequest.Builder#setRequestMessage(byte[])} method).\n     *\n     * <p>The public key corresponding to the key used to make the signature, can be found in the\n     * {@code x5chain} unprotected header element of the {@code COSE_Sign1} structure (as as\n     * described in\n     * <a href=\"https://tools.ietf.org/html/draft-ietf-cose-x509-08\">draft-ietf-cose-x509-08</a>).\n     * There will be at least one certificate in said element and there may be more (and if so,\n     * each certificate must be signed by its successor).\n     *\n     * <p>Data elements protected by reader authentication are returned if, and only if,\n     * {@code requestMessage} is signed by the top-most certificate in the reader's certificate\n     * chain, and the data element is configured with an {@link AccessControlProfile} configured\n     * with an X.509 certificate for a key which appear in the certificate chain.\n     *\n     * <p>Note that the request message CBOR is used only for enforcing reader authentication, it's\n     * not used for determining which entries this API will return. The application is expected to\n     * have parsed the request message and filtered it according to user preference and/or consent.\n     *\n     * @param credentialName the name of the credential to retrieve.\n     * @param request the data to retrieve from the credential\n     * @return If the credential wasn't found, returns null. Otherwise a\n     *         {@link CredentialDataResult} object containing entry data organized by namespace and\n     *         a cryptographically authenticated representation of the same data, bound to the\n     *         current session.\n     * @throws NoAuthenticationKeyAvailableException  if authentication keys were never\n     *                                                provisioned for the credential or if they\n     *                                                are expired or exhausted their use-count.\n     * @throws InvalidRequestMessageException         if the requestMessage is malformed.\n     * @throws InvalidReaderSignatureException        if the reader signature is invalid, or it\n     *                                                doesn't contain a certificate chain, or if\n     *                                                the signature failed to validate.\n     * @throws EphemeralPublicKeyNotFoundException    if the ephemeral public key was not found in\n     *                                                the session transcript.\n     ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt.CryptoObject", "android.hardware.biometrics.BiometricPrompt", "CredentialDataResult.Entries#STATUS_USER_AUTHENTICATION_FAILED", "android.security.identity.AccessControlProfile", "CredentialDataResult.Entries", "CredentialDataRequest.Builder#setReaderSignature(byte", "CredentialDataRequest.Builder#setRequestMessage(byte", "CredentialDataResult.Entries#getStatus(String", "#getCredentialData(String", "android.security.identity.CredentialDataResult" ]
  }, {
    "name" : "public abstract long getCredstoreOperationHandle()",
    "returnType" : "long",
    "comment" : "\n     * Called by android.hardware.biometrics.CryptoObject#getOpId() to get an\n     * operation handle.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract KeyPair getEphemeralKeyPair()", "public abstract void setReaderEphemeralPublicKey(@NonNull PublicKey readerEphemeralPublicKey) throws InvalidKeyException", "public abstract void setSessionTranscript(@NonNull byte[] sessionTranscript)", "public abstract CredentialDataResult getCredentialData(@NonNull String credentialName, @NonNull CredentialDataRequest request) throws NoAuthenticationKeyAvailableException, InvalidReaderSignatureException, InvalidRequestMessageException, EphemeralPublicKeyNotFoundException", "public abstract long getCredstoreOperationHandle()" ],
  "variableNames" : [ ]
}