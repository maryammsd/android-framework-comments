{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/format/TimeFormatter.java",
  "packageName" : "android.text.format",
  "className" : "TimeFormatter",
  "comment" : "\n * Formatting logic for {@link Time}. Contains a port of Bionic's broken strftime_tz to Java.\n *\n * <p>This class is not thread safe.\n ",
  "links" : [ "com.android.i18n.timezone.WallTime" ],
  "variables" : [ {
    "name" : "FORCE_LOWER_CASE",
    "type" : "int",
    "comment" : " An arbitrary value outside the range representable by a char.",
    "links" : [ ]
  }, {
    "name" : "SECSPERMIN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINSPERHOUR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAYSPERWEEK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONSPERYEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOURSPERDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAYSPERLYEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAYSPERNYEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLocale",
    "type" : "Locale",
    "comment" : "\n     * The Locale for which the cached symbols and formats have been loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "sDateFormatSymbols",
    "type" : "DateFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDecimalFormatSymbols",
    "type" : "DecimalFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTimeOnlyFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDateOnlyFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDateTimeFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dateFormatSymbols",
    "type" : "DateFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decimalFormatSymbols",
    "type" : "DecimalFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dateTimeFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "timeOnlyFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dateOnlyFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "outputBuilder",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numberFormatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " String formatMillisWithFixedFormat(long timeMillis)",
    "returnType" : "String",
    "comment" : "\n     * The implementation of {@link TimeMigrationUtils#formatMillisWithFixedFormat(long)} for\n     * 2038-safe formatting with the pattern \"%Y-%m-%d %H:%M:%S\" and including the historic\n     * incorrect digit localization behavior.\n     ",
    "links" : [ "android.text.format.TimeMigrationUtils#formatMillisWithFixedFormat(long)" ]
  }, {
    "name" : "private static void append2DigitNumber(StringBuilder builder, int value)",
    "returnType" : "void",
    "comment" : " Zero-pads value as needed to achieve a 2-digit number. ",
    "links" : [ ]
  }, {
    "name" : "public String format(String pattern, WallTime wallTime, ZoneInfoData zoneInfoData)",
    "returnType" : "String",
    "comment" : "\n     * Format the specified {@code wallTime} using {@code pattern}. The output is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String localizeDigits(String s)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void formatInternal(String pattern, WallTime wallTime, ZoneInfoData zoneInfoData)",
    "returnType" : "void",
    "comment" : "\n     * Format the specified {@code wallTime} using {@code pattern}. The output is written to\n     * {@link #outputBuilder}.\n     ",
    "links" : [ "#outputBuilder" ]
  }, {
    "name" : "private boolean handleToken(CharBuffer formatBuffer, WallTime wallTime, ZoneInfoData zoneInfoData)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void modifyAndAppend(CharSequence str, int modifier)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getFormat(int modifier, String normal, String underscore, String dash, String zero)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isLeap(int year)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean brokenIsUpper(char toCheck)",
    "returnType" : "boolean",
    "comment" : "\n     * A broken implementation of {@link Character#isUpperCase(char)} that assumes ASCII codes in\n     * order to be compatible with the old native implementation.\n     ",
    "links" : [ "#isUpperCase(char)" ]
  }, {
    "name" : "private static boolean brokenIsLower(char toCheck)",
    "returnType" : "boolean",
    "comment" : "\n     * A broken implementation of {@link Character#isLowerCase(char)} that assumes ASCII codes in\n     * order to be compatible with the old native implementation.\n     ",
    "links" : [ "#isLowerCase(char)" ]
  }, {
    "name" : "private static char brokenToLower(char input)",
    "returnType" : "char",
    "comment" : "\n     * A broken implementation of {@link Character#toLowerCase(char)} that assumes ASCII codes in\n     * order to be compatible with the old native implementation.\n     ",
    "links" : [ "#toLowerCase(char)" ]
  }, {
    "name" : "private static char brokenToUpper(char input)",
    "returnType" : "char",
    "comment" : "\n     * A broken implementation of {@link Character#toUpperCase(char)} that assumes ASCII codes in\n     * order to be compatible with the old native implementation.\n     ",
    "links" : [ "#toUpperCase(char)" ]
  } ],
  "methodNames" : [ " String formatMillisWithFixedFormat(long timeMillis)", "private static void append2DigitNumber(StringBuilder builder, int value)", "public String format(String pattern, WallTime wallTime, ZoneInfoData zoneInfoData)", "private String localizeDigits(String s)", "private void formatInternal(String pattern, WallTime wallTime, ZoneInfoData zoneInfoData)", "private boolean handleToken(CharBuffer formatBuffer, WallTime wallTime, ZoneInfoData zoneInfoData)", "private void modifyAndAppend(CharSequence str, int modifier)", "private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier)", "private static String getFormat(int modifier, String normal, String underscore, String dash, String zero)", "private static boolean isLeap(int year)", "private static boolean brokenIsUpper(char toCheck)", "private static boolean brokenIsLower(char toCheck)", "private static char brokenToLower(char input)", "private static char brokenToUpper(char input)" ],
  "variableNames" : [ "FORCE_LOWER_CASE", "SECSPERMIN", "MINSPERHOUR", "DAYSPERWEEK", "MONSPERYEAR", "HOURSPERDAY", "DAYSPERLYEAR", "DAYSPERNYEAR", "sLocale", "sDateFormatSymbols", "sDecimalFormatSymbols", "sTimeOnlyFormat", "sDateOnlyFormat", "sDateTimeFormat", "dateFormatSymbols", "decimalFormatSymbols", "dateTimeFormat", "timeOnlyFormat", "dateOnlyFormat", "outputBuilder", "numberFormatter" ]
}