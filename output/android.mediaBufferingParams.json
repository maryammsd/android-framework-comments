{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/BufferingParams.java",
  "packageName" : "android.media",
  "className" : "BufferingParams",
  "comment" : "\n * Structure for source buffering management params.\n *\n * Used by {@link MediaPlayer#getBufferingParams()} and\n * {@link MediaPlayer#setBufferingParams(BufferingParams)}\n * to control source buffering behavior.\n *\n * <p>There are two stages of source buffering in {@link MediaPlayer}: initial buffering\n * (when {@link MediaPlayer} is being prepared) and rebuffering (when {@link MediaPlayer}\n * is playing back source). {@link BufferingParams} includes corresponding marks for each\n * stage of source buffering. The marks are time based (in milliseconds).\n *\n * <p>{@link MediaPlayer} source component has default marks which can be queried by\n * calling {@link MediaPlayer#getBufferingParams()} before any change is made by\n * {@link MediaPlayer#setBufferingParams()}.\n * <ul>\n * <li><strong>initial buffering:</strong> initialMarkMs is used when\n * {@link MediaPlayer} is being prepared. When cached data amount exceeds this mark\n * {@link MediaPlayer} is prepared. </li>\n * <li><strong>rebuffering during playback:</strong> resumePlaybackMarkMs is used when\n * {@link MediaPlayer} is playing back content.\n * <ul>\n * <li> {@link MediaPlayer} has internal mark, namely pausePlaybackMarkMs, to decide when\n * to pause playback if cached data amount runs low. This internal mark varies based on\n * type of data source. </li>\n * <li> When cached data amount exceeds resumePlaybackMarkMs, {@link MediaPlayer} will\n * resume playback if it has been paused due to low cached data amount. The internal mark\n * pausePlaybackMarkMs shall be less than resumePlaybackMarkMs. </li>\n * <li> {@link MediaPlayer} has internal mark, namely pauseRebufferingMarkMs, to decide\n * when to pause rebuffering. Apparently, this internal mark shall be no less than\n * resumePlaybackMarkMs. </li>\n * <li> {@link MediaPlayer} has internal mark, namely resumeRebufferingMarkMs, to decide\n * when to resume buffering. This internal mark varies based on type of data source. This\n * mark shall be larger than pausePlaybackMarkMs, and less than pauseRebufferingMarkMs.\n * </li>\n * </ul> </li>\n * </ul>\n * <p>Users should use {@link Builder} to change {@link BufferingParams}.\n * @hide\n ",
  "variables" : [ {
    "name" : "BUFFERING_NO_MARK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialMarkMs",
    "type" : "int",
    "comment" : " params",
    "links" : [ ]
  }, {
    "name" : "mResumePlaybackMarkMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BufferingParams>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getInitialMarkMs()",
    "returnType" : "int",
    "comment" : "\n     * Return initial buffering mark in milliseconds.\n     * @return initial buffering mark in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getResumePlaybackMarkMs()",
    "returnType" : "int",
    "comment" : "\n     * Return the mark in milliseconds for resuming playback.\n     * @return the mark for resuming playback in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "BUFFERING_NO_MARK", "mInitialMarkMs", "mResumePlaybackMarkMs", "CREATOR" ],
  "methodNames" : [ "public int getInitialMarkMs()", "public int getResumePlaybackMarkMs()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}