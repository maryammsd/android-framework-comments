{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InputEvent.java",
  "packageName" : "android.view",
  "className" : "InputEvent",
  "comment" : "\n * Common base class for input events.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PARCEL_TOKEN_MOTION_EVENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_KEY_EVENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mNextSeq",
    "type" : "AtomicInteger",
    "comment" : " Next sequence number.",
    "links" : [ ]
  }, {
    "name" : "mSeq",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mRecycled",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TRACK_RECYCLED_LOCATION",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycledLocation",
    "type" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputEvent>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id for the device that this event came from.  An id of\n     * zero indicates that the event didn't come from a physical device\n     * and maps to the default keymap.  The other numbers are arbitrary and\n     * you shouldn't depend on the values.\n     *\n     * @return The device id.\n     * @see InputDevice#getDevice\n     ",
    "links" : [ ]
  }, {
    "name" : "public final InputDevice getDevice()",
    "returnType" : "InputDevice",
    "comment" : "\n     * Gets the device that this event came from.\n     *\n     * @return The device, or null if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getSource()",
    "returnType" : "int",
    "comment" : "\n     * Gets the source of the event.\n     *\n     * @return The event source or {@link InputDevice#SOURCE_UNKNOWN} if unknown.\n     * @see InputDevice#getSources\n     ",
    "links" : [ "android.view.InputDevice#SOURCE_UNKNOWN" ]
  }, {
    "name" : "public abstract void setSource(int source)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the source of the event.\n     *\n     * @param source The new source.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFromSource(int source)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the event is from the given source.\n     *\n     * @param source The input source to check against. This can be a specific device type, such as\n     * {@link InputDevice#SOURCE_TOUCH_NAVIGATION}, or a more generic device class, such as\n     * {@link InputDevice#SOURCE_CLASS_POINTER}.\n     * @return Whether the event is from the given source.\n     ",
    "links" : [ "android.view.InputDevice#SOURCE_TOUCH_NAVIGATION", "android.view.InputDevice#SOURCE_CLASS_POINTER" ]
  }, {
    "name" : "public abstract int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the display id of the event.\n     * @return The display id associated with the event.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDisplayId(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the display id associated with the event\n     * @param displayId\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract InputEvent copy()",
    "returnType" : "InputEvent",
    "comment" : "\n     * Copies the event.\n     *\n     * @return A deep copy of the event.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Recycles the event.\n     * This method should only be used by the system since applications do not\n     * expect {@link KeyEvent} objects to be recycled, although {@link MotionEvent}\n     * objects are fine.  See {@link KeyEvent#recycle()} for details.\n     * @hide\n     ",
    "links" : [ "android.view.KeyEvent#recycle()", "android.view.KeyEvent", "android.view.MotionEvent" ]
  }, {
    "name" : "public void recycleIfNeededAfterDispatch()",
    "returnType" : "void",
    "comment" : "\n     * Conditionally recycled the event if it is appropriate to do so after\n     * dispatching the event to an application.\n     *\n     * If the event is a {@link MotionEvent} then it is recycled.\n     *\n     * If the event is a {@link KeyEvent} then it is NOT recycled, because applications\n     * expect key events to be immutable so once the event has been dispatched to\n     * the application we can no longer recycle it.\n     * @hide\n     ",
    "links" : [ "android.view.KeyEvent", "android.view.MotionEvent" ]
  }, {
    "name" : "protected void prepareForReuse()",
    "returnType" : "void",
    "comment" : "\n     * Reinitializes the event on reuse (after recycling).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isTainted()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets a private flag that indicates when the system has detected that this input event\n     * may be inconsistent with respect to the sequence of previously delivered input events,\n     * such as when a key up event is sent but the key was not down or when a pointer\n     * move event is sent but the pointer is not down.\n     *\n     * @return True if this event is tainted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTainted(boolean tainted)",
    "returnType" : "void",
    "comment" : "\n     * Sets a private flag that indicates when the system has detected that this input event\n     * may be inconsistent with respect to the sequence of previously delivered input events,\n     * such as when a key up event is sent but the key was not down or when a pointer\n     * move event is sent but the pointer is not down.\n     *\n     * @param tainted True if this event is tainted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public abstract long getEventTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Retrieve the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond (instead of millisecond) precision.\n     * <p>\n     * The value is in nanosecond precision but it may not have nanosecond accuracy.\n     * </p>\n     *\n     * @return Returns the time this event occurred,\n     * in the {@link android.os.SystemClock#uptimeMillis} time base but with\n     * nanosecond (instead of millisecond) precision.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Marks the input event as being canceled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSequenceNumber()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique sequence number of this event.\n     * Every input event that is created or received by a process has a\n     * unique sequence number.  Moreover, a new sequence number is obtained\n     * each time an event object is recycled.\n     *\n     * Sequence numbers are only guaranteed to be locally unique within a process.\n     * Sequence numbers are not preserved when events are parceled.\n     *\n     * @return The unique sequence number of this event.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the ID of this event. This is generated when an event is created and preserved until its\n     * last stage. It won't change just because the event crosses process boundary, but should\n     * change when making a copy with modifications.\n     * <p>\n     * To avoid exposing app usage to other processes this ID is generated from a CSPRNG. Therefore\n     * there isn't 100% guarantee on the uniqueness of this ID, though the chance of ID collisions\n     * is considerably low. The rule of thumb is not to rely on the uniqueness for production logic,\n     * but a good source for tracking an event (e.g. logging and profiling).\n     *\n     * @return The ID of this event.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getDeviceId()", "public final InputDevice getDevice()", "public abstract int getSource()", "public abstract void setSource(int source)", "public boolean isFromSource(int source)", "public abstract int getDisplayId()", "public abstract void setDisplayId(int displayId)", "public abstract InputEvent copy()", "public void recycle()", "public void recycleIfNeededAfterDispatch()", "protected void prepareForReuse()", "public abstract boolean isTainted()", "public abstract void setTainted(boolean tainted)", "public abstract long getEventTime()", "public abstract long getEventTimeNanos()", "public abstract void cancel()", "public int getSequenceNumber()", "public abstract int getId()", "public int describeContents()" ],
  "variableNames" : [ "PARCEL_TOKEN_MOTION_EVENT", "PARCEL_TOKEN_KEY_EVENT", "mNextSeq", "mSeq", "mRecycled", "TRACK_RECYCLED_LOCATION", "mRecycledLocation", "CREATOR" ]
}