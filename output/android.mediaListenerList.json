{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/Utils.java",
  "packageName" : "android.media",
  "className" : "ListenerList",
  "comment" : "\n     * {@code ListenerList} is a helper class that delivers events to listeners.\n     *\n     * It is written to isolate the <strong>mechanics</strong> of event delivery from the\n     * <strong>details</strong> of those events.\n     *\n     * The {@code ListenerList} is parameterized on the generic type {@code V}\n     * of the object delivered by {@code notify()}.\n     * This gives compile time type safety over run-time casting of a general {@code Object},\n     * much like {@code HashMap&lt;String, Object&gt;} does not give type safety of the\n     * stored {@code Object} value and may allow\n     * permissive storage of {@code Object}s that are not expected by users of the\n     * {@code HashMap}, later resulting in run-time cast exceptions that\n     * could have been caught by replacing\n     * {@code Object} with a more precise type to enforce a compile time contract.\n     *\n     * The {@code ListenerList} is implemented as a single method callback\n     * - or a \"listener\" according to Android style guidelines.\n     *\n     * The {@code ListenerList} can be trivially extended by a suitable lambda to implement\n     * a <strong> multiple method abstract class</strong> \"callback\",\n     * in which the generic type {@code V} could be an {@code Object}\n     * to encapsulate the details of the parameters of each callback method, and\n     * {@code instanceof} could be used to disambiguate which callback method to use.\n     * A {@link Bundle} could alternatively encapsulate those generic parameters,\n     * perhaps more conveniently.\n     * Again, this is a detail of the event, not the mechanics of the event delivery,\n     * which this class is concerned with.\n     *\n     * For details on how to use this class to implement a <strong>single listener</strong>\n     * {@code ListenerList}, see notes on {@link #add}.\n     *\n     * For details on how to optimize this class to implement\n     * a listener based on {@link Handler}s\n     * instead of {@link Executor}s, see{@link #ListenerList(boolean, boolean, boolean)}.\n     *\n     * This is a TestApi for CTS Unit Testing, not exposed for general Application use.\n     * @hide\n     *\n     * @param <V> The class of the object returned to the listener.\n     ",
  "variables" : [ {
    "name" : "mListeners",
    "type" : "HashMap<Object, ListenerWithCancellation<V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRestrictSingleCallerOnEvent",
    "type" : "boolean",
    "comment" : " default true",
    "links" : [ ]
  }, {
    "name" : "mClearCallingIdentity",
    "type" : "boolean",
    "comment" : " default true",
    "links" : [ ]
  }, {
    "name" : "mForceRemoveConsistency",
    "type" : "boolean",
    "comment" : " default false",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(@NonNull Object key, @NonNull Executor executor, @NonNull Listener<V> listener)",
    "returnType" : "void",
    "comment" : "\n         * Adds a listener to the {@code ListenerList}.\n         *\n         * The {@code ListenerList} is most often used to hold {@code multiple} listeners.\n         *\n         * Per Android style, for a single method Listener interface, the add and remove\n         * would be wrapped in \"addSomeListener\" or \"removeSomeListener\";\n         * or a lambda implemented abstract class callback, wrapped in\n         * \"registerSomeCallback\" or \"unregisterSomeCallback\".\n         *\n         * We allow a general {@code key} to be attached to add and remove that specific\n         * listener.  It could be the {@code listener} object itself.\n         *\n         * For some implementations, there may be only a {@code single} listener permitted.\n         *\n         * Per Android style, for a single listener {@code ListenerList},\n         * the naming of the wrapping call to {@link #add} would be\n         * \"setSomeListener\" with a nullable listener, which would be null\n         * to call {@link #remove}.\n         *\n         * In that case, the caller may use this {@link #add} with a single constant object for\n         * the {@code key} to enforce only one Listener in the {@code ListenerList}.\n         * Likewise on remove it would use that\n         * same single constant object to remove the listener.\n         * That {@code key} object could be the {@code ListenerList} itself for convenience.\n         *\n         * @param key is a unique object that is used to identify the listener\n         *     when {@code remove()} is called. It can be the listener itself.\n         * @param executor is used to execute the callback.\n         * @param listener is the {@link AudioTrack.ListenerList.Listener}\n         *     interface to be called upon {@link notify}.\n         ",
    "links" : [ "#add", "#remove", "#add", "AudioTrack.ListenerList.Listener", "notify" ]
  }, {
    "name" : "public void remove(@NonNull Object key)",
    "returnType" : "void",
    "comment" : "\n         * Removes a listener from the {@code ListenerList}.\n         *\n         * @param key the unique object associated with the listener during {@link #add}.\n         ",
    "links" : [ "#add" ]
  }, {
    "name" : "public void notify(int eventCode, @Nullable V info)",
    "returnType" : "void",
    "comment" : "\n         * Notifies all listeners on the List.\n         *\n         * @param eventCode to pass to all listeners.\n         * @param info to pass to all listeners. This is an implemention defined parameter\n         *     which may be {@code null}.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mListeners", "mRestrictSingleCallerOnEvent", "mClearCallingIdentity", "mForceRemoveConsistency" ],
  "methodNames" : [ "public void add(@NonNull Object key, @NonNull Executor executor, @NonNull Listener<V> listener)", "public void remove(@NonNull Object key)", "public void notify(int eventCode, @Nullable V info)" ]
}