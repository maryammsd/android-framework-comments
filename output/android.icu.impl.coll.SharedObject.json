{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/SharedObject.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "SharedObject",
  "comment" : "\n * Base class for shared, reference-counted, auto-deleted objects.\n * Java subclasses are mutable and must implement clone().\n *\n * <p>In C++, the SharedObject base class is used for both memory and ownership management.\n * In Java, memory management (deletion after last reference is gone)\n * is up to the garbage collector,\n * but the reference counter is still used to see whether the referent is the sole owner.\n *\n * <p>Usage:\n * <pre>\n * class S extends SharedObject {\n *     public clone() { ... }\n * }\n *\n * // Either use the nest class Reference (which costs an extra allocation),\n * // or duplicate its code in the class that uses S\n * // (which duplicates code and is more error-prone).\n * class U {\n *     // For read-only access, use s.readOnly().\n *     // For writable access, use S ownedS = s.copyOnWrite();\n *     private SharedObject.Reference&lt;S&gt; s;\n *     // Returns a writable version of s.\n *     // If there is exactly one owner, then s itself is returned.\n *     // If there are multiple owners, then s is replaced with a clone,\n *     // and that is returned.\n *     private S getOwnedS() {\n *         return s.copyOnWrite();\n *     }\n *     public U clone() {\n *         ...\n *         c.s = s.clone();\n *         ...\n *     }\n * }\n *\n * class V {\n *     // For read-only access, use s directly.\n *     // For writable access, use S ownedS = getOwnedS();\n *     private S s;\n *     // Returns a writable version of s.\n *     // If there is exactly one owner, then s itself is returned.\n *     // If there are multiple owners, then s is replaced with a clone,\n *     // and that is returned.\n *     private S getOwnedS() {\n *         if(s.getRefCount() > 1) {\n *             S ownedS = s.clone();\n *             s.removeRef();\n *             s = ownedS;\n *             ownedS.addRef();\n *         }\n *         return s;\n *     }\n *     public U clone() {\n *         ...\n *         s.addRef();\n *         ...\n *     }\n *     protected void finalize() {\n *         ...\n *         if(s != null) {\n *             s.removeRef();\n *             s = null;\n *         }\n *         ...\n *     }\n * }\n * </pre>\n *\n * Either use only Java memory management, or use addRef()/removeRef().\n * Sharing requires reference-counting.\n *\n * TODO: Consider making this more widely available inside ICU,\n * or else adopting a different model.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "refCount",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SharedObject clone()",
    "returnType" : "SharedObject",
    "comment" : " Initializes refCount to 0. ",
    "links" : [ ]
  }, {
    "name" : "public final void addRef()",
    "returnType" : "void",
    "comment" : "\n     * Increments the number of references to this object. Thread-safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeRef()",
    "returnType" : "void",
    "comment" : "\n     * Decrements the number of references to this object,\n     * and auto-deletes \"this\" if the number becomes 0. Thread-safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getRefCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the reference counter. Uses a memory barrier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void deleteIfZeroRefCount()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SharedObject clone()", "public final void addRef()", "public final void removeRef()", "public final int getRefCount()", "public final void deleteIfZeroRefCount()" ],
  "variableNames" : [ "refCount" ]
}