{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiopolicy/AudioPolicyConfig.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioPolicyConfig",
  "comment" : "\n * @hide\n * Internal storage class for AudioPolicy configuration.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixes",
    "type" : "ArrayList<AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuckingPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistrationId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMixCounter",
    "type" : "int",
    "comment" : " Corresponds to id of next mix to be registered.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioPolicyConfig>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addMix(AudioMix mix) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Add an {@link AudioMix} to be part of the audio policy being built.\n     * @param mix a non-null {@link AudioMix} to be part of the audio policy.\n     * @return the same Builder instance.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.media.audiopolicy.AudioMix" ]
  }, {
    "name" : "public ArrayList<AudioMix> getMixes()",
    "returnType" : "ArrayList<AudioMix>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toLogFriendlyString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toCompactLogString()",
    "returnType" : "String",
    "comment" : "\n     * Very short dump of configuration\n     * @return a condensed dump of configuration, uniquely identifies a policy in a log\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String mixTypePrefix(int mixType)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setRegistration(String regId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setMixRegistration(@NonNull final AudioMix mix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void add(@NonNull ArrayList<AudioMix> mixes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void remove(@NonNull ArrayList<AudioMix> mixes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateMixingRules(@NonNull List<Pair<AudioMix, AudioMixingRule>> audioMixingRuleUpdates)",
    "returnType" : "void",
    "comment" : "\n     * Update audio mixing rules for already registered {@link AudioMix}-es.\n     *\n     * @param audioMixingRuleUpdates {@link List} of {@link Pair}-s containing {@link AudioMix} to\n     *                                           be updated and the new {@link AudioMixingRule}.\n     ",
    "links" : [ "android.media.audiopolicy.AudioMixingRule", "android.util.Pair", "android.media.audiopolicy.AudioMix", "java.util.ArrayList" ]
  }, {
    "name" : "private void updateMixingRule(AudioMix audioMixToUpdate, AudioMixingRule audioMixingRule)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String mixTypeId(int type)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected String getRegistration()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addMix(AudioMix mix) throws IllegalArgumentException", "public ArrayList<AudioMix> getMixes()", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toLogFriendlyString()", "public String toCompactLogString()", "private static String mixTypePrefix(int mixType)", "protected void reset()", "protected void setRegistration(String regId)", "protected void setMixRegistration(@NonNull final AudioMix mix)", "protected void add(@NonNull ArrayList<AudioMix> mixes)", "protected void remove(@NonNull ArrayList<AudioMix> mixes)", "public void updateMixingRules(@NonNull List<Pair<AudioMix, AudioMixingRule>> audioMixingRuleUpdates)", "private void updateMixingRule(AudioMix audioMixToUpdate, AudioMixingRule audioMixingRule)", "private static String mixTypeId(int type)", "protected String getRegistration()" ],
  "variableNames" : [ "TAG", "mMixes", "mDuckingPolicy", "mRegistrationId", "mMixCounter", "CREATOR" ]
}