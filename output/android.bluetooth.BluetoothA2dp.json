{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothA2dp.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothA2dp",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth A2DP profile.\n *\n * <p>BluetoothA2dp is a proxy object for controlling the Bluetooth A2DP Service via IPC. Use {@link\n * BluetoothAdapter#getProfileProxy} to get the BluetoothA2dp proxy object.\n *\n * <p>Android only supports one connected Bluetooth A2dp device at a time. Each method is protected\n * with its appropriate permission.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the A2DP profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_PLAYING_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in the Playing state of the A2DP profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_PLAYING}, {@link #STATE_NOT_PLAYING},\n     ",
    "links" : [ "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_NOT_PLAYING", "#STATE_PLAYING", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_AVRCP_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can be null if no device\n     *       is active.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE" ]
  }, {
    "name" : "ACTION_CODEC_CONFIG_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in the Audio Codec state of the A2DP Source profile.\n     *\n     * <p>This intent will have 2 extras:\n     *\n     * <ul>\n     *   <li>{@link BluetoothCodecStatus#EXTRA_CODEC_STATUS} - The codec status.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device if the device is currently\n     *       connected, otherwise it is not included.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "android.bluetooth.BluetoothCodecStatus#EXTRA_CODEC_STATUS" ]
  }, {
    "name" : "STATE_PLAYING",
    "type" : "int",
    "comment" : "\n     * A2DP sink device is streaming music. This state can be one of {@link #EXTRA_STATE} or {@link\n     * #EXTRA_PREVIOUS_STATE} of {@link #ACTION_PLAYING_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#ACTION_PLAYING_STATE_CHANGED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "STATE_NOT_PLAYING",
    "type" : "int",
    "comment" : "\n     * A2DP sink device is NOT streaming music. This state can be one of {@link #EXTRA_STATE} or\n     * {@link #EXTRA_PREVIOUS_STATE} of {@link #ACTION_PLAYING_STATE_CHANGED} intent.\n     ",
    "links" : [ "#EXTRA_STATE", "#ACTION_PLAYING_STATE_CHANGED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "OPTIONAL_CODECS_SUPPORT_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * We don't have a stored preference for whether or not the given A2DP sink device supports\n     * optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The given A2DP sink device does not support optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The given A2DP sink device does support optional codecs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * We don't have a stored preference for whether optional codecs should be enabled or disabled\n     * for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_DISABLED",
    "type" : "int",
    "comment" : "\n     * Optional codecs should be disabled for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPTIONAL_CODECS_PREF_ENABLED",
    "type" : "int",
    "comment" : "\n     * Optional codecs should be enabled for the given A2DP device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_BUFFER_SUPPORT_NONE",
    "type" : "int",
    "comment" : "\n     * Indicates the supported type of Dynamic Audio Buffer is not supported.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_BUFFER_SUPPORT_A2DP_OFFLOAD",
    "type" : "int",
    "comment" : "\n     * Indicates the supported type of Dynamic Audio Buffer is A2DP offload.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DYNAMIC_BUFFER_SUPPORT_A2DP_SOFTWARE_ENCODING",
    "type" : "int",
    "comment" : "\n     * Indicates the supported type of Dynamic Audio Buffer is A2DP software encoding.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothA2dp",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothA2dp getService()",
    "returnType" : "IBluetoothA2dp",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote Bluetooth device.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * <p>The active device selection is per profile. An active device's purpose is\n     * profile-specific. For example, A2DP audio streaming is to the active A2DP Sink device. If a\n     * remote device is not connected, it cannot be selected as active.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is not connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that the {@link\n     * #ACTION_ACTIVE_DEVICE_CHANGED} intent will be broadcasted with the active device.\n     *\n     * @param device the remote Bluetooth device. Could be null to clear the active device and stop\n     *     streaming audio to a Bluetooth device.\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#ACTION_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public BluetoothDevice getActiveDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Get the connected device that is active.\n     *\n     * @return the connected device that is active or null if no device is active\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p>The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link\n     * #PRIORITY_OFF}\n     *\n     * @param device Paired bluetooth device\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link\n     * #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public void setAvrcpAbsoluteVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n     * Tells remote device to set an absolute volume. Only if absolute volume is supported\n     *\n     * @param volume Absolute volume to be set on AVRCP side\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isA2dpPlaying(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if A2DP profile is streaming music.\n     *\n     * @param device BluetoothDevice device\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldSendVolumeKeys(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * This function checks if the remote device is an AVCRP target and thus whether we should send\n     * volume keys changes or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<BluetoothCodecType> getSupportedCodecTypes()",
    "returnType" : "Collection<BluetoothCodecType>",
    "comment" : "\n     * Returns the list of source codecs that are supported by the current platform.\n     *\n     * <p>The list always includes the mandatory SBC codec, and may include optional proprietary\n     * codecs.\n     *\n     * @return list of supported source codec types\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothCodecStatus getCodecStatus(@NonNull BluetoothDevice device)",
    "returnType" : "BluetoothCodecStatus",
    "comment" : "\n     * Gets the current codec status (configuration and capability).\n     *\n     * @param device the remote Bluetooth device.\n     * @return the current codec status\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodecConfigPreference(@NonNull BluetoothDevice device, @NonNull BluetoothCodecConfig codecConfig)",
    "returnType" : "void",
    "comment" : "\n     * Sets the codec configuration preference.\n     *\n     * <p>For apps without the {@link android.Manifest.permission.BLUETOOTH_PRIVILEGED} permission a\n     * {@link android.companion.CompanionDeviceManager} association is required.\n     *\n     * @param device the remote Bluetooth device.\n     * @param codecConfig the codec configuration preference\n     * @hide\n     ",
    "links" : [ "android.companion.CompanionDeviceManager", "android.Manifest.permission.BLUETOOTH_PRIVILEGED" ]
  }, {
    "name" : "public void enableOptionalCodecs(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Enables the optional codecs for the given device for this connection.\n     *\n     * <p>If the given device supports another codec type than {@link\n     * BluetoothCodecConfig.SOURCE_CODEC_TYPE_SBC}, this will switch to it. Switching from one codec\n     * to another will create a short audio drop. In case of multiple applications calling the\n     * method, the last call will be taken into account, overriding any previous call\n     *\n     * <p>See {@link #setOptionalCodecsEnabled} to enable optional codecs by default when the given\n     * device is connected.\n     *\n     * @param device the remote Bluetooth device\n     * @hide\n     ",
    "links" : [ "#setOptionalCodecsEnabled", "BluetoothCodecConfig.SOURCE_CODEC_TYPE_SBC" ]
  }, {
    "name" : "public void disableOptionalCodecs(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Disables the optional codecs for the given device for this connection.\n     *\n     * <p>When optional codecs are disabled, the device will use the default Bluetooth audio codec\n     * type. Switching from one codec to another will create a short audio drop. In case of multiple\n     * applications calling the method, the last call will be taken into account, overriding any\n     * previous call\n     *\n     * <p>See {@link BluetoothCodecConfig.SOURCE_CODEC_TYPE_SBC}. See {@link\n     * #setOptionalCodecsEnabled} to disable optional codecs by default when the given device is\n     * connected.\n     *\n     * @param device the remote Bluetooth device\n     * @hide\n     ",
    "links" : [ "#setOptionalCodecsEnabled", "BluetoothCodecConfig.SOURCE_CODEC_TYPE_SBC" ]
  }, {
    "name" : "private void enableDisableOptionalCodecs(BluetoothDevice device, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enables or disables the optional codecs.\n     *\n     * @param device the remote Bluetooth device.\n     * @param enable if true, enable the optional codecs, otherwise disable them\n     ",
    "links" : [ ]
  }, {
    "name" : "public int isOptionalCodecsSupported(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Returns whether this device supports optional codecs.\n     *\n     * @param device the remote Bluetooth device\n     * @return whether the optional codecs are supported or not, or {@link\n     *     #OPTIONAL_CODECS_SUPPORT_UNKNOWN} if the state can't be retrieved.\n     * @hide\n     ",
    "links" : [ "#OPTIONAL_CODECS_SUPPORT_UNKNOWN" ]
  }, {
    "name" : "public int isOptionalCodecsEnabled(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Returns whether this device has its optional codecs enabled.\n     *\n     * @param device the remote Bluetooth device\n     * @return whether the optional codecs are enabled or not, or {@link\n     *     #OPTIONAL_CODECS_PREF_UNKNOWN} if the state can't be retrieved.\n     * @hide\n     ",
    "links" : [ "#OPTIONAL_CODECS_PREF_UNKNOWN" ]
  }, {
    "name" : "public void setOptionalCodecsEnabled(@NonNull BluetoothDevice device, @OptionalCodecsPreferenceStatus int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default state of optional codecs for the given device.\n     *\n     * <p>Automatically enables or disables the optional codecs for the given device when connected.\n     *\n     * @param device the remote Bluetooth device\n     * @param value whether the optional codecs should be enabled for this device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDynamicBufferSupport()",
    "returnType" : "int",
    "comment" : "\n     * Get the supported type of the Dynamic Audio Buffer.\n     *\n     * <p>Possible return values are {@link #DYNAMIC_BUFFER_SUPPORT_NONE}, {@link\n     * #DYNAMIC_BUFFER_SUPPORT_A2DP_OFFLOAD}, {@link\n     * #DYNAMIC_BUFFER_SUPPORT_A2DP_SOFTWARE_ENCODING}.\n     *\n     * @return supported type of Dynamic Audio Buffer feature\n     * @hide\n     ",
    "links" : [ "#DYNAMIC_BUFFER_SUPPORT_A2DP_SOFTWARE_ENCODING", "#DYNAMIC_BUFFER_SUPPORT_A2DP_OFFLOAD", "#DYNAMIC_BUFFER_SUPPORT_NONE" ]
  }, {
    "name" : "public BufferConstraints getBufferConstraints()",
    "returnType" : "BufferConstraints",
    "comment" : "\n     * Return the record of {@link BufferConstraints} object that has the default/maximum/minimum\n     * audio buffer. This can be used to inform what the controller has support for the audio\n     * buffer.\n     *\n     * @return a record with {@link BufferConstraints} or null if report is unavailable or\n     *     unsupported\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BufferConstraints" ]
  }, {
    "name" : "public boolean setBufferLengthMillis(@BluetoothCodecConfig.SourceCodecType int codec, int value)",
    "returnType" : "boolean",
    "comment" : "\n     * Set Dynamic Audio Buffer Size.\n     *\n     * @param codec audio codec\n     * @param value buffer millis\n     * @return true to indicate success, or false on immediate error\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * <p>For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothA2dp getService()", "public BluetoothAdapter getAdapter()", "public void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public BluetoothDevice getActiveDevice()", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public void setAvrcpAbsoluteVolume(int volume)", "public boolean isA2dpPlaying(BluetoothDevice device)", "public boolean shouldSendVolumeKeys(BluetoothDevice device)", "public Collection<BluetoothCodecType> getSupportedCodecTypes()", "public BluetoothCodecStatus getCodecStatus(@NonNull BluetoothDevice device)", "public void setCodecConfigPreference(@NonNull BluetoothDevice device, @NonNull BluetoothCodecConfig codecConfig)", "public void enableOptionalCodecs(@NonNull BluetoothDevice device)", "public void disableOptionalCodecs(@NonNull BluetoothDevice device)", "private void enableDisableOptionalCodecs(BluetoothDevice device, boolean enable)", "public int isOptionalCodecsSupported(@NonNull BluetoothDevice device)", "public int isOptionalCodecsEnabled(@NonNull BluetoothDevice device)", "public void setOptionalCodecsEnabled(@NonNull BluetoothDevice device, @OptionalCodecsPreferenceStatus int value)", "public int getDynamicBufferSupport()", "public BufferConstraints getBufferConstraints()", "public boolean setBufferLengthMillis(@BluetoothCodecConfig.SourceCodecType int codec, int value)", "public static String stateToString(int state)", "private boolean isEnabled()", "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_PLAYING_STATE_CHANGED", "ACTION_AVRCP_CONNECTION_STATE_CHANGED", "ACTION_ACTIVE_DEVICE_CHANGED", "ACTION_CODEC_CONFIG_CHANGED", "STATE_PLAYING", "STATE_NOT_PLAYING", "OPTIONAL_CODECS_SUPPORT_UNKNOWN", "OPTIONAL_CODECS_NOT_SUPPORTED", "OPTIONAL_CODECS_SUPPORTED", "OPTIONAL_CODECS_PREF_UNKNOWN", "OPTIONAL_CODECS_PREF_DISABLED", "OPTIONAL_CODECS_PREF_ENABLED", "DYNAMIC_BUFFER_SUPPORT_NONE", "DYNAMIC_BUFFER_SUPPORT_A2DP_OFFLOAD", "DYNAMIC_BUFFER_SUPPORT_A2DP_SOFTWARE_ENCODING", "mAdapter", "mAttributionSource", "mService" ]
}