{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/FilteredBreakIteratorBuilder.java",
  "packageName" : "android.icu.text",
  "className" : "FilteredBreakIteratorBuilder",
  "comment" : "\n * The BreakIteratorFilter is used to modify the behavior of a BreakIterator\n *  by constructing a new BreakIterator which suppresses certain segment boundaries.\n *  See  http://www.unicode.org/reports/tr35/tr35-general.html#Segmentation_Exceptions .\n *  For example, a typical English Sentence Break Iterator would break on the space\n *  in the string \"Mr. Smith\" (resulting in two segments),\n *  but with \"Mr.\" as an exception, a filtered break iterator\n *  would consider the string \"Mr. Smith\" to be a single segment.\n *\n * <p>This class is not intended for public subclassing.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static final FilteredBreakIteratorBuilder getInstance(Locale where)",
    "returnType" : "FilteredBreakIteratorBuilder",
    "comment" : "\n     * Construct a FilteredBreakIteratorBuilder based on sentence break exception rules in a locale.\n     * The rules are taken from CLDR exception data for the locale,\n     * see http://www.unicode.org/reports/tr35/tr35-general.html#Segmentation_Exceptions\n     * This is the equivalent of calling createInstance(UErrorCode&amp;)\n     * and then repeatedly calling addNoBreakAfter(...) with the contents\n     * of the CLDR exception data.\n     * @param where the locale.\n     * @return the new builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final FilteredBreakIteratorBuilder getInstance(ULocale where)",
    "returnType" : "FilteredBreakIteratorBuilder",
    "comment" : "\n     * Construct a FilteredBreakIteratorBuilder based on sentence break exception rules in a locale.\n     * The rules are taken from CLDR exception data for the locale,\n     * see http://www.unicode.org/reports/tr35/tr35-general.html#Segmentation_Exceptions\n     * This is the equivalent of calling createInstance(UErrorCode&amp;)\n     * and then repeatedly calling addNoBreakAfter(...) with the contents\n     * of the CLDR exception data.\n     * @param where the locale.\n     * @return the new builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final FilteredBreakIteratorBuilder getEmptyInstance()",
    "returnType" : "FilteredBreakIteratorBuilder",
    "comment" : "\n     * Construct an empty FilteredBreakIteratorBuilder.\n     * In this state, it will not suppress any segment boundaries.\n     * @return the new builder\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean suppressBreakAfter(CharSequence str)",
    "returnType" : "boolean",
    "comment" : "\n     * Suppress a certain string from being the end of a segment.\n     * For example, suppressing \"Mr.\", then segments ending in \"Mr.\" will not be returned\n     * by the iterator.\n     * @param str the string to suppress, such as \"Mr.\"\n     * @return true if the string was not present and now added,\n     * false if the call was a no-op because the string was already being suppressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean unsuppressBreakAfter(CharSequence str)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop suppressing a certain string from being the end of the segment.\n     * This function does not create any new segment boundaries, but only serves to un-do\n     * the effect of earlier calls to suppressBreakAfter, or to un-do the effect of\n     * locale data which may be suppressing certain strings.\n     * @param str the str the string to unsuppress, such as \"Mr.\"\n     * @return true if the string was present and now removed,\n     * false if the call was a no-op because the string was not being suppressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract BreakIterator wrapIteratorWithFilter(BreakIterator wrappedBreakIterator)",
    "returnType" : "BreakIterator",
    "comment" : "\n     * Wrap (adopt) an existing break iterator in a new filtered instance.\n     * Note that the wrappedBreakIterator is adopted by the new BreakIterator\n     * and should no longer be used by the caller.\n     * The FilteredBreakIteratorBuilder may be reused.\n     * @param wrappedBreakIterator the break iterator to wrap\n     * @return the new BreakIterator\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final FilteredBreakIteratorBuilder getInstance(Locale where)", "public static final FilteredBreakIteratorBuilder getInstance(ULocale where)", "public static final FilteredBreakIteratorBuilder getEmptyInstance()", "public abstract boolean suppressBreakAfter(CharSequence str)", "public abstract boolean unsuppressBreakAfter(CharSequence str)", "public abstract BreakIterator wrapIteratorWithFilter(BreakIterator wrappedBreakIterator)" ],
  "variableNames" : [ ]
}