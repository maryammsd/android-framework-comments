{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/SecureCacheResponse.java",
  "packageName" : "java.net",
  "className" : "SecureCacheResponse",
  "comment" : "\n * Represents a cache response originally retrieved through secure\n * means, such as TLS.\n *\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String getCipherSuite()",
    "returnType" : "String",
    "comment" : "\n     * Returns the cipher suite in use on the original connection that\n     * retrieved the network resource.\n     *\n     * @return a string representing the cipher suite\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<Certificate> getLocalCertificateChain()",
    "returnType" : "List<Certificate>",
    "comment" : "\n     * Returns the certificate chain that were sent to the server during\n     * handshaking of the original connection that retrieved the\n     * network resource.  Note: This method is useful only\n     * when using certificate-based cipher suites.\n     *\n     * @return an immutable List of Certificate representing the\n     *           certificate chain that was sent to the server. If no\n     *           certificate chain was sent, null will be returned.\n     * @see #getLocalPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<Certificate> getServerCertificateChain() throws SSLPeerUnverifiedException",
    "returnType" : "List<Certificate>",
    "comment" : "\n     * Returns the server's certificate chain, which was established as\n     * part of defining the session in the original connection that\n     * retrieved the network resource, from cache.  Note: This method\n     * can be used only when using certificate-based cipher suites;\n     * using it with non-certificate-based cipher suites, such as\n     * Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * @return an immutable List of Certificate representing the server's\n     *         certificate chain.\n     * @throws SSLPeerUnverifiedException if the peer is not verified.\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the server's principal which was established as part of\n     * defining the session during the original connection that\n     * retrieved the network resource.\n     *\n     * @return the server's principal. Returns an X500Principal of the\n     * end-entity certiticate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites.\n     *\n     * @throws SSLPeerUnverifiedException if the peer was not verified.\n     *\n     * @see #getServerCertificateChain()\n     * @see #getLocalPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getLocalPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n      * Returns the principal that was sent to the server during\n      * handshaking in the original connection that retrieved the\n      * network resource.\n      *\n      * @return the principal sent to the server. Returns an X500Principal\n      * of the end-entity certificate for X509-based cipher suites, and\n      * KerberosPrincipal for Kerberos cipher suites. If no principal was\n      * sent, then null is returned.\n      *\n      * @see #getLocalCertificateChain()\n      * @see #getPeerPrincipal()\n      ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String getCipherSuite()", "public abstract List<Certificate> getLocalCertificateChain()", "public abstract List<Certificate> getServerCertificateChain() throws SSLPeerUnverifiedException", "public abstract Principal getPeerPrincipal() throws SSLPeerUnverifiedException", "public abstract Principal getLocalPrincipal()" ],
  "variableNames" : [ ]
}