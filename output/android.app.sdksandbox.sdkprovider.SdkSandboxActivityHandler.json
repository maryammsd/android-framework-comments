{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/sdksandbox/sdkprovider/SdkSandboxActivityHandler.java",
  "packageName" : "android.app.sdksandbox.sdkprovider",
  "className" : "SdkSandboxActivityHandler",
  "comment" : "\n * This is used to notify the SDK when an {@link Activity} is created for it.\n *\n * <p>When an SDK wants to start an {@link Activity}, it should register an implementation of this\n * class by calling {@link\n * SdkSandboxController#registerSdkSandboxActivityHandler(SdkSandboxActivityHandler)} that will\n * return an {@link android.os.IBinder} identifier for the registered {@link\n * SdkSandboxActivityHandler} to The SDK.\n *\n * <p>The SDK should be notified about the {@link Activity} creation by calling {@link\n * SdkSandboxActivityHandler#onActivityCreated(Activity)} which happens when the caller app calls\n * {@link android.app.sdksandbox.SdkSandboxManager#startSdkSandboxActivity(Activity, IBinder)} using\n * the same {@link IBinder} identifier for the registered {@link SdkSandboxActivityHandler}.\n ",
  "links" : [ "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler", "android.app.sdksandbox.sdkprovider.SdkSandboxController#registerSdkSandboxActivityHandler(SdkSandboxActivityHandler)", "android.app.Activity", "android.os.IBinder", "android.app.sdksandbox.sdkprovider.SdkSandboxActivityHandler#onActivityCreated(Activity)", "android.app.sdksandbox.SdkSandboxManager#startSdkSandboxActivity(Activity" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onActivityCreated(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "\n     * Notifies SDK when an {@link Activity} gets created.\n     *\n     * <p>This function is called synchronously from the main thread of the {@link Activity} that is\n     * getting created.\n     *\n     * <p>SDK is expected to call {@link Activity#setContentView(View)} to the passed {@link\n     * Activity} object to populate the view.\n     *\n     * <p>If SDK registers lifecycle callbacks over the passed {@link Activity} object using {@link\n     * Activity#registerActivityLifecycleCallbacks(\n     * android.app.Application.ActivityLifecycleCallbacks)}, it is important to note that {@link\n     * android.app.Application.ActivityLifecycleCallbacks#onActivityPreCreated(Activity, Bundle)}\n     * and {@link android.app.Application.ActivityLifecycleCallbacks#onActivityCreated(Activity,\n     * Bundle)} will not be triggered as {@link #onActivityCreated(Activity)} is called at the\n     * {@link Activity} creation stage. Then to know about the Activity state, SDKs should override\n     * {@link android.app.Application.ActivityLifecycleCallbacks#onActivityPostCreated(Activity,\n     * Bundle)}.\n     *\n     * @param activity the {@link Activity} gets created\n     ",
    "links" : [ "android.app.Activity#setContentView(View)", "android.app.Activity#registerActivityLifecycleCallbacks(", "android.app.Application.ActivityLifecycleCallbacks#onActivityPostCreated(Activity", "android.app.Application.ActivityLifecycleCallbacks#onActivityPreCreated(Activity", "android.app.Application.ActivityLifecycleCallbacks#onActivityCreated(Activity", "android.app.Activity", "#onActivityCreated(Activity)" ]
  } ],
  "methodNames" : [ " void onActivityCreated(@NonNull Activity activity)" ],
  "variableNames" : [ ]
}