{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/ActivityInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ActivityInfo",
  "comment" : "\n * Information you can retrieve about a particular application\n * activity or receiver. This corresponds to information collected\n * from the AndroidManifest.xml's &lt;activity&gt; and\n * &lt;receiver&gt; tags.\n ",
  "variables" : [ {
    "name" : "theme",
    "type" : "int",
    "comment" : "\n     * A style resource identifier (in the package's resources) of this\n     * activity's theme.  From the \"theme\" attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "LAUNCH_MULTIPLE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>standard</code> in\n     * the {@link android.R.attr#launchMode} attribute.\n     ",
    "links" : [ "android.R.attr#launchMode" ]
  }, {
    "name" : "LAUNCH_SINGLE_TOP",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>singleTop</code> in\n     * the {@link android.R.attr#launchMode} attribute.\n     ",
    "links" : [ "android.R.attr#launchMode" ]
  }, {
    "name" : "LAUNCH_SINGLE_TASK",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>singleTask</code> in\n     * the {@link android.R.attr#launchMode} attribute.\n     ",
    "links" : [ "android.R.attr#launchMode" ]
  }, {
    "name" : "LAUNCH_SINGLE_INSTANCE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>singleInstance</code> in\n     * the {@link android.R.attr#launchMode} attribute.\n     ",
    "links" : [ "android.R.attr#launchMode" ]
  }, {
    "name" : "launchMode",
    "type" : "int",
    "comment" : "\n     * The launch mode style requested by the activity.  From the\n     * {@link android.R.attr#launchMode} attribute, one of\n     * {@link #LAUNCH_MULTIPLE},\n     * {@link #LAUNCH_SINGLE_TOP}, {@link #LAUNCH_SINGLE_TASK}, or\n     * {@link #LAUNCH_SINGLE_INSTANCE}.\n     ",
    "links" : [ "android.R.attr#launchMode", "#LAUNCH_SINGLE_INSTANCE", "#LAUNCH_MULTIPLE", "#LAUNCH_SINGLE_TASK", "#LAUNCH_SINGLE_TOP" ]
  }, {
    "name" : "DOCUMENT_LAUNCH_NONE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>none</code> in\n     * the {@link android.R.attr#documentLaunchMode} attribute.\n     ",
    "links" : [ "android.R.attr#documentLaunchMode" ]
  }, {
    "name" : "DOCUMENT_LAUNCH_INTO_EXISTING",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>intoExisting</code> in\n     * the {@link android.R.attr#documentLaunchMode} attribute.\n     ",
    "links" : [ "android.R.attr#documentLaunchMode" ]
  }, {
    "name" : "DOCUMENT_LAUNCH_ALWAYS",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>always</code> in\n     * the {@link android.R.attr#documentLaunchMode} attribute.\n     ",
    "links" : [ "android.R.attr#documentLaunchMode" ]
  }, {
    "name" : "DOCUMENT_LAUNCH_NEVER",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>never</code> in\n     * the {@link android.R.attr#documentLaunchMode} attribute.\n     ",
    "links" : [ "android.R.attr#documentLaunchMode" ]
  }, {
    "name" : "documentLaunchMode",
    "type" : "int",
    "comment" : "\n     * The document launch mode style requested by the activity. From the\n     * {@link android.R.attr#documentLaunchMode} attribute, one of\n     * {@link #DOCUMENT_LAUNCH_NONE}, {@link #DOCUMENT_LAUNCH_INTO_EXISTING},\n     * {@link #DOCUMENT_LAUNCH_ALWAYS}.\n     *\n     * <p>Modes DOCUMENT_LAUNCH_ALWAYS\n     * and DOCUMENT_LAUNCH_INTO_EXISTING are equivalent to {@link\n     * android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENT\n     * Intent.FLAG_ACTIVITY_NEW_DOCUMENT} with and without {@link\n     * android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASK\n     * Intent.FLAG_ACTIVITY_MULTIPLE_TASK} respectively.\n     ",
    "links" : [ "android.R.attr#documentLaunchMode", "android.content.Intent#FLAG_ACTIVITY_MULTIPLE_TASKIntent.FLAG_ACTIVITY_MULTIPLE_TASK", "android.content.Intent#FLAG_ACTIVITY_NEW_DOCUMENTIntent.FLAG_ACTIVITY_NEW_DOCUMENT", "#DOCUMENT_LAUNCH_ALWAYS", "#DOCUMENT_LAUNCH_NONE", "#DOCUMENT_LAUNCH_INTO_EXISTING" ]
  }, {
    "name" : "PERSIST_ROOT_ONLY",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>persistRootOnly</code> in\n     * the {@link android.R.attr#persistableMode} attribute.\n     ",
    "links" : [ "android.R.attr#persistableMode" ]
  }, {
    "name" : "PERSIST_NEVER",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>doNotPersist</code> in\n     * the {@link android.R.attr#persistableMode} attribute.\n     ",
    "links" : [ "android.R.attr#persistableMode" ]
  }, {
    "name" : "PERSIST_ACROSS_REBOOTS",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>persistAcrossReboots</code> in\n     * the {@link android.R.attr#persistableMode} attribute.\n     ",
    "links" : [ "android.R.attr#persistableMode" ]
  }, {
    "name" : "persistableMode",
    "type" : "int",
    "comment" : "\n     * Value indicating how this activity is to be persisted across\n     * reboots for restoring in the Recents list.\n     * {@link android.R.attr#persistableMode}\n     ",
    "links" : [ "android.R.attr#persistableMode" ]
  }, {
    "name" : "maxRecents",
    "type" : "int",
    "comment" : "\n     * The maximum number of tasks rooted at this activity that can be in the recent task list.\n     * Refer to {@link android.R.attr#maxRecents}.\n     ",
    "links" : [ "android.R.attr#maxRecents" ]
  }, {
    "name" : "permission",
    "type" : "String",
    "comment" : "\n     * Optional name of a permission required to be able to access this\n     * Activity.  From the \"permission\" attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "taskAffinity",
    "type" : "String",
    "comment" : "\n     * The affinity this activity has for another task in the system.  The\n     * string here is the name of the task, often the package name of the\n     * overall package.  If null, the activity has no affinity.  Set from the\n     * {@link android.R.attr#taskAffinity} attribute.\n     ",
    "links" : [ "android.R.attr#taskAffinity" ]
  }, {
    "name" : "targetActivity",
    "type" : "String",
    "comment" : "\n     * If this is an activity alias, this is the real activity class to run\n     * for it.  Otherwise, this is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "launchToken",
    "type" : "String",
    "comment" : "\n     * Token used to string together multiple events within a single launch action.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_UNRESIZEABLE",
    "type" : "int",
    "comment" : "\n     * Activity can not be resized and always occupies the fullscreen area with all windows fully\n     * visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION",
    "type" : "int",
    "comment" : "\n     * Activity didn't explicitly request to be resizeable, but we are making it resizeable because\n     * of the SDK version it targets. Only affects apps with target SDK >= N where the app is\n     * implied to be resizeable if it doesn't explicitly set the attribute to any value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_RESIZEABLE",
    "type" : "int",
    "comment" : "\n     * Activity explicitly requested to be resizeable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_RESIZEABLE_AND_PIPABLE_DEPRECATED",
    "type" : "int",
    "comment" : "\n     * Activity is resizeable and supported picture-in-picture mode.  This flag is now deprecated\n     * since activities do not need to be resizeable to support picture-in-picture.\n     * See {@link #FLAG_SUPPORTS_PICTURE_IN_PICTURE}.\n     *\n     * @hide\n     * @deprecated\n     ",
    "links" : [ "#FLAG_SUPPORTS_PICTURE_IN_PICTURE" ]
  }, {
    "name" : "RESIZE_MODE_FORCE_RESIZEABLE",
    "type" : "int",
    "comment" : "\n     * Activity does not support resizing, but we are forcing it to be resizeable. Only affects\n     * certain pre-N apps where we force them to be resizeable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_FORCE_RESIZABLE_LANDSCAPE_ONLY",
    "type" : "int",
    "comment" : "\n     * Activity does not support resizing, but we are forcing it to be resizeable as long\n     * as the size remains landscape.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_FORCE_RESIZABLE_PORTRAIT_ONLY",
    "type" : "int",
    "comment" : "\n     * Activity does not support resizing, but we are forcing it to be resizeable as long\n     * as the size remains portrait.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESIZE_MODE_FORCE_RESIZABLE_PRESERVE_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * Activity does not support resizing, but we are forcing it to be resizeable as long\n     * as the bounds remain in the same orientation as they are.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "resizeMode",
    "type" : "int",
    "comment" : "\n     * Value indicating if the resizing mode the activity supports.\n     * See {@link android.R.attr#resizeableActivity}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#resizeableActivity" ]
  }, {
    "name" : "maxAspectRatio",
    "type" : "float",
    "comment" : "\n     * Value indicating the maximum aspect ratio the activity supports.\n     * <p>\n     * 0 means unset.\n     * @See {@link android.R.attr#maxAspectRatio}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#maxAspectRatio" ]
  }, {
    "name" : "minAspectRatio",
    "type" : "float",
    "comment" : "\n     * Value indicating the minimum aspect ratio the activity supports.\n     * <p>\n     * 0 means unset.\n     * @See {@link android.R.attr#minAspectRatio}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#minAspectRatio" ]
  }, {
    "name" : "supportsSizeChanges",
    "type" : "boolean",
    "comment" : "\n     * Indicates that the activity works well with size changes like display changing size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "requestedVrComponent",
    "type" : "String",
    "comment" : "\n     * Name of the VrListenerService component to run for this activity.\n     * @see android.R.attr#enableVrMode\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Value for {@link #colorMode} indicating that the activity should use the\n     * default color mode (sRGB, low dynamic range).\n     *\n     * @see android.R.attr#colorMode\n     ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_WIDE_COLOR_GAMUT",
    "type" : "int",
    "comment" : "\n     * Value of {@link #colorMode} indicating that the activity should use a\n     * wide color gamut if the presentation display supports it.\n     *\n     * @see android.R.attr#colorMode\n     ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "COLOR_MODE_HDR",
    "type" : "int",
    "comment" : "\n     * Value of {@link #colorMode} indicating that the activity should use a\n     * high dynamic range if the presentation display supports it.\n     *\n     * @see android.R.attr#colorMode\n     ",
    "links" : [ "#colorMode" ]
  }, {
    "name" : "colorMode",
    "type" : "int",
    "comment" : "\n     * The color mode requested by this activity. The target display may not be\n     * able to honor the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MULTIPROCESS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating whether this activity is able to\n     * run in multiple processes.  If\n     * true, the system may instantiate it in the some process as the\n     * process starting it in order to conserve resources.  If false, the\n     * default, it always runs in {@link #processName}.  Set from the\n     * {@link android.R.attr#multiprocess} attribute.\n     ",
    "links" : [ "android.R.attr#multiprocess", "#flags", "#processName" ]
  }, {
    "name" : "FLAG_FINISH_ON_TASK_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that, when the activity's task is\n     * relaunched from home, this activity should be finished.\n     * Set from the\n     * {@link android.R.attr#finishOnTaskLaunch} attribute.\n     ",
    "links" : [ "android.R.attr#finishOnTaskLaunch", "#flags" ]
  }, {
    "name" : "FLAG_CLEAR_TASK_ON_LAUNCH",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that, when the activity is the root\n     * of a task, that task's stack should be cleared each time the user\n     * re-launches it from home.  As a result, the user will always\n     * return to the original activity at the top of the task.\n     * This flag only applies to activities that\n     * are used to start the root of a new task.  Set from the\n     * {@link android.R.attr#clearTaskOnLaunch} attribute.\n     ",
    "links" : [ "android.R.attr#clearTaskOnLaunch", "#flags" ]
  }, {
    "name" : "FLAG_ALWAYS_RETAIN_TASK_STATE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that, when the activity is the root\n     * of a task, that task's stack should never be cleared when it is\n     * relaunched from home.  Set from the\n     * {@link android.R.attr#alwaysRetainTaskState} attribute.\n     ",
    "links" : [ "android.R.attr#alwaysRetainTaskState", "#flags" ]
  }, {
    "name" : "FLAG_STATE_NOT_NEEDED",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that the activity's state\n     * is not required to be saved, so that if there is a failure the\n     * activity will not be removed from the activity stack.  Set from the\n     * {@link android.R.attr#stateNotNeeded} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#stateNotNeeded" ]
  }, {
    "name" : "FLAG_EXCLUDE_FROM_RECENTS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} that indicates that the activity should not\n     * appear in the list of recently launched activities.  Set from the\n     * {@link android.R.attr#excludeFromRecents} attribute.\n     ",
    "links" : [ "android.R.attr#excludeFromRecents", "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_TASK_REPARENTING",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} that indicates that the activity can be moved\n     * between tasks based on its task affinity.  Set from the\n     * {@link android.R.attr#allowTaskReparenting} attribute.\n     ",
    "links" : [ "android.R.attr#allowTaskReparenting", "#flags" ]
  }, {
    "name" : "FLAG_NO_HISTORY",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that, when the user navigates away\n     * from an activity, it should be finished.\n     * Set from the\n     * {@link android.R.attr#noHistory} attribute.\n     ",
    "links" : [ "#flags", "android.R.attr#noHistory" ]
  }, {
    "name" : "FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that, when a request to close system\n     * windows happens, this activity is finished.\n     * Set from the\n     * {@link android.R.attr#finishOnCloseSystemDialogs} attribute.\n     ",
    "links" : [ "android.R.attr#finishOnCloseSystemDialogs", "#flags" ]
  }, {
    "name" : "FLAG_HARDWARE_ACCELERATED",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application's rendering should\n     * be hardware accelerated.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SHOW_FOR_ALL_USERS",
    "type" : "int",
    "comment" : "\n     * Value for {@link #flags}: true when the application can be displayed for all users\n     * regardless of if the user of the application is the current user. Set from the\n     * {@link android.R.attr#showForAllUsers} attribute.\n     * @hide\n     ",
    "links" : [ "android.R.attr#showForAllUsers", "#flags" ]
  }, {
    "name" : "FLAG_IMMERSIVE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} corresponding to an immersive activity\n     * that wishes not to be interrupted by notifications.\n     * Applications that hide the system notification bar with\n     * {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN}\n     * may still be interrupted by high-priority notifications; for example, an\n     * incoming phone call may use\n     * {@link android.app.Notification#fullScreenIntent fullScreenIntent}\n     * to present a full-screen in-call activity to the user, pausing the\n     * current activity as a side-effect. An activity with\n     * {@link #FLAG_IMMERSIVE} set, however, will not be interrupted; the\n     * notification may be shown in some other way (such as a small floating\n     * \"toast\" window).\n     *\n     * Note that this flag will always reflect the Activity's\n     * <code>android:immersive</code> manifest definition, even if the Activity's\n     * immersive state is changed at runtime via\n     * {@link android.app.Activity#setImmersive(boolean)}.\n     *\n     * @see android.app.Notification#FLAG_HIGH_PRIORITY\n     * @see android.app.Activity#setImmersive(boolean)\n     ",
    "links" : [ "#FLAG_IMMERSIVE", "android.app.Notification#fullScreenIntent", "android.app.Activity#setImmersive(boolean)", "#flags", "android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN" ]
  }, {
    "name" : "FLAG_RELINQUISH_TASK_IDENTITY",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, a task rooted at this activity will have its\n     * baseIntent replaced by the activity immediately above this. Each activity may further\n     * relinquish its identity to the activity above it using this flag. Set from the\n     * {@link android.R.attr#relinquishTaskIdentity} attribute.\n     ",
    "links" : [ "android.R.attr#relinquishTaskIdentity", "#flags" ]
  }, {
    "name" : "FLAG_AUTO_REMOVE_FROM_RECENTS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that tasks started with this activity are to be\n     * removed from the recent list of tasks when the last activity in the task is finished.\n     * Corresponds to {@link android.R.attr#autoRemoveFromRecents}\n     ",
    "links" : [ "android.R.attr#autoRemoveFromRecents", "#flags" ]
  }, {
    "name" : "FLAG_RESUME_WHILE_PAUSING",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that this activity can start is creation/resume\n     * while the previous activity is still pausing.  Corresponds to\n     * {@link android.R.attr#resumeWhilePausing}\n     ",
    "links" : [ "#flags", "android.R.attr#resumeWhilePausing" ]
  }, {
    "name" : "FLAG_ENABLE_VR_MODE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating that this activity should be run with VR mode enabled.\n     *\n     * @see android.app.Activity#setVrModeEnabled(boolean, ComponentName)\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_ALWAYS_FOCUSABLE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the activity is always focusable regardless of if it is\n     * in a task/stack whose activities are normally not focusable.\n     * See android.R.attr#alwaysFocusable.\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_VISIBLE_TO_INSTANT_APP",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the activity is visible to instant\n     * applications. The activity is visible if it's either implicitly or\n     * explicitly exposed.\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_IMPLICITLY_VISIBLE_TO_INSTANT_APP",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the activity is implicitly visible\n     * to instant applications. Implicitly visible activities are those that\n     * implement certain intent-filters:\n     * <ul>\n     * <li>action {@link Intent#CATEGORY_BROWSABLE}</li>\n     * <li>action {@link Intent#ACTION_SEND}</li>\n     * <li>action {@link Intent#ACTION_SENDTO}</li>\n     * <li>action {@link Intent#ACTION_SEND_MULTIPLE}</li>\n     * </ul>\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_SENDTO", "android.content.Intent#ACTION_SEND", "android.content.Intent#ACTION_SEND_MULTIPLE", "android.content.Intent#CATEGORY_BROWSABLE", "#flags" ]
  }, {
    "name" : "FLAG_SUPPORTS_PICTURE_IN_PICTURE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the activity supports picture-in-picture mode.\n     * See {@link android.R.attr#supportsPictureInPicture}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#supportsPictureInPicture", "#flags" ]
  }, {
    "name" : "FLAG_SHOW_WHEN_LOCKED",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the activity should be shown when locked.\n     * See {@link android.R.attr#showWhenLocked}\n     * @hide\n     ",
    "links" : [ "android.R.attr#showWhenLocked", "#flags" ]
  }, {
    "name" : "FLAG_TURN_SCREEN_ON",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating if the screen should turn on when starting the activity.\n     * See {@link android.R.attr#turnScreenOn}\n     * @hide\n     ",
    "links" : [ "android.R.attr#turnScreenOn", "#flags" ]
  }, {
    "name" : "FLAG_PREFER_MINIMAL_POST_PROCESSING",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags} indicating whether the display should preferably be switched to a\n     * minimal post processing mode.\n     * See {@link android.R.attr#preferMinimalPostProcessing}\n     ",
    "links" : [ "android.R.attr#preferMinimalPostProcessing", "#flags" ]
  }, {
    "name" : "FLAG_SYSTEM_USER_ONLY",
    "type" : "int",
    "comment" : "\n     * @hide Bit in {@link #flags}: If set, this component will only be seen\n     * by the system user.  Only works with broadcast receivers.  Set from the\n     * android.R.attr#systemUserOnly attribute.\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "FLAG_SINGLE_USER",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #flags}: If set, a single instance of the receiver will\n     * run for all users on the device.  Set from the\n     * {@link android.R.attr#singleUser} attribute.  Note that this flag is\n     * only relevant for ActivityInfo structures that are describing receiver\n     * components; it is not applied to activities.\n     ",
    "links" : [ "android.R.attr#singleUser", "#flags" ]
  }, {
    "name" : "FLAG_ALLOW_EMBEDDED",
    "type" : "int",
    "comment" : "\n     * @hide Bit in {@link #flags}: If set, this activity may be launched into an\n     * owned ActivityContainer such as that within an ActivityView. If not set and\n     * this activity is launched into such a container a SecurityException will be\n     * thrown. Set from the {@link android.R.attr#allowEmbedded} attribute.\n     ",
    "links" : [ "android.R.attr#allowEmbedded", "#flags" ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "\n     * Options that have been set in the activity declaration in the\n     * manifest.\n     * These include:\n     * {@link #FLAG_MULTIPROCESS},\n     * {@link #FLAG_FINISH_ON_TASK_LAUNCH}, {@link #FLAG_CLEAR_TASK_ON_LAUNCH},\n     * {@link #FLAG_ALWAYS_RETAIN_TASK_STATE},\n     * {@link #FLAG_STATE_NOT_NEEDED}, {@link #FLAG_EXCLUDE_FROM_RECENTS},\n     * {@link #FLAG_ALLOW_TASK_REPARENTING}, {@link #FLAG_NO_HISTORY},\n     * {@link #FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS},\n     * {@link #FLAG_HARDWARE_ACCELERATED}, {@link #FLAG_SINGLE_USER}.\n     ",
    "links" : [ "#FLAG_HARDWARE_ACCELERATED", "#FLAG_SINGLE_USER", "#FLAG_STATE_NOT_NEEDED", "#FLAG_EXCLUDE_FROM_RECENTS", "#FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS", "#FLAG_FINISH_ON_TASK_LAUNCH", "#FLAG_CLEAR_TASK_ON_LAUNCH", "#FLAG_ALWAYS_RETAIN_TASK_STATE", "#FLAG_ALLOW_TASK_REPARENTING", "#FLAG_MULTIPROCESS", "#FLAG_NO_HISTORY" ]
  }, {
    "name" : "FLAG_INHERIT_SHOW_WHEN_LOCKED",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #privateFlags} indicating if the activity should be shown when locked in case\n     * an activity behind this can also be shown when locked.\n     * See {@link android.R.attr#inheritShowWhenLocked}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#inheritShowWhenLocked", "#privateFlags" ]
  }, {
    "name" : "privateFlags",
    "type" : "int",
    "comment" : "\n     * Options that have been set in the activity declaration in the manifest.\n     * These include:\n     * {@link #FLAG_INHERIT_SHOW_WHEN_LOCKED}.\n     * @hide\n     ",
    "links" : [ "#FLAG_INHERIT_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "SCREEN_ORIENTATION_UNSET",
    "type" : "int",
    "comment" : "\n     * Internal constant used to indicate that the app didn't set a specific orientation value.\n     * Different from {@link #SCREEN_ORIENTATION_UNSPECIFIED} below as the app can set its\n     * orientation to {@link #SCREEN_ORIENTATION_UNSPECIFIED} while this means that the app didn't\n     * set anything. The system will mostly treat this similar to\n     * {@link #SCREEN_ORIENTATION_UNSPECIFIED}.\n     * @hide\n     ",
    "links" : [ "#SCREEN_ORIENTATION_UNSPECIFIED" ]
  }, {
    "name" : "SCREEN_ORIENTATION_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>unspecified</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>landscape</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>portrait</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_USER",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>user</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_BEHIND",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>behind</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_SENSOR",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>sensor</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_NOSENSOR",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>nosensor</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_SENSOR_LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>sensorLandscape</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_SENSOR_PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>sensorPortrait</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_REVERSE_LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>reverseLandscape</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_REVERSE_PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>reversePortrait</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_FULL_SENSOR",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>fullSensor</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_USER_LANDSCAPE",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>userLandscape</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_USER_PORTRAIT",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>userPortrait</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_FULL_USER",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>fullUser</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "SCREEN_ORIENTATION_LOCKED",
    "type" : "int",
    "comment" : "\n     * Constant corresponding to <code>locked</code> in\n     * the {@link android.R.attr#screenOrientation} attribute.\n     ",
    "links" : [ "android.R.attr#screenOrientation" ]
  }, {
    "name" : "screenOrientation",
    "type" : "int",
    "comment" : "\n     * The preferred screen orientation this activity would like to run in.\n     * From the {@link android.R.attr#screenOrientation} attribute, one of\n     * {@link #SCREEN_ORIENTATION_UNSPECIFIED},\n     * {@link #SCREEN_ORIENTATION_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_USER},\n     * {@link #SCREEN_ORIENTATION_BEHIND},\n     * {@link #SCREEN_ORIENTATION_SENSOR},\n     * {@link #SCREEN_ORIENTATION_NOSENSOR},\n     * {@link #SCREEN_ORIENTATION_SENSOR_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_SENSOR_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_REVERSE_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_REVERSE_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_FULL_SENSOR},\n     * {@link #SCREEN_ORIENTATION_USER_LANDSCAPE},\n     * {@link #SCREEN_ORIENTATION_USER_PORTRAIT},\n     * {@link #SCREEN_ORIENTATION_FULL_USER},\n     * {@link #SCREEN_ORIENTATION_LOCKED},\n     ",
    "links" : [ "#SCREEN_ORIENTATION_LANDSCAPE", "#SCREEN_ORIENTATION_SENSOR_LANDSCAPE", "#SCREEN_ORIENTATION_USER", "#SCREEN_ORIENTATION_REVERSE_PORTRAIT", "android.R.attr#screenOrientation", "#SCREEN_ORIENTATION_SENSOR", "#SCREEN_ORIENTATION_UNSPECIFIED", "#SCREEN_ORIENTATION_SENSOR_PORTRAIT", "#SCREEN_ORIENTATION_FULL_SENSOR", "#SCREEN_ORIENTATION_LOCKED", "#SCREEN_ORIENTATION_REVERSE_LANDSCAPE", "#SCREEN_ORIENTATION_USER_PORTRAIT", "#SCREEN_ORIENTATION_FULL_USER", "#SCREEN_ORIENTATION_NOSENSOR", "#SCREEN_ORIENTATION_USER_LANDSCAPE", "#SCREEN_ORIENTATION_BEHIND", "#SCREEN_ORIENTATION_PORTRAIT" ]
  }, {
    "name" : "CONFIG_MCC",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the IMSI MCC.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_MNC",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the IMSI MNC.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_LOCALE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the locale.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_TOUCHSCREEN",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the touchscreen type.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_KEYBOARD",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the keyboard type.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_KEYBOARD_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the keyboard or navigation being hidden/exposed.\n     * Note that inspite of the name, this applies to the changes to any\n     * hidden states: keyboard or navigation.\n     * Set from the {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_NAVIGATION",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the navigation type.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_ORIENTATION",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the screen orientation.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_SCREEN_LAYOUT",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the screen layout.  Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_UI_MODE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle the ui mode. Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_SCREEN_SIZE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle the screen size. Set from the\n     * {@link android.R.attr#configChanges} attribute.  This will be\n     * set by default for applications that target an earlier version\n     * than {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}...\n     * <b>however</b>, you will not see the bit set here becomes some\n     * applications incorrectly compare {@link #configChanges} against\n     * an absolute value rather than correctly masking out the bits\n     * they are interested in.  Please don't do that, thanks.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges", "android.os.Build.VERSION_CODES#HONEYCOMB_MR2" ]
  }, {
    "name" : "CONFIG_SMALLEST_SCREEN_SIZE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle the smallest screen size. Set from the\n     * {@link android.R.attr#configChanges} attribute.  This will be\n     * set by default for applications that target an earlier version\n     * than {@link android.os.Build.VERSION_CODES#HONEYCOMB_MR2}...\n     * <b>however</b>, you will not see the bit set here becomes some\n     * applications incorrectly compare {@link #configChanges} against\n     * an absolute value rather than correctly masking out the bits\n     * they are interested in.  Please don't do that, thanks.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges", "android.os.Build.VERSION_CODES#HONEYCOMB_MR2" ]
  }, {
    "name" : "CONFIG_DENSITY",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle density changes. Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_LAYOUT_DIRECTION",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle the change to layout direction. Set from the\n     * {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_COLOR_MODE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle the change to the display color gamut or dynamic\n     * range. Set from the {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_ASSETS_PATHS",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle asset path changes.  Set from the {@link android.R.attr#configChanges}\n     * attribute. This is not a core resource configuration, but a higher-level value, so its\n     * constant starts at the high bits.\n     * @hide We do not want apps handling this yet, but we do need some kind of bit for diffs.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_FONT_SCALE",
    "type" : "int",
    "comment" : "\n     * Bit in {@link #configChanges} that indicates that the activity\n     * can itself handle changes to the font scaling factor.  Set from the\n     * {@link android.R.attr#configChanges} attribute.  This is\n     * not a core resource configuration, but a higher-level value, so its\n     * constant starts at the high bits.\n     ",
    "links" : [ "android.R.attr#configChanges", "#configChanges" ]
  }, {
    "name" : "CONFIG_WINDOW_CONFIGURATION",
    "type" : "int",
    "comment" : "\n     * Bit indicating changes to window configuration that isn't exposed to apps.\n     * This is for internal use only and apps don't handle it.\n     * @hide\n     * {@link Configuration}.\n     ",
    "links" : [ "android.content.res.Configuration" ]
  }, {
    "name" : "CONFIG_NATIVE_BITS",
    "type" : "int[]",
    "comment" : " @hide\n     * Unfortunately the constants for config changes in native code are\n     * different from ActivityInfo. :(  Here are the values we should use for the\n     * native side given the bit we have assigned in ActivityInfo.\n     ",
    "links" : [ ]
  }, {
    "name" : "configChanges",
    "type" : "int",
    "comment" : "\n     * Bit mask of kinds of configuration changes that this activity\n     * can handle itself (without being restarted by the system).\n     * Contains any combination of {@link #CONFIG_FONT_SCALE},\n     * {@link #CONFIG_MCC}, {@link #CONFIG_MNC},\n     * {@link #CONFIG_LOCALE}, {@link #CONFIG_TOUCHSCREEN},\n     * {@link #CONFIG_KEYBOARD}, {@link #CONFIG_NAVIGATION},\n     * {@link #CONFIG_ORIENTATION}, {@link #CONFIG_SCREEN_LAYOUT},\n     * {@link #CONFIG_DENSITY}, {@link #CONFIG_LAYOUT_DIRECTION} and\n     * {@link #CONFIG_COLOR_MODE}.\n     * Set from the {@link android.R.attr#configChanges} attribute.\n     ",
    "links" : [ "android.R.attr#configChanges", "#CONFIG_MCC", "#CONFIG_FONT_SCALE", "#CONFIG_ORIENTATION", "#CONFIG_COLOR_MODE", "#CONFIG_LAYOUT_DIRECTION", "#CONFIG_SCREEN_LAYOUT", "#CONFIG_KEYBOARD", "#CONFIG_NAVIGATION", "#CONFIG_LOCALE", "#CONFIG_MNC", "#CONFIG_DENSITY", "#CONFIG_TOUCHSCREEN" ]
  }, {
    "name" : "softInputMode",
    "type" : "int",
    "comment" : "\n     * The desired soft input mode for this activity's main window.\n     * Set from the {@link android.R.attr#windowSoftInputMode} attribute\n     * in the activity's manifest.  May be any of the same values allowed\n     * for {@link android.view.WindowManager.LayoutParams#softInputMode\n     * WindowManager.LayoutParams.softInputMode}.  If 0 (unspecified),\n     * the mode from the theme will be used.\n     ",
    "links" : [ "android.R.attr#windowSoftInputMode", "android.view.WindowManager.LayoutParams#softInputModeWindowManager.LayoutParams.softInputMode" ]
  }, {
    "name" : "uiOptions",
    "type" : "int",
    "comment" : "\n     * The desired extra UI options for this activity and its main window.\n     * Set from the {@link android.R.attr#uiOptions} attribute in the\n     * activity's manifest.\n     ",
    "links" : [ "android.R.attr#uiOptions" ]
  }, {
    "name" : "UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #uiOptions}.\n     * Indicates that the action bar should put all action items in a separate bar when\n     * the screen is narrow.\n     * <p>This value corresponds to \"splitActionBarWhenNarrow\" for the {@link #uiOptions} XML\n     * attribute.\n     ",
    "links" : [ "#uiOptions" ]
  }, {
    "name" : "parentActivityName",
    "type" : "String",
    "comment" : "\n     * If defined, the activity named here is the logical parent of this activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "rotationAnimation",
    "type" : "int",
    "comment" : "\n     * Screen rotation animation desired by the activity, with values as defined\n     * for {@link android.view.WindowManager.LayoutParams#rotationAnimation}.\n     *\n     * -1 means to use the system default.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#rotationAnimation" ]
  }, {
    "name" : "LOCK_TASK_LAUNCH_MODE_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOCK_TASK_LAUNCH_MODE_NEVER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOCK_TASK_LAUNCH_MODE_ALWAYS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOCK_TASK_LAUNCH_MODE_IF_WHITELISTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "lockTaskLaunchMode",
    "type" : "int",
    "comment" : "\n     * Value indicating if the activity is to be locked at startup. Takes on the values from\n     * {@link android.R.attr#lockTaskMode}.\n     * @hide\n     ",
    "links" : [ "android.R.attr#lockTaskMode" ]
  }, {
    "name" : "windowLayout",
    "type" : "WindowLayout",
    "comment" : "\n     * Information about desired position and size of activity on the display when\n     * it is first started.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ActivityInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int activityInfoConfigJavaToNative(@Config int input)",
    "returnType" : "int",
    "comment" : "\n     * Convert Java change bits to native.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int activityInfoConfigNativeToJava(@NativeConfig int input)",
    "returnType" : "int",
    "comment" : "\n     * Convert native change bits to Java.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRealConfigChanged()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Unfortunately some developers (OpenFeint I am looking at you) have\n     * compared the configChanges bit field against absolute values, so if we\n     * introduce a new bit they break.  To deal with that, we will make sure\n     * the public field will not have a value that breaks them, and let the\n     * framework call here to get the real value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String lockTaskLaunchModeToString(int lockTaskLaunchMode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getThemeResource()",
    "returnType" : "int",
    "comment" : "\n     * Return the theme resource identifier to use for this activity.  If\n     * the activity defines a theme, that is used; else, the application\n     * theme is used.\n     *\n     * @return The theme associated with this activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String persistableModeToString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFixedAspectRatio()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity has maximum or minimum aspect ratio.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFixedOrientation()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity's orientation is fixed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isFixedOrientationLandscape()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity's orientation is fixed to landscape.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFixedOrientationLandscape(@ScreenOrientation int orientation)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity's orientation is fixed to landscape.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isFixedOrientationPortrait()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity's orientation is fixed to portrait.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFixedOrientationPortrait(@ScreenOrientation int orientation)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity's orientation is fixed to portrait.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsPictureInPicture()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activity supports picture-in-picture.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isResizeableMode(int mode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPreserveOrientationMode(int mode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String resizeModeToString(int mode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix, int dumpFlags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTranslucentOrFloating(TypedArray attributes)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the {@link Activity} is considered translucent or floating.\n     * @hide\n     ",
    "links" : [ "Activity" ]
  }, {
    "name" : "public static String screenOrientationToString(int orientation)",
    "returnType" : "String",
    "comment" : "\n     * Convert the screen orientation constant to a human readable format.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String colorModeToString(@ColorMode int colorMode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "theme", "LAUNCH_MULTIPLE", "LAUNCH_SINGLE_TOP", "LAUNCH_SINGLE_TASK", "LAUNCH_SINGLE_INSTANCE", "launchMode", "DOCUMENT_LAUNCH_NONE", "DOCUMENT_LAUNCH_INTO_EXISTING", "DOCUMENT_LAUNCH_ALWAYS", "DOCUMENT_LAUNCH_NEVER", "documentLaunchMode", "PERSIST_ROOT_ONLY", "PERSIST_NEVER", "PERSIST_ACROSS_REBOOTS", "persistableMode", "maxRecents", "permission", "taskAffinity", "targetActivity", "launchToken", "RESIZE_MODE_UNRESIZEABLE", "RESIZE_MODE_RESIZEABLE_VIA_SDK_VERSION", "RESIZE_MODE_RESIZEABLE", "RESIZE_MODE_RESIZEABLE_AND_PIPABLE_DEPRECATED", "RESIZE_MODE_FORCE_RESIZEABLE", "RESIZE_MODE_FORCE_RESIZABLE_LANDSCAPE_ONLY", "RESIZE_MODE_FORCE_RESIZABLE_PORTRAIT_ONLY", "RESIZE_MODE_FORCE_RESIZABLE_PRESERVE_ORIENTATION", "resizeMode", "maxAspectRatio", "minAspectRatio", "supportsSizeChanges", "requestedVrComponent", "COLOR_MODE_DEFAULT", "COLOR_MODE_WIDE_COLOR_GAMUT", "COLOR_MODE_HDR", "colorMode", "FLAG_MULTIPROCESS", "FLAG_FINISH_ON_TASK_LAUNCH", "FLAG_CLEAR_TASK_ON_LAUNCH", "FLAG_ALWAYS_RETAIN_TASK_STATE", "FLAG_STATE_NOT_NEEDED", "FLAG_EXCLUDE_FROM_RECENTS", "FLAG_ALLOW_TASK_REPARENTING", "FLAG_NO_HISTORY", "FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS", "FLAG_HARDWARE_ACCELERATED", "FLAG_SHOW_FOR_ALL_USERS", "FLAG_IMMERSIVE", "FLAG_RELINQUISH_TASK_IDENTITY", "FLAG_AUTO_REMOVE_FROM_RECENTS", "FLAG_RESUME_WHILE_PAUSING", "FLAG_ENABLE_VR_MODE", "FLAG_ALWAYS_FOCUSABLE", "FLAG_VISIBLE_TO_INSTANT_APP", "FLAG_IMPLICITLY_VISIBLE_TO_INSTANT_APP", "FLAG_SUPPORTS_PICTURE_IN_PICTURE", "FLAG_SHOW_WHEN_LOCKED", "FLAG_TURN_SCREEN_ON", "FLAG_PREFER_MINIMAL_POST_PROCESSING", "FLAG_SYSTEM_USER_ONLY", "FLAG_SINGLE_USER", "FLAG_ALLOW_EMBEDDED", "flags", "FLAG_INHERIT_SHOW_WHEN_LOCKED", "privateFlags", "SCREEN_ORIENTATION_UNSET", "SCREEN_ORIENTATION_UNSPECIFIED", "SCREEN_ORIENTATION_LANDSCAPE", "SCREEN_ORIENTATION_PORTRAIT", "SCREEN_ORIENTATION_USER", "SCREEN_ORIENTATION_BEHIND", "SCREEN_ORIENTATION_SENSOR", "SCREEN_ORIENTATION_NOSENSOR", "SCREEN_ORIENTATION_SENSOR_LANDSCAPE", "SCREEN_ORIENTATION_SENSOR_PORTRAIT", "SCREEN_ORIENTATION_REVERSE_LANDSCAPE", "SCREEN_ORIENTATION_REVERSE_PORTRAIT", "SCREEN_ORIENTATION_FULL_SENSOR", "SCREEN_ORIENTATION_USER_LANDSCAPE", "SCREEN_ORIENTATION_USER_PORTRAIT", "SCREEN_ORIENTATION_FULL_USER", "SCREEN_ORIENTATION_LOCKED", "screenOrientation", "CONFIG_MCC", "CONFIG_MNC", "CONFIG_LOCALE", "CONFIG_TOUCHSCREEN", "CONFIG_KEYBOARD", "CONFIG_KEYBOARD_HIDDEN", "CONFIG_NAVIGATION", "CONFIG_ORIENTATION", "CONFIG_SCREEN_LAYOUT", "CONFIG_UI_MODE", "CONFIG_SCREEN_SIZE", "CONFIG_SMALLEST_SCREEN_SIZE", "CONFIG_DENSITY", "CONFIG_LAYOUT_DIRECTION", "CONFIG_COLOR_MODE", "CONFIG_ASSETS_PATHS", "CONFIG_FONT_SCALE", "CONFIG_WINDOW_CONFIGURATION", "CONFIG_NATIVE_BITS", "configChanges", "softInputMode", "uiOptions", "UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW", "parentActivityName", "rotationAnimation", "LOCK_TASK_LAUNCH_MODE_DEFAULT", "LOCK_TASK_LAUNCH_MODE_NEVER", "LOCK_TASK_LAUNCH_MODE_ALWAYS", "LOCK_TASK_LAUNCH_MODE_IF_WHITELISTED", "lockTaskLaunchMode", "windowLayout", "CREATOR" ],
  "methodNames" : [ "public static int activityInfoConfigJavaToNative(@Config int input)", "public static int activityInfoConfigNativeToJava(@NativeConfig int input)", "public int getRealConfigChanged()", "public static final String lockTaskLaunchModeToString(int lockTaskLaunchMode)", "public final int getThemeResource()", "private String persistableModeToString()", "public boolean hasFixedAspectRatio()", "public boolean isFixedOrientation()", " boolean isFixedOrientationLandscape()", "public static boolean isFixedOrientationLandscape(@ScreenOrientation int orientation)", " boolean isFixedOrientationPortrait()", "public static boolean isFixedOrientationPortrait(@ScreenOrientation int orientation)", "public boolean supportsPictureInPicture()", "public static boolean isResizeableMode(int mode)", "public static boolean isPreserveOrientationMode(int mode)", "public static String resizeModeToString(int mode)", "public void dump(Printer pw, String prefix)", "public void dump(Printer pw, String prefix, int dumpFlags)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public static boolean isTranslucentOrFloating(TypedArray attributes)", "public static String screenOrientationToString(int orientation)", "public static String colorModeToString(@ColorMode int colorMode)" ]
}