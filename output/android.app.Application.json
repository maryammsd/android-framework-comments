{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Application.java",
  "packageName" : "android.app",
  "className" : "Application",
  "comment" : "\n * Base class for maintaining global application state. You can provide your own\n * implementation by creating a subclass and specifying the fully-qualified name\n * of this subclass as the <code>\"android:name\"</code> attribute in your\n * AndroidManifest.xml's <code>&lt;application&gt;</code> tag. The Application\n * class, or your subclass of the Application class, is instantiated before any\n * other class when the process for your application/package is created.\n *\n * <p class=\"note\"><strong>Note: </strong>There is normally no need to subclass\n * Application.  In most situations, static singletons can provide the same\n * functionality in a more modular way.  If your singleton needs a global\n * context (for example to register broadcast receivers), include\n * {@link android.content.Context#getApplicationContext() Context.getApplicationContext()}\n * as a {@link android.content.Context} argument when invoking your singleton's\n * <code>getInstance()</code> method.\n * </p>\n ",
  "links" : [ "android.content.Context", "android.content.Context#getApplicationContext()" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityLifecycleCallbacks",
    "type" : "ArrayList<ActivityLifecycleCallbacks>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAssistCallbacks",
    "type" : "ArrayList<OnProvideAssistDataListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacksController",
    "type" : "ComponentCallbacksController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoadedApk",
    "type" : "LoadedApk",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private String getLoadedApkInfo()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Called when the application is starting, before any activity, service,\n     * or receiver objects (excluding content providers) have been created.\n     *\n     * <p>Implementations should be as quick as possible (for example using\n     * lazy initialization of state) since the time spent in this function\n     * directly impacts the performance of starting the first activity,\n     * service, or receiver in a process.</p>\n     *\n     * <p>If you override this method, be sure to call {@code super.onCreate()}.</p>\n     *\n     * <p class=\"note\">Be aware that direct boot may also affect callback order on\n     * Android {@link android.os.Build.VERSION_CODES#N} and later devices.\n     * Until the user unlocks the device, only direct boot aware components are\n     * allowed to run. You should consider that all direct boot unaware\n     * components, including such {@link android.content.ContentProvider}, are\n     * disabled until user unlock happens, especially when component callback\n     * order matters.</p>\n     ",
    "links" : [ "android.content.ContentProvider", "android.os.Build.VERSION_CODES#N" ]
  }, {
    "name" : "public void onTerminate()",
    "returnType" : "void",
    "comment" : "\n     * This method is for use in emulated process environments.  It will\n     * never be called on a production Android device, where processes are\n     * removed by simply killing them; no user code (including this callback)\n     * is executed when doing so.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(@NonNull Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerComponentCallbacks(ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterComponentCallbacks(ComponentCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerOnProvideAssistDataListener(OnProvideAssistDataListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterOnProvideAssistDataListener(OnProvideAssistDataListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getProcessName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the current process. A package's default process name\n     * is the same as its package name. Non-default processes will look like\n     * \"$PACKAGE_NAME:$NAME\", where $NAME corresponds to an android:process\n     * attribute within AndroidManifest.xml.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void attach(Context context)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreStarted(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityStarted(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostStarted(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreResumed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityResumed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostResumed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPrePaused(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPaused(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostPaused(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreStopped(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityStopped(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostStopped(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreSaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostSaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPreDestroyed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityDestroyed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityPostDestroyed(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchActivityConfigurationChanged(@NonNull Activity activity)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private Object[] collectActivityLifecycleCallbacks()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnProvideAssistData(Activity activity, Bundle data)",
    "returnType" : "void",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public AutofillManager.AutofillClient getAutofillClient()",
    "returnType" : "AutofillManager.AutofillClient",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private String getLoadedApkInfo()", "public void onCreate()", "public void onTerminate()", "public void onConfigurationChanged(@NonNull Configuration newConfig)", "public void onLowMemory()", "public void onTrimMemory(int level)", "public void registerComponentCallbacks(ComponentCallbacks callback)", "public void unregisterComponentCallbacks(ComponentCallbacks callback)", "public void registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)", "public void unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)", "public void registerOnProvideAssistDataListener(OnProvideAssistDataListener callback)", "public void unregisterOnProvideAssistDataListener(OnProvideAssistDataListener callback)", "public static String getProcessName()", " final void attach(Context context)", " void dispatchActivityPreCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)", " void dispatchActivityCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)", " void dispatchActivityPostCreated(@NonNull Activity activity, @Nullable Bundle savedInstanceState)", " void dispatchActivityPreStarted(@NonNull Activity activity)", " void dispatchActivityStarted(@NonNull Activity activity)", " void dispatchActivityPostStarted(@NonNull Activity activity)", " void dispatchActivityPreResumed(@NonNull Activity activity)", " void dispatchActivityResumed(@NonNull Activity activity)", " void dispatchActivityPostResumed(@NonNull Activity activity)", " void dispatchActivityPrePaused(@NonNull Activity activity)", " void dispatchActivityPaused(@NonNull Activity activity)", " void dispatchActivityPostPaused(@NonNull Activity activity)", " void dispatchActivityPreStopped(@NonNull Activity activity)", " void dispatchActivityStopped(@NonNull Activity activity)", " void dispatchActivityPostStopped(@NonNull Activity activity)", " void dispatchActivityPreSaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)", " void dispatchActivitySaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)", " void dispatchActivityPostSaveInstanceState(@NonNull Activity activity, @NonNull Bundle outState)", " void dispatchActivityPreDestroyed(@NonNull Activity activity)", " void dispatchActivityDestroyed(@NonNull Activity activity)", " void dispatchActivityPostDestroyed(@NonNull Activity activity)", " void dispatchActivityConfigurationChanged(@NonNull Activity activity)", "private Object[] collectActivityLifecycleCallbacks()", " void dispatchOnProvideAssistData(Activity activity, Bundle data)", "public AutofillManager.AutofillClient getAutofillClient()" ],
  "variableNames" : [ "TAG", "mActivityLifecycleCallbacks", "mAssistCallbacks", "mCallbacksController", "mLoadedApk" ]
}