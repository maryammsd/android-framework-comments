{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/LoaderManager.java",
  "packageName" : "android.app",
  "className" : "LoaderCallbacks",
  "comment" : "\n     * Callback interface for a client to interact with the manager.\n     *\n     * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">\n     *      Support Library</a> {@link androidx.loader.app.LoaderManager.LoaderCallbacks}\n     ",
  "links" : [ "androidx.loader.app.LoaderManager.LoaderCallbacks" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Loader<D> onCreateLoader(int id, Bundle args)",
    "returnType" : "Loader<D>",
    "comment" : "\n         * Instantiate and return a new Loader for the given ID.\n         *\n         * @param id The ID whose loader is to be created.\n         * @param args Any arguments supplied by the caller.\n         * @return Return a new Loader instance that is ready to start loading.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onLoadFinished(Loader<D> loader, D data)",
    "returnType" : "void",
    "comment" : "\n         * Called when a previously created loader has finished its load.  Note\n         * that normally an application is <em>not</em> allowed to commit fragment\n         * transactions while in this call, since it can happen after an\n         * activity's state is saved.  See {@link FragmentManager#beginTransaction()\n         * FragmentManager.openTransaction()} for further discussion on this.\n         * \n         * <p>This function is guaranteed to be called prior to the release of\n         * the last data that was supplied for this Loader.  At this point\n         * you should remove all use of the old data (since it will be released\n         * soon), but should not do your own release of the data since its Loader\n         * owns it and will take care of that.  The Loader will take care of\n         * management of its data so you don't have to.  In particular:\n         *\n         * <ul>\n         * <li> <p>The Loader will monitor for changes to the data, and report\n         * them to you through new calls here.  You should not monitor the\n         * data yourself.  For example, if the data is a {@link android.database.Cursor}\n         * and you place it in a {@link android.widget.CursorAdapter}, use\n         * the {@link android.widget.CursorAdapter#CursorAdapter(android.content.Context,\n         * android.database.Cursor, int)} constructor <em>without</em> passing\n         * in either {@link android.widget.CursorAdapter#FLAG_AUTO_REQUERY}\n         * or {@link android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER}\n         * (that is, use 0 for the flags argument).  This prevents the CursorAdapter\n         * from doing its own observing of the Cursor, which is not needed since\n         * when a change happens you will get a new Cursor throw another call\n         * here.\n         * <li> The Loader will release the data once it knows the application\n         * is no longer using it.  For example, if the data is\n         * a {@link android.database.Cursor} from a {@link android.content.CursorLoader},\n         * you should not call close() on it yourself.  If the Cursor is being placed in a\n         * {@link android.widget.CursorAdapter}, you should use the\n         * {@link android.widget.CursorAdapter#swapCursor(android.database.Cursor)}\n         * method so that the old Cursor is not closed.\n         * </ul>\n         *\n         * @param loader The Loader that has finished.\n         * @param data The data generated by the Loader.\n         ",
    "links" : [ "android.widget.CursorAdapter#FLAG_AUTO_REQUERY", "android.widget.CursorAdapter", "android.app.FragmentManager#beginTransaction()", "android.widget.CursorAdapter#swapCursor(android.database.Cursor)", "android.widget.CursorAdapter#CursorAdapter(android.content.Context", "android.widget.CursorAdapter#FLAG_REGISTER_CONTENT_OBSERVER", "android.content.CursorLoader", "android.database.Cursor" ]
  }, {
    "name" : "public void onLoaderReset(Loader<D> loader)",
    "returnType" : "void",
    "comment" : "\n         * Called when a previously created loader is being reset, and thus\n         * making its data unavailable.  The application should at this point\n         * remove any references it has to the Loader's data.\n         *\n         * @param loader The Loader that is being reset.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Loader<D> onCreateLoader(int id, Bundle args)", "public void onLoadFinished(Loader<D> loader, D data)", "public void onLoaderReset(Loader<D> loader)" ],
  "variableNames" : [ ]
}