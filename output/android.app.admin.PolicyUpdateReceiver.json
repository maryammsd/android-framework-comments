{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/PolicyUpdateReceiver.java",
  "packageName" : "android.app.admin",
  "className" : "PolicyUpdateReceiver",
  "comment" : "\n * Base class for implementing a policy update receiver. This class provides a convenience for\n * interpreting the raw intent actions ({@link #ACTION_DEVICE_POLICY_SET_RESULT} and\n * {@link #ACTION_DEVICE_POLICY_CHANGED}) that are sent by the system.\n *\n * <p>The callback methods happen on the main thread of the process. Thus, long-running\n * operations must be done on another thread.\n *\n * <p>When publishing your {@code PolicyUpdateReceiver} subclass as a receiver, it must\n * require the {@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission.\n *\n * <p>Admins can implement {@link DeviceAdminService} to ensure they receive all policy updates\n * (for policies they have set) via {@link #onPolicyChanged} by constantly being bound to by the\n * system. For more information see {@link DeviceAdminService}.\n ",
  "links" : [ "#ACTION_DEVICE_POLICY_CHANGED", "#ACTION_DEVICE_POLICY_SET_RESULT", "android.Manifest.permission#BIND_DEVICE_ADMIN", "#onPolicyChanged", "android.app.admin.DeviceAdminService" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_DEVICE_POLICY_SET_RESULT",
    "type" : "String",
    "comment" : "\n     * Action for a broadcast sent to admins to communicate back the result of setting a policy in\n     * {@link DevicePolicyManager}.\n     *\n     * <p>Admins wishing to receive these updates (via {@link #onPolicySetResult}) should include\n     * this action in the intent filter for their receiver in the manifest, the receiver\n     * must be protected by {@link android.Manifest.permission#BIND_DEVICE_ADMIN} to ensure that\n     * only the system can send updates.\n     *\n     * <p>Admins shouldn't implement {@link #onReceive} and should instead implement\n     * {@link #onPolicySetResult}.\n     ",
    "links" : [ "#onPolicySetResult", "#onReceive", "android.Manifest.permission#BIND_DEVICE_ADMIN", "android.app.admin.DevicePolicyManager" ]
  }, {
    "name" : "ACTION_DEVICE_POLICY_CHANGED",
    "type" : "String",
    "comment" : "\n     * Action for a broadcast sent to admins to communicate back a change in a policy they have\n     * previously set.\n     *\n     * <p>Admins wishing to receive these updates should include this action in the intent filter\n     * for their receiver in the manifest, the receiver must be protected by\n     * {@link android.Manifest.permission#BIND_DEVICE_ADMIN} to ensure that only the system can\n     * send updates.\n     *\n     * <p>Admins shouldn't implement {@link #onReceive} and should instead implement\n     * {@link #onPolicyChanged}.\n     ",
    "links" : [ "#onReceive", "android.Manifest.permission#BIND_DEVICE_ADMIN", "#onPolicyChanged" ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * A string extra holding the package name the policy applies to, (see\n     * {@link PolicyUpdateReceiver#onPolicyChanged} and\n     * {@link PolicyUpdateReceiver#onPolicySetResult})\n     ",
    "links" : [ "android.app.admin.PolicyUpdateReceiver#onPolicyChanged", "android.app.admin.PolicyUpdateReceiver#onPolicySetResult" ]
  }, {
    "name" : "EXTRA_PERMISSION_NAME",
    "type" : "String",
    "comment" : "\n     * A string extra holding the permission name the policy applies to, (see\n     * {@link PolicyUpdateReceiver#onPolicyChanged} and\n     * {@link PolicyUpdateReceiver#onPolicySetResult})\n     ",
    "links" : [ "android.app.admin.PolicyUpdateReceiver#onPolicyChanged", "android.app.admin.PolicyUpdateReceiver#onPolicySetResult" ]
  }, {
    "name" : "EXTRA_INTENT_FILTER",
    "type" : "String",
    "comment" : "\n     * An {@link android.content.IntentFilter} extra holding the intent filter the policy relates\n     * to, (see {@link PolicyUpdateReceiver#onPolicyChanged} and\n     * {@link PolicyUpdateReceiver#onPolicySetResult})\n     ",
    "links" : [ "android.content.IntentFilter", "android.app.admin.PolicyUpdateReceiver#onPolicyChanged", "android.app.admin.PolicyUpdateReceiver#onPolicySetResult" ]
  }, {
    "name" : "EXTRA_ACCOUNT_TYPE",
    "type" : "String",
    "comment" : "\n     * A string extra holding the account type this policy applies to, (see\n     * {@link PolicyUpdateReceiver#onPolicyChanged} and\n     * {@link PolicyUpdateReceiver#onPolicySetResult})\n     ",
    "links" : [ "android.app.admin.PolicyUpdateReceiver#onPolicyChanged", "android.app.admin.PolicyUpdateReceiver#onPolicySetResult" ]
  }, {
    "name" : "EXTRA_POLICY_KEY",
    "type" : "String",
    "comment" : "\n     * String extra containing the policy identifier.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_POLICY_BUNDLE_KEY",
    "type" : "String",
    "comment" : "\n     * Bundle extra containing additional information related to a policy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_POLICY_UPDATE_RESULT_KEY",
    "type" : "String",
    "comment" : "\n     * Int extra containing the {@link PolicyUpdateResult} code.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.admin.PolicyUpdateResult" ]
  }, {
    "name" : "EXTRA_POLICY_TARGET_USER_ID",
    "type" : "String",
    "comment" : "\n     * Int extra containing the target user this policy update applies to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void onReceive(Context context, Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Intercept standard policy update broadcasts. Implementations should not override this\n     * method and rely on the callbacks instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getPolicyKey(Intent intent)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static Bundle getPolicyExtraBundle(Intent intent)",
    "returnType" : "Bundle",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static PolicyUpdateResult getPolicyChangedReason(Intent intent)",
    "returnType" : "PolicyUpdateResult",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static TargetUser getTargetUser(Intent intent)",
    "returnType" : "TargetUser",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPolicySetResult(@NonNull Context context, @NonNull String policyIdentifier, @NonNull Bundle additionalPolicyParams, @NonNull TargetUser targetUser, @NonNull PolicyUpdateResult policyUpdateResult)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered after an admin has set a policy using one of the APIs in\n     * {@link DevicePolicyManager} to notify the admin whether it has been successful or not.\n     *\n     * <p>Admins wishing to receive this callback should include\n     * {@link PolicyUpdateReceiver#ACTION_DEVICE_POLICY_SET_RESULT} in the intent filter for their\n     * receiver in the manifest, the receiver must be protected by\n     * {@link android.Manifest.permission#BIND_DEVICE_ADMIN} to ensure that only the system can\n     * send updates.\n     *\n     * @param context the running context as per {@link #onReceive}\n     * @param policyIdentifier Key to identify which policy this callback relates to.\n     * @param additionalPolicyParams Bundle containing additional params that may be required to\n     *                               identify some of the policy\n     *                               (e.g. {@link PolicyUpdateReceiver#EXTRA_PACKAGE_NAME}\n     *                               and {@link PolicyUpdateReceiver#EXTRA_PERMISSION_NAME}).\n     *                               Each policy will document the required additional params if\n     *                               needed.\n     * @param targetUser The {@link TargetUser} which this policy relates to.\n     * @param policyUpdateResult Indicates whether the policy has been set successfully\n     *                           ({@link PolicyUpdateResult#RESULT_POLICY_SET}) or the reason it\n     *                           failed to apply (e.g.\n     *                           {@link PolicyUpdateResult#RESULT_FAILURE_CONFLICTING_ADMIN_POLICY},\n     *                           etc).\n     ",
    "links" : [ "android.app.admin.PolicyUpdateResult#RESULT_FAILURE_CONFLICTING_ADMIN_POLICY", "#onReceive", "android.app.admin.PolicyUpdateResult#RESULT_POLICY_SET", "android.app.admin.PolicyUpdateReceiver#EXTRA_PERMISSION_NAME", "android.Manifest.permission#BIND_DEVICE_ADMIN", "android.app.admin.DevicePolicyManager", "android.app.admin.PolicyUpdateReceiver#EXTRA_PACKAGE_NAME", "android.app.admin.PolicyUpdateReceiver#ACTION_DEVICE_POLICY_SET_RESULT", "android.app.admin.TargetUser" ]
  }, {
    "name" : "public void onPolicyChanged(@NonNull Context context, @NonNull String policyIdentifier, @NonNull Bundle additionalPolicyParams, @NonNull TargetUser targetUser, @NonNull PolicyUpdateResult policyUpdateResult)",
    "returnType" : "void",
    "comment" : "\n     * Callback triggered when a policy previously set by the admin has changed.\n     *\n     * <p>Admins wishing to receive this callback should include\n     * {@link PolicyUpdateReceiver#ACTION_DEVICE_POLICY_CHANGED} in the intent filter for their\n     * receiver in the manifest, the receiver must be protected by\n     * {@link android.Manifest.permission#BIND_DEVICE_ADMIN} to ensure that only the system can\n     * send updates.\n     *\n     * @param context the running context as per {@link #onReceive}\n     * @param policyIdentifier Key to identify which policy this callback relates to.\n     * @param additionalPolicyParams Bundle containing additional params that may be required to\n     *                               identify some of the policy\n     *                               (e.g. {@link PolicyUpdateReceiver#EXTRA_PACKAGE_NAME}\n     *                               and {@link PolicyUpdateReceiver#EXTRA_PERMISSION_NAME}).\n     *                               Each policy will document the required additional params if\n     *                               needed.\n     * @param targetUser The {@link TargetUser} which this policy relates to.\n     * @param policyUpdateResult Indicates the reason the policy value has changed\n     *                           (e.g. {@link PolicyUpdateResult#RESULT_POLICY_SET} if the policy\n     *                           has changed to the value set by the admin,\n     *                           {@link PolicyUpdateResult#RESULT_FAILURE_CONFLICTING_ADMIN_POLICY}\n     *                           if the policy has changed because another admin has set a\n     *                           conflicting policy, etc)\n     ",
    "links" : [ "android.app.admin.PolicyUpdateResult#RESULT_FAILURE_CONFLICTING_ADMIN_POLICY", "#onReceive", "android.app.admin.PolicyUpdateResult#RESULT_POLICY_SET", "android.app.admin.PolicyUpdateReceiver#EXTRA_PERMISSION_NAME", "android.Manifest.permission#BIND_DEVICE_ADMIN", "android.app.admin.PolicyUpdateReceiver#EXTRA_PACKAGE_NAME", "android.app.admin.PolicyUpdateReceiver#ACTION_DEVICE_POLICY_CHANGED", "android.app.admin.TargetUser" ]
  } ],
  "methodNames" : [ "public final void onReceive(Context context, Intent intent)", " static String getPolicyKey(Intent intent)", " static Bundle getPolicyExtraBundle(Intent intent)", " static PolicyUpdateResult getPolicyChangedReason(Intent intent)", " static TargetUser getTargetUser(Intent intent)", "public void onPolicySetResult(@NonNull Context context, @NonNull String policyIdentifier, @NonNull Bundle additionalPolicyParams, @NonNull TargetUser targetUser, @NonNull PolicyUpdateResult policyUpdateResult)", "public void onPolicyChanged(@NonNull Context context, @NonNull String policyIdentifier, @NonNull Bundle additionalPolicyParams, @NonNull TargetUser targetUser, @NonNull PolicyUpdateResult policyUpdateResult)" ],
  "variableNames" : [ "TAG", "ACTION_DEVICE_POLICY_SET_RESULT", "ACTION_DEVICE_POLICY_CHANGED", "EXTRA_PACKAGE_NAME", "EXTRA_PERMISSION_NAME", "EXTRA_INTENT_FILTER", "EXTRA_ACCOUNT_TYPE", "EXTRA_POLICY_KEY", "EXTRA_POLICY_BUNDLE_KEY", "EXTRA_POLICY_UPDATE_RESULT_KEY", "EXTRA_POLICY_TARGET_USER_ID" ]
}