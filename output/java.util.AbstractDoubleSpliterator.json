{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Spliterators.java",
  "packageName" : "java.util",
  "className" : "AbstractDoubleSpliterator",
  "comment" : "\n     * An abstract {@code Spliterator.OfDouble} that implements\n     * {@code trySplit} to permit limited parallelism.\n     *\n     * <p>To implement a spliterator an extending class need only\n     * implement {@link #tryAdvance(java.util.function.DoubleConsumer)\n     * tryAdvance}.  The extending class should override\n     * {@link #forEachRemaining(java.util.function.DoubleConsumer) forEachRemaining}\n     * if it can provide a more performant implementation.\n     *\n     * @apiNote\n     * This class is a useful aid for creating a spliterator when it is not\n     * possible or difficult to efficiently partition elements in a manner\n     * allowing balanced parallel computation.\n     *\n     * <p>An alternative to using this class, that also permits limited\n     * parallelism, is to create a spliterator from an iterator\n     * (see {@link #spliterator(java.util.PrimitiveIterator.OfDouble, long, int)}.\n     * Depending on the circumstances using an iterator may be easier or more\n     * convenient than extending this class. For example, if there is already an\n     * iterator available to use then there is no need to extend this class.\n     *\n     * @see #spliterator(java.util.PrimitiveIterator.OfDouble, long, int)\n     * @since 1.8\n     ",
  "links" : [ "#spliterator(java.util.PrimitiveIterator.OfDouble", "#forEachRemaining(java.util.function.DoubleConsumer)", "#tryAdvance(java.util.function.DoubleConsumer)" ],
  "variables" : [ {
    "name" : "MAX_BATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATCH_UNIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "characteristics",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "est",
    "type" : "long",
    "comment" : " size estimate",
    "links" : [ ]
  }, {
    "name" : "batch",
    "type" : "int",
    "comment" : " batch size for splits",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Spliterator.OfDouble trySplit()",
    "returnType" : "Spliterator.OfDouble",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * This implementation permits limited parallelism.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long estimateSize()",
    "returnType" : "long",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec\n         * This implementation returns the estimated size as reported when\n         * created and, if the estimate size is known, decreases in size when\n         * split.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int characteristics()",
    "returnType" : "int",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec\n         * This implementation returns the characteristics as reported when\n         * created.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Spliterator.OfDouble trySplit()", "public long estimateSize()", "public int characteristics()" ],
  "variableNames" : [ "MAX_BATCH", "BATCH_UNIT", "characteristics", "est", "batch" ]
}