{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "StreamItems",
  "comment" : "\n     * <p>\n     * Constants for the stream_items table, which contains social stream updates from\n     * the user's contact list.\n     * </p>\n     * <p>\n     * Only a certain number of stream items will ever be stored under a given raw contact.\n     * Users of this API can query {@link ContactsContract.StreamItems#CONTENT_LIMIT_URI} to\n     * determine this limit, and should restrict the number of items inserted in any given\n     * transaction correspondingly.  Insertion of more items beyond the limit will\n     * automatically lead to deletion of the oldest items, by {@link StreamItems#TIMESTAMP}.\n     * </p>\n     * <p>\n     * Access to the social stream through these URIs requires additional permissions beyond the\n     * read/write contact permissions required by the provider.  Querying for social stream data\n     * requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating social\n     * stream items requires android.permission.WRITE_SOCIAL_STREAM permission.\n     * </p>\n     * <h3>Account check</h3>\n     * <p>\n     * The content URIs to the insert, update and delete operations are required to have the account\n     * information matching that of the owning raw contact as query parameters, namely\n     * {@link RawContacts#ACCOUNT_TYPE} and {@link RawContacts#ACCOUNT_NAME}.\n     * {@link RawContacts#DATA_SET} isn't required.\n     * </p>\n     * <h3>Operations</h3>\n     * <dl>\n     * <dt><b>Insert</b></dt>\n     * <dd>\n     * <p>Social stream updates are always associated with a raw contact.  There are a couple\n     * of ways to insert these entries.\n     * <dl>\n     * <dt>Via the {@link RawContacts.StreamItems#CONTENT_DIRECTORY} sub-path of a raw contact:</dt>\n     * <dd>\n     * <pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItems.TEXT, \"Breakfasted at Tiffanys\");\n     * values.put(StreamItems.TIMESTAMP, timestamp);\n     * values.put(StreamItems.COMMENTS, \"3 people reshared this\");\n     * Uri.Builder builder = RawContacts.CONTENT_URI.buildUpon();\n     * ContentUris.appendId(builder, rawContactId);\n     * builder.appendEncodedPath(RawContacts.StreamItems.CONTENT_DIRECTORY);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * Uri streamItemUri = getContentResolver().insert(builder.build(), values);\n     * long streamItemId = ContentUris.parseId(streamItemUri);\n     * </pre>\n     * </dd>\n     * <dt>Via {@link StreamItems#CONTENT_URI}:</dt>\n     * <dd>\n     *<pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItems.RAW_CONTACT_ID, rawContactId);\n     * values.put(StreamItems.TEXT, \"Breakfasted at Tiffanys\");\n     * values.put(StreamItems.TIMESTAMP, timestamp);\n     * values.put(StreamItems.COMMENTS, \"3 people reshared this\");\n     * Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * Uri streamItemUri = getContentResolver().insert(builder.build(), values);\n     * long streamItemId = ContentUris.parseId(streamItemUri);\n     *</pre>\n     * </dd>\n     * </dl>\n     * </dd>\n     * </p>\n     * <p>\n     * Once a {@link StreamItems} entry has been inserted, photos associated with that\n     * social update can be inserted.  For example, after one of the insertions above,\n     * photos could be added to the stream item in one of the following ways:\n     * <dl>\n     * <dt>Via a URI including the stream item ID:</dt>\n     * <dd>\n     * <pre>\n     * values.clear();\n     * values.put(StreamItemPhotos.SORT_INDEX, 1);\n     * values.put(StreamItemPhotos.PHOTO, photoData);\n     * getContentResolver().insert(Uri.withAppendedPath(\n     *     ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId),\n     *     StreamItems.StreamItemPhotos.CONTENT_DIRECTORY), values);\n     * </pre>\n     * </dd>\n     * <dt>Via {@link ContactsContract.StreamItems#CONTENT_PHOTO_URI}:</dt>\n     * <dd>\n     * <pre>\n     * values.clear();\n     * values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n     * values.put(StreamItemPhotos.SORT_INDEX, 1);\n     * values.put(StreamItemPhotos.PHOTO, photoData);\n     * getContentResolver().insert(StreamItems.CONTENT_PHOTO_URI, values);\n     * </pre>\n     * <p>Note that this latter form allows the insertion of a stream item and its\n     * photos in a single transaction, by using {@link ContentProviderOperation} with\n     * back references to populate the stream item ID in the {@link ContentValues}.\n     * </dd>\n     * </dl>\n     * </p>\n     * </dd>\n     * <dt><b>Update</b></dt>\n     * <dd>Updates can be performed by appending the stream item ID to the\n     * {@link StreamItems#CONTENT_URI} URI.  Only social stream entries that were\n     * created by the calling package can be updated.</dd>\n     * <dt><b>Delete</b></dt>\n     * <dd>Deletes can be performed by appending the stream item ID to the\n     * {@link StreamItems#CONTENT_URI} URI.  Only social stream entries that were\n     * created by the calling package can be deleted.</dd>\n     * <dt><b>Query</b></dt>\n     * <dl>\n     * <dt>Finding all social stream updates for a given contact</dt>\n     * <dd>By Contact ID:\n     * <pre>\n     * Cursor c = getContentResolver().query(Uri.withAppendedPath(\n     *          ContentUris.withAppendedId(Contacts.CONTENT_URI, contactId),\n     *          Contacts.StreamItems.CONTENT_DIRECTORY),\n     *          null, null, null, null);\n     * </pre>\n     * </dd>\n     * <dd>By lookup key:\n     * <pre>\n     * Cursor c = getContentResolver().query(Contacts.CONTENT_URI.buildUpon()\n     *          .appendPath(lookupKey)\n     *          .appendPath(Contacts.StreamItems.CONTENT_DIRECTORY).build(),\n     *          null, null, null, null);\n     * </pre>\n     * </dd>\n     * <dt>Finding all social stream updates for a given raw contact</dt>\n     * <dd>\n     * <pre>\n     * Cursor c = getContentResolver().query(Uri.withAppendedPath(\n     *          ContentUris.withAppendedId(RawContacts.CONTENT_URI, rawContactId),\n     *          RawContacts.StreamItems.CONTENT_DIRECTORY)),\n     *          null, null, null, null);\n     * </pre>\n     * </dd>\n     * <dt>Querying for a specific stream item by ID</dt>\n     * <dd>\n     * <pre>\n     * Cursor c = getContentResolver().query(ContentUris.withAppendedId(\n     *          StreamItems.CONTENT_URI, streamItemId),\n     *          null, null, null, null);\n     * </pre>\n     * </dd>\n     * </dl>\n     *\n     * @deprecated - Do not use. This will not be supported in the future. In the future,\n     * cursors returned from related queries will be empty.\n     *\n     * @removed\n     ",
  "links" : [ "android.content.ContentProviderOperation", "ContactsContract.StreamItems#CONTENT_LIMIT_URI", "StreamItems", "#ACCOUNT_TYPE", "#ACCOUNT_NAME", "#DATA_SET", "#TIMESTAMP", "android.content.ContentValues", "#CONTENT_URI", "RawContacts.StreamItems#CONTENT_DIRECTORY", "ContactsContract.StreamItems#CONTENT_PHOTO_URI" ],
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table, which handles social network stream\n         * updates for the user's contacts.\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_PHOTO_URI",
    "type" : "Uri",
    "comment" : "\n         * <p>\n         * A content:// style URI for the photos stored in a sub-table underneath\n         * stream items.  This is only used for inserts, and updates - queries and deletes\n         * for photos should be performed by appending\n         * {@link StreamItems.StreamItemPhotos#CONTENT_DIRECTORY} path to URIs for a\n         * specific stream item.\n         * </p>\n         * <p>\n         * When using this URI, the stream item ID for the photo(s) must be identified\n         * in the {@link ContentValues} passed in.\n         * </p>\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ "android.content.ContentValues", "StreamItems.StreamItemPhotos#CONTENT_DIRECTORY" ]
  }, {
    "name" : "CONTENT_LIMIT_URI",
    "type" : "Uri",
    "comment" : "\n         * This URI allows the caller to query for the maximum number of stream items\n         * that will be stored under any single raw contact.\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a directory of stream items.\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of a single stream item.\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ ]
  }, {
    "name" : "MAX_ITEMS",
    "type" : "String",
    "comment" : "\n         * Queries to {@link ContactsContract.StreamItems#CONTENT_LIMIT_URI} will\n         * contain this column, with the value indicating the maximum number of\n         * stream items that will be stored under any single raw contact.\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ "ContactsContract.StreamItems#CONTENT_LIMIT_URI" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "CONTENT_URI", "CONTENT_PHOTO_URI", "CONTENT_LIMIT_URI", "CONTENT_TYPE", "CONTENT_ITEM_TYPE", "MAX_ITEMS" ]
}