{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/RoutingSessionInfo.java",
  "packageName" : "android.media",
  "className" : "RoutingSessionInfo",
  "comment" : "\n * Describes a routing session which is created when a media route is selected.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Creator<RoutingSessionInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_GROUP_ROUTE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_VOLUME_HANDLING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_REASON_FALLBACK",
    "type" : "int",
    "comment" : "\n     * Indicates that the transfer happened by the default logic without explicit system's or user's\n     * request.\n     *\n     * <p>For example, an automatically connected Bluetooth device will have this transfer reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_REASON_SYSTEM_REQUEST",
    "type" : "int",
    "comment" : " Indicates that the transfer happened from within a privileged application. ",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_REASON_APP",
    "type" : "int",
    "comment" : " Indicates that the transfer happened from a non-privileged app. ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnerPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectedRoutes",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectableRoutes",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeselectableRoutes",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferableRoutes",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumeHandling",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumeMax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolume",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mControlHints",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSystemSession",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferInitiatorUserHandle",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferInitiatorPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Bundle updateVolumeHandlingInHints(@Nullable Bundle controlHints, int volumeHandling)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int defineVolumeHandling(boolean isSystemSession, int volumeHandling, List<String> selectedRoutes, boolean volumeAdjustmentForRemoteGroupSessions)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String ensureString(@Nullable String str)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<T> ensureList(@Nullable List<? extends T> list)",
    "returnType" : "List<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the id of the session. The sessions which are given by {@link MediaRouter2} will have\n     * unique IDs.\n     * <p>\n     * In order to ensure uniqueness in {@link MediaRouter2} side, the value of this method\n     * can be different from what was set in {@link MediaRoute2ProviderService}.\n     *\n     * @see Builder#Builder(String, String)\n     ",
    "links" : [ "android.media.MediaRoute2ProviderService", "android.media.MediaRouter2" ]
  }, {
    "name" : "public CharSequence getName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the user-visible name of the session. It may be {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginalId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the original id set by {@link Builder#Builder(String, String)}.\n     * @hide\n     ",
    "links" : [ "#Builder(String" ]
  }, {
    "name" : "public String getOwnerPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the package name of the session owner.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getClientPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the client package name of the session\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProviderId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the provider id of the session.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSelectedRoutes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the list of IDs of selected routes for the session. It shouldn't be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSelectableRoutes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the list of IDs of selectable routes for the session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getDeselectableRoutes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the list of IDs of deselectable routes for the session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getTransferableRoutes()",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the list of IDs of transferable routes for the session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVolumeHandling()",
    "returnType" : "int",
    "comment" : "\n     * Gets the information about how volume is handled on the session.\n     *\n     * @return {@link MediaRoute2Info#PLAYBACK_VOLUME_FIXED} or\n     * {@link MediaRoute2Info#PLAYBACK_VOLUME_VARIABLE}.\n     ",
    "links" : [ "android.media.MediaRoute2Info#PLAYBACK_VOLUME_VARIABLE", "android.media.MediaRoute2Info#PLAYBACK_VOLUME_FIXED" ]
  }, {
    "name" : "public int getVolumeMax()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum volume of the session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVolume()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current volume of the session.\n     * <p>\n     * When it's available, it represents the volume of routing session, which is a group\n     * of selected routes. To get the volume of each route, use {@link MediaRoute2Info#getVolume()}.\n     * </p>\n     * @see MediaRoute2Info#getVolume()\n     ",
    "links" : [ "android.media.MediaRoute2Info#getVolume()" ]
  }, {
    "name" : "public Bundle getControlHints()",
    "returnType" : "Bundle",
    "comment" : "\n     * Gets the control hints\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemSession()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this session is in system media route provider.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTransferReason()",
    "returnType" : "int",
    "comment" : " Returns the transfer reason for this routing session. ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getTransferInitiatorUserHandle()",
    "returnType" : "UserHandle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getTransferInitiatorPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter pw, @NonNull String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Dumps current state of the instance. Use with {@code dumpsys}.\n     *\n     * See {@link android.os.Binder#dump(FileDescriptor, PrintWriter, String[])}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Binder#dump(FileDescriptor" ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<String> convertToUniqueRouteIds(@NonNull List<String> routeIds)",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Bundle updateVolumeHandlingInHints(@Nullable Bundle controlHints, int volumeHandling)", "private static int defineVolumeHandling(boolean isSystemSession, int volumeHandling, List<String> selectedRoutes, boolean volumeAdjustmentForRemoteGroupSessions)", "private static String ensureString(@Nullable String str)", "private static List<T> ensureList(@Nullable List<? extends T> list)", "public String getId()", "public CharSequence getName()", "public String getOriginalId()", "public String getOwnerPackageName()", "public String getClientPackageName()", "public String getProviderId()", "public List<String> getSelectedRoutes()", "public List<String> getSelectableRoutes()", "public List<String> getDeselectableRoutes()", "public List<String> getTransferableRoutes()", "public int getVolumeHandling()", "public int getVolumeMax()", "public int getVolume()", "public Bundle getControlHints()", "public boolean isSystemSession()", "public int getTransferReason()", "public UserHandle getTransferInitiatorUserHandle()", "public String getTransferInitiatorPackageName()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public void dump(@NonNull PrintWriter pw, @NonNull String prefix)", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public String toString()", "private List<String> convertToUniqueRouteIds(@NonNull List<String> routeIds)" ],
  "variableNames" : [ "CREATOR", "TAG", "KEY_GROUP_ROUTE", "KEY_VOLUME_HANDLING", "TRANSFER_REASON_FALLBACK", "TRANSFER_REASON_SYSTEM_REQUEST", "TRANSFER_REASON_APP", "mId", "mName", "mOwnerPackageName", "mClientPackageName", "mProviderId", "mSelectedRoutes", "mSelectableRoutes", "mDeselectableRoutes", "mTransferableRoutes", "mVolumeHandling", "mVolumeMax", "mVolume", "mControlHints", "mIsSystemSession", "mTransferReason", "mTransferInitiatorUserHandle", "mTransferInitiatorPackageName" ]
}