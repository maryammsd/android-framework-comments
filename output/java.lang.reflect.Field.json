{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Field.java",
  "packageName" : "java.lang.reflect",
  "className" : "Field",
  "comment" : "\n * A {@code Field} provides information about, and dynamic access to, a\n * single field of a class or an interface.  The reflected field may\n * be a class (static) field or an instance field.\n *\n * <p>A {@code Field} permits widening conversions to occur during a get or\n * set access operation, but throws an {@code IllegalArgumentException} if a\n * narrowing conversion would occur.\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getFields()\n * @see java.lang.Class#getField(String)\n * @see java.lang.Class#getDeclaredFields()\n * @see java.lang.Class#getDeclaredField(String)\n *\n * @author Kenneth Russell\n * @author Nakul Saraiya\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "accessFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "declaringClass",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "artFieldIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "offset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Class<?> getDeclaringClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the {@code Class} object representing the class or interface\n     * that declares the field represented by this {@code Field} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the field represented by this {@code Field} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private native String getNameInternal()",
    "returnType" : "String",
    "comment" : " Android-added: getName() implemented differently.",
    "links" : [ ]
  }, {
    "name" : "public int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the Java language modifiers for the field represented\n     * by this {@code Field} object, as an integer. The {@code Modifier} class should\n     * be used to decode the modifiers.\n     *\n     * @see Modifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnumConstant()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this field represents an element of\n     * an enumerated type; returns {@code false} otherwise.\n     *\n     * @return {@code true} if and only if this field represents an element of\n     * an enumerated type.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSynthetic()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this field is a synthetic\n     * field; returns {@code false} otherwise.\n     *\n     * @return true if and only if this field is a synthetic\n     * field as defined by the Java Language Specification.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getType()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns a {@code Class} object that identifies the\n     * declared type for the field represented by this\n     * {@code Field} object.\n     *\n     * @return a {@code Class} object identifying the declared\n     * type of the field represented by this object\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type getGenericType()",
    "returnType" : "Type",
    "comment" : "\n     * Returns a {@code Type} object that represents the declared type for\n     * the field represented by this {@code Field} object.\n     *\n     * <p>If the {@code Type} is a parameterized type, the\n     * {@code Type} object returned must accurately reflect the\n     * actual type parameters used in the source code.\n     *\n     * <p>If the type of the underlying field is a type variable or a\n     * parameterized type, it is created. Otherwise, it is resolved.\n     *\n     * @return a {@code Type} object that represents the declared type for\n     *     the field represented by this {@code Field} object\n     * @throws GenericSignatureFormatError if the generic field\n     *     signature does not conform to the format specified in\n     *     <cite>The Java&trade; Virtual Machine Specification</cite>\n     * @throws TypeNotPresentException if the generic type\n     *     signature of the underlying field refers to a non-existent\n     *     type declaration\n     * @throws MalformedParameterizedTypeException if the generic\n     *     signature of the underlying field refers to a parameterized type\n     *     that cannot be instantiated for any reason\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " String getSignatureAttribute()",
    "returnType" : "String",
    "comment" : " BEGIN Android-added: getGenericType() implemented differently.",
    "links" : [ ]
  }, {
    "name" : "private native String[] getSignatureAnnotation()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code Field} against the specified object.  Returns\n     * true if the objects are the same.  Two {@code Field} objects are the same if\n     * they were declared by the same class and have the same name\n     * and type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this {@code Field}.  This is computed as the\n     * exclusive-or of the hashcodes for the underlying field's\n     * declaring class name and its name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Field}.  The format is\n     * the access modifiers for the field, if any, followed\n     * by the field type, followed by a space, followed by\n     * the fully-qualified name of the class declaring the field,\n     * followed by a period, followed by the name of the field.\n     * For example:\n     * <pre>\n     *    public static final int java.lang.Thread.MIN_PRIORITY\n     *    private int java.io.FileDescriptor.fd\n     * </pre>\n     *\n     * <p>The modifiers are placed in canonical order as specified by\n     * \"The Java Language Specification\".  This is {@code public},\n     * {@code protected} or {@code private} first, and then other\n     * modifiers in the following order: {@code static}, {@code final},\n     * {@code transient}, {@code volatile}.\n     *\n     * @return a string describing this {@code Field}\n     * @jls 8.3.1 Field Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toGenericString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Field}, including\n     * its generic type.  The format is the access modifiers for the\n     * field, if any, followed by the generic field type, followed by\n     * a space, followed by the fully-qualified name of the class\n     * declaring the field, followed by a period, followed by the name\n     * of the field.\n     *\n     * <p>The modifiers are placed in canonical order as specified by\n     * \"The Java Language Specification\".  This is {@code public},\n     * {@code protected} or {@code private} first, and then other\n     * modifiers in the following order: {@code static}, {@code final},\n     * {@code transient}, {@code volatile}.\n     *\n     * @return a string describing this {@code Field}, including\n     * its generic type\n     *\n     * @since 1.5\n     * @jls 8.3.1 Field Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "public native Object get(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value of the field represented by this {@code Field}, on\n     * the specified object. The value is automatically wrapped in an\n     * object if it has a primitive type.\n     *\n     * <p>The underlying field's value is obtained as follows:\n     *\n     * <p>If the underlying field is a static field, the {@code obj} argument\n     * is ignored; it may be null.\n     *\n     * <p>Otherwise, the underlying field is an instance field.  If the\n     * specified {@code obj} argument is null, the method throws a\n     * {@code NullPointerException}. If the specified object is not an\n     * instance of the class or interface declaring the underlying\n     * field, the method throws an {@code IllegalArgumentException}.\n     *\n     * <p>If this {@code Field} object is enforcing Java language access control, and\n     * the underlying field is inaccessible, the method throws an\n     * {@code IllegalAccessException}.\n     * If the underlying field is static, the class that declared the\n     * field is initialized if it has not already been initialized.\n     *\n     * <p>Otherwise, the value is retrieved from the underlying instance\n     * or static field.  If the field has a primitive type, the value\n     * is wrapped in an object before being returned, otherwise it is\n     * returned as is.\n     *\n     * <p>If the field is hidden in the type of {@code obj},\n     * the field's value is obtained according to the preceding rules.\n     *\n     * @param obj object from which the represented field's value is\n     * to be extracted\n     * @return the value of the represented field in object\n     * {@code obj}; primitive values are wrapped in an appropriate\n     * object before being returned\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof).\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native boolean getBoolean(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the value of a static or instance {@code boolean} field.\n     *\n     * @param obj the object to extract the {@code boolean} value\n     * from\n     * @return the value of the {@code boolean} field\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code boolean} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native byte getByte(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "byte",
    "comment" : "\n     * Gets the value of a static or instance {@code byte} field.\n     *\n     * @param obj the object to extract the {@code byte} value\n     * from\n     * @return the value of the {@code byte} field\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code byte} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native char getChar(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "char",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code char} or of another primitive type convertible to\n     * type {@code char} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code char} value\n     * from\n     * @return the value of the field converted to type {@code char}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code char} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native short getShort(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "short",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code short} or of another primitive type convertible to\n     * type {@code short} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code short} value\n     * from\n     * @return the value of the field converted to type {@code short}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code short} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native int getInt(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "int",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code int} or of another primitive type convertible to\n     * type {@code int} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code int} value\n     * from\n     * @return the value of the field converted to type {@code int}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code int} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native long getLong(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "long",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code long} or of another primitive type convertible to\n     * type {@code long} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code long} value\n     * from\n     * @return the value of the field converted to type {@code long}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code long} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native float getFloat(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "float",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code float} or of another primitive type convertible to\n     * type {@code float} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code float} value\n     * from\n     * @return the value of the field converted to type {@code float}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code float} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native double getDouble(Object obj) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "double",
    "comment" : "\n     * Gets the value of a static or instance field of type\n     * {@code double} or of another primitive type convertible to\n     * type {@code double} via a widening conversion.\n     *\n     * @param obj the object to extract the {@code double} value\n     * from\n     * @return the value of the field converted to type {@code double}\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is inaccessible.\n     * @exception IllegalArgumentException  if the specified object is not\n     *              an instance of the class or interface declaring the\n     *              underlying field (or a subclass or implementor\n     *              thereof), or if the field value cannot be\n     *              converted to the type {@code double} by a\n     *              widening conversion.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#get\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the field represented by this {@code Field} object on the\n     * specified object argument to the specified new value. The new\n     * value is automatically unwrapped if the underlying field has a\n     * primitive type.\n     *\n     * <p>The operation proceeds as follows:\n     *\n     * <p>If the underlying field is static, the {@code obj} argument is\n     * ignored; it may be null.\n     *\n     * <p>Otherwise the underlying field is an instance field.  If the\n     * specified object argument is null, the method throws a\n     * {@code NullPointerException}.  If the specified object argument is not\n     * an instance of the class or interface declaring the underlying\n     * field, the method throws an {@code IllegalArgumentException}.\n     *\n     * <p>If this {@code Field} object is enforcing Java language access control, and\n     * the underlying field is inaccessible, the method throws an\n     * {@code IllegalAccessException}.\n     *\n     * <p>If the underlying field is final, this {@code Field} object has\n     * <em>write</em> access if and only if the following conditions are met:\n     * <ul>\n     * <li>{@link #setAccessible(boolean) setAccessible(true)} has succeeded for\n     *     this {@code Field} object;</li>\n     * <li>the field is non-static; and</li>\n     * <li>the field's declaring class is not a {@linkplain Class#isRecord()\n     *     record class}.</li>\n     * </ul>\n     * If any of the above checks is not met, this method throws an\n     * {@code IllegalAccessException}.\n     *\n     * <p> Setting a final field in this way\n     * is meaningful only during deserialization or reconstruction of\n     * instances of classes with blank final fields, before they are\n     * made available for access by other parts of a program. Use in\n     * any other context may have unpredictable effects, including cases\n     * in which other parts of a program continue to use the original\n     * value of this field.\n     *\n     * <p>If the underlying field is of a primitive type, an unwrapping\n     * conversion is attempted to convert the new value to a value of\n     * a primitive type.  If this attempt fails, the method throws an\n     * {@code IllegalArgumentException}.\n     *\n     * <p>If, after possible unwrapping, the new value cannot be\n     * converted to the type of the underlying field by an identity or\n     * widening conversion, the method throws an\n     * {@code IllegalArgumentException}.\n     *\n     * <p>If the underlying field is static, the class that declared the\n     * field is initialized if it has not already been initialized.\n     *\n     * <p>The field is set to the possibly unwrapped and widened new value.\n     *\n     * <p>If the field is hidden in the type of {@code obj},\n     * the field's value is set according to the preceding rules.\n     *\n     * @param obj the object whose field should be modified\n     * @param value the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     ",
    "links" : [ "#setAccessible(boolean)" ]
  }, {
    "name" : "public native void setBoolean(Object obj, boolean z) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code boolean} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, zObj)},\n     * where {@code zObj} is a {@code Boolean} object and\n     * {@code zObj.booleanValue() == z}.\n     *\n     * @param obj the object whose field should be modified\n     * @param z   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setByte(Object obj, byte b) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code byte} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, bObj)},\n     * where {@code bObj} is a {@code Byte} object and\n     * {@code bObj.byteValue() == b}.\n     *\n     * @param obj the object whose field should be modified\n     * @param b   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setChar(Object obj, char c) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code char} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, cObj)},\n     * where {@code cObj} is a {@code Character} object and\n     * {@code cObj.charValue() == c}.\n     *\n     * @param obj the object whose field should be modified\n     * @param c   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setShort(Object obj, short s) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code short} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, sObj)},\n     * where {@code sObj} is a {@code Short} object and\n     * {@code sObj.shortValue() == s}.\n     *\n     * @param obj the object whose field should be modified\n     * @param s   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setInt(Object obj, int i) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as an {@code int} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, iObj)},\n     * where {@code iObj} is a {@code Integer} object and\n     * {@code iObj.intValue() == i}.\n     *\n     * @param obj the object whose field should be modified\n     * @param i   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setLong(Object obj, long l) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code long} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, lObj)},\n     * where {@code lObj} is a {@code Long} object and\n     * {@code lObj.longValue() == l}.\n     *\n     * @param obj the object whose field should be modified\n     * @param l   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setFloat(Object obj, float f) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code float} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, fObj)},\n     * where {@code fObj} is a {@code Float} object and\n     * {@code fObj.floatValue() == f}.\n     *\n     * @param obj the object whose field should be modified\n     * @param f   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setDouble(Object obj, double d) throws IllegalArgumentException, IllegalAccessException",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of a field as a {@code double} on the specified object.\n     * This method is equivalent to\n     * {@code set(obj, dObj)},\n     * where {@code dObj} is a {@code Double} object and\n     * {@code dObj.doubleValue() == d}.\n     *\n     * @param obj the object whose field should be modified\n     * @param d   the new value for the field of {@code obj}\n     * being modified\n     *\n     * @exception IllegalAccessException    if this {@code Field} object\n     *              is enforcing Java language access control and the underlying\n     *              field is either inaccessible or final.\n     * @exception IllegalArgumentException  if the specified object is not an\n     *              instance of the class or interface declaring the underlying\n     *              field (or a subclass or implementor thereof),\n     *              or if an unwrapping conversion fails.\n     * @exception NullPointerException      if the specified object is null\n     *              and the field is an instance field.\n     * @exception ExceptionInInitializerError if the initialization provoked\n     *              by this method fails.\n     * @see       Field#set\n     ",
    "links" : [ ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "private native A getAnnotationNative(Class<A> annotationType)",
    "returnType" : "A",
    "comment" : " Android-added: getAnnotation(Class) implemented differently.",
    "links" : [ ]
  }, {
    "name" : "public T[] getAnnotationsByType(Class<T> annotationClass)",
    "returnType" : "T[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAnnotationPresent(Class<? extends Annotation> annotationType)",
    "returnType" : "boolean",
    "comment" : " BEGIN Android-added: isAnnotationPresent(Class) overridden in Field.",
    "links" : [ ]
  }, {
    "name" : "private native boolean isAnnotationPresentNative(Class<? extends Annotation> annotationType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public native Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset of the field within an instance, or for static fields, the class.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public native long getArtField()",
    "returnType" : "long",
    "comment" : "\n     * @hide - export for use by {@code java.lang.invoke.*}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Class<?> getDeclaringClass()", "public String getName()", "private native String getNameInternal()", "public int getModifiers()", "public boolean isEnumConstant()", "public boolean isSynthetic()", "public Class<?> getType()", "public Type getGenericType()", " String getSignatureAttribute()", "private native String[] getSignatureAnnotation()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", "public String toGenericString()", "public native Object get(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native boolean getBoolean(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native byte getByte(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native char getChar(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native short getShort(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native int getInt(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native long getLong(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native float getFloat(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native double getDouble(Object obj) throws IllegalArgumentException, IllegalAccessException", "public native void set(Object obj, Object value) throws IllegalArgumentException, IllegalAccessException", "public native void setBoolean(Object obj, boolean z) throws IllegalArgumentException, IllegalAccessException", "public native void setByte(Object obj, byte b) throws IllegalArgumentException, IllegalAccessException", "public native void setChar(Object obj, char c) throws IllegalArgumentException, IllegalAccessException", "public native void setShort(Object obj, short s) throws IllegalArgumentException, IllegalAccessException", "public native void setInt(Object obj, int i) throws IllegalArgumentException, IllegalAccessException", "public native void setLong(Object obj, long l) throws IllegalArgumentException, IllegalAccessException", "public native void setFloat(Object obj, float f) throws IllegalArgumentException, IllegalAccessException", "public native void setDouble(Object obj, double d) throws IllegalArgumentException, IllegalAccessException", "public T getAnnotation(Class<T> annotationClass)", "private native A getAnnotationNative(Class<A> annotationType)", "public T[] getAnnotationsByType(Class<T> annotationClass)", "public boolean isAnnotationPresent(Class<? extends Annotation> annotationType)", "private native boolean isAnnotationPresentNative(Class<? extends Annotation> annotationType)", "public native Annotation[] getDeclaredAnnotations()", "public int getOffset()", "public native long getArtField()" ],
  "variableNames" : [ "accessFlags", "declaringClass", "artFieldIndex", "offset", "type" ]
}