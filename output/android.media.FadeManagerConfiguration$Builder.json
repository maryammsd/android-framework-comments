{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/FadeManagerConfiguration.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link FadeManagerConfiguration} objects.\n     *\n     * <p><b>Notes:</b>\n     * <ul>\n     *     <li>When fade state is set to {@link #FADE_STATE_ENABLED_DEFAULT}, the builder expects at\n     *     least one valid usage to be set/added. Failure to do so will result in an exception\n     *     during {@link #build()}</li>\n     *     <li>Every usage added to the fadeable list should have corresponding volume shaper\n     *     configs defined. This can be achieved by setting either the duration or volume shaper\n     *     config through {@link #setFadeOutDurationForUsage(int, long)} or\n     *     {@link #setFadeOutVolumeShaperConfigForUsage(int, VolumeShaper.Configuration)}</li>\n     *     <li> It is recommended to set volume shaper configurations individually for fade out and\n     *     fade in</li>\n     *     <li>For any incomplete volume shaper configurations, a volume shaper configuration will\n     *     be created using either the default fade durations or the ones provided as part of the\n     *     {@link #Builder(long, long)}</li>\n     *     <li>Additional volume shaper configs can also configured for a given usage\n     *     with additional attributes like content-type in order to achieve finer fade controls.\n     *     See:\n     *     {@link #setFadeOutVolumeShaperConfigForAudioAttributes(AudioAttributes,\n     *     VolumeShaper.Configuration)} and\n     *     {@link #setFadeInVolumeShaperConfigForAudioAttributes(AudioAttributes,\n     *     VolumeShaper.Configuration)} </li>\n     *     </ul>\n     *\n     ",
  "links" : [ "#build()", "#setFadeInVolumeShaperConfigForAudioAttributes(AudioAttributes", "#FADE_STATE_ENABLED_DEFAULT", "android.media.FadeManagerConfiguration", "#Builder(long", "#setFadeOutDurationForUsage(int", "#setFadeOutVolumeShaperConfigForUsage(int", "#setFadeOutVolumeShaperConfigForAudioAttributes(AudioAttributes" ],
  "variables" : [ {
    "name" : "INVALID_INDEX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_BUILDER_USED_FIELD_SET",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_FADEABLE_USAGES_FIELD_SET",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_UNFADEABLE_CONTENT_TYPE_FIELD_SET",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DELAY_FADE_IN_OFFENDERS_MS",
    "type" : "long",
    "comment" : "\n         * delay after which a faded out player will be faded back in. This will be heard by the\n         * user only in the case of unmuting players that didn't respect audio focus and didn't\n         * stop/pause when their app lost focus.\n         * This is the amount of time between the app being notified of the focus loss\n         * (when its muted by the fade out), and the time fade in (to unmute) starts\n         ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_UNFADEABLE_PLAYER_TYPES",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_UNFADEABLE_CONTENT_TYPES",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FADEABLE_USAGES",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeInDelayForOffendersMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeOutDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeInDurationMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuilderFieldsSet",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsageToFadeWrapperMap",
    "type" : "SparseArray<FadeVolumeShaperConfigsWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttrToFadeWrapperMap",
    "type" : "ArrayMap<AudioAttributes, FadeVolumeShaperConfigsWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFadeableUsages",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnfadeableContentTypes",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnfadeablePlayerTypes",
    "type" : "IntArray",
    "comment" : " Player types are not yet configurable",
    "links" : [ ]
  }, {
    "name" : "mUnfadeableUids",
    "type" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnfadeableAudioAttributes",
    "type" : "List<AudioAttributes>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setFadeState(@FadeStateEnum int state)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the overall fade state\n         *\n         * @param state one of the {@link #FADE_STATE_DISABLED} or\n         *     {@link #FADE_STATE_ENABLED_DEFAULT} states\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the fade state is invalid\n         * @see #getFadeState()\n         ",
    "links" : [ "#FADE_STATE_ENABLED_DEFAULT", "#FADE_STATE_DISABLED" ]
  }, {
    "name" : "public Builder setFadeOutVolumeShaperConfigForUsage(@AudioAttributes.AttributeUsage int usage, @Nullable VolumeShaper.Configuration fadeOutVShaperConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link android.media.VolumeShaper.Configuration} used to fade out players with\n         * {@link android.media.AudioAttributes usage}\n         * <p>\n         * This method accepts {@code null} for volume shaper config to clear a previously set\n         * configuration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)})\n         *\n         * @param usage the {@link android.media.AudioAttributes usage} of target player\n         * @param fadeOutVShaperConfig the {@link android.media.VolumeShaper.Configuration} used\n         *     to fade out players with usage\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the usage is invalid\n         * @see #getFadeOutVolumeShaperConfigForUsage(int)\n         ",
    "links" : [ "android.media.VolumeShaper.Configuration", "android.media.AudioAttributes", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeInVolumeShaperConfigForUsage(@AudioAttributes.AttributeUsage int usage, @Nullable VolumeShaper.Configuration fadeInVShaperConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link android.media.VolumeShaper.Configuration} used to fade in players with\n         * {@link android.media.AudioAttributes usage}\n         * <p>\n         * This method accepts {@code null} for volume shaper config to clear a previously set\n         * configuration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)})\n         *\n         * @param usage the {@link android.media.AudioAttributes usage}\n         * @param fadeInVShaperConfig the {@link android.media.VolumeShaper.Configuration} used\n         *     to fade in players with usage\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the usage is invalid\n         * @see #getFadeInVolumeShaperConfigForUsage(int)\n         ",
    "links" : [ "android.media.VolumeShaper.Configuration", "android.media.AudioAttributes", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeOutDurationForUsage(@AudioAttributes.AttributeUsage int usage, @IntRange(from = 0) @DurationMillisLong long fadeOutDurationMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the duration used for fading out players with\n         * {@link android.media.AudioAttributes usage}\n         * <p>\n         * A Volume shaper configuration is generated with the provided duration and default\n         * volume curve definitions. This config is then used to fade out players with given usage.\n         * <p>\n         * In order to clear previously set duration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)}), this method accepts\n         * {@link #DURATION_NOT_SET} and sets the corresponding fade out volume shaper config to\n         * {@code null}\n         *\n         * @param usage the {@link android.media.AudioAttributes usage} of target player\n         * @param fadeOutDurationMillis positive duration in milliseconds or\n         *     {@link #DURATION_NOT_SET}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the fade out duration is non-positive with the\n         *     exception of {@link #DURATION_NOT_SET}\n         * @see #setFadeOutVolumeShaperConfigForUsage(int, VolumeShaper.Configuration)\n         * @see #getFadeOutDurationForUsage(int)\n         ",
    "links" : [ "android.media.AudioAttributes", "#DURATION_NOT_SET", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeInDurationForUsage(@AudioAttributes.AttributeUsage int usage, @IntRange(from = 0) @DurationMillisLong long fadeInDurationMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the duration used for fading in players with\n         * {@link android.media.AudioAttributes usage}\n         * <p>\n         * A Volume shaper configuration is generated with the provided duration and default\n         * volume curve definitions. This config is then used to fade in players with given usage.\n         * <p>\n         * <b>Note: </b>In order to clear previously set duration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)}), this method accepts\n         * {@link #DURATION_NOT_SET} and sets the corresponding fade in volume shaper config to\n         * {@code null}\n         *\n         * @param usage the {@link android.media.AudioAttributes usage} of target player\n         * @param fadeInDurationMillis positive duration in milliseconds or\n         *     {@link #DURATION_NOT_SET}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the fade in duration is non-positive with the\n         *     exception of {@link #DURATION_NOT_SET}\n         * @see #setFadeInVolumeShaperConfigForUsage(int, VolumeShaper.Configuration)\n         * @see #getFadeInDurationForUsage(int)\n         ",
    "links" : [ "android.media.AudioAttributes", "#DURATION_NOT_SET", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeOutVolumeShaperConfigForAudioAttributes(@NonNull AudioAttributes audioAttributes, @Nullable VolumeShaper.Configuration fadeOutVShaperConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link android.media.VolumeShaper.Configuration} used to fade out players with\n         * {@link android.media.AudioAttributes}\n         * <p>\n         * This method accepts {@code null} for volume shaper config to clear a previously set\n         * configuration (example, set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)})\n         *\n         * @param audioAttributes the {@link android.media.AudioAttributes}\n         * @param fadeOutVShaperConfig the {@link android.media.VolumeShaper.Configuration} used to\n         *     fade out players with audio attribute\n         * @return the same Builder instance\n         * @see #getFadeOutVolumeShaperConfigForAudioAttributes(AudioAttributes)\n         ",
    "links" : [ "android.media.VolumeShaper.Configuration", "android.media.AudioAttributes", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeInVolumeShaperConfigForAudioAttributes(@NonNull AudioAttributes audioAttributes, @Nullable VolumeShaper.Configuration fadeInVShaperConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link android.media.VolumeShaper.Configuration} used to fade in players with\n         * {@link android.media.AudioAttributes}\n         *\n         * <p>This method accepts {@code null} for volume shaper config to clear a previously set\n         * configuration (example, set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)})\n         *\n         * @param audioAttributes the {@link android.media.AudioAttributes}\n         * @param fadeInVShaperConfig the {@link android.media.VolumeShaper.Configuration} used to\n         *     fade in players with audio attribute\n         * @return the same Builder instance\n         * @throws NullPointerException if the audio attributes is {@code null}\n         * @see #getFadeInVolumeShaperConfigForAudioAttributes(AudioAttributes)\n         ",
    "links" : [ "android.media.VolumeShaper.Configuration", "android.media.AudioAttributes", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeOutDurationForAudioAttributes(@NonNull AudioAttributes audioAttributes, @IntRange(from = 0) @DurationMillisLong long fadeOutDurationMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the duration used for fading out players of type\n         * {@link android.media.AudioAttributes}.\n         * <p>\n         * A Volume shaper configuration is generated with the provided duration and default\n         * volume curve definitions. This config is then used to fade out players with given usage.\n         * <p>\n         * <b>Note: </b>In order to clear previously set duration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)}), this method accepts\n         * {@link #DURATION_NOT_SET} and sets the corresponding fade out volume shaper config to\n         * {@code null}\n         *\n         * @param audioAttributes the {@link android.media.AudioAttributes} for which the fade out\n         *     duration will be set/updated/reset\n         * @param fadeOutDurationMillis positive duration in milliseconds or\n         *     {@link #DURATION_NOT_SET}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the fade out duration is non-positive with the\n         *     exception of {@link #DURATION_NOT_SET}\n         * @see #getFadeOutDurationForAudioAttributes(AudioAttributes)\n         * @see #setFadeOutVolumeShaperConfigForAudioAttributes(AudioAttributes,\n         * VolumeShaper.Configuration)\n         ",
    "links" : [ "android.media.AudioAttributes", "#DURATION_NOT_SET", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeInDurationForAudioAttributes(@NonNull AudioAttributes audioAttributes, @IntRange(from = 0) @DurationMillisLong long fadeInDurationMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the duration used for fading in players of type {@link android.media.AudioAttributes}\n         * <p>\n         * A Volume shaper configuration is generated with the provided duration and default\n         * volume curve definitions. This config is then used to fade in players with given usage.\n         * <p>\n         * <b>Note: </b>In order to clear previously set duration (example, if set through\n         * {@link #Builder(android.media.FadeManagerConfiguration)}), this method accepts\n         * {@link #DURATION_NOT_SET} and sets the corresponding fade in volume shaper config to\n         * {@code null}\n         *\n         * @param audioAttributes the {@link android.media.AudioAttributes} for which the fade in\n         *     duration will be set/updated/reset\n         * @param fadeInDurationMillis positive duration in milliseconds or\n         *     {@link #DURATION_NOT_SET}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the fade in duration is non-positive with the\n         *     exception of {@link #DURATION_NOT_SET}\n         * @see #getFadeInDurationForAudioAttributes(AudioAttributes)\n         * @see #setFadeInVolumeShaperConfigForAudioAttributes(AudioAttributes,\n         * VolumeShaper.Configuration)\n         ",
    "links" : [ "android.media.AudioAttributes", "#DURATION_NOT_SET", "#Builder(android.media.FadeManagerConfiguration)" ]
  }, {
    "name" : "public Builder setFadeableUsages(@NonNull List<Integer> usages)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the list of {@link android.media.AudioAttributes usage} that can be faded\n         *\n         * <p>This is a positive list. Players with matching usage will be considered for fading.\n         * Usages that are not part of this list will not be faded\n         *\n         * <p><b>Warning:</b> When fade state is set to enabled, the builder expects at least one\n         * usage to be set/added. Failure to do so will result in an exception during\n         * {@link #build()}\n         *\n         * @param usages List of the {@link android.media.AudioAttributes usages}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the usages are invalid\n         * @see #getFadeableUsages()\n         ",
    "links" : [ "#build()", "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder addFadeableUsage(@AudioAttributes.AttributeUsage int usage)",
    "returnType" : "Builder",
    "comment" : "\n         * Add the {@link android.media.AudioAttributes usage} to the fadeable list\n         *\n         * @param usage the {@link android.media.AudioAttributes usage}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the usage is invalid\n         * @see #getFadeableUsages()\n         * @see #setFadeableUsages(List)\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder clearFadeableUsages()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears the fadeable {@link android.media.AudioAttributes usage} list\n         *\n         * <p>This can be used to reset the list when using a copy constructor\n         *\n         * @return the same Builder instance\n         * @see #getFadeableUsages()\n         * @see #setFadeableUsages(List)\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setUnfadeableContentTypes(@NonNull List<Integer> contentTypes)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the list of {@link android.media.AudioAttributes content type} that can not be faded\n         *\n         * <p>This is a negative list. Players with matching content type of this list will not be\n         * faded. Content types that are not part of this list will be considered for fading.\n         *\n         * <p>Passing an empty list as input clears the existing list. This can be used to\n         * reset the list when using a copy constructor\n         *\n         * @param contentTypes list of {@link android.media.AudioAttributes content types}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the content types are invalid\n         * @see #getUnfadeableContentTypes()\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder addUnfadeableContentType(@AudioAttributes.AttributeContentType int contentType)",
    "returnType" : "Builder",
    "comment" : "\n         * Add the {@link android.media.AudioAttributes content type} to unfadeable list\n         *\n         * @param contentType the {@link android.media.AudioAttributes content type}\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the content type is invalid\n         * @see #setUnfadeableContentTypes(List)\n         * @see #getUnfadeableContentTypes()\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder clearUnfadeableContentTypes()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears the unfadeable {@link android.media.AudioAttributes content type} list\n         *\n         * <p>This can be used to reset the list when using a copy constructor\n         *\n         * @return the same Builder instance\n         * @see #setUnfadeableContentTypes(List)\n         * @see #getUnfadeableContentTypes()\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setUnfadeableUids(@NonNull List<Integer> uids)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the uids that cannot be faded\n         *\n         * <p>This is a negative list. Players with matching uid of this list will not be faded.\n         * Uids that are not part of this list shall be considered for fading.\n         *\n         * @param uids list of uids\n         * @return the same Builder instance\n         * @see #getUnfadeableUids()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addUnfadeableUid(int uid)",
    "returnType" : "Builder",
    "comment" : "\n         * Add uid to unfadeable list\n         *\n         * @param uid client uid\n         * @return the same Builder instance\n         * @see #setUnfadeableUids(List)\n         * @see #getUnfadeableUids()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder clearUnfadeableUids()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears the unfadeable uid list\n         *\n         * <p>This can be used to reset the list when using a copy constructor.\n         *\n         * @return the same Builder instance\n         * @see #setUnfadeableUids(List)\n         * @see #getUnfadeableUids()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUnfadeableAudioAttributes(@NonNull List<AudioAttributes> attrs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the list of {@link android.media.AudioAttributes} that can not be faded\n         *\n         * <p>This is a negative list. Players with matching audio attributes of this list will not\n         * be faded. Audio attributes that are not part of this list shall be considered for fading.\n         *\n         * <p><b>Note:</b> Be cautious when adding generic audio attributes into this list as it can\n         * negatively impact fadeability decision (if such an audio attribute and corresponding\n         * usage fall into opposing lists).\n         * For example:\n         * <pre class=prettyprint>\n         *    AudioAttributes.Builder().setUsage(AudioAttributes.USAGE_MEDIA).build() </pre>\n         * is a generic audio attribute for {@link android.media.AudioAttributes.USAGE_MEDIA}.\n         * It is an undefined behavior to have an {@link android.media.AudioAttributes usage} in the\n         * fadeable usage list and the corresponding generic {@link android.media.AudioAttributes}\n         * in the unfadeable list. Such cases will result in an exception during {@link #build()}.\n         *\n         * @param attrs list of {@link android.media.AudioAttributes}\n         * @return the same Builder instance\n         * @see #getUnfadeableAudioAttributes()\n         ",
    "links" : [ "#build()", "android.media.AudioAttributes.USAGE_MEDIA", "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder addUnfadeableAudioAttributes(@NonNull AudioAttributes audioAttributes)",
    "returnType" : "Builder",
    "comment" : "\n         * Add the {@link android.media.AudioAttributes} to the unfadeable list\n         *\n         * @param audioAttributes the {@link android.media.AudioAttributes}\n         * @return the same Builder instance\n         * @see #setUnfadeableAudioAttributes(List)\n         * @see #getUnfadeableAudioAttributes()\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder clearUnfadeableAudioAttributes()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears the unfadeable {@link android.media.AudioAttributes} list.\n         *\n         * <p>This can be used to reset the list when using a copy constructor.\n         *\n         * @return the same Builder instance\n         * @see #getUnfadeableAudioAttributes()\n         ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setFadeInDelayForOffenders(@IntRange(from = 0) @DurationMillisLong long delayMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the delay after which the offending faded out player will be faded in.\n         *\n         * <p>This is the amount of time between the app being notified of the focus loss (when its\n         * muted by the fade out), and the time fade in (to unmute) starts\n         *\n         * @param delayMillis delay in milliseconds\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if the delay is negative\n         * @see #getFadeInDelayForOffenders()\n         ",
    "links" : [ ]
  }, {
    "name" : "public FadeManagerConfiguration build()",
    "returnType" : "FadeManagerConfiguration",
    "comment" : "\n         * Builds the {@link FadeManagerConfiguration} with all of the fade configurations that\n         * have been set.\n         *\n         * @return a new {@link FadeManagerConfiguration} object\n         ",
    "links" : [ "android.media.FadeManagerConfiguration" ]
  }, {
    "name" : "private void setFlag(long flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean checkNotSet(long flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FadeVolumeShaperConfigsWrapper getFadeVolShaperConfigWrapperForUsage(int usage)",
    "returnType" : "FadeVolumeShaperConfigsWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FadeVolumeShaperConfigsWrapper getFadeVolShaperConfigWrapperForAttr(AudioAttributes attr)",
    "returnType" : "FadeVolumeShaperConfigsWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private VolumeShaper.Configuration createVolShaperConfigForDuration(long duration, boolean isFadeIn)",
    "returnType" : "VolumeShaper.Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanupInactiveWrapperEntries(int usage)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanupInactiveWrapperEntries(AudioAttributes attr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setVolShaperConfigsForUsages(IntArray usages)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMissingVolShaperConfigsForWrapper(FadeVolumeShaperConfigsWrapper wrapper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void copyUsageToFadeWrapperMapInternal(SparseArray<FadeVolumeShaperConfigsWrapper> usageToFadeWrapperMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateFadeState(int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateUsages(List<Integer> usages)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateContentTypes(List<Integer> contentTypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateContentType(int contentType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateFadeConfigurations()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateFadeableUsages()",
    "returnType" : "void",
    "comment" : " Ensure fadeable usage list meets config requirements ",
    "links" : [ ]
  }, {
    "name" : "private void validateFadeVolumeShaperConfigsWrappers()",
    "returnType" : "void",
    "comment" : " Ensure Fade volume shaper config wrappers meet requirements ",
    "links" : [ ]
  }, {
    "name" : "private void validateUnfadeableAudioAttributes()",
    "returnType" : "void",
    "comment" : " Ensure Unfadeable attributes meet configuration requirements ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isGeneric(AudioAttributes attr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setFadeState(@FadeStateEnum int state)", "public Builder setFadeOutVolumeShaperConfigForUsage(@AudioAttributes.AttributeUsage int usage, @Nullable VolumeShaper.Configuration fadeOutVShaperConfig)", "public Builder setFadeInVolumeShaperConfigForUsage(@AudioAttributes.AttributeUsage int usage, @Nullable VolumeShaper.Configuration fadeInVShaperConfig)", "public Builder setFadeOutDurationForUsage(@AudioAttributes.AttributeUsage int usage, @IntRange(from = 0) @DurationMillisLong long fadeOutDurationMillis)", "public Builder setFadeInDurationForUsage(@AudioAttributes.AttributeUsage int usage, @IntRange(from = 0) @DurationMillisLong long fadeInDurationMillis)", "public Builder setFadeOutVolumeShaperConfigForAudioAttributes(@NonNull AudioAttributes audioAttributes, @Nullable VolumeShaper.Configuration fadeOutVShaperConfig)", "public Builder setFadeInVolumeShaperConfigForAudioAttributes(@NonNull AudioAttributes audioAttributes, @Nullable VolumeShaper.Configuration fadeInVShaperConfig)", "public Builder setFadeOutDurationForAudioAttributes(@NonNull AudioAttributes audioAttributes, @IntRange(from = 0) @DurationMillisLong long fadeOutDurationMillis)", "public Builder setFadeInDurationForAudioAttributes(@NonNull AudioAttributes audioAttributes, @IntRange(from = 0) @DurationMillisLong long fadeInDurationMillis)", "public Builder setFadeableUsages(@NonNull List<Integer> usages)", "public Builder addFadeableUsage(@AudioAttributes.AttributeUsage int usage)", "public Builder clearFadeableUsages()", "public Builder setUnfadeableContentTypes(@NonNull List<Integer> contentTypes)", "public Builder addUnfadeableContentType(@AudioAttributes.AttributeContentType int contentType)", "public Builder clearUnfadeableContentTypes()", "public Builder setUnfadeableUids(@NonNull List<Integer> uids)", "public Builder addUnfadeableUid(int uid)", "public Builder clearUnfadeableUids()", "public Builder setUnfadeableAudioAttributes(@NonNull List<AudioAttributes> attrs)", "public Builder addUnfadeableAudioAttributes(@NonNull AudioAttributes audioAttributes)", "public Builder clearUnfadeableAudioAttributes()", "public Builder setFadeInDelayForOffenders(@IntRange(from = 0) @DurationMillisLong long delayMillis)", "public FadeManagerConfiguration build()", "private void setFlag(long flag)", "private boolean checkNotSet(long flag)", "private FadeVolumeShaperConfigsWrapper getFadeVolShaperConfigWrapperForUsage(int usage)", "private FadeVolumeShaperConfigsWrapper getFadeVolShaperConfigWrapperForAttr(AudioAttributes attr)", "private VolumeShaper.Configuration createVolShaperConfigForDuration(long duration, boolean isFadeIn)", "private void cleanupInactiveWrapperEntries(int usage)", "private void cleanupInactiveWrapperEntries(AudioAttributes attr)", "private void setVolShaperConfigsForUsages(IntArray usages)", "private void setMissingVolShaperConfigsForWrapper(FadeVolumeShaperConfigsWrapper wrapper)", "private void copyUsageToFadeWrapperMapInternal(SparseArray<FadeVolumeShaperConfigsWrapper> usageToFadeWrapperMap)", "private void validateFadeState(int state)", "private void validateUsages(List<Integer> usages)", "private void validateContentTypes(List<Integer> contentTypes)", "private void validateContentType(int contentType)", "private void validateFadeConfigurations()", "private void validateFadeableUsages()", "private void validateFadeVolumeShaperConfigsWrappers()", "private void validateUnfadeableAudioAttributes()", "private static boolean isGeneric(AudioAttributes attr)" ],
  "variableNames" : [ "INVALID_INDEX", "IS_BUILDER_USED_FIELD_SET", "IS_FADEABLE_USAGES_FIELD_SET", "IS_UNFADEABLE_CONTENT_TYPE_FIELD_SET", "DEFAULT_DELAY_FADE_IN_OFFENDERS_MS", "DEFAULT_UNFADEABLE_PLAYER_TYPES", "DEFAULT_UNFADEABLE_CONTENT_TYPES", "DEFAULT_FADEABLE_USAGES", "mFadeState", "mFadeInDelayForOffendersMillis", "mFadeOutDurationMillis", "mFadeInDurationMillis", "mBuilderFieldsSet", "mUsageToFadeWrapperMap", "mAttrToFadeWrapperMap", "mFadeableUsages", "mUnfadeableContentTypes", "mUnfadeablePlayerTypes", "mUnfadeableUids", "mUnfadeableAudioAttributes" ]
}