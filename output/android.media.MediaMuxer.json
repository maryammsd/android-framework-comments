{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaMuxer.java",
  "packageName" : "android.media",
  "className" : "MediaMuxer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "MUXER_STATE_UNINITIALIZED",
    "type" : "int",
    "comment" : " Muxer internal states.",
    "links" : [ ]
  }, {
    "name" : "MUXER_STATE_INITIALIZED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MUXER_STATE_STARTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MUXER_STATE_STOPPED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastTrackIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeSetup(@NonNull FileDescriptor fd, int format) throws IllegalArgumentException, IOException",
    "returnType" : "long",
    "comment" : " All the native functions are listed here.",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRelease(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeStart(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeStop(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeAddTrack(long nativeObject, @NonNull String[] keys, @NonNull Object[] values)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetOrientationHint(long nativeObject, int degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetLocation(long nativeObject, int latitude, int longitude)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteSampleData(long nativeObject, int trackIndex, @NonNull ByteBuffer byteBuf, int offset, int size, long presentationTimeUs, @MediaCodec.BufferFlag int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String convertMuxerStateCodeToString(int aState)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setUpMediaMuxer(@NonNull FileDescriptor fd, @Format int format) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOrientationHint(int degrees)",
    "returnType" : "void",
    "comment" : "\n     * Sets the orientation hint for output video playback.\n     * <p>This method should be called before {@link #start}. Calling this\n     * method will not rotate the video frame when muxer is generating the file,\n     * but add a composition matrix containing the rotation angle in the output\n     * video if the output format is\n     * {@link OutputFormat#MUXER_OUTPUT_MPEG_4} so that a video player can\n     * choose the proper orientation for playback. Note that some video players\n     * may choose to ignore the composition matrix in a video during playback.\n     * By default, the rotation degree is 0.</p>\n     * @param degrees the angle to be rotated clockwise in degrees.\n     * The supported angles are 0, 90, 180, and 270 degrees.\n     * @throws IllegalArgumentException if degree is not supported.\n     * @throws IllegalStateException If this method is called after {@link #start}.\n     ",
    "links" : [ "#start", "#MUXER_OUTPUT_MPEG_4" ]
  }, {
    "name" : "public void setLocation(float latitude, float longitude)",
    "returnType" : "void",
    "comment" : "\n     * Set and store the geodata (latitude and longitude) in the output file.\n     * This method should be called before {@link #start}. The geodata is stored\n     * in udta box if the output format is\n     * {@link OutputFormat#MUXER_OUTPUT_MPEG_4}, and is ignored for other output\n     * formats. The geodata is stored according to ISO-6709 standard.\n     *\n     * @param latitude Latitude in degrees. Its value must be in the range [-90,\n     * 90].\n     * @param longitude Longitude in degrees. Its value must be in the range\n     * [-180, 180].\n     * @throws IllegalArgumentException If the given latitude or longitude is out\n     * of range.\n     * @throws IllegalStateException If this method is called after {@link #start}.\n     ",
    "links" : [ "#start", "#MUXER_OUTPUT_MPEG_4" ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the muxer.\n     * <p>Make sure this is called after {@link #addTrack} and before\n     * {@link #writeSampleData}.</p>\n     * @throws IllegalStateException If this method is called after {@link #start}\n     * or Muxer is released\n     ",
    "links" : [ "#addTrack", "#start", "#writeSampleData" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops the muxer.\n     * <p>Once the muxer stops, it can not be restarted.</p>\n     * @throws IllegalStateException if muxer is in the wrong state.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addTrack(@NonNull MediaFormat format)",
    "returnType" : "int",
    "comment" : "\n     * Adds a track with the specified format.\n     * <p>\n     * The following table summarizes support for specific format keys across android releases.\n     * Keys marked with '+:' are required.\n     *\n     * <table>\n     *  <thead>\n     *   <tr>\n     *    <th rowspan=2>OS Version(s)</th>\n     *    <td colspan=3>{@code MediaFormat} keys used for</th>\n     *   </tr><tr>\n     *    <th>All Tracks</th>\n     *    <th>Audio Tracks</th>\n     *    <th>Video Tracks</th>\n     *   </tr>\n     *  </thead>\n     *  <tbody>\n     *   <tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td>\n     *    <td rowspan=7>+: {@link MediaFormat#KEY_MIME}</td>\n     *    <td rowspan=3>+: {@link MediaFormat#KEY_SAMPLE_RATE},<br>\n     *        +: {@link MediaFormat#KEY_CHANNEL_COUNT},<br>\n     *        +: <strong>codec-specific data<sup>AAC</sup></strong></td>\n     *    <td rowspan=5>+: {@link MediaFormat#KEY_WIDTH},<br>\n     *        +: {@link MediaFormat#KEY_HEIGHT},<br>\n     *        no {@code KEY_ROTATION},\n     *        use {@link #setOrientationHint setOrientationHint()}<sup>.mp4</sup>,<br>\n     *        +: <strong>codec-specific data<sup>AVC, MPEG4</sup></strong></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td>\n     *    <td rowspan=4>as above, plus<br>\n     *        +: <strong>codec-specific data<sup>Vorbis & .webm</sup></strong></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#M}</td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#KEY_BIT_RATE}<sup>AAC</sup></td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#N}</td>\n     *    <td>as above, plus<br>\n     *        <!-- {link MediaFormat#KEY_MAX_BIT_RATE}<sup>AAC, MPEG4</sup>,<br> -->\n     *        {@link MediaFormat#KEY_BIT_RATE}<sup>MPEG4</sup>,<br>\n     *        {@link MediaFormat#KEY_HDR_STATIC_INFO}<sup>#, .webm</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_STANDARD}<sup>#</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_TRANSFER}<sup>#</sup>,<br>\n     *        {@link MediaFormat#KEY_COLOR_RANGE}<sup>#</sup>,<br>\n     *        +: <strong>codec-specific data<sup>HEVC</sup></strong>,<br>\n     *        codec-specific data<sup>VP9</sup></td>\n     *   </tr>\n     *   <tr>\n     *    <td colspan=4>\n     *     <p class=note><strong>Notes:</strong><br>\n     *      #: storing into container metadata.<br>\n     *      .mp4, .webm&hellip;: for listed containers<br>\n     *      MPEG4, AAC&hellip;: for listed codecs\n     *    </td>\n     *   </tr><tr>\n     *    <td colspan=4>\n     *     <p class=note>Note that the codec-specific data for the track must be specified using\n     *     this method. Furthermore, codec-specific data must not be passed/specified via the\n     *     {@link #writeSampleData writeSampleData()} call.\n     *    </td>\n     *   </tr>\n     *  </tbody>\n     * </table>\n     *\n     * <p>\n     * The following table summarizes codec support for containers across android releases:\n     *\n     * <table>\n     *  <thead>\n     *   <tr>\n     *    <th rowspan=2>OS Version(s)</th>\n     *    <td colspan=3>Codec support</th>\n     *   </tr><tr>\n     *    <th>{@linkplain OutputFormat#MUXER_OUTPUT_MPEG_4 MP4}</th>\n     *    <th>{@linkplain OutputFormat#MUXER_OUTPUT_WEBM WEBM}</th>\n     *   </tr>\n     *  </thead>\n     *  <tbody>\n     *   <tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td>\n     *    <td rowspan=6>{@link MediaFormat#MIMETYPE_AUDIO_AAC AAC},<br>\n     *        {@link MediaFormat#MIMETYPE_AUDIO_AMR_NB NB-AMR},<br>\n     *        {@link MediaFormat#MIMETYPE_AUDIO_AMR_WB WB-AMR},<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_H263 H.263},<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_MPEG4 MPEG-4},<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_AVC AVC} (H.264)</td>\n     *    <td rowspan=3>Not supported</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td>\n     *    <td rowspan=3>{@link MediaFormat#MIMETYPE_AUDIO_VORBIS Vorbis},<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_VP8 VP8}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#M}</td>\n     *   </tr><tr>\n     *    <td>{@link android.os.Build.VERSION_CODES#N}</td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_HEVC HEVC} (H.265)</td>\n     *    <td>as above, plus<br>\n     *        {@link MediaFormat#MIMETYPE_VIDEO_VP9 VP9}</td>\n     *   </tr>\n     *  </tbody>\n     * </table>\n     *\n     * @param format The media format for the track.  This must not be an empty\n     *               MediaFormat.\n     * @return The track index for this newly added track, and it should be used\n     * in the {@link #writeSampleData}.\n     * @throws IllegalArgumentException if format is invalid.\n     * @throws IllegalStateException if muxer is in the wrong state.\n     ",
    "links" : [ "android.media.MediaFormat#KEY_SAMPLE_RATE", "android.media.MediaFormat#KEY_CHANNEL_COUNT", "android.media.MediaFormat#KEY_BIT_RATE", "android.media.MediaFormat#MIMETYPE_AUDIO_VORBIS", "android.media.MediaFormat#KEY_COLOR_RANGE", "android.os.Build.VERSION_CODES#KITKAT_WATCH", "#writeSampleData", "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M", "#setOrientationHint", "android.media.MediaFormat#KEY_WIDTH", "android.media.MediaFormat#MIMETYPE_AUDIO_AMR_NB", "android.media.MediaFormat#KEY_MIME", "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.media.MediaFormat#KEY_HEIGHT", "android.media.MediaFormat#MIMETYPE_VIDEO_MPEG4", "android.os.Build.VERSION_CODES#LOLLIPOP", "android.media.MediaFormat#KEY_COLOR_TRANSFER", "android.media.MediaFormat#MIMETYPE_VIDEO_AVC", "android.media.MediaFormat#MIMETYPE_AUDIO_AAC", "android.os.Build.VERSION_CODES#KITKAT", "android.media.MediaFormat#MIMETYPE_AUDIO_AMR_WB", "android.media.MediaFormat#KEY_HDR_STATIC_INFO", "android.os.Build.VERSION_CODES#JELLY_BEAN_MR2", "android.media.MediaFormat#KEY_COLOR_STANDARD", "android.media.MediaFormat#MIMETYPE_VIDEO_VP9", "android.media.MediaFormat#MIMETYPE_VIDEO_VP8", "android.media.MediaFormat#MIMETYPE_VIDEO_H263", "android.media.MediaFormat#MIMETYPE_VIDEO_HEVC" ]
  }, {
    "name" : "public void writeSampleData(int trackIndex, @NonNull ByteBuffer byteBuf, @NonNull BufferInfo bufferInfo)",
    "returnType" : "void",
    "comment" : "\n     * Writes an encoded sample into the muxer.\n     * <p>The application needs to make sure that the samples are written into\n     * the right tracks. Also, it needs to make sure the samples for each track\n     * are written in chronological order (e.g. in the order they are provided\n     * by the encoder.)</p>\n     * <p> For MPEG4 media format, the duration of the last sample in a track can be set by passing\n     * an additional empty buffer(bufferInfo.size = 0) with MediaCodec.BUFFER_FLAG_END_OF_STREAM\n     * flag and a suitable presentation timestamp set in bufferInfo parameter as the last sample of\n     * that track.  This last sample's presentation timestamp shall be a sum of the presentation\n     * timestamp and the duration preferred for the original last sample.  If no explicit\n     * END_OF_STREAM sample was passed, then the duration of the last sample would be the same as\n     * that of the sample before that.</p>\n     * @param byteBuf The encoded sample.\n     * @param trackIndex The track index for this sample.\n     * @param bufferInfo The buffer information related to this sample.\n     * @throws IllegalArgumentException if trackIndex, byteBuf or bufferInfo is  invalid.\n     * @throws IllegalStateException if muxer is in wrong state.\n     * MediaMuxer uses the flags provided in {@link MediaCodec.BufferInfo},\n     * to signal sync frames.\n     ",
    "links" : [ "MediaCodec.BufferInfo" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Make sure you call this when you're done to free up any resources\n     * instead of relying on the garbage collector to do this for you at\n     * some point in the future.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native long nativeSetup(@NonNull FileDescriptor fd, int format) throws IllegalArgumentException, IOException", "private static native void nativeRelease(long nativeObject)", "private static native void nativeStart(long nativeObject)", "private static native void nativeStop(long nativeObject)", "private static native int nativeAddTrack(long nativeObject, @NonNull String[] keys, @NonNull Object[] values)", "private static native void nativeSetOrientationHint(long nativeObject, int degrees)", "private static native void nativeSetLocation(long nativeObject, int latitude, int longitude)", "private static native void nativeWriteSampleData(long nativeObject, int trackIndex, @NonNull ByteBuffer byteBuf, int offset, int size, long presentationTimeUs, @MediaCodec.BufferFlag int flags)", "private String convertMuxerStateCodeToString(int aState)", "private void setUpMediaMuxer(@NonNull FileDescriptor fd, @Format int format) throws IOException", "public void setOrientationHint(int degrees)", "public void setLocation(float latitude, float longitude)", "public void start()", "public void stop()", "protected void finalize() throws Throwable", "public int addTrack(@NonNull MediaFormat format)", "public void writeSampleData(int trackIndex, @NonNull ByteBuffer byteBuf, @NonNull BufferInfo bufferInfo)", "public void release()" ],
  "variableNames" : [ "MUXER_STATE_UNINITIALIZED", "MUXER_STATE_INITIALIZED", "MUXER_STATE_STARTED", "MUXER_STATE_STOPPED", "mState", "mCloseGuard", "mLastTrackIndex", "mNativeObject" ]
}