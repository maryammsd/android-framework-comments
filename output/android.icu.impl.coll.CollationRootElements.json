{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationRootElements.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationRootElements",
  "comment" : "\n * Container and access methods for collation elements and weights\n * that occur in the root collator.\n * Needed for finding boundaries for building a tailoring.\n *\n * This class takes and returns 16-bit secondary and tertiary weights.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PRIMARY_SENTINEL",
    "type" : "long",
    "comment" : "\n     * Higher than any root primary.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEC_TER_DELTA_FLAG",
    "type" : "int",
    "comment" : "\n     * Flag in a root element, set if the element contains secondary & tertiary weights,\n     * rather than a primary.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIMARY_STEP_MASK",
    "type" : "int",
    "comment" : "\n     * Mask for getting the primary range step value from a primary-range-end element.\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_FIRST_TERTIARY_INDEX",
    "type" : "int",
    "comment" : "\n     * Index of the first CE with a non-zero tertiary weight.\n     * Same as the start of the compact root elements table.\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_FIRST_SECONDARY_INDEX",
    "type" : "int",
    "comment" : "\n     * Index of the first CE with a non-zero secondary weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_FIRST_PRIMARY_INDEX",
    "type" : "int",
    "comment" : "\n     * Index of the first CE with a non-zero primary weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_COMMON_SEC_AND_TER_CE",
    "type" : "int",
    "comment" : "\n     * Must match Collation.COMMON_SEC_AND_TER_CE.\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_SEC_TER_BOUNDARIES",
    "type" : "int",
    "comment" : "\n     * Secondary & tertiary boundaries.\n     * Bits 31..24: [fixed last secondary common byte 45]\n     * Bits 23..16: [fixed first ignorable secondary byte 80]\n     * Bits 15.. 8: reserved, 0\n     * Bits  7.. 0: [fixed first ignorable tertiary byte 3C]\n     ",
    "links" : [ ]
  }, {
    "name" : "IX_COUNT",
    "type" : "int",
    "comment" : "\n     * The current number of indexes.\n     * Currently the same as elements[IX_FIRST_TERTIARY_INDEX].\n     ",
    "links" : [ ]
  }, {
    "name" : "elements",
    "type" : "long[]",
    "comment" : "\n     * Data structure: See ICU4C source/i18n/collationrootelements.h.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTertiaryBoundary()",
    "returnType" : "int",
    "comment" : "\n     * Returns the boundary between tertiary weights of primary/secondary CEs\n     * and those of tertiary CEs.\n     * This is the upper limit for tertiaries of primary/secondary CEs.\n     * This minus one is the lower limit for tertiaries of tertiary CEs.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getFirstTertiaryCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the first assigned tertiary CE.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLastTertiaryCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the last assigned tertiary CE.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLastCommonSecondary()",
    "returnType" : "int",
    "comment" : "\n     * Returns the last common secondary weight.\n     * This is the lower limit for secondaries of primary CEs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSecondaryBoundary()",
    "returnType" : "int",
    "comment" : "\n     * Returns the boundary between secondary weights of primary CEs\n     * and those of secondary CEs.\n     * This is the upper limit for secondaries of primary CEs.\n     * This minus one is the lower limit for secondaries of secondary CEs.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getFirstSecondaryCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the first assigned secondary CE.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getLastSecondaryCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the last assigned secondary CE.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getFirstPrimary()",
    "returnType" : "long",
    "comment" : "\n     * Returns the first assigned primary weight.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getFirstPrimaryCE()",
    "returnType" : "long",
    "comment" : "\n     * Returns the first assigned primary CE.\n     ",
    "links" : [ ]
  }, {
    "name" : " long lastCEWithPrimaryBefore(long p)",
    "returnType" : "long",
    "comment" : "\n     * Returns the last root CE with a primary weight before p.\n     * Intended only for reordering group boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : " long firstCEWithPrimaryAtLeast(long p)",
    "returnType" : "long",
    "comment" : "\n     * Returns the first root CE with a primary weight of at least p.\n     * Intended only for reordering group boundaries.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getPrimaryBefore(long p, boolean isCompressible)",
    "returnType" : "long",
    "comment" : "\n     * Returns the primary weight before p.\n     * p must be greater than the first root primary.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSecondaryBefore(long p, int s)",
    "returnType" : "int",
    "comment" : " Returns the secondary weight before [p, s]. ",
    "links" : [ ]
  }, {
    "name" : " int getTertiaryBefore(long p, int s, int t)",
    "returnType" : "int",
    "comment" : " Returns the tertiary weight before [p, s, t]. ",
    "links" : [ ]
  }, {
    "name" : " int findPrimary(long p)",
    "returnType" : "int",
    "comment" : "\n     * Finds the index of the input primary.\n     * p must occur as a root primary, and must not be 0.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getPrimaryAfter(long p, int index, boolean isCompressible)",
    "returnType" : "long",
    "comment" : "\n     * Returns the primary weight after p where index=findPrimary(p).\n     * p must be at least the first root primary.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSecondaryAfter(int index, int s)",
    "returnType" : "int",
    "comment" : "\n     * Returns the secondary weight after [p, s] where index=findPrimary(p)\n     * except use index=0 for p=0.\n     *\n     * <p>Must return a weight for every root [p, s] as well as for every weight\n     * returned by getSecondaryBefore(). If p!=0 then s can be BEFORE_WEIGHT16.\n     *\n     * <p>Exception: [0, 0] is handled by the CollationBuilder:\n     * Both its lower and upper boundaries are special.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getTertiaryAfter(int index, int s, int t)",
    "returnType" : "int",
    "comment" : "\n     * Returns the tertiary weight after [p, s, t] where index=findPrimary(p)\n     * except use index=0 for p=0.\n     *\n     * <p>Must return a weight for every root [p, s, t] as well as for every weight\n     * returned by getTertiaryBefore(). If s!=0 then t can be BEFORE_WEIGHT16.\n     *\n     * <p>Exception: [0, 0, 0] is handled by the CollationBuilder:\n     * Both its lower and upper boundaries are special.\n     ",
    "links" : [ ]
  }, {
    "name" : "private long getFirstSecTerForPrimary(int index)",
    "returnType" : "long",
    "comment" : "\n     * Returns the first secondary & tertiary weights for p where index=findPrimary(p)+1.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int findP(long p)",
    "returnType" : "int",
    "comment" : "\n     * Finds the largest index i where elements[i]<=p.\n     * Requires first primary<=p<0xffffff00 (PRIMARY_SENTINEL).\n     * Does not require that p is a root collator primary.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isEndOfPrimaryRange(long q)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getTertiaryBoundary()", " long getFirstTertiaryCE()", " long getLastTertiaryCE()", "public int getLastCommonSecondary()", "public int getSecondaryBoundary()", " long getFirstSecondaryCE()", " long getLastSecondaryCE()", " long getFirstPrimary()", " long getFirstPrimaryCE()", " long lastCEWithPrimaryBefore(long p)", " long firstCEWithPrimaryAtLeast(long p)", " long getPrimaryBefore(long p, boolean isCompressible)", " int getSecondaryBefore(long p, int s)", " int getTertiaryBefore(long p, int s, int t)", " int findPrimary(long p)", " long getPrimaryAfter(long p, int index, boolean isCompressible)", " int getSecondaryAfter(int index, int s)", " int getTertiaryAfter(int index, int s, int t)", "private long getFirstSecTerForPrimary(int index)", "private int findP(long p)", "private static boolean isEndOfPrimaryRange(long q)" ],
  "variableNames" : [ "PRIMARY_SENTINEL", "SEC_TER_DELTA_FLAG", "PRIMARY_STEP_MASK", "IX_FIRST_TERTIARY_INDEX", "IX_FIRST_SECONDARY_INDEX", "IX_FIRST_PRIMARY_INDEX", "IX_COMMON_SEC_AND_TER_CE", "IX_SEC_TER_BOUNDARIES", "IX_COUNT", "elements" ]
}