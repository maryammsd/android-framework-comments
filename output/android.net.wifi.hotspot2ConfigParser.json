{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/hotspot2/ConfigParser.java",
  "packageName" : "android.net.wifi.hotspot2",
  "className" : "ConfigParser",
  "comment" : "\n * Utility class for building PasspointConfiguration from an installation file.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : " Header names.",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TRANSFER_ENCODING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_MULTIPART_MIXED",
    "type" : "String",
    "comment" : " MIME types.",
    "links" : [ ]
  }, {
    "name" : "TYPE_WIFI_CONFIG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_PASSPOINT_PROFILE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_CA_CERT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_PKCS12",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODING_BASE64",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOUNDARY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static PasspointConfiguration parsePasspointConfig(String mimeType, byte[] data)",
    "returnType" : "PasspointConfiguration",
    "comment" : "\n     * Parse the Hotspot 2.0 Release 1 configuration data into a {@link PasspointConfiguration}\n     * object.  The configuration data is a base64 encoded MIME multipart data.  Below is\n     * the format of the decoded message:\n     *\n     * Content-Type: multipart/mixed; boundary={boundary}\n     * Content-Transfer-Encoding: base64\n     * [Skip uninterested headers]\n     *\n     * --{boundary}\n     * Content-Type: application/x-passpoint-profile\n     * Content-Transfer-Encoding: base64\n     *\n     * [base64 encoded Passpoint profile data]\n     * --{boundary}\n     * Content-Type: application/x-x509-ca-cert\n     * Content-Transfer-Encoding: base64\n     *\n     * [base64 encoded X509 CA certificate data]\n     * --{boundary}\n     * Content-Type: application/x-pkcs12\n     * Content-Transfer-Encoding: base64\n     *\n     * [base64 encoded PKCS#12 ASN.1 structure containing client certificate chain]\n     * --{boundary}\n     *\n     * @param mimeType MIME type of the encoded data.\n     * @param data A base64 encoded MIME multipart message containing the Passpoint profile\n     *             (required), CA (Certificate Authority) certificate (optional), and client\n     *             certificate chain (optional).\n     * @return {@link PasspointConfiguration}\n     ",
    "links" : [ "PasspointConfiguration", "PasspointConfiguration" ]
  }, {
    "name" : "private static PasspointConfiguration createPasspointConfig(Map<String, byte[]> mimeParts) throws IOException",
    "returnType" : "PasspointConfiguration",
    "comment" : "\n     * Create a {@link PasspointConfiguration} object from list of MIME (Multipurpose Internet\n     * Mail Extension) parts.\n     *\n     * @param mimeParts Map of content type and content data.\n     * @return {@link PasspointConfiguration}\n     * @throws IOException\n     ",
    "links" : [ "PasspointConfiguration", "PasspointConfiguration" ]
  }, {
    "name" : "private static Map<String, byte[]> parseMimeMultipartMessage(LineNumberReader in) throws IOException",
    "returnType" : "Map<String, byte[]>",
    "comment" : "\n     * Parse a MIME (Multipurpose Internet Mail Extension) multipart message from the given\n     * input stream.\n     *\n     * @param in The input stream for reading the message data\n     * @return A map of a content type and content data pair\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static MimePart parseMimePart(LineNumberReader in, String boundary) throws IOException",
    "returnType" : "MimePart",
    "comment" : "\n     * Parse a MIME (Multipurpose Internet Mail Extension) part.  We expect the data to\n     * be encoded in base64.\n     *\n     * @param in Input stream to read the data from\n     * @param boundary Boundary string indicate the end of the part\n     * @return {@link MimePart}\n     * @throws IOException\n     ",
    "links" : [ "MimePart" ]
  }, {
    "name" : "private static MimeHeader parseHeaders(LineNumberReader in) throws IOException",
    "returnType" : "MimeHeader",
    "comment" : "\n     * Parse a MIME (Multipurpose Internet Mail Extension) header from the input stream.\n     * @param in Input stream to read from.\n     * @return {@link MimeHeader}\n     * @throws IOException\n     ",
    "links" : [ "MimeHeader" ]
  }, {
    "name" : "private static Pair<String, String> parseContentType(String contentType) throws IOException",
    "returnType" : "Pair<String, String>",
    "comment" : "\n     * Parse the Content-Type header value.  The value will contain the content type string and\n     * an optional boundary string separated by a \";\".  Below are examples of valid Content-Type\n     * header value:\n     *   multipart/mixed; boundary={boundary}\n     *   application/x-passpoint-profile\n     *\n     * @param contentType The Content-Type value string\n     * @return A pair of content type and boundary string\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, String> readHeaders(LineNumberReader in) throws IOException",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Read the headers from the given input stream.  The header section is terminated by\n     * an empty line.\n     *\n     * @param in The input stream to read from\n     * @return Map of key-value pairs.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static X509Certificate parseCACert(byte[] octets) throws CertificateException",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Parse a CA (Certificate Authority) certificate data and convert it to a\n     * X509Certificate object.\n     *\n     * @param octets Certificate data\n     * @return X509Certificate\n     * @throws CertificateException\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Pair<PrivateKey, List<X509Certificate>> parsePkcs12(byte[] octets) throws GeneralSecurityException, IOException",
    "returnType" : "Pair<PrivateKey, List<X509Certificate>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "CONTENT_TYPE", "CONTENT_TRANSFER_ENCODING", "TYPE_MULTIPART_MIXED", "TYPE_WIFI_CONFIG", "TYPE_PASSPOINT_PROFILE", "TYPE_CA_CERT", "TYPE_PKCS12", "ENCODING_BASE64", "BOUNDARY" ],
  "methodNames" : [ "public static PasspointConfiguration parsePasspointConfig(String mimeType, byte[] data)", "private static PasspointConfiguration createPasspointConfig(Map<String, byte[]> mimeParts) throws IOException", "private static Map<String, byte[]> parseMimeMultipartMessage(LineNumberReader in) throws IOException", "private static MimePart parseMimePart(LineNumberReader in, String boundary) throws IOException", "private static MimeHeader parseHeaders(LineNumberReader in) throws IOException", "private static Pair<String, String> parseContentType(String contentType) throws IOException", "private static Map<String, String> readHeaders(LineNumberReader in) throws IOException", "private static X509Certificate parseCACert(byte[] octets) throws CertificateException", "private static Pair<PrivateKey, List<X509Certificate>> parsePkcs12(byte[] octets) throws GeneralSecurityException, IOException" ]
}