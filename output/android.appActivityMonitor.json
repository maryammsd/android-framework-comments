{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/Instrumentation.java",
  "packageName" : "android.app",
  "className" : "ActivityMonitor",
  "comment" : "\n     * Information about a particular kind of Intent that is being monitored.\n     * An instance of this class is added to the \n     * current instrumentation through {@link #addMonitor}; after being added, \n     * when a new activity is being started the monitor will be checked and, if \n     * matching, its hit count updated and (optionally) the call stopped and a \n     * canned result returned.\n     * \n     * <p>An ActivityMonitor can also be used to look for the creation of an\n     * activity, through the {@link #waitForActivity} method.  This will return\n     * after a matching activity has been created with that activity object.\n     ",
  "variables" : [ {
    "name" : "mWhich",
    "type" : "IntentFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResult",
    "type" : "ActivityResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlock",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreMatchingSpecificIntents",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHits",
    "type" : "int",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "mLastActivity",
    "type" : "Activity",
    "comment" : "package",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final boolean ignoreMatchingSpecificIntents()",
    "returnType" : "boolean",
    "comment" : "\n         * @return true if this monitor is used for intercepting any started activity by calling\n         *         into {@link #onStartActivity(Intent)}, false if this monitor is only used\n         *         for specific intents corresponding to the intent filter or activity class\n         *         passed in the constructor.\n         ",
    "links" : [ "#onStartActivity" ]
  }, {
    "name" : "public final IntentFilter getFilter()",
    "returnType" : "IntentFilter",
    "comment" : "\n         * Retrieve the filter associated with this ActivityMonitor.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final ActivityResult getResult()",
    "returnType" : "ActivityResult",
    "comment" : "\n         * Retrieve the result associated with this ActivityMonitor, or null if \n         * none. \n         ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isBlocking()",
    "returnType" : "boolean",
    "comment" : "\n         * Check whether this monitor blocks activity starts (not allowing the \n         * actual activity to run) or allows them to execute normally. \n         ",
    "links" : [ ]
  }, {
    "name" : "public final int getHits()",
    "returnType" : "int",
    "comment" : "\n         * Retrieve the number of times the monitor has been hit so far.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final Activity getLastActivity()",
    "returnType" : "Activity",
    "comment" : "\n         * Retrieve the most recent activity class that was seen by this \n         * monitor. \n         ",
    "links" : [ ]
  }, {
    "name" : "public final Activity waitForActivity()",
    "returnType" : "Activity",
    "comment" : "\n         * Block until an Activity is created that matches this monitor, \n         * returning the resulting activity. \n         * \n         * @return Activity\n         ",
    "links" : [ ]
  }, {
    "name" : "public final Activity waitForActivityWithTimeout(long timeOut)",
    "returnType" : "Activity",
    "comment" : "\n         * Block until an Activity is created that matches this monitor, \n         * returning the resulting activity or till the timeOut period expires.\n         * If the timeOut expires before the activity is started, return null. \n         * \n         * @param timeOut Time to wait in milliseconds before the activity is created.\n         * \n         * @return Activity\n         ",
    "links" : [ ]
  }, {
    "name" : "public ActivityResult onStartActivity(Intent intent)",
    "returnType" : "ActivityResult",
    "comment" : "\n         * Used for intercepting any started activity.\n         *\n         * <p> A non-null return value here will be considered a hit for this monitor.\n         * By default this will return {@code null} and subclasses can override this to return\n         * a non-null value if the intent needs to be intercepted.\n         *\n         * <p> Whenever a new activity is started, this method will be called on instances created\n         * using {@link #ActivityMonitor()} to check if there is a match. In case\n         * of a match, the activity start will be blocked and the returned result will be used.\n         *\n         * @param intent The intent used for starting the activity.\n         * @return The {@link ActivityResult} that needs to be used in case of a match.\n         ",
    "links" : [ "#ActivityMonitor", "ActivityResult" ]
  }, {
    "name" : " final boolean match(Context who, Activity activity, Intent intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mWhich", "mClass", "mResult", "mBlock", "mIgnoreMatchingSpecificIntents", "mHits", "mLastActivity" ],
  "methodNames" : [ " final boolean ignoreMatchingSpecificIntents()", "public final IntentFilter getFilter()", "public final ActivityResult getResult()", "public final boolean isBlocking()", "public final int getHits()", "public final Activity getLastActivity()", "public final Activity waitForActivity()", "public final Activity waitForActivityWithTimeout(long timeOut)", "public ActivityResult onStartActivity(Intent intent)", " final boolean match(Context who, Activity activity, Intent intent)" ]
}