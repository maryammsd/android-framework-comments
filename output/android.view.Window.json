{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Window.java",
  "packageName" : "android.view",
  "className" : "Window",
  "comment" : "\n * Abstract base class for a top-level window look and behavior policy.  An\n * instance of this class should be used as the top-level view added to the\n * window manager. It provides standard UI policies such as a background, title\n * area, default key processing, etc.\n *\n * <p>The framework will instantiate an implementation of this class on behalf of the application.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FEATURE_OPTIONS_PANEL",
    "type" : "int",
    "comment" : " Flag for the \"options panel\" feature.  This is enabled by default. ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_NO_TITLE",
    "type" : "int",
    "comment" : " Flag for the \"no title\" feature, turning off the title at the top\n     *  of the screen. ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Flag for the progress indicator feature.\n     *\n     * @deprecated No longer supported starting in API 21.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_LEFT_ICON",
    "type" : "int",
    "comment" : " Flag for having an icon on the left side of the title bar ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_RIGHT_ICON",
    "type" : "int",
    "comment" : " Flag for having an icon on the right side of the title bar ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_INDETERMINATE_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Flag for indeterminate progress.\n     *\n     * @deprecated No longer supported starting in API 21.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_CONTEXT_MENU",
    "type" : "int",
    "comment" : " Flag for the context menu.  This is enabled by default. ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_CUSTOM_TITLE",
    "type" : "int",
    "comment" : " Flag for custom title. You cannot combine this feature with other title features. ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_ACTION_BAR",
    "type" : "int",
    "comment" : "\n     * Flag for enabling the Action Bar.\n     * This is enabled by default for some devices. The Action Bar\n     * replaces the title bar and provides an alternate location\n     * for an on-screen menu button on some devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_ACTION_BAR_OVERLAY",
    "type" : "int",
    "comment" : "\n     * Flag for requesting an Action Bar that overlays window content.\n     * Normally an Action Bar will sit in the space above window content, but if this\n     * feature is requested along with {@link #FEATURE_ACTION_BAR} it will be layered over\n     * the window content itself. This is useful if you would like your app to have more control\n     * over how the Action Bar is displayed, such as letting application content scroll beneath\n     * an Action Bar with a transparent background or otherwise displaying a transparent/translucent\n     * Action Bar over application content.\n     *\n     * <p>This mode is especially useful with {@link View#SYSTEM_UI_FLAG_FULLSCREEN\n     * View.SYSTEM_UI_FLAG_FULLSCREEN}, which allows you to seamlessly hide the\n     * action bar in conjunction with other screen decorations.\n     *\n     * <p>As of {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, when an\n     * ActionBar is in this mode it will adjust the insets provided to\n     * {@link View#fitSystemWindows(android.graphics.Rect) View.fitSystemWindows(Rect)}\n     * to include the content covered by the action bar, so you can do layout within\n     * that space.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_FULLSCREENView.SYSTEM_UI_FLAG_FULLSCREEN", "android.view.View#fitSystemWindows(android.graphics.Rect)", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#FEATURE_ACTION_BAR" ]
  }, {
    "name" : "FEATURE_ACTION_MODE_OVERLAY",
    "type" : "int",
    "comment" : "\n     * Flag for specifying the behavior of action modes when an Action Bar is not present.\n     * If overlay is enabled, the action mode UI will be allowed to cover existing window content.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_SWIPE_TO_DISMISS",
    "type" : "int",
    "comment" : "\n     * Flag for requesting a decoration-free window that is dismissed by swiping from the left.\n     *\n     * @deprecated Swipe-to-dismiss isn't functional anymore.\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_CONTENT_TRANSITIONS",
    "type" : "int",
    "comment" : "\n     * Flag for requesting that window content changes should be animated using a\n     * TransitionManager.\n     *\n     * <p>The TransitionManager is set using\n     * {@link #setTransitionManager(android.transition.TransitionManager)}. If none is set,\n     * a default TransitionManager will be used.</p>\n     *\n     * @see #setContentView\n     ",
    "links" : [ "#setTransitionManager(android.transition.TransitionManager)" ]
  }, {
    "name" : "FEATURE_ACTIVITY_TRANSITIONS",
    "type" : "int",
    "comment" : "\n     * Enables Activities to run Activity Transitions either through sending or receiving\n     * ActivityOptions bundle created with\n     * {@link android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity,\n     * android.util.Pair[])} or {@link android.app.ActivityOptions#makeSceneTransitionAnimation(\n     * android.app.Activity, View, String)}.\n     ",
    "links" : [ "android.app.ActivityOptions#makeSceneTransitionAnimation(", "android.app.ActivityOptions#makeSceneTransitionAnimation(android.app.Activity" ]
  }, {
    "name" : "FEATURE_MAX",
    "type" : "int",
    "comment" : "\n     * Max value used as a feature ID\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROGRESS_VISIBILITY_ON",
    "type" : "int",
    "comment" : "\n     * Flag for setting the progress bar's visibility to VISIBLE.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_VISIBILITY_OFF",
    "type" : "int",
    "comment" : "\n     * Flag for setting the progress bar's visibility to GONE.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_INDETERMINATE_ON",
    "type" : "int",
    "comment" : "\n     * Flag for setting the progress bar's indeterminate mode on.\n     *\n     * @deprecated {@link #FEATURE_INDETERMINATE_PROGRESS} and related methods\n     *             are no longer supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_INDETERMINATE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_INDETERMINATE_OFF",
    "type" : "int",
    "comment" : "\n     * Flag for setting the progress bar's indeterminate mode off.\n     *\n     * @deprecated {@link #FEATURE_INDETERMINATE_PROGRESS} and related methods\n     *             are no longer supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_INDETERMINATE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_START",
    "type" : "int",
    "comment" : "\n     * Starting value for the (primary) progress.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_END",
    "type" : "int",
    "comment" : "\n     * Ending value for the (primary) progress.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_SECONDARY_START",
    "type" : "int",
    "comment" : "\n     * Lowest possible value for the secondary progress.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "PROGRESS_SECONDARY_END",
    "type" : "int",
    "comment" : "\n     * Highest possible value for the secondary progress.\n     *\n     * @deprecated {@link #FEATURE_PROGRESS} and related methods are no longer\n     *             supported starting in API 21.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "STATUS_BAR_BACKGROUND_TRANSITION_NAME",
    "type" : "String",
    "comment" : "\n     * The transitionName for the status bar background View when a custom background is used.\n     * @see android.view.Window#setStatusBarColor(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME",
    "type" : "String",
    "comment" : "\n     * The transitionName for the navigation bar background View when a custom background is used.\n     * @see android.view.Window#setNavigationBarColor(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FEATURES",
    "type" : "int",
    "comment" : "\n     * The default features enabled.\n     * @deprecated use {@link #getDefaultFeatures(android.content.Context)} instead.\n     ",
    "links" : [ "#getDefaultFeatures(android.content.Context)" ]
  }, {
    "name" : "ID_ANDROID_CONTENT",
    "type" : "int",
    "comment" : "\n     * The ID that the main layout in the XML layout file should have.\n     ",
    "links" : [ ]
  }, {
    "name" : "DECOR_CAPTION_SHADE_AUTO",
    "type" : "int",
    "comment" : "\n     * Flag for letting the theme drive the color of the window caption controls. Use with\n     * {@link #setDecorCaptionShade(int)}. This is the default value.\n     ",
    "links" : [ "#setDecorCaptionShade(int)" ]
  }, {
    "name" : "DECOR_CAPTION_SHADE_LIGHT",
    "type" : "int",
    "comment" : "\n     * Flag for setting light-color controls on the window caption. Use with\n     * {@link #setDecorCaptionShade(int)}.\n     ",
    "links" : [ "#setDecorCaptionShade(int)" ]
  }, {
    "name" : "DECOR_CAPTION_SHADE_DARK",
    "type" : "int",
    "comment" : "\n     * Flag for setting dark-color controls on the window caption. Use with\n     * {@link #setDecorCaptionShade(int)}.\n     ",
    "links" : [ "#setDecorCaptionShade(int)" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowStyle",
    "type" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnWindowDismissedCallback",
    "type" : "OnWindowDismissedCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnWindowSwipeDismissedCallback",
    "type" : "OnWindowSwipeDismissedCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowControllerCallback",
    "type" : "WindowControllerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemBarAppearance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecorCallback",
    "type" : "DecorCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnRestrictedCaptionAreaChangedListener",
    "type" : "OnRestrictedCaptionAreaChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRestrictedCaptionAreaRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareAccelerated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainer",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveChild",
    "type" : "Window",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsActive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasChildren",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseOnTouchOutside",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSetCloseOnTouchOutside",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForcedWindowFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFeatures",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalFeatures",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveWindowFormat",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveDimAmount",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultWindowFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasSoftInputMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayWithDecorCaptionEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseOnSwipeEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sToolkitSetFrameRateReadOnlyFlagValue",
    "type" : "boolean",
    "comment" : "\n     * To check if toolkitSetFrameRateReadOnly flag is enabled\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mWindowAttributes",
    "type" : "WindowManager.LayoutParams",
    "comment" : " The current window attributes.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Return the Context this window policy is running in, for retrieving\n     * resources and other information.\n     *\n     * @return Context The Context that was supplied to the constructor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TypedArray getWindowStyle()",
    "returnType" : "TypedArray",
    "comment" : "\n     * Return the {@link android.R.styleable#Window} attributes from this\n     * window's theme.\n     ",
    "links" : [ "android.R.styleable#Window" ]
  }, {
    "name" : "public void setContainer(Window container)",
    "returnType" : "void",
    "comment" : "\n     * Set the container for this window.  If not set, the DecorWindow\n     * operates as a top-level window; otherwise, it negotiates with the\n     * container to display itself appropriately.\n     *\n     * @param container The desired containing Window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Window getContainer()",
    "returnType" : "Window",
    "comment" : "\n     * Return the container for this Window.\n     *\n     * @return Window The containing window, or null if this is a\n     *         top-level window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasChildren()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void destroy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void onDestroy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowManager(WindowManager wm, IBinder appToken, String appName)",
    "returnType" : "void",
    "comment" : "\n     * Set the window manager for use by this Window to, for example,\n     * display panels.  This is <em>not</em> used for displaying the\n     * Window itself -- that must be done by the client.\n     *\n     * @param wm The window manager for adding new windows.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowManager(WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated)",
    "returnType" : "void",
    "comment" : "\n     * Set the window manager for use by this Window to, for example,\n     * display panels.  This is <em>not</em> used for displaying the\n     * Window itself -- that must be done by the client.\n     *\n     * @param wm The window manager for adding new windows.\n     ",
    "links" : [ ]
  }, {
    "name" : " void adjustLayoutParamsForSubWindow(WindowManager.LayoutParams wp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowManager getWindowManager()",
    "returnType" : "WindowManager",
    "comment" : "\n     * Return the window manager allowing this Window to display its own\n     * windows.\n     *\n     * @return WindowManager The ViewManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallback(Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Set the Callback interface for this window, used to intercept key\n     * events and other dynamic operations in the window.\n     *\n     * @param callback The desired Callback interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Callback getCallback()",
    "returnType" : "Callback",
    "comment" : "\n     * Return the current Callback interface for this window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void addOnFrameMetricsAvailableListener(@NonNull OnFrameMetricsAvailableListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Set an observer to collect frame stats for each frame rendered in this window.\n     *\n     * Must be in hardware rendering mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeOnFrameMetricsAvailableListener(OnFrameMetricsAvailableListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove observer and stop listening to frame stats for this window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setOnWindowDismissedCallback(OnWindowDismissedCallback dcb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnWindowDismissed(boolean finishTask, boolean suppressWindowTransition)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setOnWindowSwipeDismissedCallback(OnWindowSwipeDismissedCallback sdcb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnWindowSwipeDismissed()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setWindowControllerCallback(WindowControllerCallback wccb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final WindowControllerCallback getWindowControllerCallback()",
    "returnType" : "WindowControllerCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setDecorCallback(DecorCallback decorCallback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setSystemBarAppearance(@WindowInsetsController.Appearance int appearance)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getSystemBarAppearance()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void dispatchOnSystemBarAppearanceChanged(@WindowInsetsController.Appearance int appearance)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean onDrawLegacyNavigationBarBackgroundChanged(boolean drawLegacyNavigationBarBackground)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void setRestrictedCaptionAreaListener(OnRestrictedCaptionAreaChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a callback for changes of area where caption will draw its content.\n     *\n     * @param listener Callback that will be called when the area changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setHideOverlayWindows(boolean hide)",
    "returnType" : "void",
    "comment" : "\n     * Prevent non-system overlay windows from being drawn on top of this window.\n     *\n     * @param hide whether non-system overlay windows should be hidden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void takeSurface(SurfaceHolder.Callback2 callback)",
    "returnType" : "void",
    "comment" : "\n     * Take ownership of this window's surface.  The window's view hierarchy\n     * will no longer draw into the surface, though it will otherwise continue\n     * to operate (such as for receiving input events).  The given SurfaceHolder\n     * callback will be used to tell you about state changes to the surface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void takeInputQueue(InputQueue.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Take ownership of this window's InputQueue.  The window will no\n     * longer read and dispatch input events from the queue; it is your\n     * responsibility to do so.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isFloating()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this window is being displayed with a floating style\n     * (based on the {@link android.R.attr#windowIsFloating} attribute in\n     * the style/theme).\n     *\n     * @return Returns true if the window is configured to be displayed floating\n     * on top of whatever is behind it.\n     ",
    "links" : [ "android.R.attr#windowIsFloating" ]
  }, {
    "name" : "public void setLayout(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Set the width and height layout parameters of the window.  The default\n     * for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT\n     * or an absolute value to make a window that is not full-screen.\n     *\n     * @param width The desired layout width of the window.\n     * @param height The desired layout height of the window.\n     *\n     * @see ViewGroup.LayoutParams#height\n     * @see ViewGroup.LayoutParams#width\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Set the gravity of the window, as per the Gravity constants.  This\n     * controls how the window manager is positioned in the overall window; it\n     * is only useful when using WRAP_CONTENT for the layout width or height.\n     *\n     * @param gravity The desired gravity constant.\n     *\n     * @see Gravity\n     * @see #setLayout\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Set the type of the window, as per the WindowManager.LayoutParams\n     * types.\n     *\n     * @param type The new window type (see WindowManager.LayoutParams).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFormat(int format)",
    "returnType" : "void",
    "comment" : "\n     * Set the format of window, as per the PixelFormat types.  This overrides\n     * the default format that is selected by the Window based on its\n     * window decorations.\n     *\n     * @param format The new window format (see PixelFormat).  Use\n     *               PixelFormat.UNKNOWN to allow the Window to select\n     *               the format.\n     *\n     * @see PixelFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowAnimations(@StyleRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Specify custom animations to use for the window, as per\n     * {@link WindowManager.LayoutParams#windowAnimations\n     * WindowManager.LayoutParams.windowAnimations}.  Providing anything besides\n     * 0 here will override the animations the window would\n     * normally retrieve from its theme.\n     ",
    "links" : [ "WindowManager.LayoutParams#windowAnimationsWindowManager.LayoutParams.windowAnimations" ]
  }, {
    "name" : "public void setSoftInputMode(int mode)",
    "returnType" : "void",
    "comment" : "\n     * Specify an explicit soft input mode to use for the window, as per\n     * {@link WindowManager.LayoutParams#softInputMode\n     * WindowManager.LayoutParams.softInputMode}.  Providing anything besides\n     * \"unspecified\" here will override the input mode the window would\n     * normally retrieve from its theme.\n     ",
    "links" : [ "WindowManager.LayoutParams#softInputModeWindowManager.LayoutParams.softInputMode" ]
  }, {
    "name" : "public void addFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Convenience function to set the flag bits as specified in flags, as\n     * per {@link #setFlags}.\n     * @param flags The flag bits to be set.\n     * @see #setFlags\n     * @see #clearFlags\n     ",
    "links" : [ "#setFlags" ]
  }, {
    "name" : "public void addPrivateFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Add private flag bits.\n     *\n     * <p>Refer to the individual flags for the permissions needed.\n     *\n     * @param flags The flag bits to add.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSystemFlags(@WindowManager.LayoutParams.SystemFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Add system flag bits.\n     *\n     * <p>Refer to the individual flags for the permissions needed.\n     *\n     * <p>Note: Only for updateable system components (aka. mainline modules)\n     *\n     * @param flags The flag bits to add.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Convenience function to clear the flag bits as specified in flags, as\n     * per {@link #setFlags}.\n     * @param flags The flag bits to be cleared.\n     * @see #setFlags\n     * @see #addFlags\n     ",
    "links" : [ "#setFlags" ]
  }, {
    "name" : "public void setFlags(int flags, int mask)",
    "returnType" : "void",
    "comment" : "\n     * Set the flags of the window, as per the\n     * {@link WindowManager.LayoutParams WindowManager.LayoutParams}\n     * flags.\n     *\n     * <p>Note that some flags must be set before the window decoration is\n     * created (by the first call to\n     * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)} or\n     * {@link #getDecorView()}:\n     * {@link WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN} and\n     * {@link WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR}.  These\n     * will be set for you based on the {@link android.R.attr#windowIsFloating}\n     * attribute.\n     *\n     * @param flags The new window flags (see WindowManager.LayoutParams).\n     * @param mask Which of the window flag bits to modify.\n     * @see #addFlags\n     * @see #clearFlags\n     ",
    "links" : [ "#setContentView(View", "#getDecorView()", "WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN", "WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR", "android.R.attr#windowIsFloating", "WindowManager.LayoutParams" ]
  }, {
    "name" : "private void setPrivateFlags(int flags, int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchWindowAttributesChanged(WindowManager.LayoutParams attrs)",
    "returnType" : "void",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorMode(@ActivityInfo.ColorMode int colorMode)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the requested color mode of the window. The requested the color mode might\n     * override the window's pixel {@link WindowManager.LayoutParams#format format}.</p>\n     *\n     * <p>The requested color mode must be one of {@link ActivityInfo#COLOR_MODE_DEFAULT},\n     * {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT} or {@link ActivityInfo#COLOR_MODE_HDR}.</p>\n     *\n     * <p>The requested color mode is not guaranteed to be honored. Please refer to\n     * {@link #getColorMode()} for more information.</p>\n     *\n     * @see #getColorMode()\n     * @see Display#isWideColorGamut()\n     * @see Configuration#isScreenWideColorGamut()\n     ",
    "links" : [ "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "WindowManager.LayoutParams#format", "#getColorMode()", "android.content.pm.ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT", "android.content.pm.ActivityInfo#COLOR_MODE_DEFAULT" ]
  }, {
    "name" : "public void setDesiredHdrHeadroom(@FloatRange(from = 0.0f, to = 10000.0) float desiredHeadroom)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the desired about of HDR headroom to be used when rendering as a ratio of\n     * targetHdrPeakBrightnessInNits / targetSdrWhitePointInNits. Only applies when\n     * {@link #setColorMode(int)} is {@link ActivityInfo#COLOR_MODE_HDR}</p>\n     *\n     * <p>By default the system will choose an amount of HDR headroom that is appropriate\n     * for the underlying device capabilities & bit-depth of the panel. However, for some types\n     * of content this can end up being more headroom than necessary or desired. An example\n     * would be a messaging app or gallery thumbnail view where some amount of HDR pop is desired\n     * without overly influencing the perceived brightness of the majority SDR content. This can\n     * also be used to animate in/out of an HDR range for smoother transitions.</p>\n     *\n     * <p>Note: The actual amount of HDR headroom that will be given is subject to a variety\n     * of factors such as ambient conditions, display capabilities, or bit-depth limitations.\n     * See {@link Display#getHdrSdrRatio()} for more information as well as how to query the\n     * current value.</p>\n     *\n     * @param desiredHeadroom The amount of HDR headroom that is desired. Must be >= 1.0 (no HDR)\n     *                        and <= 10,000.0. Passing 0.0 will reset to the default, automatically\n     *                        chosen value.\n     * @see #getDesiredHdrHeadroom()\n     * @see Display#getHdrSdrRatio()\n     ",
    "links" : [ "#setColorMode(int)", "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "android.view.Display#getHdrSdrRatio()" ]
  }, {
    "name" : "public float getDesiredHdrHeadroom()",
    "returnType" : "float",
    "comment" : "\n     * Get the desired amount of HDR headroom as set by {@link #setDesiredHdrHeadroom(float)}\n     * @return The amount of HDR headroom set, or 0 for automatic/default behavior.\n     * @see #setDesiredHdrHeadroom(float)\n     ",
    "links" : [ "#setDesiredHdrHeadroom(float)" ]
  }, {
    "name" : "public void setFrameRateBoostOnTouchEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the frame rate touch boost is enabled for this Window.\n     * When enabled, the frame rate will be boosted when a user touches the Window.\n     *\n     * @param enabled whether the frame rate touch boost is enabled.\n     * @see #getFrameRateBoostOnTouchEnabled()\n     * @see WindowManager.LayoutParams#setFrameRateBoostOnTouchEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getFrameRateBoostOnTouchEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether frame rate touch boost is enabled\n     * {@link #setFrameRateBoostOnTouchEnabled(boolean)}\n     *\n     * @return whether the frame rate touch boost is enabled.\n     * @see #setFrameRateBoostOnTouchEnabled(boolean)\n     * @see WindowManager.LayoutParams#getFrameRateBoostOnTouchEnabled()\n     ",
    "links" : [ "#setFrameRateBoostOnTouchEnabled(boolean)" ]
  }, {
    "name" : "public void setFrameRatePowerSavingsBalanced(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether frameratepowersavingsbalance is enabled for this Window.\n     * This allows device to adjust refresh rate\n     * as needed and can be useful for power saving.\n     *\n     * @param enabled whether the frameratepowersavingsbalance is enabled.\n     * @see #isFrameRatePowerSavingsBalanced()\n     * @see WindowManager.LayoutParams#setFrameRatePowerSavingsBalanced(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrameRatePowerSavingsBalanced()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether frameratepowersavingsbalance is enabled for this Window.\n     * This allows device to adjust refresh rate\n     * as needed and can be useful for power saving.\n     * {@link #setFrameRateBoostOnTouchEnabled(boolean)}\n     *\n     * @return whether the frameratepowersavingsbalance is enabled.\n     * @see #setFrameRatePowerSavingsBalanced(boolean)\n     * @see WindowManager.LayoutParams#isFrameRatePowerSavingsBalanced()\n     ",
    "links" : [ "#setFrameRateBoostOnTouchEnabled(boolean)" ]
  }, {
    "name" : "public void setPreferMinimalPostProcessing(boolean isPreferred)",
    "returnType" : "void",
    "comment" : "\n     * If {@code isPreferred} is true, this method requests that the connected display does minimal\n     * post processing when this window is visible on the screen. Otherwise, it requests that the\n     * display switches back to standard image processing.\n     *\n     * <p> By default, the display does not do minimal post processing and if this is desired, this\n     * method should not be used. It should be used with {@code isPreferred=true} when low\n     * latency has a higher priority than image enhancement processing (e.g. for games or video\n     * conferencing). The display will automatically go back into standard image processing mode\n     * when no window requesting minimal posst processing is visible on screen anymore.\n     * {@code setPreferMinimalPostProcessing(false)} can be used if\n     * {@code setPreferMinimalPostProcessing(true)} was previously called for this window and\n     * minimal post processing is no longer required.\n     *\n     * <p>If the Display sink is connected via HDMI, the device will begin to send infoframes with\n     * Auto Low Latency Mode enabled and Game Content Type. This will switch the connected display\n     * to a minimal image processing mode (if available), which reduces latency, improving the user\n     * experience for gaming or video conferencing applications. For more information, see HDMI 2.1\n     * specification.\n     *\n     * <p>If the Display sink has an internal connection or uses some other protocol than HDMI,\n     * effects may be similar but implementation-defined.\n     *\n     * <p>The ability to switch to a mode with minimal post proessing may be disabled by a user\n     * setting in the system settings menu. In that case, this method does nothing.\n     *\n     * @see android.content.pm.ActivityInfo#FLAG_PREFER_MINIMAL_POST_PROCESSING\n     * @see android.view.Display#isMinimalPostProcessingSupported\n     * @see android.view.WindowManager.LayoutParams#preferMinimalPostProcessing\n     *\n     * @param isPreferred Indicates whether minimal post processing is preferred for this window\n     *                    ({@code isPreferred=true}) or not ({@code isPreferred=false}).\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColorMode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the requested color mode of the window, one of\n     * {@link ActivityInfo#COLOR_MODE_DEFAULT}, {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT}\n     * or {@link ActivityInfo#COLOR_MODE_HDR}. If {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT}\n     * was requested it is possible the window will not be put in wide color gamut mode depending\n     * on device and display support for that mode. Use {@link #isWideColorGamut} to determine\n     * if the window is currently in wide color gamut mode.\n     *\n     * @see #setColorMode(int)\n     * @see Display#isWideColorGamut()\n     * @see Configuration#isScreenWideColorGamut()\n     ",
    "links" : [ "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "android.content.pm.ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT", "android.content.pm.ActivityInfo#COLOR_MODE_DEFAULT", "#isWideColorGamut" ]
  }, {
    "name" : "public boolean isWideColorGamut()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this window's color mode is {@link ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT},\n     * the display has a wide color gamut and this device supports wide color gamut rendering.\n     *\n     * @see Display#isWideColorGamut()\n     * @see Configuration#isScreenWideColorGamut()\n     ",
    "links" : [ "android.content.pm.ActivityInfo#COLOR_MODE_WIDE_COLOR_GAMUT" ]
  }, {
    "name" : "public void setDimAmount(float amount)",
    "returnType" : "void",
    "comment" : "\n     * Set the amount of dim behind the window when using\n     * {@link WindowManager.LayoutParams#FLAG_DIM_BEHIND}.  This overrides\n     * the default dim amount of that is selected by the Window based on\n     * its theme.\n     *\n     * @param amount The new dim amount, from 0 for no dim to 1 for full dim.\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_DIM_BEHIND" ]
  }, {
    "name" : "public void setDecorFitsSystemWindows(boolean decorFitsSystemWindows)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the decor view should fit root-level content views for {@link WindowInsets}.\n     * <p>\n     * If set to {@code true}, the framework will inspect the now deprecated\n     * {@link View#SYSTEM_UI_LAYOUT_FLAGS} as well the\n     * {@link WindowManager.LayoutParams#SOFT_INPUT_ADJUST_RESIZE} flag and fits content according\n     * to these flags.\n     *\n     * <p>\n     * If set to {@code false}, the framework will not fit the content view to the insets and will\n     * just pass through the {@link WindowInsets} to the content view.\n     *\n     * <p>\n     * If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM VANILLA_ICE_CREAM} or above,\n     * the behavior will be like setting this to {@code false}, and cannot be changed.\n     *\n     * @param decorFitsSystemWindows Whether the decor view should fit root-level content views for\n     *                               insets.\n     * @deprecated Make space in the container views to prevent the critical elements from getting\n     *             obscured by {@link WindowInsets.Type#systemBars()} or\n     *             {@link WindowInsets.Type#displayCutout()} instead.\n     ",
    "links" : [ "WindowInsets.Type#displayCutout()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.view.View#SYSTEM_UI_LAYOUT_FLAGS", "android.view.WindowInsets", "WindowInsets.Type#systemBars()", "WindowManager.LayoutParams#SOFT_INPUT_ADJUST_RESIZE" ]
  }, {
    "name" : "public boolean decorFitsSystemWindows()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributes(WindowManager.LayoutParams a)",
    "returnType" : "void",
    "comment" : "\n     * Specify custom window attributes.  <strong>PLEASE NOTE:</strong> the\n     * layout params you give here should generally be from values previously\n     * retrieved with {@link #getAttributes()}; you probably do not want to\n     * blindly create and apply your own, since this will blow away any values\n     * set by the framework that you are not interested in.\n     *\n     * @param a The new window attributes, which will completely override any\n     *          current values.\n     ",
    "links" : [ "#getAttributes()" ]
  }, {
    "name" : "public final WindowManager.LayoutParams getAttributes()",
    "returnType" : "WindowManager.LayoutParams",
    "comment" : "\n     * Retrieve the current window attributes associated with this panel.\n     *\n     * @return WindowManager.LayoutParams Either the existing window\n     *         attributes object, or a freshly created one if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int getForcedWindowFlags()",
    "returnType" : "int",
    "comment" : "\n     * Return the window flags that have been explicitly set by the client,\n     * so will not be modified by {@link #getDecorView}.\n     ",
    "links" : [ "#getDecorView" ]
  }, {
    "name" : "protected final boolean hasSoftInputMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Has the app specified their own soft input mode?\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCloseOnTouchOutside(boolean close)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCloseOnTouchOutsideIfNotSet(boolean close)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldCloseOnTouchOutside()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void alwaysReadCloseOnTouchAttr()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldCloseOnTouch(Context context, MotionEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSustainedPerformanceMode(boolean enable)",
    "returnType" : "void",
    "comment" : " Sets the Sustained Performance requirement for the calling window.\n     * @param enable disables or enables the mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isOutOfBounds(Context context, MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requestFeature(int featureId)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable extended screen features.  This must be called before\n     * setContentView().  May be called as many times as desired as long as it\n     * is before setContentView().  If not called, no extended features\n     * will be available.  You can not turn off a feature once it is requested.\n     * You canot use other title features with {@link #FEATURE_CUSTOM_TITLE}.\n     *\n     * @param featureId The desired features, defined as constants by Window.\n     * @return The features that are now set.\n     ",
    "links" : [ "#FEATURE_CUSTOM_TITLE" ]
  }, {
    "name" : "protected void removeFeature(int featureId)",
    "returnType" : "void",
    "comment" : "\n     * @hide Used internally to help resolve conflicting features.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void makeActive()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isActive()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T findViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds a view that was identified by the {@code android:id} XML attribute\n     * that was processed in {@link android.app.Activity#onCreate}.\n     * <p>\n     * This will implicitly call {@link #getDecorView} with all of the associated side-effects.\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID if found, or {@code null} otherwise\n     * @see View#findViewById(int)\n     * @see Window#requireViewById(int)\n     ",
    "links" : [ "android.app.Activity#onCreate", "#getDecorView" ]
  }, {
    "name" : "public final T requireViewById(@IdRes int id)",
    "returnType" : "T",
    "comment" : "\n     * Finds a view that was identified by the {@code android:id} XML attribute\n     * that was processed in {@link android.app.Activity#onCreate}, or throws an\n     * IllegalArgumentException if the ID is invalid, or there is no matching view in the hierarchy.\n     * <p>\n     * <strong>Note:</strong> In most cases -- depending on compiler support --\n     * the resulting view is automatically cast to the target class type. If\n     * the target class type is unconstrained, an explicit cast may be\n     * necessary.\n     *\n     * @param id the ID to search for\n     * @return a view with given ID\n     * @see View#requireViewById(int)\n     * @see Window#findViewById(int)\n     ",
    "links" : [ "android.app.Activity#onCreate" ]
  }, {
    "name" : "public abstract void setContentView(@LayoutRes int layoutResID)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for\n     * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)}\n     * to set the screen content from a layout resource.  The resource will be\n     * inflated, adding all top-level views to the screen.\n     *\n     * @param layoutResID Resource ID to be inflated.\n     * @see #setContentView(View, android.view.ViewGroup.LayoutParams)\n     ",
    "links" : [ "#setContentView(View" ]
  }, {
    "name" : "public abstract void setContentView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Convenience for\n     * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)}\n     * set the screen content to an explicit view.  This view is placed\n     * directly into the screen's view hierarchy.  It can itself be a complex\n     * view hierarhcy.\n     *\n     * @param view The desired content to display.\n     * @see #setContentView(View, android.view.ViewGroup.LayoutParams)\n     ",
    "links" : [ "#setContentView(View" ]
  }, {
    "name" : "public abstract void setContentView(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Set the screen content to an explicit view.  This view is placed\n     * directly into the screen's view hierarchy.  It can itself be a complex\n     * view hierarchy.\n     *\n     * <p>Note that calling this function \"locks in\" various characteristics\n     * of the window that can not, from this point forward, be changed: the\n     * features that have been requested with {@link #requestFeature(int)},\n     * and certain window flags as described in {@link #setFlags(int, int)}.</p>\n     *\n     * <p>If {@link #FEATURE_CONTENT_TRANSITIONS} is set, the window's\n     * TransitionManager will be used to animate content from the current\n     * content View to view.</p>\n     *\n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     * @see #getTransitionManager()\n     * @see #setTransitionManager(android.transition.TransitionManager)\n     ",
    "links" : [ "#setFlags(int", "#FEATURE_CONTENT_TRANSITIONS", "#requestFeature(int)" ]
  }, {
    "name" : "public abstract void addContentView(View view, ViewGroup.LayoutParams params)",
    "returnType" : "void",
    "comment" : "\n     * Variation on\n     * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)}\n     * to add an additional content view to the screen.  Added after any existing\n     * ones in the screen -- existing views are NOT removed.\n     *\n     * @param view The desired content to display.\n     * @param params Layout parameters for the view.\n     ",
    "links" : [ "#setContentView(View" ]
  }, {
    "name" : "public abstract void clearContentView()",
    "returnType" : "void",
    "comment" : "\n     * Remove the view that was used as the screen content.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract View getCurrentFocus()",
    "returnType" : "View",
    "comment" : "\n     * Return the view in this Window that currently has focus, or null if\n     * there are none.  Note that this does not look in any containing\n     * Window.\n     *\n     * @return View The current View with focus or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LayoutInflater getLayoutInflater()",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Quick access to the {@link LayoutInflater} instance that this Window\n     * retrieved from its Context.\n     *\n     * @return LayoutInflater The shared LayoutInflater.\n     ",
    "links" : [ "android.view.LayoutInflater" ]
  }, {
    "name" : "public abstract void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setTitleColor(@ColorInt int textColor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void openPanel(int featureId, KeyEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void closePanel(int featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void togglePanel(int featureId, KeyEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void invalidatePanelMenu(int featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean performPanelShortcut(int featureId, int keyCode, KeyEvent event, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean performPanelIdentifierAction(int featureId, int id, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void closeAllPanels()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean performContextMenuIdentifierAction(int id, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Should be called when the configuration is changed.\n     *\n     * @param newConfig The new configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setElevation(float elevation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the window elevation.\n     * <p>\n     * Changes to this property take effect immediately and will cause the\n     * window surface to be recreated. This is an expensive operation and as a\n     * result, this property should not be animated.\n     *\n     * @param elevation The window elevation.\n     * @see View#setElevation(float)\n     * @see android.R.styleable#Window_windowElevation\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getElevation()",
    "returnType" : "float",
    "comment" : "\n     * Gets the window elevation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setClipToOutline(boolean clipToOutline)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether window content should be clipped to the outline of the\n     * window background.\n     *\n     * @param clipToOutline Whether window content should be clipped to the\n     *                      outline of the window background.\n     * @see View#setClipToOutline(boolean)\n     * @see android.R.styleable#Window_windowClipToOutline\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundDrawableResource(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Change the background of this window to a Drawable resource. Setting the\n     * background to null will make the window be opaque. To make the window\n     * transparent, you can use an empty drawable (for instance a ColorDrawable\n     * with the color 0 or the system drawable android:drawable/empty.)\n     *\n     * @param resId The resource identifier of a drawable resource which will\n     *              be installed as the new background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setBackgroundDrawable(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Change the background of this window to a custom Drawable. Setting the\n     * background to null will make the window be opaque. To make the window\n     * transparent, you can use an empty drawable (for instance a ColorDrawable\n     * with the color 0 or the system drawable android:drawable/empty.)\n     *\n     * @param drawable The new Drawable to use for this window's background.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundBlurRadius(int blurRadius)",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Blurs the screen behind the window within the bounds of the window.\n     * </p><p>\n     * The density of the blur is set by the blur radius. The radius defines the size\n     * of the neighbouring area, from which pixels will be averaged to form the final\n     * color for each pixel. The operation approximates a Gaussian blur.\n     * A radius of 0 means no blur. The higher the radius, the denser the blur.\n     * </p><p>\n     * The window background drawable is drawn on top of the blurred region. The blur\n     * region bounds and rounded corners will mimic those of the background drawable.\n     * </p><p>\n     * For the blur region to be visible, the window has to be translucent\n     * (see {@link android.R.attr#windowIsTranslucent}) and floating\n     * (see {@link android.R.attr#windowIsFloating}).\n     * </p><p>\n     * Note the difference with {@link WindowManager.LayoutParams#setBlurBehindRadius},\n     * which blurs the whole screen behind the window. Background blur blurs the screen behind\n     * only within the bounds of the window.\n     * </p><p>\n     * Some devices might not support cross-window blur due to GPU limitations. It can also be\n     * disabled at runtime, e.g. during battery saving mode, when multimedia tunneling is used or\n     * when minimal post processing is requested. In such situations, no blur will be computed or\n     * drawn, resulting in a transparent window background. To avoid this, the app might want to\n     * change its theme to one that does not use blurs. To listen for cross-window blur\n     * enabled/disabled events, use {@link WindowManager#addCrossWindowBlurEnabledListener}.\n     * </p>\n     *\n     * @param blurRadius The blur radius to use for window background blur in pixels\n     *\n     * @see android.R.styleable#Window_windowBackgroundBlurRadius\n     * @see WindowManager.LayoutParams#setBlurBehindRadius\n     * @see WindowManager#addCrossWindowBlurEnabledListener\n     ",
    "links" : [ "android.view.WindowManager#addCrossWindowBlurEnabledListener", "android.R.attr#windowIsFloating", "WindowManager.LayoutParams#setBlurBehindRadius", "android.R.attr#windowIsTranslucent" ]
  }, {
    "name" : "public abstract void setFeatureDrawableResource(int featureId, @DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for a drawable feature of this window, from a resource\n     * identifier.  You must have called requestFeature(featureId) before\n     * calling this function.\n     *\n     * @see android.content.res.Resources#getDrawable(int)\n     *\n     * @param featureId The desired drawable feature to change, defined as a\n     * constant by Window.\n     * @param resId Resource identifier of the desired image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeatureDrawableUri(int featureId, Uri uri)",
    "returnType" : "void",
    "comment" : "\n     * Set the value for a drawable feature of this window, from a URI. You\n     * must have called requestFeature(featureId) before calling this\n     * function.\n     *\n     * <p>The only URI currently supported is \"content:\", specifying an image\n     * in a content provider.\n     *\n     * @see android.widget.ImageView#setImageURI\n     *\n     * @param featureId The desired drawable feature to change. Features are\n     * constants defined by Window.\n     * @param uri The desired URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeatureDrawable(int featureId, Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Set an explicit Drawable value for feature of this window. You must\n     * have called requestFeature(featureId) before calling this function.\n     *\n     * @param featureId The desired drawable feature to change. Features are\n     *                  constants defined by Window.\n     * @param drawable A Drawable object to display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeatureDrawableAlpha(int featureId, int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Set a custom alpha value for the given drawable feature, controlling how\n     * much the background is visible through it.\n     *\n     * @param featureId The desired drawable feature to change. Features are\n     *                  constants defined by Window.\n     * @param alpha The alpha amount, 0 is completely transparent and 255 is\n     *              completely opaque.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setFeatureInt(int featureId, int value)",
    "returnType" : "void",
    "comment" : "\n     * Set the integer value for a feature. The range of the value depends on\n     * the feature being set. For {@link #FEATURE_PROGRESS}, it should go from\n     * 0 to 10000. At 10000 the progress is complete and the indicator hidden.\n     *\n     * @param featureId The desired feature to change. Features are constants\n     *                  defined by Window.\n     * @param value The value for the feature. The interpretation of this\n     *              value is feature-specific.\n     ",
    "links" : [ "#FEATURE_PROGRESS" ]
  }, {
    "name" : "public abstract void takeKeyEvents(boolean get)",
    "returnType" : "void",
    "comment" : "\n     * Request that key events come to this activity. Use this if your\n     * activity has no views with focus, but the activity still wants\n     * a chance to process key events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean superDispatchKeyEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by custom windows, such as Dialog, to pass the key press event\n     * further down the view hierarchy. Application developers should\n     * not need to implement or call this.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean superDispatchKeyShortcutEvent(KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by custom windows, such as Dialog, to pass the key shortcut press event\n     * further down the view hierarchy. Application developers should\n     * not need to implement or call this.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean superDispatchTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by custom windows, such as Dialog, to pass the touch screen event\n     * further down the view hierarchy. Application developers should\n     * not need to implement or call this.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean superDispatchTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by custom windows, such as Dialog, to pass the trackball event\n     * further down the view hierarchy. Application developers should\n     * not need to implement or call this.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean superDispatchGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by custom windows, such as Dialog, to pass the generic motion event\n     * further down the view hierarchy. Application developers should\n     * not need to implement or call this.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract View getDecorView()",
    "returnType" : "View",
    "comment" : "\n     * Retrieve the top-level window decor view (containing the standard\n     * window frame/decorations and the client's content inside of that), which\n     * can be added as a window to the window manager.\n     *\n     * <p><em>Note that calling this function for the first time \"locks in\"\n     * various window characteristics as described in\n     * {@link #setContentView(View, android.view.ViewGroup.LayoutParams)}.</em></p>\n     *\n     * @return Returns the top-level window decor view.\n     ",
    "links" : [ "#setContentView(View" ]
  }, {
    "name" : "public View getStatusBarBackgroundView()",
    "returnType" : "View",
    "comment" : "\n     * @return the status bar background view or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getNavigationBarBackgroundView()",
    "returnType" : "View",
    "comment" : "\n     * @return the navigation bar background view or null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract View peekDecorView()",
    "returnType" : "View",
    "comment" : "\n     * Retrieve the current decor view, but only if it has already been created;\n     * otherwise returns null.\n     *\n     * @return Returns the top-level window decor or null.\n     * @see #getDecorView\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Bundle saveHierarchyState()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void restoreHierarchyState(Bundle savedInstanceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void onActive()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int getFeatures()",
    "returnType" : "int",
    "comment" : "\n     * Return the feature bits that are enabled.  This is the set of features\n     * that were given to requestFeature(), and are being handled by this\n     * Window itself or its container.  That is, it is the set of\n     * requested features that you can actually use.\n     *\n     * <p>To do: add a public version of this API that allows you to check for\n     * features by their feature ID.\n     *\n     * @return int The feature bits.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getDefaultFeatures(Context context)",
    "returnType" : "int",
    "comment" : "\n     * Return the feature bits set by default on a window.\n     * @param context The context used to access resources\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFeature(int feature)",
    "returnType" : "boolean",
    "comment" : "\n     * Query for the availability of a certain feature.\n     *\n     * @param feature The feature ID to check\n     * @return true if the feature is enabled, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int getLocalFeatures()",
    "returnType" : "int",
    "comment" : "\n     * Return the feature bits that are being implemented by this Window.\n     * This is the set of features that were given to requestFeature(), and are\n     * being handled by only this Window itself, not by its containers.\n     *\n     * @return int The feature bits.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setDefaultWindowFormat(int format)",
    "returnType" : "void",
    "comment" : "\n     * Set the default format of window, as per the PixelFormat types.  This\n     * is the format that will be used unless the client specifies in explicit\n     * format with setFormat();\n     *\n     * @param format The new window format (see PixelFormat).\n     *\n     * @see #setFormat\n     * @see PixelFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean haveDimAmount()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setChildDrawable(int featureId, Drawable drawable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void setChildInt(int featureId, int value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isShortcutKey(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Is a keypress one of the defined shortcut keys for this window.\n     * @param keyCode the key code from {@link android.view.KeyEvent} to check.\n     * @param event the {@link android.view.KeyEvent} to use to help check.\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public abstract void setVolumeControlStream(int streamType)",
    "returnType" : "void",
    "comment" : "\n     * @see android.app.Activity#setVolumeControlStream(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getVolumeControlStream()",
    "returnType" : "int",
    "comment" : "\n     * @see android.app.Activity#getVolumeControlStream()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMediaController(MediaController controller)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link MediaController} to send media keys and volume changes to.\n     * If set, this should be preferred for all media keys and volume requests\n     * sent to this window.\n     *\n     * @param controller The controller for the session which should receive\n     *            media keys and volume changes.\n     * @see android.app.Activity#setMediaController(android.media.session.MediaController)\n     ",
    "links" : [ "android.media.session.MediaController" ]
  }, {
    "name" : "public MediaController getMediaController()",
    "returnType" : "MediaController",
    "comment" : "\n     * Gets the {@link MediaController} that was previously set.\n     *\n     * @return The controller which should receive events.\n     * @see #setMediaController(android.media.session.MediaController)\n     * @see android.app.Activity#getMediaController()\n     ",
    "links" : [ "android.media.session.MediaController" ]
  }, {
    "name" : "public void setUiOptions(int uiOptions)",
    "returnType" : "void",
    "comment" : "\n     * Set extra options that will influence the UI for this window.\n     * @param uiOptions Flags specifying extra options for this window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUiOptions(int uiOptions, int mask)",
    "returnType" : "void",
    "comment" : "\n     * Set extra options that will influence the UI for this window.\n     * Only the bits filtered by mask will be modified.\n     * @param uiOptions Flags specifying extra options for this window.\n     * @param mask Flags specifying which options should be modified. Others will remain unchanged.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the primary icon for this window.\n     *\n     * @param resId resource ID of a drawable to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultIcon(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the default icon for this window.\n     * This will be overridden by any other icon set operation which could come from the\n     * theme or another explicit set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLogo(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the logo for this window. A logo is often shown in place of an\n     * {@link #setIcon(int) icon} but is generally wider and communicates window title information\n     * as well.\n     *\n     * @param resId resource ID of a drawable to set\n     ",
    "links" : [ "#setIcon(int)" ]
  }, {
    "name" : "public void setDefaultLogo(@DrawableRes int resId)",
    "returnType" : "void",
    "comment" : "\n     * Set the default logo for this window.\n     * This will be overridden by any other logo set operation which could come from the\n     * theme or another explicit set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalFocus(boolean hasFocus, boolean inTouchMode)",
    "returnType" : "void",
    "comment" : "\n     * Set focus locally. The window should have the\n     * {@link WindowManager.LayoutParams#FLAG_LOCAL_FOCUS_MODE} flag set already.\n     * @param hasFocus Whether this window has focus or not.\n     * @param inTouchMode Whether this window is in touch mode or not.\n     ",
    "links" : [ "WindowManager.LayoutParams#FLAG_LOCAL_FOCUS_MODE" ]
  }, {
    "name" : "public void injectInputEvent(InputEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Inject an event to window locally.\n     * @param event A key or touch event to inject to this window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TransitionManager getTransitionManager()",
    "returnType" : "TransitionManager",
    "comment" : "\n     * Retrieve the {@link TransitionManager} responsible for  for default transitions\n     * in this window. Requires {@link #FEATURE_CONTENT_TRANSITIONS}.\n     *\n     * <p>This method will return non-null after content has been initialized (e.g. by using\n     * {@link #setContentView}) if {@link #FEATURE_CONTENT_TRANSITIONS} has been granted.</p>\n     *\n     * @return This window's content TransitionManager or null if none is set.\n     * @attr ref android.R.styleable#Window_windowContentTransitionManager\n     ",
    "links" : [ "#setContentView", "android.transition.TransitionManager", "#FEATURE_CONTENT_TRANSITIONS" ]
  }, {
    "name" : "public void setTransitionManager(TransitionManager tm)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link TransitionManager} to use for default transitions in this window.\n     * Requires {@link #FEATURE_CONTENT_TRANSITIONS}.\n     *\n     * @param tm The TransitionManager to use for scene changes.\n     * @attr ref android.R.styleable#Window_windowContentTransitionManager\n     ",
    "links" : [ "android.transition.TransitionManager", "#FEATURE_CONTENT_TRANSITIONS" ]
  }, {
    "name" : "public Scene getContentScene()",
    "returnType" : "Scene",
    "comment" : "\n     * Retrieve the {@link Scene} representing this window's current content.\n     * Requires {@link #FEATURE_CONTENT_TRANSITIONS}.\n     *\n     * <p>This method will return null if the current content is not represented by a Scene.</p>\n     *\n     * @return Current Scene being shown or null\n     ",
    "links" : [ "android.transition.Scene", "#FEATURE_CONTENT_TRANSITIONS" ]
  }, {
    "name" : "public void setEnterTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used to move Views into the initial scene. The entering\n     * Views will be those that are regular Views or ViewGroups that have\n     * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as entering is governed by changing visibility from\n     * {@link View#INVISIBLE} to {@link View#VISIBLE}. If <code>transition</code> is null,\n     * entering Views will remain unaffected.\n     *\n     * @param transition The Transition to use to move Views into the initial Scene.\n     * @attr ref android.R.styleable#Window_windowEnterTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public void setReturnTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used to move Views out of the scene when the Window is\n     * preparing to close, for example after a call to\n     * {@link android.app.Activity#finishAfterTransition()}. The exiting\n     * Views will be those that are regular Views or ViewGroups that have\n     * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as entering is governed by changing visibility from\n     * {@link View#VISIBLE} to {@link View#INVISIBLE}. If <code>transition</code> is null,\n     * entering Views will remain unaffected. If nothing is set, the default will be to\n     * use the same value as set in {@link #setEnterTransition(android.transition.Transition)}.\n     *\n     * @param transition The Transition to use to move Views out of the Scene when the Window\n     *                   is preparing to close.\n     * @attr ref android.R.styleable#Window_windowReturnTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#setEnterTransition(android.transition.Transition)", "android.app.Activity#finishAfterTransition()", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public void setExitTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used to move Views out of the scene when starting a\n     * new Activity. The exiting Views will be those that are regular Views or ViewGroups that\n     * have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as exiting is governed by changing visibility\n     * from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null, the views will\n     * remain unaffected. Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use to move Views out of the scene when calling a\n     *                   new Activity.\n     * @attr ref android.R.styleable#Window_windowExitTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#FEATURE_ACTIVITY_TRANSITIONS", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public void setReenterTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used to move Views in to the scene when returning from\n     * a previously-started Activity. The entering Views will be those that are regular Views\n     * or ViewGroups that have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions\n     * will extend {@link android.transition.Visibility} as exiting is governed by changing\n     * visibility from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null,\n     * the views will remain unaffected. If nothing is set, the default will be to use the same\n     * transition as {@link #setExitTransition(android.transition.Transition)}.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use to move Views into the scene when reentering from a\n     *                   previously-started Activity.\n     * @attr ref android.R.styleable#Window_windowReenterTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#FEATURE_ACTIVITY_TRANSITIONS", "android.view.View#INVISIBLE", "#setExitTransition(android.transition.Transition)" ]
  }, {
    "name" : "public Transition getEnterTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the transition used to move Views into the initial scene. The entering\n     * Views will be those that are regular Views or ViewGroups that have\n     * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as entering is governed by changing visibility from\n     * {@link View#INVISIBLE} to {@link View#VISIBLE}. If <code>transition</code> is null,\n     * entering Views will remain unaffected.  Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return the Transition to use to move Views into the initial Scene.\n     * @attr ref android.R.styleable#Window_windowEnterTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#FEATURE_ACTIVITY_TRANSITIONS", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public Transition getReturnTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used to move Views out of the scene when the Window is\n     * preparing to close, for example after a call to\n     * {@link android.app.Activity#finishAfterTransition()}. The exiting\n     * Views will be those that are regular Views or ViewGroups that have\n     * {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as entering is governed by changing visibility from\n     * {@link View#VISIBLE} to {@link View#INVISIBLE}.\n     *\n     * @return The Transition to use to move Views out of the Scene when the Window\n     *         is preparing to close.\n     * @attr ref android.R.styleable#Window_windowReturnTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "android.app.Activity#finishAfterTransition()", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public Transition getExitTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used to move Views out of the scene when starting a\n     * new Activity. The exiting Views will be those that are regular Views or ViewGroups that\n     * have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions will extend\n     * {@link android.transition.Visibility} as exiting is governed by changing visibility\n     * from {@link View#VISIBLE} to {@link View#INVISIBLE}. If transition is null, the views will\n     * remain unaffected. Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return the Transition to use to move Views out of the scene when calling a\n     * new Activity.\n     * @attr ref android.R.styleable#Window_windowExitTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#FEATURE_ACTIVITY_TRANSITIONS", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public Transition getReenterTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used to move Views in to the scene when returning from\n     * a previously-started Activity. The entering Views will be those that are regular Views\n     * or ViewGroups that have {@link ViewGroup#isTransitionGroup} return true. Typical Transitions\n     * will extend {@link android.transition.Visibility} as exiting is governed by changing\n     * visibility from {@link View#VISIBLE} to {@link View#INVISIBLE}.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return The Transition to use to move Views into the scene when reentering from a\n     *         previously-started Activity.\n     * @attr ref android.R.styleable#Window_windowReenterTransition\n     ",
    "links" : [ "android.transition.Visibility", "android.view.View#VISIBLE", "android.view.ViewGroup#isTransitionGroup", "#FEATURE_ACTIVITY_TRANSITIONS", "android.view.View#INVISIBLE" ]
  }, {
    "name" : "public void setSharedElementEnterTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used for shared elements transferred into the content\n     * Scene. Typical Transitions will affect size and location, such as\n     * {@link android.transition.ChangeBounds}. A null\n     * value will cause transferred shared elements to blink to the final position.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use for shared elements transferred into the content\n     *                   Scene.\n     * @attr ref android.R.styleable#Window_windowSharedElementEnterTransition\n     ",
    "links" : [ "android.transition.ChangeBounds", "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public void setSharedElementReturnTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used for shared elements transferred back to a\n     * calling Activity. Typical Transitions will affect size and location, such as\n     * {@link android.transition.ChangeBounds}. A null\n     * value will cause transferred shared elements to blink to the final position.\n     * If no value is set, the default will be to use the same value as\n     * {@link #setSharedElementEnterTransition(android.transition.Transition)}.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use for shared elements transferred out of the content\n     *                   Scene.\n     * @attr ref android.R.styleable#Window_windowSharedElementReturnTransition\n     ",
    "links" : [ "android.transition.ChangeBounds", "#setSharedElementEnterTransition(android.transition.Transition)", "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public Transition getSharedElementEnterTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used for shared elements transferred into the content\n     * Scene. Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return Transition to use for sharend elements transferred into the content Scene.\n     * @attr ref android.R.styleable#Window_windowSharedElementEnterTransition\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public Transition getSharedElementReturnTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used for shared elements transferred back to a\n     * calling Activity. Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return Transition to use for sharend elements transferred into the content Scene.\n     * @attr ref android.R.styleable#Window_windowSharedElementReturnTransition\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public void setSharedElementExitTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used for shared elements after starting a new Activity\n     * before the shared elements are transferred to the called Activity. If the shared elements\n     * must animate during the exit transition, this Transition should be used. Upon completion,\n     * the shared elements may be transferred to the started Activity.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use for shared elements in the launching Window\n     *                   prior to transferring to the launched Activity's Window.\n     * @attr ref android.R.styleable#Window_windowSharedElementExitTransition\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public void setSharedElementReenterTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Transition that will be used for shared elements reentering from a started\n     * Activity after it has returned the shared element to it start location. If no value\n     * is set, this will default to\n     * {@link #setSharedElementExitTransition(android.transition.Transition)}.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @param transition The Transition to use for shared elements in the launching Window\n     *                   after the shared element has returned to the Window.\n     * @attr ref android.R.styleable#Window_windowSharedElementReenterTransition\n     ",
    "links" : [ "#setSharedElementExitTransition(android.transition.Transition)", "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public Transition getSharedElementExitTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition to use for shared elements in the launching Window prior\n     * to transferring to the launched Activity's Window.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return the Transition to use for shared elements in the launching Window prior\n     * to transferring to the launched Activity's Window.\n     * @attr ref android.R.styleable#Window_windowSharedElementExitTransition\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public Transition getSharedElementReenterTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition that will be used for shared elements reentering from a started\n     * Activity after it has returned the shared element to it start location.\n     * Requires {@link #FEATURE_ACTIVITY_TRANSITIONS}.\n     *\n     * @return the Transition that will be used for shared elements reentering from a started\n     * Activity after it has returned the shared element to it start location.\n     * @attr ref android.R.styleable#Window_windowSharedElementReenterTransition\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public void setAllowEnterTransitionOverlap(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Controls how the transition set in\n     * {@link #setEnterTransition(android.transition.Transition)} overlaps with the exit\n     * transition of the calling Activity. When true, the transition will start as soon as possible.\n     * When false, the transition will wait until the remote exiting transition completes before\n     * starting. The default value is true.\n     *\n     * @param allow true to start the enter transition when possible or false to\n     *              wait until the exiting transition completes.\n     * @attr ref android.R.styleable#Window_windowAllowEnterTransitionOverlap\n     ",
    "links" : [ "#setEnterTransition(android.transition.Transition)" ]
  }, {
    "name" : "public boolean getAllowEnterTransitionOverlap()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns how the transition set in\n     * {@link #setEnterTransition(android.transition.Transition)} overlaps with the exit\n     * transition of the calling Activity. When true, the transition will start as soon as possible.\n     * When false, the transition will wait until the remote exiting transition completes before\n     * starting. The default value is true.\n     *\n     * @return true when the enter transition should start as soon as possible or false to\n     * when it should wait until the exiting transition completes.\n     * @attr ref android.R.styleable#Window_windowAllowEnterTransitionOverlap\n     ",
    "links" : [ "#setEnterTransition(android.transition.Transition)" ]
  }, {
    "name" : "public void setAllowReturnTransitionOverlap(boolean allow)",
    "returnType" : "void",
    "comment" : "\n     * Controls how the transition set in\n     * {@link #setExitTransition(android.transition.Transition)} overlaps with the exit\n     * transition of the called Activity when reentering after if finishes. When true,\n     * the transition will start as soon as possible. When false, the transition will wait\n     * until the called Activity's exiting transition completes before starting.\n     * The default value is true.\n     *\n     * @param allow true to start the transition when possible or false to wait until the\n     *              called Activity's exiting transition completes.\n     * @attr ref android.R.styleable#Window_windowAllowReturnTransitionOverlap\n     ",
    "links" : [ "#setExitTransition(android.transition.Transition)" ]
  }, {
    "name" : "public boolean getAllowReturnTransitionOverlap()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns how the transition set in\n     * {@link #setExitTransition(android.transition.Transition)} overlaps with the exit\n     * transition of the called Activity when reentering after if finishes. When true,\n     * the transition will start as soon as possible. When false, the transition will wait\n     * until the called Activity's exiting transition completes before starting.\n     * The default value is true.\n     *\n     * @return true when the transition should start when possible or false when it should wait\n     * until the called Activity's exiting transition completes.\n     * @attr ref android.R.styleable#Window_windowAllowReturnTransitionOverlap\n     ",
    "links" : [ "#setExitTransition(android.transition.Transition)" ]
  }, {
    "name" : "public long getTransitionBackgroundFadeDuration()",
    "returnType" : "long",
    "comment" : "\n     * Returns the duration, in milliseconds, of the window background fade\n     * when transitioning into or away from an Activity when called with an Activity Transition.\n     * <p>When executing the enter transition, the background starts transparent\n     * and fades in. This requires {@link #FEATURE_ACTIVITY_TRANSITIONS}. The default is\n     * 300 milliseconds.</p>\n     *\n     * @return The duration of the window background fade to opaque during enter transition.\n     * @see #getEnterTransition()\n     * @attr ref android.R.styleable#Window_windowTransitionBackgroundFadeDuration\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public void setTransitionBackgroundFadeDuration(long fadeDurationMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duration, in milliseconds, of the window background fade\n     * when transitioning into or away from an Activity when called with an Activity Transition.\n     * <p>When executing the enter transition, the background starts transparent\n     * and fades in. This requires {@link #FEATURE_ACTIVITY_TRANSITIONS}. The default is\n     * 300 milliseconds.</p>\n     *\n     * @param fadeDurationMillis The duration of the window background fade to or from opaque\n     *                           during enter transition.\n     * @see #setEnterTransition(android.transition.Transition)\n     * @attr ref android.R.styleable#Window_windowTransitionBackgroundFadeDuration\n     ",
    "links" : [ "#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public boolean getSharedElementsUseOverlay()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns <code>true</code> when shared elements should use an Overlay during\n     * shared element transitions or <code>false</code> when they should animate as\n     * part of the normal View hierarchy. The default value is true.\n     *\n     * @return <code>true</code> when shared elements should use an Overlay during\n     * shared element transitions or <code>false</code> when they should animate as\n     * part of the normal View hierarchy.\n     * @attr ref android.R.styleable#Window_windowSharedElementsUseOverlay\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSharedElementsUseOverlay(boolean sharedElementsUseOverlay)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not shared elements should use an Overlay during shared element transitions.\n     * The default value is true.\n     *\n     * @param sharedElementsUseOverlay <code>true</code> indicates that shared elements should\n     *                                 be transitioned with an Overlay or <code>false</code>\n     *                                 to transition within the normal View hierarchy.\n     * @attr ref android.R.styleable#Window_windowSharedElementsUseOverlay\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getStatusBarColor()",
    "returnType" : "int",
    "comment" : "\n     * @return the color of the status bar.\n     * @deprecated This is no longer needed since the setter is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setStatusBarColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color of the status bar to {@code color}.\n     *\n     * For this to take effect,\n     * the window must be drawing the system bar backgrounds with\n     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and\n     * {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS} must not be set.\n     *\n     * If {@code color} is not opaque, consider setting\n     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and\n     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN}.\n     * <p>\n     * The transitionName for the view background will be \"android:status:background\".\n     *\n     * <p>\n     * If the color is transparent and the window enforces the status bar contrast, the system\n     * will determine whether a scrim is necessary and draw one on behalf of the app to ensure\n     * that the status bar has enough contrast with the contents of this app, and set an appropriate\n     * effective bar background accordingly.\n     *\n     * <p>\n     * If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM VANILLA_ICE_CREAM} or above,\n     * the color will be transparent and cannot be changed.\n     *\n     * @see #setNavigationBarContrastEnforced\n     * @deprecated Draw proper background behind {@link WindowInsets.Type#statusBars()}} instead.\n     ",
    "links" : [ "android.view.View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_STATUS", "android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "WindowInsets.Type#statusBars()" ]
  }, {
    "name" : "public abstract int getNavigationBarColor()",
    "returnType" : "int",
    "comment" : "\n     * @return the color of the navigation bar.\n     * @deprecated This is no longer needed since the setter is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setNavigationBarColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color of the navigation bar to {@param color}.\n     *\n     * For this to take effect,\n     * the window must be drawing the system bar backgrounds with\n     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and\n     * {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION} must not be set.\n     *\n     * If {@param color} is not opaque, consider setting\n     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE} and\n     * {@link android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION}.\n     * <p>\n     * The transitionName for the view background will be \"android:navigation:background\".\n     *\n     * <p>\n     * If the color is transparent and the window enforces the navigation bar contrast, the system\n     * will determine whether a scrim is necessary and draw one on behalf of the app to ensure that\n     * the navigation bar has enough contrast with the contents of this app, and set an appropriate\n     * effective bar background accordingly.\n     *\n     * <p>\n     * If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM VANILLA_ICE_CREAM} or above,\n     * the color will be transparent and cannot be changed.\n     *\n     * @attr ref android.R.styleable#Window_navigationBarColor\n     * @see #setNavigationBarContrastEnforced\n     * @deprecated Draw proper background behind {@link WindowInsets.Type#navigationBars()} or\n     *             {@link WindowInsets.Type#tappableElement()} instead.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION", "WindowInsets.Type#navigationBars()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_STABLE", "WindowInsets.Type#tappableElement()", "android.view.View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION" ]
  }, {
    "name" : "public void setNavigationBarDividerColor(@ColorInt int dividerColor)",
    "returnType" : "void",
    "comment" : "\n     * Shows a thin line of the specified color between the navigation bar and the app\n     * content.\n     * <p>\n     * For this to take effect,\n     * the window must be drawing the system bar backgrounds with\n     * {@link android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS} and\n     * {@link android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION} must not be set.\n     *\n     * <p>\n     * If the app targets\n     * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM VANILLA_ICE_CREAM} or above,\n     * the color will be transparent and cannot be changed.\n     *\n     * @param dividerColor The color of the thin line.\n     * @attr ref android.R.styleable#Window_navigationBarDividerColor\n     * @deprecated Draw proper background behind {@link WindowInsets.Type#navigationBars()} or\n     *             {@link WindowInsets.Type#tappableElement()} instead.\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams#FLAG_TRANSLUCENT_NAVIGATION", "WindowInsets.Type#navigationBars()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.view.WindowManager.LayoutParams#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS", "WindowInsets.Type#tappableElement()" ]
  }, {
    "name" : "public int getNavigationBarDividerColor()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the color of the navigation bar divider.\n     *\n     * @return The color of the navigation bar divider color.\n     * @see #setNavigationBarColor(int)\n     * @attr ref android.R.styleable#Window_navigationBarDividerColor\n     * @deprecated This is no longer needed since the setter is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStatusBarContrastEnforced(boolean ensureContrast)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the system should ensure that the status bar has enough\n     * contrast when a fully transparent background is requested.\n     *\n     * <p>If set to this value, the system will determine whether a scrim is necessary\n     * to ensure that the status bar has enough contrast with the contents of\n     * this app, and set an appropriate effective bar background color accordingly.\n     *\n     * <p>When the status bar color has a non-zero alpha value, the value of this\n     * property has no effect.\n     *\n     * @see android.R.attr#enforceStatusBarContrast\n     * @see #isStatusBarContrastEnforced\n     * @see #setStatusBarColor\n     * @deprecated Draw proper background behind {@link WindowInsets.Type#statusBars()}} instead.\n     ",
    "links" : [ "WindowInsets.Type#statusBars()" ]
  }, {
    "name" : "public boolean isStatusBarContrastEnforced()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the system is ensuring that the status bar has enough contrast when a\n     * fully transparent background is requested.\n     *\n     * <p>When the status bar color has a non-zero alpha value, the value of this\n     * property has no effect.\n     *\n     * @return true, if the system is ensuring contrast, false otherwise.\n     * @see android.R.attr#enforceStatusBarContrast\n     * @see #setStatusBarContrastEnforced\n     * @see #setStatusBarColor\n     * @deprecated This is not needed since the setter is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNavigationBarContrastEnforced(boolean enforceContrast)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the system should ensure that the navigation bar has enough\n     * contrast when a fully transparent background is requested.\n     *\n     * <p>If set to this value, the system will determine whether a scrim is necessary\n     * to ensure that the navigation bar has enough contrast with the contents of\n     * this app, and set an appropriate effective bar background color accordingly.\n     *\n     * <p>When the navigation bar color has a non-zero alpha value, the value of this\n     * property has no effect.\n     *\n     * @see android.R.attr#enforceNavigationBarContrast\n     * @see #isNavigationBarContrastEnforced\n     * @see #setNavigationBarColor\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNavigationBarContrastEnforced()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the system is ensuring that the navigation bar has enough contrast when a\n     * fully transparent background is requested.\n     *\n     * <p>When the navigation bar color has a non-zero alpha value, the value of this\n     * property has no effect.\n     *\n     * @return true, if the system is ensuring contrast, false otherwise.\n     * @see android.R.attr#enforceNavigationBarContrast\n     * @see #setNavigationBarContrastEnforced\n     * @see #setNavigationBarColor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)",
    "returnType" : "void",
    "comment" : "\n     * Sets a list of areas within this window's coordinate space where the system should not\n     * intercept touch or other pointing device gestures.\n     *\n     * <p>This method should be used by apps that make use of\n     * {@link #takeSurface(SurfaceHolder.Callback2)} and do not have a view hierarchy available.\n     * Apps that do have a view hierarchy should use\n     * {@link View#setSystemGestureExclusionRects(List)} instead. This method does not modify or\n     * replace the gesture exclusion rects populated by individual views in this window's view\n     * hierarchy using {@link View#setSystemGestureExclusionRects(List)}.</p>\n     *\n     * <p>Use this to tell the system which specific sub-areas of a view need to receive gesture\n     * input in order to function correctly in the presence of global system gestures that may\n     * conflict. For example, if the system wishes to capture swipe-in-from-screen-edge gestures\n     * to provide system-level navigation functionality, a view such as a navigation drawer\n     * container can mark the left (or starting) edge of itself as requiring gesture capture\n     * priority using this API. The system may then choose to relax its own gesture recognition\n     * to allow the app to consume the user's gesture. It is not necessary for an app to register\n     * exclusion rects for broadly spanning regions such as the entirety of a\n     * <code>ScrollView</code> or for simple press and release click targets such as\n     * <code>Button</code>. Mark an exclusion rect when interacting with a view requires\n     * a precision touch gesture in a small area in either the X or Y dimension, such as\n     * an edge swipe or dragging a <code>SeekBar</code> thumb.</p>\n     *\n     * <p>Do not modify the provided list after this method is called.</p>\n     *\n     * @param rects A list of precision gesture regions that this window needs to function correctly\n     ",
    "links" : [ "#takeSurface(SurfaceHolder.Callback2)", "android.view.View#setSystemGestureExclusionRects(List)" ]
  }, {
    "name" : "public List<Rect> getSystemGestureExclusionRects()",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Retrieve the list of areas within this window's coordinate space where the system should not\n     * intercept touch or other pointing device gestures. This is the list as set by\n     * {@link #setSystemGestureExclusionRects(List)} or an empty list if\n     * {@link #setSystemGestureExclusionRects(List)} has not been called. It does not include\n     * exclusion rects set by this window's view hierarchy.\n     *\n     * @return a list of system gesture exclusion rects specific to this window\n     ",
    "links" : [ "#setSystemGestureExclusionRects(List)" ]
  }, {
    "name" : "public void requestScrollCapture(IScrollCaptureResponseListener listener)",
    "returnType" : "void",
    "comment" : "\n     * System request to begin scroll capture.\n     *\n     * @param listener to receive the response\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerScrollCaptureCallback(@NonNull ScrollCaptureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Used to provide scroll capture support for an arbitrary window. This registeres the given\n     * callback with the root view of the window.\n     *\n     * @param callback the callback to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterScrollCaptureCallback(@NonNull ScrollCaptureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a {@link ScrollCaptureCallback} previously registered with this window.\n     *\n     * @param callback the callback to remove\n     ",
    "links" : [ "android.view.ScrollCaptureCallback" ]
  }, {
    "name" : "public void setTheme(int resId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setOverlayWithDecorCaptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Whether the caption should be displayed directly on the content rather than push the content\n     * down. This affects only freeform windows since they display the caption.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOverlayWithDecorCaptionEnabled()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void notifyRestrictedCaptionAreaCallback(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setDecorCaptionShade(int decorCaptionShade)",
    "returnType" : "void",
    "comment" : "\n     * Set what color should the caption controls be. By default the system will try to determine\n     * the color from the theme. You can overwrite this by using {@link #DECOR_CAPTION_SHADE_DARK},\n     * {@link #DECOR_CAPTION_SHADE_LIGHT}, or {@link #DECOR_CAPTION_SHADE_AUTO}.\n     * @see #DECOR_CAPTION_SHADE_DARK\n     * @see #DECOR_CAPTION_SHADE_LIGHT\n     * @see #DECOR_CAPTION_SHADE_AUTO\n     ",
    "links" : [ "#DECOR_CAPTION_SHADE_LIGHT", "#DECOR_CAPTION_SHADE_AUTO", "#DECOR_CAPTION_SHADE_DARK" ]
  }, {
    "name" : "public abstract void setResizingCaptionDrawable(Drawable drawable)",
    "returnType" : "void",
    "comment" : "\n     * Set the drawable that is drawn underneath the caption during the resizing.\n     *\n     * During the resizing the caption might not be drawn fast enough to match the new dimensions.\n     * There is a second caption drawn underneath it that will be fast enough. By default the\n     * caption is constructed from the theme. You can provide a drawable, that will be drawn instead\n     * to better match your application.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onMultiWindowModeChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called when the activity changes from fullscreen mode to multi-window mode and visa-versa.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onPictureInPictureModeChanged(boolean isInPictureInPictureMode)",
    "returnType" : "void",
    "comment" : "\n     * Called when the activity changes to/from picture-in-picture mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowInsetsController getInsetsController()",
    "returnType" : "WindowInsetsController",
    "comment" : "\n     * @return The {@link WindowInsetsController} associated with this window\n     * @see View#getWindowInsetsController()\n     ",
    "links" : [ "android.view.WindowInsetsController" ]
  }, {
    "name" : "public AttachedSurfaceControl getRootSurfaceControl()",
    "returnType" : "AttachedSurfaceControl",
    "comment" : "\n     * This will be null before a content view is added, e.g. via\n     * {@link #setContentView} or {@link #addContentView}. See\n     * {@link android.view.View#getRootSurfaceControl}.\n     *\n     * @return The {@link android.view.AttachedSurfaceControl} interface for this Window\n     ",
    "links" : [ "android.view.View#getRootSurfaceControl", "android.view.AttachedSurfaceControl", "#addContentView", "#setContentView" ]
  }, {
    "name" : "public OnBackInvokedDispatcher getOnBackInvokedDispatcher()",
    "returnType" : "OnBackInvokedDispatcher",
    "comment" : "\n     * Returns the {@link OnBackInvokedDispatcher} instance associated with this window.\n     ",
    "links" : [ "android.window.OnBackInvokedDispatcher" ]
  } ],
  "methodNames" : [ "public final Context getContext()", "public final TypedArray getWindowStyle()", "public void setContainer(Window container)", "public final Window getContainer()", "public final boolean hasChildren()", "public final void destroy()", "protected void onDestroy()", "public final boolean isDestroyed()", "public void setWindowManager(WindowManager wm, IBinder appToken, String appName)", "public void setWindowManager(WindowManager wm, IBinder appToken, String appName, boolean hardwareAccelerated)", " void adjustLayoutParamsForSubWindow(WindowManager.LayoutParams wp)", "public WindowManager getWindowManager()", "public void setCallback(Callback callback)", "public final Callback getCallback()", "public final void addOnFrameMetricsAvailableListener(@NonNull OnFrameMetricsAvailableListener listener, Handler handler)", "public final void removeOnFrameMetricsAvailableListener(OnFrameMetricsAvailableListener listener)", "public final void setOnWindowDismissedCallback(OnWindowDismissedCallback dcb)", "public final void dispatchOnWindowDismissed(boolean finishTask, boolean suppressWindowTransition)", "public final void setOnWindowSwipeDismissedCallback(OnWindowSwipeDismissedCallback sdcb)", "public final void dispatchOnWindowSwipeDismissed()", "public final void setWindowControllerCallback(WindowControllerCallback wccb)", "public final WindowControllerCallback getWindowControllerCallback()", "public final void setDecorCallback(DecorCallback decorCallback)", "public final void setSystemBarAppearance(@WindowInsetsController.Appearance int appearance)", "public final int getSystemBarAppearance()", "public final void dispatchOnSystemBarAppearanceChanged(@WindowInsetsController.Appearance int appearance)", "public final boolean onDrawLegacyNavigationBarBackgroundChanged(boolean drawLegacyNavigationBarBackground)", "public final void setRestrictedCaptionAreaListener(OnRestrictedCaptionAreaChangedListener listener)", "public final void setHideOverlayWindows(boolean hide)", "public abstract void takeSurface(SurfaceHolder.Callback2 callback)", "public abstract void takeInputQueue(InputQueue.Callback callback)", "public abstract boolean isFloating()", "public void setLayout(int width, int height)", "public void setGravity(int gravity)", "public void setType(int type)", "public void setFormat(int format)", "public void setWindowAnimations(@StyleRes int resId)", "public void setSoftInputMode(int mode)", "public void addFlags(int flags)", "public void addPrivateFlags(int flags)", "public void addSystemFlags(@WindowManager.LayoutParams.SystemFlags int flags)", "public void clearFlags(int flags)", "public void setFlags(int flags, int mask)", "private void setPrivateFlags(int flags, int mask)", "protected void dispatchWindowAttributesChanged(WindowManager.LayoutParams attrs)", "public void setColorMode(@ActivityInfo.ColorMode int colorMode)", "public void setDesiredHdrHeadroom(@FloatRange(from = 0.0f, to = 10000.0) float desiredHeadroom)", "public float getDesiredHdrHeadroom()", "public void setFrameRateBoostOnTouchEnabled(boolean enabled)", "public boolean getFrameRateBoostOnTouchEnabled()", "public void setFrameRatePowerSavingsBalanced(boolean enabled)", "public boolean isFrameRatePowerSavingsBalanced()", "public void setPreferMinimalPostProcessing(boolean isPreferred)", "public int getColorMode()", "public boolean isWideColorGamut()", "public void setDimAmount(float amount)", "public void setDecorFitsSystemWindows(boolean decorFitsSystemWindows)", "public boolean decorFitsSystemWindows()", "public void setAttributes(WindowManager.LayoutParams a)", "public final WindowManager.LayoutParams getAttributes()", "protected final int getForcedWindowFlags()", "protected final boolean hasSoftInputMode()", "public void setCloseOnTouchOutside(boolean close)", "public void setCloseOnTouchOutsideIfNotSet(boolean close)", "public boolean shouldCloseOnTouchOutside()", "public abstract void alwaysReadCloseOnTouchAttr()", "public boolean shouldCloseOnTouch(Context context, MotionEvent event)", "public void setSustainedPerformanceMode(boolean enable)", "private boolean isOutOfBounds(Context context, MotionEvent event)", "public boolean requestFeature(int featureId)", "protected void removeFeature(int featureId)", "public final void makeActive()", "public final boolean isActive()", "public T findViewById(@IdRes int id)", "public final T requireViewById(@IdRes int id)", "public abstract void setContentView(@LayoutRes int layoutResID)", "public abstract void setContentView(View view)", "public abstract void setContentView(View view, ViewGroup.LayoutParams params)", "public abstract void addContentView(View view, ViewGroup.LayoutParams params)", "public abstract void clearContentView()", "public abstract View getCurrentFocus()", "public abstract LayoutInflater getLayoutInflater()", "public abstract void setTitle(CharSequence title)", "public abstract void setTitleColor(@ColorInt int textColor)", "public abstract void openPanel(int featureId, KeyEvent event)", "public abstract void closePanel(int featureId)", "public abstract void togglePanel(int featureId, KeyEvent event)", "public abstract void invalidatePanelMenu(int featureId)", "public abstract boolean performPanelShortcut(int featureId, int keyCode, KeyEvent event, int flags)", "public abstract boolean performPanelIdentifierAction(int featureId, int id, int flags)", "public abstract void closeAllPanels()", "public abstract boolean performContextMenuIdentifierAction(int id, int flags)", "public abstract void onConfigurationChanged(Configuration newConfig)", "public void setElevation(float elevation)", "public float getElevation()", "public void setClipToOutline(boolean clipToOutline)", "public void setBackgroundDrawableResource(@DrawableRes int resId)", "public abstract void setBackgroundDrawable(Drawable drawable)", "public void setBackgroundBlurRadius(int blurRadius)", "public abstract void setFeatureDrawableResource(int featureId, @DrawableRes int resId)", "public abstract void setFeatureDrawableUri(int featureId, Uri uri)", "public abstract void setFeatureDrawable(int featureId, Drawable drawable)", "public abstract void setFeatureDrawableAlpha(int featureId, int alpha)", "public abstract void setFeatureInt(int featureId, int value)", "public abstract void takeKeyEvents(boolean get)", "public abstract boolean superDispatchKeyEvent(KeyEvent event)", "public abstract boolean superDispatchKeyShortcutEvent(KeyEvent event)", "public abstract boolean superDispatchTouchEvent(MotionEvent event)", "public abstract boolean superDispatchTrackballEvent(MotionEvent event)", "public abstract boolean superDispatchGenericMotionEvent(MotionEvent event)", "public abstract View getDecorView()", "public View getStatusBarBackgroundView()", "public View getNavigationBarBackgroundView()", "public abstract View peekDecorView()", "public abstract Bundle saveHierarchyState()", "public abstract void restoreHierarchyState(Bundle savedInstanceState)", "protected abstract void onActive()", "protected final int getFeatures()", "public static int getDefaultFeatures(Context context)", "public boolean hasFeature(int feature)", "protected final int getLocalFeatures()", "protected void setDefaultWindowFormat(int format)", "protected boolean haveDimAmount()", "public abstract void setChildDrawable(int featureId, Drawable drawable)", "public abstract void setChildInt(int featureId, int value)", "public abstract boolean isShortcutKey(int keyCode, KeyEvent event)", "public abstract void setVolumeControlStream(int streamType)", "public abstract int getVolumeControlStream()", "public void setMediaController(MediaController controller)", "public MediaController getMediaController()", "public void setUiOptions(int uiOptions)", "public void setUiOptions(int uiOptions, int mask)", "public void setIcon(@DrawableRes int resId)", "public void setDefaultIcon(@DrawableRes int resId)", "public void setLogo(@DrawableRes int resId)", "public void setDefaultLogo(@DrawableRes int resId)", "public void setLocalFocus(boolean hasFocus, boolean inTouchMode)", "public void injectInputEvent(InputEvent event)", "public TransitionManager getTransitionManager()", "public void setTransitionManager(TransitionManager tm)", "public Scene getContentScene()", "public void setEnterTransition(Transition transition)", "public void setReturnTransition(Transition transition)", "public void setExitTransition(Transition transition)", "public void setReenterTransition(Transition transition)", "public Transition getEnterTransition()", "public Transition getReturnTransition()", "public Transition getExitTransition()", "public Transition getReenterTransition()", "public void setSharedElementEnterTransition(Transition transition)", "public void setSharedElementReturnTransition(Transition transition)", "public Transition getSharedElementEnterTransition()", "public Transition getSharedElementReturnTransition()", "public void setSharedElementExitTransition(Transition transition)", "public void setSharedElementReenterTransition(Transition transition)", "public Transition getSharedElementExitTransition()", "public Transition getSharedElementReenterTransition()", "public void setAllowEnterTransitionOverlap(boolean allow)", "public boolean getAllowEnterTransitionOverlap()", "public void setAllowReturnTransitionOverlap(boolean allow)", "public boolean getAllowReturnTransitionOverlap()", "public long getTransitionBackgroundFadeDuration()", "public void setTransitionBackgroundFadeDuration(long fadeDurationMillis)", "public boolean getSharedElementsUseOverlay()", "public void setSharedElementsUseOverlay(boolean sharedElementsUseOverlay)", "public abstract int getStatusBarColor()", "public abstract void setStatusBarColor(@ColorInt int color)", "public abstract int getNavigationBarColor()", "public abstract void setNavigationBarColor(@ColorInt int color)", "public void setNavigationBarDividerColor(@ColorInt int dividerColor)", "public int getNavigationBarDividerColor()", "public void setStatusBarContrastEnforced(boolean ensureContrast)", "public boolean isStatusBarContrastEnforced()", "public void setNavigationBarContrastEnforced(boolean enforceContrast)", "public boolean isNavigationBarContrastEnforced()", "public void setSystemGestureExclusionRects(@NonNull List<Rect> rects)", "public List<Rect> getSystemGestureExclusionRects()", "public void requestScrollCapture(IScrollCaptureResponseListener listener)", "public void registerScrollCaptureCallback(@NonNull ScrollCaptureCallback callback)", "public void unregisterScrollCaptureCallback(@NonNull ScrollCaptureCallback callback)", "public void setTheme(int resId)", "public void setOverlayWithDecorCaptionEnabled(boolean enabled)", "public boolean isOverlayWithDecorCaptionEnabled()", "public void notifyRestrictedCaptionAreaCallback(int left, int top, int right, int bottom)", "public abstract void setDecorCaptionShade(int decorCaptionShade)", "public abstract void setResizingCaptionDrawable(Drawable drawable)", "public abstract void onMultiWindowModeChanged()", "public abstract void onPictureInPictureModeChanged(boolean isInPictureInPictureMode)", "public WindowInsetsController getInsetsController()", "public AttachedSurfaceControl getRootSurfaceControl()", "public OnBackInvokedDispatcher getOnBackInvokedDispatcher()" ],
  "variableNames" : [ "FEATURE_OPTIONS_PANEL", "FEATURE_NO_TITLE", "FEATURE_PROGRESS", "FEATURE_LEFT_ICON", "FEATURE_RIGHT_ICON", "FEATURE_INDETERMINATE_PROGRESS", "FEATURE_CONTEXT_MENU", "FEATURE_CUSTOM_TITLE", "FEATURE_ACTION_BAR", "FEATURE_ACTION_BAR_OVERLAY", "FEATURE_ACTION_MODE_OVERLAY", "FEATURE_SWIPE_TO_DISMISS", "FEATURE_CONTENT_TRANSITIONS", "FEATURE_ACTIVITY_TRANSITIONS", "FEATURE_MAX", "PROGRESS_VISIBILITY_ON", "PROGRESS_VISIBILITY_OFF", "PROGRESS_INDETERMINATE_ON", "PROGRESS_INDETERMINATE_OFF", "PROGRESS_START", "PROGRESS_END", "PROGRESS_SECONDARY_START", "PROGRESS_SECONDARY_END", "STATUS_BAR_BACKGROUND_TRANSITION_NAME", "NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME", "DEFAULT_FEATURES", "ID_ANDROID_CONTENT", "DECOR_CAPTION_SHADE_AUTO", "DECOR_CAPTION_SHADE_LIGHT", "DECOR_CAPTION_SHADE_DARK", "mContext", "mWindowStyle", "mCallback", "mOnWindowDismissedCallback", "mOnWindowSwipeDismissedCallback", "mWindowControllerCallback", "mSystemBarAppearance", "mDecorCallback", "mOnRestrictedCaptionAreaChangedListener", "mRestrictedCaptionAreaRect", "mWindowManager", "mAppToken", "mAppName", "mHardwareAccelerated", "mContainer", "mActiveChild", "mIsActive", "mHasChildren", "mCloseOnTouchOutside", "mSetCloseOnTouchOutside", "mForcedWindowFlags", "mFeatures", "mLocalFeatures", "mHaveWindowFormat", "mHaveDimAmount", "mDefaultWindowFormat", "mHasSoftInputMode", "mDestroyed", "mOverlayWithDecorCaptionEnabled", "mCloseOnSwipeEnabled", "sToolkitSetFrameRateReadOnlyFlagValue", "mWindowAttributes" ]
}