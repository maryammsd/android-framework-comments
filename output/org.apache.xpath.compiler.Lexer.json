{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/compiler/Lexer.java",
  "packageName" : "org.apache.xpath.compiler",
  "className" : "Lexer",
  "comment" : "\n * This class is in charge of lexical processing of the XPath\n * expression into tokens.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_compiler",
    "type" : "Compiler",
    "comment" : "\n   * The target XPath.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_namespaceContext",
    "type" : "PrefixResolver",
    "comment" : "\n   * The prefix resolver to map prefixes to namespaces in the XPath.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_processor",
    "type" : "XPathParser",
    "comment" : "\n   * The XPath processor object.\n   ",
    "links" : [ ]
  }, {
    "name" : "TARGETEXTRA",
    "type" : "int",
    "comment" : "\n   * This value is added to each element name in the TARGETEXTRA\n   * that is a 'target' (right-most top-level element name).\n   ",
    "links" : [ ]
  }, {
    "name" : "m_patternMap",
    "type" : "int[]",
    "comment" : "\n   * Ignore this, it is going away.\n   * This holds a map to the m_tokenQueue that tells where the top-level elements are.\n   * It is used for pattern matching so the m_tokenQueue can be walked backwards.\n   * Each element that is a 'target', (right-most top level element name) has\n   * TARGETEXTRA added to it.\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "m_patternMapSize",
    "type" : "int",
    "comment" : "\n   * Ignore this, it is going away.\n   * The number of elements that m_patternMap maps;\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void tokenize(String pat) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Walk through the expression and build a token queue, and a map of the top-level\n   * elements.\n   * @param pat XSLT Expression.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void tokenize(String pat, Vector targetStrings) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Walk through the expression and build a token queue, and a map of the top-level\n   * elements.\n   * @param pat XSLT Expression.\n   * @param targetStrings Vector to hold Strings, may be null.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private boolean mapPatternElemPos(int nesting, boolean isStart, boolean isAttrName)",
    "returnType" : "boolean",
    "comment" : "\n   * Record the current position on the token queue as long as\n   * this is a top-level element.  Must be called before the\n   * next token is added to the m_tokenQueue.\n   *\n   * @param nesting The nesting count for the pattern element.\n   * @param isStart true if this is the start of a pattern.\n   * @param isAttrName true if we have determined that this is an attribute name.\n   *\n   * @return true if this is the start of a pattern.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int getTokenQueuePosFromMap(int i)",
    "returnType" : "int",
    "comment" : "\n   * Given a map pos, return the corresponding token queue pos.\n   *\n   * @param i The index in the m_patternMap.\n   *\n   * @return the token queue position.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void resetTokenMark(int mark)",
    "returnType" : "void",
    "comment" : "\n   * Reset token queue mark and m_token to a\n   * given position.\n   * @param mark The new position.\n   ",
    "links" : [ ]
  }, {
    "name" : " final int getKeywordToken(String key)",
    "returnType" : "int",
    "comment" : "\n   * Given a string, return the corresponding keyword token.\n   *\n   * @param key The keyword.\n   *\n   * @return An opcode value.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void recordTokenString(Vector targetStrings)",
    "returnType" : "void",
    "comment" : "\n   * Record the current token in the passed vector.\n   *\n   * @param targetStrings Vector of string.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final void addToTokenQueue(String s)",
    "returnType" : "void",
    "comment" : "\n   * Add a token to the token queue.\n   *\n   *\n   * @param s The token.\n   ",
    "links" : [ ]
  }, {
    "name" : "private int mapNSTokens(String pat, int startSubstring, int posOfNSSep, int posOfScan) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * When a seperator token is found, see if there's a element name or\n   * the like to map.\n   *\n   * @param pat The XPath name string.\n   * @param startSubstring The start of the name string.\n   * @param posOfNSSep The position of the namespace seperator (':').\n   * @param posOfScan The end of the name index.\n   *\n   * @throws javax.xml.transform.TransformerException\n   *\n   * @return -1 always.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void tokenize(String pat) throws javax.xml.transform.TransformerException", " void tokenize(String pat, Vector targetStrings) throws javax.xml.transform.TransformerException", "private boolean mapPatternElemPos(int nesting, boolean isStart, boolean isAttrName)", "private int getTokenQueuePosFromMap(int i)", "private final void resetTokenMark(int mark)", " final int getKeywordToken(String key)", "private void recordTokenString(Vector targetStrings)", "private final void addToTokenQueue(String s)", "private int mapNSTokens(String pat, int startSubstring, int posOfNSSep, int posOfScan) throws javax.xml.transform.TransformerException" ],
  "variableNames" : [ "m_compiler", "m_namespaceContext", "m_processor", "TARGETEXTRA", "m_patternMap", "m_patternMapSize" ]
}