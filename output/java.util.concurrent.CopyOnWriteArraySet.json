{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CopyOnWriteArraySet.java",
  "packageName" : "java.util.concurrent",
  "className" : "CopyOnWriteArraySet",
  "comment" : "\n * A {@link Set} that uses an internal {@link CopyOnWriteArrayList}\n * for all of its operations.  Thus, it shares the same basic properties:\n * <ul>\n *  <li>It is best suited for applications in which set sizes generally\n *       stay small, read-only operations\n *       vastly outnumber mutative operations, and you need\n *       to prevent interference among threads during traversal.\n *  <li>It is thread-safe.\n *  <li>Mutative operations ({@code add}, {@code set}, {@code remove}, etc.)\n *      are expensive since they usually entail copying the entire underlying\n *      array.\n *  <li>Iterators do not support the mutative {@code remove} operation.\n *  <li>Traversal via iterators is fast and cannot encounter\n *      interference from other threads. Iterators rely on\n *      unchanging snapshots of the array at the time the iterators were\n *      constructed.\n * </ul>\n *\n * <p><b>Sample Usage.</b> The following code sketch uses a\n * copy-on-write set to maintain a set of Handler objects that\n * perform some action upon state updates.\n *\n * <pre> {@code\n * class Handler { void handle() { ... } }\n *\n * class X {\n *   private final CopyOnWriteArraySet<Handler> handlers\n *     = new CopyOnWriteArraySet<>();\n *   public void addHandler(Handler h) { handlers.add(h); }\n *\n *   private long internalState;\n *   private synchronized void changeState() { internalState = ...; }\n *\n *   public void update() {\n *     changeState();\n *     for (Handler handler : handlers)\n *       handler.handle();\n *   }\n * }}</pre>\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @see CopyOnWriteArrayList\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this set\n ",
  "links" : [ "java.util.AbstractSet", "java.util.concurrent.CopyOnWriteArrayList" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "al",
    "type" : "CopyOnWriteArrayList<E>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this set.\n     *\n     * @return the number of elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains no elements.\n     *\n     * @return {@code true} if this set contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains the specified element.\n     * More formally, returns {@code true} if and only if this set\n     * contains an element {@code e} such that {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this set is to be tested\n     * @return {@code true} if this set contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this set.\n     * If this set makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the\n     * elements in the same order.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it\n     * are maintained by this set.  (In other words, this method must\n     * allocate a new array even if this set is backed by an array).\n     * The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all the elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this set; the\n     * runtime type of the returned array is that of the specified array.\n     * If the set fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this set.\n     *\n     * <p>If this set fits in the specified array with room to spare\n     * (i.e., the array has more elements than this set), the element in\n     * the array immediately following the end of the set is set to\n     * {@code null}.  (This is useful in determining the length of this\n     * set <i>only</i> if the caller knows that this set does not contain\n     * any null elements.)\n     *\n     * <p>If this set makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the elements\n     * in the same order.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a set known to contain only strings.\n     * The following code can be used to dump the set into a newly allocated\n     * array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of this set are to be\n     *        stored, if it is big enough; otherwise, a new array of the same\n     *        runtime type is allocated for this purpose.\n     * @return an array containing all the elements in this set\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in this\n     *         set\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this set.\n     * The set will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified element from this set if it is present.\n     * More formally, removes an element {@code e} such that\n     * {@code Objects.equals(o, e)}, if this set contains such an element.\n     * Returns {@code true} if this set contained the element (or\n     * equivalently, if this set changed as a result of the call).\n     * (This set will not contain the element once the call returns.)\n     *\n     * @param o object to be removed from this set, if present\n     * @return {@code true} if this set contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified element to this set if it is not already present.\n     * More formally, adds the specified element {@code e} to this set if\n     * the set contains no element {@code e2} such that\n     * {@code Objects.equals(e, e2)}.\n     * If this set already contains the element, the call leaves the set\n     * unchanged and returns {@code false}.\n     *\n     * @param e element to be added to this set\n     * @return {@code true} if this set did not already contain the specified\n     *         element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains all of the elements of the\n     * specified collection.  If the specified collection is also a set, this\n     * method returns {@code true} if it is a <i>subset</i> of this set.\n     *\n     * @param  c collection to be checked for containment in this set\n     * @return {@code true} if this set contains all of the elements of the\n     *         specified collection\n     * @throws NullPointerException if the specified collection is null\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int compareSets(Object[] snapshot, Set<?> set)",
    "returnType" : "int",
    "comment" : "\n     * Tells whether the objects in snapshot (regarded as a set) are a\n     * superset of the given set.\n     *\n     * @return -1 if snapshot is not a superset, 0 if the two sets\n     * contain precisely the same elements, and 1 if snapshot is a\n     * proper superset of the given set\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection to this set if\n     * they're not already present.  If the specified collection is also a\n     * set, the {@code addAll} operation effectively modifies this set so\n     * that its value is the <i>union</i> of the two sets.  The behavior of\n     * this operation is undefined if the specified collection is modified\n     * while the operation is in progress.\n     *\n     * @param  c collection containing elements to be added to this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws NullPointerException if the specified collection is null\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this set all of its elements that are contained in the\n     * specified collection.  If the specified collection is also a set,\n     * this operation effectively modifies this set so that its value is the\n     * <i>asymmetric set difference</i> of the two sets.\n     *\n     * @param  c collection containing elements to be removed from this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this set contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this set that are contained in the\n     * specified collection.  In other words, removes from this set all of\n     * its elements that are not contained in the specified collection.  If\n     * the specified collection is also a set, this operation effectively\n     * modifies this set so that its value is the <i>intersection</i> of the\n     * two sets.\n     *\n     * @param  c collection containing elements to be retained in this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this set contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements contained in this set\n     * in the order in which these elements were added.\n     *\n     * <p>The returned iterator provides a snapshot of the state of the set\n     * when the iterator was constructed. No synchronization is needed while\n     * traversing the iterator. The iterator does <em>NOT</em> support the\n     * {@code remove} method.\n     *\n     * @return an iterator over the elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this set for equality.\n     * Returns {@code true} if the specified object is the same object\n     * as this object, or if it is also a {@link Set} and the elements\n     * returned by an {@linkplain Set#iterator() iterator} over the\n     * specified set are the same as the elements returned by an\n     * iterator over this set.  More formally, the two iterators are\n     * considered to return the same elements if they return the same\n     * number of elements and for every element {@code e1} returned by\n     * the iterator over the specified set, there is an element\n     * {@code e2} returned by the iterator over this set such that\n     * {@code Objects.equals(e1, e2)}.\n     *\n     * @param o object to be compared for equality with this set\n     * @return {@code true} if the specified object is equal to this set\n     ",
    "links" : [ "java.util.AbstractSet" ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this set in the order\n     * in which these elements were added.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#IMMUTABLE},\n     * {@link Spliterator#DISTINCT}, {@link Spliterator#SIZED}, and\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * <p>The spliterator provides a snapshot of the state of the set\n     * when the spliterator was constructed. No synchronization is needed while\n     * operating on the spliterator.\n     *\n     * @return a {@code Spliterator} over the elements in this set\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#IMMUTABLE", "java.util.Spliterator#DISTINCT", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator" ]
  } ],
  "methodNames" : [ "public int size()", "public boolean isEmpty()", "public boolean contains(Object o)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public void clear()", "public boolean remove(Object o)", "public boolean add(E e)", "public boolean containsAll(Collection<?> c)", "private static int compareSets(Object[] snapshot, Set<?> set)", "public boolean addAll(Collection<? extends E> c)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "public Iterator<E> iterator()", "public boolean equals(Object o)", "public boolean removeIf(Predicate<? super E> filter)", "public void forEach(Consumer<? super E> action)", "public Spliterator<E> spliterator()" ],
  "variableNames" : [ "serialVersionUID", "al" ]
}