{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/WifiSsid.java",
  "packageName" : "android.net.wifi",
  "className" : "WifiSsid",
  "comment" : "\n * Stores SSID octets and handles conversion.\n *\n * For Ascii encoded string, any octet < 32 or > 127 is encoded as\n * a \"\\x\" followed by the hex representation of the octet.\n * Exception chars are \", \\, \\e, \\n, \\r, \\t which are escaped by a \\\n * See src/utils/common.c for the implementation in the supplicant.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "octets",
    "type" : "ByteArrayOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEX_RADIX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiSsid>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static WifiSsid createFromByteArray(@Nullable byte[] ssid)",
    "returnType" : "WifiSsid",
    "comment" : "\n     * Create a WifiSsid from a raw byte array. If the byte array is null, return an empty WifiSsid\n     * object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WifiSsid createFromAsciiEncoded(String asciiEncoded)",
    "returnType" : "WifiSsid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static WifiSsid createFromHex(String hexStr)",
    "returnType" : "WifiSsid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void convertToBytes(String asciiEncoded)",
    "returnType" : "void",
    "comment" : " This function is equivalent to printf_decode() at src/utils/common.c in\n     * the supplicant ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts this SSID to an unquoted UTF-8 String representation.\n     * @return the SSID string, or {@link WifiManager#UNKNOWN_SSID} if there was an error.\n     ",
    "links" : [ "WifiManager#UNKNOWN_SSID" ]
  }, {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isArrayAllZeroes(byte[] ssidBytes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isHidden()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getOctets()",
    "returnType" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getHexString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "octets", "HEX_RADIX", "NONE", "CREATOR" ],
  "methodNames" : [ "public static WifiSsid createFromByteArray(@Nullable byte[] ssid)", "public static WifiSsid createFromAsciiEncoded(String asciiEncoded)", "public static WifiSsid createFromHex(String hexStr)", "private void convertToBytes(String asciiEncoded)", "public String toString()", "public boolean equals(Object thatObject)", "public int hashCode()", "private boolean isArrayAllZeroes(byte[] ssidBytes)", "public boolean isHidden()", "public byte[] getOctets()", "public String getHexString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ]
}