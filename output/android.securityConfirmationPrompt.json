{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/ConfirmationPrompt.java",
  "packageName" : "android.security",
  "className" : "ConfirmationPrompt",
  "comment" : "\n * Class used for displaying confirmation prompts.\n *\n * <p>Confirmation prompts are prompts shown to the user to confirm a given text and are\n * implemented in a way that a positive response indicates with high confidence that the user has\n * seen the given text, even if the Android framework (including the kernel) was\n * compromised. Implementing confirmation prompts with these guarantees requires dedicated\n * hardware-support and may not always be available.\n *\n * <p>Confirmation prompts are typically used with an external entitity - the <i>Relying Party</i> -\n * in the following way. The setup steps are as follows:\n * <ul>\n * <li> Before first use, the application generates a key-pair with the\n * {@link android.security.keystore.KeyGenParameterSpec.Builder#setUserConfirmationRequired\n * CONFIRMATION tag} set. Device attestation,\n * e.g. {@link java.security.KeyStore#getCertificateChain getCertificateChain()}, is used to\n * generate a certificate chain that includes the public key (<code>Kpub</code> in the following)\n * of the newly generated key.\n * <li> The application sends <code>Kpub</code> and the certificate chain resulting from device\n * attestation to the <i>Relying Party</i>.\n * <li> The <i>Relying Party</i> validates the certificate chain which involves checking the root\n * certificate is what is expected (e.g. a certificate from Google), each certificate signs the\n * next one in the chain, ending with <code>Kpub</code>, and that the attestation certificate\n * asserts that <code>Kpub</code> has the\n * {@link android.security.keystore.KeyGenParameterSpec.Builder#setUserConfirmationRequired\n * CONFIRMATION tag} set.\n * Additionally the relying party stores <code>Kpub</code> and associates it with the device\n * it was received from.\n * </ul>\n *\n * <p>The <i>Relying Party</i> is typically an external device (for example connected via\n * Bluetooth) or application server.\n *\n * <p>Before executing a transaction which requires a high assurance of user content, the\n * application does the following:\n * <ul>\n * <li> The application gets a cryptographic nonce from the <i>Relying Party</i> and passes this as\n * the <code>extraData</code> (via the Builder helper class) to the\n * {@link #presentPrompt presentPrompt()} method. The <i>Relying Party</i> stores the nonce locally\n * since it'll use it in a later step.\n * <li> If the user approves the prompt a <i>Confirmation Response</i> is returned in the\n * {@link ConfirmationCallback#onConfirmed onConfirmed(byte[])} callback as the\n * <code>dataThatWasConfirmed</code> parameter. This blob contains the text that was shown to the\n * user, the <code>extraData</code> parameter, and possibly other data.\n * <li> The application signs the <i>Confirmation Response</i> with the previously created key and\n * sends the blob and the signature to the <i>Relying Party</i>.\n * <li> The <i>Relying Party</i> checks that the signature was made with <code>Kpub</code> and then\n * extracts <code>promptText</code> matches what is expected and <code>extraData</code> matches the\n * previously created nonce. If all checks passes, the transaction is executed.\n * </ul>\n *\n * <p>A common way of implementing the \"<code>promptText</code> is what is expected\" check in the\n * last bullet, is to have the <i>Relying Party</i> generate <code>promptText</code> and store it\n * along the nonce in the <code>extraData</code> blob.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPromptText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ConfirmationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyStore",
    "type" : "KeyStore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackBinder",
    "type" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UI_OPTION_ACCESSIBILITY_INVERTED_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UI_OPTION_ACCESSIBILITY_MAGNIFIED_FLAG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void doCallback(int responseCode, byte[] dataThatWasConfirmed, ConfirmationCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getUiOptionsAsFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAccessibilityServiceRunning(Context context)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void presentPrompt(@NonNull Executor executor, @NonNull ConfirmationCallback callback) throws ConfirmationAlreadyPresentingException, ConfirmationNotAvailableException",
    "returnType" : "void",
    "comment" : "\n     * Requests a confirmation prompt to be presented to the user.\n     *\n     * When the prompt is no longer being presented, one of the methods in\n     * {@link ConfirmationCallback} is called on the supplied callback object.\n     *\n     * Confirmation prompts may not be available when accessibility services are running so this\n     * may fail with a {@link ConfirmationNotAvailableException} exception even if\n     * {@link #isSupported} returns {@code true}.\n     *\n     * @param executor the executor identifying the thread that will receive the callback.\n     * @param callback the callback to use when the prompt is done showing.\n     * @throws IllegalArgumentException if the prompt text is too long or malfomed.\n     * @throws ConfirmationAlreadyPresentingException if another prompt is being presented.\n     * @throws ConfirmationNotAvailableException if confirmation prompts are not supported.\n     ",
    "links" : [ "ConfirmationCallback", "ConfirmationNotAvailableException", "#isSupported" ]
  }, {
    "name" : "public void cancelPrompt()",
    "returnType" : "void",
    "comment" : "\n     * Cancels a prompt currently being displayed.\n     *\n     * On success, the\n     * {@link ConfirmationCallback#onCanceled onCanceled()} method on\n     * the supplied callback object will be called asynchronously.\n     *\n     * @throws IllegalStateException if no prompt is currently being presented.\n     ",
    "links" : [ "ConfirmationCallback#onCanceled" ]
  }, {
    "name" : "public static boolean isSupported(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the device supports confirmation prompts.\n     *\n     * @param context the application context.\n     * @return true if confirmation prompts are supported by the device.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mPromptText", "mExtraData", "mCallback", "mExecutor", "mContext", "mKeyStore", "mCallbackBinder", "UI_OPTION_ACCESSIBILITY_INVERTED_FLAG", "UI_OPTION_ACCESSIBILITY_MAGNIFIED_FLAG" ],
  "methodNames" : [ "private void doCallback(int responseCode, byte[] dataThatWasConfirmed, ConfirmationCallback callback)", "private int getUiOptionsAsFlags()", "private static boolean isAccessibilityServiceRunning(Context context)", "public void presentPrompt(@NonNull Executor executor, @NonNull ConfirmationCallback callback) throws ConfirmationAlreadyPresentingException, ConfirmationNotAvailableException", "public void cancelPrompt()", "public static boolean isSupported(Context context)" ]
}