{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/Axis.java",
  "packageName" : "org.apache.xml.dtm",
  "className" : "Axis",
  "comment" : "\n * Specifies values related to XPath Axes.\n * <p>The ancestor, descendant, following, preceding and self axes partition a\n * document (ignoring attribute and namespace nodes): they do not overlap\n * and together they contain all the nodes in the document.</p>\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ANCESTOR",
    "type" : "int",
    "comment" : "\n   * The ancestor axis contains the ancestors of the context node;\n   *  the ancestors of the context node consist of the parent of context\n   *  node and the parent's parent and so on; thus, the ancestor axis will\n   *  always include the root node, unless the context node is the root node.\n   ",
    "links" : [ ]
  }, {
    "name" : "ANCESTORORSELF",
    "type" : "int",
    "comment" : "\n   * the ancestor-or-self axis contains the context node and the ancestors of\n   *  the context node; thus, the ancestor axis will always include the\n   *  root node.\n   ",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * the attribute axis contains the attributes of the context node; the axis\n   *  will be empty unless the context node is an element.\n   ",
    "links" : [ ]
  }, {
    "name" : "CHILD",
    "type" : "int",
    "comment" : " The child axis contains the children of the context node. ",
    "links" : [ ]
  }, {
    "name" : "DESCENDANT",
    "type" : "int",
    "comment" : "\n   * The descendant axis contains the descendants of the context node;\n   *  a descendant is a child or a child of a child and so on; thus the\n   *  descendant axis never contains attribute or namespace nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "DESCENDANTORSELF",
    "type" : "int",
    "comment" : "\n   * The descendant-or-self axis contains the context node and the\n   *  descendants of the context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "FOLLOWING",
    "type" : "int",
    "comment" : "\n   * the following axis contains all nodes in the same document as the\n   *  context node that are after the context node in document order, excluding\n   *  any descendants and excluding attribute nodes and namespace nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "FOLLOWINGSIBLING",
    "type" : "int",
    "comment" : "\n   * The following-sibling axis contains all the following siblings of the\n   *  context node; if the context node is an attribute node or namespace node,\n   *  the following-sibling axis is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACEDECLS",
    "type" : "int",
    "comment" : "\n   * The namespace axis contains the namespace nodes of the context node; the\n   *  axis will be empty unless the context node is an element.\n   ",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE",
    "type" : "int",
    "comment" : "\n   * The namespace axis contains the namespace nodes of the context node; the\n   *  axis will be empty unless the context node is an element.\n   ",
    "links" : [ ]
  }, {
    "name" : "PARENT",
    "type" : "int",
    "comment" : "\n   * The parent axis contains the parent of the context node,\n   *  if there is one.\n   ",
    "links" : [ ]
  }, {
    "name" : "PRECEDING",
    "type" : "int",
    "comment" : "\n   * The preceding axis contains all nodes in the same document as the context\n   *  node that are before the context node in document order, excluding any\n   *  ancestors and excluding attribute nodes and namespace nodes\n   ",
    "links" : [ ]
  }, {
    "name" : "PRECEDINGSIBLING",
    "type" : "int",
    "comment" : "\n   * The preceding-sibling axis contains all the preceding siblings of the\n   *  context node; if the context node is an attribute node or namespace node,\n   *  the preceding-sibling axis is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "SELF",
    "type" : "int",
    "comment" : " The self axis contains just the context node itself. ",
    "links" : [ ]
  }, {
    "name" : "ALLFROMNODE",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, traversing the subtree including the subtree\n   *  root, descendants, attributes, and namespace node decls.\n   ",
    "links" : [ ]
  }, {
    "name" : "PRECEDINGANDANCESTOR",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, traversing the the preceding and the ancestor nodes, \n   * needed for inverseing select patterns to match patterns.\n   ",
    "links" : [ ]
  }, {
    "name" : "ALL",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, returns all nodes in the tree from and including the \n   * root.\n   ",
    "links" : [ ]
  }, {
    "name" : "DESCENDANTSFROMROOT",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, returns all nodes that aren't namespaces or attributes, \n   * from and including the root.\n   ",
    "links" : [ ]
  }, {
    "name" : "DESCENDANTSORSELFFROMROOT",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, returns all nodes that aren't namespaces or attributes, \n   * from and including the root.\n   ",
    "links" : [ ]
  }, {
    "name" : "ROOT",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, returns root only.\n   ",
    "links" : [ ]
  }, {
    "name" : "FILTEREDLIST",
    "type" : "int",
    "comment" : "\n   * A non-xpath axis, for functions.\n   ",
    "links" : [ ]
  }, {
    "name" : "isReverse",
    "type" : "boolean[]",
    "comment" : "\n   * A table to identify whether an axis is a reverse axis;\n   ",
    "links" : [ ]
  }, {
    "name" : "names",
    "type" : "String[]",
    "comment" : " The names of the axes for diagnostic purposes. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isReverse(int axis)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getNames(int index)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getNamesLength()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isReverse(int axis)", "public static String getNames(int index)", "public static int getNamesLength()" ],
  "variableNames" : [ "ANCESTOR", "ANCESTORORSELF", "ATTRIBUTE", "CHILD", "DESCENDANT", "DESCENDANTORSELF", "FOLLOWING", "FOLLOWINGSIBLING", "NAMESPACEDECLS", "NAMESPACE", "PARENT", "PRECEDING", "PRECEDINGSIBLING", "SELF", "ALLFROMNODE", "PRECEDINGANDANCESTOR", "ALL", "DESCENDANTSFROMROOT", "DESCENDANTSORSELFFROMROOT", "ROOT", "FILTEREDLIST", "isReverse", "names" ]
}