{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/webkit/MimeTypeMap.java",
  "packageName" : "android.webkit",
  "className" : "MimeTypeMap",
  "comment" : "\n * Two-way map that maps MIME-types to file extensions and vice versa.\n *\n * <p>See also {@link java.net.URLConnection#guessContentTypeFromName}\n * and {@link java.net.URLConnection#guessContentTypeFromStream}. This\n * class and {@code URLConnection} share the same MIME-type database.\n ",
  "variables" : [ {
    "name" : "sMimeTypeMap",
    "type" : "MimeTypeMap",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getFileExtensionFromUrl(String url)",
    "returnType" : "String",
    "comment" : "\n     * Returns the file extension or an empty string if there is no\n     * extension. This method is a convenience method for obtaining the\n     * extension of a url and has undefined results for other Strings.\n     * @param url\n     * @return The file extension of the given url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMimeType(String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the given MIME type has an entry in the map.\n     * @param mimeType A MIME type (i.e. text/plain)\n     * @return {@code true} if there is a mimeType entry in the map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMimeTypeFromExtension(String extension)",
    "returnType" : "String",
    "comment" : "\n     * Return the MIME type for the given extension.\n     * @param extension A file extension without the leading '.'\n     * @return The MIME type for the given extension or {@code null} if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String mimeTypeFromExtension(String extension)",
    "returnType" : "String",
    "comment" : " Static method called by jni.",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExtension(String extension)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the given extension has a registered MIME type.\n     * @param extension A file extension without the leading '.'\n     * @return {@code true} if there is an extension entry in the map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtensionFromMimeType(String mimeType)",
    "returnType" : "String",
    "comment" : "\n     * Return the registered extension for the given MIME type. Note that some\n     * MIME types map to multiple extensions. This call will return the most\n     * common extension for the given MIME type.\n     * @param mimeType A MIME type (i.e. text/plain)\n     * @return The extension for the given MIME type or {@code null} if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : " String remapGenericMimeType(@Nullable String mimeType, String url, String contentDisposition)",
    "returnType" : "String",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public static MimeTypeMap getSingleton()",
    "returnType" : "MimeTypeMap",
    "comment" : "\n     * Get the singleton instance of MimeTypeMap.\n     * @return The singleton instance of the MIME-type map.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sMimeTypeMap" ],
  "methodNames" : [ "public static String getFileExtensionFromUrl(String url)", "public boolean hasMimeType(String mimeType)", "public String getMimeTypeFromExtension(String extension)", "private static String mimeTypeFromExtension(String extension)", "public boolean hasExtension(String extension)", "public String getExtensionFromMimeType(String mimeType)", " String remapGenericMimeType(@Nullable String mimeType, String url, String contentDisposition)", "public static MimeTypeMap getSingleton()" ]
}