{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/VoiceInteractor.java",
  "packageName" : "android.app",
  "className" : "VoiceInteractor",
  "comment" : "\n * Interface for an {@link Activity} to interact with the user through voice.  Use\n * {@link android.app.Activity#getVoiceInteractor() Activity.getVoiceInteractor}\n * to retrieve the interface, if the activity is currently involved in a voice interaction.\n *\n * <p>The voice interactor revolves around submitting voice interaction requests to the\n * back-end voice interaction service that is working with the user.  These requests are\n * submitted with {@link #submitRequest}, providing a new instance of a\n * {@link Request} subclass describing the type of operation to perform -- currently the\n * possible requests are {@link ConfirmationRequest} and {@link CommandRequest}.\n *\n * <p>Once a request is submitted, the voice system will process it and eventually deliver\n * the result to the request object.  The application can cancel a pending request at any\n * time.\n *\n * <p>The VoiceInteractor is integrated with Activity's state saving mechanism, so that\n * if an activity is being restarted with retained state, it will retain the current\n * VoiceInteractor and any outstanding requests.  Because of this, you should always use\n * {@link Request#getActivity() Request.getActivity} to get back to the activity of a\n * request, rather than holding on to the activity instance yourself, either explicitly\n * or implicitly through a non-static inner class.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_REQUESTS",
    "type" : "Request[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CANCELLATION_SIGNAL",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KEY_KILL_SIGNAL",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mInteractor",
    "type" : "IVoiceInteractor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetaining",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerCaller",
    "type" : "HandlerCaller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerCallerCallback",
    "type" : "HandlerCaller.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IVoiceInteractorCallback.Stub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRequests",
    "type" : "ArrayMap<IBinder, Request>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDestroyCallbacks",
    "type" : "ArrayMap<Runnable, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CONFIRMATION_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_PICK_OPTION_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_COMPLETE_VOICE_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ABORT_VOICE_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_COMMAND_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CANCEL_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Request pullRequest(IVoiceInteractorRequest request, boolean complete)",
    "returnType" : "Request",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayList<Request> makeRequestList()",
    "returnType" : "ArrayList<Request>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void attachActivity(Activity activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void retainInstance()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void detachActivity()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean submitRequest(Request request)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean submitRequest(Request request, String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Submit a new {@link Request} to the voice interaction service.  The request must be\n     * one of the available subclasses -- {@link ConfirmationRequest}, {@link PickOptionRequest},\n     * {@link CompleteVoiceRequest}, {@link AbortVoiceRequest}, or {@link CommandRequest}.\n     *\n     * @param request The desired request to submit.\n     * @param name An optional name for this request, or null. This can be used later with\n     * {@link #getActiveRequests} and {@link #getActiveRequest} to find the request.\n     *\n     * @return Returns true of the request was successfully submitted, else false.\n     ",
    "links" : [ "Request", "ConfirmationRequest", "PickOptionRequest", "CompleteVoiceRequest", "AbortVoiceRequest", "CommandRequest", "#getActiveRequests", "#getActiveRequest" ]
  }, {
    "name" : "public Request[] getActiveRequests()",
    "returnType" : "Request[]",
    "comment" : "\n     * Return all currently active requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Request getActiveRequest(String name)",
    "returnType" : "Request",
    "comment" : "\n     * Return any currently active request that was submitted with the given name.\n     *\n     * @param name The name used to submit the request, as per\n     * {@link #submitRequest(android.app.VoiceInteractor.Request, String)}.\n     * @return Returns the active request with that name, or null if there was none.\n     ",
    "links" : [ "#submitRequest" ]
  }, {
    "name" : "public boolean[] supportsCommands(String[] commands)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Queries the supported commands available from the VoiceInteractionService.\n     * The command is a string that describes the generic operation to be performed.\n     * An example might be \"org.example.commands.PICK_DATE\" to ask the user to pick\n     * a date.  (Note: This is not an actual working example.)\n     *\n     * @param commands The array of commands to query for support.\n     * @return Array of booleans indicating whether each command is supported or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the voice interactor is destroyed. You should not interact\n     * with a destroyed voice interactor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerOnDestroyedCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Runnable callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a callback to be called when the VoiceInteractor is destroyed.\n     *\n     * @param executor Executor on which to run the callback.\n     * @param callback The callback to run.\n     * @return whether the callback was registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterOnDestroyedCallback(@NonNull Runnable callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters a previously registered onDestroy callback\n     *\n     * @param callback The callback to remove.\n     * @return whether the callback was unregistered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notifyDirectActionsChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the assist framework that the direct actions supported by the app changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "NO_REQUESTS", "KEY_CANCELLATION_SIGNAL", "KEY_KILL_SIGNAL", "mInteractor", "mContext", "mActivity", "mRetaining", "mHandlerCaller", "mHandlerCallerCallback", "mCallback", "mActiveRequests", "mOnDestroyCallbacks", "MSG_CONFIRMATION_RESULT", "MSG_PICK_OPTION_RESULT", "MSG_COMPLETE_VOICE_RESULT", "MSG_ABORT_VOICE_RESULT", "MSG_COMMAND_RESULT", "MSG_CANCEL_RESULT" ],
  "methodNames" : [ " Request pullRequest(IVoiceInteractorRequest request, boolean complete)", "private ArrayList<Request> makeRequestList()", " void attachActivity(Activity activity)", " void retainInstance()", " void detachActivity()", " void destroy()", "public boolean submitRequest(Request request)", "public boolean submitRequest(Request request, String name)", "public Request[] getActiveRequests()", "public Request getActiveRequest(String name)", "public boolean[] supportsCommands(String[] commands)", "public boolean isDestroyed()", "public boolean registerOnDestroyedCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Runnable callback)", "public boolean unregisterOnDestroyedCallback(@NonNull Runnable callback)", "public void notifyDirectActionsChanged()", " void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ]
}