{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Camera.java",
  "packageName" : "android.graphics",
  "className" : "Camera",
  "comment" : "\n * A camera instance can be used to compute 3D transformations and\n * generate a matrix that can be applied, for instance, on a\n * {@link Canvas}.\n ",
  "variables" : [ {
    "name" : "native_instance",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public native void save()",
    "returnType" : "void",
    "comment" : "\n     * Saves the camera state. Each save should be balanced\n     * with a call to {@link #restore()}.\n     * \n     * @see #save() \n     ",
    "links" : [ "#restore" ]
  }, {
    "name" : "public native void restore()",
    "returnType" : "void",
    "comment" : "\n     * Restores the saved state, if any.\n     * \n     * @see #restore() \n     ",
    "links" : [ ]
  }, {
    "name" : "public native void translate(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Applies a translation transform on all three axis.\n     * \n     * @param x The distance to translate by on the X axis\n     * @param y The distance to translate by on the Y axis\n     * @param z The distance to translate by on the Z axis\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void rotateX(float deg)",
    "returnType" : "void",
    "comment" : "\n     * Applies a rotation transform around the X axis.\n     * \n     * @param deg The angle of rotation around the X axis, in degrees\n     * \n     * @see #rotateY(float)\n     * @see #rotateZ(float)\n     * @see #rotate(float, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void rotateY(float deg)",
    "returnType" : "void",
    "comment" : "\n     * Applies a rotation transform around the Y axis.\n     * \n     * @param deg The angle of rotation around the Y axis, in degrees\n     * \n     * @see #rotateX(float)\n     * @see #rotateZ(float)\n     * @see #rotate(float, float, float) \n     ",
    "links" : [ ]
  }, {
    "name" : "public native void rotateZ(float deg)",
    "returnType" : "void",
    "comment" : "\n     * Applies a rotation transform around the Z axis.\n     * \n     * @param deg The angle of rotation around the Z axis, in degrees\n     * \n     * @see #rotateX(float)\n     * @see #rotateY(float)\n     * @see #rotate(float, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void rotate(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Applies a rotation transform around all three axis.\n     * \n     * @param x The angle of rotation around the X axis, in degrees\n     * @param y The angle of rotation around the Y axis, in degrees\n     * @param z The angle of rotation around the Z axis, in degrees\n     * \n     * @see #rotateX(float)\n     * @see #rotateY(float)\n     * @see #rotateZ(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native float getLocationX()",
    "returnType" : "float",
    "comment" : "\n     * Gets the x location of the camera.\n     *\n     * @see #setLocation(float, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native float getLocationY()",
    "returnType" : "float",
    "comment" : "\n     * Gets the y location of the camera.\n     *\n     * @see #setLocation(float, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native float getLocationZ()",
    "returnType" : "float",
    "comment" : "\n     * Gets the z location of the camera.\n     *\n     * @see #setLocation(float, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void setLocation(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Sets the location of the camera. The default location is set at\n     * 0, 0, -8.\n     * \n     * @param x The x location of the camera\n     * @param y The y location of the camera\n     * @param z The z location of the camera\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getMatrix(Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Computes the matrix corresponding to the current transformation\n     * and copies it to the supplied matrix object.\n     * \n     * @param matrix The matrix to copy the current transforms into\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyToCanvas(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Computes the matrix corresponding to the current transformation\n     * and applies it to the specified Canvas.\n     * \n     * @param canvas The Canvas to set the transform matrix onto\n     ",
    "links" : [ ]
  }, {
    "name" : "public native float dotWithNormal(float dx, float dy, float dz)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeConstructor()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeDestructor()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeGetMatrix(long native_matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nativeApplyToCanvas(long native_canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "native_instance" ],
  "methodNames" : [ "public native void save()", "public native void restore()", "public native void translate(float x, float y, float z)", "public native void rotateX(float deg)", "public native void rotateY(float deg)", "public native void rotateZ(float deg)", "public native void rotate(float x, float y, float z)", "public native float getLocationX()", "public native float getLocationY()", "public native float getLocationZ()", "public native void setLocation(float x, float y, float z)", "public void getMatrix(Matrix matrix)", "public void applyToCanvas(Canvas canvas)", "public native float dotWithNormal(float dx, float dy, float dz)", "protected void finalize() throws Throwable", "private native void nativeConstructor()", "private native void nativeDestructor()", "private native void nativeGetMatrix(long native_matrix)", "private native void nativeApplyToCanvas(long native_canvas)" ]
}