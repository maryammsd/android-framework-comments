{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLServerSocket.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLServerSocket",
  "comment" : "\n * This class extends <code>ServerSocket</code>s and\n * provides secure server sockets using protocols such as the Secure\n * Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.\n * <P>\n * Instances of this class are generally created using a\n * <code>SSLServerSocketFactory</code>.  The primary function\n * of <code>SSLServerSocket</code>s\n * is to create <code>SSLSocket</code>s by <code>accept</code>ing\n * connections.\n * <P>\n * <code>SSLServerSocket</code>s contain several pieces of state data\n * which are inherited by the <code>SSLSocket</code> at\n * socket creation.  These include the enabled cipher\n * suites and protocols, whether client\n * authentication is necessary, and whether created sockets should\n * begin handshaking in client or server mode.  The state\n * inherited by the created <code>SSLSocket</code> can be\n * overriden by calling the appropriate methods.\n *\n * @see java.net.ServerSocket\n * @see SSLSocket\n *\n * @since 1.4\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String[] getEnabledCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of cipher suites which are currently enabled\n     * for use by newly accepted connections.\n     * <P>\n     * If this list has not been explicitly modified, a system-provided\n     * default guarantees a minimum quality of service in all enabled\n     * cipher suites.\n     * <P>\n     * There are several reasons why an enabled cipher suite might\n     * not actually be used.  For example:  the server socket might\n     * not have appropriate private keys available to it or the cipher\n     * suite might be anonymous, precluding the use of client authentication,\n     * while the server socket has been told to require that sort of\n     * authentication.\n     *\n     * @return an array of cipher suites enabled\n     * @see #getSupportedCipherSuites()\n     * @see #setEnabledCipherSuites(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnabledCipherSuites(String[] suites)",
    "returnType" : "void",
    "comment" : "\n     * Sets the cipher suites enabled for use by accepted connections.\n     * <P>\n     * The cipher suites must have been listed by getSupportedCipherSuites()\n     * as being supported.  Following a successful call to this method,\n     * only suites listed in the <code>suites</code> parameter are enabled\n     * for use.\n     * <P>\n     * Suites that require authentication information which is not available\n     * in this ServerSocket's authentication context will not be used\n     * in any case, even if they are enabled.\n     * <P>\n     * <code>SSLSocket</code>s returned from <code>accept()</code>\n     * inherit this setting.\n     *\n     * @param suites Names of all the cipher suites to enable\n     * @exception IllegalArgumentException when one or more of ciphers\n     *          named by the parameter is not supported, or when\n     *          the parameter is null.\n     * @see #getSupportedCipherSuites()\n     * @see #getEnabledCipherSuites()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getSupportedCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the cipher suites which could be enabled for use\n     * on an SSL connection.\n     * <P>\n     * Normally, only a subset of these will actually\n     * be enabled by default, since this list may include cipher suites which\n     * do not meet quality of service requirements for those defaults.  Such\n     * cipher suites are useful in specialized applications.\n     *\n     * <p class=\"caution\">Applications should not blindly enable all supported\n     * cipher suites.  The supported cipher suites can include signaling cipher suite\n     * values that can cause connection problems if enabled inappropriately.\n     *\n     * <p>The proper way to use this method is to either check if a specific cipher\n     * suite is supported via {@code Arrays.asList(getSupportedCipherSuites()).contains(...)}\n     * or to filter a desired list of cipher suites to only the supported ones via\n     * {@code desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites()))}.\n     *\n     * @return an array of cipher suite names\n     * @see #getEnabledCipherSuites()\n     * @see #setEnabledCipherSuites(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getSupportedProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the protocols which could be enabled for use.\n     *\n     * @return an array of protocol names supported\n     * @see #getEnabledProtocols()\n     * @see #setEnabledProtocols(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getEnabledProtocols()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the protocols which are currently\n     * enabled for use by the newly accepted connections.\n     *\n     * @return an array of protocol names\n     * @see #getSupportedProtocols()\n     * @see #setEnabledProtocols(String [])\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnabledProtocols(String[] protocols)",
    "returnType" : "void",
    "comment" : "\n     * Controls which particular protocols are enabled for use by\n     * accepted connections.\n     * <P>\n     * The protocols must have been listed by\n     * getSupportedProtocols() as being supported.\n     * Following a successful call to this method, only protocols listed\n     * in the <code>protocols</code> parameter are enabled for use.\n     * <p>\n     * Because of the way the protocol version is negotiated, connections\n     * will only be able to use a member of the lowest set of contiguous\n     * enabled protocol versions.  For example, enabling TLSv1.2 and TLSv1\n     * will result in connections only being able to use TLSv1.\n     * <P>\n     * <code>SSLSocket</code>s returned from <code>accept()</code>\n     * inherit this setting.\n     *\n     * @param protocols Names of all the protocols to enable.\n     * @exception IllegalArgumentException when one or more of\n     *            the protocols named by the parameter is not supported or\n     *            when the protocols parameter is null.\n     * @see #getEnabledProtocols()\n     * @see #getSupportedProtocols()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setNeedClientAuth(boolean need)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether <code>accept</code>ed server-mode\n     * <code>SSLSockets</code> will be initially configured to\n     * <i>require</i> client authentication.\n     * <P>\n     * A socket's client authentication setting is one of the following:\n     * <ul>\n     * <li> client authentication required\n     * <li> client authentication requested\n     * <li> no client authentication desired\n     * </ul>\n     * <P>\n     * Unlike {@link #setWantClientAuth(boolean)}, if the accepted\n     * socket's option is set and the client chooses not to provide\n     * authentication information about itself, <i>the negotiations\n     * will stop and the connection will be dropped</i>.\n     * <P>\n     * Calling this method overrides any previous setting made by\n     * this method or {@link #setWantClientAuth(boolean)}.\n     * <P>\n     * The initial inherited setting may be overridden by calling\n     * {@link SSLSocket#setNeedClientAuth(boolean)} or\n     * {@link SSLSocket#setWantClientAuth(boolean)}.\n     *\n     * @param   need set to true if client authentication is required,\n     *          or false if no client authentication is desired.\n     * @see #getNeedClientAuth()\n     * @see #setWantClientAuth(boolean)\n     * @see #getWantClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "#setWantClientAuth(boolean)", "javax.net.ssl.SSLSocket#setNeedClientAuth(boolean)", "javax.net.ssl.SSLSocket#setWantClientAuth(boolean)" ]
  }, {
    "name" : "public abstract boolean getNeedClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if client authentication will be <i>required</i> on\n     * newly <code>accept</code>ed server-mode <code>SSLSocket</code>s.\n     * <P>\n     * The initial inherited setting may be overridden by calling\n     * {@link SSLSocket#setNeedClientAuth(boolean)} or\n     * {@link SSLSocket#setWantClientAuth(boolean)}.\n     *\n     * @return  true if client authentication is required,\n     *          or false if no client authentication is desired.\n     * @see #setNeedClientAuth(boolean)\n     * @see #setWantClientAuth(boolean)\n     * @see #getWantClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "javax.net.ssl.SSLSocket#setNeedClientAuth(boolean)", "javax.net.ssl.SSLSocket#setWantClientAuth(boolean)" ]
  }, {
    "name" : "public abstract void setWantClientAuth(boolean want)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether <code>accept</code>ed server-mode\n     * <code>SSLSockets</code> will be initially configured to\n     * <i>request</i> client authentication.\n     * <P>\n     * A socket's client authentication setting is one of the following:\n     * <ul>\n     * <li> client authentication required\n     * <li> client authentication requested\n     * <li> no client authentication desired\n     * </ul>\n     * <P>\n     * Unlike {@link #setNeedClientAuth(boolean)}, if the accepted\n     * socket's option is set and the client chooses not to provide\n     * authentication information about itself, <i>the negotiations\n     * will continue</i>.\n     * <P>\n     * Calling this method overrides any previous setting made by\n     * this method or {@link #setNeedClientAuth(boolean)}.\n     * <P>\n     * The initial inherited setting may be overridden by calling\n     * {@link SSLSocket#setNeedClientAuth(boolean)} or\n     * {@link SSLSocket#setWantClientAuth(boolean)}.\n     *\n     * @param   want set to true if client authentication is requested,\n     *          or false if no client authentication is desired.\n     * @see #getWantClientAuth()\n     * @see #setNeedClientAuth(boolean)\n     * @see #getNeedClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "#setNeedClientAuth(boolean)", "javax.net.ssl.SSLSocket#setNeedClientAuth(boolean)", "javax.net.ssl.SSLSocket#setWantClientAuth(boolean)" ]
  }, {
    "name" : "public abstract boolean getWantClientAuth()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if client authentication will be <i>requested</i> on\n     * newly accepted server-mode connections.\n     * <P>\n     * The initial inherited setting may be overridden by calling\n     * {@link SSLSocket#setNeedClientAuth(boolean)} or\n     * {@link SSLSocket#setWantClientAuth(boolean)}.\n     *\n     * @return  true if client authentication is requested,\n     *          or false if no client authentication is desired.\n     * @see #setWantClientAuth(boolean)\n     * @see #setNeedClientAuth(boolean)\n     * @see #getNeedClientAuth()\n     * @see #setUseClientMode(boolean)\n     ",
    "links" : [ "javax.net.ssl.SSLSocket#setNeedClientAuth(boolean)", "javax.net.ssl.SSLSocket#setWantClientAuth(boolean)" ]
  }, {
    "name" : "public abstract void setUseClientMode(boolean mode)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether accepted connections are in the (default) SSL\n     * server mode, or the SSL client mode.\n     * <P>\n     * Servers normally authenticate themselves, and clients are not\n     * required to do so.\n     * <P>\n     * In rare cases, TCP servers\n     * need to act in the SSL client mode on newly accepted\n     * connections. For example, FTP clients acquire server sockets\n     * and listen there for reverse connections from the server. An\n     * FTP client would use an SSLServerSocket in \"client\" mode to\n     * accept the reverse connection while the FTP server uses an\n     * SSLSocket with \"client\" mode disabled to initiate the\n     * connection. During the resulting handshake, existing SSL\n     * sessions may be reused.\n     * <P>\n     * <code>SSLSocket</code>s returned from <code>accept()</code>\n     * inherit this setting.\n     *\n     * @param mode true if newly accepted connections should use SSL\n     *          client mode.\n     * @see #getUseClientMode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getUseClientMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if accepted connections will be in SSL client mode.\n     *\n     * @see #setUseClientMode(boolean)\n     * @return true if the connection should use SSL client mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setEnableSessionCreation(boolean flag)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether new SSL sessions may be established by the\n     * sockets which are created from this server socket.\n     * <P>\n     * <code>SSLSocket</code>s returned from <code>accept()</code>\n     * inherit this setting.\n     *\n     * @param flag true indicates that sessions may be created; this\n     *          is the default. false indicates that an existing session\n     *          must be resumed.\n     * @see #getEnableSessionCreation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getEnableSessionCreation()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if new SSL sessions may be established by the\n     * sockets which are created from this server socket.\n     *\n     * @return true indicates that sessions may be created; this\n     *          is the default.  false indicates that an existing\n     *          session must be resumed\n     * @see #setEnableSessionCreation(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public SSLParameters getSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns the SSLParameters in effect for newly accepted connections.\n     * The ciphersuites and protocols of the returned SSLParameters\n     * are always non-null.\n     *\n     * @return the SSLParameters in effect for newly accepted connections\n     *\n     * @see #setSSLParameters(SSLParameters)\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSSLParameters(SSLParameters params)",
    "returnType" : "void",
    "comment" : "\n     * Applies SSLParameters to newly accepted connections.\n     *\n     * <p>This means:\n     * <ul>\n     * <li>If {@code params.getCipherSuites()} is non-null,\n     *   {@code setEnabledCipherSuites()} is called with that value.</li>\n     * <li>If {@code params.getProtocols()} is non-null,\n     *   {@code setEnabledProtocols()} is called with that value.</li>\n     * <li>If {@code params.getNeedClientAuth()} or\n     *   {@code params.getWantClientAuth()} return {@code true},\n     *   {@code setNeedClientAuth(true)} and\n     *   {@code setWantClientAuth(true)} are called, respectively;\n     *   otherwise {@code setWantClientAuth(false)} is called.</li>\n     * <li>If {@code params.getServerNames()} is non-null, the socket will\n     *   configure its server names with that value.</li>\n     * <li>If {@code params.getSNIMatchers()} is non-null, the socket will\n     *   configure its SNI matchers with that value.</li>\n     * </ul>\n     *\n     * @param params the parameters\n     * @throws IllegalArgumentException if the setEnabledCipherSuites() or\n     *    the setEnabledProtocols() call fails\n     *\n     * @see #getSSLParameters()\n     *\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " Android-added: Make toString explicit that this is an SSLServerSocket (http://b/6602228)",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String[] getEnabledCipherSuites()", "public abstract void setEnabledCipherSuites(String[] suites)", "public abstract String[] getSupportedCipherSuites()", "public abstract String[] getSupportedProtocols()", "public abstract String[] getEnabledProtocols()", "public abstract void setEnabledProtocols(String[] protocols)", "public abstract void setNeedClientAuth(boolean need)", "public abstract boolean getNeedClientAuth()", "public abstract void setWantClientAuth(boolean want)", "public abstract boolean getWantClientAuth()", "public abstract void setUseClientMode(boolean mode)", "public abstract boolean getUseClientMode()", "public abstract void setEnableSessionCreation(boolean flag)", "public abstract boolean getEnableSessionCreation()", "public SSLParameters getSSLParameters()", "public void setSSLParameters(SSLParameters params)", "public String toString()" ],
  "variableNames" : [ ]
}