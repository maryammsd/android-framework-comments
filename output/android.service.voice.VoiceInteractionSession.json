{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/VoiceInteractionSession.java",
  "packageName" : "android.service.voice",
  "className" : "VoiceInteractionSession",
  "comment" : "\n * An active voice interaction session, providing a facility for the implementation\n * to interact with the user in the voice interaction layer. The user interface is\n * initially shown by default, and can be created by overriding {@link #onCreateContentView()}\n * in which the UI can be built.\n *\n * <p>A voice interaction session can be self-contained, ultimately calling {@link #finish}\n * when done. It can also initiate voice interactions with applications by calling\n * {@link #startVoiceActivity}</p>.\n ",
  "links" : [ "#onCreateContentView()", "#finish", "#startVoiceActivity" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_WITH_ASSIST",
    "type" : "int",
    "comment" : "\n     * Flag received in {@link #onShow}: originator requested that the session be started with\n     * assist data from the currently focused activity.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_WITH_SCREENSHOT",
    "type" : "int",
    "comment" : "\n     * Flag received in {@link #onShow}: originator requested that the session be started with\n     * a screen shot of the currently focused activity.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_SOURCE_ASSIST_GESTURE",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that the session has been started from the\n     * system assist gesture.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_SOURCE_APPLICATION",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that the application itself has invoked\n     * the assistant.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_SOURCE_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that an Activity has invoked the voice\n     * interaction service for a local interaction using\n     * {@link Activity#startLocalVoiceInteraction(Bundle)}.\n     ",
    "links" : [ "#onShow", "android.app.Activity#startLocalVoiceInteraction(Bundle)" ]
  }, {
    "name" : "SHOW_SOURCE_PUSH_TO_TALK",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that the voice interaction service was invoked\n     * from a physical button.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_SOURCE_NOTIFICATION",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that the voice interaction service was invoked\n     * from a notification.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI",
    "type" : "int",
    "comment" : "\n     * Flag for use with {@link #onShow}: indicates that the voice interaction service was invoked\n     * from an Android automotive system UI.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "VOICE_INTERACTION_ACTIVITY_EVENT_START",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VOICE_INTERACTION_ACTIVITY_EVENT_RESUME",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VOICE_INTERACTION_ACTIVITY_EVENT_PAUSE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VOICE_INTERACTION_ACTIVITY_EVENT_STOP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "KEY_SHOW_SESSION_ID",
    "type" : "String",
    "comment" : "\n     * Bundle key used to specify the id when the system prepares to show session. It increases for\n     * each request.\n     * <p>\n     * Type: int\n     * </p>\n     * @see VoiceInteractionService#showSession(Bundle, int)\n     * @see VoiceInteractionService#onPrepareToShowSession(Bundle, int)\n     * @see VoiceInteractionService#onShowSessionFailed(Bundle)\n     * @see #onShow(Bundle, int)\n     * @see #show(Bundle, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_FOREGROUND_ACTIVITIES",
    "type" : "String",
    "comment" : "\n     * Bundle key used to specify foreground activity app components.\n     * <p>\n     * Type: ArrayList&ltComponentName&gt\n     * </p>\n     * @see #onShow(Bundle, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerCaller",
    "type" : "HandlerCaller",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatcherState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflater",
    "type" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeAttrs",
    "type" : "TypedArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentFrame",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "VoiceInteractionWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUiEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowAdded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowWasVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInShowWindow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRequests",
    "type" : "ArrayMap<IBinder, Request>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeakRef",
    "type" : "WeakReference<VoiceInteractionSession>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteCallbacks",
    "type" : "Map<SafeResultListener, Consumer<Bundle>>",
    "comment" : " Registry of remote callbacks pending a reply with reply handles.",
    "links" : [ ]
  }, {
    "name" : "mKillCallback",
    "type" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibleActivityCallbacks",
    "type" : "Map<VisibleActivityCallback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibleActivityInfos",
    "type" : "List<VisibleActivityInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractor",
    "type" : "IVoiceInteractor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "IVoiceInteractionSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_START_CONFIRMATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_START_PICK_OPTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_START_COMPLETE_VOICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_START_ABORT_VOICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_START_COMMAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SUPPORTS_COMMANDS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TASK_STARTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TASK_FINISHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_CLOSE_SYSTEM_DIALOGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DESTROY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HANDLE_ASSIST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HANDLE_SCREENSHOT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_SHOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_HIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_ON_LOCKSCREEN_SHOWN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NOTIFY_VISIBLE_ACTIVITY_INFO_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_REGISTER_VISIBLE_ACTIVITY_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_UNREGISTER_VISIBLE_ACTIVITY_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "MyCallbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsetsComputer",
    "type" : "ViewTreeObserver.OnComputeInternalInsetsListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Context createWindowContextIfNeeded(Context context)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void addRequest(Request req)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isRequestActive(IBinder reqInterface)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Request removeRequest(IBinder reqInterface)",
    "returnType" : "Request",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doCreate(IVoiceInteractionManagerService service, IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doShow(Bundle args, int flags, final IVoiceInteractionSessionShowCallback showCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doHide()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doNotifyVisibleActivityInfoChanged(VisibleActivityInfo visibleActivityInfo, int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doRegisterVisibleActivityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VisibleActivityCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doUnregisterVisibleActivityCallback(@NonNull VisibleActivityCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyVisibleActivityChanged(VisibleActivityInfo visibleActivityInfo, int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ensureWindowCreated()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ensureWindowAdded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void showWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ensureWindowHidden()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledShowContext(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to {@link VoiceInteractionService#setDisabledShowContext\n     * VoiceInteractionService.setDisabledShowContext(int)}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService#setDisabledShowContextVoiceInteractionService.setDisabledShowContext(int)" ]
  }, {
    "name" : "public int getDisabledShowContext()",
    "returnType" : "int",
    "comment" : "\n     * Equivalent to {@link VoiceInteractionService#getDisabledShowContext\n     * VoiceInteractionService.getDisabledShowContext}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService#getDisabledShowContextVoiceInteractionService.getDisabledShowContext" ]
  }, {
    "name" : "public int getUserDisabledShowContext()",
    "returnType" : "int",
    "comment" : "\n     * Return which show context flags have been disabled by the user through the system\n     * settings UI, so the session will never get this data.  Returned flags are any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}.  Note that this only tells you about\n     * global user settings, not about restrictions that may be applied contextual based on\n     * the current application the user is in or other transient states.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public void show(Bundle args, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Show the UI for this session.  This asks the system to go through the process of showing\n     * your UI, which will eventually culminate in {@link #onShow}.  This is similar to calling\n     * {@link VoiceInteractionService#showSession VoiceInteractionService.showSession}.\n     * @param args Arbitrary arguments that will be propagated {@link #onShow}.\n     * @param flags Indicates additional optional behavior that should be performed. May\n     * be any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}\n     * to request that the system generate and deliver assist data on the current foreground\n     * app as part of showing the session UI.\n     ",
    "links" : [ "#onShow", "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT", "android.service.voice.VoiceInteractionService#showSession" ]
  }, {
    "name" : "public void hide()",
    "returnType" : "void",
    "comment" : "\n     * Hide the session's UI, if currently shown.  Call this when you are done with your\n     * user interaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUiEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Control whether the UI layer for this session is enabled.  It is enabled by default.\n     * If set to false, you will not be able to provide a UI through {@link #onCreateContentView()}.\n     ",
    "links" : [ "#onCreateContentView()" ]
  }, {
    "name" : "public void setTheme(int theme)",
    "returnType" : "void",
    "comment" : "\n     * You can call this to customize the theme used by your IME's window.\n     * This must be set before {@link #onCreate}, so you\n     * will typically call it in your constructor with the resource ID\n     * of your custom theme.\n     ",
    "links" : [ "#onCreate" ]
  }, {
    "name" : "public void startVoiceActivity(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Ask that a new activity be started for voice interaction.  This will create a\n     * new dedicated task in the activity manager for this voice interaction session;\n     * this means that {@link Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK}\n     * will be set for you to make it a new task.\n     *\n     * <p>The newly started activity will be displayed to the user in a special way, as\n     * a layer under the voice interaction UI.</p>\n     *\n     * <p>As the voice activity runs, it can retrieve a {@link android.app.VoiceInteractor}\n     * through which it can perform voice interactions through your session.  These requests\n     * for voice interactions will appear as callbacks on {@link #onGetSupportedCommands},\n     * {@link #onRequestConfirmation}, {@link #onRequestPickOption},\n     * {@link #onRequestCompleteVoice}, {@link #onRequestAbortVoice},\n     * or {@link #onRequestCommand}\n     *\n     * <p>You will receive a call to {@link #onTaskStarted} when the task starts up\n     * and {@link #onTaskFinished} when the last activity has finished.\n     *\n     * @param intent The Intent to start this voice interaction.  The given Intent will\n     * always have {@link Intent#CATEGORY_VOICE Intent.CATEGORY_VOICE} added to it, since\n     * this is part of a voice interaction.\n     ",
    "links" : [ "#onRequestAbortVoice", "#onRequestCommand", "android.content.Intent#CATEGORY_VOICE", "#onRequestConfirmation", "android.content.Intent#FLAG_ACTIVITY_NEW_TASK", "#onRequestCompleteVoice", "#onGetSupportedCommands", "#onRequestPickOption", "#onTaskFinished", "android.app.VoiceInteractor", "#onTaskStarted" ]
  }, {
    "name" : "public void startAssistantActivity(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * <p>Ask that a new assistant activity be started.  This will create a new task in the\n     * in activity manager: this means that\n     * {@link Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK}\n     * will be set for you to make it a new task.</p>\n     *\n     * <p>The newly started activity will be displayed on top of other activities in the system\n     * in a new layer that is not affected by multi-window mode.  Tasks started from this activity\n     * will go into the normal activity layer and not this new layer.</p>\n     *\n     * <p>By default, the system will create a window for the UI for this session.  If you are using\n     * an assistant activity instead, then you can disable the window creation by calling\n     * {@link #setUiEnabled} in {@link #onPrepareShow(Bundle, int)}.</p>\n     *\n     * NOTE: if the app would like to override some options to start the Activity,\n     * use {@link #startAssistantActivity(Intent, Bundle)} instead.\n     ",
    "links" : [ "#onPrepareShow(Bundle", "android.content.Intent#FLAG_ACTIVITY_NEW_TASK", "#setUiEnabled", "#startAssistantActivity(Intent" ]
  }, {
    "name" : "public void startAssistantActivity(@NonNull Intent intent, @NonNull Bundle bundle)",
    "returnType" : "void",
    "comment" : "\n     * <p>Ask that a new assistant activity be started.  This will create a new task in the\n     * in activity manager: this means that\n     * {@link Intent#FLAG_ACTIVITY_NEW_TASK Intent.FLAG_ACTIVITY_NEW_TASK}\n     * will be set for you to make it a new task.</p>\n     *\n     * <p>The newly started activity will be displayed on top of other activities in the system\n     * in a new layer that is not affected by multi-window mode.  Tasks started from this activity\n     * will go into the normal activity layer and not this new layer.</p>\n     *\n     * <p>By default, the system will create a window for the UI for this session.  If you are using\n     * an assistant activity instead, then you can disable the window creation by calling\n     * {@link #setUiEnabled} in {@link #onPrepareShow(Bundle, int)}.</p>\n     *\n     * @param intent the intent used to start an assistant activity\n     * @param bundle Additional options for how the Activity should be started. See\n     * {@link ActivityOptions} for how to build the Bundle supplied here.\n     ",
    "links" : [ "android.app.ActivityOptions", "#onPrepareShow(Bundle", "android.content.Intent#FLAG_ACTIVITY_NEW_TASK", "#setUiEnabled" ]
  }, {
    "name" : "public final void requestDirectActions(@NonNull ActivityId activityId, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<List<DirectAction>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Requests a list of supported actions from an app.\n     *\n     * @param activityId Ths activity id of the app to get the actions from.\n     * @param cancellationSignal A signal to cancel the operation in progress,\n     *     or {@code null} if none.\n     * @param resultExecutor The handler to receive the callback.\n     * @param callback The callback to receive the response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDirectActionsInvalidated(@NonNull ActivityId activityId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the direct actions are invalidated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void performDirectAction(@NonNull DirectAction action, @Nullable Bundle extras, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<Bundle> resultListener)",
    "returnType" : "void",
    "comment" : "\n     * Asks that an action be performed by the app. This will send a request to the app which\n     * provided this action.\n     *\n     * <p> An action could take time to execute and the result is provided asynchronously\n     * via a callback. If the action is taking longer and you want to cancel its execution\n     * you can pass in a cancellation signal through which to notify the app to abort the\n     * action.\n     *\n     * @param action The action to be performed.\n     * @param extras Any optional extras sent to the app as part of the request\n     * @param cancellationSignal A signal to cancel the operation in progress,\n     *                          or {@code null} if none.\n     * @param resultExecutor The handler to receive the callback.\n     * @param resultListener The callback to receive the response.\n     *\n     * @see #requestDirectActions(ActivityId, CancellationSignal, Executor, Consumer)\n     * @see Activity#onGetDirectActions(CancellationSignal, Consumer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeepAwake(boolean keepAwake)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this session will keep the device awake while it is running a voice\n     * activity.  By default, the system holds a wake lock for it while in this state,\n     * so that it can work even if the screen is off.  Setting this to false removes that\n     * wake lock, allowing the CPU to go to sleep.  This is typically used if the\n     * session decides it has been waiting too long for a response from the user and\n     * doesn't want to let this continue to drain the battery.\n     *\n     * <p>Passing false here will release the wake lock, and you can call later with\n     * true to re-acquire it.  It will also be automatically re-acquired for you each\n     * time you start a new voice activity task -- that is when you call\n     * {@link #startVoiceActivity}.</p>\n     ",
    "links" : [ "#startVoiceActivity" ]
  }, {
    "name" : "public void closeSystemDialogs()",
    "returnType" : "void",
    "comment" : "\n     * Request that all system dialogs (and status bar shade etc) be closed, allowing\n     * access to the session's UI.  This will <em>not</em> cause the lock screen to be\n     * dismissed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LayoutInflater getLayoutInflater()",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Convenience for inflating views.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Dialog getWindow()",
    "returnType" : "Dialog",
    "comment" : "\n     * Retrieve the window being used to show the session's UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void finish()",
    "returnType" : "void",
    "comment" : "\n     * Finish the session.  This completely destroys the session -- the next time it is shown,\n     * an entirely new one will be created.  You do not normally call this function; instead,\n     * use {@link #hide} and allow the system to destroy your session if it needs its RAM.\n     ",
    "links" : [ "#hide" ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "\n     * Initiatize a new session.  At this point you don't know exactly what this\n     * session will be used for; you will find that out in {@link #onShow}.\n     ",
    "links" : [ "#onShow" ]
  }, {
    "name" : "private void doOnCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onPrepareShow(Bundle args, int showFlags)",
    "returnType" : "void",
    "comment" : "\n     * Called prior to {@link #onShow} before any UI setup has occurred.  Not generally useful.\n     *\n     * @param args The arguments that were supplied to\n     * {@link VoiceInteractionService#showSession VoiceInteractionService.showSession}.\n     * @param showFlags The show flags originally provided to\n     * {@link VoiceInteractionService#showSession VoiceInteractionService.showSession}.\n     ",
    "links" : [ "#onShow", "android.service.voice.VoiceInteractionService#showSession" ]
  }, {
    "name" : "public void onShow(@Nullable Bundle args, int showFlags)",
    "returnType" : "void",
    "comment" : "\n     * Called when the session UI is going to be shown.  This is called after\n     * {@link #onCreateContentView} (if the session's content UI needed to be created) and\n     * immediately prior to the window being shown.  This may be called while the window\n     * is already shown, if a show request has come in while it is shown, to allow you to\n     * update the UI to match the new show arguments.\n     *\n     * @param args The arguments that were supplied to\n     * {@link VoiceInteractionService#showSession VoiceInteractionService.showSession}.\n     * Some example keys include :\n     * <ul>\n     *     <li>\n     *         invocation_type\n     *     </li>\n     *     <li>\n     *         invocation_phone_state\n     *     </li>\n     *     <li>\n     *         {@link #KEY_SHOW_SESSION_ID}\n     *     </li>\n     *     <li>\n     *         invocation_time_ms\n     *     </li>\n     *     <li>\n     *         Intent.EXTRA_TIME (\"android.intent.extra.TIME\") indicating timing in milliseconds of\n     *         the KeyEvent that triggered Assistant\n     *     </li>\n     *     <li>\n     *         Intent.EXTRA_ASSIST_INPUT_DEVICE_ID (android.intent.extra.ASSIST_INPUT_DEVICE_ID)\n     *         referring to the device that sent the request\n     *     </li>\n     *     <li>\n     *         {@link #KEY_FOREGROUND_ACTIVITIES} provides foreground activities of up coming\n     *         onHandleAssist/onHandleScreenshot calls earlier. This is only populated if session\n     *         was requested with {@link VoiceInteractionSession.SHOW_WITH_ASSIST} show flag.\n     *     </li>\n     *     <li>\n     *         Starting from Android 14, the system will add {@link #KEY_SHOW_SESSION_ID}, the\n     *         Bundle is not null. But the application should handle null case before Android 14.\n     *     </li>\n     * </ul>\n     *\n     * @param showFlags The show flags originally provided to\n     * {@link VoiceInteractionService#showSession VoiceInteractionService.showSession}.\n     ",
    "links" : [ "#onCreateContentView", "#KEY_SHOW_SESSION_ID", "#KEY_FOREGROUND_ACTIVITIES", "VoiceInteractionSession.SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionService#showSession" ]
  }, {
    "name" : "public void onHide()",
    "returnType" : "void",
    "comment" : "\n     * Called immediately after stopping to show the session UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Last callback to the session as it is being finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View onCreateContentView()",
    "returnType" : "View",
    "comment" : "\n     * Hook in which to create the session's UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContentView(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doOnHandleAssist(int taskId, IBinder assistToken, Bundle data, AssistStructure structure, Throwable failure, AssistContent content, int index, int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAssistStructureFailure(Throwable failure)",
    "returnType" : "void",
    "comment" : "\n     * Called when there has been a failure transferring the {@link AssistStructure} to\n     * the assistant.  This may happen, for example, if the data is too large and results\n     * in an out of memory exception, the data has been cleared during transferring due to\n     * the new incoming assist data, or the client has provided corrupt data. This will be\n     * called immediately before {@link #onHandleAssist} and the AssistStructure supplied\n     * there afterwards will be null.\n     *\n     * @param failure The failure exception that was thrown when building the\n     * {@link AssistStructure}.\n     ",
    "links" : [ "#onHandleAssist", "android.app.assist.AssistStructure" ]
  }, {
    "name" : "public void onHandleAssist(@Nullable Bundle data, @Nullable AssistStructure structure, @Nullable AssistContent content)",
    "returnType" : "void",
    "comment" : "\n     * Called to receive data from the application that the user was currently viewing when\n-     * an assist session is started.  If the original show request did not specify\n     * {@link #SHOW_WITH_ASSIST}, this method will not be called.\n     *\n     * @param data Arbitrary data supplied by the app through\n     * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.\n     * May be null if assist data has been disabled by the user or device policy.\n     * @param structure If available, the structure definition of all windows currently\n     * displayed by the app.  May be null if assist data has been disabled by the user\n     * or device policy; will be an empty stub if the application has disabled assist\n     * by marking its window as secure.\n     * @param content Additional content data supplied by the app through\n     * {@link android.app.Activity#onProvideAssistContent Activity.onProvideAssistContent}.\n     * May be null if assist data has been disabled by the user or device policy; will\n     * not be automatically filled in with data from the app if the app has marked its\n     * window as secure.\n     *\n     * @deprecated use {@link #onHandleAssist(AssistState)}\n     ",
    "links" : [ "android.app.Activity#onProvideAssistContent", "android.app.Activity#onProvideAssistData", "#SHOW_WITH_ASSIST", "#onHandleAssist(AssistState)" ]
  }, {
    "name" : "public void onHandleAssist(@NonNull AssistState state)",
    "returnType" : "void",
    "comment" : "\n     * Called to receive data from the application that the user was currently viewing when\n     * an assist session is started. If the original show request did not specify\n     * {@link #SHOW_WITH_ASSIST}, {@link AssistState} parameter will only provide\n     * {@link ActivityId}. If there was a failure to write the assist data to\n     * {@link AssistStructure}, the {@link AssistState#getAssistStructure()} will return null.\n     *\n     * <p>This method is called for all activities along with an index and count that indicates\n     * which activity the data is for. {@code index} will be between 0 and {@code count}-1 and\n     * this method is called once for each activity in no particular order. The {@code count}\n     * indicates how many activities to expect assist data for, including the top focused one.\n     * The focused activity can be determined by calling {@link AssistState#isFocused()}.\n     *\n     * <p>To be responsive to assist requests, process assist data as soon as it is received,\n     * without waiting for all queued activities to return assist data.\n     *\n     * @param state The state object capturing the state of an activity.\n     ",
    "links" : [ "#SHOW_WITH_ASSIST", "AssistState", "ActivityId", "#isFocused()", "android.app.assist.AssistStructure", "#getAssistStructure()" ]
  }, {
    "name" : "public void onHandleAssistSecondary(@Nullable Bundle data, @Nullable AssistStructure structure, @Nullable AssistContent content, int index, int count)",
    "returnType" : "void",
    "comment" : "\n     * Called to receive data from other applications that the user was or is interacting with,\n     * that are currently on the screen in a multi-window display environment, not including the\n     * currently focused activity. This could be\n     * a free-form window, a picture-in-picture window, or another window in a split-screen display.\n     * <p>\n     * This method is very similar to\n     * {@link #onHandleAssist} except that it is called\n     * for additional non-focused activities along with an index and count that indicates\n     * which additional activity the data is for. {@code index} will be between 1 and\n     * {@code count}-1 and this method is called once for each additional window, in no particular\n     * order. The {@code count} indicates how many windows to expect assist data for, including the\n     * top focused activity, which continues to be returned via {@link #onHandleAssist}.\n     * <p>\n     * To be responsive to assist requests, process assist data as soon as it is received,\n     * without waiting for all queued activities to return assist data.\n     *\n     * @param data Arbitrary data supplied by the app through\n     * {@link android.app.Activity#onProvideAssistData Activity.onProvideAssistData}.\n     * May be null if assist data has been disabled by the user or device policy.\n     * @param structure If available, the structure definition of all windows currently\n     * displayed by the app.  May be null if assist data has been disabled by the user\n     * or device policy; will be an empty stub if the application has disabled assist\n     * by marking its window as secure.\n     * @param content Additional content data supplied by the app through\n     * {@link android.app.Activity#onProvideAssistContent Activity.onProvideAssistContent}.\n     * May be null if assist data has been disabled by the user or device policy; will\n     * not be automatically filled in with data from the app if the app has marked its\n     * window as secure.\n     * @param index the index of the additional activity that this data\n     *        is for.\n     * @param count the total number of additional activities for which the assist data is being\n     *        returned, including the focused activity that is returned via\n     *        {@link #onHandleAssist}.\n     *\n     * @deprecated use {@link #onHandleAssist(AssistState)}\n     ",
    "links" : [ "android.app.Activity#onProvideAssistContent", "android.app.Activity#onProvideAssistData", "#onHandleAssist(AssistState)", "#onHandleAssist" ]
  }, {
    "name" : "public void onHandleScreenshot(@Nullable Bitmap screenshot)",
    "returnType" : "void",
    "comment" : "\n     * Called to receive a screenshot of what the user was currently viewing when an assist\n     * session is started.  May be null if screenshots are disabled by the user, policy,\n     * or application.  If the original show request did not specify\n     * {@link #SHOW_WITH_SCREENSHOT}, this method will not be called.\n     ",
    "links" : [ "#SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int count, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBackPressed()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user presses the back button while focus is in the session UI.  Note\n     * that this will only happen if the session UI has requested input focus in its window;\n     * otherwise, the back key will go to whatever window has focus and do whatever behavior\n     * it normally has there.  The default implementation simply calls {@link #hide}.\n     ",
    "links" : [ "#hide" ]
  }, {
    "name" : "public void onCloseSystemDialogs()",
    "returnType" : "void",
    "comment" : "\n     * Sessions automatically watch for requests that all system UI be closed (such as when\n     * the user presses HOME), which will appear here.  The default implementation always\n     * calls {@link #hide}.\n     ",
    "links" : [ "#hide" ]
  }, {
    "name" : "public void onLockscreenShown()",
    "returnType" : "void",
    "comment" : "\n     * Called when the lockscreen was shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLowMemory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTrimMemory(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onComputeInsets(Insets outInsets)",
    "returnType" : "void",
    "comment" : "\n     * Compute the interesting insets into your UI.  The default implementation\n     * sets {@link Insets#contentInsets outInsets.contentInsets.top} to the height\n     * of the window, meaning it should not adjust content underneath.  The default touchable\n     * insets are {@link Insets#TOUCHABLE_INSETS_FRAME}, meaning it consumes all touch\n     * events within its window frame.\n     *\n     * @param outInsets Fill in with the current UI insets.\n     ",
    "links" : [ "#TOUCHABLE_INSETS_FRAME", "#contentInsets" ]
  }, {
    "name" : "public void onTaskStarted(Intent intent, int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a task initiated by {@link #startVoiceActivity(android.content.Intent)}\n     * has actually started.\n     *\n     * @param intent The original {@link Intent} supplied to\n     * {@link #startVoiceActivity(android.content.Intent)}.\n     * @param taskId Unique ID of the now running task.\n     ",
    "links" : [ "#startVoiceActivity(android.content.Intent)", "android.content.Intent" ]
  }, {
    "name" : "public void onTaskFinished(Intent intent, int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the last activity of a task initiated by\n     * {@link #startVoiceActivity(android.content.Intent)} has finished.  The default\n     * implementation calls {@link #finish()} on the assumption that this represents\n     * the completion of a voice action.  You can override the implementation if you would\n     * like a different behavior.\n     *\n     * @param intent The original {@link Intent} supplied to\n     * {@link #startVoiceActivity(android.content.Intent)}.\n     * @param taskId Unique ID of the finished task.\n     ",
    "links" : [ "#startVoiceActivity(android.content.Intent)", "#finish()", "android.content.Intent" ]
  }, {
    "name" : "public boolean[] onGetSupportedCommands(String[] commands)",
    "returnType" : "boolean[]",
    "comment" : "\n     * Request to query for what extended commands the session supports.\n     *\n     * @param commands An array of commands that are being queried.\n     * @return Return an array of booleans indicating which of each entry in the\n     * command array is supported.  A true entry in the array indicates the command\n     * is supported; false indicates it is not.  The default implementation returns\n     * an array of all false entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRequestConfirmation(ConfirmationRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Request to confirm with the user before proceeding with an unrecoverable operation,\n     * corresponding to a {@link android.app.VoiceInteractor.ConfirmationRequest\n     * VoiceInteractor.ConfirmationRequest}.\n     *\n     * @param request The active request.\n     ",
    "links" : [ "android.app.VoiceInteractor.ConfirmationRequestVoiceInteractor.ConfirmationRequest" ]
  }, {
    "name" : "public void onRequestPickOption(PickOptionRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Request for the user to pick one of N options, corresponding to a\n     * {@link android.app.VoiceInteractor.PickOptionRequest VoiceInteractor.PickOptionRequest}.\n     *\n     * @param request The active request.\n     ",
    "links" : [ "android.app.VoiceInteractor.PickOptionRequest" ]
  }, {
    "name" : "public void onRequestCompleteVoice(CompleteVoiceRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Request to complete the voice interaction session because the voice activity successfully\n     * completed its interaction using voice.  Corresponds to\n     * {@link android.app.VoiceInteractor.CompleteVoiceRequest\n     * VoiceInteractor.CompleteVoiceRequest}.  The default implementation just sends an empty\n     * confirmation back to allow the activity to exit.\n     *\n     * @param request The active request.\n     ",
    "links" : [ "android.app.VoiceInteractor.CompleteVoiceRequestVoiceInteractor.CompleteVoiceRequest" ]
  }, {
    "name" : "public void onRequestAbortVoice(AbortVoiceRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Request to abort the voice interaction session because the voice activity can not\n     * complete its interaction using voice.  Corresponds to\n     * {@link android.app.VoiceInteractor.AbortVoiceRequest\n     * VoiceInteractor.AbortVoiceRequest}.  The default implementation just sends an empty\n     * confirmation back to allow the activity to exit.\n     *\n     * @param request The active request.\n     ",
    "links" : [ "android.app.VoiceInteractor.AbortVoiceRequestVoiceInteractor.AbortVoiceRequest" ]
  }, {
    "name" : "public void onRequestCommand(CommandRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Process an arbitrary extended command from the caller,\n     * corresponding to a {@link android.app.VoiceInteractor.CommandRequest\n     * VoiceInteractor.CommandRequest}.\n     *\n     * @param request The active request.\n     ",
    "links" : [ "android.app.VoiceInteractor.CommandRequestVoiceInteractor.CommandRequest" ]
  }, {
    "name" : "public void onCancelRequest(Request request)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link android.app.VoiceInteractor} has asked to cancel a {@link Request}\n     * that was previously delivered to {@link #onRequestConfirmation},\n     * {@link #onRequestPickOption}, {@link #onRequestCompleteVoice}, {@link #onRequestAbortVoice},\n     * or {@link #onRequestCommand}.\n     *\n     * @param request The request that is being canceled.\n     ",
    "links" : [ "#onRequestAbortVoice", "com.android.internal.app.IVoiceInteractorRequest", "#onRequestCommand", "#onRequestConfirmation", "#onRequestCompleteVoice", "#onRequestPickOption", "android.app.VoiceInteractor" ]
  }, {
    "name" : "public final void registerVisibleActivityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VisibleActivityCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback that will be notified when visible activities have been changed.\n     *\n     * Note: The {@link VisibleActivityCallback#onVisible(VisibleActivityInfo)} will be called\n     * immediately with current visible activities when the callback is registered for the first\n     * time. If the callback is already registered, this method does nothing.\n     *\n     * @param executor The executor which will be used to invoke the callback.\n     * @param callback The callback to receive the response.\n     *\n     * @throws IllegalStateException if calling this method before onCreate().\n     ",
    "links" : [ "#onVisible(VisibleActivityInfo)" ]
  }, {
    "name" : "public final void unregisterVisibleActivityCallback(@NonNull VisibleActivityCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the callback.\n     *\n     * @param callback The callback to receive the response.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print the Service's state into the given stream.  This gets invoked by\n     * {@link VoiceInteractionSessionService} when its Service\n     * {@link android.app.Service#dump} method is called.\n     *\n     * @param prefix Text to print at the front of each line.\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param writer The PrintWriter to which you should dump your state.  This will be\n     * closed for you after you return.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSessionService", "android.app.Service#dump" ]
  }, {
    "name" : "private SafeResultListener createSafeResultListener(@NonNull Consumer<Bundle> consumer)",
    "returnType" : "SafeResultListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Consumer<Bundle> removeSafeResultListener(@NonNull SafeResultListener listener)",
    "returnType" : "Consumer<Bundle>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Context getContext()", "private Context createWindowContextIfNeeded(Context context)", " void addRequest(Request req)", " boolean isRequestActive(IBinder reqInterface)", " Request removeRequest(IBinder reqInterface)", " void doCreate(IVoiceInteractionManagerService service, IBinder token)", " void doShow(Bundle args, int flags, final IVoiceInteractionSessionShowCallback showCallback)", " void doHide()", " void doDestroy()", "private void doNotifyVisibleActivityInfoChanged(VisibleActivityInfo visibleActivityInfo, int type)", "private void doRegisterVisibleActivityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VisibleActivityCallback callback)", "private void doUnregisterVisibleActivityCallback(@NonNull VisibleActivityCallback callback)", "private void notifyVisibleActivityChanged(VisibleActivityInfo visibleActivityInfo, int type)", " void ensureWindowCreated()", " void ensureWindowAdded()", " void showWindow()", " void ensureWindowHidden()", "public void setDisabledShowContext(int flags)", "public int getDisabledShowContext()", "public int getUserDisabledShowContext()", "public void show(Bundle args, int flags)", "public void hide()", "public void setUiEnabled(boolean enabled)", "public void setTheme(int theme)", "public void startVoiceActivity(Intent intent)", "public void startAssistantActivity(Intent intent)", "public void startAssistantActivity(@NonNull Intent intent, @NonNull Bundle bundle)", "public final void requestDirectActions(@NonNull ActivityId activityId, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<List<DirectAction>> callback)", "public void onDirectActionsInvalidated(@NonNull ActivityId activityId)", "public final void performDirectAction(@NonNull DirectAction action, @Nullable Bundle extras, @Nullable CancellationSignal cancellationSignal, @NonNull @CallbackExecutor Executor resultExecutor, @NonNull Consumer<Bundle> resultListener)", "public void setKeepAwake(boolean keepAwake)", "public void closeSystemDialogs()", "public LayoutInflater getLayoutInflater()", "public Dialog getWindow()", "public void finish()", "public void onCreate()", "private void doOnCreate()", "public void onPrepareShow(Bundle args, int showFlags)", "public void onShow(@Nullable Bundle args, int showFlags)", "public void onHide()", "public void onDestroy()", "public View onCreateContentView()", "public void setContentView(View view)", " void doOnHandleAssist(int taskId, IBinder assistToken, Bundle data, AssistStructure structure, Throwable failure, AssistContent content, int index, int count)", "public void onAssistStructureFailure(Throwable failure)", "public void onHandleAssist(@Nullable Bundle data, @Nullable AssistStructure structure, @Nullable AssistContent content)", "public void onHandleAssist(@NonNull AssistState state)", "public void onHandleAssistSecondary(@Nullable Bundle data, @Nullable AssistStructure structure, @Nullable AssistContent content, int index, int count)", "public void onHandleScreenshot(@Nullable Bitmap screenshot)", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyLongPress(int keyCode, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int count, KeyEvent event)", "public void onBackPressed()", "public void onCloseSystemDialogs()", "public void onLockscreenShown()", "public void onConfigurationChanged(Configuration newConfig)", "public void onLowMemory()", "public void onTrimMemory(int level)", "public void onComputeInsets(Insets outInsets)", "public void onTaskStarted(Intent intent, int taskId)", "public void onTaskFinished(Intent intent, int taskId)", "public boolean[] onGetSupportedCommands(String[] commands)", "public void onRequestConfirmation(ConfirmationRequest request)", "public void onRequestPickOption(PickOptionRequest request)", "public void onRequestCompleteVoice(CompleteVoiceRequest request)", "public void onRequestAbortVoice(AbortVoiceRequest request)", "public void onRequestCommand(CommandRequest request)", "public void onCancelRequest(Request request)", "public final void registerVisibleActivityCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VisibleActivityCallback callback)", "public final void unregisterVisibleActivityCallback(@NonNull VisibleActivityCallback callback)", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", "private SafeResultListener createSafeResultListener(@NonNull Consumer<Bundle> consumer)", "private Consumer<Bundle> removeSafeResultListener(@NonNull SafeResultListener listener)" ],
  "variableNames" : [ "TAG", "DEBUG", "SHOW_WITH_ASSIST", "SHOW_WITH_SCREENSHOT", "SHOW_SOURCE_ASSIST_GESTURE", "SHOW_SOURCE_APPLICATION", "SHOW_SOURCE_ACTIVITY", "SHOW_SOURCE_PUSH_TO_TALK", "SHOW_SOURCE_NOTIFICATION", "SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI", "VOICE_INTERACTION_ACTIVITY_EVENT_START", "VOICE_INTERACTION_ACTIVITY_EVENT_RESUME", "VOICE_INTERACTION_ACTIVITY_EVENT_PAUSE", "VOICE_INTERACTION_ACTIVITY_EVENT_STOP", "KEY_SHOW_SESSION_ID", "KEY_FOREGROUND_ACTIVITIES", "mContext", "mHandlerCaller", "mDispatcherState", "mSystemService", "mToken", "mTheme", "mInflater", "mThemeAttrs", "mRootView", "mContentFrame", "mWindow", "mUiEnabled", "mInitialized", "mWindowAdded", "mWindowVisible", "mWindowWasVisible", "mInShowWindow", "mActiveRequests", "mTmpInsets", "mWeakRef", "mRemoteCallbacks", "mKillCallback", "mVisibleActivityCallbacks", "mVisibleActivityInfos", "mInteractor", "mSession", "MSG_START_CONFIRMATION", "MSG_START_PICK_OPTION", "MSG_START_COMPLETE_VOICE", "MSG_START_ABORT_VOICE", "MSG_START_COMMAND", "MSG_SUPPORTS_COMMANDS", "MSG_CANCEL", "MSG_TASK_STARTED", "MSG_TASK_FINISHED", "MSG_CLOSE_SYSTEM_DIALOGS", "MSG_DESTROY", "MSG_HANDLE_ASSIST", "MSG_HANDLE_SCREENSHOT", "MSG_SHOW", "MSG_HIDE", "MSG_ON_LOCKSCREEN_SHOWN", "MSG_NOTIFY_VISIBLE_ACTIVITY_INFO_CHANGED", "MSG_REGISTER_VISIBLE_ACTIVITY_CALLBACK", "MSG_UNREGISTER_VISIBLE_ACTIVITY_CALLBACK", "mCallbacks", "mInsetsComputer" ]
}