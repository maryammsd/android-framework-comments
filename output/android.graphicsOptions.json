{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/BitmapFactory.java",
  "packageName" : "android.graphics",
  "className" : "Options",
  "comment" : "",
  "variables" : [ {
    "name" : "inBitmap",
    "type" : "Bitmap",
    "comment" : "\n         * If set, decode methods that take the Options object will attempt to\n         * reuse this bitmap when loading content. If the decode operation\n         * cannot use this bitmap, the decode method will throw an\n         * {@link java.lang.IllegalArgumentException}. The\n         * current implementation necessitates that the reused bitmap be\n         * mutable, and the resulting reused bitmap will continue to remain\n         * mutable even when decoding a resource which would normally result in\n         * an immutable bitmap.</p>\n         *\n         * <p>You should still always use the returned Bitmap of the decode\n         * method and not assume that reusing the bitmap worked, due to the\n         * constraints outlined above and failure situations that can occur.\n         * Checking whether the return value matches the value of the inBitmap\n         * set in the Options structure will indicate if the bitmap was reused,\n         * but in all cases you should use the Bitmap returned by the decoding\n         * function to ensure that you are using the bitmap that was used as the\n         * decode destination.</p>\n         *\n         * <h3>Usage with BitmapFactory</h3>\n         *\n         * <p>As of {@link android.os.Build.VERSION_CODES#KITKAT}, any\n         * mutable bitmap can be reused by {@link BitmapFactory} to decode any\n         * other bitmaps as long as the resulting {@link Bitmap#getByteCount()\n         * byte count} of the decoded bitmap is less than or equal to the {@link\n         * Bitmap#getAllocationByteCount() allocated byte count} of the reused\n         * bitmap. This can be because the intrinsic size is smaller, or its\n         * size post scaling (for density / sample size) is smaller.</p>\n         *\n         * <p class=\"note\">Prior to {@link android.os.Build.VERSION_CODES#KITKAT}\n         * additional constraints apply: The image being decoded (whether as a\n         * resource or as a stream) must be in jpeg or png format. Only equal\n         * sized bitmaps are supported, with {@link #inSampleSize} set to 1.\n         * Additionally, the {@link android.graphics.Bitmap.Config\n         * configuration} of the reused bitmap will override the setting of\n         * {@link #inPreferredConfig}, if set.</p>\n         *\n         * <h3>Usage with BitmapRegionDecoder</h3>\n         *\n         * <p>BitmapRegionDecoder will draw its requested content into the Bitmap\n         * provided, clipping if the output content size (post scaling) is larger\n         * than the provided Bitmap. The provided Bitmap's width, height, and\n         * {@link Bitmap.Config} will not be changed.\n         *\n         * <p class=\"note\">BitmapRegionDecoder support for {@link #inBitmap} was\n         * introduced in {@link android.os.Build.VERSION_CODES#JELLY_BEAN}. All\n         * formats supported by BitmapRegionDecoder support Bitmap reuse via\n         * {@link #inBitmap}.</p>\n         *\n         * @see Bitmap#reconfigure(int,int, android.graphics.Bitmap.Config)\n         ",
    "links" : [ "java.lang.IllegalArgumentException", "android.os.Build.VERSION_CODES#KITKAT", "BitmapFactory", "Bitmap#getByteCount", "android.os.Build.VERSION_CODES#KITKAT", "#inSampleSize", "android.graphics.Bitmap.Config", "#inPreferredConfig", "Bitmap.Config", "#inBitmap", "android.os.Build.VERSION_CODES#JELLY_BEAN", "#inBitmap" ]
  }, {
    "name" : "inMutable",
    "type" : "boolean",
    "comment" : "\n         * If set, decode methods will always return a mutable Bitmap instead of\n         * an immutable one. This can be used for instance to programmatically apply\n         * effects to a Bitmap loaded through BitmapFactory.\n         * <p>Can not be set simultaneously with inPreferredConfig =\n         * {@link android.graphics.Bitmap.Config#HARDWARE},\n         * because hardware bitmaps are always immutable.\n         ",
    "links" : [ "android.graphics.Bitmap.Config#HARDWARE" ]
  }, {
    "name" : "inJustDecodeBounds",
    "type" : "boolean",
    "comment" : "\n         * If set to true, the decoder will return null (no bitmap), but\n         * the <code>out...</code> fields will still be set, allowing the caller to\n         * query the bitmap without having to allocate the memory for its pixels.\n         ",
    "links" : [ ]
  }, {
    "name" : "inSampleSize",
    "type" : "int",
    "comment" : "\n         * If set to a value > 1, requests the decoder to subsample the original\n         * image, returning a smaller image to save memory. The sample size is\n         * the number of pixels in either dimension that correspond to a single\n         * pixel in the decoded bitmap. For example, inSampleSize == 4 returns\n         * an image that is 1/4 the width/height of the original, and 1/16 the\n         * number of pixels. Any value <= 1 is treated the same as 1. Note: the\n         * decoder uses a final value based on powers of 2, any other value will\n         * be rounded down to the nearest power of 2.\n         ",
    "links" : [ ]
  }, {
    "name" : "inPreferredConfig",
    "type" : "Bitmap.Config",
    "comment" : "\n         * If this is non-null, the decoder will try to decode into this\n         * internal configuration. If it is null, or the request cannot be met,\n         * the decoder will try to pick the best matching config based on the\n         * system's screen depth, and characteristics of the original image such\n         * as if it has per-pixel alpha (requiring a config that also does).\n         * \n         * Image are loaded with the {@link Bitmap.Config#ARGB_8888} config by\n         * default.\n         ",
    "links" : [ "Bitmap.Config#ARGB_8888" ]
  }, {
    "name" : "inPreferredColorSpace",
    "type" : "ColorSpace",
    "comment" : "\n         * <p>If this is non-null, the decoder will try to decode into this\n         * color space. If it is null, or the request cannot be met,\n         * the decoder will pick either the color space embedded in the image\n         * or the color space best suited for the requested image configuration\n         * (for instance {@link ColorSpace.Named#SRGB sRGB} for\n         * {@link Bitmap.Config#ARGB_8888} configuration and\n         * {@link ColorSpace.Named#EXTENDED_SRGB EXTENDED_SRGB} for\n         * {@link Bitmap.Config#RGBA_F16}).</p>\n         *\n         * <p class=\"note\">Only {@link ColorSpace.Model#RGB} color spaces are\n         * currently supported. An <code>IllegalArgumentException</code> will\n         * be thrown by the decode methods when setting a non-RGB color space\n         * such as {@link ColorSpace.Named#CIE_LAB Lab}.</p>\n         *\n         * <p class=\"note\">The specified color space's transfer function must be\n         * an {@link ColorSpace.Rgb.TransferParameters ICC parametric curve}. An\n         * <code>IllegalArgumentException</code> will be thrown by the decode methods\n         * if calling {@link ColorSpace.Rgb#getTransferParameters()} on the\n         * specified color space returns null.</p>\n         *\n         * <p>After decode, the bitmap's color space is stored in\n         * {@link #outColorSpace}.</p>\n         ",
    "links" : [ "ColorSpace.Named#SRGB", "Bitmap.Config#ARGB_8888", "ColorSpace.Named#EXTENDED_SRGB", "Bitmap.Config#RGBA_F16", "ColorSpace.Model#RGB", "ColorSpace.Named#CIE_LAB", "ColorSpace.Rgb.TransferParameters", "ColorSpace.Rgb#getTransferParameters", "#outColorSpace" ]
  }, {
    "name" : "inPremultiplied",
    "type" : "boolean",
    "comment" : "\n         * If true (which is the default), the resulting bitmap will have its\n         * color channels pre-multipled by the alpha channel.\n         *\n         * <p>This should NOT be set to false for images to be directly drawn by\n         * the view system or through a {@link Canvas}. The view system and\n         * {@link Canvas} assume all drawn images are pre-multiplied to simplify\n         * draw-time blending, and will throw a RuntimeException when\n         * un-premultiplied are drawn.</p>\n         *\n         * <p>This is likely only useful if you want to manipulate raw encoded\n         * image data, e.g. with RenderScript or custom OpenGL.</p>\n         *\n         * <p>This does not affect bitmaps without an alpha channel.</p>\n         *\n         * <p>Setting this flag to false while setting {@link #inScaled} to true\n         * may result in incorrect colors.</p>\n         *\n         * @see Bitmap#hasAlpha()\n         * @see Bitmap#isPremultiplied()\n         * @see #inScaled\n         ",
    "links" : [ "Canvas", "Canvas", "#inScaled" ]
  }, {
    "name" : "inDither",
    "type" : "boolean",
    "comment" : "\n         * @deprecated As of {@link android.os.Build.VERSION_CODES#N}, this is\n         * ignored.\n         *\n         * In {@link android.os.Build.VERSION_CODES#M} and below, if dither is\n         * true, the decoder will attempt to dither the decoded image.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "inDensity",
    "type" : "int",
    "comment" : "\n         * The pixel density to use for the bitmap.  This will always result\n         * in the returned bitmap having a density set for it (see\n         * {@link Bitmap#setDensity(int) Bitmap.setDensity(int)}).  In addition,\n         * if {@link #inScaled} is set (which it is by default} and this\n         * density does not match {@link #inTargetDensity}, then the bitmap\n         * will be scaled to the target density before being returned.\n         * \n         * <p>If this is 0,\n         * {@link BitmapFactory#decodeResource(Resources, int)}, \n         * {@link BitmapFactory#decodeResource(Resources, int, android.graphics.BitmapFactory.Options)},\n         * and {@link BitmapFactory#decodeResourceStream}\n         * will fill in the density associated with the resource.  The other\n         * functions will leave it as-is and no density will be applied.\n         *\n         * @see #inTargetDensity\n         * @see #inScreenDensity\n         * @see #inScaled\n         * @see Bitmap#setDensity(int)\n         * @see android.util.DisplayMetrics#densityDpi\n         ",
    "links" : [ "Bitmap#setDensity", "#inScaled", "#inTargetDensity", "BitmapFactory#decodeResource", "BitmapFactory#decodeResource", "BitmapFactory#decodeResourceStream" ]
  }, {
    "name" : "inTargetDensity",
    "type" : "int",
    "comment" : "\n         * The pixel density of the destination this bitmap will be drawn to.\n         * This is used in conjunction with {@link #inDensity} and\n         * {@link #inScaled} to determine if and how to scale the bitmap before\n         * returning it.\n         * \n         * <p>If this is 0,\n         * {@link BitmapFactory#decodeResource(Resources, int)}, \n         * {@link BitmapFactory#decodeResource(Resources, int, android.graphics.BitmapFactory.Options)},\n         * and {@link BitmapFactory#decodeResourceStream}\n         * will fill in the density associated the Resources object's\n         * DisplayMetrics.  The other\n         * functions will leave it as-is and no scaling for density will be\n         * performed.\n         * \n         * @see #inDensity\n         * @see #inScreenDensity\n         * @see #inScaled\n         * @see android.util.DisplayMetrics#densityDpi\n         ",
    "links" : [ "#inDensity", "#inScaled", "BitmapFactory#decodeResource", "BitmapFactory#decodeResource", "BitmapFactory#decodeResourceStream" ]
  }, {
    "name" : "inScreenDensity",
    "type" : "int",
    "comment" : "\n         * The pixel density of the actual screen that is being used.  This is\n         * purely for applications running in density compatibility code, where\n         * {@link #inTargetDensity} is actually the density the application\n         * sees rather than the real screen density.\n         * \n         * <p>By setting this, you\n         * allow the loading code to avoid scaling a bitmap that is currently\n         * in the screen density up/down to the compatibility density.  Instead,\n         * if {@link #inDensity} is the same as {@link #inScreenDensity}, the\n         * bitmap will be left as-is.  Anything using the resulting bitmap\n         * must also used {@link Bitmap#getScaledWidth(int)\n         * Bitmap.getScaledWidth} and {@link Bitmap#getScaledHeight\n         * Bitmap.getScaledHeight} to account for any different between the\n         * bitmap's density and the target's density.\n         * \n         * <p>This is never set automatically for the caller by\n         * {@link BitmapFactory} itself.  It must be explicitly set, since the\n         * caller must deal with the resulting bitmap in a density-aware way.\n         * \n         * @see #inDensity\n         * @see #inTargetDensity\n         * @see #inScaled\n         * @see android.util.DisplayMetrics#densityDpi\n         ",
    "links" : [ "#inTargetDensity", "#inDensity", "#inScreenDensity", "Bitmap#getScaledWidth", "Bitmap#getScaledHeight", "BitmapFactory" ]
  }, {
    "name" : "inScaled",
    "type" : "boolean",
    "comment" : "\n         * When this flag is set, if {@link #inDensity} and\n         * {@link #inTargetDensity} are not 0, the\n         * bitmap will be scaled to match {@link #inTargetDensity} when loaded,\n         * rather than relying on the graphics system scaling it each time it\n         * is drawn to a Canvas.\n         *\n         * <p>BitmapRegionDecoder ignores this flag, and will not scale output\n         * based on density. (though {@link #inSampleSize} is supported)</p>\n         *\n         * <p>This flag is turned on by default and should be turned off if you need\n         * a non-scaled version of the bitmap.  Nine-patch bitmaps ignore this\n         * flag and are always scaled.\n         *\n         * <p>If {@link #inPremultiplied} is set to false, and the image has alpha,\n         * setting this flag to true may result in incorrect colors.\n         ",
    "links" : [ "#inDensity", "#inTargetDensity", "#inTargetDensity", "#inSampleSize", "#inPremultiplied" ]
  }, {
    "name" : "inPurgeable",
    "type" : "boolean",
    "comment" : "\n         * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this is\n         * ignored.\n         *\n         * In {@link android.os.Build.VERSION_CODES#KITKAT} and below, if this\n         * is set to true, then the resulting bitmap will allocate its\n         * pixels such that they can be purged if the system needs to reclaim\n         * memory. In that instance, when the pixels need to be accessed again\n         * (e.g. the bitmap is drawn, getPixels() is called), they will be\n         * automatically re-decoded.\n         *\n         * <p>For the re-decode to happen, the bitmap must have access to the\n         * encoded data, either by sharing a reference to the input\n         * or by making a copy of it. This distinction is controlled by\n         * inInputShareable. If this is true, then the bitmap may keep a shallow\n         * reference to the input. If this is false, then the bitmap will\n         * explicitly make a copy of the input data, and keep that. Even if\n         * sharing is allowed, the implementation may still decide to make a\n         * deep copy of the input data.</p>\n         *\n         * <p>While inPurgeable can help avoid big Dalvik heap allocations (from\n         * API level 11 onward), it sacrifices performance predictability since any\n         * image that the view system tries to draw may incur a decode delay which\n         * can lead to dropped frames. Therefore, most apps should avoid using\n         * inPurgeable to allow for a fast and fluid UI. To minimize Dalvik heap\n         * allocations use the {@link #inBitmap} flag instead.</p>\n         *\n         * <p class=\"note\"><strong>Note:</strong> This flag is ignored when used\n         * with {@link #decodeResource(Resources, int,\n         * android.graphics.BitmapFactory.Options)} or {@link #decodeFile(String,\n         * android.graphics.BitmapFactory.Options)}.</p>\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "android.os.Build.VERSION_CODES#KITKAT", "#inBitmap", "#decodeResource", "#decodeFile" ]
  }, {
    "name" : "inInputShareable",
    "type" : "boolean",
    "comment" : "\n         * @deprecated As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this is\n         * ignored.\n         *\n         * In {@link android.os.Build.VERSION_CODES#KITKAT} and below, this\n         * field works in conjuction with inPurgeable. If inPurgeable is false,\n         * then this field is ignored. If inPurgeable is true, then this field\n         * determines whether the bitmap can share a reference to the input\n         * data (inputstream, array, etc.) or if it must make a deep copy.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP", "android.os.Build.VERSION_CODES#KITKAT" ]
  }, {
    "name" : "inPreferQualityOverSpeed",
    "type" : "boolean",
    "comment" : "\n         * @deprecated As of {@link android.os.Build.VERSION_CODES#N}, this is\n         * ignored.  The output will always be high quality.\n         *\n         * In {@link android.os.Build.VERSION_CODES#M} and below, if\n         * inPreferQualityOverSpeed is set to true, the decoder will try to\n         * decode the reconstructed image to a higher quality even at the\n         * expense of the decoding speed. Currently the field only affects JPEG\n         * decode, in the case of which a more accurate, but slightly slower,\n         * IDCT method will be used instead.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "outWidth",
    "type" : "int",
    "comment" : "\n         * The resulting width of the bitmap. If {@link #inJustDecodeBounds} is\n         * set to false, this will be width of the output bitmap after any\n         * scaling is applied. If true, it will be the width of the input image\n         * without any accounting for scaling.\n         *\n         * <p>outWidth will be set to -1 if there is an error trying to decode.</p>\n         ",
    "links" : [ "#inJustDecodeBounds" ]
  }, {
    "name" : "outHeight",
    "type" : "int",
    "comment" : "\n         * The resulting height of the bitmap. If {@link #inJustDecodeBounds} is\n         * set to false, this will be height of the output bitmap after any\n         * scaling is applied. If true, it will be the height of the input image\n         * without any accounting for scaling.\n         *\n         * <p>outHeight will be set to -1 if there is an error trying to decode.</p>\n         ",
    "links" : [ "#inJustDecodeBounds" ]
  }, {
    "name" : "outMimeType",
    "type" : "String",
    "comment" : "\n         * If known, this string is set to the mimetype of the decoded image.\n         * If not known, or there is an error, it is set to null.\n         ",
    "links" : [ ]
  }, {
    "name" : "outConfig",
    "type" : "Bitmap.Config",
    "comment" : "\n         * If known, the config the decoded bitmap will have.\n         * If not known, or there is an error, it is set to null.\n         ",
    "links" : [ ]
  }, {
    "name" : "outColorSpace",
    "type" : "ColorSpace",
    "comment" : "\n         * If known, the color space the decoded bitmap will have. Note that the\n         * output color space is not guaranteed to be the color space the bitmap\n         * is encoded with. If not known (when the config is\n         * {@link Bitmap.Config#ALPHA_8} for instance), or there is an error,\n         * it is set to null.\n         ",
    "links" : [ "Bitmap.Config#ALPHA_8" ]
  }, {
    "name" : "inTempStorage",
    "type" : "byte[]",
    "comment" : "\n         * Temp storage to use for decoding.  Suggest 16K or so.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCancel",
    "type" : "boolean",
    "comment" : "\n         * @deprecated As of {@link android.os.Build.VERSION_CODES#N}, see\n         * comments on {@link #requestCancelDecode()}.\n         *\n         * Flag to indicate that cancel has been called on this object.  This\n         * is useful if there's an intermediary that wants to first decode the\n         * bounds and then decode the image.  In that case the intermediary\n         * can check, inbetween the bounds decode and the image decode, to see\n         * if the operation is canceled.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#N", "#requestCancelDecode" ]
  } ],
  "methods" : [ {
    "name" : "public void requestCancelDecode()",
    "returnType" : "void",
    "comment" : "\n         *  @deprecated As of {@link android.os.Build.VERSION_CODES#N}, this\n         *  will not affect the decode, though it will still set mCancel.\n         *\n         *  In {@link android.os.Build.VERSION_CODES#M} and below, if this can\n         *  be called from another thread while this options object is inside\n         *  a decode... call. Calling this will notify the decoder that it\n         *  should cancel its operation. This is not guaranteed to cancel the\n         *  decode, but if it does, the decoder... operation will return null,\n         *  or if inJustDecodeBounds is true, will set outWidth/outHeight\n         *  to -1\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#N", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : " static void validate(Options opts)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nativeInBitmap(Options opts)",
    "returnType" : "long",
    "comment" : "\n         *  Helper for passing inBitmap's native pointer to native.\n         ",
    "links" : [ ]
  }, {
    "name" : " static long nativeColorSpace(Options opts)",
    "returnType" : "long",
    "comment" : "\n         *  Helper for passing SkColorSpace pointer to native.\n         *\n         *  @throws IllegalArgumentException if the ColorSpace is not Rgb or does\n         *          not have TransferParameters.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "inBitmap", "inMutable", "inJustDecodeBounds", "inSampleSize", "inPreferredConfig", "inPreferredColorSpace", "inPremultiplied", "inDither", "inDensity", "inTargetDensity", "inScreenDensity", "inScaled", "inPurgeable", "inInputShareable", "inPreferQualityOverSpeed", "outWidth", "outHeight", "outMimeType", "outConfig", "outColorSpace", "inTempStorage", "mCancel" ],
  "methodNames" : [ "public void requestCancelDecode()", " static void validate(Options opts)", " static long nativeInBitmap(Options opts)", " static long nativeColorSpace(Options opts)" ]
}