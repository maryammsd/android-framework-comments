{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/CloudMediaProviderContract.java",
  "packageName" : "android.provider",
  "className" : "CloudMediaProviderContract",
  "comment" : "\n * Defines the contract between a cloud media provider and the OS.\n * <p>\n * To create a cloud media provider, extend {@link CloudMediaProvider}, which\n * provides a foundational implementation of this contract.\n *\n * @see CloudMediaProvider\n ",
  "links" : [ "android.provider.CloudMediaProvider" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROVIDER_INTERFACE",
    "type" : "String",
    "comment" : "\n     * {@link Intent} action used to identify {@link CloudMediaProvider} instances. This\n     * is used in the {@code <intent-filter>} of the {@code <provider>}.\n     ",
    "links" : [ "android.content.Intent", "android.provider.CloudMediaProvider" ]
  }, {
    "name" : "MANAGE_CLOUD_MEDIA_PROVIDERS_PERMISSION",
    "type" : "String",
    "comment" : "\n     * Permission required to protect {@link CloudMediaProvider} instances. Providers should\n     * require this in the {@code permission} attribute in their {@code <provider>} tag.\n     * The OS will not connect to a provider without this protection.\n     ",
    "links" : [ "android.provider.CloudMediaProvider" ]
  }, {
    "name" : "EXTRA_PAGE_TOKEN",
    "type" : "String",
    "comment" : "\n     * Opaque pagination token to retrieve the next page (cursor) from a media or album query.\n     * <p>\n     * Providers can optionally set this token as part of the {@link Cursor#setExtras}\n     * {@link Bundle}. If a token is set, the OS can pass it as a {@link Bundle} parameter when\n     * querying for media or albums to fetch subsequent pages. The provider can keep returning\n     * pagination tokens until the last page at which point it should not set a token on the\n     * {@link Cursor}.\n     * <p>\n     * If the provider handled the page token as part of the query, they must add\n     * the {@link #EXTRA_PAGE_TOKEN} key to the array of {@link ContentResolver#EXTRA_HONORED_ARGS}\n     * as part of the returned {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @see CloudMediaProvider#onQueryMedia\n     * @see CloudMediaProvider#onQueryAlbums\n     * <p>\n     * Type: STRING\n     ",
    "links" : [ "android.os.Bundle", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras", "android.database.Cursor", "#EXTRA_PAGE_TOKEN" ]
  }, {
    "name" : "EXTRA_MEDIA_COLLECTION_ID",
    "type" : "String",
    "comment" : "\n     * {@link MediaCollectionInfo#MEDIA_COLLECTION_ID} on which the media or album query occurred.\n     *\n     * <p>\n     * Providers must set this token as part of the {@link Cursor#setExtras}\n     * {@link Bundle} returned from the cursors on query.\n     * This allows the OS to verify that the returned results match the\n     * {@link MediaCollectionInfo#MEDIA_COLLECTION_ID} queried via\n     * {@link CloudMediaProvider#onGetMediaCollectionInfo}. If the collection differs, the OS will\n     * ignore the result and may try again.\n     *\n     * @see CloudMediaProvider#onQueryMedia\n     * @see CloudMediaProvider#onQueryDeletedMedia\n     * @see CloudMediaProvider#onQueryAlbums\n     * <p>\n     * Type: STRING\n     ",
    "links" : [ "android.os.Bundle", "#MEDIA_COLLECTION_ID", "android.database.Cursor#setExtras", "android.provider.CloudMediaProvider#onGetMediaCollectionInfo" ]
  }, {
    "name" : "EXTRA_SYNC_GENERATION",
    "type" : "String",
    "comment" : "\n     * Generation number to fetch the latest media or album metadata changes from the media\n     * collection.\n     * <p>\n     * The provider should associate a monotonically increasing sync generation to each media\n     * item change (insertion/deletion/update). This is useful to quickly identify exactly which\n     * media items have changed since a previous point in time.\n     * <p>\n     * Providers should also associate a separate monotonically increasing sync generation\n     * for album changes (insertion/deletion/update). This album sync generation, should record\n     * both changes to the album metadata itself and changes to the media items contained in the\n     * album. E.g. a direct change to an album's\n     * {@link CloudMediaProviderContract.AlbumColumns#DISPLAY_NAME} will increase the\n     * album sync generation, likewise adding a photo to that album should also increase the\n     * sync generation.\n     * <p>\n     * Note that multiple media (or album) items can share a sync generation as long as the entire\n     * change appears atomic from the perspective of the query APIs. E.g. each item in a batch photo\n     * sync from the cloud can have the same sync generation if they were all synced atomically into\n     * the collection from the perspective of an external observer.\n     * <p>\n     * This extra can be passed as a {@link Bundle} parameter to the media or album query methods\n     * and the provider should only return items with a sync generation that is strictly greater\n     * than the one provided in the filter.\n     * <p>\n     * If the provider supports this filter, it must support the respective\n     * {@link CloudMediaProvider#onGetMediaCollectionInfo} methods to return the {@code count} and\n     * {@code max generation} for media or albums.\n     * <p>\n     * If the provider handled the generation, they must add the\n     * {@link #EXTRA_SYNC_GENERATION} key to the array of {@link ContentResolver#EXTRA_HONORED_ARGS}\n     * as part of the returned {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @see MediaCollectionInfo#LAST_MEDIA_SYNC_GENERATION\n     * @see CloudMediaProvider#onQueryMedia\n     * @see CloudMediaProvider#onQueryAlbums\n     * @see MediaStore.MediaColumns#GENERATION_MODIFIED\n     * <p>\n     * Type: LONG\n     ",
    "links" : [ "android.os.Bundle", "CloudMediaProviderContract.AlbumColumns#DISPLAY_NAME", "#EXTRA_SYNC_GENERATION", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras", "android.provider.CloudMediaProvider#onGetMediaCollectionInfo" ]
  }, {
    "name" : "EXTRA_ALBUM_ID",
    "type" : "String",
    "comment" : "\n     * Limits the query results to only media items matching the given album id.\n     * <p>\n     * If the provider handled the album filter, they must also add the {@link #EXTRA_ALBUM_ID}\n     * key to the array of {@link ContentResolver#EXTRA_HONORED_ARGS} as part of the returned\n     * {@link Cursor#setExtras} {@link Bundle}.\n     *\n     * @see CloudMediaProvider#onQueryMedia\n     * <p>\n     * Type: STRING\n     ",
    "links" : [ "#EXTRA_ALBUM_ID", "android.os.Bundle", "android.content.ContentResolver#EXTRA_HONORED_ARGS", "android.database.Cursor#setExtras" ]
  }, {
    "name" : "EXTRA_PAGE_SIZE",
    "type" : "String",
    "comment" : "\n     * The maximum number of query results that should be included in a batch when syncing metadata\n     * with cloud provider.\n     *\n     * This extra can be passed as a {@link Bundle} parameter to the media or album query methods.\n     *\n     * It is optional for the provider to honor this extra and return results at max page size.\n     *\n     * @see CloudMediaProvider#onQueryMedia\n     * @see CloudMediaProvider#onQueryAlbums\n     *\n     * <p>\n     * Type: INTEGER\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "EXTRA_SIZE_LIMIT_BYTES",
    "type" : "String",
    "comment" : "\n     * Limits the query results to only media items less than the given file size in bytes.\n     * <p>\n     * This is only intended for the MediaProvider to implement for cross-user communication. Not\n     * for third party apps.\n     *\n     * @see CloudMediaProvider#onQueryMedia\n     * <p>\n     * Type: LONG\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREVIEW_THUMBNAIL",
    "type" : "String",
    "comment" : "\n     * Forces the {@link CloudMediaProvider#onOpenPreview} file descriptor to return a thumbnail\n     * image. This is only useful for videos where the OS can either request a video or image\n     * for preview.\n     *\n     * @see CloudMediaProvider#onOpenPreview\n     * <p>\n     * Type: BOOLEAN\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onOpenPreview" ]
  }, {
    "name" : "EXTRA_MEDIASTORE_THUMB",
    "type" : "String",
    "comment" : "\n     * A boolean to indicate {@link com.android.providers.media.photopicker.PhotoPickerProvider}\n     * this request is requesting a cached thumbnail file from MediaStore.\n     *\n     * Type: BOOLEAN\n     *\n     * {@hide}\n     ",
    "links" : [ "com.android.providers.media.photopicker.PhotoPickerProvider" ]
  }, {
    "name" : "METHOD_GET_MEDIA_COLLECTION_INFO",
    "type" : "String",
    "comment" : "\n     * Constant used to execute {@link CloudMediaProvider#onGetMediaCollectionInfo} via\n     * {@link ContentProvider#call}.\n     *\n     * {@hide}\n     ",
    "links" : [ "#call", "android.provider.CloudMediaProvider#onGetMediaCollectionInfo" ]
  }, {
    "name" : "METHOD_CREATE_SURFACE_CONTROLLER",
    "type" : "String",
    "comment" : "\n     * Constant used to execute {@link CloudMediaProvider#onCreateCloudMediaSurfaceController} via\n     * {@link ContentProvider#call}.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onCreateCloudMediaSurfaceController", "#call" ]
  }, {
    "name" : "EXTRA_SURFACE_CONTROLLER",
    "type" : "String",
    "comment" : "\n     * Gets surface controller from {@link CloudMediaProvider#onCreateCloudMediaSurfaceController}.\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onCreateCloudMediaSurfaceController" ]
  }, {
    "name" : "EXTRA_LOOPING_PLAYBACK_ENABLED",
    "type" : "String",
    "comment" : "\n     * Indicates whether to enable looping playback of media items.\n     * <p>\n     * In case this is not present, the default value should be false.\n     *\n     * @see CloudMediaProvider#onCreateCloudMediaSurfaceController\n     * @see CloudMediaProvider.CloudMediaSurfaceController#onConfigChange\n     * <p>\n     * Type: BOOLEAN\n     * By default, the value is true\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED",
    "type" : "String",
    "comment" : "\n     * Indicates whether to mute audio during preview of media items.\n     *\n     * @see CloudMediaProvider#onCreateCloudMediaSurfaceController\n     * @see CloudMediaProvider.CloudMediaSurfaceController#onConfigChange\n     * <p>\n     * Type: BOOLEAN\n     * By default, the value is false\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SURFACE_STATE_CALLBACK",
    "type" : "String",
    "comment" : "\n     * Gets surface state callback from picker launched via\n     * {@link MediaStore#ACTION_PICK_IMAGES}).\n     *\n     * @see MediaStore#ACTION_PICK_IMAGES\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.MediaStore#ACTION_PICK_IMAGES" ]
  }, {
    "name" : "METHOD_GET_ASYNC_CONTENT_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Constant used to execute {@link CloudMediaProvider#onGetAsyncContentProvider()} via\n     * {@link android.content.ContentProvider#call}.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onGetAsyncContentProvider()", "android.content.ContentProvider#call" ]
  }, {
    "name" : "EXTRA_ASYNC_CONTENT_PROVIDER",
    "type" : "String",
    "comment" : "\n     * Constant used to get/set {@link IAsyncContentProvider} in {@link Bundle}.\n     *\n     * {@hide}\n     ",
    "links" : [ "IAsyncContentProvider", "android.os.Bundle" ]
  }, {
    "name" : "EXTRA_FILE_DESCRIPTOR",
    "type" : "String",
    "comment" : "\n     * Constant used to get/set {@link android.os.ParcelFileDescriptor} in {@link Bundle}.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "android.os.Bundle" ]
  }, {
    "name" : "EXTRA_ERROR_MESSAGE",
    "type" : "String",
    "comment" : "\n     * Constant used to get/set CMP exception message in {@link Bundle}.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "EXTRA_AUTHORITY",
    "type" : "String",
    "comment" : "\n     * Constant used to get/set the {@link CloudMediaProvider} authority.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider" ]
  }, {
    "name" : "URI_PATH_MEDIA",
    "type" : "String",
    "comment" : "\n     * URI path for {@link CloudMediaProvider#onQueryMedia}\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onQueryMedia" ]
  }, {
    "name" : "URI_PATH_DELETED_MEDIA",
    "type" : "String",
    "comment" : "\n     * URI path for {@link CloudMediaProvider#onQueryDeletedMedia}\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onQueryDeletedMedia" ]
  }, {
    "name" : "URI_PATH_ALBUM",
    "type" : "String",
    "comment" : "\n     * URI path for {@link CloudMediaProvider#onQueryAlbums}\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onQueryAlbums" ]
  }, {
    "name" : "URI_PATH_MEDIA_COLLECTION_INFO",
    "type" : "String",
    "comment" : "\n     * URI path for {@link CloudMediaProvider#onGetMediaCollectionInfo}\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onGetMediaCollectionInfo" ]
  }, {
    "name" : "URI_PATH_SURFACE_CONTROLLER",
    "type" : "String",
    "comment" : "\n     * URI path for {@link CloudMediaProvider#onCreateCloudMediaSurfaceController}\n     *\n     * {@hide}\n     ",
    "links" : [ "android.provider.CloudMediaProvider#onCreateCloudMediaSurfaceController" ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "TAG", "PROVIDER_INTERFACE", "MANAGE_CLOUD_MEDIA_PROVIDERS_PERMISSION", "EXTRA_PAGE_TOKEN", "EXTRA_MEDIA_COLLECTION_ID", "EXTRA_SYNC_GENERATION", "EXTRA_ALBUM_ID", "EXTRA_PAGE_SIZE", "EXTRA_SIZE_LIMIT_BYTES", "EXTRA_PREVIEW_THUMBNAIL", "EXTRA_MEDIASTORE_THUMB", "METHOD_GET_MEDIA_COLLECTION_INFO", "METHOD_CREATE_SURFACE_CONTROLLER", "EXTRA_SURFACE_CONTROLLER", "EXTRA_LOOPING_PLAYBACK_ENABLED", "EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED", "EXTRA_SURFACE_STATE_CALLBACK", "METHOD_GET_ASYNC_CONTENT_PROVIDER", "EXTRA_ASYNC_CONTENT_PROVIDER", "EXTRA_FILE_DESCRIPTOR", "EXTRA_ERROR_MESSAGE", "EXTRA_AUTHORITY", "URI_PATH_MEDIA", "URI_PATH_DELETED_MEDIA", "URI_PATH_ALBUM", "URI_PATH_MEDIA_COLLECTION_INFO", "URI_PATH_SURFACE_CONTROLLER" ]
}