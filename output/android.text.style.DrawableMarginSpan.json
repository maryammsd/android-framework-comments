{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/style/DrawableMarginSpan.java",
  "packageName" : "android.text.style",
  "className" : "DrawableMarginSpan",
  "comment" : "\n * A span which adds a drawable and a padding to the paragraph it's attached to.\n * <p>\n * If the height of the drawable is bigger than the height of the line it's attached to then the\n * line height is increased to fit the drawable. <code>DrawableMarginSpan</code> allows setting a\n * padding between the drawable and the text. The default value is 0. The span must be set from the\n * beginning of the text, otherwise either the span won't be rendered or it will be rendered\n * incorrectly.\n * <p>\n * For example, a drawable and a padding of 20px can be added like this:\n * <pre>{@code SpannableString string = new SpannableString(\"Text with a drawable.\");\n * string.setSpan(new DrawableMarginSpan(drawable, 20), 0, string.length(),\n * Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);}</pre>\n * <img src=\"{@docRoot}reference/android/images/text/style/drawablemarginspan.png\" />\n * <figcaption>Text with a drawable and a padding.</figcaption>\n * <p>\n *\n * @see IconMarginSpan for working with a {@link android.graphics.Bitmap} instead of\n * a {@link Drawable}.\n ",
  "variables" : [ {
    "name" : "STANDARD_PAD_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPad",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLeadingMargin(boolean first)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void drawLeadingMargin(@NonNull Canvas c, @NonNull Paint p, int x, int dir, int top, int baseline, int bottom, @NonNull CharSequence text, int start, int end, boolean first, @NonNull Layout layout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void chooseHeight(@NonNull CharSequence text, int start, int end, int istartv, int v, @NonNull Paint.FontMetricsInt fm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STANDARD_PAD_WIDTH", "mDrawable", "mPad" ],
  "methodNames" : [ "public int getLeadingMargin(boolean first)", "public void drawLeadingMargin(@NonNull Canvas c, @NonNull Paint p, int x, int dir, int top, int baseline, int bottom, @NonNull CharSequence text, int start, int end, boolean first, @NonNull Layout layout)", "public void chooseHeight(@NonNull CharSequence text, int start, int end, int istartv, int v, @NonNull Paint.FontMetricsInt fm)" ]
}