{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Tripwire.java",
  "packageName" : "java.util.stream",
  "className" : "Tripwire",
  "comment" : "\n * Utility class for detecting inadvertent uses of boxing in\n * {@code java.util.stream} classes.  The detection is turned on or off based on\n * whether the system property {@code org.openjdk.java.util.stream.tripwire} is\n * considered {@code true} according to {@link Boolean#getBoolean(String)}.\n * This should normally be turned off for production use.\n *\n * @apiNote\n * Typical usage would be for boxing code to do:\n * <pre>{@code\n *     if (Tripwire.ENABLED)\n *         Tripwire.trip(getClass(), \"{0} calling Sink.OfInt.accept(Integer)\");\n * }</pre>\n *\n * @since 1.8\n ",
  "links" : [ "#getBoolean(String)" ],
  "variables" : [ {
    "name" : "TRIPWIRE_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLED",
    "type" : "boolean",
    "comment" : " Should debugging checks be enabled? ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void trip(Class<?> trippingClass, String msg)",
    "returnType" : "void",
    "comment" : "\n     * Produces a log warning, using {@code PlatformLogger.getLogger(className)},\n     * using the supplied message.  The class name of {@code trippingClass} will\n     * be used as the first parameter to the message.\n     *\n     * @param trippingClass Name of the class generating the message\n     * @param msg A message format string of the type expected by\n     * {@link PlatformLogger}\n     ",
    "links" : [ "sun.util.logging.PlatformLogger" ]
  } ],
  "methodNames" : [ " static void trip(Class<?> trippingClass, String msg)" ],
  "variableNames" : [ "TRIPWIRE_PROPERTY", "ENABLED" ]
}