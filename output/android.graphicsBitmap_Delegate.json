{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Bitmap_Delegate.java",
  "packageName" : "android.graphics",
  "className" : "Bitmap_Delegate",
  "comment" : "\n * Delegate implementing the native methods of android.graphics.Bitmap\n *\n * Through the layoutlib_create tool, the original native methods of Bitmap have been replaced\n * by calls to methods of the same name in this delegate class.\n *\n * This class behaves like the original native implementation, but in Java, keeping previously\n * native data into its own objects and mapping them to int that are sent back and forth between\n * it and the original Bitmap class.\n *\n * @see DelegateManager\n *\n ",
  "variables" : [ {
    "name" : "sManager",
    "type" : "DelegateManager<Bitmap_Delegate>",
    "comment" : " ---- delegate manager ----",
    "links" : [ ]
  }, {
    "name" : "sFinalizer",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfig",
    "type" : "Config",
    "comment" : " ---- delegate data ----",
    "links" : [ ]
  }, {
    "name" : "mImage",
    "type" : "BufferedImage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAlpha",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasMipMap",
    "type" : "boolean",
    "comment" : " TODO: check the default.",
    "links" : [ ]
  }, {
    "name" : "mIsPremultiplied",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGenerationId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsMutable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Bitmap_Delegate getDelegate(long native_bitmap)",
    "returnType" : "Bitmap_Delegate",
    "comment" : "\n     * Returns the native delegate associated to a given an int referencing a {@link Bitmap} object.\n     ",
    "links" : [ "Bitmap" ]
  }, {
    "name" : "public static Bitmap createBitmap(@Nullable InputStream input, boolean isMutable, Density density) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns a {@link Bitmap} initialized with the given stream content.\n     *\n     * @param input the stream from which to read the bitmap content\n     * @param isMutable whether the bitmap is mutable\n     * @param density the density associated with the bitmap\n     *\n     * @see Bitmap#isMutable()\n     * @see Bitmap#getDensity()\n     ",
    "links" : [ "Bitmap" ]
  }, {
    "name" : " static Bitmap createBitmap(@Nullable InputStream input, Set<BitmapCreateFlags> createFlags, Density density) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns a {@link Bitmap} initialized with the given file content.\n     *\n     * @param input the file from which to read the bitmap content\n     * @param density the density associated with the bitmap\n     *\n     * @see Bitmap#isPremultiplied()\n     * @see Bitmap#isMutable()\n     * @see Bitmap#getDensity()\n     ",
    "links" : [ "Bitmap" ]
  }, {
    "name" : "public static Bitmap createBitmap(BufferedImage image, boolean isMutable, Density density)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns a {@link Bitmap} initialized with the given {@link BufferedImage}\n     *\n     * @param image the bitmap content\n     * @param isMutable whether the bitmap is mutable\n     * @param density the density associated with the bitmap\n     *\n     * @see Bitmap#isMutable()\n     * @see Bitmap#getDensity()\n     ",
    "links" : [ "Bitmap", "BufferedImage" ]
  }, {
    "name" : "public static Bitmap createBitmap(BufferedImage image, Set<BitmapCreateFlags> createFlags, Density density)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns a {@link Bitmap} initialized with the given {@link BufferedImage}\n     *\n     * @param image the bitmap content\n     * @param density the density associated with the bitmap\n     *\n     * @see Bitmap#isPremultiplied()\n     * @see Bitmap#isMutable()\n     * @see Bitmap#getDensity()\n     ",
    "links" : [ "Bitmap", "BufferedImage" ]
  }, {
    "name" : "private static int getBufferedImageType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BufferedImage getImage()",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Returns the {@link BufferedImage} used by the delegate of the given {@link Bitmap}.\n     ",
    "links" : [ "BufferedImage", "Bitmap" ]
  }, {
    "name" : "public Config getConfig()",
    "returnType" : "Config",
    "comment" : "\n     * Returns the Android bitmap config. Note that this not the config of the underlying\n     * Java2D bitmap.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAlpha()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the hasAlpha rendering hint\n     * @return true if the bitmap alpha should be used at render time\n     ",
    "links" : [ ]
  }, {
    "name" : "public void change()",
    "returnType" : "void",
    "comment" : "\n     * Update the generationId.\n     *\n     * @see Bitmap#getGenerationId()\n     ",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCreate(int[] colors, int offset, int stride, int width, int height, int nativeConfig, boolean isMutable, long nativeColorSpace)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCopy(long srcBitmap, int nativeConfig, boolean isMutable)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCopyAshmem(long nativeSrcBitmap)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCopyAshmemConfig(long nativeSrcBitmap, int nativeConfig)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nativeGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeRecycle(long nativeBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeReconfigure(long nativeBitmap, int width, int height, int config, boolean isPremultiplied)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeCompress(long nativeBitmap, int format, int quality, OutputStream stream, byte[] tempStorage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeErase(long nativeBitmap, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeErase(long nativeBitmap, long colorSpacePtr, long color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nativeRowBytes(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nativeConfig(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeHasAlpha(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeHasMipMap(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nativeGetPixel(long nativeBitmap, int x, int y)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static long nativeGetColor(long nativeBitmap, int x, int y)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeGetPixels(long nativeBitmap, int[] pixels, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetPixel(long nativeBitmap, int x, int y, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetPixels(long nativeBitmap, int[] colors, int offset, int stride, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeCopyPixelsToBuffer(long nativeBitmap, Buffer dst)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeCopyPixelsFromBuffer(long nb, Buffer src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nativeGenerationId(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCreateFromParcel(Parcel p)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeWriteToParcel(long nativeBitmap, int density, Parcel p)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeExtractAlpha(long nativeBitmap, long nativePaint, int[] offsetXY)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeIsPremultiplied(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetPremultiplied(long nativeBitmap, boolean isPremul)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetHasAlpha(long nativeBitmap, boolean hasAlpha, boolean isPremul)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetHasMipMap(long nativeBitmap, boolean hasMipMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeSameAs(long nb0, long nb1)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int nativeGetAllocationByteCount(long nativeBitmap)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativePrepareToDraw(long nativeBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeCopyPreserveInternalConfig(long nativeBitmap)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bitmap nativeWrapHardwareBufferBitmap(HardwareBuffer buffer, long nativeColorSpace)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static GraphicBuffer nativeCreateGraphicBufferHandle(long nativeBitmap)",
    "returnType" : "GraphicBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeIsSRGB(long nativeBitmap)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ColorSpace nativeComputeColorSpace(long nativePtr)",
    "returnType" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetColorSpace(long nativePtr, long nativeColorSpace)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeIsSRGBLinear(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void nativeSetImmutable(long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean nativeIsImmutable(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static HardwareBuffer nativeGetHardwareBuffer(long nativeBitmap)",
    "returnType" : "HardwareBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Bitmap createBitmap(Bitmap_Delegate delegate, Set<BitmapCreateFlags> createFlags, int density)",
    "returnType" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Set<BitmapCreateFlags> getPremultipliedBitmapCreateFlags(boolean isMutable)",
    "returnType" : "Set<BitmapCreateFlags>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static BufferedImage createCopy(BufferedImage image, int imageType, int alpha)",
    "returnType" : "BufferedImage",
    "comment" : "package",
    "links" : [ ]
  } ],
  "variableNames" : [ "sManager", "sFinalizer", "mConfig", "mImage", "mHasAlpha", "mHasMipMap", "mIsPremultiplied", "mGenerationId", "mIsMutable" ],
  "methodNames" : [ "public static Bitmap_Delegate getDelegate(long native_bitmap)", "public static Bitmap createBitmap(@Nullable InputStream input, boolean isMutable, Density density) throws IOException", " static Bitmap createBitmap(@Nullable InputStream input, Set<BitmapCreateFlags> createFlags, Density density) throws IOException", "public static Bitmap createBitmap(BufferedImage image, boolean isMutable, Density density)", "public static Bitmap createBitmap(BufferedImage image, Set<BitmapCreateFlags> createFlags, Density density)", "private static int getBufferedImageType()", "public BufferedImage getImage()", "public Config getConfig()", "public boolean hasAlpha()", "public void change()", " static Bitmap nativeCreate(int[] colors, int offset, int stride, int width, int height, int nativeConfig, boolean isMutable, long nativeColorSpace)", " static Bitmap nativeCopy(long srcBitmap, int nativeConfig, boolean isMutable)", " static Bitmap nativeCopyAshmem(long nativeSrcBitmap)", " static Bitmap nativeCopyAshmemConfig(long nativeSrcBitmap, int nativeConfig)", " static long nativeGetNativeFinalizer()", " static void nativeRecycle(long nativeBitmap)", " static void nativeReconfigure(long nativeBitmap, int width, int height, int config, boolean isPremultiplied)", " static boolean nativeCompress(long nativeBitmap, int format, int quality, OutputStream stream, byte[] tempStorage)", " static void nativeErase(long nativeBitmap, int color)", " static void nativeErase(long nativeBitmap, long colorSpacePtr, long color)", " static int nativeRowBytes(long nativeBitmap)", " static int nativeConfig(long nativeBitmap)", " static boolean nativeHasAlpha(long nativeBitmap)", " static boolean nativeHasMipMap(long nativeBitmap)", " static int nativeGetPixel(long nativeBitmap, int x, int y)", " static long nativeGetColor(long nativeBitmap, int x, int y)", " static void nativeGetPixels(long nativeBitmap, int[] pixels, int offset, int stride, int x, int y, int width, int height)", " static void nativeSetPixel(long nativeBitmap, int x, int y, int color)", " static void nativeSetPixels(long nativeBitmap, int[] colors, int offset, int stride, int x, int y, int width, int height)", " static void nativeCopyPixelsToBuffer(long nativeBitmap, Buffer dst)", " static void nativeCopyPixelsFromBuffer(long nb, Buffer src)", " static int nativeGenerationId(long nativeBitmap)", " static Bitmap nativeCreateFromParcel(Parcel p)", " static boolean nativeWriteToParcel(long nativeBitmap, int density, Parcel p)", " static Bitmap nativeExtractAlpha(long nativeBitmap, long nativePaint, int[] offsetXY)", " static boolean nativeIsPremultiplied(long nativeBitmap)", " static void nativeSetPremultiplied(long nativeBitmap, boolean isPremul)", " static void nativeSetHasAlpha(long nativeBitmap, boolean hasAlpha, boolean isPremul)", " static void nativeSetHasMipMap(long nativeBitmap, boolean hasMipMap)", " static boolean nativeSameAs(long nb0, long nb1)", " static int nativeGetAllocationByteCount(long nativeBitmap)", " static void nativePrepareToDraw(long nativeBitmap)", " static Bitmap nativeCopyPreserveInternalConfig(long nativeBitmap)", " static Bitmap nativeWrapHardwareBufferBitmap(HardwareBuffer buffer, long nativeColorSpace)", " static GraphicBuffer nativeCreateGraphicBufferHandle(long nativeBitmap)", " static boolean nativeIsSRGB(long nativeBitmap)", " static ColorSpace nativeComputeColorSpace(long nativePtr)", " static void nativeSetColorSpace(long nativePtr, long nativeColorSpace)", " static boolean nativeIsSRGBLinear(long nativePtr)", " static void nativeSetImmutable(long nativePtr)", " static boolean nativeIsImmutable(long nativePtr)", " static HardwareBuffer nativeGetHardwareBuffer(long nativeBitmap)", "private static Bitmap createBitmap(Bitmap_Delegate delegate, Set<BitmapCreateFlags> createFlags, int density)", "private static Set<BitmapCreateFlags> getPremultipliedBitmapCreateFlags(boolean isMutable)", " static BufferedImage createCopy(BufferedImage image, int imageType, int alpha)" ]
}