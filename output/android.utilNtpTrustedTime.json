{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/NtpTrustedTime.java",
  "packageName" : "android.util",
  "className" : "NtpTrustedTime",
  "comment" : "\n * A singleton that connects with a remote NTP server as its trusted time source. This class\n * is thread-safe. The {@link #forceRefresh()} method is synchronous, i.e. it may occupy the\n * current thread while performing an NTP request. All other threads calling {@link #forceRefresh()}\n * will block during that request.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOGD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSingleton",
    "type" : "NtpTrustedTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectivityManagerSupplier",
    "type" : "Supplier<ConnectivityManager>",
    "comment" : "\n     * A supplier that returns the ConnectivityManager. The Supplier can return null if\n     * ConnectivityService isn't running yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTimeResult",
    "type" : "TimeResult",
    "comment" : " forceRefresh().",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized NtpTrustedTime getInstance(Context context)",
    "returnType" : "NtpTrustedTime",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean forceRefresh()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCache()",
    "returnType" : "boolean",
    "comment" : "\n     * Only kept for UnsupportedAppUsage.\n     *\n     * @deprecated Use {@link #getCachedTimeResult()} to obtain a {@link TimeResult} atomically.\n     ",
    "links" : [ "#getCachedTimeResult", "TimeResult" ]
  }, {
    "name" : "public long getCacheAge()",
    "returnType" : "long",
    "comment" : "\n     * Only kept for UnsupportedAppUsage.\n     *\n     * @deprecated Use {@link #getCachedTimeResult()} to obtain a {@link TimeResult} atomically.\n     ",
    "links" : [ "#getCachedTimeResult", "TimeResult" ]
  }, {
    "name" : "public long currentTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Only kept for UnsupportedAppUsage.\n     *\n     * @deprecated Use {@link #getCachedTimeResult()} to obtain a {@link TimeResult} atomically.\n     ",
    "links" : [ "#getCachedTimeResult", "TimeResult" ]
  }, {
    "name" : "public long getCachedNtpTime()",
    "returnType" : "long",
    "comment" : "\n     * Only kept for UnsupportedAppUsage.\n     *\n     * @deprecated Use {@link #getCachedTimeResult()} to obtain a {@link TimeResult} atomically.\n     ",
    "links" : [ "#getCachedTimeResult", "TimeResult" ]
  }, {
    "name" : "public long getCachedNtpTimeReference()",
    "returnType" : "long",
    "comment" : "\n     * Only kept for UnsupportedAppUsage.\n     *\n     * @deprecated Use {@link #getCachedTimeResult()} to obtain a {@link TimeResult} atomically.\n     ",
    "links" : [ "#getCachedTimeResult", "TimeResult" ]
  }, {
    "name" : "public TimeResult getCachedTimeResult()",
    "returnType" : "TimeResult",
    "comment" : "\n     * Returns an object containing the latest NTP information available. Can return {@code null} if\n     * no information is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "private NtpConnectionInfo getNtpConnectionInfo()",
    "returnType" : "NtpConnectionInfo",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "LOGD", "sSingleton", "mContext", "mConnectivityManagerSupplier", "mTimeResult" ],
  "methodNames" : [ "public static synchronized NtpTrustedTime getInstance(Context context)", "public boolean forceRefresh()", "public boolean hasCache()", "public long getCacheAge()", "public long currentTimeMillis()", "public long getCachedNtpTime()", "public long getCachedNtpTimeReference()", "public TimeResult getCachedTimeResult()", "private NtpConnectionInfo getNtpConnectionInfo()" ]
}