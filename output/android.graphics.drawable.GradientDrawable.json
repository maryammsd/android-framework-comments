{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/GradientDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "GradientDrawable",
  "comment" : "\n * A Drawable with a color gradient for buttons, backgrounds, etc.\n *\n * <p>It can be defined in an XML file with the <code>&lt;shape></code> element. For more\n * information, see the guide to <a\n * href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.</p>\n *\n * @attr ref android.R.styleable#GradientDrawable_visible\n * @attr ref android.R.styleable#GradientDrawable_shape\n * @attr ref android.R.styleable#GradientDrawable_innerRadiusRatio\n * @attr ref android.R.styleable#GradientDrawable_innerRadius\n * @attr ref android.R.styleable#GradientDrawable_thicknessRatio\n * @attr ref android.R.styleable#GradientDrawable_thickness\n * @attr ref android.R.styleable#GradientDrawable_useLevel\n * @attr ref android.R.styleable#GradientDrawableSize_width\n * @attr ref android.R.styleable#GradientDrawableSize_height\n * @attr ref android.R.styleable#GradientDrawableGradient_startColor\n * @attr ref android.R.styleable#GradientDrawableGradient_centerColor\n * @attr ref android.R.styleable#GradientDrawableGradient_endColor\n * @attr ref android.R.styleable#GradientDrawableGradient_useLevel\n * @attr ref android.R.styleable#GradientDrawableGradient_angle\n * @attr ref android.R.styleable#GradientDrawableGradient_type\n * @attr ref android.R.styleable#GradientDrawableGradient_centerX\n * @attr ref android.R.styleable#GradientDrawableGradient_centerY\n * @attr ref android.R.styleable#GradientDrawableGradient_gradientRadius\n * @attr ref android.R.styleable#GradientDrawableSolid_color\n * @attr ref android.R.styleable#GradientDrawableStroke_width\n * @attr ref android.R.styleable#GradientDrawableStroke_color\n * @attr ref android.R.styleable#GradientDrawableStroke_dashWidth\n * @attr ref android.R.styleable#GradientDrawableStroke_dashGap\n * @attr ref android.R.styleable#GradientDrawablePadding_left\n * @attr ref android.R.styleable#GradientDrawablePadding_top\n * @attr ref android.R.styleable#GradientDrawablePadding_right\n * @attr ref android.R.styleable#GradientDrawablePadding_bottom\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sWrapNegativeAngleMeasurements",
    "type" : "boolean",
    "comment" : "\n     * Flag to determine if we should wrap negative gradient angle measurements\n     * for API levels that support it\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RECTANGLE",
    "type" : "int",
    "comment" : "\n     * Shape is a rectangle, possibly with rounded corners\n     ",
    "links" : [ ]
  }, {
    "name" : "OVAL",
    "type" : "int",
    "comment" : "\n     * Shape is an ellipse\n     ",
    "links" : [ ]
  }, {
    "name" : "LINE",
    "type" : "int",
    "comment" : "\n     * Shape is a line\n     ",
    "links" : [ ]
  }, {
    "name" : "RING",
    "type" : "int",
    "comment" : "\n     * Shape is a ring.\n     ",
    "links" : [ ]
  }, {
    "name" : "LINEAR_GRADIENT",
    "type" : "int",
    "comment" : "\n     * Gradient is linear (default.)\n     ",
    "links" : [ ]
  }, {
    "name" : "RADIAL_GRADIENT",
    "type" : "int",
    "comment" : "\n     * Gradient is circular.\n     ",
    "links" : [ ]
  }, {
    "name" : "SWEEP_GRADIENT",
    "type" : "int",
    "comment" : "\n     * Gradient is a sweep.\n     ",
    "links" : [ ]
  }, {
    "name" : "RADIUS_TYPE_PIXELS",
    "type" : "int",
    "comment" : " Radius is in pixels. ",
    "links" : [ ]
  }, {
    "name" : "RADIUS_TYPE_FRACTION",
    "type" : "int",
    "comment" : " Radius is a fraction of the base size. ",
    "links" : [ ]
  }, {
    "name" : "RADIUS_TYPE_FRACTION_PARENT",
    "type" : "int",
    "comment" : " Radius is a fraction of the bounds size. ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ORIENTATION",
    "type" : "Orientation",
    "comment" : " Default orientation for GradientDrawable *",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_INNER_RADIUS_RATIO",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_THICKNESS_RATIO",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGradientState",
    "type" : "GradientState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFillPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPadding",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrokePaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorFilter",
    "type" : "ColorFilter",
    "comment" : " optional, set by the caller",
    "links" : [ ]
  }, {
    "name" : "mBlendModeColorFilter",
    "type" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "int",
    "comment" : " modified by the caller",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRect",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayerPaint",
    "type" : "Paint",
    "comment" : " internal, used if we use saveLayer()",
    "links" : [ ]
  }, {
    "name" : "mGradientIsDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRingPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPathIsDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGradientRadius",
    "type" : "float",
    "comment" : " Current gradient radius, valid when {@link #mGradientIsDirty} is false. ",
    "links" : [ "#mGradientIsDirty" ]
  } ],
  "methods" : [ {
    "name" : "public boolean getPadding(Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCornerRadii(@Nullable float[] radii)",
    "returnType" : "void",
    "comment" : "\n     * Specifies radii for each of the 4 corners. For each corner, the array\n     * contains 2 values, <code>[X_radius, Y_radius]</code>. The corners are\n     * ordered top-left, top-right, bottom-right, bottom-left. This property\n     * is honored only when the shape is of type {@link #RECTANGLE}.\n     * <p>\n     * <strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param radii an array of length >= 8 containing 4 pairs of X and Y\n     *              radius for each corner, specified in pixels\n     *\n     * @see #mutate()\n     * @see #setShape(int)\n     * @see #setCornerRadius(float)\n     ",
    "links" : [ "#RECTANGLE", "#mutate()" ]
  }, {
    "name" : "public float[] getCornerRadii()",
    "returnType" : "float[]",
    "comment" : "\n     * Returns the radii for each of the 4 corners. For each corner, the array\n     * contains 2 values, <code>[X_radius, Y_radius]</code>. The corners are\n     * ordered top-left, top-right, bottom-right, bottom-left.\n     * <p>\n     * If the radius was previously set with {@link #setCornerRadius(float)},\n     * or if the corners are not rounded, this method will return {@code null}.\n     *\n     * @return an array containing the radii for each of the 4 corners, or\n     *         {@code null}\n     * @see #setCornerRadii(float[])\n     ",
    "links" : [ "#setCornerRadius(float)" ]
  }, {
    "name" : "public void setCornerRadius(float radius)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the radius for the corners of the gradient. If this is > 0,\n     * then the drawable is drawn in a round-rectangle, rather than a\n     * rectangle. This property is honored only when the shape is of type\n     * {@link #RECTANGLE}.\n     * <p>\n     * <strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param radius The radius in pixels of the corners of the rectangle shape\n     *\n     * @see #mutate()\n     * @see #setCornerRadii(float[])\n     * @see #setShape(int)\n     ",
    "links" : [ "#RECTANGLE", "#mutate()" ]
  }, {
    "name" : "public float getCornerRadius()",
    "returnType" : "float",
    "comment" : "\n     * Returns the radius for the corners of the gradient, that was previously set with\n     * {@link #setCornerRadius(float)}.\n     * <p>\n     * If the radius was previously cleared via passing {@code null}\n     * to {@link #setCornerRadii(float[])}, this method will return 0.\n     *\n     * @return the radius in pixels of the corners of the rectangle shape, or 0\n     * @see #setCornerRadius\n     ",
    "links" : [ "#setCornerRadii(float", "#setCornerRadius(float)" ]
  }, {
    "name" : "public void setStroke(int width, @ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the stroke width and color for the drawable. If width is zero,\n     * then no stroke is drawn.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param width The width in pixels of the stroke\n     * @param color The color of the stroke\n     *\n     * @see #mutate()\n     * @see #setStroke(int, int, float, float)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setStroke(int width, ColorStateList colorStateList)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the stroke width and color state list for the drawable. If width\n     * is zero, then no stroke is drawn.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param width The width in pixels of the stroke\n     * @param colorStateList The color state list of the stroke\n     *\n     * @see #mutate()\n     * @see #setStroke(int, ColorStateList, float, float)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setStroke(int width, @ColorInt int color, float dashWidth, float dashGap)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the stroke width and color for the drawable. If width is zero,\n     * then no stroke is drawn. This method can also be used to dash the stroke.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param width The width in pixels of the stroke\n     * @param color The color of the stroke\n     * @param dashWidth The length in pixels of the dashes, set to 0 to disable dashes\n     * @param dashGap The gap in pixels between dashes\n     *\n     * @see #mutate()\n     * @see #setStroke(int, int)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setStroke(int width, ColorStateList colorStateList, float dashWidth, float dashGap)",
    "returnType" : "void",
    "comment" : "\n     * <p>Set the stroke width and color state list for the drawable. If width\n     * is zero, then no stroke is drawn. This method can also be used to dash\n     * the stroke.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param width The width in pixels of the stroke\n     * @param colorStateList The color state list of the stroke\n     * @param dashWidth The length in pixels of the dashes, set to 0 to disable dashes\n     * @param dashGap The gap in pixels between dashes\n     *\n     * @see #mutate()\n     * @see #setStroke(int, ColorStateList)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "private void setStrokeInternal(int width, int color, float dashWidth, float dashGap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the size of the shape drawn by this drawable.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param width The width of the shape used by this drawable\n     * @param height The height of the shape used by this drawable\n     *\n     * @see #mutate()\n     * @see #setGradientType(int)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setShape(@Shape int shape)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the type of shape used to draw the gradient.</p>\n     * <p><strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.</p>\n     *\n     * @param shape The desired shape for this drawable: {@link #LINE},\n     *              {@link #OVAL}, {@link #RECTANGLE} or {@link #RING}\n     *\n     * @see #mutate()\n     ",
    "links" : [ "#RING", "#RECTANGLE", "#LINE", "#OVAL", "#mutate()" ]
  }, {
    "name" : "public int getShape()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of shape used by this drawable, one of {@link #LINE},\n     * {@link #OVAL}, {@link #RECTANGLE} or {@link #RING}.\n     *\n     * @return the type of shape used by this drawable\n     * @see #setShape(int)\n     ",
    "links" : [ "#RING", "#RECTANGLE", "#LINE", "#OVAL" ]
  }, {
    "name" : "public void setGradientType(@GradientType int gradient)",
    "returnType" : "void",
    "comment" : "\n     * Sets the type of gradient used by this drawable.\n     * <p>\n     * <strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param gradient The type of the gradient: {@link #LINEAR_GRADIENT},\n     *                 {@link #RADIAL_GRADIENT} or {@link #SWEEP_GRADIENT}\n     *\n     * @see #mutate()\n     * @see #getGradientType()\n     ",
    "links" : [ "#mutate()", "#LINEAR_GRADIENT", "#RADIAL_GRADIENT", "#SWEEP_GRADIENT" ]
  }, {
    "name" : "public int getGradientType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of gradient used by this drawable, one of\n     * {@link #LINEAR_GRADIENT}, {@link #RADIAL_GRADIENT}, or\n     * {@link #SWEEP_GRADIENT}.\n     *\n     * @return the type of gradient used by this drawable\n     * @see #setGradientType(int)\n     ",
    "links" : [ "#LINEAR_GRADIENT", "#RADIAL_GRADIENT", "#SWEEP_GRADIENT" ]
  }, {
    "name" : "public void setGradientCenter(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Sets the position of the center of the gradient as a fraction of the\n     * width and height.\n     * <p>\n     * The default value is (0.5, 0.5).\n     * <p>\n     * <strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param x the X-position of the center of the gradient\n     * @param y the Y-position of the center of the gradient\n     *\n     * @see #mutate()\n     * @see #setGradientType(int)\n     * @see #getGradientCenterX()\n     * @see #getGradientCenterY()\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public float getGradientCenterX()",
    "returnType" : "float",
    "comment" : "\n     * Returns the X-position of the center of the gradient as a fraction of\n     * the width.\n     *\n     * @return the X-position of the center of the gradient\n     * @see #setGradientCenter(float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getGradientCenterY()",
    "returnType" : "float",
    "comment" : "\n     * Returns the Y-position of the center of this gradient as a fraction of\n     * the height.\n     *\n     * @return the Y-position of the center of the gradient\n     * @see #setGradientCenter(float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGradientRadius(float gradientRadius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the radius of the gradient. The radius is honored only when the\n     * gradient type is set to {@link #RADIAL_GRADIENT}.\n     * <p>\n     * <strong>Note</strong>: changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param gradientRadius the radius of the gradient in pixels\n     *\n     * @see #mutate()\n     * @see #setGradientType(int)\n     * @see #getGradientRadius()\n     ",
    "links" : [ "#mutate()", "#RADIAL_GRADIENT" ]
  }, {
    "name" : "public float getGradientRadius()",
    "returnType" : "float",
    "comment" : "\n     * Returns the radius of the gradient in pixels. The radius is valid only\n     * when the gradient type is set to {@link #RADIAL_GRADIENT}.\n     *\n     * @return the radius of the gradient in pixels\n     * @see #setGradientRadius(float)\n     ",
    "links" : [ "#RADIAL_GRADIENT" ]
  }, {
    "name" : "public void setUseLevel(boolean useLevel)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this drawable's {@code level} property will be used to\n     * scale the gradient. If a gradient is not used, this property has no\n     * effect.\n     * <p>\n     * Scaling behavior varies based on gradient type:\n     * <ul>\n     *     <li>{@link #LINEAR_GRADIENT} adjusts the ending position along the\n     *         gradient's axis of orientation (see {@link #getOrientation()})\n     *     <li>{@link #RADIAL_GRADIENT} adjusts the outer radius\n     *     <li>{@link #SWEEP_GRADIENT} adjusts the ending angle\n     * <ul>\n     * <p>\n     * The default value for this property is {@code false}.\n     * <p>\n     * <strong>Note</strong>: This property corresponds to the\n     * {@code android:useLevel} attribute on the inner {@code <gradient>}\n     * tag, NOT the {@code android:useLevel} attribute on the outer\n     * {@code <shape>} tag. For example,\n     * <pre>{@code\n     * <shape ...>\n     *     <gradient\n     *         ...\n     *         android:useLevel=\"true\" />\n     * </shape>\n     * }</pre><p>\n     * <strong>Note</strong>: Changing this property will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing this property.\n     *\n     * @param useLevel {@code true} if the gradient should be scaled based on\n     *                 level, {@code false} otherwise\n     *\n     * @see #mutate()\n     * @see #setLevel(int)\n     * @see #getLevel()\n     * @see #getUseLevel()\n     * @attr ref android.R.styleable#GradientDrawableGradient_useLevel\n     ",
    "links" : [ "#mutate()", "#getOrientation()", "#LINEAR_GRADIENT", "#RADIAL_GRADIENT", "#SWEEP_GRADIENT" ]
  }, {
    "name" : "public boolean getUseLevel()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this drawable's {@code level} property will be used to\n     * scale the gradient.\n     *\n     * @return {@code true} if the gradient should be scaled based on level,\n     *         {@code false} otherwise\n     * @see #setUseLevel(boolean)\n     * @attr ref android.R.styleable#GradientDrawableGradient_useLevel\n     ",
    "links" : [ ]
  }, {
    "name" : "private int modulateAlpha(int alpha)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Orientation getOrientation()",
    "returnType" : "Orientation",
    "comment" : "\n     * Returns the orientation of the gradient defined in this drawable.\n     *\n     * @return the orientation of the gradient defined in this drawable\n     * @see #setOrientation(Orientation)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOrientation(Orientation orientation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the orientation of the gradient defined in this drawable.\n     * <p>\n     * <strong>Note</strong>: changing orientation will affect all instances\n     * of a drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing the orientation.\n     *\n     * @param orientation the desired orientation (angle) of the gradient\n     *\n     * @see #mutate()\n     * @see #getOrientation()\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setColors(@Nullable @ColorInt int[] colors)",
    "returnType" : "void",
    "comment" : "\n     * Sets the colors used to draw the gradient.\n     * <p>\n     * Each color is specified as an ARGB integer and the array must contain at\n     * least 2 colors.\n     * <p>\n     * <strong>Note</strong>: changing colors will affect all instances of a\n     * drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing the colors.\n     *\n     * @param colors an array containing 2 or more ARGB colors\n     * @see #mutate()\n     * @see #setColor(int)\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setColors(@Nullable @ColorInt int[] colors, @Nullable float[] offsets)",
    "returnType" : "void",
    "comment" : "\n     * Sets the colors and offsets used to draw the gradient.\n     * <p>\n     * Each color is specified as an ARGB integer and the array must contain at\n     * least 2 colors.\n     * <p>\n     * <strong>Note</strong>: changing colors will affect all instances of a\n     * drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing the colors.\n     *\n     * @param colors an array containing 2 or more ARGB colors\n     * @param offsets optional array of floating point parameters representing the positions\n     *                of the colors. Null evenly disperses the colors\n     * @see #mutate()\n     * @see #setColors(int[])\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public int[] getColors()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the colors used to draw the gradient, or {@code null} if the\n     * gradient is drawn using a single color or no colors.\n     *\n     * @return the colors used to draw the gradient, or {@code null}\n     * @see #setColors(int[] colors)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(@Nullable Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @param mode to draw this drawable with\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAntiAlias(boolean aa)",
    "returnType" : "void",
    "comment" : "\n     * @param aa to draw this drawable with\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void buildPathIfDirty()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInnerRadiusRatio(@FloatRange(from = 0.0f, fromInclusive = false) float innerRadiusRatio)",
    "returnType" : "void",
    "comment" : "\n     * Inner radius of the ring expressed as a ratio of the ring's width.\n     *\n     * @see #getInnerRadiusRatio()\n     * @attr ref android.R.styleable#GradientDrawable_innerRadiusRatio\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getInnerRadiusRatio()",
    "returnType" : "float",
    "comment" : "\n     * Return the inner radius of the ring expressed as a ratio of the ring's width.\n     *\n     * @see #setInnerRadiusRatio(float)\n     * @attr ref android.R.styleable#GradientDrawable_innerRadiusRatio\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInnerRadius(@Px int innerRadius)",
    "returnType" : "void",
    "comment" : "\n     * Configure the inner radius of the ring.\n     *\n     * @see #getInnerRadius()\n     * @attr ref android.R.styleable#GradientDrawable_innerRadius\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInnerRadius()",
    "returnType" : "int",
    "comment" : "\n     * Return the inner radius of the ring\n     *\n     * @see #setInnerRadius(int)\n     * @attr ref android.R.styleable#GradientDrawable_innerRadius\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThicknessRatio(@FloatRange(from = 0.0f, fromInclusive = false) float thicknessRatio)",
    "returnType" : "void",
    "comment" : "\n     * Configure the thickness of the ring expressed as a ratio of the ring's width.\n     *\n     * @see #getThicknessRatio()\n     * @attr ref android.R.styleable#GradientDrawable_thicknessRatio\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getThicknessRatio()",
    "returnType" : "float",
    "comment" : "\n     * Return the thickness ratio of the ring expressed as a ratio of the ring's width.\n     *\n     * @see #setThicknessRatio(float)\n     * @attr ref android.R.styleable#GradientDrawable_thicknessRatio\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThickness(@Px int thickness)",
    "returnType" : "void",
    "comment" : "\n     * Configure the thickness of the ring.\n     *\n     * @attr ref android.R.styleable#GradientDrawable_thickness\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getThickness()",
    "returnType" : "int",
    "comment" : "\n     * Return the thickness of the ring\n     *\n     * @see #setThickness(int)\n     * @attr ref android.R.styleable#GradientDrawable_thickness\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPadding(@Px int left, @Px int top, @Px int right, @Px int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Configure the padding of the gradient shape\n     * @param left Left padding of the gradient shape\n     * @param top Top padding of the gradient shape\n     * @param right Right padding of the gradient shape\n     * @param bottom Bottom padding of the gradient shape\n     *\n     * @attr ref android.R.styleable#GradientDrawablePadding_left\n     * @attr ref android.R.styleable#GradientDrawablePadding_top\n     * @attr ref android.R.styleable#GradientDrawablePadding_right\n     * @attr ref android.R.styleable#GradientDrawablePadding_bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "private Path buildRing(GradientState st)",
    "returnType" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColor(@ColorInt int argb)",
    "returnType" : "void",
    "comment" : "\n     * Changes this drawable to use a single color instead of a gradient.\n     * <p>\n     * <strong>Note</strong>: changing color will affect all instances of a\n     * drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing the color.\n     *\n     * @param argb The color used to fill the shape\n     *\n     * @see #mutate()\n     * @see #setColors(int[])\n     * @see #getColor\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void setColor(@Nullable ColorStateList colorStateList)",
    "returnType" : "void",
    "comment" : "\n     * Changes this drawable to use a single color state list instead of a\n     * gradient. Calling this method with a null argument will clear the color\n     * and is equivalent to calling {@link #setColor(int)} with the argument\n     * {@link Color#TRANSPARENT}.\n     * <p>\n     * <strong>Note</strong>: changing color will affect all instances of a\n     * drawable loaded from a resource. It is recommended to invoke\n     * {@link #mutate()} before changing the color.</p>\n     *\n     * @param colorStateList The color state list used to fill the shape\n     *\n     * @see #mutate()\n     * @see #getColor\n     ",
    "links" : [ "android.graphics.Color#TRANSPARENT", "#setColor(int)", "#mutate()" ]
  }, {
    "name" : "public ColorStateList getColor()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * Returns the color state list used to fill the shape, or {@code null} if\n     * the shape is filled with a gradient or has no fill color.\n     *\n     * @return the color state list used to fill this gradient, or {@code null}\n     *\n     * @see #setColor(int)\n     * @see #setColor(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean ensureValidRect()",
    "returnType" : "boolean",
    "comment" : "\n     * This checks mGradientIsDirty, and if it is true, recomputes both our drawing\n     * rectangle (mRect) and the gradient itself, since it depends on our\n     * rectangle too.\n     * @return true if the resulting rectangle is not empty, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Updates the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyThemeChildElements(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGradientDrawablePadding(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDrawableCorners(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGradientDrawableStroke(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGradientDrawableSolid(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGradientDrawableGradient(Resources r, TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateGradientDrawableSize(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getFloatOrFraction(TypedArray a, int index, float defaultValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOpaqueForState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isOpaque(int color)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState(Resources res)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean getPadding(Rect padding)", "public void setCornerRadii(@Nullable float[] radii)", "public float[] getCornerRadii()", "public void setCornerRadius(float radius)", "public float getCornerRadius()", "public void setStroke(int width, @ColorInt int color)", "public void setStroke(int width, ColorStateList colorStateList)", "public void setStroke(int width, @ColorInt int color, float dashWidth, float dashGap)", "public void setStroke(int width, ColorStateList colorStateList, float dashWidth, float dashGap)", "private void setStrokeInternal(int width, int color, float dashWidth, float dashGap)", "public void setSize(int width, int height)", "public void setShape(@Shape int shape)", "public int getShape()", "public void setGradientType(@GradientType int gradient)", "public int getGradientType()", "public void setGradientCenter(float x, float y)", "public float getGradientCenterX()", "public float getGradientCenterY()", "public void setGradientRadius(float gradientRadius)", "public float getGradientRadius()", "public void setUseLevel(boolean useLevel)", "public boolean getUseLevel()", "private int modulateAlpha(int alpha)", "public Orientation getOrientation()", "public void setOrientation(Orientation orientation)", "public void setColors(@Nullable @ColorInt int[] colors)", "public void setColors(@Nullable @ColorInt int[] colors, @Nullable float[] offsets)", "public int[] getColors()", "public void draw(Canvas canvas)", "public void setXfermode(@Nullable Xfermode mode)", "public void setAntiAlias(boolean aa)", "private void buildPathIfDirty()", "public void setInnerRadiusRatio(@FloatRange(from = 0.0f, fromInclusive = false) float innerRadiusRatio)", "public float getInnerRadiusRatio()", "public void setInnerRadius(@Px int innerRadius)", "public int getInnerRadius()", "public void setThicknessRatio(@FloatRange(from = 0.0f, fromInclusive = false) float thicknessRatio)", "public float getThicknessRatio()", "public void setThickness(@Px int thickness)", "public int getThickness()", "public void setPadding(@Px int left, @Px int top, @Px int right, @Px int bottom)", "private Path buildRing(GradientState st)", "public void setColor(@ColorInt int argb)", "public void setColor(@Nullable ColorStateList colorStateList)", "public ColorStateList getColor()", "protected boolean onStateChange(int[] stateSet)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public int getChangingConfigurations()", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setDither(boolean dither)", "public ColorFilter getColorFilter()", "public void setColorFilter(@Nullable ColorFilter colorFilter)", "public void setTintList(@Nullable ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public int getOpacity()", "protected void onBoundsChange(Rect r)", "protected boolean onLevelChange(int level)", "private boolean ensureValidRect()", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void updateStateFromTypedArray(TypedArray a)", "public boolean canApplyTheme()", "private void applyThemeChildElements(Theme t)", "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateGradientDrawablePadding(TypedArray a)", "private void updateDrawableCorners(TypedArray a)", "private void updateGradientDrawableStroke(TypedArray a)", "private void updateGradientDrawableSolid(TypedArray a)", "private void updateGradientDrawableGradient(Resources r, TypedArray a)", "private void updateGradientDrawableSize(TypedArray a)", "private static float getFloatOrFraction(TypedArray a, int index, float defaultValue)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public Insets getOpticalInsets()", "public ConstantState getConstantState()", "private boolean isOpaqueForState()", "public void getOutline(Outline outline)", "public Drawable mutate()", "public void clearMutated()", " static boolean isOpaque(int color)", "private void updateLocalState(Resources res)" ],
  "variableNames" : [ "sWrapNegativeAngleMeasurements", "RECTANGLE", "OVAL", "LINE", "RING", "LINEAR_GRADIENT", "RADIAL_GRADIENT", "SWEEP_GRADIENT", "RADIUS_TYPE_PIXELS", "RADIUS_TYPE_FRACTION", "RADIUS_TYPE_FRACTION_PARENT", "DEFAULT_ORIENTATION", "DEFAULT_INNER_RADIUS_RATIO", "DEFAULT_THICKNESS_RATIO", "mGradientState", "mFillPaint", "mPadding", "mStrokePaint", "mColorFilter", "mBlendModeColorFilter", "mAlpha", "mPath", "mRect", "mLayerPaint", "mGradientIsDirty", "mMutated", "mRingPath", "mPathIsDirty", "mGradientRadius" ]
}