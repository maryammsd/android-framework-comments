{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/gba/GbaService.java",
  "packageName" : "android.telephony.gba",
  "className" : "GbaService",
  "comment" : "\n  * Base class for GBA Service. Any implementation which wants to provide\n  * GBA service must extend this class.\n  *\n  * <p>Note that the application to implement the service must declare to use\n  * the permission {@link android.Manifest.permission#BIND_GBA_SERVICE},\n  * and filter the intent of {@link #SERVICE_INTERFACE}.\n  * The manifest of the service must follow the format below:\n  *\n  * <p>...\n  * <service\n  *     android:name=\".EgGbaService\"\n  *     android:directBootAware=\"true\"\n  *     android:permission=\"android.permission.BIND_GBA_SERVICE\" >\n  *     ...\n  *     <intent-filter>\n  *         <action android:name=\"android.telephony.gba.GbaService\"/>\n  *     </intent-filter>\n  * </service>\n  * ...\n  *\n  * <p>The service should also be file-based encryption (FBE) aware.\n  * {@hide}\n  ",
  "links" : [ "#SERVICE_INTERFACE", "android.Manifest.permission#BIND_GBA_SERVICE" ],
  "variables" : [ {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n    * The intent must be defined as an intent-filter in the\n    * AndroidManifest of the GbaService.\n    ",
    "links" : [ ]
  }, {
    "name" : "EVENT_GBA_AUTH_REQUEST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "GbaServiceHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "SparseArray<IBootstrapAuthenticationCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IGbaServiceWrapper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onAuthenticationRequest(int subscriptionId, int token, @UiccAppTypeExt int appType, @NonNull Uri nafUrl, @NonNull byte[] securityProtocol, boolean forceBootStrapping)",
    "returnType" : "void",
    "comment" : "\n     * Called by the platform when a GBA authentication request is received from\n     * {@link TelephonyManager#bootstrapAuthenticationRequest} to get the KsNAF for\n     * a particular NAF.\n     *\n     * @param subscriptionId the ICC card to be used for the bootstrapping authentication.\n     * @param token the identification of the authentication request.\n     * @param appType icc application type, like {@link #APPTYPE_USIM} or {@link\n     * #APPTYPE_ISIM} or {@link#APPTYPE_UNKNOWN}\n     * @param nafUrl Network Application Function(NAF) fully qualified domain name and\n     * the selected GBA mode. It shall contain two parts delimited by \"@\" sign. The first\n     * part is the constant string \"3GPP-bootstrapping\" (GBA_ME),\n     * \"3GPP-bootstrapping-uicc\" (GBA_ U), or \"3GPP-bootstrapping-digest\" (GBA_Digest),\n     * and the latter part shall be the FQDN of the NAF (e.g.\n     * \"3GPP-bootstrapping@naf1.operator.com\" or \"3GPP-bootstrapping-uicc@naf1.operator.com\",\n     * or \"3GPP-bootstrapping-digest@naf1.operator.com\").\n     * @param securityProtocol Security protocol identifier between UE and NAF.  See\n     * 3GPP TS 33.220 Annex H. Application can use\n     * {@link UaSecurityProtocolIdentifier#createDefaultUaSpId},\n     * {@link UaSecurityProtocolIdentifier#create3GppUaSpId},\n     * to create the ua security protocol identifier as needed\n     * @param forceBootStrapping true=force bootstrapping, false=do not force\n     * bootstrapping. Bootstrapping shouldn't be forced unless the application sees\n     * authentication errors from the server.\n     * Response is returned via {@link TelephonyManager#BootstrapAuthenticationCallback}\n     * along with the token to identify the request.\n     *\n     * <p>Note that this is not called in the main thread.\n     ",
    "links" : [ "android.telephony.TelephonyManager#BootstrapAuthenticationCallback", "android.telephony.gba.UaSecurityProtocolIdentifier#create3GppUaSpId", "#APPTYPE_USIM", "android.telephony.TelephonyManager#bootstrapAuthenticationRequest", "#APPTYPE_ISIM", "android.telephony.gba.UaSecurityProtocolIdentifier#createDefaultUaSpId" ]
  }, {
    "name" : "public final void reportKeysAvailable(int token, @NonNull byte[] gbaKey, @NonNull String transactionId) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link GbaService} when the previously requested GBA keys are available\n     * (@see onAuthenticationRequest())\n     *\n     * @param token unique identifier of the request.\n     * @param gbaKey KsNaf Response.\n     * @param transactionId Bootstrapping Transaction ID.\n     * @throws RuntimeException when there is remote failure of callback.\n     ",
    "links" : [ "android.telephony.gba.GbaService" ]
  }, {
    "name" : "public final void reportAuthenticationFailure(int token, @AuthenticationFailureReason int reason) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n     * Invoked when the previously requested GBA key authentication failed\n     * (@see onAuthenticationRequest())\n     *\n     * @param token unique identifier of the request.\n     * @param reason The reason for the authentication failure.\n     * @throws RuntimeException when there is remote failure of callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onAuthenticationRequest(int subscriptionId, int token, @UiccAppTypeExt int appType, @NonNull Uri nafUrl, @NonNull byte[] securityProtocol, boolean forceBootStrapping)", "public final void reportKeysAvailable(int token, @NonNull byte[] gbaKey, @NonNull String transactionId) throws RuntimeException", "public final void reportAuthenticationFailure(int token, @AuthenticationFailureReason int reason) throws RuntimeException", "public IBinder onBind(Intent intent)", "public void onDestroy()" ],
  "variableNames" : [ "DBG", "TAG", "SERVICE_INTERFACE", "EVENT_GBA_AUTH_REQUEST", "mHandlerThread", "mHandler", "mCallbacks", "mBinder" ]
}