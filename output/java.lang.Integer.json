{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Integer.java",
  "packageName" : "java.lang",
  "className" : "Integer",
  "comment" : "\n * The {@code Integer} class wraps a value of the primitive type\n * {@code int} in an object. An object of type {@code Integer}\n * contains a single field whose type is {@code int}.\n *\n * <p>In addition, this class provides several methods for converting\n * an {@code int} to a {@code String} and a {@code String} to an\n * {@code int}, as well as other constants and methods useful when\n * dealing with an {@code int}.\n *\n * <!-- Android-removed: paragraph on ValueBased\n * <p>This is a <a href=\"{@docRoot}/java.base/java/lang/doc-files/ValueBased.html\">value-based</a>\n * class; programmers should treat instances that are\n * {@linkplain #equals(Object) equal} as interchangeable and should not\n * use instances for synchronization, or unpredictable behavior may\n * occur. For example, in a future release, synchronization may fail.\n * -->\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(int) highestOneBit} and\n * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since 1.0\n ",
  "links" : [ "#highestOneBit(int)", "#numberOfTrailingZeros(int)" ],
  "variables" : [ {
    "name" : "MIN_VALUE",
    "type" : "int",
    "comment" : "\n     * A constant holding the minimum value an {@code int} can\n     * have, -2<sup>31</sup>.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VALUE",
    "type" : "int",
    "comment" : "\n     * A constant holding the maximum value an {@code int} can\n     * have, 2<sup>31</sup>-1.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE",
    "type" : "Class<Integer>",
    "comment" : "\n     * The {@code Class} instance representing the primitive type\n     * {@code int}.\n     *\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "digits",
    "type" : "char[]",
    "comment" : "\n     * All possible chars for representing a number as a String\n     ",
    "links" : [ ]
  }, {
    "name" : "SMALL_NEG_VALUES",
    "type" : "String[]",
    "comment" : " BEGIN Android-changed: Cache the toString() result for small values.",
    "links" : [ ]
  }, {
    "name" : "SMALL_NONNEG_VALUES",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DigitTens",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DigitOnes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sizeTable",
    "type" : "int[]",
    "comment" : " Left here for compatibility reasons, see JDK-8143900.",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "int",
    "comment" : "\n     * The value of the {@code Integer}.\n     *\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "SIZE",
    "type" : "int",
    "comment" : "\n     * The number of bits used to represent an {@code int} value in two's\n     * complement binary form.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "BYTES",
    "type" : "int",
    "comment" : "\n     * The number of bytes used to represent an {@code int} value in two's\n     * complement binary form.\n     *\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.0.2 for interoperability ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String toString(int i, int radix)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the first argument in the\n     * radix specified by the second argument.\n     *\n     * <p>If the radix is smaller than {@code Character.MIN_RADIX}\n     * or larger than {@code Character.MAX_RADIX}, then the radix\n     * {@code 10} is used instead.\n     *\n     * <p>If the first argument is negative, the first element of the\n     * result is the ASCII minus character {@code '-'}\n     * ({@code '\\u005Cu002D'}). If the first argument is not\n     * negative, no sign character appears in the result.\n     *\n     * <p>The remaining characters of the result represent the magnitude\n     * of the first argument. If the magnitude is zero, it is\n     * represented by a single zero character {@code '0'}\n     * ({@code '\\u005Cu0030'}); otherwise, the first character of\n     * the representation of the magnitude will not be the zero\n     * character.  The following ASCII characters are used as digits:\n     *\n     * <blockquote>\n     *   {@code 0123456789abcdefghijklmnopqrstuvwxyz}\n     * </blockquote>\n     *\n     * These are {@code '\\u005Cu0030'} through\n     * {@code '\\u005Cu0039'} and {@code '\\u005Cu0061'} through\n     * {@code '\\u005Cu007A'}. If {@code radix} is\n     * <var>N</var>, then the first <var>N</var> of these characters\n     * are used as radix-<var>N</var> digits in the order shown. Thus,\n     * the digits for hexadecimal (radix 16) are\n     * {@code 0123456789abcdef}. If uppercase letters are\n     * desired, the {@link java.lang.String#toUpperCase()} method may\n     * be called on the result:\n     *\n     * <blockquote>\n     *  {@code Integer.toString(n, 16).toUpperCase()}\n     * </blockquote>\n     *\n     * @param   i       an integer to be converted to a string.\n     * @param   radix   the radix to use in the string representation.\n     * @return  a string representation of the argument in the specified radix.\n     * @see     java.lang.Character#MAX_RADIX\n     * @see     java.lang.Character#MIN_RADIX\n     ",
    "links" : [ "java.lang.String#toUpperCase()" ]
  }, {
    "name" : "public static String toUnsignedString(int i, int radix)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the first argument as an\n     * unsigned integer value in the radix specified by the second\n     * argument.\n     *\n     * <p>If the radix is smaller than {@code Character.MIN_RADIX}\n     * or larger than {@code Character.MAX_RADIX}, then the radix\n     * {@code 10} is used instead.\n     *\n     * <p>Note that since the first argument is treated as an unsigned\n     * value, no leading sign character is printed.\n     *\n     * <p>If the magnitude is zero, it is represented by a single zero\n     * character {@code '0'} ({@code '\\u005Cu0030'}); otherwise,\n     * the first character of the representation of the magnitude will\n     * not be the zero character.\n     *\n     * <p>The behavior of radixes and the characters used as digits\n     * are the same as {@link #toString(int, int) toString}.\n     *\n     * @param   i       an integer to be converted to an unsigned string.\n     * @param   radix   the radix to use in the string representation.\n     * @return  an unsigned string representation of the argument in the specified radix.\n     * @see     #toString(int, int)\n     * @since 1.8\n     ",
    "links" : [ "#toString(int" ]
  }, {
    "name" : "public static String toHexString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base&nbsp;16.\n     *\n     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>\n     * if the argument is negative; otherwise, it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in hexadecimal (base&nbsp;16) with no extra leading\n     * {@code 0}s.\n     *\n     * <p>The value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 16)}.\n     *\n     * <p>If the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code '0'} ({@code '\\u005Cu0030'});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * following characters are used as hexadecimal digits:\n     *\n     * <blockquote>\n     *  {@code 0123456789abcdef}\n     * </blockquote>\n     *\n     * These are the characters {@code '\\u005Cu0030'} through\n     * {@code '\\u005Cu0039'} and {@code '\\u005Cu0061'} through\n     * {@code '\\u005Cu0066'}. If uppercase letters are\n     * desired, the {@link java.lang.String#toUpperCase()} method may\n     * be called on the result:\n     *\n     * <blockquote>\n     *  {@code Integer.toHexString(n).toUpperCase()}\n     * </blockquote>\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in hexadecimal (base&nbsp;16).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     ",
    "links" : [ "java.lang.Integer#parseUnsignedInt(String", "java.lang.String#toUpperCase()" ]
  }, {
    "name" : "public static String toOctalString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base&nbsp;8.\n     *\n     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>\n     * if the argument is negative; otherwise, it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in octal (base&nbsp;8) with no extra leading {@code 0}s.\n     *\n     * <p>The value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 8)}.\n     *\n     * <p>If the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code '0'} ({@code '\\u005Cu0030'});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * following characters are used as octal digits:\n     *\n     * <blockquote>\n     * {@code 01234567}\n     * </blockquote>\n     *\n     * These are the characters {@code '\\u005Cu0030'} through\n     * {@code '\\u005Cu0037'}.\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in octal (base&nbsp;8).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     ",
    "links" : [ "java.lang.Integer#parseUnsignedInt(String" ]
  }, {
    "name" : "public static String toBinaryString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the integer argument as an\n     * unsigned integer in base&nbsp;2.\n     *\n     * <p>The unsigned integer value is the argument plus 2<sup>32</sup>\n     * if the argument is negative; otherwise it is equal to the\n     * argument.  This value is converted to a string of ASCII digits\n     * in binary (base&nbsp;2) with no extra leading {@code 0}s.\n     *\n     * <p>The value of the argument can be recovered from the returned\n     * string {@code s} by calling {@link\n     * Integer#parseUnsignedInt(String, int)\n     * Integer.parseUnsignedInt(s, 2)}.\n     *\n     * <p>If the unsigned magnitude is zero, it is represented by a\n     * single zero character {@code '0'} ({@code '\\u005Cu0030'});\n     * otherwise, the first character of the representation of the\n     * unsigned magnitude will not be the zero character. The\n     * characters {@code '0'} ({@code '\\u005Cu0030'}) and {@code\n     * '1'} ({@code '\\u005Cu0031'}) are used as binary digits.\n     *\n     * @param   i   an integer to be converted to a string.\n     * @return  the string representation of the unsigned integer value\n     *          represented by the argument in binary (base&nbsp;2).\n     * @see #parseUnsignedInt(String, int)\n     * @see #toUnsignedString(int, int)\n     * @since   1.0.2\n     ",
    "links" : [ "java.lang.Integer#parseUnsignedInt(String" ]
  }, {
    "name" : "private static String toUnsignedString0(int val, int shift)",
    "returnType" : "String",
    "comment" : "\n     * Convert the integer to an unsigned number.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void formatUnsignedInt(int val, int shift, char[] buf, int offset, int len)",
    "returnType" : "void",
    "comment" : "\n     * Format an {@code int} (treated as unsigned) into a character buffer. If\n     * {@code len} exceeds the formatted ASCII representation of {@code val},\n     * {@code buf} will be padded with leading zeroes.\n     *\n     * @param val the unsigned int to format\n     * @param shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)\n     * @param buf the character buffer to write to\n     * @param offset the offset in the destination buffer to start at\n     * @param len the number of characters to write\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void formatUnsignedInt(int val, int shift, byte[] buf, int len)",
    "returnType" : "void",
    "comment" : "\n     * Format an {@code int} (treated as unsigned) into a byte buffer (LATIN1 version). If\n     * {@code len} exceeds the formatted ASCII representation of {@code val},\n     * {@code buf} will be padded with leading zeroes.\n     *\n     * @param val the unsigned int to format\n     * @param shift the log2 of the base to format in (4 for hex, 3 for octal, 1 for binary)\n     * @param buf the byte buffer to write to\n     * @param len the number of characters to write\n     ",
    "links" : [ ]
  }, {
    "name" : " static void formatUnsignedInt(int val, int shift, byte[] buf, int offset, int len)",
    "returnType" : "void",
    "comment" : " byte[]/LATIN1 version    ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing the\n     * specified integer. The argument is converted to signed decimal\n     * representation and returned as a string, exactly as if the\n     * argument and radix 10 were given as arguments to the {@link\n     * #toString(int, int)} method.\n     *\n     * @param   i   an integer to be converted.\n     * @return  a string representation of the argument in base&nbsp;10.\n     ",
    "links" : [ "#toString(int" ]
  }, {
    "name" : "public static String toUnsignedString(int i)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the argument as an unsigned\n     * decimal value.\n     *\n     * The argument is converted to unsigned decimal representation\n     * and returned as a string exactly as if the argument and radix\n     * 10 were given as arguments to the {@link #toUnsignedString(int,\n     * int)} method.\n     *\n     * @param   i  an integer to be converted to an unsigned string.\n     * @return  an unsigned string representation of the argument.\n     * @see     #toUnsignedString(int, int)\n     * @since 1.8\n     ",
    "links" : [ "#toUnsignedString(int" ]
  }, {
    "name" : " static int getChars(int i, int index, byte[] buf)",
    "returnType" : "int",
    "comment" : "\n     * Places characters representing the integer i into the\n     * character array buf. The characters are placed into\n     * the buffer backwards starting with the least significant\n     * digit at the specified index (exclusive), and working\n     * backwards from there.\n     *\n     * @implNote This method converts positive inputs into negative\n     * values, to cover the Integer.MIN_VALUE case. Converting otherwise\n     * (negative to positive) will expose -Integer.MIN_VALUE that overflows\n     * integer.\n     *\n     * @param i     value to convert\n     * @param index next index, after the least significant digit\n     * @param buf   target buffer, Latin1-encoded\n     * @return index of the most significant digit or minus sign, if present\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getChars(int i, int index, char[] buf)",
    "returnType" : "int",
    "comment" : " for java.lang.AbstractStringBuilder#append(int).",
    "links" : [ ]
  }, {
    "name" : " static int stringSize(int x)",
    "returnType" : "int",
    "comment" : "\n     * Returns the string representation size for a given int value.\n     *\n     * @param x int value\n     * @return string size\n     *\n     * @implNote There are other ways to compute this: e.g. binary search,\n     * but values are biased heavily towards zero, and therefore linear search\n     * wins. The iteration results are also routinely inlined in the generated\n     * code after loop unrolling.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseInt(String s, int radix) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the string argument as a signed integer in the radix\n     * specified by the second argument. The characters in the string\n     * must all be digits of the specified radix (as determined by\n     * whether {@link java.lang.Character#digit(char, int)} returns a\n     * nonnegative value), except that the first character may be an\n     * ASCII minus sign {@code '-'} ({@code '\\u005Cu002D'}) to\n     * indicate a negative value or an ASCII plus sign {@code '+'}\n     * ({@code '\\u005Cu002B'}) to indicate a positive value. The\n     * resulting integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a minus sign\n     * {@code '-'} ({@code '\\u005Cu002D'}) or plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is not a value of type\n     * {@code int}.\n     * </ul>\n     *\n     * <p>Examples:\n     * <blockquote><pre>\n     * parseInt(\"0\", 10) returns 0\n     * parseInt(\"473\", 10) returns 473\n     * parseInt(\"+42\", 10) returns 42\n     * parseInt(\"-0\", 10) returns 0\n     * parseInt(\"-FF\", 16) returns -255\n     * parseInt(\"1100110\", 2) returns 102\n     * parseInt(\"2147483647\", 10) returns 2147483647\n     * parseInt(\"-2147483648\", 10) returns -2147483648\n     * parseInt(\"2147483648\", 10) throws a NumberFormatException\n     * parseInt(\"99\", 8) throws a NumberFormatException\n     * parseInt(\"Kona\", 10) throws a NumberFormatException\n     * parseInt(\"Kona\", 27) returns 411787\n     * </pre></blockquote>\n     *\n     * @param      s   the {@code String} containing the integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     ",
    "links" : [ "java.lang.Character#digit(char", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the {@link CharSequence} argument as a signed {@code int} in the\n     * specified {@code radix}, beginning at the specified {@code beginIndex}\n     * and extending to {@code endIndex - 1}.\n     *\n     * <p>The method does not take steps to guard against the\n     * {@code CharSequence} being mutated while parsing.\n     *\n     * @param      s   the {@code CharSequence} containing the {@code int}\n     *                  representation to be parsed\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the signed {@code int} represented by the subsequence in\n     *             the specified radix.\n     * @throws     NullPointerException  if {@code s} is null.\n     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is\n     *             negative, or if {@code beginIndex} is greater than\n     *             {@code endIndex} or if {@code endIndex} is greater than\n     *             {@code s.length()}.\n     * @throws     NumberFormatException  if the {@code CharSequence} does not\n     *             contain a parsable {@code int} in the specified\n     *             {@code radix}, or if {@code radix} is either smaller than\n     *             {@link java.lang.Character#MIN_RADIX} or larger than\n     *             {@link java.lang.Character#MAX_RADIX}.\n     * @since  9\n     ",
    "links" : [ "java.lang.CharSequence", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static int parseInt(String s) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the string argument as a signed decimal integer. The\n     * characters in the string must all be decimal digits, except\n     * that the first character may be an ASCII minus sign {@code '-'}\n     * ({@code '\\u005Cu002D'}) to indicate a negative value or an\n     * ASCII plus sign {@code '+'} ({@code '\\u005Cu002B'}) to\n     * indicate a positive value. The resulting integer value is\n     * returned, exactly as if the argument and the radix 10 were\n     * given as arguments to the {@link #parseInt(java.lang.String,\n     * int)} method.\n     *\n     * @param s    a {@code String} containing the {@code int}\n     *             representation to be parsed\n     * @return     the integer value represented by the argument in decimal.\n     * @throws     NumberFormatException  if the string does not contain a\n     *               parsable integer.\n     ",
    "links" : [ "#parseInt(java.lang.String" ]
  }, {
    "name" : "public static int parseUnsignedInt(String s, int radix) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the string argument as an unsigned integer in the radix\n     * specified by the second argument.  An unsigned integer maps the\n     * values usually associated with negative numbers to positive\n     * numbers larger than {@code MAX_VALUE}.\n     *\n     * The characters in the string must all be digits of the\n     * specified radix (as determined by whether {@link\n     * java.lang.Character#digit(char, int)} returns a nonnegative\n     * value), except that the first character may be an ASCII plus\n     * sign {@code '+'} ({@code '\\u005Cu002B'}). The resulting\n     * integer value is returned.\n     *\n     * <p>An exception of type {@code NumberFormatException} is\n     * thrown if any of the following situations occurs:\n     * <ul>\n     * <li>The first argument is {@code null} or is a string of\n     * length zero.\n     *\n     * <li>The radix is either smaller than\n     * {@link java.lang.Character#MIN_RADIX} or\n     * larger than {@link java.lang.Character#MAX_RADIX}.\n     *\n     * <li>Any character of the string is not a digit of the specified\n     * radix, except that the first character may be a plus sign\n     * {@code '+'} ({@code '\\u005Cu002B'}) provided that the\n     * string is longer than length 1.\n     *\n     * <li>The value represented by the string is larger than the\n     * largest unsigned {@code int}, 2<sup>32</sup>-1.\n     *\n     * </ul>\n     *\n     *\n     * @param      s   the {@code String} containing the unsigned integer\n     *                  representation to be parsed\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the integer represented by the string argument in the\n     *             specified radix.\n     * @throws     NumberFormatException if the {@code String}\n     *             does not contain a parsable {@code int}.\n     * @since 1.8\n     ",
    "links" : [ "java.lang.Character#digit(char", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static int parseUnsignedInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the {@link CharSequence} argument as an unsigned {@code int} in\n     * the specified {@code radix}, beginning at the specified\n     * {@code beginIndex} and extending to {@code endIndex - 1}.\n     *\n     * <p>The method does not take steps to guard against the\n     * {@code CharSequence} being mutated while parsing.\n     *\n     * @param      s   the {@code CharSequence} containing the unsigned\n     *                 {@code int} representation to be parsed\n     * @param      beginIndex   the beginning index, inclusive.\n     * @param      endIndex     the ending index, exclusive.\n     * @param      radix   the radix to be used while parsing {@code s}.\n     * @return     the unsigned {@code int} represented by the subsequence in\n     *             the specified radix.\n     * @throws     NullPointerException  if {@code s} is null.\n     * @throws     IndexOutOfBoundsException  if {@code beginIndex} is\n     *             negative, or if {@code beginIndex} is greater than\n     *             {@code endIndex} or if {@code endIndex} is greater than\n     *             {@code s.length()}.\n     * @throws     NumberFormatException  if the {@code CharSequence} does not\n     *             contain a parsable unsigned {@code int} in the specified\n     *             {@code radix}, or if {@code radix} is either smaller than\n     *             {@link java.lang.Character#MIN_RADIX} or larger than\n     *             {@link java.lang.Character#MAX_RADIX}.\n     * @since  9\n     ",
    "links" : [ "java.lang.CharSequence", "java.lang.Character#MIN_RADIX", "java.lang.Character#MAX_RADIX" ]
  }, {
    "name" : "public static int parseUnsignedInt(String s) throws NumberFormatException",
    "returnType" : "int",
    "comment" : "\n     * Parses the string argument as an unsigned decimal integer. The\n     * characters in the string must all be decimal digits, except\n     * that the first character may be an ASCII plus sign {@code\n     * '+'} ({@code '\\u005Cu002B'}). The resulting integer value\n     * is returned, exactly as if the argument and the radix 10 were\n     * given as arguments to the {@link\n     * #parseUnsignedInt(java.lang.String, int)} method.\n     *\n     * @param s   a {@code String} containing the unsigned {@code int}\n     *            representation to be parsed\n     * @return    the unsigned integer value represented by the argument in decimal.\n     * @throws    NumberFormatException  if the string does not contain a\n     *            parsable unsigned integer.\n     * @since 1.8\n     ",
    "links" : [ "#parseUnsignedInt(java.lang.String" ]
  }, {
    "name" : "public static Integer valueOf(String s, int radix) throws NumberFormatException",
    "returnType" : "Integer",
    "comment" : "\n     * Returns an {@code Integer} object holding the value\n     * extracted from the specified {@code String} when parsed\n     * with the radix given by the second argument. The first argument\n     * is interpreted as representing a signed integer in the radix\n     * specified by the second argument, exactly as if the arguments\n     * were given to the {@link #parseInt(java.lang.String, int)}\n     * method. The result is an {@code Integer} object that\n     * represents the integer value specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s, radix))}\n     * </blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @param      radix the radix to be used in interpreting {@code s}\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument in the specified\n     *             radix.\n     * @throws    NumberFormatException if the {@code String}\n     *            does not contain a parsable {@code int}.\n     ",
    "links" : [ "#parseInt(java.lang.String" ]
  }, {
    "name" : "public static Integer valueOf(String s) throws NumberFormatException",
    "returnType" : "Integer",
    "comment" : "\n     * Returns an {@code Integer} object holding the\n     * value of the specified {@code String}. The argument is\n     * interpreted as representing a signed decimal integer, exactly\n     * as if the argument were given to the {@link\n     * #parseInt(java.lang.String)} method. The result is an\n     * {@code Integer} object that represents the integer value\n     * specified by the string.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code new Integer(Integer.parseInt(s))}\n     * </blockquote>\n     *\n     * @param      s   the string to be parsed.\n     * @return     an {@code Integer} object holding the value\n     *             represented by the string argument.\n     * @throws     NumberFormatException  if the string cannot be parsed\n     *             as an integer.\n     ",
    "links" : [ "#parseInt(java.lang.String)" ]
  }, {
    "name" : "public static Integer valueOf(int i)",
    "returnType" : "Integer",
    "comment" : "\n     * Returns an {@code Integer} instance representing the specified\n     * {@code int} value.  If a new {@code Integer} instance is not\n     * required, this method should generally be used in preference to\n     * the constructor {@link #Integer(int)}, as this method is likely\n     * to yield significantly better space and time performance by\n     * caching frequently requested values.\n     *\n     * This method will always cache values in the range -128 to 127,\n     * inclusive, and may cache other values outside of this range.\n     *\n     * @param  i an {@code int} value.\n     * @return an {@code Integer} instance representing {@code i}.\n     * @since  1.5\n     ",
    "links" : [ "#Integer(int)" ]
  }, {
    "name" : "public byte byteValue()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the value of this {@code Integer} as a {@code byte}\n     * after a narrowing primitive conversion.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public short shortValue()",
    "returnType" : "short",
    "comment" : "\n     * Returns the value of this {@code Integer} as a {@code short}\n     * after a narrowing primitive conversion.\n     * @jls 5.1.3 Narrowing Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of this {@code Integer} as an\n     * {@code int}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the value of this {@code Integer} as a {@code long}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     * @see Integer#toUnsignedLong(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of this {@code Integer} as a {@code float}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the value of this {@code Integer} as a {@code double}\n     * after a widening primitive conversion.\n     * @jls 5.1.2 Widening Primitive Conversion\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a {@code String} object representing this\n     * {@code Integer}'s value. The value is converted to signed\n     * decimal representation and returned as a string, exactly as if\n     * the integer value were given as an argument to the {@link\n     * java.lang.Integer#toString(int)} method.\n     *\n     * @return  a string representation of the value of this object in\n     *          base&nbsp;10.\n     ",
    "links" : [ "java.lang.Integer#toString(int)" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this {@code Integer}.\n     *\n     * @return  a hash code value for this object, equal to the\n     *          primitive {@code int} value represented by this\n     *          {@code Integer} object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int hashCode(int value)",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for an {@code int} value; compatible with\n     * {@code Integer.hashCode()}.\n     *\n     * @param value the value to hash\n     * @since 1.8\n     *\n     * @return a hash code value for an {@code int} value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this object to the specified object.  The result is\n     * {@code true} if and only if the argument is not\n     * {@code null} and is an {@code Integer} object that\n     * contains the same {@code int} value as this object.\n     *\n     * @param   obj   the object to compare with.\n     * @return  {@code true} if the objects are the same;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Integer getInteger(String nm)",
    "returnType" : "Integer",
    "comment" : "\n     * Determines the integer value of the system property with the\n     * specified name.\n     *\n     * <p>The first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as an integer\n     * value using the grammar supported by {@link Integer#decode decode} and\n     * an {@code Integer} object representing this value is returned.\n     *\n     * <p>If there is no property with the specified name, if the\n     * specified name is empty or {@code null}, or if the property\n     * does not have the correct numeric format, then {@code null} is\n     * returned.\n     *\n     * <p>In other words, this method returns an {@code Integer}\n     * object equal to the value of:\n     *\n     * <blockquote>\n     *  {@code getInteger(nm, null)}\n     * </blockquote>\n     *\n     * @param   nm   property name.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ "java.lang.System#getProperty(java.lang.String)", "java.lang.Integer#decode", "java.lang.System#getProperty(String)" ]
  }, {
    "name" : "public static Integer getInteger(String nm, int val)",
    "returnType" : "Integer",
    "comment" : "\n     * Determines the integer value of the system property with the\n     * specified name.\n     *\n     * <p>The first argument is treated as the name of a system\n     * property.  System properties are accessible through the {@link\n     * java.lang.System#getProperty(java.lang.String)} method. The\n     * string value of this property is then interpreted as an integer\n     * value using the grammar supported by {@link Integer#decode decode} and\n     * an {@code Integer} object representing this value is returned.\n     *\n     * <p>The second argument is the default value. An {@code Integer} object\n     * that represents the value of the second argument is returned if there\n     * is no property of the specified name, if the property does not have\n     * the correct numeric format, or if the specified name is empty or\n     * {@code null}.\n     *\n     * <p>In other words, this method returns an {@code Integer} object\n     * equal to the value of:\n     *\n     * <blockquote>\n     *  {@code getInteger(nm, new Integer(val))}\n     * </blockquote>\n     *\n     * but in practice it may be implemented in a manner such as:\n     *\n     * <blockquote><pre>\n     * Integer result = getInteger(nm, null);\n     * return (result == null) ? new Integer(val) : result;\n     * </pre></blockquote>\n     *\n     * to avoid the unnecessary allocation of an {@code Integer}\n     * object when the default value is not needed.\n     *\n     * @param   nm   property name.\n     * @param   val   default value.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     java.lang.System#getProperty(java.lang.String)\n     * @see     java.lang.System#getProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ "java.lang.System#getProperty(java.lang.String)", "java.lang.Integer#decode", "java.lang.System#getProperty(String)" ]
  }, {
    "name" : "public static Integer getInteger(String nm, Integer val)",
    "returnType" : "Integer",
    "comment" : "\n     * Returns the integer value of the system property with the\n     * specified name.  The first argument is treated as the name of a\n     * system property.  System properties are accessible through the\n     * {@link java.lang.System#getProperty(java.lang.String)} method.\n     * The string value of this property is then interpreted as an\n     * integer value, as per the {@link Integer#decode decode} method,\n     * and an {@code Integer} object representing this value is\n     * returned; in summary:\n     *\n     * <ul><li>If the property value begins with the two ASCII characters\n     *         {@code 0x} or the ASCII character {@code #}, not\n     *      followed by a minus sign, then the rest of it is parsed as a\n     *      hexadecimal integer exactly as by the method\n     *      {@link #valueOf(java.lang.String, int)} with radix 16.\n     * <li>If the property value begins with the ASCII character\n     *     {@code 0} followed by another character, it is parsed as an\n     *     octal integer exactly as by the method\n     *     {@link #valueOf(java.lang.String, int)} with radix 8.\n     * <li>Otherwise, the property value is parsed as a decimal integer\n     * exactly as by the method {@link #valueOf(java.lang.String, int)}\n     * with radix 10.\n     * </ul>\n     *\n     * <p>The second argument is the default value. The default value is\n     * returned if there is no property of the specified name, if the\n     * property does not have the correct numeric format, or if the\n     * specified name is empty or {@code null}.\n     *\n     * @param   nm   property name.\n     * @param   val   default value.\n     * @return  the {@code Integer} value of the property.\n     * @throws  SecurityException for the same reasons as\n     *          {@link System#getProperty(String) System.getProperty}\n     * @see     System#getProperty(java.lang.String)\n     * @see     System#getProperty(java.lang.String, java.lang.String)\n     ",
    "links" : [ "java.lang.System#getProperty(java.lang.String)", "java.lang.Integer#decode", "java.lang.System#getProperty(String)", "#valueOf(java.lang.String" ]
  }, {
    "name" : "public static Integer decode(String nm) throws NumberFormatException",
    "returnType" : "Integer",
    "comment" : "\n     * Decodes a {@code String} into an {@code Integer}.\n     * Accepts decimal, hexadecimal, and octal numbers given\n     * by the following grammar:\n     *\n     * <blockquote>\n     * <dl>\n     * <dt><i>DecodableString:</i>\n     * <dd><i>Sign<sub>opt</sub> DecimalNumeral</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0x} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0X} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code #} <i>HexDigits</i>\n     * <dd><i>Sign<sub>opt</sub></i> {@code 0} <i>OctalDigits</i>\n     *\n     * <dt><i>Sign:</i>\n     * <dd>{@code -}\n     * <dd>{@code +}\n     * </dl>\n     * </blockquote>\n     *\n     * <i>DecimalNumeral</i>, <i>HexDigits</i>, and <i>OctalDigits</i>\n     * are as defined in section {@jls 3.10.1} of\n     * <cite>The Java Language Specification</cite>,\n     * except that underscores are not accepted between digits.\n     *\n     * <p>The sequence of characters following an optional\n     * sign and/or radix specifier (\"{@code 0x}\", \"{@code 0X}\",\n     * \"{@code #}\", or leading zero) is parsed as by the {@code\n     * Integer.parseInt} method with the indicated radix (10, 16, or\n     * 8).  This sequence of characters must represent a positive\n     * value or a {@link NumberFormatException} will be thrown.  The\n     * result is negated if first character of the specified {@code\n     * String} is the minus sign.  No whitespace characters are\n     * permitted in the {@code String}.\n     *\n     * @param     nm the {@code String} to decode.\n     * @return    an {@code Integer} object holding the {@code int}\n     *             value represented by {@code nm}\n     * @throws    NumberFormatException  if the {@code String} does not\n     *            contain a parsable integer.\n     * @see java.lang.Integer#parseInt(java.lang.String, int)\n     ",
    "links" : [ "java.lang.NumberFormatException" ]
  }, {
    "name" : "public int compareTo(Integer anotherInteger)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code Integer} objects numerically.\n     *\n     * @param   anotherInteger   the {@code Integer} to be compared.\n     * @return  the value {@code 0} if this {@code Integer} is\n     *          equal to the argument {@code Integer}; a value less than\n     *          {@code 0} if this {@code Integer} is numerically less\n     *          than the argument {@code Integer}; and a value greater\n     *          than {@code 0} if this {@code Integer} is numerically\n     *           greater than the argument {@code Integer} (signed\n     *           comparison).\n     * @since   1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(int x, int y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code int} values numerically.\n     * The value returned is identical to what would be returned by:\n     * <pre>\n     *    Integer.valueOf(x).compareTo(Integer.valueOf(y))\n     * </pre>\n     *\n     * @param  x the first {@code int} to compare\n     * @param  y the second {@code int} to compare\n     * @return the value {@code 0} if {@code x == y};\n     *         a value less than {@code 0} if {@code x < y}; and\n     *         a value greater than {@code 0} if {@code x > y}\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compareUnsigned(int x, int y)",
    "returnType" : "int",
    "comment" : "\n     * Compares two {@code int} values numerically treating the values\n     * as unsigned.\n     *\n     * @param  x the first {@code int} to compare\n     * @param  y the second {@code int} to compare\n     * @return the value {@code 0} if {@code x == y}; a value less\n     *         than {@code 0} if {@code x < y} as unsigned values; and\n     *         a value greater than {@code 0} if {@code x > y} as\n     *         unsigned values\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long toUnsignedLong(int x)",
    "returnType" : "long",
    "comment" : "\n     * Converts the argument to a {@code long} by an unsigned\n     * conversion.  In an unsigned conversion to a {@code long}, the\n     * high-order 32 bits of the {@code long} are zero and the\n     * low-order 32 bits are equal to the bits of the integer\n     * argument.\n     *\n     * Consequently, zero and positive {@code int} values are mapped\n     * to a numerically equal {@code long} value and negative {@code\n     * int} values are mapped to a {@code long} value equal to the\n     * input plus 2<sup>32</sup>.\n     *\n     * @param  x the value to convert to an unsigned {@code long}\n     * @return the argument converted to {@code long} by an unsigned\n     *         conversion\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int divideUnsigned(int dividend, int divisor)",
    "returnType" : "int",
    "comment" : "\n     * Returns the unsigned quotient of dividing the first argument by\n     * the second where each argument and the result is interpreted as\n     * an unsigned value.\n     *\n     * <p>Note that in two's complement arithmetic, the three other\n     * basic arithmetic operations of add, subtract, and multiply are\n     * bit-wise identical if the two operands are regarded as both\n     * being signed or both being unsigned.  Therefore separate {@code\n     * addUnsigned}, etc. methods are not provided.\n     *\n     * @param dividend the value to be divided\n     * @param divisor the value doing the dividing\n     * @return the unsigned quotient of the first argument divided by\n     * the second argument\n     * @see #remainderUnsigned\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int remainderUnsigned(int dividend, int divisor)",
    "returnType" : "int",
    "comment" : "\n     * Returns the unsigned remainder from dividing the first argument\n     * by the second where each argument and the result is interpreted\n     * as an unsigned value.\n     *\n     * @param dividend the value to be divided\n     * @param divisor the value doing the dividing\n     * @return the unsigned remainder of the first argument divided by\n     * the second argument\n     * @see #divideUnsigned\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int highestOneBit(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns an {@code int} value with at most a single one-bit, in the\n     * position of the highest-order (\"leftmost\") one-bit in the specified\n     * {@code int} value.  Returns zero if the specified value has no\n     * one-bits in its two's complement binary representation, that is, if it\n     * is equal to zero.\n     *\n     * @param i the value whose highest one bit is to be computed\n     * @return an {@code int} value with a single one-bit, in the position\n     *     of the highest-order one-bit in the specified value, or zero if\n     *     the specified value is itself equal to zero.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lowestOneBit(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns an {@code int} value with at most a single one-bit, in the\n     * position of the lowest-order (\"rightmost\") one-bit in the specified\n     * {@code int} value.  Returns zero if the specified value has no\n     * one-bits in its two's complement binary representation, that is, if it\n     * is equal to zero.\n     *\n     * @param i the value whose lowest one bit is to be computed\n     * @return an {@code int} value with a single one-bit, in the position\n     *     of the lowest-order one-bit in the specified value, or zero if\n     *     the specified value is itself equal to zero.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int numberOfLeadingZeros(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of zero bits preceding the highest-order\n     * (\"leftmost\") one-bit in the two's complement binary representation\n     * of the specified {@code int} value.  Returns 32 if the\n     * specified value has no one-bits in its two's complement representation,\n     * in other words if it is equal to zero.\n     *\n     * <p>Note that this method is closely related to the logarithm base 2.\n     * For all positive {@code int} values x:\n     * <ul>\n     * <li>floor(log<sub>2</sub>(x)) = {@code 31 - numberOfLeadingZeros(x)}\n     * <li>ceil(log<sub>2</sub>(x)) = {@code 32 - numberOfLeadingZeros(x - 1)}\n     * </ul>\n     *\n     * @param i the value whose number of leading zeros is to be computed\n     * @return the number of zero bits preceding the highest-order\n     *     (\"leftmost\") one-bit in the two's complement binary representation\n     *     of the specified {@code int} value, or 32 if the value\n     *     is equal to zero.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int numberOfTrailingZeros(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of zero bits following the lowest-order (\"rightmost\")\n     * one-bit in the two's complement binary representation of the specified\n     * {@code int} value.  Returns 32 if the specified value has no\n     * one-bits in its two's complement representation, in other words if it is\n     * equal to zero.\n     *\n     * @param i the value whose number of trailing zeros is to be computed\n     * @return the number of zero bits following the lowest-order (\"rightmost\")\n     *     one-bit in the two's complement binary representation of the\n     *     specified {@code int} value, or 32 if the value is equal\n     *     to zero.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int bitCount(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of one-bits in the two's complement binary\n     * representation of the specified {@code int} value.  This function is\n     * sometimes referred to as the <i>population count</i>.\n     *\n     * @param i the value whose bits are to be counted\n     * @return the number of one-bits in the two's complement binary\n     *     representation of the specified {@code int} value.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int rotateLeft(int i, int distance)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value obtained by rotating the two's complement binary\n     * representation of the specified {@code int} value left by the\n     * specified number of bits.  (Bits shifted out of the left hand, or\n     * high-order, side reenter on the right, or low-order.)\n     *\n     * <p>Note that left rotation with a negative distance is equivalent to\n     * right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,\n     * distance)}.  Note also that rotation by any multiple of 32 is a\n     * no-op, so all but the last five bits of the rotation distance can be\n     * ignored, even if the distance is negative: {@code rotateLeft(val,\n     * distance) == rotateLeft(val, distance & 0x1F)}.\n     *\n     * @param i the value whose bits are to be rotated left\n     * @param distance the number of bit positions to rotate left\n     * @return the value obtained by rotating the two's complement binary\n     *     representation of the specified {@code int} value left by the\n     *     specified number of bits.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int rotateRight(int i, int distance)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value obtained by rotating the two's complement binary\n     * representation of the specified {@code int} value right by the\n     * specified number of bits.  (Bits shifted out of the right hand, or\n     * low-order, side reenter on the left, or high-order.)\n     *\n     * <p>Note that right rotation with a negative distance is equivalent to\n     * left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,\n     * distance)}.  Note also that rotation by any multiple of 32 is a\n     * no-op, so all but the last five bits of the rotation distance can be\n     * ignored, even if the distance is negative: {@code rotateRight(val,\n     * distance) == rotateRight(val, distance & 0x1F)}.\n     *\n     * @param i the value whose bits are to be rotated right\n     * @param distance the number of bit positions to rotate right\n     * @return the value obtained by rotating the two's complement binary\n     *     representation of the specified {@code int} value right by the\n     *     specified number of bits.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int reverse(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value obtained by reversing the order of the bits in the\n     * two's complement binary representation of the specified {@code int}\n     * value.\n     *\n     * @param i the value to be reversed\n     * @return the value obtained by reversing order of the bits in the\n     *     specified {@code int} value.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int signum(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the signum function of the specified {@code int} value.  (The\n     * return value is -1 if the specified value is negative; 0 if the\n     * specified value is zero; and 1 if the specified value is positive.)\n     *\n     * @param i the value whose signum is to be computed\n     * @return the signum function of the specified {@code int} value.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int reverseBytes(int i)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value obtained by reversing the order of the bytes in the\n     * two's complement representation of the specified {@code int} value.\n     *\n     * @param i the value whose bytes are to be reversed\n     * @return the value obtained by reversing the bytes in the specified\n     *     {@code int} value.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int sum(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Adds two integers together as per the + operator.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the sum of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int max(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Returns the greater of two {@code int} values\n     * as if by calling {@link Math#max(int, int) Math.max}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the greater of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ "java.lang.Math#max(int" ]
  }, {
    "name" : "public static int min(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * Returns the smaller of two {@code int} values\n     * as if by calling {@link Math#min(int, int) Math.min}.\n     *\n     * @param a the first operand\n     * @param b the second operand\n     * @return the smaller of {@code a} and {@code b}\n     * @see java.util.function.BinaryOperator\n     * @since 1.8\n     ",
    "links" : [ "java.lang.Math#min(int" ]
  }, {
    "name" : "public Optional<Integer> describeConstable()",
    "returnType" : "Optional<Integer>",
    "comment" : "\n     * Returns an {@link Optional} containing the nominal descriptor for this\n     * instance, which is the instance itself.\n     *\n     * @return an {@link Optional} describing the {@linkplain Integer} instance\n     * @since 12\n     * @hide\n     ",
    "links" : [ "java.util.Optional" ]
  }, {
    "name" : "public Integer resolveConstantDesc(MethodHandles.Lookup lookup)",
    "returnType" : "Integer",
    "comment" : "\n     * Resolves this instance as a {@link ConstantDesc}, the result of which is\n     * the instance itself.\n     *\n     * @param lookup ignored\n     * @return the {@linkplain Integer} instance\n     * @since 12\n     * @hide\n     ",
    "links" : [ "java.lang.constant.ConstantDesc" ]
  } ],
  "methodNames" : [ "public static String toString(int i, int radix)", "public static String toUnsignedString(int i, int radix)", "public static String toHexString(int i)", "public static String toOctalString(int i)", "public static String toBinaryString(int i)", "private static String toUnsignedString0(int val, int shift)", " static void formatUnsignedInt(int val, int shift, char[] buf, int offset, int len)", "private static void formatUnsignedInt(int val, int shift, byte[] buf, int len)", " static void formatUnsignedInt(int val, int shift, byte[] buf, int offset, int len)", "public static String toString(int i)", "public static String toUnsignedString(int i)", " static int getChars(int i, int index, byte[] buf)", " static int getChars(int i, int index, char[] buf)", " static int stringSize(int x)", "public static int parseInt(String s, int radix) throws NumberFormatException", "public static int parseInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException", "public static int parseInt(String s) throws NumberFormatException", "public static int parseUnsignedInt(String s, int radix) throws NumberFormatException", "public static int parseUnsignedInt(CharSequence s, int beginIndex, int endIndex, int radix) throws NumberFormatException", "public static int parseUnsignedInt(String s) throws NumberFormatException", "public static Integer valueOf(String s, int radix) throws NumberFormatException", "public static Integer valueOf(String s) throws NumberFormatException", "public static Integer valueOf(int i)", "public byte byteValue()", "public short shortValue()", "public int intValue()", "public long longValue()", "public float floatValue()", "public double doubleValue()", "public String toString()", "public int hashCode()", "public static int hashCode(int value)", "public boolean equals(Object obj)", "public static Integer getInteger(String nm)", "public static Integer getInteger(String nm, int val)", "public static Integer getInteger(String nm, Integer val)", "public static Integer decode(String nm) throws NumberFormatException", "public int compareTo(Integer anotherInteger)", "public static int compare(int x, int y)", "public static int compareUnsigned(int x, int y)", "public static long toUnsignedLong(int x)", "public static int divideUnsigned(int dividend, int divisor)", "public static int remainderUnsigned(int dividend, int divisor)", "public static int highestOneBit(int i)", "public static int lowestOneBit(int i)", "public static int numberOfLeadingZeros(int i)", "public static int numberOfTrailingZeros(int i)", "public static int bitCount(int i)", "public static int rotateLeft(int i, int distance)", "public static int rotateRight(int i, int distance)", "public static int reverse(int i)", "public static int signum(int i)", "public static int reverseBytes(int i)", "public static int sum(int a, int b)", "public static int max(int a, int b)", "public static int min(int a, int b)", "public Optional<Integer> describeConstable()", "public Integer resolveConstantDesc(MethodHandles.Lookup lookup)" ],
  "variableNames" : [ "MIN_VALUE", "MAX_VALUE", "TYPE", "digits", "SMALL_NEG_VALUES", "SMALL_NONNEG_VALUES", "DigitTens", "DigitOnes", "sizeTable", "value", "SIZE", "BYTES", "serialVersionUID" ]
}