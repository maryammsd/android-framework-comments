{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/opengl/Matrix.java",
  "packageName" : "android.opengl",
  "className" : "Matrix",
  "comment" : "\n * Matrix math utilities. These methods operate on OpenGL ES format\n * matrices and vectors stored in float arrays.\n * <p>\n * Matrices are 4 x 4 column-vector matrices stored in column-major\n * order:\n * <pre>\n *  m[offset +  0] m[offset +  4] m[offset +  8] m[offset + 12]\n *  m[offset +  1] m[offset +  5] m[offset +  9] m[offset + 13]\n *  m[offset +  2] m[offset +  6] m[offset + 10] m[offset + 14]\n *  m[offset +  3] m[offset +  7] m[offset + 11] m[offset + 15]</pre>\n *\n * Vectors are 4 x 1 column vectors stored in order:\n * <pre>\n * v[offset + 0]\n * v[offset + 1]\n * v[offset + 2]\n * v[offset + 3]</pre>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ThreadTmp",
    "type" : "ThreadLocal<float[]>",
    "comment" : " Temporary memory for operations that need temporary matrix data. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean overlap(float[] a, int aStart, int aLength, float[] b, int bStart, int bLength)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void multiplyMM(float[] result, int resultOffset, float[] lhs, int lhsOffset, float[] rhs, int rhsOffset)",
    "returnType" : "void",
    "comment" : "\n     * Multiplies two 4x4 matrices together and stores the result in a third 4x4\n     * matrix. In matrix notation: result = lhs x rhs. Due to the way\n     * matrix multiplication works, the result matrix will have the same\n     * effect as first multiplying by the rhs matrix, then multiplying by\n     * the lhs matrix. This is the opposite of what you might expect.\n     * <p>\n     * The same float array may be passed for result, lhs, and/or rhs. This\n     * operation is expected to do the correct thing if the result elements\n     * overlap with either of the lhs or rhs elements.\n     *\n     * @param result The float array that holds the result.\n     * @param resultOffset The offset into the result array where the result is\n     *        stored.\n     * @param lhs The float array that holds the left-hand-side matrix.\n     * @param lhsOffset The offset into the lhs array where the lhs is stored\n     * @param rhs The float array that holds the right-hand-side matrix.\n     * @param rhsOffset The offset into the rhs array where the rhs is stored.\n     *\n     * @throws IllegalArgumentException under any of the following conditions:\n     * result, lhs, or rhs are null;\n     * resultOffset + 16 > result.length\n     * or lhsOffset + 16 > lhs.length\n     * or rhsOffset + 16 > rhs.length;\n     * resultOffset < 0 or lhsOffset < 0 or rhsOffset < 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void multiplyMV(float[] resultVec, int resultVecOffset, float[] lhsMat, int lhsMatOffset, float[] rhsVec, int rhsVecOffset)",
    "returnType" : "void",
    "comment" : "\n     * Multiplies a 4 element vector by a 4x4 matrix and stores the result in a\n     * 4-element column vector. In matrix notation: result = lhs x rhs\n     * <p>\n     * The same float array may be passed for resultVec, lhsMat, and/or rhsVec.\n     * This operation is expected to do the correct thing if the result elements\n     * overlap with either of the lhs or rhs elements.\n     *\n     * @param resultVec The float array that holds the result vector.\n     * @param resultVecOffset The offset into the result array where the result\n     *        vector is stored.\n     * @param lhsMat The float array that holds the left-hand-side matrix.\n     * @param lhsMatOffset The offset into the lhs array where the lhs is stored\n     * @param rhsVec The float array that holds the right-hand-side vector.\n     * @param rhsVecOffset The offset into the rhs vector where the rhs vector\n     *        is stored.\n     *\n     * @throws IllegalArgumentException under any of the following conditions:\n     * resultVec, lhsMat, or rhsVec are null;\n     * resultVecOffset + 4  > resultVec.length\n     * or lhsMatOffset + 16 > lhsMat.length\n     * or rhsVecOffset + 4  > rhsVec.length;\n     * resultVecOffset < 0 or lhsMatOffset < 0 or rhsVecOffset < 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void transposeM(float[] mTrans, int mTransOffset, float[] m, int mOffset)",
    "returnType" : "void",
    "comment" : "\n     * Transposes a 4 x 4 matrix.\n     * <p>\n     * mTrans and m must not overlap.\n     *\n     * @param mTrans the array that holds the output transposed matrix\n     * @param mTransOffset an offset into mTrans where the transposed matrix is\n     *        stored.\n     * @param m the input array\n     * @param mOffset an offset into m where the input matrix is stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean invertM(float[] mInv, int mInvOffset, float[] m, int mOffset)",
    "returnType" : "boolean",
    "comment" : "\n     * Inverts a 4 x 4 matrix.\n     * <p>\n     * mInv and m must not overlap.\n     *\n     * @param mInv the array that holds the output inverted matrix\n     * @param mInvOffset an offset into mInv where the inverted matrix is\n     *        stored.\n     * @param m the input array\n     * @param mOffset an offset into m where the input matrix is stored.\n     * @return true if the matrix could be inverted, false if it could not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void orthoM(float[] m, int mOffset, float left, float right, float bottom, float top, float near, float far)",
    "returnType" : "void",
    "comment" : "\n     * Computes an orthographic projection matrix.\n     *\n     * @param m returns the result\n     * @param mOffset\n     * @param left\n     * @param right\n     * @param bottom\n     * @param top\n     * @param near\n     * @param far\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void frustumM(float[] m, int offset, float left, float right, float bottom, float top, float near, float far)",
    "returnType" : "void",
    "comment" : "\n     * Defines a projection matrix in terms of six clip planes.\n     *\n     * @param m the float array that holds the output perspective matrix\n     * @param offset the offset into float array m where the perspective\n     *        matrix data is written\n     * @param left\n     * @param right\n     * @param bottom\n     * @param top\n     * @param near\n     * @param far\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void perspectiveM(float[] m, int offset, float fovy, float aspect, float zNear, float zFar)",
    "returnType" : "void",
    "comment" : "\n     * Defines a projection matrix in terms of a field of view angle, an\n     * aspect ratio, and z clip planes.\n     *\n     * @param m the float array that holds the perspective matrix\n     * @param offset the offset into float array m where the perspective\n     *        matrix data is written\n     * @param fovy field of view in y direction, in degrees\n     * @param aspect width to height aspect ratio of the viewport\n     * @param zNear\n     * @param zFar\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float length(float x, float y, float z)",
    "returnType" : "float",
    "comment" : "\n     * Computes the length of a vector.\n     *\n     * @param x x coordinate of a vector\n     * @param y y coordinate of a vector\n     * @param z z coordinate of a vector\n     * @return the length of a vector\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setIdentityM(float[] sm, int smOffset)",
    "returnType" : "void",
    "comment" : "\n     * Sets matrix m to the identity matrix.\n     *\n     * @param sm returns the result\n     * @param smOffset index into sm where the result matrix starts\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void scaleM(float[] sm, int smOffset, float[] m, int mOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Scales matrix m by x, y, and z, putting the result in sm.\n     * <p>\n     * m and sm must not overlap.\n     *\n     * @param sm returns the result\n     * @param smOffset index into sm where the result matrix starts\n     * @param m source matrix\n     * @param mOffset index into m where the source matrix starts\n     * @param x scale factor x\n     * @param y scale factor y\n     * @param z scale factor z\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void scaleM(float[] m, int mOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Scales matrix m in place by sx, sy, and sz.\n     *\n     * @param m matrix to scale\n     * @param mOffset index into m where the matrix starts\n     * @param x scale factor x\n     * @param y scale factor y\n     * @param z scale factor z\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void translateM(float[] tm, int tmOffset, float[] m, int mOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Translates matrix m by x, y, and z, putting the result in tm.\n     * <p>\n     * m and tm must not overlap.\n     *\n     * @param tm returns the result\n     * @param tmOffset index into sm where the result matrix starts\n     * @param m source matrix\n     * @param mOffset index into m where the source matrix starts\n     * @param x translation factor x\n     * @param y translation factor y\n     * @param z translation factor z\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void translateM(float[] m, int mOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Translates matrix m by x, y, and z in place.\n     *\n     * @param m matrix\n     * @param mOffset index into m where the matrix starts\n     * @param x translation factor x\n     * @param y translation factor y\n     * @param z translation factor z\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateM(float[] rm, int rmOffset, float[] m, int mOffset, float a, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Rotates matrix m by angle a (in degrees) around the axis (x, y, z).\n     * <p>\n     * m and rm must not overlap.\n     *\n     * @param rm returns the result\n     * @param rmOffset index into rm where the result matrix starts\n     * @param m source matrix\n     * @param mOffset index into m where the source matrix starts\n     * @param a angle to rotate in degrees\n     * @param x X axis component\n     * @param y Y axis component\n     * @param z Z axis component\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void rotateM(float[] m, int mOffset, float a, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Rotates matrix m in place by angle a (in degrees)\n     * around the axis (x, y, z).\n     *\n     * @param m source matrix\n     * @param mOffset index into m where the matrix starts\n     * @param a angle to rotate in degrees\n     * @param x X axis component\n     * @param y Y axis component\n     * @param z Z axis component\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setRotateM(float[] rm, int rmOffset, float a, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Creates a matrix for rotation by angle a (in degrees)\n     * around the axis (x, y, z).\n     * <p>\n     * An optimized path will be used for rotation about a major axis\n     * (e.g. x=1.0f y=0.0f z=0.0f).\n     *\n     * @param rm returns the result\n     * @param rmOffset index into rm where the result matrix starts\n     * @param a angle to rotate in degrees\n     * @param x X axis component\n     * @param y Y axis component\n     * @param z Z axis component\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setRotateEulerM(float[] rm, int rmOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Converts Euler angles to a rotation matrix.\n     *\n     * @param rm returns the result\n     * @param rmOffset index into rm where the result matrix starts\n     * @param x angle of rotation, in degrees\n     * @param y is broken, do not use\n     * @param z angle of rotation, in degrees\n     *\n     * @deprecated This method is incorrect around the y axis. This method is\n     *             deprecated and replaced (below) by setRotateEulerM2 which\n     *             behaves correctly\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setRotateEulerM2(@NonNull float[] rm, int rmOffset, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n     * Converts Euler angles to a rotation matrix.\n     *\n     * @param rm returns the result\n     * @param rmOffset index into rm where the result matrix starts\n     * @param x angle of rotation, in degrees\n     * @param y angle of rotation, in degrees\n     * @param z angle of rotation, in degrees\n     *\n     * @throws IllegalArgumentException if rm is null;\n     * or if rmOffset + 16 > rm.length;\n     * rmOffset < 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setLookAtM(float[] rm, int rmOffset, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)",
    "returnType" : "void",
    "comment" : "\n     * Defines a viewing transformation in terms of an eye point, a center of\n     * view, and an up vector.\n     *\n     * @param rm returns the result\n     * @param rmOffset index into rm where the result matrix starts\n     * @param eyeX eye point X\n     * @param eyeY eye point Y\n     * @param eyeZ eye point Z\n     * @param centerX center of view X\n     * @param centerY center of view Y\n     * @param centerZ center of view Z\n     * @param upX up vector X\n     * @param upY up vector Y\n     * @param upZ up vector Z\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean overlap(float[] a, int aStart, int aLength, float[] b, int bStart, int bLength)", "public static void multiplyMM(float[] result, int resultOffset, float[] lhs, int lhsOffset, float[] rhs, int rhsOffset)", "public static void multiplyMV(float[] resultVec, int resultVecOffset, float[] lhsMat, int lhsMatOffset, float[] rhsVec, int rhsVecOffset)", "public static void transposeM(float[] mTrans, int mTransOffset, float[] m, int mOffset)", "public static boolean invertM(float[] mInv, int mInvOffset, float[] m, int mOffset)", "public static void orthoM(float[] m, int mOffset, float left, float right, float bottom, float top, float near, float far)", "public static void frustumM(float[] m, int offset, float left, float right, float bottom, float top, float near, float far)", "public static void perspectiveM(float[] m, int offset, float fovy, float aspect, float zNear, float zFar)", "public static float length(float x, float y, float z)", "public static void setIdentityM(float[] sm, int smOffset)", "public static void scaleM(float[] sm, int smOffset, float[] m, int mOffset, float x, float y, float z)", "public static void scaleM(float[] m, int mOffset, float x, float y, float z)", "public static void translateM(float[] tm, int tmOffset, float[] m, int mOffset, float x, float y, float z)", "public static void translateM(float[] m, int mOffset, float x, float y, float z)", "public static void rotateM(float[] rm, int rmOffset, float[] m, int mOffset, float a, float x, float y, float z)", "public static void rotateM(float[] m, int mOffset, float a, float x, float y, float z)", "public static void setRotateM(float[] rm, int rmOffset, float a, float x, float y, float z)", "public static void setRotateEulerM(float[] rm, int rmOffset, float x, float y, float z)", "public static void setRotateEulerM2(@NonNull float[] rm, int rmOffset, float x, float y, float z)", "public static void setLookAtM(float[] rm, int rmOffset, float eyeX, float eyeY, float eyeZ, float centerX, float centerY, float centerZ, float upX, float upY, float upZ)" ],
  "variableNames" : [ "ThreadTmp" ]
}