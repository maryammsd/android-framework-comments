{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/projection/MediaProjection.java",
  "packageName" : "android.media.projection",
  "className" : "MediaProjection",
  "comment" : "\n * A token granting applications the ability to capture screen contents and/or\n * record system audio. The exact capabilities granted depend on the type of\n * MediaProjection.\n *\n * <p>A screen capture session can be started through {@link\n * MediaProjectionManager#createScreenCaptureIntent}. This grants the ability to\n * capture screen contents, but not system audio.\n ",
  "links" : [ "android.media.projection.MediaProjectionManager#createScreenCaptureIntent" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_PROJECTION_REQUIRES_CALLBACK",
    "type" : "long",
    "comment" : "\n     * Requires an app registers a {@link Callback} before invoking\n     * {@link #createVirtualDisplay(String, int, int, int, int, Surface, VirtualDisplay.Callback,\n     * Handler) createVirtualDisplay}.\n     *\n     * <p>Enabled after version 33 (Android T), so applies to target SDK of 34+ (Android U+).\n     *\n     * @hide\n     ",
    "links" : [ "Callback", "#createVirtualDisplay(String" ]
  }, {
    "name" : "mImpl",
    "type" : "IMediaProjection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayManager",
    "type" : "DisplayManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Map<Callback, CallbackRecord>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerCallback(@NonNull Callback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register a listener to receive notifications about when the {@link MediaProjection} or\n     * captured content changes state.\n     *\n     * <p>The callback must be registered before invoking\n     * {@link #createVirtualDisplay(String, int, int, int, int, Surface, VirtualDisplay.Callback,\n     * Handler)} to ensure that any notifications on the callback are not missed. The client must\n     * implement {@link Callback#onStop()} and clean up any resources it is holding, e.g. the\n     * {@link VirtualDisplay} and {@link Surface}.\n     *\n     * @param callback The callback to call.\n     * @param handler  The handler on which the callback should be invoked, or\n     *                 null if the callback should be invoked on the calling thread's looper.\n     * @throws NullPointerException If the given callback is null.\n     * @see #unregisterCallback\n     ",
    "links" : [ "#onStop()", "android.view.Surface", "android.media.projection.MediaProjection", "#createVirtualDisplay(String", "android.hardware.display.VirtualDisplay" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister a {@link MediaProjection} listener.\n     *\n     * @param callback The callback to unregister.\n     * @throws NullPointerException If the given callback is null.\n     * @see #registerCallback\n     ",
    "links" : [ "android.media.projection.MediaProjection" ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, boolean isSecure, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, int flags, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * Creates a {@link android.hardware.display.VirtualDisplay} to capture the\n     * contents of the screen.\n     *\n     * <p>To correctly clean up resources associated with a capture, the application must register a\n     * {@link Callback} before invocation. The app must override {@link Callback#onStop()} to clean\n     * up (by invoking{@link VirtualDisplay#release()}, {@link Surface#release()} and related\n     * resources).\n     *\n     * @param name     The name of the virtual display, must be non-empty.\n     * @param width    The width of the virtual display in pixels. Must be greater than 0.\n     * @param height   The height of the virtual display in pixels. Must be greater than 0.\n     * @param dpi      The density of the virtual display in dpi. Must be greater than 0.\n     * @param surface  The surface to which the content of the virtual display should be rendered,\n     *                 or null if there is none initially.\n     * @param flags    A combination of virtual display flags. See {@link DisplayManager} for the\n     *                 full list of flags. Note that\n     *                 {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_PRESENTATION}\n     *                 is always enabled. The following flags may be overridden, depending on how\n     *                 the component with {android.Manifest.permission.MANAGE_MEDIA_PROJECTION}\n     *                 handles the user's consent:\n     *                 {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY},\n     *                 {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR},\n     *                 {@link DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC}.\n     * @param callback Callback invoked when the virtual display's state changes, or null.\n     * @param handler  The {@link android.os.Handler} on which the callback should be invoked, or\n     *                 null if the callback should be invoked on the calling thread's main\n     *                 {@link android.os.Looper}.\n     * @throws IllegalStateException If the target SDK is {@link\n     *                               android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U} and up, and\n     *                               if no {@link Callback} is registered.\n     * @throws SecurityException In any of the following scenarios:\n     *                               <ol>\n     *                                 <li>If attempting to create a new virtual display\n     *                                 associated with this MediaProjection instance after it has\n     *                                 been stopped by invoking {@link #stop()}.\n     *                                 <li>If the target SDK is {@link\n     *                                 android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U} and up,\n     *                                 and if this instance has already taken a recording through\n     *                                 {@code #createVirtualDisplay}, but {@link #stop()} wasn't\n     *                                 invoked to end the recording.\n     *                                 <li>If the target SDK is {@link\n     *                                 android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U} and up,\n     *                                 and if {@link MediaProjectionManager#getMediaProjection}\n     *                                 was invoked more than once to get this\n     *                                 {@code MediaProjection} instance.\n     *                               </ol>\n     *                               In cases 2 & 3, no exception is thrown if the target SDK is\n     *                               less than\n     *                               {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U}.\n     *                               Instead, recording doesn't begin until the user re-grants\n     *                               consent in the dialog.\n     * @see VirtualDisplay\n     * @see VirtualDisplay.Callback\n     ",
    "links" : [ "#onStop()", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.media.projection.MediaProjectionManager#getMediaProjection", "#stop()", "android.hardware.display.VirtualDisplay#release()", "android.hardware.display.VirtualDisplay", "Callback", "android.view.Surface#release()", "android.hardware.display.DisplayManager", "android.os.Handler", "android.os.Looper", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR", "android.hardware.display.DisplayManager#VIRTUAL_DISPLAY_FLAG_PRESENTATION" ]
  }, {
    "name" : "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig.Builder virtualDisplayConfig, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)",
    "returnType" : "VirtualDisplay",
    "comment" : "\n     * Creates a {@link android.hardware.display.VirtualDisplay} to capture the\n     * contents of the screen.\n     *\n     * @param virtualDisplayConfig The arguments for the virtual display configuration. See\n     * {@link VirtualDisplayConfig} for using it.\n     * @param callback Callback to call when the virtual display's state changes, or null if none.\n     * @param handler The {@link android.os.Handler} on which the callback should be invoked, or\n     *                null if the callback should be invoked on the calling thread's main\n     *                {@link android.os.Looper}.\n     *\n     * @see android.hardware.display.VirtualDisplay\n     * @hide\n     ",
    "links" : [ "android.os.Handler", "android.os.Looper", "android.hardware.display.VirtualDisplay", "android.hardware.display.VirtualDisplayConfig" ]
  }, {
    "name" : "private boolean shouldMediaProjectionRequireCallback()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} when MediaProjection requires the app registers a callback before\n     * beginning to capture via\n     * {@link #createVirtualDisplay(String, int, int, int, int, Surface, VirtualDisplay.Callback,\n     * Handler)}.\n     ",
    "links" : [ "#createVirtualDisplay(String" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops projection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IMediaProjection getProjection()",
    "returnType" : "IMediaProjection",
    "comment" : "\n     * Get the underlying IMediaProjection.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerCallback(@NonNull Callback callback, @Nullable Handler handler)", "public void unregisterCallback(@NonNull Callback callback)", "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, boolean isSecure, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "public VirtualDisplay createVirtualDisplay(@NonNull String name, int width, int height, int dpi, int flags, @Nullable Surface surface, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "public VirtualDisplay createVirtualDisplay(@NonNull VirtualDisplayConfig.Builder virtualDisplayConfig, @Nullable VirtualDisplay.Callback callback, @Nullable Handler handler)", "private boolean shouldMediaProjectionRequireCallback()", "public void stop()", "public IMediaProjection getProjection()" ],
  "variableNames" : [ "TAG", "MEDIA_PROJECTION_REQUIRES_CALLBACK", "mImpl", "mContext", "mDisplayManager", "mCallbacks" ]
}