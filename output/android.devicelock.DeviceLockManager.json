{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/devicelock/DeviceLockManager.java",
  "packageName" : "android.devicelock",
  "className" : "DeviceLockManager",
  "comment" : "\n * Manager used to interact with the system device lock service.\n * The device lock feature is used by special applications ('kiosk apps', downloaded and installed\n * by the device lock solution) to lock and unlock a device.\n * A typical use case is a financed device, where the financing entity has the capability to lock\n * the device in case of a missed payment.\n * When a device is locked, only a limited set of interactions with the device is allowed (for\n * example, placing emergency calls).\n * <p>\n * Use {@link android.content.Context#getSystemService(java.lang.String)}\n * with {@link Context#DEVICE_LOCK_SERVICE} to create a {@link DeviceLockManager}.\n * </p>\n *\n ",
  "links" : [ "android.content.Context#getSystemService(java.lang.String)", "android.content.Context#DEVICE_LOCK_SERVICE", "android.devicelock.DeviceLockManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IDeviceLockService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_LOCK_ROLE_FINANCING",
    "type" : "int",
    "comment" : "\n     * Constant representing a financed device role, returned by {@link #getKioskApps}.\n     ",
    "links" : [ "#getKioskApps" ]
  } ],
  "methods" : [ {
    "name" : "public IDeviceLockService getService()",
    "returnType" : "IDeviceLockService",
    "comment" : "\n     * Return the underlying service interface.\n     * This is used to implement private APIs between the Device Lock Controller and the\n     * Device Lock System Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lockDevice(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Lock the device.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback.\n     * @param callback this returns either success or an exception.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unlockDevice(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Unlock the device.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback.\n     * @param callback this returns either success or an exception.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void isDeviceLocked(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Check if the device is locked or not.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback.\n     * @param callback this returns either the lock status or an exception.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void getDeviceId(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<DeviceId, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the device id.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback.\n     * @param callback this returns either the {@link DeviceId} or an exception.\n     ",
    "links" : [ "android.annotation.CallbackExecutor", "android.devicelock.DeviceId" ]
  }, {
    "name" : "public void getKioskApps(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Map<Integer, String>, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the kiosk app roles and packages.\n     *\n     * @param executor the {@link Executor} on which to invoke the callback.\n     * @param callback this returns either a {@link Map} of device roles/package names,\n     *                 or an exception. The Integer in the map represent the device lock role\n     *                 (at this moment, the only supported role is\n     *                 {@value #DEVICE_LOCK_ROLE_FINANCING}. The String represents tha package\n     *                 name of the kiosk app for that role.\n     ",
    "links" : [ "java.util.Map", "android.annotation.CallbackExecutor" ]
  } ],
  "methodNames" : [ "public IDeviceLockService getService()", "public void lockDevice(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, Exception> callback)", "public void unlockDevice(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Void, Exception> callback)", "public void isDeviceLocked(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)", "public void getDeviceId(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<DeviceId, Exception> callback)", "public void getKioskApps(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Map<Integer, String>, Exception> callback)" ],
  "variableNames" : [ "TAG", "mService", "DEVICE_LOCK_ROLE_FINANCING" ]
}