{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/DefaultHandler.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "DefaultHandler",
  "comment" : "\n * Default base class for SAX2 event handlers.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class is available as a convenience base class for SAX2\n * applications: it provides default implementations for all of the\n * callbacks in the four core SAX2 handler classes:</p>\n *\n * <ul>\n * <li>{@link org.xml.sax.EntityResolver EntityResolver}</li>\n * <li>{@link org.xml.sax.DTDHandler DTDHandler}</li>\n * <li>{@link org.xml.sax.ContentHandler ContentHandler}</li>\n * <li>{@link org.xml.sax.ErrorHandler ErrorHandler}</li>\n * </ul>\n *\n * <p>Application writers can extend this class when they need to\n * implement only part of an interface; parser writers can\n * instantiate this class to provide default handlers when the\n * application has not supplied its own.</p>\n *\n * <p>This class replaces the deprecated SAX1\n * {@link org.xml.sax.HandlerBase HandlerBase} class.</p>\n *\n * @since SAX 2.0\n * @author David Megginson,\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.EntityResolver\n * @see org.xml.sax.DTDHandler\n * @see org.xml.sax.ContentHandler\n * @see org.xml.sax.ErrorHandler\n ",
  "links" : [ "org.xml.sax.ErrorHandler", "org.xml.sax.DTDHandler", "org.xml.sax.ContentHandler", "org.xml.sax.HandlerBase", "org.xml.sax.EntityResolver" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public InputSource resolveEntity(String publicId, String systemId) throws IOException, SAXException",
    "returnType" : "InputSource",
    "comment" : "\n     * Resolve an external entity.\n     *\n     * <p>Always return null, so that the parser will use the system\n     * identifier provided in the XML document.  This method implements\n     * the SAX default behaviour: application writers can override it\n     * in a subclass to do special translations such as catalog lookups\n     * or URI redirection.</p>\n     *\n     * @param publicId The public identifier, or null if none is\n     *                 available.\n     * @param systemId The system identifier provided in the XML\n     *                 document.\n     * @return The new input source, or null to require the\n     *         default behaviour.\n     * @exception java.io.IOException If there is an error setting\n     *            up the new input source.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.EntityResolver#resolveEntity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a notation declaration.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass if they wish to keep track of the notations\n     * declared in a document.</p>\n     *\n     * @param name The notation name.\n     * @param publicId The notation public identifier, or null if not\n     *                 available.\n     * @param systemId The notation system identifier.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.DTDHandler#notationDecl\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of an unparsed entity declaration.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to keep track of the unparsed entities\n     * declared in a document.</p>\n     *\n     * @param name The entity name.\n     * @param publicId The entity public identifier, or null if not\n     *                 available.\n     * @param systemId The entity system identifier.\n     * @param notationName The name of the associated notation.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Receive a Locator object for document events.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass if they wish to store the locator for use\n     * with other document events.</p>\n     *\n     * @param locator A locator for all SAX document events.\n     * @see org.xml.sax.ContentHandler#setDocumentLocator\n     * @see org.xml.sax.Locator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the beginning of the document.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the beginning\n     * of a document (such as allocating the root node of a tree or\n     * creating an output file).</p>\n     *\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#startDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the end of the document.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the end\n     * of a document (such as finalising a tree or closing an output\n     * file).</p>\n     *\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#endDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the start of a Namespace mapping.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the start of\n     * each Namespace prefix scope (such as storing the prefix mapping).</p>\n     *\n     * @param prefix The Namespace prefix being declared.\n     * @param uri The Namespace URI mapped to the prefix.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#startPrefixMapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the end of a Namespace mapping.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the end of\n     * each prefix mapping.</p>\n     *\n     * @param prefix The Namespace prefix being declared.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#endPrefixMapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the start of an element.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the start of\n     * each element (such as allocating a new tree node or writing\n     * output to a file).</p>\n     *\n     * @param uri The Namespace URI, or the empty string if the\n     *        element has no Namespace URI or if Namespace\n     *        processing is not being performed.\n     * @param localName The local name (without prefix), or the\n     *        empty string if Namespace processing is not being\n     *        performed.\n     * @param qName The qualified name (with prefix), or the\n     *        empty string if qualified names are not available.\n     * @param attributes The attributes attached to the element.  If\n     *        there are no attributes, it shall be an empty\n     *        Attributes object.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#startElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the end of an element.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions at the end of\n     * each element (such as finalising a tree node or writing\n     * output to a file).</p>\n     *\n     * @param uri The Namespace URI, or the empty string if the\n     *        element has no Namespace URI or if Namespace\n     *        processing is not being performed.\n     * @param localName The local name (without prefix), or the\n     *        empty string if Namespace processing is not being\n     *        performed.\n     * @param qName The qualified name (with prefix), or the\n     *        empty string if qualified names are not available.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#endElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of character data inside an element.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method to take specific actions for each chunk of character data\n     * (such as adding the data to a node or buffer, or printing it to\n     * a file).</p>\n     *\n     * @param ch The characters.\n     * @param start The start position in the character array.\n     * @param length The number of characters to use from the\n     *               character array.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of ignorable whitespace in element content.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method to take specific actions for each chunk of ignorable\n     * whitespace (such as adding data to a node or buffer, or printing\n     * it to a file).</p>\n     *\n     * @param ch The whitespace characters.\n     * @param start The start position in the character array.\n     * @param length The number of characters to use from the\n     *               character array.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#ignorableWhitespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a processing instruction.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions for each\n     * processing instruction, such as setting status variables or\n     * invoking other methods.</p>\n     *\n     * @param target The processing instruction target.\n     * @param data The processing instruction data, or null if\n     *             none is supplied.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#processingInstruction\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a skipped entity.\n     *\n     * <p>By default, do nothing.  Application writers may override this\n     * method in a subclass to take specific actions for each\n     * processing instruction, such as setting status variables or\n     * invoking other methods.</p>\n     *\n     * @param name The name of the skipped entity.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ContentHandler#processingInstruction\n     ",
    "links" : [ ]
  }, {
    "name" : "public void warning(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a parser warning.\n     *\n     * <p>The default implementation does nothing.  Application writers\n     * may override this method in a subclass to take specific actions\n     * for each warning, such as inserting the message in a log file or\n     * printing it to the console.</p>\n     *\n     * @param e The warning information encoded as an exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ErrorHandler#warning\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void error(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a recoverable parser error.\n     *\n     * <p>The default implementation does nothing.  Application writers\n     * may override this method in a subclass to take specific actions\n     * for each error, such as inserting the message in a log file or\n     * printing it to the console.</p>\n     *\n     * @param e The warning information encoded as an exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ErrorHandler#warning\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fatalError(SAXParseException e) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report a fatal XML parsing error.\n     *\n     * <p>The default implementation throws a SAXParseException.\n     * Application writers may override this method in a subclass if\n     * they need to take specific actions for each fatal error (such as\n     * collecting all of the errors into a single report): in any case,\n     * the application must stop all regular processing when this\n     * method is invoked, since the document is no longer reliable, and\n     * the parser may no longer report parsing events.</p>\n     *\n     * @param e The error information encoded as an exception.\n     * @exception org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     * @see org.xml.sax.ErrorHandler#fatalError\n     * @see org.xml.sax.SAXParseException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public InputSource resolveEntity(String publicId, String systemId) throws IOException, SAXException", "public void notationDecl(String name, String publicId, String systemId) throws SAXException", "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException", "public void warning(SAXParseException e) throws SAXException", "public void error(SAXParseException e) throws SAXException", "public void fatalError(SAXParseException e) throws SAXException" ],
  "variableNames" : [ ]
}