{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/KeyProtection.java",
  "packageName" : "android.security.keystore",
  "className" : "KeyProtection",
  "comment" : "\n * Specification of how a key or key pair is secured when imported into the\n * <a href=\"{@docRoot}training/articles/keystore.html\">Android Keystore system</a>. This class\n * specifies authorized uses of the imported key, such as whether user authentication is required\n * for using the key, what operations the key is authorized for (e.g., decryption, but not signing)\n * with what parameters (e.g., only with a particular padding scheme or digest), and the key's\n * validity start and end dates. Key use authorizations expressed in this class apply only to secret\n * keys and private keys -- public keys can be used for any supported operations.\n *\n * <p>To import a key or key pair into the Android Keystore, create an instance of this class using\n * the {@link Builder} and pass the instance into {@link java.security.KeyStore#setEntry(String, java.security.KeyStore.Entry, ProtectionParameter) KeyStore.setEntry}\n * with the key or key pair being imported.\n *\n * <p>To obtain the secret/symmetric or private key from the Android Keystore use\n * {@link java.security.KeyStore#getKey(String, char[]) KeyStore.getKey(String, null)} or\n * {@link java.security.KeyStore#getEntry(String, java.security.KeyStore.ProtectionParameter) KeyStore.getEntry(String, null)}.\n * To obtain the public key from the Android Keystore use\n * {@link java.security.KeyStore#getCertificate(String)} and then\n * {@link Certificate#getPublicKey()}.\n *\n * <p>To help obtain algorithm-specific public parameters of key pairs stored in the Android\n * Keystore, its private keys implement {@link java.security.interfaces.ECKey} or\n * {@link java.security.interfaces.RSAKey} interfaces whereas its public keys implement\n * {@link java.security.interfaces.ECPublicKey} or {@link java.security.interfaces.RSAPublicKey}\n * interfaces.\n *\n * <p>NOTE: The key material of keys stored in the Android Keystore is not accessible.\n *\n * <p>Instances of this class are immutable.\n *\n * <p><h3>Known issues</h3>\n * A known bug in Android 6.0 (API Level 23) causes user authentication-related authorizations to be\n * enforced even for public keys. To work around this issue extract the public key material to use\n * outside of Android Keystore. For example:\n * <pre> {@code\n * PublicKey unrestrictedPublicKey =\n *         KeyFactory.getInstance(publicKey.getAlgorithm()).generatePublic(\n *                 new X509EncodedKeySpec(publicKey.getEncoded()));\n * }</pre>\n *\n * <p><h3>Example: AES key for encryption/decryption in GCM mode</h3>\n * This example illustrates how to import an AES key into the Android KeyStore under alias\n * {@code key1} authorized to be used only for encryption/decryption in GCM mode with no padding.\n * The key must export its key material via {@link Key#getEncoded()} in {@code RAW} format.\n * <pre> {@code\n * SecretKey key = ...; // AES key\n *\n * KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n * keyStore.load(null);\n * keyStore.setEntry(\n *         \"key1\",\n *         new KeyStore.SecretKeyEntry(key),\n *         new KeyProtection.Builder(KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT)\n *                 .setBlockMode(KeyProperties.BLOCK_MODE_GCM)\n *                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)\n *                 .build());\n * // Key imported, obtain a reference to it.\n * SecretKey keyStoreKey = (SecretKey) keyStore.getKey(\"key1\", null);\n * // The original key can now be discarded.\n *\n * Cipher cipher = Cipher.getInstance(\"AES/GCM/NoPadding\");\n * cipher.init(Cipher.ENCRYPT_MODE, keyStoreKey);\n * ...\n * }</pre>\n *\n * <p><h3>Example: HMAC key for generating MACs using SHA-512</h3>\n * This example illustrates how to import an HMAC key into the Android KeyStore under alias\n * {@code key1} authorized to be used only for generating MACs using SHA-512 digest. The key must\n * export its key material via {@link Key#getEncoded()} in {@code RAW} format.\n * <pre> {@code\n * SecretKey key = ...; // HMAC key of algorithm \"HmacSHA512\".\n *\n * KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n * keyStore.load(null);\n * keyStore.setEntry(\n *         \"key1\",\n *         new KeyStore.SecretKeyEntry(key),\n *         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN).build());\n * // Key imported, obtain a reference to it.\n * SecretKey keyStoreKey = (SecretKey) keyStore.getKey(\"key1\", null);\n * // The original key can now be discarded.\n *\n * Mac mac = Mac.getInstance(\"HmacSHA512\");\n * mac.init(keyStoreKey);\n * ...\n * }</pre>\n *\n * <p><h3>Example: EC key pair for signing/verification using ECDSA</h3>\n * This example illustrates how to import an EC key pair into the Android KeyStore under alias\n * {@code key2} with the private key authorized to be used only for signing with SHA-256 or SHA-512\n * digests. The use of the public key is unrestricted. Both the private and the public key must\n * export their key material via {@link Key#getEncoded()} in {@code PKCS#8} and {@code X.509} format\n * respectively.\n * <pre> {@code\n * PrivateKey privateKey = ...;   // EC private key\n * Certificate[] certChain = ...; // Certificate chain with the first certificate\n *                                // containing the corresponding EC public key.\n *\n * KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n * keyStore.load(null);\n * keyStore.setEntry(\n *         \"key2\",\n *         new KeyStore.PrivateKeyEntry(privateKey, certChain),\n *         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN)\n *                 .setDigests(KeyProperties.DIGEST_SHA256, KeyProperties.DIGEST_SHA512)\n *                 .build());\n * // Key pair imported, obtain a reference to it.\n * PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey(\"key2\", null);\n * PublicKey publicKey = keyStore.getCertificate(\"key2\").getPublicKey();\n * // The original private key can now be discarded.\n *\n * Signature signature = Signature.getInstance(\"SHA256withECDSA\");\n * signature.initSign(keyStorePrivateKey);\n * ...\n * }</pre>\n *\n * <p><h3>Example: RSA key pair for signing/verification using PKCS#1 padding</h3>\n * This example illustrates how to import an RSA key pair into the Android KeyStore under alias\n * {@code key2} with the private key authorized to be used only for signing using the PKCS#1\n * signature padding scheme with SHA-256 digest and only if the user has been authenticated within\n * the last ten minutes. The use of the public key is unrestricted (see Known Issues). Both the\n * private and the public key must export their key material via {@link Key#getEncoded()} in\n * {@code PKCS#8} and {@code X.509} format respectively.\n * <pre> {@code\n * PrivateKey privateKey = ...;   // RSA private key\n * Certificate[] certChain = ...; // Certificate chain with the first certificate\n *                                // containing the corresponding RSA public key.\n *\n * KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n * keyStore.load(null);\n * keyStore.setEntry(\n *         \"key2\",\n *         new KeyStore.PrivateKeyEntry(privateKey, certChain),\n *         new KeyProtection.Builder(KeyProperties.PURPOSE_SIGN)\n *                 .setDigests(KeyProperties.DIGEST_SHA256)\n *                 .setSignaturePaddings(KeyProperties.SIGNATURE_PADDING_RSA_PKCS1)\n *                 // Only permit this key to be used if the user\n *                 // authenticated within the last ten minutes.\n *                 .setUserAuthenticationRequired(true)\n *                 .setUserAuthenticationValidityDurationSeconds(10 * 60)\n *                 .build());\n * // Key pair imported, obtain a reference to it.\n * PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey(\"key2\", null);\n * PublicKey publicKey = keyStore.getCertificate(\"key2\").getPublicKey();\n * // The original private key can now be discarded.\n *\n * Signature signature = Signature.getInstance(\"SHA256withRSA\");\n * signature.initSign(keyStorePrivateKey);\n * ...\n * }</pre>\n *\n * <p><h3>Example: RSA key pair for encryption/decryption using PKCS#1 padding</h3>\n * This example illustrates how to import an RSA key pair into the Android KeyStore under alias\n * {@code key2} with the private key authorized to be used only for decryption using the PKCS#1\n * encryption padding scheme. The use of public key is unrestricted, thus permitting encryption\n * using any padding schemes and digests. Both the private and the public key must export their key\n * material via {@link Key#getEncoded()} in {@code PKCS#8} and {@code X.509} format respectively.\n * <pre> {@code\n * PrivateKey privateKey = ...;   // RSA private key\n * Certificate[] certChain = ...; // Certificate chain with the first certificate\n *                                // containing the corresponding RSA public key.\n *\n * KeyStore keyStore = KeyStore.getInstance(\"AndroidKeyStore\");\n * keyStore.load(null);\n * keyStore.setEntry(\n *         \"key2\",\n *         new KeyStore.PrivateKeyEntry(privateKey, certChain),\n *         new KeyProtection.Builder(KeyProperties.PURPOSE_DECRYPT)\n *                 .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_RSA_PKCS1)\n *                 .build());\n * // Key pair imported, obtain a reference to it.\n * PrivateKey keyStorePrivateKey = (PrivateKey) keyStore.getKey(\"key2\", null);\n * PublicKey publicKey = keyStore.getCertificate(\"key2\").getPublicKey();\n * // The original private key can now be discarded.\n *\n * Cipher cipher = Cipher.getInstance(\"RSA/ECB/PKCS1Padding\");\n * cipher.init(Cipher.DECRYPT_MODE, keyStorePrivateKey);\n * ...\n * }</pre>\n ",
  "variables" : [ {
    "name" : "mKeyValidityStart",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForOriginationEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForConsumptionEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPurposes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptionPaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignaturePaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDigests",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockModes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRandomizedEncryptionRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidityDurationSeconds",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserPresenceRequred",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidWhileOnBody",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidatedByBiometricEnrollment",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundToSecureUserId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCriticalToDeviceEncryption",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserConfirmationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnlockedDeviceRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStrongBoxBacked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Date getKeyValidityStart()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant before which the key is not yet valid.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getKeyValidityForConsumptionEnd()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant after which the key is no long valid for decryption and verification.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getKeyValidityForOriginationEnd()",
    "returnType" : "Date",
    "comment" : "\n     * Gets the time instant after which the key is no long valid for encryption and signing.\n     *\n     * @return instant or {@code null} if not restricted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPurposes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used.\n     * Attempts to use the key for any other purpose will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code PURPOSE} flags.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getEncryptionPaddings()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of padding schemes (e.g., {@code PKCS7Padding}, {@code PKCS1Padding},\n     * {@code NoPadding}) with which the key can be used when encrypting/decrypting. Attempts to use\n     * the key with any other padding scheme will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code ENCRYPTION_PADDING} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getSignaturePaddings()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of padding schemes (e.g., {@code PSS}, {@code PKCS#1}) with which the key\n     * can be used when signing/verifying. Attempts to use the key with any other padding scheme\n     * will be rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code SIGNATURE_PADDING} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public String[] getDigests()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of digest algorithms (e.g., {@code SHA-256}, {@code SHA-384}) with which the key\n     * can be used.\n     *\n     * <p>See {@link KeyProperties}.{@code DIGEST} constants.\n     *\n     * @throws IllegalStateException if this set has not been specified.\n     *\n     * @see #isDigestsSpecified()\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public boolean isDigestsSpecified()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the set of digest algorithms with which the key can be used has been\n     * specified.\n     *\n     * @see #getDigests()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getBlockModes()",
    "returnType" : "String[]",
    "comment" : "\n     * Gets the set of block modes (e.g., {@code GCM}, {@code CBC}) with which the key can be used\n     * when encrypting/decrypting. Attempts to use the key with any other block modes will be\n     * rejected.\n     *\n     * <p>See {@link KeyProperties}.{@code BLOCK_MODE} constants.\n     ",
    "links" : [ "KeyProperties" ]
  }, {
    "name" : "public boolean isRandomizedEncryptionRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if encryption using this key must be sufficiently randomized to produce\n     * different ciphertexts for the same plaintext every time. The formal cryptographic property\n     * being required is <em>indistinguishability under chosen-plaintext attack ({@code\n     * IND-CPA})</em>. This property is important because it mitigates several classes of\n     * weaknesses due to which ciphertext may leak information about plaintext. For example, if a\n     * given plaintext always produces the same ciphertext, an attacker may see the repeated\n     * ciphertexts and be able to deduce something about the plaintext.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserAuthenticationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is authorized to be used only if the user has been\n     * authenticated.\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @see #getUserAuthenticationValidityDurationSeconds()\n     * @see Builder#setUserAuthenticationRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserConfirmationRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is authorized to be used only for messages confirmed by the\n     * user.\n     *\n     * Confirmation is separate from user authentication (see\n     * {@link #isUserAuthenticationRequired()}). Keys can be created that require confirmation but\n     * not user authentication, or user authentication but not confirmation, or both. Confirmation\n     * verifies that some user with physical possession of the device has approved a displayed\n     * message. User authentication verifies that the correct user is present and has\n     * authenticated.\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @see Builder#setUserConfirmationRequired(boolean)\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public int getUserAuthenticationType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getUserAuthenticationValidityDurationSeconds()",
    "returnType" : "int",
    "comment" : "\n     * Gets the duration of time (seconds) for which this key is authorized to be used after the\n     * user is successfully authenticated. This has effect only if user authentication is required\n     * (see {@link #isUserAuthenticationRequired()}).\n     *\n     * <p>This authorization applies only to secret key and private key operations. Public key\n     * operations are not restricted.\n     *\n     * @return duration in seconds or {@code -1} if authentication is required for every use of the\n     *         key.\n     *\n     * @see #isUserAuthenticationRequired()\n     * @see Builder#setUserAuthenticationValidityDurationSeconds(int)\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public boolean isUserPresenceRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is authorized to be used only if a test of user presence has\n     * been performed between the {@code Signature.initSign()} and {@code Signature.sign()} calls.\n     * It requires that the KeyStore implementation have a direct way to validate the user presence\n     * for example a KeyStore hardware backed strongbox can use a button press that is observable\n     * in hardware. A test for user presence is tangential to authentication. The test can be part\n     * of an authentication step as long as this step can be validated by the hardware protecting\n     * the key and cannot be spoofed. For example, a physical button press can be used as a test of\n     * user presence if the other pins connected to the button are not able to simulate a button\n     * press. There must be no way for the primary processor to fake a button press, or that\n     * button must not be used as a test of user presence.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserAuthenticationValidWhileOnBody()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key will be de-authorized when the device is removed from the\n     * user's body.  This option has no effect on keys that don't have an authentication validity\n     * duration, and has no effect if the device lacks an on-body sensor.\n     *\n     * <p>Authorization applies only to secret key and private key operations. Public key operations\n     * are not restricted.\n     *\n     * @see #isUserAuthenticationRequired()\n     * @see #getUserAuthenticationValidityDurationSeconds()\n     * @see Builder#setUserAuthenticationValidWhileOnBody(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInvalidatedByBiometricEnrollment()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is irreversibly invalidated when a new biometric is\n     * enrolled or all enrolled biometrics are removed. This has effect only for keys that\n     * require biometric user authentication for every use.\n     *\n     * @see #isUserAuthenticationRequired()\n     * @see #getUserAuthenticationValidityDurationSeconds()\n     * @see Builder#setInvalidatedByBiometricEnrollment(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getBoundToSpecificSecureUserId()",
    "returnType" : "long",
    "comment" : "\n     * Return the secure user id that this key should be bound to.\n     *\n     * Normally an authentication-bound key is tied to the secure user id of the current user\n     * (either the root SID from GateKeeper for auth-bound keys with a timeout, or the authenticator\n     * id of the current biometric set for keys requiring explicit biometric authorization).\n     * If this parameter is set (this method returning non-zero value), the key should be tied to\n     * the specified secure user id, overriding the logic above.\n     *\n     * This is only applicable when {@link #isUserAuthenticationRequired} is {@code true}\n     *\n     * @see KeymasterUtils#addUserAuthArgs\n     * @hide\n     ",
    "links" : [ "#isUserAuthenticationRequired" ]
  }, {
    "name" : "public boolean isCriticalToDeviceEncryption()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this key is critical to the device encryption flow.\n     *\n     * @see android.security.KeyStore#FLAG_CRITICAL_TO_DEVICE_ENCRYPTION\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUnlockedDeviceRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the screen must be unlocked for this key to be used for decryption or\n     * signing. Encryption and signature verification will still be available when the screen is\n     * locked.\n     *\n     * @see Builder#setUnlockedDeviceRequired(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStrongBoxBacked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the key is protected by a Strongbox security chip.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mKeyValidityStart", "mKeyValidityForOriginationEnd", "mKeyValidityForConsumptionEnd", "mPurposes", "mEncryptionPaddings", "mSignaturePaddings", "mDigests", "mBlockModes", "mRandomizedEncryptionRequired", "mUserAuthenticationRequired", "mUserAuthenticationType", "mUserAuthenticationValidityDurationSeconds", "mUserPresenceRequred", "mUserAuthenticationValidWhileOnBody", "mInvalidatedByBiometricEnrollment", "mBoundToSecureUserId", "mCriticalToDeviceEncryption", "mUserConfirmationRequired", "mUnlockedDeviceRequired", "mIsStrongBoxBacked" ],
  "methodNames" : [ "public Date getKeyValidityStart()", "public Date getKeyValidityForConsumptionEnd()", "public Date getKeyValidityForOriginationEnd()", "public int getPurposes()", "public String[] getEncryptionPaddings()", "public String[] getSignaturePaddings()", "public String[] getDigests()", "public boolean isDigestsSpecified()", "public String[] getBlockModes()", "public boolean isRandomizedEncryptionRequired()", "public boolean isUserAuthenticationRequired()", "public boolean isUserConfirmationRequired()", "public int getUserAuthenticationType()", "public int getUserAuthenticationValidityDurationSeconds()", "public boolean isUserPresenceRequired()", "public boolean isUserAuthenticationValidWhileOnBody()", "public boolean isInvalidatedByBiometricEnrollment()", "public long getBoundToSpecificSecureUserId()", "public boolean isCriticalToDeviceEncryption()", "public boolean isUnlockedDeviceRequired()", "public boolean isStrongBoxBacked()" ]
}