{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/AbstractList.java",
  "packageName" : "java.util",
  "className" : "RandomAccessSpliterator",
  "comment" : "\n     * An index-based split-by-two, lazily initialized Spliterator covering\n     * a List that access elements via {@link List#get}.\n     *\n     * If access results in an IndexOutOfBoundsException then a\n     * ConcurrentModificationException is thrown instead (since the list has\n     * been structurally modified while traversing).\n     *\n     * If the List is an instance of AbstractList then concurrent modification\n     * checking is performed using the AbstractList's modCount field.\n     ",
  "links" : [ "java.util.List#get" ],
  "variables" : [ {
    "name" : "list",
    "type" : "List<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : " current index, modified on advance/split",
    "links" : [ ]
  }, {
    "name" : "fence",
    "type" : "int",
    "comment" : " -1 until used; then one past last index",
    "links" : [ ]
  }, {
    "name" : "alist",
    "type" : "AbstractList<E>",
    "comment" : " The following fields are valid if covering an AbstractList",
    "links" : [ ]
  }, {
    "name" : "expectedModCount",
    "type" : "int",
    "comment" : " initialized when fence set",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int getFence()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> trySplit()",
    "returnType" : "Spliterator<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean tryAdvance(Consumer<? super E> action)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachRemaining(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long estimateSize()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int characteristics()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static E get(List<E> list, int i)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void checkAbstractListModCount(AbstractList<?> alist, int expectedModCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int getFence()", "public Spliterator<E> trySplit()", "public boolean tryAdvance(Consumer<? super E> action)", "public void forEachRemaining(Consumer<? super E> action)", "public long estimateSize()", "public int characteristics()", "private static E get(List<E> list, int i)", " static void checkAbstractListModCount(AbstractList<?> alist, int expectedModCount)" ],
  "variableNames" : [ "list", "index", "fence", "alist", "expectedModCount" ]
}