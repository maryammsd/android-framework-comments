{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/tech/NfcB.java",
  "packageName" : "android.nfc.tech",
  "className" : "NfcB",
  "comment" : "\n * Provides access to NFC-B (ISO 14443-3B) properties and I/O operations on a {@link Tag}.\n *\n * <p>Acquire a {@link NfcB} object using {@link #get}.\n * <p>The primary NFC-B I/O operation is {@link #transceive}. Applications must\n * implement their own protocol stack on top of {@link #transceive}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "variables" : [ {
    "name" : "EXTRA_APPDATA",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PROTINFO",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mAppData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtInfo",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NfcB get(Tag tag)",
    "returnType" : "NfcB",
    "comment" : "\n     * Get an instance of {@link NfcB} for the given tag.\n     * <p>Returns null if {@link NfcB} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag does not support NFC-B.\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @param tag an NFC-B compatible tag\n     * @return NFC-B object\n     ",
    "links" : [ "NfcB", "NfcB", "Tag#getTechList" ]
  }, {
    "name" : "public byte[] getApplicationData()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the Application Data bytes from ATQB/SENSB_RES at tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return Application Data bytes from ATQB/SENSB_RES bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getProtocolInfo()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the Protocol Info bytes from ATQB/SENSB_RES at tag discovery.\n     *\n     * <p>Does not cause any RF activity and does not block.\n     *\n     * @return Protocol Info bytes from ATQB/SENSB_RES bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] transceive(byte[] data) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Send raw NFC-B commands to the tag and receive the response.\n     *\n     * <p>Applications must not append the EoD (CRC) to the payload,\n     * it will be automatically calculated.\n     * <p>Applications must not send commands that manage the polling\n     * loop and initialization (SENSB_REQ, SLOT_MARKER etc).\n     *\n     * <p>Use {@link #getMaxTransceiveLength} to retrieve the maximum number of bytes\n     * that can be sent with {@link #transceive}.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param data bytes to send\n     * @return bytes received in response\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or this operation is canceled\n     ",
    "links" : [ "#getMaxTransceiveLength", "#transceive", "IOException", "#close", "android.Manifest.permission#NFC" ]
  }, {
    "name" : "public int getMaxTransceiveLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the maximum number of bytes that can be sent with {@link #transceive}.\n     * @return the maximum number of bytes that can be sent with {@link #transceive}.\n     ",
    "links" : [ "#transceive", "#transceive" ]
  } ],
  "variableNames" : [ "EXTRA_APPDATA", "EXTRA_PROTINFO", "mAppData", "mProtInfo" ],
  "methodNames" : [ "public static NfcB get(Tag tag)", "public byte[] getApplicationData()", "public byte[] getProtocolInfo()", "public byte[] transceive(byte[] data) throws IOException", "public int getMaxTransceiveLength()" ]
}