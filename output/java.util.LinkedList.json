{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/LinkedList.java",
  "packageName" : "java.util",
  "className" : "LinkedList",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "size",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "first",
    "type" : "Node<E>",
    "comment" : "\n     * Pointer to first node.\n     ",
    "links" : [ ]
  }, {
    "name" : "last",
    "type" : "Node<E>",
    "comment" : "\n     * Pointer to last node.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void linkFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Links e as first element.\n     ",
    "links" : [ ]
  }, {
    "name" : " void linkLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Links e as last element.\n     ",
    "links" : [ ]
  }, {
    "name" : " void linkBefore(E e, Node<E> succ)",
    "returnType" : "void",
    "comment" : "\n     * Inserts element e before non-null Node succ.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E unlinkFirst(Node<E> f)",
    "returnType" : "E",
    "comment" : "\n     * Unlinks non-null first node f.\n     ",
    "links" : [ ]
  }, {
    "name" : "private E unlinkLast(Node<E> l)",
    "returnType" : "E",
    "comment" : "\n     * Unlinks non-null last node l.\n     ",
    "links" : [ ]
  }, {
    "name" : " E unlink(Node<E> x)",
    "returnType" : "E",
    "comment" : "\n     * Unlinks non-null node x.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * Returns the first element in this list.\n     *\n     * @return the first element in this list\n     * @throws NoSuchElementException if this list is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getLast()",
    "returnType" : "E",
    "comment" : "\n     * Returns the last element in this list.\n     *\n     * @return the last element in this list\n     * @throws NoSuchElementException if this list is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns the first element from this list.\n     *\n     * @return the first element from this list\n     * @throws NoSuchElementException if this list is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * Removes and returns the last element from this list.\n     *\n     * @return the last element from this list\n     * @throws NoSuchElementException if this list is empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the beginning of this list.\n     *\n     * @param e the element to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Appends the specified element to the end of this list.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @param e the element to add\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains the specified element.\n     * More formally, returns {@code true} if and only if this list contains\n     * at least one element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this list is to be tested\n     * @return {@code true} if this list contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this list.\n     *\n     * @return the number of elements in this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the specified element to the end of this list.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     ",
    "links" : [ "#addLast", "java.util.Collection#add" ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this list,\n     * if it is present.  If this list does not contain the element, it is\n     * unchanged.  More formally, removes the element with the lowest index\n     * {@code i} such that\n     * {@code Objects.equals(o, get(i))}\n     * (if such an element exists).  Returns {@code true} if this list\n     * contained the specified element (or equivalently, if this list\n     * changed as a result of the call).\n     *\n     * @param o element to be removed from this list, if present\n     * @return {@code true} if this list contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified collection to the end of\n     * this list, in the order that they are returned by the specified\n     * collection's iterator.  The behavior of this operation is undefined if\n     * the specified collection is modified while the operation is in\n     * progress.  (Note that this will occur if the specified collection is\n     * this list, and it's nonempty.)\n     *\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws NullPointerException if the specified collection is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts all of the elements in the specified collection into this\n     * list, starting at the specified position.  Shifts the element\n     * currently at that position (if any) and any subsequent elements to\n     * the right (increases their indices).  The new elements will appear\n     * in the list in the order that they are returned by the\n     * specified collection's iterator.\n     *\n     * @param index index at which to insert the first element\n     *              from the specified collection\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws NullPointerException if the specified collection is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the element at the specified position in this list.\n     *\n     * @param index index of the element to return\n     * @return the element at the specified position in this list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     *\n     * @param index index of the element to replace\n     * @param element element to be stored at the specified position\n     * @return the element previously at the specified position\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the specified position in this list.\n     * Shifts the element currently at that position (if any) and any\n     * subsequent elements to the right (adds one to their indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * Removes the element at the specified position in this list.  Shifts any\n     * subsequent elements to the left (subtracts one from their indices).\n     * Returns the element that was removed from the list.\n     *\n     * @param index the index of the element to be removed\n     * @return the element previously at the specified position\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isElementIndex(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if the argument is the index of an existing element.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPositionIndex(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if the argument is the index of a valid position for an\n     * iterator or an add operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String outOfBoundsMsg(int index)",
    "returnType" : "String",
    "comment" : "\n     * Constructs an IndexOutOfBoundsException detail message.\n     * Of the many possible refactorings of the error handling code,\n     * this \"outlining\" performs best with both server and client VMs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkElementIndex(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkPositionIndex(int index)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Node<E> node(int index)",
    "returnType" : "Node<E>",
    "comment" : "\n     * Returns the (non-null) Node at the specified element index.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the lowest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the first occurrence of the specified element in\n     *         this list, or -1 if this list does not contain the element\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the highest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the last occurrence of the specified element in\n     *         this list, or -1 if this list does not contain the element\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head (first element) of this list.\n     *\n     * @return the head of this list, or {@code null} if this list is empty\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head (first element) of this list.\n     *\n     * @return the head of this list\n     * @throws NoSuchElementException if this list is empty\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head (first element) of this list.\n     *\n     * @return the head of this list, or {@code null} if this list is empty\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head (first element) of this list.\n     *\n     * @return the head of this list\n     * @throws NoSuchElementException if this list is empty\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified element as the tail (last element) of this list.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @since 1.5\n     ",
    "links" : [ "java.util.Queue#offer" ]
  }, {
    "name" : "public boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this list.\n     *\n     * @param e the element to insert\n     * @return {@code true} (as specified by {@link Deque#offerFirst})\n     * @since 1.6\n     ",
    "links" : [ "java.util.Deque#offerFirst" ]
  }, {
    "name" : "public boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this list.\n     *\n     * @param e the element to insert\n     * @return {@code true} (as specified by {@link Deque#offerLast})\n     * @since 1.6\n     ",
    "links" : [ "java.util.Deque#offerLast" ]
  }, {
    "name" : "public E peekFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the first element of this list,\n     * or returns {@code null} if this list is empty.\n     *\n     * @return the first element of this list, or {@code null}\n     *         if this list is empty\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peekLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the last element of this list,\n     * or returns {@code null} if this list is empty.\n     *\n     * @return the last element of this list, or {@code null}\n     *         if this list is empty\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the first element of this list,\n     * or returns {@code null} if this list is empty.\n     *\n     * @return the first element of this list, or {@code null} if\n     *     this list is empty\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollLast()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the last element of this list,\n     * or returns {@code null} if this list is empty.\n     *\n     * @return the last element of this list, or {@code null} if\n     *     this list is empty\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * Pushes an element onto the stack represented by this list.  In other\n     * words, inserts the element at the front of this list.\n     *\n     * <p>This method is equivalent to {@link #addFirst}.\n     *\n     * @param e the element to push\n     * @since 1.6\n     ",
    "links" : [ "#addFirst" ]
  }, {
    "name" : "public E pop()",
    "returnType" : "E",
    "comment" : "\n     * Pops an element from the stack represented by this list.  In other\n     * words, removes and returns the first element of this list.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the element at the front of this list (which is the top\n     *         of the stack represented by this list)\n     * @throws NoSuchElementException if this list is empty\n     * @since 1.6\n     ",
    "links" : [ "#removeFirst()" ]
  }, {
    "name" : "public boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element in this\n     * list (when traversing the list from head to tail).  If the list\n     * does not contain the element, it is unchanged.\n     *\n     * @param o element to be removed from this list, if present\n     * @return {@code true} if the list contained the specified element\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the last occurrence of the specified element in this\n     * list (when traversing the list from head to tail).  If the list\n     * does not contain the element, it is unchanged.\n     *\n     * @param o element to be removed from this list, if present\n     * @return {@code true} if the list contained the specified element\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListIterator<E> listIterator(int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list-iterator of the elements in this list (in proper\n     * sequence), starting at the specified position in the list.\n     * Obeys the general contract of {@code List.listIterator(int)}.<p>\n     *\n     * The list-iterator is <i>fail-fast</i>: if the list is structurally\n     * modified at any time after the Iterator is created, in any way except\n     * through the list-iterator's own {@code remove} or {@code add}\n     * methods, the list-iterator will throw a\n     * {@code ConcurrentModificationException}.  Thus, in the face of\n     * concurrent modification, the iterator fails quickly and cleanly, rather\n     * than risking arbitrary, non-deterministic behavior at an undetermined\n     * time in the future.\n     *\n     * @param index index of the first element to be returned from the\n     *              list-iterator (by a call to {@code next})\n     * @return a ListIterator of the elements in this list (in proper\n     *         sequence), starting at the specified position in the list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @see List#listIterator(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "private LinkedList<E> superClone()",
    "returnType" : "LinkedList<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a shallow copy of this {@code LinkedList}. (The elements\n     * themselves are not cloned.)\n     *\n     * @return a shallow copy of this {@code LinkedList} instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this list.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this list\n     *         in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list in\n     * proper sequence (from first to last element); the runtime type of\n     * the returned array is that of the specified array.  If the list fits\n     * in the specified array, it is returned therein.  Otherwise, a new\n     * array is allocated with the runtime type of the specified array and\n     * the size of this list.\n     *\n     * <p>If the list fits in the specified array with room to spare (i.e.,\n     * the array has more elements than the list), the element in the array\n     * immediately following the end of the list is set to {@code null}.\n     * (This is useful in determining the length of the list <i>only</i> if\n     * the caller knows that the list does not contain any null elements.)\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a list known to contain only strings.\n     * The following code can be used to dump the list into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre>\n     *     String[] y = x.toArray(new String[0]);</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the list are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose.\n     * @return an array containing the elements of the list\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this list\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves the state of this {@code LinkedList} instance to a stream\n     * (that is, serializes it).\n     *\n     * @serialData The size of the list (the number of elements it\n     *             contains) is emitted (int), followed by all of its\n     *             elements (each an Object) in the proper order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this {@code LinkedList} instance from a stream\n     * (that is, deserializes it).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * and <em>fail-fast</em> {@link Spliterator} over the elements in this\n     * list.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#ORDERED}.  Overriding implementations should document\n     * the reporting of additional characteristic values.\n     *\n     * @implNote\n     * The {@code Spliterator} additionally reports {@link Spliterator#SUBSIZED}\n     * and implements {@code trySplit} to permit limited parallelism..\n     *\n     * @return a {@code Spliterator} over the elements in this list\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public LinkedList<E> reversed()",
    "returnType" : "LinkedList<E>",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * Modifications to the reversed view are permitted and will be propagated to this list.\n     * In addition, modifications to this list will be visible in the reversed view.\n     *\n     * @return {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void linkFirst(E e)", " void linkLast(E e)", " void linkBefore(E e, Node<E> succ)", "private E unlinkFirst(Node<E> f)", "private E unlinkLast(Node<E> l)", " E unlink(Node<E> x)", "public E getFirst()", "public E getLast()", "public E removeFirst()", "public E removeLast()", "public void addFirst(E e)", "public void addLast(E e)", "public boolean contains(Object o)", "public int size()", "public boolean add(E e)", "public boolean remove(Object o)", "public boolean addAll(Collection<? extends E> c)", "public boolean addAll(int index, Collection<? extends E> c)", "public void clear()", "public E get(int index)", "public E set(int index, E element)", "public void add(int index, E element)", "public E remove(int index)", "private boolean isElementIndex(int index)", "private boolean isPositionIndex(int index)", "private String outOfBoundsMsg(int index)", "private void checkElementIndex(int index)", "private void checkPositionIndex(int index)", " Node<E> node(int index)", "public int indexOf(Object o)", "public int lastIndexOf(Object o)", "public E peek()", "public E element()", "public E poll()", "public E remove()", "public boolean offer(E e)", "public boolean offerFirst(E e)", "public boolean offerLast(E e)", "public E peekFirst()", "public E peekLast()", "public E pollFirst()", "public E pollLast()", "public void push(E e)", "public E pop()", "public boolean removeFirstOccurrence(Object o)", "public boolean removeLastOccurrence(Object o)", "public ListIterator<E> listIterator(int index)", "public Iterator<E> descendingIterator()", "private LinkedList<E> superClone()", "public Object clone()", "public Object[] toArray()", "public T[] toArray(T[] a)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public Spliterator<E> spliterator()", "public LinkedList<E> reversed()" ],
  "variableNames" : [ "size", "first", "last", "serialVersionUID" ]
}