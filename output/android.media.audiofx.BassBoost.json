{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/BassBoost.java",
  "packageName" : "android.media.audiofx",
  "className" : "BassBoost",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_STRENGTH_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Is strength parameter supported by bass boost engine. Parameter ID for getParameter().\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_STRENGTH",
    "type" : "int",
    "comment" : "\n     * Bass boost effect strength. Parameter ID for\n     * {@link android.media.audiofx.BassBoost.OnParameterChangeListener}\n     ",
    "links" : [ "android.media.audiofx.BassBoost.OnParameterChangeListener" ]
  }, {
    "name" : "mStrengthSupported",
    "type" : "boolean",
    "comment" : "\n     * Indicates if strength parameter is supported by the bass boost engine\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change event from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean getStrengthSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether setting strength is supported. If this method returns false, only one\n     * strength is supported and the setStrength() method always rounds to that value.\n     * @return true is strength parameter is supported, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStrength(short strength) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the strength of the bass boost effect. If the implementation does not support per mille\n     * accuracy for setting the strength, it is allowed to round the given strength to the nearest\n     * supported value. You can use the {@link #getRoundedStrength()} method to query the\n     * (possibly rounded) value that was actually set.\n     * @param strength strength of the effect. The valid range for strength strength is [0, 1000],\n     * where 0 per mille designates the mildest effect and 1000 per mille designates the strongest.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#getRoundedStrength()" ]
  }, {
    "name" : "public short getRoundedStrength() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets the current strength of the effect.\n     * @return the strength of the effect. The valid range for strength is [0, 1000], where 0 per\n     * mille designates the mildest effect and 1000 per mille the strongest\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public BassBoost.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "BassBoost.Settings",
    "comment" : "\n     * Gets the bass boost properties. This method is useful when a snapshot of current\n     * bass boost settings must be saved by the application.\n     * @return a BassBoost.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(BassBoost.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the bass boost properties. This method is useful when bass boost settings have to\n     * be applied from a previous backup.\n     * @param settings a BassBoost.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARAM_STRENGTH_SUPPORTED", "PARAM_STRENGTH", "mStrengthSupported", "mParamListener", "mBaseParamListener", "mParamListenerLock" ],
  "methodNames" : [ "public boolean getStrengthSupported()", "public void setStrength(short strength) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getRoundedStrength() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setParameterListener(OnParameterChangeListener listener)", "public BassBoost.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(BassBoost.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ]
}