{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/hdmi/HdmiUtils.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiUtils",
  "comment" : "\n * Various utilities related to HDMI CEC.\n *\n * TODO(b/110094868): unhide for Q\n * @hide\n ",
  "variables" : [ {
    "name" : "TARGET_NOT_UNDER_LOCAL_DEVICE",
    "type" : "int",
    "comment" : "\n     * Return value of {@link #getLocalPortFromPhysicalAddress(int, int)}\n     ",
    "links" : [ "#getLocalPortFromPhysicalAddress" ]
  }, {
    "name" : "TARGET_SAME_PHYSICAL_ADDRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * HDMI relative position is not determined.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_DIRECTLY_BELOW",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: directly blow the device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_BELOW",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: indirectly below the device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_SAME",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: the same device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_DIRECTLY_ABOVE",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: directly above the device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_ABOVE",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: indirectly above the device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_SIBLING",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: directly below a same device.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HDMI_RELATIVE_POSITION_DIFFERENT_BRANCH",
    "type" : "int",
    "comment" : "\n     * HDMI relative position: different branch.\n     * TODO(b/110094868): unhide for Q\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NPOS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int getLocalPortFromPhysicalAddress(int targetPhysicalAddress, int myPhysicalAddress)",
    "returnType" : "int",
    "comment" : "\n     * Method to parse target physical address to the port number on the current device.\n     *\n     * <p>This check assumes target address is valid.\n     *\n     * @param targetPhysicalAddress is the physical address of the target device\n     * @param myPhysicalAddress is the physical address of the current device\n     * @return\n     * If the target device is under the current device, return the port number of current device\n     * that the target device is connected to. This also applies to the devices that are indirectly\n     * connected to the current device.\n     *\n     * <p>If the target device has the same physical address as the current device, return\n     * {@link #TARGET_SAME_PHYSICAL_ADDRESS}.\n     *\n     * <p>If the target device is not under the current device, return\n     * {@link #TARGET_NOT_UNDER_LOCAL_DEVICE}.\n     ",
    "links" : [ "#TARGET_SAME_PHYSICAL_ADDRESS", "#TARGET_NOT_UNDER_LOCAL_DEVICE" ]
  }, {
    "name" : "public static boolean isValidPhysicalAddress(int address)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the given physical address is valid.\n     *\n     * @param address physical address\n     * @return {@code true} if the given address is valid\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getHdmiAddressRelativePosition(int src, int dest)",
    "returnType" : "int",
    "comment" : "\n     * Returns the relative position of two physical addresses.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int physicalAddressFirstDifferentDigitPos(int address1, int address2) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TARGET_NOT_UNDER_LOCAL_DEVICE", "TARGET_SAME_PHYSICAL_ADDRESS", "HDMI_RELATIVE_POSITION_UNKNOWN", "HDMI_RELATIVE_POSITION_DIRECTLY_BELOW", "HDMI_RELATIVE_POSITION_BELOW", "HDMI_RELATIVE_POSITION_SAME", "HDMI_RELATIVE_POSITION_DIRECTLY_ABOVE", "HDMI_RELATIVE_POSITION_ABOVE", "HDMI_RELATIVE_POSITION_SIBLING", "HDMI_RELATIVE_POSITION_DIFFERENT_BRANCH", "NPOS" ],
  "methodNames" : [ "public static int getLocalPortFromPhysicalAddress(int targetPhysicalAddress, int myPhysicalAddress)", "public static boolean isValidPhysicalAddress(int address)", "public static int getHdmiAddressRelativePosition(int src, int dest)", "private static int physicalAddressFirstDifferentDigitPos(int address1, int address2) throws IllegalArgumentException" ]
}