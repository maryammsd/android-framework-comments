{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityNodeInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "ExtraRenderingInfo",
  "comment" : "\n     * Class with information of a view useful to evaluate accessibility needs. Developers can\n     * refresh the node with the key {@link #EXTRA_DATA_RENDERING_INFO_KEY} to fetch the text size\n     * and unit if it is {@link TextView} and the height and the width of layout params from\n     * {@link ViewGroup} or {@link TextView}.\n     *\n     * @see #EXTRA_DATA_RENDERING_INFO_KEY\n     * @see #refreshWithExtraData(String, Bundle)\n     ",
  "variables" : [ {
    "name" : "UNDEFINED_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<ExtraRenderingInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutSize",
    "type" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSizeInPx",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextSizeUnit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ExtraRenderingInfo obtain()",
    "returnType" : "ExtraRenderingInfo",
    "comment" : "\n         * Obtains a pooled instance.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static ExtraRenderingInfo obtain(ExtraRenderingInfo other)",
    "returnType" : "ExtraRenderingInfo",
    "comment" : " Obtains a pooled instance that is a clone of another one. ",
    "links" : [ ]
  }, {
    "name" : "public Size getLayoutSize()",
    "returnType" : "Size",
    "comment" : "\n         * Gets the size object containing the height and the width of\n         * {@link android.view.ViewGroup.LayoutParams}  if the node is a {@link ViewGroup} or\n         * a {@link TextView}, or null otherwise. Useful for some accessibility services to\n         * understand whether the text is scalable and fits the view or not.\n         *\n         * @return a {@link Size} stores layout height and layout width of the view, or null\n         * otherwise. And the size value may be in pixels,\n         * {@link android.view.ViewGroup.LayoutParams#MATCH_PARENT},\n         * or {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}\n         ",
    "links" : [ "android.view.ViewGroup.LayoutParams", "ViewGroup", "TextView", "Size", "android.view.ViewGroup.LayoutParams#MATCH_PARENT", "android.view.ViewGroup.LayoutParams#WRAP_CONTENT" ]
  }, {
    "name" : "public void setLayoutSize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Sets layout width and layout height of the view.\n         *\n         * @param width The layout width.\n         * @param height The layout height.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getTextSizeInPx()",
    "returnType" : "float",
    "comment" : "\n         * Gets the text size if the node is a {@link TextView}, or -1 otherwise. Useful for some\n         * accessibility services to understand whether the text is scalable and fits the view or\n         * not.\n         *\n         * @return the text size of a {@code TextView}, or -1 otherwise.\n         ",
    "links" : [ "TextView" ]
  }, {
    "name" : "public void setTextSizeInPx(float textSizeInPx)",
    "returnType" : "void",
    "comment" : "\n         * Sets text size of the view.\n         *\n         * @param textSizeInPx The text size in pixels.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getTextSizeUnit()",
    "returnType" : "int",
    "comment" : "\n         * Gets the text size unit if the node is a {@link TextView}, or -1 otherwise.\n         * Text size returned from {@link #getTextSizeInPx} in raw pixels may scale by factors and\n         * convert from other units. Useful for some accessibility services to understand whether\n         * the text is scalable and fits the view or not.\n         *\n         * @return the text size unit which type is {@link TypedValue#TYPE_DIMENSION} of a\n         *         {@code TextView}, or -1 otherwise.\n         *\n         * @see TypedValue#TYPE_DIMENSION\n         ",
    "links" : [ "TextView", "#getTextSizeInPx", "TypedValue#TYPE_DIMENSION" ]
  }, {
    "name" : "public void setTextSizeUnit(int textSizeUnit)",
    "returnType" : "void",
    "comment" : "\n         * Sets text size unit of the view.\n         *\n         * @param textSizeUnit The text size unit.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void recycle()",
    "returnType" : "void",
    "comment" : "\n         * Recycles this instance.\n         *\n         * <p>In most situations object pooling is not beneficial, and recycling is not necessary.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNDEFINED_VALUE", "MAX_POOL_SIZE", "sPool", "mLayoutSize", "mTextSizeInPx", "mTextSizeUnit" ],
  "methodNames" : [ "public static ExtraRenderingInfo obtain()", "private static ExtraRenderingInfo obtain(ExtraRenderingInfo other)", "public Size getLayoutSize()", "public void setLayoutSize(int width, int height)", "public float getTextSizeInPx()", "public void setTextSizeInPx(float textSizeInPx)", "public int getTextSizeUnit()", "public void setTextSizeUnit(int textSizeUnit)", " void recycle()", "private void clear()" ]
}