{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceControlRegistry.java",
  "packageName" : "android.view",
  "className" : "SurfaceControlRegistry",
  "comment" : "\n * A thread-safe registry used to track surface controls that are active (not yet released) within a\n * process, to help debug and identify leaks.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LAYERS_REPORTING_THRESHOLD",
    "type" : "int",
    "comment" : " smaller than the MAX_LAYERS (currently 4096) defined in SurfaceFlinger.h",
    "links" : [ ]
  }, {
    "name" : "RESET_REPORTING_THRESHOLD",
    "type" : "int",
    "comment" : " MAX_LAYERS_REPORTING_THRESHOLD",
    "links" : [ ]
  }, {
    "name" : "DUMP_LIMIT",
    "type" : "int",
    "comment" : " Number of surface controls to dump when the max threshold is exceeded",
    "links" : [ ]
  }, {
    "name" : "NO_OP_REGISTRY",
    "type" : "SurfaceControlRegistry",
    "comment" : " An instance of a registry that is a no-op",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : " Static lock, must be held for all registry operations",
    "links" : [ ]
  }, {
    "name" : "sDefaultReporter",
    "type" : "DefaultReporter",
    "comment" : " The default reporter for printing out the registered surfaces",
    "links" : [ ]
  }, {
    "name" : "sProcessRegistry",
    "type" : "SurfaceControlRegistry",
    "comment" : " The registry for a given process",
    "links" : [ ]
  }, {
    "name" : "sCallStackDebuggingInitialized",
    "type" : "boolean",
    "comment" : " instance when the first SurfaceControl.Transaction object is created",
    "links" : [ ]
  }, {
    "name" : "sCallStackDebuggingEnabled",
    "type" : "boolean",
    "comment" : " for either a specific surface control name or surface control transaction method",
    "links" : [ ]
  }, {
    "name" : "sCallStackDebuggingMatchName",
    "type" : "String",
    "comment" : " sCallStackDebuggingEnabled is true.  Can be combined with the match call.",
    "links" : [ ]
  }, {
    "name" : "sCallStackDebuggingMatchCall",
    "type" : "String",
    "comment" : " sCallStackDebuggingEnabled is true.  Can be combined with the match name.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControls",
    "type" : "WeakHashMap<SurfaceControl, Long>",
    "comment" : " Mapping of the active SurfaceControls to the elapsed time when they were registered",
    "links" : [ ]
  }, {
    "name" : "mMaxLayersReportingThreshold",
    "type" : "int",
    "comment" : " mResetReportingThreshold to ensure that we don't spam logcat.",
    "links" : [ ]
  }, {
    "name" : "mResetReportingThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasReportedExceedingMaxThreshold",
    "type" : "boolean",
    "comment" : " already reported the set of registered surfaces.",
    "links" : [ ]
  }, {
    "name" : "mReporter",
    "type" : "Reporter",
    "comment" : " The handler for when the registry exceeds the max threshold",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setReportingThresholds(int maxLayersReportingThreshold, int resetReportingThreshold, Reporter reporter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the thresholds at which the registry reports errors.\n     * @param maxLayersReportingThreshold The max threshold (inclusive)\n     * @param resetReportingThreshold The reset threshold (inclusive)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallStackDebuggingParams(String matchName, String matchCall)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void createProcessInstance(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Creates and initializes the registry for all SurfaceControls in this process. The caller must\n     * hold the READ_FRAME_BUFFER permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void destroyProcessInstance()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the previously created registry this process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControlRegistry getProcessInstance()",
    "returnType" : "SurfaceControlRegistry",
    "comment" : "\n     * Returns the instance of the registry for this process, only non-null if\n     * createProcessInstance(Context) was previously called from a valid caller.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(SurfaceControl sc)",
    "returnType" : "void",
    "comment" : "\n     * Adds a SurfaceControl to the registry.\n     ",
    "links" : [ ]
  }, {
    "name" : " void remove(SurfaceControl sc)",
    "returnType" : "void",
    "comment" : "\n     * Removes a SurfaceControl from the registry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash of this registry and is a function of all the active surface controls. This\n     * is useful for testing to determine whether the registry has changed between creating and\n     * destroying new SurfaceControls.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final void initializeCallStackDebugging()",
    "returnType" : "void",
    "comment" : "\n     * Initializes global call stack debugging if this is a debug build and a filter is specified.\n     * This is a no-op if\n     *\n     * Usage:\n     *   adb shell setprop persist.wm.debug.sc.tx.log_match_call <call or \\\"\\\" to unset>\n     *   adb shell setprop persist.wm.debug.sc.tx.log_match_name <name or \\\"\\\" to unset>\n     *   adb reboot\n     ",
    "links" : [ ]
  }, {
    "name" : " final void checkCallStackDebugging(@NonNull String call, @Nullable SurfaceControl.Transaction tx, @Nullable SurfaceControl sc, @Nullable String details)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the callstack if it matches the global debug properties. Caller should first verify\n     * {@link #sCallStackDebuggingEnabled} is true.\n     *\n     * @param call the name of the call\n     * @param tx (optional) the transaction associated with this call\n     * @param sc the affected surface\n     * @param details additional details to print with the stack track\n     ",
    "links" : [ "#sCallStackDebuggingEnabled" ]
  }, {
    "name" : "public final boolean matchesForCallStackDebugging(@Nullable String name, @NonNull String call)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether the given surface control name/method call matches the filters set for the\n     * call stack debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final boolean isCallStackDebuggingEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether call stack debugging is enabled for this process.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void runGcAndFinalizers()",
    "returnType" : "void",
    "comment" : "\n     * Forces the gc and finalizers to run, used prior to dumping to ensure we only dump strongly\n     * referenced surface controls.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dump(int limit, boolean runGc, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Dumps information about the set of SurfaceControls in the registry.\n     *\n     * @param limit the number of layers to report\n     * @param runGc whether to run the GC and finalizers before dumping\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setReportingThresholds(int maxLayersReportingThreshold, int resetReportingThreshold, Reporter reporter)", "public void setCallStackDebuggingParams(String matchName, String matchCall)", "public static void createProcessInstance(Context context)", "public static void destroyProcessInstance()", "public static SurfaceControlRegistry getProcessInstance()", " void add(SurfaceControl sc)", " void remove(SurfaceControl sc)", "public int hashCode()", " static final void initializeCallStackDebugging()", " final void checkCallStackDebugging(@NonNull String call, @Nullable SurfaceControl.Transaction tx, @Nullable SurfaceControl sc, @Nullable String details)", "public final boolean matchesForCallStackDebugging(@Nullable String name, @NonNull String call)", " static final boolean isCallStackDebuggingEnabled()", "private static void runGcAndFinalizers()", "public static void dump(int limit, boolean runGc, PrintWriter pw)" ],
  "variableNames" : [ "TAG", "MAX_LAYERS_REPORTING_THRESHOLD", "RESET_REPORTING_THRESHOLD", "DUMP_LIMIT", "NO_OP_REGISTRY", "sLock", "sDefaultReporter", "sProcessRegistry", "sCallStackDebuggingInitialized", "sCallStackDebuggingEnabled", "sCallStackDebuggingMatchName", "sCallStackDebuggingMatchCall", "mSurfaceControls", "mMaxLayersReportingThreshold", "mResetReportingThreshold", "mHasReportedExceedingMaxThreshold", "mReporter" ]
}