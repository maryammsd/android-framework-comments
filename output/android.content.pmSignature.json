{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/Signature.java",
  "packageName" : "android.content.pm",
  "className" : "Signature",
  "comment" : "\n * Opaque, immutable representation of a signing certificate associated with an\n * application package.\n * <p>\n * This class name is slightly misleading, since it's not actually a signature.\n ",
  "variables" : [ {
    "name" : "mSignature",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHaveHashCode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStringRef",
    "type" : "SoftReference<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCertificateChain",
    "type" : "Certificate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * APK Signature Scheme v3 includes support for adding a proof-of-rotation record that\n     * contains two pieces of information:\n     *   1) the past signing certificates\n     *   2) the flags that APK wants to assign to each of the past signing certificates.\n     *\n     * These flags represent the second piece of information and are viewed as capabilities.\n     * They are an APK's way of telling the platform: \"this is how I want to trust my old certs,\n     * please enforce that.\" This is useful for situation where this app itself is using its\n     * signing certificate as an authorization mechanism, like whether or not to allow another\n     * app to have its SIGNATURE permission.  An app could specify whether to allow other apps\n     * signed by its old cert 'X' to still get a signature permission it defines, for example.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Signature>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static final int parseHexDigit(int nibble)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Sets the flags representing the capabilities of the past signing certificate.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Returns the flags representing the capabilities of the past signing certificate.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] toChars()",
    "returnType" : "char[]",
    "comment" : "\n     * Encode the Signature as ASCII text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public char[] toChars(char[] existingArray, int[] outLen)",
    "returnType" : "char[]",
    "comment" : "\n     * Encode the Signature as ASCII text in to an existing array.\n     *\n     * @param existingArray Existing char array or null.\n     * @param outLen Output parameter for the number of characters written in\n     * to the array.\n     * @return Returns either <var>existingArray</var> if it was large enough\n     * to hold the ASCII representation, or a newly created char[] array if\n     * needed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toCharsString()",
    "returnType" : "String",
    "comment" : "\n     * Return the result of {@link #toChars()} as a String.\n     ",
    "links" : [ "#toChars" ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the contents of this signature as a byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public PublicKey getPublicKey() throws CertificateException",
    "returnType" : "PublicKey",
    "comment" : "\n     * Returns the public key for this signature.\n     *\n     * @throws CertificateException when Signature isn't a valid X.509\n     *             certificate; shouldn't happen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Signature[] getChainSignatures() throws CertificateEncodingException",
    "returnType" : "Signature[]",
    "comment" : "\n     * Used for compatibility code that needs to check the certificate chain\n     * during upgrades.\n     *\n     * @throws CertificateEncodingException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean areExactMatch(Signature[] a, Signature[] b)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given {@link Signature} sets are exactly equal.\n     *\n     * @hide\n     ",
    "links" : [ "Signature" ]
  }, {
    "name" : "public static boolean areEffectiveMatch(Signature[] a, Signature[] b) throws CertificateException",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given {@link Signature} sets are effectively equal. In rare\n     * cases, certificates can have slightly malformed encoding which causes\n     * exact-byte checks to fail.\n     * <p>\n     * To identify effective equality, we bounce the certificates through an\n     * decode/encode pass before doing the exact-byte check. To reduce attack\n     * surface area, we only allow a byte size delta of a few bytes.\n     *\n     * @throws CertificateException if the before/after length differs\n     *             substantially, usually a signal of something fishy going on.\n     * @hide\n     ",
    "links" : [ "Signature" ]
  }, {
    "name" : "public static boolean areEffectiveMatch(Signature a, Signature b) throws CertificateException",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given {@link Signature} objects are effectively equal. In rare\n     * cases, certificates can have slightly malformed encoding which causes\n     * exact-byte checks to fail.\n     * <p>\n     * To identify effective equality, we bounce the certificates through an\n     * decode/encode pass before doing the exact-byte check. To reduce attack\n     * surface area, we only allow a byte size delta of a few bytes.\n     *\n     * @throws CertificateException if the before/after length differs\n     *             substantially, usually a signal of something fishy going on.\n     * @hide\n     ",
    "links" : [ "Signature" ]
  }, {
    "name" : "public static Signature bounce(CertificateFactory cf, Signature s) throws CertificateException",
    "returnType" : "Signature",
    "comment" : "\n     * Bounce the given {@link Signature} through a decode/encode cycle.\n     *\n     * @throws CertificateException if the before/after length differs\n     *             substantially, usually a signal of something fishy going on.\n     * @hide\n     ",
    "links" : [ "Signature" ]
  } ],
  "variableNames" : [ "mSignature", "mHashCode", "mHaveHashCode", "mStringRef", "mCertificateChain", "mFlags", "CREATOR" ],
  "methodNames" : [ "private static final int parseHexDigit(int nibble)", "public void setFlags(int flags)", "public int getFlags()", "public char[] toChars()", "public char[] toChars(char[] existingArray, int[] outLen)", "public String toCharsString()", "public byte[] toByteArray()", "public PublicKey getPublicKey() throws CertificateException", "public Signature[] getChainSignatures() throws CertificateEncodingException", "public boolean equals(Object obj)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public static boolean areExactMatch(Signature[] a, Signature[] b)", "public static boolean areEffectiveMatch(Signature[] a, Signature[] b) throws CertificateException", "public static boolean areEffectiveMatch(Signature a, Signature b) throws CertificateException", "public static Signature bounce(CertificateFactory cf, Signature s) throws CertificateException" ]
}