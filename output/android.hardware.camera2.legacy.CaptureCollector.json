{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/CaptureCollector.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "CaptureCollector",
  "comment" : "\n * Collect timestamps and state for each {@link CaptureRequest} as it passes through\n * the Legacy camera pipeline.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_JPEG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_JPEG_TS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_PREVIEW_TS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_ALL_JPEG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_RECEIVED_ALL_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_JPEGS_IN_FLIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveRequests",
    "type" : "TreeSet<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJpegCaptureQueue",
    "type" : "ArrayDeque<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJpegProduceQueue",
    "type" : "ArrayDeque<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewCaptureQueue",
    "type" : "ArrayDeque<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewProduceQueue",
    "type" : "ArrayDeque<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompletedRequests",
    "type" : "ArrayList<CaptureHolder>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "ReentrantLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEmpty",
    "type" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewsEmpty",
    "type" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNotFull",
    "type" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceState",
    "type" : "CameraDeviceState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInFlight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInFlightPreviews",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxInFlight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean queueRequest(RequestHolder holder, LegacyRequest legacy, long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Queue a new request.\n     *\n     * <p>\n     * For requests that use the Camera1 API preview output stream, this will block if there are\n     * already {@code maxInFlight} requests in progress (until at least one prior request has\n     * completed). For requests that use the Camera1 API jpeg callbacks, this will block until\n     * all prior requests have been completed to avoid stopping preview for\n     * {@link android.hardware.Camera#takePicture} before prior preview requests have been\n     * completed.\n     * </p>\n     * @param holder the {@link RequestHolder} for this request.\n     * @param legacy the {@link LegacyRequest} for this request; this will not be mutated.\n     * @param timeout a timeout to use for this call.\n     * @param unit the units to use for the timeout.\n     * @return {@code false} if this method timed out.\n     * @throws InterruptedException if this thread is interrupted.\n     ",
    "links" : [ "android.hardware.camera2.legacy.LegacyRequest", "android.hardware.Camera#takePicture", "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "public boolean waitForEmpty(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Wait all queued requests to complete.\n     *\n     * @param timeout a timeout to use for this call.\n     * @param unit the units to use for the timeout.\n     * @return {@code false} if this method timed out.\n     * @throws InterruptedException if this thread is interrupted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean waitForPreviewsEmpty(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Wait all queued requests that use the Camera1 API preview output to complete.\n     *\n     * @param timeout a timeout to use for this call.\n     * @param unit the units to use for the timeout.\n     * @return {@code false} if this method timed out.\n     * @throws InterruptedException if this thread is interrupted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean waitForRequestCompleted(RequestHolder holder, long timeout, TimeUnit unit, MutableLong timestamp) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Wait for the specified request to be completed (all buffers available).\n     *\n     * <p>May not wait for the same request more than once, since a successful wait\n     * will erase the history of that request.</p>\n     *\n     * @param holder the {@link RequestHolder} for this request.\n     * @param timeout a timeout to use for this call.\n     * @param unit the units to use for the timeout.\n     * @param timestamp the timestamp of the request will be written out to here, in ns\n     *\n     * @return {@code false} if this method timed out.\n     *\n     * @throws InterruptedException if this thread is interrupted.\n     ",
    "links" : [ "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "private boolean removeRequestIfCompleted(RequestHolder holder, MutableLong timestamp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RequestHolder jpegCaptured(long timestamp)",
    "returnType" : "RequestHolder",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the jpeg capture has begun.\n     *\n     * @param timestamp the time of the jpeg capture.\n     * @return the {@link RequestHolder} for the request associated with this capture.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector", "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "public Pair<RequestHolder, Long> jpegProduced()",
    "returnType" : "Pair<RequestHolder, Long>",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the jpeg capture has completed.\n     *\n     * @return a pair containing the {@link RequestHolder} and the timestamp of the capture.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector", "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "public boolean hasPendingPreviewCaptures()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any pending capture requests that use the Camera1 API preview output.\n     *\n     * @return {@code true} if there are pending preview requests.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Pair<RequestHolder, Long> previewCaptured(long timestamp)",
    "returnType" : "Pair<RequestHolder, Long>",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the preview capture has begun.\n     *\n     * @param timestamp the time of the preview capture.\n     * @return a pair containing the {@link RequestHolder} and the timestamp of the capture.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector", "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "public RequestHolder previewProduced()",
    "returnType" : "RequestHolder",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the preview capture has completed.\n     *\n     * @return the {@link RequestHolder} for the request associated with this capture.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector", "android.hardware.camera2.legacy.RequestHolder" ]
  }, {
    "name" : "public void failNextPreview()",
    "returnType" : "void",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the next pending preview capture has failed.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector" ]
  }, {
    "name" : "public void failNextJpeg()",
    "returnType" : "void",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} that the next pending jpeg capture has failed.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector" ]
  }, {
    "name" : "public void failAll()",
    "returnType" : "void",
    "comment" : "\n     * Called to alert the {@link CaptureCollector} all pending captures have failed.\n     ",
    "links" : [ "android.hardware.camera2.legacy.CaptureCollector" ]
  }, {
    "name" : "private void onPreviewCompleted()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onRequestCompleted(CaptureHolder capture)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "FLAG_RECEIVED_JPEG", "FLAG_RECEIVED_JPEG_TS", "FLAG_RECEIVED_PREVIEW", "FLAG_RECEIVED_PREVIEW_TS", "FLAG_RECEIVED_ALL_JPEG", "FLAG_RECEIVED_ALL_PREVIEW", "MAX_JPEGS_IN_FLIGHT", "mActiveRequests", "mJpegCaptureQueue", "mJpegProduceQueue", "mPreviewCaptureQueue", "mPreviewProduceQueue", "mCompletedRequests", "mLock", "mIsEmpty", "mPreviewsEmpty", "mNotFull", "mDeviceState", "mInFlight", "mInFlightPreviews", "mMaxInFlight" ],
  "methodNames" : [ "public boolean queueRequest(RequestHolder holder, LegacyRequest legacy, long timeout, TimeUnit unit) throws InterruptedException", "public boolean waitForEmpty(long timeout, TimeUnit unit) throws InterruptedException", "public boolean waitForPreviewsEmpty(long timeout, TimeUnit unit) throws InterruptedException", "public boolean waitForRequestCompleted(RequestHolder holder, long timeout, TimeUnit unit, MutableLong timestamp) throws InterruptedException", "private boolean removeRequestIfCompleted(RequestHolder holder, MutableLong timestamp)", "public RequestHolder jpegCaptured(long timestamp)", "public Pair<RequestHolder, Long> jpegProduced()", "public boolean hasPendingPreviewCaptures()", "public Pair<RequestHolder, Long> previewCaptured(long timestamp)", "public RequestHolder previewProduced()", "public void failNextPreview()", "public void failNextJpeg()", "public void failAll()", "private void onPreviewCompleted()", "private void onRequestCompleted(CaptureHolder capture)" ]
}