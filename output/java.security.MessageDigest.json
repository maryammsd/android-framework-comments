{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/MessageDigest.java",
  "packageName" : "java.security",
  "className" : "MessageDigest",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL",
    "type" : "int",
    "comment" : " The state of this digest",
    "links" : [ ]
  }, {
    "name" : "IN_PROGRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MessageDigest getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "MessageDigest",
    "comment" : "\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code MessageDigestSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static MessageDigest getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "MessageDigest",
    "comment" : "\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static MessageDigest getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "MessageDigest",
    "comment" : "\n     * Returns a MessageDigest object that implements the specified digest\n     * algorithm.\n     *\n     * <p> A new MessageDigest object encapsulating the\n     * MessageDigestSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the algorithm requested.\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return a {@code MessageDigest} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code MessageDigestSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this message digest object.\n     *\n     * @return the provider of this message digest object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(byte input)",
    "returnType" : "void",
    "comment" : "\n     * Updates the digest using the specified byte.\n     *\n     * @param input the byte with which to update the digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(byte[] input, int offset, int len)",
    "returnType" : "void",
    "comment" : "\n     * Updates the digest using the specified array of bytes, starting\n     * at the specified offset.\n     *\n     * @param input the array of bytes.\n     *\n     * @param offset the offset to start from in the array of bytes.\n     *\n     * @param len the number of bytes to use, starting at\n     * {@code offset}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(byte[] input)",
    "returnType" : "void",
    "comment" : "\n     * Updates the digest using the specified array of bytes.\n     *\n     * @param input the array of bytes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void update(ByteBuffer input)",
    "returnType" : "void",
    "comment" : "\n     * Update the digest using the specified ByteBuffer. The digest is\n     * updated using the {@code input.remaining()} bytes starting\n     * at {@code input.position()}.\n     * Upon return, the buffer's position will be equal to its limit;\n     * its limit will not have changed.\n     *\n     * @param input the ByteBuffer\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] digest()",
    "returnType" : "byte[]",
    "comment" : "\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @return the array of bytes for the resulting hash value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int digest(byte[] buf, int offset, int len) throws DigestException",
    "returnType" : "int",
    "comment" : "\n     * Completes the hash computation by performing final operations\n     * such as padding. The digest is reset after this call is made.\n     *\n     * @param buf output buffer for the computed digest\n     *\n     * @param offset offset into the output buffer to begin storing the digest\n     *\n     * @param len number of bytes within buf allotted for the digest\n     *\n     * @return the number of bytes placed into {@code buf}\n     *\n     * @exception DigestException if an error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] digest(byte[] input)",
    "returnType" : "byte[]",
    "comment" : "\n     * Performs a final update on the digest using the specified array\n     * of bytes, then completes the digest computation. That is, this\n     * method first calls {@link #update(byte[]) update(input)},\n     * passing the <i>input</i> array to the {@code update} method,\n     * then calls {@link #digest() digest()}.\n     *\n     * @param input the input to be updated before the digest is\n     * completed.\n     *\n     * @return the array of bytes for the resulting hash value.\n     ",
    "links" : [ "#update(byte", "#digest()" ]
  }, {
    "name" : "private String getProviderName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this message digest object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isEqual(byte[] digesta, byte[] digestb)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares two digests for equality. Two digests are equal if they have\n     * the same length and all bytes at corresponding positions are equal.\n     *\n     * @implNote\n     * All bytes in {@code digesta} are examined to determine equality.\n     * The calculation time depends only on the length of {@code digesta}.\n     * It does not depend on the length of {@code digestb} or the contents\n     * of {@code digesta} and {@code digestb}.\n     *\n     * @param digesta one of the digests to compare.\n     *\n     * @param digestb the other digest to compare.\n     *\n     * @return true if the digests are equal, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the digest for further use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that identifies the algorithm, independent of\n     * implementation details. The name should be a standard\n     * Java Security name (such as \"SHA-256\").\n     * See the MessageDigest section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#messagedigest-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return the name of the algorithm\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getDigestLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the digest in bytes, or 0 if this operation is\n     * not supported by the provider and the implementation is not cloneable.\n     *\n     * @return the digest length in bytes, or 0 if this operation is not\n     * supported by the provider and the implementation is not cloneable.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Returns a clone if the implementation is cloneable.\n     *\n     * @return a clone if the implementation is cloneable.\n     *\n     * @exception CloneNotSupportedException if this is called on an\n     * implementation that does not support {@code Cloneable}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MessageDigest getInstance(String algorithm) throws NoSuchAlgorithmException", "public static MessageDigest getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static MessageDigest getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public void update(byte input)", "public void update(byte[] input, int offset, int len)", "public void update(byte[] input)", "public final void update(ByteBuffer input)", "public byte[] digest()", "public int digest(byte[] buf, int offset, int len) throws DigestException", "public byte[] digest(byte[] input)", "private String getProviderName()", "public String toString()", "public static boolean isEqual(byte[] digesta, byte[] digestb)", "public void reset()", "public final String getAlgorithm()", "public final int getDigestLength()", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ "algorithm", "INITIAL", "IN_PROGRESS", "state", "provider" ]
}