{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/res/AssetFileDescriptor.java",
  "packageName" : "android.content.res",
  "className" : "AssetFileDescriptor",
  "comment" : "\n * File descriptor of an entry in the AssetManager.  This provides your own\n * opened FileDescriptor that can be used to read the data, as well as the\n * offset and length of that entry's data in the file.\n ",
  "variables" : [ {
    "name" : "UNKNOWN_LENGTH",
    "type" : "long",
    "comment" : "\n     * Length used with {@link #AssetFileDescriptor(ParcelFileDescriptor, long, long)}\n     * and {@link #getDeclaredLength} when a length has not been declared.  This means\n     * the data extends to the end of the file.\n     ",
    "links" : [ "#getDeclaredLength", "#AssetFileDescriptor(ParcelFileDescriptor" ]
  }, {
    "name" : "mFd",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartOffset",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AssetFileDescriptor>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ParcelFileDescriptor getParcelFileDescriptor()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * The AssetFileDescriptor contains its own ParcelFileDescriptor, which\n     * in addition to the normal FileDescriptor object also allows you to close\n     * the descriptor when you are done with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns the FileDescriptor that can be used to read the data in the\n     * file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStartOffset()",
    "returnType" : "long",
    "comment" : "\n     * Returns the byte offset where this asset entry's data starts.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns any additional details that can be used to interpret the\n     * underlying file descriptor. May be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLength()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total number of bytes of this asset entry's data.  May be\n     * {@link #UNKNOWN_LENGTH} if the asset extends to the end of the file.\n     * If the AssetFileDescriptor was constructed with {@link #UNKNOWN_LENGTH},\n     * this will use {@link ParcelFileDescriptor#getStatSize()\n     * ParcelFileDescriptor.getStatSize()} to find the total size of the file,\n     * returning that number if found or {@link #UNKNOWN_LENGTH} if it could\n     * not be determined.\n     * \n     * @see #getDeclaredLength()\n     ",
    "links" : [ "android.os.ParcelFileDescriptor#getStatSize()", "#UNKNOWN_LENGTH" ]
  }, {
    "name" : "public long getDeclaredLength()",
    "returnType" : "long",
    "comment" : "\n     * Return the actual number of bytes that were declared when the\n     * AssetFileDescriptor was constructed.  Will be\n     * {@link #UNKNOWN_LENGTH} if the length was not declared, meaning data\n     * should be read to the end of the file.\n     * \n     * @see #getDeclaredLength()\n     ",
    "links" : [ "#UNKNOWN_LENGTH" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Convenience for calling <code>getParcelFileDescriptor().close()</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream createInputStream() throws IOException",
    "returnType" : "FileInputStream",
    "comment" : "\n     * Create and return a new auto-close input stream for this asset.  This\n     * will either return a full asset {@link AutoCloseInputStream}, or\n     * an underlying {@link ParcelFileDescriptor.AutoCloseInputStream\n     * ParcelFileDescriptor.AutoCloseInputStream} depending on whether the\n     * the object represents a complete file or sub-section of a file.  You\n     * should only call this once for a particular asset.\n     ",
    "links" : [ "ParcelFileDescriptor.AutoCloseInputStreamParcelFileDescriptor.AutoCloseInputStream", "AutoCloseInputStream" ]
  }, {
    "name" : "public FileOutputStream createOutputStream() throws IOException",
    "returnType" : "FileOutputStream",
    "comment" : "\n     * Create and return a new auto-close output stream for this asset.  This\n     * will either return a full asset {@link AutoCloseOutputStream}, or\n     * an underlying {@link ParcelFileDescriptor.AutoCloseOutputStream\n     * ParcelFileDescriptor.AutoCloseOutputStream} depending on whether the\n     * the object represents a complete file or sub-section of a file.  You\n     * should only call this once for a particular asset.\n     ",
    "links" : [ "AutoCloseOutputStream", "ParcelFileDescriptor.AutoCloseOutputStreamParcelFileDescriptor.AutoCloseOutputStream" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "UNKNOWN_LENGTH", "mFd", "mStartOffset", "mLength", "mExtras", "CREATOR" ],
  "methodNames" : [ "public ParcelFileDescriptor getParcelFileDescriptor()", "public FileDescriptor getFileDescriptor()", "public long getStartOffset()", "public Bundle getExtras()", "public long getLength()", "public long getDeclaredLength()", "public void close() throws IOException", "public FileInputStream createInputStream() throws IOException", "public FileOutputStream createOutputStream() throws IOException", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)" ]
}