{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/DOM2Helper.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "DOM2Helper",
  "comment" : "\n * @deprecated Since the introduction of the DTM, this class will be removed.\n * This class provides a DOM level 2 \"helper\", which provides services currently \n * not provided be the DOM standard.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_doc",
    "type" : "Document",
    "comment" : " Field m_doc: Document Node for the document this helper is currently\n   * accessing or building\n   * @see #setDocument\n   * @see #getDocument\n   *  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void checkNode(Node node) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Check node to see if it was created by a DOM implementation\n   * that this helper is intended to support. This is currently\n   * disabled, and assumes all nodes are acceptable rather than checking\n   * that they implement org.apache.xerces.dom.NodeImpl.\n   *\n   * @param node The node to be tested.\n   *\n   * @throws TransformerException if the node is not one which this\n   * DOM2Helper can support. If we return without throwing the exception,\n   * the node is compatable.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSAX()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if the DOM implementation handled by this helper\n   * supports the SAX ContentHandler interface.\n   *\n   * @return true (since Xerces does).\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDocument(Document doc)",
    "returnType" : "void",
    "comment" : "\n   * Specify which document this helper is currently operating on.\n   * \t\n   * @param doc The DOM Document node for this document.\n   * @see #getDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "public Document getDocument()",
    "returnType" : "Document",
    "comment" : "\n   * Query which document this helper is currently operating on.\n   * \t\n   * @return The DOM Document node for this document.\n   * @see #setDocument\n   ",
    "links" : [ ]
  }, {
    "name" : "public void parse(InputSource source) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Parse an XML document.\n   *\n   * <p>Right now the Xerces DOMParser class is used.  This needs\n   * fixing, either via jaxp, or via some other, standard method.</p>\n   *\n   * <p>The application can use this method to instruct the SAX parser\n   * to begin parsing an XML document from any valid input\n   * source (a character stream, a byte stream, or a URI).</p>\n   *\n   * <p>Applications may not invoke this method while a parse is in\n   * progress (they should create a new Parser instead for each\n   * additional XML document).  Once a parse is complete, an\n   * application may reuse the same Parser object, possibly with a\n   * different input source.</p>\n   *\n   * @param source The input source for the top-level of the\n   *        XML document.\n   *\n   * @throws TransformerException if any checked exception is thrown.\n   * @xsl.usage internal\n   ",
    "links" : [ ]
  }, {
    "name" : "public Element getElementByID(String id, Document doc)",
    "returnType" : "Element",
    "comment" : "\n   * Given an XML ID, return the element. This requires assistance from the\n   * DOM and parser, and is meaningful only in the context of a DTD \n   * or schema which declares attributes as being of type ID. This\n   * information may or may not be available in all parsers, may or\n   * may not be available for specific documents, and may or may not\n   * be available when validation is not turned on.\n   *\n   * @param id The ID to search for, as a String.\n   * @param doc The document to search within, as a DOM Document node.\n   * @return DOM Element node with an attribute of type ID whose value\n   * uniquely matches the requested id string, or null if there isn't\n   * such an element or if the DOM can't answer the question for other\n   * reasons.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNodeAfter(Node node1, Node node2)",
    "returnType" : "boolean",
    "comment" : "\n   * Figure out whether node2 should be considered as being later\n   * in the document than node1, in Document Order as defined\n   * by the XPath model. This may not agree with the ordering defined\n   * by other XML applications.\n   * <p>\n   * There are some cases where ordering isn't defined, and neither are\n   * the results of this function -- though we'll generally return true.\n   * <p>\n   * TODO: Make sure this does the right thing with attribute nodes!!!\n   *\n   * @param node1 DOM Node to perform position comparison on.\n   * @param node2 DOM Node to perform position comparison on .\n   * \n   * @return false if node2 comes before node1, otherwise return true.\n   * You can think of this as \n   * <code>(node1.documentOrderPosition &lt;= node2.documentOrderPosition)</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static Node getParentOfNode(Node node)",
    "returnType" : "Node",
    "comment" : "\n   * Get the XPath-model parent of a node.  This version takes advantage\n   * of the DOM Level 2 Attr.ownerElement() method; the base version we\n   * would otherwise inherit is prepared to fall back on exhaustively\n   * walking the document to find an Attr's parent.\n   *\n   * @param node Node to be examined\n   *\n   * @return the DOM parent of the input node, if there is one, or the\n   * ownerElement if the input node is an Attr, or null if the node is\n   * a Document, a DocumentFragment, or an orphan.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalNameOfNode(Node n)",
    "returnType" : "String",
    "comment" : "\n   * Returns the local name of the given node, as defined by the\n   * XML Namespaces specification. This is prepared to handle documents\n   * built using DOM Level 1 methods by falling back upon explicitly\n   * parsing the node name.\n   *\n   * @param n Node to be examined\n   *\n   * @return String containing the local name, or null if the node\n   * was not assigned a Namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceOfNode(Node n)",
    "returnType" : "String",
    "comment" : "\n   * Returns the Namespace Name (Namespace URI) for the given node.\n   * In a Level 2 DOM, you can ask the node itself. Note, however, that\n   * doing so conflicts with our decision in getLocalNameOfNode not\n   * to trust the that the DOM was indeed created using the Level 2\n   * methods. If Level 1 methods were used, these two functions will\n   * disagree with each other.\n   * <p>\n   * TODO: Reconcile with getLocalNameOfNode.\n   *\n   * @param n Node to be examined\n   *\n   * @return String containing the Namespace URI bound to this DOM node\n   * at the time the Node was created.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void checkNode(Node node) throws TransformerException", "public boolean supportsSAX()", "public void setDocument(Document doc)", "public Document getDocument()", "public void parse(InputSource source) throws TransformerException", "public Element getElementByID(String id, Document doc)", "public static boolean isNodeAfter(Node node1, Node node2)", "public static Node getParentOfNode(Node node)", "public String getLocalNameOfNode(Node n)", "public String getNamespaceOfNode(Node n)" ],
  "variableNames" : [ "m_doc" ]
}