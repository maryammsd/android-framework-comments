{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/incremental/IncrementalManager.java",
  "packageName" : "android.os.incremental",
  "className" : "IncrementalManager",
  "comment" : "\n * Provides operations to open or create an IncrementalStorage, using IIncrementalService\n * service. Example Usage:\n *\n * <blockquote><pre>\n * IncrementalManager manager = (IncrementalManager) getSystemService(Context.INCREMENTAL_SERVICE);\n * IncrementalStorage storage = manager.openStorage(\"/path/to/incremental/dir\");\n * </pre></blockquote>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOWED_PROPERTY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATE_MODE_TEMPORARY_BIND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATE_MODE_PERMANENT_BIND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATE_MODE_CREATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATE_MODE_OPEN_EXISTING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IIncrementalService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStorages",
    "type" : "SparseArray<IncrementalStorage>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IncrementalStorage getStorage(int storageId)",
    "returnType" : "IncrementalStorage",
    "comment" : " TODO(b/136132412): remove this",
    "links" : [ ]
  }, {
    "name" : "public IncrementalStorage createStorage(@NonNull String path, @NonNull DataLoaderParams params, @CreateMode int createMode, boolean autoStartDataLoader, @Nullable IDataLoaderStatusListener statusListener, @Nullable StorageHealthCheckParams healthCheckParams, @Nullable IStorageHealthListener healthListener)",
    "returnType" : "IncrementalStorage",
    "comment" : "\n     * Opens or create an Incremental File System mounted directory and returns an\n     * IncrementalStorage object.\n     *\n     * @param path                Absolute path to mount Incremental File System on.\n     * @param params              IncrementalDataLoaderParams object to configure data loading.\n     * @param createMode          Mode for opening an old Incremental File System mount or creating\n     *                            a new mount.\n     * @param autoStartDataLoader Set true to immediately start data loader after creating storage.\n     * @return IncrementalStorage object corresponding to the mounted directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IncrementalStorage openStorage(@NonNull String path)",
    "returnType" : "IncrementalStorage",
    "comment" : "\n     * Opens an existing Incremental File System mounted directory and returns an IncrementalStorage\n     * object.\n     *\n     * @param path Absolute target path that Incremental File System has been mounted on.\n     * @return IncrementalStorage object corresponding to the mounted directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IncrementalStorage createStorage(@NonNull String path, @NonNull IncrementalStorage linkedStorage, @CreateMode int createMode)",
    "returnType" : "IncrementalStorage",
    "comment" : "\n     * Opens or creates an IncrementalStorage that is linked to another IncrementalStorage.\n     *\n     * @return IncrementalStorage object corresponding to the linked storage.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void renameCodePath(File beforeCodeFile, File afterCodeFile) throws IllegalArgumentException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Set up an app's code path. The expected outcome of this method is:\n     * 1) The actual apk directory under /data/incremental is bind-mounted to the parent directory\n     * of {@code afterCodeFile}.\n     * 2) All the files under {@code beforeCodeFile} will show up under {@code afterCodeFile}.\n     *\n     * @param beforeCodeFile Path that is currently bind-mounted and have APKs under it.\n     *                       Should no longer have any APKs after this method is called.\n     *                       Example: /data/app/vmdl*tmp\n     * @param afterCodeFile Path that should will have APKs after this method is called. Its parent\n     *                      directory should be bind-mounted to a directory under /data/incremental.\n     *                      Example: /data/app/~~[randomStringA]/[packageName]-[randomStringB]\n     * @throws IllegalArgumentException\n     * @throws IOException\n     * TODO(b/147371381): add unit tests\n     ",
    "links" : [ ]
  }, {
    "name" : "private void linkFiles(IncrementalStorage sourceStorage, File sourceAbsolutePath, String sourceRelativePath, IncrementalStorage targetStorage, String targetRelativePath) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Recursively set up directories and link all the files from source storage to target storage.\n     *\n     * @param sourceStorage The storage that has all the files and directories underneath.\n     * @param sourceAbsolutePath The absolute path of the directory that holds all files and dirs.\n     * @param sourceRelativePath The relative path on the source directory, e.g., \"\" or \"lib\".\n     * @param targetStorage The target storage that will have the same files and directories.\n     * @param targetRelativePath The relative path to the directory on the target storage that\n     *                           should have all the files and dirs underneath,\n     *                           e.g., \"packageName-random\".\n     * @throws IOException When makeDirectory or makeLink fails on the Incremental File System.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void closeStorage(@NonNull String path)",
    "returnType" : "void",
    "comment" : "\n     * Closes a storage specified by the absolute path. If the path is not Incremental, do nothing.\n     * Unbinds the target dir and deletes the corresponding storage instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFeatureEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if Incremental feature is enabled on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if Incremental installations are allowed.\n     * A developer can disable Incremental installations by setting the property.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isIncrementalPath(@NonNull String path)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if path is mounted on Incremental File System.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] unsafeGetFileSignature(@NonNull String path)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns raw signature for file if it's on Incremental File System.\n     * Unsafe, use only if you are sure what you are doing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsEnabled()",
    "returnType" : "boolean",
    "comment" : " Native methods ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsIncrementalPath(@NonNull String path)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native byte[] nativeUnsafeGetFileSignature(@NonNull String path)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ALLOWED_PROPERTY", "CREATE_MODE_TEMPORARY_BIND", "CREATE_MODE_PERMANENT_BIND", "CREATE_MODE_CREATE", "CREATE_MODE_OPEN_EXISTING", "mService", "mStorages" ],
  "methodNames" : [ "public IncrementalStorage getStorage(int storageId)", "public IncrementalStorage createStorage(@NonNull String path, @NonNull DataLoaderParams params, @CreateMode int createMode, boolean autoStartDataLoader, @Nullable IDataLoaderStatusListener statusListener, @Nullable StorageHealthCheckParams healthCheckParams, @Nullable IStorageHealthListener healthListener)", "public IncrementalStorage openStorage(@NonNull String path)", "public IncrementalStorage createStorage(@NonNull String path, @NonNull IncrementalStorage linkedStorage, @CreateMode int createMode)", "public void renameCodePath(File beforeCodeFile, File afterCodeFile) throws IllegalArgumentException, IOException", "private void linkFiles(IncrementalStorage sourceStorage, File sourceAbsolutePath, String sourceRelativePath, IncrementalStorage targetStorage, String targetRelativePath) throws IOException", "public void closeStorage(@NonNull String path)", "public static boolean isFeatureEnabled()", "public static boolean isAllowed()", "public static boolean isIncrementalPath(@NonNull String path)", "public static byte[] unsafeGetFileSignature(@NonNull String path)", "private static native boolean nativeIsEnabled()", "private static native boolean nativeIsIncrementalPath(@NonNull String path)", "private static native byte[] nativeUnsafeGetFileSignature(@NonNull String path)" ]
}