{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ClassLoader.java",
  "packageName" : "java.lang",
  "className" : "BootClassLoader",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "instance",
    "type" : "BootClassLoader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized BootClassLoader getInstance()",
    "returnType" : "BootClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Class<?> findClass(String name) throws ClassNotFoundException",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected URL findResource(String name)",
    "returnType" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Enumeration<URL> findResources(String resName) throws IOException",
    "returnType" : "Enumeration<URL>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Package getPackage(String name)",
    "returnType" : "Package",
    "comment" : "\n     * Returns package information for the given package. Unfortunately, the\n     * Android BootClassLoader doesn't really have this information, and as a\n     * non-secure ClassLoader, it isn't even required to, according to the spec.\n     * Yet, we want to provide it, in order to make all those hopeful callers of\n     * {@code myClass.getPackage().getName()} happy. Thus we construct a Package\n     * object the first time it is being requested and fill most of the fields\n     * with dummy values. The Package object is then put into the ClassLoader's\n     * Package cache, so we see the same one next time. We don't create Package\n     * objects for null arguments or for the default package.\n     * <p>\n     * There a limited chance that we end up with multiple Package objects\n     * representing the same package: It can happen when when a package is\n     * scattered across different JAR files being loaded by different\n     * ClassLoaders. Rather unlikely, and given that this whole thing is more or\n     * less a workaround, probably not worth the effort.\n     ",
    "links" : [ ]
  }, {
    "name" : "public URL getResource(String resName)",
    "returnType" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException",
    "returnType" : "Class<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<URL> getResources(String resName) throws IOException",
    "returnType" : "Enumeration<URL>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static synchronized BootClassLoader getInstance()", "protected Class<?> findClass(String name) throws ClassNotFoundException", "protected URL findResource(String name)", "protected Enumeration<URL> findResources(String resName) throws IOException", "protected Package getPackage(String name)", "public URL getResource(String resName)", "protected Class<?> loadClass(String className, boolean resolve) throws ClassNotFoundException", "public Enumeration<URL> getResources(String resName) throws IOException" ],
  "variableNames" : [ "instance" ]
}