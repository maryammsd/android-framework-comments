{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Layout.java",
  "packageName" : "android.text",
  "className" : "Builder",
  "comment" : "\n     * A builder class for Layout object.\n     *\n     * Different from {@link StaticLayout.Builder}, this builder generates the optimal layout based\n     * on input. If the given text and parameters can be rendered with {@link BoringLayout}, this\n     * builder generates {@link BoringLayout} instance. Otherwise, {@link StaticLayout} instance is\n     * generated.\n     *\n     * @see StaticLayout.Builder\n     ",
  "links" : [ "android.text.StaticLayout", "StaticLayout.Builder", "android.text.BoringLayout" ],
  "variables" : [ {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlignment",
    "type" : "Alignment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpacingMult",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpacingAdd",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextDir",
    "type" : "TextDirectionHeuristic",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludePad",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackLineSpacing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsizedWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsize",
    "type" : "TextUtils.TruncateAt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxLines",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBreakStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHyphenationFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRightIndents",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJustificationMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineBreakConfig",
    "type" : "LineBreakConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseBoundsForWidth",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShiftDrawingOffsetForStartOverhang",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumFontMetrics",
    "type" : "Paint.FontMetrics",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAlignment(@NonNull Alignment alignment)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text alignment.\n         *\n         * The default value is {@link Layout.Alignment#ALIGN_NORMAL}.\n         *\n         * @param alignment an alignment.\n         * @return this builder instance.\n         * @see Layout.Alignment\n         * @see Layout#getAlignment()\n         * @see StaticLayout.Builder#setAlignment(Alignment)\n         ",
    "links" : [ "Layout.Alignment#ALIGN_NORMAL" ]
  }, {
    "name" : "public Builder setTextDirectionHeuristic(@NonNull TextDirectionHeuristic textDirection)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text direction heuristics.\n         *\n         * The text direction heuristics is used to resolve text direction on the text.\n         *\n         * The default value is {@link TextDirectionHeuristics#FIRSTSTRONG_LTR}\n         *\n         * @param textDirection a text direction heuristic.\n         * @return this builder instance.\n         * @see TextDirectionHeuristics\n         * @see Layout#getTextDirectionHeuristic()\n         * @see StaticLayout.Builder#setTextDirection(TextDirectionHeuristic)\n         ",
    "links" : [ "android.text.TextDirectionHeuristics#FIRSTSTRONG_LTR" ]
  }, {
    "name" : "public Builder setLineSpacingAmount(float amount)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line spacing amount.\n         *\n         * The specified amount of pixels will be added to each line.\n         *\n         * The default value is {@code 0}. The negative value is allowed for squeezing lines.\n         *\n         * @param amount an amount of pixels to be added to line height.\n         * @return this builder instance.\n         * @see Layout#getLineSpacingAmount()\n         * @see Layout#getSpacingAdd()\n         * @see StaticLayout.Builder#setLineSpacing(float, float)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLineSpacingMultiplier(@FloatRange(from = 0) float multiplier)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line spacing multiplier.\n         *\n         * The specified value will be multiplied to each line.\n         *\n         * The default value is {@code 1}.\n         *\n         * @param multiplier a multiplier to be applied to the line height\n         * @return this builder instance.\n         * @see Layout#getLineSpacingMultiplier()\n         * @see Layout#getSpacingMultiplier()\n         * @see StaticLayout.Builder#setLineSpacing(float, float)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFontPaddingIncluded(boolean includeFontPadding)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether including extra padding into the first and the last line height.\n         *\n         * By setting true, the first line of the text and the last line of the text will have extra\n         * vertical space for avoiding clipping.\n         *\n         * The default value is {@code true}.\n         *\n         * @param includeFontPadding true for including extra space into first and last line.\n         * @return this builder instance.\n         * @see Layout#isFontPaddingIncluded()\n         * @see StaticLayout.Builder#setIncludePad(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFallbackLineSpacingEnabled(boolean fallbackLineSpacing)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether to respect the ascent and descent of the fallback fonts.\n         *\n         * Set whether to respect the ascent and descent of the fallback fonts that are used in\n         * displaying the text (which is needed to avoid text from consecutive lines running into\n         * each other). If set, fallback fonts that end up getting used can increase the ascent\n         * and descent of the lines that they are used on.\n         *\n         * The default value is {@code false}\n         *\n         * @param fallbackLineSpacing whether to expand line height based on fallback fonts.\n         * @return this builder instance.\n         * @see Layout#isFallbackLineSpacingEnabled()\n         * @see StaticLayout.Builder#setUseLineSpacingFromFallbacks(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEllipsizedWidth(@IntRange(from = 0) int ellipsizeWidth)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the width as used for ellipsizing purpose in pixels.\n         *\n         * The passed value is ignored and forced to set to the value of width constraint passed in\n         * constructor if no ellipsize option is set.\n         *\n         * The default value is the width constraint.\n         *\n         * @param ellipsizeWidth a ellipsizing width in pixels.\n         * @return this builder instance.\n         * @see Layout#getEllipsizedWidth()\n         * @see StaticLayout.Builder#setEllipsizedWidth(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEllipsize(@Nullable TextUtils.TruncateAt ellipsize)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ellipsizing type.\n         *\n         * By setting null, the ellipsize is disabled.\n         *\n         * The default value is {@code null}.\n         *\n         * @param ellipsize type of the ellipsize. null for disabling ellipsize.\n         * @return this builder instance.\n         * @see Layout#getEllipsize()\n         * @see StaticLayout.Builder#getEllipsize()\n         * @see android.text.TextUtils.TruncateAt\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxLines(@IntRange(from = 1) int maxLines)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximum number of lines.\n         *\n         * The default value is unlimited.\n         *\n         * @param maxLines maximum number of lines in the layout.\n         * @return this builder instance.\n         * @see Layout#getMaxLines()\n         * @see StaticLayout.Builder#setMaxLines(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setBreakStrategy(@BreakStrategy int breakStrategy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line break strategy.\n         *\n         * The default value is {@link Layout#BREAK_STRATEGY_SIMPLE}.\n         *\n         * @param breakStrategy a break strategy for line breaking.\n         * @return this builder instance.\n         * @see Layout#getBreakStrategy()\n         * @see StaticLayout.Builder#setBreakStrategy(int)\n         * @see Layout#BREAK_STRATEGY_SIMPLE\n         * @see Layout#BREAK_STRATEGY_HIGH_QUALITY\n         * @see Layout#BREAK_STRATEGY_BALANCED\n         ",
    "links" : [ "android.text.Layout#BREAK_STRATEGY_SIMPLE" ]
  }, {
    "name" : "public Builder setHyphenationFrequency(@HyphenationFrequency int hyphenationFrequency)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the hyphenation frequency.\n         *\n         * The default value is {@link Layout#HYPHENATION_FREQUENCY_NONE}.\n         *\n         * @param hyphenationFrequency a hyphenation frequency.\n         * @return this builder instance.\n         * @see Layout#getHyphenationFrequency()\n         * @see StaticLayout.Builder#setHyphenationFrequency(int)\n         * @see Layout#HYPHENATION_FREQUENCY_NONE\n         * @see Layout#HYPHENATION_FREQUENCY_NORMAL\n         * @see Layout#HYPHENATION_FREQUENCY_FULL\n         * @see Layout#HYPHENATION_FREQUENCY_NORMAL_FAST\n         * @see Layout#HYPHENATION_FREQUENCY_FULL_FAST\n         ",
    "links" : [ "android.text.Layout#HYPHENATION_FREQUENCY_NONE" ]
  }, {
    "name" : "public Builder setLeftIndents(@Nullable int[] leftIndents)",
    "returnType" : "Builder",
    "comment" : "\n         * Set visually left indents in pixels per lines.\n         *\n         * For the lines past the last element in the array, the last element repeats. Passing null\n         * for disabling indents.\n         *\n         * Note that even with the RTL layout, this method reserve spacing at the visually left of\n         * the line.\n         *\n         * The default value is {@code null}.\n         *\n         * @param leftIndents array of indents values for the left margins in pixels.\n         * @return this builder instance.\n         * @see Layout#getLeftIndents()\n         * @see Layout#getRightIndents()\n         * @see Layout.Builder#setRightIndents(int[])\n         * @see StaticLayout.Builder#setIndents(int[], int[])\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRightIndents(@Nullable int[] rightIndents)",
    "returnType" : "Builder",
    "comment" : "\n         * Set visually right indents in pixels per lines.\n         *\n         * For the lines past the last element in the array, the last element repeats. Passing null\n         * for disabling indents.\n         *\n         * Note that even with the RTL layout, this method reserve spacing at the visually right of\n         * the line.\n         *\n         * The default value is {@code null}.\n         *\n         * @param rightIndents array of indents values for the right margins in pixels.\n         * @return this builder instance.\n         * @see Layout#getLeftIndents()\n         * @see Layout#getRightIndents()\n         * @see Layout.Builder#setLeftIndents(int[])\n         * @see StaticLayout.Builder#setIndents(int[], int[])\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setJustificationMode(@JustificationMode int justificationMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set justification mode.\n         *\n         * When justification mode is {@link Layout#JUSTIFICATION_MODE_INTER_WORD}, the word spacing\n         * on the given Paint passed to the constructor will be ignored. This behavior also affects\n         * spans which change the word spacing.\n         *\n         * The default value is {@link Layout#JUSTIFICATION_MODE_NONE}.\n         *\n         * @param justificationMode justification mode.\n         * @return this builder instance.\n         * @see Layout#getJustificationMode()\n         * @see StaticLayout.Builder#setJustificationMode(int)\n         * @see Layout#JUSTIFICATION_MODE_NONE\n         * @see Layout#JUSTIFICATION_MODE_INTER_WORD\n         ",
    "links" : [ "android.text.Layout#JUSTIFICATION_MODE_INTER_WORD", "android.text.Layout#JUSTIFICATION_MODE_NONE" ]
  }, {
    "name" : "public Builder setLineBreakConfig(@NonNull LineBreakConfig lineBreakConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line break configuration.\n         *\n         * The default value is a LinebreakConfig instance that has\n         * {@link LineBreakConfig#LINE_BREAK_STYLE_NONE} and\n         * {@link LineBreakConfig#LINE_BREAK_WORD_STYLE_NONE}.\n         *\n         * @param lineBreakConfig the line break configuration\n         * @return this builder instance.\n         * @see Layout#getLineBreakConfig()\n         * @see StaticLayout.Builder#setLineBreakConfig(LineBreakConfig)\n         ",
    "links" : [ "android.graphics.text.LineBreakConfig#LINE_BREAK_STYLE_NONE", "android.graphics.text.LineBreakConfig#LINE_BREAK_WORD_STYLE_NONE" ]
  }, {
    "name" : "public Builder setUseBoundsForWidth(boolean useBoundsForWidth)",
    "returnType" : "Builder",
    "comment" : " The corresponding getter is getUseBoundsForWidth",
    "links" : [ ]
  }, {
    "name" : "public Builder setShiftDrawingOffsetForStartOverhang(boolean shiftDrawingOffsetForStartOverhang)",
    "returnType" : "Builder",
    "comment" : "\n         * Set true for shifting the drawing x offset for showing overhang at the start position.\n         *\n         * This flag is ignored if the {@link #getUseBoundsForWidth()} is false.\n         *\n         * If this value is false, the Layout draws text from the zero even if there is a glyph\n         * stroke in a region where the x coordinate is negative.\n         *\n         * If this value is true, the Layout draws text with shifting the x coordinate of the\n         * drawing bounding box.\n         *\n         * This value is false by default.\n         *\n         * @param shiftDrawingOffsetForStartOverhang true for shifting the drawing offset for\n         *                                          showing the stroke that is in the region where\n         *                                          the x coordinate is negative.\n         * @see #setUseBoundsForWidth(boolean)\n         * @see #getUseBoundsForWidth()\n         ",
    "links" : [ "#getUseBoundsForWidth()" ]
  }, {
    "name" : "public Builder setMinimumFontMetrics(@Nullable Paint.FontMetrics minimumFontMetrics)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the minimum font metrics used for line spacing.\n         *\n         * <p>\n         * {@code null} is the default value. If {@code null} is set or left it as default, the font\n         * metrics obtained by {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)} is used.\n         *\n         * <p>\n         * The minimum meaning here is the minimum value of line spacing: maximum value of\n         * {@link Paint#ascent()}, minimum value of {@link Paint#descent()}.\n         *\n         * <p>\n         * By setting this value, each line will have minimum line spacing regardless of the text\n         * rendered. For example, usually Japanese script has larger vertical metrics than Latin\n         * script. By setting the metrics obtained by\n         * {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)} for Japanese or leave it\n         * {@code null} if the Paint's locale is Japanese, the line spacing for Japanese is reserved\n         * if the text is an English text. If the vertical metrics of the text is larger than\n         * Japanese, for example Burmese, the bigger font metrics is used.\n         *\n         * @param minimumFontMetrics A minimum font metrics. Passing {@code null} for using the\n         *                          value obtained by\n         *                          {@link Paint#getFontMetricsForLocale(Paint.FontMetrics)}\n         * @see android.widget.TextView#setMinimumFontMetrics(Paint.FontMetrics)\n         * @see android.widget.TextView#getMinimumFontMetrics()\n         * @see Layout#getMinimumFontMetrics()\n         * @see StaticLayout.Builder#setMinimumFontMetrics(Paint.FontMetrics)\n         * @see DynamicLayout.Builder#setMinimumFontMetrics(Paint.FontMetrics)\n         ",
    "links" : [ "android.graphics.Paint#descent()", "android.graphics.Paint#getFontMetricsForLocale(Paint.FontMetrics)", "android.graphics.Paint#ascent()" ]
  }, {
    "name" : "private BoringLayout.Metrics isBoring()",
    "returnType" : "BoringLayout.Metrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Layout build()",
    "returnType" : "Layout",
    "comment" : "\n         * Build a Layout object.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setAlignment(@NonNull Alignment alignment)", "public Builder setTextDirectionHeuristic(@NonNull TextDirectionHeuristic textDirection)", "public Builder setLineSpacingAmount(float amount)", "public Builder setLineSpacingMultiplier(@FloatRange(from = 0) float multiplier)", "public Builder setFontPaddingIncluded(boolean includeFontPadding)", "public Builder setFallbackLineSpacingEnabled(boolean fallbackLineSpacing)", "public Builder setEllipsizedWidth(@IntRange(from = 0) int ellipsizeWidth)", "public Builder setEllipsize(@Nullable TextUtils.TruncateAt ellipsize)", "public Builder setMaxLines(@IntRange(from = 1) int maxLines)", "public Builder setBreakStrategy(@BreakStrategy int breakStrategy)", "public Builder setHyphenationFrequency(@HyphenationFrequency int hyphenationFrequency)", "public Builder setLeftIndents(@Nullable int[] leftIndents)", "public Builder setRightIndents(@Nullable int[] rightIndents)", "public Builder setJustificationMode(@JustificationMode int justificationMode)", "public Builder setLineBreakConfig(@NonNull LineBreakConfig lineBreakConfig)", "public Builder setUseBoundsForWidth(boolean useBoundsForWidth)", "public Builder setShiftDrawingOffsetForStartOverhang(boolean shiftDrawingOffsetForStartOverhang)", "public Builder setMinimumFontMetrics(@Nullable Paint.FontMetrics minimumFontMetrics)", "private BoringLayout.Metrics isBoring()", "public Layout build()" ],
  "variableNames" : [ "mText", "mStart", "mEnd", "mPaint", "mWidth", "mAlignment", "mSpacingMult", "mSpacingAdd", "mTextDir", "mIncludePad", "mFallbackLineSpacing", "mEllipsizedWidth", "mEllipsize", "mMaxLines", "mBreakStrategy", "mHyphenationFrequency", "mLeftIndents", "mRightIndents", "mJustificationMode", "mLineBreakConfig", "mUseBoundsForWidth", "mShiftDrawingOffsetForStartOverhang", "mMinimumFontMetrics" ]
}