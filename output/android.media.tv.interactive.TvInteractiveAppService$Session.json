{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/interactive/TvInteractiveAppService.java",
  "packageName" : "android.media.tv.interactive",
  "className" : "Session",
  "comment" : "\n     * Base class for derived classes to implement to provide a TV interactive app session.\n     *\n     * <p>A session is associated with a {@link TvInteractiveAppView} instance and handles\n     * corresponding communications. It also handles the communications with\n     * {@link android.media.tv.TvInputService.Session} if connected.\n     *\n     * @see TvInteractiveAppView#setTvView(TvView)\n     ",
  "links" : [ "android.media.tv.TvInputService.Session", "android.media.tv.interactive.TvInteractiveAppView" ],
  "variables" : [ {
    "name" : "mDispatcherState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "ITvInteractiveAppSessionCallback",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "List<Runnable>",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowParams",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewContainer",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewCleanUpTask",
    "type" : "MediaViewCleanUpTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaViewEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setMediaViewEnabled(final boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables the media view.\n         *\n         * <p>By default, the media view is disabled. Must be called explicitly after the\n         * session is created to enable the media view.\n         *\n         * <p>The TV Interactive App service can disable its media view when needed.\n         *\n         * @param enable {@code true} if you want to enable the media view. {@code false}\n         *            otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMediaViewEnabled()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if media view is enabled, {@code false} otherwise.\n         *\n         * @see #setMediaViewEnabled(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onStartInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n         * Starts TvInteractiveAppService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onStopInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n         * Stops TvInteractiveAppService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onResetInteractiveApp()",
    "returnType" : "void",
    "comment" : "\n         * Resets TvInteractiveAppService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCreateBiInteractiveAppRequest(@NonNull Uri biIAppUri, @Nullable Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Creates broadcast-independent(BI) interactive application.\n         *\n         * <p>The implementation should call {@link #notifyBiInteractiveAppCreated(Uri, String)},\n         * no matter if it's created successfully or not.\n         *\n         * @see #notifyBiInteractiveAppCreated(Uri, String)\n         * @see #onDestroyBiInteractiveAppRequest(String)\n         ",
    "links" : [ "#notifyBiInteractiveAppCreated(Uri" ]
  }, {
    "name" : "public void onDestroyBiInteractiveAppRequest(@NonNull String biIAppId)",
    "returnType" : "void",
    "comment" : "\n         * Destroys broadcast-independent(BI) interactive application.\n         *\n         * @param biIAppId the BI interactive app ID from\n         *                 {@link #onCreateBiInteractiveAppRequest(Uri, Bundle)}\n         *\n         * @see #onCreateBiInteractiveAppRequest(Uri, Bundle)\n         ",
    "links" : [ "#onCreateBiInteractiveAppRequest(Uri" ]
  }, {
    "name" : "public void onSetTeletextAppEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * To toggle Digital Teletext Application if there is one in AIT app list.\n         * @param enable {@code true} to enable teletext app; {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n         * Receives current video bounds.\n         *\n         * @param bounds the rectangle area for rendering the current video.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Receives current channel URI.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentChannelLcn(int lcn)",
    "returnType" : "void",
    "comment" : "\n         * Receives logical channel number (LCN) of current channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "\n         * Receives current stream volume.\n         *\n         * @param volume a volume value between {@code 0.0f} and {@code 1.0f}, inclusive.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Receives track list.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "\n         * Receives current TV input ID.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n         * Receives current time shift mode.\n         *\n         * @param mode The current time shift mode. The value is one of the following:\n         * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n         * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n         * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public void onAvailableSpeeds(@NonNull float[] speeds)",
    "returnType" : "void",
    "comment" : "\n         * Receives available playback speeds.\n         *\n         * @param speeds An ordered array of playback speeds, expressed as values relative to the\n         *               normal playback speed (1.0), at which the current content can be played as\n         *               a time-shifted broadcast. This is an empty array if the supported playback\n         *               speeds are unknown or the video/broadcast is not in time shift mode. If\n         *               currently in time shift mode, this array will normally include at least\n         *               the values 1.0 (normal speed) and 0.0 (paused).\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)",
    "returnType" : "void",
    "comment" : "\n         * Receives the requested {@link android.media.tv.TvRecordingInfo}.\n         *\n         * @see #requestTvRecordingInfo(String)\n         * @param recordingInfo The requested recording info. {@code null} if no recording found.\n         ",
    "links" : [ "android.media.tv.TvRecordingInfo" ]
  }, {
    "name" : "public void onTvRecordingInfoList(@NonNull List<TvRecordingInfo> recordingInfoList)",
    "returnType" : "void",
    "comment" : "\n         * Receives requested recording info list.\n         *\n         * @see #requestTvRecordingInfoList(int)\n         * @param recordingInfoList The list of recording info requested. Returns an empty list if\n         *                          no matching recording info found.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRecordingStarted(@NonNull String recordingId, @Nullable String requestId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when a recording has been started.\n         *\n         * <p>When a scheduled recording is started, this is also called, and the request ID in this\n         * case is {@code null}.\n         *\n         * @param recordingId The ID of the recording started. The TV app should provide and\n         *                    maintain this ID to identify the recording in the future.\n         * @param requestId The ID of the request when\n         *                  {@link #requestStartRecording(String, Uri)} is called.\n         *                  {@code null} if the recording is not triggered by a\n         *                  {@link #requestStartRecording(String, Uri)} request.\n         *                  This ID should be created by the {@link TvInteractiveAppService} and\n         *                  can be any string.\n         * @see #onRecordingStopped(String)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#requestStartRecording(String" ]
  }, {
    "name" : "public void onRecordingStopped(@NonNull String recordingId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the recording has been stopped.\n         *\n         * @param recordingId The ID of the recording stopped. This ID is created and maintained by\n         *                    the TV app when the recording was started.\n         * @see #onRecordingStarted(String, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when an error occurred while establishing a connection to the recording\n         * session for the corresponding TV input.\n         *\n         * @param recordingId The ID of the related recording which is sent via\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @param inputId The ID of the TV input bound to the current TvRecordingClient.\n         * @see android.media.tv.TvRecordingClient.RecordingCallback#onConnectionFailed(String)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void onRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the connection to the current recording session is lost.\n         *\n         * @param recordingId The ID of the related recording which is sent via\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @param inputId The ID of the TV input bound to the current TvRecordingClient.\n         * @see android.media.tv.TvRecordingClient.RecordingCallback#onDisconnected(String)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void onRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the recording session has been tuned to the given channel and is\n         * ready to start recording.\n         *\n         * @param recordingId The ID of the related recording which is sent via\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @param channelUri The URI of the tuned channel.\n         * @see android.media.tv.TvRecordingClient.RecordingCallback#onTuned(Uri)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void onRecordingError(@NonNull String recordingId, @TvInputManager.RecordingError int err)",
    "returnType" : "void",
    "comment" : "\n         * This is called when an issue has occurred. It may be called at any time after the current\n         * recording session is created until it is released.\n         *\n         * @param recordingId The ID of the related recording which is sent via\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @param err The error code. Should be one of the following.\n         * <ul>\n         * <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN}\n         * <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE}\n         * <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY}\n         * </ul>\n         * @see android.media.tv.TvRecordingClient.RecordingCallback#onError(int)\n         ",
    "links" : [ "android.media.tv.TvInputManager#RECORDING_ERROR_RESOURCE_BUSY", "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String", "android.media.tv.TvInputManager#RECORDING_ERROR_UNKNOWN", "android.media.tv.TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE" ]
  }, {
    "name" : "public void onRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)",
    "returnType" : "void",
    "comment" : "\n         * This is called when the recording has been scheduled.\n         *\n         * @param recordingId The ID assigned to this recording by the app. It can be used to send\n         *                    recording related requests such as\n         *                    {@link #requestStopRecording(String)}.\n         * @param requestId The ID of the request when\n         *                  {@link #requestScheduleRecording}  is called.\n         *                  {@code null} if the recording is not triggered by a request.\n         *                  This ID should be created by the {@link TvInteractiveAppService} and\n         *                  can be any string.\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#requestStopRecording(String)", "#requestScheduleRecording" ]
  }, {
    "name" : "public void onSigningResult(@NonNull String signingId, @NonNull byte[] result)",
    "returnType" : "void",
    "comment" : "\n         * Receives signing result.\n         * @param signingId the ID to identify the request. It's the same as the corresponding ID in\n         *        {@link Session#requestSigning(String, String, String, byte[])}\n         * @param result the signed result.\n         *\n         * @see #requestSigning(String, String, String, byte[])\n         ",
    "links" : [ "#requestSigning(String" ]
  }, {
    "name" : "public void onCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)",
    "returnType" : "void",
    "comment" : "\n         * Receives the requested Certificate\n         *\n         * @param host the host name of the SSL authentication server.\n         * @param port the port of the SSL authentication server. E.g., 443\n         * @param cert the SSL certificate received.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onError(@NonNull String errMsg, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application sends information of an error.\n         *\n         * @param errMsg the message of the error.\n         * @param params additional parameters of the error. For example, the signingId of {@link\n         *     TvInteractiveAppCallback#onRequestSigning(String, String, String, String, byte[])}\n         *     can be included to identify the related signing request, and the method name\n         *     \"onRequestSigning\" can also be added to the params.\n         *\n         * @see TvInteractiveAppView#ERROR_KEY_METHOD_NAME\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView.TvInteractiveAppCallback#onRequestSigning(String" ]
  }, {
    "name" : "public void onTimeShiftPlaybackParams(@NonNull PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the time shift {@link android.media.PlaybackParams} is set or changed.\n         *\n         * @param params The new {@link PlaybackParams} that was set or changed.\n         * @see TvView#timeShiftSetPlaybackParams(PlaybackParams)\n         ",
    "links" : [ "android.media.PlaybackParams" ]
  }, {
    "name" : "public void onTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)",
    "returnType" : "void",
    "comment" : "\n         * Called when time shift status is changed.\n         *\n         * @see TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)\n         * @see android.media.tv.TvInputService.Session#notifyTimeShiftStatusChanged(int)\n         * @param inputId The ID of the input for which the time shift status has changed.\n         * @param status The status of which the input has changed to. Should be one of the\n         *               following.\n         *               <ul>\n         *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNKNOWN}\n         *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED}\n         *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE}\n         *                  <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE}\n         *               </ul>\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNKNOWN", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_AVAILABLE", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE" ]
  }, {
    "name" : "public void onTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Called when time shift start position is changed.\n         *\n         * @see TvView.TimeShiftPositionCallback#onTimeShiftStartPositionChanged(String, long)\n         * @param inputId The ID of the input for which the time shift start position has changed.\n         * @param timeMs The start position for time shifting, in milliseconds since the epoch.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Called when time shift current position is changed.\n         *\n         * @see TvView.TimeShiftPositionCallback#onTimeShiftCurrentPositionChanged(String, long)\n         * @param inputId The ID of the input for which the time shift current position has changed.\n         * @param timeMs The current position for time shifting, in milliseconds since the epoch.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean onSetSurface(@Nullable Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when the application sets the surface.\n         *\n         * <p>The TV Interactive App service should render interactive app UI onto the given\n         * surface. When called with {@code null}, the Interactive App service should immediately\n         * free any references to the currently set surface and stop using it.\n         *\n         * @param surface The surface to be used for interactive app UI rendering. Can be\n         *                {@code null}.\n         * @return {@code true} if the surface was set successfully, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSurfaceChanged(@PixelFormat.Format int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Called after any structural changes (format or size) have been made to the surface passed\n         * in {@link #onSetSurface}. This method is always called at least once, after\n         * {@link #onSetSurface} is called with non-null surface.\n         *\n         * @param format The new {@link PixelFormat} of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#onSetSurface", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public void onMediaViewSizeChanged(@Px int width, @Px int height)",
    "returnType" : "void",
    "comment" : "\n         * Called when the size of the media view is changed by the application.\n         *\n         * <p>This is always called at least once when the session is created regardless of whether\n         * the media view is enabled or not. The media view container size is the same as the\n         * containing {@link TvInteractiveAppView}. Note that the size of the underlying surface can\n         * be different if the surface was changed by calling {@link #layoutSurface}.\n         *\n         * @param width The width of the media view, in pixels.\n         * @param height The height of the media view, in pixels.\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView", "#layoutSurface" ]
  }, {
    "name" : "public View onCreateMediaView()",
    "returnType" : "View",
    "comment" : "\n         * Called when the application requests to create an media view. Each session\n         * implementation can override this method and return its own view.\n         *\n         * @return a view attached to the media window\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onRelease()",
    "returnType" : "void",
    "comment" : "\n         * Releases TvInteractiveAppService session.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTuned(@NonNull Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Called when the corresponding TV input tuned to a channel.\n         *\n         * @param channelUri The tuned channel URI.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTrackSelected(@TvTrackInfo.Type int type, @NonNull String trackId)",
    "returnType" : "void",
    "comment" : "\n         * Called when the corresponding TV input selected to a track.\n         *\n         * If the track is deselected and no track is currently selected,\n         * trackId is an empty string.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTracksChanged(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Called when the tracks are changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onVideoAvailable()",
    "returnType" : "void",
    "comment" : "\n         * Called when video is available.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onVideoUnavailable(@TvInputManager.VideoUnavailableReason int reason)",
    "returnType" : "void",
    "comment" : "\n         * Called when video is unavailable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onVideoFreezeUpdated(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * Called when video becomes frozen or unfrozen. Audio playback will continue while video\n         * will be frozen to the last frame if {@code true}.\n         *\n         * @param isFrozen Whether or not the video is frozen.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onContentAllowed()",
    "returnType" : "void",
    "comment" : "\n         * Called when content is allowed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onContentBlocked(@NonNull TvContentRating rating)",
    "returnType" : "void",
    "comment" : "\n         * Called when content is blocked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSignalStrength(@TvInputManager.SignalStrength int strength)",
    "returnType" : "void",
    "comment" : "\n         * Called when signal strength is changed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onBroadcastInfoResponse(@NonNull BroadcastInfoResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Called when a broadcast info response is received.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAdResponse(@NonNull AdResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Called when an advertisement response is received.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAdBufferConsumed(@NonNull AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Called when an advertisement buffer is consumed.\n         *\n         * @param buffer The {@link AdBuffer} that was consumed.\n         ",
    "links" : [ "android.media.tv.AdBuffer" ]
  }, {
    "name" : "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Called when a TV message is received\n         *\n         * @param type The type of message received, such as\n         * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n         * @param data The raw data of the message. The bundle keys are:\n         *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n         *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n         *             how to parse this data.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "public void onSelectedTrackInfo(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Called when the TV App sends the selected track info as a response to\n         * {@link #requestSelectedTrackInfo()}.\n         *\n         * <p> When a selected track changes as a result of a new selection,\n         * {@link #onTrackSelected(int, String)} should be used instead to communicate the specific\n         * track selection.\n         *\n         * @param tracks A list of {@link TvTrackInfo} that are currently selected\n         ",
    "links" : [ "#requestSelectedTrackInfo()", "#onTrackSelected(int", "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int count, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onTouchEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle touch screen motion events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTouchEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle trackball events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTrackballEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle generic motion events on the current session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onGenericMotionEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public void layoutSurface(final int left, final int top, final int right, final int bottom)",
    "returnType" : "void",
    "comment" : "\n         * Assigns a size and position to the surface passed in {@link #onSetSurface}. The position\n         * is relative to the overlay view that sits on top of this surface.\n         *\n         * @param left Left position in pixels, relative to the overlay view.\n         * @param top Top position in pixels, relative to the overlay view.\n         * @param right Right position in pixels, relative to the overlay view.\n         * @param bottom Bottom position in pixels, relative to the overlay view.\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : "public void requestBroadcastInfo(@NonNull final BroadcastInfoRequest request)",
    "returnType" : "void",
    "comment" : "\n         * Requests broadcast related information from the related TV input.\n         * @param request the request for broadcast info\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeBroadcastInfo(final int requestId)",
    "returnType" : "void",
    "comment" : "\n         * Remove broadcast information request from the related TV input.\n         * @param requestId the ID of the request\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendPlaybackCommandRequest(@PlaybackCommandType @NonNull String cmdType, @Nullable Bundle parameters)",
    "returnType" : "void",
    "comment" : "\n         * Sends a specific playback command to be processed by the related TV input.\n         *\n         * @param cmdType type of the specific command\n         * @param parameters parameters of the specific command\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendTimeShiftCommandRequest(@TimeShiftCommandType @NonNull String cmdType, @Nullable Bundle parameters)",
    "returnType" : "void",
    "comment" : "\n         * Sends a specific time shift command to be processed by the related TV input.\n         *\n         * @param cmdType type of the specific command\n         * @param parameters parameters of the specific command\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setVideoBounds(@NonNull Rect rect)",
    "returnType" : "void",
    "comment" : "\n         * Sets broadcast video bounds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestCurrentVideoBounds()",
    "returnType" : "void",
    "comment" : "\n         * Requests the bounds of the current video.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestCurrentChannelUri()",
    "returnType" : "void",
    "comment" : "\n         * Requests the URI of the current channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestCurrentChannelLcn()",
    "returnType" : "void",
    "comment" : "\n         * Requests the logic channel number (LCN) of the current channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestStreamVolume()",
    "returnType" : "void",
    "comment" : "\n         * Requests stream volume.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestTrackInfoList()",
    "returnType" : "void",
    "comment" : "\n         * Requests the list of {@link TvTrackInfo}.\n         ",
    "links" : [ "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void requestCurrentTvInputId()",
    "returnType" : "void",
    "comment" : "\n         * Requests current TV input ID.\n         *\n         * @see android.media.tv.TvInputInfo\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestTimeShiftMode()",
    "returnType" : "void",
    "comment" : "\n         * Requests time shift mode.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestAvailableSpeeds()",
    "returnType" : "void",
    "comment" : "\n         * Requests available speeds for time shift.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestSelectedTrackInfo()",
    "returnType" : "void",
    "comment" : "\n         * Requests a list of the currently selected {@link TvTrackInfo} from the TV App.\n         *\n         * <p> Normally, track info cannot be synchronized until the channel has\n         * been changed. This is used when the session of the {@link TvInteractiveAppService}\n         * is newly created and the normal synchronization has not happened yet.\n         *\n         * <p> The track info will be returned in {@link #onSelectedTrackInfo(List)}\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#onSelectedTrackInfo(List)", "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void requestStartRecording(@NonNull String requestId, @Nullable Uri programUri)",
    "returnType" : "void",
    "comment" : "\n         * Requests starting of recording\n         *\n         * <p> This is used to request the active {@link android.media.tv.TvRecordingClient} to\n         * call {@link android.media.tv.TvRecordingClient#startRecording(Uri)} with the provided\n         * {@code programUri}.\n         * A non-null {@code programUri} implies the started recording should be of that specific\n         * program, whereas null {@code programUri} does not impose such a requirement and the\n         * recording can span across multiple TV programs.\n         *\n         * @param requestId The ID of this request which is used to match the corresponding\n         *                  response. The request ID in\n         *                  {@link #onRecordingStarted(String, String)} for this request is the\n         *                  same as the ID sent here. This should be defined by the\n         *                  {@link TvInteractiveAppService} and can be any string.\n         *                  Should this API be called with the same requestId twice, both \n         *                  requests should be handled regardless by the TV application.\n         * @param programUri The URI for the TV program to record, built by\n         *            {@link TvContract#buildProgramUri(long)}. Can be {@code null}.\n         * @see android.media.tv.TvRecordingClient#startRecording(Uri)\n         ",
    "links" : [ "#onRecordingStarted(String", "android.media.tv.interactive.TvInteractiveAppService", "android.media.tv.TvRecordingClient#startRecording(Uri)", "android.media.tv.TvContract#buildProgramUri(long)", "android.media.tv.TvRecordingClient" ]
  }, {
    "name" : "public void requestStopRecording(@NonNull String recordingId)",
    "returnType" : "void",
    "comment" : "\n         * Requests the recording associated with the recordingId to stop.\n         *\n         * <p> This is used to request the associated {@link android.media.tv.TvRecordingClient} to\n         * call {@link android.media.tv.TvRecordingClient#stopRecording()}.\n         *\n         * @param recordingId The ID of the recording to stop. This is provided by the TV app in\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @see android.media.tv.TvRecordingClient#stopRecording()\n         ",
    "links" : [ "android.media.tv.TvRecordingClient#stopRecording()", "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String", "android.media.tv.TvRecordingClient" ]
  }, {
    "name" : "public void requestScheduleRecording(@NonNull String requestId, @NonNull String inputId, @NonNull Uri channelUri, @NonNull Uri programUri, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Requests scheduling of a recording.\n         *\n         * @param requestId The ID of this request which is used to match the corresponding\n         *                  response. The request ID in\n         *                  {@link #onRecordingScheduled(String, String)} for this request is the\n         *                  same as the ID sent here. This should be defined by the\n         *                  {@link TvInteractiveAppService} and can be any string.\n         *                  Should this API be called with the same requestId twice, both requests\n         *                  should be handled regardless by the TV application.\n         * @param inputId The ID of the TV input for the given channel.\n         * @param channelUri The URI of a channel to be recorded.\n         * @param programUri The URI of the TV program to be recorded.\n         * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n         *            name, i.e. prefixed with a package name you own, so that different developers\n         *            will not create conflicting keys.\n         * @see android.media.tv.TvRecordingClient#tune(String, Uri, Bundle)\n         * @see android.media.tv.TvRecordingClient#startRecording(Uri)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#onRecordingScheduled(String" ]
  }, {
    "name" : "public void requestScheduleRecording(@NonNull String requestId, @NonNull String inputId, @NonNull Uri channelUri, long startTime, long duration, int repeatDays, @NonNull Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Requests scheduling of a recording.\n         *\n         * @param requestId The ID of this request which is used to match the corresponding\n         *                  response. The request ID in\n         *                  {@link #onRecordingScheduled(String, String)} for this request is the\n         *                  same as the ID sent here. This should be defined by the\n         *                  {@link TvInteractiveAppService} and can be any string. Should this API\n         *                  be called with the same requestId twice, both requests should be handled\n         *                  regardless by the TV application.\n         * @param inputId The ID of the TV input for the given channel.\n         * @param channelUri The URI of a channel to be recorded.\n         * @param startTime The start time of the recording in milliseconds since epoch.\n         * @param duration The duration of the recording in milliseconds.\n         * @param repeatDays The repeated days. 0 if not repeated.\n         * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n         *            name, i.e. prefixed with a package name you own, so that different developers\n         *            will not create conflicting keys.\n         * @see android.media.tv.TvRecordingClient#tune(String, Uri, Bundle)\n         * @see android.media.tv.TvRecordingClient#startRecording(Uri)\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#onRecordingScheduled(String" ]
  }, {
    "name" : "public void setTvRecordingInfo(@NonNull String recordingId, @NonNull TvRecordingInfo recordingInfo)",
    "returnType" : "void",
    "comment" : "\n         * Sets the recording info for the specified recording\n         *\n         * @param recordingId The ID of the recording to set the info for. This is provided by the\n         *     TV app in {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         * @param recordingInfo The {@link TvRecordingInfo} to set to the recording.\n         ",
    "links" : [ "android.media.tv.TvRecordingInfo", "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void requestTvRecordingInfo(@NonNull String recordingId)",
    "returnType" : "void",
    "comment" : "\n         * Gets the recording info for the specified recording\n         * @param recordingId The ID of the recording to set the info for. This is provided by the\n         *                    TV app in\n         *                    {@link TvInteractiveAppView#notifyRecordingStarted(String, String)}\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppView#notifyRecordingStarted(String" ]
  }, {
    "name" : "public void requestTvRecordingInfoList(@TvRecordingInfo.TvRecordingListType int type)",
    "returnType" : "void",
    "comment" : "\n         * Gets a list of {@link TvRecordingInfo} for the specified recording type.\n         *\n         * @param type The type of recording to retrieve.\n         ",
    "links" : [ "android.media.tv.TvRecordingInfo" ]
  }, {
    "name" : "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String alias, @NonNull byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Requests signing of the given data.\n         *\n         * <p>This is used when the corresponding server of the broadcast-independent interactive\n         * app requires signing during handshaking, and the interactive app service doesn't have\n         * the built-in private key. The private key is provided by the content providers and\n         * pre-built in the related app, such as TV app.\n         *\n         * @param signingId the ID to identify the request. When a result is received, this ID can\n         *                  be used to correlate the result with the request.\n         * @param algorithm the standard name of the signature algorithm requested, such as\n         *                  MD5withRSA, SHA256withDSA, etc. The name is from standards like\n         *                  FIPS PUB 186-4 and PKCS #1.\n         * @param alias the alias of the corresponding {@link java.security.KeyStore}.\n         * @param data the original bytes to be signed.\n         *\n         * @see #onSigningResult(String, byte[])\n         * @see TvInteractiveAppView#createBiInteractiveApp(Uri, Bundle)\n         * @see TvInteractiveAppView#BI_INTERACTIVE_APP_KEY_ALIAS\n         ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String host, int port, @NonNull byte[] data)",
    "returnType" : "void",
    "comment" : "\n         * Requests signing of the given data.\n         *\n         * <p>This is used when the corresponding server of the broadcast-independent interactive\n         * app requires signing during handshaking, and the interactive app service doesn't have\n         * the built-in private key. The private key is provided by the content providers and\n         * pre-built in the related app, such as TV app.\n         *\n         * @param signingId the ID to identify the request. When a result is received, this ID can\n         *                  be used to correlate the result with the request.\n         * @param algorithm the standard name of the signature algorithm requested, such as\n         *                  MD5withRSA, SHA256withDSA, etc. The name is from standards like\n         *                  FIPS PUB 186-4 and PKCS #1.\n         * @param host the host of the SSL client authentication server.\n         * @param port the port of the SSL client authentication server.\n         * @param data the original bytes to be signed.\n         *\n         * @see #onSigningResult(String, byte[])\n         * @see TvInteractiveAppView#createBiInteractiveApp(Uri, Bundle)\n         * @see TvInteractiveAppView#BI_INTERACTIVE_APP_KEY_ALIAS\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestCertificate(@NonNull String host, int port)",
    "returnType" : "void",
    "comment" : "\n         * Requests a SSL certificate for client validation.\n         *\n         * @param host the host name of the SSL authentication server.\n         * @param port the port of the SSL authentication server. E.g., 443\n         ",
    "links" : [ ]
  }, {
    "name" : "public void requestAd(@NonNull final AdRequest request)",
    "returnType" : "void",
    "comment" : "\n         * Sends an advertisement request to be processed by the related TV input.\n         *\n         * @param request The advertisement request\n         ",
    "links" : [ ]
  }, {
    "name" : " void startInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void resetInteractiveApp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createBiInteractiveApp(@NonNull Uri biIAppUri, @Nullable Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void destroyBiInteractiveApp(@NonNull String biIAppId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setTeletextAppEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentVideoBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelUri(@Nullable Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentChannelLcn(int lcn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCurrentTvInputId(@Nullable String inputId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTimeShiftMode(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendAvailableSpeeds(@NonNull float[] speeds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendTvRecordingInfoList(@Nullable List<TvRecordingInfo> recordingInfoList)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSigningResult(String signingId, byte[] result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendCertificate(String host, int port, Bundle certBundle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyError(String errMsg, Bundle params)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTuned(Uri channelUri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTrackSelected(int type, String trackId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTracksChanged(List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyVideoAvailable()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyVideoUnavailable(int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyVideoFreezeUpdated(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyContentAllowed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyContentBlocked(TvContentRating rating)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifySignalStrength(int strength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyBroadcastInfoResponse(BroadcastInfoResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onBroadcastInfoResponse}.\n         ",
    "links" : [ "#onBroadcastInfoResponse" ]
  }, {
    "name" : " void notifyAdResponse(AdResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onAdResponse}.\n         ",
    "links" : [ "#onAdResponse" ]
  }, {
    "name" : " void notifyTvMessage(int type, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendSelectedTrackInfo(List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyAdBufferConsumed(AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onAdBufferConsumed}.\n         ",
    "links" : [ "#onAdBufferConsumed" ]
  }, {
    "name" : " void notifyRecordingStarted(String recordingId, String requestId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingStarted(String, String)}.\n         ",
    "links" : [ "#onRecordingStarted(String" ]
  }, {
    "name" : " void notifyRecordingStopped(String recordingId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingStopped(String)}.\n         ",
    "links" : [ "#onRecordingStopped(String)" ]
  }, {
    "name" : " void notifyRecordingConnectionFailed(String recordingId, String inputId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingConnectionFailed(String, String)}.\n         ",
    "links" : [ "#onRecordingConnectionFailed(String" ]
  }, {
    "name" : " void notifyRecordingDisconnected(String recordingId, String inputId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingDisconnected(String, String)}.\n         ",
    "links" : [ "#onRecordingDisconnected(String" ]
  }, {
    "name" : " void notifyRecordingTuned(String recordingId, Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingTuned(String, Uri)}.\n         ",
    "links" : [ "#onRecordingTuned(String" ]
  }, {
    "name" : " void notifyRecordingError(String recordingId, int err)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingError(String, int)}.\n         ",
    "links" : [ "#onRecordingError(String" ]
  }, {
    "name" : " void notifyRecordingScheduled(String recordingId, String requestId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onRecordingScheduled(String, String)}.\n         ",
    "links" : [ "#onRecordingScheduled(String" ]
  }, {
    "name" : " void notifyTimeShiftPlaybackParams(PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftPlaybackParams(PlaybackParams)}.\n         ",
    "links" : [ "#onTimeShiftPlaybackParams(PlaybackParams)" ]
  }, {
    "name" : " void notifyTimeShiftStatusChanged(String inputId, int status)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftStatusChanged(String, int)}.\n         ",
    "links" : [ "#onTimeShiftStatusChanged(String" ]
  }, {
    "name" : " void notifyTimeShiftStartPositionChanged(String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftStartPositionChanged(String, long)}.\n         ",
    "links" : [ "#onTimeShiftStartPositionChanged(String" ]
  }, {
    "name" : " void notifyTimeShiftCurrentPositionChanged(String inputId, long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftCurrentPositionChanged(String, long)}.\n         ",
    "links" : [ "#onTimeShiftCurrentPositionChanged(String" ]
  }, {
    "name" : "public void notifySessionStateChanged(@TvInteractiveAppManager.InteractiveAppState int state, @TvInteractiveAppManager.ErrorCode int err)",
    "returnType" : "void",
    "comment" : "\n         * Notifies when the session state is changed.\n         *\n         * @param state the current session state.\n         * @param err the error code for error state. {@link TvInteractiveAppManager#ERROR_NONE} is\n         *            used when the state is not\n         *            {@link TvInteractiveAppManager#INTERACTIVE_APP_STATE_ERROR}.\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppManager#ERROR_NONE", "android.media.tv.interactive.TvInteractiveAppManager#INTERACTIVE_APP_STATE_ERROR" ]
  }, {
    "name" : "public final void notifyBiInteractiveAppCreated(@NonNull Uri biIAppUri, @Nullable String biIAppId)",
    "returnType" : "void",
    "comment" : "\n         * Notifies the broadcast-independent(BI) interactive application has been created.\n         *\n         * @param biIAppId BI interactive app ID, which can be used to destroy the BI interactive\n         *                 app. {@code null} if it's not created successfully.\n         *\n         * @see #onCreateBiInteractiveAppRequest(Uri, Bundle)\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyTeletextAppStateChanged(@TvInteractiveAppManager.TeletextAppState int state)",
    "returnType" : "void",
    "comment" : "\n         * Notifies when the digital teletext app state is changed.\n         * @param state the current state.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAdBufferReady(@NonNull AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Notifies when the advertisement buffer is filled and ready to be read.\n         *\n         * @param buffer The {@link AdBuffer} to be received\n         ",
    "links" : [ "android.media.tv.AdBuffer" ]
  }, {
    "name" : " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)",
    "returnType" : "int",
    "comment" : "\n         * Takes care of dispatching incoming input events and tells whether the event was handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void initialize(ITvInteractiveAppSessionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetSurface}.\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : " void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSurfaceChanged}.\n         ",
    "links" : [ "#onSurfaceChanged" ]
  }, {
    "name" : "private void executeOrPostRunnableOnMainThread(Runnable action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void createMediaView(IBinder windowToken, Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates an media view. This calls {@link #onCreateMediaView} to get a view to attach\n         * to the media window.\n         *\n         * @param windowToken A window token of the application.\n         * @param frame A position of the media view.\n         ",
    "links" : [ "#onCreateMediaView" ]
  }, {
    "name" : " void relayoutMediaView(Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current media view.\n         *\n         * @param frame A new position of the media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeMediaView(boolean clearWindowToken)",
    "returnType" : "void",
    "comment" : "\n         * Removes the current media view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void scheduleMediaViewCleanup()",
    "returnType" : "void",
    "comment" : "\n         * Schedules a task which checks whether the media view is detached and kills the process\n         * if it is not. Note that this method is expected to be called in a non-main thread.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setMediaViewEnabled(final boolean enable)", "public boolean isMediaViewEnabled()", "public void onStartInteractiveApp()", "public void onStopInteractiveApp()", "public void onResetInteractiveApp()", "public void onCreateBiInteractiveAppRequest(@NonNull Uri biIAppUri, @Nullable Bundle params)", "public void onDestroyBiInteractiveAppRequest(@NonNull String biIAppId)", "public void onSetTeletextAppEnabled(boolean enable)", "public void onCurrentVideoBounds(@NonNull Rect bounds)", "public void onCurrentChannelUri(@Nullable Uri channelUri)", "public void onCurrentChannelLcn(int lcn)", "public void onStreamVolume(float volume)", "public void onTrackInfoList(@NonNull List<TvTrackInfo> tracks)", "public void onCurrentTvInputId(@Nullable String inputId)", "public void onTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)", "public void onAvailableSpeeds(@NonNull float[] speeds)", "public void onTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)", "public void onTvRecordingInfoList(@NonNull List<TvRecordingInfo> recordingInfoList)", "public void onRecordingStarted(@NonNull String recordingId, @Nullable String requestId)", "public void onRecordingStopped(@NonNull String recordingId)", "public void onRecordingConnectionFailed(@NonNull String recordingId, @NonNull String inputId)", "public void onRecordingDisconnected(@NonNull String recordingId, @NonNull String inputId)", "public void onRecordingTuned(@NonNull String recordingId, @NonNull Uri channelUri)", "public void onRecordingError(@NonNull String recordingId, @TvInputManager.RecordingError int err)", "public void onRecordingScheduled(@NonNull String recordingId, @Nullable String requestId)", "public void onSigningResult(@NonNull String signingId, @NonNull byte[] result)", "public void onCertificate(@NonNull String host, int port, @NonNull SslCertificate cert)", "public void onError(@NonNull String errMsg, @NonNull Bundle params)", "public void onTimeShiftPlaybackParams(@NonNull PlaybackParams params)", "public void onTimeShiftStatusChanged(@NonNull String inputId, @TvInputManager.TimeShiftStatus int status)", "public void onTimeShiftStartPositionChanged(@NonNull String inputId, long timeMs)", "public void onTimeShiftCurrentPositionChanged(@NonNull String inputId, long timeMs)", "public abstract boolean onSetSurface(@Nullable Surface surface)", "public void onSurfaceChanged(@PixelFormat.Format int format, int width, int height)", "public void onMediaViewSizeChanged(@Px int width, @Px int height)", "public View onCreateMediaView()", "public abstract void onRelease()", "public void onTuned(@NonNull Uri channelUri)", "public void onTrackSelected(@TvTrackInfo.Type int type, @NonNull String trackId)", "public void onTracksChanged(@NonNull List<TvTrackInfo> tracks)", "public void onVideoAvailable()", "public void onVideoUnavailable(@TvInputManager.VideoUnavailableReason int reason)", "public void onVideoFreezeUpdated(boolean isFrozen)", "public void onContentAllowed()", "public void onContentBlocked(@NonNull TvContentRating rating)", "public void onSignalStrength(@TvInputManager.SignalStrength int strength)", "public void onBroadcastInfoResponse(@NonNull BroadcastInfoResponse response)", "public void onAdResponse(@NonNull AdResponse response)", "public void onAdBufferConsumed(@NonNull AdBuffer buffer)", "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)", "public void onSelectedTrackInfo(@NonNull List<TvTrackInfo> tracks)", "public boolean onKeyDown(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyLongPress(int keyCode, @NonNull KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int count, @NonNull KeyEvent event)", "public boolean onKeyUp(int keyCode, @NonNull KeyEvent event)", "public boolean onTouchEvent(@NonNull MotionEvent event)", "public boolean onTrackballEvent(@NonNull MotionEvent event)", "public boolean onGenericMotionEvent(@NonNull MotionEvent event)", "public void layoutSurface(final int left, final int top, final int right, final int bottom)", "public void requestBroadcastInfo(@NonNull final BroadcastInfoRequest request)", "public void removeBroadcastInfo(final int requestId)", "public void sendPlaybackCommandRequest(@PlaybackCommandType @NonNull String cmdType, @Nullable Bundle parameters)", "public void sendTimeShiftCommandRequest(@TimeShiftCommandType @NonNull String cmdType, @Nullable Bundle parameters)", "public void setVideoBounds(@NonNull Rect rect)", "public void requestCurrentVideoBounds()", "public void requestCurrentChannelUri()", "public void requestCurrentChannelLcn()", "public void requestStreamVolume()", "public void requestTrackInfoList()", "public void requestCurrentTvInputId()", "public void requestTimeShiftMode()", "public void requestAvailableSpeeds()", "public void requestSelectedTrackInfo()", "public void requestStartRecording(@NonNull String requestId, @Nullable Uri programUri)", "public void requestStopRecording(@NonNull String recordingId)", "public void requestScheduleRecording(@NonNull String requestId, @NonNull String inputId, @NonNull Uri channelUri, @NonNull Uri programUri, @NonNull Bundle params)", "public void requestScheduleRecording(@NonNull String requestId, @NonNull String inputId, @NonNull Uri channelUri, long startTime, long duration, int repeatDays, @NonNull Bundle params)", "public void setTvRecordingInfo(@NonNull String recordingId, @NonNull TvRecordingInfo recordingInfo)", "public void requestTvRecordingInfo(@NonNull String recordingId)", "public void requestTvRecordingInfoList(@TvRecordingInfo.TvRecordingListType int type)", "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String alias, @NonNull byte[] data)", "public void requestSigning(@NonNull String signingId, @NonNull String algorithm, @NonNull String host, int port, @NonNull byte[] data)", "public void requestCertificate(@NonNull String host, int port)", "public void requestAd(@NonNull final AdRequest request)", " void startInteractiveApp()", " void stopInteractiveApp()", " void resetInteractiveApp()", " void createBiInteractiveApp(@NonNull Uri biIAppUri, @Nullable Bundle params)", " void destroyBiInteractiveApp(@NonNull String biIAppId)", " void setTeletextAppEnabled(boolean enable)", " void sendCurrentVideoBounds(@NonNull Rect bounds)", " void sendCurrentChannelUri(@Nullable Uri channelUri)", " void sendCurrentChannelLcn(int lcn)", " void sendStreamVolume(float volume)", " void sendTrackInfoList(@NonNull List<TvTrackInfo> tracks)", " void sendCurrentTvInputId(@Nullable String inputId)", " void sendTimeShiftMode(int mode)", " void sendAvailableSpeeds(@NonNull float[] speeds)", " void sendTvRecordingInfo(@Nullable TvRecordingInfo recordingInfo)", " void sendTvRecordingInfoList(@Nullable List<TvRecordingInfo> recordingInfoList)", " void sendSigningResult(String signingId, byte[] result)", " void sendCertificate(String host, int port, Bundle certBundle)", " void notifyError(String errMsg, Bundle params)", " void release()", " void notifyTuned(Uri channelUri)", " void notifyTrackSelected(int type, String trackId)", " void notifyTracksChanged(List<TvTrackInfo> tracks)", " void notifyVideoAvailable()", " void notifyVideoUnavailable(int reason)", " void notifyVideoFreezeUpdated(boolean isFrozen)", " void notifyContentAllowed()", " void notifyContentBlocked(TvContentRating rating)", " void notifySignalStrength(int strength)", " void notifyBroadcastInfoResponse(BroadcastInfoResponse response)", " void notifyAdResponse(AdResponse response)", " void notifyTvMessage(int type, Bundle data)", " void sendSelectedTrackInfo(List<TvTrackInfo> tracks)", " void notifyAdBufferConsumed(AdBuffer buffer)", " void notifyRecordingStarted(String recordingId, String requestId)", " void notifyRecordingStopped(String recordingId)", " void notifyRecordingConnectionFailed(String recordingId, String inputId)", " void notifyRecordingDisconnected(String recordingId, String inputId)", " void notifyRecordingTuned(String recordingId, Uri channelUri)", " void notifyRecordingError(String recordingId, int err)", " void notifyRecordingScheduled(String recordingId, String requestId)", " void notifyTimeShiftPlaybackParams(PlaybackParams params)", " void notifyTimeShiftStatusChanged(String inputId, int status)", " void notifyTimeShiftStartPositionChanged(String inputId, long timeMs)", " void notifyTimeShiftCurrentPositionChanged(String inputId, long timeMs)", "public void notifySessionStateChanged(@TvInteractiveAppManager.InteractiveAppState int state, @TvInteractiveAppManager.ErrorCode int err)", "public final void notifyBiInteractiveAppCreated(@NonNull Uri biIAppUri, @Nullable String biIAppId)", "public final void notifyTeletextAppStateChanged(@TvInteractiveAppManager.TeletextAppState int state)", "public void notifyAdBufferReady(@NonNull AdBuffer buffer)", " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)", "private void initialize(ITvInteractiveAppSessionCallback callback)", " void setSurface(Surface surface)", " void dispatchSurfaceChanged(int format, int width, int height)", "private void executeOrPostRunnableOnMainThread(Runnable action)", " void createMediaView(IBinder windowToken, Rect frame)", " void relayoutMediaView(Rect frame)", " void removeMediaView(boolean clearWindowToken)", " void scheduleMediaViewCleanup()" ],
  "variableNames" : [ "mDispatcherState", "mLock", "mSessionCallback", "mPendingActions", "mContext", "mHandler", "mWindowManager", "mWindowParams", "mSurface", "mMediaViewContainer", "mMediaView", "mMediaViewCleanUpTask", "mMediaViewEnabled", "mWindowToken", "mMediaFrame" ]
}