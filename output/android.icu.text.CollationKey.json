{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CollationKey.java",
  "packageName" : "android.icu.text",
  "className" : "CollationKey",
  "comment" : "\n * A <code>CollationKey</code> represents a <code>String</code>\n * under the rules of a specific <code>Collator</code>\n * object. Comparing two <code>CollationKey</code>s returns the\n * relative order of the <code>String</code>s they represent.\n *\n * <p>Since the rule set of <code>Collator</code>s can differ, the\n * sort orders of the same string under two different\n * <code>Collator</code>s might differ.  Hence comparing\n * <code>CollationKey</code>s generated from different\n * <code>Collator</code>s can give incorrect results.\n\n * <p>Both the method\n * <code>CollationKey.compareTo(CollationKey)</code> and the method\n * <code>Collator.compare(String, String)</code> compare two strings\n * and returns their relative order.  The performance characteristics\n * of these two approaches can differ.\n * Note that collation keys are often less efficient than simply doing comparison.\n * For more details, see the ICU User Guide.\n *\n * <p>During the construction of a <code>CollationKey</code>, the\n * entire source string is examined and processed into a series of\n * bits terminated by a null, that are stored in the <code>CollationKey</code>.\n * When <code>CollationKey.compareTo(CollationKey)</code> executes, it\n * performs bitwise comparison on the bit sequences.  This can incurs\n * startup cost when creating the <code>CollationKey</code>, but once\n * the key is created, binary comparisons are fast.  This approach is\n * recommended when the same strings are to be compared over and over\n * again.\n *\n * <p>On the other hand, implementations of\n * <code>Collator.compare(String, String)</code> can examine and\n * process the strings only until the first characters differing in\n * order.  This approach is recommended if the strings are to be\n * compared only once.</p>\n *\n * <p>More information about the composition of the bit sequence can\n * be found in the\n * <a href=\"https://unicode-org.github.io/icu/userguide/collation/architecture\">\n * user guide</a>.</p>\n *\n * <p>The following example shows how <code>CollationKey</code>s can be used\n * to sort a list of <code>String</code>s.</p>\n * <blockquote>\n * <pre>\n * // Create an array of CollationKeys for the Strings to be sorted.\n * Collator myCollator = Collator.getInstance();\n * CollationKey[] keys = new CollationKey[3];\n * keys[0] = myCollator.getCollationKey(\"Tom\");\n * keys[1] = myCollator.getCollationKey(\"Dick\");\n * keys[2] = myCollator.getCollationKey(\"Harry\");\n * sort( keys );\n * <br>\n * //...\n * <br>\n * // Inside body of sort routine, compare keys this way\n * if( keys[i].compareTo( keys[j] ) &gt; 0 )\n *    // swap keys[i] and keys[j]\n * <br>\n * //...\n * <br>\n * // Finally, when we've returned from sort.\n * System.out.println( keys[0].getSourceString() );\n * System.out.println( keys[1].getSourceString() );\n * System.out.println( keys[2].getSourceString() );\n * </pre>\n * </blockquote>\n * <p>\n * This class is not subclassable\n * @see Collator\n * @see RuleBasedCollator\n * @author Syn Wee Quek\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_key_",
    "type" : "byte[]",
    "comment" : "\n     * Sequence of bytes that represents the sort key\n     ",
    "links" : [ ]
  }, {
    "name" : "m_source_",
    "type" : "String",
    "comment" : "\n     * Source string this CollationKey represents\n     ",
    "links" : [ ]
  }, {
    "name" : "m_hashCode_",
    "type" : "int",
    "comment" : "\n     * Hash code for the key\n     ",
    "links" : [ ]
  }, {
    "name" : "m_length_",
    "type" : "int",
    "comment" : "\n     * Gets the length of this CollationKey\n     ",
    "links" : [ ]
  }, {
    "name" : "MERGE_SEPERATOR_",
    "type" : "int",
    "comment" : "\n     * Collation key merge seperator\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getSourceString()",
    "returnType" : "String",
    "comment" : "\n     * Return the source string that this CollationKey represents.\n     * @return source string that this CollationKey represents\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Duplicates and returns the value of this CollationKey as a sequence\n     * of big-endian bytes terminated by a null.\n     *\n     * <p>If two CollationKeys can be legitimately compared, then one can\n     * compare the byte arrays of each to obtain the same result, e.g.\n     * <pre>\n     * byte key1[] = collationkey1.toByteArray();\n     * byte key2[] = collationkey2.toByteArray();\n     * int key, targetkey;\n     * int i = 0;\n     * do {\n     *       key = key1[i] &amp; 0xFF;\n     *     targetkey = key2[i] &amp; 0xFF;\n     *     if (key &lt; targetkey) {\n     *         System.out.println(\"String 1 is less than string 2\");\n     *         return;\n     *     }\n     *     if (targetkey &lt; key) {\n     *         System.out.println(\"String 1 is more than string 2\");\n     *     }\n     *     i ++;\n     * } while (key != 0 &amp;&amp; targetKey != 0);\n     *\n     * System.out.println(\"Strings are equal.\");\n     * </pre>\n     *\n     * @return CollationKey value in a sequence of big-endian byte bytes\n     *         terminated by a null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(CollationKey target)",
    "returnType" : "int",
    "comment" : "\n     * Compare this CollationKey to another CollationKey.  The\n     * collation rules of the Collator that created this key are\n     * applied.\n     *\n     * <p><strong>Note:</strong> Comparison between CollationKeys\n     * created by different Collators might return incorrect\n     * results.  See class documentation.\n     *\n     * @param target target CollationKey\n     * @return an integer value.  If the value is less than zero this CollationKey\n     *         is less than than target, if the value is zero they are equal, and\n     *         if the value is greater than zero this CollationKey is greater\n     *         than target.\n     * @exception NullPointerException is thrown if argument is null.\n     * @see Collator#compare(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare this CollationKey and the specified Object for\n     * equality.  The collation rules of the Collator that created\n     * this key are applied.\n     *\n     * <p>See note in compareTo(CollationKey) for warnings about\n     * possible incorrect results.\n     *\n     * @param target the object to compare to.\n     * @return true if the two keys compare as equal, false otherwise.\n     * @see #compareTo(CollationKey)\n     * @exception ClassCastException is thrown when the argument is not\n     *            a CollationKey.  NullPointerException is thrown when the argument\n     *            is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(CollationKey target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare this CollationKey and the argument target CollationKey for\n     * equality.\n     * The collation\n     * rules of the Collator object which created these objects are applied.\n     * <p>\n     * See note in compareTo(CollationKey) for warnings of incorrect results\n     *\n     * @param target the CollationKey to compare to.\n     * @return true if two objects are equal, false otherwise.\n     * @exception NullPointerException is thrown when the argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code for this CollationKey. The hash value is calculated\n     * on the key itself, not the String from which the key was created. Thus\n     * if x and y are CollationKeys, then x.hashCode(x) == y.hashCode()\n     * if x.equals(y) is true. This allows language-sensitive comparison in a\n     * hash table.\n     *\n     * @return the hash value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CollationKey getBound(int boundType, int noOfLevels)",
    "returnType" : "CollationKey",
    "comment" : "\n     * Produces a bound for the sort order of a given collation key and a\n     * strength level. This API does not attempt to find a bound for the\n     * CollationKey String representation, hence null will be returned in its\n     * place.\n     * <p>\n     * Resulting bounds can be used to produce a range of strings that are\n     * between upper and lower bounds. For example, if bounds are produced\n     * for a sortkey of string \"smith\", strings between upper and lower\n     * bounds with primary strength would include \"Smith\", \"SMITH\", \"sMiTh\".\n     * <p>\n     * There are two upper bounds that can be produced. If BoundMode.UPPER\n     * is produced, strings matched would be as above. However, if a bound\n     * is produced using BoundMode.UPPER_LONG is used, the above example will\n     * also match \"Smithsonian\" and similar.\n     * <p>\n     * For more on usage, see example in test procedure\n     * <a href=\"https://github.com/unicode-org/icu/blob/main/icu4j/main/collate/src/test/java/com/ibm/icu/dev/test/collator/CollationAPITest.java\">\n     * src/com/ibm/icu/dev/test/collator/CollationAPITest/TestBounds.\n     * </a>\n     * <p>\n     * Collation keys produced may be compared using the <TT>compare</TT> API.\n     * @param boundType Mode of bound required. It can be BoundMode.LOWER, which\n     *              produces a lower inclusive bound, BoundMode.UPPER, that\n     *              produces upper bound that matches strings of the same\n     *              length or BoundMode.UPPER_LONG that matches strings that\n     *              have the same starting substring as the source string.\n     * @param noOfLevels Strength levels required in the resulting bound\n     *                 (for most uses, the recommended value is PRIMARY). This\n     *                 strength should be less than the maximum strength of\n     *                 this CollationKey.\n     *                 See users guide for explanation on the strength levels a\n     *                 collation key can have.\n     * @return the result bounded CollationKey with a valid sort order but\n     *         a null String representation.\n     * @exception IllegalArgumentException thrown when the strength level\n     *            requested is higher than or equal to the strength in this\n     *            CollationKey.\n     *            In the case of an Exception, information\n     *            about the maximum strength to use will be returned in the\n     *            Exception. The user can then call getBound() again with the\n     *            appropriate strength.\n     * @see CollationKey\n     * @see CollationKey.BoundMode\n     * @see Collator#PRIMARY\n     * @see Collator#SECONDARY\n     * @see Collator#TERTIARY\n     * @see Collator#QUATERNARY\n     * @see Collator#IDENTICAL\n     ",
    "links" : [ ]
  }, {
    "name" : "public CollationKey merge(CollationKey source)",
    "returnType" : "CollationKey",
    "comment" : "\n     * Merges this CollationKey with another.\n     * The levels are merged with their corresponding counterparts\n     * (primaries with primaries, secondaries with secondaries etc.).\n     * Between the values from the same level a separator is inserted.\n     *\n     * <p>This is useful, for example, for combining sort keys from first and last names\n     * to sort such pairs.\n     * See http://www.unicode.org/reports/tr10/#Merging_Sort_Keys\n     *\n     * <p>The recommended way to achieve \"merged\" sorting is by\n     * concatenating strings with U+FFFE between them.\n     * The concatenation has the same sort order as the merged sort keys,\n     * but merge(getSortKey(str1), getSortKey(str2)) may differ from getSortKey(str1 + '\\uFFFE' + str2).\n     * Using strings with U+FFFE may yield shorter sort keys.\n     *\n     * <p>For details about Sort Key Features see\n     * https://unicode-org.github.io/icu/userguide/collation/api#sort-key-features\n     *\n     * <p>It is possible to merge multiple sort keys by consecutively merging\n     * another one with the intermediate result.\n     *\n     * <p>Only the sort key bytes of the CollationKeys are merged.\n     * This API does not attempt to merge the\n     * String representations of the CollationKeys, hence null will be returned\n     * as the result's String representation.\n     *\n     * <p>Example (uncompressed):\n     * <pre>191B1D 01 050505 01 910505 00\n     * 1F2123 01 050505 01 910505 00</pre>\n     * will be merged as\n     * <pre>191B1D 02 1F2123 01 050505 02 050505 01 910505 02 910505 00</pre>\n     *\n     * @param source CollationKey to merge with\n     * @return a CollationKey that contains the valid merged sort keys\n     *         with a null String representation,\n     *         i.e. <tt>new CollationKey(null, merged_sort_keys)</tt>\n     * @exception IllegalArgumentException thrown if source CollationKey\n     *            argument is null or of 0 length.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Gets the length of the CollationKey\n     * @return length of the CollationKey\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getSourceString()", "public byte[] toByteArray()", "public int compareTo(CollationKey target)", "public boolean equals(Object target)", "public boolean equals(CollationKey target)", "public int hashCode()", "public CollationKey getBound(int boundType, int noOfLevels)", "public CollationKey merge(CollationKey source)", "private int getLength()" ],
  "variableNames" : [ "m_key_", "m_source_", "m_hashCode_", "m_length_", "MERGE_SEPERATOR_" ]
}