{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/CompanionDeviceManager.java",
  "packageName" : "android.companion",
  "className" : "Callback",
  "comment" : "\n     * Callback for applications to receive updates about and the outcome of\n     * {@link AssociationRequest} issued via {@code associate()} call.\n     *\n     * <p>\n     * The {@link Callback#onAssociationPending(IntentSender)} is invoked after the\n     * {@link AssociationRequest} has been checked by the Companion Device Manager Service and is\n     * pending user's approval.\n     *\n     * The {@link IntentSender} received as an argument to\n     * {@link Callback#onAssociationPending(IntentSender)} \"encapsulates\" an {@link Activity}\n     * that has UI for the user to:\n     * <ul>\n     * <li>\n     * choose the device to associate the application with (if multiple eligible devices are\n     * available)\n     * </li>\n     * <li>confirm the association</li>\n     * <li>\n     * approve the privileges the application will be granted if the association is to be created\n     * </li>\n     * </ul>\n     *\n     * If the Companion Device Manager Service needs to scan for the devices, the {@link Activity}\n     * will also display the status and the progress of the scan.\n     *\n     * Note that Companion Device Manager Service will only start the scanning after the\n     * {@link Activity} was launched and became visible.\n     *\n     * Applications are expected to launch the UI using the received {@link IntentSender} via\n     * {@link Activity#startIntentSenderForResult(IntentSender, int, Intent, int, int, int)}.\n     * </p>\n     *\n     * <p>\n     * Upon receiving user's confirmation Companion Device Manager Service will create an\n     * association and will send an {@link AssociationInfo} object that represents the created\n     * association back to the application both via\n     * {@link Callback#onAssociationCreated(AssociationInfo)} and\n     * via {@link Activity#setResult(int, Intent)}.\n     * In the latter the {@code resultCode} will be set to {@link Activity#RESULT_OK} and the\n     * {@code data} {@link Intent} will contain {@link AssociationInfo} extra named\n     * {@link #EXTRA_ASSOCIATION}.\n     * <pre>\n     * <code>\n     *   if (resultCode == Activity.RESULT_OK) {\n     *     AssociationInfo associationInfo = data.getParcelableExtra(EXTRA_ASSOCIATION);\n     *   }\n     * </code>\n     * </pre>\n     * </p>\n     *\n     * <p>\n     *  If the Companion Device Manager Service is not able to create an association, it will\n     *  invoke {@link Callback#onFailure(CharSequence)}.\n     *\n     *  If this happened after the application has launched the UI (eg. the user chose to reject\n     *  the association), the outcome will also be delivered to the applications via\n     *  {@link Activity#setResult(int)} with the {@link Activity#RESULT_CANCELED}\n     *  {@code resultCode}.\n     * </p>\n     *\n     * <p>\n     * Note that in some cases the Companion Device Manager Service may not need to collect\n     * user's approval for creating an association. In such cases, this method will not be\n     * invoked, and {@link #onAssociationCreated(AssociationInfo)} may be invoked right away.\n     * </p>\n     *\n     * @see #associate(AssociationRequest, Executor, Callback)\n     * @see #associate(AssociationRequest, Callback, Handler)\n     * @see #EXTRA_ASSOCIATION\n     ",
  "links" : [ "#onAssociationPending(IntentSender)", "#onFailure(CharSequence)", "android.app.PendingIntent", "android.app.Activity#startIntentSenderForResult(IntentSender", "#onAssociationCreated(AssociationInfo)", "android.companion.AssociationInfo", "android.app.Activity#RESULT_CANCELED", "android.content.IntentSender", "android.app.Activity#RESULT_OK", "android.app.Activity#setResult(int)", "#EXTRA_ASSOCIATION", "android.app.Activity", "android.app.Activity#setResult(int", "android.companion.AssociationRequest" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onDeviceFound(@NonNull IntentSender intentSender)",
    "returnType" : "void",
    "comment" : "\n         * @deprecated method was renamed to onAssociationPending() to provide better clarity; both\n         * methods are functionally equivalent and only one needs to be overridden.\n         *\n         * @see #onAssociationPending(IntentSender)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAssociationPending(@NonNull IntentSender intentSender)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the association needs to approved by the user.\n         *\n         * Applications should launch the {@link Activity} \"encapsulated\" in {@code intentSender}\n         * {@link IntentSender} object by calling\n         * {@link Activity#startIntentSenderForResult(IntentSender, int, Intent, int, int, int)}.\n         *\n         * @param intentSender an {@link IntentSender} which applications should use to launch\n         *                     the UI for the user to confirm the association.\n         ",
    "links" : [ "android.content.IntentSender", "android.app.Activity#startIntentSenderForResult(IntentSender", "android.app.Activity" ]
  }, {
    "name" : "public void onAssociationCreated(@NonNull AssociationInfo associationInfo)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the association is created.\n         *\n         * @param associationInfo contains details of the newly-established association.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onFailure(@Nullable CharSequence error)",
    "returnType" : "void",
    "comment" : "\n         * Invoked if the association could not be created.\n         *\n         * @param error error message.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onDeviceFound(@NonNull IntentSender intentSender)", "public void onAssociationPending(@NonNull IntentSender intentSender)", "public void onAssociationCreated(@NonNull AssociationInfo associationInfo)", "public abstract void onFailure(@Nullable CharSequence error)" ],
  "variableNames" : [ ]
}