{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telecom/Call.java",
  "packageName" : "android.telecom",
  "className" : "Callback",
  "comment" : "\n     * Defines callbacks which inform the {@link InCallService} of changes to a {@link Call}.\n     * These callbacks can originate from the Telecom framework, or a {@link ConnectionService}\n     * implementation.\n     * <p>\n     * You can handle these callbacks by extending the {@link Callback} class and overriding the\n     * callbacks that your {@link InCallService} is interested in.  The callback methods include the\n     * {@link Call} for which the callback applies, allowing reuse of a single instance of your\n     * {@link Callback} implementation, if desired.\n     * <p>\n     * Use {@link Call#registerCallback(Callback)} to register your callback(s).  Ensure\n     * {@link Call#unregisterCallback(Callback)} is called when you no longer require callbacks\n     * (typically in {@link InCallService#onCallRemoved(Call)}).\n     * Note: Callbacks which occur before you call {@link Call#registerCallback(Callback)} will not\n     * reach your implementation of {@link Callback}, so it is important to register your callback\n     * as soon as your {@link InCallService} is notified of a new call via\n     * {@link InCallService#onCallAdded(Call)}.\n     ",
  "links" : [ "android.telecom.InCallService#onCallRemoved(Call)", "android.telecom.InCallService", "Callback", "android.telecom.InCallService#onCallAdded(Call)", "android.telecom.Call#registerCallback(Callback)", "android.telecom.Call", "android.telecom.ConnectionService", "android.telecom.Call#unregisterCallback(Callback)" ],
  "variables" : [ {
    "name" : "HANDOVER_FAILURE_DEST_APP_REJECTED",
    "type" : "int",
    "comment" : "\n         * Handover failure reason returned via {@link #onHandoverFailed(Call, int)} when the app\n         * to handover the call to rejects the handover request.\n         * <p>\n         * Will be returned when {@link Call#handoverTo(PhoneAccountHandle, int, Bundle)} is called\n         * and the destination {@link PhoneAccountHandle}'s {@link ConnectionService} returns a\n         * {@code null} {@link Connection} from\n         * {@link ConnectionService#onCreateOutgoingHandoverConnection(PhoneAccountHandle,\n         * ConnectionRequest)}.\n         * <p>\n         * For more information on call handovers, see\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)}.\n         ",
    "links" : [ "android.telecom.PhoneAccountHandle", "#onHandoverFailed(Call", "#handoverTo(PhoneAccountHandle", "android.telecom.ConnectionService#onCreateOutgoingHandoverConnection(PhoneAccountHandle", "android.telecom.Connection", "android.telecom.ConnectionService", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "HANDOVER_FAILURE_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n         * Handover failure reason returned via {@link #onHandoverFailed(Call, int)} when a handover\n         * is initiated but the source or destination app does not support handover.\n         * <p>\n         * Will be returned when a handover is requested via\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)} and the destination\n         * {@link PhoneAccountHandle} does not declare\n         * {@link PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO}.  May also be returned when a handover is\n         * requested at the {@link PhoneAccountHandle} for the current call (i.e. the source call's\n         * {@link Details#getAccountHandle()}) does not declare\n         * {@link PhoneAccount#EXTRA_SUPPORTS_HANDOVER_FROM}.\n         * <p>\n         * For more information on call handovers, see\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)}.\n         ",
    "links" : [ "android.telecom.PhoneAccountHandle", "android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_FROM", "#onHandoverFailed(Call", "#handoverTo(PhoneAccountHandle", "#getAccountHandle()", "android.telecom.PhoneAccount#EXTRA_SUPPORTS_HANDOVER_TO" ]
  }, {
    "name" : "HANDOVER_FAILURE_USER_REJECTED",
    "type" : "int",
    "comment" : "\n         * Handover failure reason returned via {@link #onHandoverFailed(Call, int)} when the remote\n         * user rejects the handover request.\n         * <p>\n         * For more information on call handovers, see\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)}.\n         ",
    "links" : [ "#onHandoverFailed(Call", "#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL",
    "type" : "int",
    "comment" : "\n         * Handover failure reason returned via {@link #onHandoverFailed(Call, int)} when there\n         * is ongoing emergency call.\n         * <p>\n         * This error code is returned when {@link #handoverTo(PhoneAccountHandle, int, Bundle)} is\n         * called on an emergency call, or if any other call is an emergency call.\n         * <p>\n         * Handovers are not permitted while there are ongoing emergency calls.\n         * <p>\n         * For more information on call handovers, see\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)}.\n         ",
    "links" : [ "#onHandoverFailed(Call", "#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "HANDOVER_FAILURE_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * Handover failure reason returned via {@link #onHandoverFailed(Call, int)} when a handover\n         * fails for an unknown reason.\n         * <p>\n         * For more information on call handovers, see\n         * {@link #handoverTo(PhoneAccountHandle, int, Bundle)}.\n         ",
    "links" : [ "#onHandoverFailed(Call", "#handoverTo(PhoneAccountHandle" ]
  } ],
  "methods" : [ {
    "name" : "public void onStateChanged(Call call, @CallState int state)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the state of this {@code Call} has changed. See {@link #getState()}.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param state The new state of the {@code Call}.\n         ",
    "links" : [ "#getState()" ]
  }, {
    "name" : "public void onParentChanged(Call call, Call parent)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the parent of this {@code Call} has changed. See {@link #getParent()}.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param parent The new parent of the {@code Call}.\n         ",
    "links" : [ "#getParent()" ]
  }, {
    "name" : "public void onChildrenChanged(Call call, List<Call> children)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the children of this {@code Call} have changed. See {@link #getChildren()}.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param children The new children of the {@code Call}.\n         ",
    "links" : [ "#getChildren()" ]
  }, {
    "name" : "public void onDetailsChanged(Call call, Details details)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the details of this {@code Call} have changed. See {@link #getDetails()}.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param details A {@code Details} object describing the {@code Call}.\n         ",
    "links" : [ "#getDetails()" ]
  }, {
    "name" : "public void onCannedTextResponsesLoaded(Call call, List<String> cannedTextResponses)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the text messages that can be used as responses to the incoming\n         * {@code Call} are loaded from the relevant database.\n         * See {@link #getCannedTextResponses()}.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param cannedTextResponses The text messages useable as responses.\n         ",
    "links" : [ "#getCannedTextResponses()" ]
  }, {
    "name" : "public void onPostDialWait(Call call, String remainingPostDialSequence)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the post-dial sequence in the outgoing {@code Call} has reached a pause\n         * character. This causes the post-dial signals to stop pending user confirmation. An\n         * implementation should present this choice to the user and invoke\n         * {@link #postDialContinue(boolean)} when the user makes the choice.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param remainingPostDialSequence The post-dial characters that remain to be sent.\n         ",
    "links" : [ "#postDialContinue(boolean)" ]
  }, {
    "name" : "public void onVideoCallChanged(Call call, InCallService.VideoCall videoCall)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the {@code Call.VideoCall} of the {@code Call} has changed.\n         *\n         * @param call The {@code Call} invoking this method.\n         * @param videoCall The {@code Call.VideoCall} associated with the {@code Call}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCallDestroyed(Call call)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the {@code Call} is destroyed. Clients should refrain from cleaning\n         * up their UI for the {@code Call} in response to state transitions. Specifically,\n         * clients should not assume that a {@link #onStateChanged(Call, int)} with a state of\n         * {@link #STATE_DISCONNECTED} is the final notification the {@code Call} will send. Rather,\n         * clients should wait for this method to be invoked.\n         *\n         * @param call The {@code Call} being destroyed.\n         ",
    "links" : [ "#STATE_DISCONNECTED", "#onStateChanged(Call" ]
  }, {
    "name" : "public void onConferenceableCallsChanged(Call call, List<Call> conferenceableCalls)",
    "returnType" : "void",
    "comment" : "\n         * Invoked upon changes to the set of {@code Call}s with which this {@code Call} can be\n         * conferenced.\n         *\n         * @param call The {@code Call} being updated.\n         * @param conferenceableCalls The {@code Call}s with which this {@code Call} can be\n         *          conferenced.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onConnectionEvent(Call call, String event, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when a {@link Call} receives an event from its associated {@link Connection} or\n         * {@link Conference}.\n         * <p>\n         * Where possible, the Call should make an attempt to handle {@link Connection} events which\n         * are part of the {@code android.telecom.*} namespace.  The Call should ignore any events\n         * it does not wish to handle.  Unexpected events should be handled gracefully, as it is\n         * possible that a {@link ConnectionService} has defined its own Connection events which a\n         * Call is not aware of.\n         * <p>\n         * See {@link Connection#sendConnectionEvent(String, Bundle)},\n         * {@link Conference#sendConferenceEvent(String, Bundle)}.\n         *\n         * @param call The {@code Call} receiving the event.\n         * @param event The event.\n         * @param extras Extras associated with the connection event.\n         ",
    "links" : [ "android.telecom.Conference#sendConferenceEvent(String", "android.telecom.Conference", "android.telecom.Connection#sendConnectionEvent(String", "android.telecom.Connection", "android.telecom.Call", "android.telecom.ConnectionService" ]
  }, {
    "name" : "public void onRttModeChanged(Call call, int mode)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the RTT mode changes for this call.\n         * @param call The call whose RTT mode has changed.\n         * @param mode the new RTT mode, one of\n         * {@link RttCall#RTT_MODE_FULL}, {@link RttCall#RTT_MODE_HCO},\n         *             or {@link RttCall#RTT_MODE_VCO}\n         ",
    "links" : [ "#RTT_MODE_VCO", "#RTT_MODE_HCO", "#RTT_MODE_FULL" ]
  }, {
    "name" : "public void onRttStatusChanged(Call call, boolean enabled, RttCall rttCall)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the call's RTT status changes, either from off to on or from on to off.\n         * @param call The call whose RTT status has changed.\n         * @param enabled whether RTT is now enabled or disabled\n         * @param rttCall the {@link RttCall} object to use for reading and writing if RTT is now\n         *                on, null otherwise.\n         ",
    "links" : [ "RttCall" ]
  }, {
    "name" : "public void onRttRequest(Call call, int id)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the remote end of the connection has requested that an RTT communication\n         * channel be opened. A response to this should be sent via {@link #respondToRttRequest}\n         * with the same ID that this method is invoked with.\n         * @param call The call which the RTT request was placed on\n         * @param id The ID of the request.\n         ",
    "links" : [ "#respondToRttRequest" ]
  }, {
    "name" : "public void onRttInitiationFailure(Call call, @android.telecom.Connection.RttModifyStatus.RttSessionModifyStatus int reason)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when the RTT session failed to initiate for some reason, including rejection\n         * by the remote party.\n         * <p>\n         * This callback will ONLY be invoked to report a failure related to a user initiated\n         * session modification request (i.e. {@link Call#sendRttRequest()}).\n         * <p>\n         * If a call is initiated with {@link TelecomManager#EXTRA_START_CALL_WITH_RTT} specified,\n         * the availability of RTT can be determined by checking {@link Details#PROPERTY_RTT}\n         * once the call enters state {@link Details#STATE_ACTIVE}.\n         *\n         * @param call The call which the RTT initiation failure occurred on.\n         * @param reason One of the status codes defined in\n         *      {@link android.telecom.Connection.RttModifyStatus}, with the exception of\n         *      {@link android.telecom.Connection.RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS}.\n         ",
    "links" : [ "android.telecom.Connection.RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS", "android.telecom.Connection.RttModifyStatus", "android.telecom.TelecomManager#EXTRA_START_CALL_WITH_RTT", "android.telecom.Call#sendRttRequest()", "#STATE_ACTIVE", "#PROPERTY_RTT" ]
  }, {
    "name" : "public void onHandoverComplete(Call call)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when Call handover from one {@link PhoneAccount} to other {@link PhoneAccount}\n         * has completed successfully.\n         * <p>\n         * For a full discussion of the handover process and the APIs involved, see\n         * {@link android.telecom.Call#handoverTo(PhoneAccountHandle, int, Bundle)}.\n         *\n         * @param call The call which had initiated handover.\n         ",
    "links" : [ "android.telecom.PhoneAccount", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  }, {
    "name" : "public void onHandoverFailed(Call call, @HandoverFailureErrors int failureReason)",
    "returnType" : "void",
    "comment" : "\n         * Invoked when Call handover from one {@link PhoneAccount} to other {@link PhoneAccount}\n         * has failed.\n         * <p>\n         * For a full discussion of the handover process and the APIs involved, see\n         * {@link android.telecom.Call#handoverTo(PhoneAccountHandle, int, Bundle)}.\n         *\n         * @param call The call which had initiated handover.\n         * @param failureReason Error reason for failure.\n         ",
    "links" : [ "android.telecom.PhoneAccount", "android.telecom.Call#handoverTo(PhoneAccountHandle" ]
  } ],
  "methodNames" : [ "public void onStateChanged(Call call, @CallState int state)", "public void onParentChanged(Call call, Call parent)", "public void onChildrenChanged(Call call, List<Call> children)", "public void onDetailsChanged(Call call, Details details)", "public void onCannedTextResponsesLoaded(Call call, List<String> cannedTextResponses)", "public void onPostDialWait(Call call, String remainingPostDialSequence)", "public void onVideoCallChanged(Call call, InCallService.VideoCall videoCall)", "public void onCallDestroyed(Call call)", "public void onConferenceableCallsChanged(Call call, List<Call> conferenceableCalls)", "public void onConnectionEvent(Call call, String event, Bundle extras)", "public void onRttModeChanged(Call call, int mode)", "public void onRttStatusChanged(Call call, boolean enabled, RttCall rttCall)", "public void onRttRequest(Call call, int id)", "public void onRttInitiationFailure(Call call, @android.telecom.Connection.RttModifyStatus.RttSessionModifyStatus int reason)", "public void onHandoverComplete(Call call)", "public void onHandoverFailed(Call call, @HandoverFailureErrors int failureReason)" ],
  "variableNames" : [ "HANDOVER_FAILURE_DEST_APP_REJECTED", "HANDOVER_FAILURE_NOT_SUPPORTED", "HANDOVER_FAILURE_USER_REJECTED", "HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL", "HANDOVER_FAILURE_UNKNOWN" ]
}