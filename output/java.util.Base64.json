{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Base64.java",
  "packageName" : "java.util",
  "className" : "Base64",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Encoder getEncoder()",
    "returnType" : "Encoder",
    "comment" : "\n     * Returns a {@link Encoder} that encodes using the\n     * <a href=\"#basic\">Basic</a> type base64 encoding scheme.\n     *\n     * @return  A Base64 encoder.\n     ",
    "links" : [ "Encoder" ]
  }, {
    "name" : "public static Encoder getUrlEncoder()",
    "returnType" : "Encoder",
    "comment" : "\n     * Returns a {@link Encoder} that encodes using the\n     * <a href=\"#url\">URL and Filename safe</a> type base64\n     * encoding scheme.\n     *\n     * @return  A Base64 encoder.\n     ",
    "links" : [ "Encoder" ]
  }, {
    "name" : "public static Encoder getMimeEncoder()",
    "returnType" : "Encoder",
    "comment" : "\n     * Returns a {@link Encoder} that encodes using the\n     * <a href=\"#mime\">MIME</a> type base64 encoding scheme.\n     *\n     * @return  A Base64 encoder.\n     ",
    "links" : [ "Encoder" ]
  }, {
    "name" : "public static Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)",
    "returnType" : "Encoder",
    "comment" : "\n     * Returns a {@link Encoder} that encodes using the\n     * <a href=\"#mime\">MIME</a> type base64 encoding scheme\n     * with specified line length and line separators.\n     *\n     * @param   lineLength\n     *          the length of each output line (rounded down to nearest multiple\n     *          of 4). If the rounded down line length is not a positive value,\n     *          the output will not be separated in lines\n     * @param   lineSeparator\n     *          the line separator for each output line\n     *\n     * @return  A Base64 encoder.\n     *\n     * @throws  IllegalArgumentException if {@code lineSeparator} includes any\n     *          character of \"The Base64 Alphabet\" as specified in Table 1 of\n     *          RFC 2045.\n     ",
    "links" : [ "Encoder" ]
  }, {
    "name" : "public static Decoder getDecoder()",
    "returnType" : "Decoder",
    "comment" : "\n     * Returns a {@link Decoder} that decodes using the\n     * <a href=\"#basic\">Basic</a> type base64 encoding scheme.\n     *\n     * @return  A Base64 decoder.\n     ",
    "links" : [ "Decoder" ]
  }, {
    "name" : "public static Decoder getUrlDecoder()",
    "returnType" : "Decoder",
    "comment" : "\n     * Returns a {@link Decoder} that decodes using the\n     * <a href=\"#url\">URL and Filename safe</a> type base64\n     * encoding scheme.\n     *\n     * @return  A Base64 decoder.\n     ",
    "links" : [ "Decoder" ]
  }, {
    "name" : "public static Decoder getMimeDecoder()",
    "returnType" : "Decoder",
    "comment" : "\n     * Returns a {@link Decoder} that decodes using the\n     * <a href=\"#mime\">MIME</a> type base64 decoding scheme.\n     *\n     * @return  A Base64 decoder.\n     ",
    "links" : [ "Decoder" ]
  } ],
  "methodNames" : [ "public static Encoder getEncoder()", "public static Encoder getUrlEncoder()", "public static Encoder getMimeEncoder()", "public static Encoder getMimeEncoder(int lineLength, byte[] lineSeparator)", "public static Decoder getDecoder()", "public static Decoder getUrlDecoder()", "public static Decoder getMimeDecoder()" ],
  "variableNames" : [ ]
}