{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/filterpacks/videosrc/MediaSource.java",
  "packageName" : "android.filterpacks.videosrc",
  "className" : "MediaSource",
  "comment" : "\n * @hide\n ",
  "variables" : [ {
    "name" : "mSourceUrl",
    "type" : "String",
    "comment" : " The source URL for the media source. Can be an http: link to a remote\n     * resource, or a file: link to a local media file\n     ",
    "links" : [ ]
  }, {
    "name" : "mSourceAsset",
    "type" : "AssetFileDescriptor",
    "comment" : " An open asset file descriptor to a local media source. Default is null ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : " The context for the MediaPlayer to resolve the sourceUrl.\n     * Make sure this is set before the sourceUrl to avoid unexpected result.\n     * If the sourceUrl is not a content URI, it is OK to keep this as null. ",
    "links" : [ ]
  }, {
    "name" : "mSelectedIsUrl",
    "type" : "boolean",
    "comment" : " Whether the media source is a URL or an asset file descriptor. Defaults\n     * to false.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWaitForNewFrame",
    "type" : "boolean",
    "comment" : " Whether the filter will always wait for a new video frame, or whether it\n     * will output an old frame again if a new frame isn't available. Defaults\n     * to true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLooping",
    "type" : "boolean",
    "comment" : " Whether the media source should loop automatically or not. Defaults to\n     * true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVolume",
    "type" : "float",
    "comment" : " Volume control. Currently sound is piped directly to the speakers, so\n     * this defaults to mute.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOrientation",
    "type" : "int",
    "comment" : " Orientation. This controls the output orientation of the video. Valid\n     * values are 0, 90, 180, 270\n     ",
    "links" : [ ]
  }, {
    "name" : "mMediaPlayer",
    "type" : "MediaPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaFrame",
    "type" : "GLFrame",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceTexture",
    "type" : "SurfaceTexture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameExtractor",
    "type" : "ShaderProgram",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutputFormat",
    "type" : "MutableFrameFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PREP_TIMEOUT",
    "type" : "int",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "PREP_TIMEOUT_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NEWFRAME_TIMEOUT",
    "type" : "int",
    "comment" : "ms",
    "links" : [ ]
  }, {
    "name" : "NEWFRAME_TIMEOUT_REPEAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameShader",
    "type" : "String",
    "comment" : " GL_OES_EGL_image_external extension.",
    "links" : [ ]
  }, {
    "name" : "mSourceCoords_0",
    "type" : "float[]",
    "comment" : " to the frame so that MediaSource itself need not know about any rotation.",
    "links" : [ ]
  }, {
    "name" : "mSourceCoords_270",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceCoords_180",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceCoords_90",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGotSize",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrepared",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlaying",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNewFrameAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrientationUpdated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaused",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompleted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onVideoSizeChangedListener",
    "type" : "MediaPlayer.OnVideoSizeChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onPreparedListener",
    "type" : "MediaPlayer.OnPreparedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onCompletionListener",
    "type" : "MediaPlayer.OnCompletionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "onMediaFrameAvailableListener",
    "type" : "SurfaceTexture.OnFrameAvailableListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setupPorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createFormats()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void prepare(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void open(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void process(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fieldPortValueUpdated(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "   sourceIsUrl next time.",
    "links" : [ ]
  }, {
    "name" : "public synchronized void pauseVideo(boolean pauseState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean setupMediaPlayer(boolean useUrl)",
    "returnType" : "boolean",
    "comment" : " Creates a media player, sets it up, and calls prepare ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mSourceUrl", "mSourceAsset", "mContext", "mSelectedIsUrl", "mWaitForNewFrame", "mLooping", "mVolume", "mOrientation", "mMediaPlayer", "mMediaFrame", "mSurfaceTexture", "mFrameExtractor", "mOutputFormat", "mWidth", "mHeight", "PREP_TIMEOUT", "PREP_TIMEOUT_REPEAT", "NEWFRAME_TIMEOUT", "NEWFRAME_TIMEOUT_REPEAT", "mFrameShader", "mSourceCoords_0", "mSourceCoords_270", "mSourceCoords_180", "mSourceCoords_90", "mGotSize", "mPrepared", "mPlaying", "mNewFrameAvailable", "mOrientationUpdated", "mPaused", "mCompleted", "mLogVerbose", "TAG", "onVideoSizeChangedListener", "onPreparedListener", "onCompletionListener", "onMediaFrameAvailableListener" ],
  "methodNames" : [ "public void setupPorts()", "private void createFormats()", "protected void prepare(FilterContext context)", "public void open(FilterContext context)", "public void process(FilterContext context)", "public void close(FilterContext context)", "public void tearDown(FilterContext context)", "public void fieldPortValueUpdated(String name, FilterContext context)", "public synchronized void pauseVideo(boolean pauseState)", "private synchronized boolean setupMediaPlayer(boolean useUrl)" ]
}