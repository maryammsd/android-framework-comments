{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/ThumbnailUtils.java",
  "packageName" : "android.media",
  "className" : "ThumbnailUtils",
  "comment" : "\n * Utilities for generating visual thumbnails from files.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TARGET_SIZE_MICRO_THUMBNAIL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_NONE",
    "type" : "int",
    "comment" : " Options used internally. ",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_SCALE_UP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPTIONS_RECYCLE_INPUT",
    "type" : "int",
    "comment" : "\n     * Constant used to indicate we should recycle the input in\n     * {@link #extractThumbnail(Bitmap, int, int, int)} unless the output is the input.\n     ",
    "links" : [ "#extractThumbnail" ]
  } ],
  "methods" : [ {
    "name" : "private static Size convertKind(int kind)",
    "returnType" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap createAudioThumbnail(@NonNull String filePath, int kind)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given audio file.\n     *\n     * @param filePath The audio file.\n     * @param kind The desired thumbnail kind, such as\n     *            {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.\n     * @deprecated Callers should migrate to using\n     *             {@link #createAudioThumbnail(File, Size, CancellationSignal)},\n     *             as it offers more control over resizing and cancellation.\n     ",
    "links" : [ "android.provider.MediaStore.Images.Thumbnails#MINI_KIND", "#createAudioThumbnail" ]
  }, {
    "name" : "public static Bitmap createAudioThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given audio file.\n     * <p>\n     * This method should only be used for files that you have direct access to;\n     * if you'd like to work with media hosted outside your app, consider using\n     * {@link ContentResolver#loadThumbnail(Uri, Size, CancellationSignal)}\n     * which enables remote providers to efficiently cache and invalidate\n     * thumbnails.\n     *\n     * @param file The audio file.\n     * @param size The desired thumbnail size.\n     * @throws IOException If any trouble was encountered while generating or\n     *             loading the thumbnail, or if\n     *             {@link CancellationSignal#cancel()} was invoked.\n     ",
    "links" : [ "ContentResolver#loadThumbnail", "CancellationSignal#cancel" ]
  }, {
    "name" : "public static Bitmap createImageThumbnail(@NonNull String filePath, int kind)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given image file.\n     *\n     * @param filePath The image file.\n     * @param kind The desired thumbnail kind, such as\n     *            {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.\n     * @deprecated Callers should migrate to using\n     *             {@link #createImageThumbnail(File, Size, CancellationSignal)},\n     *             as it offers more control over resizing and cancellation.\n     ",
    "links" : [ "android.provider.MediaStore.Images.Thumbnails#MINI_KIND", "#createImageThumbnail" ]
  }, {
    "name" : "public static Bitmap createImageThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given image file.\n     * <p>\n     * This method should only be used for files that you have direct access to;\n     * if you'd like to work with media hosted outside your app, consider using\n     * {@link ContentResolver#loadThumbnail(Uri, Size, CancellationSignal)}\n     * which enables remote providers to efficiently cache and invalidate\n     * thumbnails.\n     *\n     * @param file The audio file.\n     * @param size The desired thumbnail size.\n     * @throws IOException If any trouble was encountered while generating or\n     *             loading the thumbnail, or if\n     *             {@link CancellationSignal#cancel()} was invoked.\n     ",
    "links" : [ "ContentResolver#loadThumbnail", "CancellationSignal#cancel" ]
  }, {
    "name" : "public static Bitmap createVideoThumbnail(@NonNull String filePath, int kind)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given video file.\n     *\n     * @param filePath The video file.\n     * @param kind The desired thumbnail kind, such as\n     *            {@link android.provider.MediaStore.Images.Thumbnails#MINI_KIND}.\n     * @deprecated Callers should migrate to using\n     *             {@link #createVideoThumbnail(File, Size, CancellationSignal)},\n     *             as it offers more control over resizing and cancellation.\n     ",
    "links" : [ "android.provider.MediaStore.Images.Thumbnails#MINI_KIND", "#createVideoThumbnail" ]
  }, {
    "name" : "public static Bitmap createVideoThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     * Create a thumbnail for given video file.\n     * <p>\n     * This method should only be used for files that you have direct access to;\n     * if you'd like to work with media hosted outside your app, consider using\n     * {@link ContentResolver#loadThumbnail(Uri, Size, CancellationSignal)}\n     * which enables remote providers to efficiently cache and invalidate\n     * thumbnails.\n     *\n     * @param file The video file.\n     * @param size The desired thumbnail size.\n     * @throws IOException If any trouble was encountered while generating or\n     *             loading the thumbnail, or if\n     *             {@link CancellationSignal#cancel()} was invoked.\n     ",
    "links" : [ "ContentResolver#loadThumbnail", "CancellationSignal#cancel" ]
  }, {
    "name" : "public static Bitmap extractThumbnail(Bitmap source, int width, int height)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a centered bitmap of the desired size.\n     *\n     * @param source original bitmap source\n     * @param width targeted width\n     * @param height targeted height\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Bitmap extractThumbnail(Bitmap source, int width, int height, int options)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates a centered bitmap of the desired size.\n     *\n     * @param source original bitmap source\n     * @param width targeted width\n     * @param height targeted height\n     * @param options options used during thumbnail extraction\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int computeSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int computeInitialSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void closeSilently(ParcelFileDescriptor c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParcelFileDescriptor makeInputStream(Uri uri, ContentResolver cr)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Bitmap transform(Matrix scaler, Bitmap source, int targetWidth, int targetHeight, int options)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Transform source Bitmap to targeted width and height.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void createThumbnailFromEXIF(String filePath, int targetSize, int maxPixels, SizedThumbnailBitmap sizedThumbBitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TARGET_SIZE_MICRO_THUMBNAIL", "OPTIONS_NONE", "OPTIONS_SCALE_UP", "OPTIONS_RECYCLE_INPUT" ],
  "methodNames" : [ "private static Size convertKind(int kind)", "public static Bitmap createAudioThumbnail(@NonNull String filePath, int kind)", "public static Bitmap createAudioThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException", "public static Bitmap createImageThumbnail(@NonNull String filePath, int kind)", "public static Bitmap createImageThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException", "public static Bitmap createVideoThumbnail(@NonNull String filePath, int kind)", "public static Bitmap createVideoThumbnail(@NonNull File file, @NonNull Size size, @Nullable CancellationSignal signal) throws IOException", "public static Bitmap extractThumbnail(Bitmap source, int width, int height)", "public static Bitmap extractThumbnail(Bitmap source, int width, int height, int options)", "private static int computeSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels)", "private static int computeInitialSampleSize(BitmapFactory.Options options, int minSideLength, int maxNumOfPixels)", "private static void closeSilently(ParcelFileDescriptor c)", "private static ParcelFileDescriptor makeInputStream(Uri uri, ContentResolver cr)", "private static Bitmap transform(Matrix scaler, Bitmap source, int targetWidth, int targetHeight, int options)", "private static void createThumbnailFromEXIF(String filePath, int targetSize, int maxPixels, SizedThumbnailBitmap sizedThumbBitmap)" ]
}