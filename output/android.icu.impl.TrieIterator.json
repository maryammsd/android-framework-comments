{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/TrieIterator.java",
  "packageName" : "android.icu.impl",
  "className" : "TrieIterator",
  "comment" : "\n * <p>Class enabling iteration of the values in a Trie.</p>\n *\n * <p>2015-sep-03 TODO: Only used in test code, move there.\n *\n * <p>Result of each iteration contains the interval of codepoints that have\n * the same value type and the value type itself.</p>\n * <p>The comparison of each codepoint value is done via extract(), which the\n * default implementation is to return the value as it is.</p>\n * <p>Method extract() can be overwritten to perform manipulations on\n * codepoint values in order to perform specialized comparison.</p>\n * <p>TrieIterator is designed to be a generic iterator for the CharTrie\n * and the IntTrie, hence to accommodate both types of data, the return\n * result will be in terms of int (32 bit) values.</p>\n * <p>See android.icu.text.UCharacterTypeIterator for examples of use.</p>\n * <p>Notes for porting utrie_enum from icu4c to icu4j:<br>\n * Internally, icu4c's utrie_enum performs all iterations in its body. In Java\n * sense, the caller will have to pass a object with a callback function\n * UTrieEnumRange(const void *context, UChar32 start, UChar32 limit,\n * uint32_t value) into utrie_enum. utrie_enum will then find ranges of\n * codepoints with the same value as determined by\n * UTrieEnumValue(const void *context, uint32_t value). for each range,\n * utrie_enum calls the callback function to perform a task. In this way,\n * icu4c performs the iteration within utrie_enum.\n * To follow the JDK model, icu4j is slightly different from icu4c.\n * Instead of requesting the caller to implement an object for a callback.\n * The caller will have to implement a subclass of TrieIterator, fleshing out\n * the method extract(int) (equivalent to UTrieEnumValue). Independent of icu4j,\n * the caller will have to code his own iteration and flesh out the task\n * (equivalent to UTrieEnumRange) to be performed in the iteration loop.\n * </p>\n * <p>There are basically 3 usage scenarios for porting:</p>\n * <p>1) UTrieEnumValue is the only implemented callback then just implement a\n * subclass of TrieIterator and override the extract(int) method. The\n * extract(int) method is analogous to UTrieEnumValue callback.\n * </p>\n * <p>2) UTrieEnumValue and UTrieEnumRange both are implemented then implement\n * a subclass of TrieIterator, override the extract method and iterate, e.g\n * </p>\n * <p>utrie_enum(&normTrie, _enumPropertyStartsValue, _enumPropertyStartsRange,\n *               set);<br>\n * In Java :<br>\n * <pre>\n * class TrieIteratorImpl extends TrieIterator{\n *     public TrieIteratorImpl(Trie data){\n *         super(data);\n *     }\n *     public int extract(int value){\n *         // port the implementation of _enumPropertyStartsValue here\n *     }\n * }\n * ....\n * TrieIterator fcdIter  = new TrieIteratorImpl(fcdTrieImpl.fcdTrie);\n * while(fcdIter.next(result)) {\n *     // port the implementation of _enumPropertyStartsRange\n * }\n * </pre>\n * </p>\n * <p>3) UTrieEnumRange is the only implemented callback then just implement\n * the while loop, when utrie_enum is called\n * <pre>\n * // utrie_enum(&fcdTrie, NULL, _enumPropertyStartsRange, set);\n * TrieIterator fcdIter  = new TrieIterator(fcdTrieImpl.fcdTrie);\n * while(fcdIter.next(result)){\n *     set.add(result.start);\n * }\n * </p>\n * @author synwee\n * @see android.icu.impl.Trie\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BMP_INDEX_LENGTH_",
    "type" : "int",
    "comment" : "\n    * Size of the stage 1 BMP indexes\n    ",
    "links" : [ ]
  }, {
    "name" : "LEAD_SURROGATE_MIN_VALUE_",
    "type" : "int",
    "comment" : "\n    * Lead surrogate minimum value\n    ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_SURROGATE_MIN_VALUE_",
    "type" : "int",
    "comment" : "\n    * Trail surrogate minimum value\n    ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_SURROGATE_COUNT_",
    "type" : "int",
    "comment" : "\n    * Number of trail surrogate\n    ",
    "links" : [ ]
  }, {
    "name" : "TRAIL_SURROGATE_INDEX_BLOCK_LENGTH_",
    "type" : "int",
    "comment" : "\n    * Number of stage 1 indexes for supplementary calculations that maps to\n    * each lead surrogate character.\n    * See second pass into getRawOffset for the trail surrogate character.\n    * 10 for significant number of bits for trail surrogates, 5 for what we\n    * discard during shifting.\n    ",
    "links" : [ ]
  }, {
    "name" : "DATA_BLOCK_LENGTH_",
    "type" : "int",
    "comment" : "\n    * Number of data values in a stage 2 (data array) block.\n    ",
    "links" : [ ]
  }, {
    "name" : "m_trie_",
    "type" : "Trie",
    "comment" : "\n    * Trie instance\n    ",
    "links" : [ ]
  }, {
    "name" : "m_initialValue_",
    "type" : "int",
    "comment" : "\n    * Initial value for trie values\n    ",
    "links" : [ ]
  }, {
    "name" : "m_currentCodepoint_",
    "type" : "int",
    "comment" : "\n    * Next element results and data.\n    ",
    "links" : [ ]
  }, {
    "name" : "m_nextCodepoint_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextValue_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextIndex_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextBlock_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextBlockIndex_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nextTrailIndexOffset_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final boolean next(Element element)",
    "returnType" : "boolean",
    "comment" : "\n    * <p>Returns true if we are not at the end of the iteration, false\n    * otherwise.</p>\n    * <p>The next set of codepoints with the same value type will be\n    * calculated during this call and returned in the argument element.</p>\n    * @param element return result\n    * @return true if we are not at the end of the iteration, false otherwise.\n    * @exception NoSuchElementException - if no more elements exist.\n    * @see android.icu.util.RangeValueIterator.Element\n    ",
    "links" : [ ]
  }, {
    "name" : "public final void reset()",
    "returnType" : "void",
    "comment" : "\n    * Resets the iterator to the beginning of the iteration\n    ",
    "links" : [ ]
  }, {
    "name" : "protected int extract(int value)",
    "returnType" : "int",
    "comment" : "\n    * Called by next() to extracts a 32 bit value from a trie value\n    * used for comparison.\n    * This method is to be overwritten if special manipulation is to be done\n    * to retrieve a relevant comparison.\n    * The default function is to return the value as it is.\n    * @param value a value from the trie\n    * @return extracted value\n    ",
    "links" : [ ]
  }, {
    "name" : "private final void setResult(Element element, int start, int limit, int value)",
    "returnType" : "void",
    "comment" : "\n    * Set the result values\n    * @param element return result object\n    * @param start codepoint of range\n    * @param limit (end + 1) codepoint of range\n    * @param value common value of range\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean calculateNextBMPElement(Element element)",
    "returnType" : "boolean",
    "comment" : "\n    * Finding the next element.\n    * This method is called just before returning the result of\n    * next().\n    * We always store the next element before it is requested.\n    * In the case that we have to continue calculations into the\n    * supplementary planes, a false will be returned.\n    * @param element return result object\n    * @return true if the next range is found, false if we have to proceed to\n    *         the supplementary range.\n    ",
    "links" : [ ]
  }, {
    "name" : "private final void calculateNextSupplementaryElement(Element element)",
    "returnType" : "void",
    "comment" : "\n    * Finds the next supplementary element.\n    * For each entry in the trie, the value to be delivered is passed through\n    * extract().\n    * We always store the next element before it is requested.\n    * Called after calculateNextBMP() completes its round of BMP characters.\n    * There is a slight difference in the usage of m_currentCodepoint_\n    * here as compared to calculateNextBMP(). Though both represents the\n    * lower bound of the next element, in calculateNextBMP() it gets set\n    * at the start of any loop, where-else, in calculateNextSupplementary()\n    * since m_currentCodepoint_ already contains the lower bound of the\n    * next element (passed down from calculateNextBMP()), we keep it till\n    * the end before resetting it to the new value.\n    * Note, if there are no more iterations, it will never get to here.\n    * Blocked out by next().\n    * @param element return result object\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkBlockDetail(int currentValue)",
    "returnType" : "boolean",
    "comment" : "\n    * Internal block value calculations\n    * Performs calculations on a data block to find codepoints in m_nextBlock_\n    * after the index m_nextBlockIndex_ that has the same value.\n    * Note m_*_ variables at this point is the next codepoint whose value\n    * has not been calculated.\n    * But when returned with false, it will be the last codepoint whose\n    * value has been calculated.\n    * @param currentValue the value which other codepoints are tested against\n    * @return true if the whole block has the same value as currentValue or if\n    *              the whole block has been calculated, false otherwise.\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkBlock(int currentValue)",
    "returnType" : "boolean",
    "comment" : "\n    * Internal block value calculations\n    * Performs calculations on a data block to find codepoints in m_nextBlock_\n    * that has the same value.\n    * Will call checkBlockDetail() if highlevel check fails.\n    * Note m_*_ variables at this point is the next codepoint whose value\n    * has not been calculated.\n    * @param currentBlock the initial block containing all currentValue\n    * @param currentValue the value which other codepoints are tested against\n    * @return true if the whole block has the same value as currentValue or if\n    *              the whole block has been calculated, false otherwise.\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkTrailBlock(int currentValue)",
    "returnType" : "boolean",
    "comment" : "\n    * Internal block value calculations\n    * Performs calculations on multiple data blocks for a set of trail\n    * surrogates to find codepoints in m_nextBlock_ that has the same value.\n    * Will call checkBlock() for internal block checks.\n    * Note m_*_ variables at this point is the next codepoint whose value\n    * has not been calculated.\n    * @param currentValue the value which other codepoints are tested against\n    * @return true if the whole block has the same value as currentValue or if\n    *              the whole block has been calculated, false otherwise.\n    ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkNullNextTrailIndex()",
    "returnType" : "boolean",
    "comment" : "\n    * Checks if we are beginning at the start of a initial block.\n    * If we are then the rest of the codepoints in this initial block\n    * has the same values.\n    * We increment m_nextCodepoint_ and relevant data members if so.\n    * This is used only in for the supplementary codepoints because\n    * the offset to the trail indexes could be 0.\n    * @return true if we are at the start of a initial block.\n    ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final boolean next(Element element)", "public final void reset()", "protected int extract(int value)", "private final void setResult(Element element, int start, int limit, int value)", "private final boolean calculateNextBMPElement(Element element)", "private final void calculateNextSupplementaryElement(Element element)", "private final boolean checkBlockDetail(int currentValue)", "private final boolean checkBlock(int currentValue)", "private final boolean checkTrailBlock(int currentValue)", "private final boolean checkNullNextTrailIndex()" ],
  "variableNames" : [ "BMP_INDEX_LENGTH_", "LEAD_SURROGATE_MIN_VALUE_", "TRAIL_SURROGATE_MIN_VALUE_", "TRAIL_SURROGATE_COUNT_", "TRAIL_SURROGATE_INDEX_BLOCK_LENGTH_", "DATA_BLOCK_LENGTH_", "m_trie_", "m_initialValue_", "m_currentCodepoint_", "m_nextCodepoint_", "m_nextValue_", "m_nextIndex_", "m_nextBlock_", "m_nextBlockIndex_", "m_nextTrailIndexOffset_" ]
}