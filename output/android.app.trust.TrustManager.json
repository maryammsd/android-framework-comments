{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/trust/TrustManager.java",
  "packageName" : "android.app.trust",
  "className" : "TrustManager",
  "comment" : "\n * See {@link com.android.server.trust.TrustManagerService}\n * @hide\n ",
  "variables" : [ {
    "name" : "MSG_TRUST_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TRUST_MANAGED_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_TRUST_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ITrustManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustListeners",
    "type" : "ArrayMap<TrustListener, ITrustListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDeviceLockedForUser(int userId, boolean locked)",
    "returnType" : "void",
    "comment" : "\n     * Changes the lock status for the given user. This is only applicable to Managed Profiles,\n     * other users should be handled by Keyguard.\n     *\n     * @param userId The id for the user to be locked/unlocked.\n     * @param locked The value for that user's locked state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reportUnlockAttempt(boolean successful, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Reports that user {@param userId} has tried to unlock the device.\n     *\n     * @param successful if true, the unlock attempt was successful.\n     *\n     * Requires the {@link android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE} permission.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE" ]
  }, {
    "name" : "public void reportUnlockLockout(int timeoutMs, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Reports that user {@param userId} has entered a temporary device lockout.\n     *\n     * This generally occurs when  the user has unsuccessfully tried to unlock the device too many\n     * times. The user will then be unable to unlock the device until a set amount of time has\n     * elapsed.\n     *\n     * @param timeout The amount of time that needs to elapse, in milliseconds, until the user may\n     *    attempt to unlock the device again.\n     *\n     * Requires the {@link android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE} permission.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE" ]
  }, {
    "name" : "public void reportEnabledTrustAgentsChanged(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Reports that the list of enabled trust agents changed for user {@param userId}.\n     *\n     * Requires the {@link android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE} permission.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE" ]
  }, {
    "name" : "public void reportKeyguardShowingChanged()",
    "returnType" : "void",
    "comment" : "\n     * Reports that the visibility of the keyguard has changed.\n     *\n     * Requires the {@link android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE} permission.\n     ",
    "links" : [ "android.Manifest.permission#ACCESS_KEYGUARD_SECURE_STORAGE" ]
  }, {
    "name" : "public void registerTrustListener(final TrustListener trustListener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener for trust events.\n     *\n     * Requires the {@link android.Manifest.permission#TRUST_LISTENER} permission.\n     ",
    "links" : [ "android.Manifest.permission#TRUST_LISTENER" ]
  }, {
    "name" : "public void unregisterTrustListener(final TrustListener trustListener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters a listener for trust events.\n     *\n     * Requires the {@link android.Manifest.permission#TRUST_LISTENER} permission.\n     ",
    "links" : [ "android.Manifest.permission#TRUST_LISTENER" ]
  }, {
    "name" : "public boolean isTrustUsuallyManaged(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether {@param userId} has enabled and configured trust agents. Ignores short-term\n     * unavailability of trust due to {@link LockPatternUtils.StrongAuthTracker}.\n     ",
    "links" : [ "LockPatternUtils.StrongAuthTracker" ]
  }, {
    "name" : "public void unlockedByBiometricForUser(int userId, BiometricSourceType source)",
    "returnType" : "void",
    "comment" : "\n     * Updates the trust state for the user due to the user unlocking via a biometric sensor.\n     * Should only be called if user authenticated via fingerprint, face, or iris and bouncer\n     * can be skipped.\n     *\n     * @param userId\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearAllBiometricRecognized(BiometricSourceType source)",
    "returnType" : "void",
    "comment" : "\n     * Clears authentication by the specified biometric type for all users.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MSG_TRUST_CHANGED", "MSG_TRUST_MANAGED_CHANGED", "MSG_TRUST_ERROR", "TAG", "DATA_FLAGS", "DATA_MESSAGE", "mService", "mTrustListeners", "mHandler" ],
  "methodNames" : [ "public void setDeviceLockedForUser(int userId, boolean locked)", "public void reportUnlockAttempt(boolean successful, int userId)", "public void reportUnlockLockout(int timeoutMs, int userId)", "public void reportEnabledTrustAgentsChanged(int userId)", "public void reportKeyguardShowingChanged()", "public void registerTrustListener(final TrustListener trustListener)", "public void unregisterTrustListener(final TrustListener trustListener)", "public boolean isTrustUsuallyManaged(int userId)", "public void unlockedByBiometricForUser(int userId, BiometricSourceType source)", "public void clearAllBiometricRecognized(BiometricSourceType source)" ]
}