{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/window/TaskOrganizer.java",
  "packageName" : "android.window",
  "className" : "TaskOrganizer",
  "comment" : "\n * Interface for ActivityTaskManager/WindowManager to delegate control of tasks.\n * @hide\n ",
  "variables" : [ {
    "name" : "mInterface",
    "type" : "ITaskOrganizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITaskOrganizerControllerSingleton",
    "type" : "Singleton<ITaskOrganizerController>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void registerOrganizer(int windowingMode)",
    "returnType" : "void",
    "comment" : "\n     * Register a TaskOrganizer to manage tasks as they enter the given windowing mode.\n     * If there was already a TaskOrganizer for this windowing mode it will be evicted\n     * and receive taskVanished callbacks in the process.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void unregisterOrganizer()",
    "returnType" : "void",
    "comment" : " Unregisters a previously registered task organizer. ",
    "links" : [ ]
  }, {
    "name" : "public void onTaskAppeared(@NonNull ActivityManager.RunningTaskInfo taskInfo, @NonNull SurfaceControl leash)",
    "returnType" : "void",
    "comment" : "\n     * Called when a task with the registered windowing mode can be controlled by this task\n     * organizer. For non-root tasks, the leash may initially be hidden so it is up to the organizer\n     * to show this task.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTaskVanished(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTaskInfoChanged(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onBackPressedOnTaskRoot(@NonNull ActivityManager.RunningTaskInfo taskInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityManager.RunningTaskInfo createRootTask(int displayId, int windowingMode)",
    "returnType" : "ActivityManager.RunningTaskInfo",
    "comment" : " Creates a persistent root task in WM for a particular windowing-mode. ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteRootTask(@NonNull WindowContainerToken task)",
    "returnType" : "boolean",
    "comment" : " Deletes a persistent root task in WM ",
    "links" : [ ]
  }, {
    "name" : "public static List<ActivityManager.RunningTaskInfo> getChildTasks(@NonNull WindowContainerToken parent, @NonNull int[] activityTypes)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : " Gets direct child tasks (ordered from top-to-bottom) ",
    "links" : [ ]
  }, {
    "name" : "public static List<ActivityManager.RunningTaskInfo> getRootTasks(int displayId, @NonNull int[] activityTypes)",
    "returnType" : "List<ActivityManager.RunningTaskInfo>",
    "comment" : " Gets all root tasks on a display (ordered from top-to-bottom) ",
    "links" : [ ]
  }, {
    "name" : "public static WindowContainerToken getImeTarget(int display)",
    "returnType" : "WindowContainerToken",
    "comment" : " Get the root task which contains the current ime target ",
    "links" : [ ]
  }, {
    "name" : "public static void setLaunchRoot(int displayId, @NonNull WindowContainerToken root)",
    "returnType" : "void",
    "comment" : "\n     * Set's the root task to launch new tasks into on a display. {@code null} means no launch\n     * root and thus new tasks just end up directly on the display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterceptBackPressedOnTaskRoot(boolean interceptBackPressed)",
    "returnType" : "void",
    "comment" : "\n     * Requests that the given task organizer is notified when back is pressed on the root activity\n     * of one of its controlled tasks.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ITaskOrganizerController getController()",
    "returnType" : "ITaskOrganizerController",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mInterface", "ITaskOrganizerControllerSingleton" ],
  "methodNames" : [ "public final void registerOrganizer(int windowingMode)", "public final void unregisterOrganizer()", "public void onTaskAppeared(@NonNull ActivityManager.RunningTaskInfo taskInfo, @NonNull SurfaceControl leash)", "public void onTaskVanished(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public void onTaskInfoChanged(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public void onBackPressedOnTaskRoot(@NonNull ActivityManager.RunningTaskInfo taskInfo)", "public static ActivityManager.RunningTaskInfo createRootTask(int displayId, int windowingMode)", "public static boolean deleteRootTask(@NonNull WindowContainerToken task)", "public static List<ActivityManager.RunningTaskInfo> getChildTasks(@NonNull WindowContainerToken parent, @NonNull int[] activityTypes)", "public static List<ActivityManager.RunningTaskInfo> getRootTasks(int displayId, @NonNull int[] activityTypes)", "public static WindowContainerToken getImeTarget(int display)", "public static void setLaunchRoot(int displayId, @NonNull WindowContainerToken root)", "public void setInterceptBackPressedOnTaskRoot(boolean interceptBackPressed)", "private static ITaskOrganizerController getController()" ]
}