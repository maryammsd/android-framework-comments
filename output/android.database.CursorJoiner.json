{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/CursorJoiner.java",
  "packageName" : "android.database",
  "className" : "CursorJoiner",
  "comment" : "\n * Does a join on two cursors using the specified columns. The cursors must already\n * be sorted on each of the specified columns in ascending order. This joiner only\n * supports the case where the tuple of key column values is unique.\n * <p>\n * Typical usage:\n *\n * <pre>\n * CursorJoiner joiner = new CursorJoiner(cursorA, keyColumnsofA, cursorB, keyColumnsofB);\n * for (CursorJoiner.Result joinerResult : joiner) {\n *     switch (joinerResult) {\n *         case LEFT:\n *             // handle case where a row in cursorA is unique\n *             break;\n *         case RIGHT:\n *             // handle case where a row in cursorB is unique\n *             break;\n *         case BOTH:\n *             // handle case where a row with the same key is in both cursors\n *             break;\n *     }\n * }\n * </pre>\n ",
  "variables" : [ {
    "name" : "mCursorLeft",
    "type" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorRight",
    "type" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompareResultIsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompareResult",
    "type" : "Result",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnsLeft",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnsRight",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Iterator<Result> iterator()",
    "returnType" : "Iterator<Result>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int[] buildColumnIndiciesArray(Cursor cursor, String[] columnNames)",
    "returnType" : "int[]",
    "comment" : "\n     * Lookup the indicies of the each column name and return them in an array.\n     * @param cursor the cursor that contains the columns\n     * @param columnNames the array of names to lookup\n     * @return an array of column indices\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not there are more rows to compare using next().\n     * @return true if there are more rows to compare\n     ",
    "links" : [ ]
  }, {
    "name" : "public Result next()",
    "returnType" : "Result",
    "comment" : "\n     * Returns the comparison result of the next row from each cursor. If one cursor\n     * has no more rows but the other does then subsequent calls to this will indicate that\n     * the remaining rows are unique.\n     * <p>\n     * The caller must check that hasNext() returns true before calling this.\n     * <p>\n     * Once next() has been called the cursors specified in the result of the call to\n     * next() are guaranteed to point to the row that was indicated. Reading values\n     * from the cursor that was not indicated in the call to next() will result in\n     * undefined behavior.\n     * @return LEFT, if the row pointed to by the left cursor is unique, RIGHT\n     *   if the row pointed to by the right cursor is unique, BOTH if the rows in both\n     *   cursors are the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void populateValues(String[] values, Cursor cursor, int[] columnIndicies, int startingIndex)",
    "returnType" : "void",
    "comment" : "\n     * Reads the strings from the cursor that are specifed in the columnIndicies\n     * array and saves them in values beginning at startingIndex, skipping a slot\n     * for each value. If columnIndicies has length 3 and startingIndex is 1, the\n     * values will be stored in slots 1, 3, and 5.\n     * @param values the String[] to populate\n     * @param cursor the cursor from which to read\n     * @param columnIndicies the indicies of the values to read from the cursor\n     * @param startingIndex the slot in which to start storing values, and must be either 0 or 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void incrementCursors()",
    "returnType" : "void",
    "comment" : "\n     * Increment the cursors past the rows indicated in the most recent call to next().\n     * This will only have an affect once per call to next().\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int compareStrings(String... values)",
    "returnType" : "int",
    "comment" : "\n     * Compare the values. Values contains n pairs of strings. If all the pairs of strings match\n     * then returns 0. Otherwise returns the comparison result of the first non-matching pair\n     * of values, -1 if the first of the pair is less than the second of the pair or 1 if it\n     * is greater.\n     * @param values the n pairs of values to compare\n     * @return -1, 0, or 1 as described above.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mCursorLeft", "mCursorRight", "mCompareResultIsValid", "mCompareResult", "mColumnsLeft", "mColumnsRight", "mValues" ],
  "methodNames" : [ "public Iterator<Result> iterator()", "private int[] buildColumnIndiciesArray(Cursor cursor, String[] columnNames)", "public boolean hasNext()", "public Result next()", "public void remove()", "private static void populateValues(String[] values, Cursor cursor, int[] columnIndicies, int startingIndex)", "private void incrementCursors()", "private static int compareStrings(String... values)" ]
}