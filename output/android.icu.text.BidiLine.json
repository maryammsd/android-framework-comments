{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/BidiLine.java",
  "packageName" : "android.icu.text",
  "className" : "BidiLine",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static void setTrailingWSStart(Bidi bidi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Bidi setLine(Bidi paraBidi, int start, int limit)",
    "returnType" : "Bidi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte getLevelAt(Bidi bidi, int charIndex)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] getLevels(Bidi bidi)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static BidiRun getLogicalRun(Bidi bidi, int logicalPosition)",
    "returnType" : "BidiRun",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static BidiRun getVisualRun(Bidi bidi, int runIndex)",
    "returnType" : "BidiRun",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void getSingleRun(Bidi bidi, byte level)",
    "returnType" : "void",
    "comment" : " in trivial cases there is only one trivial run; called by getRuns() ",
    "links" : [ ]
  }, {
    "name" : "private static void reorderLine(Bidi bidi, byte minLevel, byte maxLevel)",
    "returnType" : "void",
    "comment" : "\n     * Reorder the same-level runs in the runs array.\n     * Here, runCount>1 and maxLevel>=minLevel>=paraLevel.\n     * All the visualStart fields=logical start before reordering.\n     * The \"odd\" bits are not set yet.\n     *\n     * Reordering with this data structure lends itself to some handy shortcuts:\n     *\n     * Since each run is moved but not modified, and since at the initial maxLevel\n     * each sequence of same-level runs consists of only one run each, we\n     * don't need to do anything there and can predecrement maxLevel.\n     * In many simple cases, the reordering is thus done entirely in the\n     * index mapping.\n     * Also, reordering occurs only down to the lowest odd level that occurs,\n     * which is minLevel|1. However, if the lowest level itself is odd, then\n     * in the last reordering the sequence of the runs at this level or higher\n     * will be all runs, and we don't need the elaborate loop to search for them.\n     * This is covered by ++minLevel instead of minLevel|=1 followed\n     * by an extra reorder-all after the reorder-some loop.\n     * About a trailing WS run:\n     * Such a run would need special treatment because its level is not\n     * reflected in levels[] if this is not a paragraph object.\n     * Instead, all characters from trailingWSStart on are implicitly at\n     * paraLevel.\n     * However, for all maxLevel>paraLevel, this run will never be reordered\n     * and does not need to be taken into account. maxLevel==paraLevel is only reordered\n     * if minLevel==paraLevel is odd, which is done in the extra segment.\n     * This means that for the main reordering loop we don't need to consider\n     * this run and can --runCount. If it is later part of the all-runs\n     * reordering, then runCount is adjusted accordingly.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getRunFromLogicalIndex(Bidi bidi, int logicalIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void getRuns(Bidi bidi)",
    "returnType" : "void",
    "comment" : "\n     * Compute the runs array from the levels array.\n     * After getRuns() returns true, runCount is guaranteed to be >0\n     * and the runs are reordered.\n     * Odd-level runs have visualStart on their visual right edge and\n     * they progress visually to the left.\n     * If option OPTION_INSERT_MARKS is set, insertRemove will contain the\n     * sum of appropriate LRM/RLM_BEFORE/AFTER flags.\n     * If option OPTION_REMOVE_CONTROLS is set, insertRemove will contain the\n     * negative number of BiDi control characters within this run.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int[] prepareReorder(byte[] levels, byte[] pMinLevel, byte[] pMaxLevel)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] reorderLogical(byte[] levels)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] reorderVisual(byte[] levels)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getVisualIndex(Bidi bidi, int logicalIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getLogicalIndex(Bidi bidi, int visualIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] getLogicalMap(Bidi bidi)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] getVisualMap(Bidi bidi)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int[] invertMap(int[] srcMap)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static void setTrailingWSStart(Bidi bidi)", " static Bidi setLine(Bidi paraBidi, int start, int limit)", " static byte getLevelAt(Bidi bidi, int charIndex)", " static byte[] getLevels(Bidi bidi)", " static BidiRun getLogicalRun(Bidi bidi, int logicalPosition)", " static BidiRun getVisualRun(Bidi bidi, int runIndex)", " static void getSingleRun(Bidi bidi, byte level)", "private static void reorderLine(Bidi bidi, byte minLevel, byte maxLevel)", " static int getRunFromLogicalIndex(Bidi bidi, int logicalIndex)", " static void getRuns(Bidi bidi)", " static int[] prepareReorder(byte[] levels, byte[] pMinLevel, byte[] pMaxLevel)", " static int[] reorderLogical(byte[] levels)", " static int[] reorderVisual(byte[] levels)", " static int getVisualIndex(Bidi bidi, int logicalIndex)", " static int getLogicalIndex(Bidi bidi, int visualIndex)", " static int[] getLogicalMap(Bidi bidi)", " static int[] getVisualMap(Bidi bidi)", " static int[] invertMap(int[] srcMap)" ],
  "variableNames" : [ ]
}