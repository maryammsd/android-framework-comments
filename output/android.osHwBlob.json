{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/HwBlob.java",
  "packageName" : "android.os",
  "className" : "HwBlob",
  "comment" : "\n * Represents fixed sized allocation of marshalled data used. Helper methods\n * allow for access to the unmarshalled data in a variety of ways.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNativeRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final native boolean getBool(long offset)",
    "returnType" : "boolean",
    "comment" : "\n     * @param offset offset to unmarshall a boolean from\n     * @return the unmarshalled boolean value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native byte getInt8(long offset)",
    "returnType" : "byte",
    "comment" : "\n     * @param offset offset to unmarshall a byte from\n     * @return the unmarshalled byte value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native short getInt16(long offset)",
    "returnType" : "short",
    "comment" : "\n     * @param offset offset to unmarshall a short from\n     * @return the unmarshalled short value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native int getInt32(long offset)",
    "returnType" : "int",
    "comment" : "\n     * @param offset offset to unmarshall an int from\n     * @return the unmarshalled int value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native long getInt64(long offset)",
    "returnType" : "long",
    "comment" : "\n     * @param offset offset to unmarshall a long from\n     * @return the unmarshalled long value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native float getFloat(long offset)",
    "returnType" : "float",
    "comment" : "\n     * @param offset offset to unmarshall a float from\n     * @return the unmarshalled float value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native double getDouble(long offset)",
    "returnType" : "double",
    "comment" : "\n     * @param offset offset to unmarshall a double from\n     * @return the unmarshalled double value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native String getString(long offset)",
    "returnType" : "String",
    "comment" : "\n     * @param offset offset to unmarshall a string from\n     * @return the unmarshalled string value\n     * @throws IndexOutOfBoundsException when offset is out of this HwBlob\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native long getFieldHandle(long offset)",
    "returnType" : "long",
    "comment" : "\n     * For embedded fields that follow a two-step approach for reading, first obtain their field\n     * handle using this method, and pass that field handle to the respective\n     * HwParcel.readEmbedded*() method.\n     * @param offset The field offset.\n     * @return The field handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToBoolArray(long offset, boolean[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jboolean)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToInt8Array(long offset, byte[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jbyte)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToInt16Array(long offset, short[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jshort)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToInt32Array(long offset, int[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jint)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToInt64Array(long offset, long[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jlong)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToFloatArray(long offset, float[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jfloat)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void copyToDoubleArray(long offset, double[] array, int size)",
    "returnType" : "void",
    "comment" : "\n     * Copy the blobs data starting from the given byte offset into the range, copying\n     * a total of size elements.\n     *\n     * @param offset starting location in blob\n     * @param array destination array\n     * @param size total number of elements to copy\n     * @throws IllegalArgumentException array.length < size\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jdouble)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putBool(long offset, boolean x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a boolean value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jboolean)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt8(long offset, byte x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jbyte)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt16(long offset, short x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a short value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jshort)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt32(long offset, int x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a int value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jint)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt64(long offset, long x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a long value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jlong)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putFloat(long offset, float x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a float value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jfloat)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putDouble(long offset, double x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a double value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jdouble)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putString(long offset, String x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a string value at an offset.\n     *\n     * @param offset location to write value\n     * @param x value to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jstring)] is out of range\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putNativeHandle(long offset, @Nullable NativeHandle x)",
    "returnType" : "void",
    "comment" : "\n     * Writes a native handle (without duplicating the underlying file descriptors) at an offset.\n     *\n     * @param offset location to write value\n     * @param x a {@link NativeHandle} instance to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jobject)] is out of range\n     ",
    "links" : [ "NativeHandle" ]
  }, {
    "name" : "public final native void putBoolArray(long offset, boolean[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a boolean array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jboolean)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt8Array(long offset, byte[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a byte array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jbyte)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt16Array(long offset, short[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a short array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jshort)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt32Array(long offset, int[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a int array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jint)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putInt64Array(long offset, long[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a long array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jlong)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putFloatArray(long offset, float[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a float array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jfloat)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putDoubleArray(long offset, double[] x)",
    "returnType" : "void",
    "comment" : "\n     * Put a double array contiguously at an offset in the blob.\n     *\n     * @param offset location to write values\n     * @param x array to write\n     * @throws IndexOutOfBoundsException [offset, offset + size * sizeof(jdouble)] out of the blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void putBlob(long offset, HwBlob blob)",
    "returnType" : "void",
    "comment" : "\n     * Write another HwBlob into this blob at the specified location.\n     *\n     * @param offset location to write value\n     * @param blob data to write\n     * @throws IndexOutOfBoundsException if [offset, offset + blob's size] outside of the range of\n     *     this blob.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void putHidlMemory(long offset, @NonNull HidlMemory mem)",
    "returnType" : "void",
    "comment" : "\n     * Writes a HidlMemory instance (without duplicating the underlying file descriptors) at an\n     * offset.\n     *\n     * @param offset location to write value\n     * @param mem    a {@link HidlMemory} instance to write\n     * @throws IndexOutOfBoundsException when [offset, offset + sizeof(jobject)] is out of range\n     ",
    "links" : [ "HidlMemory" ]
  }, {
    "name" : "public final native long handle()",
    "returnType" : "long",
    "comment" : "\n     * @return current handle of HwBlob for reference in a parcelled binder transaction\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Boolean[] wrapArray(@NonNull boolean[] array)",
    "returnType" : "Boolean[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for boolean.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Long[] wrapArray(@NonNull long[] array)",
    "returnType" : "Long[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for long.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Byte[] wrapArray(@NonNull byte[] array)",
    "returnType" : "Byte[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for byte.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Short[] wrapArray(@NonNull short[] array)",
    "returnType" : "Short[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for short.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Integer[] wrapArray(@NonNull int[] array)",
    "returnType" : "Integer[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for int.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Float[] wrapArray(@NonNull float[] array)",
    "returnType" : "Float[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for float.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Double[] wrapArray(@NonNull double[] array)",
    "returnType" : "Double[]",
    "comment" : "\n     * Convert a primitive to a wrapped array for double.\n     *\n     * @param array from array\n     * @return transformed array\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final native long native_init()",
    "returnType" : "long",
    "comment" : " Returns address of the \"freeFunction\".",
    "links" : [ ]
  }, {
    "name" : "private final native void native_setup(int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sNativeRegistry", "mNativeContext" ],
  "methodNames" : [ "public final native boolean getBool(long offset)", "public final native byte getInt8(long offset)", "public final native short getInt16(long offset)", "public final native int getInt32(long offset)", "public final native long getInt64(long offset)", "public final native float getFloat(long offset)", "public final native double getDouble(long offset)", "public final native String getString(long offset)", "public final native long getFieldHandle(long offset)", "public final native void copyToBoolArray(long offset, boolean[] array, int size)", "public final native void copyToInt8Array(long offset, byte[] array, int size)", "public final native void copyToInt16Array(long offset, short[] array, int size)", "public final native void copyToInt32Array(long offset, int[] array, int size)", "public final native void copyToInt64Array(long offset, long[] array, int size)", "public final native void copyToFloatArray(long offset, float[] array, int size)", "public final native void copyToDoubleArray(long offset, double[] array, int size)", "public final native void putBool(long offset, boolean x)", "public final native void putInt8(long offset, byte x)", "public final native void putInt16(long offset, short x)", "public final native void putInt32(long offset, int x)", "public final native void putInt64(long offset, long x)", "public final native void putFloat(long offset, float x)", "public final native void putDouble(long offset, double x)", "public final native void putString(long offset, String x)", "public final native void putNativeHandle(long offset, @Nullable NativeHandle x)", "public final native void putBoolArray(long offset, boolean[] x)", "public final native void putInt8Array(long offset, byte[] x)", "public final native void putInt16Array(long offset, short[] x)", "public final native void putInt32Array(long offset, int[] x)", "public final native void putInt64Array(long offset, long[] x)", "public final native void putFloatArray(long offset, float[] x)", "public final native void putDoubleArray(long offset, double[] x)", "public final native void putBlob(long offset, HwBlob blob)", "public final void putHidlMemory(long offset, @NonNull HidlMemory mem)", "public final native long handle()", "public static Boolean[] wrapArray(@NonNull boolean[] array)", "public static Long[] wrapArray(@NonNull long[] array)", "public static Byte[] wrapArray(@NonNull byte[] array)", "public static Short[] wrapArray(@NonNull short[] array)", "public static Integer[] wrapArray(@NonNull int[] array)", "public static Float[] wrapArray(@NonNull float[] array)", "public static Double[] wrapArray(@NonNull double[] array)", "private static final native long native_init()", "private final native void native_setup(int size)" ]
}