{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ClientTransactionHandler.java",
  "packageName" : "android.app",
  "className" : "ClientTransactionHandler",
  "comment" : "\n * Defines operations that a {@link android.app.servertransaction.ClientTransaction} or its items\n * can perform on client.\n * @hide\n ",
  "links" : [ "android.app.servertransaction.ClientTransaction" ],
  "variables" : [ {
    "name" : "mIsExecutingLocalTransaction",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void scheduleTransaction(ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : " Prepare and schedule transaction for execution. ",
    "links" : [ ]
  }, {
    "name" : "public void executeTransaction(ClientTransaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Execute transaction immediately without scheduling it. This is used for local requests, so\n     * it will also recycle the transaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExecutingLocalTransaction()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if the current executing ClientTransaction is from local request. ",
    "links" : [ ]
  }, {
    "name" : " abstract TransactionExecutor getTransactionExecutor()",
    "returnType" : "TransactionExecutor",
    "comment" : "\n     * Get the {@link TransactionExecutor} that will be performing lifecycle transitions and\n     * callbacks for activities.\n     ",
    "links" : [ "android.app.servertransaction.TransactionExecutor" ]
  }, {
    "name" : " abstract void sendMessage(int what, Object obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Activity getActivity(IBinder token)",
    "returnType" : "Activity",
    "comment" : " Get activity instance for the token. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updatePendingConfiguration(Configuration config)",
    "returnType" : "void",
    "comment" : " Set pending config in case it will be updated by other transaction item. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateProcessState(int processState, boolean fromIpc)",
    "returnType" : "void",
    "comment" : " Set current process state. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void countLaunchingActivities(int num)",
    "returnType" : "void",
    "comment" : " Count how many activities are launching. ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<IBinder, DestroyActivityItem> getActivitiesToBeDestroyed()",
    "returnType" : "Map<IBinder, DestroyActivityItem>",
    "comment" : " Get activity and its corresponding transaction item which are going to destroy. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleDestroyActivity(@NonNull ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)",
    "returnType" : "void",
    "comment" : " Destroy the activity. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handlePauseActivity(@NonNull ActivityClientRecord r, boolean finished, boolean userLeaving, boolean autoEnteringPip, PendingTransactionActions pendingActions, String reason)",
    "returnType" : "void",
    "comment" : " Pause the activity. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleResumeActivity(@NonNull ActivityClientRecord r, boolean finalStateRequest, boolean isForward, boolean shouldSendCompatFakeFocus, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Resume the activity.\n     * @param r Target activity record.\n     * @param finalStateRequest Flag indicating if this call is handling final lifecycle state\n     *                          request for a transaction.\n     * @param isForward Flag indicating if next transition is forward.\n     * @param reason Reason for performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleTopResumedActivityChanged(@NonNull ActivityClientRecord r, boolean isTopResumedActivity, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Notify the activity about top resumed state change.\n     * @param r Target activity record.\n     * @param isTopResumedActivity Current state of the activity, {@code true} if it's the\n     *                             topmost resumed activity in the system, {@code false} otherwise.\n     * @param reason Reason for performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleStopActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)",
    "returnType" : "void",
    "comment" : "\n     * Stop the activity.\n     * @param r Target activity record.\n     * @param pendingActions Pending actions to be used on this or later stages of activity\n     *                       transaction.\n     * @param finalStateRequest Flag indicating if this call is handling final lifecycle state\n     *                          request for a transaction.\n     * @param reason Reason for performing this operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void reportStop(PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : " Report that activity was stopped to server. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void performRestartActivity(@NonNull ActivityClientRecord r, boolean start)",
    "returnType" : "void",
    "comment" : " Restart the activity after it was stopped. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void reportRefresh(@NonNull ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : " Report that activity was refreshed to server. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updatePendingActivityConfiguration(@NonNull IBinder token, @NonNull Configuration overrideConfig)",
    "returnType" : "void",
    "comment" : " Set pending activity configuration in case it will be updated by other transaction item. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo)",
    "returnType" : "void",
    "comment" : " Deliver activity (override) configuration change. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)",
    "returnType" : "void",
    "comment" : " Deliver {@link android.window.WindowContextInfo} change. ",
    "links" : [ "android.window.WindowContextInfo" ]
  }, {
    "name" : "public abstract void handleWindowContextWindowRemoval(@NonNull IBinder clientToken)",
    "returnType" : "void",
    "comment" : " Deliver {@link android.window.WindowContext} window removal event. ",
    "links" : [ "android.window.WindowContext" ]
  }, {
    "name" : "public abstract void handleSendResult(@NonNull ActivityClientRecord r, List<ResultInfo> results, String reason)",
    "returnType" : "void",
    "comment" : " Deliver result from another activity. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleNewIntent(@NonNull ActivityClientRecord r, List<ReferrerIntent> intents)",
    "returnType" : "void",
    "comment" : " Deliver new intent. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handlePictureInPictureRequested(@NonNull ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : " Request that an activity enter picture-in-picture. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handlePictureInPictureStateChanged(@NonNull ActivityClientRecord r, PictureInPictureUiState pipState)",
    "returnType" : "void",
    "comment" : " Signal to an activity (that is currently in PiP) of PiP state changes. ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isHandleSplashScreenExit(@NonNull IBinder token)",
    "returnType" : "boolean",
    "comment" : " Whether the activity want to handle splash screen exit animation ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleAttachSplashScreenView(@NonNull ActivityClientRecord r, @NonNull SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)",
    "returnType" : "void",
    "comment" : " Attach a splash screen window view to the top of the activity ",
    "links" : [ ]
  }, {
    "name" : "public abstract Activity handleLaunchActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, int deviceId, Intent customIntent)",
    "returnType" : "Activity",
    "comment" : " Perform activity launch. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleStartActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, SceneTransitionInfo sceneTransitionInfo)",
    "returnType" : "void",
    "comment" : " Perform activity start. ",
    "links" : [ ]
  }, {
    "name" : "public abstract LoadedApk getPackageInfoNoCheck(ApplicationInfo ai)",
    "returnType" : "LoadedApk",
    "comment" : " Get package info. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void handleConfigurationChanged(Configuration config, int deviceId)",
    "returnType" : "void",
    "comment" : " Deliver app configuration change notification and device association. ",
    "links" : [ ]
  }, {
    "name" : "public abstract ActivityClientRecord getActivityClient(IBinder token)",
    "returnType" : "ActivityClientRecord",
    "comment" : "\n     * Get {@link android.app.ActivityThread.ActivityClientRecord} instance that corresponds to the\n     * provided token.\n     ",
    "links" : [ "android.app.ActivityThread.ActivityClientRecord" ]
  }, {
    "name" : "public abstract ActivityClientRecord prepareRelaunchActivity(@NonNull IBinder token, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingNewIntents, int configChanges, @NonNull MergedConfiguration config, boolean preserveWindow, @NonNull ActivityWindowInfo activityWindowInfo)",
    "returnType" : "ActivityClientRecord",
    "comment" : "\n     * Prepare activity relaunch to update internal bookkeeping. This is used to track multiple\n     * relaunch and config update requests.\n     * @param token Activity token.\n     * @param pendingResults Activity results to be delivered.\n     * @param pendingNewIntents New intent messages to be delivered.\n     * @param configChanges Mask of configuration changes that have occurred.\n     * @param config New configuration applied to the activity.\n     * @param preserveWindow Whether the activity should try to reuse the window it created,\n     *                        including the decor view after the relaunch.\n     * @param activityWindowInfo Window information about the relaunched Activity.\n     * @return An initialized instance of {@link ActivityThread.ActivityClientRecord} to use during\n     *         relaunch, or {@code null} if relaunch cancelled.\n     ",
    "links" : [ "ActivityThread.ActivityClientRecord" ]
  }, {
    "name" : "public abstract void handleRelaunchActivity(@NonNull ActivityClientRecord r, @NonNull PendingTransactionActions pendingActions)",
    "returnType" : "void",
    "comment" : "\n     * Perform activity relaunch.\n     * @param r Activity client record prepared for relaunch.\n     * @param pendingActions Pending actions to be used on later stages of activity transaction.\n     * ",
    "links" : [ ]
  }, {
    "name" : "public abstract void reportRelaunch(@NonNull ActivityClientRecord r)",
    "returnType" : "void",
    "comment" : "\n     * Report that relaunch request was handled.\n     * @param r Target activity record.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void scheduleTransaction(ClientTransaction transaction)", "public void executeTransaction(ClientTransaction transaction)", "public boolean isExecutingLocalTransaction()", " abstract TransactionExecutor getTransactionExecutor()", " abstract void sendMessage(int what, Object obj)", "public abstract Activity getActivity(IBinder token)", "public abstract void updatePendingConfiguration(Configuration config)", "public abstract void updateProcessState(int processState, boolean fromIpc)", "public abstract void countLaunchingActivities(int num)", "public abstract Map<IBinder, DestroyActivityItem> getActivitiesToBeDestroyed()", "public abstract void handleDestroyActivity(@NonNull ActivityClientRecord r, boolean finishing, boolean getNonConfigInstance, String reason)", "public abstract void handlePauseActivity(@NonNull ActivityClientRecord r, boolean finished, boolean userLeaving, boolean autoEnteringPip, PendingTransactionActions pendingActions, String reason)", "public abstract void handleResumeActivity(@NonNull ActivityClientRecord r, boolean finalStateRequest, boolean isForward, boolean shouldSendCompatFakeFocus, String reason)", "public abstract void handleTopResumedActivityChanged(@NonNull ActivityClientRecord r, boolean isTopResumedActivity, String reason)", "public abstract void handleStopActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, boolean finalStateRequest, String reason)", "public abstract void reportStop(PendingTransactionActions pendingActions)", "public abstract void performRestartActivity(@NonNull ActivityClientRecord r, boolean start)", "public abstract void reportRefresh(@NonNull ActivityClientRecord r)", "public abstract void updatePendingActivityConfiguration(@NonNull IBinder token, @NonNull Configuration overrideConfig)", "public abstract void handleActivityConfigurationChanged(@NonNull ActivityClientRecord r, @NonNull Configuration overrideConfig, int displayId, @NonNull ActivityWindowInfo activityWindowInfo)", "public abstract void handleWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)", "public abstract void handleWindowContextWindowRemoval(@NonNull IBinder clientToken)", "public abstract void handleSendResult(@NonNull ActivityClientRecord r, List<ResultInfo> results, String reason)", "public abstract void handleNewIntent(@NonNull ActivityClientRecord r, List<ReferrerIntent> intents)", "public abstract void handlePictureInPictureRequested(@NonNull ActivityClientRecord r)", "public abstract void handlePictureInPictureStateChanged(@NonNull ActivityClientRecord r, PictureInPictureUiState pipState)", "public abstract boolean isHandleSplashScreenExit(@NonNull IBinder token)", "public abstract void handleAttachSplashScreenView(@NonNull ActivityClientRecord r, @NonNull SplashScreenViewParcelable parcelable, @NonNull SurfaceControl startingWindowLeash)", "public abstract Activity handleLaunchActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, int deviceId, Intent customIntent)", "public abstract void handleStartActivity(@NonNull ActivityClientRecord r, PendingTransactionActions pendingActions, SceneTransitionInfo sceneTransitionInfo)", "public abstract LoadedApk getPackageInfoNoCheck(ApplicationInfo ai)", "public abstract void handleConfigurationChanged(Configuration config, int deviceId)", "public abstract ActivityClientRecord getActivityClient(IBinder token)", "public abstract ActivityClientRecord prepareRelaunchActivity(@NonNull IBinder token, @Nullable List<ResultInfo> pendingResults, @Nullable List<ReferrerIntent> pendingNewIntents, int configChanges, @NonNull MergedConfiguration config, boolean preserveWindow, @NonNull ActivityWindowInfo activityWindowInfo)", "public abstract void handleRelaunchActivity(@NonNull ActivityClientRecord r, @NonNull PendingTransactionActions pendingActions)", "public abstract void reportRelaunch(@NonNull ActivityClientRecord r)" ],
  "variableNames" : [ "mIsExecutingLocalTransaction" ]
}