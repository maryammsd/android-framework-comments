{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/RemoteAnimationAdapter.java",
  "packageName" : "android.view",
  "className" : "RemoteAnimationAdapter",
  "comment" : "\n * Object that describes how to run a remote animation.\n * <p>\n * A remote animation lets another app control the entire app transition. It does so by\n * <ul>\n *     <li>using {@link ActivityOptions#makeRemoteAnimation}</li>\n *     <li>using {@link IWindowManager#overridePendingAppTransitionRemote}</li>\n * </ul>\n * to register a {@link RemoteAnimationAdapter} that describes how the animation should be run:\n * Along some meta-data, this object contains a callback that gets invoked from window manager when\n * the transition is ready to be started.\n * <p>\n * Window manager supplies a list of {@link RemoteAnimationTarget}s into the callback. Each target\n * contains information about the activity that is animating as well as\n * {@link RemoteAnimationTarget#leash}. The controlling app can modify the leash like any other\n * {@link SurfaceControl}, including the possibility to synchronize updating the leash's surface\n * properties with a frame to be drawn using\n * {@link SurfaceControl.Transaction#deferTransactionUntil}.\n * <p>\n * When the animation is done, the controlling app can invoke\n * {@link IRemoteAnimationFinishedCallback} that gets supplied into\n * {@link IRemoteAnimationRunner#onStartAnimation}\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "mRunner",
    "type" : "IRemoteAnimationRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatusBarTransitionDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangeNeedsSnapshot",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingPid",
    "type" : "int",
    "comment" : " @see #getCallingPid ",
    "links" : [ ]
  }, {
    "name" : "mCallingUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RemoteAnimationAdapter>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IRemoteAnimationRunner getRunner()",
    "returnType" : "IRemoteAnimationRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getStatusBarTransitionDelay()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getChangeNeedsSnapshot()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCallingPidUid(int pid, int uid)",
    "returnType" : "void",
    "comment" : "\n     * To be called by system_server to keep track which pid and uid is running this animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCallingPid()",
    "returnType" : "int",
    "comment" : "\n     * @return The pid of the process running the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCallingUid()",
    "returnType" : "int",
    "comment" : "\n     * @return The uid of the process running the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRunner", "mDuration", "mStatusBarTransitionDelay", "mChangeNeedsSnapshot", "mCallingPid", "mCallingUid", "CREATOR" ],
  "methodNames" : [ "public IRemoteAnimationRunner getRunner()", "public long getDuration()", "public long getStatusBarTransitionDelay()", "public boolean getChangeNeedsSnapshot()", "public void setCallingPidUid(int pid, int uid)", "public int getCallingPid()", "public int getCallingUid()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}