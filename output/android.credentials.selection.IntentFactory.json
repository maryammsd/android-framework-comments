{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/credentials/selection/IntentFactory.java",
  "packageName" : "android.credentials.selection",
  "className" : "IntentFactory",
  "comment" : "\n * Helpers for generating the intents and related extras parameters to launch the UI activities.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IntentCreationResult createCredentialSelectorIntentForAutofill(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "IntentCreationResult",
    "comment" : "\n     * Generate a new launch intent to the Credential Selector UI for auto-filling. This intent is\n     * invoked from the Autofill flow, when the user requests to bring up the 'All Options' page of\n     * the credential bottom-sheet. When the user clicks on the pinned entry, the intent will bring\n     * up the 'All Options' page of the bottom-sheet. The provider data list is processed by the\n     * credential autofill service for each autofill id and passed in as an auth extra.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IntentCreationResult createCredentialSelectorIntentForCredMan(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<ProviderData> enabledProviderDataList, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "IntentCreationResult",
    "comment" : "\n     * Generate a new launch intent to the Credential Selector UI.\n     *\n     * @param context                  the CredentialManager system service (only expected caller)\n     *                                 context that may be used to query existence of the key UI\n     *                                 application\n     * @param disabledProviderDataList the list of disabled provider data that when non-empty the\n     *                                 UI should accordingly generate an entry suggesting the user\n     *                                 to navigate to settings and enable them\n     * @param enabledProviderDataList  the list of enabled provider that contain options for this\n     *                                 request; the UI should render each option to the user for\n     *                                 selection\n     * @param requestInfo              the display information about the given app request\n     * @param resultReceiver           used by the UI to send the UI selection result back\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Intent createCredentialSelectorIntent(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<ProviderData> enabledProviderDataList, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "Intent",
    "comment" : "\n     * Generate a new launch intent to the Credential Selector UI.\n     *\n     * @param context                  the CredentialManager system service (only expected caller)\n     *                                 context that may be used to query existence of the key UI\n     *                                 application\n     * @param disabledProviderDataList the list of disabled provider data that when non-empty the\n     *                                 UI should accordingly generate an entry suggesting the user\n     *                                 to navigate to settings and enable them\n     * @param enabledProviderDataList  the list of enabled provider that contain options for this\n     *                                 request; the UI should render each option to the user for\n     *                                 selection\n     * @param requestInfo              the display information about the given app request\n     * @param resultReceiver           used by the UI to send the UI selection result back\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Intent createCancelUiIntent(@NonNull Context context, @NonNull IBinder requestToken, boolean shouldShowCancellationUi, @NonNull String appPackageName)",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an Intent that cancels any UI matching the given request token id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IntentCreationResult createCredentialSelectorIntentInternal(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)",
    "returnType" : "IntentCreationResult",
    "comment" : "\n     * Generate a new launch intent to the Credential Selector UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setCredentialSelectorUiComponentName(@NonNull Context context, @NonNull Intent intent, @NonNull IntentCreationResult.Builder intentResultBuilder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ComponentName getOemOverrideComponentName(@NonNull Context context, @NonNull IntentCreationResult.Builder intentResultBuilder)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns null if there is not an enabled and valid oem override component. It means the\n     * default platform UI component name should be used instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ResultReceiver toIpcFriendlyResultReceiver(T resultReceiver)",
    "returnType" : "ResultReceiver",
    "comment" : "\n     * Convert an instance of a \"locally-defined\" ResultReceiver to an instance of {@link\n     * android.os.ResultReceiver} itself, which the receiving process will be able to unmarshall.\n     ",
    "links" : [ "android.os.ResultReceiver" ]
  } ],
  "methodNames" : [ "public static IntentCreationResult createCredentialSelectorIntentForAutofill(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)", "public static IntentCreationResult createCredentialSelectorIntentForCredMan(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<ProviderData> enabledProviderDataList, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)", "public static Intent createCredentialSelectorIntent(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<ProviderData> enabledProviderDataList, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)", "public static Intent createCancelUiIntent(@NonNull Context context, @NonNull IBinder requestToken, boolean shouldShowCancellationUi, @NonNull String appPackageName)", "private static IntentCreationResult createCredentialSelectorIntentInternal(@NonNull Context context, @NonNull RequestInfo requestInfo, @SuppressLint(\"ConcreteCollection\") @NonNull ArrayList<DisabledProviderData> disabledProviderDataList, @NonNull ResultReceiver resultReceiver)", "private static void setCredentialSelectorUiComponentName(@NonNull Context context, @NonNull Intent intent, @NonNull IntentCreationResult.Builder intentResultBuilder)", "private static ComponentName getOemOverrideComponentName(@NonNull Context context, @NonNull IntentCreationResult.Builder intentResultBuilder)", "private static ResultReceiver toIpcFriendlyResultReceiver(T resultReceiver)" ],
  "variableNames" : [ "TAG" ]
}