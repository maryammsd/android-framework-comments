{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/util/Linkify.java",
  "packageName" : "android.text.util",
  "className" : "Linkify",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEB_URLS",
    "type" : "int",
    "comment" : "\n     *  Bit field indicating that web URLs should be matched in methods that\n     *  take an options mask\n     ",
    "links" : [ ]
  }, {
    "name" : "EMAIL_ADDRESSES",
    "type" : "int",
    "comment" : "\n     *  Bit field indicating that email addresses should be matched in methods\n     *  that take an options mask\n     ",
    "links" : [ ]
  }, {
    "name" : "PHONE_NUMBERS",
    "type" : "int",
    "comment" : "\n     *  Bit field indicating that phone numbers should be matched in methods that\n     *  take an options mask\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_ADDRESSES",
    "type" : "int",
    "comment" : "\n     *  Bit field indicating that street addresses should be matched in methods that\n     *  take an options mask. Note that this should be avoided, as it uses the\n     *  {@link android.webkit.WebView#findAddress(String)} method, which has various\n     *  limitations and has been deprecated: see the documentation for\n     *  {@link android.webkit.WebView#findAddress(String)} for more information.\n     *\n     *  @deprecated use {@link android.view.textclassifier.TextClassifier#generateLinks(\n     *  TextLinks.Request)} instead, and avoid {@link #MAP_ADDRESSES} even when targeting API levels\n     *  where no alternative is available.\n     ",
    "links" : [ "android.webkit.WebView#findAddress(String)", "#MAP_ADDRESSES", "android.view.textclassifier.TextClassifier#generateLinks(" ]
  }, {
    "name" : "ALL",
    "type" : "int",
    "comment" : "\n     *  Bit mask indicating that all available patterns should be matched in methods\n     *  that take an options mask. Note that this should be avoided, as the {@link\n     *  #MAP_ADDRESSES} field uses the {@link android.webkit.WebView#findAddress(\n     *  String)} method, which has various limitations and has been deprecated: see\n     *  the documentation for {@link android.webkit.WebView#findAddress(String)} for\n     *  more information.\n     *\n     *  @deprecated use {@link android.view.textclassifier.TextClassifier#generateLinks(\n     *  TextLinks.Request)} instead, and avoid {@link #ALL} even when targeting API levels where no\n     *  alternative is available.\n     ",
    "links" : [ "android.webkit.WebView#findAddress(String)", "#MAP_ADDRESSES", "android.view.textclassifier.TextClassifier#generateLinks(", "android.webkit.WebView#findAddress(", "#ALL" ]
  }, {
    "name" : "PHONE_NUMBER_MINIMUM_DIGITS",
    "type" : "int",
    "comment" : "\n     * Don't treat anything with fewer than this many digits as a\n     * phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "sUrlMatchFilter",
    "type" : "MatchFilter",
    "comment" : "\n     *  Filters out web URL matches that occur after an at-sign (@).  This is\n     *  to prevent turning the domain name in an email address into a web link.\n     ",
    "links" : [ ]
  }, {
    "name" : "sPhoneNumberMatchFilter",
    "type" : "MatchFilter",
    "comment" : "\n     *  Filters out URL matches that don't have enough digits to be a\n     *  phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "sPhoneNumberTransformFilter",
    "type" : "TransformFilter",
    "comment" : "\n     *  Transforms matched phone number text into something suitable\n     *  to be used in a tel: URL.  It does this by removing everything\n     *  but the digits and plus signs.  For instance:\n     *  &apos;+1 (919) 555-1212&apos;\n     *  becomes &apos;+19195551212&apos;\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SPAN_FACTORY",
    "type" : "Function<String, URLSpan>",
    "comment" : "\n     * Default factory function to create {@link URLSpan}s. While adding spans to a\n     * {@link Spannable}, {@link Linkify} will call this function to create a {@link URLSpan}.\n     ",
    "links" : [ "android.text.style.URLSpan", "android.text.Spannable", "android.text.util.Linkify" ]
  } ],
  "methods" : [ {
    "name" : "public static final boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask)",
    "returnType" : "boolean",
    "comment" : "\n     *  Scans the text of the provided Spannable and turns all occurrences\n     *  of the link types indicated in the mask into clickable links.\n     *  If the mask is nonzero, it also removes any existing URLSpans\n     *  attached to the Spannable, to avoid problems if you call it\n     *  repeatedly on the same text.\n     *\n     *  @param text Spannable whose text is to be marked-up with links\n     *  @param mask Mask to define which kinds of links will be searched.\n     *\n     *  @return True if at least one link is found and applied.\n     *\n     * @see #addLinks(Spannable, int, Function)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask, @Nullable Function<String, URLSpan> urlSpanFactory)",
    "returnType" : "boolean",
    "comment" : "\n     *  Scans the text of the provided Spannable and turns all occurrences\n     *  of the link types indicated in the mask into clickable links.\n     *  If the mask is nonzero, it also removes any existing URLSpans\n     *  attached to the Spannable, to avoid problems if you call it\n     *  repeatedly on the same text.\n     *\n     *  @param text Spannable whose text is to be marked-up with links\n     *  @param mask mask to define which kinds of links will be searched\n     *  @param urlSpanFactory function used to create {@link URLSpan}s\n     *  @return True if at least one link is found and applied.\n     ",
    "links" : [ "android.text.style.URLSpan" ]
  }, {
    "name" : "private static boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask, @Nullable Context context, @Nullable Function<String, URLSpan> urlSpanFactory)",
    "returnType" : "boolean",
    "comment" : "\n     *  Scans the text of the provided Spannable and turns all occurrences of the link types\n     *  indicated in the mask into clickable links. If the mask is nonzero, it also removes any\n     *  existing URLSpans attached to the Spannable, to avoid problems if you call it repeatedly\n     *  on the same text.\n     *\n     * @param text Spannable whose text is to be marked-up with links\n     * @param mask mask to define which kinds of links will be searched\n     * @param context Context to be used while identifying phone numbers\n     * @param urlSpanFactory function used to create {@link URLSpan}s\n     * @return true if at least one link is found and applied.\n     ",
    "links" : [ "android.text.style.URLSpan" ]
  }, {
    "name" : "public static boolean containsUnsupportedCharacters(String text)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified text contains at least one unsupported character for applying\n     * links. Also logs the error.\n     *\n     * @param text the text to apply links to\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull TextView text, @LinkifyMask int mask)",
    "returnType" : "boolean",
    "comment" : "\n     *  Scans the text of the provided TextView and turns all occurrences of\n     *  the link types indicated in the mask into clickable links.  If matches\n     *  are found the movement method for the TextView is set to\n     *  LinkMovementMethod.\n     *\n     *  @param text TextView whose text is to be marked-up with links\n     *  @param mask Mask to define which kinds of links will be searched.\n     *\n     *  @return True if at least one link is found and applied.\n     *\n     *  @see #addLinks(Spannable, int, Function)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void addLinkMovementMethod(@NonNull TextView t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String scheme)",
    "returnType" : "void",
    "comment" : "\n     *  Applies a regex to the text of a TextView turning the matches into\n     *  links.  If links are found then UrlSpans are applied to the link\n     *  text match areas, and the movement method for the text is changed\n     *  to LinkMovementMethod.\n     *\n     *  @param text         TextView whose text is to be marked-up with links\n     *  @param pattern      Regex pattern to be used for finding links\n     *  @param scheme       URL scheme string (eg <code>http://</code>) to be\n     *                      prepended to the links that do not start with this scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String scheme, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)",
    "returnType" : "void",
    "comment" : "\n     *  Applies a regex to the text of a TextView turning the matches into\n     *  links.  If links are found then UrlSpans are applied to the link\n     *  text match areas, and the movement method for the text is changed\n     *  to LinkMovementMethod.\n     *\n     *  @param text         TextView whose text is to be marked-up with links\n     *  @param pattern      Regex pattern to be used for finding links\n     *  @param scheme       URL scheme string (eg <code>http://</code>) to be\n     *                      prepended to the links that do not start with this scheme.\n     *  @param matchFilter  The filter that is used to allow the client code\n     *                      additional control over which pattern matches are\n     *                      to be converted into links.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)",
    "returnType" : "void",
    "comment" : "\n     *  Applies a regex to the text of a TextView turning the matches into\n     *  links.  If links are found then UrlSpans are applied to the link\n     *  text match areas, and the movement method for the text is changed\n     *  to LinkMovementMethod.\n     *\n     *  @param text TextView whose text is to be marked-up with links.\n     *  @param pattern Regex pattern to be used for finding links.\n     *  @param defaultScheme The default scheme to be prepended to links if the link does not\n     *                       start with one of the <code>schemes</code> given.\n     *  @param schemes Array of schemes (eg <code>http://</code>) to check if the link found\n     *                 contains a scheme. Passing a null or empty value means prepend defaultScheme\n     *                 to all links.\n     *  @param matchFilter  The filter that is used to allow the client code additional control\n     *                      over which pattern matches are to be converted into links.\n     *  @param transformFilter Filter to allow the client code to update the link found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull Spannable text, @NonNull Pattern pattern, @Nullable String scheme)",
    "returnType" : "boolean",
    "comment" : "\n     *  Applies a regex to a Spannable turning the matches into\n     *  links.\n     *\n     *  @param text         Spannable whose text is to be marked-up with links\n     *  @param pattern      Regex pattern to be used for finding links\n     *  @param scheme       URL scheme string (eg <code>http://</code>) to be\n     *                      prepended to the links that do not start with this scheme.\n     * @see #addLinks(Spannable, Pattern, String, String[], MatchFilter, TransformFilter, Function)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String scheme, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * Applies a regex to a Spannable turning the matches into\n     * links.\n     *\n     * @param spannable    Spannable whose text is to be marked-up with links\n     * @param pattern      Regex pattern to be used for finding links\n     * @param scheme       URL scheme string (eg <code>http://</code>) to be\n     *                     prepended to the links that do not start with this scheme.\n     * @param matchFilter  The filter that is used to allow the client code\n     *                     additional control over which pattern matches are\n     *                     to be converted into links.\n     * @param transformFilter Filter to allow the client code to update the link found.\n     *\n     * @return True if at least one link is found and applied.\n     * @see #addLinks(Spannable, Pattern, String, String[], MatchFilter, TransformFilter, Function)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * Applies a regex to a Spannable turning the matches into links.\n     *\n     * @param spannable Spannable whose text is to be marked-up with links.\n     * @param pattern Regex pattern to be used for finding links.\n     * @param defaultScheme The default scheme to be prepended to links if the link does not\n     *                      start with one of the <code>schemes</code> given.\n     * @param schemes Array of schemes (eg <code>http://</code>) to check if the link found\n     *                contains a scheme. Passing a null or empty value means prepend defaultScheme\n     *                to all links.\n     * @param matchFilter  The filter that is used to allow the client code additional control\n     *                     over which pattern matches are to be converted into links.\n     * @param transformFilter Filter to allow the client code to update the link found.\n     *\n     * @return True if at least one link is found and applied.\n     *\n     * @see #addLinks(Spannable, Pattern, String, String[], MatchFilter, TransformFilter, Function)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter, @Nullable Function<String, URLSpan> urlSpanFactory)",
    "returnType" : "boolean",
    "comment" : "\n     * Applies a regex to a Spannable turning the matches into links.\n     *\n     * @param spannable       spannable whose text is to be marked-up with links.\n     * @param pattern         regex pattern to be used for finding links.\n     * @param defaultScheme   the default scheme to be prepended to links if the link does not\n     *                        start with one of the <code>schemes</code> given.\n     * @param schemes         array of schemes (eg <code>http://</code>) to check if the link found\n     *                        contains a scheme. Passing a null or empty value means prepend\n     *                        defaultScheme\n     *                        to all links.\n     * @param matchFilter     the filter that is used to allow the client code additional control\n     *                        over which pattern matches are to be converted into links.\n     * @param transformFilter filter to allow the client code to update the link found.\n     * @param urlSpanFactory  function used to create {@link URLSpan}s\n     *\n     * @return True if at least one link is found and applied.\n     ",
    "links" : [ "android.text.style.URLSpan" ]
  }, {
    "name" : "private static void applyLink(String url, int start, int end, Spannable text, @Nullable Function<String, URLSpan> urlSpanFactory)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final String makeUrl(@NonNull String url, @NonNull String[] prefixes, Matcher matcher, @Nullable TransformFilter filter)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void gatherLinks(ArrayList<LinkSpec> links, Spannable s, Pattern pattern, String[] schemes, MatchFilter matchFilter, TransformFilter transformFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void gatherTelLinks(ArrayList<LinkSpec> links, Spannable s, @Nullable Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void gatherMapLinks(ArrayList<LinkSpec> links, Spannable s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final void pruneOverlaps(ArrayList<LinkSpec> links)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask)", "public static final boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask, @Nullable Function<String, URLSpan> urlSpanFactory)", "private static boolean addLinks(@NonNull Spannable text, @LinkifyMask int mask, @Nullable Context context, @Nullable Function<String, URLSpan> urlSpanFactory)", "public static boolean containsUnsupportedCharacters(String text)", "public static final boolean addLinks(@NonNull TextView text, @LinkifyMask int mask)", "private static final void addLinkMovementMethod(@NonNull TextView t)", "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String scheme)", "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String scheme, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)", "public static final void addLinks(@NonNull TextView text, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)", "public static final boolean addLinks(@NonNull Spannable text, @NonNull Pattern pattern, @Nullable String scheme)", "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String scheme, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)", "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter)", "public static final boolean addLinks(@NonNull Spannable spannable, @NonNull Pattern pattern, @Nullable String defaultScheme, @Nullable String[] schemes, @Nullable MatchFilter matchFilter, @Nullable TransformFilter transformFilter, @Nullable Function<String, URLSpan> urlSpanFactory)", "private static void applyLink(String url, int start, int end, Spannable text, @Nullable Function<String, URLSpan> urlSpanFactory)", "private static final String makeUrl(@NonNull String url, @NonNull String[] prefixes, Matcher matcher, @Nullable TransformFilter filter)", "private static final void gatherLinks(ArrayList<LinkSpec> links, Spannable s, Pattern pattern, String[] schemes, MatchFilter matchFilter, TransformFilter transformFilter)", "private static void gatherTelLinks(ArrayList<LinkSpec> links, Spannable s, @Nullable Context context)", "private static final void gatherMapLinks(ArrayList<LinkSpec> links, Spannable s)", "private static final void pruneOverlaps(ArrayList<LinkSpec> links)" ],
  "variableNames" : [ "LOG_TAG", "WEB_URLS", "EMAIL_ADDRESSES", "PHONE_NUMBERS", "MAP_ADDRESSES", "ALL", "PHONE_NUMBER_MINIMUM_DIGITS", "sUrlMatchFilter", "sPhoneNumberMatchFilter", "sPhoneNumberTransformFilter", "DEFAULT_SPAN_FACTORY" ]
}