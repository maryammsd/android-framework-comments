{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/fingerprint/FingerprintCallback.java",
  "packageName" : "android.hardware.fingerprint",
  "className" : "FingerprintCallback",
  "comment" : "\n * Encapsulates callbacks and client specific information for each fingerprint related request.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOVE_SINGLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REMOVE_ALL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticationCallback",
    "type" : "AuthenticationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnrollmentCallback",
    "type" : "EnrollmentCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemovalCallback",
    "type" : "RemovalCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGenerateChallengeCallback",
    "type" : "GenerateChallengeCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFingerprintDetectionCallback",
    "type" : "FingerprintDetectionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCryptoObject",
    "type" : "CryptoObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoveRequest",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoveFingerprint",
    "type" : "Fingerprint",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void sendEnrollResult(int remaining)",
    "returnType" : "void",
    "comment" : "\n     * Propagate enroll progress via the callback.\n     * @param remaining number of enrollment steps remaining\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendRemovedResult(@Nullable Fingerprint fingerprint, int remaining)",
    "returnType" : "void",
    "comment" : "\n     * Propagate remove face completed via the callback.\n     * @param fingerprint removed identifier\n     * @param remaining number of face enrollments remaining\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAuthenticatedSucceeded(@NonNull Fingerprint fingerprint, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "\n     * Propagate authentication succeeded via the callback.\n     * @param fingerprint matched identifier\n     * @param userId id of the corresponding user\n     * @param isStrongBiometric if the sensor is strong or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAuthenticatedFailed()",
    "returnType" : "void",
    "comment" : "\n     * Propagate authentication failed via the callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendAcquiredResult(@NonNull Context context, int acquireInfo, int vendorCode)",
    "returnType" : "void",
    "comment" : "\n     * Propagate acquired result via the callback.\n     * @param context corresponding context\n     * @param acquireInfo represents the framework acquired id\n     * @param vendorCode represents the vendor acquired code\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendErrorResult(@NonNull Context context, int errMsgId, int vendorCode)",
    "returnType" : "void",
    "comment" : "\n     * Propagate errors via the callback.\n     * @param context corresponding context\n     * @param errMsgId represents the framework error id\n     * @param vendorCode represents the vendor error code\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendChallengeGenerated(long challenge, int sensorId, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Propagate challenge generated completed via the callback.\n     * @param sensorId id of the corresponding sensor\n     * @param userId id of the corresponding sensor\n     * @param challenge value of the challenge generated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendFingerprintDetected(int sensorId, int userId, boolean isStrongBiometric)",
    "returnType" : "void",
    "comment" : "\n     * Propagate fingerprint detected completed via the callback.\n     * @param sensorId id of the corresponding sensor\n     * @param userId id of the corresponding user\n     * @param isStrongBiometric if the sensor is strong or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendUdfpsPointerDown(int sensorId)",
    "returnType" : "void",
    "comment" : "\n     * Propagate udfps pointer down via the callback.\n     * @param sensorId id of the corresponding sensor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendUdfpsPointerUp(int sensorId)",
    "returnType" : "void",
    "comment" : "\n     * Propagate udfps pointer up via the callback.\n     * @param sensorId id of the corresponding sensor\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendUdfpsOverlayShown()",
    "returnType" : "void",
    "comment" : "\n     * Propagate udfps overlay shown via the callback.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void sendEnrollResult(int remaining)", "public void sendRemovedResult(@Nullable Fingerprint fingerprint, int remaining)", "public void sendAuthenticatedSucceeded(@NonNull Fingerprint fingerprint, int userId, boolean isStrongBiometric)", "public void sendAuthenticatedFailed()", "public void sendAcquiredResult(@NonNull Context context, int acquireInfo, int vendorCode)", "public void sendErrorResult(@NonNull Context context, int errMsgId, int vendorCode)", "public void sendChallengeGenerated(long challenge, int sensorId, int userId)", "public void sendFingerprintDetected(int sensorId, int userId, boolean isStrongBiometric)", "public void sendUdfpsPointerDown(int sensorId)", "public void sendUdfpsPointerUp(int sensorId)", "public void sendUdfpsOverlayShown()" ],
  "variableNames" : [ "TAG", "REMOVE_SINGLE", "REMOVE_ALL", "mAuthenticationCallback", "mEnrollmentCallback", "mRemovalCallback", "mGenerateChallengeCallback", "mFingerprintDetectionCallback", "mCryptoObject", "mRemoveRequest", "mRemoveFingerprint" ]
}