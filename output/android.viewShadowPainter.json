{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ShadowPainter.java",
  "packageName" : "android.view",
  "className" : "ShadowPainter",
  "comment" : "",
  "variables" : [ {
    "name" : "SHADOW_SIZE",
    "type" : "int",
    "comment" : " DO NOT EDIT. This corresponds to bitmap graphics",
    "links" : [ ]
  }, {
    "name" : "SMALL_SHADOW_SIZE",
    "type" : "int",
    "comment" : " DO NOT EDIT. Corresponds to bitmap graphics",
    "links" : [ ]
  }, {
    "name" : "ShadowBottom",
    "type" : "Image",
    "comment" : " Normal Drop Shadow",
    "links" : [ ]
  }, {
    "name" : "ShadowBottomLeft",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ShadowBottomRight",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ShadowRight",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ShadowTopRight",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ShadowTopLeft",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ShadowLeft",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2Bottom",
    "type" : "Image",
    "comment" : " Small Drop Shadow",
    "links" : [ ]
  }, {
    "name" : "Shadow2BottomLeft",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2BottomRight",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2Right",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2TopRight",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2TopLeft",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "Shadow2Left",
    "type" : "Image",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BufferedImage createDropShadow(BufferedImage source, int shadowSize, float alpha)",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Adds a drop shadow to a semi-transparent image (of an arbitrary shape) and returns it as a\n     * new image. This method attempts to mimic the same visual characteristics as the rectangular\n     * shadow painting methods in this class, {@link #createRectangularDropShadow(java.awt.image.BufferedImage)}\n     * and {@link #createSmallRectangularDropShadow(java.awt.image.BufferedImage)}.\n     * <p/>\n     * If shadowSize is less or equals to 1, no shadow will be painted and the source image will be\n     * returned instead.\n     *\n     * @param source the source image\n     * @param shadowSize the size of the shadow, normally {@link #SHADOW_SIZE or {@link\n     * #SMALL_SHADOW_SIZE}}\n     * @param alpha alpha value to apply to the shadow\n     *\n     * @return an image with the shadow painted in or the source image if shadowSize <= 1\n     ",
    "links" : [ "#createRectangularDropShadow", "#createSmallRectangularDropShadow", "#SHADOW_SIZE" ]
  }, {
    "name" : "public static BufferedImage createDropShadow(BufferedImage source, int shadowSize, float shadowOpacity, int shadowRgb)",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Creates a drop shadow of a given image and returns a new image which shows the input image on\n     * top of its drop shadow.\n     * <p/>\n     * <b>NOTE: If the shape is rectangular and opaque, consider using {@link\n     * #drawRectangleShadow(Graphics2D, int, int, int, int)} instead.</b>\n     *\n     * @param source the source image to be shadowed\n     * @param shadowSize the size of the shadow in pixels\n     * @param shadowOpacity the opacity of the shadow, with 0=transparent and 1=opaque\n     * @param shadowRgb the RGB int to use for the shadow color\n     *\n     * @return a new image with the source image on top of its shadow when shadowSize > 0 or the\n     * source image otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BufferedImage createRectangularDropShadow(BufferedImage source)",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Draws a rectangular drop shadow (of size {@link #SHADOW_SIZE} by {@link #SHADOW_SIZE} around\n     * the given source and returns a new image with both combined\n     *\n     * @param source the source image\n     *\n     * @return the source image with a drop shadow on the bottom and right\n     ",
    "links" : [ "#SHADOW_SIZE", "#SHADOW_SIZE" ]
  }, {
    "name" : "public static BufferedImage createSmallRectangularDropShadow(BufferedImage source)",
    "returnType" : "BufferedImage",
    "comment" : "\n     * Draws a small rectangular drop shadow (of size {@link #SMALL_SHADOW_SIZE} by {@link\n     * #SMALL_SHADOW_SIZE} around the given source and returns a new image with both combined\n     *\n     * @param source the source image\n     *\n     * @return the source image with a drop shadow on the bottom and right\n     ",
    "links" : [ "#SMALL_SHADOW_SIZE" ]
  }, {
    "name" : "public static void drawRectangleShadow(BufferedImage image, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Draws a drop shadow for the given rectangle into the given context. It will not draw anything\n     * if the rectangle is smaller than a minimum determined by the assets used to draw the shadow\n     * graphics. The size of the shadow is {@link #SHADOW_SIZE}.\n     *\n     * @param image the image to draw the shadow into\n     * @param x the left coordinate of the left hand side of the rectangle\n     * @param y the top coordinate of the top of the rectangle\n     * @param width the width of the rectangle\n     * @param height the height of the rectangle\n     ",
    "links" : [ "#SHADOW_SIZE" ]
  }, {
    "name" : "public static void drawSmallRectangleShadow(BufferedImage image, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Draws a small drop shadow for the given rectangle into the given context. It will not draw\n     * anything if the rectangle is smaller than a minimum determined by the assets used to draw the\n     * shadow graphics. The size of the shadow is {@link #SMALL_SHADOW_SIZE}.\n     *\n     * @param image the image to draw the shadow into\n     * @param x the left coordinate of the left hand side of the rectangle\n     * @param y the top coordinate of the top of the rectangle\n     * @param width the width of the rectangle\n     * @param height the height of the rectangle\n     ",
    "links" : [ "#SMALL_SHADOW_SIZE" ]
  }, {
    "name" : "public static void drawRectangleShadow(Graphics2D gc, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Draws a drop shadow for the given rectangle into the given context. It will not draw anything\n     * if the rectangle is smaller than a minimum determined by the assets used to draw the shadow\n     * graphics.\n     *\n     * @param gc the graphics context to draw into\n     * @param x the left coordinate of the left hand side of the rectangle\n     * @param y the top coordinate of the top of the rectangle\n     * @param width the width of the rectangle\n     * @param height the height of the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void drawSmallRectangleShadow(Graphics2D gc, int x, int y, int width, int height)",
    "returnType" : "void",
    "comment" : "\n     * Draws a small drop shadow for the given rectangle into the given context. It will not draw\n     * anything if the rectangle is smaller than a minimum determined by the assets used to draw the\n     * shadow graphics.\n     * <p/>\n     *\n     * @param gc the graphics context to draw into\n     * @param x the left coordinate of the left hand side of the rectangle\n     * @param y the top coordinate of the top of the rectangle\n     * @param width the width of the rectangle\n     * @param height the height of the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Image loadIcon(String name)",
    "returnType" : "Image",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SHADOW_SIZE", "SMALL_SHADOW_SIZE", "ShadowBottom", "ShadowBottomLeft", "ShadowBottomRight", "ShadowRight", "ShadowTopRight", "ShadowTopLeft", "ShadowLeft", "Shadow2Bottom", "Shadow2BottomLeft", "Shadow2BottomRight", "Shadow2Right", "Shadow2TopRight", "Shadow2TopLeft", "Shadow2Left" ],
  "methodNames" : [ "public static BufferedImage createDropShadow(BufferedImage source, int shadowSize, float alpha)", "public static BufferedImage createDropShadow(BufferedImage source, int shadowSize, float shadowOpacity, int shadowRgb)", "public static BufferedImage createRectangularDropShadow(BufferedImage source)", "public static BufferedImage createSmallRectangularDropShadow(BufferedImage source)", "public static void drawRectangleShadow(BufferedImage image, int x, int y, int width, int height)", "public static void drawSmallRectangleShadow(BufferedImage image, int x, int y, int width, int height)", "public static void drawRectangleShadow(Graphics2D gc, int x, int y, int width, int height)", "public static void drawSmallRectangleShadow(Graphics2D gc, int x, int y, int width, int height)", "private static Image loadIcon(String name)" ]
}