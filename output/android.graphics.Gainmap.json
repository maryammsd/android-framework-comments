{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/Gainmap.java",
  "packageName" : "android.graphics",
  "className" : "Gainmap",
  "comment" : "\n * Gainmap represents a mechanism for augmenting an SDR image to produce an HDR one with variable\n * display adjustment capability. It is a combination of a set of metadata describing how to apply\n * the gainmap, as well as either a 1 (such as {@link android.graphics.Bitmap.Config#ALPHA_8} or 3\n * (such as {@link android.graphics.Bitmap.Config#ARGB_8888} with the alpha channel ignored)\n * channel Bitmap that represents the gainmap data itself.\n * <p>\n * When rendering to an {@link android.content.pm.ActivityInfo#COLOR_MODE_HDR} activity, the\n * hardware accelerated {@link Canvas} will automatically apply the gainmap when sufficient\n * HDR headroom is available.\n *\n * <h3>Gainmap Structure</h3>\n *\n * The logical whole of a gainmap'd image consists of a base Bitmap that represents the original\n * image as would be displayed without gainmap support in addition to a gainmap with a second\n * enhancement image. In the case of a JPEG, the base image would be the typical 8-bit SDR image\n * that the format is commonly associated with. The gainmap image is embedded alongside the base\n * image, often at a lower resolution (such as 1/4th), along with some metadata to describe\n * how to apply the gainmap. The gainmap image itself is then a greyscale image representing\n * the transformation to apply onto the base image to reconstruct an HDR rendition of it.\n * <p>\n * As such these \"gainmap images\" consist of 3 parts - a base {@link Bitmap} with a\n * {@link Bitmap#getGainmap()} that returns an instance of this class which in turn contains\n * the enhancement layer represented as another Bitmap, accessible via {@link #getGainmapContents()}\n *\n * <h3>Applying a gainmap manually</h3>\n *\n * When doing custom rendering such as to an OpenGL ES or Vulkan context, the gainmap is not\n * automatically applied. In such situations, the following steps are appropriate to render the\n * gainmap in combination with the base image.\n * <p>\n * Suppose our display has HDR to SDR ratio of H, and we wish to display an image with gainmap on\n * this display. Let B be the pixel value from the base image in a color space that has the\n * primaries of the base image and a linear transfer function. Let G be the pixel value from the\n * gainmap. Let D be the output pixel in the same color space as B. The value of D is computed\n * as follows:\n * <p>\n * First, let W be a weight parameter determining how much the gainmap will be applied.\n * <pre class=\"prettyprint\">\n *   W = clamp((log(H)                      - log(minDisplayRatioForHdrTransition)) /\n *             (log(displayRatioForFullHdr) - log(minDisplayRatioForHdrTransition), 0, 1)</pre>\n *\n * Next, let L be the gainmap value in log space. We compute this from the value G that was\n * sampled from the texture as follows:\n * <pre class=\"prettyprint\">\n *   L = mix(log(ratioMin), log(ratioMax), pow(G, gamma))</pre>\n * Finally, apply the gainmap to compute D, the displayed pixel. If the base image is SDR then\n * compute:\n * <pre class=\"prettyprint\">\n *   D = (B + epsilonSdr) * exp(L * W) - epsilonHdr</pre>\n * <p>\n * In the above math, log() is a natural logarithm and exp() is natural exponentiation. The base\n * for these functions cancels out and does not affect the result, so other bases may be used\n * if preferred.\n ",
  "links" : [ "#getGainmapContents()", "android.content.pm.ActivityInfo#COLOR_MODE_HDR", "android.graphics.Bitmap", "android.graphics.Bitmap.Config#ALPHA_8", "android.graphics.Canvas", "android.graphics.Bitmap#getGainmap()", "android.graphics.Bitmap.Config#ARGB_8888" ],
  "variables" : [ {
    "name" : "mNativePtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGainmapContents",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Gainmap>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Bitmap getGainmapContents()",
    "returnType" : "Bitmap",
    "comment" : "\n     * @return Returns the image data of the gainmap represented as a Bitmap. This is represented\n     * as a Bitmap for broad API compatibility, however certain aspects of the Bitmap are ignored\n     * such as {@link Bitmap#getColorSpace()} or {@link Bitmap#getGainmap()} as they are not\n     * relevant to the gainmap's enhancement layer.\n     ",
    "links" : [ "android.graphics.Bitmap#getColorSpace()", "android.graphics.Bitmap#getGainmap()" ]
  }, {
    "name" : "public void setGainmapContents(@NonNull Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "\n     * Sets the image data of the gainmap. This is the 1 or 3 channel enhancement layer to apply\n     * to the base image. This is represented as a Bitmap for broad API compatibility, however\n     * certain aspects of the Bitmap are ignored such as {@link Bitmap#getColorSpace()} or\n     * {@link Bitmap#getGainmap()} as they are not relevant to the gainmap's enhancement layer.\n     *\n     * @param bitmap The non-null bitmap to set as the gainmap's contents\n     ",
    "links" : [ "android.graphics.Bitmap#getColorSpace()", "android.graphics.Bitmap#getGainmap()" ]
  }, {
    "name" : "public void setRatioMin(float r, float g, float b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the gainmap ratio min. For single-plane gainmaps, r, g, and b should be the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getRatioMin()",
    "returnType" : "float[]",
    "comment" : "\n     * Gets the gainmap ratio max. For single-plane gainmaps, all 3 components should be the\n     * same. The components are in r, g, b order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRatioMax(float r, float g, float b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the gainmap ratio max. For single-plane gainmaps, r, g, and b should be the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getRatioMax()",
    "returnType" : "float[]",
    "comment" : "\n     * Gets the gainmap ratio max. For single-plane gainmaps, all 3 components should be the\n     * same. The components are in r, g, b order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGamma(float r, float g, float b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the gainmap gamma. For single-plane gainmaps, r, g, and b should be the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getGamma()",
    "returnType" : "float[]",
    "comment" : "\n     * Gets the gainmap gamma. For single-plane gainmaps, all 3 components should be the\n     * same. The components are in r, g, b order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEpsilonSdr(float r, float g, float b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sdr epsilon which is used to avoid numerical instability.\n     * For single-plane gainmaps, r, g, and b should be the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getEpsilonSdr()",
    "returnType" : "float[]",
    "comment" : "\n     * Gets the sdr epsilon. For single-plane gainmaps, all 3 components should be the\n     * same. The components are in r, g, b order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEpsilonHdr(float r, float g, float b)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hdr epsilon which is used to avoid numerical instability.\n     * For single-plane gainmaps, r, g, and b should be the same.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getEpsilonHdr()",
    "returnType" : "float[]",
    "comment" : "\n     * Gets the hdr epsilon. For single-plane gainmaps, all 3 components should be the\n     * same. The components are in r, g, b order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayRatioForFullHdr(@FloatRange(from = 1.0f) float max)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hdr/sdr ratio at which point the gainmap is fully applied.\n     * @param max The hdr/sdr ratio at which the gainmap is fully applied. Must be >= 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getDisplayRatioForFullHdr()",
    "returnType" : "float",
    "comment" : "\n     * Gets the hdr/sdr ratio at which point the gainmap is fully applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinDisplayRatioForHdrTransition(@FloatRange(from = 1.0f) float min)",
    "returnType" : "void",
    "comment" : "\n     * Sets the hdr/sdr ratio below which only the SDR image is displayed.\n     * @param min The minimum hdr/sdr ratio at which to begin applying the gainmap. Must be >= 1.0f\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getMinDisplayRatioForHdrTransition()",
    "returnType" : "float",
    "comment" : "\n     * Gets the hdr/sdr ratio below which only the SDR image is displayed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * No special parcel contents.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write the gainmap to the parcel.\n     *\n     * @param dest Parcel object to write the gainmap data into\n     * @param flags Additional flags about how the object should be written.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateEmpty()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateCopy(long source)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetBitmap(long ptr, Bitmap bitmap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetRatioMin(long ptr, float r, float g, float b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetRatioMin(long ptr, float[] components)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetRatioMax(long ptr, float r, float g, float b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetRatioMax(long ptr, float[] components)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetGamma(long ptr, float r, float g, float b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetGamma(long ptr, float[] components)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetEpsilonSdr(long ptr, float r, float g, float b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetEpsilonSdr(long ptr, float[] components)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetEpsilonHdr(long ptr, float r, float g, float b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nGetEpsilonHdr(long ptr, float[] components)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetDisplayRatioHdr(long ptr, float max)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetDisplayRatioHdr(long ptr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetDisplayRatioSdr(long ptr, float min)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nGetDisplayRatioSdr(long ptr)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nWriteGainmapToParcel(long ptr, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nReadGainmapFromParcel(long ptr, Parcel src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Bitmap getGainmapContents()", "public void setGainmapContents(@NonNull Bitmap bitmap)", "public void setRatioMin(float r, float g, float b)", "public float[] getRatioMin()", "public void setRatioMax(float r, float g, float b)", "public float[] getRatioMax()", "public void setGamma(float r, float g, float b)", "public float[] getGamma()", "public void setEpsilonSdr(float r, float g, float b)", "public float[] getEpsilonSdr()", "public void setEpsilonHdr(float r, float g, float b)", "public float[] getEpsilonHdr()", "public void setDisplayRatioForFullHdr(@FloatRange(from = 1.0f) float max)", "public float getDisplayRatioForFullHdr()", "public void setMinDisplayRatioForHdrTransition(@FloatRange(from = 1.0f) float min)", "public float getMinDisplayRatioForHdrTransition()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private static native long nGetFinalizer()", "private static native long nCreateEmpty()", "private static native long nCreateCopy(long source)", "private static native void nSetBitmap(long ptr, Bitmap bitmap)", "private static native void nSetRatioMin(long ptr, float r, float g, float b)", "private static native void nGetRatioMin(long ptr, float[] components)", "private static native void nSetRatioMax(long ptr, float r, float g, float b)", "private static native void nGetRatioMax(long ptr, float[] components)", "private static native void nSetGamma(long ptr, float r, float g, float b)", "private static native void nGetGamma(long ptr, float[] components)", "private static native void nSetEpsilonSdr(long ptr, float r, float g, float b)", "private static native void nGetEpsilonSdr(long ptr, float[] components)", "private static native void nSetEpsilonHdr(long ptr, float r, float g, float b)", "private static native void nGetEpsilonHdr(long ptr, float[] components)", "private static native void nSetDisplayRatioHdr(long ptr, float max)", "private static native float nGetDisplayRatioHdr(long ptr)", "private static native void nSetDisplayRatioSdr(long ptr, float min)", "private static native float nGetDisplayRatioSdr(long ptr)", "private static native void nWriteGainmapToParcel(long ptr, Parcel dest)", "private static native void nReadGainmapFromParcel(long ptr, Parcel src)" ],
  "variableNames" : [ "mNativePtr", "mGainmapContents", "CREATOR" ]
}