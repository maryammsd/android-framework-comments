{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/ScanSettings.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : " Builder for {@link ScanSettings}. ",
  "links" : [ "android.bluetooth.le.ScanSettings" ],
  "variables" : [ {
    "name" : "mScanMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanResultType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReportDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumOfMatchesPerFilter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLegacy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setScanMode(int scanMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set scan mode for Bluetooth LE scan.\n         *\n         * @param scanMode The scan mode can be one of {@link ScanSettings#SCAN_MODE_LOW_POWER},\n         *     {@link ScanSettings#SCAN_MODE_BALANCED} or {@link\n         *     ScanSettings#SCAN_MODE_LOW_LATENCY}.\n         * @throws IllegalArgumentException If the {@code scanMode} is invalid.\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings#SCAN_MODE_LOW_POWER", "android.bluetooth.le.ScanSettings#SCAN_MODE_BALANCED", "android.bluetooth.le.ScanSettings#SCAN_MODE_LOW_LATENCY" ]
  }, {
    "name" : "public Builder setCallbackType(int callbackType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set callback type for Bluetooth LE scan.\n         *\n         * @param callbackType The callback type flags for the scan.\n         * @throws IllegalArgumentException If the {@code callbackType} is invalid.\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidCallbackType(int callbackType)",
    "returnType" : "boolean",
    "comment" : " Returns true if the callbackType is valid.",
    "links" : [ ]
  }, {
    "name" : "public Builder setScanResultType(int scanResultType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set scan result type for Bluetooth LE scan.\n         *\n         * @param scanResultType Type for scan result, could be either {@link\n         *     ScanSettings#SCAN_RESULT_TYPE_FULL} or {@link\n         *     ScanSettings#SCAN_RESULT_TYPE_ABBREVIATED}.\n         * @throws IllegalArgumentException If the {@code scanResultType} is invalid.\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings#SCAN_RESULT_TYPE_ABBREVIATED", "android.bluetooth.le.ScanSettings#SCAN_RESULT_TYPE_FULL" ]
  }, {
    "name" : "public Builder setReportDelay(long reportDelayMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set report delay timestamp for Bluetooth LE scan. If set to 0, you will be notified of\n         * scan results immediately. If &gt; 0, scan results are queued up and delivered after the\n         * requested delay or 5000 milliseconds (whichever is higher). Note scan results may be\n         * delivered sooner if the internal buffers fill up.\n         *\n         * @param reportDelayMillis how frequently scan results should be delivered in milliseconds\n         * @throws IllegalArgumentException if {@code reportDelayMillis} &lt; 0\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNumOfMatches(int numOfMatches)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the number of matches for Bluetooth LE scan filters hardware match.\n         *\n         * @param numOfMatches The num of matches can be one of {@link\n         *     ScanSettings#MATCH_NUM_ONE_ADVERTISEMENT} or {@link\n         *     ScanSettings#MATCH_NUM_FEW_ADVERTISEMENT} or {@link\n         *     ScanSettings#MATCH_NUM_MAX_ADVERTISEMENT}\n         * @throws IllegalArgumentException If the {@code matchMode} is invalid.\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings#MATCH_NUM_FEW_ADVERTISEMENT", "android.bluetooth.le.ScanSettings#MATCH_NUM_MAX_ADVERTISEMENT", "android.bluetooth.le.ScanSettings#MATCH_NUM_ONE_ADVERTISEMENT" ]
  }, {
    "name" : "public Builder setMatchMode(int matchMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Set match mode for Bluetooth LE scan filters hardware match.\n         *\n         * @param matchMode The match mode can be one of {@link ScanSettings#MATCH_MODE_AGGRESSIVE}\n         *     or {@link ScanSettings#MATCH_MODE_STICKY}\n         * @throws IllegalArgumentException If the {@code matchMode} is invalid.\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings#MATCH_MODE_AGGRESSIVE", "android.bluetooth.le.ScanSettings#MATCH_MODE_STICKY" ]
  }, {
    "name" : "public Builder setLegacy(boolean legacy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether only legacy advertisements should be returned in scan results. Legacy\n         * advertisements include advertisements as specified by the Bluetooth core specification\n         * 4.2 and below. This is true by default for compatibility with older apps.\n         *\n         * @param legacy true if only legacy advertisements will be returned\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPhy(int phy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the Physical Layer to use during this scan. This is used only if {@link\n         * ScanSettings.Builder#setLegacy} is set to false. {@link\n         * android.bluetooth.BluetoothAdapter#isLeCodedPhySupported} may be used to check whether LE\n         * Coded phy is supported by calling {@link\n         * android.bluetooth.BluetoothAdapter#isLeCodedPhySupported}. Selecting an unsupported phy\n         * will result in failure to start scan.\n         *\n         * @param phy Can be one of {@link BluetoothDevice#PHY_LE_1M}, {@link\n         *     BluetoothDevice#PHY_LE_CODED} or {@link ScanSettings#PHY_LE_ALL_SUPPORTED}\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings#PHY_LE_ALL_SUPPORTED", "ScanSettings.Builder#setLegacy", "android.bluetooth.BluetoothAdapter#isLeCodedPhySupported", "android.bluetooth.BluetoothDevice#PHY_LE_CODED", "android.bluetooth.BluetoothDevice#PHY_LE_1M" ]
  }, {
    "name" : "public ScanSettings build()",
    "returnType" : "ScanSettings",
    "comment" : "\n         * Build {@link ScanSettings}.\n         *\n         * @throws IllegalArgumentException if the settings cannot be built.\n         ",
    "links" : [ "android.bluetooth.le.ScanSettings" ]
  } ],
  "methodNames" : [ "public Builder setScanMode(int scanMode)", "public Builder setCallbackType(int callbackType)", "private boolean isValidCallbackType(int callbackType)", "public Builder setScanResultType(int scanResultType)", "public Builder setReportDelay(long reportDelayMillis)", "public Builder setNumOfMatches(int numOfMatches)", "public Builder setMatchMode(int matchMode)", "public Builder setLegacy(boolean legacy)", "public Builder setPhy(int phy)", "public ScanSettings build()" ],
  "variableNames" : [ "mScanMode", "mCallbackType", "mScanResultType", "mReportDelayMillis", "mMatchMode", "mNumOfMatchesPerFilter", "mLegacy", "mPhy" ]
}