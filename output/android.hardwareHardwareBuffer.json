{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/HardwareBuffer.java",
  "packageName" : "android.hardware",
  "className" : "HardwareBuffer",
  "comment" : "\n * HardwareBuffer wraps a native <code>AHardwareBuffer</code> object, which is a low-level object\n * representing a memory buffer accessible by various hardware units. HardwareBuffer allows sharing\n * buffers across different application processes. In particular, HardwareBuffers may be mappable\n * to memory accessibly to various hardware systems, such as the GPU, a sensor or context hub, or\n * other auxiliary processing units.\n *\n * For more information, see the NDK documentation for <code>AHardwareBuffer</code>.\n ",
  "variables" : [ {
    "name" : "RGBA_8888",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RGBX_8888",
    "type" : "int",
    "comment" : " Format: 8 bits each red, green, blue, alpha, alpha is always 0xFF ",
    "links" : [ ]
  }, {
    "name" : "RGB_888",
    "type" : "int",
    "comment" : " Format: 8 bits each red, green, blue, no alpha ",
    "links" : [ ]
  }, {
    "name" : "RGB_565",
    "type" : "int",
    "comment" : " Format: 5 bits each red and blue, 6 bits green, no alpha ",
    "links" : [ ]
  }, {
    "name" : "RGBA_FP16",
    "type" : "int",
    "comment" : " Format: 16 bits each red, green, blue, alpha ",
    "links" : [ ]
  }, {
    "name" : "RGBA_1010102",
    "type" : "int",
    "comment" : " Format: 10 bits each red, green, blue, 2 bits alpha ",
    "links" : [ ]
  }, {
    "name" : "BLOB",
    "type" : "int",
    "comment" : " Format: opaque format used for raw data transfer; must have a height of 1 ",
    "links" : [ ]
  }, {
    "name" : "YCBCR_420_888",
    "type" : "int",
    "comment" : " Format: Planar YCbCr 420; must have an even width and height ",
    "links" : [ ]
  }, {
    "name" : "D_16",
    "type" : "int",
    "comment" : " Format: 16 bits depth ",
    "links" : [ ]
  }, {
    "name" : "D_24",
    "type" : "int",
    "comment" : " Format: 24 bits depth ",
    "links" : [ ]
  }, {
    "name" : "DS_24UI8",
    "type" : "int",
    "comment" : " Format: 24 bits depth, 8 bits stencil ",
    "links" : [ ]
  }, {
    "name" : "D_FP32",
    "type" : "int",
    "comment" : " Format: 32 bits depth ",
    "links" : [ ]
  }, {
    "name" : "DS_FP32UI8",
    "type" : "int",
    "comment" : " Format: 32 bits depth, 8 bits stencil ",
    "links" : [ ]
  }, {
    "name" : "S_UI8",
    "type" : "int",
    "comment" : " Format: 8 bits stencil ",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : " Note: do not rename, this field is used by native code",
    "links" : [ ]
  }, {
    "name" : "mCleaner",
    "type" : "Runnable",
    "comment" : " Invoked on destruction",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_CPU_READ_RARELY",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USAGE_CPU_READ_OFTEN",
    "type" : "long",
    "comment" : " Usage: The buffer will often be read by the CPU ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CPU_WRITE_RARELY",
    "type" : "long",
    "comment" : " Usage: The buffer will sometimes be written to by the CPU ",
    "links" : [ ]
  }, {
    "name" : "USAGE_CPU_WRITE_OFTEN",
    "type" : "long",
    "comment" : " Usage: The buffer will often be written to by the CPU ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GPU_SAMPLED_IMAGE",
    "type" : "long",
    "comment" : " Usage: The buffer will be read from by the GPU ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GPU_COLOR_OUTPUT",
    "type" : "long",
    "comment" : " Usage: The buffer will be written to by the GPU ",
    "links" : [ ]
  }, {
    "name" : "USAGE_PROTECTED_CONTENT",
    "type" : "long",
    "comment" : " Usage: The buffer must not be used outside of a protected hardware path ",
    "links" : [ ]
  }, {
    "name" : "USAGE_VIDEO_ENCODE",
    "type" : "long",
    "comment" : " Usage: The buffer will be read by a hardware video encoder ",
    "links" : [ ]
  }, {
    "name" : "USAGE_SENSOR_DIRECT_DATA",
    "type" : "long",
    "comment" : " Usage: The buffer will be used for sensor direct data ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GPU_DATA_BUFFER",
    "type" : "long",
    "comment" : " Usage: The buffer will be used as a shader storage or uniform buffer object ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GPU_CUBE_MAP",
    "type" : "long",
    "comment" : " Usage: The buffer will be used as a cube map texture ",
    "links" : [ ]
  }, {
    "name" : "USAGE_GPU_MIPMAP_COMPLETE",
    "type" : "long",
    "comment" : " Usage: The buffer contains a complete mipmap hierarchy ",
    "links" : [ ]
  }, {
    "name" : "NATIVE_HARDWARE_BUFFER_SIZE",
    "type" : "long",
    "comment" : " The approximate size of a native AHardwareBuffer object.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<HardwareBuffer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static HardwareBuffer create(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @Format int format, @IntRange(from = 1) int layers, @Usage long usage)",
    "returnType" : "HardwareBuffer",
    "comment" : "\n     * Creates a new <code>HardwareBuffer</code> instance.\n     *\n     * <p>Calling this method will throw an <code>IllegalStateException</code> if\n     * format is not a supported Format type.</p>\n     *\n     * @param width The width in pixels of the buffer\n     * @param height The height in pixels of the buffer\n     * @param format The @Format of each pixel\n     * @param layers The number of layers in the buffer\n     * @param usage The @Usage flags describing how the buffer will be used\n     * @return A <code>HardwareBuffer</code> instance if successful, or throws an\n     *     IllegalArgumentException if the dimensions passed are invalid (either zero, negative, or\n     *     too large to allocate), if the format is not supported, if the requested number of layers\n     *     is less than one or not supported, or if the passed usage flags are not a supported set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSupported(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @Format int format, @IntRange(from = 1) int layers, @Usage long usage)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether the given buffer description is supported by the system. If this returns\n     * true, then the allocation may succeed until resource exhaustion occurs. If this returns\n     * false then this combination will never succeed.\n     *\n     * @param width The width in pixels of the buffer\n     * @param height The height in pixels of the buffer\n     * @param format The @Format of each pixel\n     * @param layers The number of layers in the buffer\n     * @param usage The @Usage flags describing how the buffer will be used\n     * @return True if the combination is supported, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static HardwareBuffer createFromGraphicBuffer(@NonNull GraphicBuffer graphicBuffer)",
    "returnType" : "HardwareBuffer",
    "comment" : "\n     * @hide\n     * Returns a <code>HardwareBuffer</code> instance from <code>GraphicBuffer</code>\n     *\n     * @param graphicBuffer A GraphicBuffer to be wrapped as HardwareBuffer\n     * @return A <code>HardwareBuffer</code> instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of this buffer in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the height of this buffer in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFormat()",
    "returnType" : "int",
    "comment" : "\n     * Returns the @Format of this buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayers()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of layers in this buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsage()",
    "returnType" : "long",
    "comment" : "\n     * Returns the usage flags of the usage hints set on this buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Destroys this buffer immediately. Calling this method frees up any\n     * underlying native resources. After calling this method, this buffer\n     * must not be used in any way.\n     *\n     * @see #isClosed()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this buffer has been closed. A closed buffer cannot\n     * be used in any way: the buffer cannot be written to a parcel, etc.\n     *\n     * @return True if this <code>HardwareBuffer</code> is in a closed state,\n     *         false otherwise.\n     *\n     * @see #close()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object in to a Parcel.\n     *\n     * <p>Calling this method will throw an <code>IllegalStateException</code> if\n     * {@link #close()} has been previously called.</p>\n     *\n     * @param dest The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *              May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "#close", "#PARCELABLE_WRITE_RETURN_VALUE" ]
  }, {
    "name" : "private static boolean isSupportedFormat(@Format int format)",
    "returnType" : "boolean",
    "comment" : "\n     * Validates whether a particular format is supported by HardwareBuffer.\n     *\n     * @param format The format to validate.\n     *\n     * @return True if <code>format</code> is a supported format. false otherwise.\n     * See {@link #create(int, int, int, int, long)}.\n     ",
    "links" : [ "#create" ]
  }, {
    "name" : "private static native long nCreateHardwareBuffer(int width, int height, int format, int layers, long usage)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateFromGraphicBuffer(GraphicBuffer graphicBuffer)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nWriteHardwareBufferToParcel(long nativeObject, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nReadHardwareBufferFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetWidth(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetHeight(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetFormat(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetLayers(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetUsage(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsSupported(int width, int height, int format, int layers, long usage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "RGBA_8888", "RGBX_8888", "RGB_888", "RGB_565", "RGBA_FP16", "RGBA_1010102", "BLOB", "YCBCR_420_888", "D_16", "D_24", "DS_24UI8", "D_FP32", "DS_FP32UI8", "S_UI8", "mNativeObject", "mCleaner", "mCloseGuard", "USAGE_CPU_READ_RARELY", "USAGE_CPU_READ_OFTEN", "USAGE_CPU_WRITE_RARELY", "USAGE_CPU_WRITE_OFTEN", "USAGE_GPU_SAMPLED_IMAGE", "USAGE_GPU_COLOR_OUTPUT", "USAGE_PROTECTED_CONTENT", "USAGE_VIDEO_ENCODE", "USAGE_SENSOR_DIRECT_DATA", "USAGE_GPU_DATA_BUFFER", "USAGE_GPU_CUBE_MAP", "USAGE_GPU_MIPMAP_COMPLETE", "NATIVE_HARDWARE_BUFFER_SIZE", "CREATOR" ],
  "methodNames" : [ "public static HardwareBuffer create(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @Format int format, @IntRange(from = 1) int layers, @Usage long usage)", "public static boolean isSupported(@IntRange(from = 1) int width, @IntRange(from = 1) int height, @Format int format, @IntRange(from = 1) int layers, @Usage long usage)", "public static HardwareBuffer createFromGraphicBuffer(@NonNull GraphicBuffer graphicBuffer)", "protected void finalize() throws Throwable", "public int getWidth()", "public int getHeight()", "public int getFormat()", "public int getLayers()", "public long getUsage()", "public void close()", "public boolean isClosed()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "private static boolean isSupportedFormat(@Format int format)", "private static native long nCreateHardwareBuffer(int width, int height, int format, int layers, long usage)", "private static native long nCreateFromGraphicBuffer(GraphicBuffer graphicBuffer)", "private static native long nGetNativeFinalizer()", "private static native void nWriteHardwareBufferToParcel(long nativeObject, Parcel dest)", "private static native long nReadHardwareBufferFromParcel(Parcel in)", "private static native int nGetWidth(long nativeObject)", "private static native int nGetHeight(long nativeObject)", "private static native int nGetFormat(long nativeObject)", "private static native int nGetLayers(long nativeObject)", "private static native long nGetUsage(long nativeObject)", "private static native boolean nIsSupported(int width, int height, int format, int layers, long usage)" ]
}