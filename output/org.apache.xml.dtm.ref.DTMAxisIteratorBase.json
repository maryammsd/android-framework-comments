{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMAxisIteratorBase.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMAxisIteratorBase",
  "comment" : "\n * This class serves as a default base for implementations of mutable\n * DTMAxisIterators.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "_last",
    "type" : "int",
    "comment" : " The position of the last node within the iteration, as defined by XPath.\n   * Note that this is _not_ the node's handle within the DTM. Also, don't\n   * confuse it with the current (most recently returned) position.\n   ",
    "links" : [ ]
  }, {
    "name" : "_position",
    "type" : "int",
    "comment" : " The position of the current node within the iteration, as defined by XPath.\n   * Note that this is _not_ the node's handle within the DTM!\n   ",
    "links" : [ ]
  }, {
    "name" : "_markedNode",
    "type" : "int",
    "comment" : " The position of the marked node within the iteration;\n   * a saved itaration state that we may want to come back to.\n   * Note that only one mark is maintained; there is no stack.\n   ",
    "links" : [ ]
  }, {
    "name" : "_startNode",
    "type" : "int",
    "comment" : " The handle to the start, or root, of the iteration.\n   * Set this to END to construct an empty iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "_includeSelf",
    "type" : "boolean",
    "comment" : " True if the start node should be considered part of the iteration.\n   * False will cause it to be skipped.\n   ",
    "links" : [ ]
  }, {
    "name" : "_isRestartable",
    "type" : "boolean",
    "comment" : " True if this iteration can be restarted. False otherwise (eg, if\n   * we are iterating over a stream that can not be re-scanned, or if\n   * the iterator was produced by cloning another iterator.)\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getStartNode()",
    "returnType" : "int",
    "comment" : "\n   * Get start to END should 'close' the iterator,\n   * i.e. subsequent call to next() should return END.\n   *\n   * @return The root node of the iteration.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator reset()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n   * @return A DTMAxisIterator which has been reset to the start node,\n   * which may or may not be the same as this iterator.\n   * ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator includeSelf()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n   * Set the flag to include the start node in the iteration. \n   *\n   *\n   * @return This default method returns just returns this DTMAxisIterator,\n   * after setting the flag.\n   * (Returning \"this\" permits C++-style chaining of\n   * method calls into a single expression.)\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLast()",
    "returnType" : "int",
    "comment" : " Returns the position of the last node within the iteration, as\n   * defined by XPath.  In a forward iterator, I believe this equals the number of nodes which this\n   * iterator will yield. In a reverse iterator, I believe it should return\n   * 1 (since the \"last\" is the first produced.)\n   *\n   * This may be an expensive operation when called the first time, since\n   * it may have to iterate through a large part of the document to produce\n   * its answer.\n   *\n   * @return The number of nodes in this iterator (forward) or 1 (reverse).\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPosition()",
    "returnType" : "int",
    "comment" : "\n   * @return The position of the current node within the set, as defined by\n   * XPath. Note that this is one-based, not zero-based.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReverse()",
    "returnType" : "boolean",
    "comment" : "\n   * @return true if this iterator has a reversed axis, else false\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMAxisIterator cloneIterator()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n   * Returns a deep copy of this iterator. Cloned iterators may not be\n   * restartable. The iterator being cloned may or may not become\n   * non-restartable as a side effect of this operation.\n   *\n   * @return a deep copy of this iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final int returnNode(final int node)",
    "returnType" : "int",
    "comment" : "\n   * Do any final cleanup that is required before returning the node that was\n   * passed in, and then return it. The intended use is\n   * <br />\n   * <code>return returnNode(node);</code>\n   *\n   * %REVIEW% If we're calling it purely for side effects, should we really\n   * be bothering with a return value? Something like\n   * <br />\n   * <code> accept(node); return node; </code>\n   * <br />\n   * would probably optimize just about as well and avoid questions\n   * about whether what's returned could ever be different from what's\n   * passed in.\n   *\n   * @param node Node handle which iteration is about to yield.\n   *\n   * @return The node handle passed in.  ",
    "links" : [ ]
  }, {
    "name" : "protected final DTMAxisIterator resetPosition()",
    "returnType" : "DTMAxisIterator",
    "comment" : "\n   * Reset the position to zero. NOTE that this does not change the iteration\n   * state, only the position number associated with that state.\n   *\n   * %REVIEW% Document when this would be used?\n   *\n   * @return This instance.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRestartable(boolean isRestartable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNodeByPosition(int position)",
    "returnType" : "int",
    "comment" : "\n   * Return the node at the given position.\n   * \n   * @param position The position\n   * @return The node at the given position.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getStartNode()", "public DTMAxisIterator reset()", "public DTMAxisIterator includeSelf()", "public int getLast()", "public int getPosition()", "public boolean isReverse()", "public DTMAxisIterator cloneIterator()", "protected final int returnNode(final int node)", "protected final DTMAxisIterator resetPosition()", "public boolean isDocOrdered()", "public int getAxis()", "public void setRestartable(boolean isRestartable)", "public int getNodeByPosition(int position)" ],
  "variableNames" : [ "_last", "_position", "_markedNode", "_startNode", "_includeSelf", "_isRestartable" ]
}