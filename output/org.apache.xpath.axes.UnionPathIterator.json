{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/UnionPathIterator.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "UnionPathIterator",
  "comment" : "\n * This class extends NodeSetDTM, which implements DTMIterator,\n * and fetches nodes one at a time in document order based on a XPath\n * <a href=\"http://www.w3.org/TR/xpath#NT-UnionExpr\">UnionExpr</a>.\n * As each node is iterated via nextNode(), the node is also stored\n * in the NodeVector, so that previousNode() can easily be done.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_exprs",
    "type" : "LocPathIterator[]",
    "comment" : "\n   * The location path iterators, one for each\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath\">location\n   * path</a> contained in the union expression.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_iterators",
    "type" : "DTMIterator[]",
    "comment" : "\n   * The location path iterators, one for each\n   * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath\">location\n   * path</a> contained in the union expression.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression \n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this \n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void addIterator(DTMIterator expr)",
    "returnType" : "void",
    "comment" : "\n   * Add an iterator to the union list.\n   *\n   * @param expr non-null reference to a location path iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   *  Detaches the iterator from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state. After<code>detach</code> has been invoked, calls to\n   * <code>nextNode</code> or<code>previousNode</code> will raise the\n   * exception INVALID_STATE_ERR.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static LocPathIterator createUnionIterator(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException",
    "returnType" : "LocPathIterator",
    "comment" : "\n   * This will return an iterator capable of handling the union of paths given.\n   * \n   * @param compiler The Compiler which is creating \n   * this expression.\n   * @param opPos The position of this iterator in the \n   * opcode list from the compiler.\n   * \n   * @return Object that is derived from LocPathIterator.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Read the object from a serialization stream.\n   *\n   * @param stream Input stream to read from\n   *\n   * @throws java.io.IOException\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Get a cloned LocPathIterator that holds the same \n   * position as this iterator.\n   *\n   * @return A clone of this iterator that holds the same node position.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected LocPathIterator createDTMIterator(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException",
    "returnType" : "LocPathIterator",
    "comment" : "\n   * Create a new location path iterator.\n   *\n   * @param compiler The Compiler which is creating \n   * this expression.\n   * @param opPos The position of this iterator in the \n   *\n   * @return New location path iterator.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void loadLocationPaths(Compiler compiler, int opPos, int count) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Initialize the location path iterators.  Recursive.\n   *\n   * @param compiler The Compiler which is creating \n   * this expression.\n   * @param opPos The position of this iterator in the \n   * opcode list from the compiler.\n   * @param count The insert position of the iterator.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the next node in the set and advances the position of the\n   * iterator in the set. After a DTMIterator is created, the first call\n   * to nextNode() returns the first node in the set.\n   * @return  The next <code>Node</code> in the set being iterated over, or\n   *   <code>null</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n     * @see Expression#deepEquals(Expression)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setRoot(int context, Object environment)", "public void addIterator(DTMIterator expr)", "public void detach()", "public static LocPathIterator createUnionIterator(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException", "public int getAnalysisBits()", "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException", "public Object clone() throws CloneNotSupportedException", "protected LocPathIterator createDTMIterator(Compiler compiler, int opPos) throws javax.xml.transform.TransformerException", "protected void loadLocationPaths(Compiler compiler, int opPos, int count) throws javax.xml.transform.TransformerException", "public int nextNode()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public int getAxis()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_exprs", "m_iterators" ]
}