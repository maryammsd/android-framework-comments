{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/DelegatedAdminReceiver.java",
  "packageName" : "android.app.admin",
  "className" : "DelegatedAdminReceiver",
  "comment" : "\n * Base class for delegated apps to handle callbacks related to their delegated capabilities.\n *\n * <p>Delegated apps are apps that receive additional capabilities from the profile owner or\n * device owner apps. Some of these capabilities involve the framework calling into the apps.\n * To receive these callbacks, delegated apps should subclass this class and override the\n * appropriate methods here. The subclassed receiver needs to be published in the app's\n * manifest, with appropriate intent filters to mark which callbacks the receiver is interested\n * in. An app can have multiple receivers as long as they listen for disjoint set of callbacks.\n * For the manifest definitions, it must be protected by the\n * {@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission to ensure only\n * the system can trigger these callbacks.\n *\n * <p>The callback methods happen on the main thread of the process.  Thus long running\n * operations must be done on another thread.  Note that because a receiver\n * is done once returning from its onReceive function, such long-running operations\n * should probably be done in a {@link Service}.\n *\n * @see DevicePolicyManager#setDelegatedScopes\n * @see DeviceAdminReceiver\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String onChoosePrivateKeyAlias(@NonNull Context context, @NonNull Intent intent, int uid, @Nullable Uri uri, @Nullable String alias)",
    "returnType" : "String",
    "comment" : "\n     * Allows this receiver to select the alias for a private key and certificate pair for\n     * authentication.  If this method returns null, the default {@link android.app.Activity} will\n     * be shown that lets the user pick a private key and certificate pair.\n     * If this method returns {@link KeyChain#KEY_ALIAS_SELECTION_DENIED},\n     * the default {@link android.app.Activity} will not be shown and the user will not be allowed\n     * to pick anything. And the app, that called {@link KeyChain#choosePrivateKeyAlias}, will\n     * receive {@code null} back.\n     *\n     * <p> This callback is only applicable if the delegated app has\n     * {@link DevicePolicyManager#DELEGATION_CERT_SELECTION} capability. Additionally, it must\n     * declare an intent filter for {@link DeviceAdminReceiver#ACTION_CHOOSE_PRIVATE_KEY_ALIAS}\n     * in the receiver's manifest in order to receive this callback. The default implementation\n     * simply throws {@link UnsupportedOperationException}.\n     *\n     * @param context The running context as per {@link #onReceive}.\n     * @param intent The received intent as per {@link #onReceive}.\n     * @param uid The uid of the app asking for the private key and certificate pair.\n     * @param uri The URI to authenticate, may be null.\n     * @param alias The alias preselected by the client, or null.\n     * @return The private key alias to return and grant access to.\n     * @see KeyChain#choosePrivateKeyAlias\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver#ACTION_CHOOSE_PRIVATE_KEY_ALIAS", "#onReceive", "android.security.KeyChain#KEY_ALIAS_SELECTION_DENIED", "android.security.KeyChain#choosePrivateKeyAlias", "android.app.Activity", "android.app.admin.DevicePolicyManager#DELEGATION_CERT_SELECTION", "UnsupportedOperationException" ]
  }, {
    "name" : "public void onNetworkLogsAvailable(@NonNull Context context, @NonNull Intent intent, long batchToken, @IntRange(from = 1) int networkLogsCount)",
    "returnType" : "void",
    "comment" : "\n     * Called each time a new batch of network logs can be retrieved. This callback method will only\n     * ever be called when network logging is enabled. The logs can only be retrieved while network\n     * logging is enabled.\n     *\n     * <p>If a secondary user or profile is created, this callback won't be received until all users\n     * become affiliated again (even if network logging is enabled). It will also no longer be\n     * possible to retrieve the network logs batch with the most recent {@code batchToken} provided\n     * by this callback. See {@link DevicePolicyManager#setAffiliationIds}.\n     *\n     * <p> This callback is only applicable if the delegated app has\n     * {@link DevicePolicyManager#DELEGATION_NETWORK_LOGGING} capability. Additionally, it must\n     * declare an intent filter for {@link DeviceAdminReceiver#ACTION_NETWORK_LOGS_AVAILABLE} in the\n     * receiver's manifest in order to receive this callback. The default implementation\n     * simply throws {@link UnsupportedOperationException}.\n     *\n     * @param context The running context as per {@link #onReceive}.\n     * @param intent The received intent as per {@link #onReceive}.\n     * @param batchToken The token representing the current batch of network logs.\n     * @param networkLogsCount The total count of events in the current batch of network logs.\n     * @see DevicePolicyManager#retrieveNetworkLogs\n     ",
    "links" : [ "android.app.admin.DeviceAdminReceiver#ACTION_NETWORK_LOGS_AVAILABLE", "#onReceive", "android.app.admin.DevicePolicyManager#setAffiliationIds", "android.app.admin.DevicePolicyManager#DELEGATION_NETWORK_LOGGING", "UnsupportedOperationException" ]
  }, {
    "name" : "public final void onReceive(@NonNull Context context, @NonNull Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Intercept delegated device administrator broadcasts. Implementations should not override\n     * this method; implement the convenience callbacks for each action instead.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG" ],
  "methodNames" : [ "public String onChoosePrivateKeyAlias(@NonNull Context context, @NonNull Intent intent, int uid, @Nullable Uri uri, @Nullable String alias)", "public void onNetworkLogsAvailable(@NonNull Context context, @NonNull Intent intent, long batchToken, @IntRange(from = 1) int networkLogsCount)", "public final void onReceive(@NonNull Context context, @NonNull Intent intent)" ]
}