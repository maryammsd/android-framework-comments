{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/OffsetMapping.java",
  "packageName" : "android.text.method",
  "className" : "OffsetMapping",
  "comment" : "\n * The interface for the index mapping information of a transformed text returned by\n * {@link TransformationMethod}. This class is mainly used to support the\n * {@link TransformationMethod} that alters the text length.\n * @hide\n ",
  "links" : [ "android.text.method.TransformationMethod" ],
  "variables" : [ {
    "name" : "MAP_STRATEGY_CHARACTER",
    "type" : "int",
    "comment" : "\n     * The mapping strategy for a character offset.\n     *\n     * @see #originalToTransformed(int, int)\n     * @see #transformedToOriginal(int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MAP_STRATEGY_CURSOR",
    "type" : "int",
    "comment" : "\n     * The mapping strategy for a cursor position.\n     *\n     * @see #originalToTransformed(int, int)\n     * @see #transformedToOriginal(int, int)\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int originalToTransformed(int offset, @MapStrategy int strategy)",
    "returnType" : "int",
    "comment" : "\n     * Map an offset at original text to the offset at transformed text. <br/>\n     *\n     * This function must be a monotonically non-decreasing function. In other words, if the offset\n     * advances at the original text, the offset at the transformed text must advance or stay there.\n     * <br/>\n     *\n     * Depending on the mapping strategy, a same offset can be mapped differently. For example,\n     * <pre>\n     * Original:       ABCDE\n     * Transformed:    ABCXDE ('X' is introduced due to the transformation.)\n     * </pre>\n     * Let's check the offset 3, which is the offset of the character 'D'.\n     * If we want to map the character offset 3, it should be mapped to index 4.\n     * If we want to map the cursor offset 3 (the offset of the character before which the cursor is\n     * placed), it's unclear if the mapped cursor is before 'X' or after 'X'.\n     * This depends on how the transformed text reacts an insertion at offset 3 in the original\n     * text. Assume character 'V' is insert at offset 3 in the original text, and the original text\n     * become \"ABCVDE\". The transformed text can be:\n     * <pre>\n     * 1) \"ABCVXDE\"\n     * or\n     * 2) \"ABCXVDE\"\n     * </pre>\n     * In the first case, the offset 3 should be mapped to 3 (before 'X'). And in the second case,\n     * the offset should be mapped to 4 (after 'X').<br/>\n     *\n     * In some cases, a character offset at the original text doesn't have a proper corresponding\n     * offset at the transformed text. For example:\n     * <pre>\n     * Original:    ABCDE\n     * Transformed: ABDE ('C' is deleted due to the transformation.)\n     * </pre>\n     * The character offset 2 can be mapped either to offset 2 or 3, but neither is meaningful. For\n     * convenience, it MUST map to the next offset (offset 3 in this case), or the\n     * transformedText.length() if there is no valid character to map.\n     * This is mandatory when the map strategy is {@link #MAP_STRATEGY_CHARACTER}, but doesn't\n     * apply for other map strategies.\n     *\n     * @param offset the offset at the original text. It's normally equal to or less than the\n     *               originalText.length(). When {@link #MAP_STRATEGY_CHARACTER} is passed, it must\n     *               be less than originalText.length(). For convenience, it's also allowed to be\n     *               negative, which represents an invalid offset. When the given offset is\n     *               negative, this method should return it as it is.\n     * @param strategy the mapping strategy. Depending on its value, the same offset can be mapped\n     *                 differently.\n     * @return the mapped offset at the transformed text, must be equal to or less than the\n     * transformedText.length().\n     *\n     * @see #transformedToOriginal(int, int)\n     ",
    "links" : [ "#MAP_STRATEGY_CHARACTER" ]
  }, {
    "name" : " int transformedToOriginal(int offset, @MapStrategy int strategy)",
    "returnType" : "int",
    "comment" : "\n     * Map an offset at transformed text to the offset at original text. This is the reverse method\n     * of {@link #originalToTransformed(int, int)}. <br/>\n     * This function must be a monotonically non-decreasing function. In other words, if the offset\n     * advances at the original text, the offset at the transformed text must advance or stay there.\n     * <br/>\n     * Similar to the {@link #originalToTransformed(int, int)} if a character offset doesn't have a\n     * corresponding offset at the transformed text, it MUST return the value as the previous\n     * offset. This is mandatory when the map strategy is {@link #MAP_STRATEGY_CHARACTER},\n     * but doesn't apply for other map strategies.\n     *\n     * @param offset the offset at the transformed text. It's normally equal to or less than the\n     *               transformedText.length(). When {@link #MAP_STRATEGY_CHARACTER} is passed, it\n     *               must be less than transformedText.length(). For convenience, it's also allowed\n     *               to be negative, which represents an invalid offset. When the given offset is\n     *               negative, this method should return it as it is.\n     * @param strategy the mapping strategy. Depending on its value, the same offset can be mapped\n     *                 differently.\n     * @return the mapped offset at the original text, must be equal to or less than the\n     * original.length().\n     *\n     * @see #originalToTransformed(int, int)\n     ",
    "links" : [ "#originalToTransformed(int", "#MAP_STRATEGY_CHARACTER" ]
  }, {
    "name" : " void originalToTransformed(TextUpdate textUpdate)",
    "returnType" : "void",
    "comment" : "\n     * Map a text update in the original text to an update the transformed text.\n     * This method used to determine how the transformed text is updated in response to an\n     * update in the original text. It is always called before the original text being changed.\n     *\n     * The main usage of this method is to update text layout incrementally. So it should report\n     * the range where text needs to be laid out again.\n     *\n     * @param textUpdate the {@link TextUpdate} object containing the text  update information on\n     *                  the original text. The transformed text update information will also be\n     *                   stored at this object.\n     ",
    "links" : [ "TextUpdate" ]
  } ],
  "methodNames" : [ " int originalToTransformed(int offset, @MapStrategy int strategy)", " int transformedToOriginal(int offset, @MapStrategy int strategy)", " void originalToTransformed(TextUpdate textUpdate)" ],
  "variableNames" : [ "MAP_STRATEGY_CHARACTER", "MAP_STRATEGY_CURSOR" ]
}