{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/search/SearchUiService.java",
  "packageName" : "android.service.search",
  "className" : "SearchUiService",
  "comment" : "\n * A service used to share the lifecycle of search UI (open, close, interaction)\n * and also to return search result on a query.\n *\n * To understand the lifecycle of search session and how a query get issued,\n * {@see SearchSession}\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     *\n     * <p>The service must also require the {@link android.permission#MANAGE_SEARCH_UI}\n     * permission.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Intent", "android.permission#MANAGE_SEARCH_UI" ]
  }, {
    "name" : "mSessionEmptyQueryResultCallbacks",
    "type" : "ArrayMap<SearchSessionId, ArrayList<CallbackWrapper>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "android.service.search.ISearchUiService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreateSearchSession(@NonNull SearchContext context, @NonNull SearchSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new search session.\n     *\n     * @removed\n     * @deprecated this is method will be removed as soon as\n     * {@link #onSearchSessionCreated(SearchContext, SearchSessionId)}\n     * is adopted by the service.\n     ",
    "links" : [ "#onSearchSessionCreated(SearchContext" ]
  }, {
    "name" : "public void onSearchSessionCreated(@NonNull SearchContext context, @NonNull SearchSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * A new search session is created.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onQuery(@NonNull SearchSessionId sessionId, @NonNull Query query, @NonNull Consumer<List<SearchTarget>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by the client to request search results using a query string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onNotifyEvent(@NonNull SearchSessionId sessionId, @NonNull Query query, @NonNull SearchTargetEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Called by a client to indicate an interaction (tap, long press, drag, etc) on target(s)\n     * and lifecycle event on the search surface (e.g., visibility change).\n     *\n     * {@see SearchTargetEvent}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doRegisterEmptyQueryResultUpdateCallback(@NonNull SearchSessionId sessionId, @NonNull ISearchCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStartUpdateEmptyQueryResult()",
    "returnType" : "void",
    "comment" : "\n     * Called when the first empty query result callback is registered. Service provider may make\n     * their own decision whether to generate data if no callback is registered to optimize for\n     * system health.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doUnregisterEmptyQueryResultUpdateCallback(@NonNull SearchSessionId sessionId, @NonNull ISearchCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, ISearchCallback callback)",
    "returnType" : "CallbackWrapper",
    "comment" : "\n     * Finds the callback wrapper for the given callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStopUpdateEmptyQueryResult()",
    "returnType" : "void",
    "comment" : "\n     * Called when there are no longer any empty query result callbacks registered. Service\n     * provider can choose to stop generating data to optimize for system health.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void doDestroy(@NonNull SearchSessionId sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDestroy(@NonNull SearchSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys a search session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void updateEmptyQueryResult(@NonNull SearchSessionId sessionId, @NonNull List<SearchTarget> targets)",
    "returnType" : "void",
    "comment" : "\n     * Used by the service provider to send back results the client app. The can be called\n     * in response to {@link #onRequestEmptyQueryResultUpdate(SearchSessionId)} or proactively as\n     * a result of changes in zero state data.\n     ",
    "links" : [ "#onRequestEmptyQueryResultUpdate(SearchSessionId)" ]
  } ],
  "methodNames" : [ "public void onCreate()", "public final IBinder onBind(@NonNull Intent intent)", "public void onCreateSearchSession(@NonNull SearchContext context, @NonNull SearchSessionId sessionId)", "public void onSearchSessionCreated(@NonNull SearchContext context, @NonNull SearchSessionId sessionId)", "public abstract void onQuery(@NonNull SearchSessionId sessionId, @NonNull Query query, @NonNull Consumer<List<SearchTarget>> callback)", "public abstract void onNotifyEvent(@NonNull SearchSessionId sessionId, @NonNull Query query, @NonNull SearchTargetEvent event)", "private void doRegisterEmptyQueryResultUpdateCallback(@NonNull SearchSessionId sessionId, @NonNull ISearchCallback callback)", "public void onStartUpdateEmptyQueryResult()", "private void doUnregisterEmptyQueryResultUpdateCallback(@NonNull SearchSessionId sessionId, @NonNull ISearchCallback callback)", "private CallbackWrapper findCallbackWrapper(ArrayList<CallbackWrapper> callbacks, ISearchCallback callback)", "private void removeCallbackWrapper(@Nullable ArrayList<CallbackWrapper> callbacks, @Nullable CallbackWrapper wrapper)", "public void onStopUpdateEmptyQueryResult()", "private void doDestroy(@NonNull SearchSessionId sessionId)", "public abstract void onDestroy(@NonNull SearchSessionId sessionId)", "public final void updateEmptyQueryResult(@NonNull SearchSessionId sessionId, @NonNull List<SearchTarget> targets)" ],
  "variableNames" : [ "DEBUG", "TAG", "SERVICE_INTERFACE", "mSessionEmptyQueryResultCallbacks", "mHandler", "mInterface" ]
}