{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/TimeZoneGenericNames.java",
  "packageName" : "android.icu.impl",
  "className" : "TimeZoneGenericNames",
  "comment" : "\n * This class interact with TimeZoneNames and LocaleDisplayNames\n * to format and parse time zone's generic display names.\n * It is not recommended to use this class directly, instead\n * use android.icu.text.TimeZoneFormat.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_locale",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_tznames",
    "type" : "TimeZoneNames",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_frozen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_region",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_localeDisplayNamesRef",
    "type" : "WeakReference<LocaleDisplayNames>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_patternFormatters",
    "type" : "MessageFormat[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_genericLocationNamesMap",
    "type" : "ConcurrentHashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_genericPartialLocationNamesMap",
    "type" : "ConcurrentHashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gnamesTrie",
    "type" : "TextTrieMap<NameInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_gnamesTrieFullyLoaded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GENERIC_NAMES_CACHE",
    "type" : "Cache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DST_CHECK_RANGE",
    "type" : "long",
    "comment" : " Window size used for DST check for a zone in a metazone (about a half year)",
    "links" : [ ]
  }, {
    "name" : "GENERIC_NON_LOCATION_TYPES",
    "type" : "NameType[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "\n     * Private method initializing the instance of <code>TimeZoneGenericName</code>.\n     * This method should be called from a constructor and readObject.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TimeZoneGenericNames getInstance(ULocale locale)",
    "returnType" : "TimeZoneGenericNames",
    "comment" : "\n     * The factory method of <code>TimeZoneGenericNames</code>. This static method\n     * returns a frozen instance of cached <code>TimeZoneGenericNames</code>.\n     * @param locale the locale\n     * @return A frozen <code>TimeZoneGenericNames</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName(TimeZone tz, GenericNameType type, long date)",
    "returnType" : "String",
    "comment" : "\n     * Returns the display name of the time zone for the given name type\n     * at the given date, or null if the display name is not available.\n     *\n     * @param tz the time zone\n     * @param type the generic name type - see {@link GenericNameType}\n     * @param date the date\n     * @return the display name of the time zone for the given name type\n     * at the given date, or null.\n     ",
    "links" : [ "GenericNameType" ]
  }, {
    "name" : "public String getGenericLocationName(String canonicalTzID)",
    "returnType" : "String",
    "comment" : "\n     * Returns the generic location name for the given canonical time zone ID.\n     *\n     * @param canonicalTzID the canonical time zone ID\n     * @return the generic location name for the given canonical time zone ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneGenericNames setFormatPattern(Pattern patType, String patStr)",
    "returnType" : "TimeZoneGenericNames",
    "comment" : "\n     * Sets the pattern string for the pattern type.\n     * Note: This method is designed for CLDR ST - not for common use.\n     * @param patType the pattern type\n     * @param patStr the pattern string\n     * @return this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatGenericNonLocationName(TimeZone tz, GenericNameType type, long date)",
    "returnType" : "String",
    "comment" : "\n     * Private method to get a generic string, with fallback logics involved,\n     * that is,\n     *\n     * 1. If a generic non-location string is available for the zone, return it.\n     * 2. If a generic non-location string is associated with a meta zone and\n     *    the zone never use daylight time around the given date, use the standard\n     *    string (if available).\n     * 3. If a generic non-location string is associated with a meta zone and\n     *    the offset at the given time is different from the preferred zone for the\n     *    current locale, then return the generic partial location string (if available)\n     * 4. If a generic non-location string is not available, use generic location\n     *    string.\n     *\n     * @param tz the requested time zone\n     * @param date the date\n     * @param type the generic name type, either LONG or SHORT\n     * @return the name used for a generic name type, which could be the\n     * generic name, or the standard name (if the zone does not observes DST\n     * around the date), or the partial location name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized String formatPattern(Pattern pat, String... args)",
    "returnType" : "String",
    "comment" : "\n     * Private simple pattern formatter used for formatting generic location names\n     * and partial location names. We intentionally use JDK MessageFormat\n     * for performance reason.\n     *\n     * @param pat the message pattern enum\n     * @param args the format argument(s)\n     * @return the formatted string\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized LocaleDisplayNames getLocaleDisplayNames()",
    "returnType" : "LocaleDisplayNames",
    "comment" : "\n     * Private method returning LocaleDisplayNames instance for the locale of this\n     * instance. Because LocaleDisplayNames is only used for generic\n     * location format and partial location format, the LocaleDisplayNames\n     * is instantiated lazily.\n     *\n     * @return the instance of LocaleDisplayNames for the locale of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void loadStrings(String tzCanonicalID)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized String getTargetRegion()",
    "returnType" : "String",
    "comment" : "\n     * Private method returning the target region. The target regions is determined by\n     * the locale of this instance. When a generic name is coming from\n     * a meta zone, this region is used for checking if the time zone\n     * is a reference zone of the meta zone.\n     *\n     * @return the target region\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getPartialLocationName(String tzID, String mzID, boolean isLong, String mzDisplayName)",
    "returnType" : "String",
    "comment" : "\n     * Private method for formatting partial location names. This format\n     * is used when a generic name of a meta zone is available, but the given\n     * time zone is not a reference zone (golden zone) of the meta zone.\n     *\n     * @param tzID the canonical time zone ID\n     * @param mzID the meta zone ID\n     * @param isLong true when long generic name\n     * @param mzDisplayName the meta zone generic display name\n     * @return the partial location format string\n     ",
    "links" : [ ]
  }, {
    "name" : "public GenericMatchInfo findBestMatch(String text, int start, EnumSet<GenericNameType> genericTypes)",
    "returnType" : "GenericMatchInfo",
    "comment" : "\n     * Returns the best match of time zone display name for the specified types in the\n     * given text at the given offset.\n     * @param text the text\n     * @param start the start offset in the text\n     * @param genericTypes the set of name types.\n     * @return the best matching name info.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<GenericMatchInfo> find(String text, int start, EnumSet<GenericNameType> genericTypes)",
    "returnType" : "Collection<GenericMatchInfo>",
    "comment" : "\n     * Returns a collection of time zone display name matches for the specified types in the\n     * given text at the given offset.\n     * @param text the text\n     * @param start the start offset in the text\n     * @param genericTypes the set of name types.\n     * @return A collection of match info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private GenericMatchInfo createGenericMatchInfo(MatchInfo matchInfo)",
    "returnType" : "GenericMatchInfo",
    "comment" : "\n     * Returns a <code>GenericMatchInfo</code> for the given <code>MatchInfo</code>.\n     * @param matchInfo the MatchInfo\n     * @return A GenericMatchInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "private Collection<MatchInfo> findTimeZoneNames(String text, int start, EnumSet<GenericNameType> types)",
    "returnType" : "Collection<MatchInfo>",
    "comment" : "\n     * Returns a collection of time zone display name matches for the specified types in the\n     * given text at the given offset. This method only finds matches from the TimeZoneNames\n     * used by this object.\n     * @param text the text\n     * @param start the start offset in the text\n     * @param types the set of name types.\n     * @return A collection of match info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized Collection<GenericMatchInfo> findLocal(String text, int start, EnumSet<GenericNameType> types)",
    "returnType" : "Collection<GenericMatchInfo>",
    "comment" : "\n     * Returns a collection of time zone display name matches for the specified types in the\n     * given text at the given offset. This method only finds matches from the local trie,\n     * that contains 1) generic location names and 2) long/short generic partial location names,\n     * used by this object.\n     * @param text the text\n     * @param start the start offset in the text\n     * @param types the set of name types.\n     * @return A collection of match info.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * The custom deserialization method.\n     * This implementation only read locale used by the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneGenericNames freeze()",
    "returnType" : "TimeZoneGenericNames",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZoneGenericNames cloneAsThawed()",
    "returnType" : "TimeZoneGenericNames",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init()", "public static TimeZoneGenericNames getInstance(ULocale locale)", "public String getDisplayName(TimeZone tz, GenericNameType type, long date)", "public String getGenericLocationName(String canonicalTzID)", "public TimeZoneGenericNames setFormatPattern(Pattern patType, String patStr)", "private String formatGenericNonLocationName(TimeZone tz, GenericNameType type, long date)", "private synchronized String formatPattern(Pattern pat, String... args)", "private synchronized LocaleDisplayNames getLocaleDisplayNames()", "private synchronized void loadStrings(String tzCanonicalID)", "private synchronized String getTargetRegion()", "private String getPartialLocationName(String tzID, String mzID, boolean isLong, String mzDisplayName)", "public GenericMatchInfo findBestMatch(String text, int start, EnumSet<GenericNameType> genericTypes)", "public Collection<GenericMatchInfo> find(String text, int start, EnumSet<GenericNameType> genericTypes)", "private GenericMatchInfo createGenericMatchInfo(MatchInfo matchInfo)", "private Collection<MatchInfo> findTimeZoneNames(String text, int start, EnumSet<GenericNameType> types)", "private synchronized Collection<GenericMatchInfo> findLocal(String text, int start, EnumSet<GenericNameType> types)", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "public boolean isFrozen()", "public TimeZoneGenericNames freeze()", "public TimeZoneGenericNames cloneAsThawed()" ],
  "variableNames" : [ "serialVersionUID", "_locale", "_tznames", "_frozen", "_region", "_localeDisplayNamesRef", "_patternFormatters", "_genericLocationNamesMap", "_genericPartialLocationNamesMap", "_gnamesTrie", "_gnamesTrieFullyLoaded", "GENERIC_NAMES_CACHE", "DST_CHECK_RANGE", "GENERIC_NON_LOCATION_TYPES" ]
}