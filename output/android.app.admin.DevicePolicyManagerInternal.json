{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/DevicePolicyManagerInternal.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicyManagerInternal",
  "comment" : "\n * Device policy manager local system service interface.\n *\n * Maintenance note: if you need to expose information from DPMS to lower level services such as\n * PM/UM/AM/etc, then exposing it from DevicePolicyManagerInternal is not safe because it may cause\n * lock order inversion. Consider using {@link DevicePolicyCache} instead.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ "android.app.admin.DevicePolicyCache" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract List<String> getCrossProfileWidgetProviders(int profileId)",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the packages whose widget providers are allowlisted to be\n     * available in the parent user.\n     *\n     * <p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.\n     *\n     * @param profileId The profile id.\n     * @return The list of packages if such or empty list if there are\n     *    no allowlisted packages or the profile id is not a managed\n     *    profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addOnCrossProfileWidgetProvidersChangeListener(OnCrossProfileWidgetProvidersChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for changes in the allowlisted packages to show\n     * cross-profile app widgets.\n     *\n     * <p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.\n     *\n     * @param listener The listener to add.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(@NonNull UserHandle userHandle)",
    "returnType" : "ComponentName",
    "comment" : "\n     * @param userHandle the handle of the user whose profile owner is being fetched.\n     * @return the configured supervision app if it exists and is the device owner or policy owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isActiveDeviceOwner(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if an app with given uid is an active device owner of its user.\n     *\n     * <p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.\n     *\n     * @param uid App uid.\n     * @return true if the uid is an active device owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isActiveProfileOwner(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if an app with given uid is an active profile owner of its user.\n     *\n     * <p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.\n     *\n     * @param uid App uid.\n     * @return true if the uid is an active profile owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isActiveSupervisionApp(int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if an app with given uid is the active supervision admin.\n     *\n     * <p>This takes the DPMS lock. DO NOT call from PM/UM/AM with their lock held.\n     *\n     * @param uid App uid.\n     * @return true if the uid is the active supervision app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Intent createShowAdminSupportIntent(int userId, boolean useDefaultIfNoAdmin)",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an intent to show the admin support dialog to say that an action is disallowed by\n     * the device/profile owner.\n     *\n     * <p>This method does not take the DPMS lock.  Safe to be called from anywhere.\n     * @param userId The user where the action is disallowed.\n     * @param useDefaultIfNoAdmin If true, a non-null intent will be returned, even if we couldn't\n     * find a profile/device owner.\n     * @return The intent to trigger the admin support dialog.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Intent createUserRestrictionSupportIntent(int userId, String userRestriction)",
    "returnType" : "Intent",
    "comment" : "\n     * Creates an intent to show the admin support dialog showing the admin who has set a user\n     * restriction.\n     *\n     * <p>This method does not take the DPMS lock. Safe to be called from anywhere.\n     * @param userId The user where the user restriction is set.\n     * @return The intent to trigger the admin support dialog, or null if the user restriction is\n     * not enforced by the profile/device owner.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isUserAffiliatedWithDevice(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this user/profile is affiliated with the device.\n     *\n     * <p>\n     * By definition, the user that the device owner runs on is always affiliated with the device.\n     * Any other user/profile is considered affiliated with the device if the set specified by its\n     * profile owner via {@link DevicePolicyManager#setAffiliationIds} intersects with the device\n     * owner's.\n     * <p>\n     * Profile owner on the primary user will never be considered as affiliated as there is no\n     * device owner to be affiliated with.\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#setAffiliationIds" ]
  }, {
    "name" : "public abstract boolean canSilentlyInstallPackage(String callerPackage, int callerUid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the calling package can install or uninstall packages without user\n     * interaction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void reportSeparateProfileChallengeChanged(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Reports that a profile has changed to use a unified or separate credential.\n     *\n     * @param userId User ID of the profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getPrintingDisabledReasonForUser(@UserIdInt int userId)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return text of error message if printing is disabled.\n     * Called by Print Service when printing is disabled by PO or DO when printing is attempted.\n     *\n     * @param userId The user in question\n     * @return localized error message\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract DevicePolicyCache getDevicePolicyCache()",
    "returnType" : "DevicePolicyCache",
    "comment" : "\n     * @return cached version of DPM policies that can be accessed without risking deadlocks.\n     * Do not call it directly. Use {@link DevicePolicyCache#getInstance()} instead.\n     ",
    "links" : [ "android.app.admin.DevicePolicyCache#getInstance()" ]
  }, {
    "name" : "protected abstract DeviceStateCache getDeviceStateCache()",
    "returnType" : "DeviceStateCache",
    "comment" : "\n     * @return cached version of device state related to DPM that can be accessed without risking\n     * deadlocks.\n     * Do not call it directly. Use {@link DevicePolicyCache#getInstance()} instead.\n     ",
    "links" : [ "android.app.admin.DevicePolicyCache#getInstance()" ]
  }, {
    "name" : "public abstract List<String> getAllCrossProfilePackages(int userId)",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the combined set of the following:\n     * <ul>\n     * <li>The package names that the admin has previously set as allowed to request user consent\n     * for cross-profile communication, via {@link\n     * DevicePolicyManager#setCrossProfilePackages(ComponentName, Set)}.</li>\n     * <li>The default package names that are allowed to request user consent for cross-profile\n     * communication without being explicitly enabled by the admin, via\n     * {@link com.android.internal.R.array#cross_profile_apps} and\n     * {@link com.android.internal.R.array#vendor_cross_profile_apps}.</li>\n     * </ul>\n     *\n     * @return the combined set of allowlisted package names set via\n     * {@link DevicePolicyManager#setCrossProfilePackages(ComponentName, Set)} and\n     * {@link com.android.internal.R.array#cross_profile_apps} and\n     * {@link com.android.internal.R.array#vendor_cross_profile_apps}\n     *\n     * @hide\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#setCrossProfilePackages(ComponentName", "com.android.internal.R.array#vendor_cross_profile_apps", "com.android.internal.R.array#cross_profile_apps" ]
  }, {
    "name" : "public abstract List<String> getDefaultCrossProfilePackages()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the default package names set by the OEM that are allowed to communicate\n     * cross-profile without being explicitly enabled by the admin, via {@link\n     * com.android.internal.R.array#cross_profile_apps} and {@link\n     * com.android.internal.R.array#vendor_cross_profile_apps}.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.R.array#vendor_cross_profile_apps", "com.android.internal.R.array#cross_profile_apps" ]
  }, {
    "name" : "public abstract void broadcastIntentToManifestReceivers(Intent intent, UserHandle parentHandle, boolean requiresPermission)",
    "returnType" : "void",
    "comment" : "\n     * Sends the {@code intent} to the package holding the\n     * {@link android.app.role.RoleManager#ROLE_DEVICE_MANAGER} role and packages with cross\n     * profile capabilities, meaning the application must have the {@code crossProfile}\n     * property and at least one of the following permissions:\n     *\n     * <ul>\n     *     <li>{@link android.Manifest.permission.INTERACT_ACROSS_PROFILES}\n     *     <li>{@link android.Manifest.permission.INTERACT_ACROSS_USERS}\n     *     <li>{@link android.Manifest.permission.INTERACT_ACROSS_USERS_FULL}\n     *     <li>{@link AppOpsManager.OP_INTERACT_ACROSS_PROFILES} appop\n     * </ul>\n     *\n     * <p>Note: The intent itself is not modified but copied before use.\n     *`\n     * @param intent Template for the intent sent to the packages.\n     * @param parentHandle Handle of the user that will receive the intents.\n     * @param requiresPermission If false, all packages with the {@code crossProfile} property\n     *                           will receive the intent without requiring the additional\n     *                           permissions.\n     ",
    "links" : [ "AppOpsManager.OP_INTERACT_ACROSS_PROFILES", "android.Manifest.permission.INTERACT_ACROSS_PROFILES", "android.app.role.RoleManager#ROLE_DEVICE_MANAGER", "android.Manifest.permission.INTERACT_ACROSS_USERS", "android.Manifest.permission.INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "public abstract ComponentName getProfileOwnerAsUser(@UserIdInt int userId)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the profile owner component for the given user, or {@code null} if there is not one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ComponentName getDeviceOwnerComponent(boolean callingUserOnly)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the device owner component for the device, or {@code null} if there is not one.\n     *\n     * @deprecated added temporarily to support Android Role permission granting.\n     * Please contact Android Enterprise Device Policy team before calling this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getDeviceOwnerUserId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user id of the device owner, or {@link UserHandle#USER_NULL} if there is not one.\n     ",
    "links" : [ "android.os.UserHandle#USER_NULL" ]
  }, {
    "name" : "public abstract boolean isDeviceOrProfileOwnerInCallingUser(String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given package is a device owner or a profile owner in the calling user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean supportsResetOp(int op)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this class supports being deferred the responsibility for resetting the given\n     * op.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void resetOp(int op, String packageName, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Resets the given op across the profile group of the given user for the given package. Assumes\n     * {@link #supportsResetOp(int)} is true.\n     ",
    "links" : [ "#supportsResetOp(int)" ]
  }, {
    "name" : "public abstract void enforcePermission(String callerPackage, String permission, int targetUserId)",
    "returnType" : "void",
    "comment" : "\n     * Checks if the calling process has been granted permission to apply a device policy on a\n     * specific user.\n     *\n     * The given permission will be checked along with its associated cross-user permission, if it\n     * exists and the target user is different to the calling user.\n     *\n     * @param callerPackage the package of the calling application.\n     * @param permission The name of the permission being checked.\n     * @param targetUserId The userId of the user which the caller needs permission to act on.\n     * @throws SecurityException If the calling process has not been granted the permission.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasPermission(String callerPackage, String permission, int targetUserId)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the calling process has been granted permission to apply a device policy on\n     * a specific user.\n     *\n     * The given permission will be checked along with its associated cross-user\n     * permission, if it exists and the target user is different to the calling user.\n     *\n     * @param callerPackage the package of the calling application.\n     * @param permission The name of the permission being checked.\n     * @param targetUserId The userId of the user which the caller needs permission to act on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isUserOrganizationManaged(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * True if either the entire device or the user is organization managed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<Bundle> getApplicationRestrictionsPerAdminForUser(String packageName, @UserIdInt int userId)",
    "returnType" : "List<Bundle>",
    "comment" : "\n     * Returns a map of admin to {@link Bundle} map of restrictions set by the admins for the\n     * provided {@code packageName} in the provided {@code userId}\n     ",
    "links" : [ "android.os.Bundle" ]
  }, {
    "name" : "public abstract List<EnforcingUser> getUserRestrictionSources(String restriction, @UserIdInt int userId)",
    "returnType" : "List<EnforcingUser>",
    "comment" : "\n     *  Returns a list of users who set a user restriction on a given user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void enforceSecurityLoggingPolicy(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enforces resolved security logging policy, should only be invoked from device policy engine.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void enforceAuditLoggingPolicy(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Enforces resolved audit logging policy, should only be invoked from device policy engine.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract List<String> getCrossProfileWidgetProviders(int profileId)", "public abstract void addOnCrossProfileWidgetProvidersChangeListener(OnCrossProfileWidgetProvidersChangeListener listener)", "public abstract ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(@NonNull UserHandle userHandle)", "public abstract boolean isActiveDeviceOwner(int uid)", "public abstract boolean isActiveProfileOwner(int uid)", "public abstract boolean isActiveSupervisionApp(int uid)", "public abstract Intent createShowAdminSupportIntent(int userId, boolean useDefaultIfNoAdmin)", "public abstract Intent createUserRestrictionSupportIntent(int userId, String userRestriction)", "public abstract boolean isUserAffiliatedWithDevice(int userId)", "public abstract boolean canSilentlyInstallPackage(String callerPackage, int callerUid)", "public abstract void reportSeparateProfileChallengeChanged(@UserIdInt int userId)", "public abstract CharSequence getPrintingDisabledReasonForUser(@UserIdInt int userId)", "protected abstract DevicePolicyCache getDevicePolicyCache()", "protected abstract DeviceStateCache getDeviceStateCache()", "public abstract List<String> getAllCrossProfilePackages(int userId)", "public abstract List<String> getDefaultCrossProfilePackages()", "public abstract void broadcastIntentToManifestReceivers(Intent intent, UserHandle parentHandle, boolean requiresPermission)", "public abstract ComponentName getProfileOwnerAsUser(@UserIdInt int userId)", "public abstract ComponentName getDeviceOwnerComponent(boolean callingUserOnly)", "public abstract int getDeviceOwnerUserId()", "public abstract boolean isDeviceOrProfileOwnerInCallingUser(String packageName)", "public abstract boolean supportsResetOp(int op)", "public abstract void resetOp(int op, String packageName, @UserIdInt int userId)", "public abstract void enforcePermission(String callerPackage, String permission, int targetUserId)", "public abstract boolean hasPermission(String callerPackage, String permission, int targetUserId)", "public abstract boolean isUserOrganizationManaged(@UserIdInt int userId)", "public abstract List<Bundle> getApplicationRestrictionsPerAdminForUser(String packageName, @UserIdInt int userId)", "public abstract List<EnforcingUser> getUserRestrictionSources(String restriction, @UserIdInt int userId)", "public abstract void enforceSecurityLoggingPolicy(boolean enabled)", "public abstract void enforceAuditLoggingPolicy(boolean enabled)" ],
  "variableNames" : [ ]
}