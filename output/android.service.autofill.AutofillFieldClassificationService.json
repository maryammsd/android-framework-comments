{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/AutofillFieldClassificationService.java",
  "packageName" : "android.service.autofill",
  "className" : "AutofillFieldClassificationService",
  "comment" : "\n * A service that calculates field classification scores.\n *\n * <p>A field classification score is a {@code float} representing how well an\n * {@link AutofillValue} filled matches a expected value predicted by an autofill service\n * &mdash;a full match is {@code 1.0} (representing 100%), while a full mismatch is {@code 0.0}.\n *\n * <p>The exact score depends on the algorithm used to calculate it&mdash;the service must provide\n * at least one default algorithm (which is used when the algorithm is not specified or is invalid),\n * but it could provide more (in which case the algorithm name should be specified by the caller\n * when calculating the scores).\n *\n * {@hide}\n ",
  "links" : [ "android.view.autofill.AutofillValue" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by a service\n     * in its manifest for the system to recognize it as a quota providing service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "SERVICE_META_DATA_KEY_DEFAULT_ALGORITHM",
    "type" : "String",
    "comment" : "\n     * Manifest metadata key for the resource string containing the name of the default field\n     * classification algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "SERVICE_META_DATA_KEY_AVAILABLE_ALGORITHMS",
    "type" : "String",
    "comment" : "\n     * Manifest metadata key for the resource string array containing the names of all field\n     * classification algorithms provided by the service.\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUIRED_ALGORITHM_EDIT_DISTANCE",
    "type" : "String",
    "comment" : "\n     * Field classification algorithm that computes the edit distance between two Strings.\n     *\n     * <p>Service implementation must provide this algorithm.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUIRED_ALGORITHM_EXACT_MATCH",
    "type" : "String",
    "comment" : "\n     * Field classification algorithm that computes whether the last four digits between two\n     * Strings match exactly.\n     *\n     * <p>Service implementation must provide this algorithm.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUIRED_ALGORITHM_CREDIT_CARD",
    "type" : "String",
    "comment" : "\n     * Field classification algorithm that compares a credit card string to known last four digits.\n     *\n     * <p>Service implementation must provide this algorithm.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SCORES",
    "type" : "String",
    "comment" : " {@hide} *",
    "links" : [ ]
  }, {
    "name" : "mWrapper",
    "type" : "AutofillFieldClassificationServiceWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void calculateScores(RemoteCallback callback, List<AutofillValue> actualValues, String[] userDataValues, String[] categoryIds, String defaultAlgorithm, Bundle defaultArgs, Map algorithms, Map args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float[][] onGetScores(@Nullable String algorithm, @Nullable Bundle algorithmOptions, @NonNull List<AutofillValue> actualValues, @NonNull List<String> userDataValues)",
    "returnType" : "float[][]",
    "comment" : "\n     * Calculates field classification scores in a batch.\n     *\n     * <p>A field classification score is a {@code float} representing how well an\n     * {@link AutofillValue} filled matches a expected value predicted by an autofill service\n     * &mdash;a full match is {@code 1.0} (representing 100%), while a full mismatch is {@code 0.0}.\n     *\n     * <p>The exact score depends on the algorithm used to calculate it&mdash;the service must\n     * provide at least one default algorithm (which is used when the algorithm is not specified\n     * or is invalid), but it could provide more (in which case the algorithm name should be\n     * specified by the caller when calculating the scores).\n     *\n     * <p>For example, if the service provides an algorithm named {@code EXACT_MATCH} that\n     * returns {@code 1.0} if all characters match or {@code 0.0} otherwise, a call to:\n     *\n     * <pre>\n     * service.onGetScores(\"EXACT_MATCH\", null,\n     *   Arrays.asList(AutofillValue.forText(\"email1\"), AutofillValue.forText(\"PHONE1\")),\n     *   Arrays.asList(\"email1\", \"phone1\"));\n     * </pre>\n     *\n     * <p>Returns:\n     *\n     * <pre>\n     * [\n     *   [1.0, 0.0], // \"email1\" compared against [\"email1\", \"phone1\"]\n     *   [0.0, 0.0]  // \"PHONE1\" compared against [\"email1\", \"phone1\"]\n     * ];\n     * </pre>\n     *\n     * <p>If the same algorithm allows the caller to specify whether the comparisons should be\n     * case sensitive by passing a boolean option named {@code \"case_sensitive\"}, then a call to:\n     *\n     * <pre>\n     * Bundle algorithmOptions = new Bundle();\n     * algorithmOptions.putBoolean(\"case_sensitive\", false);\n     *\n     * service.onGetScores(\"EXACT_MATCH\", algorithmOptions,\n     *   Arrays.asList(AutofillValue.forText(\"email1\"), AutofillValue.forText(\"PHONE1\")),\n     *   Arrays.asList(\"email1\", \"phone1\"));\n     * </pre>\n     *\n     * <p>Returns:\n     *\n     * <pre>\n     * [\n     *   [1.0, 0.0], // \"email1\" compared against [\"email1\", \"phone1\"]\n     *   [0.0, 1.0]  // \"PHONE1\" compared against [\"email1\", \"phone1\"]\n     * ];\n     * </pre>\n     *\n     * @param algorithm name of the algorithm to be used to calculate the scores. If invalid or\n     * {@code null}, the default algorithm is used instead.\n     * @param algorithmOptions optional arguments to be passed to the algorithm.\n     * @param actualValues values entered by the user.\n     * @param userDataValues values predicted from the user data.\n     * @return the calculated scores of {@code actualValues} x {@code userDataValues}.\n     *\n     * {@hide}\n     *\n     * @deprecated Use {@link AutofillFieldClassificationService#onCalculateScores} instead.\n     ",
    "links" : [ "android.view.autofill.AutofillValue", "android.service.autofill.AutofillFieldClassificationService#onCalculateScores" ]
  }, {
    "name" : "public float[][] onCalculateScores(@NonNull List<AutofillValue> actualValues, @NonNull List<String> userDataValues, @NonNull List<String> categoryIds, @Nullable String defaultAlgorithm, @Nullable Bundle defaultArgs, @Nullable Map algorithms, @Nullable Map args)",
    "returnType" : "float[][]",
    "comment" : "\n     * Calculates field classification scores in a batch.\n     *\n     * <p>A field classification score is a {@code float} representing how well an\n     * {@link AutofillValue} matches a expected value predicted by an autofill service\n     * &mdash;a full match is {@code 1.0} (representing 100%), while a full mismatch is {@code 0.0}.\n     *\n     * <p>The exact score depends on the algorithm used to calculate it&mdash;the service must\n     * provide at least one default algorithm (which is used when the algorithm is not specified\n     * or is invalid), but it could provide more (in which case the algorithm name should be\n     * specified by the caller when calculating the scores).\n     *\n     * <p>For example, if the service provides an algorithm named {@code EXACT_MATCH} that\n     * returns {@code 1.0} if all characters match or {@code 0.0} otherwise, a call to:\n     *\n     * <pre>\n     * HashMap algorithms = new HashMap<>();\n     * algorithms.put(\"email\", \"EXACT_MATCH\");\n     * algorithms.put(\"phone\", \"EXACT_MATCH\");\n     *\n     * HashMap args = new HashMap<>();\n     * args.put(\"email\", null);\n     * args.put(\"phone\", null);\n     *\n     * service.onCalculateScores(Arrays.asList(AutofillValue.forText(\"email1\"),\n     * AutofillValue.forText(\"PHONE1\")), Arrays.asList(\"email1\", \"phone1\"),\n     * Array.asList(\"email\", \"phone\"), algorithms, args);\n     * </pre>\n     *\n     * <p>Returns:\n     *\n     * <pre>\n     * [\n     *   [1.0, 0.0], // \"email1\" compared against [\"email1\", \"phone1\"]\n     *   [0.0, 0.0]  // \"PHONE1\" compared against [\"email1\", \"phone1\"]\n     * ];\n     * </pre>\n     *\n     * <p>If the same algorithm allows the caller to specify whether the comparisons should be\n     * case sensitive by passing a boolean option named {@code \"case_sensitive\"}, then a call to:\n     *\n     * <pre>\n     * Bundle algorithmOptions = new Bundle();\n     * algorithmOptions.putBoolean(\"case_sensitive\", false);\n     * args.put(\"phone\", algorithmOptions);\n     *\n     * service.onCalculateScores(Arrays.asList(AutofillValue.forText(\"email1\"),\n     * AutofillValue.forText(\"PHONE1\")), Arrays.asList(\"email1\", \"phone1\"),\n     * Array.asList(\"email\", \"phone\"), algorithms, args);\n     * </pre>\n     *\n     * <p>Returns:\n     *\n     * <pre>\n     * [\n     *   [1.0, 0.0], // \"email1\" compared against [\"email1\", \"phone1\"]\n     *   [0.0, 1.0]  // \"PHONE1\" compared against [\"email1\", \"phone1\"]\n     * ];\n     * </pre>\n     *\n     * @param actualValues values entered by the user.\n     * @param userDataValues values predicted from the user data.\n     * @param categoryIds category Ids correspoinding to userDataValues\n     * @param defaultAlgorithm default field classification algorithm\n     * @param algorithms array of field classification algorithms\n     * @return the calculated scores of {@code actualValues} x {@code userDataValues}.\n     *\n     * {@hide}\n     ",
    "links" : [ "android.view.autofill.AutofillValue" ]
  } ],
  "methodNames" : [ "private void calculateScores(RemoteCallback callback, List<AutofillValue> actualValues, String[] userDataValues, String[] categoryIds, String defaultAlgorithm, Bundle defaultArgs, Map algorithms, Map args)", "public void onCreate()", "public IBinder onBind(Intent intent)", "public float[][] onGetScores(@Nullable String algorithm, @Nullable Bundle algorithmOptions, @NonNull List<AutofillValue> actualValues, @NonNull List<String> userDataValues)", "public float[][] onCalculateScores(@NonNull List<AutofillValue> actualValues, @NonNull List<String> userDataValues, @NonNull List<String> categoryIds, @Nullable String defaultAlgorithm, @Nullable Bundle defaultArgs, @Nullable Map algorithms, @Nullable Map args)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "SERVICE_META_DATA_KEY_DEFAULT_ALGORITHM", "SERVICE_META_DATA_KEY_AVAILABLE_ALGORITHMS", "REQUIRED_ALGORITHM_EDIT_DISTANCE", "REQUIRED_ALGORITHM_EXACT_MATCH", "REQUIRED_ALGORITHM_CREDIT_CARD", "EXTRA_SCORES", "mWrapper", "mHandler" ]
}