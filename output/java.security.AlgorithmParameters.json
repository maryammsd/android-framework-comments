{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/AlgorithmParameters.java",
  "packageName" : "java.security",
  "className" : "AlgorithmParameters",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "paramSpi",
    "type" : "AlgorithmParametersSpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The algorithm",
    "links" : [ ]
  }, {
    "name" : "initialized",
    "type" : "boolean",
    "comment" : " Has this object been initialized?",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the algorithm associated with this parameter object.\n     *\n     * @return the algorithm name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AlgorithmParameters getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns a parameter object for the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new AlgorithmParameters object encapsulating the\n     * AlgorithmParametersSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * <p> The returned parameter object must be initialized via a call to\n     * {@code init}, using an appropriate parameter specification or\n     * parameter encoding.\n     *\n     * @param algorithm the name of the algorithm requested.\n     *\n     * @return the new parameter object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports an\n     *         {@code AlgorithmParametersSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static AlgorithmParameters getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns a parameter object for the specified algorithm.\n     *\n     * <p> A new AlgorithmParameters object encapsulating the\n     * AlgorithmParametersSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * <p>The returned parameter object must be initialized via a call to\n     * {@code init}, using an appropriate parameter specification or\n     * parameter encoding.\n     *\n     * @param algorithm the name of the algorithm requested.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new parameter object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if an {@code AlgorithmParametersSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static AlgorithmParameters getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns a parameter object for the specified algorithm.\n     *\n     * <p> A new AlgorithmParameters object encapsulating the\n     * AlgorithmParametersSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * <p>The returned parameter object must be initialized via a call to\n     * {@code init}, using an appropriate parameter specification or\n     * parameter encoding.\n     *\n     * @param algorithm the name of the algorithm requested.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new parameter object\n     *\n     * @throws IllegalArgumentException if the provider is {@code null}\n     *\n     * @throws NoSuchAlgorithmException if an\n     *         {@code AlgorithmParameterGeneratorSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null} on Android 14 or above\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this parameter object.\n     *\n     * @return the provider of this parameter object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(AlgorithmParameterSpec paramSpec) throws InvalidParameterSpecException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this parameter object using the parameters\n     * specified in {@code paramSpec}.\n     *\n     * @param paramSpec the parameter specification.\n     *\n     * @exception InvalidParameterSpecException if the given parameter\n     * specification is inappropriate for the initialization of this parameter\n     * object, or if this parameter object has already been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(byte[] params) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Imports the specified parameters and decodes them according to the\n     * primary decoding format for parameters. The primary decoding\n     * format for parameters is ASN.1, if an ASN.1 specification for this type\n     * of parameters exists.\n     *\n     * @param params the encoded parameters.\n     *\n     * @exception IOException on decoding errors, or if this parameter object\n     * has already been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(byte[] params, String format) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Imports the parameters from {@code params} and decodes them\n     * according to the specified decoding scheme.\n     * If {@code format} is null, the\n     * primary decoding format for parameters is used. The primary decoding\n     * format is ASN.1, if an ASN.1 specification for these parameters\n     * exists.\n     *\n     * @param params the encoded parameters.\n     *\n     * @param format the name of the decoding scheme.\n     *\n     * @exception IOException on decoding errors, or if this parameter object\n     * has already been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException",
    "returnType" : "T",
    "comment" : "\n     * Returns a (transparent) specification of this parameter object.\n     * {@code paramSpec} identifies the specification class in which\n     * the parameters should be returned. It could, for example, be\n     * {@code DSAParameterSpec.class}, to indicate that the\n     * parameters should be returned in an instance of the\n     * {@code DSAParameterSpec} class.\n     *\n     * @param <T> the type of the parameter specification to be returrned\n     * @param paramSpec the specification class in which\n     * the parameters should be returned.\n     *\n     * @return the parameter specification.\n     *\n     * @exception InvalidParameterSpecException if the requested parameter\n     * specification is inappropriate for this parameter object, or if this\n     * parameter object has not been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] getEncoded() throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the parameters in their primary encoding format.\n     * The primary encoding format for parameters is ASN.1, if an ASN.1\n     * specification for this type of parameters exists.\n     *\n     * @return the parameters encoded using their primary encoding format.\n     *\n     * @exception IOException on encoding errors, or if this parameter object\n     * has not been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] getEncoded(String format) throws IOException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the parameters encoded in the specified scheme.\n     * If {@code format} is null, the\n     * primary encoding format for parameters is used. The primary encoding\n     * format is ASN.1, if an ASN.1 specification for these parameters\n     * exists.\n     *\n     * @param format the name of the encoding format.\n     *\n     * @return the parameters encoded using the specified encoding scheme.\n     *\n     * @exception IOException on encoding errors, or if this parameter object\n     * has not been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted string describing the parameters.\n     *\n     * @return a formatted string describing the parameters, or null if this\n     * parameter object has not been initialized.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getAlgorithm()", "public static AlgorithmParameters getInstance(String algorithm) throws NoSuchAlgorithmException", "public static AlgorithmParameters getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static AlgorithmParameters getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final void init(AlgorithmParameterSpec paramSpec) throws InvalidParameterSpecException", "public final void init(byte[] params) throws IOException", "public final void init(byte[] params, String format) throws IOException", "public final T getParameterSpec(Class<T> paramSpec) throws InvalidParameterSpecException", "public final byte[] getEncoded() throws IOException", "public final byte[] getEncoded(String format) throws IOException", "public final String toString()" ],
  "variableNames" : [ "provider", "paramSpi", "algorithm", "initialized" ]
}