{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/ViewStub.java",
  "packageName" : "android.view",
  "className" : "ViewStub",
  "comment" : "\n * A ViewStub is an invisible, zero-sized View that can be used to lazily inflate\n * layout resources at runtime.\n *\n * When a ViewStub is made visible, or when {@link #inflate()}  is invoked, the layout resource \n * is inflated. The ViewStub then replaces itself in its parent with the inflated View or Views.\n * Therefore, the ViewStub exists in the view hierarchy until {@link #setVisibility(int)} or\n * {@link #inflate()} is invoked.\n *\n * The inflated View is added to the ViewStub's parent with the ViewStub's layout\n * parameters. Similarly, you can define/override the inflate View's id by using the\n * ViewStub's inflatedId property. For instance:\n *\n * <pre>\n *     &lt;ViewStub android:id=\"@+id/stub\"\n *               android:inflatedId=\"@+id/subTree\"\n *               android:layout=\"@layout/mySubTree\"\n *               android:layout_width=\"120dip\"\n *               android:layout_height=\"40dip\" /&gt;\n * </pre>\n *\n * The ViewStub thus defined can be found using the id \"stub.\" After inflation of\n * the layout resource \"mySubTree,\" the ViewStub is removed from its parent. The\n * View created by inflating the layout resource \"mySubTree\" can be found using the\n * id \"subTree,\" specified by the inflatedId property. The inflated View is finally\n * assigned a width of 120dip and a height of 40dip.\n *\n * The preferred way to perform the inflation of the layout resource is the following:\n *\n * <pre>\n *     ViewStub stub = findViewById(R.id.stub);\n *     View inflated = stub.inflate();\n * </pre>\n *\n * When {@link #inflate()} is invoked, the ViewStub is replaced by the inflated View\n * and the inflated View is returned. This lets applications get a reference to the\n * inflated View without executing an extra findViewById().\n *\n * @attr ref android.R.styleable#ViewStub_inflatedId\n * @attr ref android.R.styleable#ViewStub_layout\n ",
  "variables" : [ {
    "name" : "mInflatedId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflatedViewRef",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflater",
    "type" : "LayoutInflater",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInflateListener",
    "type" : "OnInflateListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getInflatedId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the id taken by the inflated view. If the inflated id is\n     * {@link View#NO_ID}, the inflated view keeps its original id.\n     *\n     * @return A positive integer used to identify the inflated view or\n     *         {@link #NO_ID} if the inflated view should keep its id.\n     *\n     * @see #setInflatedId(int)\n     * @attr ref android.R.styleable#ViewStub_inflatedId\n     ",
    "links" : [ "android.widget.RemoteViews.RemoteView#NO_ID", "#NO_ID" ]
  }, {
    "name" : "public void setInflatedId(@IdRes int inflatedId)",
    "returnType" : "void",
    "comment" : "\n     * Defines the id taken by the inflated view. If the inflated id is\n     * {@link View#NO_ID}, the inflated view keeps its original id.\n     *\n     * @param inflatedId A positive integer used to identify the inflated view or\n     *                   {@link #NO_ID} if the inflated view should keep its id.\n     *\n     * @see #getInflatedId()\n     * @attr ref android.R.styleable#ViewStub_inflatedId\n     ",
    "links" : [ "android.widget.RemoteViews.RemoteView#NO_ID", "#NO_ID" ]
  }, {
    "name" : "public Runnable setInflatedIdAsync(@IdRes int inflatedId)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public int getLayoutResource()",
    "returnType" : "int",
    "comment" : "\n     * Returns the layout resource that will be used by {@link #setVisibility(int)} or\n     * {@link #inflate()} to replace this StubbedView\n     * in its parent by another view.\n     *\n     * @return The layout resource identifier used to inflate the new View.\n     *\n     * @see #setLayoutResource(int)\n     * @see #setVisibility(int)\n     * @see #inflate()\n     * @attr ref android.R.styleable#ViewStub_layout\n     ",
    "links" : [ "#inflate()", "#setVisibility(int)" ]
  }, {
    "name" : "public void setLayoutResource(@LayoutRes int layoutResource)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the layout resource to inflate when this StubbedView becomes visible or invisible\n     * or when {@link #inflate()} is invoked. The View created by inflating the layout resource is\n     * used to replace this StubbedView in its parent.\n     * \n     * @param layoutResource A valid layout resource identifier (different from 0.)\n     * \n     * @see #getLayoutResource()\n     * @see #setVisibility(int)\n     * @see #inflate()\n     * @attr ref android.R.styleable#ViewStub_layout\n     ",
    "links" : [ "#inflate()" ]
  }, {
    "name" : "public Runnable setLayoutResourceAsync(@LayoutRes int layoutResource)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public void setLayoutInflater(LayoutInflater inflater)",
    "returnType" : "void",
    "comment" : "\n     * Set {@link LayoutInflater} to use in {@link #inflate()}, or {@code null}\n     * to use the default.\n     ",
    "links" : [ "#inflate()", "android.view.LayoutInflater" ]
  }, {
    "name" : "public LayoutInflater getLayoutInflater()",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Get current {@link LayoutInflater} used in {@link #inflate()}.\n     ",
    "links" : [ "#inflate()", "android.view.LayoutInflater" ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dispatchDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisibility(int visibility)",
    "returnType" : "void",
    "comment" : "\n     * When visibility is set to {@link #VISIBLE} or {@link #INVISIBLE},\n     * {@link #inflate()} is invoked and this StubbedView is replaced in its parent\n     * by the inflated layout resource. After that calls to this function are passed\n     * through to the inflated view.\n     *\n     * @param visibility One of {@link #VISIBLE}, {@link #INVISIBLE}, or {@link #GONE}.\n     *\n     * @see #inflate() \n     ",
    "links" : [ "#inflate()", "#VISIBLE", "#GONE", "#INVISIBLE" ]
  }, {
    "name" : "public Runnable setVisibilityAsync(int visibility)",
    "returnType" : "Runnable",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "private View inflateViewNoAdd(ViewGroup parent)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void replaceSelfWithView(View view, ViewGroup parent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View inflate()",
    "returnType" : "View",
    "comment" : "\n     * Inflates the layout resource identified by {@link #getLayoutResource()}\n     * and replaces this StubbedView in its parent by the inflated layout resource.\n     *\n     * @return The inflated layout resource.\n     *\n     ",
    "links" : [ "#getLayoutResource()" ]
  }, {
    "name" : "public void setOnInflateListener(OnInflateListener inflateListener)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the inflate listener to be notified after this ViewStub successfully\n     * inflated its layout resource.\n     *\n     * @param inflateListener The OnInflateListener to notify of successful inflation.\n     *\n     * @see android.view.ViewStub.OnInflateListener\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mInflatedId", "mLayoutResource", "mInflatedViewRef", "mInflater", "mInflateListener" ],
  "methodNames" : [ "public int getInflatedId()", "public void setInflatedId(@IdRes int inflatedId)", "public Runnable setInflatedIdAsync(@IdRes int inflatedId)", "public int getLayoutResource()", "public void setLayoutResource(@LayoutRes int layoutResource)", "public Runnable setLayoutResourceAsync(@LayoutRes int layoutResource)", "public void setLayoutInflater(LayoutInflater inflater)", "public LayoutInflater getLayoutInflater()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", "public void draw(Canvas canvas)", "protected void dispatchDraw(Canvas canvas)", "public void setVisibility(int visibility)", "public Runnable setVisibilityAsync(int visibility)", "private View inflateViewNoAdd(ViewGroup parent)", "private void replaceSelfWithView(View view, ViewGroup parent)", "public View inflate()", "public void setOnInflateListener(OnInflateListener inflateListener)" ]
}