{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/FileUtils.java",
  "packageName" : "android.os",
  "className" : "FileUtils",
  "comment" : "\n * Utility methods useful for working with files.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "S_IRWXU",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IRUSR",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IWUSR",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IXUSR",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IRWXG",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IRGRP",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IWGRP",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IXGRP",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IRWXO",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IROTH",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IWOTH",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "S_IXOTH",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "sEnableCopyOptimizations",
    "type" : "boolean",
    "comment" : " non-final so it can be toggled by Robolectric's ShadowFileUtils",
    "links" : [ ]
  }, {
    "name" : "COPY_CHECKPOINT_BYTES",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int setPermissions(File path, int mode, int uid, int gid)",
    "returnType" : "int",
    "comment" : "\n     * Set owner and mode of of given {@link File}.\n     *\n     * @param mode to apply through {@code chmod}\n     * @param uid to apply through {@code chown}, or -1 to leave unchanged\n     * @param gid to apply through {@code chown}, or -1 to leave unchanged\n     * @return 0 on success, otherwise errno.\n     * @hide\n     ",
    "links" : [ "File" ]
  }, {
    "name" : "public static int setPermissions(String path, int mode, int uid, int gid)",
    "returnType" : "int",
    "comment" : "\n     * Set owner and mode of of given path.\n     *\n     * @param mode to apply through {@code chmod}\n     * @param uid to apply through {@code chown}, or -1 to leave unchanged\n     * @param gid to apply through {@code chown}, or -1 to leave unchanged\n     * @return 0 on success, otherwise errno.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int setPermissions(FileDescriptor fd, int mode, int uid, int gid)",
    "returnType" : "int",
    "comment" : "\n     * Set owner and mode of of given {@link FileDescriptor}.\n     *\n     * @param mode to apply through {@code chmod}\n     * @param uid to apply through {@code chown}, or -1 to leave unchanged\n     * @param gid to apply through {@code chown}, or -1 to leave unchanged\n     * @return 0 on success, otherwise errno.\n     * @hide\n     ",
    "links" : [ "FileDescriptor" ]
  }, {
    "name" : "public static void copyPermissions(@NonNull File from, @NonNull File to) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Copy the owner UID, owner GID, and mode bits from one file to another.\n     *\n     * @param from File where attributes should be copied from.\n     * @param to File where attributes should be copied to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getUid(String path)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated use {@link Os#stat(String)} instead.\n     * @hide\n     ",
    "links" : [ "Os#stat" ]
  }, {
    "name" : "public static boolean sync(FileOutputStream stream)",
    "returnType" : "boolean",
    "comment" : "\n     * Perform an fsync on the given FileOutputStream.  The stream at this\n     * point must be flushed but not yet closed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean copyFile(File srcFile, File destFile)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated use {@link #copy(File, File)} instead.\n     * @hide\n     ",
    "links" : [ "#copy" ]
  }, {
    "name" : "public static void copyFileOrThrow(File srcFile, File destFile) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #copy(File, File)} instead.\n     * @hide\n     ",
    "links" : [ "#copy" ]
  }, {
    "name" : "public static boolean copyToFile(InputStream inputStream, File destFile)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated use {@link #copy(InputStream, OutputStream)} instead.\n     * @hide\n     ",
    "links" : [ "#copy" ]
  }, {
    "name" : "public static void copyToFileOrThrow(InputStream in, File destFile) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #copy(InputStream, OutputStream)} instead.\n     * @hide\n     ",
    "links" : [ "#copy" ]
  }, {
    "name" : "public static long copy(@NonNull File from, @NonNull File to) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one file to another, replacing any existing content.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @return number of bytes copied.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull File from, @NonNull File to, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one file to another, replacing any existing content.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @param signal to signal if the copy should be cancelled early.\n     * @param executor that listener events should be delivered via.\n     * @param listener to be periodically notified as the copy progresses.\n     * @return number of bytes copied.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull InputStream in, @NonNull OutputStream out) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one stream to another.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @return number of bytes copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull InputStream in, @NonNull OutputStream out, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one stream to another.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @param signal to signal if the copy should be cancelled early.\n     * @param executor that listener events should be delivered via.\n     * @param listener to be periodically notified as the copy progresses.\n     * @return number of bytes copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one FD to another.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @return number of bytes copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one FD to another.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @param signal to signal if the copy should be cancelled early.\n     * @param executor that listener events should be delivered via.\n     * @param listener to be periodically notified as the copy progresses.\n     * @return number of bytes copied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out, long count, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Copy the contents of one FD to another.\n     * <p>\n     * Attempts to use several optimization strategies to copy the data in the\n     * kernel before falling back to a userspace copy as a last resort.\n     *\n     * @param count the number of bytes to copy.\n     * @param signal to signal if the copy should be cancelled early.\n     * @param executor that listener events should be delivered via.\n     * @param listener to be periodically notified as the copy progresses.\n     * @return number of bytes copied.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copyInternalSplice(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * Requires one of input or output to be a pipe.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copyInternalSendfile(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws ErrnoException",
    "returnType" : "long",
    "comment" : "\n     * Requires both input and output to be a regular file.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long copyInternalUserspace(FileDescriptor in, FileDescriptor out, ProgressListener listener, CancellationSignal signal, long count) throws IOException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long copyInternalUserspace(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static long copyInternalUserspace(InputStream in, OutputStream out, CancellationSignal signal, Executor executor, ProgressListener listener) throws IOException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFilenameSafe(File file)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a filename is \"safe\" (no metacharacters or spaces).\n     * @param file  The file to check\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String readTextFile(File file, int max, String ellipsis) throws IOException",
    "returnType" : "String",
    "comment" : "\n     * Read a text file into a String, optionally limiting the length.\n     * @param file to read (will not seek, so things like /proc files are OK)\n     * @param max length (positive for head, negative of tail, 0 for no limit)\n     * @param ellipsis to add of the file was truncated (can be null)\n     * @return the contents of the file, possibly truncated\n     * @throws IOException if something goes wrong reading the file\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stringToFile(File file, String string) throws IOException",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static void bytesToFile(String filename, byte[] content) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the bytes given in {@code content} to the file whose absolute path\n     * is {@code filename}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stringToFile(String filename, String string) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes string to file. Basically same as \"echo -n $string > $filename\"\n     *\n     * @param filename\n     * @param string\n     * @throws IOException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long checksumCrc32(File file) throws FileNotFoundException, IOException",
    "returnType" : "long",
    "comment" : "\n     * Computes the checksum of a file using the CRC32 checksum routine. The\n     * value of the checksum is returned.\n     *\n     * @param file the file to checksum, must not be null\n     * @return the checksum value or an exception is thrown.\n     * @deprecated this is a weak hashing algorithm, and should not be used due\n     *             to its potential for collision.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] digest(@NonNull File file, @NonNull String algorithm) throws IOException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Compute the digest of the given file using the requested algorithm.\n     *\n     * @param algorithm Any valid algorithm accepted by\n     *            {@link MessageDigest#getInstance(String)}.\n     * @hide\n     ",
    "links" : [ "MessageDigest#getInstance" ]
  }, {
    "name" : "public static byte[] digest(@NonNull InputStream in, @NonNull String algorithm) throws IOException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Compute the digest of the given file using the requested algorithm.\n     *\n     * @param algorithm Any valid algorithm accepted by\n     *            {@link MessageDigest#getInstance(String)}.\n     * @hide\n     ",
    "links" : [ "MessageDigest#getInstance" ]
  }, {
    "name" : "public static byte[] digest(FileDescriptor fd, String algorithm) throws IOException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Compute the digest of the given file using the requested algorithm.\n     *\n     * @param algorithm Any valid algorithm accepted by\n     *            {@link MessageDigest#getInstance(String)}.\n     * @hide\n     ",
    "links" : [ "MessageDigest#getInstance" ]
  }, {
    "name" : "private static byte[] digestInternalUserspace(InputStream in, String algorithm) throws IOException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteOlderFiles(File dir, int minCount, long minAgeMs)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete older files in a directory until only those matching the given\n     * constraints remain.\n     *\n     * @param minCount Always keep at least this many files.\n     * @param minAgeMs Always keep files younger than this age, in milliseconds.\n     * @return if any files were deleted.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean contains(File[] dirs, File file)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a file lives under the given directory, either as a direct child\n     * or a distant grandchild.\n     * <p>\n     * Both files <em>must</em> have been resolved using\n     * {@link File#getCanonicalFile()} to avoid symlink or path traversal\n     * attacks.\n     *\n     * @hide\n     ",
    "links" : [ "File#getCanonicalFile" ]
  }, {
    "name" : "public static boolean contains(Collection<File> dirs, File file)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean contains(File dir, File file)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a file lives under the given directory, either as a direct child\n     * or a distant grandchild.\n     * <p>\n     * Both files <em>must</em> have been resolved using\n     * {@link File#getCanonicalFile()} to avoid symlink or path traversal\n     * attacks.\n     *\n     * @hide\n     ",
    "links" : [ "File#getCanonicalFile" ]
  }, {
    "name" : "public static boolean contains(String dirPath, String filePath)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a file lives under the given directory, either as a direct child\n     * or a distant grandchild.\n     * <p>\n     * Both files <em>must</em> have been resolved using\n     * {@link File#getCanonicalFile()} to avoid symlink or path traversal\n     * attacks.\n     *\n     * @hide\n     ",
    "links" : [ "File#getCanonicalFile" ]
  }, {
    "name" : "public static boolean deleteContentsAndDir(File dir)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static boolean deleteContents(File dir)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidExtFilenameChar(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidExtFilename(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given filename is valid for an ext4 filesystem.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String buildValidExtFilename(String name)",
    "returnType" : "String",
    "comment" : "\n     * Mutate the given filename to make it valid for an ext4 filesystem,\n     * replacing any invalid characters with \"_\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidFatFilenameChar(char c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidFatFilename(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if given filename is valid for a FAT filesystem.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String buildValidFatFilename(String name)",
    "returnType" : "String",
    "comment" : "\n     * Mutate the given filename to make it valid for a FAT filesystem,\n     * replacing any invalid characters with \"_\".\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String trimFilename(String str, int maxBytes)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private static void trimFilename(StringBuilder res, int maxBytes)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String rewriteAfterRename(File beforeDir, File afterDir, String path)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String[] rewriteAfterRename(File beforeDir, File afterDir, String[] paths)",
    "returnType" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File rewriteAfterRename(File beforeDir, File afterDir, File file)",
    "returnType" : "File",
    "comment" : "\n     * Given a path under the \"before\" directory, rewrite it to live under the\n     * \"after\" directory. For example, {@code /before/foo/bar.txt} would become\n     * {@code /after/foo/bar.txt}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static File buildUniqueFileWithExtension(File parent, String name, String ext) throws FileNotFoundException",
    "returnType" : "File",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File buildUniqueFile(File parent, String mimeType, String displayName) throws FileNotFoundException",
    "returnType" : "File",
    "comment" : "\n     * Generates a unique file name under the given parent directory. If the display name doesn't\n     * have an extension that matches the requested MIME type, the default extension for that MIME\n     * type is appended. If a file already exists, the name is appended with a numerical value to\n     * make it unique.\n     *\n     * For example, the display name 'example' with 'text/plain' MIME might produce\n     * 'example.txt' or 'example (1).txt', etc.\n     *\n     * @throws FileNotFoundException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static File buildNonUniqueFile(File parent, String mimeType, String displayName)",
    "returnType" : "File",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File buildUniqueFile(File parent, String displayName) throws FileNotFoundException",
    "returnType" : "File",
    "comment" : "\n     * Generates a unique file name under the given parent directory, keeping\n     * any extension intact.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] splitFileName(String mimeType, String displayName)",
    "returnType" : "String[]",
    "comment" : "\n     * Splits file name into base name and extension.\n     * If the display name doesn't have an extension that matches the requested MIME type, the\n     * extension is regarded as a part of filename and default extension for that MIME type is\n     * appended.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static File buildFile(File parent, String name, String ext)",
    "returnType" : "File",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String[] listOrEmpty(@Nullable File dir)",
    "returnType" : "String[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File[] listFilesOrEmpty(@Nullable File dir)",
    "returnType" : "File[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File[] listFilesOrEmpty(@Nullable File dir, FilenameFilter filter)",
    "returnType" : "File[]",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File newFileOrNull(@Nullable String path)",
    "returnType" : "File",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static File createDir(File baseDir, String name)",
    "returnType" : "File",
    "comment" : "\n     * Creates a directory with name {@code name} under an existing directory {@code baseDir}.\n     * Returns a {@code File} object representing the directory on success, {@code null} on\n     * failure.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean createDir(File dir)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static long roundStorageSize(long size)",
    "returnType" : "long",
    "comment" : "\n     * Round the given size of a storage device to a nice round power-of-two\n     * value, such as 256MB or 32GB. This avoids showing weird values like\n     * \"29.5GB\" in UI.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void closeQuietly(@Nullable AutoCloseable closeable)",
    "returnType" : "void",
    "comment" : "\n     * Closes the given object quietly, ignoring any checked exceptions. Does\n     * nothing if the given object is {@code null}.\n     *\n     * @deprecated This method may suppress potentially significant exceptions, particularly when\n     *   closing writable resources. With a writable resource, a failure thrown from {@code close()}\n     *   should be considered as significant as a failure thrown from a write method because it may\n     *   indicate a failure to flush bytes to the underlying resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void closeQuietly(@Nullable FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * Closes the given object quietly, ignoring any checked exceptions. Does\n     * nothing if the given object is {@code null}.\n     *\n     * @deprecated This method may suppress potentially significant exceptions, particularly when\n     *   closing writable resources. With a writable resource, a failure thrown from {@code close()}\n     *   should be considered as significant as a failure thrown from a write method because it may\n     *   indicate a failure to flush bytes to the underlying resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int translateModeStringToPosix(String mode)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String translateModePosixToString(int mode)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int translateModePosixToPfd(int mode)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int translateModePfdToPosix(int mode)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int translateModeAccessToPosix(int mode)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "S_IRWXU", "S_IRUSR", "S_IWUSR", "S_IXUSR", "S_IRWXG", "S_IRGRP", "S_IWGRP", "S_IXGRP", "S_IRWXO", "S_IROTH", "S_IWOTH", "S_IXOTH", "sEnableCopyOptimizations", "COPY_CHECKPOINT_BYTES" ],
  "methodNames" : [ "public static int setPermissions(File path, int mode, int uid, int gid)", "public static int setPermissions(String path, int mode, int uid, int gid)", "public static int setPermissions(FileDescriptor fd, int mode, int uid, int gid)", "public static void copyPermissions(@NonNull File from, @NonNull File to) throws IOException", "public static int getUid(String path)", "public static boolean sync(FileOutputStream stream)", "public static boolean copyFile(File srcFile, File destFile)", "public static void copyFileOrThrow(File srcFile, File destFile) throws IOException", "public static boolean copyToFile(InputStream inputStream, File destFile)", "public static void copyToFileOrThrow(InputStream in, File destFile) throws IOException", "public static long copy(@NonNull File from, @NonNull File to) throws IOException", "public static long copy(@NonNull File from, @NonNull File to, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException", "public static long copy(@NonNull InputStream in, @NonNull OutputStream out) throws IOException", "public static long copy(@NonNull InputStream in, @NonNull OutputStream out, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException", "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out) throws IOException", "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException", "public static long copy(@NonNull FileDescriptor in, @NonNull FileDescriptor out, long count, @Nullable CancellationSignal signal, @Nullable Executor executor, @Nullable ProgressListener listener) throws IOException", "public static long copyInternalSplice(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws ErrnoException", "public static long copyInternalSendfile(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws ErrnoException", "public static long copyInternalUserspace(FileDescriptor in, FileDescriptor out, ProgressListener listener, CancellationSignal signal, long count) throws IOException", "public static long copyInternalUserspace(FileDescriptor in, FileDescriptor out, long count, CancellationSignal signal, Executor executor, ProgressListener listener) throws IOException", "public static long copyInternalUserspace(InputStream in, OutputStream out, CancellationSignal signal, Executor executor, ProgressListener listener) throws IOException", "public static boolean isFilenameSafe(File file)", "public static String readTextFile(File file, int max, String ellipsis) throws IOException", "public static void stringToFile(File file, String string) throws IOException", "public static void bytesToFile(String filename, byte[] content) throws IOException", "public static void stringToFile(String filename, String string) throws IOException", "public static long checksumCrc32(File file) throws FileNotFoundException, IOException", "public static byte[] digest(@NonNull File file, @NonNull String algorithm) throws IOException, NoSuchAlgorithmException", "public static byte[] digest(@NonNull InputStream in, @NonNull String algorithm) throws IOException, NoSuchAlgorithmException", "public static byte[] digest(FileDescriptor fd, String algorithm) throws IOException, NoSuchAlgorithmException", "private static byte[] digestInternalUserspace(InputStream in, String algorithm) throws IOException, NoSuchAlgorithmException", "public static boolean deleteOlderFiles(File dir, int minCount, long minAgeMs)", "public static boolean contains(File[] dirs, File file)", "public static boolean contains(Collection<File> dirs, File file)", "public static boolean contains(File dir, File file)", "public static boolean contains(String dirPath, String filePath)", "public static boolean deleteContentsAndDir(File dir)", "public static boolean deleteContents(File dir)", "private static boolean isValidExtFilenameChar(char c)", "public static boolean isValidExtFilename(String name)", "public static String buildValidExtFilename(String name)", "private static boolean isValidFatFilenameChar(char c)", "public static boolean isValidFatFilename(String name)", "public static String buildValidFatFilename(String name)", "public static String trimFilename(String str, int maxBytes)", "private static void trimFilename(StringBuilder res, int maxBytes)", "public static String rewriteAfterRename(File beforeDir, File afterDir, String path)", "public static String[] rewriteAfterRename(File beforeDir, File afterDir, String[] paths)", "public static File rewriteAfterRename(File beforeDir, File afterDir, File file)", "private static File buildUniqueFileWithExtension(File parent, String name, String ext) throws FileNotFoundException", "public static File buildUniqueFile(File parent, String mimeType, String displayName) throws FileNotFoundException", "public static File buildNonUniqueFile(File parent, String mimeType, String displayName)", "public static File buildUniqueFile(File parent, String displayName) throws FileNotFoundException", "public static String[] splitFileName(String mimeType, String displayName)", "private static File buildFile(File parent, String name, String ext)", "public static String[] listOrEmpty(@Nullable File dir)", "public static File[] listFilesOrEmpty(@Nullable File dir)", "public static File[] listFilesOrEmpty(@Nullable File dir, FilenameFilter filter)", "public static File newFileOrNull(@Nullable String path)", "public static File createDir(File baseDir, String name)", "public static boolean createDir(File dir)", "public static long roundStorageSize(long size)", "public static void closeQuietly(@Nullable AutoCloseable closeable)", "public static void closeQuietly(@Nullable FileDescriptor fd)", "public static int translateModeStringToPosix(String mode)", "public static String translateModePosixToString(int mode)", "public static int translateModePosixToPfd(int mode)", "public static int translateModePfdToPosix(int mode)", "public static int translateModeAccessToPosix(int mode)" ]
}