{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/backup/BackupUtilsTest.java",
  "packageName" : "android.app.backup",
  "className" : "BackupUtilsTest",
  "comment" : "",
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUp() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasIt() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasItsDirectory() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasOtherFile() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListEmpty() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasIt() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListEmpty() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasParent() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListDoesntContainDirectory() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix2() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedAndSecondContainingDirectory() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListContainsFirstNotRelatedAndSecondSameDirectory() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedFileAndSecondSameFile() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File file(String path) throws IOException",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File directory(String path) throws IOException",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Collection<PathWithRequiredFlags> paths(File... files)",
    "returnType" : "Collection<PathWithRequiredFlags>",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mContext" ],
  "methodNames" : [ "public void setUp() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasIt() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasItsDirectory() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasOtherFile() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListEmpty() throws Exception", "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasIt() throws Exception", "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListEmpty() throws Exception", "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListHasParent() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListDoesntContainDirectory() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListHasDirectoryWhoseNameIsPrefix2() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedAndSecondContainingDirectory() throws Exception", "public void testIsFileSpecifiedInPathList_whenDirectoryAndPathListContainsFirstNotRelatedAndSecondSameDirectory() throws Exception", "public void testIsFileSpecifiedInPathList_whenFileAndPathListContainsFirstNotRelatedFileAndSecondSameFile() throws Exception", "private File file(String path) throws IOException", "private File directory(String path) throws IOException", "private Collection<PathWithRequiredFlags> paths(File... files)" ]
}