{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/MethodType.java",
  "packageName" : "java.lang.invoke",
  "className" : "MethodType",
  "comment" : "\n * A method type represents the arguments and return type accepted and\n * returned by a method handle, or the arguments and return type passed\n * and expected  by a method handle caller.  Method types must be properly\n * matched between a method handle and all its callers,\n * and the JVM's operations enforce this matching at, specifically\n * during calls to {@link MethodHandle#invokeExact MethodHandle.invokeExact}\n * and {@link MethodHandle#invoke MethodHandle.invoke}, and during execution\n * of {@code invokedynamic} instructions.\n * <p>\n * The structure is a return type accompanied by any number of parameter types.\n * The types (primitive, {@code void}, and reference) are represented by {@link Class} objects.\n * (For ease of exposition, we treat {@code void} as if it were a type.\n * In fact, it denotes the absence of a return type.)\n * <p>\n * All instances of {@code MethodType} are immutable.\n * Two instances are completely interchangeable if they compare equal.\n * Equality depends on pairwise correspondence of the return and parameter types and on nothing else.\n * <p>\n * This type can be created only by factory methods.\n * All factory methods may cache values, though caching is not guaranteed.\n * Some factory methods are static, while others are virtual methods which\n * modify precursor method types, e.g., by changing a selected parameter.\n * <p>\n * Factory methods which operate on groups of parameter types\n * are systematically presented in two versions, so that both Java arrays and\n * Java lists can be used to work with groups of parameter types.\n * The query methods {@code parameterArray} and {@code parameterList}\n * also provide a choice between arrays and lists.\n * <p>\n * {@code MethodType} objects are sometimes derived from bytecode instructions\n * such as {@code invokedynamic}, specifically from the type descriptor strings associated\n * with the instructions in a class file's constant pool.\n * <p>\n * Like classes and strings, method types can also be represented directly\n * in a class file's constant pool as constants.\n * A method type may be loaded by an {@code ldc} instruction which refers\n * to a suitable {@code CONSTANT_MethodType} constant pool entry.\n * The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.\n * (For full details on method type constants,\n * see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n * <p>\n * When the JVM materializes a {@code MethodType} from a descriptor string,\n * all classes named in the descriptor must be accessible, and will be loaded.\n * (But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)\n * This loading may occur at any time before the {@code MethodType} object is first derived.\n * @author John Rose, JSR 292 EG\n ",
  "links" : [ "Class", "java.lang.invoke.MethodHandle#invoke", "java.lang.invoke.MethodHandle#invokeExact" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " {rtype, {ptype...}}",
    "links" : [ ]
  }, {
    "name" : "rtype",
    "type" : "Class<?>",
    "comment" : " The rtype and ptypes fields define the structural identity of the method type:",
    "links" : [ ]
  }, {
    "name" : "ptypes",
    "type" : "Class<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "form",
    "type" : "MethodTypeForm",
    "comment" : " erased form, plus cached data about primitives",
    "links" : [ ]
  }, {
    "name" : "wrapAlt",
    "type" : "MethodType",
    "comment" : " alternative wrapped/unwrapped version",
    "links" : [ ]
  }, {
    "name" : "methodDescriptor",
    "type" : "String",
    "comment" : " cache for toMethodDescriptorString",
    "links" : [ ]
  }, {
    "name" : "MAX_JVM_ARITY",
    "type" : "int",
    "comment" : " this is mandated by the JVM spec.",
    "links" : [ ]
  }, {
    "name" : "MAX_MH_ARITY",
    "type" : "int",
    "comment" : " deduct one for mh receiver",
    "links" : [ ]
  }, {
    "name" : "MAX_MH_INVOKER_ARITY",
    "type" : "int",
    "comment" : " deduct one more for invoker",
    "links" : [ ]
  }, {
    "name" : "internTable",
    "type" : "ConcurrentWeakInternSet<MethodType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_PTYPES",
    "type" : "Class<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "objectOnlyTypes",
    "type" : "MethodType[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialPersistentFields",
    "type" : "java.io.ObjectStreamField[]",
    "comment" : "\n     * There are no serializable fields for {@code MethodType}.\n     ",
    "links" : [ ]
  }, {
    "name" : "rtypeOffset",
    "type" : "long",
    "comment" : " Support for resetting final fields while deserializing",
    "links" : [ ]
  }, {
    "name" : "ptypesOffset",
    "type" : "long",
    "comment" : " Support for resetting final fields while deserializing",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " MethodTypeForm form()",
    "returnType" : "MethodTypeForm",
    "comment" : "trusted",
    "links" : [ ]
  }, {
    "name" : "public Class<?> rtype()",
    "returnType" : "Class<?>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Class<?>[] ptypes()",
    "returnType" : "Class<?>[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void checkRtype(Class<?> rtype)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkPtype(Class<?> ptype)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int checkPtypes(Class<?>[] ptypes)",
    "returnType" : "int",
    "comment" : " Return number of extra slots (count of long/double args). ",
    "links" : [ ]
  }, {
    "name" : " static void checkSlotCount(int count)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IndexOutOfBoundsException newIndexOutOfBoundsException(Object num)",
    "returnType" : "IndexOutOfBoundsException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype, Class<?>[] ptypes)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates an instance of the given method type.\n     * @param rtype  the return type\n     * @param ptypes the parameter types\n     * @return a method type with the given components\n     * @throws NullPointerException if {@code rtype} or {@code ptypes} or any element of {@code ptypes} is null\n     * @throws IllegalArgumentException if any element of {@code ptypes} is {@code void.class}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype, List<Class<?>> ptypes)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with the given components.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param rtype  the return type\n     * @param ptypes the parameter types\n     * @return a method type with the given components\n     * @throws NullPointerException if {@code rtype} or {@code ptypes} or any element of {@code ptypes} is null\n     * @throws IllegalArgumentException if any element of {@code ptypes} is {@code void.class}\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "private static Class<?>[] listToArray(List<Class<?>> ptypes)",
    "returnType" : "Class<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype, Class<?> ptype0, Class<?>... ptypes)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with the given components.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * The leading parameter type is prepended to the remaining array.\n     * @param rtype  the return type\n     * @param ptype0 the first parameter type\n     * @param ptypes the remaining parameter types\n     * @return a method type with the given components\n     * @throws NullPointerException if {@code rtype} or {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is null\n     * @throws IllegalArgumentException if {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is {@code void.class}\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with the given components.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * The resulting method has no parameter types.\n     * @param rtype  the return type\n     * @return a method type with the given return value\n     * @throws NullPointerException if {@code rtype} is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype, Class<?> ptype0)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with the given components.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * The resulting method has the single given parameter type.\n     * @param rtype  the return type\n     * @param ptype0 the parameter type\n     * @return a method type with the given return value and parameter type\n     * @throws NullPointerException if {@code rtype} or {@code ptype0} is null\n     * @throws IllegalArgumentException if {@code ptype0} is {@code void.class}\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public static MethodType methodType(Class<?> rtype, MethodType ptypes)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with the given components.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * The resulting method has the same parameter types as {@code ptypes},\n     * and the specified return type.\n     * @param rtype  the return type\n     * @param ptypes the method type which supplies the parameter types\n     * @return a method type with the given components\n     * @throws NullPointerException if {@code rtype} or {@code ptypes} is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : " static MethodType makeImpl(Class<?> rtype, Class<?>[] ptypes, boolean trusted)",
    "returnType" : "MethodType",
    "comment" : "trusted",
    "links" : [ ]
  }, {
    "name" : "public static MethodType genericMethodType(int objectArgCount, boolean finalArray)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type whose components are {@code Object} with an optional trailing {@code Object[]} array.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * All parameters and the return type will be {@code Object},\n     * except the final array parameter if any, which will be {@code Object[]}.\n     * @param objectArgCount number of parameters (excluding the final array parameter if any)\n     * @param finalArray whether there will be a trailing array parameter, of type {@code Object[]}\n     * @return a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments\n     * @throws IllegalArgumentException if {@code objectArgCount} is negative or greater than 255 (or 254, if {@code finalArray} is true)\n     * @see #genericMethodType(int)\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public static MethodType genericMethodType(int objectArgCount)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type whose components are all {@code Object}.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * All parameters and the return type will be Object.\n     * @param objectArgCount number of parameters\n     * @return a generally applicable method type, for all calls of the given argument count\n     * @throws IllegalArgumentException if {@code objectArgCount} is negative or greater than 255\n     * @see #genericMethodType(int, boolean)\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType changeParameterType(int num, Class<?> nptype)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with a single different parameter type.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param num    the index (zero-based) of the parameter type to change\n     * @param nptype a new parameter type to replace the old one with\n     * @return the same type, except with the selected parameter changed\n     * @throws IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}\n     * @throws IllegalArgumentException if {@code nptype} is {@code void.class}\n     * @throws NullPointerException if {@code nptype} is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType insertParameterTypes(int num, Class<?>... ptypesToInsert)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with additional parameter types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param num    the position (zero-based) of the inserted parameter type(s)\n     * @param ptypesToInsert zero or more new parameter types to insert into the parameter list\n     * @return the same type, except with the selected parameter(s) inserted\n     * @throws IndexOutOfBoundsException if {@code num} is negative or greater than {@code parameterCount()}\n     * @throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n     *                                  or if the resulting method type would have more than 255 parameter slots\n     * @throws NullPointerException if {@code ptypesToInsert} or any of its elements is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType appendParameterTypes(Class<?>... ptypesToInsert)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with additional parameter types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param ptypesToInsert zero or more new parameter types to insert after the end of the parameter list\n     * @return the same type, except with the selected parameter(s) appended\n     * @throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n     *                                  or if the resulting method type would have more than 255 parameter slots\n     * @throws NullPointerException if {@code ptypesToInsert} or any of its elements is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType insertParameterTypes(int num, List<Class<?>> ptypesToInsert)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with additional parameter types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param num    the position (zero-based) of the inserted parameter type(s)\n     * @param ptypesToInsert zero or more new parameter types to insert into the parameter list\n     * @return the same type, except with the selected parameter(s) inserted\n     * @throws IndexOutOfBoundsException if {@code num} is negative or greater than {@code parameterCount()}\n     * @throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n     *                                  or if the resulting method type would have more than 255 parameter slots\n     * @throws NullPointerException if {@code ptypesToInsert} or any of its elements is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType appendParameterTypes(List<Class<?>> ptypesToInsert)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with additional parameter types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param ptypesToInsert zero or more new parameter types to insert after the end of the parameter list\n     * @return the same type, except with the selected parameter(s) appended\n     * @throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}\n     *                                  or if the resulting method type would have more than 255 parameter slots\n     * @throws NullPointerException if {@code ptypesToInsert} or any of its elements is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : " MethodType replaceParameterTypes(int start, int end, Class<?>... ptypesToInsert)",
    "returnType" : "MethodType",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " MethodType asSpreaderType(Class<?> arrayType, int pos, int arrayLength)",
    "returnType" : "MethodType",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " Class<?> leadingReferenceParameter()",
    "returnType" : "Class<?>",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " MethodType asCollectorType(Class<?> arrayType, int pos, int arrayLength)",
    "returnType" : "MethodType",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : "public MethodType dropParameterTypes(int start, int end)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with some parameter types omitted.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param start  the index (zero-based) of the first parameter type to remove\n     * @param end    the index (greater than {@code start}) of the first parameter type after not to remove\n     * @return the same type, except with the selected parameter(s) removed\n     * @throws IndexOutOfBoundsException if {@code start} is negative or greater than {@code parameterCount()}\n     *                                  or if {@code end} is negative or greater than {@code parameterCount()}\n     *                                  or if {@code start} is greater than {@code end}\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType changeReturnType(Class<?> nrtype)",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates a method type with a different return type.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * @param nrtype a return parameter type to replace the old one with\n     * @return the same type, except with the return type change\n     * @throws NullPointerException if {@code nrtype} is null\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public boolean hasPrimitives()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports if this type contains a primitive argument or return value.\n     * The return type {@code void} counts as a primitive.\n     * @return true if any of the types are primitives\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWrappers()",
    "returnType" : "boolean",
    "comment" : "\n     * Reports if this type contains a wrapper argument or return value.\n     * Wrappers are types which box primitive values, such as {@link Integer}.\n     * The reference type {@code java.lang.Void} counts as a wrapper,\n     * if it occurs as a return type.\n     * @return true if any of the types are wrappers\n     ",
    "links" : [ "Integer" ]
  }, {
    "name" : "public MethodType erase()",
    "returnType" : "MethodType",
    "comment" : "\n     * Erases all reference types to {@code Object}.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * All primitive types (including {@code void}) will remain unchanged.\n     * @return a version of the original type with all reference types replaced\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType generic()",
    "returnType" : "MethodType",
    "comment" : "\n     * Converts all types, both reference and primitive, to {@code Object}.\n     * Convenience method for {@link #genericMethodType(int) genericMethodType}.\n     * The expression {@code type.wrap().erase()} produces the same value\n     * as {@code type.generic()}.\n     * @return a version of the original type with all types replaced\n     ",
    "links" : [ "#genericMethodType(int)" ]
  }, {
    "name" : " boolean isGeneric()",
    "returnType" : "boolean",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : "public MethodType wrap()",
    "returnType" : "MethodType",
    "comment" : "\n     * Converts all primitive types to their corresponding wrapper types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * All reference types (including wrapper types) will remain unchanged.\n     * A {@code void} return type is changed to the type {@code java.lang.Void}.\n     * The expression {@code type.wrap().erase()} produces the same value\n     * as {@code type.generic()}.\n     * @return a version of the original type with all primitive types replaced\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "public MethodType unwrap()",
    "returnType" : "MethodType",
    "comment" : "\n     * Converts all wrapper types to their corresponding primitive types.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * All primitive types (including {@code void}) will remain unchanged.\n     * A return type of {@code java.lang.Void} is changed to {@code void}.\n     * @return a version of the original type with all wrapper types replaced\n     ",
    "links" : [ "#methodType(java.lang.Class" ]
  }, {
    "name" : "private static MethodType wrapWithPrims(MethodType pt)",
    "returnType" : "MethodType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MethodType unwrapWithNoPrims(MethodType wt)",
    "returnType" : "MethodType",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Class<?> parameterType(int num)",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the parameter type at the specified index, within this method type.\n     * @param num the index (zero-based) of the desired parameter type\n     * @return the selected parameter type\n     * @throws IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int parameterCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of parameter types in this method type.\n     * @return the number of parameter types\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> returnType()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the return type of this method type.\n     * @return the return type\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Class<?>> parameterList()",
    "returnType" : "List<Class<?>>",
    "comment" : "\n     * Presents the parameter types as a list (a convenience method).\n     * The list will be immutable.\n     * @return the parameter types (as an immutable list)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> lastParameterType()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the last parameter type of this method type.\n     * If this type has no parameters, the sentinel value\n     * {@code void.class} is returned instead.\n     * @apiNote\n     * <p>\n     * The sentinel value is chosen so that reflective queries can be\n     * made directly against the result value.\n     * The sentinel value cannot be confused with a real parameter,\n     * since {@code void} is never acceptable as a parameter type.\n     * For variable arity invocation modes, the expression\n     * {@link Class#getComponentType lastParameterType().getComponentType()}\n     * is useful to query the type of the \"varargs\" parameter.\n     * @return the last parameter type if any, else {@code void.class}\n     * @since 10\n     ",
    "links" : [ "#getComponentType" ]
  }, {
    "name" : "public Class<?>[] parameterArray()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * Presents the parameter types as an array (a convenience method).\n     * Changes to the array will not result in changes to the type.\n     * @return the parameter types (as a fresh copy if necessary)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object x)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this type for equality.\n     * That is, it returns <tt>true</tt> if and only if the specified object\n     * is also a method type with exactly the same parameters and return type.\n     * @param x object to compare\n     * @see Object#equals(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean equals(MethodType that)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this method type.\n     * It is defined to be the same as the hashcode of a List\n     * whose elements are the return type followed by the\n     * parameter types.\n     * @return the hash code value for this method type\n     * @see Object#hashCode()\n     * @see #equals(Object)\n     * @see List#hashCode()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the method type,\n     * of the form {@code \"(PT0,PT1...)RT\"}.\n     * The string representation of a method type is a\n     * parenthesis enclosed, comma separated list of type names,\n     * followed immediately by the return type.\n     * <p>\n     * Each type is represented by its\n     * {@link java.lang.Class#getSimpleName simple name}.\n     ",
    "links" : [ "java.lang.Class#getSimpleName" ]
  }, {
    "name" : " boolean effectivelyIdenticalParameters(int skipPos, List<Class<?>> fullList)",
    "returnType" : "boolean",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " boolean isConvertibleTo(MethodType newType)",
    "returnType" : "boolean",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " boolean explicitCastEquivalentToAsType(MethodType newType)",
    "returnType" : "boolean",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : "private static boolean explicitCastEquivalentToAsType(Class<?> src, Class<?> dst)",
    "returnType" : "boolean",
    "comment" : " Reports true if the src can be converted to the dst, by both asType and MHs.eCE,\n     *  and with the same effect.\n     *  MHs.eCA has the following \"upgrades\" to MH.asType:\n     *  1. interfaces are unchecked (that is, treated as if aliased to Object)\n     *     Therefore, {@code Object->CharSequence} is possible in both cases but has different semantics\n     *  2a. the full matrix of primitive-to-primitive conversions is supported\n     *      Narrowing like {@code long->byte} and basic-typing like {@code boolean->int}\n     *      are not supported by asType, but anything supported by asType is equivalent\n     *      with MHs.eCE.\n     *  2b. conversion of void->primitive means explicit cast has to insert zero/false/null.\n     *  3a. unboxing conversions can be followed by the full matrix of primitive conversions\n     *  3b. unboxing of null is permitted (creates a zero primitive value)\n     * Other than interfaces, reference-to-reference conversions are the same.\n     * Boxing primitives to references is the same for both operators.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean canConvertParameters(Class<?>[] srcTypes, Class<?>[] dstTypes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean canConvert(Class<?> src, Class<?> dst)",
    "returnType" : "boolean",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : " int parameterSlotCount()",
    "returnType" : "int",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : "public static MethodType fromMethodDescriptorString(String descriptor, ClassLoader loader) throws IllegalArgumentException, TypeNotPresentException",
    "returnType" : "MethodType",
    "comment" : "\n     * Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.\n     * Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.\n     * Any class or interface name embedded in the descriptor string\n     * will be resolved by calling {@link ClassLoader#loadClass(java.lang.String)}\n     * on the given loader (or if it is null, on the system class loader).\n     * <p>\n     * Note that it is possible to encounter method types which cannot be\n     * constructed by this method, because their component types are\n     * not all reachable from a common class loader.\n     * <p>\n     * This method is included for the benefit of applications that must\n     * generate bytecodes that process method handles and {@code invokedynamic}.\n     * @param descriptor a bytecode-level type descriptor string \"(T...)T\"\n     * @param loader the class loader in which to look up the types\n     * @return a method type matching the bytecode-level type descriptor\n     * @throws NullPointerException if the string is null\n     * @throws IllegalArgumentException if the string is not well-formed\n     * @throws TypeNotPresentException if a named type cannot be found\n     ",
    "links" : [ "#methodType(java.lang.Class", "#loadClass(java.lang.String)" ]
  }, {
    "name" : "public String toMethodDescriptorString()",
    "returnType" : "String",
    "comment" : "\n     * Produces a bytecode descriptor representation of the method type.\n     * <p>\n     * Note that this is not a strict inverse of {@link #fromMethodDescriptorString fromMethodDescriptorString}.\n     * Two distinct classes which share a common name but have different class loaders\n     * will appear identical when viewed within descriptor strings.\n     * <p>\n     * This method is included for the benefit of applications that must\n     * generate bytecodes that process method handles and {@code invokedynamic}.\n     * {@link #fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) fromMethodDescriptorString},\n     * because the latter requires a suitable class loader argument.\n     * @return the bytecode type descriptor representation\n     ",
    "links" : [ "#fromMethodDescriptorString(java.lang.String", "#fromMethodDescriptorString" ]
  }, {
    "name" : "public String descriptorString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a descriptor string for this method type.\n     *\n     * <p>\n     * If this method type can be <a href=\"#descriptor\">described nominally</a>,\n     * then the result is a method type descriptor (JVMS {@jvms 4.3.3}).\n     * <p>\n     * If this method type cannot be <a href=\"#descriptor\">described nominally</a>\n     * and the result is a string of the form:\n     * <blockquote>{@code \"(<parameter-descriptors>)<return-descriptor>\"}</blockquote>\n     * where {@code <parameter-descriptors>} is the concatenation of the\n     * {@linkplain Class#descriptorString() descriptor string} of all\n     * of the parameter types and the {@linkplain Class#descriptorString() descriptor string}\n     * of the return type.\n     *\n     * @return the descriptor string for this method type\n     * @since 12\n     * @jvms 4.3.3 Method Descriptors\n     * @see <a href=\"#descriptor\">Nominal Descriptor for {@code MethodType}</a>\n     ",
    "links" : [ ]
  }, {
    "name" : " static String toFieldDescriptorString(Class<?> cls)",
    "returnType" : "String",
    "comment" : "non-public",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the {@code MethodType} instance to a stream.\n     *\n     * @serialData\n     * For portability, the serialized format does not refer to named fields.\n     * Instead, the return type and parameter type arrays are written directly\n     * from the {@code writeObject} method, using two calls to {@code s.writeObject}\n     * as follows:\n     * <blockquote><pre>{@code\ns.writeObject(this.returnType());\ns.writeObject(this.parameterArray());\n     * }</pre></blockquote>\n     * <p>\n     * The deserialized field values are checked as if they were\n     * provided to the factory method {@link #methodType(Class,Class[]) methodType}.\n     * For example, null values, or {@code void} parameter types,\n     * will lead to exceptions during deserialization.\n     * @param s the stream to write the object to\n     * @throws java.io.IOException if there is a problem writing the object\n     ",
    "links" : [ "#methodType(Class" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitute the {@code MethodType} instance from a stream (that is,\n     * deserialize it).\n     * This instance is a scratch object with bogus final fields.\n     * It provides the parameters to the factory method called by\n     * {@link #readResolve readResolve}.\n     * After that call it is discarded.\n     * @param s the stream to read the object from\n     * @throws java.io.IOException if there is a problem reading the object\n     * @throws ClassNotFoundException if one of the component classes cannot be resolved\n     * @see #MethodType()\n     * @see #readResolve\n     * @see #writeObject\n     ",
    "links" : [ "#readResolve" ]
  }, {
    "name" : "private void MethodType_init(Class<?> rtype, Class<?>[] ptypes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object readResolve()",
    "returnType" : "Object",
    "comment" : "\n     * Resolves and initializes a {@code MethodType} object\n     * after serialization.\n     * @return the fully initialized {@code MethodType} object\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " MethodTypeForm form()", "public Class<?> rtype()", "public Class<?>[] ptypes()", "private static void checkRtype(Class<?> rtype)", "private static void checkPtype(Class<?> ptype)", "private static int checkPtypes(Class<?>[] ptypes)", " static void checkSlotCount(int count)", "private static IndexOutOfBoundsException newIndexOutOfBoundsException(Object num)", "public static MethodType methodType(Class<?> rtype, Class<?>[] ptypes)", "public static MethodType methodType(Class<?> rtype, List<Class<?>> ptypes)", "private static Class<?>[] listToArray(List<Class<?>> ptypes)", "public static MethodType methodType(Class<?> rtype, Class<?> ptype0, Class<?>... ptypes)", "public static MethodType methodType(Class<?> rtype)", "public static MethodType methodType(Class<?> rtype, Class<?> ptype0)", "public static MethodType methodType(Class<?> rtype, MethodType ptypes)", " static MethodType makeImpl(Class<?> rtype, Class<?>[] ptypes, boolean trusted)", "public static MethodType genericMethodType(int objectArgCount, boolean finalArray)", "public static MethodType genericMethodType(int objectArgCount)", "public MethodType changeParameterType(int num, Class<?> nptype)", "public MethodType insertParameterTypes(int num, Class<?>... ptypesToInsert)", "public MethodType appendParameterTypes(Class<?>... ptypesToInsert)", "public MethodType insertParameterTypes(int num, List<Class<?>> ptypesToInsert)", "public MethodType appendParameterTypes(List<Class<?>> ptypesToInsert)", " MethodType replaceParameterTypes(int start, int end, Class<?>... ptypesToInsert)", " MethodType asSpreaderType(Class<?> arrayType, int pos, int arrayLength)", " Class<?> leadingReferenceParameter()", " MethodType asCollectorType(Class<?> arrayType, int pos, int arrayLength)", "public MethodType dropParameterTypes(int start, int end)", "public MethodType changeReturnType(Class<?> nrtype)", "public boolean hasPrimitives()", "public boolean hasWrappers()", "public MethodType erase()", "public MethodType generic()", " boolean isGeneric()", "public MethodType wrap()", "public MethodType unwrap()", "private static MethodType wrapWithPrims(MethodType pt)", "private static MethodType unwrapWithNoPrims(MethodType wt)", "public Class<?> parameterType(int num)", "public int parameterCount()", "public Class<?> returnType()", "public List<Class<?>> parameterList()", "public Class<?> lastParameterType()", "public Class<?>[] parameterArray()", "public boolean equals(Object x)", "private boolean equals(MethodType that)", "public int hashCode()", "public String toString()", " boolean effectivelyIdenticalParameters(int skipPos, List<Class<?>> fullList)", " boolean isConvertibleTo(MethodType newType)", " boolean explicitCastEquivalentToAsType(MethodType newType)", "private static boolean explicitCastEquivalentToAsType(Class<?> src, Class<?> dst)", "private boolean canConvertParameters(Class<?>[] srcTypes, Class<?>[] dstTypes)", " static boolean canConvert(Class<?> src, Class<?> dst)", " int parameterSlotCount()", "public static MethodType fromMethodDescriptorString(String descriptor, ClassLoader loader) throws IllegalArgumentException, TypeNotPresentException", "public String toMethodDescriptorString()", "public String descriptorString()", " static String toFieldDescriptorString(Class<?> cls)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "private void MethodType_init(Class<?> rtype, Class<?>[] ptypes)", "private Object readResolve()" ],
  "variableNames" : [ "serialVersionUID", "rtype", "ptypes", "form", "wrapAlt", "methodDescriptor", "MAX_JVM_ARITY", "MAX_MH_ARITY", "MAX_MH_INVOKER_ARITY", "internTable", "NO_PTYPES", "objectOnlyTypes", "serialPersistentFields", "rtypeOffset", "ptypesOffset" ]
}