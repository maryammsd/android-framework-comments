{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/le/DistanceMeasurementParams.java",
  "packageName" : "android.bluetooth.le",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link DistanceMeasurementParams}.\n     *\n     * @hide\n     ",
  "links" : [ "android.bluetooth.le.DistanceMeasurementParams" ],
  "variables" : [ {
    "name" : "mDevice",
    "type" : "BluetoothDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMethodId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelSoundingParams",
    "type" : "ChannelSoundingParams",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setDurationSeconds(@IntRange(from = 0) int duration)",
    "returnType" : "Builder",
    "comment" : "\n         * Set duration in seconds for the DistanceMeasurementParams. Once the distance measurement\n         * successfully started, the Bluetooth process will keep reporting the measurement result\n         * until this time has been reached or the session is explicitly stopped with {@link\n         * DistanceMeasurementSession#stopSession}.\n         *\n         * @param duration duration in seconds of this DistanceMeasurementParams\n         * @return the same Builder instance\n         * @throws IllegalArgumentException if duration greater than {@link\n         *     DistanceMeasurementParams#getMaxDurationSeconds()} or less than zero.\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.DistanceMeasurementParams#getMaxDurationSeconds()", "android.bluetooth.le.DistanceMeasurementSession#stopSession" ]
  }, {
    "name" : "public Builder setFrequency(@ReportFrequency int frequency)",
    "returnType" : "Builder",
    "comment" : "\n         * Set frequency for the DistanceMeasurementParams. The Bluetooth process uses this value to\n         * determine report frequency of the measurement result.\n         *\n         * @param frequency frequency of this DistanceMeasurementParams\n         * @return the same Builder instance\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMethodId(@DistanceMeasurementMethodId int methodId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set method id for the DistanceMeasurementParams.\n         *\n         * @param methodId method id of this DistanceMeasurementParams\n         * @return the same Builder instance\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setChannelSoundingParams(@NonNull ChannelSoundingParams channelSoundingParams)",
    "returnType" : "Builder",
    "comment" : "\n         * Set {@link ChannelSoundingParams} for the DistanceMeasurementParams.\n         *\n         * @param channelSoundingParams parameters for Channel Sounding\n         * @return the same Builder instance\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.ChannelSoundingParams" ]
  }, {
    "name" : "public DistanceMeasurementParams build()",
    "returnType" : "DistanceMeasurementParams",
    "comment" : "\n         * Build the {@link DistanceMeasurementParams} object.\n         *\n         * @hide\n         ",
    "links" : [ "android.bluetooth.le.DistanceMeasurementParams" ]
  } ],
  "methodNames" : [ "public Builder setDurationSeconds(@IntRange(from = 0) int duration)", "public Builder setFrequency(@ReportFrequency int frequency)", "public Builder setMethodId(@DistanceMeasurementMethodId int methodId)", "public Builder setChannelSoundingParams(@NonNull ChannelSoundingParams channelSoundingParams)", "public DistanceMeasurementParams build()" ],
  "variableNames" : [ "mDevice", "mDuration", "mFrequency", "mMethodId", "mChannelSoundingParams" ]
}