{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/SoftApConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "SoftApConfiguration",
  "comment" : "\n * Configuration for a soft access point (a.k.a. Soft AP, SAP, Hotspot).\n *\n * This is input for the framework provided by a client app, i.e. it exposes knobs to instruct the\n * framework how it should configure a hotspot.\n *\n * System apps can use this to configure a tethered hotspot using\n * {@code WifiManager#startTetheredHotspot(SoftApConfiguration)} and\n * {@code WifiManager#setSoftApConfiguration(SoftApConfiguration)}\n * or local-only hotspot using\n * {@code WifiManager#startLocalOnlyHotspot(SoftApConfiguration, Executor,\n * WifiManager.LocalOnlyHotspotCallback)}.\n *\n * Instances of this class are immutable; use {@link SoftApConfiguration.Builder} and its methods to\n * create a new instance.\n *\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSK_MIN_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSK_MAX_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BAND_2GHZ",
    "type" : "int",
    "comment" : "\n     * 2GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5GHZ",
    "type" : "int",
    "comment" : "\n     * 5GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6GHZ",
    "type" : "int",
    "comment" : "\n     * 6GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_ANY",
    "type" : "int",
    "comment" : "\n     * Device is allowed to choose the optimal band (2Ghz, 5Ghz, 6Ghz) based on device capability,\n     * operating country code and current radio conditions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_2G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_2G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_5G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_5G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_6G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_6G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSsid",
    "type" : "String",
    "comment" : "\n     * SSID for the AP, or null for a framework-determined SSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBssid",
    "type" : "MacAddress",
    "comment" : "\n     * BSSID for the AP, or null to use a framework-determined BSSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPassphrase",
    "type" : "String",
    "comment" : "\n     * Pre-shared key for WPA2-PSK or WPA3-SAE-Transition or WPA3-SAE encryption which depends on\n     * the security type.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHiddenSsid",
    "type" : "boolean",
    "comment" : "\n     * This is a network that does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "\n     * The operating band of the AP.\n     * One or combination of the following band type:\n     * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, {@link #BAND_6GHZ}.\n     ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#BAND_6GHZ" ]
  }, {
    "name" : "mChannel",
    "type" : "int",
    "comment" : "\n     * The operating channel of the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxNumberOfClients",
    "type" : "int",
    "comment" : "\n     * The maximim allowed number of clients that can associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSecurityType",
    "type" : "int",
    "comment" : "\n     * The operating security type of the AP.\n     * One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WPA2_PSK},\n     * {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_SAE}\n     ",
    "links" : [ "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WPA3_SAE_TRANSITION", "#SECURITY_TYPE_WPA3_SAE", "#SECURITY_TYPE_WPA2_PSK" ]
  }, {
    "name" : "mClientControlByUser",
    "type" : "boolean",
    "comment" : "\n     * The flag to indicate client need to authorize by user\n     * when client is connecting to AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBlockedClientList",
    "type" : "List<MacAddress>",
    "comment" : "\n     * The list of blocked client that can't associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAllowedClientList",
    "type" : "List<MacAddress>",
    "comment" : "\n     * The list of allowed client that can associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutoShutdownEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether auto shutdown of soft AP is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "\n     * Delay in milliseconds before shutting down soft AP when\n     * there are no connected devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_OPEN",
    "type" : "int",
    "comment" : "\n     * THe definition of security type OPEN.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA2_PSK",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA2-PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_SAE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-SAE Transition mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_SAE",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SoftApConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isBandValid(@BandType int band)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isChannelBandPairValid(int channel, @BandType int band)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object otherObj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSsid()",
    "returnType" : "String",
    "comment" : "\n     * Return String set to be the SSID for the AP.\n     * {@link Builder#setSsid(String)}.\n     ",
    "links" : [ "#setSsid(String)" ]
  }, {
    "name" : "public MacAddress getBssid()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns MAC address set to be BSSID for the AP.\n     * {@link Builder#setBssid(MacAddress)}.\n     ",
    "links" : [ "#setBssid(MacAddress)" ]
  }, {
    "name" : "public String getPassphrase()",
    "returnType" : "String",
    "comment" : "\n     * Returns String set to be passphrase for current AP.\n     * {@link Builder#setPassphrase(String, int)}.\n     ",
    "links" : [ "#setPassphrase(String" ]
  }, {
    "name" : "public boolean isHiddenSsid()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns Boolean set to be indicate hidden (true: doesn't broadcast its SSID) or\n     * not (false: broadcasts its SSID) for the AP.\n     * {@link Builder#setHiddenSsid(boolean)}.\n     ",
    "links" : [ "#setHiddenSsid(boolean)" ]
  }, {
    "name" : "public int getBand()",
    "returnType" : "int",
    "comment" : "\n     * Returns band type set to be the band for the AP.\n     *\n     * One or combination of the following band type:\n     * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, {@link #BAND_6GHZ}.\n     *\n     * {@link Builder#setBand(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#BAND_6GHZ", "#setBand(int)" ]
  }, {
    "name" : "public int getChannel()",
    "returnType" : "int",
    "comment" : "\n     * Returns Integer set to be the channel for the AP.\n     * {@link Builder#setChannel(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setChannel(int)" ]
  }, {
    "name" : "public int getSecurityType()",
    "returnType" : "int",
    "comment" : "\n     * Get security type params which depends on which security passphrase to set.\n     *\n     * @return One of:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WPA2_PSK},\n     * {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_SAE}\n     ",
    "links" : [ "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WPA3_SAE_TRANSITION", "#SECURITY_TYPE_WPA3_SAE", "#SECURITY_TYPE_WPA2_PSK" ]
  }, {
    "name" : "public int getMaxNumberOfClients()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of clients that can associate to the AP.\n     * {@link Builder#setMaxNumberOfClients(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setMaxNumberOfClients(int)" ]
  }, {
    "name" : "public boolean isAutoShutdownEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether auto shutdown is enabled or not.\n     * The Soft AP will shutdown when there are no devices associated to it for\n     * the timeout duration. See {@link Builder#setAutoShutdownEnabled(boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setAutoShutdownEnabled(boolean)" ]
  }, {
    "name" : "public long getShutdownTimeoutMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the shutdown timeout in milliseconds.\n     * The Soft AP will shutdown when there are no devices associated to it for\n     * the timeout duration. See {@link Builder#setShutdownTimeoutMillis(long)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "public boolean isClientControlByUserEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a flag indicating whether clients need to be pre-approved by the user.\n     * (true: authorization required) or not (false: not required).\n     * {@link Builder#setClientControlByUserEnabled(Boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setClientControlByUserEnabled(Boolean)" ]
  }, {
    "name" : "public List<MacAddress> getBlockedClientList()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * Returns List of clients which aren't allowed to associate to the AP.\n     *\n     * Clients are configured using {@link Builder#setBlockedClientList(List)}\n     *\n     * @hide\n     ",
    "links" : [ "#setBlockedClientList(List)" ]
  }, {
    "name" : "public List<MacAddress> getAllowedClientList()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * List of clients which are allowed to associate to the AP.\n     * Clients are configured using {@link Builder#setAllowedClientList(List)}\n     *\n     * @hide\n     ",
    "links" : [ "#setAllowedClientList(List)" ]
  }, {
    "name" : "public WifiConfiguration toWifiConfiguration()",
    "returnType" : "WifiConfiguration",
    "comment" : "\n     * Returns a {@link WifiConfiguration} representation of this {@link SoftApConfiguration}.\n     * Note that SoftApConfiguration may contain configuration which is cannot be represented\n     * by the legacy WifiConfiguration, in such cases a null will be returned.\n     *\n     * <li> SoftAp band in {@link WifiConfiguration.apBand} only supports\n     * 2GHz, 5GHz, 2GHz+5GHz bands, so conversion is limited to these bands. </li>\n     *\n     * <li> SoftAp security type in {@link WifiConfiguration.KeyMgmt} only supports\n     * NONE, WPA2_PSK, so conversion is limited to these security type.</li>\n     * @hide\n     ",
    "links" : [ "WifiConfiguration.apBand", "WifiConfiguration.KeyMgmt", "android.net.wifi.SoftApConfiguration", "android.net.wifi.WifiConfiguration" ]
  } ],
  "variableNames" : [ "TAG", "PSK_MIN_LEN", "PSK_MAX_LEN", "BAND_2GHZ", "BAND_5GHZ", "BAND_6GHZ", "BAND_ANY", "MIN_CH_2G_BAND", "MAX_CH_2G_BAND", "MIN_CH_5G_BAND", "MAX_CH_5G_BAND", "MIN_CH_6G_BAND", "MAX_CH_6G_BAND", "mSsid", "mBssid", "mPassphrase", "mHiddenSsid", "mBand", "mChannel", "mMaxNumberOfClients", "mSecurityType", "mClientControlByUser", "mBlockedClientList", "mAllowedClientList", "mAutoShutdownEnabled", "mShutdownTimeoutMillis", "SECURITY_TYPE_OPEN", "SECURITY_TYPE_WPA2_PSK", "SECURITY_TYPE_WPA3_SAE_TRANSITION", "SECURITY_TYPE_WPA3_SAE", "CREATOR" ],
  "methodNames" : [ "private static boolean isBandValid(@BandType int band)", "private static boolean isChannelBandPairValid(int channel, @BandType int band)", "public boolean equals(Object otherObj)", "public int hashCode()", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public int describeContents()", "public String getSsid()", "public MacAddress getBssid()", "public String getPassphrase()", "public boolean isHiddenSsid()", "public int getBand()", "public int getChannel()", "public int getSecurityType()", "public int getMaxNumberOfClients()", "public boolean isAutoShutdownEnabled()", "public long getShutdownTimeoutMillis()", "public boolean isClientControlByUserEnabled()", "public List<MacAddress> getBlockedClientList()", "public List<MacAddress> getAllowedClientList()", "public WifiConfiguration toWifiConfiguration()" ]
}