{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/SoftApConfiguration.java",
  "packageName" : "android.net.wifi",
  "className" : "SoftApConfiguration",
  "comment" : "\n * Configuration for a soft access point (a.k.a. Soft AP, SAP, Hotspot).\n *\n * <p>This is input for the framework provided by a client app, i.e. it exposes knobs to instruct\n * the framework how it should configure a hotspot.\n *\n * <p>System apps can use this to configure a tethered hotspot or local-only hotspot.\n *\n * <p>Instances of this class are immutable.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSK_MIN_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PSK_MAX_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BAND_2GHZ",
    "type" : "int",
    "comment" : "\n     * 2GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5GHZ",
    "type" : "int",
    "comment" : "\n     * 5GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6GHZ",
    "type" : "int",
    "comment" : "\n     * 6GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_60GHZ",
    "type" : "int",
    "comment" : "\n     * 60GHz band.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_ANY",
    "type" : "int",
    "comment" : "\n     * Device is allowed to choose the optimal band (2GHz, 5GHz, 6GHz) based on device capability,\n     * operating country code and current radio conditions.\n     * @hide\n     *\n     * @deprecated This is no longer supported. The value is fixed at\n     * (BAND_2GHZ | BAND_5GHZ | BAND_6GHZ) even if a new band is supported in the future, for\n     * instance {@code BAND_60GHZ}. The bands are a bit mask - use any combination of\n     * {@code BAND_}, for instance {@code BAND_2GHZ | BAND_5GHZ}.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TIMEOUT",
    "type" : "long",
    "comment" : "\n     * A default value used to configure shut down timeout setting to default value.\n     * See {@link Builder#setShutdownTimeoutMillis(long)} or\n     * {@link Builder#setBridgedModeOpportunisticShutdownTimeoutMillis(long)} for details.\n     *\n     * @hide\n     ",
    "links" : [ "#setBridgedModeOpportunisticShutdownTimeoutMillis(long)", "#setShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "BAND_TYPES",
    "type" : "int[]",
    "comment" : "\n     * All of the supported band types.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_2G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_2G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_5G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_5G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_6G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_6G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_CH_60G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_CH_60G_BAND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORCE_MUTUAL_EXCLUSIVE_BSSID_MAC_RAMDONIZATION_SETTING",
    "type" : "long",
    "comment" : "\n     * Requires to configure MAC randomization setting to None when configuring BSSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_ZERO_FOR_TIMEOUT_SETTING",
    "type" : "long",
    "comment" : "\n     * Removes zero support on\n     * {@link android.net.wifi.SoftApConfiguration.Builder#setShutdownTimeoutMillis(long)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.SoftApConfiguration.Builder#setShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "mWifiSsid",
    "type" : "WifiSsid",
    "comment" : "\n     * SSID for the AP, or null for a framework-determined SSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBssid",
    "type" : "MacAddress",
    "comment" : "\n     * BSSID for the AP, or null to use a framework-determined BSSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendorElements",
    "type" : "List<ScanResult.InformationElement>",
    "comment" : "\n     * Vendor elements for the AP, structured as dd+len+elements\n     ",
    "links" : [ ]
  }, {
    "name" : "mPassphrase",
    "type" : "String",
    "comment" : "\n     * Pre-shared key for WPA2-PSK or WPA3-SAE-Transition or WPA3-SAE encryption which depends on\n     * the security type.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHiddenSsid",
    "type" : "boolean",
    "comment" : "\n     * This is a network that does not broadcast its SSID, so an\n     * SSID-specific probe request must be used for scans.\n     ",
    "links" : [ ]
  }, {
    "name" : "mChannels",
    "type" : "SparseIntArray",
    "comment" : "\n     * The operating channels of the dual APs.\n     *\n     * The SparseIntArray that consists the band and the channel of matching the band.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAllowedAcsChannels2g",
    "type" : "Set<Integer>",
    "comment" : "\n     * The set of allowed channels in 2.4GHz band to select from using ACS (Automatic Channel\n     * Selection) algorithm.\n     *\n     * Requires the driver to support {@link SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD}.\n     * Otherwise, this set will be ignored.\n     *\n     * If the set is empty, then all channels in 2.4GHz band are allowed.\n     ",
    "links" : [ "android.net.wifi.SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD" ]
  }, {
    "name" : "mAllowedAcsChannels5g",
    "type" : "Set<Integer>",
    "comment" : "\n     * The set of allowed channels in 5GHz band to select from using ACS (Automatic Channel\n     * Selection) algorithm.\n     *\n     * Requires the driver to support {@link SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD}.\n     * Otherwise, this set will be ignored.\n     *\n     * If the set is empty, then all channels in 5GHz are allowed.\n     ",
    "links" : [ "android.net.wifi.SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD" ]
  }, {
    "name" : "mAllowedAcsChannels6g",
    "type" : "Set<Integer>",
    "comment" : "\n     * The set of allowed channels in 6GHz band to select from using ACS (Automatic Channel\n     * Selection) algorithm.\n     *\n     * Requires the driver to support {@link SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD}.\n     * Otherwise, this set will be ignored.\n     *\n     * If the set is empty, then all channels in 6GHz are allowed.\n     ",
    "links" : [ "android.net.wifi.SoftApCapability#SOFTAP_FEATURE_ACS_OFFLOAD" ]
  }, {
    "name" : "mMaxChannelBandwidth",
    "type" : "int",
    "comment" : "\n     * The maximum channel bandwidth for SoftAp operation\n     *\n     * Default value is SoftApInfo#CHANNEL_WIDTH_AUTO which means the channel bandwidth\n     * is to be selected by the chip based on device capabilities.\n     * <p>\n     *\n     * Valid values: {@link SoftApInfo#CHANNEL_WIDTH_AUTO},\n     * {@link SoftApInfo#CHANNEL_WIDTH_20MHZ}, {@link SoftApInfo#CHANNEL_WIDTH_40MHZ},\n     * {@link SoftApInfo#CHANNEL_WIDTH_80MHZ}, {@link SoftApInfo#CHANNEL_WIDTH_160MHZ},\n     * {@link SoftApInfo#CHANNEL_WIDTH_320MHZ}\n     *\n     ",
    "links" : [ "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_20MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_80MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_160MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_AUTO", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_320MHZ", "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_40MHZ" ]
  }, {
    "name" : "mMaxNumberOfClients",
    "type" : "int",
    "comment" : "\n     * The maximim allowed number of clients that can associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSecurityType",
    "type" : "int",
    "comment" : "\n     * The operating security type of the AP.\n     * One of the following security types:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WPA2_PSK},\n     * {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_SAE},\n     * {@link #SECURITY_TYPE_WPA3_OWE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_OWE}\n     ",
    "links" : [ "#SECURITY_TYPE_WPA3_OWE", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WPA3_SAE_TRANSITION", "#SECURITY_TYPE_WPA3_SAE", "#SECURITY_TYPE_WPA3_OWE_TRANSITION", "#SECURITY_TYPE_WPA2_PSK" ]
  }, {
    "name" : "mClientControlByUser",
    "type" : "boolean",
    "comment" : "\n     * The flag to indicate client need to authorize by user\n     * when client is connecting to AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBlockedClientList",
    "type" : "List<MacAddress>",
    "comment" : "\n     * The list of blocked client that can't associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAllowedClientList",
    "type" : "List<MacAddress>",
    "comment" : "\n     * The list of allowed client that can associate to the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAutoShutdownEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether auto shutdown of soft AP is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "\n     * Delay in milliseconds before shutting down soft AP when\n     * there are no connected devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_NONE",
    "type" : "int",
    "comment" : "\n     * Use the factory MAC address as the BSSID of the AP.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Generate a persistent randomized MAC address as the BSSID of the AP.\n     * The MAC address is persisted per SSID - i.e. as long as the SSID of the AP doesn't change\n     * then it will have a persistent MAC address (which is initially random and is not the factory\n     * MAC address).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RANDOMIZATION_NON_PERSISTENT",
    "type" : "int",
    "comment" : "\n     * Generate a randomized MAC address as the BSSID of the AP. The MAC address is not persisted\n     * - it is re-generated every time the AP is re-enabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mMacRandomizationSetting",
    "type" : "int",
    "comment" : "\n     * Level of MAC randomization for the AP BSSID.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBridgedModeOpportunisticShutdownEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether opportunistic shutdown of an instance in bridged AP is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIeee80211axEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether 802.11ax AP is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIeee80211beEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether 802.11be AP is enabled or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsUserConfiguration",
    "type" : "boolean",
    "comment" : "\n     * Whether the current configuration is configured by user or not.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPersistentRandomizedMacAddress",
    "type" : "MacAddress",
    "comment" : "\n     * Randomized MAC address to use with this configuration when MAC randomization setting\n     * is {@link #RANDOMIZATION_PERSISTENT}.\n     ",
    "links" : [ "#RANDOMIZATION_PERSISTENT" ]
  }, {
    "name" : "mBridgedModeOpportunisticShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "\n     * Delay in milliseconds before shutting down an instance in bridged AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : " List of {@link OuiKeyedData} providing vendor-specific configuration data. ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "SECURITY_TYPE_OPEN",
    "type" : "int",
    "comment" : "\n     * THe definition of security type OPEN.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA2_PSK",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA2-PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_SAE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-SAE Transition mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_SAE",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_OWE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-OWE Transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURITY_TYPE_WPA3_OWE",
    "type" : "int",
    "comment" : "\n     * The definition of security type WPA3-OWE.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SoftApConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isBandValid(@BandType int band)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isChannelBandPairValid(int channel, @BandType int band)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object otherObj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeSparseIntArray(@NonNull Parcel dest, @Nullable SparseIntArray val)",
    "returnType" : "void",
    "comment" : " Reference from frameworks/base/core/java/android/os/Parcel.java ",
    "links" : [ ]
  }, {
    "name" : "private static SparseIntArray readSparseIntArray(@NonNull Parcel in)",
    "returnType" : "SparseIntArray",
    "comment" : " Reference from frameworks/base/core/java/android/os/Parcel.java ",
    "links" : [ ]
  }, {
    "name" : "private static void writeHashSetInt(@NonNull Parcel dest, @NonNull Set<Integer> set)",
    "returnType" : "void",
    "comment" : " Write HashSet<Integer> into Parcel ",
    "links" : [ ]
  }, {
    "name" : "private static Set<Integer> readHashSetInt(@NonNull Parcel in)",
    "returnType" : "Set<Integer>",
    "comment" : " Read HashSet<Integer> from Parcel ",
    "links" : [ ]
  }, {
    "name" : "private static List<OuiKeyedData> readOuiKeyedDataList(@NonNull Parcel in)",
    "returnType" : "List<OuiKeyedData>",
    "comment" : " Read List<OuiKeyedData> from Parcel ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSsid()",
    "returnType" : "String",
    "comment" : "\n     * Return the UTF-8 String set to be the SSID for the AP. If the SSID cannot be decoded as\n     * UTF-8, then this will return {@link WifiManager#UNKNOWN_SSID}.\n     *\n     * @deprecated Use {@link #getWifiSsid()} instead.\n     ",
    "links" : [ "#getWifiSsid()", "android.net.wifi.WifiManager#UNKNOWN_SSID" ]
  }, {
    "name" : "public WifiSsid getWifiSsid()",
    "returnType" : "WifiSsid",
    "comment" : "\n     * Return WifiSsid set to be the SSID for the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ScanResult.InformationElement> getVendorElements()",
    "returnType" : "List<ScanResult.InformationElement>",
    "comment" : "\n     * Return VendorElements for the AP.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ScanResult.InformationElement> getVendorElementsInternal()",
    "returnType" : "List<ScanResult.InformationElement>",
    "comment" : "\n     * @see #getVendorElements()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getBssid()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns MAC address set to be BSSID for the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPassphrase()",
    "returnType" : "String",
    "comment" : "\n     * Returns String set to be passphrase for current AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHiddenSsid()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns Boolean set to be indicate hidden (true: doesn't broadcast its SSID) or\n     * not (false: broadcasts its SSID) for the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBand()",
    "returnType" : "int",
    "comment" : "\n     * Returns band type set to be the band for the AP.\n     *\n     * One or combination of {@code BAND_}, for instance\n     * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, or {@code BAND_2GHZ | BAND_5GHZ}.\n     *\n     * Note: Returns the lowest band when more than one band is set.\n     * Use {@link #getChannels()} to get dual bands setting.\n     *\n     * See also {@link Builder#setBand(int)}.\n     *\n     * @deprecated This API is deprecated. Use {@link #getChannels()} instead.\n     * @hide\n     ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#setBand(int)", "#getChannels()" ]
  }, {
    "name" : "public int[] getBands()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns a sorted array in ascending order that consists of the configured band types\n     * for the APs.\n     *\n     * The band type is one or combination of {@code BAND_}, for instance\n     * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, or {@code BAND_2GHZ | BAND_5GHZ}.\n     *\n     * Note: return array may only include one band when current setting is single AP mode.\n     * See also {@link Builder#setBands(int[])}.\n     *\n     * @hide\n     ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#setBands(int" ]
  }, {
    "name" : "public int getChannel()",
    "returnType" : "int",
    "comment" : "\n     * Returns Integer set to be the channel for the AP.\n     *\n     * Note: Returns the channel which associated to the lowest band if more than one channel\n     * is set. Use {@link Builder#getChannels()} to get dual channel setting.\n     * See also {@link Builder#setChannel(int, int)}.\n     *\n     * @deprecated This API is deprecated. Use {@link #getChannels()} instead.\n     * @hide\n     ",
    "links" : [ "#setChannel(int", "#getChannels()" ]
  }, {
    "name" : "public SparseIntArray getChannels()",
    "returnType" : "SparseIntArray",
    "comment" : "\n     * Returns SparseIntArray (key: {@code BandType} , value: channel) that consists of\n     * the configured bands and channels for the AP(s).\n     *\n     * The returned channel value is Wi-Fi channel numbering.\n     * Reference the Wi-Fi channel numbering and the channelization in IEEE 802.11-2016\n     * specifications, section 17.3.8.4.2, 17.3.8.4.3 and Table 15-6.\n     *\n     * Note: return array may only include one channel when current setting is single AP mode.\n     * See also {@link Builder#setChannels(SparseIntArray)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setChannels(SparseIntArray)" ]
  }, {
    "name" : "public int getSecurityType()",
    "returnType" : "int",
    "comment" : "\n     * Get security type params which depends on which security passphrase to set.\n     *\n     * @return One of:\n     * {@link #SECURITY_TYPE_OPEN},\n     * {@link #SECURITY_TYPE_WPA2_PSK},\n     * {@link #SECURITY_TYPE_WPA3_SAE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_SAE},\n     * {@link #SECURITY_TYPE_WPA3_OWE_TRANSITION},\n     * {@link #SECURITY_TYPE_WPA3_OWE}\n     ",
    "links" : [ "#SECURITY_TYPE_WPA3_OWE", "#SECURITY_TYPE_OPEN", "#SECURITY_TYPE_WPA3_SAE_TRANSITION", "#SECURITY_TYPE_WPA3_SAE", "#SECURITY_TYPE_WPA3_OWE_TRANSITION", "#SECURITY_TYPE_WPA2_PSK" ]
  }, {
    "name" : "public int getMaxNumberOfClients()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of clients that can associate to the AP.\n     * See also {@link Builder#setMaxNumberOfClients(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setMaxNumberOfClients(int)" ]
  }, {
    "name" : "public boolean isAutoShutdownEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether auto shutdown is enabled or not.\n     * The Soft AP will shutdown when there are no devices associated to it for\n     * the timeout duration. See also {@link Builder#setAutoShutdownEnabled(boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setAutoShutdownEnabled(boolean)" ]
  }, {
    "name" : "public long getShutdownTimeoutMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the shutdown timeout in milliseconds.\n     * The Soft AP will shutdown when there are no devices associated to it for\n     * the timeout duration. See also {@link Builder#setShutdownTimeoutMillis(long)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "public boolean isClientControlByUserEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns a flag indicating whether clients need to be pre-approved by the user.\n     * (true: authorization required) or not (false: not required).\n     * See also {@link Builder#setClientControlByUserEnabled(Boolean)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setClientControlByUserEnabled(Boolean)" ]
  }, {
    "name" : "public List<MacAddress> getBlockedClientList()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * Returns List of clients which aren't allowed to associate to the AP.\n     *\n     * Clients are configured using {@link Builder#setBlockedClientList(List)}\n     *\n     * @hide\n     ",
    "links" : [ "#setBlockedClientList(List)" ]
  }, {
    "name" : "public List<MacAddress> getAllowedClientList()",
    "returnType" : "List<MacAddress>",
    "comment" : "\n     * List of clients which are allowed to associate to the AP.\n     * Clients are configured using {@link Builder#setAllowedClientList(List)}\n     *\n     * @hide\n     ",
    "links" : [ "#setAllowedClientList(List)" ]
  }, {
    "name" : "public int getMacRandomizationSetting()",
    "returnType" : "int",
    "comment" : "\n     * Returns the level of MAC randomization for the AP BSSID.\n     * See also {@link Builder#setMacRandomizationSetting(int)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setMacRandomizationSetting(int)" ]
  }, {
    "name" : "public int getMacRandomizationSettingInternal()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBridgedModeOpportunisticShutdownEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether opportunistic shutdown of an instance in bridged AP is enabled or not.\n     *\n     * See also {@link Builder#setBridgedModeOpportunisticShutdownEnabled(boolean}}\n     * @hide\n     ",
    "links" : [ "#setBridgedModeOpportunisticShutdownEnabled(boolean" ]
  }, {
    "name" : "public boolean isBridgedModeOpportunisticShutdownEnabledInternal()",
    "returnType" : "boolean",
    "comment" : "\n     * @see #isBridgedModeOpportunisticShutdownEnabled()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIeee80211axEnabledInternal()",
    "returnType" : "boolean",
    "comment" : "\n     * @see #isIeee80211axEnabled()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIeee80211axEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not 802.11ax is enabled on the SoftAP.\n     * This is an indication that if the device support 802.11ax AP then to enable or disable\n     * that feature. If the device does not support 802.11ax AP then this flag is ignored.\n     * See also {@link Builder#setIeee80211axEnabled(boolean}}\n     * @hide\n     ",
    "links" : [ "#setIeee80211axEnabled(boolean" ]
  }, {
    "name" : "public boolean isIeee80211beEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not the Soft AP is configured to enable 802.11be.\n     * This is an indication that if the device support 802.11be AP then to enable or disable\n     * that feature. If the device does not support 802.11be AP then this flag is ignored.\n     * See also {@link Builder#setIeee80211beEnabled(boolean}}\n     * @hide\n     ",
    "links" : [ "#setIeee80211beEnabled(boolean" ]
  }, {
    "name" : "public int[] getAllowedAcsChannels(@BandType int band)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the allowed channels for ACS in a selected band.\n     *\n     * If an empty array is returned, then all channels in that band are allowed\n     * The channels are configured using {@link Builder#setAllowedAcsChannels(int, int[])}\n     *\n     * @param band one of the following band types:\n     * {@link #BAND_2GHZ}, {@link #BAND_5GHZ}, {@link #BAND_6GHZ}.\n     *\n     * @return array of the allowed channels for ACS in that band\n     *\n     * @hide\n     ",
    "links" : [ "#BAND_2GHZ", "#BAND_5GHZ", "#BAND_6GHZ", "#setAllowedAcsChannels(int" ]
  }, {
    "name" : "public int getMaxChannelBandwidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns configured maximum channel bandwidth for the SoftAp connection.\n     *\n     * If not configured, it will return {@link SoftApInfo#CHANNEL_WIDTH_AUTO}\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.SoftApInfo#CHANNEL_WIDTH_AUTO" ]
  }, {
    "name" : "public boolean isUserConfiguration()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not the {@link SoftApConfiguration} was configured by the user\n     * (as opposed to the default system configuration).\n     * <p>\n     * The {@link SoftApConfiguration} is considered user edited once the\n     * {@link WifiManager#setSoftApConfiguration(SoftApConfiguration)} is called\n     * - whether or not that configuration is the same as the default system configuration!\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#setSoftApConfiguration(SoftApConfiguration)", "android.net.wifi.SoftApConfiguration" ]
  }, {
    "name" : "public MacAddress getPersistentRandomizedMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns the randomized MAC address to be used by this configuration.\n     *\n     * The Soft AP may be configured to use a persistent randomized MAC address with\n     * {@link Builder#setMacRandomizationSetting(int)}. This method returns the persistent\n     * randomized MAC address which will be used for the Soft AP controlled by this configuration.\n     *\n     * @hide\n     ",
    "links" : [ "#setMacRandomizationSetting(int)" ]
  }, {
    "name" : "public boolean isUserConfigurationInternal()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getBridgedModeOpportunisticShutdownTimeoutMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the bridged mode opportunistic shutdown timeout in milliseconds.\n     * An instance in bridged AP will shutdown when there is no device associated to it for\n     * the timeout duration. See also\n     * {@link Builder#setBridgedModeOpportunisticShutdownTimeoutMillis(long)}.\n     *\n     * @hide\n     ",
    "links" : [ "#setBridgedModeOpportunisticShutdownTimeoutMillis(long)" ]
  }, {
    "name" : "public long getBridgedModeOpportunisticShutdownTimeoutMillisInternal()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Return the vendor-provided configuration data, if it exists. See also {@link\n     * Builder#setVendorData(List)}\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ "#setVendorData(List)" ]
  }, {
    "name" : "public WifiConfiguration toWifiConfiguration()",
    "returnType" : "WifiConfiguration",
    "comment" : "\n     * Returns a {@link WifiConfiguration} representation of this {@link SoftApConfiguration}.\n     * Note that SoftApConfiguration may contain configuration which is cannot be represented\n     * by the legacy WifiConfiguration, in such cases a null will be returned.\n     *\n     * To maintain legacy behavior, the SSID of the WifiConfiguration will be the UTF-8\n     * representation of the SSID without double quotes, as opposed to the double-quoted UTF-8\n     * format documented in {@link WifiConfiguration#SSID}. If the SSID cannot be decoded as UTF-8,\n     * then the SSID of the WifiConfiguration will be {@link WifiManager#UNKNOWN_SSID}.\n     *\n     * <li> SoftAp band in {@link WifiConfiguration.apBand} only supports\n     * 2GHz, 5GHz, 2GHz+5GHz bands, so conversion is limited to these bands. </li>\n     *\n     * <li> SoftAp security type in {@link WifiConfiguration.KeyMgmt} only supports\n     * NONE, WPA2_PSK, so conversion is limited to these security type.</li>\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiManager#UNKNOWN_SSID", "android.net.wifi.WifiConfiguration#SSID", "WifiConfiguration.apBand", "WifiConfiguration.KeyMgmt", "android.net.wifi.SoftApConfiguration", "android.net.wifi.WifiConfiguration" ]
  } ],
  "methodNames" : [ "private static boolean isBandValid(@BandType int band)", "private static boolean isChannelBandPairValid(int channel, @BandType int band)", "public boolean equals(Object otherObj)", "public int hashCode()", "public String toString()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "private static void writeSparseIntArray(@NonNull Parcel dest, @Nullable SparseIntArray val)", "private static SparseIntArray readSparseIntArray(@NonNull Parcel in)", "private static void writeHashSetInt(@NonNull Parcel dest, @NonNull Set<Integer> set)", "private static Set<Integer> readHashSetInt(@NonNull Parcel in)", "private static List<OuiKeyedData> readOuiKeyedDataList(@NonNull Parcel in)", "public int describeContents()", "public String getSsid()", "public WifiSsid getWifiSsid()", "public List<ScanResult.InformationElement> getVendorElements()", "public List<ScanResult.InformationElement> getVendorElementsInternal()", "public MacAddress getBssid()", "public String getPassphrase()", "public boolean isHiddenSsid()", "public int getBand()", "public int[] getBands()", "public int getChannel()", "public SparseIntArray getChannels()", "public int getSecurityType()", "public int getMaxNumberOfClients()", "public boolean isAutoShutdownEnabled()", "public long getShutdownTimeoutMillis()", "public boolean isClientControlByUserEnabled()", "public List<MacAddress> getBlockedClientList()", "public List<MacAddress> getAllowedClientList()", "public int getMacRandomizationSetting()", "public int getMacRandomizationSettingInternal()", "public boolean isBridgedModeOpportunisticShutdownEnabled()", "public boolean isBridgedModeOpportunisticShutdownEnabledInternal()", "public boolean isIeee80211axEnabledInternal()", "public boolean isIeee80211axEnabled()", "public boolean isIeee80211beEnabled()", "public int[] getAllowedAcsChannels(@BandType int band)", "public int getMaxChannelBandwidth()", "public boolean isUserConfiguration()", "public MacAddress getPersistentRandomizedMacAddress()", "public boolean isUserConfigurationInternal()", "public long getBridgedModeOpportunisticShutdownTimeoutMillis()", "public long getBridgedModeOpportunisticShutdownTimeoutMillisInternal()", "public List<OuiKeyedData> getVendorData()", "public WifiConfiguration toWifiConfiguration()" ],
  "variableNames" : [ "TAG", "PSK_MIN_LEN", "PSK_MAX_LEN", "BAND_2GHZ", "BAND_5GHZ", "BAND_6GHZ", "BAND_60GHZ", "BAND_ANY", "DEFAULT_TIMEOUT", "BAND_TYPES", "MIN_CH_2G_BAND", "MAX_CH_2G_BAND", "MIN_CH_5G_BAND", "MAX_CH_5G_BAND", "MIN_CH_6G_BAND", "MAX_CH_6G_BAND", "MIN_CH_60G_BAND", "MAX_CH_60G_BAND", "FORCE_MUTUAL_EXCLUSIVE_BSSID_MAC_RAMDONIZATION_SETTING", "REMOVE_ZERO_FOR_TIMEOUT_SETTING", "mWifiSsid", "mBssid", "mVendorElements", "mPassphrase", "mHiddenSsid", "mChannels", "mAllowedAcsChannels2g", "mAllowedAcsChannels5g", "mAllowedAcsChannels6g", "mMaxChannelBandwidth", "mMaxNumberOfClients", "mSecurityType", "mClientControlByUser", "mBlockedClientList", "mAllowedClientList", "mAutoShutdownEnabled", "mShutdownTimeoutMillis", "RANDOMIZATION_NONE", "RANDOMIZATION_PERSISTENT", "RANDOMIZATION_NON_PERSISTENT", "mMacRandomizationSetting", "mBridgedModeOpportunisticShutdownEnabled", "mIeee80211axEnabled", "mIeee80211beEnabled", "mIsUserConfiguration", "mPersistentRandomizedMacAddress", "mBridgedModeOpportunisticShutdownTimeoutMillis", "mVendorData", "SECURITY_TYPE_OPEN", "SECURITY_TYPE_WPA2_PSK", "SECURITY_TYPE_WPA3_SAE_TRANSITION", "SECURITY_TYPE_WPA3_SAE", "SECURITY_TYPE_WPA3_OWE_TRANSITION", "SECURITY_TYPE_WPA3_OWE", "CREATOR" ]
}