{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/pdf/PdfRendererPreV.java",
  "packageName" : "android.graphics.pdf",
  "className" : "PdfRendererPreV",
  "comment" : "\n * <p>\n * This class enables rendering a PDF document and selecting, searching, fast scrolling,\n * annotations, etc from Android R till Android U. This class is thread safe and can be called by\n * multiple threads however only one thread will be executed at a time as the access is\n * synchronized by internal locking.\n * <p>\n * If you want to render a PDF, you will need to create a new instance of renderer for each\n * document. To render each page, you open the page using the renderer instance created earlier,\n * render it, and close the page. After you are done with rendering, you close the renderer. After\n * the renderer is closed it should not be used anymore. Note that the pages are rendered one by\n * one, i.e. you can have only a single page opened at any given time.\n * <p>\n * A typical use of the APIs to render a PDF looks like this:\n * <pre>\n * // create a new renderer\n * try (PdfRendererPreV renderer = new PdfRendererPreV(getSeekableFileDescriptor(), loadParams)) {\n *      // let us just render all pages\n *      final int pageCount = renderer.getPageCount();\n *      for (int i = 0; i < pageCount; i++) {\n *          Page page = renderer.openPage(i);\n *          RenderParams params = new RenderParams.Builder(Page.RENDER_MODE_FOR_DISPLAY).build();\n *\n *          // say we render for showing on the screen\n *          page.render(mBitmap, params, null, null);\n *\n *          // do stuff with the bitmap\n *\n *          // close the page\n *          page.close();\n *      }\n * }\n * </pre>\n * <h3>Print preview and print output</h3>\n * <p>\n * Please refer to {@link PdfRenderer} for fulfilling this usecase.\n ",
  "links" : [ "android.graphics.pdf.PdfRenderer" ],
  "variables" : [ {
    "name" : "DOCUMENT_LINEARIZED_TYPE_NON_LINEARIZED",
    "type" : "int",
    "comment" : " Represents a non-linearized PDF document. ",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_LINEARIZED_TYPE_LINEARIZED",
    "type" : "int",
    "comment" : " Represents a linearized PDF document. ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_NONE",
    "type" : "int",
    "comment" : " Represents a PDF without form fields ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_ACRO_FORM",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the AcroForm spec ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_XFA_FULL",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the entire XFA spec ",
    "links" : [ ]
  }, {
    "name" : "PDF_FORM_TYPE_XFA_FOREGROUND",
    "type" : "int",
    "comment" : " Represents a PDF with form fields specified using the XFAF subset of the XFA spec ",
    "links" : [ ]
  }, {
    "name" : "mPageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPdfProcessor",
    "type" : "PdfProcessor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getPageCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of pages in the document.\n     *\n     * @return The page count.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public int getDocumentLinearizationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of the PDF document.\n     *\n     * @return The PDF document type.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "public Page openPage(@IntRange(from = 0) int index)",
    "returnType" : "Page",
    "comment" : "\n     * Opens a {@link Page} for rendering.\n     *\n     * @param index The page index to open, starting from index 0.\n     * @return A page that can be rendered.\n     * @throws IllegalStateException    If {@link #close()} is called before invoking this.\n     * @throws IllegalArgumentException If the page number is less than 0 or greater than or equal\n     *                                  to the total page count.\n     ",
    "links" : [ "#close()", "Page" ]
  }, {
    "name" : "public int getPdfFormType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the form type of the loaded PDF\n     *\n     * @throws IllegalStateException    if the renderer is closed\n     * @throws IllegalArgumentException if an unexpected PDF form type is returned\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(@NonNull ParcelFileDescriptor destination, boolean removePasswordProtection) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * <p>\n     * Saves the current state of the loaded PDF document to the given writable\n     * {@link ParcelFileDescriptor}. If the document is password-protected then setting\n     * {@code removePasswordProtection} removes the protection before saving. The PDF document\n     * should already be decrypted with the correct password before writing. Useful for printing or\n     * sharing.\n     * <strong>Note:</strong> This method closes the provided file descriptor.\n     *\n     * @param destination              The writable {@link ParcelFileDescriptor}\n     * @param removePasswordProtection If true, removes password protection from the PDF before\n     *                                 saving.\n     * @throws IOException           If there's a write error, or if 'removePasswordSecurity' is\n     *                               {@code true} but the document remains encrypted.\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "android.os.ParcelFileDescriptor", "#close()" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this renderer and destroys any cached instance of the document. You should not use\n     * this instance after this method is called.\n     *\n     * @throws IllegalStateException If {@link #close()} is called before invoking this.\n     ",
    "links" : [ "#close()" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " gracefully",
    "links" : [ ]
  }, {
    "name" : "private void doClose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfDocumentClosed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfPageNotInDocument(int pageIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getPageCount()", "public int getDocumentLinearizationType()", "public Page openPage(@IntRange(from = 0) int index)", "public int getPdfFormType()", "public void write(@NonNull ParcelFileDescriptor destination, boolean removePasswordProtection) throws IOException", "public void close()", "protected void finalize() throws Throwable", "private void doClose()", "private void throwIfDocumentClosed()", "private void throwIfPageNotInDocument(int pageIndex)" ],
  "variableNames" : [ "DOCUMENT_LINEARIZED_TYPE_NON_LINEARIZED", "DOCUMENT_LINEARIZED_TYPE_LINEARIZED", "PDF_FORM_TYPE_NONE", "PDF_FORM_TYPE_ACRO_FORM", "PDF_FORM_TYPE_XFA_FULL", "PDF_FORM_TYPE_XFA_FOREGROUND", "mPageCount", "mPdfProcessor" ]
}