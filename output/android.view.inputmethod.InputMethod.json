{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/InputMethod.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethod",
  "comment" : "\n * The InputMethod interface represents an input method which can generate key\n * events and text, such as digital, email addresses, CJK characters, other\n * language characters, and etc., while handling various input events, and send\n * the text back to the application that requests text input.  See\n * {@link InputMethodManager} for more general information about the\n * architecture.\n *\n * <p>Applications will not normally use this interface themselves, instead\n * relying on the standard interaction provided by\n * {@link android.widget.TextView} and {@link android.widget.EditText}.\n * \n * <p>Those implementing input methods should normally do so by deriving from\n * {@link InputMethodService} or one of its subclasses.  When implementing\n * an input method, the service component containing it must also supply\n * a {@link #SERVICE_META_DATA} meta-data field, referencing an XML resource\n * providing details about the input method.  All input methods also must\n * require that clients hold the\n * {@link android.Manifest.permission#BIND_INPUT_METHOD} in order to interact\n * with the service; if this is not required, the system will not use that\n * input method, because it can not trust that it is not compromised.\n * \n * <p>The InputMethod interface is actually split into two parts: the interface\n * here is the top-level interface to the input method, providing all\n * access to it, which only the system can access (due to the BIND_INPUT_METHOD\n * permission requirement).  In addition its method\n * {@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}\n * can be called to instantate a secondary {@link InputMethodSession} interface\n * which is what clients use to communicate with the input method.\n ",
  "links" : [ "#SERVICE_META_DATA", "android.widget.TextView", "#createSession(android.view.inputmethod.InputMethod.SessionCallback)", "android.inputmethodservice.InputMethodService", "android.Manifest.permission#BIND_INPUT_METHOD", "android.widget.EditText", "android.view.inputmethod.InputMethodManager", "android.view.inputmethod.InputMethodSession" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * This is the interface name that a service implementing an input\n     * method should say that it supports -- that is, this is the action it\n     * uses for its intent filter.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_INPUT_METHOD} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_INPUT_METHOD" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which an InputMethod service component publishes information\n     * about itself.  This meta-data must reference an XML resource containing\n     * an\n     * <code>&lt;{@link android.R.styleable#InputMethod input-method}&gt;</code>\n     * tag.\n     ",
    "links" : [ "android.R.styleable#InputMethod" ]
  }, {
    "name" : "SHOW_EXPLICIT",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #showSoftInput}: this show has been explicitly\n     * requested by the user.  If not set, the system has decided it may be\n     * a good idea to show the input method based on a navigation operation\n     * in the UI.\n     ",
    "links" : [ "#showSoftInput" ]
  }, {
    "name" : "SHOW_FORCED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #showSoftInput}: this show has been forced to\n     * happen by the user.  If set, the input method should remain visible\n     * until deliberated dismissed by the user in its UI.\n     *\n     * @deprecated {@link InputMethodManager#SHOW_FORCED} is deprecated and\n     * should no longer be used by apps. IMEs likewise should no longer react to this flag.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#SHOW_FORCED", "#showSoftInput" ]
  } ],
  "methods" : [ {
    "name" : " void initializeInternal(@NonNull IInputMethod.InitParams params)",
    "returnType" : "void",
    "comment" : "\n     * Called first thing after an input method is created, this supplies a\n     * unique token for the session it has with the system service as well as\n     * IPC endpoint to do some other privileged operations.\n     *\n     * @param params Contains parameters to initialize the {@link InputMethodService}.\n     * @hide\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService" ]
  }, {
    "name" : " void onCreateInlineSuggestionsRequest(InlineSuggestionsRequestInfo requestInfo, IInlineSuggestionsRequestCallback cb)",
    "returnType" : "void",
    "comment" : "\n     * Called to notify the IME that Autofill Frameworks requested an inline suggestions request.\n     *\n     * @param requestInfo information needed to create an {@link InlineSuggestionsRequest}.\n     * @param cb {@link IInlineSuggestionsRequestCallback} used to pass back the request object.\n     *\n     * @hide\n     ",
    "links" : [ "com.android.internal.inputmethod.IInlineSuggestionsRequestCallback", "android.view.inputmethod.InlineSuggestionsRequest" ]
  }, {
    "name" : "public void attachToken(IBinder token)",
    "returnType" : "void",
    "comment" : "\n     * Called first thing after an input method is created, this supplies a\n     * unique token for the session it has with the system service.  It is\n     * needed to identify itself with the service to validate its operations.\n     * This token <strong>must not</strong> be passed to applications, since\n     * it grants special priviledges that should not be given to applications.\n     *\n     * <p>The system guarantees that this method is called back between\n     * {@link InputMethodService#onCreate()} and {@link InputMethodService#onDestroy()}\n     * at most once.\n     ",
    "links" : [ "android.inputmethodservice.InputMethodService#onDestroy()", "android.inputmethodservice.InputMethodService#onCreate()" ]
  }, {
    "name" : "public void bindInput(InputBinding binding)",
    "returnType" : "void",
    "comment" : "\n     * Bind a new application environment in to the input method, so that it\n     * can later start and stop input processing.\n     * Typically this method is called when this input method is enabled in an\n     * application for the first time.\n     * \n     * @param binding Information about the application window that is binding\n     * to the input method.\n     * \n     * @see InputBinding\n     * @see #unbindInput()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unbindInput()",
    "returnType" : "void",
    "comment" : "\n     * Unbind an application environment, called when the information previously\n     * set by {@link #bindInput} is no longer valid for this input method.\n     * \n     * <p>\n     * Typically this method is called when the application changes to be\n     * non-foreground.\n     ",
    "links" : [ "#bindInput" ]
  }, {
    "name" : "public void startInput(InputConnection inputConnection, EditorInfo editorInfo)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the application starts to receive text and it\n     * is ready for this input method to process received events and send result\n     * text back to the application.\n     * \n     * @param inputConnection Optional specific input connection for\n     * communicating with the text box; if null, you should use the generic\n     * bound input connection.\n     * @param editorInfo Information about the text box (typically, an EditText)\n     *        that requests input.\n     * \n     * @see EditorInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public void restartInput(InputConnection inputConnection, EditorInfo editorInfo)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the state of this input method needs to be\n     * reset.\n     * \n     * <p>\n     * Typically, this method is called when the input focus is moved from one\n     * text box to another.\n     * \n     * @param inputConnection Optional specific input connection for\n     * communicating with the text box; if null, you should use the generic\n     * bound input connection.\n     * @param editorInfo The attribute of the text box (typically, a EditText)\n     *        that requests input.\n     * \n     * @see EditorInfo\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchStartInput(@Nullable InputConnection inputConnection, @NonNull IInputMethod.StartInputParams params)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when {@link #startInput(InputConnection, EditorInfo)} or\n     * {@link #restartInput(InputConnection, EditorInfo)} needs to be dispatched.\n     *\n     * <p>Note: This method is hidden because {@link IInputMethod.StartInputParams} is an internal\n     * details, which should not be exposed to the IME developers. If you override this method, you\n     * are responsible for not breaking existing IMEs that expect\n     * {@link #startInput(InputConnection, EditorInfo)} to be still called back.</p>\n     *\n     * @param inputConnection optional specific input connection for communicating with the text\n     *                        box; if {@code null}, you should use the generic bound input\n     *                        connection\n     * @param params Raw object of {@link IInputMethod.StartInputParams}.\n     * @see #startInput(InputConnection, EditorInfo)\n     * @see #restartInput(InputConnection, EditorInfo)\n     * @see EditorInfo\n     * @hide\n     ",
    "links" : [ "#startInput(InputConnection", "IInputMethod.StartInputParams", "#restartInput(InputConnection" ]
  }, {
    "name" : " void onNavButtonFlagsChanged(@InputMethodNavButtonFlags int navButtonFlags)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that {@link InputMethodNavButtonFlags} have been updated.\n     *\n     * @param navButtonFlags The new {@link InputMethodNavButtonFlags}.\n     * @hide\n     ",
    "links" : [ "com.android.internal.inputmethod.InputMethodNavButtonFlags" ]
  }, {
    "name" : "public void createSession(SessionCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Create a new {@link InputMethodSession} that can be handed to client\n     * applications for interacting with the input method.  You can later\n     * use {@link #revokeSession(InputMethodSession)} to destroy the session\n     * so that it can no longer be used by any clients.\n     * \n     * @param callback Interface that is called with the newly created session.\n     ",
    "links" : [ "#revokeSession(InputMethodSession)", "android.view.inputmethod.InputMethodSession" ]
  }, {
    "name" : "public void setSessionEnabled(InputMethodSession session, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Control whether a particular input method session is active.\n     * \n     * @param session The {@link InputMethodSession} previously provided through\n     * SessionCallback.sessionCreated() that is to be changed.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodSession" ]
  }, {
    "name" : "public void revokeSession(InputMethodSession session)",
    "returnType" : "void",
    "comment" : "\n     * Disable and destroy a session that was previously created with\n     * {@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}.\n     * After this call, the given session interface is no longer active and\n     * calls on it will fail.\n     * \n     * @param session The {@link InputMethodSession} previously provided through\n     * SessionCallback.sessionCreated() that is to be revoked.\n     ",
    "links" : [ "#createSession(android.view.inputmethod.InputMethod.SessionCallback)", "android.view.inputmethod.InputMethodSession" ]
  }, {
    "name" : "public void showSoftInputWithToken(@ShowFlags int flags, ResultReceiver resultReceiver, IBinder showInputToken, @NonNull ImeTracker.Token statsToken)",
    "returnType" : "void",
    "comment" : "\n     * Request that any soft input part of the input method be shown to the user.\n     *\n     * @param resultReceiver The client requesting the show may wish to\n     * be told the impact of their request, which should be supplied here.\n     * The result code should be\n     * {@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},\n     * {@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},\n     * {@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or\n     * {@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}.\n     * @param showInputToken an opaque {@link android.os.Binder} token to identify which API call\n     *        of {@link InputMethodManager#showSoftInput(View, int)} is associated with\n     *        this callback.\n     * @param statsToken the token tracking the current IME request.\n     * @hide\n     ",
    "links" : [ "android.os.Binder", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_SHOWN", "android.view.inputmethod.InputMethodManager#showSoftInput(View", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_HIDDEN", "android.view.inputmethod.InputMethodManager#RESULT_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_HIDDEN" ]
  }, {
    "name" : "public void showSoftInput(@ShowFlags int flags, ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Request that any soft input part of the input method be shown to the user.\n     *\n     * @param resultReceiver The client requesting the show may wish to\n     * be told the impact of their request, which should be supplied here.\n     * The result code should be\n     * {@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},\n     * {@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},\n     * {@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or\n     * {@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_HIDDEN", "android.view.inputmethod.InputMethodManager#RESULT_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_HIDDEN" ]
  }, {
    "name" : "public void hideSoftInputWithToken(int flags, ResultReceiver resultReceiver, IBinder hideInputToken, @NonNull ImeTracker.Token statsToken)",
    "returnType" : "void",
    "comment" : "\n     * Request that any soft input part of the input method be hidden from the user.\n     *\n     * @param flags Provides additional information about the hide request.\n     * Currently always 0.\n     * @param resultReceiver The client requesting the show may wish to\n     * be told the impact of their request, which should be supplied here.\n     * The result code should be\n     * {@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},\n     * {@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},\n     * {@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or\n     * {@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}.\n     * @param hideInputToken an opaque {@link android.os.Binder} token to identify which API call\n     *         of {@link InputMethodManager#hideSoftInputFromWindow(IBinder, int)}} is associated\n     *         with this callback.\n     * @param statsToken the token tracking the current IME request.\n     * @hide\n     ",
    "links" : [ "android.os.Binder", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_SHOWN", "android.view.inputmethod.InputMethodManager#hideSoftInputFromWindow(IBinder", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_HIDDEN", "android.view.inputmethod.InputMethodManager#RESULT_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_HIDDEN" ]
  }, {
    "name" : "public void hideSoftInput(int flags, ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Request that any soft input part of the input method be hidden from the user.\n     *\n     * @param flags Provides additional information about the hide request.\n     * Currently always 0.\n     * @param resultReceiver The client requesting the show may wish to\n     * be told the impact of their request, which should be supplied here.\n     * The result code should be\n     * {@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},\n     * {@link InputMethodManager#RESULT_UNCHANGED_HIDDEN\n     *        InputMethodManager.RESULT_UNCHANGED_HIDDEN},\n     * {@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or\n     * {@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}.\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_UNCHANGED_HIDDENInputMethodManager.RESULT_UNCHANGED_HIDDEN", "android.view.inputmethod.InputMethodManager#RESULT_SHOWN", "android.view.inputmethod.InputMethodManager#RESULT_HIDDEN" ]
  }, {
    "name" : "public void changeInputMethodSubtype(InputMethodSubtype subtype)",
    "returnType" : "void",
    "comment" : "\n     * Notify that the input method subtype is being changed in the same input method.\n     * @param subtype New subtype of the notified input method\n     ",
    "links" : [ ]
  }, {
    "name" : " void canStartStylusHandwriting(int requestId, @Nullable IConnectionlessHandwritingCallback connectionlessCallback, @Nullable CursorAnchorInfo cursorAnchorInfo, boolean isConnectionlessForDelegation)",
    "returnType" : "void",
    "comment" : "\n     * Checks if IME is ready to start stylus handwriting session.\n     * If yes, {@link #startStylusHandwriting(int, InputChannel, List)} is called.\n     *\n     * @param requestId identifier for the session start request\n     * @param connectionlessCallback the callback to receive the session result if starting a\n     *     connectionless handwriting session, or null if starting a regular session\n     * @param cursorAnchorInfo optional positional information about the view receiving stylus\n     *     events for a connectionless handwriting session\n     * @param isConnectionlessForDelegation whether the connectionless handwriting session is for\n     *     delegation. If true, the recognised text should be saved and can later be committed by\n     *     {@link #commitHandwritingDelegationTextIfAvailable}.\n     * @hide\n     ",
    "links" : [ "#commitHandwritingDelegationTextIfAvailable", "#startStylusHandwriting(int" ]
  }, {
    "name" : " void updateEditorToolType(int toolType)",
    "returnType" : "void",
    "comment" : "\n     * This method is called when the user tapped or clicked an {@link android.widget.Editor}.\n     * @param toolType {@link android.view.MotionEvent#getToolType(int)} used for clicking editor.\n     * @hide\n     ",
    "links" : [ "android.widget.Editor", "android.view.MotionEvent#getToolType(int)" ]
  }, {
    "name" : " void startStylusHandwriting(int requestId, @NonNull InputChannel channel, @Nullable List<MotionEvent> events)",
    "returnType" : "void",
    "comment" : "\n     * Start stylus handwriting session.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void commitHandwritingDelegationTextIfAvailable()",
    "returnType" : "void",
    "comment" : "\n     * Commits recognised text that was previously saved from a connectionless handwriting session\n     * for delegation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void discardHandwritingDelegationText()",
    "returnType" : "void",
    "comment" : "\n     * Discards recognised text that was previously saved from a connectionless handwriting session\n     * for delegation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void initInkWindow()",
    "returnType" : "void",
    "comment" : "\n     * Initialize Ink window early-on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void finishStylusHandwriting()",
    "returnType" : "void",
    "comment" : "\n     * Finish stylus handwriting session.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeStylusHandwritingWindow()",
    "returnType" : "void",
    "comment" : "\n     * Remove stylus handwriting window.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void setStylusWindowIdleTimeoutForTest(@DurationMillisLong long timeout)",
    "returnType" : "void",
    "comment" : "\n     * Set a stylus idle-timeout after which handwriting {@code InkWindow} will be removed.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void initializeInternal(@NonNull IInputMethod.InitParams params)", " void onCreateInlineSuggestionsRequest(InlineSuggestionsRequestInfo requestInfo, IInlineSuggestionsRequestCallback cb)", "public void attachToken(IBinder token)", "public void bindInput(InputBinding binding)", "public void unbindInput()", "public void startInput(InputConnection inputConnection, EditorInfo editorInfo)", "public void restartInput(InputConnection inputConnection, EditorInfo editorInfo)", " void dispatchStartInput(@Nullable InputConnection inputConnection, @NonNull IInputMethod.StartInputParams params)", " void onNavButtonFlagsChanged(@InputMethodNavButtonFlags int navButtonFlags)", "public void createSession(SessionCallback callback)", "public void setSessionEnabled(InputMethodSession session, boolean enabled)", "public void revokeSession(InputMethodSession session)", "public void showSoftInputWithToken(@ShowFlags int flags, ResultReceiver resultReceiver, IBinder showInputToken, @NonNull ImeTracker.Token statsToken)", "public void showSoftInput(@ShowFlags int flags, ResultReceiver resultReceiver)", "public void hideSoftInputWithToken(int flags, ResultReceiver resultReceiver, IBinder hideInputToken, @NonNull ImeTracker.Token statsToken)", "public void hideSoftInput(int flags, ResultReceiver resultReceiver)", "public void changeInputMethodSubtype(InputMethodSubtype subtype)", " void canStartStylusHandwriting(int requestId, @Nullable IConnectionlessHandwritingCallback connectionlessCallback, @Nullable CursorAnchorInfo cursorAnchorInfo, boolean isConnectionlessForDelegation)", " void updateEditorToolType(int toolType)", " void startStylusHandwriting(int requestId, @NonNull InputChannel channel, @Nullable List<MotionEvent> events)", " void commitHandwritingDelegationTextIfAvailable()", " void discardHandwritingDelegationText()", " void initInkWindow()", " void finishStylusHandwriting()", " void removeStylusHandwritingWindow()", " void setStylusWindowIdleTimeoutForTest(@DurationMillisLong long timeout)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "SERVICE_META_DATA", "SHOW_EXPLICIT", "SHOW_FORCED" ]
}