{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/TrustAnchor.java",
  "packageName" : "java.security.cert",
  "className" : "TrustAnchor",
  "comment" : "\n * A trust anchor or most-trusted Certification Authority (CA).\n * <p>\n * This class represents a \"most-trusted CA\", which is used as a trust anchor\n * for validating X.509 certification paths. A most-trusted CA includes the\n * public key of the CA, the CA's name, and any constraints upon the set of\n * paths which may be validated using this key. These parameters can be\n * specified in the form of a trusted {@code X509Certificate} or as\n * individual parameters.\n * <p>\n * <b>Concurrent Access</b>\n * <p>All {@code TrustAnchor} objects must be immutable and\n * thread-safe. That is, multiple threads may concurrently invoke the\n * methods defined in this class on a single {@code TrustAnchor}\n * object (or more than one) with no ill effects. Requiring\n * {@code TrustAnchor} objects to be immutable and thread-safe\n * allows them to be passed around to various pieces of code without\n * worrying about coordinating access. This stipulation applies to all\n * public fields and methods of this class and any added or overridden\n * by subclasses.\n *\n * @see PKIXParameters#PKIXParameters(Set)\n * @see PKIXBuilderParameters#PKIXBuilderParameters(Set, CertSelector)\n *\n * @since       1.4\n * @author      Sean Mullan\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "pubKey",
    "type" : "PublicKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "caName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "caPrincipal",
    "type" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "trustedCert",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ncBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nc",
    "type" : "NameConstraintsExtension",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final X509Certificate getTrustedCert()",
    "returnType" : "X509Certificate",
    "comment" : "\n     * Returns the most-trusted CA certificate.\n     *\n     * @return a trusted {@code X509Certificate} or {@code null}\n     * if the trust anchor was not specified as a trusted certificate\n     ",
    "links" : [ ]
  }, {
    "name" : "public final X500Principal getCA()",
    "returnType" : "X500Principal",
    "comment" : "\n     * Returns the name of the most-trusted CA as an X500Principal.\n     *\n     * @return the X.500 distinguished name of the most-trusted CA, or\n     * {@code null} if the trust anchor was not specified as a trusted\n     * public key and name or X500Principal pair\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getCAName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the most-trusted CA in RFC 2253 {@code String}\n     * format.\n     *\n     * @return the X.500 distinguished name of the most-trusted CA, or\n     * {@code null} if the trust anchor was not specified as a trusted\n     * public key and name or X500Principal pair\n     ",
    "links" : [ ]
  }, {
    "name" : "public final PublicKey getCAPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "\n     * Returns the public key of the most-trusted CA.\n     *\n     * @return the public key of the most-trusted CA, or {@code null}\n     * if the trust anchor was not specified as a trusted public key and name\n     * or X500Principal pair\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setNameConstraints(byte[] bytes)",
    "returnType" : "void",
    "comment" : "\n     * Decode the name constraints and clone them if not null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final byte[] getNameConstraints()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the name constraints parameter. The specified name constraints\n     * are associated with this trust anchor and are intended to be used\n     * as additional constraints when validating an X.509 certification path.\n     * <p>\n     * The name constraints are returned as a byte array. This byte array\n     * contains the DER encoded form of the name constraints, as they\n     * would appear in the NameConstraints structure defined in RFC 5280\n     * and X.509. The ASN.1 notation for this structure is supplied in the\n     * documentation for\n     * {@link #TrustAnchor(X509Certificate, byte[])\n     * TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.\n     * <p>\n     * Note that the byte array returned is cloned to protect against\n     * subsequent modifications.\n     *\n     * @return a byte array containing the ASN.1 DER encoding of\n     *         a NameConstraints extension used for checking name constraints,\n     *         or {@code null} if not set.\n     ",
    "links" : [ "#TrustAnchor(X509Certificate" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted string describing the {@code TrustAnchor}.\n     *\n     * @return a formatted string describing the {@code TrustAnchor}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final X509Certificate getTrustedCert()", "public final X500Principal getCA()", "public final String getCAName()", "public final PublicKey getCAPublicKey()", "private void setNameConstraints(byte[] bytes)", "public final byte[] getNameConstraints()", "public String toString()" ],
  "variableNames" : [ "pubKey", "caName", "caPrincipal", "trustedCert", "ncBytes", "nc" ]
}