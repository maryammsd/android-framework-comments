{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothVolumeControl.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothVolumeControl",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth Volume Control service.\n *\n * <p>BluetoothVolumeControl is a proxy object for controlling the Bluetooth VC Service via IPC. Use\n * {@link BluetoothAdapter#getProfileProxy} to get the BluetoothVolumeControl proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutorMap",
    "type" : "Map<Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IBluetoothVolumeControlCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Volume Control profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothVolumeControl",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close this VolumeControl server instance.\n     *\n     * <p>Application should call this method as early as possible after it is done with this\n     * VolumeControl server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothVolumeControl getService()",
    "returnType" : "IBluetoothVolumeControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of connected devices. Currently at most one.\n     *\n     * @return list of connected devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the list of devices matching specified states. Currently at most one.\n     *\n     * @return list of matching devices\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get connection state of device\n     *\n     * @return device connection state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Callback} that will be invoked during the operation of this profile.\n     *\n     * <p>Repeated registration of the same <var>callback</var> object will have no effect after the\n     * first call to this method, even when the <var>executor</var> is different. API caller would\n     * have to call {@link #unregisterCallback(Callback)} with the same callback object before\n     * registering it again.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link Callback}\n     * @throws IllegalArgumentException if a null executor, sink, or callback is given\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)", "Callback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link Callback}.\n     *\n     * <p>The same {@link Callback} object used when calling {@link #registerCallback(Executor,\n     * Callback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link Callback}\n     * @throws IllegalArgumentException when callback is null or when no callback is registered\n     * @hide\n     ",
    "links" : [ "Callback", "#registerCallback(Executor" ]
  }, {
    "name" : "public void setVolumeOffset(@NonNull BluetoothDevice device, @IntRange(from = -255, to = 255) int volumeOffset)",
    "returnType" : "void",
    "comment" : "\n     * Tells the remote device to set a volume offset to the absolute volume.\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @param volumeOffset volume offset to be set on the remote device\n     * @deprecated Use new method which allows for choosing a VOCS instance. This method will always\n     *     use the first instance.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice" ]
  }, {
    "name" : "public void setVolumeOffset(@NonNull BluetoothDevice device, @IntRange(from = 1, to = 255) int instanceId, @IntRange(from = -255, to = 255) int volumeOffset)",
    "returnType" : "void",
    "comment" : "\n     * Tells the remote device to set a volume offset to the absolute volume. One device might have\n     * multiple VOCS instances. This instances could be i.e. different speakers or sound types as\n     * media/voice/notification.\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @param instanceId identifier of VOCS instance on the remote device. Identifiers are numerated\n     *     from 1. Number of them was notified by callbacks and it can be read using {@link\n     *     #getNumberOfVolumeOffsetInstances(BluetoothDevice)}. Providing non existing instance ID\n     *     will be ignored\n     * @param volumeOffset volume offset to be set on VOCS instance\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "#getNumberOfVolumeOffsetInstances(BluetoothDevice)" ]
  }, {
    "name" : "private void setVolumeOffsetInternal(@NonNull BluetoothDevice device, @IntRange(from = 1, to = 255) int instanceId, @IntRange(from = -255, to = 255) int volumeOffset)",
    "returnType" : "void",
    "comment" : "\n     * INTERNAL HELPER METHOD, DO NOT MAKE PUBLIC\n     *\n     * <p>Tells the remote device to set a volume offset to the absolute volume. One device might\n     * have multiple VOCS instances. This instances could be i.e. different speakers or sound types\n     * as media/voice/notification.\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @param instanceId identifier of VOCS instance on the remote device. Identifiers are numerated\n     *     from 1. Number of them was notified by callbacks and it can be read using {@link\n     *     #getNumberOfVolumeOffsetInstances(BluetoothDevice)}. Providing non existing instance ID\n     *     will be ignored\n     * @param volumeOffset volume offset to be set on VOCS instance\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "#getNumberOfVolumeOffsetInstances(BluetoothDevice)" ]
  }, {
    "name" : "public boolean isVolumeOffsetAvailable(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides information about the possibility to set volume offset on the remote device. If the\n     * remote device supports Volume Offset Control Service, it is automatically connected.\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @return {@code true} if volume offset function is supported and available to use on the\n     *     remote device. When Bluetooth is off, the return value should always be {@code false}.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice" ]
  }, {
    "name" : "public int getNumberOfVolumeOffsetInstances(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Provides information about the number of volume offset instances\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @return number of VOCS instances. When Bluetooth is off, the return value is 0.\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public void setDeviceVolume(@NonNull BluetoothDevice device, @IntRange(from = 0, to = 255) int volume, boolean isGroupOperation)",
    "returnType" : "void",
    "comment" : "\n     * Set volume for the le audio device\n     *\n     * <p>This provides volume control for connected remote device directly by volume control\n     * service. The valid volume range is [0, 255], as defined in 2.3.1.1 Volume_Setting field of\n     * Volume Control Service, Version 1.0.\n     *\n     * <p>For le audio unicast devices volume control, application should consider to use {@link\n     * BluetoothLeAudio#setVolume} instead to control active device volume.\n     *\n     * @param device {@link BluetoothDevice} representing the remote device\n     * @param volume level to set\n     * @param isGroupOperation {@code true} if Application wants to perform this operation for all\n     *     coordinated set members throughout this session. Otherwise, caller would have to control\n     *     individual device volume.\n     * @throws IllegalArgumentException if volume is not in the range [0, 255].\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "android.bluetooth.BluetoothLeAudio#setVolume" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothVolumeControl getService()", "public BluetoothAdapter getAdapter()", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)", "public void unregisterCallback(@NonNull Callback callback)", "public void setVolumeOffset(@NonNull BluetoothDevice device, @IntRange(from = -255, to = 255) int volumeOffset)", "public void setVolumeOffset(@NonNull BluetoothDevice device, @IntRange(from = 1, to = 255) int instanceId, @IntRange(from = -255, to = 255) int volumeOffset)", "private void setVolumeOffsetInternal(@NonNull BluetoothDevice device, @IntRange(from = 1, to = 255) int instanceId, @IntRange(from = -255, to = 255) int volumeOffset)", "public boolean isVolumeOffsetAvailable(@NonNull BluetoothDevice device)", "public int getNumberOfVolumeOffsetInstances(@NonNull BluetoothDevice device)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public void setDeviceVolume(@NonNull BluetoothDevice device, @IntRange(from = 0, to = 255) int volume, boolean isGroupOperation)", "private boolean isEnabled()", "private static boolean isValidDevice(@Nullable BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "mCallbackExecutorMap", "mCallback", "ACTION_CONNECTION_STATE_CHANGED", "mAdapter", "mAttributionSource", "mService" ]
}