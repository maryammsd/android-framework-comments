{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/display/VirtualDisplay.java",
  "packageName" : "android.hardware.display",
  "className" : "VirtualDisplay",
  "comment" : "\n * Represents a virtual display. The content of a virtual display is rendered to a\n * {@link android.view.Surface} that you must provide to {@link DisplayManager#createVirtualDisplay\n * createVirtualDisplay()}.\n * <p>\n * Because a virtual display renders to a surface provided by the application, it will be\n * released automatically when the process terminates and all remaining windows on it will\n * be forcibly removed.  However, you should also explicitly call {@link #release} when\n * you're done with it.\n * </p>\n *\n * @see DisplayManager#createVirtualDisplay\n ",
  "links" : [ "android.view.Surface", "android.hardware.display.DisplayManager#createVirtualDisplaycreateVirtualDisplay()", "#release" ],
  "variables" : [ {
    "name" : "mGlobal",
    "type" : "DisplayManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IVirtualDisplayCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "\n     * Gets the virtual display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Surface getSurface()",
    "returnType" : "Surface",
    "comment" : "\n     * Gets the surface that backs the virtual display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IVirtualDisplayCallback getToken()",
    "returnType" : "IVirtualDisplayCallback",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n     * Sets the surface that backs the virtual display.\n     * <p>\n     * Detaching the surface that backs a virtual display has a similar effect to\n     * turning off the screen.\n     * </p><p>\n     * It is still the caller's responsibility to destroy the surface after it has\n     * been detached.\n     * </p>\n     *\n     * @param surface The surface to set, or null to detach the surface from the virtual display.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resize(int width, int height, int densityDpi)",
    "returnType" : "void",
    "comment" : "\n     * Asks the virtual display to resize.\n     *<p>\n     * This is really just a convenience to allow applications using\n     * virtual displays to adapt to changing conditions without having\n     * to tear down and recreate the display.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Releases the virtual display and destroys its underlying surface.\n     * <p>\n     * All remaining windows on the virtual display will be forcibly removed\n     * as part of releasing the virtual display.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayState(boolean isOn)",
    "returnType" : "void",
    "comment" : "\n     * Sets the on/off state for a virtual display.\n     *\n     * @param isOn Whether the display should be on or off.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Display getDisplay()", "public Surface getSurface()", "public IVirtualDisplayCallback getToken()", "public void setSurface(Surface surface)", "public void resize(int width, int height, int densityDpi)", "public void release()", "public void setDisplayState(boolean isOn)", "public String toString()" ],
  "variableNames" : [ "mGlobal", "mDisplay", "mToken", "mSurface" ]
}