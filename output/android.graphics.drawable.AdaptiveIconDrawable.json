{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/AdaptiveIconDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "AdaptiveIconDrawable",
  "comment" : "\n * <p>This class can also be created via XML inflation using <code>&lt;adaptive-icon></code> tag\n * in addition to dynamic creation.\n *\n * <p>This drawable supports two drawable layers: foreground and background. The layers are clipped\n * when rendering using the mask defined in the device configuration.\n *\n * <ul>\n * <li>Both foreground and background layers should be sized at 108 x 108 dp.</li>\n * <li>The inner 72 x 72 dp  of the icon appears within the masked viewport.</li>\n * <li>The outer 18 dp on each of the 4 sides of the layers is reserved for use by the system UI\n * surfaces to create interesting visual effects, such as parallax or pulsing.</li>\n * </ul>\n *\n * Such motion effect is achieved by internally setting the bounds of the foreground and\n * background layer as following:\n * <pre>\n * Rect(getBounds().left - getBounds().getWidth() * #getExtraInsetFraction(),\n *      getBounds().top - getBounds().getHeight() * #getExtraInsetFraction(),\n *      getBounds().right + getBounds().getWidth() * #getExtraInsetFraction(),\n *      getBounds().bottom + getBounds().getHeight() * #getExtraInsetFraction())\n * </pre>\n ",
  "variables" : [ {
    "name" : "MASK_SIZE",
    "type" : "float",
    "comment" : "\n     * Mask path is defined inside device configuration in following dimension: [100 x 100]\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SAFEZONE_SCALE",
    "type" : "float",
    "comment" : "\n     * Launcher icons design guideline\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INSET_PERCENTAGE",
    "type" : "float",
    "comment" : "\n     * All four sides of the layers are padded with extra inset so as to provide\n     * extra content to reveal within the clip path when performing affine transformations on the\n     * layers.\n     *\n     * Each layers will reserve 25% of it's width and height.\n     *\n     * As a result, the view port of the layers is smaller than their intrinsic width and height.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_VIEW_PORT_SCALE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMask",
    "type" : "Path",
    "comment" : "\n     * Clip path defined in R.string.config_icon_mask.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMask",
    "type" : "Path",
    "comment" : "\n     * Scaled mask based on the view bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaskScaleOnly",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaskMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransparentRegion",
    "type" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BACKGROUND_ID",
    "type" : "int",
    "comment" : "\n     * Indices used to access {@link #mLayerState.mChildDrawable} array for foreground and\n     * background layer.\n     ",
    "links" : [ "#mLayerState.mChildDrawable" ]
  }, {
    "name" : "FOREGROUND_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayerState",
    "type" : "LayerState",
    "comment" : "\n     * State variable that maintains the {@link ChildDrawable} array.\n     ",
    "links" : [ "ChildDrawable" ]
  }, {
    "name" : "mLayersShader",
    "type" : "Shader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayersBitmap",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpOutRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuspendChildInvalidation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildRequestedInvalidation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private ChildDrawable createChildDrawable(Drawable drawable)",
    "returnType" : "ChildDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LayerState createConstantState(@Nullable LayerState state, @Nullable Resources res)",
    "returnType" : "LayerState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addLayer(int index, @NonNull ChildDrawable layer)",
    "returnType" : "void",
    "comment" : "\n     * Sets the layer to the {@param index} and invalidates cache.\n     *\n     * @param index The index of the layer.\n     * @param layer The layer to add.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static float getExtraInsetFraction()",
    "returnType" : "float",
    "comment" : "\n     * All four sides of the layers are padded with extra inset so as to provide\n     * extra content to reveal within the clip path when performing affine transformations on the\n     * layers.\n     *\n     * @see #getForeground() and #getBackground() for more info on how this value is used\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float getExtraInsetPercentage()",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Path getIconMask()",
    "returnType" : "Path",
    "comment" : "\n     * When called before the bound is set, the returned path is identical to\n     * R.string.config_icon_mask. After the bound is set, the\n     * returned path's computed bound is same as the #getBounds().\n     *\n     * @return the mask path object used to clip the drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getForeground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the foreground drawable managed by this class. The bound of this drawable is\n     * extended by {@link #getExtraInsetFraction()} * getBounds().width on left/right sides and by\n     * {@link #getExtraInsetFraction()} * getBounds().height on top/bottom sides.\n     *\n     * @return the foreground drawable managed by this drawable\n     ",
    "links" : [ "#getExtraInsetFraction()" ]
  }, {
    "name" : "public Drawable getBackground()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the foreground drawable managed by this class. The bound of this drawable is\n     * extended by {@link #getExtraInsetFraction()} * getBounds().width on left/right sides and by\n     * {@link #getExtraInsetFraction()} * getBounds().height on top/bottom sides.\n     *\n     * @return the background drawable managed by this drawable\n     ",
    "links" : [ "#getExtraInsetFraction()" ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerBounds(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerBoundsInternal(Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Set the child layer bounds bigger than the view port size by {@link #DEFAULT_VIEW_PORT_SCALE}\n     ",
    "links" : [ "#DEFAULT_VIEW_PORT_SCALE" ]
  }, {
    "name" : "private void updateMaskBoundsInternal(Rect b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateSelf()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Region getSafeZone()",
    "returnType" : "Region",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Region getTransparentRegion()",
    "returnType" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSourceDrawableResId()",
    "returnType" : "int",
    "comment" : "\n     * If the drawable was inflated from XML, this returns the resource ID for the drawable\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void inflateLayers(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflates child layers using the specified parser.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerFromTypedArray(@NonNull ChildDrawable layer, @NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProjected()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void suspendChildInvalidation()",
    "returnType" : "void",
    "comment" : "\n     * Temporarily suspends child invalidation.\n     *\n     * @see #resumeChildInvalidation()\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resumeChildInvalidation()",
    "returnType" : "void",
    "comment" : "\n     * Resumes child invalidation after suspension, immediately performing an\n     * invalidation if one was requested by a child during suspension.\n     *\n     * @see #suspendChildInvalidation()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOpacity(int opacity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMaxIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMaxIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MASK_SIZE", "SAFEZONE_SCALE", "EXTRA_INSET_PERCENTAGE", "DEFAULT_VIEW_PORT_SCALE", "sMask", "mMask", "mMaskScaleOnly", "mMaskMatrix", "mTransparentRegion", "BACKGROUND_ID", "FOREGROUND_ID", "mLayerState", "mLayersShader", "mLayersBitmap", "mTmpOutRect", "mHotspotBounds", "mMutated", "mSuspendChildInvalidation", "mChildRequestedInvalidation", "mCanvas", "mPaint" ],
  "methodNames" : [ "private ChildDrawable createChildDrawable(Drawable drawable)", " LayerState createConstantState(@Nullable LayerState state, @Nullable Resources res)", "private void addLayer(int index, @NonNull ChildDrawable layer)", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public static float getExtraInsetFraction()", "public static float getExtraInsetPercentage()", "public Path getIconMask()", "public Drawable getForeground()", "public Drawable getBackground()", "protected void onBoundsChange(Rect bounds)", "private void updateLayerBounds(Rect bounds)", "private void updateLayerBoundsInternal(Rect bounds)", "private void updateMaskBoundsInternal(Rect b)", "public void draw(Canvas canvas)", "public void invalidateSelf()", "public void getOutline(@NonNull Outline outline)", "public Region getSafeZone()", "public Region getTransparentRegion()", "public void applyTheme(@NonNull Theme t)", "public int getSourceDrawableResId()", "private void inflateLayers(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "private void updateLayerFromTypedArray(@NonNull ChildDrawable layer, @NonNull TypedArray a)", "public boolean canApplyTheme()", "public boolean isProjected()", "private void suspendChildInvalidation()", "private void resumeChildInvalidation()", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public int getChangingConfigurations()", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(Rect outRect)", "public boolean setVisible(boolean visible, boolean restart)", "public void setDither(boolean dither)", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setColorFilter(ColorFilter colorFilter)", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public void setOpacity(int opacity)", "public int getOpacity()", "public void setAutoMirrored(boolean mirrored)", "public boolean isAutoMirrored()", "public void jumpToCurrentState()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "protected boolean onStateChange(int[] state)", "protected boolean onLevelChange(int level)", "public int getIntrinsicWidth()", "private int getMaxIntrinsicWidth()", "public int getIntrinsicHeight()", "private int getMaxIntrinsicHeight()", "public ConstantState getConstantState()", "public Drawable mutate()", "public void clearMutated()" ]
}