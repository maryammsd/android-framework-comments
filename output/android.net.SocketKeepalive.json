{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/SocketKeepalive.java",
  "packageName" : "android.net",
  "className" : "SocketKeepalive",
  "comment" : "\n * Allows applications to request that the system periodically send specific packets on their\n * behalf, using hardware offload to save battery power.\n *\n * To request that the system send keepalives, call one of the methods that return a\n * {@link SocketKeepalive} object, such as {@link ConnectivityManager#createSocketKeepalive},\n * passing in a non-null callback. If the {@link SocketKeepalive} is successfully\n * started, the callback's {@code onStarted} method will be called. If an error occurs,\n * {@code onError} will be called, specifying one of the {@code ERROR_*} constants in this\n * class.\n *\n * To stop an existing keepalive, call {@link SocketKeepalive#stop}. The system will call\n * {@link SocketKeepalive.Callback#onStopped} if the operation was successful or\n * {@link SocketKeepalive.Callback#onError} if an error occurred.\n *\n * For cellular, the device MUST support at least 1 keepalive slot.\n *\n * For WiFi, the device SHOULD support keepalive offload. If it does not, it MUST reply with\n * {@link SocketKeepalive.Callback#onError} with {@code ERROR_UNSUPPORTED} to any keepalive offload\n * request. If it does, it MUST support at least 3 concurrent keepalive slots.\n ",
  "links" : [ "android.net.SocketKeepalive#stop", "SocketKeepalive.Callback#onStopped", "android.net.SocketKeepalive", "SocketKeepalive.Callback#onError", "android.net.ConnectivityManager#createSocketKeepalive" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SUCCESS",
    "type" : "int",
    "comment" : "\n     * Success. It indicates there is no error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUCCESS_PAUSED",
    "type" : "int",
    "comment" : "\n     * Success when trying to suspend.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_KEEPALIVE",
    "type" : "int",
    "comment" : "\n     * No keepalive. This should only be internally as it indicates There is no keepalive.\n     * It should not propagate to applications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_RECEIVED",
    "type" : "int",
    "comment" : "\n     * Data received.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BINDER_DIED",
    "type" : "int",
    "comment" : "\n     * The binder died.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_NETWORK",
    "type" : "int",
    "comment" : "\n     * The invalid network. It indicates the specified {@code Network} is not connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_IP_ADDRESS",
    "type" : "int",
    "comment" : "\n     * The invalid IP addresses. Indicates the specified IP addresses are invalid.\n     * For example, the specified source IP address is not configured on the\n     * specified {@code Network}.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_PORT",
    "type" : "int",
    "comment" : "\n     * The port is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_LENGTH",
    "type" : "int",
    "comment" : "\n     * The length is invalid (e.g. too long).\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_INTERVAL",
    "type" : "int",
    "comment" : "\n     * The interval is invalid (e.g. too short).\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INVALID_SOCKET",
    "type" : "int",
    "comment" : "\n     * The socket is invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SOCKET_NOT_IDLE",
    "type" : "int",
    "comment" : "\n     * The socket is not idle.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_STOP_REASON_UNINITIALIZED",
    "type" : "int",
    "comment" : "\n     * The stop reason is uninitialized. This should only be internally used as initial state\n     * of stop reason, instead of propagating to application.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * The request is unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_HARDWARE_ERROR",
    "type" : "int",
    "comment" : "\n     * There was a hardware error.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_INSUFFICIENT_RESOURCES",
    "type" : "int",
    "comment" : "\n     * Resources are insufficient (e.g. all hardware slots are in use).\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_NO_SUCH_SLOT",
    "type" : "int",
    "comment" : "\n     * There was no such slot, or no keepalive running on this slot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_AUTOMATIC_ON_OFF",
    "type" : "int",
    "comment" : "\n     * Whether the system automatically toggles keepalive when no TCP connection is open on the VPN.\n     *\n     * If this flag is present, the system will monitor the VPN(s) running on top of the specified\n     * network for open TCP connections. When no such connections are open, it will turn off the\n     * keepalives to conserve battery power. When there is at least one such connection it will\n     * turn on the keepalives to make sure functionality is preserved.\n     *\n     * This only works with {@link NattSocketKeepalive}.\n     * @hide\n     ",
    "links" : [ "android.net.NattSocketKeepalive" ]
  }, {
    "name" : "MIN_INTERVAL_SEC",
    "type" : "int",
    "comment" : "\n     * The minimum interval in seconds between keepalive packet transmissions.\n     *\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "MAX_INTERVAL_SEC",
    "type" : "int",
    "comment" : "\n     * The maximum interval in seconds between keepalive packet transmissions.\n     *\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IConnectivityManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mNetwork",
    "type" : "Network",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mPfd",
    "type" : "ParcelFileDescriptor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "ISocketKeepaliveCallback",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void start(@IntRange(from = MIN_INTERVAL_SEC, to = MAX_INTERVAL_SEC) int intervalSec)",
    "returnType" : "void",
    "comment" : "\n     * Request that keepalive be started with the given {@code intervalSec}.\n     *\n     * See {@link SocketKeepalive}. If the remote binder dies, or the binder call throws an\n     * exception when invoking start or stop of the {@link SocketKeepalive}, a\n     * {@link RuntimeException} caused by a {@link RemoteException} will be thrown into the\n     * {@link Executor}. This is typically not important to catch because the remote party is\n     * the system, so if it is not in shape to communicate through binder the system is going\n     * down anyway. If the caller still cares, it can use a custom {@link Executor} to catch the\n     * {@link RuntimeException}.\n     *\n     * @param intervalSec The target interval in seconds between keepalive packet transmissions.\n     *                    The interval should be between 10 seconds and 3600 seconds, otherwise\n     *                    {@link #ERROR_INVALID_INTERVAL} will be returned.\n     ",
    "links" : [ "android.net.SocketKeepalive", "RuntimeException", "java.util.concurrent.Executor", "android.os.RemoteException", "#ERROR_INVALID_INTERVAL" ]
  }, {
    "name" : "public final void start(@IntRange(from = MIN_INTERVAL_SEC, to = MAX_INTERVAL_SEC) int intervalSec, @StartFlags int flags, @Nullable Network underpinnedNetwork)",
    "returnType" : "void",
    "comment" : "\n     * Request that keepalive be started with the given {@code intervalSec}.\n     *\n     * See {@link SocketKeepalive}. If the remote binder dies, or the binder call throws an\n     * exception when invoking start or stop of the {@link SocketKeepalive}, a\n     * {@link RuntimeException} caused by a {@link RemoteException} will be thrown into the\n     * {@link Executor}. This is typically not important to catch because the remote party is\n     * the system, so if it is not in shape to communicate through binder the system is going\n     * down anyway. If the caller still cares, it can use a custom {@link Executor} to catch the\n     * {@link RuntimeException}.\n     *\n     * @param intervalSec The target interval in seconds between keepalive packet transmissions.\n     *                    The interval should be between 10 seconds and 3600 seconds. Otherwise,\n     *                    the supplied {@link Callback} will see a call to\n     *                    {@link Callback#onError(int)} with {@link #ERROR_INVALID_INTERVAL}.\n     * @param flags Flags to enable/disable available options on this keepalive.\n     * @param underpinnedNetwork an optional network running over mNetwork that this\n     *                           keepalive is intended to keep up, e.g. an IPSec\n     *                           tunnel running over mNetwork.\n     * @hide\n     ",
    "links" : [ "android.net.SocketKeepalive", "RuntimeException", "Callback", "java.util.concurrent.Executor", "android.os.RemoteException", "#onError(int)", "#ERROR_INVALID_INTERVAL" ]
  }, {
    "name" : "protected abstract void startImpl(int intervalSec, @StartFlags int flags, Network underpinnedNetwork)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void stop()",
    "returnType" : "void",
    "comment" : "\n     * Requests that keepalive be stopped. The application must wait for {@link Callback#onStopped}\n     * before using the object. See {@link SocketKeepalive}.\n     ",
    "links" : [ "android.net.SocketKeepalive", "#onStopped" ]
  }, {
    "name" : "protected abstract void stopImpl()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final void close()",
    "returnType" : "void",
    "comment" : "\n     * Deactivate this {@link SocketKeepalive} and free allocated resources. The instance won't be\n     * usable again if {@code close()} is called.\n     ",
    "links" : [ "android.net.SocketKeepalive" ]
  } ],
  "methodNames" : [ "public final void start(@IntRange(from = MIN_INTERVAL_SEC, to = MAX_INTERVAL_SEC) int intervalSec)", "public final void start(@IntRange(from = MIN_INTERVAL_SEC, to = MAX_INTERVAL_SEC) int intervalSec, @StartFlags int flags, @Nullable Network underpinnedNetwork)", "protected abstract void startImpl(int intervalSec, @StartFlags int flags, Network underpinnedNetwork)", "public final void stop()", "protected abstract void stopImpl()", "public final void close()" ],
  "variableNames" : [ "TAG", "SUCCESS", "SUCCESS_PAUSED", "NO_KEEPALIVE", "DATA_RECEIVED", "BINDER_DIED", "ERROR_INVALID_NETWORK", "ERROR_INVALID_IP_ADDRESS", "ERROR_INVALID_PORT", "ERROR_INVALID_LENGTH", "ERROR_INVALID_INTERVAL", "ERROR_INVALID_SOCKET", "ERROR_SOCKET_NOT_IDLE", "ERROR_STOP_REASON_UNINITIALIZED", "ERROR_UNSUPPORTED", "ERROR_HARDWARE_ERROR", "ERROR_INSUFFICIENT_RESOURCES", "ERROR_NO_SUCH_SLOT", "FLAG_AUTOMATIC_ON_OFF", "MIN_INTERVAL_SEC", "MAX_INTERVAL_SEC", "mService", "mNetwork", "mPfd", "mExecutor", "mCallback" ]
}