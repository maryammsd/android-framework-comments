{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tunerresourcemanager/ITunerResourceManager.java",
  "packageName" : "android.media.tv.tunerresourcemanager",
  "className" : "ITunerResourceManager",
  "comment" : "\n * Interface of the Tuner Resource Manager. It manages resources used by TV Tuners.\n * <p>Resources include:\n * <ul>\n * <li>TunerFrontend {@link android.media.tv.tuner.frontend}.\n * <li>TunerLnb {@link android.media.tv.tuner.Lnb}.\n * <li>MediaCas {@link android.media.MediaCas}.\n * <li>TvInputHardware {@link android.media.tv.TvInputHardwareInfo}.\n * <ul>\n * \n * <p>Expected workflow is:\n * <ul>\n * <li>Tuner Java/MediaCas/TIF update resources of the current device with TRM.\n * <li>Client registers its profile through {@link #registerClientProfile(ResourceClientProfile,\n * IResourcesReclaimListener, int[])}.\n * <li>Client requests resources through request APIs.\n * <li>If the resource needs to be handed to a higher priority client from a lower priority\n * one, TRM calls IResourcesReclaimListener registered by the lower priority client to release\n * the resource.\n * <ul>\n * \n * @hide\n ",
  "links" : [ "android.media.MediaCas", "android.media.tv.TvInputHardwareInfo", "#registerClientProfile(ResourceClientProfile", "android.media.tv.tuner.Lnb", "android.media.tv.tuner.frontend" ],
  "variables" : [ {
    "name" : "DESCRIPTOR",
    "type" : "java.lang.String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerClientProfile(android.media.tv.tunerresourcemanager.ResourceClientProfile profile, android.media.tv.tunerresourcemanager.IResourcesReclaimListener listener, int[] clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This API is used by the client to register their profile with the Tuner Resource manager.\n   * \n   * <p>The profile contains information that can show the base priority score of the client.\n   * \n   * @param profile {@link ResourceClientProfile} profile of the current client\n   * @param listener {@link IResourcesReclaimListener} a callback to\n   *                 reclaim clients' resources when needed.\n   * @param clientId returns a clientId from the resource manager when the\n   *                 the client registers its profile.\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.ResourceClientProfile", "android.media.tv.tunerresourcemanager.IResourcesReclaimListener" ]
  }, {
    "name" : "public void unregisterClientProfile(int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * This API is used by the client to unregister their profile with the Tuner Resource manager.\n   * \n   * @param clientId the client id that needs to be unregistered.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateClientPriority(int clientId, int priority, int niceValue) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Updates a registered client's priority and niceValue.\n   * \n   * @param clientId the id of the client that is updating its profile.\n   * @param priority the priority that the client would like to update to.\n   * @param niceValue the nice value that the client would like to update to.\n   * \n   * @return true if the update is successful.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasUnusedFrontend(int frontendType) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Checks if there is any unused frontend resource of the specified type.\n   * \n   * @param frontendType the specific type of frontend resource to be checked for.\n   * \n   * @return true if there is any unused resource of the specified type.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLowestPriority(int clientId, int frontendType) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Checks if the client has the lowest priority among the clients that are holding\n   * the frontend resource of the specified type.\n   * \n   * <p> When this function returns false, it means that there is at least one client with the\n   * strictly lower priority (than clientId) that is reclaimable by the system.\n   * \n   * @param clientId The client ID to be checked the priority for.\n   * @param frontendType The specific frontend type to be checked for.\n   * \n   * @return false if there is another client holding the frontend resource of the specified type\n   * that can be reclaimed. Otherwise true.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setFrontendInfoList(android.media.tv.tunerresourcemanager.TunerFrontendInfo[] infos) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Updates the available Frontend resources information on the current device.\n   * \n   * <p><strong>Note:</strong> This update must happen before the first\n   * {@link #requestFrontend(TunerFrontendRequest,int[])} and {@link #releaseFrontend(int, int)}\n   * call.\n   * \n   * @param infos an array of the available {@link TunerFrontendInfo} information.\n   ",
    "links" : [ "#releaseFrontend(int", "android.media.tv.tunerresourcemanager.TunerFrontendInfo", "#requestFrontend(TunerFrontendRequest" ]
  }, {
    "name" : "public void updateCasInfo(int casSystemId, int maxSessionNum) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Updates the available Cas resource information on the current device.\n   * \n   * <p><strong>Note:</strong> This update must happen before the first\n   * {@link #requestCasSession(CasSessionRequest, int[])} and {@link #releaseCasSession(int, int)}\n   * call.\n   * \n   * @param casSystemId id of the updating CAS system.\n   * @param maxSessionNum the max session number of the CAS system that is updated.\n   ",
    "links" : [ "#requestCasSession(CasSessionRequest", "#releaseCasSession(int" ]
  }, {
    "name" : "public void setDemuxInfoList(android.media.tv.tunerresourcemanager.TunerDemuxInfo[] infos) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Updates the available Demux resources information on the current device.\n   * \n   * <p><strong>Note:</strong> This update must happen before the first\n   * {@link #requestDemux(TunerDemux,int[])} and {@link #releaseDemux(int, int)}\n   * call.\n   * \n   * @param infos an array of the available {@link TunerDemux} information.\n   ",
    "links" : [ "#requestDemux(TunerDemux", "TunerDemux", "#releaseDemux(int" ]
  }, {
    "name" : "public void setLnbInfoList(int[] lnbIds) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Updates the available Lnb resource information on the current device.\n   * \n   * <p><strong>Note:</strong> This update must happen before the first\n   * {@link #requestLnb(TunerLnbRequest, int[])} and {@link #releaseLnb(int, int)} call.\n   * \n   * @param lnbIds ids of the updating lnbs.\n   ",
    "links" : [ "#releaseLnb(int", "#requestLnb(TunerLnbRequest" ]
  }, {
    "name" : "public boolean requestFrontend(android.media.tv.tunerresourcemanager.TunerFrontendRequest request, int[] frontendHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request a frontend from the TunerHAL.\n   * \n   * <p>There are two cases:\n   * <ul>\n   * <li>If the desiredId is not {@link TunerFrontendRequest#DEFAULT_DESIRED_ID}\n   * <li><li>If the desired frontend with the given frontendType is available, the API would send\n   * the id back.\n   * <li><li>If the desired frontend with the given frontendType is in use but the current request\n   * info can show higher priority than other uses of Frontend, the API will send\n   * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * <li><li>If no frontend can be granted, the API would return false.\n   * <ul>\n   * \n   * <li>If the desiredId is {@link TunerFrontendRequest#DEFAULT_DESIRED_ID}\n   * <li><li>If there is frontend available, the API would send the id back.\n   * <li><li>If no Frontend is available but the current request info can show higher priority\n   * than other uses of Frontend, the API will send\n   * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * <li><li>If no frontend can be granted, the API would return false.\n   * <ul>\n   * \n   * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n   * before this request.\n   * \n   * @param request {@link TunerFrontendRequest} information of the current request.\n   * @param frontendHandle a one-element array to return the granted frontendHandle.\n   * \n   * @return true if there is frontend granted.\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.TunerFrontendRequest#DEFAULT_DESIRED_ID", "android.media.tv.tunerresourcemanager.IResourcesReclaimListener#onReclaimResources()", "Tuner", "android.media.tv.tunerresourcemanager.TunerFrontendRequest", "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public boolean setMaxNumberOfFrontends(int frontendType, int maxNum) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Sets the maximum usable frontends number of a given frontend type. It is used to enable or\n   * disable frontends when cable connection status is changed by user.\n   * \n   * @param frontendType the frontendType which the maximum usable number will be set for.\n   * @param maxNumber the new maximum usable number.\n   * \n   * @return true if  successful and false otherwise.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxNumberOfFrontends(int frontendType) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n   * Get the maximum usable frontends number of a given frontend type.\n   * \n   * @param frontendType the frontendType which the maximum usable number will be queried for.\n   * \n   * @return the maximum usable number of the queried frontend type. Returns -1 when the\n   *         frontendType is invalid\n   ",
    "links" : [ ]
  }, {
    "name" : "public void shareFrontend(int selfClientId, int targetClientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Requests to share frontend with an existing client.\n   * \n   * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n   * before this request.\n   * \n   * @param selfClientId the id of the client that sends the request.\n   * @param targetClientId the id of the client to share the frontend with.\n   ",
    "links" : [ "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public boolean transferOwner(int resourceType, int currentOwnerId, int newOwnerId) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Transfers the ownership of the shared resource.\n   * \n   * <p><strong>Note:</strong> Only the existing frontend sharee can be the new owner.\n   * \n   * @param resourceType the type of resource to transfer the ownership for.\n   * @param currentOwnerId the id of the current owner client.\n   * @param newOwnerId the id of the new owner client.\n   * \n   * @return true if successful. false otherwise.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean requestDemux(android.media.tv.tunerresourcemanager.TunerDemuxRequest request, int[] demuxHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request an available demux from the TunerHAL.\n   * \n   * <p>There are three possible scenarios:\n   * <ul>\n   * <li>If there is demux available, the API would send the handle back.\n   * \n   * <li>If no Demux is available but the current request info can show higher priority than\n   * other uses of demuxes, the API will send\n   * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * \n   * <li>If no demux can be granted, the API would return false.\n   * <ul>\n   * \n   * @param request {@link TunerDemuxRequest} information of the current request.\n   * @param demuxHandle a one-element array to return the granted demux handle.\n   * \n   * @return true if there is demux granted.\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.TunerDemuxRequest", "android.media.tv.tunerresourcemanager.IResourcesReclaimListener#onReclaimResources()", "Tuner" ]
  }, {
    "name" : "public boolean requestDescrambler(android.media.tv.tunerresourcemanager.TunerDescramblerRequest request, int[] descramblerHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request an available descrambler from the\n   * TunerHAL.\n   * \n   * <p>There are three possible scenarios:\n   * <ul>\n   * <li>If there is descrambler available, the API would send the handle back.\n   * \n   * <li>If no Descrambler is available but the current request info can show higher priority than\n   * other uses of Descrambler, the API will send\n   * {@link IResourcesReclaimListener#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * \n   * <li>If no Descrambler can be granted, the API would return false.\n   * <ul>\n   * \n   * @param request {@link TunerDescramblerRequest} information of the current request.\n   * @param descramblerHandle a one-element array to return the granted descrambler handle.\n   * \n   * @return true if there is Descrambler granted.\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.TunerDescramblerRequest", "android.media.tv.tunerresourcemanager.IResourcesReclaimListener#onReclaimResources()", "Tuner" ]
  }, {
    "name" : "public boolean requestCasSession(android.media.tv.tunerresourcemanager.CasSessionRequest request, int[] casSessionHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request an available Cas session. This session\n   * needs to be under the CAS system with the id indicated in the {@code request}.\n   * \n   * <p>There are three possible scenarios:\n   * <ul>\n   * <li>If there is Cas session available, the API would send the id back.\n   * \n   * <li>If no Cas session is available but the current request info can show higher priority than\n   * other uses of the sessions under the requested CAS system, the API will send\n   * {@link ITunerResourceManagerCallback#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * \n   * <li>If no Cas session can be granted, the API would return false.\n   * <ul>\n   * \n   * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this request.\n   * \n   * @param request {@link CasSessionRequest} information of the current request.\n   * @param casSessionHandle a one-element array to return the granted cas session handle.\n   * \n   * @return true if there is CAS session granted.\n   ",
    "links" : [ "#onReclaimResources()", "android.media.tv.tunerresourcemanager.CasSessionRequest", "#updateCasInfo(int", "Tuner" ]
  }, {
    "name" : "public boolean requestCiCam(android.media.tv.tunerresourcemanager.TunerCiCamRequest request, int[] ciCamHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request an available CuCam.\n   * \n   * <p>There are three possible scenarios:\n   * <ul>\n   * <li>If there is CiCam available, the API would send the handle back.\n   * \n   * <li>If no CiCma is available but the current request info can show higher priority than\n   * other uses of the ciCam, the API will send\n   * {@link ITunerResourceManagerCallback#onReclaimResources()} to the {@link Tuner}. Tuner would\n   * handle the resource reclaim on the holder of lower priority and notify the holder of its\n   * resource loss.\n   * \n   * <li>If no CiCam can be granted, the API would return false.\n   * <ul>\n   * \n   * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this request.\n   * \n   * @param request {@link TunerCiCamRequest} information of the current request.\n   * @param ciCamHandle a one-element array to return the granted ciCam handle.\n   * \n   * @return true if there is CiCam granted.\n   ",
    "links" : [ "#onReclaimResources()", "#updateCasInfo(int", "android.media.tv.tunerresourcemanager.TunerCiCamRequest", "Tuner" ]
  }, {
    "name" : "public boolean requestLnb(android.media.tv.tunerresourcemanager.TunerLnbRequest request, int[] lnbHandle) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * This API is used by the Tuner framework to request an available Lnb from the TunerHAL.\n   * \n   * <p>There are three possible scenarios:\n   * <ul>\n   * <li>If there is Lnb available, the API would send the id back.\n   * \n   * <li>If no Lnb is available but the current request has a higher priority than other uses of\n   * lnbs, the API will send {@link ITunerResourceManagerCallback#onReclaimResources()} to the\n   * {@link Tuner}. Tuner would handle the resource reclaim on the holder of lower priority and\n   * notify the holder of its resource loss.\n   * \n   * <li>If no Lnb system can be granted, the API would return false.\n   * <ul>\n   * \n   * <p><strong>Note:</strong> {@link #setLnbInfos(int[])} must be called before this request.\n   * \n   * @param request {@link TunerLnbRequest} information of the current request.\n   * @param lnbHandle a one-element array to return the granted Lnb handle.\n   * \n   * @return true if there is Lnb granted.\n   ",
    "links" : [ "#onReclaimResources()", "#setLnbInfos(int", "android.media.tv.tunerresourcemanager.TunerLnbRequest", "Tuner" ]
  }, {
    "name" : "public void releaseFrontend(int frontendHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the given frontend has been released.\n   * \n   * <p>Client must call this whenever it releases a Tuner frontend.\n   * \n   * <p><strong>Note:</strong> {@link #setFrontendInfoList(TunerFrontendInfo[])} must be called\n   * before this release.\n   * \n   * @param frontendHandle the handle of the released frontend.\n   * @param clientId the id of the client that is releasing the frontend.\n   ",
    "links" : [ "#setFrontendInfoList(TunerFrontendInfo" ]
  }, {
    "name" : "public void releaseDemux(int demuxHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the Demux with the given handle was released.\n   * \n   * <p>Client must call this whenever it releases a demux.\n   * \n   * @param demuxHandle the handle of the released Tuner Demux.\n   * @param clientId the id of the client that is releasing the demux.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void releaseDescrambler(int descramblerHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the Descrambler with the given handle was released.\n   * \n   * <p>Client must call this whenever it releases a descrambler.\n   * \n   * @param descramblerHandle the handle of the released Tuner Descrambler.\n   * @param clientId the id of the client that is releasing the descrambler.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void releaseCasSession(int casSessionHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the given Cas session has been released.\n   * \n   * <p>Client must call this whenever it releases a Cas session.\n   * \n   * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this release.\n   * \n   * @param casSessionHandle the handle of the released CAS session.\n   * @param clientId the id of the client that is releasing the cas session.\n   ",
    "links" : [ "#updateCasInfo(int" ]
  }, {
    "name" : "public void releaseCiCam(int ciCamHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the given CiCam has been released.\n   * \n   * <p>Client must call this whenever it releases a CiCam.\n   * \n   * <p><strong>Note:</strong> {@link #updateCasInfo(int, int)} must be called before this\n   * release.\n   * \n   * @param ciCamHandle the handle of the releasing CiCam.\n   * @param clientId the id of the client that is releasing the CiCam.\n   ",
    "links" : [ "#updateCasInfo(int" ]
  }, {
    "name" : "public void releaseLnb(int lnbHandle, int clientId) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Notifies the TRM that the Lnb with the given handle was released.\n   * \n   * <p>Client must call this whenever it releases an Lnb.\n   * \n   * <p><strong>Note:</strong> {@link #setLnbInfos(int[])} must be called before this release.\n   * \n   * @param lnbHandle the handle of the released Tuner Lnb.\n   * @param clientId the id of the client that is releasing the lnb.\n   ",
    "links" : [ "#setLnbInfos(int" ]
  }, {
    "name" : "public boolean isHigherPriority(android.media.tv.tunerresourcemanager.ResourceClientProfile challengerProfile, android.media.tv.tunerresourcemanager.ResourceClientProfile holderProfile) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Compare two clients' priority.\n   * \n   * @param challengerProfile the {@link ResourceClientProfile} of the challenger.\n   * @param holderProfile the {@link ResourceClientProfile} of the holder of the resource.\n   * \n   * @return true if the challenger has higher priority than the holder.\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.ResourceClientProfile" ]
  }, {
    "name" : "public void storeResourceMap(int resourceType) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Stores Frontend resource map for the later restore.\n   * \n   * <p>This is API is only for testing purpose and should be used in pair with\n   * restoreResourceMap(), which allows testing of {@link Tuner} APIs\n   * that behave differently based on different sets of resource map.\n   * \n   * @param resourceType The resource type to store the map for.\n   ",
    "links" : [ "Tuner" ]
  }, {
    "name" : "public void clearResourceMap(int resourceType) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Clears the frontend resource map.\n   * \n   * <p>This is API is only for testing purpose and should be called right after\n   * storeResourceMap(), so TRMService#removeFrontendResource() does not\n   * get called in TRMService#setFrontendInfoListInternal() for custom frontend\n   * resource map creation.\n   * \n   * @param resourceType The resource type to clear the map for.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void restoreResourceMap(int resourceType) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "\n   * Restores Frontend resource map if it was stored before.\n   * \n   * <p>This is API is only for testing purpose and should be used in pair with\n   * storeResourceMap(), which allows testing of {@link Tuner} APIs\n   * that behave differently based on different sets of resource map.\n   * \n   * @param resourceType The resource type to restore the map for.\n   ",
    "links" : [ "Tuner" ]
  }, {
    "name" : "public boolean acquireLock(int clientId, long clientThreadId) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Grants the lock to the caller for public {@link Tuner} APIs\n   * \n   * <p>{@link Tuner} functions that call both [@link TunerResourceManager} APIs and\n   * grabs lock that are also used in {@link IResourcesReclaimListener#onReclaimResources()}\n   * must call this API before acquiring lock used in onReclaimResources().\n   * \n   * <p>This API will block until it releases the lock or fails\n   * \n   * @param clientId The ID of the caller.\n   * \n   * @return true if the lock is granted. If false is returned, calling this API again is not\n   * guaranteed to work and may be unrecoverrable. (This should not happen.)\n   ",
    "links" : [ "android.media.tv.tunerresourcemanager.IResourcesReclaimListener#onReclaimResources()", "Tuner", "android.media.tv.tunerresourcemanager.TunerResourceManager" ]
  }, {
    "name" : "public boolean releaseLock(int clientId) throws android.os.RemoteException",
    "returnType" : "boolean",
    "comment" : "\n   * Releases the lock to the caller for public {@link Tuner} APIs\n   * \n   * <p>This API must be called in pair with {@link #acquireLock(int, int)}\n   * \n   * <p>This API will block until it releases the lock or fails\n   * \n   * @param clientId The ID of the caller.\n   * \n   * @return true if the lock is granted. If false is returned, calling this API again is not\n   * guaranteed to work and may be unrecoverrable. (This should not happen.)\n   ",
    "links" : [ "#acquireLock(int", "Tuner" ]
  }, {
    "name" : "public int getClientPriority(int useCase, int pid) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n   * Returns a priority for the given use case type and the client's foreground or background\n   * status.\n   * \n   * @param useCase the use case type of the client. When the given use case type is invalid,\n   *        the default use case type will be used. {@see TvInputService#PriorityHintUseCaseType}.\n   * @param pid the pid of the client. When the pid is invalid, background status will be used as\n   *        a client's status. Otherwise, client's app corresponding to the given session id will\n   *        be used as a client. {@see TvInputService#onCreateSession(String, String)}.\n   * \n   * @return the client priority..\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getConfigPriority(int useCase, boolean isForeground) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "\n   * Returns a config priority for the given use case type and the foreground or background\n   * status.\n   * \n   * @param useCase the use case type of the client. When the given use case type is invalid,\n   *        the default use case type will be used. {@see TvInputService#PriorityHintUseCaseType}.\n   * @param isForeground {@code true} if foreground, {@code false} otherwise.\n   * \n   * @return the config priority.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerClientProfile(android.media.tv.tunerresourcemanager.ResourceClientProfile profile, android.media.tv.tunerresourcemanager.IResourcesReclaimListener listener, int[] clientId) throws android.os.RemoteException", "public void unregisterClientProfile(int clientId) throws android.os.RemoteException", "public boolean updateClientPriority(int clientId, int priority, int niceValue) throws android.os.RemoteException", "public boolean hasUnusedFrontend(int frontendType) throws android.os.RemoteException", "public boolean isLowestPriority(int clientId, int frontendType) throws android.os.RemoteException", "public void setFrontendInfoList(android.media.tv.tunerresourcemanager.TunerFrontendInfo[] infos) throws android.os.RemoteException", "public void updateCasInfo(int casSystemId, int maxSessionNum) throws android.os.RemoteException", "public void setDemuxInfoList(android.media.tv.tunerresourcemanager.TunerDemuxInfo[] infos) throws android.os.RemoteException", "public void setLnbInfoList(int[] lnbIds) throws android.os.RemoteException", "public boolean requestFrontend(android.media.tv.tunerresourcemanager.TunerFrontendRequest request, int[] frontendHandle) throws android.os.RemoteException", "public boolean setMaxNumberOfFrontends(int frontendType, int maxNum) throws android.os.RemoteException", "public int getMaxNumberOfFrontends(int frontendType) throws android.os.RemoteException", "public void shareFrontend(int selfClientId, int targetClientId) throws android.os.RemoteException", "public boolean transferOwner(int resourceType, int currentOwnerId, int newOwnerId) throws android.os.RemoteException", "public boolean requestDemux(android.media.tv.tunerresourcemanager.TunerDemuxRequest request, int[] demuxHandle) throws android.os.RemoteException", "public boolean requestDescrambler(android.media.tv.tunerresourcemanager.TunerDescramblerRequest request, int[] descramblerHandle) throws android.os.RemoteException", "public boolean requestCasSession(android.media.tv.tunerresourcemanager.CasSessionRequest request, int[] casSessionHandle) throws android.os.RemoteException", "public boolean requestCiCam(android.media.tv.tunerresourcemanager.TunerCiCamRequest request, int[] ciCamHandle) throws android.os.RemoteException", "public boolean requestLnb(android.media.tv.tunerresourcemanager.TunerLnbRequest request, int[] lnbHandle) throws android.os.RemoteException", "public void releaseFrontend(int frontendHandle, int clientId) throws android.os.RemoteException", "public void releaseDemux(int demuxHandle, int clientId) throws android.os.RemoteException", "public void releaseDescrambler(int descramblerHandle, int clientId) throws android.os.RemoteException", "public void releaseCasSession(int casSessionHandle, int clientId) throws android.os.RemoteException", "public void releaseCiCam(int ciCamHandle, int clientId) throws android.os.RemoteException", "public void releaseLnb(int lnbHandle, int clientId) throws android.os.RemoteException", "public boolean isHigherPriority(android.media.tv.tunerresourcemanager.ResourceClientProfile challengerProfile, android.media.tv.tunerresourcemanager.ResourceClientProfile holderProfile) throws android.os.RemoteException", "public void storeResourceMap(int resourceType) throws android.os.RemoteException", "public void clearResourceMap(int resourceType) throws android.os.RemoteException", "public void restoreResourceMap(int resourceType) throws android.os.RemoteException", "public boolean acquireLock(int clientId, long clientThreadId) throws android.os.RemoteException", "public boolean releaseLock(int clientId) throws android.os.RemoteException", "public int getClientPriority(int useCase, int pid) throws android.os.RemoteException", "public int getConfigPriority(int useCase, boolean isForeground) throws android.os.RemoteException" ],
  "variableNames" : [ "DESCRIPTOR" ]
}