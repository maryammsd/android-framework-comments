{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/ip/IpServer.java",
  "packageName" : "android.net.ip",
  "className" : "IpServer",
  "comment" : "\n * Provides the interface to IP-layer serving functionality for a given network\n * interface, e.g. for tethering or \"local-only hotspot\" mode.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "STATE_UNAVAILABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_AVAILABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_TETHERED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_LOCAL_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOUG_ADAMS",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_IFACE_ADDR",
    "type" : "String",
    "comment" : " TODO: have PanService use some visible version of this constant",
    "links" : [ ]
  }, {
    "name" : "DHCP_LEASE_TIME_SECS",
    "type" : "int",
    "comment" : " TODO: have this configurable",
    "links" : [ ]
  }, {
    "name" : "NULL_MAC_ADDRESS",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMessageClasses",
    "type" : "Class[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMagicDecoderRing",
    "type" : "SparseArray<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CMD_TETHER_REQUESTED",
    "type" : "int",
    "comment" : " request from the user that it wants to tether",
    "links" : [ ]
  }, {
    "name" : "CMD_TETHER_UNREQUESTED",
    "type" : "int",
    "comment" : " request from the user that it wants to untether",
    "links" : [ ]
  }, {
    "name" : "CMD_INTERFACE_DOWN",
    "type" : "int",
    "comment" : " notification that this interface is down",
    "links" : [ ]
  }, {
    "name" : "CMD_IP_FORWARDING_ENABLE_ERROR",
    "type" : "int",
    "comment" : " notification from the master SM that it had trouble enabling IP Forwarding",
    "links" : [ ]
  }, {
    "name" : "CMD_IP_FORWARDING_DISABLE_ERROR",
    "type" : "int",
    "comment" : " notification from the master SM that it had trouble disabling IP Forwarding",
    "links" : [ ]
  }, {
    "name" : "CMD_START_TETHERING_ERROR",
    "type" : "int",
    "comment" : " notification from the master SM that it had trouble starting tethering",
    "links" : [ ]
  }, {
    "name" : "CMD_STOP_TETHERING_ERROR",
    "type" : "int",
    "comment" : " notification from the master SM that it had trouble stopping tethering",
    "links" : [ ]
  }, {
    "name" : "CMD_SET_DNS_FORWARDERS_ERROR",
    "type" : "int",
    "comment" : " notification from the master SM that it had trouble setting the DNS forwarders",
    "links" : [ ]
  }, {
    "name" : "CMD_TETHER_CONNECTION_CHANGED",
    "type" : "int",
    "comment" : " the upstream connection has changed",
    "links" : [ ]
  }, {
    "name" : "CMD_IPV6_TETHER_UPDATE",
    "type" : "int",
    "comment" : " new IPv6 tethering parameters need to be processed",
    "links" : [ ]
  }, {
    "name" : "CMD_NEIGHBOR_EVENT",
    "type" : "int",
    "comment" : " new neighbor cache entry on our interface",
    "links" : [ ]
  }, {
    "name" : "CMD_NEW_PREFIX_REQUEST",
    "type" : "int",
    "comment" : " request from DHCP server that it wants to have a new prefix",
    "links" : [ ]
  }, {
    "name" : "CMD_NOTIFY_PREFIX_CONFLICT",
    "type" : "int",
    "comment" : " request from PrivateAddressCoordinator to restart tethering.",
    "links" : [ ]
  }, {
    "name" : "mInitialState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalHotspotState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTetheredState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnavailableState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitingForRestartState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLog",
    "type" : "SharedLog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetd",
    "type" : "INetd",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBpfCoordinator",
    "type" : "BpfCoordinator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceCtrl",
    "type" : "InterfaceController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateAddressCoordinator",
    "type" : "PrivateAddressCoordinator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIfaceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinkProperties",
    "type" : "LinkProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsingLegacyDhcp",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsingBpfOffload",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeps",
    "type" : "Dependencies",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastError",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServingMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpstreamIfaceSet",
    "type" : "InterfaceSet",
    "comment" : " may change over time",
    "links" : [ ]
  }, {
    "name" : "mInterfaceParams",
    "type" : "InterfaceParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastIPv6LinkProperties",
    "type" : "LinkProperties",
    "comment" : " Advertisements (otherwise, we do not add them to mLinkProperties at all).",
    "links" : [ ]
  }, {
    "name" : "mRaDaemon",
    "type" : "RouterAdvertisementDaemon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDhcpServerStartIndex",
    "type" : "int",
    "comment" : " To be accessed only on the handler thread",
    "links" : [ ]
  }, {
    "name" : "mDhcpServer",
    "type" : "IDhcpServer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastRaParams",
    "type" : "RaParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStaticIpv4ServerAddr",
    "type" : "LinkAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStaticIpv4ClientAddr",
    "type" : "LinkAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDhcpLeases",
    "type" : "List<TetheredClient>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastIPv6UpstreamIfindex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpNeighborMonitor",
    "type" : "IpNeighborMonitor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIpv4Address",
    "type" : "LinkAddress",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getStateString(int state)",
    "returnType" : "String",
    "comment" : " Get string name of |state|.",
    "links" : [ ]
  }, {
    "name" : "public String interfaceName()",
    "returnType" : "String",
    "comment" : " Interface name which IpServer served.",
    "links" : [ ]
  }, {
    "name" : "public int interfaceType()",
    "returnType" : "int",
    "comment" : "\n     * Tethering downstream type. It would be one of TetheringManager#TETHERING_*.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastError()",
    "returnType" : "int",
    "comment" : " Last error from this IpServer. ",
    "links" : [ ]
  }, {
    "name" : "public int servingMode()",
    "returnType" : "int",
    "comment" : " Serving mode is the current state of IpServer state machine. ",
    "links" : [ ]
  }, {
    "name" : "public LinkProperties linkProperties()",
    "returnType" : "LinkProperties",
    "comment" : " The properties of the network link which IpServer is serving. ",
    "links" : [ ]
  }, {
    "name" : "public LinkAddress getAddress()",
    "returnType" : "LinkAddress",
    "comment" : " The address which IpServer is using. ",
    "links" : [ ]
  }, {
    "name" : "public List<TetheredClient> getAllLeases()",
    "returnType" : "List<TetheredClient>",
    "comment" : "\n     * Get the latest list of DHCP leases that was reported. Must be called on the IpServer looper\n     * thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : " Stop this IpServer. After this is called this IpServer should not be used any more. ",
    "links" : [ ]
  }, {
    "name" : "public void unwanted()",
    "returnType" : "void",
    "comment" : "\n     * Tethering is canceled. IpServer state machine will be available and wait for\n     * next tethering request.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean startIPv4()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RouteInfo getDirectConnectedRoute(@NonNull final LinkAddress ipv4Address)",
    "returnType" : "RouteInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DhcpServingParamsParcel makeServingParams(@NonNull final Inet4Address defaultRouter, @NonNull final Inet4Address dnsServer, @NonNull LinkAddress serverAddr, @Nullable Inet4Address clientAddr)",
    "returnType" : "DhcpServingParamsParcel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean startDhcp(final LinkAddress serverLinkAddr, final LinkAddress clientLinkAddr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopDhcp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean configureDhcp(boolean enable, final LinkAddress serverAddr, final LinkAddress clientAddr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopIPv4()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean configureIPv4(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LinkAddress requestIpv4Address()",
    "returnType" : "LinkAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean startIPv6()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopIPv6()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateUpstreamIPv6LinkProperties(LinkProperties v6only, int ttlAdjustment)",
    "returnType" : "void",
    "comment" : " communicating only the relevant information.",
    "links" : [ ]
  }, {
    "name" : "private void removeRoutesFromLocalNetwork(@NonNull final List<RouteInfo> toBeRemoved)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addRoutesToLocalNetwork(@NonNull final List<RouteInfo> toBeAdded)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureLocalIPv6Routes(HashSet<IpPrefix> deprecatedPrefixes, HashSet<IpPrefix> newPrefixes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void configureLocalIPv6Dns(HashSet<Inet6Address> deprecatedDnses, HashSet<Inet6Address> newDnses)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addIpv6ForwardingRule(Ipv6ForwardingRule rule)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeIpv6ForwardingRule(Ipv6ForwardingRule rule)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clearIpv6ForwardingRules()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateIpv6ForwardingRule(int newIfindex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateIpv6ForwardingRules(int prevUpstreamIfindex, int upstreamIfindex, NeighborEvent e)",
    "returnType" : "void",
    "comment" : " changes or if a neighbor event is received.",
    "links" : [ ]
  }, {
    "name" : "private void handleNeighborEvent(NeighborEvent e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleNewPrefixRequest(@NonNull final IpPrefix currentPrefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte getHopLimit(String upstreamIface, int adjustTTL)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setRaParams(RaParams newParams)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void logMessage(State state, int what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendInterfaceState(int newInterfaceState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendLinkProperties()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetLinkProperties()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void maybeConfigureStaticIp(final TetheringRequestParcel request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ArrayList<RouteInfo> getLocalRoutesFor(String ifname, HashSet<IpPrefix> prefixes)",
    "returnType" : "ArrayList<RouteInfo>",
    "comment" : " interface\", for subsequent modification of local_network routing.",
    "links" : [ ]
  }, {
    "name" : "private static Inet6Address getLocalDnsIpFor(IpPrefix localPrefix)",
    "returnType" : "Inet6Address",
    "comment" : " Given a prefix like 2001:db8::/64 return an address like 2001:db8::1.",
    "links" : [ ]
  }, {
    "name" : "private static byte getRandomSanitizedByte(byte dflt, byte... excluded)",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "STATE_UNAVAILABLE", "STATE_AVAILABLE", "STATE_TETHERED", "STATE_LOCAL_ONLY", "DOUG_ADAMS", "BLUETOOTH_IFACE_ADDR", "DHCP_LEASE_TIME_SECS", "NULL_MAC_ADDRESS", "TAG", "DBG", "VDBG", "sMessageClasses", "sMagicDecoderRing", "CMD_TETHER_REQUESTED", "CMD_TETHER_UNREQUESTED", "CMD_INTERFACE_DOWN", "CMD_IP_FORWARDING_ENABLE_ERROR", "CMD_IP_FORWARDING_DISABLE_ERROR", "CMD_START_TETHERING_ERROR", "CMD_STOP_TETHERING_ERROR", "CMD_SET_DNS_FORWARDERS_ERROR", "CMD_TETHER_CONNECTION_CHANGED", "CMD_IPV6_TETHER_UPDATE", "CMD_NEIGHBOR_EVENT", "CMD_NEW_PREFIX_REQUEST", "CMD_NOTIFY_PREFIX_CONFLICT", "mInitialState", "mLocalHotspotState", "mTetheredState", "mUnavailableState", "mWaitingForRestartState", "mLog", "mNetd", "mBpfCoordinator", "mCallback", "mInterfaceCtrl", "mPrivateAddressCoordinator", "mIfaceName", "mInterfaceType", "mLinkProperties", "mUsingLegacyDhcp", "mUsingBpfOffload", "mDeps", "mLastError", "mServingMode", "mUpstreamIfaceSet", "mInterfaceParams", "mLastIPv6LinkProperties", "mRaDaemon", "mDhcpServerStartIndex", "mDhcpServer", "mLastRaParams", "mStaticIpv4ServerAddr", "mStaticIpv4ClientAddr", "mDhcpLeases", "mLastIPv6UpstreamIfindex", "mIpNeighborMonitor", "mIpv4Address" ],
  "methodNames" : [ "public static String getStateString(int state)", "public String interfaceName()", "public int interfaceType()", "public int lastError()", "public int servingMode()", "public LinkProperties linkProperties()", "public LinkAddress getAddress()", "public List<TetheredClient> getAllLeases()", "public void stop()", "public void unwanted()", "private boolean startIPv4()", "private RouteInfo getDirectConnectedRoute(@NonNull final LinkAddress ipv4Address)", "private DhcpServingParamsParcel makeServingParams(@NonNull final Inet4Address defaultRouter, @NonNull final Inet4Address dnsServer, @NonNull LinkAddress serverAddr, @Nullable Inet4Address clientAddr)", "private boolean startDhcp(final LinkAddress serverLinkAddr, final LinkAddress clientLinkAddr)", "private void stopDhcp()", "private boolean configureDhcp(boolean enable, final LinkAddress serverAddr, final LinkAddress clientAddr)", "private void stopIPv4()", "private boolean configureIPv4(boolean enabled)", "private LinkAddress requestIpv4Address()", "private boolean startIPv6()", "private void stopIPv6()", "private void updateUpstreamIPv6LinkProperties(LinkProperties v6only, int ttlAdjustment)", "private void removeRoutesFromLocalNetwork(@NonNull final List<RouteInfo> toBeRemoved)", "private void addRoutesToLocalNetwork(@NonNull final List<RouteInfo> toBeAdded)", "private void configureLocalIPv6Routes(HashSet<IpPrefix> deprecatedPrefixes, HashSet<IpPrefix> newPrefixes)", "private void configureLocalIPv6Dns(HashSet<Inet6Address> deprecatedDnses, HashSet<Inet6Address> newDnses)", "private void addIpv6ForwardingRule(Ipv6ForwardingRule rule)", "private void removeIpv6ForwardingRule(Ipv6ForwardingRule rule)", "private void clearIpv6ForwardingRules()", "private void updateIpv6ForwardingRule(int newIfindex)", "private void updateIpv6ForwardingRules(int prevUpstreamIfindex, int upstreamIfindex, NeighborEvent e)", "private void handleNeighborEvent(NeighborEvent e)", "private void handleNewPrefixRequest(@NonNull final IpPrefix currentPrefix)", "private byte getHopLimit(String upstreamIface, int adjustTTL)", "private void setRaParams(RaParams newParams)", "private void logMessage(State state, int what)", "private void sendInterfaceState(int newInterfaceState)", "private void sendLinkProperties()", "private void resetLinkProperties()", "private void maybeConfigureStaticIp(final TetheringRequestParcel request)", "private static ArrayList<RouteInfo> getLocalRoutesFor(String ifname, HashSet<IpPrefix> prefixes)", "private static Inet6Address getLocalDnsIpFor(IpPrefix localPrefix)", "private static byte getRandomSanitizedByte(byte dflt, byte... excluded)" ]
}