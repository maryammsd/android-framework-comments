{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xmlpull/v1/XmlSerializer.java",
  "packageName" : "org.xmlpull.v1",
  "className" : "XmlSerializer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void setFeature(String name, boolean state) throws IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Set feature identified by name (recommended to be URI for uniqueness).\n     * Some well known optional features are defined in\n     * <a href=\"http://www.xmlpull.org/v1/doc/features.html\">\n     * http://www.xmlpull.org/v1/doc/features.html</a>.\n     *\n     * If feature is not recognized or can not be set\n     * then IllegalStateException MUST be thrown.\n     *\n     * @exception IllegalStateException If the feature is not supported or can not be set\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean getFeature(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Return the current value of the feature with given name.\n     * <p><strong>NOTE:</strong> unknown properties are <strong>always</strong> returned as null\n     *\n     * @param name The name of feature to be retrieved.\n     * @return The value of named feature.\n     * @exception IllegalArgumentException if feature string is null\n     ",
    "links" : [ ]
  }, {
    "name" : " void setProperty(String name, Object value) throws IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a property.\n     * (the property name is recommended to be URI for uniqueness).\n     * Some well known optional properties are defined in\n     * <a href=\"http://www.xmlpull.org/v1/doc/properties.html\">\n     * http://www.xmlpull.org/v1/doc/properties.html</a>.\n     *\n     * If property is not recognized or can not be set\n     * then IllegalStateException MUST be thrown.\n     *\n     * @exception IllegalStateException if the property is not supported or can not be set\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getProperty(String name)",
    "returnType" : "Object",
    "comment" : "\n     * Look up the value of a property.\n     *\n     * The property name is any fully-qualified URI. I\n     * <p><strong>NOTE:</strong> unknown properties are <string>always</strong> returned as null\n     *\n     * @param name The name of property to be retrieved.\n     * @return The value of named property.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOutput(OutputStream os, String encoding) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Set to use binary output stream with given encoding.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setOutput(Writer writer) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Set the output to the given writer.\n     * <p><b>WARNING</b> no information about encoding is available!\n     ",
    "links" : [ ]
  }, {
    "name" : " void startDocument(String encoding, Boolean standalone) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Write &lt;&#63;xml declaration with encoding (if encoding not null)\n     * and standalone flag (if standalone not null)\n     * This method can only be called just after setOutput.\n     ",
    "links" : [ ]
  }, {
    "name" : " void endDocument() throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Finish writing. All unclosed start tags will be closed and output\n     * will be flushed. After calling this method no more output can be\n     * serialized until next call to setOutput()\n     ",
    "links" : [ ]
  }, {
    "name" : " void setPrefix(String prefix, String namespace) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "\n     * Binds the given prefix to the given namespace.\n     * This call is valid for the next element including child elements.\n     * The prefix and namespace MUST be always declared even if prefix\n     * is not used in element (startTag() or attribute()) - for XML 1.0\n     * it must result in declaring <code>xmlns:prefix='namespace'</code>\n     * (or <code>xmlns:prefix=\"namespace\"</code> depending what character is used\n     * to quote attribute value).\n     *\n     * <p><b>NOTE:</b> this method MUST be called directly before startTag()\n     *   and if anything but startTag() or setPrefix() is called next there will be exception.\n     * <p><b>NOTE:</b> prefixes \"xml\" and \"xmlns\" are already bound\n     *   and can not be redefined see:\n     * <a href=\"http://www.w3.org/XML/xml-names-19990114-errata#NE05\">Namespaces in XML Errata</a>.\n     * <p><b>NOTE:</b> to set default namespace use as prefix empty string.\n     *\n     * @param prefix must be not null (or IllegalArgumentException is thrown)\n     * @param namespace must be not null\n     ",
    "links" : [ ]
  }, {
    "name" : " String getPrefix(String namespace, boolean generatePrefix) throws IllegalArgumentException",
    "returnType" : "String",
    "comment" : "\n     * Return namespace that corresponds to given prefix\n     * If there is no prefix bound to this namespace return null\n     * but if generatePrefix is false then return generated prefix.\n     *\n     * <p><b>NOTE:</b> if the prefix is empty string \"\" and default namespace is bound\n     * to this prefix then empty string (\"\") is returned.\n     *\n     * <p><b>NOTE:</b> prefixes \"xml\" and \"xmlns\" are already bound\n     *   will have values as defined\n     * <a href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces in XML specification</a>\n     ",
    "links" : [ ]
  }, {
    "name" : " int getDepth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current depth of the element.\n     * Outside the root element, the depth is 0. The\n     * depth is incremented by 1 when startTag() is called.\n     * The depth is decremented after the call to endTag()\n     * event was observed.\n     *\n     * <pre>\n     * &lt;!-- outside --&gt;     0\n     * &lt;root&gt;               1\n     *   sometext                 1\n     *     &lt;foobar&gt;         2\n     *     &lt;/foobar&gt;        2\n     * &lt;/root&gt;              1\n     * &lt;!-- outside --&gt;     0\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : " String getNamespace()",
    "returnType" : "String",
    "comment" : "\n     * Returns the namespace URI of the current element as set by startTag().\n     *\n     * <p><b>NOTE:</b> that means in particular that: <ul>\n     * <li>if there was startTag(\"\", ...) then getNamespace() returns \"\"\n     * <li>if there was startTag(null, ...) then getNamespace() returns null\n     * </ul>\n     *\n     * @return namespace set by startTag() that is currently in scope\n     ",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the current element as set by startTag().\n     * It can only be null before first call to startTag()\n     * or when last endTag() is called to close first startTag().\n     *\n     * @return namespace set by startTag() that is currently in scope\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlSerializer startTag(String namespace, String name) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Writes a start tag with the given namespace and name.\n     * If there is no prefix defined for the given namespace,\n     * a prefix will be defined automatically.\n     * The explicit prefixes for namespaces can be established by calling setPrefix()\n     * immediately before this method.\n     * If namespace is null no namespace prefix is printed but just name.\n     * If namespace is empty string then serializer will make sure that\n     * default empty namespace is declared (in XML 1.0 xmlns='')\n     * or throw IllegalStateException if default namespace is already bound\n     * to non-empty string.\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlSerializer attribute(String namespace, String name, String value) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Write an attribute. Calls to attribute() MUST follow a call to\n     * startTag() immediately. If there is no prefix defined for the\n     * given namespace, a prefix will be defined automatically.\n     * If namespace is null or empty string\n     * no namespace prefix is printed but just name.\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlSerializer endTag(String namespace, String name) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Write end tag. Repetition of namespace and name is just for avoiding errors.\n     * <p><b>Background:</b> in kXML endTag had no arguments, and non matching tags were\n     *  very difficult to find...\n     * If namespace is null no namespace prefix is printed but just name.\n     * If namespace is empty string then serializer will make sure that\n     * default empty namespace is declared (in XML 1.0 xmlns='').\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlSerializer text(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Writes text, where special XML chars are escaped automatically\n     ",
    "links" : [ ]
  }, {
    "name" : " XmlSerializer text(char[] buf, int start, int len) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "XmlSerializer",
    "comment" : "\n     * Writes text, where special XML chars are escaped automatically\n     ",
    "links" : [ ]
  }, {
    "name" : " void cdsect(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void entityRef(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void processingInstruction(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void comment(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void docdecl(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void ignorableWhitespace(String text) throws IOException, IllegalArgumentException, IllegalStateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write all pending output to the stream.\n     * If method startTag() or attribute() was called then start tag is closed (final &gt;)\n     * before flush() is called on underlying output stream.\n     *\n     * <p><b>NOTE:</b> if there is need to close start tag\n     * (so no more attribute() calls are allowed) but without flushing output\n     * call method text() with empty string (text(\"\")).\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setFeature(String name, boolean state) throws IllegalArgumentException, IllegalStateException", " boolean getFeature(String name)", " void setProperty(String name, Object value) throws IllegalArgumentException, IllegalStateException", " Object getProperty(String name)", " void setOutput(OutputStream os, String encoding) throws IOException, IllegalArgumentException, IllegalStateException", " void setOutput(Writer writer) throws IOException, IllegalArgumentException, IllegalStateException", " void startDocument(String encoding, Boolean standalone) throws IOException, IllegalArgumentException, IllegalStateException", " void endDocument() throws IOException, IllegalArgumentException, IllegalStateException", " void setPrefix(String prefix, String namespace) throws IOException, IllegalArgumentException, IllegalStateException", " String getPrefix(String namespace, boolean generatePrefix) throws IllegalArgumentException", " int getDepth()", " String getNamespace()", " String getName()", " XmlSerializer startTag(String namespace, String name) throws IOException, IllegalArgumentException, IllegalStateException", " XmlSerializer attribute(String namespace, String name, String value) throws IOException, IllegalArgumentException, IllegalStateException", " XmlSerializer endTag(String namespace, String name) throws IOException, IllegalArgumentException, IllegalStateException", " XmlSerializer text(String text) throws IOException, IllegalArgumentException, IllegalStateException", " XmlSerializer text(char[] buf, int start, int len) throws IOException, IllegalArgumentException, IllegalStateException", " void cdsect(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void entityRef(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void processingInstruction(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void comment(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void docdecl(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void ignorableWhitespace(String text) throws IOException, IllegalArgumentException, IllegalStateException", " void flush() throws IOException" ],
  "variableNames" : [ ]
}