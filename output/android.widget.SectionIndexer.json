{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SectionIndexer.java",
  "packageName" : "android.widget",
  "className" : "SectionIndexer",
  "comment" : "\n * Interface that may implemented on {@link Adapter}s to enable fast scrolling\n * between sections of an {@link AbsListView}.\n * <p>\n * A section is a group of list items that have something in common. For\n * example, they may begin with the same letter or they may be songs from the\n * same artist.\n * <p>\n * {@link ExpandableListAdapter}s that consider groups and sections as\n * synonymous should account for collapsed groups and return an appropriate\n * section/position.\n *\n * @see AbsListView#setFastScrollEnabled(boolean)\n ",
  "links" : [ "android.widget.Adapter", "android.widget.AbsListView", "android.widget.ExpandableListAdapter" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Object[] getSections()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array of objects representing sections of the list. The\n     * returned array and its contents should be non-null.\n     * <p>\n     * The list view will call toString() on the objects to get the preview text\n     * to display while scrolling. For example, an adapter may return an array\n     * of Strings representing letters of the alphabet. Or, it may return an\n     * array of objects whose toString() methods return their section titles.\n     *\n     * @return the array of section objects\n     ",
    "links" : [ ]
  }, {
    "name" : " int getPositionForSection(int sectionIndex)",
    "returnType" : "int",
    "comment" : "\n     * Given the index of a section within the array of section objects, returns\n     * the starting position of that section within the adapter.\n     * <p>\n     * If the section's starting position is outside of the adapter bounds, the\n     * position must be clipped to fall within the size of the adapter.\n     *\n     * @param sectionIndex the index of the section within the array of section\n     *            objects\n     * @return the starting position of that section within the adapter,\n     *         constrained to fall within the adapter bounds\n     ",
    "links" : [ ]
  }, {
    "name" : " int getSectionForPosition(int position)",
    "returnType" : "int",
    "comment" : "\n     * Given a position within the adapter, returns the index of the\n     * corresponding section within the array of section objects.\n     * <p>\n     * If the section index is outside of the section array bounds, the index\n     * must be clipped to fall within the size of the section array.\n     * <p>\n     * For example, consider an indexer where the section at array index 0\n     * starts at adapter position 100. Calling this method with position 10,\n     * which is before the first section, must return index 0.\n     *\n     * @param position the position within the adapter for which to return the\n     *            corresponding section index\n     * @return the index of the corresponding section within the array of\n     *         section objects, constrained to fall within the array bounds\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Object[] getSections()", " int getPositionForSection(int sectionIndex)", " int getSectionForPosition(int position)" ],
  "variableNames" : [ ]
}