{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/VoiceInteractionService.java",
  "packageName" : "android.service.voice",
  "className" : "VoiceInteractionService",
  "comment" : "\n * Top-level service of the current global voice interactor, which is providing\n * support for hotwording, the back-end of a {@link android.app.VoiceInteractor}, etc.\n * The current VoiceInteractionService that has been selected by the user is kept\n * always running by the system, to allow it to do things like listen for hotwords\n * in the background to instigate voice interactions.\n *\n * <p>Because this service is always running, it should be kept as lightweight as\n * possible.  Heavy-weight operations (including showing UI) should be implemented\n * in the associated {@link android.service.voice.VoiceInteractionSessionService} when\n * an actual voice interaction is taking place, and that service should run in a\n * separate process from this one.\n ",
  "links" : [ "android.service.voice.VoiceInteractionSessionService", "android.app.VoiceInteractor" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_VOICE_INTERACTION} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_VOICE_INTERACTION" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a VoiceInteractionService component publishes information about itself.\n     * This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link\n     * android.R.styleable#VoiceInteractionService voice-interaction-service}&gt;</code> tag.\n     ",
    "links" : [ "android.R.styleable#VoiceInteractionService" ]
  }, {
    "name" : "MULTIPLE_ACTIVE_HOTWORD_DETECTORS",
    "type" : "long",
    "comment" : "\n     * For apps targeting Build.VERSION_CODES.UPSIDE_DOWN_CAKE and above, implementors of this\n     * service can create multiple AlwaysOnHotwordDetector instances in parallel. They will\n     * also e ale to create a single SoftwareHotwordDetector in parallel with any other\n     * active AlwaysOnHotwordDetector instances.\n     *\n     * <p>Requirements when this change is enabled:\n     * <ul>\n     *     <li>\n     *         Any number of AlwaysOnHotwordDetector instances can be created in parallel\n     *         as long as they are unique to any other active AlwaysOnHotwordDetector.\n     *     </li>\n     *     <li>\n     *         Only a single instance of SoftwareHotwordDetector can be active at a given\n     *         time. It can be active at the same time as any number of\n     *         AlwaysOnHotwordDetector instances.\n     *     </li>\n     *     <li>\n     *         To release that reference and any resources associated with that reference,\n     *         HotwordDetector#destroy() must be called. An attempt to create an\n     *         HotwordDetector equal to an active HotwordDetector will be rejected\n     *         until HotwordDetector#destroy() is called on the active instance.\n     *     </li>\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSPROP_VISUAL_QUERY_SERVICE_ENABLED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "IVoiceInteractionService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveVisualQueryDetector",
    "type" : "VisualQueryDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyphraseEnrollmentInfo",
    "type" : "KeyphraseEnrollmentInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActiveDetectors",
    "type" : "Set<HotwordDetector>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestModuleForAlwaysOnHotwordDetectorEnabled",
    "type" : "boolean",
    "comment" : " True if any of the createAOHD methods should use the test ST module.",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void onDetectorRemoteException(@NonNull IBinder token, int detectorType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onLaunchVoiceAssistFromKeyguard()",
    "returnType" : "void",
    "comment" : "\n     * Called when a user has activated an affordance to launch voice assist from the Keyguard.\n     *\n     * <p>This method will only be called if the VoiceInteractionService has set\n     * {@link android.R.attr#supportsLaunchVoiceAssistFromKeyguard} and the Keyguard is showing.</p>\n     *\n     * <p>A valid implementation must start a new activity that should use {@link\n     * android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED} to display\n     * on top of the lock screen.</p>\n     ",
    "links" : [ "android.R.attr#supportsLaunchVoiceAssistFromKeyguard", "android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "public void onPrepareToShowSession(@NonNull Bundle args, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Notify the interactor when the system prepares to show session. The system is going to\n     * bind the session service.\n     *\n     * @param args  The arguments that were supplied to {@link #showSession(Bundle, int)}.\n     *              It always includes {@link VoiceInteractionSession#KEY_SHOW_SESSION_ID}.\n     * @param flags The show flags originally provided to {@link #showSession(Bundle, int)}.\n     * @see #showSession(Bundle, int)\n     * @see #onShowSessionFailed(Bundle)\n     * @see VoiceInteractionSession#onShow(Bundle, int)\n     * @see VoiceInteractionSession#show(Bundle, int)\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#KEY_SHOW_SESSION_ID", "#showSession(Bundle" ]
  }, {
    "name" : "public void onShowSessionFailed(@NonNull Bundle args)",
    "returnType" : "void",
    "comment" : "\n     * Called when the show session failed. E.g. When the system bound the session service failed.\n     *\n     * @param args Additional info about the show session attempt that failed. For now, includes\n     *             {@link VoiceInteractionSession#KEY_SHOW_SESSION_ID}.\n     * @see #showSession(Bundle, int)\n     * @see #onPrepareToShowSession(Bundle, int)\n     * @see VoiceInteractionSession#onShow(Bundle, int)\n     * @see VoiceInteractionSession#show(Bundle, int)\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#KEY_SHOW_SESSION_ID" ]
  }, {
    "name" : "public static boolean isActiveService(Context context, ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given service component is the currently active\n     * VoiceInteractionService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledShowContext(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set contextual options you would always like to have disabled when a session\n     * is shown.  The flags may be any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public int getDisabledShowContext()",
    "returnType" : "int",
    "comment" : "\n     * Return the value set by {@link #setDisabledShowContext}.\n     ",
    "links" : [ "#setDisabledShowContext" ]
  }, {
    "name" : "public void showSession(Bundle args, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Request that the associated {@link android.service.voice.VoiceInteractionSession} be\n     * shown to the user, starting it if necessary.\n     * @param args Arbitrary arguments that will be propagated to the session.\n     * @param flags Indicates additional optional behavior that should be performed.  May\n     * be any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}\n     * to request that the system generate and deliver assist data on the current foreground\n     * app as part of showing the session UI.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public Set<String> onGetSupportedVoiceActions(@NonNull Set<String> voiceActions)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Request to query for what extended voice actions this service supports. This method will\n     * be called when the system checks the supported actions of this\n     * {@link VoiceInteractionService}. Supported actions may be delivered to\n     * {@link VoiceInteractionSession} later to request a session to perform an action.\n     *\n     * <p>Voice actions are defined in support libraries and could vary based on platform context.\n     * For example, car related voice actions will be defined in car support libraries.\n     *\n     * @param voiceActions A set of checked voice actions.\n     * @return Returns a subset of checked voice actions. Additional voice actions in the\n     * returned set will be ignored. Returns empty set if no actions are supported.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.VoiceInteractionSession" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onReady()",
    "returnType" : "void",
    "comment" : "\n     * Called during service initialization to tell you when the system is ready\n     * to receive interaction from it. You should generally do initialization here\n     * rather than in {@link #onCreate}. Methods such as {@link #showSession} will\n     * not be operational until this point.\n     ",
    "links" : [ "#showSession", "#onCreate" ]
  }, {
    "name" : "private void onShutdownInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onShutdown()",
    "returnType" : "void",
    "comment" : "\n     * Called during service de-initialization to tell you when the system is shutting the\n     * service down.\n     * At this point this service may no longer be the active {@link VoiceInteractionService}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService" ]
  }, {
    "name" : "private void onSoundModelsChangedInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onHandleVoiceActionCheck(List<String> voiceActions, IVoiceActionCheckCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final List<SoundTrigger.ModuleProperties> listModuleProperties()",
    "returnType" : "List<SoundTrigger.ModuleProperties>",
    "comment" : "\n     * List available ST modules to attach to for test purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Creates an {@link AlwaysOnHotwordDetector} for the given keyphrase and locale.\n     * This instance must be retained and used by the client.\n     * Calling this a second time invalidates the previously created hotword detector\n     * which can no longer be used to manage recognition.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * AlwaysOnHotwordDetector.Callback)} or {@link #createAlwaysOnHotwordDetector(String, Locale,\n     * PersistableBundle, SharedMemory, Executor, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createHotwordDetector(PersistableBundle, SharedMemory, HotwordDetector.Callback)} or\n     * {@link #createHotwordDetector(PersistableBundle, SharedMemory, Executor,\n     * HotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * <p>Note that the callback will be executed on the current thread. If the current thread\n     * doesn't have a looper, it will throw a {@link RuntimeException}. To specify the execution\n     * thread, use {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}.\n     *\n     * @param keyphrase The keyphrase that's being used, for example \"Hello Android\".\n     * @param locale The locale for which the enrollment needs to be performed.\n     * @param callback The callback to notify of detection events.\n     * @return An always-on hotword detector for the given keyphrase and locale.\n     *\n     * @throws SecurityException if the caller does not hold required permissions\n     * @throws IllegalStateException if there is no DSP hardware support when a caller has a\n     * target SDK of API level 34 or above.\n     *\n     * @deprecated Use {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     *             AlwaysOnHotwordDetector.Callback)} instead.\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "#createHotwordDetector(PersistableBundle", "RuntimeException", "#createAlwaysOnHotwordDetector(String", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Creates an {@link AlwaysOnHotwordDetector} for the given keyphrase and locale.\n     * This instance must be retained and used by the client.\n     * Calling this a second time invalidates the previously created hotword detector\n     * which can no longer be used to manage recognition.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * AlwaysOnHotwordDetector.Callback)} or {@link #createAlwaysOnHotwordDetector(String, Locale,\n     * PersistableBundle, SharedMemory, Executor, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createHotwordDetector(PersistableBundle, SharedMemory, HotwordDetector.Callback)} or\n     * {@link #createHotwordDetector(PersistableBundle, SharedMemory, Executor,\n     * HotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * @param keyphrase The keyphrase that's being used, for example \"Hello Android\".\n     * @param locale The locale for which the enrollment needs to be performed.\n     * @param executor The executor on which to run the callback.\n     * @param callback The callback to notify of detection events.\n     * @return An always-on hotword detector for the given keyphrase and locale.\n     *\n     * @throws SecurityException if the caller does not hold required permissions\n     * @throws IllegalStateException if there is no DSP hardware support when a caller has a\n     * target SDK of API level 34 or above.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "#createHotwordDetector(PersistableBundle", "#createAlwaysOnHotwordDetector(String", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorForTest(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @NonNull SoundTrigger.ModuleProperties moduleProperties, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Same as {@link createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}, but allow explicit selection of the underlying ST\n     * module to attach to.\n     * Use {@link #listModuleProperties()} to get available modules to attach to.\n     * @hide\n     ",
    "links" : [ "createAlwaysOnHotwordDetector(String", "#listModuleProperties()" ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Create an {@link AlwaysOnHotwordDetector} and trigger a {@link HotwordDetectionService}\n     * service, then it will also pass the read-only data to hotword detection service.\n     *\n     * Like {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)\n     * }. Before calling this function, you should set a valid hotword detection service with\n     * android:hotwordDetectionService in an android.voice_interaction metadata file and set\n     * android:isolatedProcess=\"true\" in the AndroidManifest.xml of hotword detection service.\n     * Otherwise it will throw IllegalStateException. After calling this function, the system will\n     * also trigger a hotword detection service and pass the read-only data back to it.\n     *\n     * <p>Note: The system will trigger hotword detection service after calling this function when\n     * all conditions meet the requirements.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * <p>Note that the callback will be executed on the current thread. If the current thread\n     * doesn't have a looper, it will throw a {@link RuntimeException}. To specify the execution\n     * thread, use {@link #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle,\n     * SharedMemory, Executor, AlwaysOnHotwordDetector.Callback)}.\n     *\n     * @param keyphrase The keyphrase that's being used, for example \"Hello Android\".\n     * @param locale The locale for which the enrollment needs to be performed.\n     * @param options Application configuration data provided by the\n     * {@link VoiceInteractionService}. PersistableBundle does not allow any remotable objects or\n     * other contents that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob provided by the\n     * {@link VoiceInteractionService}. Use this to provide the hotword models data or other\n     * such data to the trusted process.\n     * @param callback The callback to notify of detection events.\n     * @return An always-on hotword detector for the given keyphrase and locale.\n     *\n     * @throws SecurityException if the caller does not hold required permissions\n     * @throws IllegalStateException if the hotword detection service is not set, isolated process\n     * is not set, or there is no DSP hardware support when a caller has a target SDK of API\n     * level 34 or above.\n     *\n     * @deprecated Use {@link #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle,\n     *             SharedMemory, Executor, AlwaysOnHotwordDetector.Callback)} instead.\n     * @hide\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "IllegalStateException", "RuntimeException", "android.service.voice.VoiceInteractionService", "#createAlwaysOnHotwordDetector(String", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Create an {@link AlwaysOnHotwordDetector} and trigger a {@link HotwordDetectionService}\n     * service, then it will also pass the read-only data to hotword detection service.\n     *\n     * Like {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)\n     * }. Before calling this function, you should set a valid hotword detection service with\n     * android:hotwordDetectionService in an android.voice_interaction metadata file and set\n     * android:isolatedProcess=\"true\" in the AndroidManifest.xml of hotword detection service.\n     * Otherwise it will throw IllegalStateException. After calling this function, the system will\n     * also trigger a hotword detection service and pass the read-only data back to it.\n     *\n     * <p>Note: The system will trigger hotword detection service after calling this function when\n     * all conditions meet the requirements.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * @param keyphrase The keyphrase that's being used, for example \"Hello Android\".\n     * @param locale The locale for which the enrollment needs to be performed.\n     * @param options Application configuration data provided by the\n     * {@link VoiceInteractionService}. PersistableBundle does not allow any remotable objects or\n     * other contents that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob provided by the\n     * {@link VoiceInteractionService}. Use this to provide the hotword models data or other\n     * such data to the trusted process.\n     * @param executor The executor on which to run the callback.\n     * @param callback The callback to notify of detection events.\n     * @return An always-on hotword detector for the given keyphrase and locale.\n     *\n     * @throws SecurityException if the caller does not hold required permissions\n     * @throws IllegalStateException if the hotword detection service is not set, isolated process\n     * is not set, or there is no DSP hardware support when a caller has a target SDK of API level\n     * 34 or above.\n     *\n     * @hide\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "IllegalStateException", "android.service.voice.VoiceInteractionService", "#createAlwaysOnHotwordDetector(String", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorForTest(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull SoundTrigger.ModuleProperties moduleProperties, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Same as {@link createAlwaysOnHotwordDetector(String, Locale,\n     * PersistableBundle, SharedMemory, Executor, AlwaysOnHotwordDetector.Callback)},\n     * but allow explicit selection of the underlying ST module to attach to.\n     * Use {@link #listModuleProperties()} to get available modules to attach to.\n     * @hide\n     ",
    "links" : [ "createAlwaysOnHotwordDetector(String", "#listModuleProperties()" ]
  }, {
    "name" : "private AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorInternal(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, boolean supportHotwordDetectionService, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable SoundTrigger.ModuleProperties moduleProperties, @Nullable @CallbackExecutor Executor executor, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final HotwordDetector createHotwordDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull HotwordDetector.Callback callback)",
    "returnType" : "HotwordDetector",
    "comment" : "\n     * Creates a {@link HotwordDetector} and initializes the application's\n     * {@link HotwordDetectionService} using {@code options} and {code sharedMemory}.\n     *\n     * <p>To be able to call this, you need to set android:hotwordDetectionService in the\n     * android.voice_interaction metadata file to a valid hotword detection service, and set\n     * android:isolatedProcess=\"true\" in the hotword detection service's declaration. Otherwise,\n     * this throws an {@link IllegalStateException}.\n     *\n     * <p>This instance must be retained and used by the client.\n     * Calling this a second time invalidates the previously created hotword detector\n     * which can no longer be used to manage recognition.\n     *\n     * <p>Using this has a noticeable impact on battery, since the microphone is kept open\n     * for the lifetime of the recognition {@link HotwordDetector#startRecognition() session}. On\n     * devices where hardware filtering is available (such as through a DSP), it's highly\n     * recommended to use {@link #createAlwaysOnHotwordDetector} instead.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * <p>Note that the callback will be executed on the main thread. To specify the execution\n     * thread, use {@link #createHotwordDetector(PersistableBundle, SharedMemory, Executor,\n     * HotwordDetector.Callback)}.\n     *\n     * @param options Application configuration data to be provided to the\n     * {@link HotwordDetectionService}. PersistableBundle does not allow any remotable objects or\n     * other contents that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to be provided to the\n     * {@link HotwordDetectionService}. Use this to provide hotword models or other such data to the\n     * sandboxed process.\n     * @param callback The callback to notify of detection events.\n     * @return A hotword detector for the given audio format.\n     *\n     * @see #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * AlwaysOnHotwordDetector.Callback)\n     *\n     * @see #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * Executor, AlwaysOnHotwordDetector.Callback)\n     *\n     * @deprecated Use {@link #createHotwordDetector(PersistableBundle, SharedMemory, Executor,\n     *             HotwordDetector.Callback)} instead.\n     * @hide\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "IllegalStateException", "android.service.voice.HotwordDetector#startRecognition()", "#createHotwordDetector(PersistableBundle", "#createAlwaysOnHotwordDetector", "#createAlwaysOnHotwordDetector(String", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : "public final HotwordDetector createHotwordDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull HotwordDetector.Callback callback)",
    "returnType" : "HotwordDetector",
    "comment" : "\n     * Creates a {@link HotwordDetector} and initializes the application's\n     * {@link HotwordDetectionService} using {@code options} and {code sharedMemory}.\n     *\n     * <p>To be able to call this, you need to set android:hotwordDetectionService in the\n     * android.voice_interaction metadata file to a valid hotword detection service, and set\n     * android:isolatedProcess=\"true\" in the hotword detection service's declaration. Otherwise,\n     * this throws an {@link IllegalStateException}.\n     *\n     * <p>This instance must be retained and used by the client.\n     * Calling this a second time invalidates the previously created hotword detector\n     * which can no longer be used to manage recognition.\n     *\n     * <p>Using this has a noticeable impact on battery, since the microphone is kept open\n     * for the lifetime of the recognition {@link HotwordDetector#startRecognition() session}. On\n     * devices where hardware filtering is available (such as through a DSP), it's highly\n     * recommended to use {@link #createAlwaysOnHotwordDetector} instead.\n     *\n     * <p>Note: If there are any active detectors that are created by using\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, AlwaysOnHotwordDetector.Callback)} or\n     * {@link #createAlwaysOnHotwordDetector(String, Locale, Executor,\n     * AlwaysOnHotwordDetector.Callback)}, call this will throw an {@link IllegalStateException}.\n     *\n     * @param options Application configuration data to be provided to the\n     * {@link HotwordDetectionService}. PersistableBundle does not allow any remotable objects or\n     * other contents that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to be provided to the\n     * {@link HotwordDetectionService}. Use this to provide hotword models or other such data to the\n     * sandboxed process.\n     * @param executor The executor on which to run the callback.\n     * @param callback The callback to notify of detection events.\n     * @return A hotword detector for the given audio format.\n     *\n     * @see #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * AlwaysOnHotwordDetector.Callback)\n     *\n     * @see #createAlwaysOnHotwordDetector(String, Locale, PersistableBundle, SharedMemory,\n     * Executor, AlwaysOnHotwordDetector.Callback)\n     *\n     * @hide\n     ",
    "links" : [ "android.service.voice.HotwordDetectionService", "IllegalStateException", "android.service.voice.HotwordDetector#startRecognition()", "#createAlwaysOnHotwordDetector", "#createAlwaysOnHotwordDetector(String", "android.service.voice.HotwordDetector" ]
  }, {
    "name" : "private HotwordDetector createHotwordDetectorInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable @CallbackExecutor Executor executor, @NonNull HotwordDetector.Callback callback)",
    "returnType" : "HotwordDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final VisualQueryDetector createVisualQueryDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull VisualQueryDetector.Callback callback)",
    "returnType" : "VisualQueryDetector",
    "comment" : "\n     * Creates a {@link VisualQueryDetector} and initializes the application's\n     * {@link VisualQueryDetectionService} using {@code options} and {@code sharedMemory}.\n     *\n     * <p>To be able to call this, you need to set android:visualQueryDetectionService in the\n     * android.voice_interaction metadata file to a valid visual query detection service, and set\n     * android:isolatedProcess=\"true\" in the service's declaration. Otherwise, this throws an\n     * {@link IllegalStateException}.\n     *\n     * <p>Using this has a noticeable impact on battery, since the microphone is kept open\n     * for the lifetime of the recognition {@link VisualQueryDetector#startRecognition() session}.\n     *\n     * @param options Application configuration data to be provided to the\n     * {@link VisualQueryDetectionService}. PersistableBundle does not allow any remotable objects\n     * or other contents that can be used to communicate with other processes.\n     * @param sharedMemory The unrestricted data blob to be provided to the\n     * {@link VisualQueryDetectionService}. Use this to provide models or other such data to the\n     * sandboxed process.\n     * @param callback The callback to notify of detection events. Single threaded or sequential\n     *                 executors are recommended for the callback are not guaranteed to be executed\n     *                 in the order of how they were called from the\n     *                 {@link VisualQueryDetectionService}.\n     * @return An instanece of {@link VisualQueryDetector}.\n     * @throws IllegalStateException when there is an existing {@link VisualQueryDetector}, or when\n     * there is a non-trusted hotword detector running.\n     *\n     * @hide\n     ",
    "links" : [ "IllegalStateException", "android.service.voice.VisualQueryDetectionService", "android.service.voice.VisualQueryDetector", "android.service.voice.VisualQueryDetector#startRecognition()" ]
  }, {
    "name" : "public final KeyphraseModelManager createKeyphraseModelManager()",
    "returnType" : "KeyphraseModelManager",
    "comment" : "\n     * Creates an {@link KeyphraseModelManager} to use for enrolling voice models outside of the\n     * pre-bundled system voice models.\n     * @hide\n     ",
    "links" : [ "android.media.voice.KeyphraseModelManager" ]
  }, {
    "name" : "protected final KeyphraseEnrollmentInfo getKeyphraseEnrollmentInfo()",
    "returnType" : "KeyphraseEnrollmentInfo",
    "comment" : "\n     * @return Details of keyphrases available for enrollment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setTestModuleForAlwaysOnHotwordDetectorEnabled(boolean isEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Configure {@link createAlwaysOnHotwordDetector(String, Locale,\n     * SoundTrigger.ModuleProperties, Executor, AlwaysOnHotwordDetector.Callback)}\n     * and similar overloads to utilize the test SoundTrigger module instead of the\n     * actual DSP module.\n     * @param isEnabled - {@code true} if subsequently created {@link AlwaysOnHotwordDetector}\n     * objects should attach to a test module. {@code false} if subsequently created\n     * {@link AlwaysOnHotwordDetector} should attach to the actual DSP module.\n     * @hide\n     ",
    "links" : [ "createAlwaysOnHotwordDetector(String", "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "private final SoundTrigger.ModuleProperties getTestModuleProperties()",
    "returnType" : "SoundTrigger.ModuleProperties",
    "comment" : "\n     * Get the {@link SoundTrigger.ModuleProperties} representing the fake\n     * STHAL to attach to via {@link createAlwaysOnHotwordDetector(String, Locale,\n     * SoundTrigger.ModuleProperties, Executor, AlwaysOnHotwordDetector.Callback)} and\n     * similar overloads for test purposes.\n     * @return ModuleProperties to use for test purposes.\n     ",
    "links" : [ "SoundTrigger.ModuleProperties", "createAlwaysOnHotwordDetector(String" ]
  }, {
    "name" : "public final boolean isKeyphraseAndLocaleSupportedForHotword(String keyphrase, Locale locale)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a given keyphrase and locale are supported to create an\n     * {@link AlwaysOnHotwordDetector}.\n     *\n     * @return true if the keyphrase and locale combination is supported, false otherwise.\n     * @hide\n     ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "private void safelyShutdownAllHotwordDetectors(boolean shouldShutDownVisualQueryDetector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onHotwordDetectorDestroyed(@NonNull HotwordDetector detector)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setUiHints(@NonNull Bundle hints)",
    "returnType" : "void",
    "comment" : "\n     * Provide hints to be reflected in the system UI.\n     *\n     * @param hints Arguments used to show UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void onDetectorRemoteException(@NonNull IBinder token, int detectorType)", "public void onLaunchVoiceAssistFromKeyguard()", "public void onPrepareToShowSession(@NonNull Bundle args, int flags)", "public void onShowSessionFailed(@NonNull Bundle args)", "public static boolean isActiveService(Context context, ComponentName service)", "public void setDisabledShowContext(int flags)", "public int getDisabledShowContext()", "public void showSession(Bundle args, int flags)", "public Set<String> onGetSupportedVoiceActions(@NonNull Set<String> voiceActions)", "public IBinder onBind(Intent intent)", "public void onReady()", "private void onShutdownInternal()", "public void onShutdown()", "private void onSoundModelsChangedInternal()", "private void onHandleVoiceActionCheck(List<String> voiceActions, IVoiceActionCheckCallback callback)", "public final List<SoundTrigger.ModuleProperties> listModuleProperties()", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorForTest(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @NonNull SoundTrigger.ModuleProperties moduleProperties, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorForTest(@NonNull String keyphrase, @SuppressLint(\"UseIcu\") @NonNull Locale locale, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull SoundTrigger.ModuleProperties moduleProperties, @NonNull @CallbackExecutor Executor executor, @NonNull AlwaysOnHotwordDetector.Callback callback)", "private AlwaysOnHotwordDetector createAlwaysOnHotwordDetectorInternal(@SuppressLint(\"MissingNullability\") String keyphrase, @SuppressLint({ \"MissingNullability\", \"UseIcu\" }) Locale locale, boolean supportHotwordDetectionService, @Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable SoundTrigger.ModuleProperties moduleProperties, @Nullable @CallbackExecutor Executor executor, @SuppressLint(\"MissingNullability\") AlwaysOnHotwordDetector.Callback callback)", "public final HotwordDetector createHotwordDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull HotwordDetector.Callback callback)", "public final HotwordDetector createHotwordDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull HotwordDetector.Callback callback)", "private HotwordDetector createHotwordDetectorInternal(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @Nullable @CallbackExecutor Executor executor, @NonNull HotwordDetector.Callback callback)", "public final VisualQueryDetector createVisualQueryDetector(@Nullable PersistableBundle options, @Nullable SharedMemory sharedMemory, @NonNull @CallbackExecutor Executor executor, @NonNull VisualQueryDetector.Callback callback)", "public final KeyphraseModelManager createKeyphraseModelManager()", "protected final KeyphraseEnrollmentInfo getKeyphraseEnrollmentInfo()", "public final void setTestModuleForAlwaysOnHotwordDetectorEnabled(boolean isEnabled)", "private final SoundTrigger.ModuleProperties getTestModuleProperties()", "public final boolean isKeyphraseAndLocaleSupportedForHotword(String keyphrase, Locale locale)", "private void safelyShutdownAllHotwordDetectors(boolean shouldShutDownVisualQueryDetector)", "private void onHotwordDetectorDestroyed(@NonNull HotwordDetector detector)", "public final void setUiHints(@NonNull Bundle hints)", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)" ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "SERVICE_META_DATA", "MULTIPLE_ACTIVE_HOTWORD_DETECTORS", "SYSPROP_VISUAL_QUERY_SERVICE_ENABLED", "mInterface", "mSystemService", "mActiveVisualQueryDetector", "mLock", "mKeyphraseEnrollmentInfo", "mActiveDetectors", "mTestModuleForAlwaysOnHotwordDetectorEnabled", "mDeathRecipient" ]
}