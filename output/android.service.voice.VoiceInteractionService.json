{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/voice/VoiceInteractionService.java",
  "packageName" : "android.service.voice",
  "className" : "VoiceInteractionService",
  "comment" : "\n * Top-level service of the current global voice interactor, which is providing\n * support for hotwording, the back-end of a {@link android.app.VoiceInteractor}, etc.\n * The current VoiceInteractionService that has been selected by the user is kept\n * always running by the system, to allow it to do things like listen for hotwords\n * in the background to instigate voice interactions.\n *\n * <p>Because this service is always running, it should be kept as lightweight as\n * possible.  Heavy-weight operations (including showing UI) should be implemented\n * in the associated {@link android.service.voice.VoiceInteractionSessionService} when\n * an actual voice interaction is taking place, and that service should run in a\n * separate process from this one.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_VOICE_INTERACTION} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.content.Intent", "android.Manifest.permission#BIND_VOICE_INTERACTION" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a VoiceInteractionService component publishes information about itself.\n     * This meta-data should reference an XML resource containing a\n     * <code>&lt;{@link\n     * android.R.styleable#VoiceInteractionService voice-interaction-service}&gt;</code> tag.\n     ",
    "links" : [ "android.R.styleable#VoiceInteractionService" ]
  }, {
    "name" : "mInterface",
    "type" : "IVoiceInteractionService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemService",
    "type" : "IVoiceInteractionManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyphraseEnrollmentInfo",
    "type" : "KeyphraseEnrollmentInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotwordDetector",
    "type" : "AlwaysOnHotwordDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onLaunchVoiceAssistFromKeyguard()",
    "returnType" : "void",
    "comment" : "\n     * Called when a user has activated an affordance to launch voice assist from the Keyguard.\n     *\n     * <p>This method will only be called if the VoiceInteractionService has set\n     * {@link android.R.attr#supportsLaunchVoiceAssistFromKeyguard} and the Keyguard is showing.</p>\n     *\n     * <p>A valid implementation must start a new activity that should use {@link\n     * android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED} to display\n     * on top of the lock screen.</p>\n     ",
    "links" : [ "android.R.attr#supportsLaunchVoiceAssistFromKeyguard", "android.view.WindowManager.LayoutParams#FLAG_SHOW_WHEN_LOCKED" ]
  }, {
    "name" : "public static boolean isActiveService(Context context, ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given service component is the currently active\n     * VoiceInteractionService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledShowContext(int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set contextual options you would always like to have disabled when a session\n     * is shown.  The flags may be any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public int getDisabledShowContext()",
    "returnType" : "int",
    "comment" : "\n     * Return the value set by {@link #setDisabledShowContext}.\n     ",
    "links" : [ "#setDisabledShowContext" ]
  }, {
    "name" : "public void showSession(Bundle args, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Request that the associated {@link android.service.voice.VoiceInteractionSession} be\n     * shown to the user, starting it if necessary.\n     * @param args Arbitrary arguments that will be propagated to the session.\n     * @param flags Indicates additional optional behavior that should be performed.  May\n     * be any combination of\n     * {@link VoiceInteractionSession#SHOW_WITH_ASSIST VoiceInteractionSession.SHOW_WITH_ASSIST} and\n     * {@link VoiceInteractionSession#SHOW_WITH_SCREENSHOT\n     * VoiceInteractionSession.SHOW_WITH_SCREENSHOT}\n     * to request that the system generate and deliver assist data on the current foreground\n     * app as part of showing the session UI.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionSession#SHOW_WITH_ASSIST", "android.service.voice.VoiceInteractionSession", "android.service.voice.VoiceInteractionSession#SHOW_WITH_SCREENSHOTVoiceInteractionSession.SHOW_WITH_SCREENSHOT" ]
  }, {
    "name" : "public Set<String> onGetSupportedVoiceActions(@NonNull Set<String> voiceActions)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Request to query for what extended voice actions this service supports. This method will\n     * be called when the system checks the supported actions of this\n     * {@link VoiceInteractionService}. Supported actions may be delivered to\n     * {@link VoiceInteractionSession} later to request a session to perform an action.\n     *\n     * <p>Voice actions are defined in support libraries and could vary based on platform context.\n     * For example, car related voice actions will be defined in car support libraries.\n     *\n     * @param voiceActions A set of checked voice actions.\n     * @return Returns a subset of checked voice actions. Additional voice actions in the\n     * returned set will be ignored. Returns empty set if no actions are supported.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService", "android.service.voice.VoiceInteractionSession" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onReady()",
    "returnType" : "void",
    "comment" : "\n     * Called during service initialization to tell you when the system is ready\n     * to receive interaction from it. You should generally do initialization here\n     * rather than in {@link #onCreate}. Methods such as {@link #showSession} and\n     * {@link #createAlwaysOnHotwordDetector}\n     * will not be operational until this point.\n     ",
    "links" : [ "#createAlwaysOnHotwordDetector", "#showSession", "#onCreate" ]
  }, {
    "name" : "private void onShutdownInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onShutdown()",
    "returnType" : "void",
    "comment" : "\n     * Called during service de-initialization to tell you when the system is shutting the\n     * service down.\n     * At this point this service may no longer be the active {@link VoiceInteractionService}.\n     ",
    "links" : [ "android.service.voice.VoiceInteractionService" ]
  }, {
    "name" : "private void onSoundModelsChangedInternal()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onHandleVoiceActionCheck(List<String> voiceActions, IVoiceActionCheckCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(String keyphrase, Locale locale, AlwaysOnHotwordDetector.Callback callback)",
    "returnType" : "AlwaysOnHotwordDetector",
    "comment" : "\n     * Creates an {@link AlwaysOnHotwordDetector} for the given keyphrase and locale.\n     * This instance must be retained and used by the client.\n     * Calling this a second time invalidates the previously created hotword detector\n     * which can no longer be used to manage recognition.\n     *\n     * @param keyphrase The keyphrase that's being used, for example \"Hello Android\".\n     * @param locale The locale for which the enrollment needs to be performed.\n     * @param callback The callback to notify of detection events.\n     * @return An always-on hotword detector for the given keyphrase and locale.\n     ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "public final KeyphraseModelManager createKeyphraseModelManager()",
    "returnType" : "KeyphraseModelManager",
    "comment" : "\n     * Creates an {@link KeyphraseModelManager} to use for enrolling voice models outside of the\n     * pre-bundled system voice models.\n     * @hide\n     ",
    "links" : [ "android.media.voice.KeyphraseModelManager" ]
  }, {
    "name" : "protected final KeyphraseEnrollmentInfo getKeyphraseEnrollmentInfo()",
    "returnType" : "KeyphraseEnrollmentInfo",
    "comment" : "\n     * @return Details of keyphrases available for enrollment.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isKeyphraseAndLocaleSupportedForHotword(String keyphrase, Locale locale)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a given keyphrase and locale are supported to create an\n     * {@link AlwaysOnHotwordDetector}.\n     *\n     * @return true if the keyphrase and locale combination is supported, false otherwise.\n     * @hide\n     ",
    "links" : [ "android.service.voice.AlwaysOnHotwordDetector" ]
  }, {
    "name" : "private void safelyShutdownHotwordDetector()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setUiHints(@NonNull Bundle hints)",
    "returnType" : "void",
    "comment" : "\n     * Provide hints to be reflected in the system UI.\n     *\n     * @param hints Arguments used to show UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "SERVICE_INTERFACE", "SERVICE_META_DATA", "mInterface", "mSystemService", "mLock", "mKeyphraseEnrollmentInfo", "mHotwordDetector", "mDeathRecipient" ],
  "methodNames" : [ "public void onLaunchVoiceAssistFromKeyguard()", "public static boolean isActiveService(Context context, ComponentName service)", "public void setDisabledShowContext(int flags)", "public int getDisabledShowContext()", "public void showSession(Bundle args, int flags)", "public Set<String> onGetSupportedVoiceActions(@NonNull Set<String> voiceActions)", "public IBinder onBind(Intent intent)", "public void onReady()", "private void onShutdownInternal()", "public void onShutdown()", "private void onSoundModelsChangedInternal()", "private void onHandleVoiceActionCheck(List<String> voiceActions, IVoiceActionCheckCallback callback)", "public final AlwaysOnHotwordDetector createAlwaysOnHotwordDetector(String keyphrase, Locale locale, AlwaysOnHotwordDetector.Callback callback)", "public final KeyphraseModelManager createKeyphraseModelManager()", "protected final KeyphraseEnrollmentInfo getKeyphraseEnrollmentInfo()", "public final boolean isKeyphraseAndLocaleSupportedForHotword(String keyphrase, Locale locale)", "private void safelyShutdownHotwordDetector()", "public final void setUiHints(@NonNull Bundle hints)", "protected void dump(FileDescriptor fd, PrintWriter pw, String[] args)" ]
}