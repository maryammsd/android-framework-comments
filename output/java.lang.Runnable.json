{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Runnable.java",
  "packageName" : "java.lang",
  "className" : "Runnable",
  "comment" : "\n * The {@code Runnable} interface should be implemented by any\n * class whose instances are intended to be executed by a thread. The\n * class must define a method of no arguments called {@code run}.\n * <p>\n * This interface is designed to provide a common protocol for objects that\n * wish to execute code while they are active. For example,\n * {@code Runnable} is implemented by class {@code Thread}.\n * Being active simply means that a thread has been started and has not\n * yet been stopped.\n * <p>\n * In addition, {@code Runnable} provides the means for a class to be\n * active while not subclassing {@code Thread}. A class that implements\n * {@code Runnable} can run without subclassing {@code Thread}\n * by instantiating a {@code Thread} instance and passing itself in\n * as the target.  In most cases, the {@code Runnable} interface should\n * be used if you are only planning to override the {@code run()}\n * method and no other {@code Thread} methods.\n * This is important because classes should not be subclassed\n * unless the programmer intends on modifying or enhancing the fundamental\n * behavior of the class.\n *\n * @author  Arthur van Hoff\n * @see     java.lang.Thread\n * @see     java.util.concurrent.Callable\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void run()",
    "returnType" : "void",
    "comment" : "\n     * When an object implementing interface {@code Runnable} is used\n     * to create a thread, starting the thread causes the object's\n     * {@code run} method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method {@code run} is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void run()" ],
  "variableNames" : [ ]
}