{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/MutableCodePointTrie.java",
  "packageName" : "android.icu.util",
  "className" : "MixedBlocks",
  "comment" : " compacted data or index so far.",
  "links" : [ ],
  "variables" : [ {
    "name" : "table",
    "type" : "int[]",
    "comment" : " The remaining upper bits store a partial hashCode of the block data values.",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shift",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mask",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "blockLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void init(int maxLength, int newBlockLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void extend(int[] data, int minStart, int prevDataLength, int newDataLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void extend(char[] data, int minStart, int prevDataLength, int newDataLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int findBlock(int[] data, int[] blockData, int blockStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int findBlock(char[] data, int[] blockData, int blockStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int findBlock(char[] data, char[] blockData, int blockStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int findAllSameBlock(int[] data, int blockValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int makeHashCode(int[] blockData, int blockStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int makeHashCode(char[] blockData, int blockStart)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int makeHashCode(int blockValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addEntry(int[] data32, char[] data16, int blockStart, int hashCode, int dataIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findEntry(int[] data32, char[] data16, int[] blockData32, char[] blockData16, int blockStart, int hashCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findEntry(int[] data, int blockValue, int hashCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int nextIndex(int initialEntryIndex, int entryIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int modulo(int n, int m)",
    "returnType" : "int",
    "comment" : " Ensures non-negative n % m (that is 0..m-1). ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void init(int maxLength, int newBlockLength)", " void extend(int[] data, int minStart, int prevDataLength, int newDataLength)", " void extend(char[] data, int minStart, int prevDataLength, int newDataLength)", " int findBlock(int[] data, int[] blockData, int blockStart)", " int findBlock(char[] data, int[] blockData, int blockStart)", " int findBlock(char[] data, char[] blockData, int blockStart)", " int findAllSameBlock(int[] data, int blockValue)", "private int makeHashCode(int[] blockData, int blockStart)", "private int makeHashCode(char[] blockData, int blockStart)", "private int makeHashCode(int blockValue)", "private void addEntry(int[] data32, char[] data16, int blockStart, int hashCode, int dataIndex)", "private int findEntry(int[] data32, char[] data16, int[] blockData32, char[] blockData16, int blockStart, int hashCode)", "private int findEntry(int[] data, int blockValue, int hashCode)", "private int nextIndex(int initialEntryIndex, int entryIndex)", "private int modulo(int n, int m)" ],
  "variableNames" : [ "table", "length", "shift", "mask", "blockLength" ]
}