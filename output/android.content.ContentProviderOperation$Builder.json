{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/ContentProviderOperation.java",
  "packageName" : "android.content",
  "className" : "Builder",
  "comment" : "\n     * Used to add parameters to a {@link ContentProviderOperation}. The {@link Builder} is\n     * first created by calling {@link ContentProviderOperation#newInsert(android.net.Uri)},\n     * {@link ContentProviderOperation#newUpdate(android.net.Uri)},\n     * {@link ContentProviderOperation#newDelete(android.net.Uri)} or\n     * {@link ContentProviderOperation#newAssertQuery(Uri)}. The withXXX methods\n     * can then be used to add parameters to the builder. See the specific methods to find for\n     * which {@link Builder} type each is allowed. Call {@link #build} to create the\n     * {@link ContentProviderOperation} once all the parameters have been supplied.\n     ",
  "links" : [ "android.content.ContentProviderOperation", "android.content.ContentProviderOperation#newAssertQuery(Uri)", "android.content.ContentProviderOperation#newUpdate(android.net.Uri)", "Builder", "android.content.ContentProviderOperation#newInsert(android.net.Uri)", "android.content.ContentProviderOperation#newDelete(android.net.Uri)", "#build" ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMethod",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArg",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "ArrayMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelection",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionArgs",
    "type" : "SparseArray<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpectedCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYieldAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExceptionAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ContentProviderOperation build()",
    "returnType" : "ContentProviderOperation",
    "comment" : " Create a ContentProviderOperation from this {@link Builder}. ",
    "links" : [ "Builder" ]
  }, {
    "name" : "private void ensureValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureExtras()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureSelectionArgs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setValue(@NonNull String key, @NonNull Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setExtra(@NonNull String key, @NonNull Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSelectionArg(int index, @NonNull Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder withValues(@NonNull ContentValues values)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the values to use for this operation. This method will\n         * replace any previously defined values for the contained keys, but it\n         * will not replace any back-reference requests.\n         * <p>\n         * Any value may be dynamically overwritten using the result of a\n         * previous operation by using methods such as\n         * {@link #withValueBackReference(String, int)}.\n         ",
    "links" : [ "#withValueBackReference(String" ]
  }, {
    "name" : "public Builder withValue(@NonNull String key, @Nullable Object value)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given value to use for this operation. This method will\n         * replace any previously defined value for this key.\n         *\n         * @param key the key indicating which value to configure\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder withValueBackReferences(@NonNull ContentValues backReferences)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given values to be dynamically overwritten using the\n         * result of a previous operation. This method will replace any\n         * previously defined values for these keys.\n         *\n         * @param backReferences set of values where the key indicates which\n         *            value to configure and the value the index indicating\n         *            which historical {@link ContentProviderResult} should\n         *            overwrite the value\n         ",
    "links" : [ "android.content.ContentProviderResult" ]
  }, {
    "name" : "public Builder withValueBackReference(@NonNull String key, int fromIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given value to be dynamically overwritten using the\n         * result of a previous operation. This method will replace any\n         * previously defined value for this key.\n         *\n         * @param key the key indicating which value to configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the value\n         ",
    "links" : [ "android.content.ContentProviderResult" ]
  }, {
    "name" : "public Builder withValueBackReference(@NonNull String key, int fromIndex, @NonNull String fromKey)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given value to be dynamically overwritten using the\n         * result of a previous operation. This method will replace any\n         * previously defined value for this key.\n         *\n         * @param key the key indicating which value to configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the value\n         * @param fromKey the key of indicating which\n         *            {@link ContentProviderResult#extras} value should\n         *            overwrite the value\n         ",
    "links" : [ "android.content.ContentProviderResult", "android.content.ContentProviderResult#extras" ]
  }, {
    "name" : "public Builder withExtras(@NonNull Bundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the extras to use for this operation. This method will\n         * replace any previously defined values for the contained keys, but it\n         * will not replace any back-reference requests.\n         * <p>\n         * Any value may be dynamically overwritten using the result of a\n         * previous operation by using methods such as\n         * {@link #withExtraBackReference(String, int)}.\n         ",
    "links" : [ "#withExtraBackReference(String" ]
  }, {
    "name" : "public Builder withExtra(@NonNull String key, @Nullable Object value)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given extra to use for this operation. This method will\n         * replace any previously defined extras for this key.\n         *\n         * @param key the key indicating which extra to configure\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder withExtraBackReference(@NonNull String key, int fromIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given extra to be dynamically overwritten using the\n         * result of a previous operation. This method will replace any\n         * previously defined extras for this key.\n         *\n         * @param key the key indicating which extra to configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the extra\n         ",
    "links" : [ "android.content.ContentProviderResult" ]
  }, {
    "name" : "public Builder withExtraBackReference(@NonNull String key, int fromIndex, @NonNull String fromKey)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given extra to be dynamically overwritten using the\n         * result of a previous operation. This method will replace any\n         * previously defined extras for this key.\n         *\n         * @param key the key indicating which extra to configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the extra\n         * @param fromKey the key of indicating which\n         *            {@link ContentProviderResult#extras} value should\n         *            overwrite the extra\n         ",
    "links" : [ "android.content.ContentProviderResult", "android.content.ContentProviderResult#extras" ]
  }, {
    "name" : "public Builder withSelection(@Nullable String selection, @Nullable String[] selectionArgs)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the selection and selection arguments to use for this\n         * operation. This method will replace any previously defined selection\n         * and selection arguments, but it will not replace any back-reference\n         * requests.\n         * <p>\n         * An occurrence of {@code ?} in the selection will be replaced with the\n         * corresponding selection argument when the operation is executed.\n         * <p>\n         * Any selection argument may be dynamically overwritten using the\n         * result of a previous operation by using methods such as\n         * {@link #withSelectionBackReference(int, int)}.\n         ",
    "links" : [ "#withSelectionBackReference(int" ]
  }, {
    "name" : "public Builder withSelectionBackReference(int index, int fromIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given selection argument to be dynamically overwritten\n         * using the result of a previous operation. This method will replace\n         * any previously defined selection argument at this index.\n         *\n         * @param index the index indicating which selection argument to\n         *            configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the\n         *            selection argument\n         ",
    "links" : [ "android.content.ContentProviderResult" ]
  }, {
    "name" : "public Builder withSelectionBackReference(int index, int fromIndex, @NonNull String fromKey)",
    "returnType" : "Builder",
    "comment" : "\n         * Configure the given selection argument to be dynamically overwritten\n         * using the result of a previous operation. This method will replace\n         * any previously defined selection argument at this index.\n         *\n         * @param index the index indicating which selection argument to\n         *            configure\n         * @param fromIndex the index indicating which historical\n         *            {@link ContentProviderResult} should overwrite the\n         *            selection argument\n         * @param fromKey the key of indicating which\n         *            {@link ContentProviderResult#extras} value should\n         *            overwrite the selection argument\n         ",
    "links" : [ "android.content.ContentProviderResult", "android.content.ContentProviderResult#extras" ]
  }, {
    "name" : "public Builder withExpectedCount(int count)",
    "returnType" : "Builder",
    "comment" : "\n         * If set then if the number of rows affected by this operation does not match\n         * this count {@link OperationApplicationException} will be throw.\n         * This can only be used with builders of type update, delete, or assert.\n         * @return this builder, to allow for chaining.\n         ",
    "links" : [ "android.content.OperationApplicationException" ]
  }, {
    "name" : "public Builder withYieldAllowed(boolean yieldAllowed)",
    "returnType" : "Builder",
    "comment" : "\n         * If set to true then the operation allows yielding the database to other transactions\n         * if the database is contended.\n         * @return this builder, to allow for chaining.\n         * @see android.database.sqlite.SQLiteDatabase#yieldIfContendedSafely()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder withExceptionAllowed(boolean exceptionAllowed)",
    "returnType" : "Builder",
    "comment" : "\n         * If set to true, this operation allows subsequent operations to\n         * continue even if this operation throws an exception. When true, any\n         * encountered exception is returned via\n         * {@link ContentProviderResult#exception}.\n         ",
    "links" : [ "android.content.ContentProviderResult#exception" ]
  }, {
    "name" : "public Builder withFailureAllowed(boolean failureAllowed)",
    "returnType" : "Builder",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private void assertValuesAllowed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertSelectionAllowed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertExtrasAllowed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ContentProviderOperation build()", "private void ensureValues()", "private void ensureExtras()", "private void ensureSelectionArgs()", "private void setValue(@NonNull String key, @NonNull Object value)", "private void setExtra(@NonNull String key, @NonNull Object value)", "private void setSelectionArg(int index, @NonNull Object value)", "public Builder withValues(@NonNull ContentValues values)", "public Builder withValue(@NonNull String key, @Nullable Object value)", "public Builder withValueBackReferences(@NonNull ContentValues backReferences)", "public Builder withValueBackReference(@NonNull String key, int fromIndex)", "public Builder withValueBackReference(@NonNull String key, int fromIndex, @NonNull String fromKey)", "public Builder withExtras(@NonNull Bundle extras)", "public Builder withExtra(@NonNull String key, @Nullable Object value)", "public Builder withExtraBackReference(@NonNull String key, int fromIndex)", "public Builder withExtraBackReference(@NonNull String key, int fromIndex, @NonNull String fromKey)", "public Builder withSelection(@Nullable String selection, @Nullable String[] selectionArgs)", "public Builder withSelectionBackReference(int index, int fromIndex)", "public Builder withSelectionBackReference(int index, int fromIndex, @NonNull String fromKey)", "public Builder withExpectedCount(int count)", "public Builder withYieldAllowed(boolean yieldAllowed)", "public Builder withExceptionAllowed(boolean exceptionAllowed)", "public Builder withFailureAllowed(boolean failureAllowed)", "private void assertValuesAllowed()", "private void assertSelectionAllowed()", "private void assertExtrasAllowed()" ],
  "variableNames" : [ "mType", "mUri", "mMethod", "mArg", "mValues", "mExtras", "mSelection", "mSelectionArgs", "mExpectedCount", "mYieldAllowed", "mExceptionAllowed" ]
}