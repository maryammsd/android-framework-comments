{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaMetrics.java",
  "packageName" : "android.media",
  "className" : "Item",
  "comment" : "\n     * Item records properties and delivers to the MediaMetrics service\n     *\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "BUNDLE_TOTAL_SIZE",
    "type" : "String",
    "comment" : " the content of the Bundle for CTS testing.",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_HEADER_SIZE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_VERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_KEY_SIZE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_PID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_UID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_TIMESTAMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUNDLE_PROPERTY_COUNT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORMAT_VERSION",
    "type" : "int",
    "comment" : " Version 0 byte offsets for the header.",
    "links" : [ ]
  }, {
    "name" : "TOTAL_SIZE_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEADER_SIZE_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINIMUM_PAYLOAD_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPidOffset",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mUidOffset",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mTimeNsOffset",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mPropertyCountOffset",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mPropertyStartOffset",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mHeaderSize",
    "type" : "int",
    "comment" : " computed in constructor",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuffer",
    "type" : "ByteBuffer",
    "comment" : " may be reallocated if capacity is insufficient.",
    "links" : [ ]
  }, {
    "name" : "mPropertyCount",
    "type" : "int",
    "comment" : " overflow not checked (mBuffer would overflow first).",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Item set(@NonNull Key<T> key, @Nullable T value)",
    "returnType" : "Item",
    "comment" : "\n         * Sets a metrics typed key\n         * @param key\n         * @param value\n         * @param <T>\n         * @return\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item putInt(String key, int value)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the property with key to an integer (32 bit) value.\n         *\n         * @param key\n         * @param value\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item putLong(String key, long value)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the property with key to a long (64 bit) value.\n         *\n         * @param key\n         * @param value\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item putDouble(String key, double value)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the property with key to a double value.\n         *\n         * @param key\n         * @param value\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item putString(String key, String value)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the property with key to a String value.\n         *\n         * @param key\n         * @param value\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item setPid(int pid)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the pid to the provided value.\n         *\n         * @param pid which can be -1 if the service is to fill it in from the calling info.\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item setUid(int uid)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the uid to the provided value.\n         *\n         * The UID represents the client associated with the property. This must be the UID\n         * of the application if it comes from the application client.\n         *\n         * Trusted services are allowed to set the uid for a client-related item.\n         *\n         * @param uid which can be -1 if the service is to fill it in from calling info.\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item setTimestamp(long timeNs)",
    "returnType" : "Item",
    "comment" : "\n         * Sets the timestamp to the provided value.\n         *\n         * The time is referenced by the Boottime obtained by SystemClock.elapsedRealtimeNanos().\n         * This should be associated with the occurrence of the event.  It is recommended that\n         * the event be registered immediately when it occurs, and no later than 500ms\n         * (and certainly not in the future).\n         *\n         * @param timeNs which can be 0 if the service is to fill it in at the time of call.\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public Item clear()",
    "returnType" : "Item",
    "comment" : "\n         * Clears the properties and resets the time to 0.\n         *\n         * No other values are changed.\n         *\n         * @return itself\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean record()",
    "returnType" : "boolean",
    "comment" : "\n         * Sends the item to the MediaMetrics service.\n         *\n         * The item properties are unchanged, hence record() may be called more than once\n         * to send the same item twice. Also, record() may be called without any properties.\n         *\n         * @return true if successful.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : "\n         * Converts the Item to a Bundle.\n         *\n         * This is primarily used as a test API for CTS.\n         *\n         * @return a Bundle with the keys set according to data in the Item's buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Bundle toBundle(ByteBuffer buffer)",
    "returnType" : "Bundle",
    "comment" : "\n         * Converts a buffer contents to a bundle\n         *\n         * This is primarily used as a test API for CTS.\n         *\n         * @param buffer contains the byte data serialized according to the byte string version.\n         * @return a Bundle with the keys set according to data in the buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int reserveProperty(byte[] keyBytes, int payloadSize)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getStringFromBuffer(ByteBuffer buffer)",
    "returnType" : "String",
    "comment" : " Used for test",
    "links" : [ ]
  }, {
    "name" : "private static String getStringFromBuffer(ByteBuffer buffer, int size)",
    "returnType" : "String",
    "comment" : " Used for test",
    "links" : [ ]
  }, {
    "name" : "private void updateHeader()",
    "returnType" : "void",
    "comment" : "\n         * May be called multiple times - just makes the header consistent with the current\n         * properties written.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Item set(@NonNull Key<T> key, @Nullable T value)", "public Item putInt(String key, int value)", "public Item putLong(String key, long value)", "public Item putDouble(String key, double value)", "public Item putString(String key, String value)", "public Item setPid(int pid)", "public Item setUid(int uid)", "public Item setTimestamp(long timeNs)", "public Item clear()", "public boolean record()", "public Bundle toBundle()", "public static Bundle toBundle(ByteBuffer buffer)", "private int reserveProperty(byte[] keyBytes, int payloadSize)", "private static String getStringFromBuffer(ByteBuffer buffer)", "private static String getStringFromBuffer(ByteBuffer buffer, int size)", "private void updateHeader()" ],
  "variableNames" : [ "BUNDLE_TOTAL_SIZE", "BUNDLE_HEADER_SIZE", "BUNDLE_VERSION", "BUNDLE_KEY_SIZE", "BUNDLE_KEY", "BUNDLE_PID", "BUNDLE_UID", "BUNDLE_TIMESTAMP", "BUNDLE_PROPERTY_COUNT", "FORMAT_VERSION", "TOTAL_SIZE_OFFSET", "HEADER_SIZE_OFFSET", "MINIMUM_PAYLOAD_SIZE", "mPidOffset", "mUidOffset", "mTimeNsOffset", "mPropertyCountOffset", "mPropertyStartOffset", "mHeaderSize", "mKey", "mBuffer", "mPropertyCount" ]
}