{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/WindowInsetsAnimationController.java",
  "packageName" : "android.view",
  "className" : "WindowInsetsAnimationController",
  "comment" : "\n * Controller for app-driven animation of system windows.\n *  <p>\n *  {@code WindowInsetsAnimationController} lets apps animate system windows such as\n *  the {@link android.inputmethodservice.InputMethodService IME}. The animation is\n *  synchronized, such that changes the system windows and the app's current frame\n *  are rendered at the same time.\n *  <p>\n *  Control is obtained through {@link WindowInsetsController#controlWindowInsetsAnimation}.\n ",
  "links" : [ "android.inputmethodservice.InputMethodService", "android.view.WindowInsetsController#controlWindowInsetsAnimation" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Insets getHiddenStateInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Retrieves the {@link Insets} when the windows this animation is controlling are fully hidden.\n     * <p>\n     * Note that these insets are always relative to the window, which is the same as being relative\n     * to {@link View#getRootView}\n     * <p>\n     * If there are any animation listeners registered, this value is the same as\n     * {@link Bounds#getLowerBound()} that is being be passed into the root view of the\n     * hierarchy.\n     *\n     * @return Insets when the windows this animation is controlling are fully hidden.\n     *\n     * @see Bounds#getLowerBound()\n     ",
    "links" : [ "android.view.View#getRootView", "android.graphics.Insets", "android.view.WindowInsetsAnimation.Bounds#getLowerBound()" ]
  }, {
    "name" : " Insets getShownStateInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Retrieves the {@link Insets} when the windows this animation is controlling are fully shown.\n     * <p>\n     * Note that these insets are always relative to the window, which is the same as being relative\n     * to {@link View#getRootView}\n     * <p>\n     * If there are any animation listeners registered, this value is the same as\n     * {@link Bounds#getUpperBound()} that is being passed into the root view of hierarchy.\n     *\n     * @return Insets when the windows this animation is controlling are fully shown.\n     *\n     * @see Bounds#getUpperBound()\n     ",
    "links" : [ "android.view.View#getRootView", "android.graphics.Insets", "android.view.WindowInsetsAnimation.Bounds#getUpperBound()" ]
  }, {
    "name" : " Insets getCurrentInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Retrieves the current insets.\n     * <p>\n     * Note that these insets are always relative to the window, which is the same as\n     * being relative\n     * to {@link View#getRootView}\n     * @return The current insets on the currently showing frame. These insets will change as the\n     * animation progresses to reflect the current insets provided by the controlled window.\n     ",
    "links" : [ "android.view.View#getRootView" ]
  }, {
    "name" : " float getCurrentFraction()",
    "returnType" : "float",
    "comment" : "\n     *  Returns the progress as previously set by {@code fraction} in {@link #setInsetsAndAlpha}\n     *\n     *  @return the progress of the animation, where {@code 0} is fully hidden and {@code 1} is\n     *  fully shown.\n     * <p>\n     *  Note: this value represents raw overall progress of the animation\n     *  i.e. the combined progress of insets and alpha.\n     *  <p>\n     ",
    "links" : [ "#setInsetsAndAlpha" ]
  }, {
    "name" : " float getCurrentAlpha()",
    "returnType" : "float",
    "comment" : "\n     * Current alpha value of the window.\n     * @return float value between 0 and 1.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getTypes()",
    "returnType" : "int",
    "comment" : "\n     * @return The {@link WindowInsets.Type}s this object is currently controlling.\n     ",
    "links" : [ "WindowInsets.Type" ]
  }, {
    "name" : " void setInsetsAndAlpha(@Nullable Insets insets, @FloatRange(from = 0f, to = 1f) float alpha, @FloatRange(from = 0f, to = 1f) float fraction)",
    "returnType" : "void",
    "comment" : "\n     * Modifies the insets for the frame being drawn by indirectly moving the windows around in the\n     * system that are causing window insets.\n     * <p>\n     * Note that these insets are always relative to the window, which is the same as being relative\n     * to {@link View#getRootView}\n     * <p>\n     * Also note that this will <b>not</b> inform the view system of a full inset change via\n     * {@link View#dispatchApplyWindowInsets} in order to avoid a full layout pass during the\n     * animation. If you'd like to animate views during a window inset animation, register a\n     * {@link WindowInsetsAnimation.Callback} by calling\n     * {@link View#setWindowInsetsAnimationCallback(WindowInsetsAnimation.Callback)} that will be\n     * notified about any insets change via {@link WindowInsetsAnimation.Callback#onProgress} during\n     * the animation.\n     * <p>\n     * {@link View#dispatchApplyWindowInsets} will instead be called once the animation has\n     * finished, i.e. once {@link #finish} has been called.\n     * Note: If there are no insets, alpha animation is still applied.\n     *\n     * @param insets The new insets to apply. Based on the requested insets, the system will\n     *               calculate the positions of the windows in the system causing insets such that\n     *               the resulting insets of that configuration will match the passed in parameter.\n     *               Note that these insets are being clamped to the range from\n     *               {@link #getHiddenStateInsets} to {@link #getShownStateInsets}.\n     *               If you intend on changing alpha only, pass null or {@link #getCurrentInsets()}.\n     * @param alpha  The new alpha to apply to the inset side.\n     * @param fraction instantaneous animation progress. This value is dispatched to\n     *                 {@link WindowInsetsAnimation.Callback}.\n     *\n     * @see WindowInsetsAnimation.Callback\n     * @see View#setWindowInsetsAnimationCallback(WindowInsetsAnimation.Callback)\n     ",
    "links" : [ "#getShownStateInsets", "WindowInsetsAnimation.Callback", "WindowInsetsAnimation.Callback#onProgress", "#finish", "android.view.View#getRootView", "#getCurrentInsets()", "android.view.View#setWindowInsetsAnimationCallback(WindowInsetsAnimation.Callback)", "#getHiddenStateInsets", "android.view.View#dispatchApplyWindowInsets" ]
  }, {
    "name" : " void finish(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * Finishes the animation, and leaves the windows shown or hidden.\n     * <p>\n     * After invoking {@link #finish}, this instance is no longer {@link #isReady ready}.\n     * <p>\n     * Note: Finishing an animation implicitly {@link #setInsetsAndAlpha sets insets and alpha}\n     * according to the requested end state without any further animation.\n     *\n     * @param shown if {@code true}, the windows will be shown after finishing the\n     *              animation. Otherwise they will be hidden.\n     ",
    "links" : [ "#isReady", "#finish", "#setInsetsAndAlpha" ]
  }, {
    "name" : " boolean isReady()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this instance is ready to be used to control window insets.\n     * <p>\n     * Instances are ready when passed in {@link WindowInsetsAnimationControlListener#onReady}\n     * and stop being ready when it is either {@link #isFinished() finished} or\n     * {@link #isCancelled() cancelled}.\n     *\n     * @return {@code true} if the instance is ready, {@code false} otherwise.\n     ",
    "links" : [ "android.view.WindowInsetsAnimationControlListener#onReady", "#isFinished()", "#isCancelled()" ]
  }, {
    "name" : " boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this instance has been finished by a call to {@link #finish}.\n     *\n     * @see WindowInsetsAnimationControlListener#onFinished\n     * @return {@code true} if the instance is finished, {@code false} otherwise.\n     ",
    "links" : [ "#finish" ]
  }, {
    "name" : " boolean isCancelled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this instance has been cancelled by the system, or by invoking the\n     * {@link android.os.CancellationSignal} passed into\n     * {@link WindowInsetsController#controlWindowInsetsAnimation}.\n     *\n     * @see WindowInsetsAnimationControlListener#onCancelled\n     * @return {@code true} if the instance is cancelled, {@code false} otherwise.\n     ",
    "links" : [ "android.os.CancellationSignal", "android.view.WindowInsetsController#controlWindowInsetsAnimation" ]
  }, {
    "name" : " boolean hasZeroInsetsIme()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return {@code true} when controller controls IME and IME has no insets (floating,\n     *  fullscreen or non-overlapping).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Insets getHiddenStateInsets()", " Insets getShownStateInsets()", " Insets getCurrentInsets()", " float getCurrentFraction()", " float getCurrentAlpha()", " int getTypes()", " void setInsetsAndAlpha(@Nullable Insets insets, @FloatRange(from = 0f, to = 1f) float alpha, @FloatRange(from = 0f, to = 1f) float fraction)", " void finish(boolean shown)", " boolean isReady()", " boolean isFinished()", " boolean isCancelled()", " boolean hasZeroInsetsIme()" ],
  "variableNames" : [ ]
}