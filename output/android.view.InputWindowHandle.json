{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InputWindowHandle.java",
  "packageName" : "android.view",
  "className" : "InputWindowHandle",
  "comment" : "\n * Functions as a handle for a window that can receive input.\n * Enables the native input dispatcher to refer indirectly to the window manager's window state.\n * @hide\n ",
  "variables" : [ {
    "name" : "ptr",
    "type" : "long",
    "comment" : " This field is lazily initialized via JNI.",
    "links" : [ ]
  }, {
    "name" : "inputApplicationHandle",
    "type" : "InputApplicationHandle",
    "comment" : " The input application handle.",
    "links" : [ ]
  }, {
    "name" : "token",
    "type" : "IBinder",
    "comment" : " channel and the server input channel will both contain this token.",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : " The window name.",
    "links" : [ ]
  }, {
    "name" : "layoutParamsFlags",
    "type" : "int",
    "comment" : " Window layout params attributes.  (WindowManager.LayoutParams)",
    "links" : [ ]
  }, {
    "name" : "layoutParamsType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dispatchingTimeoutNanos",
    "type" : "long",
    "comment" : " Dispatching timeout.",
    "links" : [ ]
  }, {
    "name" : "frameLeft",
    "type" : "int",
    "comment" : " Window frame.",
    "links" : [ ]
  }, {
    "name" : "frameTop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frameRight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frameBottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "surfaceInset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scaleFactor",
    "type" : "float",
    "comment" : " to the window",
    "links" : [ ]
  }, {
    "name" : "touchableRegion",
    "type" : "Region",
    "comment" : " Window touchable region.",
    "links" : [ ]
  }, {
    "name" : "visible",
    "type" : "boolean",
    "comment" : " Window is visible.",
    "links" : [ ]
  }, {
    "name" : "canReceiveKeys",
    "type" : "boolean",
    "comment" : " Window can receive keys.",
    "links" : [ ]
  }, {
    "name" : "hasFocus",
    "type" : "boolean",
    "comment" : " Window has focus.",
    "links" : [ ]
  }, {
    "name" : "hasWallpaper",
    "type" : "boolean",
    "comment" : " Window has wallpaper.  (window is the current wallpaper target)",
    "links" : [ ]
  }, {
    "name" : "paused",
    "type" : "boolean",
    "comment" : " Input event dispatching is paused.",
    "links" : [ ]
  }, {
    "name" : "ownerPid",
    "type" : "int",
    "comment" : " Id of process and user that owns the window.",
    "links" : [ ]
  }, {
    "name" : "ownerUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "inputFeatures",
    "type" : "int",
    "comment" : " Window input features.",
    "links" : [ ]
  }, {
    "name" : "displayId",
    "type" : "int",
    "comment" : " Display this input is on.",
    "links" : [ ]
  }, {
    "name" : "portalToDisplayId",
    "type" : "int",
    "comment" : " transports the touch of this window to the display indicated by portalToDisplayId.",
    "links" : [ ]
  }, {
    "name" : "touchableRegionSurfaceControl",
    "type" : "WeakReference<SurfaceControl>",
    "comment" : "\n     * Crops the touchable region to the bounds of the surface provided.\n     *\n     * This can be used in cases where the window is not\n     * {@link android.view.WindowManager#FLAG_NOT_TOUCH_MODAL} but should be constrained to the\n     * bounds of a parent window. That is the window should receive touch events outside its\n     * window but be limited to its stack bounds, such as in the case of split screen.\n     ",
    "links" : [ "android.view.WindowManager#FLAG_NOT_TOUCH_MODAL" ]
  }, {
    "name" : "replaceTouchableRegionWithCrop",
    "type" : "boolean",
    "comment" : "\n     * Replace {@link touchableRegion} with the bounds of {@link touchableRegionSurfaceControl}. If\n     * the handle is {@code null}, the bounds of the surface associated with this window is used\n     * as the touchable region.\n     ",
    "links" : [ "touchableRegionSurfaceControl", "touchableRegion" ]
  } ],
  "methods" : [ {
    "name" : "private native void nativeDispose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceTouchableRegionWithCrop(@Nullable SurfaceControl bounds)",
    "returnType" : "void",
    "comment" : "\n     * Set the window touchable region to the bounds of {@link touchableRegionBounds} ignoring any\n     * touchable region provided.\n     *\n     * @param bounds surface to set the touchable region to. Set to {@code null} to set the bounds\n     * to the current surface.\n     ",
    "links" : [ "touchableRegionBounds" ]
  }, {
    "name" : "public void setTouchableRegionCrop(@Nullable SurfaceControl bounds)",
    "returnType" : "void",
    "comment" : "\n     * Crop the window touchable region to the bounds of the surface provided.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ptr", "inputApplicationHandle", "token", "name", "layoutParamsFlags", "layoutParamsType", "dispatchingTimeoutNanos", "frameLeft", "frameTop", "frameRight", "frameBottom", "surfaceInset", "scaleFactor", "touchableRegion", "visible", "canReceiveKeys", "hasFocus", "hasWallpaper", "paused", "ownerPid", "ownerUid", "inputFeatures", "displayId", "portalToDisplayId", "touchableRegionSurfaceControl", "replaceTouchableRegionWithCrop" ],
  "methodNames" : [ "private native void nativeDispose()", "public String toString()", "protected void finalize() throws Throwable", "public void replaceTouchableRegionWithCrop(@Nullable SurfaceControl bounds)", "public void setTouchableRegionCrop(@Nullable SurfaceControl bounds)" ]
}