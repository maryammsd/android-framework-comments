{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InputWindowHandle.java",
  "packageName" : "android.view",
  "className" : "InputWindowHandle",
  "comment" : "\n * Functions as a handle for a window that can receive input, and allows for the behavior of the\n * input window to be configured.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ptr",
    "type" : "long",
    "comment" : " This field is lazily initialized via JNI.",
    "links" : [ ]
  }, {
    "name" : "inputApplicationHandle",
    "type" : "InputApplicationHandle",
    "comment" : " The input application handle.",
    "links" : [ ]
  }, {
    "name" : "token",
    "type" : "IBinder",
    "comment" : " channel and the server input channel will both contain this token.",
    "links" : [ ]
  }, {
    "name" : "windowToken",
    "type" : "IBinder",
    "comment" : "\n     * The {@link IBinder} handle if InputWindowHandle is associated with a client token,\n     * normally the IWindow token, null otherwise.\n     ",
    "links" : [ "android.os.IBinder" ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : " The window name.",
    "links" : [ ]
  }, {
    "name" : "layoutParamsFlags",
    "type" : "int",
    "comment" : " These values do not affect any input configurations. Use {@link #inputConfig} instead.",
    "links" : [ "#inputConfig" ]
  }, {
    "name" : "layoutParamsType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dispatchingTimeoutMillis",
    "type" : "long",
    "comment" : " Dispatching timeout.",
    "links" : [ ]
  }, {
    "name" : "frame",
    "type" : "Rect",
    "comment" : " Window frame.",
    "links" : [ ]
  }, {
    "name" : "contentSize",
    "type" : "Size",
    "comment" : " The real size of the content, excluding any crop. If no buffer is rendered, this is 0,0",
    "links" : [ ]
  }, {
    "name" : "surfaceInset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "scaleFactor",
    "type" : "float",
    "comment" : " to the window",
    "links" : [ ]
  }, {
    "name" : "touchableRegion",
    "type" : "Region",
    "comment" : " Window touchable region.",
    "links" : [ ]
  }, {
    "name" : "inputConfig",
    "type" : "int",
    "comment" : " Flags that specify the behavior of this input window. See {@link #InputConfigFlags}.",
    "links" : [ "#InputConfigFlags" ]
  }, {
    "name" : "touchOcclusionMode",
    "type" : "int",
    "comment" : " security concerns",
    "links" : [ ]
  }, {
    "name" : "ownerPid",
    "type" : "int",
    "comment" : " Id of process and user that owns the window.",
    "links" : [ ]
  }, {
    "name" : "ownerUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "packageName",
    "type" : "String",
    "comment" : " Owner package of the window",
    "links" : [ ]
  }, {
    "name" : "displayId",
    "type" : "int",
    "comment" : " Display this input window is on.",
    "links" : [ ]
  }, {
    "name" : "touchableRegionSurfaceControl",
    "type" : "WeakReference<SurfaceControl>",
    "comment" : "\n     * Crops the {@link #touchableRegion} to the bounds of the surface provided.\n     *\n     * This can be used in cases where the window should be constrained to the bounds of a parent\n     * window. That is, the window should receive touch events outside its window frame, but be\n     * limited to its stack bounds, such as in the case of split screen.\n     ",
    "links" : [ "#touchableRegion" ]
  }, {
    "name" : "replaceTouchableRegionWithCrop",
    "type" : "boolean",
    "comment" : "\n     * Replace {@link #touchableRegion} with the bounds of {@link #touchableRegionSurfaceControl}.\n     * If the handle is {@code null}, the bounds of the surface associated with this window is used\n     * as the touchable region.\n     ",
    "links" : [ "#touchableRegionSurfaceControl", "#touchableRegion" ]
  }, {
    "name" : "transform",
    "type" : "Matrix",
    "comment" : "\n     * The transform that should be applied to the Window to get it from screen coordinates to\n     * window coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "alpha",
    "type" : "float",
    "comment" : "\n     * The alpha value returned from SurfaceFlinger. This will be ignored if passed as input data.\n     ",
    "links" : [ ]
  }, {
    "name" : "canOccludePresentation",
    "type" : "boolean",
    "comment" : "\n     * Sets a property on this window indicating that its visible region should be considered when\n     * computing TrustedPresentation Thresholds.\n     ",
    "links" : [ ]
  }, {
    "name" : "focusTransferTarget",
    "type" : "IBinder",
    "comment" : "\n     * The input token for the window to which focus should be transferred when this input window\n     * can be successfully focused. If null, this input window will not transfer its focus to\n     * any other window.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native void nativeDispose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceTouchableRegionWithCrop(@Nullable SurfaceControl bounds)",
    "returnType" : "void",
    "comment" : "\n     * Set the window's touchable region to the bounds of {@link #touchableRegionSurfaceControl}\n     * and ignore the value of {@link #touchableRegion}.\n     *\n     * @param bounds surface to set the touchable region to. Set to {@code null} to set the\n     *               touchable region as the current surface bounds.\n     ",
    "links" : [ "#touchableRegionSurfaceControl", "#touchableRegion" ]
  }, {
    "name" : "public void setTouchableRegionCrop(@Nullable SurfaceControl bounds)",
    "returnType" : "void",
    "comment" : "\n     * Crop the window touchable region to the bounds of the surface provided.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWindowToken(IBinder iwindow)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getWindowToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInputConfig(@InputConfigFlags int inputConfig, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Set the provided inputConfig flag values.\n     * @param inputConfig the flag values to change\n     * @param value the provided flag values are set when true, and cleared when false\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrustedOverlay(SurfaceControl.Transaction t, SurfaceControl sc, boolean isTrusted)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native void nativeDispose()", "public String toString()", "protected void finalize() throws Throwable", "public void replaceTouchableRegionWithCrop(@Nullable SurfaceControl bounds)", "public void setTouchableRegionCrop(@Nullable SurfaceControl bounds)", "public void setWindowToken(IBinder iwindow)", "public IBinder getWindowToken()", "public void setInputConfig(@InputConfigFlags int inputConfig, boolean value)", "public void setTrustedOverlay(SurfaceControl.Transaction t, SurfaceControl sc, boolean isTrusted)" ],
  "variableNames" : [ "ptr", "inputApplicationHandle", "token", "windowToken", "name", "layoutParamsFlags", "layoutParamsType", "dispatchingTimeoutMillis", "frame", "contentSize", "surfaceInset", "scaleFactor", "touchableRegion", "inputConfig", "touchOcclusionMode", "ownerPid", "ownerUid", "packageName", "displayId", "touchableRegionSurfaceControl", "replaceTouchableRegionWithCrop", "transform", "alpha", "canOccludePresentation", "focusTransferTarget" ]
}