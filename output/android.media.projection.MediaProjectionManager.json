{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/projection/MediaProjectionManager.java",
  "packageName" : "android.media.projection",
  "className" : "MediaProjectionManager",
  "comment" : "\n * Manages the retrieval of certain types of {@link MediaProjection} tokens.\n *\n * <p><ol>An example flow of starting a media projection will be:\n *     <li>Declare a foreground service with the type {@code mediaProjection} in\n *     the {@code AndroidManifest.xml}.\n *     </li>\n *     <li>Create an intent by calling {@link MediaProjectionManager#createScreenCaptureIntent()}\n *         and pass this intent to {@link Activity#startActivityForResult(Intent, int)}.\n *     </li>\n *     <li>On getting {@link Activity#onActivityResult(int, int, Intent)},\n *         start the foreground service with the type\n *         {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION}.\n *     </li>\n *     <li>Retrieve the media projection token by calling\n *         {@link MediaProjectionManager#getMediaProjection(int, Intent)} with the result code and\n *         intent from the {@link Activity#onActivityResult(int, int, Intent)} above.\n *     </li>\n *     <li>Start the screen capture session for media projection by calling\n *         {@link MediaProjection#createVirtualDisplay(String, int, int, int, int, Surface,\n *         android.hardware.display.VirtualDisplay.Callback, Handler)}.\n *     </li>\n * </ol>\n ",
  "links" : [ "android.media.projection.MediaProjectionManager#getMediaProjection(int", "android.app.Activity#startActivityForResult(Intent", "android.media.projection.MediaProjection", "android.media.projection.MediaProjectionManager#createScreenCaptureIntent()", "android.app.Activity#onActivityResult(int", "android.media.projection.MediaProjection#createVirtualDisplay(String", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OVERRIDE_DISABLE_MEDIA_PROJECTION_SINGLE_APP_OPTION",
    "type" : "long",
    "comment" : "\n     * This change id ensures that users are presented with a choice of capturing a single app\n     * or the entire screen when initiating a MediaProjection session, overriding the usage of\n     * MediaProjectionConfig#createConfigForDefaultDisplay.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MEDIA_PROJECTION_CONFIG",
    "type" : "String",
    "comment" : "\n     * Intent extra to customize the permission dialog based on the host app's preferences.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_APP_TOKEN",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MEDIA_PROJECTION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LAUNCH_COOKIE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCREEN_CAPTURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MIRRORING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRESENTATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Map<Callback, CallbackDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMediaProjectionManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Intent createScreenCaptureIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link Intent} that <b>must</b> be passed to\n     * {@link Activity#startActivityForResult(Intent, int)} (or similar) in order to start screen\n     * capture. The activity will prompt the user whether to allow screen capture.  The result of\n     * this activity (received by overriding {@link Activity#onActivityResult(int, int, Intent)\n     * onActivityResult(int, int, Intent)}) should be passed to\n     * {@link #getMediaProjection(int, Intent)}.\n     * <p>\n     * Identical to calling {@link #createScreenCaptureIntent(MediaProjectionConfig)} with\n     * a {@link MediaProjectionConfig#createConfigForUserChoice()}.\n     * </p>\n     * <p>\n     * Should be used instead of {@link #createScreenCaptureIntent(MediaProjectionConfig)} when the\n     * calling app does not want to customize the activity shown to the user.\n     * </p>\n     ",
    "links" : [ "#getMediaProjection(int", "#createScreenCaptureIntent(MediaProjectionConfig)", "android.app.Activity#startActivityForResult(Intent", "android.app.Activity#onActivityResult(int", "android.media.projection.MediaProjectionConfig#createConfigForUserChoice()", "android.content.Intent" ]
  }, {
    "name" : "public Intent createScreenCaptureIntent(@NonNull MediaProjectionConfig config)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link Intent} that <b>must</b> be passed to\n     * {@link Activity#startActivityForResult(Intent, int)} (or similar) in order to start screen\n     * capture. Customizes the activity and resulting {@link MediaProjection} session based up\n     * the provided {@code config}. The activity will prompt the user whether to allow screen\n     * capture. The result of this activity (received by overriding\n     * {@link Activity#onActivityResult(int, int, Intent) onActivityResult(int, int, Intent)})\n     * should be passed to {@link #getMediaProjection(int, Intent)}.\n     *\n     * <p>\n     * If {@link MediaProjectionConfig} was created from:\n     * <ul>\n     *     <li>\n     *         {@link MediaProjectionConfig#createConfigForDefaultDisplay()}, then creates an\n     *         {@link Intent} for capturing the default display. The activity limits the user's\n     *         choice to just the display specified.\n     *     </li>\n     *     <li>\n     *         {@link MediaProjectionConfig#createConfigForUserChoice()}, then creates an\n     *         {@link Intent} for deferring which region to capture to the user. This gives the\n     *         user the same behaviour as calling {@link #createScreenCaptureIntent()}. The\n     *         activity gives the user the choice between\n     *         {@link android.view.Display#DEFAULT_DISPLAY}, or a different region.\n     *     </li>\n     * </ul>\n     * </p>\n     * <p>\n     * Should be used instead of {@link #createScreenCaptureIntent()} when the calling app wants to\n     * customize the activity shown to the user.\n     * </p>\n     *\n     * @param config Customization for the {@link MediaProjection} that this {@link Intent} requests\n     *               the user's consent for.\n     * @return An {@link Intent} requesting the user's consent, specialized based upon the given\n     * configuration.\n     ",
    "links" : [ "#getMediaProjection(int", "android.app.Activity#startActivityForResult(Intent", "#createScreenCaptureIntent()", "android.media.projection.MediaProjection", "android.app.Activity#onActivityResult(int", "android.media.projection.MediaProjectionConfig#createConfigForDefaultDisplay()", "android.media.projection.MediaProjectionConfig#createConfigForUserChoice()", "android.content.Intent", "android.media.projection.MediaProjectionConfig", "android.view.Display#DEFAULT_DISPLAY" ]
  }, {
    "name" : "public Intent createScreenCaptureIntent(@NonNull LaunchCookie launchCookie)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an intent similar to {@link #createScreenCaptureIntent()} that will enable screen\n     * recording of the task with the specified launch cookie. This method should only be used for\n     * testing.\n     *\n     * @param launchCookie the launch cookie corresponding to the task to record.\n     * @hide\n     ",
    "links" : [ "#createScreenCaptureIntent()" ]
  }, {
    "name" : "public MediaProjection getMediaProjection(int resultCode, @NonNull Intent resultData)",
    "returnType" : "MediaProjection",
    "comment" : "\n     * Retrieves the {@link MediaProjection} obtained from a successful screen\n     * capture request. The result code and data from the request are provided by overriding\n     * {@link Activity#onActivityResult(int, int, Intent) onActivityResult(int, int, Intent)},\n     * which is called after starting an activity using {@link #createScreenCaptureIntent()}.\n     * <p>\n     * Starting from Android {@link android.os.Build.VERSION_CODES#R R}, if your application\n     * requests the {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW SYSTEM_ALERT_WINDOW}\n     * permission, and the user has not explicitly denied it, the permission will be automatically\n     * granted until the projection is stopped. The permission allows your app to display user\n     * controls on top of the screen being captured.\n     * </p>\n     * <p>\n     * An app targeting SDK version {@link android.os.Build.VERSION_CODES#Q Q} or later must\n     * invoke {@code getMediaProjection} and maintain the capture session\n     * ({@link MediaProjection#createVirtualDisplay(String, int, int, int, int, Surface,\n     * android.hardware.display.VirtualDisplay.Callback, Handler)\n     * MediaProjection#createVirtualDisplay}) while running a foreground service. The app must set\n     * the {@link android.R.attr#foregroundServiceType foregroundServiceType} attribute to\n     * {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION\n     * FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION} in the\n     * <a href=\"/guide/topics/manifest/service-element\"><code>&lt;service&gt;</code></a> element of\n     * the app's manifest file.\n     * </p>\n     * <p>\n     * For an app targeting SDK version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE U} or\n     * later, the user must have granted the app with the permission to start a projection,\n     * before the app starts a foreground service with the type\n     * {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION}.\n     * Additionally, the app must have started the foreground service with that type before calling\n     * this API here, or else it'll receive a {@link SecurityException} from this API call, unless\n     * it's a privileged app. Apps can request the permission via the\n     * {@link #createScreenCaptureIntent()} and {@link Activity#startActivityForResult(Intent, int)}\n     * (or similar APIs).\n     * </p>\n     *\n     * @param resultCode The result code from {@link Activity#onActivityResult(int, int, Intent)\n     *                   onActivityResult(int, int, Intent)}.\n     * @param resultData The result data from {@link Activity#onActivityResult(int, int, Intent)\n     *                   onActivityResult(int, int, Intent)}.\n     * @return The media projection obtained from a successful screen capture request, or null if\n     * the result of the screen capture request is not {@link Activity#RESULT_OK RESULT_OK}.\n     * @throws IllegalStateException On\n     *                               pre-{@link android.os.Build.VERSION_CODES#Q Q} devices if a\n     *                               previously obtained {@code MediaProjection} from the same\n     *                               {@code resultData} has not yet been stopped.\n     * @throws SecurityException     On {@link android.os.Build.VERSION_CODES#Q Q}+ devices if not\n     *                               invoked from a foreground service with type\n     *                {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION\n     *                               FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION}, unless caller is a\n     *                               privileged app.\n     * @see <a href=\"/guide/components/foreground-services\">\n     * Foreground services developer guide</a>\n     * @see <a href=\"/guide/topics/large-screens/media-projection\">\n     * Media projection developer guide</a>\n     ",
    "links" : [ "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTIONFOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#createScreenCaptureIntent()", "android.media.projection.MediaProjection", "android.media.projection.MediaProjection#createVirtualDisplay(String", "android.R.attr#foregroundServiceType", "SecurityException", "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#Q", "android.app.Activity#RESULT_OK", "android.app.Activity#startActivityForResult(Intent", "android.app.Activity#onActivityResult(int", "android.Manifest.permission#SYSTEM_ALERT_WINDOW", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION" ]
  }, {
    "name" : "public MediaProjectionInfo getActiveProjectionInfo()",
    "returnType" : "MediaProjectionInfo",
    "comment" : "\n     * Get the {@link MediaProjectionInfo} for the active {@link MediaProjection}.\n     * @hide\n     ",
    "links" : [ "android.media.projection.MediaProjection", "android.media.projection.MediaProjectionInfo" ]
  }, {
    "name" : "public void stopActiveProjection()",
    "returnType" : "void",
    "comment" : "\n     * Stop the current projection if there is one.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCallback(@NonNull Callback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback to monitor all of the {@link MediaProjection}s activity.\n     * Not for use by regular applications, must have the MANAGE_MEDIA_PROJECTION permission.\n     * @hide\n     ",
    "links" : [ "android.media.projection.MediaProjection" ]
  }, {
    "name" : "public void removeCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove a MediaProjection monitoring callback.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Intent createScreenCaptureIntent()", "public Intent createScreenCaptureIntent(@NonNull MediaProjectionConfig config)", "public Intent createScreenCaptureIntent(@NonNull LaunchCookie launchCookie)", "public MediaProjection getMediaProjection(int resultCode, @NonNull Intent resultData)", "public MediaProjectionInfo getActiveProjectionInfo()", "public void stopActiveProjection()", "public void addCallback(@NonNull Callback callback, @Nullable Handler handler)", "public void removeCallback(@NonNull Callback callback)" ],
  "variableNames" : [ "TAG", "OVERRIDE_DISABLE_MEDIA_PROJECTION_SINGLE_APP_OPTION", "EXTRA_MEDIA_PROJECTION_CONFIG", "EXTRA_APP_TOKEN", "EXTRA_MEDIA_PROJECTION", "EXTRA_LAUNCH_COOKIE", "TYPE_SCREEN_CAPTURE", "TYPE_MIRRORING", "TYPE_PRESENTATION", "mContext", "mCallbacks", "mService" ]
}