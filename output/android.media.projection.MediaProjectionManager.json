{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/projection/MediaProjectionManager.java",
  "packageName" : "android.media.projection",
  "className" : "MediaProjectionManager",
  "comment" : "\n * Manages the retrieval of certain types of {@link MediaProjection} tokens.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_APP_TOKEN",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MEDIA_PROJECTION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SCREEN_CAPTURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MIRRORING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PRESENTATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Map<Callback, CallbackDelegate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IMediaProjectionManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Intent createScreenCaptureIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an Intent that <b>must</b> be passed to startActivityForResult()\n     * in order to start screen capture. The activity will prompt\n     * the user whether to allow screen capture.  The result of this\n     * activity should be passed to getMediaProjection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MediaProjection getMediaProjection(int resultCode, @NonNull Intent resultData)",
    "returnType" : "MediaProjection",
    "comment" : "\n     * Retrieve the MediaProjection obtained from a succesful screen\n     * capture request. Will be null if the result from the\n     * startActivityForResult() is anything other than RESULT_OK.\n     *\n     * Starting from Android {@link android.os.Build.VERSION_CODES#R}, if your application requests\n     * the {@link android.Manifest.permission#SYSTEM_ALERT_WINDOW} permission, and the\n     * user has not explicitly denied it, the permission will be automatically granted until the\n     * projection is stopped. This allows for user controls to be displayed on top of the screen\n     * being captured.\n     *\n     * <p>\n     * Apps targeting SDK version {@link android.os.Build.VERSION_CODES#Q} or later should specify\n     * the foreground service type using the attribute {@link android.R.attr#foregroundServiceType}\n     * in the service element of the app's manifest file.\n     * The {@link android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION} attribute\n     * should be specified.\n     * </p>\n     *\n     * @see <a href=\"https://developer.android.com/preview/privacy/foreground-service-types\">\n     * Foregroud Service Types</a>\n     *\n     * @param resultCode The result code from {@link android.app.Activity#onActivityResult(int,\n     * int, android.content.Intent)}\n     * @param resultData The resulting data from {@link android.app.Activity#onActivityResult(int,\n     * int, android.content.Intent)}\n     * @throws IllegalStateException on pre-Q devices if a previously gotten MediaProjection\n     * from the same {@code resultData} has not yet been stopped\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#Q", "android.app.Activity#onActivityResult(int", "android.Manifest.permission#SYSTEM_ALERT_WINDOW", "android.R.attr#foregroundServiceType", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_MEDIA_PROJECTION" ]
  }, {
    "name" : "public MediaProjectionInfo getActiveProjectionInfo()",
    "returnType" : "MediaProjectionInfo",
    "comment" : "\n     * Get the {@link MediaProjectionInfo} for the active {@link MediaProjection}.\n     * @hide\n     ",
    "links" : [ "android.media.projection.MediaProjection", "android.media.projection.MediaProjectionInfo" ]
  }, {
    "name" : "public void stopActiveProjection()",
    "returnType" : "void",
    "comment" : "\n     * Stop the current projection if there is one.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCallback(@NonNull Callback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback to monitor all of the {@link MediaProjection}s activity.\n     * Not for use by regular applications, must have the MANAGE_MEDIA_PROJECTION permission.\n     * @hide\n     ",
    "links" : [ "android.media.projection.MediaProjection" ]
  }, {
    "name" : "public void removeCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove a MediaProjection monitoring callback.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "EXTRA_APP_TOKEN", "EXTRA_MEDIA_PROJECTION", "TYPE_SCREEN_CAPTURE", "TYPE_MIRRORING", "TYPE_PRESENTATION", "mContext", "mCallbacks", "mService" ],
  "methodNames" : [ "public Intent createScreenCaptureIntent()", "public MediaProjection getMediaProjection(int resultCode, @NonNull Intent resultData)", "public MediaProjectionInfo getActiveProjectionInfo()", "public void stopActiveProjection()", "public void addCallback(@NonNull Callback callback, @Nullable Handler handler)", "public void removeCallback(@NonNull Callback callback)" ]
}