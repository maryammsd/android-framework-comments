{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/speech/tts/BlockingAudioTrack.java",
  "packageName" : "android.speech.tts",
  "className" : "BlockingAudioTrack",
  "comment" : "\n * Exposes parts of the {@link AudioTrack} API by delegating calls to an\n * underlying {@link AudioTrack}. Additionally, provides methods like\n * {@link #waitAndRelease()} that will block until all audiotrack\n * data has been flushed to the mixer, and is estimated to have completed\n * playback.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SLEEP_TIME_MS",
    "type" : "long",
    "comment" : "\n     * The minimum increment of time to wait for an AudioTrack to finish\n     * playing.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_SLEEP_TIME_MS",
    "type" : "long",
    "comment" : "\n     * The maximum increment of time to sleep while waiting for an AudioTrack\n     * to finish playing.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PROGRESS_WAIT_MS",
    "type" : "long",
    "comment" : "\n     * The maximum amount of time to wait for an audio track to make progress while\n     * it remains in PLAYSTATE_PLAYING. This should never happen in normal usage, but\n     * could happen in exceptional circumstances like a media_server crash.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_AUDIO_BUFFER_SIZE",
    "type" : "int",
    "comment" : "\n     * Minimum size of the buffer of the underlying {@link android.media.AudioTrack}\n     * we create.\n     ",
    "links" : [ "android.media.AudioTrack" ]
  }, {
    "name" : "mAudioParams",
    "type" : "AudioOutputParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSampleRateInHz",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBytesPerFrame",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsShortUtterance",
    "type" : "boolean",
    "comment" : "\n     * A \"short utterance\" is one that uses less bytes than the audio\n     * track buffer size (mAudioBufferSize). In this case, we need to call\n     * {@link AudioTrack#stop()} to send pending buffers to the mixer, and slightly\n     * different logic is required to wait for the track to finish.\n     *\n     * Not volatile, accessed only from the audio playback thread.\n     ",
    "links" : [ "AudioTrack#stop" ]
  }, {
    "name" : "mAudioBufferSize",
    "type" : "int",
    "comment" : "\n     * Will be valid after a call to {@link #init()}.\n     ",
    "links" : [ "#init" ]
  }, {
    "name" : "mBytesWritten",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioTrackLock",
    "type" : "Object",
    "comment" : " set to null only after waitAndRelease().",
    "links" : [ ]
  }, {
    "name" : "mAudioTrack",
    "type" : "AudioTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStopped",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean init()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int write(byte[] data)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void waitAndRelease()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getChannelConfig(int channelCount)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long getAudioLengthMs(int numBytes)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int writeToAudioTrack(AudioTrack audioTrack, byte[] bytes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AudioTrack createStreamingAudioTrack()",
    "returnType" : "AudioTrack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void blockUntilDone(AudioTrack audioTrack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void blockUntilEstimatedCompletion()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void blockUntilCompletion(AudioTrack audioTrack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setupVolume(AudioTrack audioTrack, float volume, float pan)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final long clip(long value, long min, long max)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final float clip(float value, float min, float max)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @see\n     *     AudioTrack#setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationMarkerPosition(int frames)",
    "returnType" : "void",
    "comment" : " @see AudioTrack#setNotificationMarkerPosition(int). ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "MIN_SLEEP_TIME_MS", "MAX_SLEEP_TIME_MS", "MAX_PROGRESS_WAIT_MS", "MIN_AUDIO_BUFFER_SIZE", "mAudioParams", "mSampleRateInHz", "mAudioFormat", "mChannelCount", "mBytesPerFrame", "mIsShortUtterance", "mAudioBufferSize", "mBytesWritten", "mAudioTrackLock", "mAudioTrack", "mStopped", "mSessionId" ],
  "methodNames" : [ "public boolean init()", "public void stop()", "public int write(byte[] data)", "public void waitAndRelease()", " static int getChannelConfig(int channelCount)", " long getAudioLengthMs(int numBytes)", "private static int writeToAudioTrack(AudioTrack audioTrack, byte[] bytes)", "private AudioTrack createStreamingAudioTrack()", "private void blockUntilDone(AudioTrack audioTrack)", "private void blockUntilEstimatedCompletion()", "private void blockUntilCompletion(AudioTrack audioTrack)", "private static void setupVolume(AudioTrack audioTrack, float volume, float pan)", "private static final long clip(long value, long min, long max)", "private static final float clip(float value, float min, float max)", "public void setPlaybackPositionUpdateListener(AudioTrack.OnPlaybackPositionUpdateListener listener)", "public void setNotificationMarkerPosition(int frames)" ]
}