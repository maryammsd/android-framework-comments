{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/DOM3Serializer.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "DOM3Serializer",
  "comment" : "\r\n * This interface is not intended to be used\r\n * by an end user, but rather by an XML parser that is implementing the DOM \r\n * Level 3 Load and Save APIs.\r\n * <p>\r\n * \r\n * See the DOM Level 3 Load and Save interface at <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save.html#LS-LSSerializer\">LSSeializer</a>.\r\n * \r\n * For a list of configuration parameters for DOM Level 3 see <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration\">DOMConfiguration</a>.\r\n * For additional configuration parameters available with the DOM Level 3 Load and Save API LSSerializer see\r\n * <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save.html#LS-LSSerializer-config\">LSerializer config</a>.\r\n * <p>\r\n * The following example uses a DOM3Serializer indirectly, through an an XML\r\n * parser that uses this class as part of its implementation of the DOM Level 3\r\n * Load and Save APIs, and is the prefered way to serialize with DOM Level 3 APIs.\r\n * <p>\r\n * Example:\r\n * <pre>\r\n *    public class TestDOM3 {\r\n *\r\n *    public static void main(String args[]) throws Exception {\r\n *        // Get document to serialize\r\n *        TestDOM3 test = new TestDOM3();\r\n *        \r\n *        // Serialize using standard DOM Level 3 Load/Save APIs        \r\n *        System.out.println(test.testDOM3LS());\r\n *    }\r\n *\r\n *    public org.w3c.dom.Document getDocument() throws Exception {\r\n *        // Create a simple DOM Document.\r\n *        javax.xml.parsers.DocumentBuilderFactory factory = \r\n *            javax.xml.parsers.DocumentBuilderFactory.newInstance();\r\n *        javax.xml.parsers.DocumentBuilder builder = factory.newDocumentBuilder();\r\n *        byte[] bytes = \"<parent><child/></parent>\".getBytes();\r\n *        java.io.InputStream is = new java.io.ByteArrayInputStream(bytes);\r\n *        org.w3c.dom.Document doc = builder.parse(is);\r\n *        return doc;\r\n *    }\r\n *    \r\n *    //\r\n *    // This method uses standard DOM Level 3 Load Save APIs:\r\n *    //   org.w3c.dom.bootstrap.DOMImplementationRegistry\r\n *    //   org.w3c.dom.ls.DOMImplementationLS\r\n *    //   org.w3c.dom.ls.DOMImplementationLS\r\n *    //   org.w3c.dom.ls.LSSerializer\r\n *    //   org.w3c.dom.DOMConfiguration\r\n *    //   \r\n *    // The only thing non-standard in this method is the value set for the\r\n *    // name of the class implementing the DOM Level 3 Load Save APIs,\r\n *    // which in this case is:\r\n *    //   org.apache.xerces.dom.DOMImplementationSourceImpl\r\n *    //\r\n *\r\n *    public String testDOM3LS() throws Exception {\r\n *        \r\n *        // Get a simple DOM Document that will be serialized.\r\n *        org.w3c.dom.Document docToSerialize = getDocument();\r\n *\r\n *        // Get a factory (DOMImplementationLS) for creating a Load and Save object.\r\n *        org.w3c.dom.ls.DOMImplementationLS impl = \r\n *            (org.w3c.dom.ls.DOMImplementationLS) \r\n *            org.w3c.dom.bootstrap.DOMImplementationRegistry.newInstance().getDOMImplementation(\"LS\");\r\n *\r\n *        // Use the factory to create an object (LSSerializer) used to \r\n *        // write out or save the document.\r\n *        org.w3c.dom.ls.LSSerializer writer = impl.createLSSerializer();\r\n *        org.w3c.dom.DOMConfiguration config = writer.getDomConfig();\r\n *        config.setParameter(\"format-pretty-print\", Boolean.TRUE);\r\n *        \r\n *        // Use the LSSerializer to write out or serialize the document to a String.\r\n *        String serializedXML = writer.writeToString(docToSerialize);\r\n *        return serializedXML;\r\n *    }\r\n *    \r\n *    }  // end of class TestDOM3\r\n * </pre>\r\n * \r\n * @see <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration\">DOMConfiguration</a>\r\n * @see <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save.html#LS-LSSerializer-config\">LSSerializer</a>\r\n * @see org.apache.xml.serializer.Serializer\r\n * @see org.apache.xml.serializer.DOMSerializer\r\n * \r\n * @xsl.usage advanced\r\n *\r\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void serializeDOM3(Node node) throws IOException",
    "returnType" : "void",
    "comment" : "\r\n     * Serializes the Level 3 DOM node. Throws an exception only if an I/O\r\n     * exception occured while serializing.\r\n     * \r\n     * This interface is a public API.\r\n     *\r\n     * @param node the Level 3 DOM node to serialize\r\n     * @throws IOException if an I/O exception occured while serializing\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(DOMErrorHandler handler)",
    "returnType" : "void",
    "comment" : "\r\n     * Sets a DOMErrorHandler on the DOM Level 3 Serializer.\r\n     * \r\n     * This interface is a public API.\r\n     *\r\n     * @param handler the Level 3 DOMErrorHandler\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMErrorHandler getErrorHandler()",
    "returnType" : "DOMErrorHandler",
    "comment" : "\r\n     * Returns a DOMErrorHandler set on the DOM Level 3 Serializer.\r\n     * \r\n     * This interface is a public API.\r\n     *\r\n     * @return A Level 3 DOMErrorHandler\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNodeFilter(LSSerializerFilter filter)",
    "returnType" : "void",
    "comment" : "\r\n     * Sets a LSSerializerFilter on the DOM Level 3 Serializer to filter nodes\r\n     * during serialization.\r\n     * \r\n     * This interface is a public API.\r\n     *\r\n     * @param filter the Level 3 LSSerializerFilter\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public LSSerializerFilter getNodeFilter()",
    "returnType" : "LSSerializerFilter",
    "comment" : "\r\n     * Returns a LSSerializerFilter set on the DOM Level 3 Serializer to filter nodes\r\n     * during serialization.\r\n     * \r\n     * This interface is a public API.\r\n     *\r\n     * @return The Level 3 LSSerializerFilter\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNewLine(char[] newLine)",
    "returnType" : "void",
    "comment" : "\r\n     * Sets the end-of-line sequence of characters to be used during serialization\r\n     * @param newLine The end-of-line sequence of characters to be used during serialization\r\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void serializeDOM3(Node node) throws IOException", "public void setErrorHandler(DOMErrorHandler handler)", "public DOMErrorHandler getErrorHandler()", "public void setNodeFilter(LSSerializerFilter filter)", "public LSSerializerFilter getNodeFilter()", "public void setNewLine(char[] newLine)" ],
  "variableNames" : [ ]
}