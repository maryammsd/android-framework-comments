{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/JavaHandlerThread.java",
  "packageName" : "org.chromium.base",
  "className" : "JavaHandlerThread",
  "comment" : " Thread in Java with an Android Handler. This class is not thread safe. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnhandledException",
    "type" : "Throwable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static JavaHandlerThread create(String name, int priority)",
    "returnType" : "JavaHandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void maybeStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startAndInitialize(final long nativeThread, final long nativeEvent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void quitThreadSafely(final long nativeThread)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void joinThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAlive()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void listenForUncaughtExceptionsForTesting()",
    "returnType" : "void",
    "comment" : " it generates crash dumps and kills the process.",
    "links" : [ ]
  }, {
    "name" : "private Throwable getUncaughtExceptionIfAny()",
    "returnType" : "Throwable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static JavaHandlerThread create(String name, int priority)", "public Looper getLooper()", "public void maybeStart()", "private void startAndInitialize(final long nativeThread, final long nativeEvent)", "private void quitThreadSafely(final long nativeThread)", "private void joinThread()", "private boolean hasStarted()", "private boolean isAlive()", "private void listenForUncaughtExceptionsForTesting()", "private Throwable getUncaughtExceptionIfAny()" ],
  "variableNames" : [ "mThread", "mUnhandledException" ]
}