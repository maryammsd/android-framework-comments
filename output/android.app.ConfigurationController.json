{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ConfigurationController.java",
  "packageName" : "android.app",
  "className" : "ConfigurationController",
  "comment" : "\n * A client side controller to handle process level configuration changes.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityThread",
    "type" : "ActivityThreadInternal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfiguration",
    "type" : "Configuration",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " Configuration updatePendingConfiguration(@NonNull Configuration config)",
    "returnType" : "Configuration",
    "comment" : " Update the pending configuration. ",
    "links" : [ ]
  }, {
    "name" : " Configuration getPendingConfiguration(boolean clearPending)",
    "returnType" : "Configuration",
    "comment" : " Get the pending configuration. ",
    "links" : [ ]
  }, {
    "name" : " void setCompatConfiguration(@NonNull Configuration config)",
    "returnType" : "void",
    "comment" : " Set the compatibility configuration. ",
    "links" : [ ]
  }, {
    "name" : " Configuration getCompatConfiguration()",
    "returnType" : "Configuration",
    "comment" : " Get the compatibility configuration. ",
    "links" : [ ]
  }, {
    "name" : " final Configuration applyCompatConfiguration()",
    "returnType" : "Configuration",
    "comment" : " Apply the global compatibility configuration. ",
    "links" : [ ]
  }, {
    "name" : " void setConfiguration(@NonNull Configuration config)",
    "returnType" : "void",
    "comment" : " Set the configuration. ",
    "links" : [ ]
  }, {
    "name" : " Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : " Get current configuration. ",
    "links" : [ ]
  }, {
    "name" : " void handleConfigurationChanged(@NonNull Configuration config)",
    "returnType" : "void",
    "comment" : "\n     * Update the configuration to latest.\n     * @param config The new configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : " void handleConfigurationChanged(@NonNull CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "\n     * Update the configuration to latest.\n     * @param compat The new compatibility information.\n     ",
    "links" : [ ]
  }, {
    "name" : " void handleConfigurationChanged(@Nullable Configuration config, @Nullable CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "\n     * Update the configuration to latest.\n     * @param config The new configuration.\n     * @param compat The new compatibility information.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void handleConfigurationChangedInner(@Nullable Configuration config, @Nullable CompatibilityInfo compat)",
    "returnType" : "void",
    "comment" : "\n     * Update the configuration to latest.\n     * @param config The new configuration.\n     * @param compat The new compatibility information.\n     ",
    "links" : [ ]
  }, {
    "name" : " void performConfigurationChanged(@NonNull ComponentCallbacks2 cb, @NonNull Configuration newConfig)",
    "returnType" : "void",
    "comment" : "\n     * Decides whether to update a component's configuration and whether to inform it.\n     * @param cb The component callback to notify of configuration change.\n     * @param newConfig The new configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateDefaultDensity(int densityDpi)",
    "returnType" : "void",
    "comment" : " Update default density. ",
    "links" : [ ]
  }, {
    "name" : " int getCurDefaultDisplayDpi()",
    "returnType" : "int",
    "comment" : " Get current default display dpi. This is only done to maintain @UnsupportedAppUsage. ",
    "links" : [ ]
  }, {
    "name" : " void updateLocaleListFromAppContext(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "\n     * The LocaleList set for the app's resources may have been shuffled so that the preferred\n     * Locale is at position 0. We must find the index of this preferred Locale in the\n     * original LocaleList.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Configuration createNewConfigAndUpdateIfNotNull(@NonNull Configuration base, @Nullable Configuration override)",
    "returnType" : "Configuration",
    "comment" : "\n     * Creates a new Configuration only if override would modify base. Otherwise returns base.\n     * @param base The base configuration.\n     * @param override The update to apply to the base configuration. Can be null.\n     * @return A Configuration representing base with override applied.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Configuration updatePendingConfiguration(@NonNull Configuration config)", " Configuration getPendingConfiguration(boolean clearPending)", " void setCompatConfiguration(@NonNull Configuration config)", " Configuration getCompatConfiguration()", " final Configuration applyCompatConfiguration()", " void setConfiguration(@NonNull Configuration config)", " Configuration getConfiguration()", " void handleConfigurationChanged(@NonNull Configuration config)", " void handleConfigurationChanged(@NonNull CompatibilityInfo compat)", " void handleConfigurationChanged(@Nullable Configuration config, @Nullable CompatibilityInfo compat)", "private void handleConfigurationChangedInner(@Nullable Configuration config, @Nullable CompatibilityInfo compat)", " void performConfigurationChanged(@NonNull ComponentCallbacks2 cb, @NonNull Configuration newConfig)", " void updateDefaultDensity(int densityDpi)", " int getCurDefaultDisplayDpi()", " void updateLocaleListFromAppContext(@NonNull Context context)", " static Configuration createNewConfigAndUpdateIfNotNull(@NonNull Configuration base, @Nullable Configuration override)" ],
  "variableNames" : [ "TAG", "mActivityThread", "mResourcesManager", "mPendingConfiguration", "mCompatConfiguration", "mConfiguration" ]
}