{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/impl/CronetUploadDataStream.java",
  "packageName" : "org.chromium.net.impl",
  "className" : "CronetUploadDataStream",
  "comment" : "\n * CronetUploadDataStream handles communication between an upload body\n * encapsulated in the embedder's {@link UploadDataSink} and a C++\n * UploadDataStreamAdapter, which it owns. It's attached to a {@link\n * CronetUrlRequest}'s during the construction of request's native C++ objects\n * on the network thread, though it's created on one of the embedder's threads.\n * It is called by the UploadDataStreamAdapter on the network thread, but calls\n * into the UploadDataSink and the UploadDataStreamAdapter on the Executor\n * passed into its constructor.\n ",
  "links" : [ "org.chromium.net.impl.CronetUrlRequest", "org.chromium.net.UploadDataSink" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : " These are never changed, once a request starts.",
    "links" : [ ]
  }, {
    "name" : "mDataProvider",
    "type" : "VersionSafeCallbacks.UploadDataProviderWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequest",
    "type" : "CronetUrlRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemainingLength",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mByteBufferLimit",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReadTask",
    "type" : "Runnable",
    "comment" : " Reusable read task, to reduce redundant memory allocation.",
    "links" : [ ]
  }, {
    "name" : "mByteBuffer",
    "type" : "ByteBuffer",
    "comment" : " call to mDataProvider.read until onError or onReadSucceeded.",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " to robustly detect getting read/rewind results more often than expected.",
    "links" : [ ]
  }, {
    "name" : "mUploadDataStreamAdapter",
    "type" : "long",
    "comment" : " to the adapter is synchronized, for safe usage and cleanup.",
    "links" : [ ]
  }, {
    "name" : "mInWhichUserCallback",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestroyAdapterPostponed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDestroyedCallbackForTesting",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void readData(ByteBuffer byteBuffer)",
    "returnType" : "void",
    "comment" : "\n     * Called by native code to make the UploadDataProvider read data into\n     * {@code byteBuffer}.\n     ",
    "links" : [ ]
  }, {
    "name" : " void rewind()",
    "returnType" : "void",
    "comment" : " Called by native code to make the UploadDataProvider rewind upload data. ",
    "links" : [ ]
  }, {
    "name" : "private void checkCallingThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkState(@UserCallback int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onUploadDataStreamDestroyed()",
    "returnType" : "void",
    "comment" : "\n     * Called when the native UploadDataStream is destroyed.  At this point,\n     * the native adapter needs to be destroyed, but only after any pending\n     * read operation completes, as the adapter owns the read buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onError(Throwable exception)",
    "returnType" : "void",
    "comment" : "\n     * Helper method called when an exception occurred. This method resets\n     * states and propagates the error to the request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReadSucceeded(boolean lastChunk)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onReadError(Exception exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRewindSucceeded()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRewindError(Exception exception)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void postTaskToExecutor(Runnable task)",
    "returnType" : "void",
    "comment" : " Posts task to application Executor. ",
    "links" : [ ]
  }, {
    "name" : "private void destroyAdapter()",
    "returnType" : "void",
    "comment" : "\n     * The adapter is owned by the CronetUploadDataStream, so it can be\n     * destroyed safely when there is no pending read; however, destruction is\n     * initiated by the destruction of the native UploadDataStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void destroyAdapterIfPostponed()",
    "returnType" : "void",
    "comment" : "\n     * Destroys the native adapter if the destruction is postponed due to a\n     * pending read, which has since completed. Caller needs to be on executor\n     * thread.\n     ",
    "links" : [ ]
  }, {
    "name" : " void initializeWithRequest()",
    "returnType" : "void",
    "comment" : "\n     * Initializes upload length by getting it from data provider. Submits to\n     * the user's executor thread to allow getLength() to block and/or report errors.\n     * If data provider throws an exception, then it is reported to the request.\n     * No native calls to urlRequest are allowed as this is done before request\n     * start, so native object may not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : " void attachNativeAdapterToRequest(final long requestAdapter)",
    "returnType" : "void",
    "comment" : "\n     * Creates native objects and attaches them to the underlying request\n     * adapter object. Always called on executor thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long createUploadDataStreamForTesting() throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Creates a native CronetUploadDataStreamAdapter and\n     * CronetUploadDataStream for testing.\n     * @return the address of the native CronetUploadDataStream object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void readData(ByteBuffer byteBuffer)", " void rewind()", "private void checkCallingThread()", "private void checkState(@UserCallback int mode)", " void onUploadDataStreamDestroyed()", "private void onError(Throwable exception)", "public void onReadSucceeded(boolean lastChunk)", "public void onReadError(Exception exception)", "public void onRewindSucceeded()", "public void onRewindError(Exception exception)", " void postTaskToExecutor(Runnable task)", "private void destroyAdapter()", "private void destroyAdapterIfPostponed()", " void initializeWithRequest()", " void attachNativeAdapterToRequest(final long requestAdapter)", "public long createUploadDataStreamForTesting() throws IOException", "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)" ],
  "variableNames" : [ "TAG", "mExecutor", "mDataProvider", "mRequest", "mLength", "mRemainingLength", "mByteBufferLimit", "mReadTask", "mByteBuffer", "mLock", "mUploadDataStreamAdapter", "mInWhichUserCallback", "mDestroyAdapterPostponed", "mOnDestroyedCallbackForTesting" ]
}