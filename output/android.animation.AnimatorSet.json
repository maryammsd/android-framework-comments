{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/AnimatorSet.java",
  "packageName" : "android.animation",
  "className" : "AnimatorSet",
  "comment" : "\n * This class plays a set of {@link Animator} objects in the specified order. Animations\n * can be set up to play together, in sequence, or after a specified delay.\n *\n * <p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:\n * either the {@link AnimatorSet#playTogether(Animator[]) playTogether()} or\n * {@link AnimatorSet#playSequentially(Animator[]) playSequentially()} methods can be called to add\n * a set of animations all at once, or the {@link AnimatorSet#play(Animator)} can be\n * used in conjunction with methods in the {@link AnimatorSet.Builder Builder}\n * class to add animations\n * one by one.</p>\n *\n * <p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between\n * its animations. For example, an animation a1 could be set up to start before animation a2, a2\n * before a3, and a3 before a1. The results of this configuration are undefined, but will typically\n * result in none of the affected animations being played. Because of this (and because\n * circular dependencies do not make logical sense anyway), circular dependencies\n * should be avoided, and the dependency flow of animations should only be in one direction.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about animating with {@code AnimatorSet}, read the\n * <a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#choreography\">Property\n * Animation</a> developer guide.</p>\n * </div>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayingSet",
    "type" : "ArrayList<Node>",
    "comment" : "\n     * Tracks animations currently being played, so that we know what to\n     * cancel or end when cancel() or end() is called on this AnimatorSet\n     ",
    "links" : [ ]
  }, {
    "name" : "mNodeMap",
    "type" : "ArrayMap<Animator, Node>",
    "comment" : "\n     * Contains all nodes, mapped to their respective Animators. When new\n     * dependency information is added for an Animator, we want to add it\n     * to a single node representing that Animator, not create a new Node\n     * if one already exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEvents",
    "type" : "ArrayList<AnimationEvent>",
    "comment" : "\n     * Contains the start and end events of all the nodes. All these events are sorted in this list.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNodes",
    "type" : "ArrayList<Node>",
    "comment" : "\n     * Set of all nodes created for this AnimatorSet. This list is used upon\n     * starting the set, and the nodes are placed in sorted order into the\n     * sortedNodes collection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDependencyDirty",
    "type" : "boolean",
    "comment" : "\n     * Tracks whether any change has been made to the AnimatorSet, which is then used to\n     * determine whether the dependency graph should be re-constructed.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "\n     * Indicates whether an AnimatorSet has been start()'d, whether or\n     * not there is a nonzero startDelay.\n     ",
    "links" : [ ]
  }, {
    "name" : "mStartDelay",
    "type" : "long",
    "comment" : " The amount of time in ms to delay starting the animation after start() is called",
    "links" : [ ]
  }, {
    "name" : "mDelayAnim",
    "type" : "ValueAnimator",
    "comment" : " Animator used for a nonzero startDelay",
    "links" : [ ]
  }, {
    "name" : "mRootNode",
    "type" : "Node",
    "comment" : " same time.",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "long",
    "comment" : " set, it is passed along to the child animations.",
    "links" : [ ]
  }, {
    "name" : "mInterpolator",
    "type" : "TimeInterpolator",
    "comment" : " was set on this AnimatorSet, so it should not be passed down to the children.",
    "links" : [ ]
  }, {
    "name" : "mTotalDuration",
    "type" : "long",
    "comment" : " The total duration of finishing all the Animators in the set.",
    "links" : [ ]
  }, {
    "name" : "mShouldIgnoreEndWithoutStart",
    "type" : "boolean",
    "comment" : " the animator set and immediately end it for N and forward.",
    "links" : [ ]
  }, {
    "name" : "mShouldResetValuesAtStart",
    "type" : "boolean",
    "comment" : " the animation was previously seeked and therefore doesn't start from the beginning).",
    "links" : [ ]
  }, {
    "name" : "mEndCanBeCalled",
    "type" : "boolean",
    "comment" : " it became necessary to use an sdk target guard for calling end().",
    "links" : [ ]
  }, {
    "name" : "mLastFrameTime",
    "type" : "long",
    "comment" : " not running.",
    "links" : [ ]
  }, {
    "name" : "mFirstFrame",
    "type" : "long",
    "comment" : " -1 when the animation is not running.",
    "links" : [ ]
  }, {
    "name" : "mLastEventId",
    "type" : "int",
    "comment" : " -1 when the animation is not running.",
    "links" : [ ]
  }, {
    "name" : "mReversing",
    "type" : "boolean",
    "comment" : " Indicates whether the animation is reversing.",
    "links" : [ ]
  }, {
    "name" : "mSelfPulse",
    "type" : "boolean",
    "comment" : " passively wait for an AnimatorSet to pulse it.",
    "links" : [ ]
  }, {
    "name" : "mSeekState",
    "type" : "SeekState",
    "comment" : " SeekState stores the last seeked play time as well as seek direction.",
    "links" : [ ]
  }, {
    "name" : "mChildrenInitialized",
    "type" : "boolean",
    "comment" : " Indicates where children animators are all initialized with their start values captured.",
    "links" : [ ]
  }, {
    "name" : "mPauseTime",
    "type" : "long",
    "comment" : "\n     * Set on the next frame after pause() is called, used to calculate a new startTime\n     * or delayStartTime which allows the animator set to continue from the point at which\n     * it was paused. If negative, has not yet been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDummyListener",
    "type" : "AnimatorListenerAdapter",
    "comment" : " fixes their side.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void playTogether(Animator... items)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AnimatorSet to play all of the supplied animations at the same time.\n     * This is equivalent to calling {@link #play(Animator)} with the first animator in the\n     * set and then {@link Builder#with(Animator)} with each of the other animators. Note that\n     * an Animator with a {@link Animator#setStartDelay(long) startDelay} will not actually\n     * start until that delay elapses, which means that if the first animator in the list\n     * supplied to this constructor has a startDelay, none of the other animators will start\n     * until that first animator's startDelay has elapsed.\n     *\n     * @param items The animations that will be started simultaneously.\n     ",
    "links" : [ "android.animation.Animator#setStartDelay(long)", "#with(Animator)", "#play(Animator)" ]
  }, {
    "name" : "public void playTogether(Collection<Animator> items)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AnimatorSet to play all of the supplied animations at the same time.\n     *\n     * @param items The animations that will be started simultaneously.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void playSequentially(Animator... items)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AnimatorSet to play each of the supplied animations when the\n     * previous animation ends.\n     *\n     * @param items The animations that will be started one after another.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void playSequentially(List<Animator> items)",
    "returnType" : "void",
    "comment" : "\n     * Sets up this AnimatorSet to play each of the supplied animations when the\n     * previous animation ends.\n     *\n     * @param items The animations that will be started one after another.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Animator> getChildAnimations()",
    "returnType" : "ArrayList<Animator>",
    "comment" : "\n     * Returns the current list of child Animator objects controlled by this\n     * AnimatorSet. This is a copy of the internal list; modifications to the returned list\n     * will not affect the AnimatorSet, although changes to the underlying Animator objects\n     * will affect those objects being managed by the AnimatorSet.\n     *\n     * @return ArrayList<Animator> The list of child animations of this AnimatorSet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(Object target)",
    "returnType" : "void",
    "comment" : "\n     * Sets the target object for all current {@link #getChildAnimations() child animations}\n     * of this AnimatorSet that take targets ({@link ObjectAnimator} and\n     * AnimatorSet).\n     *\n     * @param target The object being animated\n     ",
    "links" : [ "android.animation.ObjectAnimator", "#getChildAnimations()" ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInterpolator(TimeInterpolator interpolator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the TimeInterpolator for all current {@link #getChildAnimations() child animations}\n     * of this AnimatorSet. The default value is null, which means that no interpolator\n     * is set on this AnimatorSet. Setting the interpolator to any non-null value\n     * will cause that interpolator to be set on the child animations\n     * when the set is started.\n     *\n     * @param interpolator the interpolator to be used by each child animation of this AnimatorSet\n     ",
    "links" : [ "#getChildAnimations()" ]
  }, {
    "name" : "public TimeInterpolator getInterpolator()",
    "returnType" : "TimeInterpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder play(Animator anim)",
    "returnType" : "Builder",
    "comment" : "\n     * This method creates a <code>Builder</code> object, which is used to\n     * set up playing constraints. This initial <code>play()</code> method\n     * tells the <code>Builder</code> the animation that is the dependency for\n     * the succeeding commands to the <code>Builder</code>. For example,\n     * calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play\n     * <code>a1</code> and <code>a2</code> at the same time,\n     * <code>play(a1).before(a2)</code> sets up the AnimatorSet to play\n     * <code>a1</code> first, followed by <code>a2</code>, and\n     * <code>play(a1).after(a2)</code> sets up the AnimatorSet to play\n     * <code>a2</code> first, followed by <code>a1</code>.\n     *\n     * <p>Note that <code>play()</code> is the only way to tell the\n     * <code>Builder</code> the animation upon which the dependency is created,\n     * so successive calls to the various functions in <code>Builder</code>\n     * will all refer to the initial parameter supplied in <code>play()</code>\n     * as the dependency of the other animations. For example, calling\n     * <code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>\n     * and <code>a3</code> when a1 ends; it does not set up a dependency between\n     * <code>a2</code> and <code>a3</code>.</p>\n     *\n     * @param anim The animation that is the dependency used in later calls to the\n     * methods in the returned <code>Builder</code> object. A null parameter will result\n     * in a null <code>Builder</code> return value.\n     * @return Builder The object that constructs the AnimatorSet based on the dependencies\n     * outlined in the calls to <code>play</code> and the other methods in the\n     * <code>Builder</code object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it\n     * is responsible for.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "private void forceToEnd()",
    "returnType" : "void",
    "comment" : " Force all the animations to end when the duration scale is 0.",
    "links" : [ ]
  }, {
    "name" : "public void end()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is\n     * responsible for.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if any of the child animations of this AnimatorSet have been started and have\n     * not yet ended. Child animations will not be started until the AnimatorSet has gone past\n     * its initial delay set through {@link #setStartDelay(long)}.\n     *\n     * @return Whether this AnimatorSet has gone past the initial delay, and at least one child\n     *         animation has been started and not yet ended.\n     ",
    "links" : [ "#setStartDelay(long)" ]
  }, {
    "name" : "public boolean isStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getStartDelay()",
    "returnType" : "long",
    "comment" : "\n     * The amount of time, in milliseconds, to delay starting the animation after\n     * {@link #start()} is called.\n     *\n     * @return the number of milliseconds to delay running the animation\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public void setStartDelay(long startDelay)",
    "returnType" : "void",
    "comment" : "\n     * The amount of time, in milliseconds, to delay starting the animation after\n     * {@link #start()} is called. Note that the start delay should always be non-negative. Any\n     * negative start delay will be clamped to 0 on N and above.\n     *\n     * @param startDelay The amount of the delay, in milliseconds\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the length of each of the child animations of this AnimatorSet. This value may\n     * be less than 0, which indicates that no duration has been set on this AnimatorSet\n     * and each of the child animations will use their own duration.\n     *\n     * @return The length of the animation, in milliseconds, of each of the child\n     * animations of this AnimatorSet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AnimatorSet setDuration(long duration)",
    "returnType" : "AnimatorSet",
    "comment" : "\n     * Sets the length of each of the current child animations of this AnimatorSet. By default,\n     * each child animation will use its own duration. If the duration is set on the AnimatorSet,\n     * then each child animation inherits this duration.\n     *\n     * @param duration The length of the animation, in milliseconds, of each of the child\n     * animations of this AnimatorSet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setupStartValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setupEndValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resume()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which\n     * it is responsible. The details of when exactly those animations are started depends on\n     * the dependency relationships that have been set up between the animations.\n     *\n     * <b>Note:</b> Manipulating AnimatorSet's lifecycle in the child animators' listener callbacks\n     * will lead to undefined behaviors. Also, AnimatorSet will ignore any seeking in the child\n     * animators once {@link #start()} is called.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : " void startWithoutPulsing(boolean inReverse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void start(boolean inReverse, boolean selfPulse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isEmptySet(AnimatorSet set)",
    "returnType" : "boolean",
    "comment" : " Returns true if set is empty or contains nothing but animator sets with no start delay.",
    "links" : [ ]
  }, {
    "name" : "private void updateAnimatorsDuration()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void skipToEndValue(boolean inReverse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void animateBasedOnPlayTime(long currentPlayTime, long lastPlayTime, boolean inReverse)",
    "returnType" : "void",
    "comment" : "\n     * Internal only.\n     *\n     * This method sets the animation values based on the play time. It also fast forward or\n     * backward all the child animations progress accordingly.\n     *\n     * This method is also responsible for calling\n     * {@link android.view.animation.Animation.AnimationListener#onAnimationRepeat(Animation)},\n     * as needed, based on the last play time and current play time.\n     ",
    "links" : [ "android.view.animation.Animation.AnimationListener#onAnimationRepeat(Animation)" ]
  }, {
    "name" : " boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipToStartValue(boolean inReverse)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPlayTime(long playTime)",
    "returnType" : "void",
    "comment" : "\n     * Sets the position of the animation to the specified point in time. This time should\n     * be between 0 and the total duration of the animation, including any repetition. If\n     * the animation has not yet been started, then it will not advance forward after it is\n     * set to this time; it will simply set the time to this value and perform any appropriate\n     * actions based on that time. If the animation is already running, then setCurrentPlayTime()\n     * will set the current playing time to this value and continue playing from that point.\n     *\n     * @param playTime The time, in milliseconds, to which the animation is advanced or rewound.\n     *                 Unless the animation is reversing, the playtime is considered the time since\n     *                 the end of the start delay of the AnimatorSet in a forward playing direction.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentPlayTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the milliseconds elapsed since the start of the animation.\n     *\n     * <p>For ongoing animations, this method returns the current progress of the animation in\n     * terms of play time. For an animation that has not yet been started: if the animation has been\n     * seeked to a certain time via {@link #setCurrentPlayTime(long)}, the seeked play time will\n     * be returned; otherwise, this method will return 0.\n     *\n     * @return the current position in time of the animation in milliseconds\n     ",
    "links" : [ "#setCurrentPlayTime(long)" ]
  }, {
    "name" : "private void initChildren()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean doAnimationFrame(long frameTime)",
    "returnType" : "boolean",
    "comment" : "\n     * @param frameTime The frame start time, in the {@link SystemClock#uptimeMillis()} time\n     *                  base.\n     * @return\n     * @hide\n     ",
    "links" : [ "#uptimeMillis()" ]
  }, {
    "name" : "public void commitAnimationFrame(long frameTime)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean pulseAnimationFrame(long frameTime)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleAnimationEvents(int startId, int latestId, long playTime)",
    "returnType" : "void",
    "comment" : "\n     * When playing forward, we call start() at the animation's scheduled start time, and make sure\n     * to pump a frame at the animation's scheduled end time.\n     *\n     * When playing in reverse, we should reverse the animation when we hit animation's end event,\n     * and expect the animation to end at the its delay ended event, rather than start event.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void pulseFrame(Node node, long animPlayTime)",
    "returnType" : "void",
    "comment" : "\n     * This method pulses frames into child animations. It scales the input animation play time\n     * with the duration scale and pass that to the child animation via pulseAnimationFrame(long).\n     *\n     * @param node child animator node\n     * @param animPlayTime unscaled play time (including start delay) for the child animator\n     ",
    "links" : [ ]
  }, {
    "name" : "private long getPlayTimeForNode(long overallPlayTime, Node node)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long getPlayTimeForNode(long overallPlayTime, Node node, boolean inReverse)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addDummyListener()",
    "returnType" : "void",
    "comment" : " masked a real bug in play movies. TODO: remove this and below once the root cause is fixed.",
    "links" : [ ]
  }, {
    "name" : "private void removeDummyListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findLatestEventIdForTime(long currentPlayTime)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeAnimationCallback()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addAnimationCallback(long delay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AnimatorSet clone()",
    "returnType" : "AnimatorSet",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canReverse()",
    "returnType" : "boolean",
    "comment" : "\n     * AnimatorSet is only reversible when the set contains no sequential animation, and no child\n     * animators have a start delay.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reverse()",
    "returnType" : "void",
    "comment" : "\n     * Plays the AnimatorSet in reverse. If the animation has been seeked to a specific play time\n     * using {@link #setCurrentPlayTime(long)}, it will play backwards from the point seeked when\n     * reverse was called. Otherwise, then it will start from the end and play backwards. This\n     * behavior is only set for the current animation; future playing of the animation will use the\n     * default behavior of playing forward.\n     * <p>\n     * Note: reverse is not supported for infinite AnimatorSet.\n     ",
    "links" : [ "#setCurrentPlayTime(long)" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printChildCount()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createDependencyGraph()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sortAnimationEvents()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePlayTime(Node parent, ArrayList<Node> visited)",
    "returnType" : "void",
    "comment" : "\n     * Based on parent's start/end time, calculate children's start/end time. If cycle exists in\n     * the graph, all the nodes on the cycle will be marked to start at {@link #DURATION_INFINITE},\n     * meaning they will ever play.\n     ",
    "links" : [ "#DURATION_INFINITE" ]
  }, {
    "name" : "private void findSiblings(Node node, ArrayList<Node> siblings)",
    "returnType" : "void",
    "comment" : " Recursively find all the siblings",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldPlayTogether()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * TODO: For animatorSet defined in XML, we can use a flag to indicate what the play order\n     * if defined (i.e. sequential or together), then we can use the flag instead of calculating\n     * dynamically. Note that when AnimatorSet is empty this method returns true.\n     * @return whether all the animators in the set are supposed to play together\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDuration()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node getNodeForAnimation(Animator anim)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mPlayingSet", "mNodeMap", "mEvents", "mNodes", "mDependencyDirty", "mStarted", "mStartDelay", "mDelayAnim", "mRootNode", "mDuration", "mInterpolator", "mTotalDuration", "mShouldIgnoreEndWithoutStart", "mShouldResetValuesAtStart", "mEndCanBeCalled", "mLastFrameTime", "mFirstFrame", "mLastEventId", "mReversing", "mSelfPulse", "mSeekState", "mChildrenInitialized", "mPauseTime", "mDummyListener" ],
  "methodNames" : [ "public void playTogether(Animator... items)", "public void playTogether(Collection<Animator> items)", "public void playSequentially(Animator... items)", "public void playSequentially(List<Animator> items)", "public ArrayList<Animator> getChildAnimations()", "public void setTarget(Object target)", "public int getChangingConfigurations()", "public void setInterpolator(TimeInterpolator interpolator)", "public TimeInterpolator getInterpolator()", "public Builder play(Animator anim)", "public void cancel()", "private void forceToEnd()", "public void end()", "public boolean isRunning()", "public boolean isStarted()", "public long getStartDelay()", "public void setStartDelay(long startDelay)", "public long getDuration()", "public AnimatorSet setDuration(long duration)", "public void setupStartValues()", "public void setupEndValues()", "public void pause()", "public void resume()", "public void start()", " void startWithoutPulsing(boolean inReverse)", "private void initAnimation()", "private void start(boolean inReverse, boolean selfPulse)", "private static boolean isEmptySet(AnimatorSet set)", "private void updateAnimatorsDuration()", " void skipToEndValue(boolean inReverse)", " void animateBasedOnPlayTime(long currentPlayTime, long lastPlayTime, boolean inReverse)", " boolean isInitialized()", "private void skipToStartValue(boolean inReverse)", "public void setCurrentPlayTime(long playTime)", "public long getCurrentPlayTime()", "private void initChildren()", "public boolean doAnimationFrame(long frameTime)", "public void commitAnimationFrame(long frameTime)", " boolean pulseAnimationFrame(long frameTime)", "private void handleAnimationEvents(int startId, int latestId, long playTime)", "private void pulseFrame(Node node, long animPlayTime)", "private long getPlayTimeForNode(long overallPlayTime, Node node)", "private long getPlayTimeForNode(long overallPlayTime, Node node, boolean inReverse)", "private void startAnimation()", "private void addDummyListener()", "private void removeDummyListener()", "private int findLatestEventIdForTime(long currentPlayTime)", "private void endAnimation()", "private void removeAnimationCallback()", "private void addAnimationCallback(long delay)", "public AnimatorSet clone()", "public boolean canReverse()", "public void reverse()", "public String toString()", "private void printChildCount()", "private void createDependencyGraph()", "private void sortAnimationEvents()", "private void updatePlayTime(Node parent, ArrayList<Node> visited)", "private void findSiblings(Node node, ArrayList<Node> siblings)", "public boolean shouldPlayTogether()", "public long getTotalDuration()", "private Node getNodeForAnimation(Animator anim)" ]
}