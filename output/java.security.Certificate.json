{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/Certificate.java",
  "packageName" : "java.security",
  "className" : "Certificate",
  "comment" : "\n * <p>This is an interface of abstract methods for managing a\n * variety of identity certificates.\n * An identity certificate is a guarantee by a principal that\n * a public key is that of another principal.  (A principal represents\n * an entity such as an individual user, a group, or a corporation.)\n *\n * <p>In particular, this interface is intended to be a common\n * abstraction for constructs that have different formats but\n * important common uses.  For example, different types of\n * certificates, such as X.509 certificates and PGP certificates,\n * share general certificate functionality (the need to encode and\n * decode certificates) and some types of information, such as a\n * public key, the principal whose key it is, and the guarantor\n * guaranteeing that the public key is that of the specified\n * principal. So an implementation of X.509 certificates and an\n * implementation of PGP certificates can both utilize the Certificate\n * interface, even though their formats and additional types and\n * amounts of information stored are different.\n *\n * <p><b>Important</b>: This interface is useful for cataloging and\n * grouping objects sharing certain common uses. It does not have any\n * semantics of its own. In particular, a Certificate object does not\n * make any statement as to the <i>validity</i> of the binding. It is\n * the duty of the application implementing this interface to verify\n * the certificate and satisfy itself of its validity.\n *\n * @author Benjamin Renaud\n * @since 1.1\n * @deprecated This class is deprecated and subject to removal in a future\n *     version of Java SE. It has been replaced by\n *     {@code java.security.cert.Certificate} and related classes.\n * @see java.security.cert.Certificate\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Principal getGuarantor()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the guarantor of the certificate, that is, the principal\n     * guaranteeing that the public key associated with this certificate\n     * is that of the principal associated with this certificate. For X.509\n     * certificates, the guarantor will typically be a Certificate Authority\n     * (such as the United States Postal Service or Verisign, Inc.).\n     *\n     * @return the guarantor which guaranteed the principal-key\n     * binding.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Principal getPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the principal of the principal-key pair being guaranteed by\n     * the guarantor.\n     *\n     * @return the principal to which this certificate is bound.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "\n     * Returns the key of the principal-key pair being guaranteed by\n     * the guarantor.\n     *\n     * @return the public key that this certificate certifies belongs\n     * to a particular principal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void encode(OutputStream stream) throws KeyException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Encodes the certificate to an output stream in a format that can\n     * be decoded by the {@code decode} method.\n     *\n     * @param stream the output stream to which to encode the\n     * certificate.\n     *\n     * @exception KeyException if the certificate is not\n     * properly initialized, or data is missing, etc.\n     *\n     * @exception IOException if a stream exception occurs while\n     * trying to output the encoded certificate to the output stream.\n     *\n     * @see #decode\n     * @see #getFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void decode(InputStream stream) throws KeyException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Decodes a certificate from an input stream. The format should be\n     * that returned by {@code getFormat} and produced by\n     * {@code encode}.\n     *\n     * @param stream the input stream from which to fetch the data\n     * being decoded.\n     *\n     * @exception KeyException if the certificate is not properly initialized,\n     * or data is missing, etc.\n     *\n     * @exception IOException if an exception occurs while trying to input\n     * the encoded certificate from the input stream.\n     *\n     * @see #encode\n     * @see #getFormat\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getFormat()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the coding format. This is used as a hint to find\n     * an appropriate parser. It could be \"X.509\", \"PGP\", etc. This is\n     * the format produced and understood by the {@code encode}\n     * and {@code decode} methods.\n     *\n     * @return the name of the coding format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString(boolean detailed)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string that represents the contents of the certificate.\n     *\n     * @param detailed whether or not to give detailed information\n     * about the certificate\n     *\n     * @return a string representing the contents of the certificate\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Principal getGuarantor()", "public abstract Principal getPrincipal()", "public abstract PublicKey getPublicKey()", "public abstract void encode(OutputStream stream) throws KeyException, IOException", "public abstract void decode(InputStream stream) throws KeyException, IOException", "public abstract String getFormat()", "public String toString(boolean detailed)" ],
  "variableNames" : [ ]
}