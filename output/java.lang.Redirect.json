{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ProcessBuilder.java",
  "packageName" : "java.lang",
  "className" : "Redirect",
  "comment" : "\n     * Represents a source of subprocess input or a destination of\n     * subprocess output.\n     *\n     * Each {@code Redirect} instance is one of the following:\n     *\n     * <ul>\n     * <li>the special value {@link #PIPE Redirect.PIPE}\n     * <li>the special value {@link #INHERIT Redirect.INHERIT}\n     * <li>a redirection to read from a file, created by an invocation of\n     *     {@link Redirect#from Redirect.from(File)}\n     * <li>a redirection to write to a file,  created by an invocation of\n     *     {@link Redirect#to Redirect.to(File)}\n     * <li>a redirection to append to a file, created by an invocation of\n     *     {@link Redirect#appendTo Redirect.appendTo(File)}\n     * </ul>\n     *\n     * <p>Each of the above categories has an associated unique\n     * {@link Type Type}.\n     *\n     * @since 1.7\n     ",
  "links" : [ "#from", "#appendTo", "#PIPE", "java.lang.Type", "#INHERIT", "#to" ],
  "variables" : [ {
    "name" : "PIPE",
    "type" : "Redirect",
    "comment" : "\n         * Indicates that subprocess I/O will be connected to the\n         * current Java process over a pipe.\n         *\n         * This is the default handling of subprocess standard I/O.\n         *\n         * <p>It will always be true that\n         *  <pre> {@code\n         * Redirect.PIPE.file() == null &&\n         * Redirect.PIPE.type() == Redirect.Type.PIPE\n         * }</pre>\n         ",
    "links" : [ ]
  }, {
    "name" : "INHERIT",
    "type" : "Redirect",
    "comment" : "\n         * Indicates that subprocess I/O source or destination will be the\n         * same as those of the current process.  This is the normal\n         * behavior of most operating system command interpreters (shells).\n         *\n         * <p>It will always be true that\n         *  <pre> {@code\n         * Redirect.INHERIT.file() == null &&\n         * Redirect.INHERIT.type() == Redirect.Type.INHERIT\n         * }</pre>\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract Type type()",
    "returnType" : "Type",
    "comment" : "\n         * Returns the type of this {@code Redirect}.\n         * @return the type of this {@code Redirect}\n         ",
    "links" : [ ]
  }, {
    "name" : "public File file()",
    "returnType" : "File",
    "comment" : "\n         * Returns the {@link File} source or destination associated\n         * with this redirect, or {@code null} if there is no such file.\n         *\n         * @return the file associated with this redirect,\n         *         or {@code null} if there is no such file\n         ",
    "links" : [ "java.io.File" ]
  }, {
    "name" : " boolean append()",
    "returnType" : "boolean",
    "comment" : "\n         * When redirected to a destination file, indicates if the output\n         * is to be written to the end of the file.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Redirect from(final File file)",
    "returnType" : "Redirect",
    "comment" : "\n         * Returns a redirect to read from the specified file.\n         *\n         * <p>It will always be true that\n         *  <pre> {@code\n         * Redirect.from(file).file() == file &&\n         * Redirect.from(file).type() == Redirect.Type.READ\n         * }</pre>\n         *\n         * @param file The {@code File} for the {@code Redirect}.\n         * @throws NullPointerException if the specified file is null\n         * @return a redirect to read from the specified file\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Redirect to(final File file)",
    "returnType" : "Redirect",
    "comment" : "\n         * Returns a redirect to write to the specified file.\n         * If the specified file exists when the subprocess is started,\n         * its previous contents will be discarded.\n         *\n         * <p>It will always be true that\n         *  <pre> {@code\n         * Redirect.to(file).file() == file &&\n         * Redirect.to(file).type() == Redirect.Type.WRITE\n         * }</pre>\n         *\n         * @param file The {@code File} for the {@code Redirect}.\n         * @throws NullPointerException if the specified file is null\n         * @return a redirect to write to the specified file\n         ",
    "links" : [ ]
  }, {
    "name" : "public static Redirect appendTo(final File file)",
    "returnType" : "Redirect",
    "comment" : "\n         * Returns a redirect to append to the specified file.\n         * Each write operation first advances the position to the\n         * end of the file and then writes the requested data.\n         * Whether the advancement of the position and the writing\n         * of the data are done in a single atomic operation is\n         * system-dependent and therefore unspecified.\n         *\n         * <p>It will always be true that\n         *  <pre> {@code\n         * Redirect.appendTo(file).file() == file &&\n         * Redirect.appendTo(file).type() == Redirect.Type.APPEND\n         * }</pre>\n         *\n         * @param file The {@code File} for the {@code Redirect}.\n         * @throws NullPointerException if the specified file is null\n         * @return a redirect to append to the specified file\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n         * Compares the specified object with this {@code Redirect} for\n         * equality.  Returns {@code true} if and only if the two\n         * objects are identical or both objects are {@code Redirect}\n         * instances of the same type associated with non-null equal\n         * {@code File} instances.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n         * Returns a hash code value for this {@code Redirect}.\n         * @return a hash code value for this {@code Redirect}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Type type()", "public File file()", " boolean append()", "public static Redirect from(final File file)", "public static Redirect to(final File file)", "public static Redirect appendTo(final File file)", "public boolean equals(Object obj)", "public int hashCode()" ],
  "variableNames" : [ "PIPE", "INHERIT" ]
}