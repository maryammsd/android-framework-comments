{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "WearableExtender",
  "comment" : "\n     * Helper class to add wearable extensions to notifications.\n     * <p class=\"note\"> See\n     * <a href=\"{@docRoot}wear/notifications/creating.html\">Creating Notifications\n     * for Android Wear</a> for more information on how to use this class.\n     * <p>\n     * To create a notification with wearable extensions:\n     * <ol>\n     *   <li>Create a {@link android.app.Notification.Builder}, setting any desired\n     *   properties.\n     *   <li>Create a {@link android.app.Notification.WearableExtender}.\n     *   <li>Set wearable-specific properties using the\n     *   {@code add} and {@code set} methods of {@link android.app.Notification.WearableExtender}.\n     *   <li>Call {@link android.app.Notification.Builder#extend} to apply the extensions to a\n     *   notification.\n     *   <li>Post the notification to the notification system with the\n     *   {@code NotificationManager.notify(...)} methods.\n     * </ol>\n     *\n     * <pre class=\"prettyprint\">\n     * Notification notif = new Notification.Builder(mContext)\n     *         .setContentTitle(&quot;New mail from &quot; + sender.toString())\n     *         .setContentText(subject)\n     *         .setSmallIcon(R.drawable.new_mail)\n     *         .extend(new Notification.WearableExtender()\n     *                 .setContentIcon(R.drawable.new_mail))\n     *         .build();\n     * NotificationManager notificationManger =\n     *         (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n     * notificationManger.notify(0, notif);</pre>\n     *\n     * <p>Wearable extensions can be accessed on an existing notification by using the\n     * {@code WearableExtender(Notification)} constructor,\n     * and then using the {@code get} methods to access values.\n     *\n     * <pre class=\"prettyprint\">\n     * Notification.WearableExtender wearableExtender = new Notification.WearableExtender(\n     *         notification);\n     * List&lt;Notification&gt; pages = wearableExtender.getPages();</pre>\n     ",
  "links" : [ "android.app.Notification.Builder#extend", "android.app.Notification.Builder", "android.app.Notification.WearableExtender" ],
  "variables" : [ {
    "name" : "UNSET_ACTION_INDEX",
    "type" : "int",
    "comment" : "\n         * Sentinel value for an action index that is unset.\n         ",
    "links" : [ ]
  }, {
    "name" : "SIZE_DEFAULT",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification with\n         * default sizing.\n         * <p>For custom display notifications created using {@link #setDisplayIntent},\n         * the default is {@link #SIZE_MEDIUM}. All other notifications size automatically based\n         * on their content.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#SIZE_MEDIUM", "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SIZE_XSMALL",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification\n         * with an extra small size.\n         * <p>This value is only applicable for custom display notifications created using\n         * {@link #setDisplayIntent}.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SIZE_SMALL",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification\n         * with a small size.\n         * <p>This value is only applicable for custom display notifications created using\n         * {@link #setDisplayIntent}.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SIZE_MEDIUM",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification\n         * with a medium size.\n         * <p>This value is only applicable for custom display notifications created using\n         * {@link #setDisplayIntent}.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SIZE_LARGE",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification\n         * with a large size.\n         * <p>This value is only applicable for custom display notifications created using\n         * {@link #setDisplayIntent}.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SIZE_FULL_SCREEN",
    "type" : "int",
    "comment" : "\n         * Size value for use with {@link #setCustomSizePreset} to show this notification\n         * full screen.\n         * <p>This value is only applicable for custom display notifications created using\n         * {@link #setDisplayIntent}.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "SCREEN_TIMEOUT_SHORT",
    "type" : "int",
    "comment" : "\n         * Sentinel value for use with {@link #setHintScreenTimeout} to keep the screen on for a\n         * short amount of time when this notification is displayed on the screen. This\n         * is the default value.\n         *\n         * @deprecated This feature is no longer supported.\n         ",
    "links" : [ "#setHintScreenTimeout" ]
  }, {
    "name" : "SCREEN_TIMEOUT_LONG",
    "type" : "int",
    "comment" : "\n         * Sentinel value for use with {@link #setHintScreenTimeout} to keep the screen on\n         * for a longer amount of time when this notification is displayed on the screen.\n         *\n         * @deprecated This feature is no longer supported.\n         ",
    "links" : [ "#setHintScreenTimeout" ]
  }, {
    "name" : "EXTRA_WEARABLE_EXTENSIONS",
    "type" : "String",
    "comment" : " Notification extra which contains wearable extensions ",
    "links" : [ ]
  }, {
    "name" : "KEY_ACTIONS",
    "type" : "String",
    "comment" : " Keys within EXTRA_WEARABLE_EXTENSIONS for wearable options.",
    "links" : [ ]
  }, {
    "name" : "KEY_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DISPLAY_INTENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_PAGES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_BACKGROUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CONTENT_ICON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CONTENT_ICON_GRAVITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CONTENT_ACTION_INDEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CUSTOM_SIZE_PRESET",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CUSTOM_CONTENT_HEIGHT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_GRAVITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_HINT_SCREEN_TIMEOUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DISMISSAL_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_BRIDGE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_CONTENT_INTENT_AVAILABLE_OFFLINE",
    "type" : "int",
    "comment" : " Flags bitwise-ored to mFlags",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_HIDE_ICON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_SHOW_BACKGROUND_ONLY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_START_SCROLL_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_AVOID_BACKGROUND_CLIPPING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_BIG_PICTURE_AMBIENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FLAGS",
    "type" : "int",
    "comment" : " Default value for flags integer",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CONTENT_ICON_GRAVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_GRAVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActions",
    "type" : "ArrayList<Action>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPages",
    "type" : "ArrayList<Notification>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackground",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentIcon",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentIconGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentActionIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomSizePreset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomContentHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGravity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintScreenTimeout",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDismissalId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBridgeTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Notification.Builder extend(Notification.Builder builder)",
    "returnType" : "Notification.Builder",
    "comment" : "\n         * Apply wearable extensions to a notification that is being built. This is typically\n         * called by the {@link android.app.Notification.Builder#extend} method of\n         * {@link android.app.Notification.Builder}.\n         ",
    "links" : [ "android.app.Notification.Builder#extend", "android.app.Notification.Builder" ]
  }, {
    "name" : "public WearableExtender clone()",
    "returnType" : "WearableExtender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender addAction(Action action)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Add a wearable action to this notification.\n         *\n         * <p>When wearable actions are added using this method, the set of actions that\n         * show on a wearable device splits from devices that only show actions added\n         * using {@link android.app.Notification.Builder#addAction}. This allows for customization\n         * of which actions display on different devices.\n         *\n         * @param action the action to add to this notification\n         * @return this object for method chaining\n         * @see android.app.Notification.Action\n         ",
    "links" : [ "android.app.Notification.Builder#addAction" ]
  }, {
    "name" : "public WearableExtender addActions(List<Action> actions)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Adds wearable actions to this notification.\n         *\n         * <p>When wearable actions are added using this method, the set of actions that\n         * show on a wearable device splits from devices that only show actions added\n         * using {@link android.app.Notification.Builder#addAction}. This allows for customization\n         * of which actions display on different devices.\n         *\n         * @param actions the actions to add to this notification\n         * @return this object for method chaining\n         * @see android.app.Notification.Action\n         ",
    "links" : [ "android.app.Notification.Builder#addAction" ]
  }, {
    "name" : "public WearableExtender clearActions()",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Clear all wearable actions present on this builder.\n         * @return this object for method chaining.\n         * @see #addAction\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<Action> getActions()",
    "returnType" : "List<Action>",
    "comment" : "\n         * Get the wearable actions present on this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setDisplayIntent(PendingIntent intent)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set an intent to launch inside of an activity view when displaying\n         * this notification. The {@link PendingIntent} provided should be for an activity.\n         *\n         * <pre class=\"prettyprint\">\n         * Intent displayIntent = new Intent(context, MyDisplayActivity.class);\n         * PendingIntent displayPendingIntent = PendingIntent.getActivity(context,\n         *         0, displayIntent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE_UNAUDITED);\n         * Notification notif = new Notification.Builder(context)\n         *         .extend(new Notification.WearableExtender()\n         *                 .setDisplayIntent(displayPendingIntent)\n         *                 .setCustomSizePreset(Notification.WearableExtender.SIZE_MEDIUM))\n         *         .build();</pre>\n         *\n         * <p>The activity to launch needs to allow embedding, must be exported, and\n         * should have an empty task affinity. It is also recommended to use the device\n         * default light theme.\n         *\n         * <p>Example AndroidManifest.xml entry:\n         * <pre class=\"prettyprint\">\n         * &lt;activity android:name=&quot;com.example.MyDisplayActivity&quot;\n         *     android:exported=&quot;true&quot;\n         *     android:allowEmbedded=&quot;true&quot;\n         *     android:taskAffinity=&quot;&quot;\n         *     android:theme=&quot;@android:style/Theme.DeviceDefault.Light&quot; /&gt;</pre>\n         *\n         * @param intent the {@link PendingIntent} for an activity\n         * @return this object for method chaining\n         * @see android.app.Notification.WearableExtender#getDisplayIntent\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ "android.app.PendingIntent" ]
  }, {
    "name" : "public PendingIntent getDisplayIntent()",
    "returnType" : "PendingIntent",
    "comment" : "\n         * Get the intent to launch inside of an activity view when displaying this\n         * notification. This {@code PendingIntent} should be for an activity.\n         *\n         * @deprecated Display intents are no longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender addPage(Notification page)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Add an additional page of content to display with this notification. The current\n         * notification forms the first page, and pages added using this function form\n         * subsequent pages. This field can be used to separate a notification into multiple\n         * sections.\n         *\n         * @param page the notification to add as another page\n         * @return this object for method chaining\n         * @see android.app.Notification.WearableExtender#getPages\n         * @deprecated Multiple content pages are no longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender addPages(List<Notification> pages)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Add additional pages of content to display with this notification. The current\n         * notification forms the first page, and pages added using this function form\n         * subsequent pages. This field can be used to separate a notification into multiple\n         * sections.\n         *\n         * @param pages a list of notifications\n         * @return this object for method chaining\n         * @see android.app.Notification.WearableExtender#getPages\n         * @deprecated Multiple content pages are no longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender clearPages()",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Clear all additional pages present on this builder.\n         * @return this object for method chaining.\n         * @see #addPage\n         * @deprecated Multiple content pages are no longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<Notification> getPages()",
    "returnType" : "List<Notification>",
    "comment" : "\n         * Get the array of additional pages of content for displaying this notification. The\n         * current notification forms the first page, and elements within this array form\n         * subsequent pages. This field can be used to separate a notification into multiple\n         * sections.\n         * @return the pages for this notification\n         * @deprecated Multiple content pages are no longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setBackground(Bitmap background)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a background image to be displayed behind the notification content.\n         * Contrary to the {@link android.app.Notification.BigPictureStyle}, this background\n         * will work with any notification style.\n         *\n         * @param background the background bitmap\n         * @return this object for method chaining\n         * @removed Not functional since {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}.\n         *          The wearable background is not used by wearables anymore and uses up\n         *          unnecessary memory.\n         ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.app.Notification.BigPictureStyle" ]
  }, {
    "name" : "public Bitmap getBackground()",
    "returnType" : "Bitmap",
    "comment" : "\n         * Get a background image to be displayed behind the notification content.\n         * Contrary to the {@link android.app.Notification.BigPictureStyle}, this background\n         * will work with any notification style.\n         *\n         * @return the background image\n         * @removed Not functional since {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}. The\n         *          wearable background is not used by wearables anymore and uses up\n         *          unnecessary memory.\n         ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.app.Notification.BigPictureStyle" ]
  }, {
    "name" : "public WearableExtender setContentIcon(int icon)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set an icon that goes with the content of this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getContentIcon()",
    "returnType" : "int",
    "comment" : "\n         * Get an icon that goes with the content of this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setContentIconGravity(int contentIconGravity)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set the gravity that the content icon should have within the notification display.\n         * Supported values include {@link android.view.Gravity#START} and\n         * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.\n         * @see #setContentIcon\n         ",
    "links" : [ "android.view.Gravity#START", "android.view.Gravity#END" ]
  }, {
    "name" : "public int getContentIconGravity()",
    "returnType" : "int",
    "comment" : "\n         * Get the gravity that the content icon should have within the notification display.\n         * Supported values include {@link android.view.Gravity#START} and\n         * {@link android.view.Gravity#END}. The default value is {@link android.view.Gravity#END}.\n         * @see #getContentIcon\n         ",
    "links" : [ "android.view.Gravity#START", "android.view.Gravity#END" ]
  }, {
    "name" : "public WearableExtender setContentAction(int actionIndex)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set an action from this notification's actions as the primary action. If the action has a\n         * {@link RemoteInput} associated with it, shortcuts to the options for that input are shown\n         * directly on the notification.\n         *\n         * @param actionIndex The index of the primary action.\n         *                    If wearable actions were added to the main notification, this index\n         *                    will apply to that list, otherwise it will apply to the regular\n         *                    actions list.\n         ",
    "links" : [ "android.app.RemoteInput" ]
  }, {
    "name" : "public int getContentAction()",
    "returnType" : "int",
    "comment" : "\n         * Get the index of the notification action, if any, that was specified as the primary\n         * action.\n         *\n         * <p>If wearable specific actions were added to the main notification, this index will\n         * apply to that list, otherwise it will apply to the regular actions list.\n         *\n         * @return the action index or {@link #UNSET_ACTION_INDEX} if no action was selected.\n         ",
    "links" : [ "#UNSET_ACTION_INDEX" ]
  }, {
    "name" : "public WearableExtender setGravity(int gravity)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set the gravity that this notification should have within the available viewport space.\n         * Supported values include {@link android.view.Gravity#TOP},\n         * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.\n         * The default value is {@link android.view.Gravity#BOTTOM}.\n         ",
    "links" : [ "android.view.Gravity#TOP", "android.view.Gravity#CENTER_VERTICAL", "android.view.Gravity#BOTTOM" ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n         * Get the gravity that this notification should have within the available viewport space.\n         * Supported values include {@link android.view.Gravity#TOP},\n         * {@link android.view.Gravity#CENTER_VERTICAL} and {@link android.view.Gravity#BOTTOM}.\n         * The default value is {@link android.view.Gravity#BOTTOM}.\n         ",
    "links" : [ "android.view.Gravity#TOP", "android.view.Gravity#CENTER_VERTICAL", "android.view.Gravity#BOTTOM" ]
  }, {
    "name" : "public WearableExtender setCustomSizePreset(int sizePreset)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set the custom size preset for the display of this notification out of the available\n         * presets found in {@link android.app.Notification.WearableExtender}, e.g.\n         * {@link #SIZE_LARGE}.\n         * <p>Some custom size presets are only applicable for custom display notifications created\n         * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. Check the\n         * documentation for the preset in question. See also\n         * {@link #setCustomContentHeight} and {@link #getCustomSizePreset}.\n         ",
    "links" : [ "#setCustomContentHeight", "#getCustomSizePreset", "#SIZE_LARGE", "android.app.Notification.WearableExtender", "android.app.Notification.WearableExtender#setDisplayIntent" ]
  }, {
    "name" : "public int getCustomSizePreset()",
    "returnType" : "int",
    "comment" : "\n         * Get the custom size preset for the display of this notification out of the available\n         * presets found in {@link android.app.Notification.WearableExtender}, e.g.\n         * {@link #SIZE_LARGE}.\n         * <p>Some custom size presets are only applicable for custom display notifications created\n         * using {@link #setDisplayIntent}. Check the documentation for the preset in question.\n         * See also {@link #setCustomContentHeight} and {@link #setCustomSizePreset}.\n         ",
    "links" : [ "#setCustomContentHeight", "#SIZE_LARGE", "android.app.Notification.WearableExtender", "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "public WearableExtender setCustomContentHeight(int height)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set the custom height in pixels for the display of this notification's content.\n         * <p>This option is only available for custom display notifications created\n         * using {@link android.app.Notification.WearableExtender#setDisplayIntent}. See also\n         * {@link android.app.Notification.WearableExtender#setCustomSizePreset} and\n         * {@link #getCustomContentHeight}.\n         ",
    "links" : [ "#getCustomContentHeight", "android.app.Notification.WearableExtender#setDisplayIntent", "android.app.Notification.WearableExtender#setCustomSizePreset" ]
  }, {
    "name" : "public int getCustomContentHeight()",
    "returnType" : "int",
    "comment" : "\n         * Get the custom height in pixels for the display of this notification's content.\n         * <p>This option is only available for custom display notifications created\n         * using {@link #setDisplayIntent}. See also {@link #setCustomSizePreset} and\n         * {@link #setCustomContentHeight}.\n         ",
    "links" : [ "#setCustomContentHeight", "#setCustomSizePreset", "#setDisplayIntent" ]
  }, {
    "name" : "public WearableExtender setStartScrollBottom(boolean startScrollBottom)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set whether the scrolling position for the contents of this notification should start\n         * at the bottom of the contents instead of the top when the contents are too long to\n         * display within the screen.  Default is false (start scroll at the top).\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getStartScrollBottom()",
    "returnType" : "boolean",
    "comment" : "\n         * Get whether the scrolling position for the contents of this notification should start\n         * at the bottom of the contents instead of the top when the contents are too long to\n         * display within the screen. Default is false (start scroll at the top).\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setContentIntentAvailableOffline(boolean contentIntentAvailableOffline)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set whether the content intent is available when the wearable device is not connected\n         * to a companion device.  The user can still trigger this intent when the wearable device\n         * is offline, but a visual hint will indicate that the content intent may not be available.\n         * Defaults to true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getContentIntentAvailableOffline()",
    "returnType" : "boolean",
    "comment" : "\n         * Get whether the content intent is available when the wearable device is not connected\n         * to a companion device.  The user can still trigger this intent when the wearable device\n         * is offline, but a visual hint will indicate that the content intent may not be available.\n         * Defaults to true.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setHintHideIcon(boolean hintHideIcon)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a hint that this notification's icon should not be displayed.\n         * @param hintHideIcon {@code true} to hide the icon, {@code false} otherwise.\n         * @return this object for method chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHintHideIcon()",
    "returnType" : "boolean",
    "comment" : "\n         * Get a hint that this notification's icon should not be displayed.\n         * @return {@code true} if this icon should not be displayed, false otherwise.\n         * The default value is {@code false} if this was never set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setHintShowBackgroundOnly(boolean hintShowBackgroundOnly)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a visual hint that only the background image of this notification should be\n         * displayed, and other semantic content should be hidden. This hint is only applicable\n         * to sub-pages added using {@link #addPage}.\n         ",
    "links" : [ "#addPage" ]
  }, {
    "name" : "public boolean getHintShowBackgroundOnly()",
    "returnType" : "boolean",
    "comment" : "\n         * Get a visual hint that only the background image of this notification should be\n         * displayed, and other semantic content should be hidden. This hint is only applicable\n         * to sub-pages added using {@link android.app.Notification.WearableExtender#addPage}.\n         ",
    "links" : [ "android.app.Notification.WearableExtender#addPage" ]
  }, {
    "name" : "public WearableExtender setHintAvoidBackgroundClipping(boolean hintAvoidBackgroundClipping)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a hint that this notification's background should not be clipped if possible,\n         * and should instead be resized to fully display on the screen, retaining the aspect\n         * ratio of the image. This can be useful for images like barcodes or qr codes.\n         * @param hintAvoidBackgroundClipping {@code true} to avoid clipping if possible.\n         * @return this object for method chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHintAvoidBackgroundClipping()",
    "returnType" : "boolean",
    "comment" : "\n         * Get a hint that this notification's background should not be clipped if possible,\n         * and should instead be resized to fully display on the screen, retaining the aspect\n         * ratio of the image. This can be useful for images like barcodes or qr codes.\n         * @return {@code true} if it's ok if the background is clipped on the screen, false\n         * otherwise. The default value is {@code false} if this was never set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setHintScreenTimeout(int timeout)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a hint that the screen should remain on for at least this duration when\n         * this notification is displayed on the screen.\n         * @param timeout The requested screen timeout in milliseconds. Can also be either\n         *     {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.\n         * @return this object for method chaining\n         ",
    "links" : [ "#SCREEN_TIMEOUT_SHORT", "#SCREEN_TIMEOUT_LONG" ]
  }, {
    "name" : "public int getHintScreenTimeout()",
    "returnType" : "int",
    "comment" : "\n         * Get the duration, in milliseconds, that the screen should remain on for\n         * when this notification is displayed.\n         * @return the duration in milliseconds if > 0, or either one of the sentinel values\n         *     {@link #SCREEN_TIMEOUT_SHORT} or {@link #SCREEN_TIMEOUT_LONG}.\n         ",
    "links" : [ "#SCREEN_TIMEOUT_SHORT", "#SCREEN_TIMEOUT_LONG" ]
  }, {
    "name" : "public WearableExtender setHintAmbientBigPicture(boolean hintAmbientBigPicture)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a hint that this notification's {@link BigPictureStyle} (if present) should be\n         * converted to low-bit and displayed in ambient mode, especially useful for barcodes and\n         * qr codes, as well as other simple black-and-white tickets.\n         * @param hintAmbientBigPicture {@code true} to enable converstion and ambient.\n         * @return this object for method chaining\n         * @deprecated This feature is no longer supported.\n         ",
    "links" : [ "BigPictureStyle" ]
  }, {
    "name" : "public boolean getHintAmbientBigPicture()",
    "returnType" : "boolean",
    "comment" : "\n         * Get a hint that this notification's {@link BigPictureStyle} (if present) should be\n         * converted to low-bit and displayed in ambient mode, especially useful for barcodes and\n         * qr codes, as well as other simple black-and-white tickets.\n         * @return {@code true} if it should be displayed in ambient, false otherwise\n         * otherwise. The default value is {@code false} if this was never set.\n         * @deprecated This feature is no longer supported.\n         ",
    "links" : [ "BigPictureStyle" ]
  }, {
    "name" : "public WearableExtender setHintContentIntentLaunchesActivity(boolean hintContentIntentLaunchesActivity)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Set a hint that this notification's content intent will launch an {@link Activity}\n         * directly, telling the platform that it can generate the appropriate transitions.\n         * @param hintContentIntentLaunchesActivity {@code true} if the content intent will launch\n         * an activity and transitions should be generated, false otherwise.\n         * @return this object for method chaining\n         ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public boolean getHintContentIntentLaunchesActivity()",
    "returnType" : "boolean",
    "comment" : "\n         * Get a hint that this notification's content intent will launch an {@link Activity}\n         * directly, telling the platform that it can generate the appropriate transitions\n         * @return {@code true} if the content intent will launch an activity and transitions should\n         * be generated, false otherwise. The default value is {@code false} if this was never set.\n         ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public WearableExtender setDismissalId(String dismissalId)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Sets the dismissal id for this notification. If a notification is posted with a\n         * dismissal id, then when that notification is canceled, notifications on other wearables\n         * and the paired Android phone having that same dismissal id will also be canceled. See\n         * <a href=\"{@docRoot}wear/notifications/index.html\">Adding Wearable Features to\n         * Notifications</a> for more information.\n         * @param dismissalId the dismissal id of the notification.\n         * @return this object for method chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getDismissalId()",
    "returnType" : "String",
    "comment" : "\n         * Returns the dismissal id of the notification.\n         * @return the dismissal id of the notification or null if it has not been set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setBridgeTag(String bridgeTag)",
    "returnType" : "WearableExtender",
    "comment" : "\n         * Sets a bridge tag for this notification. A bridge tag can be set for notifications\n         * posted from a phone to provide finer-grained control on what notifications are bridged\n         * to wearables. See <a href=\"{@docRoot}wear/notifications/index.html\">Adding Wearable\n         * Features to Notifications</a> for more information.\n         * @param bridgeTag the bridge tag of the notification.\n         * @return this object for method chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getBridgeTag()",
    "returnType" : "String",
    "comment" : "\n         * Returns the bridge tag of the notification.\n         * @return the bridge tag or null if not present.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int mask, boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Notification.Builder extend(Notification.Builder builder)", "public WearableExtender clone()", "public WearableExtender addAction(Action action)", "public WearableExtender addActions(List<Action> actions)", "public WearableExtender clearActions()", "public List<Action> getActions()", "public WearableExtender setDisplayIntent(PendingIntent intent)", "public PendingIntent getDisplayIntent()", "public WearableExtender addPage(Notification page)", "public WearableExtender addPages(List<Notification> pages)", "public WearableExtender clearPages()", "public List<Notification> getPages()", "public WearableExtender setBackground(Bitmap background)", "public Bitmap getBackground()", "public WearableExtender setContentIcon(int icon)", "public int getContentIcon()", "public WearableExtender setContentIconGravity(int contentIconGravity)", "public int getContentIconGravity()", "public WearableExtender setContentAction(int actionIndex)", "public int getContentAction()", "public WearableExtender setGravity(int gravity)", "public int getGravity()", "public WearableExtender setCustomSizePreset(int sizePreset)", "public int getCustomSizePreset()", "public WearableExtender setCustomContentHeight(int height)", "public int getCustomContentHeight()", "public WearableExtender setStartScrollBottom(boolean startScrollBottom)", "public boolean getStartScrollBottom()", "public WearableExtender setContentIntentAvailableOffline(boolean contentIntentAvailableOffline)", "public boolean getContentIntentAvailableOffline()", "public WearableExtender setHintHideIcon(boolean hintHideIcon)", "public boolean getHintHideIcon()", "public WearableExtender setHintShowBackgroundOnly(boolean hintShowBackgroundOnly)", "public boolean getHintShowBackgroundOnly()", "public WearableExtender setHintAvoidBackgroundClipping(boolean hintAvoidBackgroundClipping)", "public boolean getHintAvoidBackgroundClipping()", "public WearableExtender setHintScreenTimeout(int timeout)", "public int getHintScreenTimeout()", "public WearableExtender setHintAmbientBigPicture(boolean hintAmbientBigPicture)", "public boolean getHintAmbientBigPicture()", "public WearableExtender setHintContentIntentLaunchesActivity(boolean hintContentIntentLaunchesActivity)", "public boolean getHintContentIntentLaunchesActivity()", "public WearableExtender setDismissalId(String dismissalId)", "public String getDismissalId()", "public WearableExtender setBridgeTag(String bridgeTag)", "public String getBridgeTag()", "private void setFlag(int mask, boolean value)", "private void visitUris(@NonNull Consumer<Uri> visitor)" ],
  "variableNames" : [ "UNSET_ACTION_INDEX", "SIZE_DEFAULT", "SIZE_XSMALL", "SIZE_SMALL", "SIZE_MEDIUM", "SIZE_LARGE", "SIZE_FULL_SCREEN", "SCREEN_TIMEOUT_SHORT", "SCREEN_TIMEOUT_LONG", "EXTRA_WEARABLE_EXTENSIONS", "KEY_ACTIONS", "KEY_FLAGS", "KEY_DISPLAY_INTENT", "KEY_PAGES", "KEY_BACKGROUND", "KEY_CONTENT_ICON", "KEY_CONTENT_ICON_GRAVITY", "KEY_CONTENT_ACTION_INDEX", "KEY_CUSTOM_SIZE_PRESET", "KEY_CUSTOM_CONTENT_HEIGHT", "KEY_GRAVITY", "KEY_HINT_SCREEN_TIMEOUT", "KEY_DISMISSAL_ID", "KEY_BRIDGE_TAG", "FLAG_CONTENT_INTENT_AVAILABLE_OFFLINE", "FLAG_HINT_HIDE_ICON", "FLAG_HINT_SHOW_BACKGROUND_ONLY", "FLAG_START_SCROLL_BOTTOM", "FLAG_HINT_AVOID_BACKGROUND_CLIPPING", "FLAG_BIG_PICTURE_AMBIENT", "FLAG_HINT_CONTENT_INTENT_LAUNCHES_ACTIVITY", "DEFAULT_FLAGS", "DEFAULT_CONTENT_ICON_GRAVITY", "DEFAULT_GRAVITY", "mActions", "mFlags", "mDisplayIntent", "mPages", "mBackground", "mContentIcon", "mContentIconGravity", "mContentActionIndex", "mCustomSizePreset", "mCustomContentHeight", "mGravity", "mHintScreenTimeout", "mDismissalId", "mBridgeTag" ]
}