{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/AnimatedVectorDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "AnimatedVectorDrawable",
  "comment" : "\n * This class animates properties of a {@link android.graphics.drawable.VectorDrawable} with\n * animations defined using {@link android.animation.ObjectAnimator} or\n * {@link android.animation.AnimatorSet}.\n * <p>\n * Starting from API 25, AnimatedVectorDrawable runs on RenderThread (as opposed to on UI thread for\n * earlier APIs). This means animations in AnimatedVectorDrawable can remain smooth even when there\n * is heavy workload on the UI thread. Note: If the UI thread is unresponsive, RenderThread may\n * continue animating until the UI thread is capable of pushing another frame. Therefore, it is not\n * possible to precisely coordinate a RenderThread-enabled AnimatedVectorDrawable with UI thread\n * animations. Additionally,\n * {@link android.graphics.drawable.Animatable2.AnimationCallback#onAnimationEnd(Drawable)} will be\n * called the frame after the AnimatedVectorDrawable finishes on the RenderThread.\n * </p>\n * <p>\n * AnimatedVectorDrawable can be defined in either <a href=\"#ThreeXML\">three separate XML files</a>,\n * or <a href=\"#OneXML\">one XML</a>.\n * </p>\n * <a name=\"ThreeXML\"></a>\n * <h3>Define an AnimatedVectorDrawable in three separate XML files</h3>\n * <ul>\n * <a name=\"VDExample\"></a>\n * <li><h4>XML for the VectorDrawable containing properties to be animated</h4>\n * <p>\n * Animations can be performed on the animatable attributes in\n * {@link android.graphics.drawable.VectorDrawable}. These attributes will be animated by\n * {@link android.animation.ObjectAnimator}. The ObjectAnimator's target can be the root element,\n * a group element or a path element. The targeted elements need to be named uniquely within\n * the same VectorDrawable. Elements without animation do not need to be named.\n * </p>\n * <p>\n * Here are all the animatable attributes in {@link android.graphics.drawable.VectorDrawable}:\n * <table border=\"2\" align=\"center\" cellpadding=\"5\">\n *     <thead>\n *         <tr>\n *             <th>Element Name</th>\n *             <th>Animatable attribute name</th>\n *         </tr>\n *     </thead>\n *     <tr>\n *         <td>&lt;vector&gt;</td>\n *         <td>alpha</td>\n *     </tr>\n *     <tr>\n *         <td rowspan=\"7\">&lt;group&gt;</td>\n *         <td>rotation</td>\n *     </tr>\n *     <tr>\n *         <td>pivotX</td>\n *     </tr>\n *     <tr>\n *         <td>pivotY</td>\n *     </tr>\n *     <tr>\n *         <td>scaleX</td>\n *     </tr>\n *     <tr>\n *         <td>scaleY</td>\n *     </tr>\n *     <tr>\n *         <td>translateX</td>\n *     </tr>\n *     <tr>\n *         <td>translateY</td>\n *     </tr>\n *     <tr>\n *         <td rowspan=\"9\">&lt;path&gt;</td>\n *         <td>pathData</td>\n *     </tr>\n *     <tr>\n *         <td>fillColor</td>\n *     </tr>\n *     <tr>\n *         <td>strokeColor</td>\n *     </tr>\n *     <tr>\n *         <td>strokeWidth</td>\n *     </tr>\n *     <tr>\n *         <td>strokeAlpha</td>\n *     </tr>\n *     <tr>\n *         <td>fillAlpha</td>\n *     </tr>\n *     <tr>\n *         <td>trimPathStart</td>\n *     </tr>\n *     <tr>\n *         <td>trimPathEnd</td>\n *     </tr>\n *     <tr>\n *         <td>trimPathOffset</td>\n *     </tr>\n *     <tr>\n *         <td>&lt;clip-path&gt;</td>\n *         <td>pathData</td>\n *     </tr>\n * </table>\n * </p>\n * Below is an example of a VectorDrawable defined in vectordrawable.xml. This VectorDrawable is\n * referred to by its file name (not including file suffix) in the\n * <a href=\"#AVDExample\">AnimatedVectorDrawable XML example</a>.\n * <pre>\n * &lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n *     android:height=&quot;64dp&quot;\n *     android:width=&quot;64dp&quot;\n *     android:viewportHeight=&quot;600&quot;\n *     android:viewportWidth=&quot;600&quot; &gt;\n *     &lt;group\n *         android:name=&quot;rotationGroup&quot;\n *         android:pivotX=&quot;300.0&quot;\n *         android:pivotY=&quot;300.0&quot;\n *         android:rotation=&quot;45.0&quot; &gt;\n *         &lt;path\n *             android:name=&quot;v&quot;\n *             android:fillColor=&quot;#000000&quot;\n *             android:pathData=&quot;M300,70 l 0,-70 70,70 0,0 -70,70z&quot; /&gt;\n *     &lt;/group&gt;\n * &lt;/vector&gt;\n * </pre></li>\n *\n * <a name=\"AVDExample\"></a>\n * <li><h4>XML for AnimatedVectorDrawable</h4>\n * <p>\n * An AnimatedVectorDrawable element has a VectorDrawable attribute, and one or more target\n * element(s). The target element can specify its target by android:name attribute, and link the\n * target with the proper ObjectAnimator or AnimatorSet by android:animation attribute.\n * </p>\n * The following code sample defines an AnimatedVectorDrawable. Note that the names refer to the\n * groups and paths in the <a href=\"#VDExample\">VectorDrawable XML above</a>.\n * <pre>\n * &lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n *     android:drawable=&quot;@drawable/vectordrawable&quot; &gt;\n *     &lt;target\n *         android:name=&quot;rotationGroup&quot;\n *         android:animation=&quot;@animator/rotation&quot; /&gt;\n *     &lt;target\n *         android:name=&quot;v&quot;\n *         android:animation=&quot;@animator/path_morph&quot; /&gt;\n * &lt;/animated-vector&gt;\n * </pre>\n * </li>\n *\n * <li><h4>XML for Animations defined using ObjectAnimator or AnimatorSet</h4>\n * <p>\n * From the previous <a href=\"#AVDExample\">example of AnimatedVectorDrawable</a>, two animations\n * were used: rotation.xml and path_morph.xml.\n * </p>\n * rotation.xml rotates the target group from 0 degree to 360 degrees over 6000ms:\n * <pre>\n * &lt;objectAnimator\n *     android:duration=&quot;6000&quot;\n *     android:propertyName=&quot;rotation&quot;\n *     android:valueFrom=&quot;0&quot;\n *     android:valueTo=&quot;360&quot; /&gt;\n * </pre>\n *\n * path_morph.xml morphs the path from one shape into the other. Note that the paths must be\n * compatible for morphing. Specifically, the paths must have the same commands, in the same order,\n * and must have the same number of parameters for each command. It is recommended to store path\n * strings as string resources for reuse.\n * <pre>\n * &lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;\n *     &lt;objectAnimator\n *         android:duration=&quot;3000&quot;\n *         android:propertyName=&quot;pathData&quot;\n *         android:valueFrom=&quot;M300,70 l 0,-70 70,70 0,0 -70,70z&quot;\n *         android:valueTo=&quot;M300,70 l 0,-70 70,0  0,140 -70,0 z&quot;\n *         android:valueType=&quot;pathType&quot;/&gt;\n * &lt;/set&gt;\n * </pre>\n * </ul>\n * <a name=\"OneXML\"></a>\n * <h3>Define an AnimatedVectorDrawable all in one XML file</h3>\n * <p>\n * Since the AAPT tool supports a new format that bundles several related XML files together, we can\n * merge the XML files from the previous examples into one XML file:\n * </p>\n * <pre>\n * &lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n *                  xmlns:aapt=&quothttp://schemas.android.com/aapt&quot; &gt;\n *     &lt;aapt:attr name=\"android:drawable\"&gt;\n *         &lt;vector\n *             android:height=&quot;64dp&quot;\n *             android:width=&quot;64dp&quot;\n *             android:viewportHeight=&quot;600&quot;\n *             android:viewportWidth=&quot;600&quot; &gt;\n *             &lt;group\n *                 android:name=&quot;rotationGroup&quot;\n *                 android:pivotX=&quot;300.0&quot;\n *                 android:pivotY=&quot;300.0&quot;\n *                 android:rotation=&quot;45.0&quot; &gt;\n *                 &lt;path\n *                     android:name=&quot;v&quot;\n *                     android:fillColor=&quot;#000000&quot;\n *                     android:pathData=&quot;M300,70 l 0,-70 70,70 0,0 -70,70z&quot; /&gt;\n *             &lt;/group&gt;\n *         &lt;/vector&gt;\n *     &lt;/aapt:attr&gt;\n *\n *     &lt;target android:name=&quot;rotationGroup&quot;&gt; *\n *         &lt;aapt:attr name=\"android:animation\"&gt;\n *             &lt;objectAnimator\n *             android:duration=&quot;6000&quot;\n *             android:propertyName=&quot;rotation&quot;\n *             android:valueFrom=&quot;0&quot;\n *             android:valueTo=&quot;360&quot; /&gt;\n *         &lt;/aapt:attr&gt;\n *     &lt;/target&gt;\n *\n *     &lt;target android:name=&quot;v&quot; &gt;\n *         &lt;aapt:attr name=\"android:animation\"&gt;\n *             &lt;set&gt;\n *                 &lt;objectAnimator\n *                     android:duration=&quot;3000&quot;\n *                     android:propertyName=&quot;pathData&quot;\n *                     android:valueFrom=&quot;M300,70 l 0,-70 70,70 0,0 -70,70z&quot;\n *                     android:valueTo=&quot;M300,70 l 0,-70 70,0  0,140 -70,0 z&quot;\n *                     android:valueType=&quot;pathType&quot;/&gt;\n *             &lt;/set&gt;\n *         &lt;/aapt:attr&gt;\n *      &lt;/target&gt;\n * &lt;/animated-vector&gt;\n * </pre>\n *\n * @attr ref android.R.styleable#AnimatedVectorDrawable_drawable\n * @attr ref android.R.styleable#AnimatedVectorDrawableTarget_name\n * @attr ref android.R.styleable#AnimatedVectorDrawableTarget_animation\n ",
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATED_VECTOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TARGET",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG_ANIMATION_VECTOR_DRAWABLE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorSet",
    "type" : "VectorDrawableAnimator",
    "comment" : " Local, mutable animator set. ",
    "links" : [ ]
  }, {
    "name" : "mRes",
    "type" : "Resources",
    "comment" : "\n     * The resources against which this drawable was created. Used to attempt\n     * to inflate animators if applyTheme() doesn't get called.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimatedVectorState",
    "type" : "AnimatedVectorDrawableState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatorSetFromXml",
    "type" : "AnimatorSet",
    "comment" : " The animator set that is parsed from the xml. ",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationCallbacks",
    "type" : "ArrayList<Animatable2.AnimationCallback>",
    "comment" : " Use a internal AnimatorListener to support callbacks during animation events. ",
    "links" : [ ]
  }, {
    "name" : "mAnimatorListener",
    "type" : "AnimatorListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean shouldIgnoreInvalidAnimation()",
    "returnType" : "boolean",
    "comment" : "\n     * In order to avoid breaking old apps, we only throw exception on invalid VectorDrawable\n     * animations for apps targeting N and later. For older apps, we ignore (i.e. quietly skip)\n     * these animations.\n     *\n     * @return whether invalid animations for vector drawable should be ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draws the AnimatedVectorDrawable into the given canvas.\n     * <p>\n     * <strong>Note:</strong> Calling this method with a software canvas when the\n     * AnimatedVectorDrawable is being animated on RenderThread (for API 25 and later) may yield\n     * outdated result, as the UI thread is not guaranteed to be in sync with RenderThread on\n     * VectorDrawable's property changes during RenderThread animations.\n     * </p>\n     *\n     * @param canvas The canvas to draw into\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "\n     * For API 25 and later, AnimatedVectorDrawable runs on RenderThread. Therefore, when the\n     * root alpha is being animated, this getter does not guarantee to return an up-to-date alpha\n     * value.\n     *\n     * @return the containing vector drawable's root alpha value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources res, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void updateAnimatorProperty(Animator animator, String targetName, VectorDrawable vectorDrawable, boolean ignoreInvalidAnim)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean containsSameValueType(PropertyValuesHolder holder, Property property)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forceAnimationOnUI()",
    "returnType" : "void",
    "comment" : "\n     * Force to animate on UI thread.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void fallbackOntoUI()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the AnimatedVectorDrawable to the start state as specified in the animators.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureAnimatorSet()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reverse()",
    "returnType" : "void",
    "comment" : "\n     * Reverses ongoing animations or starts pending animations in reverse.\n     * <p>\n     * NOTE: Only works if all animations support reverse. Otherwise, this will\n     * do nothing.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canReverse()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerAnimationCallback(@NonNull AnimationCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void removeAnimatorSetListener()",
    "returnType" : "void",
    "comment" : " A helper function to clean up the animator listener in the mAnimatorSet.",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterAnimationCallback(@NonNull AnimationCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAnimationCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateAnimatorSet()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetVectorDrawableTarget(long animatorPtr, long vectorDrawablePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nAddAnimator(long setPtr, long propertyValuesHolder, long nativeInterpolator, long startDelay, long duration, int repeatCount, int repeatMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetPropertyHolderData(long nativePtr, float[] data, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetPropertyHolderData(long nativePtr, int[] data, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nStart(long animatorSetPtr, VectorDrawableAnimatorRT set, int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nReverse(long animatorSetPtr, VectorDrawableAnimatorRT set, int id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateGroupPropertyHolder(long nativePtr, int propertyId, float startValue, float endValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreatePathDataPropertyHolder(long nativePtr, long startValuePtr, long endValuePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreatePathColorPropertyHolder(long nativePtr, int propertyId, int startValue, int endValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreatePathPropertyHolder(long nativePtr, int propertyId, float startValue, float endValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateRootAlphaPropertyHolder(long nativePtr, float startValue, float endValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nEnd(long animatorSetPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nReset(long animatorSetPtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOGTAG", "ANIMATED_VECTOR", "TARGET", "DBG_ANIMATION_VECTOR_DRAWABLE", "mAnimatorSet", "mRes", "mAnimatedVectorState", "mAnimatorSetFromXml", "mMutated", "mAnimationCallbacks", "mAnimatorListener", "mCallback" ],
  "methodNames" : [ "public Drawable mutate()", "public void clearMutated()", "private static boolean shouldIgnoreInvalidAnimation()", "public ConstantState getConstantState()", "public int getChangingConfigurations()", "public void draw(Canvas canvas)", "protected void onBoundsChange(Rect bounds)", "protected boolean onStateChange(int[] state)", "protected boolean onLevelChange(int level)", "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)", "public int getAlpha()", "public void setAlpha(int alpha)", "public void setColorFilter(ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public void setTintList(ColorStateList tint)", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public boolean setVisible(boolean visible, boolean restart)", "public boolean isStateful()", "public int getOpacity()", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public void getOutline(@NonNull Outline outline)", "public Insets getOpticalInsets()", "public void inflate(Resources res, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private static void updateAnimatorProperty(Animator animator, String targetName, VectorDrawable vectorDrawable, boolean ignoreInvalidAnim)", "private static boolean containsSameValueType(PropertyValuesHolder holder, Property property)", "public void forceAnimationOnUI()", "private void fallbackOntoUI()", "public boolean canApplyTheme()", "public void applyTheme(Theme t)", "public boolean isRunning()", "public void reset()", "public void start()", "private void ensureAnimatorSet()", "public void stop()", "public void reverse()", "public boolean canReverse()", "public void registerAnimationCallback(@NonNull AnimationCallback callback)", "private void removeAnimatorSetListener()", "public boolean unregisterAnimationCallback(@NonNull AnimationCallback callback)", "public void clearAnimationCallbacks()", "private static native long nCreateAnimatorSet()", "private static native void nSetVectorDrawableTarget(long animatorPtr, long vectorDrawablePtr)", "private static native void nAddAnimator(long setPtr, long propertyValuesHolder, long nativeInterpolator, long startDelay, long duration, int repeatCount, int repeatMode)", "private static native void nSetPropertyHolderData(long nativePtr, float[] data, int length)", "private static native void nSetPropertyHolderData(long nativePtr, int[] data, int length)", "private static native void nStart(long animatorSetPtr, VectorDrawableAnimatorRT set, int id)", "private static native void nReverse(long animatorSetPtr, VectorDrawableAnimatorRT set, int id)", "private static native long nCreateGroupPropertyHolder(long nativePtr, int propertyId, float startValue, float endValue)", "private static native long nCreatePathDataPropertyHolder(long nativePtr, long startValuePtr, long endValuePtr)", "private static native long nCreatePathColorPropertyHolder(long nativePtr, int propertyId, int startValue, int endValue)", "private static native long nCreatePathPropertyHolder(long nativePtr, int propertyId, float startValue, float endValue)", "private static native long nCreateRootAlphaPropertyHolder(long nativePtr, float startValue, float endValue)", "private static native void nEnd(long animatorSetPtr)", "private static native void nReset(long animatorSetPtr)" ]
}