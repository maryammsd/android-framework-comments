{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/nl80211/DeviceWiphyCapabilities.java",
  "packageName" : "android.net.wifi.nl80211",
  "className" : "DeviceWiphyCapabilities",
  "comment" : "\n * DeviceWiphyCapabilities for wificond\n *\n * Contains the WiFi physical layer attributes and capabilities of the device.\n * It is used to collect these attributes from the device driver via wificond.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m80211nSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m80211acSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m80211axSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m80211beSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelWidth160MhzSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelWidth80p80MhzSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelWidth320MhzSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxNumberTxSpatialStreams",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxNumberRxSpatialStreams",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxNumberAkms",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<DeviceWiphyCapabilities>",
    "comment" : " implement Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isWifiStandardSupported(@WifiStandard int standard)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the IEEE 802.11 standard support\n     *\n     * @param standard the IEEE 802.11 standard to check on its support.\n     *        valid values from {@link ScanResult}'s {@code WIFI_STANDARD_}\n     * @return {@code true} if supported, {@code false} otherwise.\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public void setWifiStandardSupport(@WifiStandard int standard, boolean support)",
    "returnType" : "void",
    "comment" : "\n     * Set the IEEE 802.11 standard support\n     *\n     * @param standard the IEEE 802.11 standard to set its support.\n     *        valid values from {@link ScanResult}'s {@code WIFI_STANDARD_}\n     * @param support {@code true} if supported, {@code false} otherwise.\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public boolean isChannelWidthSupported(@ChannelWidth int chWidth)",
    "returnType" : "boolean",
    "comment" : "\n     * Get the support for channel bandwidth\n     *\n     * @param chWidth valid values from {@link ScanResult}'s {@code CHANNEL_WIDTH_}\n     *\n     * @return {@code true} if supported, {@code false} otherwise.\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public void setChannelWidthSupported(@ChannelWidth int chWidth, boolean support)",
    "returnType" : "void",
    "comment" : "\n     * Set support for channel bandwidth\n     *\n     * @param chWidth valid values are {@link ScanResult#CHANNEL_WIDTH_160MHZ},\n     *        {@link ScanResult#CHANNEL_WIDTH_80MHZ_PLUS_MHZ} and\n     *        {@link ScanResult#CHANNEL_WIDTH_320MHZ}\n     * @param support {@code true} if supported, {@code false} otherwise.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.ScanResult#CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_320MHZ", "android.net.wifi.ScanResult#CHANNEL_WIDTH_160MHZ" ]
  }, {
    "name" : "public int getMaxNumberTxSpatialStreams()",
    "returnType" : "int",
    "comment" : "\n     * Get maximum number of transmit spatial streams\n     *\n     * @return number of spatial streams\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxNumberTxSpatialStreams(int streams)",
    "returnType" : "void",
    "comment" : "\n     * Set maximum number of transmit spatial streams\n     *\n     * @param streams number of spatial streams\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxNumberRxSpatialStreams()",
    "returnType" : "int",
    "comment" : "\n     * Get maximum number of receive spatial streams\n     *\n     * @return number of streams\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxNumberAkms()",
    "returnType" : "int",
    "comment" : "\n     * Get the maximum number of AKM suites supported in the connection request to the driver.\n     *\n     * @return maximum number of AKMs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxNumberAkms(int akms)",
    "returnType" : "void",
    "comment" : "\n     * Set the maximum number of AKM suites supported in the connection request to the driver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMaxNumberRxSpatialStreams(int streams)",
    "returnType" : "void",
    "comment" : "\n     * Set maximum number of receive spatial streams\n     *\n     * @param streams number of streams\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object rhs)",
    "returnType" : "boolean",
    "comment" : " override comparator ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " override hash code ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " implement Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * implement Parcelable interface\n     * |flags| is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isWifiStandardSupported(@WifiStandard int standard)", "public void setWifiStandardSupport(@WifiStandard int standard, boolean support)", "public boolean isChannelWidthSupported(@ChannelWidth int chWidth)", "public void setChannelWidthSupported(@ChannelWidth int chWidth, boolean support)", "public int getMaxNumberTxSpatialStreams()", "public void setMaxNumberTxSpatialStreams(int streams)", "public int getMaxNumberRxSpatialStreams()", "public int getMaxNumberAkms()", "public void setMaxNumberAkms(int akms)", "public void setMaxNumberRxSpatialStreams(int streams)", "public boolean equals(Object rhs)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel out, int flags)", "public String toString()" ],
  "variableNames" : [ "TAG", "m80211nSupported", "m80211acSupported", "m80211axSupported", "m80211beSupported", "mChannelWidth160MhzSupported", "mChannelWidth80p80MhzSupported", "mChannelWidth320MhzSupported", "mMaxNumberTxSpatialStreams", "mMaxNumberRxSpatialStreams", "mMaxNumberAkms", "CREATOR" ]
}