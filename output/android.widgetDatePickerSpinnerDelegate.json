{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/DatePickerSpinnerDelegate.java",
  "packageName" : "android.widget",
  "className" : "DatePickerSpinnerDelegate",
  "comment" : "\n * A delegate implementing the basic DatePicker\n ",
  "variables" : [ {
    "name" : "DATE_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_START_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_END_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CALENDAR_VIEW_SHOWN",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SPINNERS_SHOWN",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ENABLED_STATE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpinners",
    "type" : "LinearLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDaySpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMonthSpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYearSpinner",
    "type" : "NumberPicker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDaySpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMonthSpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYearSpinnerInput",
    "type" : "EditText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCalendarView",
    "type" : "CalendarView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortMonths",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDateFormat",
    "type" : "java.text.DateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumberOfMonths",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void init(int year, int monthOfYear, int dayOfMonth, DatePicker.OnDateChangedListener onDateChangedListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateDate(int year, int month, int dayOfMonth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getYear()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMonth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDayOfMonth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFirstDayOfWeek(int firstDayOfWeek)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstDayOfWeek()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinDate(long minDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Calendar getMinDate()",
    "returnType" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMaxDate(long maxDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Calendar getMaxDate()",
    "returnType" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CalendarView getCalendarView()",
    "returnType" : "CalendarView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCalendarViewShown(boolean shown)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getCalendarViewShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSpinnersShown(boolean shown)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpinnersShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState(Parcelable superState)",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setCurrentLocale(Locale locale)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current locale.\n     *\n     * @param locale The current locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean usingNumericMonths()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests whether the current locale is one where there are no real month names,\n     * such as Chinese, Japanese, or Korean locales.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Calendar getCalendarForLocale(Calendar oldCalendar, Locale locale)",
    "returnType" : "Calendar",
    "comment" : "\n     * Gets a calendar for locale bootstrapped with the value of a given calendar.\n     *\n     * @param oldCalendar The old calendar.\n     * @param locale The locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void reorderSpinners()",
    "returnType" : "void",
    "comment" : "\n     * Reorders the spinners according to the date format that is\n     * explicitly set by the user and if no such is set fall back\n     * to the current locale's default format.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean parseDate(String date, Calendar outDate)",
    "returnType" : "boolean",
    "comment" : "\n     * Parses the given <code>date</code> and in case of success sets the result\n     * to the <code>outDate</code>.\n     *\n     * @return True if the date was parsed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isNewDate(int year, int month, int dayOfMonth)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDate(int year, int month, int dayOfMonth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSpinners()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateCalendarView()",
    "returnType" : "void",
    "comment" : "\n     * Updates the calendar view with the current date.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void notifyDateChanged()",
    "returnType" : "void",
    "comment" : "\n     * Notifies the listener, if such, for a change in the selected date.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setImeOptions(NumberPicker spinner, int spinnerCount, int spinnerIndex)",
    "returnType" : "void",
    "comment" : "\n     * Sets the IME options for a spinner based on its ordering.\n     *\n     * @param spinner The spinner.\n     * @param spinnerCount The total spinner count.\n     * @param spinnerIndex The index of the given spinner.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setContentDescriptions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void trySetContentDescription(View root, int viewId, int contDescResId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateInputState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DATE_FORMAT", "DEFAULT_START_YEAR", "DEFAULT_END_YEAR", "DEFAULT_CALENDAR_VIEW_SHOWN", "DEFAULT_SPINNERS_SHOWN", "DEFAULT_ENABLED_STATE", "mSpinners", "mDaySpinner", "mMonthSpinner", "mYearSpinner", "mDaySpinnerInput", "mMonthSpinnerInput", "mYearSpinnerInput", "mCalendarView", "mShortMonths", "mDateFormat", "mNumberOfMonths", "mTempDate", "mMinDate", "mMaxDate", "mIsEnabled" ],
  "methodNames" : [ "public void init(int year, int monthOfYear, int dayOfMonth, DatePicker.OnDateChangedListener onDateChangedListener)", "public void updateDate(int year, int month, int dayOfMonth)", "public int getYear()", "public int getMonth()", "public int getDayOfMonth()", "public void setFirstDayOfWeek(int firstDayOfWeek)", "public int getFirstDayOfWeek()", "public void setMinDate(long minDate)", "public Calendar getMinDate()", "public void setMaxDate(long maxDate)", "public Calendar getMaxDate()", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public CalendarView getCalendarView()", "public void setCalendarViewShown(boolean shown)", "public boolean getCalendarViewShown()", "public void setSpinnersShown(boolean shown)", "public boolean getSpinnersShown()", "public void onConfigurationChanged(Configuration newConfig)", "public Parcelable onSaveInstanceState(Parcelable superState)", "public void onRestoreInstanceState(Parcelable state)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "protected void setCurrentLocale(Locale locale)", "private boolean usingNumericMonths()", "private Calendar getCalendarForLocale(Calendar oldCalendar, Locale locale)", "private void reorderSpinners()", "private boolean parseDate(String date, Calendar outDate)", "private boolean isNewDate(int year, int month, int dayOfMonth)", "private void setDate(int year, int month, int dayOfMonth)", "private void updateSpinners()", "private void updateCalendarView()", "private void notifyDateChanged()", "private void setImeOptions(NumberPicker spinner, int spinnerCount, int spinnerIndex)", "private void setContentDescriptions()", "private void trySetContentDescription(View root, int viewId, int contDescResId)", "private void updateInputState()" ]
}