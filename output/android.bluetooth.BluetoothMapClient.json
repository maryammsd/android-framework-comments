{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothMapClient.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothMapClient",
  "comment" : "\n * This class provides the APIs to control the Bluetooth MAP MCE Profile.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the MAP Client profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_MESSAGE_RECEIVED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MESSAGE_SENT_SUCCESSFULLY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MESSAGE_DELIVERED_SUCCESSFULLY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MESSAGE_READ_STATUS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Action to notify read status changed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_MESSAGE_DELETED_STATUS_CHANGED",
    "type" : "String",
    "comment" : "\n     * Action to notify deleted status changed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE_HANDLE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE_TIMESTAMP",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE_READ_STATUS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SENDER_CONTACT_URI",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SENDER_CONTACT_NAME",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MESSAGE_DELETED_STATUS",
    "type" : "String",
    "comment" : "\n     * Used as a boolean extra in ACTION_MESSAGE_DELETED_STATUS_CHANGED Contains the MAP message\n     * deleted status Possible values are: true: deleted false: undeleted\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULT_CODE",
    "type" : "String",
    "comment" : "\n     * Extra used in ACTION_MESSAGE_READ_STATUS_CHANGED or ACTION_MESSAGE_DELETED_STATUS_CHANGED\n     * Possible values are: 0: failure 1: success\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : "\n     * There was an error trying to obtain the state\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELED",
    "type" : "int",
    "comment" : "\n     * Connection canceled before completion.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UPLOADING_FEATURE_BITMASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNREAD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "READ",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDELETED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DELETED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothMapClient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service. Other public functions of BluetoothMap will\n     * return default error results once close() has been called. Multiple invocations of close()\n     * are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothMapClient getService()",
    "returnType" : "IBluetoothMapClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConnected(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified Bluetooth device is connected. Returns false if not connected,\n     * or if this proxy object is not currently connected to the Map service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection. Initiation of outgoing connections is not supported for MAP server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnect.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p>The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link\n     * #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link\n     * #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean sendMessage(@NonNull BluetoothDevice device, @NonNull Collection<Uri> contacts, @NonNull String message, @Nullable PendingIntent sentIntent, @Nullable PendingIntent deliveredIntent)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a message.\n     *\n     * <p>Send an SMS message to either the contacts primary number or the telephone number\n     * specified.\n     *\n     * @param device Bluetooth device\n     * @param contacts Uri Collection of the contacts\n     * @param message Message to be sent\n     * @param sentIntent intent issued when message is sent\n     * @param deliveredIntent intent issued when message is delivered\n     * @return true if the message is enqueued, false on error\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendMessage(BluetoothDevice device, Uri[] contacts, String message, PendingIntent sentIntent, PendingIntent deliveredIntent)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a message.\n     *\n     * <p>Send an SMS message to either the contacts primary number or the telephone number\n     * specified.\n     *\n     * @param device Bluetooth device\n     * @param contacts Uri[] of the contacts\n     * @param message Message to be sent\n     * @param sentIntent intent issued when message is sent\n     * @param deliveredIntent intent issued when message is delivered\n     * @return true if the message is enqueued, false on error\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getUnreadMessages(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Get unread messages. Unread messages will be published via {@link #ACTION_MESSAGE_RECEIVED}.\n     *\n     * @param device Bluetooth device\n     * @return true if the message is enqueued, false on error\n     * @hide\n     ",
    "links" : [ "#ACTION_MESSAGE_RECEIVED" ]
  }, {
    "name" : "public boolean isUploadingSupported(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the \"Uploading\" feature bit value from the SDP record's MapSupportedFeatures field\n     * (see Bluetooth MAP 1.4 spec, page 114).\n     *\n     * @param device The Bluetooth device to get this value for.\n     * @return Returns true if the Uploading bit value in SDP record's MapSupportedFeatures field is\n     *     set. False is returned otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setMessageStatus(BluetoothDevice device, String handle, int status)",
    "returnType" : "boolean",
    "comment" : "\n     * Set message status of message on MSE\n     *\n     * <p>When read status changed, the result will be published via {@link\n     * #ACTION_MESSAGE_READ_STATUS_CHANGED} When deleted status changed, the result will be\n     * published via {@link #ACTION_MESSAGE_DELETED_STATUS_CHANGED}\n     *\n     * @param device Bluetooth device\n     * @param handle message handle\n     * @param status <code>UNREAD</code> for \"unread\", <code>READ</code> for \"read\", <code>UNDELETED\n     *     </code> for \"undeleted\", <code>DELETED</code> for \"deleted\", otherwise return error\n     * @return <code>true</code> if request has been sent, <code>false</code> on error\n     * @hide\n     ",
    "links" : [ "#ACTION_MESSAGE_READ_STATUS_CHANGED", "#ACTION_MESSAGE_DELETED_STATUS_CHANGED" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothMapClient getService()", "public BluetoothAdapter getAdapter()", "public boolean isConnected(BluetoothDevice device)", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public boolean sendMessage(@NonNull BluetoothDevice device, @NonNull Collection<Uri> contacts, @NonNull String message, @Nullable PendingIntent sentIntent, @Nullable PendingIntent deliveredIntent)", "public boolean sendMessage(BluetoothDevice device, Uri[] contacts, String message, PendingIntent sentIntent, PendingIntent deliveredIntent)", "public boolean getUnreadMessages(BluetoothDevice device)", "public boolean isUploadingSupported(BluetoothDevice device)", "public boolean setMessageStatus(BluetoothDevice device, String handle, int status)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_MESSAGE_RECEIVED", "ACTION_MESSAGE_SENT_SUCCESSFULLY", "ACTION_MESSAGE_DELIVERED_SUCCESSFULLY", "ACTION_MESSAGE_READ_STATUS_CHANGED", "ACTION_MESSAGE_DELETED_STATUS_CHANGED", "EXTRA_MESSAGE_HANDLE", "EXTRA_MESSAGE_TIMESTAMP", "EXTRA_MESSAGE_READ_STATUS", "EXTRA_SENDER_CONTACT_URI", "EXTRA_SENDER_CONTACT_NAME", "EXTRA_MESSAGE_DELETED_STATUS", "EXTRA_RESULT_CODE", "STATE_ERROR", "RESULT_FAILURE", "RESULT_SUCCESS", "RESULT_CANCELED", "UPLOADING_FEATURE_BITMASK", "UNREAD", "READ", "UNDELETED", "DELETED", "mAdapter", "mAttributionSource", "mService" ]
}