{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/KeyProtection.java",
  "packageName" : "android.security.keystore",
  "className" : "Builder",
  "comment" : "\n     * Builder of {@link KeyProtection} instances.\n     ",
  "links" : [ "android.security.keystore.KeyProtection" ],
  "variables" : [ {
    "name" : "mPurposes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityStart",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForOriginationEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyValidityForConsumptionEnd",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptionPaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSignaturePaddings",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDigests",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMgf1Digests",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockModes",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRandomizedEncryptionRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidityDurationSeconds",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserPresenceRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserAuthenticationValidWhileOnBody",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInvalidatedByBiometricEnrollment",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserConfirmationRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnlockedDeviceRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundToSecureUserId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCriticalToDeviceEncryption",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsStrongBoxBacked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxUsageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttestKeyAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRollbackResistant",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setKeyValidityStart(Date startDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time instant before which the key is not yet valid.\n         *\n         * <p>By default, the key is valid at any instant.\n         *\n         * @see #setKeyValidityEnd(Date)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setKeyValidityEnd(Date endDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time instant after which the key is no longer valid.\n         *\n         * <p>By default, the key is valid at any instant.\n         *\n         * @see #setKeyValidityStart(Date)\n         * @see #setKeyValidityForConsumptionEnd(Date)\n         * @see #setKeyValidityForOriginationEnd(Date)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setKeyValidityForOriginationEnd(Date endDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time instant after which the key is no longer valid for encryption and signing.\n         *\n         * <p>By default, the key is valid at any instant.\n         *\n         * @see #setKeyValidityForConsumptionEnd(Date)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setKeyValidityForConsumptionEnd(Date endDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the time instant after which the key is no longer valid for decryption and\n         * verification.\n         *\n         * <p>By default, the key is valid at any instant.\n         *\n         * @see #setKeyValidityForOriginationEnd(Date)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEncryptionPaddings(@KeyProperties.EncryptionPaddingEnum String... paddings)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the set of padding schemes (e.g., {@code OAEPPadding}, {@code PKCS7Padding},\n         * {@code NoPadding}) with which the key can be used when encrypting/decrypting. Attempts to\n         * use the key with any other padding scheme will be rejected.\n         *\n         * <p>This must be specified for keys which are used for encryption/decryption.\n         *\n         * <p>For RSA private keys used by TLS/SSL servers to authenticate themselves to clients it\n         * is usually necessary to authorize the use of no/any padding\n         * ({@link KeyProperties#ENCRYPTION_PADDING_NONE}) and/or PKCS#1 encryption padding\n         * ({@link KeyProperties#ENCRYPTION_PADDING_RSA_PKCS1}). This is because RSA decryption is\n         * required by some cipher suites, and some stacks request decryption using no padding\n         * whereas others request PKCS#1 padding.\n         *\n         * <p>See {@link KeyProperties}.{@code ENCRYPTION_PADDING} constants.\n         ",
    "links" : [ "android.security.keystore.KeyProperties#ENCRYPTION_PADDING_NONE", "android.security.keystore.KeyProperties", "android.security.keystore.KeyProperties#ENCRYPTION_PADDING_RSA_PKCS1" ]
  }, {
    "name" : "public Builder setSignaturePaddings(@KeyProperties.SignaturePaddingEnum String... paddings)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the set of padding schemes (e.g., {@code PSS}, {@code PKCS#1}) with which the key\n         * can be used when signing/verifying. Attempts to use the key with any other padding scheme\n         * will be rejected.\n         *\n         * <p>This must be specified for RSA keys which are used for signing/verification.\n         *\n         * <p>See {@link KeyProperties}.{@code SIGNATURE_PADDING} constants.\n         ",
    "links" : [ "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public Builder setDigests(@KeyProperties.DigestEnum String... digests)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the set of digest algorithms (e.g., {@code SHA-256}, {@code SHA-384}) with which the\n         * key can be used. Attempts to use the key with any other digest algorithm will be\n         * rejected.\n         *\n         * <p>This must be specified for signing/verification keys and RSA encryption/decryption\n         * keys used with RSA OAEP padding scheme because these operations involve a digest. For\n         * HMAC keys, the default is the digest specified in {@link Key#getAlgorithm()} (e.g.,\n         * {@code SHA-256} for key algorithm {@code HmacSHA256}). HMAC keys cannot be authorized\n         * for more than one digest.\n         *\n         * <p>For private keys used for TLS/SSL client or server authentication it is usually\n         * necessary to authorize the use of no digest ({@link KeyProperties#DIGEST_NONE}). This is\n         * because TLS/SSL stacks typically generate the necessary digest(s) themselves and then use\n         * a private key to sign it.\n         *\n         * <p>See {@link KeyProperties}.{@code DIGEST} constants.\n         ",
    "links" : [ "java.security.Key#getAlgorithm()", "android.security.keystore.KeyProperties#DIGEST_NONE", "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public Builder setMgf1Digests(@Nullable @KeyProperties.DigestEnum String... mgf1Digests)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the set of hash functions (e.g., {@code SHA-256}, {@code SHA-384}) which could be\n         * used by the mask generation function MGF1 (which is used for certain operations with\n         * the key). Attempts to use the key with any other digest for the mask generation\n         * function will be rejected.\n         *\n         * <p>This can only be specified for signing/verification keys and RSA encryption/decryption\n         * keys used with RSA OAEP padding scheme because these operations involve a mask generation\n         * function (MGF1) with a digest.\n         * The default digest for MGF1 is {@code SHA-1}, which will be specified during key import\n         * time if no digests have been explicitly provided.\n         * When using the key, the caller may not specify any digests that were not provided during\n         * key import time. The caller may specify the default digest, {@code SHA-1}, if no\n         * digests were explicitly provided during key import (but it is not necessary to do so).\n         *\n         * <p>See {@link KeyProperties}.{@code DIGEST} constants.\n         ",
    "links" : [ "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public Builder setBlockModes(@KeyProperties.BlockModeEnum String... blockModes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the set of block modes (e.g., {@code GCM}, {@code CBC}) with which the key can be\n         * used when encrypting/decrypting. Attempts to use the key with any other block modes will\n         * be rejected.\n         *\n         * <p>This must be specified for symmetric encryption/decryption keys.\n         *\n         * <p>See {@link KeyProperties}.{@code BLOCK_MODE} constants.\n         ",
    "links" : [ "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public Builder setRandomizedEncryptionRequired(boolean required)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether encryption using this key must be sufficiently randomized to produce\n         * different ciphertexts for the same plaintext every time. The formal cryptographic\n         * property being required is <em>indistinguishability under chosen-plaintext attack\n         * ({@code IND-CPA})</em>. This property is important because it mitigates several classes\n         * of weaknesses due to which ciphertext may leak information about plaintext. For example,\n         * if a given plaintext always produces the same ciphertext, an attacker may see the\n         * repeated ciphertexts and be able to deduce something about the plaintext.\n         *\n         * <p>By default, {@code IND-CPA} is required.\n         *\n         * <p>When {@code IND-CPA} is required:\n         * <ul>\n         * <li>transformation which do not offer {@code IND-CPA}, such as symmetric ciphers using\n         * {@code ECB} mode or RSA encryption without padding, are prohibited;</li>\n         * <li>in transformations which use an IV, such as symmetric ciphers in {@code GCM},\n         * {@code CBC}, and {@code CTR} block modes, caller-provided IVs are rejected when\n         * encrypting, to ensure that only random IVs are used.</li>\n         *\n         * <p>Before disabling this requirement, consider the following approaches instead:\n         * <ul>\n         * <li>If you are generating a random IV for encryption and then initializing a {@code}\n         * Cipher using the IV, the solution is to let the {@code Cipher} generate a random IV\n         * instead. This will occur if the {@code Cipher} is initialized for encryption without an\n         * IV. The IV can then be queried via {@link Cipher#getIV()}.</li>\n         * <li>If you are generating a non-random IV (e.g., an IV derived from something not fully\n         * random, such as the name of the file being encrypted, or transaction ID, or password,\n         * or a device identifier), consider changing your design to use a random IV which will then\n         * be provided in addition to the ciphertext to the entities which need to decrypt the\n         * ciphertext.</li>\n         * <li>If you are using RSA encryption without padding, consider switching to padding\n         * schemes which offer {@code IND-CPA}, such as PKCS#1 or OAEP.</li>\n         * </ul>\n         ",
    "links" : [ "javax.crypto.Cipher#getIV()" ]
  }, {
    "name" : "public Builder setUserAuthenticationRequired(boolean required)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this key is authorized to be used only if the user has been authenticated.\n         *\n         * <p>By default, the key is authorized to be used regardless of whether the user has been\n         * authenticated.\n         *\n         * <p>When user authentication is required:\n         * <ul>\n         * <li>The key can only be import if secure lock screen is set up (see\n         * {@link KeyguardManager#isDeviceSecure()}). Additionally, if the key requires that user\n         * authentication takes place for every use of the key (see\n         * {@link #setUserAuthenticationValidityDurationSeconds(int)}), at least one biometric\n         * must be enrolled (see {@link BiometricManager#canAuthenticate()}).</li>\n         * <li>The use of the key must be authorized by the user by authenticating to this Android\n         * device using a subset of their secure lock screen credentials such as\n         * password/PIN/pattern or biometric.\n         * <a href=\"{@docRoot}training/articles/keystore.html#UserAuthentication\">More\n         * information</a>.\n         * <li>The key will become <em>irreversibly invalidated</em> once the secure lock screen is\n         * disabled (reconfigured to None, Swipe or other mode which does not authenticate the user)\n         * or when the secure lock screen is forcibly reset (e.g., by a Device Administrator).\n         * Additionally, if the key requires that user authentication takes place for every use of\n         * the key, it is also irreversibly invalidated once a new biometric is enrolled or once\\\n         * no more biometrics are enrolled, unless {@link\n         * #setInvalidatedByBiometricEnrollment(boolean)} is used to allow validity after\n         * enrollment. Attempts to initialize cryptographic operations using such keys will throw\n         * {@link KeyPermanentlyInvalidatedException}.</li> </ul>\n         *\n         * <p>This authorization applies only to secret key and private key operations. Public key\n         * operations are not restricted.\n         *\n         * @see #setUserAuthenticationValidityDurationSeconds(int)\n         * @see KeyguardManager#isDeviceSecure()\n         * @see BiometricManager#canAuthenticate()\n         ",
    "links" : [ "android.hardware.biometrics.BiometricManager#canAuthenticate()", "android.security.keystore.KeyPermanentlyInvalidatedException", "#setUserAuthenticationValidityDurationSeconds(int)", "android.app.KeyguardManager#isDeviceSecure()", "#setInvalidatedByBiometricEnrollment(boolean)" ]
  }, {
    "name" : "public Builder setUserConfirmationRequired(boolean required)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this key is authorized to be used only for messages confirmed by the\n         * user.\n         *\n         * Confirmation is separate from user authentication (see\n         * {@link #setUserAuthenticationRequired(boolean)}). Keys can be created that require\n         * confirmation but not user authentication, or user authentication but not confirmation,\n         * or both. Confirmation verifies that some user with physical possession of the device has\n         * approved a displayed message. User authentication verifies that the correct user is\n         * present and has authenticated.\n         *\n         * <p>This authorization applies only to secret key and private key operations. Public key\n         * operations are not restricted.\n         *\n         * See {@link android.security.ConfirmationPrompt} class for\n         * more details about user confirmations.\n         ",
    "links" : [ "#setUserAuthenticationRequired(boolean)", "android.security.ConfirmationPrompt" ]
  }, {
    "name" : "public Builder setUserAuthenticationValidityDurationSeconds(@IntRange(from = -1) int seconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the duration of time (seconds) for which this key is authorized to be used after the\n         * user is successfully authenticated. This has effect if the key requires user\n         * authentication for its use (see {@link #setUserAuthenticationRequired(boolean)}).\n         *\n         * <p>By default, if user authentication is required, it must take place for every use of\n         * the key.\n         *\n         * <p>Cryptographic operations involving keys which require user authentication to take\n         * place for every operation can only use biometric authentication. This is achieved by\n         * initializing a cryptographic operation ({@link Signature}, {@link Cipher}, {@link Mac})\n         * with the key, wrapping it into a {@link BiometricPrompt.CryptoObject}, invoking\n         * {@code BiometricPrompt.authenticate} with {@code CryptoObject}, and proceeding with\n         * the cryptographic operation only if the authentication flow succeeds.\n         *\n         * <p>Cryptographic operations involving keys which are authorized to be used for a duration\n         * of time after a successful user authentication event can only use secure lock screen\n         * authentication. These cryptographic operations will throw\n         * {@link UserNotAuthenticatedException} during initialization if the user needs to be\n         * authenticated to proceed. This situation can be resolved by the user unlocking the secure\n         * lock screen of the Android or by going through the confirm credential flow initiated by\n         * {@link KeyguardManager#createConfirmDeviceCredentialIntent(CharSequence, CharSequence)}.\n         * Once resolved, initializing a new cryptographic operation using this key (or any other\n         * key which is authorized to be used for a fixed duration of time after user\n         * authentication) should succeed provided the user authentication flow completed\n         * successfully.\n         *\n         * @param seconds duration in seconds or {@code -1} if user authentication must take place\n         *        for every use of the key.\n         *\n         * @see #setUserAuthenticationRequired(boolean)\n         * @see BiometricPrompt\n         * @see BiometricPrompt.CryptoObject\n         * @see KeyguardManager\n         * @deprecated See {@link #setUserAuthenticationParameters(int, int)}\n         ",
    "links" : [ "BiometricPrompt.CryptoObject", "android.security.keystore.UserNotAuthenticatedException", "java.security.Signature", "javax.crypto.Mac", "android.app.KeyguardManager#createConfirmDeviceCredentialIntent(CharSequence", "#setUserAuthenticationParameters(int", "javax.crypto.Cipher", "#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "public Builder setUserAuthenticationParameters(@IntRange(from = 0) int timeout, @KeyProperties.AuthEnum int type)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the duration of time (seconds) and authorization type for which this key is\n         * authorized to be used after the user is successfully authenticated. This has effect if\n         * the key requires user authentication for its use (see\n         * {@link #setUserAuthenticationRequired(boolean)}).\n         *\n         * <p>By default, if user authentication is required, it must take place for every use of\n         * the key.\n         *\n         * <p>These cryptographic operations will throw {@link UserNotAuthenticatedException} during\n         * initialization if the user needs to be authenticated to proceed. This situation can be\n         * resolved by the user authenticating with the appropriate biometric or credential as\n         * required by the key. See {@link BiometricPrompt.Builder#setAllowedAuthenticators(int)}\n         * and {@link BiometricManager.Authenticators}.\n         *\n         * <p>Once resolved, initializing a new cryptographic operation using this key (or any other\n         * key which is authorized to be used for a fixed duration of time after user\n         * authentication) should succeed provided the user authentication flow completed\n         * successfully.\n         *\n         * @param timeout duration in seconds or {@code 0} if user authentication must take place\n         *        for every use of the key.\n         * @param type set of authentication types which can authorize use of the key. See\n         *        {@link KeyProperties}.{@code AUTH} flags.\n         *\n         * @see #setUserAuthenticationRequired(boolean)\n         * @see BiometricPrompt\n         * @see BiometricPrompt.CryptoObject\n         * @see KeyguardManager\n         ",
    "links" : [ "android.security.keystore.KeyProperties", "android.security.keystore.UserNotAuthenticatedException", "BiometricManager.Authenticators", "BiometricPrompt.Builder#setAllowedAuthenticators(int)", "#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "public Builder setUserPresenceRequired(boolean required)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether a test of user presence is required to be performed between the\n         * {@code Signature.initSign()} and {@code Signature.sign()} method calls. It requires that\n         * the KeyStore implementation have a direct way to validate the user presence for example\n         * a KeyStore hardware backed strongbox can use a button press that is observable in\n         * hardware. A test for user presence is tangential to authentication. The test can be part\n         * of an authentication step as long as this step can be validated by the hardware\n         * protecting the key and cannot be spoofed. For example, a physical button press can be\n         * used as a test of user presence if the other pins connected to the button are not able\n         * to simulate a button press. There must be no way for the primary processor to fake a\n         * button press, or that button must not be used as a test of user presence.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUserAuthenticationValidWhileOnBody(boolean remainsValid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the key will remain authorized only until the device is removed from the\n         * user's body up to the limit of the authentication validity period (see\n         * {@link #setUserAuthenticationValidityDurationSeconds} and\n         * {@link #setUserAuthenticationRequired}). Once the device has been removed from the\n         * user's body, the key will be considered unauthorized and the user will need to\n         * re-authenticate to use it. If the device does not have an on-body sensor or the key does\n         * not have an authentication validity period, this parameter has no effect.\n         * <p>\n         * Since Android 12 (API level 31), this parameter has no effect even on devices that have\n         * an on-body sensor. A future version of Android may restore enforcement of this parameter.\n         * Meanwhile, it is recommended to not use it.\n         *\n         * @param remainsValid if {@code true}, and if the device supports enforcement of this\n         * parameter, the key will be invalidated when the device is removed from the user's body or\n         * when the authentication validity expires, whichever occurs first.\n         ",
    "links" : [ "#setUserAuthenticationValidityDurationSeconds", "#setUserAuthenticationRequired" ]
  }, {
    "name" : "public Builder setInvalidatedByBiometricEnrollment(boolean invalidateKey)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this key should be invalidated on biometric enrollment.  This\n         * applies only to keys which require user authentication (see {@link\n         * #setUserAuthenticationRequired(boolean)}) and if no positive validity duration has been\n         * set (see {@link #setUserAuthenticationValidityDurationSeconds(int)}, meaning the key is\n         * valid for biometric authentication only.\n         *\n         * <p>By default, {@code invalidateKey} is {@code true}, so keys that are valid for\n         * biometric authentication only are <em>irreversibly invalidated</em> when a new\n         * biometric is enrolled, or when all existing biometrics are deleted.  That may be\n         * changed by calling this method with {@code invalidateKey} set to {@code false}.\n         *\n         * <p>Invalidating keys on enrollment of a new biometric or unenrollment of all biometrics\n         * improves security by ensuring that an unauthorized person who obtains the password can't\n         * gain the use of biometric-authenticated keys by enrolling their own biometric.  However,\n         * invalidating keys makes key-dependent operations impossible, requiring some fallback\n         * procedure to authenticate the user and set up a new key.\n         ",
    "links" : [ "#setUserAuthenticationValidityDurationSeconds(int)", "#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "public Builder setBoundToSpecificSecureUserId(long secureUserId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the secure user id that this key should be bound to.\n         *\n         * Normally an authentication-bound key is tied to the secure user id of the current user\n         * (either the root SID from GateKeeper for auth-bound keys with a timeout, or the\n         * authenticator id of the current biometric set for keys requiring explicit biometric\n         * authorization). If this parameter is set (this method returning non-zero value), the key\n         * should be tied to the specified secure user id, overriding the logic above.\n         *\n         * This is only applicable when {@link #setUserAuthenticationRequired} is set to\n         * {@code true}\n         *\n         * @see KeyProtection#getBoundToSpecificSecureUserId()\n         * @hide\n         ",
    "links" : [ "#setUserAuthenticationRequired" ]
  }, {
    "name" : "public Builder setCriticalToDeviceEncryption(boolean critical)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether this key is critical to the device encryption flow\n         *\n         * This is a special flag only available to system servers to indicate the current key\n         * is part of the device encryption flow. Setting this flag causes the key to not\n         * be cryptographically bound to the LSKF even if the key is otherwise authentication\n         * bound.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUnlockedDeviceRequired(boolean unlockedDeviceRequired)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this key is authorized to be used only while the device is unlocked.\n         * <p>\n         * The device is considered to be locked for a user when the user's apps are currently\n         * inaccessible and some form of lock screen authentication is required to regain access to\n         * them. For the full definition, see {@link KeyguardManager#isDeviceLocked()}.\n         * <p>\n         * Public key operations aren't restricted by {@code setUnlockedDeviceRequired(true)} and\n         * may be performed even while the device is locked. In Android 11 (API level 30) and lower,\n         * encryption and verification operations with symmetric keys weren't restricted either.\n         * <p>\n         * Keys that use {@code setUnlockedDeviceRequired(true)} can be imported and generated even\n         * while the device is locked, as long as the device has been unlocked at least once since\n         * the last reboot. However, such keys cannot be used (except for the unrestricted\n         * operations mentioned above) until the device is unlocked. Apps that need to encrypt data\n         * while the device is locked such that it can only be decrypted while the device is\n         * unlocked can generate a key and encrypt the data in software, import the key into\n         * Keystore using {@code setUnlockedDeviceRequired(true)}, and zeroize the original key.\n         * <p>\n         * {@code setUnlockedDeviceRequired(true)} is related to but distinct from\n         * {@link #setUserAuthenticationRequired(boolean) setUserAuthenticationRequired(true)}.\n         * {@code setUnlockedDeviceRequired(true)} requires that the device be unlocked, whereas\n         * {@code setUserAuthenticationRequired(true)} requires that a specific type of strong\n         * authentication has happened within a specific time period. They may be used together or\n         * separately; there are cases in which one requirement can be satisfied but not the other.\n         * <p>\n         * <b>Warning:</b> Be careful using {@code setUnlockedDeviceRequired(true)} on Android 14\n         * (API level 34) and lower, since the following bugs existed in Android 12 through 14:\n         * <ul>\n         *   <li>When the user didn't have a secure lock screen, unlocked-device-required keys\n         *   couldn't be generated, imported, or used.</li>\n         *   <li>When the user's secure lock screen was removed, all of that user's\n         *   unlocked-device-required keys were automatically deleted.</li>\n         *   <li>Unlocking the device with a non-strong biometric, such as face on many devices,\n         *   didn't re-authorize the use of unlocked-device-required keys.</li>\n         *   <li>Unlocking the device with a biometric didn't re-authorize the use of\n         *   unlocked-device-required keys in profiles that share their parent user's lock.</li>\n         * </ul>\n         * These issues are fixed in Android 15, so apps can avoid them by using\n         * {@code setUnlockedDeviceRequired(true)} only on Android 15 and higher.\n         * Apps that use both {@code setUnlockedDeviceRequired(true)} and\n         * {@link #setUserAuthenticationRequired(boolean) setUserAuthenticationRequired(true)}\n         * are unaffected by the first two issues, since the first two issues describe expected\n         * behavior for {@code setUserAuthenticationRequired(true)}.\n         ",
    "links" : [ "android.app.KeyguardManager#isDeviceLocked()", "#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "public Builder setIsStrongBoxBacked(boolean isStrongBoxBacked)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether this key should be protected by a StrongBox security chip.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMaxUsageCount(int maxUsageCount)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum number of times the key is allowed to be used. After every use of the\n         * key, the use counter will decrease. This authorization applies only to secret key and\n         * private key operations. Public key operations are not restricted. For example, after\n         * successfully encrypting and decrypting data using methods such as\n         * {@link Cipher#doFinal()}, the use counter of the secret key will decrease. After\n         * successfully signing data using methods such as {@link Signature#sign()}, the use\n         * counter of the private key will decrease.\n         *\n         * When the use counter is depleted, the key will be marked for deletion by Android\n         * Keystore and any subsequent attempt to use the key will throw\n         * {@link KeyPermanentlyInvalidatedException}. There is no key to be loaded from the\n         * Android Keystore once the exhausted key is permanently deleted, as if the key never\n         * existed before.\n         *\n         * <p>By default, there is no restriction on the usage of key.\n         *\n         * <p>Some secure hardware may not support this feature at all, in which case it will\n         * be enforced in software, some secure hardware may support it but only with\n         * maxUsageCount = 1, and some secure hardware may support it with larger value\n         * of maxUsageCount.\n         *\n         * <p>The PackageManger feature flags:\n         * {@link android.content.pm.PackageManager#FEATURE_KEYSTORE_SINGLE_USE_KEY} and\n         * {@link android.content.pm.PackageManager#FEATURE_KEYSTORE_LIMITED_USE_KEY} can be used\n         * to check whether the secure hardware cannot enforce this feature, can only enforce it\n         * with maxUsageCount = 1, or can enforce it with larger value of maxUsageCount.\n         *\n         * @param maxUsageCount maximum number of times the key is allowed to be used or\n         *        {@link KeyProperties#UNRESTRICTED_USAGE_COUNT} if there is no restriction on the\n         *        usage.\n         ",
    "links" : [ "android.security.keystore.KeyPermanentlyInvalidatedException", "android.content.pm.PackageManager#FEATURE_KEYSTORE_SINGLE_USE_KEY", "javax.crypto.Cipher#doFinal()", "java.security.Signature#sign()", "android.content.pm.PackageManager#FEATURE_KEYSTORE_LIMITED_USE_KEY", "android.security.keystore.KeyProperties#UNRESTRICTED_USAGE_COUNT" ]
  }, {
    "name" : "public Builder setRollbackResistant(boolean rollbackResistant)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the key should be rollback-resistant, meaning that when deleted it is\n         * guaranteed to be permanently deleted and unusable.  Not all implementations support\n         * rollback-resistant keys.  This method is hidden because implementations only support a\n         * limited number of rollback-resistant keys; currently the available space is reserved for\n         * critical system keys.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public KeyProtection build()",
    "returnType" : "KeyProtection",
    "comment" : "\n         * Builds an instance of {@link KeyProtection}.\n         *\n         * @throws IllegalArgumentException if a required field is missing\n         ",
    "links" : [ "android.security.keystore.KeyProtection" ]
  } ],
  "methodNames" : [ "public Builder setKeyValidityStart(Date startDate)", "public Builder setKeyValidityEnd(Date endDate)", "public Builder setKeyValidityForOriginationEnd(Date endDate)", "public Builder setKeyValidityForConsumptionEnd(Date endDate)", "public Builder setEncryptionPaddings(@KeyProperties.EncryptionPaddingEnum String... paddings)", "public Builder setSignaturePaddings(@KeyProperties.SignaturePaddingEnum String... paddings)", "public Builder setDigests(@KeyProperties.DigestEnum String... digests)", "public Builder setMgf1Digests(@Nullable @KeyProperties.DigestEnum String... mgf1Digests)", "public Builder setBlockModes(@KeyProperties.BlockModeEnum String... blockModes)", "public Builder setRandomizedEncryptionRequired(boolean required)", "public Builder setUserAuthenticationRequired(boolean required)", "public Builder setUserConfirmationRequired(boolean required)", "public Builder setUserAuthenticationValidityDurationSeconds(@IntRange(from = -1) int seconds)", "public Builder setUserAuthenticationParameters(@IntRange(from = 0) int timeout, @KeyProperties.AuthEnum int type)", "public Builder setUserPresenceRequired(boolean required)", "public Builder setUserAuthenticationValidWhileOnBody(boolean remainsValid)", "public Builder setInvalidatedByBiometricEnrollment(boolean invalidateKey)", "public Builder setBoundToSpecificSecureUserId(long secureUserId)", "public Builder setCriticalToDeviceEncryption(boolean critical)", "public Builder setUnlockedDeviceRequired(boolean unlockedDeviceRequired)", "public Builder setIsStrongBoxBacked(boolean isStrongBoxBacked)", "public Builder setMaxUsageCount(int maxUsageCount)", "public Builder setRollbackResistant(boolean rollbackResistant)", "public KeyProtection build()" ],
  "variableNames" : [ "mPurposes", "mKeyValidityStart", "mKeyValidityForOriginationEnd", "mKeyValidityForConsumptionEnd", "mEncryptionPaddings", "mSignaturePaddings", "mDigests", "mMgf1Digests", "mBlockModes", "mRandomizedEncryptionRequired", "mUserAuthenticationRequired", "mUserAuthenticationValidityDurationSeconds", "mUserAuthenticationType", "mUserPresenceRequired", "mUserAuthenticationValidWhileOnBody", "mInvalidatedByBiometricEnrollment", "mUserConfirmationRequired", "mUnlockedDeviceRequired", "mBoundToSecureUserId", "mCriticalToDeviceEncryption", "mIsStrongBoxBacked", "mMaxUsageCount", "mAttestKeyAlias", "mRollbackResistant" ]
}