{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/params/BlackLevelPattern.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "BlackLevelPattern",
  "comment" : "\n * Immutable class to store a 4-element vector of integers corresponding to a 2x2 pattern\n * of color channel offsets used for the black level offsets of each color channel.\n *\n * For a camera device with\n * {@link android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME\n * MONOCHROME} capability, all 4 elements of the pattern will have the same value.\n ",
  "variables" : [ {
    "name" : "COUNT",
    "type" : "int",
    "comment" : "\n     * The number of offsets in this vector.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCfaOffsets",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOffsetForIndex(int column, int row)",
    "returnType" : "int",
    "comment" : "\n     * Return the color channel offset for a given index into the array of raw pixel values.\n     *\n     * @param column the column index in the the raw pixel array.\n     * @param row the row index in the raw pixel array.\n     * @return a color channel offset.\n     *\n     * @throws IllegalArgumentException if a column or row given is negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyTo(int[] destination, int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy the ColorChannel offsets into the destination vector.\n     *\n     * <p>Offsets are given in row-column scan order for a given 2x2 color pattern.</p>\n     *\n     * @param destination an array big enough to hold at least {@value #COUNT} elements after the\n     *          {@code offset}\n     * @param offset a non-negative offset into the array\n     *\n     * @throws IllegalArgumentException if the offset is invalid.\n     * @throws ArrayIndexOutOfBoundsException if the destination vector is too small.\n     * @throws NullPointerException if the destination is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this {@link BlackLevelPattern} is equal to another {@link BlackLevelPattern}.\n     *\n     * <p>Two vectors are only equal if and only if each of the respective elements is equal.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "BlackLevelPattern", "BlackLevelPattern" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return this {@link BlackLevelPattern} as a string representation.\n     *\n     * <p> {@code \"BlackLevelPattern([%d, %d], [%d, %d])\"}, where each {@code %d} represents one\n     * black level offset of a color channel. The values are in the same order as channels listed\n     * for the CFA layout key (see\n     * {@link android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT}).\n     * </p>\n     *\n     * <p>A {@link\n     * android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME\n     * MONOCHROME} camera only has one channel. As a result, the returned string will contain 4\n     * identical values.\n     * </p>\n     *\n     * @return string representation of {@link BlackLevelPattern}\n     *\n     * @see android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT\n     ",
    "links" : [ "BlackLevelPattern", "android.hardware.camera2.CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "BlackLevelPattern" ]
  } ],
  "variableNames" : [ "COUNT", "mCfaOffsets" ],
  "methodNames" : [ "public int getOffsetForIndex(int column, int row)", "public void copyTo(int[] destination, int offset)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()" ]
}