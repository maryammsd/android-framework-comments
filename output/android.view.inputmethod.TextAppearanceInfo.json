{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/TextAppearanceInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "TextAppearanceInfo",
  "comment" : "\n * Information about text appearance in an editor, passed through\n * {@link CursorAnchorInfo} for use by {@link InputMethodService}.\n * @see TextView\n * @see Paint\n * @see CursorAnchorInfo.Builder#setTextAppearanceInfo(TextAppearanceInfo)\n * @see CursorAnchorInfo#getTextAppearanceInfo()\n ",
  "links" : [ "android.inputmethodservice.InputMethodService", "android.view.inputmethod.CursorAnchorInfo" ],
  "variables" : [ {
    "name" : "mTextSize",
    "type" : "float",
    "comment" : "\n     * The text size (in pixels) for current editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTextLocales",
    "type" : "LocaleList",
    "comment" : "\n     * The {@link LocaleList} of the text.\n     ",
    "links" : [ "android.os.LocaleList" ]
  }, {
    "name" : "mSystemFontFamilyName",
    "type" : "String",
    "comment" : "\n     * The font family name if the {@link Typeface} of the text is created from a system font\n     * family, otherwise this value should be null.\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "mTextFontWeight",
    "type" : "int",
    "comment" : "\n     * The weight of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTextStyle",
    "type" : "int",
    "comment" : "\n     * The style (normal, bold, italic, bold|italic) of the text, see {@link Typeface}.\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "mAllCaps",
    "type" : "boolean",
    "comment" : "\n     * Whether the transformation method applied to the current editor is set to all caps.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShadowDx",
    "type" : "float",
    "comment" : "\n     * The horizontal offset (in pixels) of the text shadow.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShadowDy",
    "type" : "float",
    "comment" : "\n     * The vertical offset (in pixels) of the text shadow.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShadowRadius",
    "type" : "float",
    "comment" : "\n     * The blur radius (in pixels) of the text shadow.\n     ",
    "links" : [ ]
  }, {
    "name" : "mShadowColor",
    "type" : "int",
    "comment" : "\n     * The shadow color of the text shadow.\n     ",
    "links" : [ ]
  }, {
    "name" : "mElegantTextHeight",
    "type" : "boolean",
    "comment" : "\n     * The elegant text height, especially for less compacted complex script text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFallbackLineSpacing",
    "type" : "boolean",
    "comment" : "\n     * Whether to expand linespacing based on fallback fonts.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLetterSpacing",
    "type" : "float",
    "comment" : "\n     * The text letter-spacing (in ems), which determines the spacing between characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFontFeatureSettings",
    "type" : "String",
    "comment" : "\n     * The font feature settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFontVariationSettings",
    "type" : "String",
    "comment" : "\n     * The font variation settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLineBreakStyle",
    "type" : "int",
    "comment" : "\n     * The line-break strategies for text wrapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLineBreakWordStyle",
    "type" : "int",
    "comment" : "\n     * The line-break word strategies for text wrapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTextScaleX",
    "type" : "float",
    "comment" : "\n     * The extent by which text should be stretched horizontally. Returns 1.0 if not specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHighlightTextColor",
    "type" : "int",
    "comment" : "\n     * The color of the text selection highlight.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTextColor",
    "type" : "int",
    "comment" : "\n     * The current text color of the editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHintTextColor",
    "type" : "int",
    "comment" : "\n     *  The current color of the hint text.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkTextColor",
    "type" : "int",
    "comment" : "\n     * The text color used to paint the links in the editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<TextAppearanceInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TextAppearanceInfo createFromTextView(@NonNull TextView textView)",
    "returnType" : "TextAppearanceInfo",
    "comment" : "\n     * Creates a new instance of {@link TextAppearanceInfo} by extracting text appearance from the\n     * character before cursor in the target {@link TextView}.\n     * @param textView the target {@link TextView}.\n     * @return the new instance of {@link TextAppearanceInfo}.\n     * @hide\n     ",
    "links" : [ "android.widget.TextView", "android.view.inputmethod.TextAppearanceInfo" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getTextSize()",
    "returnType" : "float",
    "comment" : "\n     * Returns the text size (in pixels) for current editor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LocaleList getTextLocales()",
    "returnType" : "LocaleList",
    "comment" : "\n     * Returns the {@link LocaleList} of the text.\n     ",
    "links" : [ "android.os.LocaleList" ]
  }, {
    "name" : "public String getSystemFontFamilyName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the font family name if the {@link Typeface} of the text is created from a\n     * system font family. Returns null if no {@link Typeface} is specified, or it is not created\n     * from a system font family.\n     *\n     * @see Typeface#getSystemFontFamilyName()\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "public int getTextFontWeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the weight of the text, or {@code FontStyle#FONT_WEIGHT_UNSPECIFIED}\n     * when no {@link Typeface} is specified.\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "public int getTextStyle()",
    "returnType" : "int",
    "comment" : "\n     * Returns the style (normal, bold, italic, bold|italic) of the text. Returns\n     * {@link Typeface#NORMAL} when no {@link Typeface} is specified.\n     *\n     * @see Typeface\n     ",
    "links" : [ "android.graphics.Typeface", "android.graphics.Typeface#NORMAL" ]
  }, {
    "name" : "public boolean isAllCaps()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the transformation method applied to the current editor is set to all caps.\n     *\n     * @see TextView#setAllCaps(boolean)\n     * @see TextView#setTransformationMethod(TransformationMethod)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getShadowDx()",
    "returnType" : "float",
    "comment" : "\n     * Returns the horizontal offset (in pixels) of the text shadow.\n     *\n     * @see Paint#setShadowLayer(float, float, float, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getShadowDy()",
    "returnType" : "float",
    "comment" : "\n     * Returns the vertical offset (in pixels) of the text shadow.\n     *\n     * @see Paint#setShadowLayer(float, float, float, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getShadowRadius()",
    "returnType" : "float",
    "comment" : "\n     * Returns the blur radius (in pixels) of the text shadow.\n     *\n     * @see Paint#setShadowLayer(float, float, float, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getShadowColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the color of the text shadow.\n     *\n     * @see Paint#setShadowLayer(float, float, float, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isElegantTextHeight()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the elegant height metrics flag is set. This setting selects font\n     * variants that have not been compacted to fit Latin-based vertical metrics, and also increases\n     * top and bottom bounds to provide more space.\n     *\n     * @see Paint#isElegantTextHeight()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFallbackLineSpacing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether to expand linespacing based on fallback fonts.\n     *\n     * @see TextView#setFallbackLineSpacing(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getLetterSpacing()",
    "returnType" : "float",
    "comment" : "\n     * Returns the text letter-spacing, which determines the spacing between characters.\n     * The value is in 'EM' units. Normally, this value is 0.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFontFeatureSettings()",
    "returnType" : "String",
    "comment" : "\n     * Returns the font feature settings. Returns null if not specified.\n     *\n     * @see Paint#getFontFeatureSettings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFontVariationSettings()",
    "returnType" : "String",
    "comment" : "\n     * Returns the font variation settings. Returns null if no variation is specified.\n     *\n     * @see Paint#getFontVariationSettings()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineBreakStyle()",
    "returnType" : "int",
    "comment" : "\n     * Returns the line-break strategies for text wrapping.\n     *\n     * @see TextView#setLineBreakStyle(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineBreakWordStyle()",
    "returnType" : "int",
    "comment" : "\n     * Returns the line-break word strategies for text wrapping.\n     *\n     * @see TextView#setLineBreakWordStyle(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTextScaleX()",
    "returnType" : "float",
    "comment" : "\n     * Returns the extent by which text should be stretched horizontally. Returns 1.0 if not\n     * specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHighlightTextColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the color of the text selection highlight.\n     *\n     * @see TextView#getHighlightColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTextColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current text color of the editor.\n     *\n     * @see TextView#getCurrentTextColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHintTextColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current color of the hint text.\n     *\n     * @see TextView#getCurrentHintTextColor()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkTextColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the text color used to paint the links in the editor.\n     *\n     * @see TextView#getLinkTextColors()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TextAppearanceInfo createFromTextView(@NonNull TextView textView)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public float getTextSize()", "public LocaleList getTextLocales()", "public String getSystemFontFamilyName()", "public int getTextFontWeight()", "public int getTextStyle()", "public boolean isAllCaps()", "public float getShadowDx()", "public float getShadowDy()", "public float getShadowRadius()", "public int getShadowColor()", "public boolean isElegantTextHeight()", "public boolean isFallbackLineSpacing()", "public float getLetterSpacing()", "public String getFontFeatureSettings()", "public String getFontVariationSettings()", "public int getLineBreakStyle()", "public int getLineBreakWordStyle()", "public float getTextScaleX()", "public int getHighlightTextColor()", "public int getTextColor()", "public int getHintTextColor()", "public int getLinkTextColor()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "mTextSize", "mTextLocales", "mSystemFontFamilyName", "mTextFontWeight", "mTextStyle", "mAllCaps", "mShadowDx", "mShadowDy", "mShadowRadius", "mShadowColor", "mElegantTextHeight", "mFallbackLineSpacing", "mLetterSpacing", "mFontFeatureSettings", "mFontVariationSettings", "mLineBreakStyle", "mLineBreakWordStyle", "mTextScaleX", "mHighlightTextColor", "mTextColor", "mHintTextColor", "mLinkTextColor", "CREATOR" ]
}