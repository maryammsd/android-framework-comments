{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ForkJoinPool.java",
  "packageName" : "java.util.concurrent",
  "className" : "WorkQueue",
  "comment" : "\n     * Queues supporting work-stealing as well as external task\n     * submission. See above for descriptions and algorithms.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "phase",
    "type" : "int",
    "comment" : " versioned, negative if inactive",
    "links" : [ ]
  }, {
    "name" : "stackPred",
    "type" : "int",
    "comment" : " pool stack (ctl) predecessor link",
    "links" : [ ]
  }, {
    "name" : "config",
    "type" : "int",
    "comment" : " index, mode, ORed with SRC after init",
    "links" : [ ]
  }, {
    "name" : "base",
    "type" : "int",
    "comment" : " index of next slot for poll",
    "links" : [ ]
  }, {
    "name" : "array",
    "type" : "ForkJoinTask<?>[]",
    "comment" : " the queued tasks; power of 2 size",
    "links" : [ ]
  }, {
    "name" : "owner",
    "type" : "ForkJoinWorkerThread",
    "comment" : " owning thread or null if shared",
    "links" : [ ]
  }, {
    "name" : "top",
    "type" : "int",
    "comment" : " segregate fields frequently updated but not read by scans or steals",
    "links" : [ ]
  }, {
    "name" : "source",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nsteals",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "QA",
    "type" : "VarHandle",
    "comment" : " for array slots",
    "links" : [ ]
  }, {
    "name" : "SOURCE",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE",
    "type" : "VarHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INNOCUOUS_ACC",
    "type" : "AccessControlContext",
    "comment" : " AccessControlContext for innocuous workers, created on 1st use. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static final ForkJoinTask<?> getSlot(ForkJoinTask<?>[] a, int i)",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final ForkJoinTask<?> getAndClearSlot(ForkJoinTask<?>[] a, int i)",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final void setSlotVolatile(ForkJoinTask<?>[] a, int i, ForkJoinTask<?> v)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final boolean casSlotToNull(ForkJoinTask<?>[] a, int i, ForkJoinTask<?> c)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean tryLock()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void setBaseOpaque(int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getPoolIndex()",
    "returnType" : "int",
    "comment" : "\n         * Returns an exportable index (used by ForkJoinWorkerThread).\n         ",
    "links" : [ ]
  }, {
    "name" : " final int queueSize()",
    "returnType" : "int",
    "comment" : "\n         * Returns the approximate number of tasks in the queue.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n         * Provides a more conservative estimate of whether this queue\n         * has any tasks than does queueSize.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void push(ForkJoinTask<?> task, ForkJoinPool pool)",
    "returnType" : "void",
    "comment" : "\n         * Pushes a task. Call only by owner in unshared queues.\n         *\n         * @param task the task. Caller must ensure non-null.\n         * @param pool (no-op if null)\n         * @throws RejectedExecutionException if array cannot be resized\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean lockedPush(ForkJoinTask<?> task)",
    "returnType" : "boolean",
    "comment" : "\n         * Pushes task to a shared queue with lock already held, and unlocks.\n         *\n         * @return true if caller should signal work\n         ",
    "links" : [ ]
  }, {
    "name" : " final void growArray()",
    "returnType" : "void",
    "comment" : "\n         * Doubles the capacity of array. Called by owner or with lock\n         * held after pre-incrementing top, which is reverted on\n         * allocation failure.\n         ",
    "links" : [ ]
  }, {
    "name" : "private ForkJoinTask<?> pop()",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "\n         * Pops and returns task, or null if empty. Called only by owner.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean tryUnpush(ForkJoinTask<?> task)",
    "returnType" : "boolean",
    "comment" : "\n         * Pops the given task for owner only if it is at the current top.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean externalTryUnpush(ForkJoinTask<?> task)",
    "returnType" : "boolean",
    "comment" : "\n         * Locking version of tryUnpush.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean tryRemove(ForkJoinTask<?> task, boolean owned)",
    "returnType" : "boolean",
    "comment" : "\n         * Deep form of tryUnpush: Traverses from top and removes task if\n         * present, shifting others to fill gap.\n         ",
    "links" : [ ]
  }, {
    "name" : " final ForkJoinTask<?> tryPoll()",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "\n         * Tries once to poll next task in FIFO order, failing on\n         * inconsistency or contention.\n         ",
    "links" : [ ]
  }, {
    "name" : " final ForkJoinTask<?> nextLocalTask(int cfg)",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "\n         * Takes next task, if one exists, in order specified by mode.\n         ",
    "links" : [ ]
  }, {
    "name" : " final ForkJoinTask<?> nextLocalTask()",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "\n         * Takes next task, if one exists, using configured mode.\n         ",
    "links" : [ ]
  }, {
    "name" : " final ForkJoinTask<?> peek()",
    "returnType" : "ForkJoinTask<?>",
    "comment" : "\n         * Returns next task, if one exists, in order specified by mode.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void topLevelExec(ForkJoinTask<?> task, WorkQueue q)",
    "returnType" : "void",
    "comment" : "\n         * Runs the given (stolen) task if nonnull, as well as\n         * remaining local tasks and/or others available from the\n         * given queue.\n         ",
    "links" : [ ]
  }, {
    "name" : " final int helpComplete(ForkJoinTask<?> task, boolean owned, int limit)",
    "returnType" : "int",
    "comment" : "\n         * Tries to pop and run tasks within the target's computation\n         * until done, not found, or limit exceeded.\n         *\n         * @param task root of CountedCompleter computation\n         * @param owned true if owned by a ForkJoinWorkerThread\n         * @param limit max runs, or zero for no limit\n         * @return task status on exit\n         ",
    "links" : [ ]
  }, {
    "name" : " final void helpAsyncBlocker(ManagedBlocker blocker)",
    "returnType" : "void",
    "comment" : "\n         * Tries to poll and run AsynchronousCompletionTasks until\n         * none found or blocker is released.\n         *\n         * @param blocker the blocker\n         ",
    "links" : [ ]
  }, {
    "name" : " final void initializeInnocuousWorker()",
    "returnType" : "void",
    "comment" : "\n         * Initializes (upon registration) InnocuousForkJoinWorkerThreads.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean isApparentlyUnblocked()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if owned by a worker thread and not known to be blocked.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static final ForkJoinTask<?> getSlot(ForkJoinTask<?>[] a, int i)", " static final ForkJoinTask<?> getAndClearSlot(ForkJoinTask<?>[] a, int i)", " static final void setSlotVolatile(ForkJoinTask<?>[] a, int i, ForkJoinTask<?> v)", " static final boolean casSlotToNull(ForkJoinTask<?>[] a, int i, ForkJoinTask<?> c)", " final boolean tryLock()", " final void setBaseOpaque(int b)", " final int getPoolIndex()", " final int queueSize()", " final boolean isEmpty()", " final void push(ForkJoinTask<?> task, ForkJoinPool pool)", " final boolean lockedPush(ForkJoinTask<?> task)", " final void growArray()", "private ForkJoinTask<?> pop()", " final boolean tryUnpush(ForkJoinTask<?> task)", " final boolean externalTryUnpush(ForkJoinTask<?> task)", " final boolean tryRemove(ForkJoinTask<?> task, boolean owned)", " final ForkJoinTask<?> tryPoll()", " final ForkJoinTask<?> nextLocalTask(int cfg)", " final ForkJoinTask<?> nextLocalTask()", " final ForkJoinTask<?> peek()", " final void topLevelExec(ForkJoinTask<?> task, WorkQueue q)", " final int helpComplete(ForkJoinTask<?> task, boolean owned, int limit)", " final void helpAsyncBlocker(ManagedBlocker blocker)", " final void initializeInnocuousWorker()", " final boolean isApparentlyUnblocked()" ],
  "variableNames" : [ "phase", "stackPred", "config", "base", "array", "owner", "top", "source", "nsteals", "QA", "SOURCE", "BASE", "INNOCUOUS_ACC" ]
}