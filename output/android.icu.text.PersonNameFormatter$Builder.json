{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/PersonNameFormatter.java",
  "packageName" : "android.icu.text",
  "className" : "Builder",
  "comment" : "\n     * A utility class that can be used to construct a PersonNameFormatter.\n     * Use PersonNameFormatter.builder() to get a new instance.\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "locale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "Length",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usage",
    "type" : "Usage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formality",
    "type" : "Formality",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "displayOrder",
    "type" : "DisplayOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "surnameAllCaps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setLocale(Locale locale)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the locale for the formatter to be constructed.\n         * @param locale The new formatter locale.  May not be null.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLength(Length length)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the name length for the formatter to be constructed.\n         * @param length The new name length.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUsage(Usage usage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the name usage for the formatter to be constructed.\n         * @param usage The new name length.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFormality(Formality formality)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the name formality for the formatter to be constructed.\n         * @param formality The new name length.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisplayOrder(DisplayOrder order)",
    "returnType" : "Builder",
    "comment" : "\n         * Specifies the desired display order for the formatted names.  This can be either SORTING,\n         * which requests that names be formatted in a manner suitable for inclusion in a sorted list\n         * (e.g., in English, \"Smith, John\"), or DEFAULT, which gives the standard field order suitable\n         * for most contexts (e.g., in English, \"John Smith\").\n         * @param order The desired display order for formatted names.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSurnameAllCaps(boolean allCaps)",
    "returnType" : "Builder",
    "comment" : "\n         * Requests that the surname in the formatted result be rendered in ALL CAPS.  This is often done with\n         * Japanese names to highlight which name is the surname.\n         * @param allCaps If true, the surname in the formatted result will be rendered in ALL CAPS.\n         * @return This builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public PersonNameFormatter build()",
    "returnType" : "PersonNameFormatter",
    "comment" : "\n         * Returns a new PersonNameFormatter with the values that were passed to this builder.\n         * This method doesn't freeze or delete the builder; you can call build() more than once\n         * (presumably after calling the other methods to change the parameter) to create more\n         * than one PersonNameFormatter; you don't need a new Builder for each PersonNameFormatter.\n         * @return A new PersonNameFormatter.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setLocale(Locale locale)", "public Builder setLength(Length length)", "public Builder setUsage(Usage usage)", "public Builder setFormality(Formality formality)", "public Builder setDisplayOrder(DisplayOrder order)", "public Builder setSurnameAllCaps(boolean allCaps)", "public PersonNameFormatter build()" ],
  "variableNames" : [ "locale", "length", "usage", "formality", "displayOrder", "surnameAllCaps" ]
}