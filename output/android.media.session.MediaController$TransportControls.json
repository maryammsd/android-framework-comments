{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/session/MediaController.java",
  "packageName" : "android.media.session",
  "className" : "TransportControls",
  "comment" : "\n     * Interface for controlling media playback on a session. This allows an app\n     * to send media transport commands to the session.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void prepare()",
    "returnType" : "void",
    "comment" : "\n         * Request that the player prepare its playback. In other words, other sessions can continue\n         * to play during the preparation of this session. This method can be used to speed up the\n         * start of the playback. Once the preparation is done, the session will change its playback\n         * state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to\n         * start playback.\n         ",
    "links" : [ "#play", "android.media.session.PlaybackState#STATE_PAUSED" ]
  }, {
    "name" : "public void prepareFromMediaId(String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player prepare playback for a specific media id. In other words, other\n         * sessions can continue to play during the preparation of this session. This method can be\n         * used to speed up the start of the playback. Once the preparation is done, the session\n         * will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards,\n         * {@link #play} can be called to start playback. If the preparation is not needed,\n         * {@link #playFromMediaId} can be directly called without this method.\n         *\n         * @param mediaId The id of the requested media.\n         * @param extras Optional extras that can include extra information about the media item\n         *               to be prepared.\n         ",
    "links" : [ "#play", "#playFromMediaId", "android.media.session.PlaybackState#STATE_PAUSED" ]
  }, {
    "name" : "public void prepareFromSearch(String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player prepare playback for a specific search query. An empty or null\n         * query should be treated as a request to prepare any music. In other words, other sessions\n         * can continue to play during the preparation of this session. This method can be used to\n         * speed up the start of the playback. Once the preparation is done, the session will\n         * change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards,\n         * {@link #play} can be called to start playback. If the preparation is not needed,\n         * {@link #playFromSearch} can be directly called without this method.\n         *\n         * @param query The search query.\n         * @param extras Optional extras that can include extra information\n         *               about the query.\n         ",
    "links" : [ "#playFromSearch", "#play", "android.media.session.PlaybackState#STATE_PAUSED" ]
  }, {
    "name" : "public void prepareFromUri(Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player prepare playback for a specific {@link Uri}. In other words,\n         * other sessions can continue to play during the preparation of this session. This method\n         * can be used to speed up the start of the playback. Once the preparation is done, the\n         * session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards,\n         * {@link #play} can be called to start playback. If the preparation is not needed,\n         * {@link #playFromUri} can be directly called without this method.\n         *\n         * @param uri The URI of the requested media.\n         * @param extras Optional extras that can include extra information about the media item\n         *               to be prepared.\n         ",
    "links" : [ "#playFromUri", "#play", "android.net.Uri", "android.media.session.PlaybackState#STATE_PAUSED" ]
  }, {
    "name" : "public void play()",
    "returnType" : "void",
    "comment" : "\n         * Request that the player start its playback at its current position.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void playFromMediaId(String mediaId, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player start playback for a specific media id.\n         *\n         * @param mediaId The id of the requested media.\n         * @param extras Optional extras that can include extra information about the media item\n         *               to be played.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void playFromSearch(String query, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player start playback for a specific search query.\n         * An empty or null query should be treated as a request to play any\n         * music.\n         *\n         * @param query The search query.\n         * @param extras Optional extras that can include extra information\n         *               about the query.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void playFromUri(Uri uri, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * Request that the player start playback for a specific {@link Uri}.\n         *\n         * @param uri The URI of the requested media.\n         * @param extras Optional extras that can include extra information about the media item\n         *               to be played.\n         ",
    "links" : [ "android.net.Uri" ]
  }, {
    "name" : "public void skipToQueueItem(long id)",
    "returnType" : "void",
    "comment" : "\n         * Play an item with a specific id in the play queue. If you specify an\n         * id that is not in the play queue, the behavior is undefined.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void pause()",
    "returnType" : "void",
    "comment" : "\n         * Request that the player pause its playback and stay at its current\n         * position.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n         * Request that the player stop its playback; it may clear its state in\n         * whatever way is appropriate.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void seekTo(long pos)",
    "returnType" : "void",
    "comment" : "\n         * Move to a new location in the media stream.\n         *\n         * @param pos Position to move to, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void fastForward()",
    "returnType" : "void",
    "comment" : "\n         * Start fast forwarding. If playback is already fast forwarding this\n         * may increase the rate.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void skipToNext()",
    "returnType" : "void",
    "comment" : "\n         * Skip to the next item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void rewind()",
    "returnType" : "void",
    "comment" : "\n         * Start rewinding. If playback is already rewinding this may increase\n         * the rate.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void skipToPrevious()",
    "returnType" : "void",
    "comment" : "\n         * Skip to the previous item.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setRating(Rating rating)",
    "returnType" : "void",
    "comment" : "\n         * Rate the current content. This will cause the rating to be set for\n         * the current user. The Rating type must match the type returned by\n         * {@link #getRatingType()}.\n         *\n         * @param rating The rating to set for the current content\n         ",
    "links" : [ "#getRatingType()" ]
  }, {
    "name" : "public void setPlaybackSpeed(float speed)",
    "returnType" : "void",
    "comment" : "\n         * Sets the playback speed. A value of {@code 1.0f} is the default playback value,\n         * and a negative value indicates reverse playback. {@code 0.0f} is not allowed.\n         *\n         * @param speed The playback speed\n         * @throws IllegalArgumentException if the {@code speed} is equal to zero.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendCustomAction(@NonNull PlaybackState.CustomAction customAction, @Nullable Bundle args)",
    "returnType" : "void",
    "comment" : "\n         * Send a custom action back for the {@link MediaSession} to perform.\n         *\n         * @param customAction The action to perform.\n         * @param args Optional arguments to supply to the {@link MediaSession} for this\n         *             custom action.\n         ",
    "links" : [ "android.media.session.MediaSession" ]
  }, {
    "name" : "public void sendCustomAction(@NonNull String action, @Nullable Bundle args)",
    "returnType" : "void",
    "comment" : "\n         * Send the id and args from a custom action back for the {@link MediaSession} to perform.\n         *\n         * @see #sendCustomAction(PlaybackState.CustomAction action, Bundle args)\n         * @param action The action identifier of the {@link PlaybackState.CustomAction} as\n         *               specified by the {@link MediaSession}.\n         * @param args Optional arguments to supply to the {@link MediaSession} for this\n         *             custom action.\n         ",
    "links" : [ "android.media.session.MediaSession", "PlaybackState.CustomAction" ]
  } ],
  "methodNames" : [ "public void prepare()", "public void prepareFromMediaId(String mediaId, Bundle extras)", "public void prepareFromSearch(String query, Bundle extras)", "public void prepareFromUri(Uri uri, Bundle extras)", "public void play()", "public void playFromMediaId(String mediaId, Bundle extras)", "public void playFromSearch(String query, Bundle extras)", "public void playFromUri(Uri uri, Bundle extras)", "public void skipToQueueItem(long id)", "public void pause()", "public void stop()", "public void seekTo(long pos)", "public void fastForward()", "public void skipToNext()", "public void rewind()", "public void skipToPrevious()", "public void setRating(Rating rating)", "public void setPlaybackSpeed(float speed)", "public void sendCustomAction(@NonNull PlaybackState.CustomAction customAction, @Nullable Bundle args)", "public void sendCustomAction(@NonNull String action, @Nullable Bundle args)" ],
  "variableNames" : [ "TAG" ]
}