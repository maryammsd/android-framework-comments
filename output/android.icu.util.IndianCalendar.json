{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/IndianCalendar.java",
  "packageName" : "android.icu.util",
  "className" : "IndianCalendar",
  "comment" : "\n * <code>IndianCalendar</code> is a subclass of <code>GregorianCalendar</code>\n * that numbers years since the birth of the Buddha.  This is the civil calendar\n * which is accepted by government of India as Indian National Calendar. \n * The two calendars most widely used in India today are the Vikrama calendar \n * followed in North India and the Shalivahana or Saka calendar which is followed \n * in South India and Maharashtra.\n\n * A variant of the Shalivahana Calendar was reformed and standardized as the \n * Indian National calendar in 1957.\n * <p>\n * Some details of Indian National Calendar (to be implemented) :\n * The Months\n * Month          Length      Start date (Gregorian)\n * =================================================\n * 1 Chaitra      30/31          March 22*\n * 2 Vaisakha     31             April 21\n * 3 Jyaistha     31             May 22\n * 4 Asadha       31             June 22\n * 5 Sravana      31             July 23\n * 6 Bhadra       31             August 23\n * 7 Asvina       30             September 23\n * 8 Kartika      30             October 23\n * 9 Agrahayana   30             November 22\n * 10 Pausa       30             December 22\n * 11 Magha       30             January 21\n * 12 Phalguna    30             February 20\n\n * In leap years, Chaitra has 31 days and starts on March 21 instead.\n * The leap years of Gregorian calendar and Indian National Calendar are in synchornization. \n * So When its a leap year in Gregorian calendar then Chaitra has 31 days.\n *\n * The Years\n * Years are counted in the Saka Era, which starts its year 0 in 78AD (by gregorian calendar).\n * So for eg. 9th June 2006 by Gregorian Calendar, is same as 19th of Jyaistha in 1928 of Saka \n * era by Indian National Calendar.\n * <p>\n * The Indian Calendar has only one allowable era: <code>Saka Era</code>.  If the\n * calendar is not in lenient mode (see <code>setLenient</code>), dates before\n * 1/1/1 Saka Era are rejected with an <code>IllegalArgumentException</code>.\n * <p>\n * This class should not be subclassed.</p>\n * <p>\n * IndianCalendar usually should be instantiated using \n * {@link android.icu.util.Calendar#getInstance(ULocale)} passing in a <code>ULocale</code>\n * with the tag <code>\"@calendar=Indian\"</code>.</p>\n * \n * @see android.icu.util.Calendar\n * @see android.icu.util.GregorianCalendar\n ",
  "links" : [ "android.icu.util.Calendar#getInstance(ULocale)" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " jdk1.4.2 serialver",
    "links" : [ ]
  }, {
    "name" : "CHAITRA",
    "type" : "int",
    "comment" : " \n     * Constant for Chaitra, the 1st month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "VAISAKHA",
    "type" : "int",
    "comment" : " \n     * Constant for Vaisakha, the 2nd month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "JYAISTHA",
    "type" : "int",
    "comment" : " \n     * Constant for Jyaistha, the 3rd month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "ASADHA",
    "type" : "int",
    "comment" : " \n     * Constant for Asadha, the 4th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "SRAVANA",
    "type" : "int",
    "comment" : " \n     * Constant for Sravana, the 5th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "BHADRA",
    "type" : "int",
    "comment" : " \n     * Constant for Bhadra, the 6th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "ASVINA",
    "type" : "int",
    "comment" : " \n     * Constant for Asvina, the 7th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "KARTIKA",
    "type" : "int",
    "comment" : " \n     * Constant for Kartika, the 8th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "AGRAHAYANA",
    "type" : "int",
    "comment" : " \n     * Constant for Agrahayana, the 9th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "PAUSA",
    "type" : "int",
    "comment" : " \n     * Constant for Pausa, the 10th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "MAGHA",
    "type" : "int",
    "comment" : " \n     * Constant for Magha, the 11th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "PHALGUNA",
    "type" : "int",
    "comment" : " \n     * Constant for Phalguna, the 12th month of the Indian year. \n     ",
    "links" : [ ]
  }, {
    "name" : "IE",
    "type" : "int",
    "comment" : "\n     * Constant for the Indian Era.  This is the only allowable <code>ERA</code>\n     * value for the Indian calendar.\n     *\n     * @see android.icu.util.Calendar#ERA\n     ",
    "links" : [ ]
  }, {
    "name" : "INDIAN_ERA_START",
    "type" : "int",
    "comment" : " Starts in 78 AD, ",
    "links" : [ ]
  }, {
    "name" : "INDIAN_YEAR_START",
    "type" : "int",
    "comment" : " The Indian year starts 80 days later than the Gregorian year.",
    "links" : [ ]
  }, {
    "name" : "LIMITS",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected int handleGetExtendedYear()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetYearLength(int extendedYear)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetMonthLength(int extendedYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void handleComputeFields(int julianDay)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetLimit(int field, int limitType)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleComputeMonthStart(int year, int month, boolean useMonth)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private double IndianToJD(int year, int month, int date)",
    "returnType" : "double",
    "comment" : "\n     * This routine converts an Indian date to the corresponding Julian date\"\n     * @param year   The year in Saka Era according to Indian calendar.\n     * @param month  The month according to Indian calendar (between 1 to 12)\n     * @param date   The date in month \n     ",
    "links" : [ ]
  }, {
    "name" : "private double gregorianToJD(int year, int month, int date)",
    "returnType" : "double",
    "comment" : "\n     * The following function is not needed for basic calendar functioning.\n     * This routine converts a gregorian date to the corresponding Julian date\"\n     * @param year   The year in standard Gregorian calendar (AD/BC) .\n     * @param month  The month according to Gregorian calendar (between 0 to 11)\n     * @param date   The date in month \n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected int handleGetExtendedYear()", "protected int handleGetYearLength(int extendedYear)", "protected int handleGetMonthLength(int extendedYear, int month)", "protected void handleComputeFields(int julianDay)", "protected int handleGetLimit(int field, int limitType)", "protected int handleComputeMonthStart(int year, int month, boolean useMonth)", "private double IndianToJD(int year, int month, int date)", "private double gregorianToJD(int year, int month, int date)", "public String getType()" ],
  "variableNames" : [ "serialVersionUID", "CHAITRA", "VAISAKHA", "JYAISTHA", "ASADHA", "SRAVANA", "BHADRA", "ASVINA", "KARTIKA", "AGRAHAYANA", "PAUSA", "MAGHA", "PHALGUNA", "IE", "INDIAN_ERA_START", "INDIAN_YEAR_START", "LIMITS" ]
}