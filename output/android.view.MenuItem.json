{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/MenuItem.java",
  "packageName" : "android.view",
  "className" : "MenuItem",
  "comment" : "\n * Interface for direct access to a previously created menu item.\n * <p>\n * An Item is returned by calling one of the {@link android.view.Menu#add}\n * methods.\n * <p>\n * For a feature set of specific menu types, see {@link Menu}.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For information about creating menus, read the\n * <a href=\"{@docRoot}guide/topics/ui/menus.html\">Menus</a> developer guide.</p>\n * </div>\n ",
  "links" : [ "android.view.Menu#add", "android.view.Menu" ],
  "variables" : [ {
    "name" : "SHOW_AS_ACTION_NEVER",
    "type" : "int",
    "comment" : " Never show this item as a button in an Action Bar. ",
    "links" : [ ]
  }, {
    "name" : "SHOW_AS_ACTION_IF_ROOM",
    "type" : "int",
    "comment" : " Show this item as a button in an Action Bar if the system decides there is room for it. ",
    "links" : [ ]
  }, {
    "name" : "SHOW_AS_ACTION_ALWAYS",
    "type" : "int",
    "comment" : "\n     * Always show this item as a button in an Action Bar.\n     * Use sparingly! If too many items are set to always show in the Action Bar it can\n     * crowd the Action Bar and degrade the user experience on devices with smaller screens.\n     * A good rule of thumb is to have no more than 2 items set to always show at a time.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_AS_ACTION_WITH_TEXT",
    "type" : "int",
    "comment" : "\n     * When this item is in the action bar, always show it with a text label even if\n     * it also has an icon specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW",
    "type" : "int",
    "comment" : "\n     * This item's action view collapses to a normal menu item.\n     * When expanded, the action view temporarily takes over\n     * a larger segment of its container.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getItemId()",
    "returnType" : "int",
    "comment" : "\n     * Return the identifier for this menu item.  The identifier can not\n     * be changed after the menu is created.\n     *\n     * @return The menu item's identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGroupId()",
    "returnType" : "int",
    "comment" : "\n     * Return the group identifier that this menu item is part of. The group\n     * identifier can not be changed after the menu is created.\n     * \n     * @return The menu item's group identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOrder()",
    "returnType" : "int",
    "comment" : "\n     * Return the category and order within the category of this item. This\n     * item will be shown before all items (within its category) that have\n     * order greater than this value.\n     * <p>\n     * An order integer contains the item's category (the upper bits of the\n     * integer; set by or/add the category with the order within the\n     * category) and the ordering of the item within that category (the\n     * lower bits). Example categories are {@link Menu#CATEGORY_SYSTEM},\n     * {@link Menu#CATEGORY_SECONDARY}, {@link Menu#CATEGORY_ALTERNATIVE},\n     * {@link Menu#CATEGORY_CONTAINER}. See {@link Menu} for a full list.\n     * \n     * @return The order of this item.\n     ",
    "links" : [ "android.view.Menu#CATEGORY_SECONDARY", "android.view.Menu#CATEGORY_SYSTEM", "android.view.Menu", "android.view.Menu#CATEGORY_CONTAINER", "android.view.Menu#CATEGORY_ALTERNATIVE" ]
  }, {
    "name" : "public MenuItem setTitle(@Nullable CharSequence title)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the title associated with this item.\n     *\n     * @param title The new text to be displayed.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setTitle(@StringRes int title)",
    "returnType" : "MenuItem",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the current title of the item.\n     *\n     * @return The title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setTitleCondensed(@Nullable CharSequence title)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the condensed title associated with this item. The condensed\n     * title is used in situations where the normal title may be too long to\n     * be displayed.\n     * \n     * @param title The new text to be displayed as the condensed title.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTitleCondensed()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the current condensed title of the item. If a condensed\n     * title was never set, it will return the normal title.\n     * \n     * @return The condensed title, if it exists.\n     *         Otherwise the normal title.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setIcon(@Nullable Drawable icon)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the icon associated with this item. This icon will not always be\n     * shown, so the title should be sufficient in describing this item. See\n     * {@link Menu} for the menu types that support icons.\n     * \n     * @param icon The new icon (as a Drawable) to be displayed.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.Menu" ]
  }, {
    "name" : "public MenuItem setIcon(@DrawableRes int iconRes)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the icon associated with this item. This icon will not always be\n     * shown, so the title should be sufficient in describing this item. See\n     * {@link Menu} for the menu types that support icons.\n     * <p>\n     * This method will set the resource ID of the icon which will be used to\n     * lazily get the Drawable when this item is being shown.\n     * \n     * @param iconRes The new icon (as a resource ID) to be displayed.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.Menu" ]
  }, {
    "name" : "public Drawable getIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Returns the icon for this item as a Drawable (getting it from resources if it hasn't been\n     * loaded before). Note that if you call {@link #setIconTintList(ColorStateList)} or\n     * {@link #setIconTintMode(PorterDuff.Mode)} on this item, and you use a custom menu presenter\n     * in your application, you have to apply the tinting explicitly on the {@link Drawable}\n     * returned by this method.\n     * \n     * @return The icon as a Drawable.\n     ",
    "links" : [ "#setIconTintList(ColorStateList)", "#setIconTintMode(PorterDuff.Mode)", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public MenuItem setIconTintList(@Nullable ColorStateList tint)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Applies a tint to this item's icon. Does not modify the\n     * current tint mode, which is {@link PorterDuff.Mode#SRC_IN} by default.\n     * <p>\n     * Subsequent calls to {@link #setIcon(Drawable)} or {@link #setIcon(int)} will\n     * automatically mutate the icon and apply the specified tint and\n     * tint mode using\n     * {@link Drawable#setTintList(ColorStateList)}.\n     *\n     * @param tint the tint to apply, may be {@code null} to clear tint\n     *\n     * @attr ref android.R.styleable#MenuItem_iconTint\n     * @see #getIconTintList()\n     * @see Drawable#setTintList(ColorStateList)\n     ",
    "links" : [ "#setIcon(int)", "#setIcon(Drawable)", "android.graphics.drawable.Drawable#setTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public ColorStateList getIconTintList()",
    "returnType" : "ColorStateList",
    "comment" : "\n     * @return the tint applied to this item's icon\n     * @attr ref android.R.styleable#MenuItem_iconTint\n     * @see #setIconTintList(ColorStateList)\n     ",
    "links" : [ ]
  }, {
    "name" : " MenuItem setIconTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setIconTintList(ColorStateList)} to this item's icon. The default mode is\n     * {@link PorterDuff.Mode#SRC_IN}.\n     *\n     * @param tintMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#MenuItem_iconTintMode\n     * @see #setIconTintList(ColorStateList)\n     * @see Drawable#setTintMode(PorterDuff.Mode)\n     * @see Drawable#setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setIconTintList(ColorStateList)", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : " MenuItem setIconTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Specifies the blending mode used to apply the tint specified by\n     * {@link #setIconTintList(ColorStateList)} to this item's icon. The default mode is\n     * {@link BlendMode#SRC_IN}.\n     *\n     * @param blendMode the blending mode used to apply the tint, may be\n     *                 {@code null} to clear tint\n     * @attr ref android.R.styleable#MenuItem_iconTintMode\n     * @see #setIconTintList(ColorStateList)\n     ",
    "links" : [ "#setIconTintList(ColorStateList)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public PorterDuff.Mode getIconTintMode()",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to this item's icon, if specified.\n     *\n     * @return the blending mode used to apply the tint to this item's icon\n     * @attr ref android.R.styleable#MenuItem_iconTintMode\n     * @see #setIconTintMode(PorterDuff.Mode)\n     * @see #setIconTintBlendMode(BlendMode)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " BlendMode getIconTintBlendMode()",
    "returnType" : "BlendMode",
    "comment" : "\n     * Returns the blending mode used to apply the tint to this item's icon, if specified.\n     *\n     * @return the blending mode used to apply the tint to this item's icon\n     * @attr ref android.R.styleable#MenuItem_iconTintMode\n     * @see #setIconTintBlendMode(BlendMode)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setIntent(@Nullable Intent intent)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the Intent associated with this item.  By default there is no\n     * Intent associated with a menu item.  If you set one, and nothing\n     * else handles the item, then the default behavior will be to call\n     * {@link android.content.Context#startActivity} with the given Intent.\n     *\n     * <p>Note that setIntent() can not be used with the versions of\n     * {@link Menu#add} that take a Runnable, because {@link Runnable#run}\n     * does not return a value so there is no way to tell if it handled the\n     * item.  In this case it is assumed that the Runnable always handles\n     * the item, and the intent will never be started.\n     *\n     * @see #getIntent\n     * @param intent The Intent to associated with the item.  This Intent\n     *               object is <em>not</em> copied, so be careful not to\n     *               modify it later.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.Menu#add", "#run", "android.content.Context#startActivity" ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Return the Intent associated with this item.  This returns a\n     * reference to the Intent which you can change as desired to modify\n     * what the Item is holding.\n     *\n     * @see #setIntent\n     * @return Returns the last value supplied to {@link #setIntent}, or\n     *         null.\n     ",
    "links" : [ "#setIntent" ]
  }, {
    "name" : "public MenuItem setShortcut(char numericChar, char alphaChar)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change both the numeric and alphabetic shortcut associated with this\n     * item. Note that the shortcut will be triggered when the key that\n     * generates the given character is pressed along with the corresponding\n     * modifier key. The default modifier is  {@link KeyEvent#META_CTRL_ON} in\n     * case nothing is specified. Also note that case is not significant and\n     * that alphabetic shortcut characters will be handled in lower case.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param numericChar The numeric shortcut key. This is the shortcut when\n     *        using a numeric (e.g., 12-key) keyboard.\n     * @param alphaChar The alphabetic shortcut key. This is the shortcut when\n     *        using a keyboard with alphabetic keys.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.KeyEvent#META_CTRL_ON", "android.view.Menu" ]
  }, {
    "name" : "public MenuItem setShortcut(char numericChar, char alphaChar, int numericModifiers, int alphaModifiers)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change both the numeric and alphabetic shortcut associated with this\n     * item. Note that the shortcut will be triggered when the key that\n     * generates the given character is pressed along with the corresponding\n     * modifier key. Also note that case is not significant and that alphabetic\n     * shortcut characters will be handled in lower case.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param numericChar The numeric shortcut key. This is the shortcut when\n     *        using a numeric (e.g., 12-key) keyboard.\n     * @param numericModifiers The numeric modifier associated with the shortcut. It should\n     *        be a combination of {@link KeyEvent#META_META_ON}, {@link KeyEvent#META_CTRL_ON},\n     *        {@link KeyEvent#META_ALT_ON}, {@link KeyEvent#META_SHIFT_ON},\n     *        {@link KeyEvent#META_SYM_ON}, {@link KeyEvent#META_FUNCTION_ON}.\n     * @param alphaChar The alphabetic shortcut key. This is the shortcut when\n     *        using a keyboard with alphabetic keys.\n     * @param alphaModifiers The alphabetic modifier associated with the shortcut. It should\n     *        be a combination of {@link KeyEvent#META_META_ON}, {@link KeyEvent#META_CTRL_ON},\n     *        {@link KeyEvent#META_ALT_ON}, {@link KeyEvent#META_SHIFT_ON},\n     *        {@link KeyEvent#META_SYM_ON}, {@link KeyEvent#META_FUNCTION_ON}.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.KeyEvent#META_META_ON", "android.view.KeyEvent#META_SYM_ON", "android.view.KeyEvent#META_FUNCTION_ON", "android.view.KeyEvent#META_CTRL_ON", "android.view.Menu", "android.view.KeyEvent#META_ALT_ON", "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "public MenuItem setNumericShortcut(char numericChar)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the numeric shortcut associated with this item.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param numericChar The numeric shortcut key.  This is the shortcut when\n     *                 using a 12-key (numeric) keyboard.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.Menu" ]
  }, {
    "name" : "public MenuItem setNumericShortcut(char numericChar, int numericModifiers)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the numeric shortcut and modifiers associated with this item.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param numericChar The numeric shortcut key.  This is the shortcut when\n     *                 using a 12-key (numeric) keyboard.\n     * @param numericModifiers The modifier associated with the shortcut. It should\n     *        be a combination of {@link KeyEvent#META_META_ON}, {@link KeyEvent#META_CTRL_ON},\n     *        {@link KeyEvent#META_ALT_ON}, {@link KeyEvent#META_SHIFT_ON},\n     *        {@link KeyEvent#META_SYM_ON}, {@link KeyEvent#META_FUNCTION_ON}.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.KeyEvent#META_META_ON", "android.view.KeyEvent#META_SYM_ON", "android.view.KeyEvent#META_FUNCTION_ON", "android.view.KeyEvent#META_CTRL_ON", "android.view.Menu", "android.view.KeyEvent#META_ALT_ON", "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "public char getNumericShortcut()",
    "returnType" : "char",
    "comment" : "\n     * Return the char for this menu item's numeric (12-key) shortcut.\n     *\n     * @return Numeric character to use as a shortcut.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNumericModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return the modifiers for this menu item's numeric (12-key) shortcut.\n     * The modifier is a combination of {@link KeyEvent#META_META_ON},\n     * {@link KeyEvent#META_CTRL_ON}, {@link KeyEvent#META_ALT_ON},\n     * {@link KeyEvent#META_SHIFT_ON}, {@link KeyEvent#META_SYM_ON},\n     * {@link KeyEvent#META_FUNCTION_ON}.\n     * For example, {@link KeyEvent#META_FUNCTION_ON}|{@link KeyEvent#META_CTRL_ON}\n     *\n     * @return Modifier associated with the numeric shortcut.\n     ",
    "links" : [ "android.view.KeyEvent#META_META_ON", "android.view.KeyEvent#META_SYM_ON", "android.view.KeyEvent#META_FUNCTION_ON", "android.view.KeyEvent#META_CTRL_ON", "android.view.KeyEvent#META_ALT_ON", "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "public MenuItem setAlphabeticShortcut(char alphaChar)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the alphabetic shortcut associated with this item. The shortcut\n     * will be triggered when the key that generates the given character is\n     * pressed along with the corresponding modifier key. The default modifier\n     * is {@link KeyEvent#META_CTRL_ON} in case nothing is specified. Case is\n     * not significant and shortcut characters will be displayed in lower case.\n     * Note that menu items with the characters '\\b' or '\\n' as shortcuts will\n     * get triggered by the Delete key or Carriage Return key, respectively.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param alphaChar The alphabetic shortcut key. This is the shortcut when\n     *        using a keyboard with alphabetic keys.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.KeyEvent#META_CTRL_ON", "android.view.Menu" ]
  }, {
    "name" : "public MenuItem setAlphabeticShortcut(char alphaChar, int alphaModifiers)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the alphabetic shortcut associated with this item. The shortcut\n     * will be triggered when the key that generates the given character is\n     * pressed along with the modifier keys. Case is not significant and shortcut\n     * characters will be displayed in lower case. Note that menu items with\n     * the characters '\\b' or '\\n' as shortcuts will get triggered by the\n     * Delete key or Carriage Return key, respectively.\n     * <p>\n     * See {@link Menu} for the menu types that support shortcuts.\n     *\n     * @param alphaChar The alphabetic shortcut key. This is the shortcut when\n     *        using a keyboard with alphabetic keys.\n     * @param alphaModifiers The modifier associated with the shortcut. It should\n     *        be a combination of {@link KeyEvent#META_META_ON}, {@link KeyEvent#META_CTRL_ON},\n     *        {@link KeyEvent#META_ALT_ON}, {@link KeyEvent#META_SHIFT_ON},\n     *        {@link KeyEvent#META_SYM_ON}, {@link KeyEvent#META_FUNCTION_ON}.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.KeyEvent#META_META_ON", "android.view.KeyEvent#META_SYM_ON", "android.view.KeyEvent#META_FUNCTION_ON", "android.view.KeyEvent#META_CTRL_ON", "android.view.Menu", "android.view.KeyEvent#META_ALT_ON", "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "public char getAlphabeticShortcut()",
    "returnType" : "char",
    "comment" : "\n     * Return the char for this menu item's alphabetic shortcut.\n     *\n     * @return Alphabetic character to use as a shortcut.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlphabeticModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return the modifier for this menu item's alphabetic shortcut.\n     * The modifier is a combination of {@link KeyEvent#META_META_ON},\n     * {@link KeyEvent#META_CTRL_ON}, {@link KeyEvent#META_ALT_ON},\n     * {@link KeyEvent#META_SHIFT_ON}, {@link KeyEvent#META_SYM_ON},\n     * {@link KeyEvent#META_FUNCTION_ON}.\n     * For example, {@link KeyEvent#META_FUNCTION_ON}|{@link KeyEvent#META_CTRL_ON}\n     *\n     * @return Modifier associated with the keyboard shortcut.\n     ",
    "links" : [ "android.view.KeyEvent#META_META_ON", "android.view.KeyEvent#META_SYM_ON", "android.view.KeyEvent#META_FUNCTION_ON", "android.view.KeyEvent#META_CTRL_ON", "android.view.KeyEvent#META_ALT_ON", "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "public MenuItem setCheckable(boolean checkable)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Control whether this item can display a check mark. Setting this does\n     * not actually display a check mark (see {@link #setChecked} for that);\n     * rather, it ensures there is room in the item in which to display a\n     * check mark.\n     * <p>\n     * See {@link Menu} for the menu types that support check marks.\n     *\n     * @param checkable Set to true to allow a check mark, false to\n     *            disallow. The default is false.\n     * @see #setChecked\n     * @see #isCheckable\n     * @see Menu#setGroupCheckable\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "android.view.Menu", "#setChecked" ]
  }, {
    "name" : "public boolean isCheckable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the item can currently display a check mark.\n     *\n     * @return If a check mark can be displayed, returns true.\n     *\n     * @see #setCheckable\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setChecked(boolean checked)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Control whether this item is shown with a check mark.  Note that you\n     * must first have enabled checking with {@link #setCheckable} or else\n     * the check mark will not appear.  If this item is a member of a group that contains\n     * mutually-exclusive items (set via {@link Menu#setGroupCheckable(int, boolean, boolean)},\n     * the other items in the group will be unchecked.\n     * <p>\n     * See {@link Menu} for the menu types that support check marks.\n     *\n     * @see #setCheckable\n     * @see #isChecked\n     * @see Menu#setGroupCheckable\n     * @param checked Set to true to display a check mark, false to hide\n     *                it.  The default value is false.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "#setCheckable", "android.view.Menu#setGroupCheckable(int", "android.view.Menu" ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the item is currently displaying a check mark.\n     *\n     * @return If a check mark is displayed, returns true.\n     *\n     * @see #setChecked\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setVisible(boolean visible)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Sets the visibility of the menu item. Even if a menu item is not visible,\n     * it may still be invoked via its shortcut (to completely disable an item,\n     * set it to invisible and {@link #setEnabled(boolean) disabled}).\n     * \n     * @param visible If true then the item will be visible; if false it is\n     *        hidden.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ "#setEnabled(boolean)" ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the visibility of the menu item.\n     *\n     * @return If true the item is visible; else it is hidden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setEnabled(boolean enabled)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Sets whether the menu item is enabled. Disabling a menu item will not\n     * allow it to be invoked via its shortcut. The menu item will still be\n     * visible.\n     * \n     * @param enabled If true then the item will be invokable; if false it is\n     *        won't be invokable.\n     * @return This Item so additional setters can be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return the enabled state of the menu item.\n     *\n     * @return If true the item is enabled and hence invokable; else it is not.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSubMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether this item has an associated sub-menu.  I.e. it is a\n     * sub-menu of another menu.\n     *\n     * @return If true this item has a menu; else it is a\n     *         normal item.\n     ",
    "links" : [ ]
  }, {
    "name" : "public SubMenu getSubMenu()",
    "returnType" : "SubMenu",
    "comment" : "\n     * Get the sub-menu to be invoked when this item is selected, if it has\n     * one. See {@link #hasSubMenu()}.\n     *\n     * @return The associated menu if there is one, else null\n     ",
    "links" : [ "#hasSubMenu()" ]
  }, {
    "name" : "public MenuItem setOnMenuItemClickListener(@Nullable MenuItem.OnMenuItemClickListener menuItemClickListener)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Set a custom listener for invocation of this menu item. In most\n     * situations, it is more efficient and easier to use\n     * {@link Activity#onOptionsItemSelected(MenuItem)} or\n     * {@link Activity#onContextItemSelected(MenuItem)}.\n     * \n     * @param menuItemClickListener The object to receive invokations.\n     * @return This Item so additional setters can be called.\n     * @see Activity#onOptionsItemSelected(MenuItem)\n     * @see Activity#onContextItemSelected(MenuItem)\n     ",
    "links" : [ "android.app.Activity#onContextItemSelected(MenuItem)", "android.app.Activity#onOptionsItemSelected(MenuItem)" ]
  }, {
    "name" : "public ContextMenuInfo getMenuInfo()",
    "returnType" : "ContextMenuInfo",
    "comment" : "\n     * Gets the extra information linked to this menu item.  This extra\n     * information is set by the View that added this menu item to the\n     * menu.\n     * \n     * @see OnCreateContextMenuListener\n     * @return The extra information linked to the View that added this\n     *         menu item to the menu. This can be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShowAsAction(int actionEnum)",
    "returnType" : "void",
    "comment" : "\n     * Sets how this item should display in the presence of an Action Bar.\n     * The parameter actionEnum is a flag set. One of {@link #SHOW_AS_ACTION_ALWAYS},\n     * {@link #SHOW_AS_ACTION_IF_ROOM}, or {@link #SHOW_AS_ACTION_NEVER} should\n     * be used, and you may optionally OR the value with {@link #SHOW_AS_ACTION_WITH_TEXT}.\n     * SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action,\n     * it should be shown with a text label.\n     *\n     * @param actionEnum How the item should display. One of\n     * {@link #SHOW_AS_ACTION_ALWAYS}, {@link #SHOW_AS_ACTION_IF_ROOM}, or\n     * {@link #SHOW_AS_ACTION_NEVER}. SHOW_AS_ACTION_NEVER is the default.\n     * \n     * @see android.app.ActionBar\n     * @see #setActionView(View)\n     ",
    "links" : [ "#SHOW_AS_ACTION_ALWAYS", "#SHOW_AS_ACTION_IF_ROOM", "#SHOW_AS_ACTION_NEVER", "#SHOW_AS_ACTION_WITH_TEXT" ]
  }, {
    "name" : "public MenuItem setShowAsActionFlags(int actionEnum)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Sets how this item should display in the presence of an Action Bar.\n     * The parameter actionEnum is a flag set. One of {@link #SHOW_AS_ACTION_ALWAYS},\n     * {@link #SHOW_AS_ACTION_IF_ROOM}, or {@link #SHOW_AS_ACTION_NEVER} should\n     * be used, and you may optionally OR the value with {@link #SHOW_AS_ACTION_WITH_TEXT}.\n     * SHOW_AS_ACTION_WITH_TEXT requests that when the item is shown as an action,\n     * it should be shown with a text label.\n     *\n     * <p>Note: This method differs from {@link #setShowAsAction(int)} only in that it\n     * returns the current MenuItem instance for call chaining.\n     *\n     * @param actionEnum How the item should display. One of\n     * {@link #SHOW_AS_ACTION_ALWAYS}, {@link #SHOW_AS_ACTION_IF_ROOM}, or\n     * {@link #SHOW_AS_ACTION_NEVER}. SHOW_AS_ACTION_NEVER is the default.\n     *\n     * @see android.app.ActionBar\n     * @see #setActionView(View)\n     * @return This MenuItem instance for call chaining.\n     ",
    "links" : [ "#SHOW_AS_ACTION_ALWAYS", "#SHOW_AS_ACTION_IF_ROOM", "#SHOW_AS_ACTION_NEVER", "#setShowAsAction(int)", "#SHOW_AS_ACTION_WITH_TEXT" ]
  }, {
    "name" : "public MenuItem setActionView(@Nullable View view)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Set an action view for this menu item. An action view will be displayed in place\n     * of an automatically generated menu item element in the UI when this item is shown\n     * as an action within a parent.\n     * <p>\n     *   <strong>Note:</strong> Setting an action view overrides the action provider\n     *           set via {@link #setActionProvider(ActionProvider)}.\n     * </p>\n     *\n     * @param view View to use for presenting this item to the user.\n     * @return This Item so additional setters can be called.\n     *\n     * @see #setShowAsAction(int)\n     ",
    "links" : [ "#setActionProvider(ActionProvider)" ]
  }, {
    "name" : "public MenuItem setActionView(@LayoutRes int resId)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Set an action view for this menu item. An action view will be displayed in place\n     * of an automatically generated menu item element in the UI when this item is shown\n     * as an action within a parent.\n     * <p>\n     *   <strong>Note:</strong> Setting an action view overrides the action provider\n     *           set via {@link #setActionProvider(ActionProvider)}.\n     * </p>\n     *\n     * @param resId Layout resource to use for presenting this item to the user.\n     * @return This Item so additional setters can be called.\n     *\n     * @see #setShowAsAction(int)\n     ",
    "links" : [ "#setActionProvider(ActionProvider)" ]
  }, {
    "name" : "public View getActionView()",
    "returnType" : "View",
    "comment" : "\n     * Returns the currently set action view for this menu item.\n     *\n     * @return This item's action view\n     *\n     * @see #setActionView(View)\n     * @see #setShowAsAction(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setActionProvider(@Nullable ActionProvider actionProvider)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Sets the {@link ActionProvider} responsible for creating an action view if\n     * the item is placed on the action bar. The provider also provides a default\n     * action invoked if the item is placed in the overflow menu.\n     * <p>\n     *   <strong>Note:</strong> Setting an action provider overrides the action view\n     *           set via {@link #setActionView(int)} or {@link #setActionView(View)}.\n     * </p>\n     *\n     * @param actionProvider The action provider.\n     * @return This Item so additional setters can be called.\n     *\n     * @see ActionProvider\n     ",
    "links" : [ "#setActionView(View)", "#setActionView(int)", "android.view.ActionProvider" ]
  }, {
    "name" : "public ActionProvider getActionProvider()",
    "returnType" : "ActionProvider",
    "comment" : "\n     * Gets the {@link ActionProvider}.\n     *\n     * @return The action provider.\n     *\n     * @see ActionProvider\n     * @see #setActionProvider(ActionProvider)\n     ",
    "links" : [ "android.view.ActionProvider" ]
  }, {
    "name" : "public boolean expandActionView()",
    "returnType" : "boolean",
    "comment" : "\n     * Expand the action view associated with this menu item.\n     * The menu item must have an action view set, as well as\n     * the showAsAction flag {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.\n     * If a listener has been set using {@link #setOnActionExpandListener(OnActionExpandListener)}\n     * it will have its {@link OnActionExpandListener#onMenuItemActionExpand(MenuItem)}\n     * method invoked. The listener may return false from this method to prevent expanding\n     * the action view.\n     *\n     * @return true if the action view was expanded, false otherwise.\n     ",
    "links" : [ "#onMenuItemActionExpand(MenuItem)", "#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW", "#setOnActionExpandListener(OnActionExpandListener)" ]
  }, {
    "name" : "public boolean collapseActionView()",
    "returnType" : "boolean",
    "comment" : "\n     * Collapse the action view associated with this menu item.\n     * The menu item must have an action view set, as well as the showAsAction flag\n     * {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}. If a listener has been set using\n     * {@link #setOnActionExpandListener(OnActionExpandListener)} it will have its\n     * {@link OnActionExpandListener#onMenuItemActionCollapse(MenuItem)} method invoked.\n     * The listener may return false from this method to prevent collapsing the action view.\n     *\n     * @return true if the action view was collapsed, false otherwise.\n     ",
    "links" : [ "#onMenuItemActionCollapse(MenuItem)", "#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW", "#setOnActionExpandListener(OnActionExpandListener)" ]
  }, {
    "name" : "public boolean isActionViewExpanded()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this menu item's action view has been expanded.\n     *\n     * @return true if the item's action view is expanded, false otherwise.\n     *\n     * @see #expandActionView()\n     * @see #collapseActionView()\n     * @see #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW\n     * @see OnActionExpandListener\n     ",
    "links" : [ ]
  }, {
    "name" : "public MenuItem setOnActionExpandListener(@Nullable OnActionExpandListener listener)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Set an {@link OnActionExpandListener} on this menu item to be notified when\n     * the associated action view is expanded or collapsed. The menu item must\n     * be configured to expand or collapse its action view using the flag\n     * {@link #SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW}.\n     *\n     * @param listener Listener that will respond to expand/collapse events\n     * @return This menu item instance for call chaining\n     ",
    "links" : [ "#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW", "OnActionExpandListener" ]
  }, {
    "name" : " MenuItem setContentDescription(@Nullable CharSequence contentDescription)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the content description associated with this menu item.\n     *\n     * @param contentDescription The new content description.\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the content description associated with this menu item.\n     *\n     * @return The content description.\n     ",
    "links" : [ ]
  }, {
    "name" : " MenuItem setTooltipText(@Nullable CharSequence tooltipText)",
    "returnType" : "MenuItem",
    "comment" : "\n     * Change the tooltip text associated with this menu item.\n     *\n     * @param tooltipText The new tooltip text.\n     ",
    "links" : [ ]
  }, {
    "name" : " CharSequence getTooltipText()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the tooltip text associated with this menu item.\n     *\n     * @return The tooltip text.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean requiresActionButton()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #setShowAsAction(int)} was set to {@link #SHOW_AS_ACTION_ALWAYS}.\n     * Default value is {@code false}.\n     *\n     * @hide\n     ",
    "links" : [ "#SHOW_AS_ACTION_ALWAYS", "#setShowAsAction(int)" ]
  }, {
    "name" : " boolean requiresOverflow()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link #setShowAsAction(int)} was set to {@link #SHOW_AS_ACTION_NEVER}.\n     * Default value is {@code true}.\n     *\n     * @hide\n     ",
    "links" : [ "#setShowAsAction(int)", "#SHOW_AS_ACTION_NEVER" ]
  } ],
  "methodNames" : [ "public int getItemId()", "public int getGroupId()", "public int getOrder()", "public MenuItem setTitle(@Nullable CharSequence title)", "public MenuItem setTitle(@StringRes int title)", "public CharSequence getTitle()", "public MenuItem setTitleCondensed(@Nullable CharSequence title)", "public CharSequence getTitleCondensed()", "public MenuItem setIcon(@Nullable Drawable icon)", "public MenuItem setIcon(@DrawableRes int iconRes)", "public Drawable getIcon()", "public MenuItem setIconTintList(@Nullable ColorStateList tint)", "public ColorStateList getIconTintList()", " MenuItem setIconTintMode(@Nullable PorterDuff.Mode tintMode)", " MenuItem setIconTintBlendMode(@Nullable BlendMode blendMode)", "public PorterDuff.Mode getIconTintMode()", " BlendMode getIconTintBlendMode()", "public MenuItem setIntent(@Nullable Intent intent)", "public Intent getIntent()", "public MenuItem setShortcut(char numericChar, char alphaChar)", "public MenuItem setShortcut(char numericChar, char alphaChar, int numericModifiers, int alphaModifiers)", "public MenuItem setNumericShortcut(char numericChar)", "public MenuItem setNumericShortcut(char numericChar, int numericModifiers)", "public char getNumericShortcut()", "public int getNumericModifiers()", "public MenuItem setAlphabeticShortcut(char alphaChar)", "public MenuItem setAlphabeticShortcut(char alphaChar, int alphaModifiers)", "public char getAlphabeticShortcut()", "public int getAlphabeticModifiers()", "public MenuItem setCheckable(boolean checkable)", "public boolean isCheckable()", "public MenuItem setChecked(boolean checked)", "public boolean isChecked()", "public MenuItem setVisible(boolean visible)", "public boolean isVisible()", "public MenuItem setEnabled(boolean enabled)", "public boolean isEnabled()", "public boolean hasSubMenu()", "public SubMenu getSubMenu()", "public MenuItem setOnMenuItemClickListener(@Nullable MenuItem.OnMenuItemClickListener menuItemClickListener)", "public ContextMenuInfo getMenuInfo()", "public void setShowAsAction(int actionEnum)", "public MenuItem setShowAsActionFlags(int actionEnum)", "public MenuItem setActionView(@Nullable View view)", "public MenuItem setActionView(@LayoutRes int resId)", "public View getActionView()", "public MenuItem setActionProvider(@Nullable ActionProvider actionProvider)", "public ActionProvider getActionProvider()", "public boolean expandActionView()", "public boolean collapseActionView()", "public boolean isActionViewExpanded()", "public MenuItem setOnActionExpandListener(@Nullable OnActionExpandListener listener)", " MenuItem setContentDescription(@Nullable CharSequence contentDescription)", " CharSequence getContentDescription()", " MenuItem setTooltipText(@Nullable CharSequence tooltipText)", " CharSequence getTooltipText()", " boolean requiresActionButton()", " boolean requiresOverflow()" ],
  "variableNames" : [ "SHOW_AS_ACTION_NEVER", "SHOW_AS_ACTION_IF_ROOM", "SHOW_AS_ACTION_ALWAYS", "SHOW_AS_ACTION_WITH_TEXT", "SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW" ]
}