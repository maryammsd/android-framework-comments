{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/gesture/GestureStore.java",
  "packageName" : "android.gesture",
  "className" : "GestureStore",
  "comment" : "",
  "variables" : [ {
    "name" : "SEQUENCE_INVARIANT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEQUENCE_SENSITIVE",
    "type" : "int",
    "comment" : " when SEQUENCE_SENSITIVE is used, only single stroke gestures are currently allowed",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_INVARIANT",
    "type" : "int",
    "comment" : " ORIENTATION_SENSITIVE and ORIENTATION_INVARIANT are only for SEQUENCE_SENSITIVE gestures",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_SENSITIVE",
    "type" : "int",
    "comment" : " at most 2 directions can be recognized",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_SENSITIVE_4",
    "type" : "int",
    "comment" : " at most 4 directions can be recognized",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_SENSITIVE_8",
    "type" : "int",
    "comment" : " at most 8 directions can be recognized",
    "links" : [ ]
  }, {
    "name" : "FILE_FORMAT_VERSION",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROFILE_LOADING_SAVING",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSequenceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrientationStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamedGestures",
    "type" : "HashMap<String, ArrayList<Gesture>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassifier",
    "type" : "Learner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOrientationStyle(int style)",
    "returnType" : "void",
    "comment" : "\n     * Specify how the gesture library will handle orientation. \n     * Use ORIENTATION_INVARIANT or ORIENTATION_SENSITIVE\n     * \n     * @param style\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOrientationStyle()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSequenceType(int type)",
    "returnType" : "void",
    "comment" : "\n     * @param type SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSequenceType()",
    "returnType" : "int",
    "comment" : "\n     * @return SEQUENCE_INVARIANT or SEQUENCE_SENSITIVE\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getGestureEntries()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get all the gesture entry names in the library\n     * \n     * @return a set of strings\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Prediction> recognize(Gesture gesture)",
    "returnType" : "ArrayList<Prediction>",
    "comment" : "\n     * Recognize a gesture\n     * \n     * @param gesture the query\n     * @return a list of predictions of possible entries for a given gesture\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addGesture(String entryName, Gesture gesture)",
    "returnType" : "void",
    "comment" : "\n     * Add a gesture for the entry\n     * \n     * @param entryName entry name\n     * @param gesture\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeGesture(String entryName, Gesture gesture)",
    "returnType" : "void",
    "comment" : "\n     * Remove a gesture from the library. If there are no more gestures for the\n     * given entry, the gesture entry will be removed.\n     * \n     * @param entryName entry name\n     * @param gesture\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeEntry(String entryName)",
    "returnType" : "void",
    "comment" : "\n     * Remove a entry of gestures\n     * \n     * @param entryName the entry name\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<Gesture> getGestures(String entryName)",
    "returnType" : "ArrayList<Gesture>",
    "comment" : "\n     * Get all the gestures of an entry\n     * \n     * @param entryName\n     * @return the list of gestures that is under this name\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChanged()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void save(OutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the gesture library\n     ",
    "links" : [ ]
  }, {
    "name" : "public void save(OutputStream stream, boolean closeStream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void load(InputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Load the gesture library\n     ",
    "links" : [ ]
  }, {
    "name" : "public void load(InputStream stream, boolean closeStream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readFormatV1(DataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Learner getLearner()",
    "returnType" : "Learner",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SEQUENCE_INVARIANT", "SEQUENCE_SENSITIVE", "ORIENTATION_INVARIANT", "ORIENTATION_SENSITIVE", "ORIENTATION_SENSITIVE_4", "ORIENTATION_SENSITIVE_8", "FILE_FORMAT_VERSION", "PROFILE_LOADING_SAVING", "mSequenceType", "mOrientationStyle", "mNamedGestures", "mClassifier", "mChanged" ],
  "methodNames" : [ "public void setOrientationStyle(int style)", "public int getOrientationStyle()", "public void setSequenceType(int type)", "public int getSequenceType()", "public Set<String> getGestureEntries()", "public ArrayList<Prediction> recognize(Gesture gesture)", "public void addGesture(String entryName, Gesture gesture)", "public void removeGesture(String entryName, Gesture gesture)", "public void removeEntry(String entryName)", "public ArrayList<Gesture> getGestures(String entryName)", "public boolean hasChanged()", "public void save(OutputStream stream) throws IOException", "public void save(OutputStream stream, boolean closeStream) throws IOException", "public void load(InputStream stream) throws IOException", "public void load(InputStream stream, boolean closeStream) throws IOException", "private void readFormatV1(DataInputStream in) throws IOException", " Learner getLearner()" ]
}