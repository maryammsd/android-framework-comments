{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentHashMap.java",
  "packageName" : "java.util.concurrent",
  "className" : "KeySetView",
  "comment" : "\n     * A view of a ConcurrentHashMap as a {@link Set} of keys, in\n     * which additions may optionally be enabled by mapping to a\n     * common value.  This class cannot be directly instantiated.\n     * See {@link #keySet(Object) keySet(V)},\n     * {@link #newKeySet() newKeySet()},\n     * {@link #newKeySet(int) newKeySet(int)}.\n     *\n     * @since 1.8\n     ",
  "links" : [ "#keySet(Object)", "#newKeySet(int)", "#newKeySet()", "java.util.Set" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "value",
    "type" : "V",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public V getMappedValue()",
    "returnType" : "V",
    "comment" : "\n         * Returns the default mapped value for additions,\n         * or {@code null} if additions are not supported.\n         *\n         * @return the default mapped value for additions, or {@code null}\n         * if not supported\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n         * {@inheritDoc}\n         * @throws NullPointerException if the specified key is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n         * Removes the key from this map view, by removing the key (and its\n         * corresponding value) from the backing map.  This method does\n         * nothing if the key is not in the map.\n         *\n         * @param  o the key to be removed from the backing map\n         * @return {@code true} if the backing map contained the specified key\n         * @throws NullPointerException if the specified key is null\n         ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<K> iterator()",
    "returnType" : "Iterator<K>",
    "comment" : "\n         * @return an iterator over the keys of the backing map\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(K e)",
    "returnType" : "boolean",
    "comment" : "\n         * Adds the specified key to this set view by mapping the key to\n         * the default mapped value in the backing map, if defined.\n         *\n         * @param e key to be added\n         * @return {@code true} if this set changed as a result of the call\n         * @throws NullPointerException if the specified key is null\n         * @throws UnsupportedOperationException if no default mapped value\n         * for additions was provided\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends K> c)",
    "returnType" : "boolean",
    "comment" : "\n         * Adds all of the elements in the specified collection to this set,\n         * as if by calling {@link #add} on each one.\n         *\n         * @param c the elements to be inserted into this set\n         * @return {@code true} if this set changed as a result of the call\n         * @throws NullPointerException if the collection or any of its\n         * elements are {@code null}\n         * @throws UnsupportedOperationException if no default mapped value\n         * for additions was provided\n         ",
    "links" : [ "#add" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<K> spliterator()",
    "returnType" : "Spliterator<K>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super K> action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public V getMappedValue()", "public boolean contains(Object o)", "public boolean remove(Object o)", "public Iterator<K> iterator()", "public boolean add(K e)", "public boolean addAll(Collection<? extends K> c)", "public int hashCode()", "public boolean equals(Object o)", "public Spliterator<K> spliterator()", "public void forEach(Consumer<? super K> action)" ],
  "variableNames" : [ "serialVersionUID", "value" ]
}