{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DateIntervalInfo.java",
  "packageName" : "android.icu.text",
  "className" : "DateIntervalInfo",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "currentSerialVersion",
    "type" : "int",
    "comment" : " Save the interval pattern information.\n     * Interval pattern consists of 2 single date patterns and the separator.\n     * For example, interval pattern \"MMM d - MMM d, yyyy\" consists\n     * a single date pattern \"MMM d\", another single date pattern \"MMM d, yyyy\",\n     * and a separator \"-\".\n     * Also, the first date appears in an interval pattern could be\n     * the earlier date or the later date.\n     * And such information is saved in the interval pattern as well.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALENDAR_FIELD_TO_PATTERN_LETTER",
    "type" : "String[]",
    "comment" : " it is shared with DateIntervalFormat.",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINIMUM_SUPPORTED_CALENDAR_FIELD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALENDAR_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTERVAL_FORMATS_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FALLBACK_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LATEST_FIRST_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EARLIEST_FIRST_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DIICACHE",
    "type" : "ICUCache<String, DateIntervalInfo>",
    "comment" : " DateIntervalInfo cache",
    "links" : [ ]
  }, {
    "name" : "fFallbackIntervalPattern",
    "type" : "String",
    "comment" : " default interval pattern on the skeleton, {0} - {1}",
    "links" : [ ]
  }, {
    "name" : "fFirstDateInPtnIsLaterDate",
    "type" : "boolean",
    "comment" : " default order",
    "links" : [ ]
  }, {
    "name" : "fIntervalPatterns",
    "type" : "Map<String, Map<String, PatternInfo>>",
    "comment" : " HashMap( skeleton, HashMap(largest_different_field, pattern) )",
    "links" : [ ]
  }, {
    "name" : "frozen",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fIntervalPatternsReadOnly",
    "type" : "boolean",
    "comment" : " false.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initializeData(ULocale locale)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the DateIntervalInfo from locale\n     * @param locale   the given locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeFromReadOnlyPatterns(DateIntervalInfo dii)",
    "returnType" : "void",
    "comment" : "\n     * Initialize this object\n     * @param dii must have read-only fIntervalPatterns.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setup(ULocale locale)",
    "returnType" : "void",
    "comment" : "\n     * Initialize DateIntervalInfo from calendar data\n     * @param calData  calendar data\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int splitPatternInto2Part(String intervalPattern)",
    "returnType" : "int",
    "comment" : "\n     * Split interval patterns into 2 part.\n     * @param intervalPattern  interval pattern\n     * @return the index in interval pattern which split the pattern into 2 part\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIntervalPattern(String skeleton, int lrgDiffCalUnit, String intervalPattern)",
    "returnType" : "void",
    "comment" : "\n     * Provides a way for client to build interval patterns.\n     * User could construct DateIntervalInfo by providing\n     * a list of skeletons and their patterns.\n     * <P>\n     * For example:\n     * <pre>\n     * DateIntervalInfo dIntervalInfo = new DateIntervalInfo();\n     * dIntervalInfo.setIntervalPattern(\"yMd\", Calendar.YEAR, \"'from' yyyy-M-d 'to' yyyy-M-d\");\n     * dIntervalInfo.setIntervalPattern(\"yMMMd\", Calendar.MONTH, \"'from' yyyy MMM d 'to' MMM d\");\n     * dIntervalInfo.setIntervalPattern(\"yMMMd\", Calendar.DAY, \"yyyy MMM d-d\");\n     * dIntervalInfo.setFallbackIntervalPattern(\"{0} ~ {1}\");\n     * </pre>\n     *\n     * Restriction:\n     * Currently, users can only set interval patterns when the following\n     * calendar fields are different: ERA, YEAR, MONTH, DATE,  DAY_OF_MONTH,\n     * DAY_OF_WEEK, AM_PM,  HOUR, HOUR_OF_DAY, MINUTE, SECOND, and MILLISECOND.\n     * Interval patterns when other calendar fields are different are\n     * not supported.\n     *\n     * @param skeleton         the skeleton on which interval pattern based\n     * @param lrgDiffCalUnit   the largest different calendar unit.\n     * @param intervalPattern  the interval pattern on the largest different\n     *                         calendar unit.\n     *                         For example, if lrgDiffCalUnit is\n     *                         \"year\", the interval pattern for en_US when year\n     *                         is different could be \"'from' yyyy 'to' yyyy\".\n     * @throws IllegalArgumentException  if setting interval pattern on\n     *                            a calendar field that is smaller\n     *                            than the MINIMUM_SUPPORTED_CALENDAR_FIELD\n     * @throws UnsupportedOperationException  if the object is frozen\n     ",
    "links" : [ ]
  }, {
    "name" : "private PatternInfo setIntervalPatternInternally(String skeleton, String lrgDiffCalUnit, String intervalPattern)",
    "returnType" : "PatternInfo",
    "comment" : " Set Interval pattern.\n     *\n     * It generates the interval pattern info,\n     * afer which, not only sets the interval pattern info into the hash map,\n     * but also returns the interval pattern info to the caller\n     * so that caller can re-use it.\n     *\n     * @param skeleton         skeleton on which the interval pattern based\n     * @param lrgDiffCalUnit   the largest different calendar unit.\n     * @param intervalPattern  the interval pattern on the largest different\n     *                         calendar unit.\n     * @return the interval pattern pattern information\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setIntervalPattern(String skeleton, String lrgDiffCalUnit, PatternInfo ptnInfo)",
    "returnType" : "void",
    "comment" : " Set Interval pattern.\n     *\n     * @param skeleton         skeleton on which the interval pattern based\n     * @param lrgDiffCalUnit   the largest different calendar unit.\n     * @param ptnInfo          interval pattern infomration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PatternInfo genPatternInfo(String intervalPattern, boolean laterDateFirst)",
    "returnType" : "PatternInfo",
    "comment" : "\n     * Break interval patterns as 2 part and save them into pattern info.\n     * @param intervalPattern  interval pattern\n     * @param laterDateFirst   whether the first date in intervalPattern\n     *                         is earlier date or later date\n     * @return                 pattern info object\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public PatternInfo getIntervalPattern(String skeleton, int field)",
    "returnType" : "PatternInfo",
    "comment" : "\n     * Get the interval pattern given the largest different calendar field.\n     * @param skeleton   the skeleton\n     * @param field      the largest different calendar field\n     * @return interval pattern  return null if interval pattern is not found.\n     * @throws IllegalArgumentException  if getting interval pattern on\n     *                            a calendar field that is smaller\n     *                            than the MINIMUM_SUPPORTED_CALENDAR_FIELD\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFallbackIntervalPattern()",
    "returnType" : "String",
    "comment" : "\n     * Get the fallback interval pattern.\n     * @return fallback interval pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFallbackIntervalPattern(String fallbackPattern)",
    "returnType" : "void",
    "comment" : "\n     * Re-set the fallback interval pattern.\n     *\n     * In construction, default fallback pattern is set as \"{0} - {1}\".\n     * And constructor taking locale as parameter will set the\n     * fallback pattern as what defined in the locale resource file.\n     *\n     * This method provides a way for user to replace the fallback pattern.\n     *\n     * @param fallbackPattern                 fall-back interval pattern.\n     * @throws UnsupportedOperationException  if the object is frozen\n     * @throws IllegalArgumentException       if there is no pattern {0} or\n     *                                        pattern {1} in fallbakckPattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDefaultOrder()",
    "returnType" : "boolean",
    "comment" : "\n     * Get default order -- whether the first date in pattern is later date\n     *                      or not.\n     *\n     * return default date ordering in interval pattern. true if the first date\n     *        in pattern is later date, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clone this object.\n     * @return     a copy of the object\n     ",
    "links" : [ ]
  }, {
    "name" : "private Object cloneUnfrozenDII()",
    "returnType" : "Object",
    "comment" : "\n     * Clone an unfrozen DateIntervalInfo object.\n     * @return     a copy of the object\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, Map<String, PatternInfo>> cloneIntervalPatterns(Map<String, Map<String, PatternInfo>> patterns)",
    "returnType" : "Map<String, Map<String, PatternInfo>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateIntervalInfo freeze()",
    "returnType" : "DateIntervalInfo",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateIntervalInfo cloneAsThawed()",
    "returnType" : "DateIntervalInfo",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : " static void parseSkeleton(String skeleton, int[] skeletonFieldWidth)",
    "returnType" : "void",
    "comment" : "\n     * Parse skeleton, save each field's width.\n     * It is used for looking for best match skeleton,\n     * and adjust pattern field width.\n     * @param skeleton            skeleton to be parsed\n     * @param skeletonFieldWidth  parsed skeleton field width\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean stringNumeric(int fieldWidth, int anotherFieldWidth, char patternLetter)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether one field width is numeric while the other is string.\n     *\n     * TODO (xji): make it general\n     *\n     * @param fieldWidth          one field width\n     * @param anotherFieldWidth   another field width\n     * @param patternLetter       pattern letter char\n     * @return true if one field width is numeric and the other is string,\n     *         false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : " DateIntervalFormat.BestMatchInfo getBestSkeleton(String inputSkeleton)",
    "returnType" : "DateIntervalFormat.BestMatchInfo",
    "comment" : "\n     * given an input skeleton, get the best match skeleton\n     * which has pre-defined interval pattern in resource file.\n     *\n     * TODO (xji): set field weight or\n     *             isolate the functionality in DateTimePatternGenerator\n     * @param  inputSkeleton        input skeleton\n     * @return 0, if there is exact match for input skeleton\n     *         1, if there is only field width difference between\n     *            the best match and the input skeleton\n     *         2, the only field difference is 'v' and 'z'\n     *        -1, if there is calendar field difference between\n     *            the best match and the input skeleton\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object a)",
    "returnType" : "boolean",
    "comment" : "\n     * Override equals\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Override hashcode\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Set<String>> getPatterns()",
    "returnType" : "Map<String, Set<String>>",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Map<String, PatternInfo>> getRawPatterns()",
    "returnType" : "Map<String, Map<String, PatternInfo>>",
    "comment" : "\n     * Get the internal patterns, with a deep clone for safety.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initializeData(ULocale locale)", "private void initializeFromReadOnlyPatterns(DateIntervalInfo dii)", "private void setup(ULocale locale)", "private static int splitPatternInto2Part(String intervalPattern)", "public void setIntervalPattern(String skeleton, int lrgDiffCalUnit, String intervalPattern)", "private PatternInfo setIntervalPatternInternally(String skeleton, String lrgDiffCalUnit, String intervalPattern)", "private void setIntervalPattern(String skeleton, String lrgDiffCalUnit, PatternInfo ptnInfo)", "public static PatternInfo genPatternInfo(String intervalPattern, boolean laterDateFirst)", "public PatternInfo getIntervalPattern(String skeleton, int field)", "public String getFallbackIntervalPattern()", "public void setFallbackIntervalPattern(String fallbackPattern)", "public boolean getDefaultOrder()", "public Object clone()", "private Object cloneUnfrozenDII()", "private static Map<String, Map<String, PatternInfo>> cloneIntervalPatterns(Map<String, Map<String, PatternInfo>> patterns)", "public boolean isFrozen()", "public DateIntervalInfo freeze()", "public DateIntervalInfo cloneAsThawed()", " static void parseSkeleton(String skeleton, int[] skeletonFieldWidth)", "private static boolean stringNumeric(int fieldWidth, int anotherFieldWidth, char patternLetter)", " DateIntervalFormat.BestMatchInfo getBestSkeleton(String inputSkeleton)", "public boolean equals(Object a)", "public int hashCode()", "public Map<String, Set<String>> getPatterns()", "public Map<String, Map<String, PatternInfo>> getRawPatterns()" ],
  "variableNames" : [ "currentSerialVersion", "CALENDAR_FIELD_TO_PATTERN_LETTER", "serialVersionUID", "MINIMUM_SUPPORTED_CALENDAR_FIELD", "CALENDAR_KEY", "INTERVAL_FORMATS_KEY", "FALLBACK_STRING", "LATEST_FIRST_PREFIX", "EARLIEST_FIRST_PREFIX", "DIICACHE", "fFallbackIntervalPattern", "fFirstDateInPtnIsLaterDate", "fIntervalPatterns", "frozen", "fIntervalPatternsReadOnly" ]
}