{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/Drawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "Drawable",
  "comment" : "\n * A Drawable is a general abstraction for \"something that can be drawn.\"  Most\n * often you will deal with Drawable as the type of resource retrieved for\n * drawing things to the screen; the Drawable class provides a generic API for\n * dealing with an underlying visual resource that may take a variety of forms.\n * Unlike a {@link android.view.View}, a Drawable does not have any facility to\n * receive events or otherwise interact with the user.\n *\n * <p>In addition to simple drawing, Drawable provides a number of generic\n * mechanisms for its client to interact with what is being drawn:\n *\n * <ul>\n *     <li> The {@link #setBounds} method <var>must</var> be called to tell the\n *     Drawable where it is drawn and how large it should be.  All Drawables\n *     should respect the requested size, often simply by scaling their\n *     imagery.  A client can find the preferred size for some Drawables with\n *     the {@link #getIntrinsicHeight} and {@link #getIntrinsicWidth} methods.\n *\n *     <li> The {@link #getPadding} method can return from some Drawables\n *     information about how to frame content that is placed inside of them.\n *     For example, a Drawable that is intended to be the frame for a button\n *     widget would need to return padding that correctly places the label\n *     inside of itself.\n *\n *     <li> The {@link #setState} method allows the client to tell the Drawable\n *     in which state it is to be drawn, such as \"focused\", \"selected\", etc.\n *     Some drawables may modify their imagery based on the selected state.\n *\n *     <li> The {@link #setLevel} method allows the client to supply a single\n *     continuous controller that can modify the Drawable is displayed, such as\n *     a battery level or progress level.  Some drawables may modify their\n *     imagery based on the current level.\n *\n *     <li> A Drawable can perform animations by calling back to its client\n *     through the {@link Callback} interface.  All clients should support this\n *     interface (via {@link #setCallback}) so that animations will work.  A\n *     simple way to do this is through the system facilities such as\n *     {@link android.view.View#setBackground(Drawable)} and\n *     {@link android.widget.ImageView}.\n * </ul>\n *\n * Though usually not visible to the application, Drawables may take a variety\n * of forms:\n *\n * <ul>\n *     <li> <b>Bitmap</b>: the simplest Drawable, a PNG or JPEG image.\n *     <li> <b>Nine Patch</b>: an extension to the PNG format allows it to\n *     specify information about how to stretch it and place things inside of\n *     it.\n *     <li><b>Vector</b>: a drawable defined in an XML file as a set of points,\n *     lines, and curves along with its associated color information. This type\n *     of drawable can be scaled without loss of display quality.\n *     <li> <b>Shape</b>: contains simple drawing commands instead of a raw\n *     bitmap, allowing it to resize better in some cases.\n *     <li> <b>Layers</b>: a compound drawable, which draws multiple underlying\n *     drawables on top of each other.\n *     <li> <b>States</b>: a compound drawable that selects one of a set of\n *     drawables based on its state.\n *     <li> <b>Levels</b>: a compound drawable that selects one of a set of\n *     drawables based on its level.\n *     <li> <b>Scale</b>: a compound drawable with a single child drawable,\n *     whose overall size is modified based on the current level.\n * </ul>\n *\n * <a name=\"Custom\"></a>\n * <h3>Custom drawables</h3>\n *\n * <p>\n * All versions of Android allow the Drawable class to be extended and used at\n * run time in place of framework-provided drawable classes. Starting in\n * {@link android.os.Build.VERSION_CODES#N API 24}, custom drawables classes\n * may also be used in XML.\n * <p>\n * <strong>Note:</strong> Custom drawable classes are only accessible from\n * within your application package. Other applications will not be able to load\n * them.\n * <p>\n * At a minimum, custom drawable classes must implement the abstract methods on\n * Drawable and should override the {@link Drawable#draw(Canvas)} method to\n * draw content.\n * <p>\n * Custom drawables classes may be used in XML in multiple ways:\n * <ul>\n *     <li>\n *         Using the fully-qualified class name as the XML element name. For\n *         this method, the custom drawable class must be a public top-level\n *         class.\n * <pre>\n * &lt;com.myapp.MyCustomDrawable xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     android:color=\"#ffff0000\" /&gt;\n * </pre>\n *     </li>\n *     <li>\n *         Using <em>drawable</em> as the XML element name and specifying the\n *         fully-qualified class name from the <em>class</em> attribute. This\n *         method may be used for both public top-level classes and public\n *         static inner classes.\n * <pre>\n * &lt;drawable xmlns:android=\"http://schemas.android.com/apk/res/android\"\n *     class=\"com.myapp.MyTopLevelClass$InnerCustomDrawable\"\n *     android:color=\"#ffff0000\" /&gt;\n * </pre>\n *     </li>\n * </ul>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about how to use drawables, read the\n * <a href=\"{@docRoot}guide/topics/graphics/2d-graphics.html\">Canvas and Drawables</a> developer\n * guide. For information and examples of creating drawable resources (XML or bitmap files that\n * can be loaded in code), read the\n * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>\n * document.</p></div>\n ",
  "links" : [ "#setState", "android.widget.ImageView", "#setLevel", "android.os.Build.VERSION_CODES#N", "#setBounds", "Callback", "#getIntrinsicHeight", "#getIntrinsicWidth", "android.view.View", "android.graphics.drawable.Drawable#draw(Canvas)", "android.view.View#setBackground(Drawable)", "#setCallback", "#getPadding" ],
  "variables" : [ {
    "name" : "ZERO_BOUNDS_RECT",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TINT_MODE",
    "type" : "PorterDuff.Mode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BLEND_MODE",
    "type" : "BlendMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStateSet",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChangingConfigurations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : " lazily becomes a new Rect()",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "WeakReference<Callback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayoutDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSrcDensityOverride",
    "type" : "int",
    "comment" : "\n     * The source density to use when looking up resources using\n     * {@link Resources#getDrawableForDensity(int, int, Theme)}. A value of 0 means there is no\n     * override and the system density will be used.\n     *\n     * NOTE(adamlesinski): This is transient state used to get around the public API that does not\n     * account for source density overrides. Custom drawables implemented by developers do not need\n     * to be aware of the source density override, as it is only used by Launcher to load higher\n     * resolution icons from external Resources packages, which do not execute custom code.\n     * This is all to support the {@link Resources#getDrawableForDensity(int, int, Theme)} API.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.res.Resources#getDrawableForDensity(int" ]
  }, {
    "name" : "mSetBlendModeInvoked",
    "type" : "boolean",
    "comment" : "\n     * Flag used to break the recursive loop between setTintBlendMode(PorterDuff.Mode) and\n     * setTintBlendMode(BlendMode) as each default implementation invokes the other in order to\n     * support new use cases that utilize the new blending modes as well as support the legacy\n     * use cases. This flag tracks that {@link #setTintBlendMode(BlendMode)} is only invoked once\n     * per invocation.\n     ",
    "links" : [ "#setTintBlendMode(BlendMode)" ]
  }, {
    "name" : "mSetTintModeInvoked",
    "type" : "boolean",
    "comment" : "\n     * Flag used to break the recursive loop between setTintBlendMode(PorterDuff.Mode) and\n     * setTintBlendMode(BlendMode) as each default implementation invokes the other in order to\n     * support new use cases that utilize the new blending modes as well as support the legacy\n     * use cases. This flag tracks that {@link #setTintMode(Mode)} is only invoked once\n     * per invocation;\n     ",
    "links" : [ "#setTintMode(Mode)" ]
  } ],
  "methods" : [ {
    "name" : "public abstract void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Draw in its bounds (set via setBounds) respecting optional effects such\n     * as alpha (set via setAlpha) and color filter (set via setColorFilter).\n     *\n     * @param canvas The canvas to draw into\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Specify a bounding rectangle for the Drawable. This is where the drawable\n     * will draw when its draw() method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Specify a bounding rectangle for the Drawable. This is where the drawable\n     * will draw when its draw() method is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void copyBounds(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Return a copy of the drawable's bounds in the specified Rect (allocated\n     * by the caller). The bounds specify where this will draw when its draw()\n     * method is called.\n     *\n     * @param bounds Rect to receive the drawable's bounds (allocated by the\n     *               caller).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Rect copyBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Return a copy of the drawable's bounds in a new Rect. This returns the\n     * same values as getBounds(), but the returned object is guaranteed to not\n     * be changed later by the drawable (i.e. it retains no reference to this\n     * rect). If the caller already has a Rect allocated, call copyBounds(rect).\n     *\n     * @return A copy of the drawable's bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Rect getBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Return the drawable's bounds Rect. Note: for efficiency, the returned\n     * object may be the same object stored in the drawable (though this is not\n     * guaranteed), so if a persistent copy of the bounds is needed, call\n     * copyBounds(rect) instead.\n     * You should also not change the object returned by this method as it may\n     * be the same object stored in the drawable.\n     *\n     * @return The bounds of the drawable (which may change later, so caller\n     *         beware). DO NOT ALTER the returned object as it may change the\n     *         stored bounds of this drawable.\n     *\n     * @see #copyBounds()\n     * @see #copyBounds(android.graphics.Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getDirtyBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Return the drawable's dirty bounds Rect. Note: for efficiency, the\n     * returned object may be the same object stored in the drawable (though\n     * this is not guaranteed).\n     * <p>\n     * By default, this returns the full drawable bounds. Custom drawables may\n     * override this method to perform more precise invalidation.\n     *\n     * @return The dirty bounds of this drawable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChangingConfigurations(@Config int configs)",
    "returnType" : "void",
    "comment" : "\n     * Set a mask of the configuration parameters for which this drawable\n     * may change, requiring that it be re-created.\n     *\n     * @param configs A mask of the changing configuration parameters, as\n     * defined by {@link android.content.pm.ActivityInfo}.\n     *\n     * @see android.content.pm.ActivityInfo\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n     * Return a mask of the configuration parameters for which this drawable\n     * may change, requiring that it be re-created.  The default implementation\n     * returns whatever was provided through\n     * {@link #setChangingConfigurations(int)} or 0 by default.  Subclasses\n     * may extend this to or in the changing configurations of any other\n     * drawables they hold.\n     *\n     * @return Returns a mask of the changing configuration parameters, as\n     * defined by {@link android.content.pm.ActivityInfo}.\n     *\n     * @see android.content.pm.ActivityInfo\n     ",
    "links" : [ "#setChangingConfigurations(int)", "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "\n     * Set to true to have the drawable dither its colors when drawn to a\n     * device with fewer than 8-bits per color component.\n     *\n     * @see android.graphics.Paint#setDither(boolean);\n     * @deprecated This property is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilterBitmap(boolean filter)",
    "returnType" : "void",
    "comment" : "\n     * Set to true to have the drawable filter its bitmaps with bilinear\n     * sampling when they are scaled or rotated.\n     *\n     * <p>This can improve appearance when bitmaps are rotated. If the drawable\n     * does not use bitmaps, this call is ignored.</p>\n     *\n     * @see #isFilterBitmap()\n     * @see android.graphics.Paint#setFilterBitmap(boolean);\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFilterBitmap()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this drawable filters its bitmaps\n     * @see #setFilterBitmap(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setCallback(@Nullable Callback cb)",
    "returnType" : "void",
    "comment" : "\n     * Bind a {@link Callback} object to this Drawable.  Required for clients\n     * that want to support animated drawables.\n     *\n     * @param cb The client's Callback implementation.\n     *\n     * @see #getCallback()\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public Callback getCallback()",
    "returnType" : "Callback",
    "comment" : "\n     * Return the current {@link Callback} implementation attached to this\n     * Drawable.\n     *\n     * @return A {@link Callback} instance or null if no callback was set.\n     *\n     * @see #setCallback(android.graphics.drawable.Drawable.Callback)\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public void invalidateSelf()",
    "returnType" : "void",
    "comment" : "\n     * Use the current {@link Callback} implementation to have this Drawable\n     * redrawn.  Does nothing if there is no Callback attached to the\n     * Drawable.\n     *\n     * @see Callback#invalidateDrawable\n     * @see #getCallback()\n     * @see #setCallback(android.graphics.drawable.Drawable.Callback)\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public void scheduleSelf(@NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "\n     * Use the current {@link Callback} implementation to have this Drawable\n     * scheduled.  Does nothing if there is no Callback attached to the\n     * Drawable.\n     *\n     * @param what The action being scheduled.\n     * @param when The time (in milliseconds) to run.\n     *\n     * @see Callback#scheduleDrawable\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public void unscheduleSelf(@NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "\n     * Use the current {@link Callback} implementation to have this Drawable\n     * unscheduled.  Does nothing if there is no Callback attached to the\n     * Drawable.\n     *\n     * @param what The runnable that you no longer want called.\n     *\n     * @see Callback#unscheduleDrawable\n     ",
    "links" : [ "Callback" ]
  }, {
    "name" : "public int getLayoutDirection()",
    "returnType" : "int",
    "comment" : "\n     * Returns the resolved layout direction for this Drawable.\n     *\n     * @return One of {@link android.view.View#LAYOUT_DIRECTION_LTR},\n     *         {@link android.view.View#LAYOUT_DIRECTION_RTL}\n     * @see #setLayoutDirection(int)\n     ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public final boolean setLayoutDirection(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the layout direction for this drawable. Should be a resolved\n     * layout direction, as the Drawable has no capacity to do the resolution on\n     * its own.\n     *\n     * @param layoutDirection the resolved layout direction for the drawable,\n     *                        either {@link android.view.View#LAYOUT_DIRECTION_LTR}\n     *                        or {@link android.view.View#LAYOUT_DIRECTION_RTL}\n     * @return {@code true} if the layout direction change has caused the\n     *         appearance of the drawable to change such that it needs to be\n     *         re-drawn, {@code false} otherwise\n     * @see #getLayoutDirection()\n     ",
    "links" : [ "android.view.View#LAYOUT_DIRECTION_LTR", "android.view.View#LAYOUT_DIRECTION_RTL" ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when the drawable's resolved layout direction changes.\n     *\n     * @param layoutDirection the new resolved layout direction\n     * @return {@code true} if the layout direction change has caused the\n     *         appearance of the drawable to change such that it needs to be\n     *         re-drawn, {@code false} otherwise\n     * @see #setLayoutDirection(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setAlpha(@IntRange(from = 0, to = 255) int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Specify an alpha value for the drawable. 0 means fully transparent, and\n     * 255 means fully opaque.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current alpha value for the drawable. 0 means fully transparent,\n     * 255 means fully opaque. This method is implemented by\n     * Drawable subclasses and the value returned is specific to how that class treats alpha.\n     * The default return value is 255 if the class does not override this method to return a value\n     * specific to its use of alpha.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(@Nullable Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *\n     * Internal-only method for setting xfermode on certain supported drawables.\n     *\n     * Should not be made public since the layers and drawing area with which\n     * Drawables draw is private implementation detail, and not something apps\n     * should rely upon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "\n     * Specify an optional color filter for the drawable.\n     * <p>\n     * If a Drawable has a ColorFilter, each output pixel of the Drawable's\n     * drawing contents will be modified by the color filter before it is\n     * blended onto the render target of a Canvas.\n     * </p>\n     * <p>\n     * Pass {@code null} to remove any existing color filter.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a non-{@code null} color\n     * filter disables {@link #setTintList(ColorStateList) tint}.\n     * </p>\n     *\n     * @param colorFilter The color filter to apply, or {@code null} to remove the\n     *            existing color filter\n     ",
    "links" : [ "#setTintList(ColorStateList)" ]
  }, {
    "name" : "public void setColorFilter(@ColorInt int color, @NonNull PorterDuff.Mode mode)",
    "returnType" : "void",
    "comment" : "\n     * Specify a color and Porter-Duff mode to be the color filter for this\n     * drawable.\n     * <p>\n     * Convenience for {@link #setColorFilter(ColorFilter)} which constructs a\n     * {@link PorterDuffColorFilter}.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a color filter disables\n     * {@link #setTintList(ColorStateList) tint}.\n     * </p>\n     *\n     * @see #setColorFilter(ColorFilter)\n     * @deprecated use {@link #setColorFilter(ColorFilter)} with an instance\n     * of {@link android.graphics.BlendModeColorFilter}\n     ",
    "links" : [ "android.graphics.BlendModeColorFilter", "#setColorFilter(ColorFilter)", "#setTintList(ColorStateList)", "android.graphics.PorterDuffColorFilter" ]
  }, {
    "name" : "public void setTint(@ColorInt int tintColor)",
    "returnType" : "void",
    "comment" : "\n     * Specifies tint color for this drawable.\n     * <p>\n     * A Drawable's drawing content will be blended together with its tint\n     * before it is drawn to the screen. This functions similarly to\n     * {@link #setColorFilter(int, PorterDuff.Mode)}.\n     * </p>\n     * <p>\n     * To clear the tint, pass {@code null} to\n     * {@link #setTintList(ColorStateList)}.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n     * {@link #setColorFilter(ColorFilter)} or\n     * {@link #setColorFilter(int, PorterDuff.Mode)} overrides tint.\n     * </p>\n     *\n     * @param tintColor Color to use for tinting this drawable\n     * @see #setTintList(ColorStateList)\n     * @see #setTintMode(PorterDuff.Mode)\n     * @see #setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setTintList(ColorStateList)", "#setColorFilter(ColorFilter)", "#setColorFilter(int" ]
  }, {
    "name" : "public void setTintList(@Nullable ColorStateList tint)",
    "returnType" : "void",
    "comment" : "\n     * Specifies tint color for this drawable as a color state list.\n     * <p>\n     * A Drawable's drawing content will be blended together with its tint\n     * before it is drawn to the screen. This functions similarly to\n     * {@link #setColorFilter(int, PorterDuff.Mode)}.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n     * {@link #setColorFilter(ColorFilter)} or\n     * {@link #setColorFilter(int, PorterDuff.Mode)} overrides tint.\n     * </p>\n     *\n     * @param tint Color state list to use for tinting this drawable, or\n     *            {@code null} to clear the tint\n     * @see #setTint(int)\n     * @see #setTintMode(PorterDuff.Mode)\n     * @see #setTintBlendMode(BlendMode)\n     ",
    "links" : [ "#setColorFilter(ColorFilter)", "#setColorFilter(int" ]
  }, {
    "name" : "public void setTintMode(@Nullable PorterDuff.Mode tintMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a tint blending mode for this drawable.\n     * <p>\n     * Defines how this drawable's tint color should be blended into the drawable\n     * before it is drawn to screen. Default tint mode is {@link PorterDuff.Mode#SRC_IN}.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n     * {@link #setColorFilter(ColorFilter)} or\n     * {@link #setColorFilter(int, PorterDuff.Mode)} overrides tint.\n     * </p>\n     *\n     * @param tintMode A Porter-Duff blending mode to apply to the drawable, a value of null sets\n     *                 the default Porter-Diff blending mode value\n     *                 of {@link PorterDuff.Mode#SRC_IN}\n     * @see #setTint(int)\n     * @see #setTintList(ColorStateList)\n     ",
    "links" : [ "#setColorFilter(ColorFilter)", "#setColorFilter(int", "PorterDuff.Mode#SRC_IN" ]
  }, {
    "name" : "public void setTintBlendMode(@Nullable BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "\n     * Specifies a tint blending mode for this drawable.\n     * <p>\n     * Defines how this drawable's tint color should be blended into the drawable\n     * before it is drawn to screen. Default tint mode is {@link BlendMode#SRC_IN}.\n     * </p>\n     * <p class=\"note\"><strong>Note:</strong> Setting a color filter via\n     * {@link #setColorFilter(ColorFilter)}\n     * </p>\n     *\n     * @param blendMode BlendMode to apply to the drawable, a value of null sets the default\n     *                  blend mode value of {@link BlendMode#SRC_IN}\n     * @see #setTint(int)\n     * @see #setTintList(ColorStateList)\n     ",
    "links" : [ "#setColorFilter(ColorFilter)", "android.graphics.BlendMode#SRC_IN" ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "\n     * Returns the current color filter, or {@code null} if none set.\n     *\n     * @return the current color filter, or {@code null} if none set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearColorFilter()",
    "returnType" : "void",
    "comment" : "\n     * Removes the color filter for this drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the hotspot's location within the drawable.\n     *\n     * @param x The X coordinate of the center of the hotspot\n     * @param y The Y coordinate of the center of the hotspot\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bounds to which the hotspot is constrained, if they should be\n     * different from the drawable bounds.\n     *\n     * @param left position in pixels of the left bound\n     * @param top position in pixels of the top bound\n     * @param right position in pixels of the right bound\n     * @param bottom position in pixels of the bottom bound\n     * @see #getHotspotBounds(android.graphics.Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(@NonNull Rect outRect)",
    "returnType" : "void",
    "comment" : "\n     * Populates {@code outRect} with the hotspot bounds.\n     *\n     * @param outRect the rect to populate with the hotspot bounds\n     * @see #setHotspotBounds(int, int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProjected()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this drawable requests projection. Indicates that the\n     * {@link android.graphics.RenderNode} this Drawable will draw into should be drawn immediately\n     * after the closest ancestor RenderNode containing a projection receiver.\n     *\n     * @see android.graphics.RenderNode#setProjectBackwards(boolean)\n     ",
    "links" : [ "android.graphics.RenderNode" ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this drawable will change its appearance based on\n     * state. Clients can use this to determine whether it is necessary to\n     * calculate their state and call setState.\n     *\n     * @return True if this drawable changes its appearance based on state,\n     *         false otherwise.\n     * @see #setState(int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this drawable has at least one state spec explicitly\n     * specifying {@link android.R.attr#state_focused}.\n     *\n     * <p>Note: A View uses a {@link Drawable} instance as its background and it\n     * changes its appearance based on a state. On keyboard devices, it should\n     * specify its {@link android.R.attr#state_focused} to make sure the user\n     * knows which view is holding the focus.</p>\n     *\n     * @return {@code true} if {@link android.R.attr#state_focused} is specified\n     * for this drawable.\n     ",
    "links" : [ "android.R.attr#state_focused", "android.graphics.drawable.Drawable" ]
  }, {
    "name" : "public boolean setState(@NonNull final int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "\n     * Specify a set of states for the drawable. These are use-case specific,\n     * so see the relevant documentation. As an example, the background for\n     * widgets like Button understand the following states:\n     * [{@link android.R.attr#state_focused},\n     *  {@link android.R.attr#state_pressed}].\n     *\n     * <p>If the new state you are supplying causes the appearance of the\n     * Drawable to change, then it is responsible for calling\n     * {@link #invalidateSelf} in order to have itself redrawn, <em>and</em>\n     * true will be returned from this function.\n     *\n     * <p>Note: The Drawable holds a reference on to <var>stateSet</var>\n     * until a new state array is given to it, so you must not modify this\n     * array during that time.</p>\n     *\n     * @param stateSet The new set of states to be displayed.\n     *\n     * @return Returns true if this change in state has caused the appearance\n     * of the Drawable to change (hence requiring an invalidate), otherwise\n     * returns false.\n     ",
    "links" : [ "android.R.attr#state_focused", "android.R.attr#state_pressed", "#invalidateSelf" ]
  }, {
    "name" : "public int[] getState()",
    "returnType" : "int[]",
    "comment" : "\n     * Describes the current state, as a union of primitive states, such as\n     * {@link android.R.attr#state_focused},\n     * {@link android.R.attr#state_selected}, etc.\n     * Some drawables may modify their imagery based on the selected state.\n     * @return An array of resource Ids describing the current state.\n     ",
    "links" : [ "android.R.attr#state_selected", "android.R.attr#state_focused" ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "\n     * If this Drawable does transition animations between states, ask that\n     * it immediately jump to the current state and skip any active animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCurrent()",
    "returnType" : "Drawable",
    "comment" : "\n     * @return The current drawable that will be used by this drawable. For simple drawables, this\n     *         is just the drawable itself. For drawables that change state like\n     *         {@link StateListDrawable} and {@link LevelListDrawable} this will be the child drawable\n     *         currently in use.\n     ",
    "links" : [ "android.graphics.drawable.StateListDrawable", "android.graphics.drawable.LevelListDrawable" ]
  }, {
    "name" : "public final boolean setLevel(@IntRange(from = 0, to = 10000) int level)",
    "returnType" : "boolean",
    "comment" : "\n     * Specify the level for the drawable.  This allows a drawable to vary its\n     * imagery based on a continuous controller, for example to show progress\n     * or volume level.\n     *\n     * <p>If the new level you are supplying causes the appearance of the\n     * Drawable to change, then it is responsible for calling\n     * {@link #invalidateSelf} in order to have itself redrawn, <em>and</em>\n     * true will be returned from this function.\n     *\n     * @param level The new level, from 0 (minimum) to 10000 (maximum).\n     *\n     * @return Returns true if this change in level has caused the appearance\n     * of the Drawable to change (hence requiring an invalidate), otherwise\n     * returns false.\n     ",
    "links" : [ "#invalidateSelf" ]
  }, {
    "name" : "public final int getLevel()",
    "returnType" : "int",
    "comment" : "\n     * Retrieve the current level.\n     *\n     * @return int Current level, from 0 (minimum) to 10000 (maximum).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "\n     * Set whether this Drawable is visible.  This generally does not impact\n     * the Drawable's behavior, but is a hint that can be used by some\n     * Drawables, for example, to decide whether run animations.\n     *\n     * @param visible Set to true if visible, false if not.\n     * @param restart You can supply true here to force the drawable to behave\n     *                as if it has just become visible, even if it had last\n     *                been set visible.  Used for example to force animations\n     *                to restart.\n     *\n     * @return boolean Returns true if the new visibility is different than\n     *         its previous state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "\n     * Set whether this Drawable is automatically mirrored when its layout direction is RTL\n     * (right-to left). See {@link android.util.LayoutDirection}.\n     *\n     * @param mirrored Set to true if the Drawable should be mirrored, false if not.\n     ",
    "links" : [ "android.util.LayoutDirection" ]
  }, {
    "name" : "public boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if this Drawable will be automatically mirrored  when its layout direction is RTL\n     * right-to-left. See {@link android.util.LayoutDirection}.\n     *\n     * @return boolean Returns true if this Drawable will be automatically mirrored.\n     ",
    "links" : [ "android.util.LayoutDirection" ]
  }, {
    "name" : "public void applyTheme(@NonNull @SuppressWarnings(\"unused\") Theme t)",
    "returnType" : "void",
    "comment" : "\n     * Applies the specified theme to this Drawable and its children.\n     *\n     * @param t the theme to apply\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getOpacity()",
    "returnType" : "int",
    "comment" : "\n     * Return the opacity/transparency of this Drawable.  The returned value is\n     * one of the abstract format constants in\n     * {@link android.graphics.PixelFormat}:\n     * {@link android.graphics.PixelFormat#UNKNOWN},\n     * {@link android.graphics.PixelFormat#TRANSLUCENT},\n     * {@link android.graphics.PixelFormat#TRANSPARENT}, or\n     * {@link android.graphics.PixelFormat#OPAQUE}.\n     *\n     * <p>An OPAQUE drawable is one that draws all all content within its bounds, completely\n     * covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing\n     * within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable\n     * is a drawable in any other state, where the drawable will draw some, but not all,\n     * of the content within its bounds and at least some content behind the drawable will\n     * be visible. If the visibility of the drawable's contents cannot be determined, the\n     * safest/best return value is TRANSLUCENT.\n     *\n     * <p>Generally a Drawable should be as conservative as possible with the\n     * value it returns.  For example, if it contains multiple child drawables\n     * and only shows one of them at a time, if only one of the children is\n     * TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be\n     * returned.  You can use the method {@link #resolveOpacity} to perform a\n     * standard reduction of two opacities to the appropriate single output.\n     *\n     * <p>Note that the returned value does not necessarily take into account a\n     * custom alpha or color filter that has been applied by the client through\n     * the {@link #setAlpha} or {@link #setColorFilter} methods. Some subclasses,\n     * such as {@link BitmapDrawable}, {@link ColorDrawable}, and {@link GradientDrawable},\n     * do account for the value of {@link #setAlpha}, but the general behavior is dependent\n     * upon the implementation of the subclass.\n     *\n     * @deprecated This method is no longer used in graphics optimizations\n     *\n     * @return int The opacity class of the Drawable.\n     *\n     * @see android.graphics.PixelFormat\n     ",
    "links" : [ "android.graphics.PixelFormat#UNKNOWN", "android.graphics.PixelFormat#TRANSPARENT", "android.graphics.PixelFormat#OPAQUE", "#setColorFilter", "android.graphics.PixelFormat#TRANSLUCENT", "android.graphics.drawable.GradientDrawable", "android.graphics.drawable.ColorDrawable", "#resolveOpacity", "android.graphics.drawable.BitmapDrawable", "android.graphics.PixelFormat", "#setAlpha" ]
  }, {
    "name" : "public static int resolveOpacity(@PixelFormat.Opacity int op1, @PixelFormat.Opacity int op2)",
    "returnType" : "int",
    "comment" : "\n     * Return the appropriate opacity value for two source opacities.  If\n     * either is UNKNOWN, that is returned; else, if either is TRANSLUCENT,\n     * that is returned; else, if either is TRANSPARENT, that is returned;\n     * else, OPAQUE is returned.\n     *\n     * <p>This is to help in implementing {@link #getOpacity}.\n     *\n     * @param op1 One opacity value.\n     * @param op2 Another opacity value.\n     *\n     * @return int The combined opacity value.\n     *\n     * @see #getOpacity\n     ",
    "links" : [ "#getOpacity" ]
  }, {
    "name" : "public Region getTransparentRegion()",
    "returnType" : "Region",
    "comment" : "\n     * Returns a Region representing the part of the Drawable that is completely\n     * transparent.  This can be used to perform drawing operations, identifying\n     * which parts of the target will not change when rendering the Drawable.\n     * The default implementation returns null, indicating no transparent\n     * region; subclasses can optionally override this to return an actual\n     * Region if they want to supply this optimization information, but it is\n     * not required that they do so.\n     *\n     * @return Returns null if the Drawables has no transparent region to\n     * report, else a Region holding the parts of the Drawable's bounds that\n     * are transparent.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(@NonNull int[] state)",
    "returnType" : "boolean",
    "comment" : "\n     * Override this in your subclass to change appearance if you recognize the\n     * specified state.\n     *\n     * @return Returns true if the state change has caused the appearance of\n     * the Drawable to change (that is, it needs to be drawn), else false\n     * if it looks the same and there is no need to redraw it since its\n     * last state.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : " Override this in your subclass to change appearance if you vary based\n     *  on level.\n     * @return Returns true if the level change has caused the appearance of\n     * the Drawable to change (that is, it needs to be drawn), else false\n     * if it looks the same and there is no need to redraw it since its\n     * last level.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(@NonNull Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Override this in your subclass to change appearance if you vary based on\n     * the bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the drawable's intrinsic width.\n     * <p>\n     * Intrinsic width is the width at which the drawable would like to be laid\n     * out, including any inherent padding. If the drawable has no intrinsic\n     * width, such as a solid color, this method returns -1.\n     *\n     * @return the intrinsic width, or -1 if no intrinsic width\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the drawable's intrinsic height.\n     * <p>\n     * Intrinsic height is the height at which the drawable would like to be\n     * laid out, including any inherent padding. If the drawable has no\n     * intrinsic height, such as a solid color, this method returns -1.\n     *\n     * @return the intrinsic height, or -1 if no intrinsic height\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum width suggested by this Drawable. If a View uses this\n     * Drawable as a background, it is suggested that the View use at least this\n     * value for its width. (There will be some scenarios where this will not be\n     * possible.) This value should INCLUDE any padding.\n     *\n     * @return The minimum width suggested by this Drawable. If this Drawable\n     *         doesn't have a suggested minimum width, 0 is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum height suggested by this Drawable. If a View uses this\n     * Drawable as a background, it is suggested that the View use at least this\n     * value for its height. (There will be some scenarios where this will not be\n     * possible.) This value should INCLUDE any padding.\n     *\n     * @return The minimum height suggested by this Drawable. If this Drawable\n     *         doesn't have a suggested minimum height, 0 is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(@NonNull Rect padding)",
    "returnType" : "boolean",
    "comment" : "\n     * Return in padding the insets suggested by this Drawable for placing\n     * content inside the drawable's bounds. Positive values move toward the\n     * center of the Drawable (set Rect.inset).\n     *\n     * @return true if this drawable actually has a padding, else false. When false is returned,\n     * the padding is always set to 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Return in insets the layout insets suggested by this Drawable for use with alignment\n     * operations during layout.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "\n     * Called to get the drawable to populate the Outline that defines its drawing area.\n     * <p>\n     * This method is called by the default {@link android.view.ViewOutlineProvider} to define\n     * the outline of the View.\n     * <p>\n     * The default behavior defines the outline to be the bounding rectangle of 0 alpha.\n     * Subclasses that wish to convey a different shape or alpha value must override this method.\n     *\n     * @see android.view.View#setOutlineProvider(android.view.ViewOutlineProvider)\n     ",
    "links" : [ "android.view.ViewOutlineProvider" ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "\n     * Make this drawable mutable. This operation cannot be reversed. A mutable\n     * drawable is guaranteed to not share its state with any other drawable.\n     * This is especially useful when you need to modify properties of drawables\n     * loaded from resources. By default, all drawables instances loaded from\n     * the same resource share a common state; if you modify the state of one\n     * instance, all the other instances will receive the same modification.\n     *\n     * Calling this method on a mutable Drawable will have no effect.\n     *\n     * @return This drawable.\n     * @see ConstantState\n     * @see #getConstantState()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * Clears the mutated state, allowing this drawable to be cached and\n     * mutated again.\n     * <p>\n     * This is hidden because only framework drawables can be cached, so\n     * custom drawables don't need to support constant state, mutate(), or\n     * clearMutated().\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromStream(@Nullable InputStream is, @Nullable String srcName)",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from an inputstream\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable String srcName)",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from an inputstream, using the given resources and\n     * value to determine density information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable String srcName, @Nullable BitmapFactory.Options opts)",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from an inputstream, using the given resources and\n     * value to determine density information.\n     *\n     * @deprecated Prefer the version without an Options object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Drawable getBitmapDrawable(Resources res, @Nullable TypedValue value, @NonNull InputStream is)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from an XML document. For more information on how to\n     * create resources in XML, see\n     * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from an XML document using an optional {@link Theme}.\n     * For more information on how to create resources in XML, see\n     * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable Resources</a>.\n     ",
    "links" : [ "android.content.res.Resources.Theme" ]
  }, {
    "name" : "public static Drawable createFromXmlForDensity(@NonNull Resources r, @NonNull XmlPullParser parser, int density, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Version of {@link #createFromXml(Resources, XmlPullParser, Theme)} that accepts a density\n     * override.\n     * @hide\n     ",
    "links" : [ "#createFromXml(Resources" ]
  }, {
    "name" : "public static Drawable createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Create from inside an XML document.  Called on a parser positioned at\n     * a tag in an XML document, tries to create a Drawable from that tag.\n     * Returns null if the tag is not a valid drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Drawable createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from inside an XML document using an optional\n     * {@link Theme}. Called on a parser positioned at a tag in an XML\n     * document, tries to create a Drawable from that tag. Returns {@code null}\n     * if the tag is not a valid drawable.\n     ",
    "links" : [ "android.content.res.Resources.Theme" ]
  }, {
    "name" : " static Drawable createFromXmlInnerForDensity(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, int density, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * Version of {@link #createFromXmlInner(Resources, XmlPullParser, AttributeSet, Theme)} that\n     * accepts an override density.\n     ",
    "links" : [ "#createFromXmlInner(Resources" ]
  }, {
    "name" : "public static Drawable createFromPath(String pathName)",
    "returnType" : "Drawable",
    "comment" : "\n     * Create a drawable from file path name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflate this Drawable from an XML resource. Does not apply a theme.\n     *\n     * @see #inflate(Resources, XmlPullParser, AttributeSet, Theme)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflate this Drawable from an XML resource optionally styled by a theme.\n     * This can't be called more than once for each Drawable. Note that framework may have called\n     * this once to create the Drawable instance from XML resource.\n     *\n     * @param r Resources used to resolve attribute values\n     * @param parser XML parser from which to inflate this Drawable\n     * @param attrs Base set of attribute values\n     * @param theme Theme to apply, may be null\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : " void inflateWithAttributes(@NonNull @SuppressWarnings(\"unused\") Resources r, @NonNull @SuppressWarnings(\"unused\") XmlPullParser parser, @NonNull TypedArray attrs, @AttrRes int visibleAttr) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Inflate a Drawable from an XML resource.\n     *\n     * @throws XmlPullParserException\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setSrcDensityOverride(int density)",
    "returnType" : "void",
    "comment" : "\n     * Sets the source override density for this Drawable. If non-zero, this density is to be used\n     * for any calls to {@link Resources#getDrawableForDensity(int, int, Theme)} or\n     * {@link Resources#getValueForDensity(int, int, TypedValue, boolean)}.\n     * @hide\n     ",
    "links" : [ "android.content.res.Resources#getValueForDensity(int", "android.content.res.Resources#getDrawableForDensity(int" ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "\n     * Return a {@link ConstantState} instance that holds the shared state of this Drawable.\n     *\n     * @return The ConstantState associated to that Drawable.\n     * @see ConstantState\n     * @see Drawable#mutate()\n     ",
    "links" : [ "ConstantState" ]
  }, {
    "name" : "private static Drawable drawableFromBitmap(Resources res, Bitmap bm, byte[] np, Rect pad, Rect layoutBounds, String srcName)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " PorterDuffColorFilter updateTintFilter(@Nullable PorterDuffColorFilter tintFilter, @Nullable ColorStateList tint, @Nullable PorterDuff.Mode tintMode)",
    "returnType" : "PorterDuffColorFilter",
    "comment" : "\n     * Ensures the tint filter is consistent with the current tint color and\n     * mode.\n     ",
    "links" : [ ]
  }, {
    "name" : " BlendModeColorFilter updateBlendModeFilter(@Nullable BlendModeColorFilter blendFilter, @Nullable ColorStateList tint, @Nullable BlendMode blendMode)",
    "returnType" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static TypedArray obtainAttributes(@NonNull Resources res, @Nullable Theme theme, @NonNull AttributeSet set, @NonNull int[] attrs)",
    "returnType" : "TypedArray",
    "comment" : "\n     * Obtains styled attributes from the theme, if available, or unstyled\n     * resources if the theme is null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static float scaleFromDensity(float pixels, int sourceDensity, int targetDensity)",
    "returnType" : "float",
    "comment" : "\n     * Scales a floating-point pixel value from the source density to the\n     * target density.\n     *\n     * @param pixels the pixel value for use in source density\n     * @param sourceDensity the source density\n     * @param targetDensity the target density\n     * @return the scaled pixel value for use in target density\n     ",
    "links" : [ ]
  }, {
    "name" : " static int scaleFromDensity(int pixels, int sourceDensity, int targetDensity, boolean isSize)",
    "returnType" : "int",
    "comment" : "\n     * Scales a pixel value from the source density to the target density,\n     * optionally handling the resulting pixel value as a size rather than an\n     * offset.\n     * <p>\n     * A size conversion involves rounding the base value and ensuring that\n     * a non-zero base value is at least one pixel in size.\n     * <p>\n     * An offset conversion involves simply truncating the base value to an\n     * integer.\n     *\n     * @param pixels the pixel value for use in source density\n     * @param sourceDensity the source density\n     * @param targetDensity the target density\n     * @param isSize {@code true} to handle the resulting scaled value as a\n     *               size, or {@code false} to handle it as an offset\n     * @return the scaled pixel value for use in target density\n     ",
    "links" : [ ]
  }, {
    "name" : " static int resolveDensity(@Nullable Resources r, int parentDensity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void rethrowAsRuntimeException(@NonNull Exception cause) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n     * Re-throws an exception as a {@link RuntimeException} with an empty stack\n     * trace to avoid cluttering the log. The original exception's stack trace\n     * will still be included.\n     *\n     * @param cause the exception to re-throw\n     * @throws RuntimeException\n     ",
    "links" : [ "RuntimeException" ]
  }, {
    "name" : "public static PorterDuff.Mode parseTintMode(int value, Mode defaultMode)",
    "returnType" : "PorterDuff.Mode",
    "comment" : "\n     * Parses a {@link android.graphics.PorterDuff.Mode} from a tintMode\n     * attribute's enum value.\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.PorterDuff.Mode" ]
  }, {
    "name" : "public static BlendMode parseBlendMode(int value, BlendMode defaultMode)",
    "returnType" : "BlendMode",
    "comment" : "\n     * Parses a {@link android.graphics.BlendMode} from a tintMode\n     * attribute's enum value.\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.BlendMode" ]
  } ],
  "methodNames" : [ "public abstract void draw(@NonNull Canvas canvas)", "public void setBounds(int left, int top, int right, int bottom)", "public void setBounds(@NonNull Rect bounds)", "public final void copyBounds(@NonNull Rect bounds)", "public final Rect copyBounds()", "public final Rect getBounds()", "public Rect getDirtyBounds()", "public void setChangingConfigurations(@Config int configs)", "public int getChangingConfigurations()", "public void setDither(boolean dither)", "public void setFilterBitmap(boolean filter)", "public boolean isFilterBitmap()", "public final void setCallback(@Nullable Callback cb)", "public Callback getCallback()", "public void invalidateSelf()", "public void scheduleSelf(@NonNull Runnable what, long when)", "public void unscheduleSelf(@NonNull Runnable what)", "public int getLayoutDirection()", "public final boolean setLayoutDirection(@View.ResolvedLayoutDir int layoutDirection)", "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)", "public abstract void setAlpha(@IntRange(from = 0, to = 255) int alpha)", "public int getAlpha()", "public void setXfermode(@Nullable Xfermode mode)", "public abstract void setColorFilter(@Nullable ColorFilter colorFilter)", "public void setColorFilter(@ColorInt int color, @NonNull PorterDuff.Mode mode)", "public void setTint(@ColorInt int tintColor)", "public void setTintList(@Nullable ColorStateList tint)", "public void setTintMode(@Nullable PorterDuff.Mode tintMode)", "public void setTintBlendMode(@Nullable BlendMode blendMode)", "public ColorFilter getColorFilter()", "public void clearColorFilter()", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(@NonNull Rect outRect)", "public boolean isProjected()", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public boolean setState(@NonNull final int[] stateSet)", "public int[] getState()", "public void jumpToCurrentState()", "public Drawable getCurrent()", "public final boolean setLevel(@IntRange(from = 0, to = 10000) int level)", "public final int getLevel()", "public boolean setVisible(boolean visible, boolean restart)", "public final boolean isVisible()", "public void setAutoMirrored(boolean mirrored)", "public boolean isAutoMirrored()", "public void applyTheme(@NonNull @SuppressWarnings(\"unused\") Theme t)", "public boolean canApplyTheme()", "public abstract int getOpacity()", "public static int resolveOpacity(@PixelFormat.Opacity int op1, @PixelFormat.Opacity int op2)", "public Region getTransparentRegion()", "protected boolean onStateChange(@NonNull int[] state)", "protected boolean onLevelChange(int level)", "protected void onBoundsChange(@NonNull Rect bounds)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public int getMinimumWidth()", "public int getMinimumHeight()", "public boolean getPadding(@NonNull Rect padding)", "public Insets getOpticalInsets()", "public void getOutline(@NonNull Outline outline)", "public Drawable mutate()", "public void clearMutated()", "public static Drawable createFromStream(@Nullable InputStream is, @Nullable String srcName)", "public static Drawable createFromResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable String srcName)", "public static Drawable createFromResourceStream(@Nullable Resources res, @Nullable TypedValue value, @Nullable InputStream is, @Nullable String srcName, @Nullable BitmapFactory.Options opts)", "private static Drawable getBitmapDrawable(Resources res, @Nullable TypedValue value, @NonNull InputStream is)", "public static Drawable createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser) throws XmlPullParserException, IOException", "public static Drawable createFromXml(@NonNull Resources r, @NonNull XmlPullParser parser, @Nullable Theme theme) throws XmlPullParserException, IOException", "public static Drawable createFromXmlForDensity(@NonNull Resources r, @NonNull XmlPullParser parser, int density, @Nullable Theme theme) throws XmlPullParserException, IOException", "public static Drawable createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs) throws XmlPullParserException, IOException", "public static Drawable createFromXmlInner(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", " static Drawable createFromXmlInnerForDensity(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, int density, @Nullable Theme theme) throws XmlPullParserException, IOException", "public static Drawable createFromPath(String pathName)", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs) throws XmlPullParserException, IOException", "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", " void inflateWithAttributes(@NonNull @SuppressWarnings(\"unused\") Resources r, @NonNull @SuppressWarnings(\"unused\") XmlPullParser parser, @NonNull TypedArray attrs, @AttrRes int visibleAttr) throws XmlPullParserException, IOException", " final void setSrcDensityOverride(int density)", "public ConstantState getConstantState()", "private static Drawable drawableFromBitmap(Resources res, Bitmap bm, byte[] np, Rect pad, Rect layoutBounds, String srcName)", " PorterDuffColorFilter updateTintFilter(@Nullable PorterDuffColorFilter tintFilter, @Nullable ColorStateList tint, @Nullable PorterDuff.Mode tintMode)", " BlendModeColorFilter updateBlendModeFilter(@Nullable BlendModeColorFilter blendFilter, @Nullable ColorStateList tint, @Nullable BlendMode blendMode)", "protected static TypedArray obtainAttributes(@NonNull Resources res, @Nullable Theme theme, @NonNull AttributeSet set, @NonNull int[] attrs)", " static float scaleFromDensity(float pixels, int sourceDensity, int targetDensity)", " static int scaleFromDensity(int pixels, int sourceDensity, int targetDensity, boolean isSize)", " static int resolveDensity(@Nullable Resources r, int parentDensity)", " static void rethrowAsRuntimeException(@NonNull Exception cause) throws RuntimeException", "public static PorterDuff.Mode parseTintMode(int value, Mode defaultMode)", "public static BlendMode parseBlendMode(int value, BlendMode defaultMode)" ],
  "variableNames" : [ "ZERO_BOUNDS_RECT", "DEFAULT_TINT_MODE", "DEFAULT_BLEND_MODE", "mStateSet", "mLevel", "mChangingConfigurations", "mBounds", "mCallback", "mVisible", "mLayoutDirection", "mSrcDensityOverride", "mSetBlendModeInvoked", "mSetTintModeInvoked" ]
}