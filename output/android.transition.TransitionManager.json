{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/transition/TransitionManager.java",
  "packageName" : "android.transition",
  "className" : "TransitionManager",
  "comment" : "\n * This class manages the set of transitions that fire when there is a\n * change of {@link Scene}. To use the manager, add scenes along with\n * transition objects with calls to {@link #setTransition(Scene, Transition)}\n * or {@link #setTransition(Scene, Scene, Transition)}. Setting specific\n * transitions for scene changes is not required; by default, a Scene change\n * will use {@link AutoTransition} to do something reasonable for most\n * situations. Specifying other transitions for particular scene changes is\n * only necessary if the application wants different transition behavior\n * in these situations.\n *\n * <p>TransitionManagers can be declared in XML resource files inside the\n * <code>res/transition</code> directory. TransitionManager resources consist of\n * the <code>transitionManager</code>tag name, containing one or more\n * <code>transition</code> tags, each of which describe the relationship of\n * that transition to the from/to scene information in that tag.\n * For example, here is a resource file that declares several scene\n * transitions:</p>\n *\n * {@sample development/samples/ApiDemos/res/transition/transitions_mgr.xml TransitionManager}\n *\n * <p>For each of the <code>fromScene</code> and <code>toScene</code> attributes,\n * there is a reference to a standard XML layout file. This is equivalent to\n * creating a scene from a layout in code by calling\n * {@link Scene#getSceneForLayout(ViewGroup, int, Context)}. For the\n * <code>transition</code> attribute, there is a reference to a resource\n * file in the <code>res/transition</code> directory which describes that\n * transition.</p>\n *\n * Information on XML resource descriptions for transitions can be found for\n * {@link android.R.styleable#Transition}, {@link android.R.styleable#TransitionSet},\n * {@link android.R.styleable#TransitionTarget}, {@link android.R.styleable#Fade},\n * and {@link android.R.styleable#TransitionManager}.\n ",
  "links" : [ "android.R.styleable#Fade", "android.R.styleable#TransitionTarget", "android.transition.Scene", "#setTransition(Scene", "android.transition.Scene#getSceneForLayout(ViewGroup", "android.R.styleable#Transition", "android.R.styleable#TransitionSet", "android.transition.AutoTransition", "android.R.styleable#TransitionManager" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultTransition",
    "type" : "Transition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STRINGS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSceneTransitions",
    "type" : "ArrayMap<Scene, Transition>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScenePairTransitions",
    "type" : "ArrayMap<Scene, ArrayMap<Scene, Transition>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRunningTransitions",
    "type" : "ThreadLocal<WeakReference<ArrayMap<ViewGroup, ArrayList<Transition>>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPendingTransitions",
    "type" : "ArrayList<ViewGroup>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDefaultTransition(Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the transition to be used for any scene change for which no\n     * other transition is explicitly set. The initial value is\n     * an {@link AutoTransition} instance.\n     *\n     * @param transition The default transition to be used for scene changes.\n     *\n     * @hide pending later changes\n     ",
    "links" : [ "android.transition.AutoTransition" ]
  }, {
    "name" : "public static Transition getDefaultTransition()",
    "returnType" : "Transition",
    "comment" : "\n     * Gets the current default transition. The initial value is an {@link\n     * AutoTransition} instance.\n     *\n     * @return The current default transition.\n     * @see #setDefaultTransition(Transition)\n     *\n     * @hide pending later changes\n     ",
    "links" : [ "android.transition.AutoTransition" ]
  }, {
    "name" : "public void setTransition(Scene scene, Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets a specific transition to occur when the given scene is entered.\n     *\n     * @param scene The scene which, when applied, will cause the given\n     * transition to run.\n     * @param transition The transition that will play when the given scene is\n     * entered. A value of null will result in the default behavior of\n     * using the default transition instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransition(Scene fromScene, Scene toScene, Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Sets a specific transition to occur when the given pair of scenes is\n     * exited/entered.\n     *\n     * @param fromScene The scene being exited when the given transition will\n     * be run\n     * @param toScene The scene being entered when the given transition will\n     * be run\n     * @param transition The transition that will play when the given scene is\n     * entered. A value of null will result in the default behavior of\n     * using the default transition instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transition getTransition(Scene scene)",
    "returnType" : "Transition",
    "comment" : "\n     * Returns the Transition for the given scene being entered. The result\n     * depends not only on the given scene, but also the scene which the\n     * {@link Scene#getSceneRoot() sceneRoot} of the Scene is currently in.\n     *\n     * @param scene The scene being entered\n     * @return The Transition to be used for the given scene change. If no\n     * Transition was specified for this scene change, the default transition\n     * will be used instead.\n     * @hide\n     ",
    "links" : [ "android.transition.Scene#getSceneRoot()" ]
  }, {
    "name" : "private static void changeScene(Scene scene, Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * This is where all of the work of a transition/scene-change is\n     * orchestrated. This method captures the start values for the given\n     * transition, exits the current Scene, enters the new scene, captures\n     * the end values for the transition, and finally plays the\n     * resulting values-populated transition.\n     *\n     * @param scene The scene being entered\n     * @param transition The transition to play for this scene change\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayMap<ViewGroup, ArrayList<Transition>> getRunningTransitions()",
    "returnType" : "ArrayMap<ViewGroup, ArrayList<Transition>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void sceneChangeRunTransition(final ViewGroup sceneRoot, final Transition transition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void sceneChangeSetup(ViewGroup sceneRoot, Transition transition)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void transitionTo(Scene scene)",
    "returnType" : "void",
    "comment" : "\n     * Change to the given scene, using the\n     * appropriate transition for this particular scene change\n     * (as specified to the TransitionManager, or the default\n     * if no such transition exists).\n     *\n     * @param scene The Scene to change to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void go(Scene scene)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to simply change to the given scene using\n     * the default transition for TransitionManager.\n     *\n     * @param scene The Scene to change to\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void go(Scene scene, Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to simply change to the given scene using\n     * the given transition.\n     *\n     * <p>Passing in <code>null</code> for the transition parameter will\n     * result in the scene changing without any transition running, and is\n     * equivalent to calling {@link Scene#exit()} on the scene root's\n     * current scene, followed by {@link Scene#enter()} on the scene\n     * specified by the <code>scene</code> parameter.</p>\n     *\n     * @param scene The Scene to change to\n     * @param transition The transition to use for this scene change. A\n     * value of null causes the scene change to happen with no transition.\n     ",
    "links" : [ "android.transition.Scene#enter()", "android.transition.Scene#exit()" ]
  }, {
    "name" : "public static void beginDelayedTransition(final ViewGroup sceneRoot)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to animate, using the default transition,\n     * to a new scene defined by all changes within the given scene root between\n     * calling this method and the next rendering frame.\n     * Equivalent to calling {@link #beginDelayedTransition(ViewGroup, Transition)}\n     * with a value of <code>null</code> for the <code>transition</code> parameter.\n     *\n     * @param sceneRoot The root of the View hierarchy to run the transition on.\n     ",
    "links" : [ "#beginDelayedTransition(ViewGroup" ]
  }, {
    "name" : "public static void beginDelayedTransition(final ViewGroup sceneRoot, Transition transition)",
    "returnType" : "void",
    "comment" : "\n     * Convenience method to animate to a new scene defined by all changes within\n     * the given scene root between calling this method and the next rendering frame.\n     * Calling this method causes TransitionManager to capture current values in the\n     * scene root and then post a request to run a transition on the next frame.\n     * At that time, the new values in the scene root will be captured and changes\n     * will be animated. There is no need to create a Scene; it is implied by\n     * changes which take place between calling this method and the next frame when\n     * the transition begins.\n     *\n     * <p>Calling this method several times before the next frame (for example, if\n     * unrelated code also wants to make dynamic changes and run a transition on\n     * the same scene root), only the first call will trigger capturing values\n     * and exiting the current scene. Subsequent calls to the method with the\n     * same scene root during the same frame will be ignored.</p>\n     *\n     * <p>Passing in <code>null</code> for the transition parameter will\n     * cause the TransitionManager to use its default transition.</p>\n     *\n     * @param sceneRoot The root of the View hierarchy to run the transition on.\n     * @param transition The transition to use for this change. A\n     * value of null causes the TransitionManager to use the default transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void endTransitions(final ViewGroup sceneRoot)",
    "returnType" : "void",
    "comment" : "\n     * Ends all pending and ongoing transitions on the specified scene root.\n     *\n     * @param sceneRoot The root of the View hierarchy to end transitions on.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDefaultTransition(Transition transition)", "public static Transition getDefaultTransition()", "public void setTransition(Scene scene, Transition transition)", "public void setTransition(Scene fromScene, Scene toScene, Transition transition)", "public Transition getTransition(Scene scene)", "private static void changeScene(Scene scene, Transition transition)", "private static ArrayMap<ViewGroup, ArrayList<Transition>> getRunningTransitions()", "private static void sceneChangeRunTransition(final ViewGroup sceneRoot, final Transition transition)", "private static void sceneChangeSetup(ViewGroup sceneRoot, Transition transition)", "public void transitionTo(Scene scene)", "public static void go(Scene scene)", "public static void go(Scene scene, Transition transition)", "public static void beginDelayedTransition(final ViewGroup sceneRoot)", "public static void beginDelayedTransition(final ViewGroup sceneRoot, Transition transition)", "public static void endTransitions(final ViewGroup sceneRoot)" ],
  "variableNames" : [ "LOG_TAG", "sDefaultTransition", "EMPTY_STRINGS", "mSceneTransitions", "mScenePairTransitions", "sRunningTransitions", "sPendingTransitions" ]
}