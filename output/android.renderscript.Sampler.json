{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/Sampler.java",
  "packageName" : "android.renderscript",
  "className" : "Sampler",
  "comment" : "\n * Sampler object that defines how Allocations can be read as textures within a\n * kernel. Samplers are used in conjunction with the {@code rsSample} runtime\n * function to return values from normalized coordinates.\n *\n * Any Allocation used with a Sampler must have been created with {@link\n * android.renderscript.Allocation#USAGE_GRAPHICS_TEXTURE}; using a Sampler on\n * an {@link android.renderscript.Allocation} that was not created with {@link\n * android.renderscript.Allocation#USAGE_GRAPHICS_TEXTURE} is undefined.\n *",
  "variables" : [ {
    "name" : "mMin",
    "type" : "Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMag",
    "type" : "Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapS",
    "type" : "Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapT",
    "type" : "Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWrapR",
    "type" : "Value",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAniso",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Value getMinification()",
    "returnType" : "Value",
    "comment" : "\n     * @return minification setting for the sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public Value getMagnification()",
    "returnType" : "Value",
    "comment" : "\n     * @return magnification setting for the sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public Value getWrapS()",
    "returnType" : "Value",
    "comment" : "\n     * @return S wrapping mode for the sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public Value getWrapT()",
    "returnType" : "Value",
    "comment" : "\n     * @return T wrapping mode for the sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getAnisotropy()",
    "returnType" : "float",
    "comment" : "\n     * @return anisotropy setting for the sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler CLAMP_NEAREST(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to nearest and wrap modes set to\n     * clamp.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler CLAMP_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to linear and wrap modes set to\n     * clamp.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler CLAMP_LINEAR_MIP_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with mag set to linear, min linear mipmap linear, and\n     * wrap modes set to clamp.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler WRAP_NEAREST(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to nearest and wrap modes set to\n     * wrap.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler WRAP_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to linear and wrap modes set to\n     * wrap.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler WRAP_LINEAR_MIP_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with mag set to linear, min linear mipmap linear, and\n     * wrap modes set to wrap.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler MIRRORED_REPEAT_NEAREST(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to nearest and wrap modes set to\n     * mirrored repeat.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler MIRRORED_REPEAT_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to linear and wrap modes set to\n     * mirrored repeat.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(RenderScript rs)",
    "returnType" : "Sampler",
    "comment" : "\n     * Retrieve a sampler with min and mag set to linear and wrap modes set to\n     * mirrored repeat.\n     *\n     * @param rs Context to which the sampler will belong.\n     *\n     * @return Sampler\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMin", "mMag", "mWrapS", "mWrapT", "mWrapR", "mAniso" ],
  "methodNames" : [ "public Value getMinification()", "public Value getMagnification()", "public Value getWrapS()", "public Value getWrapT()", "public float getAnisotropy()", "public static Sampler CLAMP_NEAREST(RenderScript rs)", "public static Sampler CLAMP_LINEAR(RenderScript rs)", "public static Sampler CLAMP_LINEAR_MIP_LINEAR(RenderScript rs)", "public static Sampler WRAP_NEAREST(RenderScript rs)", "public static Sampler WRAP_LINEAR(RenderScript rs)", "public static Sampler WRAP_LINEAR_MIP_LINEAR(RenderScript rs)", "public static Sampler MIRRORED_REPEAT_NEAREST(RenderScript rs)", "public static Sampler MIRRORED_REPEAT_LINEAR(RenderScript rs)", "public static Sampler MIRRORED_REPEAT_LINEAR_MIP_LINEAR(RenderScript rs)" ]
}