{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/CronetEngine.java",
  "packageName" : "org.chromium.net",
  "className" : "CronetEngine",
  "comment" : "\n * An engine to process {@link UrlRequest}s, which uses the best HTTP stack available on the current\n * platform. An instance of this class can be created using {@link Builder}.\n ",
  "links" : [ "Builder", "org.chromium.net.UrlRequest" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVE_REQUEST_COUNT_UNKNOWN",
    "type" : "int",
    "comment" : " The value of the active request count is unknown ",
    "links" : [ ]
  }, {
    "name" : "CONNECTION_METRIC_UNKNOWN",
    "type" : "int",
    "comment" : " The value of a connection metric is unknown. ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The estimate of the effective connection type is unknown.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_OFFLINE",
    "type" : "int",
    "comment" : "\n     * The device is offline.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_SLOW_2G",
    "type" : "int",
    "comment" : "\n     * The estimate of the effective connection type is slow 2G.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_2G",
    "type" : "int",
    "comment" : "\n     * The estimate of the effective connection type is 2G.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_3G",
    "type" : "int",
    "comment" : "\n     * The estimate of the effective connection type is 3G.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "EFFECTIVE_CONNECTION_TYPE_4G",
    "type" : "int",
    "comment" : "\n     * The estimate of the effective connection type is 4G.\n     *\n     * @see #getEffectiveConnectionType\n     ",
    "links" : [ ]
  }, {
    "name" : "UNBIND_NETWORK_HANDLE",
    "type" : "long",
    "comment" : " The value to be used to undo any previous network binding. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract String getVersionString()",
    "returnType" : "String",
    "comment" : " @return a human-readable version string of the engine. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void shutdown()",
    "returnType" : "void",
    "comment" : "\n     * Shuts down the {@link CronetEngine} if there are no active requests, otherwise throws an\n     * exception.\n     *\n     * <p>Cannot be called on network thread - the thread Cronet calls into Executor on (which is\n     * different from the thread the Executor invokes callbacks on). May block until all the {@code\n     * CronetEngine}'s resources have been cleaned up.\n     ",
    "links" : [ "org.chromium.net.CronetEngine" ]
  }, {
    "name" : "public abstract void startNetLogToFile(String fileName, boolean logAll)",
    "returnType" : "void",
    "comment" : "\n     * Starts NetLog logging to a file. The NetLog will contain events emitted by all live\n     * CronetEngines. The NetLog is useful for debugging. The file can be viewed using a Chrome\n     * browser navigated to chrome://net-internals/#import\n     *\n     * @param fileName the complete file path. It must not be empty. If the file exists, it is\n     * truncated before starting. If actively logging, this method is ignored.\n     * @param logAll {@code true} to include basic events, user cookies, credentials and all\n     * transferred bytes in the log. This option presents a privacy risk, since it exposes the\n     * user's credentials, and should only be used with the user's consent and in situations where\n     * the log won't be public. {@code false} to just include basic events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void stopNetLog()",
    "returnType" : "void",
    "comment" : "\n     * Stops NetLog logging and flushes file to disk. If a logging session is not in progress, this\n     * call is ignored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getGlobalMetricsDeltas()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns differences in metrics collected by Cronet since the last call to this method.\n     *\n     * <p>Cronet collects these metrics globally. This means deltas returned by {@code\n     * getGlobalMetricsDeltas()} will include measurements of requests processed by other {@link\n     * CronetEngine} instances. Since this function returns differences in metrics collected since\n     * the last call, and these metrics are collected globally, a call to any {@code CronetEngine}\n     * instance's {@code getGlobalMetricsDeltas()} method will affect the deltas returned by any\n     * other\n     * {@code CronetEngine} instance's {@code getGlobalMetricsDeltas()}.\n     *\n     * <p>Cronet starts collecting these metrics after the first call to {@code\n     * getGlobalMetricsDeltras()}, so the first call returns no useful data as no metrics have yet\n     * been collected.\n     *\n     * @return differences in metrics collected by Cronet, since the last call to {@code\n     * getGlobalMetricsDeltas()}, serialized as a <a\n     * href=https://developers.google.com/protocol-buffers>protobuf\n     * </a>.\n     ",
    "links" : [ "org.chromium.net.CronetEngine" ]
  }, {
    "name" : "public abstract URLConnection openConnection(URL url) throws IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Establishes a new connection to the resource specified by the {@link URL} {@code url}.\n     *\n     * <p><b>Note:</b> Cronet's {@link java.net.HttpURLConnection} implementation is subject to\n     * certain limitations, see {@link #createURLStreamHandlerFactory} for details.\n     *\n     * @param url URL of resource to connect to.\n     * @return an {@link java.net.HttpURLConnection} instance implemented by this CronetEngine.\n     * @throws IOException if an error occurs while opening the connection.\n     ",
    "links" : [ "java.net.HttpURLConnection", "#createURLStreamHandlerFactory", "java.net.URL" ]
  }, {
    "name" : "public abstract URLStreamHandlerFactory createURLStreamHandlerFactory()",
    "returnType" : "URLStreamHandlerFactory",
    "comment" : "\n     * Creates a {@link URLStreamHandlerFactory} to handle HTTP and HTTPS traffic. An instance of\n     * this class can be installed via {@link URL#setURLStreamHandlerFactory} thus using this\n     * CronetEngine by default for all requests created via {@link URL#openConnection}.\n     *\n     * <p>Cronet does not use certain HTTP features provided via the system:\n     *\n     * <ul>\n     *   <li>the HTTP cache installed via {@link HttpResponseCache#install(java.io.File, long)\n     *       HttpResponseCache.install()}\n     *   <li>the HTTP authentication method installed via {@link java.net.Authenticator#setDefault}\n     *   <li>the HTTP cookie storage installed via {@link java.net.CookieHandler#setDefault}\n     * </ul>\n     *\n     * <p>While Cronet supports and encourages requests using the HTTPS protocol, Cronet does not\n     * provide support for the {@link HttpsURLConnection} API. This lack of support also includes\n     * not using certain HTTPS features provided via the system:\n     *\n     * <ul>\n     *   <li>the HTTPS hostname verifier installed via {@link\n     *       HttpsURLConnection#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)\n     *       HttpsURLConnection.setDefaultHostnameVerifier()}\n     *   <li>the HTTPS socket factory installed via {@link\n     *       HttpsURLConnection#setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)\n     *       HttpsURLConnection.setDefaultSSLSocketFactory()}\n     * </ul>\n     *\n     * @return an {@link URLStreamHandlerFactory} instance implemented by this CronetEngine.\n     ",
    "links" : [ "javax.net.ssl.HttpsURLConnection", "java.net.CookieHandler#setDefault", "javax.net.ssl.HttpsURLConnection#setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)", "java.net.Authenticator#setDefault", "javax.net.ssl.HttpsURLConnection#setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)", "java.net.URLStreamHandlerFactory", "java.net.URL#setURLStreamHandlerFactory", "java.net.URL#openConnection", "android.net.http.HttpResponseCache#install(java.io.File" ]
  }, {
    "name" : "public abstract UrlRequest.Builder newUrlRequestBuilder(String url, UrlRequest.Callback callback, Executor executor)",
    "returnType" : "UrlRequest.Builder",
    "comment" : "\n     * Creates a builder for {@link UrlRequest}. All callbacks for generated {@link UrlRequest}\n     * objects will be invoked on {@code executor}'s threads. {@code executor} must not run tasks on\n     * the thread calling {@link Executor#execute} to prevent blocking networking operations and\n     * causing exceptions during shutdown.\n     *\n     * @param url URL for the generated requests.\n     * @param callback callback object that gets invoked on different events.\n     * @param executor {@link Executor} on which all callbacks will be invoked.\n     ",
    "links" : [ "java.util.concurrent.Executor", "java.util.concurrent.Executor#execute", "org.chromium.net.UrlRequest" ]
  }, {
    "name" : "public BidirectionalStream.Builder newBidirectionalStreamBuilder(String url, BidirectionalStream.Callback callback, Executor executor)",
    "returnType" : "BidirectionalStream.Builder",
    "comment" : "\n     * Creates a builder for {@link BidirectionalStream} objects. All callbacks for generated {@code\n     * BidirectionalStream} objects will be invoked on {@code executor}. {@code executor} must not\n     * run tasks on the current thread, otherwise the networking operations may block and exceptions\n     * may be thrown at shutdown time.\n     *\n     * @param url URL for the generated streams.\n     * @param callback the {@link BidirectionalStream.Callback} object that gets invoked upon\n     * different events occurring.\n     * @param executor the {@link Executor} on which {@code callback} methods will be invoked.\n     * @return the created builder.\n     *\n     * {@hide}\n     ",
    "links" : [ "java.util.concurrent.Executor", "BidirectionalStream.Callback", "org.chromium.net.BidirectionalStream" ]
  }, {
    "name" : "public int getActiveRequestCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of active requests.\n     * <p>\n     * A request becomes \"active\" in UrlRequest.start(), assuming that method\n     * does not throw an exception. It becomes inactive when all callbacks have\n     * returned and no additional callbacks can be triggered in the future. In\n     * practice, that means the request is inactive once\n     * onSucceeded/onCanceled/onFailed has returned and all request finished\n     * listeners have returned.\n     *\n     * <a href=\"https://developer.android.com/guide/topics/connectivity/cronet/lifecycle\">Cronet\n     *         requests's lifecycle</a> for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRequestFinishedListener(RequestFinishedInfo.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener that gets called after the end of each request with the request info.\n     *\n     * <p>The listener is called on an {@link java.util.concurrent.Executor} provided by the\n     * listener.\n     *\n     * @param listener the listener for finished requests.\n     ",
    "links" : [ "java.util.concurrent.Executor" ]
  }, {
    "name" : "public void removeRequestFinishedListener(RequestFinishedInfo.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a finished request listener.\n     *\n     * @param listener the listener to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHttpRttMs()",
    "returnType" : "int",
    "comment" : "\n     * Returns the HTTP RTT estimate (in milliseconds) computed by the network quality estimator.\n     * Set to {@link #CONNECTION_METRIC_UNKNOWN} if the value is unavailable. This must be called\n     * after\n     * {@link Builder#enableNetworkQualityEstimator}, and will throw an exception otherwise.\n     *\n     * @return Estimate of the HTTP RTT in milliseconds.\n     ",
    "links" : [ "#CONNECTION_METRIC_UNKNOWN", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public int getTransportRttMs()",
    "returnType" : "int",
    "comment" : "\n     * Returns the transport RTT estimate (in milliseconds) computed by the network quality\n     * estimator. Set to {@link #CONNECTION_METRIC_UNKNOWN} if the value is unavailable. This must\n     * be called after {@link Builder#enableNetworkQualityEstimator}, and will throw an exception\n     * otherwise.\n     *\n     * @return Estimate of the transport RTT in milliseconds.\n     ",
    "links" : [ "#CONNECTION_METRIC_UNKNOWN", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public int getDownstreamThroughputKbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the downstream throughput estimate (in kilobits per second) computed by the network\n     * quality estimator. Set to {@link #CONNECTION_METRIC_UNKNOWN} if the value is unavailable.\n     * This must be called after {@link Builder#enableNetworkQualityEstimator}, and will throw an\n     * exception otherwise.\n     *\n     * @return Estimate of the downstream throughput in kilobits per second.\n     ",
    "links" : [ "#CONNECTION_METRIC_UNKNOWN", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public void startNetLogToDisk(String dirPath, boolean logAll, int maxSize)",
    "returnType" : "void",
    "comment" : "\n     * Starts NetLog logging to a specified directory with a bounded size. The NetLog will contain\n     * events emitted by all live CronetEngines. The NetLog is useful for debugging. Once logging\n     * has stopped {@link #stopNetLog}, the data will be written to netlog.json in {@code dirPath}.\n     * If logging is interrupted, you can stitch the files found in .inprogress subdirectory\n     * manually using:\n     * https://chromium.googlesource.com/chromium/src/+/main/net/tools/stitch_net_log_files.py. The\n     * log can be viewed using a Chrome browser navigated to chrome://net-internals/#import.\n     *\n     * @param dirPath the directory where the netlog.json file will be created. dirPath must already\n     * exist. NetLog files must not exist in the directory. If actively logging, this method is\n     * ignored.\n     * @param logAll {@code true} to include basic events, user cookies, credentials and all\n     * transferred bytes in the log. This option presents a privacy risk, since it exposes the\n     * user's credentials, and should only be used with the user's consent and in situations where\n     * the log won't be public. {@code false} to just include basic events.\n     * @param maxSize the maximum total disk space in bytes that should be used by NetLog. Actual\n     *         disk\n     * space usage may exceed this limit slightly.\n     ",
    "links" : [ "#stopNetLog" ]
  }, {
    "name" : "public void bindToNetwork(long networkHandle)",
    "returnType" : "void",
    "comment" : "\n     * Binds the engine to the specified network handle. All requests created through this engine\n     * will use the network associated to this handle. If this network disconnects all requests will\n     * fail, the exact error will depend on the stage of request processing when the network\n     * disconnects. Network handles can be obtained through {@code Network#getNetworkHandle}. Only\n     * available starting from Android Marshmallow.\n     *\n     * @param networkHandle the network handle to bind the engine to. Specify {@link\n     * #UNBIND_NETWORK_HANDLE} to unbind.\n     ",
    "links" : [ "#UNBIND_NETWORK_HANDLE" ]
  }, {
    "name" : "public int getEffectiveConnectionType()",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the effective connection type computed by the network quality\n     * estimator. Call {@link Builder#enableNetworkQualityEstimator} to begin computing this value.\n     *\n     * @return the estimated connection type. The returned value is one of {@link\n     * #EFFECTIVE_CONNECTION_TYPE_UNKNOWN EFFECTIVE_CONNECTION_TYPE_* }.\n     ",
    "links" : [ "#EFFECTIVE_CONNECTION_TYPE_UNKNOWN", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public void configureNetworkQualityEstimatorForTesting(boolean useLocalHostRequests, boolean useSmallerResponses, boolean disableOfflineCheck)",
    "returnType" : "void",
    "comment" : "\n     * Configures the network quality estimator for testing. This must be called before round trip\n     * time and throughput listeners are added, and after the network quality estimator has been\n     * enabled.\n     *\n     * @param useLocalHostRequests include requests to localhost in estimates.\n     * @param useSmallerResponses include small responses in throughput estimates.\n     * @param disableOfflineCheck when set to true, disables the device offline checks when\n     *         computing\n     * the effective connection type or when writing the prefs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRttListener(NetworkQualityRttListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener that gets called whenever the network quality estimator witnesses a\n     * sample round trip time. This must be called after {@link\n     * Builder#enableNetworkQualityEstimator}, and with throw an exception otherwise. Round trip\n     * times may be recorded at various layers of the network stack, including TCP, QUIC, and at the\n     * URL request layer. The listener is called on the\n     * {@link java.util.concurrent.Executor} that is passed to {@link\n     * Builder#enableNetworkQualityEstimator}.\n     *\n     * @param listener the listener of round trip times.\n     ",
    "links" : [ "java.util.concurrent.Executor", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public void removeRttListener(NetworkQualityRttListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener of round trip times if previously registered with {@link #addRttListener}.\n     * This should be called after a {@link NetworkQualityRttListener} is added in order to stop\n     * receiving observations.\n     *\n     * @param listener the listener of round trip times.\n     ",
    "links" : [ "#addRttListener", "org.chromium.net.NetworkQualityRttListener" ]
  }, {
    "name" : "public void addThroughputListener(NetworkQualityThroughputListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a listener that gets called whenever the network quality estimator witnesses a\n     * sample throughput measurement. This must be called after {@link\n     * Builder#enableNetworkQualityEstimator}. Throughput observations are computed by measuring\n     * bytes read over the active network interface at times when at least one URL response is being\n     * received. The listener is called on the {@link java.util.concurrent.Executor} that is passed\n     * to {@link Builder#enableNetworkQualityEstimator}.\n     *\n     * @param listener the listener of throughput.\n     ",
    "links" : [ "java.util.concurrent.Executor", "#enableNetworkQualityEstimator" ]
  }, {
    "name" : "public void removeThroughputListener(NetworkQualityThroughputListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a listener of throughput. This should be called after a {@link\n     * NetworkQualityThroughputListener} is added with {@link #addThroughputListener} in order to\n     * stop receiving observations.\n     *\n     * @param listener the listener of throughput.\n     ",
    "links" : [ "#addThroughputListener", "org.chromium.net.NetworkQualityThroughputListener" ]
  } ],
  "methodNames" : [ "public abstract String getVersionString()", "public abstract void shutdown()", "public abstract void startNetLogToFile(String fileName, boolean logAll)", "public abstract void stopNetLog()", "public abstract byte[] getGlobalMetricsDeltas()", "public abstract URLConnection openConnection(URL url) throws IOException", "public abstract URLStreamHandlerFactory createURLStreamHandlerFactory()", "public abstract UrlRequest.Builder newUrlRequestBuilder(String url, UrlRequest.Callback callback, Executor executor)", "public BidirectionalStream.Builder newBidirectionalStreamBuilder(String url, BidirectionalStream.Callback callback, Executor executor)", "public int getActiveRequestCount()", "public void addRequestFinishedListener(RequestFinishedInfo.Listener listener)", "public void removeRequestFinishedListener(RequestFinishedInfo.Listener listener)", "public int getHttpRttMs()", "public int getTransportRttMs()", "public int getDownstreamThroughputKbps()", "public void startNetLogToDisk(String dirPath, boolean logAll, int maxSize)", "public void bindToNetwork(long networkHandle)", "public int getEffectiveConnectionType()", "public void configureNetworkQualityEstimatorForTesting(boolean useLocalHostRequests, boolean useSmallerResponses, boolean disableOfflineCheck)", "public void addRttListener(NetworkQualityRttListener listener)", "public void removeRttListener(NetworkQualityRttListener listener)", "public void addThroughputListener(NetworkQualityThroughputListener listener)", "public void removeThroughputListener(NetworkQualityThroughputListener listener)" ],
  "variableNames" : [ "TAG", "ACTIVE_REQUEST_COUNT_UNKNOWN", "CONNECTION_METRIC_UNKNOWN", "EFFECTIVE_CONNECTION_TYPE_UNKNOWN", "EFFECTIVE_CONNECTION_TYPE_OFFLINE", "EFFECTIVE_CONNECTION_TYPE_SLOW_2G", "EFFECTIVE_CONNECTION_TYPE_2G", "EFFECTIVE_CONNECTION_TYPE_3G", "EFFECTIVE_CONNECTION_TYPE_4G", "UNBIND_NETWORK_HANDLE" ]
}