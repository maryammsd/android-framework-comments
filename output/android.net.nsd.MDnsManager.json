{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/nsd/MDnsManager.java",
  "packageName" : "android.net.nsd",
  "className" : "MDnsManager",
  "comment" : "\n * A manager class for mdns service.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMdns",
    "type" : "IMDns",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MDNS_SERVICE",
    "type" : "String",
    "comment" : " Service name for this. ",
    "links" : [ ]
  }, {
    "name" : "NO_RESULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NETID_UNSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startDaemon()",
    "returnType" : "void",
    "comment" : "\n     * Start the MDNSResponder daemon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopDaemon()",
    "returnType" : "void",
    "comment" : "\n     * Stop the MDNSResponder daemon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerService(int id, @NonNull String serviceName, @NonNull String registrationType, int port, @NonNull byte[] txtRecord, int interfaceIdx)",
    "returnType" : "boolean",
    "comment" : "\n     * Start registering a service.\n     *\n     * @param id The operation ID.\n     * @param serviceName The service name to be registered.\n     * @param registrationType The service type to be registered.\n     * @param port The port on which the service accepts connections.\n     * @param txtRecord The txt record. Refer to {@code NsdServiceInfo#setTxtRecords} for details.\n     * @param interfaceIdx The interface index on which to register the service.\n     * @return {@code true} if registration is successful, else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean discover(int id, @NonNull String registrationType, int interfaceIdx)",
    "returnType" : "boolean",
    "comment" : "\n     * Start discovering services.\n     *\n     * @param id The operation ID.\n     * @param registrationType The service type to be discovered.\n     * @param interfaceIdx The interface index on which to discover for services.\n     * @return {@code true} if discovery is started successfully, else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean resolve(int id, @NonNull String serviceName, @NonNull String registrationType, @NonNull String domain, int interfaceIdx)",
    "returnType" : "boolean",
    "comment" : "\n     * Start resolving the target service.\n     *\n     * @param id The operation ID.\n     * @param serviceName The service name to be resolved.\n     * @param registrationType The service type to be resolved.\n     * @param domain The service domain to be resolved.\n     * @param interfaceIdx The interface index on which to resolve the service.\n     * @return {@code true} if resolution is started successfully, else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getServiceAddress(int id, @NonNull String hostname, int interfaceIdx)",
    "returnType" : "boolean",
    "comment" : "\n     * Start getting the target service address.\n     *\n     * @param id The operation ID.\n     * @param hostname The fully qualified domain name of the host to be queried for.\n     * @param interfaceIdx The interface index on which to issue the query.\n     * @return {@code true} if getting address is started successful, else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean stopOperation(int id)",
    "returnType" : "boolean",
    "comment" : "\n     * Stop an operation which was requested before.\n     *\n     * @param id the operation id to be stopped.\n     * @return {@code true} if operation is stopped successfully, else {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerEventListener(@NonNull IMDnsEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Register an event listener.\n     *\n     * @param listener The listener to be registered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterEventListener(@NonNull IMDnsEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an event listener.\n     *\n     * @param listener The listener to be unregistered.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void startDaemon()", "public void stopDaemon()", "public boolean registerService(int id, @NonNull String serviceName, @NonNull String registrationType, int port, @NonNull byte[] txtRecord, int interfaceIdx)", "public boolean discover(int id, @NonNull String registrationType, int interfaceIdx)", "public boolean resolve(int id, @NonNull String serviceName, @NonNull String registrationType, @NonNull String domain, int interfaceIdx)", "public boolean getServiceAddress(int id, @NonNull String hostname, int interfaceIdx)", "public boolean stopOperation(int id)", "public void registerEventListener(@NonNull IMDnsEventListener listener)", "public void unregisterEventListener(@NonNull IMDnsEventListener listener)" ],
  "variableNames" : [ "TAG", "mMdns", "MDNS_SERVICE", "NO_RESULT", "NETID_UNSET" ]
}