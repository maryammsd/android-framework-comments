{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Chronometer.java",
  "packageName" : "android.widget",
  "className" : "Chronometer",
  "comment" : "\n * Class that implements a simple timer.\n * <p>\n * You can give it a start time in the {@link SystemClock#elapsedRealtime} timebase,\n * and it counts up from that, or if you don't give it a base time, it will use the\n * time at which you call {@link #start}.\n *\n * <p>The timer can also count downward towards the base time by\n * setting {@link #setCountDown(boolean)} to true.\n *\n *  <p>By default it will display the current\n * timer value in the form \"MM:SS\" or \"H:MM:SS\", or you can use {@link #setFormat}\n * to format the timer value into an arbitrary string.\n *\n * @attr ref android.R.styleable#Chronometer_format\n * @attr ref android.R.styleable#Chronometer_countDown\n ",
  "links" : [ "#setFormat", "android.os.SystemClock#elapsedRealtime", "#start", "#setCountDown(boolean)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBase",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNow",
    "type" : "long",
    "comment" : " the currently displayed time",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunning",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatter",
    "type" : "Formatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatterLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatterArgs",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormatBuilder",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnChronometerTickListener",
    "type" : "OnChronometerTickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycle",
    "type" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCountDown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTickRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_IN_SEC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_IN_SEC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCountDown(boolean countDown)",
    "returnType" : "void",
    "comment" : "\n     * Set this view to count down to the base instead of counting up from it.\n     *\n     * @param countDown whether this view should count down\n     *\n     * @see #setBase(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCountDown()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this view counts down\n     *\n     * @see #setCountDown(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isTheFinalCountDown()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether this is the final countdown\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBase(long base)",
    "returnType" : "void",
    "comment" : "\n     * Set the time that the count-up timer is in reference to.\n     *\n     * @param base Use the {@link SystemClock#elapsedRealtime} time base.\n     ",
    "links" : [ "android.os.SystemClock#elapsedRealtime" ]
  }, {
    "name" : "public long getBase()",
    "returnType" : "long",
    "comment" : "\n     * Return the base time as set through {@link #setBase}.\n     ",
    "links" : [ "#setBase" ]
  }, {
    "name" : "public void setFormat(String format)",
    "returnType" : "void",
    "comment" : "\n     * Sets the format string used for display.  The Chronometer will display\n     * this string, with the first \"%s\" replaced by the current timer value in\n     * \"MM:SS\" or \"H:MM:SS\" form.\n     *\n     * If the format string is null, or if you never call setFormat(), the\n     * Chronometer will simply display the timer value in \"MM:SS\" or \"H:MM:SS\"\n     * form.\n     *\n     * @param format the format string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFormat()",
    "returnType" : "String",
    "comment" : "\n     * Returns the current format string as set through {@link #setFormat}.\n     ",
    "links" : [ "#setFormat" ]
  }, {
    "name" : "public void setOnChronometerTickListener(OnChronometerTickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to be called when the chronometer changes.\n     *\n     * @param listener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnChronometerTickListener getOnChronometerTickListener()",
    "returnType" : "OnChronometerTickListener",
    "comment" : "\n     * @return The listener (may be null) that is listening for chronometer change\n     *         events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Start counting up.  This does not affect the base as set from {@link #setBase}, just\n     * the view display.\n     *\n     * Chronometer works by regularly scheduling messages to the handler, even when the\n     * Widget is not visible.  To make sure resource leaks do not occur, the user should\n     * make sure that each start() call has a reciprocal call to {@link #stop}.\n     ",
    "links" : [ "#setBase", "#stop" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stop counting up.  This does not affect the base as set from {@link #setBase}, just\n     * the view display.\n     *\n     * This stops the messages to the handler, effectively releasing resources that would\n     * be held as the chronometer is running, via {@link #start}.\n     ",
    "links" : [ "#setBase", "#start" ]
  }, {
    "name" : "public void setStarted(boolean started)",
    "returnType" : "void",
    "comment" : "\n     * The same as calling {@link #start} or {@link #stop}.\n     * @hide pending API council approval\n     ",
    "links" : [ "#stop", "#start" ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onWindowVisibilityChanged(int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onVisibilityChanged(View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void updateText(long now)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateRunning()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dispatchChronometerTick()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String formatDuration(long ms)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getContentDescription()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init()", "public void setCountDown(boolean countDown)", "public boolean isCountDown()", "public boolean isTheFinalCountDown()", "public void setBase(long base)", "public long getBase()", "public void setFormat(String format)", "public String getFormat()", "public void setOnChronometerTickListener(OnChronometerTickListener listener)", "public OnChronometerTickListener getOnChronometerTickListener()", "public void start()", "public void stop()", "public void setStarted(boolean started)", "protected void onDetachedFromWindow()", "protected void onWindowVisibilityChanged(int visibility)", "protected void onVisibilityChanged(View changedView, int visibility)", "private synchronized void updateText(long now)", "private void updateRunning()", " void dispatchChronometerTick()", "private static String formatDuration(long ms)", "public CharSequence getContentDescription()", "public CharSequence getAccessibilityClassName()" ],
  "variableNames" : [ "TAG", "mBase", "mNow", "mVisible", "mStarted", "mRunning", "mLogged", "mFormat", "mFormatter", "mFormatterLocale", "mFormatterArgs", "mFormatBuilder", "mOnChronometerTickListener", "mRecycle", "mCountDown", "mTickRunnable", "MIN_IN_SEC", "HOUR_IN_SEC" ]
}