{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/SearchView.java",
  "packageName" : "android.widget",
  "className" : "SearchAutoComplete",
  "comment" : "\n     * Local subclass for AutoCompleteTextView.\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSearchView",
    "type" : "SearchView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasPendingShowSoftInputRequest",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunShowSoftInputIfNecessary",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onFinishInflate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSearchView(SearchView searchView)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setThreshold(int threshold)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the text field is empty, or contains only whitespace.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void replaceText(CharSequence text)",
    "returnType" : "void",
    "comment" : "\n         * We override this method to avoid replacing the query box text when a\n         * suggestion is clicked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void performCompletion()",
    "returnType" : "void",
    "comment" : "\n         * We override this method to avoid an extra onItemClick being called on\n         * the drop-down's OnItemClickListener by\n         * {@link AutoCompleteTextView#onKeyUp(int, KeyEvent)} when an item is\n         * clicked with the trackball.\n         ",
    "links" : [ "android.widget.AutoCompleteTextView#onKeyUp(int" ]
  }, {
    "name" : "public void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "\n         * We override this method to be sure and show the soft keyboard if\n         * appropriate when the TextView has focus.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean enoughToFilter()",
    "returnType" : "boolean",
    "comment" : "\n         * We override this method so that we can allow a threshold of zero,\n         * which ACTV does not.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyPreIme(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getSearchViewTextMinWidthDp()",
    "returnType" : "int",
    "comment" : "\n         * Get minimum width of the search view text entry area.\n         ",
    "links" : [ ]
  }, {
    "name" : "public InputConnection onCreateInputConnection(EditorInfo editorInfo)",
    "returnType" : "InputConnection",
    "comment" : "\n         * We override {@link View#onCreateInputConnection(EditorInfo)} as a signal to schedule a\n         * pending {@link InputMethodManager#showSoftInput(View, int)} request (if any).\n         ",
    "links" : [ "android.view.CollapsibleActionView#onCreateInputConnection(EditorInfo)", "android.view.inputmethod.InputMethodManager#showSoftInput(View" ]
  }, {
    "name" : "public boolean checkInputConnectionProxy(View view)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void showSoftInputIfNecessary()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setImeVisibility(final boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onFinishInflate()", " void setSearchView(SearchView searchView)", "public void setThreshold(int threshold)", "private boolean isEmpty()", "protected void replaceText(CharSequence text)", "public void performCompletion()", "public void onWindowFocusChanged(boolean hasWindowFocus)", "protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect)", "public boolean enoughToFilter()", "public boolean onKeyPreIme(int keyCode, KeyEvent event)", "private int getSearchViewTextMinWidthDp()", "public InputConnection onCreateInputConnection(EditorInfo editorInfo)", "public boolean checkInputConnectionProxy(View view)", "private void showSoftInputIfNecessary()", "private void setImeVisibility(final boolean visible)" ],
  "variableNames" : [ "mThreshold", "mSearchView", "mHasPendingShowSoftInputRequest", "mRunShowSoftInputIfNecessary" ]
}