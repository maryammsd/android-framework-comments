{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/TransliteratorIDParser.java",
  "packageName" : "android.icu.text",
  "className" : "TransliteratorIDParser",
  "comment" : "\n * Parsing component for transliterator IDs.  This class contains only\n * static members; it cannot be instantiated.  Methods in this class\n * parse various ID formats, including the following:\n *\n * A basic ID, which contains source, target, and variant, but no\n * filter and no explicit inverse.  Examples include\n * \"Latin-Greek/UNGEGN\" and \"Null\".\n *\n * A single ID, which is a basic ID plus optional filter and optional\n * explicit inverse.  Examples include \"[a-zA-Z] Latin-Greek\" and\n * \"Lower (Upper)\".\n *\n * A compound ID, which is a sequence of one or more single IDs,\n * separated by semicolons, with optional forward and reverse global\n * filters.  The global filters are UnicodeSet patterns prepended or\n * appended to the IDs, separated by semicolons.  An appended filter\n * must be enclosed in parentheses and applies in the reverse\n * direction.\n *\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ID_DELIM",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TARGET_SEP",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VARIANT_SEP",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPEN_REV",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CLOSE_REV",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORWARD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REVERSE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPECIAL_INVERSES",
    "type" : "Map<CaseInsensitiveString, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SingleID parseFilterID(String id, int[] pos)",
    "returnType" : "SingleID",
    "comment" : "\n     * Parse a filter ID, that is, an ID of the general form\n     * \"[f1] s1-t1/v1\", with the filters optional, and the variants optional.\n     * @param id the id to be parsed\n     * @param pos INPUT-OUTPUT parameter.  On input, the position of\n     * the first character to parse.  On output, the position after\n     * the last character parsed.\n     * @return a SingleID object or null if the parse fails\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SingleID parseSingleID(String id, int[] pos, int dir)",
    "returnType" : "SingleID",
    "comment" : "\n     * Parse a single ID, that is, an ID of the general form\n     * \"[f1] s1-t1/v1 ([f2] s2-t3/v2)\", with the parenthesized element\n     * optional, the filters optional, and the variants optional.\n     * @param id the id to be parsed\n     * @param pos INPUT-OUTPUT parameter.  On input, the position of\n     * the first character to parse.  On output, the position after\n     * the last character parsed.\n     * @param dir the direction.  If the direction is REVERSE then the\n     * SingleID is constructed for the reverse direction.\n     * @return a SingleID object or null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static UnicodeSet parseGlobalFilter(String id, int[] pos, int dir, int[] withParens, StringBuffer canonID)",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * Parse a global filter of the form \"[f]\" or \"([f])\", depending\n     * on 'withParens'.\n     * @param id the pattern the parse\n     * @param pos INPUT-OUTPUT parameter.  On input, the position of\n     * the first character to parse.  On output, the position after\n     * the last character parsed.\n     * @param dir the direction.\n     * @param withParens INPUT-OUTPUT parameter.  On entry, if\n     * withParens[0] is 0, then parens are disallowed.  If it is 1,\n     * then parens are requires.  If it is -1, then parens are\n     * optional, and the return result will be set to 0 or 1.\n     * @param canonID OUTPUT parameter.  The pattern for the filter\n     * added to the canonID, either at the end, if dir is FORWARD, or\n     * at the start, if dir is REVERSE.  The pattern will be enclosed\n     * in parentheses if appropriate, and will be suffixed with an\n     * ID_DELIM character.  May be null.\n     * @return a UnicodeSet object or null.  A non-null results\n     * indicates a successful parse, regardless of whether the filter\n     * applies to the given direction.  The caller should discard it\n     * if withParens != (dir == REVERSE).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean parseCompoundID(String id, int dir, StringBuffer canonID, List<SingleID> list, UnicodeSet[] globalFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * Parse a compound ID, consisting of an optional forward global\n     * filter, a separator, one or more single IDs delimited by\n     * separators, an an optional reverse global filter.  The\n     * separator is a semicolon.  The global filters are UnicodeSet\n     * patterns.  The reverse global filter must be enclosed in\n     * parentheses.\n     * @param id the pattern the parse\n     * @param dir the direction.\n     * @param canonID OUTPUT parameter that receives the canonical ID,\n     * consisting of canonical IDs for all elements, as returned by\n     * parseSingleID(), separated by semicolons.  Previous contents\n     * are discarded.\n     * @param list OUTPUT parameter that receives a list of SingleID\n     * objects representing the parsed IDs.  Previous contents are\n     * discarded.\n     * @param globalFilter OUTPUT parameter that receives a pointer to\n     * a newly created global filter for this ID in this direction, or\n     * null if there is none.\n     * @return true if the parse succeeds, that is, if the entire\n     * id is consumed without syntax error.\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<Transliterator> instantiateList(List<SingleID> ids)",
    "returnType" : "List<Transliterator>",
    "comment" : "\n     * Returns the list of Transliterator objects for the\n     * given list of SingleID objects.\n     * \n     * @param ids list vector of SingleID objects.\n     * @return Actual transliterators for the list of SingleIDs\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] IDtoSTV(String id)",
    "returnType" : "String[]",
    "comment" : "\n     * Parse an ID into pieces.  Take IDs of the form T, T/V, S-T,\n     * S-T/V, or S/V-T.  If the source is missing, return a source of\n     * ANY.\n     * @param id the id string, in any of several forms\n     * @return an array of 4 strings: source, target, variant, and\n     * isSourcePresent.  If the source is not present, ANY will be\n     * given as the source, and isSourcePresent will be null.  Otherwise\n     * isSourcePresent will be non-null.  The target may be empty if the\n     * id is not well-formed.  The variant may be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String STVtoID(String source, String target, String variant)",
    "returnType" : "String",
    "comment" : "\n     * Given source, target, and variant strings, concatenate them into a\n     * full ID.  If the source is empty, then \"Any\" will be used for the\n     * source, so the ID will always be of the form s-t/v or s-t.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registerSpecialInverse(String target, String inverseTarget, boolean bidirectional)",
    "returnType" : "void",
    "comment" : "\n     * Register two targets as being inverses of one another.  For\n     * example, calling registerSpecialInverse(\"NFC\", \"NFD\", true) causes\n     * Transliterator to form the following inverse relationships:\n     *\n     * <pre>NFC => NFD\n     * Any-NFC => Any-NFD\n     * NFD => NFC\n     * Any-NFD => Any-NFC</pre>\n     *\n     * (Without the special inverse registration, the inverse of NFC\n     * would be NFC-Any.)  Note that NFD is shorthand for Any-NFD, but\n     * that the presence or absence of \"Any-\" is preserved.\n     *\n     * <p>The relationship is symmetrical; registering (a, b) is\n     * equivalent to registering (b, a).\n     *\n     * <p>The relevant IDs must still be registered separately as\n     * factories or classes.\n     *\n     * <p>Only the targets are specified.  Special inverses always\n     * have the form Any-Target1 <=> Any-Target2.  The target should\n     * have canonical casing (the casing desired to be produced when\n     * an inverse is formed) and should contain no whitespace or other\n     * extraneous characters.\n     *\n     * @param target the target against which to register the inverse\n     * @param inverseTarget the inverse of target, that is\n     * Any-target.getInverse() => Any-inverseTarget\n     * @param bidirectional if true, register the reverse relation\n     * as well, that is, Any-inverseTarget.getInverse() => Any-target\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Specs parseFilterID(String id, int[] pos, boolean allowFilter)",
    "returnType" : "Specs",
    "comment" : "\n     * Parse an ID into component pieces.  Take IDs of the form T,\n     * T/V, S-T, S-T/V, or S/V-T.  If the source is missing, return a\n     * source of ANY.\n     * @param id the id string, in any of several forms\n     * @param pos INPUT-OUTPUT parameter.  On input, pos[0] is the\n     * offset of the first character to parse in id.  On output,\n     * pos[0] is the offset after the last parsed character.  If the\n     * parse failed, pos[0] will be unchanged.\n     * @param allowFilter if true, a UnicodeSet pattern is allowed\n     * at any location between specs or delimiters, and is returned\n     * as the fifth string in the array.\n     * @return a Specs object, or null if the parse failed.  If\n     * neither source nor target was seen in the parsed id, then the\n     * parse fails.  If allowFilter is true, then the parsed filter\n     * pattern is returned in the Specs object, otherwise the returned\n     * filter reference is null.  If the parse fails for any reason\n     * null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SingleID specsToID(Specs specs, int dir)",
    "returnType" : "SingleID",
    "comment" : "\n     * Givens a Spec object, convert it to a SingleID object.  The\n     * Spec object is a more unprocessed parse result.  The SingleID\n     * object contains information about canonical and basic IDs.\n     * @return a SingleID; never returns null.  Returned object always\n     * has 'filter' field of null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static SingleID specsToSpecialInverse(Specs specs)",
    "returnType" : "SingleID",
    "comment" : "\n     * Given a Specs object, return a SingleID representing the\n     * special inverse of that ID.  If there is no special inverse\n     * then return null.\n     * @return a SingleID or null.  Returned object always has\n     * 'filter' field of null.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SingleID parseFilterID(String id, int[] pos)", "public static SingleID parseSingleID(String id, int[] pos, int dir)", "public static UnicodeSet parseGlobalFilter(String id, int[] pos, int dir, int[] withParens, StringBuffer canonID)", "public static boolean parseCompoundID(String id, int dir, StringBuffer canonID, List<SingleID> list, UnicodeSet[] globalFilter)", " static List<Transliterator> instantiateList(List<SingleID> ids)", "public static String[] IDtoSTV(String id)", "public static String STVtoID(String source, String target, String variant)", "public static void registerSpecialInverse(String target, String inverseTarget, boolean bidirectional)", "private static Specs parseFilterID(String id, int[] pos, boolean allowFilter)", "private static SingleID specsToID(Specs specs, int dir)", "private static SingleID specsToSpecialInverse(Specs specs)" ],
  "variableNames" : [ "ID_DELIM", "TARGET_SEP", "VARIANT_SEP", "OPEN_REV", "CLOSE_REV", "ANY", "FORWARD", "REVERSE", "SPECIAL_INVERSES" ]
}