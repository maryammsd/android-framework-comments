{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/TaskInfo.java",
  "packageName" : "android.app",
  "className" : "TaskInfo",
  "comment" : "\n * Stores information about a particular Task.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_VALUE_UNSET",
    "type" : "int",
    "comment" : "\n     * The value to use when the property has not a specific value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "userId",
    "type" : "int",
    "comment" : "\n     * The id of the user the task was running as if this is a leaf task. The id of the current\n     * running user of the system otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "taskId",
    "type" : "int",
    "comment" : "\n     * The identifier for this task.\n     ",
    "links" : [ ]
  }, {
    "name" : "isRunning",
    "type" : "boolean",
    "comment" : "\n     * Whether or not this task has any running activities.\n     ",
    "links" : [ ]
  }, {
    "name" : "baseIntent",
    "type" : "Intent",
    "comment" : "\n     * The base intent of the task (generally the intent that launched the task). This intent can\n     * be used to relaunch the task (if it is no longer running) or brought to the front if it is.\n     ",
    "links" : [ ]
  }, {
    "name" : "baseActivity",
    "type" : "ComponentName",
    "comment" : "\n     * The component of the first activity in the task, can be considered the \"application\" of this\n     * task.\n     ",
    "links" : [ ]
  }, {
    "name" : "topActivity",
    "type" : "ComponentName",
    "comment" : "\n     * The component of the top activity in the task, currently showing to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "origActivity",
    "type" : "ComponentName",
    "comment" : "\n     * The component of the target activity if this task was started from an activity alias.\n     * Otherwise, this is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "realActivity",
    "type" : "ComponentName",
    "comment" : "\n     * The component of the activity that started this task (may be the component of the activity\n     * alias).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "numActivities",
    "type" : "int",
    "comment" : "\n     * The number of activities in this task (including running).\n     ",
    "links" : [ ]
  }, {
    "name" : "lastActiveTime",
    "type" : "long",
    "comment" : "\n     * The last time this task was active since boot (including time spent in sleep).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "displayId",
    "type" : "int",
    "comment" : "\n     * The id of the display this task is associated with.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "displayAreaFeatureId",
    "type" : "int",
    "comment" : "\n     * The feature id of {@link com.android.server.wm.TaskDisplayArea} this task is associated with.\n     * @hide\n     ",
    "links" : [ "com.android.server.wm.TaskDisplayArea" ]
  }, {
    "name" : "taskDescription",
    "type" : "ActivityManager.TaskDescription",
    "comment" : "\n     * The recent activity values for the highest activity in the stack to have set the values.\n     * {@link Activity#setTaskDescription(android.app.ActivityManager.TaskDescription)}.\n     ",
    "links" : [ "android.app.Activity#setTaskDescription(android.app.ActivityManager.TaskDescription)" ]
  }, {
    "name" : "mTopActivityLocusId",
    "type" : "LocusId",
    "comment" : "\n     * The locusId of the task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "supportsMultiWindow",
    "type" : "boolean",
    "comment" : "\n     * Whether this task supports multi windowing modes based on the device settings and the\n     * root activity resizability and configuration.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "resizeMode",
    "type" : "int",
    "comment" : "\n     * The resize mode of the task. See {@link ActivityInfo#resizeMode}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo#resizeMode" ]
  }, {
    "name" : "configuration",
    "type" : "Configuration",
    "comment" : "\n     * The current configuration of the task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "token",
    "type" : "WindowContainerToken",
    "comment" : "\n     * Used as an opaque identifier for this task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "pictureInPictureParams",
    "type" : "PictureInPictureParams",
    "comment" : "\n     * The PictureInPictureParams for the Task, if set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "shouldDockBigOverlays",
    "type" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "launchIntoPipHostTaskId",
    "type" : "int",
    "comment" : "\n     * The task id of the host Task of the launch-into-pip Activity, i.e., it points to the Task\n     * the launch-into-pip Activity is originated from.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastParentTaskIdBeforePip",
    "type" : "int",
    "comment" : "\n     * The task id of the parent Task of the launch-into-pip Activity, i.e., if task have more than\n     * one activity it will create new task for this activity, this id is the origin task id and\n     * the pip activity will be reparent to origin task when it exit pip mode.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "displayCutoutInsets",
    "type" : "Rect",
    "comment" : "\n     * The {@link Rect} copied from {@link DisplayCutout#getSafeInsets()} if the cutout is not of\n     * (LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES, LAYOUT_IN_DISPLAY_CUTOUT_MODE_ALWAYS),\n     * {@code null} otherwise.\n     * @hide\n     ",
    "links" : [ "android.graphics.Rect", "android.view.DisplayCutout#getSafeInsets()" ]
  }, {
    "name" : "topActivityType",
    "type" : "int",
    "comment" : "\n     * The activity type of the top activity in this task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "topActivityInfo",
    "type" : "ActivityInfo",
    "comment" : "\n     * The {@link ActivityInfo} of the top activity in this task.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "isResizeable",
    "type" : "boolean",
    "comment" : "\n     * Whether this task is resizable. Unlike {@link #resizeMode} (which is what the top activity\n     * supports), this is what the system actually uses for resizability based on other policy and\n     * developer options.\n     * @hide\n     ",
    "links" : [ "#resizeMode" ]
  }, {
    "name" : "minWidth",
    "type" : "int",
    "comment" : "\n     * Minimal width of the task when it's resizeable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "minHeight",
    "type" : "int",
    "comment" : "\n     * Minimal height of the task when it's resizeable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "defaultMinSize",
    "type" : "int",
    "comment" : "\n     * The default minimal size of the task used when a minWidth or minHeight is not specified.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "positionInParent",
    "type" : "Point",
    "comment" : "\n     * Relative position of the task's top left corner in the parent container.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "launchCookies",
    "type" : "ArrayList<IBinder>",
    "comment" : "\n     * The launch cookies associated with activities in this task if any.\n     * @see ActivityOptions#setLaunchCookie(IBinder)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "parentTaskId",
    "type" : "int",
    "comment" : "\n     * The identifier of the parent task that is created by organizer, otherwise\n     * {@link ActivityTaskManager#INVALID_TASK_ID}.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityTaskManager#INVALID_TASK_ID" ]
  }, {
    "name" : "isFocused",
    "type" : "boolean",
    "comment" : "\n     * Whether this task is focused.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isVisible",
    "type" : "boolean",
    "comment" : "\n     * Whether this task is visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isVisibleRequested",
    "type" : "boolean",
    "comment" : "\n     * Whether this task is request visible.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isSleeping",
    "type" : "boolean",
    "comment" : "\n     * Whether this task is sleeping due to sleeping display.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "isTopActivityTransparent",
    "type" : "boolean",
    "comment" : "\n     * Whether the top activity fillsParent() is false\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "appCompatTaskInfo",
    "type" : "AppCompatTaskInfo",
    "comment" : "\n     * Encapsulate specific App Compat information.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this task is visible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public WindowContainerToken getToken()",
    "returnType" : "WindowContainerToken",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PictureInPictureParams getPictureInPictureParams()",
    "returnType" : "PictureInPictureParams",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDockBigOverlays()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getWindowingMode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFreeform()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getActivityType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addLaunchCookie(IBinder cookie)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsLaunchCookie(@NonNull IBinder cookie)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this task contains the launch cookie.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParentTaskId()",
    "returnType" : "int",
    "comment" : "\n     * @return The parent task id of this task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasParentTask()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @return The id of the display this task is associated with.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equalsForTaskOrganizer(@Nullable TaskInfo that)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the parameters that are important for task organizers are equal\n     * between this {@link TaskInfo} and {@param that}.\n     * @hide\n     ",
    "links" : [ "android.app.TaskInfo" ]
  }, {
    "name" : "public boolean equalsForCompatUi(@Nullable TaskInfo that)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if parameters that are important for size compat have changed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void readFromParcel(Parcel source)",
    "returnType" : "void",
    "comment" : "\n     * Reads the TaskInfo from a parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Writes the TaskInfo to a parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isVisible()", "public WindowContainerToken getToken()", "public Configuration getConfiguration()", "public PictureInPictureParams getPictureInPictureParams()", "public boolean shouldDockBigOverlays()", "public int getWindowingMode()", "public boolean isFreeform()", "public int getActivityType()", "public void addLaunchCookie(IBinder cookie)", "public boolean containsLaunchCookie(@NonNull IBinder cookie)", "public int getParentTaskId()", "public boolean hasParentTask()", "public int getDisplayId()", "public boolean equalsForTaskOrganizer(@Nullable TaskInfo that)", "public boolean equalsForCompatUi(@Nullable TaskInfo that)", " void readFromParcel(Parcel source)", " void writeToParcel(Parcel dest, int flags)", "public String toString()" ],
  "variableNames" : [ "TAG", "PROPERTY_VALUE_UNSET", "userId", "taskId", "isRunning", "baseIntent", "baseActivity", "topActivity", "origActivity", "realActivity", "numActivities", "lastActiveTime", "displayId", "displayAreaFeatureId", "taskDescription", "mTopActivityLocusId", "supportsMultiWindow", "resizeMode", "configuration", "token", "pictureInPictureParams", "shouldDockBigOverlays", "launchIntoPipHostTaskId", "lastParentTaskIdBeforePip", "displayCutoutInsets", "topActivityType", "topActivityInfo", "isResizeable", "minWidth", "minHeight", "defaultMinSize", "positionInParent", "launchCookies", "parentTaskId", "isFocused", "isVisible", "isVisibleRequested", "isSleeping", "isTopActivityTransparent", "appCompatTaskInfo" ]
}