{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MicrophoneInfo.java",
  "packageName" : "android.media",
  "className" : "MicrophoneInfo",
  "comment" : "\n * Class providing information on a microphone. It indicates the location and orientation of the\n * microphone on the device as well as useful information like frequency response and sensitivity.\n * It can be used by applications implementing special pre processing effects like noise suppression\n * of beam forming that need to know about precise microphone characteristics in order to adapt\n * their algorithms.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOCATION_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * A microphone that the location is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MAINBODY",
    "type" : "int",
    "comment" : "\n     * A microphone that locate on main body of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MAINBODY_MOVABLE",
    "type" : "int",
    "comment" : "\n     * A microphone that locate on a movable main body of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_PERIPHERAL",
    "type" : "int",
    "comment" : "\n     * A microphone that locate on a peripheral.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Unknown microphone directionality.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_OMNI",
    "type" : "int",
    "comment" : "\n     * Microphone directionality type: omni.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_BI_DIRECTIONAL",
    "type" : "int",
    "comment" : "\n     * Microphone directionality type: bi-directional.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_CARDIOID",
    "type" : "int",
    "comment" : "\n     * Microphone directionality type: cardioid.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_HYPER_CARDIOID",
    "type" : "int",
    "comment" : "\n     * Microphone directionality type: hyper cardioid.\n     ",
    "links" : [ ]
  }, {
    "name" : "DIRECTIONALITY_SUPER_CARDIOID",
    "type" : "int",
    "comment" : "\n     * Microphone directionality type: super cardioid.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MAPPING_DIRECT",
    "type" : "int",
    "comment" : "\n     * The channel contains raw audio from this microphone.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_MAPPING_PROCESSED",
    "type" : "int",
    "comment" : "\n     * The channel contains processed audio from this microphone and possibly another microphone.\n     ",
    "links" : [ ]
  }, {
    "name" : "GROUP_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Value used for when the group of the microphone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "INDEX_IN_THE_GROUP_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Value used for when the index in the group of the microphone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_UNKNOWN",
    "type" : "Coordinate3F",
    "comment" : "\n     * Value used for when the position of the microphone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_UNKNOWN",
    "type" : "Coordinate3F",
    "comment" : "\n     * Value used for when the orientation of the microphone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSITIVITY_UNKNOWN",
    "type" : "float",
    "comment" : "\n     * Value used for when the sensitivity of the microphone is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "SPL_UNKNOWN",
    "type" : "float",
    "comment" : "\n     * Value used for when the SPL of the microphone is unknown. This value could be used when\n     * maximum SPL or minimum SPL is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPosition",
    "type" : "Coordinate3F",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrientation",
    "type" : "Coordinate3F",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrequencyResponse",
    "type" : "List<Pair<Float, Float>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelMapping",
    "type" : "List<Pair<Integer, Integer>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSpl",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinSpl",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensitivity",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroup",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIndexInTheGroup",
    "type" : "int",
    "comment" : " Usually 0 will be used for main body. ",
    "links" : [ ]
  }, {
    "name" : "mPortId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : " mPortId will correspond to the id in AudioPort ",
    "links" : [ ]
  }, {
    "name" : "mDirectionality",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns alphanumeric code that uniquely identifies the device.\n     *\n     * @return the description of the microphone\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns The system unique device ID that corresponds to the id\n     * returned by {@link AudioDeviceInfo#getId()}.\n     *\n     * @return the microphone's id\n     ",
    "links" : [ "android.media.AudioDeviceInfo#getId()" ]
  }, {
    "name" : "public int getInternalDeviceType()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * Returns the internal device type (e.g AudioSystem.DEVICE_IN_BUILTIN_MIC).\n     * The internal device type could be used when getting microphone's port id\n     * by matching type and address.\n     *\n     * @return the internal device type\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the device type identifier of the microphone (e.g AudioDeviceInfo.TYPE_BUILTIN_MIC).\n     *\n     * @return the device type of the microphone\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns The \"address\" string of the microphone that corresponds to the\n     * address returned by {@link AudioDeviceInfo#getAddress()}\n     * @return the address of the microphone\n     ",
    "links" : [ "android.media.AudioDeviceInfo#getAddress()" ]
  }, {
    "name" : "public int getLocation()",
    "returnType" : "int",
    "comment" : "\n     * Returns the location of the microphone. The return value is\n     * one of {@link #LOCATION_UNKNOWN}, {@link #LOCATION_MAINBODY},\n     * {@link #LOCATION_MAINBODY_MOVABLE}, or {@link #LOCATION_PERIPHERAL}.\n     *\n     * @return the location of the microphone\n     ",
    "links" : [ "#LOCATION_UNKNOWN", "#LOCATION_MAINBODY_MOVABLE", "#LOCATION_PERIPHERAL", "#LOCATION_MAINBODY" ]
  }, {
    "name" : "public int getGroup()",
    "returnType" : "int",
    "comment" : "\n     * Returns A device group id that can be used to group together microphones on the same\n     * peripheral, attachments or logical groups. Main body is usually group 0.\n     *\n     * @return the group of the microphone or {@link #GROUP_UNKNOWN} if the group is unknown\n     ",
    "links" : [ "#GROUP_UNKNOWN" ]
  }, {
    "name" : "public int getIndexInTheGroup()",
    "returnType" : "int",
    "comment" : "\n     * Returns unique index for device within its group.\n     *\n     * @return the microphone's index in its group or {@link #INDEX_IN_THE_GROUP_UNKNOWN} if the\n     * index in the group is unknown\n     ",
    "links" : [ "#INDEX_IN_THE_GROUP_UNKNOWN" ]
  }, {
    "name" : "public Coordinate3F getPosition()",
    "returnType" : "Coordinate3F",
    "comment" : "\n     * Returns A {@link Coordinate3F} object that represents the geometric location of microphone\n     * in meters. X-axis, Y-axis and Z-axis show as the x, y, z values. For mobile devices, the axes\n     * originate from the bottom-left-back corner of the appliance. In devices with\n     * {@link android.content.pm.PackageManager#FEATURE_AUTOMOTIVE}, axes are defined with respect\n     * to the vehicle body frame, originating from the center of the vehicle's rear axle.\n     * @see <a href=\"https://source.android.com/devices/sensors/sensor-types#auto_axes\">auto axes</a>\n     *\n     * @return the geometric location of the microphone or {@link #POSITION_UNKNOWN} if the\n     * geometric location is unknown\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_AUTOMOTIVE", "Coordinate3F", "#POSITION_UNKNOWN" ]
  }, {
    "name" : "public Coordinate3F getOrientation()",
    "returnType" : "Coordinate3F",
    "comment" : "\n     * Returns A {@link Coordinate3F} object that represents the orientation of microphone.\n     * X-axis, Y-axis and Z-axis show as the x, y, z value. The orientation will be normalized\n     * such as sqrt(x^2 + y^2 + z^2) equals 1.\n     *\n     * @return the orientation of the microphone or {@link #ORIENTATION_UNKNOWN} if orientation\n     * is unknown\n     ",
    "links" : [ "#ORIENTATION_UNKNOWN", "Coordinate3F" ]
  }, {
    "name" : "public List<Pair<Float, Float>> getFrequencyResponse()",
    "returnType" : "List<Pair<Float, Float>>",
    "comment" : "\n     * Returns a {@link android.util.Pair} list of frequency responses.\n     * For every {@link android.util.Pair} in the list, the first value represents frequency in Hz,\n     * and the second value represents response in dB.\n     *\n     * @return the frequency response of the microphone\n     ",
    "links" : [ "android.util.Pair" ]
  }, {
    "name" : "public List<Pair<Integer, Integer>> getChannelMapping()",
    "returnType" : "List<Pair<Integer, Integer>>",
    "comment" : "\n     * Returns a {@link android.util.Pair} list for channel mapping, which indicating how this\n     * microphone is used by each channels or a capture stream. For each {@link android.util.Pair},\n     * the first value is channel index, the second value is channel mapping type, which could be\n     * either {@link #CHANNEL_MAPPING_DIRECT} or {@link #CHANNEL_MAPPING_PROCESSED}.\n     * If a channel has contributions from more than one microphone, it is likely the HAL\n     * did some extra processing to combine the sources, but this is to be inferred by the user.\n     * Empty list when the MicrophoneInfo is returned by AudioManager.getMicrophones().\n     * At least one entry when the MicrophoneInfo is returned by AudioRecord.getActiveMicrophones().\n     *\n     * @return a {@link android.util.Pair} list for channel mapping\n     ",
    "links" : [ "#CHANNEL_MAPPING_DIRECT", "android.util.Pair", "#CHANNEL_MAPPING_PROCESSED" ]
  }, {
    "name" : "public float getSensitivity()",
    "returnType" : "float",
    "comment" : "\n     * Returns the level in dBFS produced by a 1000Hz tone at 94 dB SPL.\n     *\n     * @return the sensitivity of the microphone or {@link #SENSITIVITY_UNKNOWN} if the sensitivity\n     * is unknown\n     ",
    "links" : [ "#SENSITIVITY_UNKNOWN" ]
  }, {
    "name" : "public float getMaxSpl()",
    "returnType" : "float",
    "comment" : "\n     * Returns the level in dB of the maximum SPL supported by the device at 1000Hz.\n     *\n     * @return the maximum level in dB or {@link #SPL_UNKNOWN} if maximum SPL is unknown\n     ",
    "links" : [ "#SPL_UNKNOWN" ]
  }, {
    "name" : "public float getMinSpl()",
    "returnType" : "float",
    "comment" : "\n     * Returns the level in dB of the minimum SPL that can be registered by the device at 1000Hz.\n     *\n     * @return the minimum level in dB or {@link #SPL_UNKNOWN} if minimum SPL is unknown\n     ",
    "links" : [ "#SPL_UNKNOWN" ]
  }, {
    "name" : "public int getDirectionality()",
    "returnType" : "int",
    "comment" : "\n     * Returns the directionality of microphone. The return value is one of\n     * {@link #DIRECTIONALITY_UNKNOWN}, {@link #DIRECTIONALITY_OMNI},\n     * {@link #DIRECTIONALITY_BI_DIRECTIONAL}, {@link #DIRECTIONALITY_CARDIOID},\n     * {@link #DIRECTIONALITY_HYPER_CARDIOID}, or {@link #DIRECTIONALITY_SUPER_CARDIOID}.\n     *\n     * @return the directionality of microphone\n     ",
    "links" : [ "#DIRECTIONALITY_HYPER_CARDIOID", "#DIRECTIONALITY_SUPER_CARDIOID", "#DIRECTIONALITY_CARDIOID", "#DIRECTIONALITY_UNKNOWN", "#DIRECTIONALITY_BI_DIRECTIONAL", "#DIRECTIONALITY_OMNI" ]
  }, {
    "name" : "public void setId(int portId)",
    "returnType" : "void",
    "comment" : "\n     * Set the port id for the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChannelMapping(List<Pair<Integer, Integer>> channelMapping)",
    "returnType" : "void",
    "comment" : "\n     * Set the channel mapping for the device.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getDescription()", "public int getId()", "public int getInternalDeviceType()", "public int getType()", "public String getAddress()", "public int getLocation()", "public int getGroup()", "public int getIndexInTheGroup()", "public Coordinate3F getPosition()", "public Coordinate3F getOrientation()", "public List<Pair<Float, Float>> getFrequencyResponse()", "public List<Pair<Integer, Integer>> getChannelMapping()", "public float getSensitivity()", "public float getMaxSpl()", "public float getMinSpl()", "public int getDirectionality()", "public void setId(int portId)", "public void setChannelMapping(List<Pair<Integer, Integer>> channelMapping)" ],
  "variableNames" : [ "LOCATION_UNKNOWN", "LOCATION_MAINBODY", "LOCATION_MAINBODY_MOVABLE", "LOCATION_PERIPHERAL", "DIRECTIONALITY_UNKNOWN", "DIRECTIONALITY_OMNI", "DIRECTIONALITY_BI_DIRECTIONAL", "DIRECTIONALITY_CARDIOID", "DIRECTIONALITY_HYPER_CARDIOID", "DIRECTIONALITY_SUPER_CARDIOID", "CHANNEL_MAPPING_DIRECT", "CHANNEL_MAPPING_PROCESSED", "GROUP_UNKNOWN", "INDEX_IN_THE_GROUP_UNKNOWN", "POSITION_UNKNOWN", "ORIENTATION_UNKNOWN", "SENSITIVITY_UNKNOWN", "SPL_UNKNOWN", "mPosition", "mOrientation", "mDeviceId", "mAddress", "mFrequencyResponse", "mChannelMapping", "mMaxSpl", "mMinSpl", "mSensitivity", "mLocation", "mGroup", "mIndexInTheGroup", "mPortId", "mType", "mDirectionality" ]
}