{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/contentcapture/MainContentCaptureSession.java",
  "packageName" : "android.view.contentcapture",
  "className" : "MainContentCaptureSession",
  "comment" : "\n * Main session associated with a context.\n *\n * <p>This session is created when the activity starts and finished when it stops; clients can use\n * it to create children activities.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORCE_FLUSH",
    "type" : "boolean",
    "comment" : " For readability purposes...",
    "links" : [ ]
  }, {
    "name" : "MSG_FLUSH",
    "type" : "int",
    "comment" : "\n     * Handler message used to flush the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BINDER",
    "type" : "String",
    "comment" : "\n     * Name of the {@link IResultReceiver} extra used to pass the binder interface to the service.\n     * @hide\n     ",
    "links" : [ "IResultReceiver" ]
  }, {
    "name" : "EXTRA_ENABLED_STATE",
    "type" : "String",
    "comment" : "\n     * Name of the {@link IResultReceiver} extra used to pass the content capture enabled state.\n     * @hide\n     ",
    "links" : [ "IResultReceiver" ]
  }, {
    "name" : "mDisabled",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "ContentCaptureManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemServerInterface",
    "type" : "IContentCaptureManager",
    "comment" : "\n     * Interface to the system_server binder object - it's only used to start the session (and\n     * notify when the session is finished).\n     ",
    "links" : [ ]
  }, {
    "name" : "mDirectServiceInterface",
    "type" : "IContentCaptureDirectManager",
    "comment" : "\n     * Direct interface to the service binder object - it's used to send the events, including the\n     * last ones (when the session is finished)\n     ",
    "links" : [ ]
  }, {
    "name" : "mDirectServiceVulture",
    "type" : "DeathRecipient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplicationToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComponentName",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEvents",
    "type" : "ArrayList<ContentCaptureEvent>",
    "comment" : "\n     * List of events held to be sent as a batch.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNextFlush",
    "type" : "long",
    "comment" : " Used just for debugging purposes (on dump)",
    "links" : [ ]
  }, {
    "name" : "mNextFlushForTextChanged",
    "type" : "boolean",
    "comment" : "\n     * Whether the next buffer flush is queued by a text changed event.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlushHistory",
    "type" : "LocalLog",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionStateReceiver",
    "type" : "SessionStateReceiver",
    "comment" : "\n     * Binder object used to update the session state.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " MainContentCaptureSession getMainCaptureSession()",
    "returnType" : "MainContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContentCaptureSession newChild(@NonNull ContentCaptureContext clientContext)",
    "returnType" : "ContentCaptureSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void start(@NonNull IBinder token, @NonNull ComponentName component, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Starts this session.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSessionStarted(int resultCode, @Nullable IBinder binder)",
    "returnType" : "void",
    "comment" : "\n     * Callback from {@code system_server} after call to\n     * {@link IContentCaptureManager#startSession(IBinder, ComponentName, String, int,\n     * IResultReceiver)}.\n     *\n     * @param resultCode session state\n     * @param binder handle to {@code IContentCaptureDirectManager}\n     ",
    "links" : [ "IContentCaptureManager#startSession" ]
  }, {
    "name" : "private void sendEvent(@NonNull ContentCaptureEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasStarted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleFlush(@FlushReason int reason, boolean checkExisting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void flushIfNeeded(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void flush(@FlushReason int reason)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateContentCaptureContext(@Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ParceledListSlice<ContentCaptureEvent> clearEvents()",
    "returnType" : "ParceledListSlice<ContentCaptureEvent>",
    "comment" : "\n     * Resets the buffer and return a {@link ParceledListSlice} with the previous events.\n     ",
    "links" : [ "ParceledListSlice" ]
  }, {
    "name" : "private void destroySession()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetSession(int newState)",
    "returnType" : "void",
    "comment" : " clearings out.",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewAppeared(@NonNull ViewStructureImpl node)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewDisappeared(@NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewTextChanged(@NonNull AutofillId id, @Nullable CharSequence text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void internalNotifyViewInsetsChanged(@NonNull Insets viewInsets)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifyViewTreeEvent(boolean started)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifySessionResumed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void internalNotifySessionPaused()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isContentCaptureEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isDisabled()",
    "returnType" : "boolean",
    "comment" : " Called by ContentCaptureManager.isContentCaptureEnabled",
    "links" : [ ]
  }, {
    "name" : " boolean setDisabled(boolean disabled)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the disabled state of content capture.\n     *\n     * @return whether disabled state was changed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void notifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)",
    "returnType" : "void",
    "comment" : " change should also get get rid of the \"internalNotifyXXXX\" methods above",
    "links" : [ ]
  }, {
    "name" : " void notifyChildSessionFinished(int parentSessionId, int childSessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyViewAppeared(int sessionId, @NonNull ViewStructureImpl node)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyViewDisappeared(int sessionId, @NonNull AutofillId id)",
    "returnType" : "void",
    "comment" : " Public because is also used by ViewRootImpl ",
    "links" : [ ]
  }, {
    "name" : " void notifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)",
    "returnType" : "void",
    "comment" : " Public because is also used by ViewRootImpl ",
    "links" : [ ]
  }, {
    "name" : "public void notifyViewTreeEvent(int sessionId, boolean started)",
    "returnType" : "void",
    "comment" : " Public because is also used by ViewRootImpl ",
    "links" : [ ]
  }, {
    "name" : " void notifySessionResumed(int sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifySessionPaused(int sessionId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(@NonNull String prefix, @NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getActivityName()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string that can be used to identify the activity on logging statements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getDebugState()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getDebugState(@FlushReason int reason)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "FORCE_FLUSH", "MSG_FLUSH", "EXTRA_BINDER", "EXTRA_ENABLED_STATE", "mDisabled", "mContext", "mManager", "mHandler", "mSystemServerInterface", "mDirectServiceInterface", "mDirectServiceVulture", "mState", "mApplicationToken", "mComponentName", "mEvents", "mNextFlush", "mNextFlushForTextChanged", "mFlushHistory", "mSessionStateReceiver" ],
  "methodNames" : [ " MainContentCaptureSession getMainCaptureSession()", " ContentCaptureSession newChild(@NonNull ContentCaptureContext clientContext)", " void start(@NonNull IBinder token, @NonNull ComponentName component, int flags)", " void onDestroy()", "private void onSessionStarted(int resultCode, @Nullable IBinder binder)", "private void sendEvent(@NonNull ContentCaptureEvent event)", "private void sendEvent(@NonNull ContentCaptureEvent event, boolean forceFlush)", "private boolean hasStarted()", "private void scheduleFlush(@FlushReason int reason, boolean checkExisting)", "private void flushIfNeeded(@FlushReason int reason)", " void flush(@FlushReason int reason)", "public void updateContentCaptureContext(@Nullable ContentCaptureContext context)", "private ParceledListSlice<ContentCaptureEvent> clearEvents()", "private void destroySession()", "private void resetSession(int newState)", " void internalNotifyViewAppeared(@NonNull ViewStructureImpl node)", " void internalNotifyViewDisappeared(@NonNull AutofillId id)", " void internalNotifyViewTextChanged(@NonNull AutofillId id, @Nullable CharSequence text)", " void internalNotifyViewInsetsChanged(@NonNull Insets viewInsets)", "public void internalNotifyViewTreeEvent(boolean started)", "public void internalNotifySessionResumed()", "public void internalNotifySessionPaused()", " boolean isContentCaptureEnabled()", " boolean isDisabled()", " boolean setDisabled(boolean disabled)", " void notifyChildSessionStarted(int parentSessionId, int childSessionId, @NonNull ContentCaptureContext clientContext)", " void notifyChildSessionFinished(int parentSessionId, int childSessionId)", " void notifyViewAppeared(int sessionId, @NonNull ViewStructureImpl node)", "public void notifyViewDisappeared(int sessionId, @NonNull AutofillId id)", " void notifyViewTextChanged(int sessionId, @NonNull AutofillId id, @Nullable CharSequence text)", "public void notifyViewInsetsChanged(int sessionId, @NonNull Insets viewInsets)", "public void notifyViewTreeEvent(int sessionId, boolean started)", " void notifySessionResumed(int sessionId)", " void notifySessionPaused(int sessionId)", " void notifyContextUpdated(int sessionId, @Nullable ContentCaptureContext context)", " void dump(@NonNull String prefix, @NonNull PrintWriter pw)", "private String getActivityName()", "private String getDebugState()", "private String getDebugState(@FlushReason int reason)" ]
}