{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nearby/ScanRequest.java",
  "packageName" : "android.nearby",
  "className" : "Builder",
  "comment" : " A builder class for {@link ScanRequest}. ",
  "links" : [ "android.nearby.ScanRequest" ],
  "variables" : [ {
    "name" : "INVALID_SCAN_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBleEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffloadOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkSource",
    "type" : "WorkSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScanFilters",
    "type" : "List<ScanFilter>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setScanType(@ScanType int scanType)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the scan type for the request. The scan type must be one of the SCAN_TYPE_ constants\n         * in {@link ScanRequest}.\n         *\n         * @param scanType The scan type for the request\n         ",
    "links" : [ "android.nearby.ScanRequest" ]
  }, {
    "name" : "public Builder setScanMode(@ScanMode int scanMode)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the scan mode for the request. The scan type must be one of the SCAN_MODE_ constants\n         * in {@link ScanRequest}.\n         *\n         * @param scanMode The scan mode for the request\n         ",
    "links" : [ "android.nearby.ScanRequest" ]
  }, {
    "name" : "public Builder setBleEnabled(boolean bleEnabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets if the ble is enabled for scanning.\n         *\n         * @param bleEnabled If the BluetoothLe is enabled in the device.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOffloadOnly(boolean offloadOnly)",
    "returnType" : "Builder",
    "comment" : "\n         * By default, a scan request can be served by either offload or\n         * non-offload implementation, depending on the resource available in the device.\n         *\n         * A client can explicitly request a scan to be served by offload only.\n         * Before the request, the client should query the offload capability by\n         * using {@link NearbyManager#queryOffloadCapability(Executor, Consumer)}}. Otherwise,\n         * {@link ScanCallback#ERROR_UNSUPPORTED} will be returned on devices without\n         * offload capability.\n         ",
    "links" : [ "android.nearby.ScanCallback#ERROR_UNSUPPORTED", "android.nearby.NearbyManager#queryOffloadCapability(Executor" ]
  }, {
    "name" : "public Builder setWorkSource(@Nullable WorkSource workSource)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the work source to use for power attribution for this scan request. Defaults to\n         * empty work source, which implies the caller that sends the scan request will be used\n         * for power attribution.\n         *\n         * <p>Permission enforcement occurs when the resulting scan request is used, not when\n         * this method is invoked.\n         *\n         * @param workSource identifying the application(s) for which to blame for the scan.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addScanFilter(@NonNull ScanFilter scanFilter)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a scan filter to the request. Client can call this method multiple times to add\n         * more than one scan filter. Scan results that match any of these scan filters will\n         * be returned.\n         *\n         * <p>On devices with hardware support, scan filters can significantly improve the battery\n         * usage of Nearby scans.\n         *\n         * @param scanFilter Filter for scanning the request.\n         ",
    "links" : [ ]
  }, {
    "name" : "public ScanRequest build()",
    "returnType" : "ScanRequest",
    "comment" : "\n         * Builds a scan request from this builder.\n         *\n         * @return a new nearby scan request.\n         * @throws IllegalStateException if the scanType is not one of the SCAN_TYPE_ constants in\n         *                               {@link ScanRequest}.\n         ",
    "links" : [ "android.nearby.ScanRequest" ]
  } ],
  "methodNames" : [ "public Builder setScanType(@ScanType int scanType)", "public Builder setScanMode(@ScanMode int scanMode)", "public Builder setBleEnabled(boolean bleEnabled)", "public Builder setOffloadOnly(boolean offloadOnly)", "public Builder setWorkSource(@Nullable WorkSource workSource)", "public Builder addScanFilter(@NonNull ScanFilter scanFilter)", "public ScanRequest build()" ],
  "variableNames" : [ "INVALID_SCAN_TYPE", "mScanType", "mScanMode", "mBleEnabled", "mOffloadOnly", "mWorkSource", "mScanFilters" ]
}