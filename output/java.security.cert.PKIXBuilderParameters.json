{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/PKIXBuilderParameters.java",
  "packageName" : "java.security.cert",
  "className" : "PKIXBuilderParameters",
  "comment" : "\n * Parameters used as input for the PKIX {@code CertPathBuilder}\n * algorithm.\n * <p>\n * A PKIX {@code CertPathBuilder} uses these parameters to {@link\n * CertPathBuilder#build build} a {@code CertPath} which has been\n * validated according to the PKIX certification path validation algorithm.\n *\n * <p>To instantiate a {@code PKIXBuilderParameters} object, an\n * application must specify one or more <i>most-trusted CAs</i> as defined by\n * the PKIX certification path validation algorithm. The most-trusted CA\n * can be specified using one of two constructors. An application\n * can call {@link #PKIXBuilderParameters(Set, CertSelector)\n * PKIXBuilderParameters(Set, CertSelector)}, specifying a\n * {@code Set} of {@code TrustAnchor} objects, each of which\n * identifies a most-trusted CA. Alternatively, an application can call\n * {@link #PKIXBuilderParameters(KeyStore, CertSelector)\n * PKIXBuilderParameters(KeyStore, CertSelector)}, specifying a\n * {@code KeyStore} instance containing trusted certificate entries, each\n * of which will be considered as a most-trusted CA.\n *\n * <p>In addition, an application must specify constraints on the target\n * certificate that the {@code CertPathBuilder} will attempt\n * to build a path to. The constraints are specified as a\n * {@code CertSelector} object. These constraints should provide the\n * {@code CertPathBuilder} with enough search criteria to find the target\n * certificate. Minimal criteria for an {@code X509Certificate} usually\n * include the subject name and/or one or more subject alternative names.\n * If enough criteria is not specified, the {@code CertPathBuilder}\n * may throw a {@code CertPathBuilderException}.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * Unless otherwise specified, the methods defined in this class are not\n * thread-safe. Multiple threads that need to access a single\n * object concurrently should synchronize amongst themselves and\n * provide the necessary locking. Multiple threads each manipulating\n * separate objects need not synchronize.\n *\n * @see CertPathBuilder\n *\n * @since       1.4\n * @author      Sean Mullan\n ",
  "links" : [ "#PKIXBuilderParameters(KeyStore", "java.security.cert.CertPathBuilder#build", "#PKIXBuilderParameters(Set" ],
  "variables" : [ {
    "name" : "maxPathLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setMaxPathLength(int maxPathLength)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of the maximum number of non-self-issued intermediate\n     * certificates that may exist in a certification path. A certificate\n     * is self-issued if the DNs that appear in the subject and issuer\n     * fields are identical and are not empty. Note that the last certificate\n     * in a certification path is not an intermediate certificate, and is not\n     * included in this limit. Usually the last certificate is an end entity\n     * certificate, but it can be a CA certificate. A PKIX\n     * {@code CertPathBuilder} instance must not build\n     * paths longer than the length specified.\n     *\n     * <p> A value of 0 implies that the path can only contain\n     * a single certificate. A value of -1 implies that the\n     * path length is unconstrained (i.e. there is no maximum).\n     * The default maximum path length, if not specified, is 5.\n     * Setting a value less than -1 will cause an exception to be thrown.\n     *\n     * <p> If any of the CA certificates contain the\n     * {@code BasicConstraintsExtension}, the value of the\n     * {@code pathLenConstraint} field of the extension overrides\n     * the maximum path length parameter whenever the result is a\n     * certification path of smaller length.\n     *\n     * @param maxPathLength the maximum number of non-self-issued intermediate\n     *  certificates that may exist in a certification path\n     * @throws InvalidParameterException if {@code maxPathLength} is set\n     *  to a value less than -1\n     *\n     * @see #getMaxPathLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxPathLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the value of the maximum number of intermediate non-self-issued\n     * certificates that may exist in a certification path. See\n     * the {@link #setMaxPathLength} method for more details.\n     *\n     * @return the maximum number of non-self-issued intermediate certificates\n     *  that may exist in a certification path, or -1 if there is no limit\n     *\n     * @see #setMaxPathLength\n     ",
    "links" : [ "#setMaxPathLength" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted string describing the parameters.\n     *\n     * @return a formatted string describing the parameters\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setMaxPathLength(int maxPathLength)", "public int getMaxPathLength()", "public String toString()" ],
  "variableNames" : [ "maxPathLength" ]
}