{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "WearableExtender",
  "comment" : "\n         * Wearable extender for notification actions. To add extensions to an action,\n         * create a new {@link android.app.Notification.Action.WearableExtender} object using\n         * the {@code WearableExtender()} constructor and apply it to a\n         * {@link android.app.Notification.Action.Builder} using\n         * {@link android.app.Notification.Action.Builder#extend}.\n         *\n         * <pre class=\"prettyprint\">\n         * Notification.Action action = new Notification.Action.Builder(\n         *         R.drawable.archive_all, \"Archive all\", actionIntent)\n         *         .extend(new Notification.Action.WearableExtender()\n         *                 .setAvailableOffline(false))\n         *         .build();</pre>\n         ",
  "links" : [ "android.app.Notification.Action.Builder", "android.app.Notification.Action.WearableExtender", "android.app.Notification.Action.Builder#extend" ],
  "variables" : [ {
    "name" : "EXTRA_WEARABLE_EXTENSIONS",
    "type" : "String",
    "comment" : " Notification action extra which contains wearable extensions ",
    "links" : [ ]
  }, {
    "name" : "KEY_FLAGS",
    "type" : "String",
    "comment" : " Keys within EXTRA_WEARABLE_EXTENSIONS for wearable options.",
    "links" : [ ]
  }, {
    "name" : "KEY_IN_PROGRESS_LABEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CONFIRM_LABEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_CANCEL_LABEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_AVAILABLE_OFFLINE",
    "type" : "int",
    "comment" : " Flags bitwise-ored to mFlags",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_LAUNCHES_ACTIVITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_HINT_DISPLAY_INLINE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FLAGS",
    "type" : "int",
    "comment" : " Default value for flags integer",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInProgressLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfirmLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelLabel",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Action.Builder extend(Action.Builder builder)",
    "returnType" : "Action.Builder",
    "comment" : "\n             * Apply wearable extensions to a notification action that is being built. This is\n             * typically called by the {@link android.app.Notification.Action.Builder#extend}\n             * method of {@link android.app.Notification.Action.Builder}.\n             ",
    "links" : [ "android.app.Notification.Action.Builder", "android.app.Notification.Action.Builder#extend" ]
  }, {
    "name" : "public WearableExtender clone()",
    "returnType" : "WearableExtender",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setAvailableOffline(boolean availableOffline)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set whether this action is available when the wearable device is not connected to\n             * a companion device. The user can still trigger this action when the wearable device is\n             * offline, but a visual hint will indicate that the action may not be available.\n             * Defaults to true.\n             ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAvailableOffline()",
    "returnType" : "boolean",
    "comment" : "\n             * Get whether this action is available when the wearable device is not connected to\n             * a companion device. The user can still trigger this action when the wearable device is\n             * offline, but a visual hint will indicate that the action may not be available.\n             * Defaults to true.\n             ",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int mask, boolean value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setInProgressLabel(CharSequence label)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set a label to display while the wearable is preparing to automatically execute the\n             * action. This is usually a 'ing' verb ending in ellipsis like \"Sending...\"\n             *\n             * @param label the label to display while the action is being prepared to execute\n             * @return this object for method chaining\n             ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getInProgressLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n             * Get the label to display while the wearable is preparing to automatically execute\n             * the action. This is usually a 'ing' verb ending in ellipsis like \"Sending...\"\n             *\n             * @return the label to display while the action is being prepared to execute\n             ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setConfirmLabel(CharSequence label)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set a label to display to confirm that the action should be executed.\n             * This is usually an imperative verb like \"Send\".\n             *\n             * @param label the label to confirm the action should be executed\n             * @return this object for method chaining\n             ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getConfirmLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n             * Get the label to display to confirm that the action should be executed.\n             * This is usually an imperative verb like \"Send\".\n             *\n             * @return the label to confirm the action should be executed\n             ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setCancelLabel(CharSequence label)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set a label to display to cancel the action.\n             * This is usually an imperative verb, like \"Cancel\".\n             *\n             * @param label the label to display to cancel the action\n             * @return this object for method chaining\n             ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCancelLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n             * Get the label to display to cancel the action.\n             * This is usually an imperative verb like \"Cancel\".\n             *\n             * @return the label to display to cancel the action\n             ",
    "links" : [ ]
  }, {
    "name" : "public WearableExtender setHintLaunchesActivity(boolean hintLaunchesActivity)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set a hint that this Action will launch an {@link Activity} directly, telling the\n             * platform that it can generate the appropriate transitions.\n             * @param hintLaunchesActivity {@code true} if the content intent will launch\n             * an activity and transitions should be generated, false otherwise.\n             * @return this object for method chaining\n             ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public boolean getHintLaunchesActivity()",
    "returnType" : "boolean",
    "comment" : "\n             * Get a hint that this Action will launch an {@link Activity} directly, telling the\n             * platform that it can generate the appropriate transitions\n             * @return {@code true} if the content intent will launch an activity and transitions\n             * should be generated, false otherwise. The default value is {@code false} if this was\n             * never set.\n             ",
    "links" : [ "android.app.Activity" ]
  }, {
    "name" : "public WearableExtender setHintDisplayActionInline(boolean hintDisplayInline)",
    "returnType" : "WearableExtender",
    "comment" : "\n             * Set a hint that this Action should be displayed inline.\n             *\n             * @param hintDisplayInline {@code true} if action should be displayed inline, false\n             *        otherwise\n             * @return this object for method chaining\n             ",
    "links" : [ ]
  }, {
    "name" : "public boolean getHintDisplayActionInline()",
    "returnType" : "boolean",
    "comment" : "\n             * Get a hint that this Action should be displayed inline.\n             *\n             * @return {@code true} if the Action should be displayed inline, {@code false}\n             *         otherwise. The default value is {@code false} if this was never set.\n             ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Action.Builder extend(Action.Builder builder)", "public WearableExtender clone()", "public WearableExtender setAvailableOffline(boolean availableOffline)", "public boolean isAvailableOffline()", "private void setFlag(int mask, boolean value)", "public WearableExtender setInProgressLabel(CharSequence label)", "public CharSequence getInProgressLabel()", "public WearableExtender setConfirmLabel(CharSequence label)", "public CharSequence getConfirmLabel()", "public WearableExtender setCancelLabel(CharSequence label)", "public CharSequence getCancelLabel()", "public WearableExtender setHintLaunchesActivity(boolean hintLaunchesActivity)", "public boolean getHintLaunchesActivity()", "public WearableExtender setHintDisplayActionInline(boolean hintDisplayInline)", "public boolean getHintDisplayActionInline()" ],
  "variableNames" : [ "EXTRA_WEARABLE_EXTENSIONS", "KEY_FLAGS", "KEY_IN_PROGRESS_LABEL", "KEY_CONFIRM_LABEL", "KEY_CANCEL_LABEL", "FLAG_AVAILABLE_OFFLINE", "FLAG_HINT_LAUNCHES_ACTIVITY", "FLAG_HINT_DISPLAY_INLINE", "DEFAULT_FLAGS", "mFlags", "mInProgressLabel", "mConfirmLabel", "mCancelLabel" ]
}