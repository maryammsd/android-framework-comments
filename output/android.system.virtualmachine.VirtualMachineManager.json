{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/virtualmachine/VirtualMachineManager.java",
  "packageName" : "android.system.virtualmachine",
  "className" : "VirtualMachineManager",
  "comment" : "\n * Manages {@linkplain VirtualMachine virtual machine} instances created by an app. Each instance is\n * created from a {@linkplain VirtualMachineConfig configuration} that defines the shape of the VM\n * (RAM, CPUs), the code to execute within it, etc.\n *\n * <p>Each virtual machine instance is named; the configuration and related state of each is\n * persisted in the app's private data directory and an instance can be retrieved given the name.\n * The name must be a valid directory name and must not contain '/'.\n *\n * <p>The app can then start, stop and otherwise interact with the VM.\n *\n * <p>An instance of {@link VirtualMachineManager} can be obtained by calling {@link\n * Context#getSystemService(Class)}.\n *\n * @hide\n ",
  "links" : [ "android.system.virtualmachine.VirtualMachineManager", "android.content.Context#getSystemService(Class)" ],
  "variables" : [ {
    "name" : "sCreateLock",
    "type" : "Object",
    "comment" : "\n     * A lock used to synchronize the creation of virtual machines. It protects {@link #mVmsByName},\n     * but is also held throughout VM creation / retrieval / deletion, to prevent these actions\n     * racing with each other.\n     ",
    "links" : [ "#mVmsByName" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVmsByName",
    "type" : "Map<String, WeakReference<VirtualMachine>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_PROTECTED_VM",
    "type" : "int",
    "comment" : "\n     * The implementation supports creating protected VMs, whose memory is inaccessible to the host\n     * OS.\n     *\n     * @see VirtualMachineConfig.Builder#setProtectedVm\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPABILITY_NON_PROTECTED_VM",
    "type" : "int",
    "comment" : "\n     * The implementation supports creating non-protected VMs, whose memory is accessible to the\n     * host OS.\n     *\n     * @see VirtualMachineConfig.Builder#setProtectedVm\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_DICE_CHANGES",
    "type" : "String",
    "comment" : "\n     * Feature to include new data in the VM DICE chain.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_MULTI_TENANT",
    "type" : "String",
    "comment" : "\n     * Feature to run payload as non-root user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_REMOTE_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * Feature to allow remote attestation in Microdroid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_VENDOR_MODULES",
    "type" : "String",
    "comment" : "\n     * Feature to allow vendor modules in Microdroid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_LLPVM_CHANGES",
    "type" : "String",
    "comment" : "\n     * Feature to enable Secretkeeper protected secrets in Microdroid based pVMs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "JSON_SUFFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_OS_LIST_FROM_CFG",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getCapabilities()",
    "returnType" : "int",
    "comment" : "\n     * Returns a set of flags indicating what this implementation of virtualization is capable of.\n     *\n     * @see #CAPABILITY_PROTECTED_VM\n     * @see #CAPABILITY_NON_PROTECTED_VM\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VirtualMachine create(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "\n     * Creates a new {@link VirtualMachine} with the given name and config. Creating a virtual\n     * machine with the same name as an existing virtual machine is an error. The existing virtual\n     * machine has to be deleted before its name can be reused.\n     *\n     * <p>Each successful call to this method creates a new (and different) virtual machine even if\n     * the name and the config are the same as a deleted one. The new virtual machine will initially\n     * be stopped.\n     *\n     * <p>NOTE: This method may block and should not be called on the main thread.\n     *\n     * @throws VirtualMachineException if the VM cannot be created, or there is an existing VM with\n     *     the given name.\n     * @hide\n     ",
    "links" : [ "android.system.virtualmachine.VirtualMachine" ]
  }, {
    "name" : "private VirtualMachine createLocked(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VirtualMachine get(@NonNull String name) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "\n     * Returns an existing {@link VirtualMachine} with the given name. Returns null if there is no\n     * such virtual machine.\n     *\n     * <p>There is at most one {@code VirtualMachine} object corresponding to a given virtual\n     * machine instance. Multiple calls to get() passing the same name will get the same object\n     * returned, until the virtual machine is deleted (via {@link #delete}) and then recreated.\n     *\n     * <p>NOTE: This method may block and should not be called on the main thread.\n     *\n     * @see #getOrCreate\n     * @throws VirtualMachineException if the virtual machine exists but could not be successfully\n     *     retrieved. This can be resolved by calling {@link #delete} on the VM.\n     * @hide\n     ",
    "links" : [ "android.system.virtualmachine.VirtualMachine", "#delete" ]
  }, {
    "name" : "private VirtualMachine getLocked(@NonNull String name) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public VirtualMachine importFromDescriptor(@NonNull String name, @NonNull VirtualMachineDescriptor vmDescriptor) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "\n     * Imports a virtual machine from an {@link VirtualMachineDescriptor} object and associates it\n     * with the given name.\n     *\n     * <p>The new virtual machine will be in the same state as the descriptor indicates. The\n     * descriptor is automatically closed and cannot be used again.\n     *\n     * <p>NOTE: This method may block and should not be called on the main thread.\n     *\n     * @throws VirtualMachineException if the VM cannot be imported or the {@code\n     *     VirtualMachineDescriptor} has already been closed.\n     * @hide\n     ",
    "links" : [ "android.system.virtualmachine.VirtualMachineDescriptor" ]
  }, {
    "name" : "public VirtualMachine getOrCreate(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException",
    "returnType" : "VirtualMachine",
    "comment" : "\n     * Returns an existing {@link VirtualMachine} if it exists, or create a new one. The config\n     * parameter is used only when a new virtual machine is created.\n     *\n     * <p>NOTE: This method may block and should not be called on the main thread.\n     *\n     * @throws VirtualMachineException if the virtual machine could not be created or retrieved.\n     * @hide\n     ",
    "links" : [ "android.system.virtualmachine.VirtualMachine" ]
  }, {
    "name" : "public void delete(@NonNull String name) throws VirtualMachineException",
    "returnType" : "void",
    "comment" : "\n     * Deletes an existing {@link VirtualMachine}. Deleting a virtual machine means deleting any\n     * persisted data associated with it including the per-VM secret. This is an irreversible\n     * action. A virtual machine once deleted can never be restored. A new virtual machine created\n     * with the same name is different from an already deleted virtual machine even if it has the\n     * same config.\n     *\n     * <p>NOTE: This method may block and should not be called on the main thread.\n     *\n     * @throws VirtualMachineException if the virtual machine does not exist, is not stopped, or\n     *     cannot be deleted.\n     * @hide\n     ",
    "links" : [ "android.system.virtualmachine.VirtualMachine" ]
  }, {
    "name" : "private VirtualMachine getVmByName(@NonNull String name)",
    "returnType" : "VirtualMachine",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isVendorModuleEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> extractSupportedOSListFromConfig()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getSupportedOSList() throws VirtualMachineException",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list of supported OS names.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFeatureEnabled(@Features String featureName) throws VirtualMachineException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if given {@code featureName} is enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRemoteAttestationSupported() throws VirtualMachineException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the pVM remote attestation feature is supported. Remote attestation\n     * allows a protected VM to attest its authenticity to a remote server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpdatableVmSupported() throws VirtualMachineException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if Updatable VM feature is supported by AVF. Updatable VM allow secrets\n     * and data to be accessible even after updates of boot images and apks. For more info see\n     * packages/modules/Virtualization/docs/updatable_vm.md\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getCapabilities()", "public VirtualMachine create(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException", "private VirtualMachine createLocked(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException", "public VirtualMachine get(@NonNull String name) throws VirtualMachineException", "private VirtualMachine getLocked(@NonNull String name) throws VirtualMachineException", "public VirtualMachine importFromDescriptor(@NonNull String name, @NonNull VirtualMachineDescriptor vmDescriptor) throws VirtualMachineException", "public VirtualMachine getOrCreate(@NonNull String name, @NonNull VirtualMachineConfig config) throws VirtualMachineException", "public void delete(@NonNull String name) throws VirtualMachineException", "private VirtualMachine getVmByName(@NonNull String name)", "private boolean isVendorModuleEnabled()", "private static List<String> extractSupportedOSListFromConfig()", "public List<String> getSupportedOSList() throws VirtualMachineException", "public boolean isFeatureEnabled(@Features String featureName) throws VirtualMachineException", "public boolean isRemoteAttestationSupported() throws VirtualMachineException", "public boolean isUpdatableVmSupported() throws VirtualMachineException" ],
  "variableNames" : [ "sCreateLock", "mContext", "mVmsByName", "CAPABILITY_PROTECTED_VM", "CAPABILITY_NON_PROTECTED_VM", "FEATURE_DICE_CHANGES", "FEATURE_MULTI_TENANT", "FEATURE_REMOTE_ATTESTATION", "FEATURE_VENDOR_MODULES", "FEATURE_LLPVM_CHANGES", "JSON_SUFFIX", "SUPPORTED_OS_LIST_FROM_CFG" ]
}