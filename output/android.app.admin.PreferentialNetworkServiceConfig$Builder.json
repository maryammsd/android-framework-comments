{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/PreferentialNetworkServiceConfig.java",
  "packageName" : "android.app.admin",
  "className" : "Builder",
  "comment" : "\n     * Builder used to create {@link PreferentialNetworkServiceConfig} objects.\n     * Specify the preferred Network preference\n     ",
  "links" : [ "android.app.admin.PreferentialNetworkServiceConfig" ],
  "variables" : [ {
    "name" : "mIsEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowFallbackToDefaultConnection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldBlockNonMatchingNetworks",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludedUids",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedUids",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PreferentialNetworkServiceConfig.Builder setEnabled(boolean isEnabled)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set the preferential network service enabled state.\n         * Default value is false.\n         * @param isEnabled  the desired network preference to use, true to enable else false\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig.Builder setFallbackToDefaultConnectionAllowed(boolean allowFallbackToDefaultConnection)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set whether fallback to the device-wide default network is allowed.\n         *\n         * This boolean configures whether the default connection (e.g. general cell network or\n         * wifi) should be used if no preferential network service connection is available. If true,\n         * the default connection will be used when no preferential service is available. If false,\n         * the UIDs subject to this configuration will have no default network.\n         * Note that while this boolean determines whether the UIDs subject to this configuration\n         * have a default network in the absence of a preferential service, apps can still\n         * explicitly decide to use another network than their default network by requesting them\n         * from the system. This boolean does not determine whether the UIDs are blocked from using\n         * such other networks.\n         * Use {@link #setShouldBlockNonMatchingNetworks(boolean)} to specify this.\n         *\n         * The default value is true.\n         *\n         * @param allowFallbackToDefaultConnection  true if fallback is allowed else false\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ "#setShouldBlockNonMatchingNetworks(boolean)" ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig.Builder setShouldBlockNonMatchingNetworks(boolean blockNonMatchingNetworks)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set whether to block UIDs from using other networks than the preferential service.\n         *\n         * Apps can inspect the list of available networks on the device and choose to use multiple\n         * of them concurrently for performance, privacy or other reasons.\n         * This boolean configures whether the concerned UIDs should be blocked from using\n         * networks that do not match the configured preferential network service even if these\n         * networks are otherwise open to all apps.\n         *\n         * The default value is false. This value can only be set to {@code true} if\n         * {@link #setFallbackToDefaultConnectionAllowed(boolean)} is set to {@code false}, because\n         * allowing fallback but blocking it does not make sense. Failure to comply with this\n         * constraint will throw when building the object.\n         *\n         * @param blockNonMatchingNetworks true if UIDs should be blocked from using non-matching\n         *                                 networks.\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ "#setFallbackToDefaultConnectionAllowed(boolean)" ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig.Builder setIncludedUids(@NonNull int[] uids)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set the array of uids whose network access will go through this preferential\n         * network service.\n         * {@see #setExcludedUids(int[])}\n         * Included UIDs and Excluded UIDs can't both be non-empty.\n         * if both are empty, it means this request applies to all uids in the user profile.\n         * if included is not empty, then only included UIDs are applied.\n         * if excluded is not empty, then it is all uids in the user profile except these UIDs.\n         * @param uids  array of included uids\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig.Builder setExcludedUids(@NonNull int[] uids)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set the array of uids who are not allowed through this preferential\n         * network service.\n         * {@see #setIncludedUids(int[])}\n         * Included UIDs and Excluded UIDs can't both be non-empty.\n         * if both are empty, it means this request applies to all uids in the user profile.\n         * if included is not empty, then only included UIDs are applied.\n         * if excluded is not empty, then it is all uids in the user profile except these UIDs.\n         * @param uids  array of excluded uids\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig build()",
    "returnType" : "PreferentialNetworkServiceConfig",
    "comment" : "\n         * Returns an instance of {@link PreferentialNetworkServiceConfig} created from the\n         * fields set on this builder.\n         ",
    "links" : [ "android.app.admin.PreferentialNetworkServiceConfig" ]
  }, {
    "name" : "public PreferentialNetworkServiceConfig.Builder setNetworkId(@PreferentialNetworkPreferenceId int preferenceId)",
    "returnType" : "PreferentialNetworkServiceConfig.Builder",
    "comment" : "\n         * Set the preferential network identifier.\n         * preference identifier is applicable only if preferential network service is enabled.\n         * @param preferenceId  preference Id\n         * @return The builder to facilitate chaining.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PreferentialNetworkServiceConfig.Builder setEnabled(boolean isEnabled)", "public PreferentialNetworkServiceConfig.Builder setFallbackToDefaultConnectionAllowed(boolean allowFallbackToDefaultConnection)", "public PreferentialNetworkServiceConfig.Builder setShouldBlockNonMatchingNetworks(boolean blockNonMatchingNetworks)", "public PreferentialNetworkServiceConfig.Builder setIncludedUids(@NonNull int[] uids)", "public PreferentialNetworkServiceConfig.Builder setExcludedUids(@NonNull int[] uids)", "public PreferentialNetworkServiceConfig build()", "public PreferentialNetworkServiceConfig.Builder setNetworkId(@PreferentialNetworkPreferenceId int preferenceId)" ],
  "variableNames" : [ "mIsEnabled", "mNetworkId", "mAllowFallbackToDefaultConnection", "mShouldBlockNonMatchingNetworks", "mIncludedUids", "mExcludedUids" ]
}