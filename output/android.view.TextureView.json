{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/TextureView.java",
  "packageName" : "android.view",
  "className" : "TextureView",
  "comment" : "\n * <p>A TextureView can be used to display a content stream, such as that\n * coming from a camera preview, a video, or an OpenGL scene. The content stream\n * can come from the application's process as well as a remote process.</p>\n *\n * <p>TextureView can only be used in a hardware accelerated window. When\n * rendered in software, TextureView will draw nothing.</p>\n *\n * <p><b>TextureView vs. SurfaceView Capabilities</b></p>\n\n * <p>\n *   <table>\n *     <tr>\n *       <th>&nbsp;</th>\n *       <th style=\"text-align: center;\">TextureView</th>\n *       <th style=\"text-align: center;\">SurfaceView</th>\n *     </tr>\n *     <tr>\n *       <td>Supports View alpha</td>\n *       <td style=\"text-align: center;\">X</td>\n *       <td style=\"text-align: center;\">U+</td>\n *     </tr>\n *     <tr>\n *       <td>Supports rotations</td>\n *       <td style=\"text-align: center;\">X</td>\n *       <td style=\"text-align: center;\">&nbsp;</td>\n *     </tr>\n *     <tr>\n *       <td>Supports clipping</td>\n *       <td style=\"text-align: center;\">X</td>\n *       <td style=\"text-align: center;\">&nbsp;</td>\n *     </tr>\n *     <tr>\n *       <td>HDR support</td>\n *       <td style=\"text-align: center;\">Limited (on Android T+)</td>\n *       <td style=\"text-align: center;\">Full</td>\n *     </tr>\n *     <tr>\n *       <td>Renders DRM content</td>\n *       <td style=\"text-align: center;\">&nbsp;</td>\n *       <td style=\"text-align: center;\">X</td>\n *     </tr>\n *   </table>\n * </p>\n *\n * <p>Unlike {@link SurfaceView}, TextureView does not create a separate\n * window but behaves as a regular View. This key difference allows a\n * TextureView to have translucency, arbitrary rotations, and complex\n * clipping. For example, you can make a TextureView semi-translucent by\n * calling <code>myView.setAlpha(0.5f)</code>.</p>\n *\n * <p>One implication of this integration of TextureView into the view\n * hierarchy is that it may have slower performance than\n * SurfaceView. TextureView contents must be copied, internally, from the\n * underlying surface into the view displaying those contents. For\n * that reason, <b>SurfaceView is recommended as a more general solution\n * to problems requiring rendering to surfaces.</b></p>\n *\n * <p>Using a TextureView is simple: all you need to do is get its\n * {@link SurfaceTexture}. The {@link SurfaceTexture} can then be used to\n * render content. The following example demonstrates how to render a video\n * into a TextureView:</p>\n *\n * <pre>\n *  public class MyActivity extends Activity implements TextureView.SurfaceTextureListener {\n *      private MediaPlayer mMediaPlayer;\n *      private TextureView mTextureView;\n *\n *      protected void onCreate(Bundle savedInstanceState) {\n *          super.onCreate(savedInstanceState);\n *\n *          mMediaPlayer = new MediaPlayer();\n *\n *          mTextureView = new TextureView(this);\n *          mTextureView.setSurfaceTextureListener(this);\n *          setContentView(mTextureView);\n *      }\n *\n *      public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surfaceTexture,\n *                                            int width, int height) {\n *          AssetFileDescriptor fileDescriptor = // get file descriptor\n *          mMediaPlayer.setDataSource(fileDescriptor);\n *          mMediaPlayer.setSurface(new Surface(surfaceTexture));\n *          mMediaPlayer.prepareAsync();\n *          mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n *              &#64;Override\n *              public void onPrepared(MediaPlayer mp) {\n *                  mMediaPlayer.start();\n *              }\n *          });\n *         } catch (IOException e) {\n *             e.printStackTrace();\n *         }\n *      }\n *\n *     &#64;Override\n *     public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surfaceTexture,\n *                                             int width, int height) {\n *         // Handle size change depending on media needs\n *     }\n *\n *     &#64;Override\n *     public boolean onSurfaceTextureDestroyed(@NonNull SurfaceTexture surfaceTexture) {\n *         // Release unneeded resources\n *         mMediaPlayer.stop();\n *         mMediaPlayer.release();\n *         return true;\n *     }\n *\n *     &#64;Override\n *     public void onSurfaceTextureUpdated(@NonNull SurfaceTexture surfaceTexture) {\n *          // Invoked every time there's a new video frame\n *     }\n *\n *  }\n * </pre>\n *\n * <p>Similarly, TextureView can supply the surface needed for GL rendering or\n * camera previews. Camera2 APIs require the surface created by TextureView,\n * although developers are recommended to use the CameraX APIs instead, for which\n * PreviewView creates its own TextureView or SurfaceView internally.</p>\n *\n * <p>A TextureView's SurfaceTexture can be obtained either by invoking\n * {@link #getSurfaceTexture()} or by using a {@link SurfaceTextureListener}.\n * It is important to know that a SurfaceTexture is available only after the\n * TextureView is attached to a window (and {@link #onAttachedToWindow()} has\n * been invoked.) It is therefore highly recommended you use a listener to\n * be notified when the SurfaceTexture becomes available.</p>\n *\n * <p>It is important to note that only one producer can use the TextureView.\n * For instance, if you use a TextureView to display the camera preview, you\n * cannot use {@link #lockCanvas()} to draw onto the TextureView at the same\n * time.</p>\n *\n * @see SurfaceView\n * @see SurfaceTexture\n ",
  "links" : [ "android.graphics.SurfaceTexture", "android.view.SurfaceView", "SurfaceTextureListener", "#lockCanvas()", "#onAttachedToWindow()", "#getSurfaceTexture()" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayer",
    "type" : "TextureLayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "SurfaceTexture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "SurfaceTextureListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHadSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpaque",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrixChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateLayer",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpdateSurface",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSaveCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeWindowLock",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeWindow",
    "type" : "long",
    "comment" : " Set by native code, do not write!",
    "links" : [ ]
  }, {
    "name" : "mMinusTwoFrameIntervalMillis",
    "type" : "long",
    "comment" : " (b/329156944)",
    "links" : [ ]
  }, {
    "name" : "mLastFrameTimeMillis",
    "type" : "long",
    "comment" : " (b/329156944)",
    "links" : [ ]
  }, {
    "name" : "mUpdateListener",
    "type" : "SurfaceTexture.OnFrameAvailableListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isOpaque()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOpaque(boolean opaque)",
    "returnType" : "void",
    "comment" : "\n     * Indicates whether the content of this TextureView is opaque. The\n     * content is assumed to be opaque by default.\n     *\n     * @param opaque True if the content of this TextureView is opaque,\n     *               false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAttachedToWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindowInternal()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void destroyHardwareResources()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void destroyHardwareLayer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseSurfaceTexture()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLayerType(int layerType, @Nullable Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * The layer type of a TextureView is ignored since a TextureView is always\n     * considered to act as a hardware layer. The optional paint supplied to this\n     * method will however be taken into account when rendering the content of\n     * this TextureView.\n     *\n     * @param layerType The type of layer to use with this view, must be one of\n     *        {@link #LAYER_TYPE_NONE}, {@link #LAYER_TYPE_SOFTWARE} or\n     *        {@link #LAYER_TYPE_HARDWARE}\n     * @param paint The paint used to compose the layer. This argument is optional\n     *        and can be null. It is ignored when the layer type is\n     *        {@link #LAYER_TYPE_NONE}\n     ",
    "links" : [ "#LAYER_TYPE_HARDWARE", "#LAYER_TYPE_SOFTWARE", "#LAYER_TYPE_NONE" ]
  }, {
    "name" : "public void setLayerPaint(@Nullable Paint paint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getLayerType()",
    "returnType" : "int",
    "comment" : "\n     * Always returns {@link #LAYER_TYPE_HARDWARE}.\n     ",
    "links" : [ "#LAYER_TYPE_HARDWARE" ]
  }, {
    "name" : "public void buildLayer()",
    "returnType" : "void",
    "comment" : "\n     * Calling this method has no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForeground(Drawable foreground)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBackgroundDrawable(Drawable background)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses of TextureView cannot do their own rendering\n     * with the {@link Canvas} object.\n     *\n     * @param canvas The Canvas to which the View is rendered.\n     ",
    "links" : [ "android.graphics.Canvas" ]
  }, {
    "name" : "protected final void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses of TextureView cannot do their own rendering\n     * with the {@link Canvas} object.\n     *\n     * @param canvas The Canvas to which the View is rendered.\n     ",
    "links" : [ "android.graphics.Canvas" ]
  }, {
    "name" : "protected void onSizeChanged(int w, int h, int oldw, int oldh)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " TextureLayer getTextureLayer()",
    "returnType" : "TextureLayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onVisibilityChanged(View changedView, int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLayerAndInvalidate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyUpdate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTransform(@Nullable Matrix transform)",
    "returnType" : "void",
    "comment" : "\n     * <p>Sets the transform to associate with this texture view.\n     * The specified transform applies to the underlying surface\n     * texture and does not affect the size or position of the view\n     * itself, only of its content.</p>\n     *\n     * <p>Some transforms might prevent the content from drawing\n     * all the pixels contained within this view's bounds. In such\n     * situations, make sure this texture view is not marked opaque.</p>\n     *\n     * @param transform The transform to apply to the content of\n     *        this view. If null the transform will be set to identity.\n     *\n     * @see #getTransform(android.graphics.Matrix)\n     * @see #isOpaque()\n     * @see #setOpaque(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Matrix getTransform(@Nullable Matrix transform)",
    "returnType" : "Matrix",
    "comment" : "\n     * Returns the transform associated with this texture view.\n     *\n     * @param transform The {@link Matrix} in which to copy the current\n     *        transform. Can be null.\n     *\n     * @return The specified matrix if not null or a new {@link Matrix}\n     *         instance otherwise.\n     *\n     * @see #setTransform(android.graphics.Matrix)\n     ",
    "links" : [ "android.graphics.Matrix" ]
  }, {
    "name" : "private void applyTransformMatrix()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * <p>Returns a {@link android.graphics.Bitmap} representation of the content\n     * of the associated surface texture. If the surface texture is not available,\n     * this method returns null.</p>\n     *\n     * <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888}\n     * pixel format and its dimensions are the same as this view's.</p>\n     *\n     * <p><strong>Do not</strong> invoke this method from a drawing method\n     * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>\n     *\n     * <p>If an error occurs during the copy, an empty bitmap will be returned.</p>\n     *\n     * @return A valid {@link Bitmap.Config#ARGB_8888} bitmap, or null if the surface\n     *         texture is not available or the width &lt;= 0 or the height &lt;= 0\n     *\n     * @see #isAvailable()\n     * @see #getBitmap(android.graphics.Bitmap)\n     * @see #getBitmap(int, int)\n     ",
    "links" : [ "android.graphics.Bitmap", "#onDraw(android.graphics.Canvas)", "Bitmap.Config#ARGB_8888" ]
  }, {
    "name" : "public Bitmap getBitmap(int width, int height)",
    "returnType" : "Bitmap",
    "comment" : "\n     * <p>Returns a {@link android.graphics.Bitmap} representation of the content\n     * of the associated surface texture. If the surface texture is not available,\n     * this method returns null.</p>\n     *\n     * <p>The bitmap returned by this method uses the {@link Bitmap.Config#ARGB_8888}\n     * pixel format.</p>\n     *\n     * <p><strong>Do not</strong> invoke this method from a drawing method\n     * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>\n     *\n     * <p>If an error occurs during the copy, an empty bitmap will be returned.</p>\n     *\n     * @param width The width of the bitmap to create\n     * @param height The height of the bitmap to create\n     *\n     * @return A valid {@link Bitmap.Config#ARGB_8888} bitmap, or null if the surface\n     *         texture is not available or width is &lt;= 0 or height is &lt;= 0\n     *\n     * @see #isAvailable()\n     * @see #getBitmap(android.graphics.Bitmap)\n     * @see #getBitmap()\n     ",
    "links" : [ "android.graphics.Bitmap", "#onDraw(android.graphics.Canvas)", "Bitmap.Config#ARGB_8888" ]
  }, {
    "name" : "public Bitmap getBitmap(@NonNull Bitmap bitmap)",
    "returnType" : "Bitmap",
    "comment" : "\n     * <p>Copies the content of this view's surface texture into the specified\n     * bitmap. If the surface texture is not available, the copy is not executed.\n     * The content of the surface texture will be scaled to fit exactly inside\n     * the specified bitmap.</p>\n     *\n     * <p><strong>Do not</strong> invoke this method from a drawing method\n     * ({@link #onDraw(android.graphics.Canvas)} for instance).</p>\n     *\n     * <p>If an error occurs, the bitmap is left unchanged.</p>\n     *\n     * @param bitmap The bitmap to copy the content of the surface texture into,\n     *               cannot be null, all configurations are supported\n     *\n     * @return The bitmap specified as a parameter\n     *\n     * @see #isAvailable()\n     * @see #getBitmap(int, int)\n     * @see #getBitmap()\n     *\n     * @throws IllegalStateException if the hardware rendering context cannot be\n     *         acquired to capture the bitmap\n     ",
    "links" : [ "#onDraw(android.graphics.Canvas)" ]
  }, {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the {@link SurfaceTexture} associated with this\n     * TextureView is available for rendering. When this method returns\n     * true, {@link #getSurfaceTexture()} returns a valid surface texture.\n     ",
    "links" : [ "android.graphics.SurfaceTexture", "#getSurfaceTexture()" ]
  }, {
    "name" : "public Canvas lockCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n     * <p>Start editing the pixels in the surface.  The returned Canvas can be used\n     * to draw into the surface's bitmap.  A null is returned if the surface has\n     * not been created or otherwise cannot be edited. You will usually need\n     * to implement\n     * {@link SurfaceTextureListener#onSurfaceTextureAvailable(android.graphics.SurfaceTexture, int, int)}\n     * to find out when the Surface is available for use.</p>\n     *\n     * <p>The content of the Surface is never preserved between unlockCanvas()\n     * and lockCanvas(), for this reason, every pixel within the Surface area\n     * must be written. The only exception to this rule is when a dirty\n     * rectangle is specified, in which case, non-dirty pixels will be\n     * preserved.</p>\n     *\n     * <p>This method can only be used if the underlying surface is not already\n     * owned by another producer. For instance, if the TextureView is being used\n     * to render the camera's preview you cannot invoke this method.</p>\n     *\n     * @return A Canvas used to draw into the surface, or null if the surface cannot be locked for\n     * drawing (see {@link #isAvailable()}).\n     *\n     * @see #lockCanvas(android.graphics.Rect)\n     * @see #unlockCanvasAndPost(android.graphics.Canvas)\n     ",
    "links" : [ "#onSurfaceTextureAvailable(android.graphics.SurfaceTexture", "#isAvailable()" ]
  }, {
    "name" : "public Canvas lockCanvas(@Nullable Rect dirty)",
    "returnType" : "Canvas",
    "comment" : "\n     * Just like {@link #lockCanvas()} but allows specification of a dirty\n     * rectangle. Every pixel within that rectangle must be written; however\n     * pixels outside the dirty rectangle will be preserved by the next call\n     * to lockCanvas().\n     *\n     * This method can return null if the underlying surface texture is not\n     * available (see {@link #isAvailable()} or if the surface texture is\n     * already connected to an image producer (for instance: the camera,\n     * OpenGL, a media player, etc.)\n     *\n     * @param dirty Area of the surface that will be modified. If null the area of the entire\n     *              surface is used.\n\n     * @return A Canvas used to draw into the surface, or null if the surface cannot be locked for\n     * drawing (see {@link #isAvailable()}).\n     *\n     * @see #lockCanvas()\n     * @see #unlockCanvasAndPost(android.graphics.Canvas)\n     * @see #isAvailable()\n     ",
    "links" : [ "#lockCanvas()", "#isAvailable()" ]
  }, {
    "name" : "public void unlockCanvasAndPost(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "\n     * Finish editing pixels in the surface. After this call, the surface's\n     * current pixels will be shown on the screen, but its content is lost,\n     * in particular there is no guarantee that the content of the Surface\n     * will remain unchanged when lockCanvas() is called again.\n     *\n     * @param canvas The Canvas previously returned by lockCanvas()\n     *\n     * @see #lockCanvas()\n     * @see #lockCanvas(android.graphics.Rect)\n     ",
    "links" : [ ]
  }, {
    "name" : "public SurfaceTexture getSurfaceTexture()",
    "returnType" : "SurfaceTexture",
    "comment" : "\n     * Returns the {@link SurfaceTexture} used by this view. This method\n     * may return null if the view is not attached to a window or if the surface\n     * texture has not been initialized yet.\n     *\n     * @see #isAvailable()\n     ",
    "links" : [ "android.graphics.SurfaceTexture" ]
  }, {
    "name" : "public void setSurfaceTexture(@NonNull SurfaceTexture surfaceTexture)",
    "returnType" : "void",
    "comment" : "\n     * Set the {@link SurfaceTexture} for this view to use. If a {@link\n     * SurfaceTexture} is already being used by this view, it is immediately\n     * released and not usable any more.  The {@link\n     * SurfaceTextureListener#onSurfaceTextureDestroyed} callback is <b>not</b>\n     * called for the previous {@link SurfaceTexture}.  Similarly, the {@link\n     * SurfaceTextureListener#onSurfaceTextureAvailable} callback is <b>not</b>\n     * called for the {@link SurfaceTexture} passed to setSurfaceTexture.\n     *\n     * The {@link SurfaceTexture} object must be detached from all OpenGL ES\n     * contexts prior to calling this method.\n     *\n     * @param surfaceTexture The {@link SurfaceTexture} that the view should use.\n     * @see SurfaceTexture#detachFromGLContext()\n     ",
    "links" : [ "android.graphics.SurfaceTexture", "#onSurfaceTextureDestroyed", "#onSurfaceTextureAvailable" ]
  }, {
    "name" : "public SurfaceTextureListener getSurfaceTextureListener()",
    "returnType" : "SurfaceTextureListener",
    "comment" : "\n     * Returns the {@link SurfaceTextureListener} currently associated with this\n     * texture view.\n     *\n     * @see #setSurfaceTextureListener(android.view.TextureView.SurfaceTextureListener)\n     * @see SurfaceTextureListener\n     ",
    "links" : [ "SurfaceTextureListener" ]
  }, {
    "name" : "public void setSurfaceTextureListener(@Nullable SurfaceTextureListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link SurfaceTextureListener} used to listen to surface\n     * texture events.\n     *\n     * @see #getSurfaceTextureListener()\n     * @see SurfaceTextureListener\n     ",
    "links" : [ "SurfaceTextureListener" ]
  }, {
    "name" : "protected int calculateFrameRateCategory()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void votePreferredFrameRate()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private native void nCreateNativeWindow(SurfaceTexture surface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void nDestroyNativeWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nLockCanvas(long nativeWindow, Canvas canvas, Rect dirty)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nUnlockCanvasAndPost(long nativeWindow, Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isOpaque()", "public void setOpaque(boolean opaque)", "protected void onAttachedToWindow()", "protected void onDetachedFromWindowInternal()", "protected void destroyHardwareResources()", "private void destroyHardwareLayer()", "private void releaseSurfaceTexture()", "public void setLayerType(int layerType, @Nullable Paint paint)", "public void setLayerPaint(@Nullable Paint paint)", "public int getLayerType()", "public void buildLayer()", "public void setForeground(Drawable foreground)", "public void setBackgroundDrawable(Drawable background)", "public final void draw(Canvas canvas)", "protected final void onDraw(Canvas canvas)", "protected void onSizeChanged(int w, int h, int oldw, int oldh)", " TextureLayer getTextureLayer()", "protected void onVisibilityChanged(View changedView, int visibility)", "private void updateLayer()", "private void updateLayerAndInvalidate()", "private void applyUpdate()", "public void setTransform(@Nullable Matrix transform)", "public Matrix getTransform(@Nullable Matrix transform)", "private void applyTransformMatrix()", "public Bitmap getBitmap()", "public Bitmap getBitmap(int width, int height)", "public Bitmap getBitmap(@NonNull Bitmap bitmap)", "public boolean isAvailable()", "public Canvas lockCanvas()", "public Canvas lockCanvas(@Nullable Rect dirty)", "public void unlockCanvasAndPost(@NonNull Canvas canvas)", "public SurfaceTexture getSurfaceTexture()", "public void setSurfaceTexture(@NonNull SurfaceTexture surfaceTexture)", "public SurfaceTextureListener getSurfaceTextureListener()", "public void setSurfaceTextureListener(@Nullable SurfaceTextureListener listener)", "protected int calculateFrameRateCategory()", "protected void votePreferredFrameRate()", "private native void nCreateNativeWindow(SurfaceTexture surface)", "private native void nDestroyNativeWindow()", "private static native boolean nLockCanvas(long nativeWindow, Canvas canvas, Rect dirty)", "private static native void nUnlockCanvasAndPost(long nativeWindow, Canvas canvas)" ],
  "variableNames" : [ "LOG_TAG", "mLayer", "mSurface", "mListener", "mHadSurface", "mOpaque", "mMatrix", "mMatrixChanged", "mLock", "mUpdateLayer", "mUpdateSurface", "mCanvas", "mSaveCount", "mNativeWindowLock", "mNativeWindow", "mMinusTwoFrameIntervalMillis", "mLastFrameTimeMillis", "mUpdateListener" ]
}