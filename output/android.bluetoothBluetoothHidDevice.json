{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothHidDevice.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHidDevice",
  "comment" : "\n * Provides the public APIs to control the Bluetooth HID Device profile.\n *\n * <p>BluetoothHidDevice is a proxy object for controlling the Bluetooth HID Device Service via IPC.\n * Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothHidDevice proxy object.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Input Host profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to receive.\n     ",
    "links" : [ "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "BluetoothDevice#EXTRA_DEVICE", "#EXTRA_STATE", "#EXTRA_PREVIOUS_STATE", "#STATE_CONNECTING", "#STATE_CONNECTED", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "SUBCLASS1_NONE",
    "type" : "byte",
    "comment" : "\n     * Constant representing unspecified HID device subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS1_KEYBOARD",
    "type" : "byte",
    "comment" : "\n     * Constant representing keyboard subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS1_MOUSE",
    "type" : "byte",
    "comment" : "\n     * Constant representing mouse subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS1_COMBO",
    "type" : "byte",
    "comment" : "\n     * Constant representing combo keyboard and mouse subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_UNCATEGORIZED",
    "type" : "byte",
    "comment" : "\n     * Constant representing uncategorized HID device subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_JOYSTICK",
    "type" : "byte",
    "comment" : "\n     * Constant representing joystick subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_GAMEPAD",
    "type" : "byte",
    "comment" : "\n     * Constant representing gamepad subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_REMOTE_CONTROL",
    "type" : "byte",
    "comment" : "\n     * Constant representing remote control subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_SENSING_DEVICE",
    "type" : "byte",
    "comment" : "\n     * Constant representing sensing device subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_DIGITIZER_TABLET",
    "type" : "byte",
    "comment" : "\n     * Constant representing digitizer tablet subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "SUBCLASS2_CARD_READER",
    "type" : "byte",
    "comment" : "\n     * Constant representing card reader subclass.\n     *\n     * @see #registerApp (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     *     BluetoothHidDeviceAppQosSettings, Executor, Callback)\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_INPUT",
    "type" : "byte",
    "comment" : "\n     * Constant representing HID Input Report type.\n     *\n     * @see Callback#onGetReport(BluetoothDevice, byte, byte, int)\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     * @see Callback#onInterruptData(BluetoothDevice, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_OUTPUT",
    "type" : "byte",
    "comment" : "\n     * Constant representing HID Output Report type.\n     *\n     * @see Callback#onGetReport(BluetoothDevice, byte, byte, int)\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     * @see Callback#onInterruptData(BluetoothDevice, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_TYPE_FEATURE",
    "type" : "byte",
    "comment" : "\n     * Constant representing HID Feature Report type.\n     *\n     * @see Callback#onGetReport(BluetoothDevice, byte, byte, int)\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     * @see Callback#onInterruptData(BluetoothDevice, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_SUCCESS",
    "type" : "byte",
    "comment" : "\n     * Constant representing success response for Set Report.\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_NOT_READY",
    "type" : "byte",
    "comment" : "\n     * Constant representing error response for Set Report due to \"not ready\".\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_INVALID_RPT_ID",
    "type" : "byte",
    "comment" : "\n     * Constant representing error response for Set Report due to \"invalid report ID\".\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_UNSUPPORTED_REQ",
    "type" : "byte",
    "comment" : "\n     * Constant representing error response for Set Report due to \"unsupported request\".\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_INVALID_PARAM",
    "type" : "byte",
    "comment" : "\n     * Constant representing error response for Set Report due to \"invalid parameter\".\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_RSP_UNKNOWN",
    "type" : "byte",
    "comment" : "\n     * Constant representing error response for Set Report with unknown reason.\n     *\n     * @see Callback#onSetReport(BluetoothDevice, byte, byte, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_BOOT_MODE",
    "type" : "byte",
    "comment" : "\n     * Constant representing boot protocol mode used set by host. Default is always {@link\n     * #PROTOCOL_REPORT_MODE} unless notified otherwise.\n     *\n     * @see Callback#onSetProtocol(BluetoothDevice, byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_REPORT_MODE",
    "type" : "byte",
    "comment" : "\n     * Constant representing report protocol mode used set by host. Default is always {@link\n     * #PROTOCOL_REPORT_MODE} unless notified otherwise.\n     *\n     * @see Callback#onSetProtocol(BluetoothDevice, byte)\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothHidDevice>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHidDevice getService()",
    "returnType" : "IBluetoothHidDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerApp(BluetoothHidDeviceAppSdpSettings sdp, BluetoothHidDeviceAppQosSettings inQos, BluetoothHidDeviceAppQosSettings outQos, Executor executor, Callback callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers application to be used for HID device. Connections to HID Device are only possible\n     * when application is registered. Only one application can be registered at one time. When an\n     * application is registered, the HID Host service will be disabled until it is unregistered.\n     * When no longer used, application should be unregistered using {@link #unregisterApp()}. The\n     * app will be automatically unregistered if it is not foreground. The registration status\n     * should be tracked by the application by handling callback from Callback#onAppStatusChanged.\n     * The app registration status is not related to the return value of this method.\n     *\n     * @param sdp {@link BluetoothHidDeviceAppSdpSettings} object of HID Device SDP record. The HID\n     *     Device SDP record is required.\n     * @param inQos {@link BluetoothHidDeviceAppQosSettings} object of Incoming QoS Settings. The\n     *     Incoming QoS Settings is not required. Use null or default\n     *     BluetoothHidDeviceAppQosSettings.Builder for default values.\n     * @param outQos {@link BluetoothHidDeviceAppQosSettings} object of Outgoing QoS Settings. The\n     *     Outgoing QoS Settings is not required. Use null or default\n     *     BluetoothHidDeviceAppQosSettings.Builder for default values.\n     * @param executor {@link Executor} object on which callback will be executed. The Executor\n     *     object is required.\n     * @param callback {@link Callback} object to which callback messages will be sent. The Callback\n     *     object is required.\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ "#unregisterApp", "BluetoothHidDeviceAppSdpSettings", "BluetoothHidDeviceAppQosSettings", "BluetoothHidDeviceAppQosSettings", "Executor", "Callback" ]
  }, {
    "name" : "public boolean unregisterApp()",
    "returnType" : "boolean",
    "comment" : "\n     * Unregisters application. Active connection will be disconnected and no new connections will\n     * be allowed until registered again using {@link #registerApp\n     * (BluetoothHidDeviceAppQosSettings, BluetoothHidDeviceAppQosSettings,\n     * BluetoothHidDeviceAppQosSettings, Executor, Callback)}. The registration status should be\n     * tracked by the application by handling callback from Callback#onAppStatusChanged. The app\n     * registration status is not related to the return value of this method.\n     *\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ "#registerApp" ]
  }, {
    "name" : "public boolean sendReport(BluetoothDevice device, int id, byte[] data)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends report to remote host using interrupt channel.\n     *\n     * @param id Report Id, as defined in descriptor. Can be 0 in case Report Id are not defined in\n     *     descriptor.\n     * @param data Report data, not including Report Id.\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean replyReport(BluetoothDevice device, byte type, byte id, byte[] data)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends report to remote host as reply for GET_REPORT request from {@link\n     * Callback#onGetReport(BluetoothDevice, byte, byte, int)}.\n     *\n     * @param type Report Type, as in request.\n     * @param id Report Id, as in request.\n     * @param data Report data, not including Report Id.\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reportError(BluetoothDevice device, byte error)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends error handshake message as reply for invalid SET_REPORT request from {@link\n     * Callback#onSetReport(BluetoothDevice, byte, byte, byte[])}.\n     *\n     * @param error Error to be sent for SET_REPORT via HANDSHAKE.\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUserAppName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the application name of the current HidDeviceService user.\n     *\n     * @return the current user name, or empty string if cannot get the name\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates connection to host which is currently paired with this device. If the application\n     * is not registered, #connect(BluetoothDevice) will fail. The connection state should be\n     * tracked by the application by handling callback from Callback#onConnectionStateChanged. The\n     * connection state is not related to the return value of this method.\n     *\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Disconnects from currently connected host. The connection state should be tracked by the\n     * application by handling callback from Callback#onConnectionStateChanged. The connection state\n     * is not related to the return value of this method.\n     *\n     * @return true if the command is successfully sent; otherwise false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Connects Hid Device if connectionPolicy is {@link BluetoothProfile#CONNECTION_POLICY_ALLOWED}\n     * and disconnects Hid device if connectionPolicy is\n     * {@link BluetoothProfile#CONNECTION_POLICY_FORBIDDEN}.\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of:\n     * {@link BluetoothProfile#CONNECTION_POLICY_ALLOWED},\n     * {@link BluetoothProfile#CONNECTION_POLICY_FORBIDDEN},\n     * {@link BluetoothProfile#CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy determines whether hid device should be connected or disconnected\n     * @return true if hid device is connected or disconnected, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothProfile#CONNECTION_POLICY_ALLOWED", "BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "BluetoothProfile#CONNECTION_POLICY_ALLOWED", "BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "BluetoothProfile#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "ACTION_CONNECTION_STATE_CHANGED", "SUBCLASS1_NONE", "SUBCLASS1_KEYBOARD", "SUBCLASS1_MOUSE", "SUBCLASS1_COMBO", "SUBCLASS2_UNCATEGORIZED", "SUBCLASS2_JOYSTICK", "SUBCLASS2_GAMEPAD", "SUBCLASS2_REMOTE_CONTROL", "SUBCLASS2_SENSING_DEVICE", "SUBCLASS2_DIGITIZER_TABLET", "SUBCLASS2_CARD_READER", "REPORT_TYPE_INPUT", "REPORT_TYPE_OUTPUT", "REPORT_TYPE_FEATURE", "ERROR_RSP_SUCCESS", "ERROR_RSP_NOT_READY", "ERROR_RSP_INVALID_RPT_ID", "ERROR_RSP_UNSUPPORTED_REQ", "ERROR_RSP_INVALID_PARAM", "ERROR_RSP_UNKNOWN", "PROTOCOL_BOOT_MODE", "PROTOCOL_REPORT_MODE", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ " void close()", "private IBluetoothHidDevice getService()", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)", "public int getConnectionState(BluetoothDevice device)", "public boolean registerApp(BluetoothHidDeviceAppSdpSettings sdp, BluetoothHidDeviceAppQosSettings inQos, BluetoothHidDeviceAppQosSettings outQos, Executor executor, Callback callback)", "public boolean unregisterApp()", "public boolean sendReport(BluetoothDevice device, int id, byte[] data)", "public boolean replyReport(BluetoothDevice device, byte type, byte id, byte[] data)", "public boolean reportError(BluetoothDevice device, byte error)", "public String getUserAppName()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "private boolean isEnabled()", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ]
}