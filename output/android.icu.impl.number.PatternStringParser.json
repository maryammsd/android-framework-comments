{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/PatternStringParser.java",
  "packageName" : "android.icu.impl.number",
  "className" : "PatternStringParser",
  "comment" : " Implements a recursive descent parser for decimal format patterns. \n * @hide Only a subset of ICU is exposed in Android",
  "links" : [ ],
  "variables" : [ {
    "name" : "IGNORE_ROUNDING_NEVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IGNORE_ROUNDING_IF_CURRENCY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IGNORE_ROUNDING_ALWAYS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParsedPatternInfo parseToPatternInfo(String patternString)",
    "returnType" : "ParsedPatternInfo",
    "comment" : "\n     * Runs the recursive descent parser on the given pattern string, returning a data structure with raw\n     * information about the pattern string.\n     *\n     * <p>\n     * To obtain a more useful form of the data, consider using {@link #parseToProperties} instead.\n     *\n     * @param patternString\n     *            The LDML decimal format pattern (Excel-style pattern) to parse.\n     * @return The results of the parse.\n     ",
    "links" : [ "#parseToProperties" ]
  }, {
    "name" : "public static DecimalFormatProperties parseToProperties(String pattern, int ignoreRounding)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Parses a pattern string into a new property bag.\n     *\n     * @param pattern\n     *            The pattern string, like \"#,##0.00\"\n     * @param ignoreRounding\n     *            Whether to leave out rounding information (minFrac, maxFrac, and rounding increment)\n     *            when parsing the pattern. This may be desirable if a custom rounding mode, such as\n     *            CurrencyUsage, is to be used instead. One of\n     *            {@link PatternStringParser#IGNORE_ROUNDING_ALWAYS},\n     *            {@link PatternStringParser#IGNORE_ROUNDING_IF_CURRENCY}, or\n     *            {@link PatternStringParser#IGNORE_ROUNDING_NEVER}.\n     * @return A property bag object.\n     * @throws IllegalArgumentException\n     *             If there is a syntax error in the pattern string.\n     ",
    "links" : [ "android.icu.impl.number.PatternStringParser#IGNORE_ROUNDING_ALWAYS", "android.icu.impl.number.PatternStringParser#IGNORE_ROUNDING_IF_CURRENCY", "android.icu.impl.number.PatternStringParser#IGNORE_ROUNDING_NEVER" ]
  }, {
    "name" : "public static DecimalFormatProperties parseToProperties(String pattern)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void parseToExistingProperties(String pattern, DecimalFormatProperties properties, int ignoreRounding)",
    "returnType" : "void",
    "comment" : "\n     * Parses a pattern string into an existing property bag. All properties that can be encoded into a\n     * pattern string will be overwritten with either their default value or with the value coming from\n     * the pattern string. Properties that cannot be encoded into a pattern string, such as rounding\n     * mode, are not modified.\n     *\n     * @param pattern\n     *            The pattern string, like \"#,##0.00\"\n     * @param properties\n     *            The property bag object to overwrite.\n     * @param ignoreRounding\n     *            See {@link #parseToProperties(String pattern, int ignoreRounding)}.\n     * @throws IllegalArgumentException\n     *             If there was a syntax error in the pattern string.\n     ",
    "links" : [ "#parseToProperties(String" ]
  }, {
    "name" : "public static void parseToExistingProperties(String pattern, DecimalFormatProperties properties)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumePattern(ParserState state, ParsedPatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeSubpattern(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumePadding(ParserState state, ParsedSubpatternInfo result, PadPosition paddingLocation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long consumeAffix(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeLiteral(ParserState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeFormat(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeIntegerFormat(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeFractionFormat(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void consumeExponent(ParserState state, ParsedSubpatternInfo result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void parseToExistingPropertiesImpl(String pattern, DecimalFormatProperties properties, int ignoreRounding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void patternInfoToProperties(DecimalFormatProperties properties, ParsedPatternInfo patternInfo, int _ignoreRounding)",
    "returnType" : "void",
    "comment" : " Finalizes the temporary data stored in the ParsedPatternInfo to the Properties. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ParsedPatternInfo parseToPatternInfo(String patternString)", "public static DecimalFormatProperties parseToProperties(String pattern, int ignoreRounding)", "public static DecimalFormatProperties parseToProperties(String pattern)", "public static void parseToExistingProperties(String pattern, DecimalFormatProperties properties, int ignoreRounding)", "public static void parseToExistingProperties(String pattern, DecimalFormatProperties properties)", "private static void consumePattern(ParserState state, ParsedPatternInfo result)", "private static void consumeSubpattern(ParserState state, ParsedSubpatternInfo result)", "private static void consumePadding(ParserState state, ParsedSubpatternInfo result, PadPosition paddingLocation)", "private static long consumeAffix(ParserState state, ParsedSubpatternInfo result)", "private static void consumeLiteral(ParserState state)", "private static void consumeFormat(ParserState state, ParsedSubpatternInfo result)", "private static void consumeIntegerFormat(ParserState state, ParsedSubpatternInfo result)", "private static void consumeFractionFormat(ParserState state, ParsedSubpatternInfo result)", "private static void consumeExponent(ParserState state, ParsedSubpatternInfo result)", "private static void parseToExistingPropertiesImpl(String pattern, DecimalFormatProperties properties, int ignoreRounding)", "private static void patternInfoToProperties(DecimalFormatProperties properties, ParsedPatternInfo patternInfo, int _ignoreRounding)" ],
  "variableNames" : [ "IGNORE_ROUNDING_NEVER", "IGNORE_ROUNDING_IF_CURRENCY", "IGNORE_ROUNDING_ALWAYS" ]
}