{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothGattServer.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGattServer",
  "comment" : "\n * Public API for the Bluetooth GATT Profile server role.\n *\n * <p>This class provides Bluetooth GATT server role functionality,\n * allowing applications to create Bluetooth Smart services and\n * characteristics.\n *\n * <p>BluetoothGattServer is a proxy object for controlling the Bluetooth Service\n * via IPC.  Use {@link BluetoothManager#openGattServer} to get an instance\n * of this class.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothGatt",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "BluetoothGattServerCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerIfLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerIf",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransport",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingService",
    "type" : "BluetoothGattService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServices",
    "type" : "List<BluetoothGattService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_REG_TIMEOUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothGattServerCallback",
    "type" : "IBluetoothGattServerCallback",
    "comment" : "\n     * Bluetooth GATT interface callbacks\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " BluetoothGattCharacteristic getCharacteristicByHandle(int handle)",
    "returnType" : "BluetoothGattCharacteristic",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattDescriptor getDescriptorByHandle(int handle)",
    "returnType" : "BluetoothGattDescriptor",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close this GATT server instance.\n     *\n     * Application should call this method as early as possible after it is done with\n     * this GATT server.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean registerCallback(BluetoothGattServerCallback callback)",
    "returnType" : "boolean",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private void unregisterCallback()",
    "returnType" : "void",
    "comment" : "\n     * Unregister the current application and callbacks.\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattService getService(UUID uuid, int instanceId, int type)",
    "returnType" : "BluetoothGattService",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device, boolean autoConnect)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate a connection to a Bluetooth GATT capable device.\n     *\n     * <p>The connection may not be established right away, but will be\n     * completed when the remote device is available. A\n     * {@link BluetoothGattServerCallback#onConnectionStateChange} callback will be\n     * invoked when the connection state changes as a result of this function.\n     *\n     * <p>The autoConnect parameter determines whether to actively connect to\n     * the remote device, or rather passively scan and finalize the connection\n     * when the remote device is in range/available. Generally, the first ever\n     * connection to a device should be direct (autoConnect set to false) and\n     * subsequent connections to known devices should be invoked with the\n     * autoConnect parameter set to true.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param autoConnect Whether to directly connect to the remote device (false) or to\n     * automatically connect as soon as the remote device becomes available (true).\n     * @return true, if the connection attempt was initiated successfully\n     ",
    "links" : [ "BluetoothGattServerCallback#onConnectionStateChange", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void cancelConnection(BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Disconnects an established connection, or cancels a connection attempt\n     * currently in progress.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param device Remote device\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void setPreferredPhy(BluetoothDevice device, int txPhy, int rxPhy, int phyOptions)",
    "returnType" : "void",
    "comment" : "\n     * Set the preferred connection PHY for this app. Please note that this is just a\n     * recommendation, whether the PHY change will happen depends on other applications peferences,\n     * local and remote controller capabilities. Controller can override these settings. <p> {@link\n     * BluetoothGattServerCallback#onPhyUpdate} will be triggered as a result of this call, even if\n     * no PHY change happens. It is also triggered when remote device updates the PHY.\n     *\n     * @param device The remote device to send this response to\n     * @param txPhy preferred transmitter PHY. Bitwise OR of any of {@link\n     * BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     * BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param rxPhy preferred receiver PHY. Bitwise OR of any of {@link\n     * BluetoothDevice#PHY_LE_1M_MASK}, {@link BluetoothDevice#PHY_LE_2M_MASK}, and {@link\n     * BluetoothDevice#PHY_LE_CODED_MASK}.\n     * @param phyOptions preferred coding to use when transmitting on the LE Coded PHY. Can be one\n     * of {@link BluetoothDevice#PHY_OPTION_NO_PREFERRED}, {@link BluetoothDevice#PHY_OPTION_S2} or\n     * {@link BluetoothDevice#PHY_OPTION_S8}\n     ",
    "links" : [ "BluetoothDevice#PHY_LE_2M_MASK", "BluetoothDevice#PHY_LE_2M_MASK", "BluetoothDevice#PHY_OPTION_NO_PREFERRED", "BluetoothDevice#PHY_OPTION_S2", "BluetoothDevice#PHY_OPTION_S8" ]
  }, {
    "name" : "public void readPhy(BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Read the current transmitter PHY and receiver PHY of the connection. The values are returned\n     * in {@link BluetoothGattServerCallback#onPhyRead}\n     *\n     * @param device The remote device to send this response to\n     ",
    "links" : [ "BluetoothGattServerCallback#onPhyRead" ]
  }, {
    "name" : "public boolean sendResponse(BluetoothDevice device, int requestId, int status, int offset, byte[] value)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a response to a read or write request to a remote device.\n     *\n     * <p>This function must be invoked in when a remote read/write request\n     * is received by one of these callback methods:\n     *\n     * <ul>\n     * <li>{@link BluetoothGattServerCallback#onCharacteristicReadRequest}\n     * <li>{@link BluetoothGattServerCallback#onCharacteristicWriteRequest}\n     * <li>{@link BluetoothGattServerCallback#onDescriptorReadRequest}\n     * <li>{@link BluetoothGattServerCallback#onDescriptorWriteRequest}\n     * </ul>\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param device The remote device to send this response to\n     * @param requestId The ID of the request that was received with the callback\n     * @param status The status of the request to be sent to the remote devices\n     * @param offset Value offset for partial read/write response\n     * @param value The value of the attribute that was read/written (optional)\n     ",
    "links" : [ "BluetoothGattServerCallback#onCharacteristicReadRequest", "BluetoothGattServerCallback#onCharacteristicWriteRequest", "BluetoothGattServerCallback#onDescriptorReadRequest", "BluetoothGattServerCallback#onDescriptorWriteRequest", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public boolean notifyCharacteristicChanged(BluetoothDevice device, BluetoothGattCharacteristic characteristic, boolean confirm)",
    "returnType" : "boolean",
    "comment" : "\n     * Send a notification or indication that a local characteristic has been\n     * updated.\n     *\n     * <p>A notification or indication is sent to the remote device to signal\n     * that the characteristic has been updated. This function should be invoked\n     * for every client that requests notifications/indications by writing\n     * to the \"Client Configuration\" descriptor for the given characteristic.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param device The remote device to receive the notification/indication\n     * @param characteristic The local characteristic that has been updated\n     * @param confirm true to request confirmation from the client (indication), false to send a\n     * notification\n     * @return true, if the notification has been triggered successfully\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public boolean addService(BluetoothGattService service)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a service to the list of services to be hosted.\n     *\n     * <p>Once a service has been addded to the list, the service and its\n     * included characteristics will be provided by the local device.\n     *\n     * <p>If the local device has already exposed services when this function\n     * is called, a service update notification will be sent to all clients.\n     *\n     * <p>The {@link BluetoothGattServerCallback#onServiceAdded} callback will indicate\n     * whether this service has been added successfully. Do not add another service\n     * before this callback.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param service Service to be added to the list of services provided by this device.\n     * @return true, if the request to add service has been initiated\n     ",
    "links" : [ "BluetoothGattServerCallback#onServiceAdded", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public boolean removeService(BluetoothGattService service)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a service from the list of services to be provided.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param service Service to be removed.\n     * @return true, if the service has been removed\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public void clearServices()",
    "returnType" : "void",
    "comment" : "\n     * Remove all services from the list of provided services.\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public List<BluetoothGattService> getServices()",
    "returnType" : "List<BluetoothGattService>",
    "comment" : "\n     * Returns a list of GATT services offered by this device.\n     *\n     * <p>An application must call {@link #addService} to add a serice to the\n     * list of services offered by this device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @return List of services. Returns an empty list if no services have been added yet.\n     ",
    "links" : [ "#addService", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public BluetoothGattService getService(UUID uuid)",
    "returnType" : "BluetoothGattService",
    "comment" : "\n     * Returns a {@link BluetoothGattService} from the list of services offered\n     * by this device.\n     *\n     * <p>If multiple instances of the same service (as identified by UUID)\n     * exist, the first instance of the service is returned.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission.\n     *\n     * @param uuid UUID of the requested service\n     * @return BluetoothGattService if supported, or null if the requested service is not offered by\n     * this device.\n     ",
    "links" : [ "BluetoothGattService", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "public int getConnectionState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Not supported - please use {@link BluetoothManager#getConnectedDevices(int)}\n     * with {@link BluetoothProfile#GATT} as argument\n     *\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "BluetoothManager#getConnectedDevices", "BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported - please use {@link BluetoothManager#getConnectedDevices(int)}\n     * with {@link BluetoothProfile#GATT} as argument\n     *\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "BluetoothManager#getConnectedDevices", "BluetoothProfile#GATT" ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Not supported - please use\n     * {@link BluetoothManager#getDevicesMatchingConnectionStates(int, int[])}\n     * with {@link BluetoothProfile#GATT} as first argument\n     *\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "BluetoothManager#getDevicesMatchingConnectionStates", "BluetoothProfile#GATT" ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mAdapter", "mService", "mCallback", "mServerIfLock", "mServerIf", "mTransport", "mPendingService", "mServices", "CALLBACK_REG_TIMEOUT", "mBluetoothGattServerCallback" ],
  "methodNames" : [ " BluetoothGattCharacteristic getCharacteristicByHandle(int handle)", " BluetoothGattDescriptor getDescriptorByHandle(int handle)", "public void close()", " boolean registerCallback(BluetoothGattServerCallback callback)", "private void unregisterCallback()", " BluetoothGattService getService(UUID uuid, int instanceId, int type)", "public boolean connect(BluetoothDevice device, boolean autoConnect)", "public void cancelConnection(BluetoothDevice device)", "public void setPreferredPhy(BluetoothDevice device, int txPhy, int rxPhy, int phyOptions)", "public void readPhy(BluetoothDevice device)", "public boolean sendResponse(BluetoothDevice device, int requestId, int status, int offset, byte[] value)", "public boolean notifyCharacteristicChanged(BluetoothDevice device, BluetoothGattCharacteristic characteristic, boolean confirm)", "public boolean addService(BluetoothGattService service)", "public boolean removeService(BluetoothGattService service)", "public void clearServices()", "public List<BluetoothGattService> getServices()", "public BluetoothGattService getService(UUID uuid)", "public int getConnectionState(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(int[] states)" ]
}