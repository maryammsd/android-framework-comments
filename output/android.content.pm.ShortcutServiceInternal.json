{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/ShortcutServiceInternal.java",
  "packageName" : "android.content.pm",
  "className" : "ShortcutServiceInternal",
  "comment" : "\n * Entry points used by {@link LauncherApps}.\n *\n * <p>No permission / argument checks will be performed inside.\n * Callers must check the calling app permission and the calling package name.\n * @hide\n ",
  "links" : [ "android.content.pm.LauncherApps" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract List<ShortcutInfo> getShortcuts(int launcherUserId, @NonNull String callingPackage, long changedSince, @Nullable String packageName, @Nullable List<String> shortcutIds, @Nullable List<LocusId> locusIds, @Nullable ComponentName componentName, @ShortcutQuery.QueryFlags int flags, int userId, int callingPid, int callingUid)",
    "returnType" : "List<ShortcutInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void getShortcutsAsync(int launcherUserId, @NonNull String callingPackage, long changedSince, @Nullable String packageName, @Nullable List<String> shortcutIds, @Nullable List<LocusId> locusIds, @Nullable ComponentName componentName, @ShortcutQuery.QueryFlags int flags, int userId, int callingPid, int callingUid, AndroidFuture<List<ShortcutInfo>> cb)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves shortcuts asynchronously. Query will go through persistence layer (thus making the\n     * call async) if querying by shortcutIds in a specific package; otherwise it's effectively the\n     * same as calling {@link #getShortcuts}.\n     ",
    "links" : [ "#getShortcuts" ]
  }, {
    "name" : "public abstract boolean isPinnedByCaller(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String id, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void pinShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Intent[] createShortcutIntents(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, int callingPid, int callingUid)",
    "returnType" : "Intent[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void createShortcutIntentsAsync(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, int callingPid, int callingUid, @NonNull AndroidFuture<Intent[]> cb)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the intents from a specified shortcut asynchronously.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addListener(@NonNull ShortcutChangeListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void addShortcutChangeCallback(@NonNull LauncherApps.ShortcutChangeCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract int getShortcutIconResId(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract String getShortcutStartingThemeResName(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)",
    "returnType" : "String",
    "comment" : "\n     * Get the theme res ID of the starting window, it can be 0 if not specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ParcelFileDescriptor getShortcutIconFd(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void getShortcutIconFdAsync(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull AndroidFuture<ParcelFileDescriptor> cb)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves a file descriptor from the icon in a specified shortcut asynchronously.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasShortcutHostPermission(int launcherUserId, @NonNull String callingPackage, int callingPid, int callingUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean areShortcutsSupportedOnHomeScreen(@UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not Shortcuts are supported on Launcher Home Screen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setShortcutHostPackage(@NonNull String type, @Nullable String packageName, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean requestPinAppWidget(@NonNull String callingPackage, @NonNull AppWidgetProviderInfo appWidget, @Nullable Bundle extras, @Nullable IntentSender resultIntent, int userId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isRequestPinItemSupported(int callingUserId, int requestType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isForegroundDefaultLauncher(@NonNull String callingPackage, int callingUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void cacheShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId, int cacheFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void uncacheShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId, int cacheFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract List<ShortcutManager.ShareShortcutInfo> getShareTargets(@NonNull String callingPackage, @NonNull IntentFilter intentFilter, int userId)",
    "returnType" : "List<ShortcutManager.ShareShortcutInfo>",
    "comment" : "\n     * Retrieves all of the direct share targets that match the given IntentFilter for the specified\n     * user.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getShortcutIconUri(int launcherUserId, @NonNull String launcherPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)",
    "returnType" : "String",
    "comment" : "\n     * Returns the icon Uri of the shortcut, and grants Uri read permission to the caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getShortcutIconUriAsync(int launcherUserId, @NonNull String launcherPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull AndroidFuture<String> cb)",
    "returnType" : "void",
    "comment" : "\n     * Retrieves the icon Uri of the shortcut asynchronously, and grants Uri read permission to the\n     * caller.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isSharingShortcut(int callingUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull IntentFilter filter)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract List<ShortcutInfo> getShortcuts(int launcherUserId, @NonNull String callingPackage, long changedSince, @Nullable String packageName, @Nullable List<String> shortcutIds, @Nullable List<LocusId> locusIds, @Nullable ComponentName componentName, @ShortcutQuery.QueryFlags int flags, int userId, int callingPid, int callingUid)", "public abstract void getShortcutsAsync(int launcherUserId, @NonNull String callingPackage, long changedSince, @Nullable String packageName, @Nullable List<String> shortcutIds, @Nullable List<LocusId> locusIds, @Nullable ComponentName componentName, @ShortcutQuery.QueryFlags int flags, int userId, int callingPid, int callingUid, AndroidFuture<List<ShortcutInfo>> cb)", "public abstract boolean isPinnedByCaller(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String id, int userId)", "public abstract void pinShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId)", "public abstract Intent[] createShortcutIntents(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, int callingPid, int callingUid)", "public abstract void createShortcutIntentsAsync(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, int callingPid, int callingUid, @NonNull AndroidFuture<Intent[]> cb)", "public abstract void addListener(@NonNull ShortcutChangeListener listener)", "public abstract void addShortcutChangeCallback(@NonNull LauncherApps.ShortcutChangeCallback callback)", "public abstract int getShortcutIconResId(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)", "public abstract String getShortcutStartingThemeResName(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)", "public abstract ParcelFileDescriptor getShortcutIconFd(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)", "public abstract void getShortcutIconFdAsync(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull AndroidFuture<ParcelFileDescriptor> cb)", "public abstract boolean hasShortcutHostPermission(int launcherUserId, @NonNull String callingPackage, int callingPid, int callingUid)", "public abstract boolean areShortcutsSupportedOnHomeScreen(@UserIdInt int userId)", "public abstract void setShortcutHostPackage(@NonNull String type, @Nullable String packageName, int userId)", "public abstract boolean requestPinAppWidget(@NonNull String callingPackage, @NonNull AppWidgetProviderInfo appWidget, @Nullable Bundle extras, @Nullable IntentSender resultIntent, int userId)", "public abstract boolean isRequestPinItemSupported(int callingUserId, int requestType)", "public abstract boolean isForegroundDefaultLauncher(@NonNull String callingPackage, int callingUid)", "public abstract void cacheShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId, int cacheFlags)", "public abstract void uncacheShortcuts(int launcherUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull List<String> shortcutIds, int userId, int cacheFlags)", "public abstract List<ShortcutManager.ShareShortcutInfo> getShareTargets(@NonNull String callingPackage, @NonNull IntentFilter intentFilter, int userId)", "public abstract String getShortcutIconUri(int launcherUserId, @NonNull String launcherPackage, @NonNull String packageName, @NonNull String shortcutId, int userId)", "public abstract void getShortcutIconUriAsync(int launcherUserId, @NonNull String launcherPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull AndroidFuture<String> cb)", "public abstract boolean isSharingShortcut(int callingUserId, @NonNull String callingPackage, @NonNull String packageName, @NonNull String shortcutId, int userId, @NonNull IntentFilter filter)" ],
  "variableNames" : [ ]
}