{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/AttributeListImpl.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "AttributeListImpl",
  "comment" : "\n * Default implementation for AttributeList.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>AttributeList implements the deprecated SAX1 {@link\n * org.xml.sax.AttributeList AttributeList} interface, and has been\n * replaced by the new SAX2 {@link org.xml.sax.helpers.AttributesImpl\n * AttributesImpl} interface.</p>\n *\n * <p>This class provides a convenience implementation of the SAX\n * {@link org.xml.sax.AttributeList AttributeList} interface.  This\n * implementation is useful both for SAX parser writers, who can use\n * it to provide attributes to the application, and for SAX application\n * writers, who can use it to create a persistent copy of an element's\n * attribute specifications:</p>\n *\n * <pre>\n * private AttributeList myatts;\n *\n * public void startElement (String name, AttributeList atts)\n * {\n *              // create a persistent copy of the attribute list\n *              // for use outside this method\n *   myatts = new AttributeListImpl(atts);\n *   [...]\n * }\n * </pre>\n *\n * <p>Please note that SAX parsers are not required to use this\n * class to provide an implementation of AttributeList; it is\n * supplied only as an optional convenience.  In particular,\n * parser writers are encouraged to invent more efficient\n * implementations.</p>\n *\n * @deprecated This class implements a deprecated interface,\n *             {@link org.xml.sax.AttributeList AttributeList};\n *             that interface has been replaced by\n *             {@link org.xml.sax.Attributes Attributes},\n *             which is implemented in the\n *             {@link org.xml.sax.helpers.AttributesImpl\n *            AttributesImpl} helper class.\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.AttributeList\n * @see org.xml.sax.DocumentHandler#startElement\n ",
  "links" : [ "org.xml.sax.AttributeList", "org.xml.sax.Attributes", "org.xml.sax.helpers.AttributesImplAttributesImpl" ],
  "variables" : [ {
    "name" : "names",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "types",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "values",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setAttributeList(AttributeList atts)",
    "returnType" : "void",
    "comment" : "\n     * Set the attribute list, discarding previous contents.\n     *\n     * <p>This method allows an application writer to reuse an\n     * attribute list easily.</p>\n     *\n     * @param atts The attribute list to copy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String name, String type, String value)",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute to an attribute list.\n     *\n     * <p>This method is provided for SAX parser writers, to allow them\n     * to build up an attribute list incrementally before delivering\n     * it to the application.</p>\n     *\n     * @param name The attribute name.\n     * @param type The attribute type (\"NMTOKEN\" for an enumeration).\n     * @param value The attribute value (must not be null).\n     * @see #removeAttribute\n     * @see org.xml.sax.DocumentHandler#startElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAttribute(String name)",
    "returnType" : "void",
    "comment" : "\n     * Remove an attribute from the list.\n     *\n     * <p>SAX application writers can use this method to filter an\n     * attribute out of an AttributeList.  Note that invoking this\n     * method will change the length of the attribute list and\n     * some of the attribute's indices.</p>\n     *\n     * <p>If the requested attribute is not in the list, this is\n     * a no-op.</p>\n     *\n     * @param name The attribute name.\n     * @see #addAttribute\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear the attribute list.\n     *\n     * <p>SAX parser writers can use this method to reset the attribute\n     * list between DocumentHandler.startElement events.  Normally,\n     * it will make sense to reuse the same AttributeListImpl object\n     * rather than allocating a new one each time.</p>\n     *\n     * @see org.xml.sax.DocumentHandler#startElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of attributes in the list.\n     *\n     * @return The number of attributes in the list.\n     * @see org.xml.sax.AttributeList#getLength\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName(int i)",
    "returnType" : "String",
    "comment" : "\n     * Get the name of an attribute (by position).\n     *\n     * @param i The position of the attribute in the list.\n     * @return The attribute name as a string, or null if there\n     *         is no attribute at that position.\n     * @see org.xml.sax.AttributeList#getName(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(int i)",
    "returnType" : "String",
    "comment" : "\n     * Get the type of an attribute (by position).\n     *\n     * @param i The position of the attribute in the list.\n     * @return The attribute type as a string (\"NMTOKEN\" for an\n     *         enumeration, and \"CDATA\" if no declaration was\n     *         read), or null if there is no attribute at\n     *         that position.\n     * @see org.xml.sax.AttributeList#getType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(int i)",
    "returnType" : "String",
    "comment" : "\n     * Get the value of an attribute (by position).\n     *\n     * @param i The position of the attribute in the list.\n     * @return The attribute value as a string, or null if\n     *         there is no attribute at that position.\n     * @see org.xml.sax.AttributeList#getValue(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the type of an attribute (by name).\n     *\n     * @param name The attribute name.\n     * @return The attribute type as a string (\"NMTOKEN\" for an\n     *         enumeration, and \"CDATA\" if no declaration was\n     *         read).\n     * @see org.xml.sax.AttributeList#getType(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String name)",
    "returnType" : "String",
    "comment" : "\n     * Get the value of an attribute (by name).\n     *\n     * @param name The attribute name.\n     * @return the named attribute's value or null, if the attribute does not\n     *         exist.\n     * @see org.xml.sax.AttributeList#getValue(java.lang.String)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setAttributeList(AttributeList atts)", "public void addAttribute(String name, String type, String value)", "public void removeAttribute(String name)", "public void clear()", "public int getLength()", "public String getName(int i)", "public String getType(int i)", "public String getValue(int i)", "public String getType(String name)", "public String getValue(String name)" ],
  "variableNames" : [ "names", "types", "values" ]
}