{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/XMLReaderAdapter.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "XMLReaderAdapter",
  "comment" : "\n * Adapt a SAX2 XMLReader as a SAX1 Parser.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class wraps a SAX2 {@link org.xml.sax.XMLReader XMLReader}\n * and makes it act as a SAX1 {@link org.xml.sax.Parser Parser}.  The XMLReader\n * must support a true value for the\n * http://xml.org/sax/features/namespace-prefixes property or parsing will fail\n * with a {@link org.xml.sax.SAXException SAXException}; if the XMLReader\n * supports a false value for the http://xml.org/sax/features/namespaces\n * property, that will also be used to improve efficiency.</p>\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.Parser\n * @see org.xml.sax.XMLReader\n ",
  "links" : [ "org.xml.sax.XMLReader", "org.xml.sax.Parser", "org.xml.sax.SAXException" ],
  "variables" : [ {
    "name" : "xmlReader",
    "type" : "XMLReader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "documentHandler",
    "type" : "DocumentHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "qAtts",
    "type" : "AttributesAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setup(XMLReader xmlReader)",
    "returnType" : "void",
    "comment" : "\n     * Internal setup.\n     *\n     * @param xmlReader The embedded XMLReader.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocale(Locale locale) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Set the locale for error reporting.\n     *\n     * <p>This is not supported in SAX2, and will always throw\n     * an exception.</p>\n     *\n     * @param locale the locale for error reporting.\n     * @see org.xml.sax.Parser#setLocale\n     * @exception org.xml.sax.SAXException Thrown unless overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEntityResolver(EntityResolver resolver)",
    "returnType" : "void",
    "comment" : "\n     * Register the entity resolver.\n     *\n     * @param resolver The new resolver.\n     * @see org.xml.sax.Parser#setEntityResolver\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDTDHandler(DTDHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register the DTD event handler.\n     *\n     * @param handler The new DTD event handler.\n     * @see org.xml.sax.Parser#setDTDHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentHandler(DocumentHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register the SAX1 document event handler.\n     *\n     * <p>Note that the SAX1 document handler has no Namespace\n     * support.</p>\n     *\n     * @param handler The new SAX1 document event handler.\n     * @see org.xml.sax.Parser#setDocumentHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorHandler(ErrorHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register the error event handler.\n     *\n     * @param handler The new error event handler.\n     * @see org.xml.sax.Parser#setErrorHandler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(String systemId) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parse the document.\n     *\n     * <p>This method will throw an exception if the embedded\n     * XMLReader does not support the\n     * http://xml.org/sax/features/namespace-prefixes property.</p>\n     *\n     * @param systemId The absolute URL of the document.\n     * @exception java.io.IOException If there is a problem reading\n     *            the raw content of the document.\n     * @exception org.xml.sax.SAXException If there is a problem\n     *            processing the document.\n     * @see #parse(org.xml.sax.InputSource)\n     * @see org.xml.sax.Parser#parse(java.lang.String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parse(InputSource input) throws IOException, SAXException",
    "returnType" : "void",
    "comment" : "\n     * Parse the document.\n     *\n     * <p>This method will throw an exception if the embedded\n     * XMLReader does not support the\n     * http://xml.org/sax/features/namespace-prefixes property.</p>\n     *\n     * @param input An input source for the document.\n     * @exception java.io.IOException If there is a problem reading\n     *            the raw content of the document.\n     * @exception org.xml.sax.SAXException If there is a problem\n     *            processing the document.\n     * @see #parse(java.lang.String)\n     * @see org.xml.sax.Parser#parse(org.xml.sax.InputSource)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setupXMLReader() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Set up the XML reader.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n     * Set a document locator.\n     *\n     * @param locator The document locator.\n     * @see org.xml.sax.ContentHandler#setDocumentLocator\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Start document event.\n     *\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#startDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * End document event.\n     *\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#endDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri)",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 start prefix mapping event.\n     *\n     * @param prefix The prefix being mapped.\n     * @param uri The Namespace URI being mapped to.\n     * @see org.xml.sax.ContentHandler#startPrefixMapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 end prefix mapping event.\n     *\n     * @param prefix The prefix being mapped.\n     * @see org.xml.sax.ContentHandler#endPrefixMapping\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 start element event.\n     *\n     * @param uri The Namespace URI.\n     * @param localName The Namespace local name.\n     * @param qName The qualified (prefixed) name.\n     * @param atts The SAX2 attributes.\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#endDocument\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 end element event.\n     *\n     * @param uri The Namespace URI.\n     * @param localName The Namespace local name.\n     * @param qName The qualified (prefixed) name.\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#endElement\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 characters event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use.\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#characters\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 ignorable whitespace event.\n     *\n     * @param ch An array of characters.\n     * @param start The starting position in the array.\n     * @param length The number of characters to use.\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#ignorableWhitespace\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 processing instruction event.\n     *\n     * @param target The processing instruction target.\n     * @param data The remainder of the processing instruction\n     * @exception org.xml.sax.SAXException The client may raise a\n     *            processing exception.\n     * @see org.xml.sax.ContentHandler#processingInstruction\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Adapt a SAX2 skipped entity event.\n     *\n     * @param name The name of the skipped entity.\n     * @see org.xml.sax.ContentHandler#skippedEntity\n     * @exception org.xml.sax.SAXException Throwable by subclasses.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setup(XMLReader xmlReader)", "public void setLocale(Locale locale) throws SAXException", "public void setEntityResolver(EntityResolver resolver)", "public void setDTDHandler(DTDHandler handler)", "public void setDocumentHandler(DocumentHandler handler)", "public void setErrorHandler(ErrorHandler handler)", "public void parse(String systemId) throws IOException, SAXException", "public void parse(InputSource input) throws IOException, SAXException", "private void setupXMLReader() throws SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri)", "public void endPrefixMapping(String prefix)", "public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException" ],
  "variableNames" : [ "xmlReader", "documentHandler", "qAtts" ]
}