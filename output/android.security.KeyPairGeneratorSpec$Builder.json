{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/KeyPairGeneratorSpec.java",
  "packageName" : "android.security",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link KeyPairGeneratorSpec} objects.\n     * <p>\n     * This will build a parameter spec for use with the\n     * <a href=\"{@docRoot}training/articles/keystore.html\">Android KeyStore\n     * facility</a>.\n     * <p>\n     * The required fields must be filled in with the builder.\n     * <p>\n     * Example:\n     *\n     * <pre class=\"prettyprint\">\n     * Calendar start = Calendar.getInstance();\n     * Calendar end = Calendar.getInstance();\n     * end.add(Calendar.YEAR, 1);\n     *\n     * KeyPairGeneratorSpec spec =\n     *         new KeyPairGeneratorSpec.Builder(mContext).setAlias(&quot;myKey&quot;)\n     *                 .setSubject(new X500Principal(&quot;CN=myKey&quot;)).setSerialNumber(BigInteger.valueOf(1337))\n     *                 .setStartDate(start.getTime()).setEndDate(end.getTime()).build();\n     * </pre>\n     *\n     *  @deprecated Use {@link KeyGenParameterSpec.Builder} instead.\n     ",
  "links" : [ "android.security.KeyPairGeneratorSpec", "KeyGenParameterSpec.Builder" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeystoreAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeySize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpec",
    "type" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubjectDN",
    "type" : "X500Principal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerialNumber",
    "type" : "BigInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartDate",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndDate",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setAlias(@NonNull String alias)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the alias to be used to retrieve the key later from a\n         * {@link java.security.KeyStore} instance using the\n         * {@code AndroidKeyStore} provider.\n         ",
    "links" : [ "java.security.KeyStore" ]
  }, {
    "name" : "public Builder setKeyType(@NonNull @KeyProperties.KeyAlgorithmEnum String keyType) throws NoSuchAlgorithmException",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the type of key pair (e.g., {@code EC}, {@code RSA}) of the key pair to be\n         * generated. See {@link KeyProperties}.{@code KEY_ALGORITHM} constants.\n         *\n         ",
    "links" : [ "android.security.keystore.KeyProperties" ]
  }, {
    "name" : "public Builder setKeySize(int keySize)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the key size for the keypair to be created. For instance, for a\n         * key type of RSA this will set the modulus size and for a key type of\n         * EC it will select a curve with a matching field size.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAlgorithmParameterSpec(@NonNull AlgorithmParameterSpec spec)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the algorithm-specific key generation parameters. For example, for RSA keys\n         * this may be an instance of {@link java.security.spec.RSAKeyGenParameterSpec}.\n         ",
    "links" : [ "java.security.spec.RSAKeyGenParameterSpec" ]
  }, {
    "name" : "public Builder setSubject(@NonNull X500Principal subject)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the subject used for the self-signed certificate of the\n         * generated key pair.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSerialNumber(@NonNull BigInteger serialNumber)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the serial number used for the self-signed certificate of the\n         * generated key pair.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStartDate(@NonNull Date startDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the start of the validity period for the self-signed certificate\n         * of the generated key pair.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEndDate(@NonNull Date endDate)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the end of the validity period for the self-signed certificate\n         * of the generated key pair.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEncryptionRequired()",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates that this key pair must be encrypted at rest. This will protect the key pair\n         * with the secure lock screen credential (e.g., password, PIN, or pattern).\n         *\n         * <p>Note that this feature requires that the secure lock screen (e.g., password, PIN,\n         * pattern) is set up, otherwise key pair generation will fail. Moreover, this key pair will\n         * be deleted when the secure lock screen is disabled or reset (e.g., by the user or a\n         * Device Administrator). Finally, this key pair cannot be used until the user unlocks the\n         * secure lock screen after boot.\n         *\n         * @see KeyguardManager#isDeviceSecure()\n         *\n         * @deprecated Data at rest encryption is enabled by default. If extra binding to the\n         *             lockscreen credential is desired, use\n         *             {@link KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)}.\n         *             This flag will be ignored from Android S.\n         ",
    "links" : [ "KeyGenParameterSpec.Builder#setUserAuthenticationRequired(boolean)" ]
  }, {
    "name" : "public KeyPairGeneratorSpec build()",
    "returnType" : "KeyPairGeneratorSpec",
    "comment" : "\n         * Builds the instance of the {@code KeyPairGeneratorSpec}.\n         *\n         * @throws IllegalArgumentException if a required field is missing\n         * @return built instance of {@code KeyPairGeneratorSpec}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setAlias(@NonNull String alias)", "public Builder setKeyType(@NonNull @KeyProperties.KeyAlgorithmEnum String keyType) throws NoSuchAlgorithmException", "public Builder setKeySize(int keySize)", "public Builder setAlgorithmParameterSpec(@NonNull AlgorithmParameterSpec spec)", "public Builder setSubject(@NonNull X500Principal subject)", "public Builder setSerialNumber(@NonNull BigInteger serialNumber)", "public Builder setStartDate(@NonNull Date startDate)", "public Builder setEndDate(@NonNull Date endDate)", "public Builder setEncryptionRequired()", "public KeyPairGeneratorSpec build()" ],
  "variableNames" : [ "mContext", "mKeystoreAlias", "mKeyType", "mKeySize", "mSpec", "mSubjectDN", "mSerialNumber", "mStartDate", "mEndDate" ]
}