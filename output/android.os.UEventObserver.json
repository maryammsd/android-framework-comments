{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/UEventObserver.java",
  "packageName" : "android.os",
  "className" : "UEventObserver",
  "comment" : "\n * UEventObserver is an abstract class that receives UEvents from the kernel.<p>\n *\n * Subclass UEventObserver, implementing onUEvent(UEvent event), then call\n * startObserving() with a match string. The UEvent thread will then call your\n * onUEvent() method when a UEvent occurs that contains your match string.<p>\n *\n * Call stopObserving() to stop receiving UEvents.<p>\n *\n * There is only one UEvent thread per process, even if that process has\n * multiple UEventObserver subclass instances. The UEvent thread starts when\n * the startObserving() is called for the first time in that process. Once\n * started the UEvent thread will not stop (although it can stop notifying\n * UEventObserver's via stopObserving()).<p>\n *\n * @hide\n",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sThread",
    "type" : "UEventThread",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native void nativeSetup()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native String nativeWaitForNextEvent()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddMatch(String match)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRemoveMatch(String match)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static UEventThread getThread()",
    "returnType" : "UEventThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static UEventThread peekThread()",
    "returnType" : "UEventThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void startObserving(String match)",
    "returnType" : "void",
    "comment" : "\n     * Begin observation of UEvents.<p>\n     * This method will cause the UEvent thread to start if this is the first\n     * invocation of startObserving in this process.<p>\n     * Once called, the UEvent thread will call onUEvent() when an incoming\n     * UEvent matches the specified string.<p>\n     * This method can be called multiple times to register multiple matches.\n     * Only one call to stopObserving is required even with multiple registered\n     * matches.\n     *\n     * @param match A substring of the UEvent to match.  Try to be as specific\n     * as possible to avoid incurring unintended additional cost from processing\n     * irrelevant messages.  Netlink messages can be moderately high bandwidth and\n     * are expensive to parse.  For example, some devices may send one netlink message\n     * for each vsync period.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void stopObserving()",
    "returnType" : "void",
    "comment" : "\n     * End observation of UEvents.<p>\n     * This process's UEvent thread will never call onUEvent() on this\n     * UEventObserver after this call. Repeated calls have no effect.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onUEvent(UEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses of UEventObserver should override this method to handle\n     * UEvents.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native void nativeSetup()", "private static native String nativeWaitForNextEvent()", "private static native void nativeAddMatch(String match)", "private static native void nativeRemoveMatch(String match)", "protected void finalize() throws Throwable", "private static UEventThread getThread()", "private static UEventThread peekThread()", "public final void startObserving(String match)", "public final void stopObserving()", "public abstract void onUEvent(UEvent event)" ],
  "variableNames" : [ "TAG", "DEBUG", "sThread" ]
}