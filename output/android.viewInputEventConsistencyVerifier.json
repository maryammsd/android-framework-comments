{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InputEventConsistencyVerifier.java",
  "packageName" : "android.view",
  "className" : "InputEventConsistencyVerifier",
  "comment" : "\n * Checks whether a sequence of input events is self-consistent.\n * Logs a description of each problem detected.\n * <p>\n * When a problem is detected, the event is tainted.  This mechanism prevents the same\n * error from being reported multiple times.\n * </p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "IS_ENG_BUILD",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_TRACKBALL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_TOUCH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_TYPE_GENERIC_MOTION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECENT_EVENTS_TO_LOG",
    "type" : "int",
    "comment" : " this feature is negligible on current hardware.",
    "links" : [ ]
  }, {
    "name" : "mCaller",
    "type" : "Object",
    "comment" : " The object to which the verifier is attached.",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " Consistency verifier flags.",
    "links" : [ ]
  }, {
    "name" : "mLogTag",
    "type" : "String",
    "comment" : " If not provided defaults to the simple class name.",
    "links" : [ ]
  }, {
    "name" : "mLastEventSeq",
    "type" : "int",
    "comment" : " been recycled.",
    "links" : [ ]
  }, {
    "name" : "mLastEventType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastNestingLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecentEvents",
    "type" : "InputEvent[]",
    "comment" : " Copy of the most recent events.",
    "links" : [ ]
  }, {
    "name" : "mRecentEventsUnhandled",
    "type" : "boolean[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMostRecentEventIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentEvent",
    "type" : "InputEvent",
    "comment" : " Current event and its type.",
    "links" : [ ]
  }, {
    "name" : "mCurrentEventType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyStateList",
    "type" : "KeyState",
    "comment" : " Linked list of key state objects.",
    "links" : [ ]
  }, {
    "name" : "mTrackballDown",
    "type" : "boolean",
    "comment" : " Current state of the trackball.",
    "links" : [ ]
  }, {
    "name" : "mTrackballUnhandled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchEventStreamPointers",
    "type" : "int",
    "comment" : " (See MAX_POINTER_ID in frameworks/base/include/ui/Input.h)",
    "links" : [ ]
  }, {
    "name" : "mTouchEventStreamDeviceId",
    "type" : "int",
    "comment" : " The device id and source of the current stream of touch events.",
    "links" : [ ]
  }, {
    "name" : "mTouchEventStreamSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchEventStreamIsTainted",
    "type" : "boolean",
    "comment" : " Reset on down or cancel.",
    "links" : [ ]
  }, {
    "name" : "mTouchEventStreamUnhandled",
    "type" : "boolean",
    "comment" : " Set to true if the touch event stream is partially unhandled.",
    "links" : [ ]
  }, {
    "name" : "mHoverEntered",
    "type" : "boolean",
    "comment" : " Set to true if we received hover enter.",
    "links" : [ ]
  }, {
    "name" : "mButtonsPressed",
    "type" : "int",
    "comment" : " The bitset of buttons which we've received ACTION_BUTTON_PRESS for.",
    "links" : [ ]
  }, {
    "name" : "mViolationMessage",
    "type" : "StringBuilder",
    "comment" : " The current violation message.",
    "links" : [ ]
  }, {
    "name" : "FLAG_RAW_DEVICE_INPUT",
    "type" : "int",
    "comment" : "\n     * Indicates that the verifier is intended to act on raw device input event streams.\n     * Disables certain checks for invariants that are established by the input dispatcher\n     * itself as it delivers input events, such as key repeating behavior.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isInstrumentationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the instrumentation should be enabled.\n     * @return True if it should be enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the state of the input event consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onInputEvent(InputEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Checks an arbitrary input event.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onKeyEvent(KeyEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Checks a key event.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTrackballEvent(MotionEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Checks a trackball event.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTouchEvent(MotionEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Checks a touch event.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onGenericMotionEvent(MotionEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Checks a generic motion event.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUnhandledEvent(InputEvent event, int nestingLevel)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the verifier that a given event was unhandled and the rest of the\n     * trace for the event should be ignored.\n     * This method should only be called if the event was previously checked by\n     * the consistency verifier using {@link #onInputEvent} and other methods.\n     * @param event The event.\n     * @param nestingLevel The nesting level: 0 if called from the base class,\n     * or 1 from a subclass.  If the event was already checked by this consistency verifier\n     * at a higher nesting level, it will not be checked again.  Used to handle the situation\n     * where a subclass dispatching method delegates to its superclass's dispatching method\n     * and both dispatching methods call into the consistency verifier.\n     ",
    "links" : [ "#onInputEvent" ]
  }, {
    "name" : "private void ensureMetaStateIsNormalized(int metaState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensurePointerCountIsOneForThisAction(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureActionButtonIsNonZeroForThisAction(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureHistorySizeIsZeroForThisAction(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean startEvent(InputEvent event, int nestingLevel, String eventType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void finishEvent()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void appendEvent(StringBuilder message, int index, InputEvent event, boolean unhandled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void problem(String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyState findKeyState(int deviceId, int source, int keyCode, boolean remove)",
    "returnType" : "KeyState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addKeyState(int deviceId, int source, int keyCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "IS_ENG_BUILD", "EVENT_TYPE_KEY", "EVENT_TYPE_TRACKBALL", "EVENT_TYPE_TOUCH", "EVENT_TYPE_GENERIC_MOTION", "RECENT_EVENTS_TO_LOG", "mCaller", "mFlags", "mLogTag", "mLastEventSeq", "mLastEventType", "mLastNestingLevel", "mRecentEvents", "mRecentEventsUnhandled", "mMostRecentEventIndex", "mCurrentEvent", "mCurrentEventType", "mKeyStateList", "mTrackballDown", "mTrackballUnhandled", "mTouchEventStreamPointers", "mTouchEventStreamDeviceId", "mTouchEventStreamSource", "mTouchEventStreamIsTainted", "mTouchEventStreamUnhandled", "mHoverEntered", "mButtonsPressed", "mViolationMessage", "FLAG_RAW_DEVICE_INPUT" ],
  "methodNames" : [ "public static boolean isInstrumentationEnabled()", "public void reset()", "public void onInputEvent(InputEvent event, int nestingLevel)", "public void onKeyEvent(KeyEvent event, int nestingLevel)", "public void onTrackballEvent(MotionEvent event, int nestingLevel)", "public void onTouchEvent(MotionEvent event, int nestingLevel)", "public void onGenericMotionEvent(MotionEvent event, int nestingLevel)", "public void onUnhandledEvent(InputEvent event, int nestingLevel)", "private void ensureMetaStateIsNormalized(int metaState)", "private void ensurePointerCountIsOneForThisAction(MotionEvent event)", "private void ensureActionButtonIsNonZeroForThisAction(MotionEvent event)", "private void ensureHistorySizeIsZeroForThisAction(MotionEvent event)", "private boolean startEvent(InputEvent event, int nestingLevel, String eventType)", "private void finishEvent()", "private static void appendEvent(StringBuilder message, int index, InputEvent event, boolean unhandled)", "private void problem(String message)", "private KeyState findKeyState(int deviceId, int source, int keyCode, boolean remove)", "private void addKeyState(int deviceId, int source, int keyCode)" ]
}