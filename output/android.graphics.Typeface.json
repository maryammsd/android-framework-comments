{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Typeface.java",
  "packageName" : "android.graphics",
  "className" : "Typeface",
  "comment" : "\n * The Typeface class specifies the typeface and intrinsic style of a font.\n * This is used in the paint, along with optionally Paint settings like\n * textSize, textSkewX, textScaleX to specify\n * how text appears when drawn (and measured).\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "Typeface",
    "comment" : " The default NORMAL typeface object ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_BOLD",
    "type" : "Typeface",
    "comment" : "\n     * The default BOLD typeface object. Note: this may be not actually be\n     * bold, depending on what fonts are installed. Call getStyle() to know\n     * for sure.\n     ",
    "links" : [ ]
  }, {
    "name" : "SANS_SERIF",
    "type" : "Typeface",
    "comment" : " The NORMAL style of the default sans serif typeface. ",
    "links" : [ ]
  }, {
    "name" : "SERIF",
    "type" : "Typeface",
    "comment" : " The NORMAL style of the default serif typeface. ",
    "links" : [ ]
  }, {
    "name" : "MONOSPACE",
    "type" : "Typeface",
    "comment" : " The NORMAL style of the default monospace typeface. ",
    "links" : [ ]
  }, {
    "name" : "sDefaults",
    "type" : "Typeface[]",
    "comment" : "\n     * The default {@link Typeface}s for different text styles.\n     * Call {@link #defaultFromStyle(int)} to get the default typeface for the given text style.\n     * It shouldn't be changed for app wide typeface settings. Please use theme and font XML for\n     * the same purpose.\n     ",
    "links" : [ "android.graphics.Typeface", "#defaultFromStyle(int)" ]
  }, {
    "name" : "sStyledTypefaceCache",
    "type" : "LongSparseArray<SparseArray<Typeface>>",
    "comment" : "\n     * Cache for Typeface objects for style variant. Currently max size is 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "sStyledCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sWeightTypefaceCache",
    "type" : "LongSparseArray<SparseArray<Typeface>>",
    "comment" : "\n     * Cache for Typeface objects for weight variant. Currently max size is 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "sWeightCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDynamicTypefaceCache",
    "type" : "LruCache<String, Typeface>",
    "comment" : "\n     * Cache for Typeface objects dynamically loaded from assets. Currently max size is 16.\n     ",
    "links" : [ ]
  }, {
    "name" : "sDynamicCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDefaultTypeface",
    "type" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSystemFontMap",
    "type" : "Map<String, Typeface>",
    "comment" : "\n     * sSystemFontMap is read only and unmodifiable.\n     * Use public API {@link #create(String, int)} to get the typeface for given familyName.\n     ",
    "links" : [ "#create(String" ]
  }, {
    "name" : "sSystemFallbackMap",
    "type" : "Map<String, android.graphics.FontFamily[]>",
    "comment" : "\n     * @deprecated Use {@link android.graphics.fonts.FontFamily} instead.\n     ",
    "links" : [ "android.graphics.fonts.FontFamily" ]
  }, {
    "name" : "native_instance",
    "type" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NORMAL",
    "type" : "int",
    "comment" : " Style",
    "links" : [ ]
  }, {
    "name" : "BOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITALIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOLD_ITALIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_MASK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RESOLVE_BY_FONT_TABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FAMILY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLE_NORMAL",
    "type" : "int",
    "comment" : " Style value for building typeface.",
    "links" : [ ]
  }, {
    "name" : "STYLE_ITALIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedAxes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_AXES",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void setDefault(Typeface t)",
    "returnType" : "void",
    "comment" : "\n     * Please use font in xml and also your application global theme to change the default Typeface.\n     * android:textViewStyle and its attribute android:textAppearance can be used in order to change\n     * typeface and other text related properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWeight()",
    "returnType" : "int",
    "comment" : " Returns the typeface's weight value ",
    "links" : [ ]
  }, {
    "name" : "public int getStyle()",
    "returnType" : "int",
    "comment" : " Returns the typeface's intrinsic style attributes ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isBold()",
    "returnType" : "boolean",
    "comment" : " Returns true if getStyle() has the BOLD bit set. ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isItalic()",
    "returnType" : "boolean",
    "comment" : " Returns true if getStyle() has the ITALIC bit set. ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface createFromResources(FamilyResourceEntry entry, AssetManager mgr, String path)",
    "returnType" : "Typeface",
    "comment" : "\n     * @hide\n     * Used by Resources to load a font resource of type xml.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface findFromCache(AssetManager mgr, String path)",
    "returnType" : "Typeface",
    "comment" : "\n     * Used by resources for cached loading if the font is available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface create(String familyName, @Style int style)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a typeface object given a family name, and option style information.\n     * If null is passed for the name, then the \"default\" font will be chosen.\n     * The resulting typeface object can be queried (getStyle()) to discover what\n     * its \"real\" style characteristics are.\n     *\n     * @param familyName May be null. The name of the font family.\n     * @param style  The style (normal, bold, italic) of the typeface.\n     *               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC\n     * @return The best matching typeface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface create(Typeface family, @Style int style)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a typeface object that best matches the specified existing\n     * typeface and the specified Style. Use this call if you want to pick a new\n     * style from the same family of an existing typeface object. If family is\n     * null, this selects from the default font's family.\n     *\n     * <p>\n     * This method is not thread safe on API 27 or before.\n     * This method is thread safe on API 28 or after.\n     * </p>\n     *\n     * @param family An existing {@link Typeface} object. In case of {@code null}, the default\n     *               typeface is used instead.\n     * @param style  The style (normal, bold, italic) of the typeface.\n     *               e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC\n     * @return The best matching typeface.\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "public static Typeface create(@Nullable Typeface family, @IntRange(from = 1, to = 1000) int weight, boolean italic)",
    "returnType" : "Typeface",
    "comment" : "\n     * Creates a typeface object that best matches the specified existing typeface and the specified\n     * weight and italic style\n     * <p>Below are numerical values and corresponding common weight names.</p>\n     * <table>\n     * <thead>\n     * <tr><th>Value</th><th>Common weight name</th></tr>\n     * </thead>\n     * <tbody>\n     * <tr><td>100</td><td>Thin</td></tr>\n     * <tr><td>200</td><td>Extra Light</td></tr>\n     * <tr><td>300</td><td>Light</td></tr>\n     * <tr><td>400</td><td>Normal</td></tr>\n     * <tr><td>500</td><td>Medium</td></tr>\n     * <tr><td>600</td><td>Semi Bold</td></tr>\n     * <tr><td>700</td><td>Bold</td></tr>\n     * <tr><td>800</td><td>Extra Bold</td></tr>\n     * <tr><td>900</td><td>Black</td></tr>\n     * </tbody>\n     * </table>\n     *\n     * <p>\n     * This method is thread safe.\n     * </p>\n     *\n     * @param family An existing {@link Typeface} object. In case of {@code null}, the default\n     *               typeface is used instead.\n     * @param weight The desired weight to be drawn.\n     * @param italic {@code true} if italic style is desired to be drawn. Otherwise, {@code false}\n     * @return A {@link Typeface} object for drawing specified weight and italic style. Never\n     *         returns {@code null}\n     *\n     * @see #getWeight()\n     * @see #isItalic()\n     ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "private static Typeface createWeightStyle(@NonNull Typeface base, @IntRange(from = 1, to = 1000) int weight, boolean italic)",
    "returnType" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Typeface createFromTypefaceWithVariation(@Nullable Typeface family, @NonNull List<FontVariationAxis> axes)",
    "returnType" : "Typeface",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface defaultFromStyle(@Style int style)",
    "returnType" : "Typeface",
    "comment" : "\n     * Returns one of the default typeface objects, based on the specified style\n     *\n     * @return the default typeface that corresponds to the style\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface createFromAsset(AssetManager mgr, String path)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from the specified font data.\n     *\n     * @param mgr  The application's asset manager\n     * @param path The file name of the font data in the assets directory\n     * @return The new typeface.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String createProviderUid(String authority, String query)",
    "returnType" : "String",
    "comment" : "\n     * Creates a unique id for a given font provider and query.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface createFromFile(@Nullable File file)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from the specified font file.\n     *\n     * @param file The path to the font data.\n     * @return The new typeface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Typeface createFromFile(@Nullable String path)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from the specified font file.\n     *\n     * @param path The full path to the font data.\n     * @return The new typeface.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Typeface createFromFamilies(android.graphics.FontFamily[] families)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from an array of font families.\n     *\n     * @param families array of font families\n     * @deprecated\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Typeface createFromFamilies(@Nullable FontFamily[] families)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from an array of android.graphics.fonts.FontFamily.\n     *\n     * @param families array of font families\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[] families, int weight, int italic)",
    "returnType" : "Typeface",
    "comment" : "\n     * This method is used by supportlib-v27.\n     *\n     * @deprecated Use {@link android.graphics.fonts.FontFamily} instead.\n     ",
    "links" : [ "android.graphics.fonts.FontFamily" ]
  }, {
    "name" : "private static Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[] families, String fallbackName, int weight, int italic)",
    "returnType" : "Typeface",
    "comment" : "\n     * Create a new typeface from an array of font families, including\n     * also the font families in the fallback list.\n     * @param fallbackName the family name. If given families don't support characters, the\n     *               characters will be rendered with this family.\n     * @param weight the weight for this family. In that case, the table information in the first\n     *               family's font is used. If the first family has multiple fonts, the closest to\n     *               the regular weight and upright font is used.\n     * @param italic the italic information for this family. In that case, the table information in\n     *               the first family's font is used. If the first family has multiple fonts, the\n     *               closest to the regular weight and upright font is used.\n     * @param families array of font families\n     *\n     * @deprecated Use {@link android.graphics.fonts.FontFamily} instead.\n     ",
    "links" : [ "android.graphics.fonts.FontFamily" ]
  }, {
    "name" : "private static Typeface getSystemDefaultTypeface(@NonNull String familyName)",
    "returnType" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void initSystemDefaultTypefaces(Map<String, Typeface> systemFontMap, Map<String, FontFamily[]> fallbacks, FontConfig.Alias[] aliases)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void registerGenericFamilyNative(@NonNull String familyName, @Nullable Typeface typeface)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupportedAxes(int axis)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromTypeface(long native_instance, int style)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromTypefaceWithExactStyle(long native_instance, int weight, boolean italic)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromTypefaceWithVariation(long native_instance, List<FontVariationAxis> axes)",
    "returnType" : "long",
    "comment" : " TODO: clean up: change List<FontVariationAxis> to FontVariationAxis[]",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateWeightAlias(long native_instance, int weight)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateFromArray(long[] familyArray, int weight, int italic)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetSupportedAxes(long native_instance)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDefault(long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetStyle(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetWeight(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetReleaseFunc()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRegisterGenericFamily(String str, long nativePtr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sRegistry", "DEFAULT", "DEFAULT_BOLD", "SANS_SERIF", "SERIF", "MONOSPACE", "sDefaults", "sStyledTypefaceCache", "sStyledCacheLock", "sWeightTypefaceCache", "sWeightCacheLock", "sDynamicTypefaceCache", "sDynamicCacheLock", "sDefaultTypeface", "sSystemFontMap", "sSystemFallbackMap", "native_instance", "NORMAL", "BOLD", "ITALIC", "BOLD_ITALIC", "STYLE_MASK", "mStyle", "mWeight", "RESOLVE_BY_FONT_TABLE", "DEFAULT_FAMILY", "STYLE_NORMAL", "STYLE_ITALIC", "mSupportedAxes", "EMPTY_AXES" ],
  "methodNames" : [ "private static void setDefault(Typeface t)", "public int getWeight()", "public int getStyle()", "public final boolean isBold()", "public final boolean isItalic()", "public static Typeface createFromResources(FamilyResourceEntry entry, AssetManager mgr, String path)", "public static Typeface findFromCache(AssetManager mgr, String path)", "public static Typeface create(String familyName, @Style int style)", "public static Typeface create(Typeface family, @Style int style)", "public static Typeface create(@Nullable Typeface family, @IntRange(from = 1, to = 1000) int weight, boolean italic)", "private static Typeface createWeightStyle(@NonNull Typeface base, @IntRange(from = 1, to = 1000) int weight, boolean italic)", "public static Typeface createFromTypefaceWithVariation(@Nullable Typeface family, @NonNull List<FontVariationAxis> axes)", "public static Typeface defaultFromStyle(@Style int style)", "public static Typeface createFromAsset(AssetManager mgr, String path)", "private static String createProviderUid(String authority, String query)", "public static Typeface createFromFile(@Nullable File file)", "public static Typeface createFromFile(@Nullable String path)", "private static Typeface createFromFamilies(android.graphics.FontFamily[] families)", "private static Typeface createFromFamilies(@Nullable FontFamily[] families)", "private static Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[] families, int weight, int italic)", "private static Typeface createFromFamiliesWithDefault(android.graphics.FontFamily[] families, String fallbackName, int weight, int italic)", "private static Typeface getSystemDefaultTypeface(@NonNull String familyName)", "public static void initSystemDefaultTypefaces(Map<String, Typeface> systemFontMap, Map<String, FontFamily[]> fallbacks, FontConfig.Alias[] aliases)", "private static void registerGenericFamilyNative(@NonNull String familyName, @Nullable Typeface typeface)", "public boolean equals(Object o)", "public int hashCode()", "public boolean isSupportedAxes(int axis)", "private static native long nativeCreateFromTypeface(long native_instance, int style)", "private static native long nativeCreateFromTypefaceWithExactStyle(long native_instance, int weight, boolean italic)", "private static native long nativeCreateFromTypefaceWithVariation(long native_instance, List<FontVariationAxis> axes)", "private static native long nativeCreateWeightAlias(long native_instance, int weight)", "private static native long nativeCreateFromArray(long[] familyArray, int weight, int italic)", "private static native int[] nativeGetSupportedAxes(long native_instance)", "private static native void nativeSetDefault(long nativePtr)", "private static native int nativeGetStyle(long nativePtr)", "private static native int nativeGetWeight(long nativePtr)", "private static native long nativeGetReleaseFunc()", "private static native void nativeRegisterGenericFamily(String str, long nativePtr)" ]
}