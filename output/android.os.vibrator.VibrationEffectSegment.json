{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/vibrator/VibrationEffectSegment.java",
  "packageName" : "android.os.vibrator",
  "className" : "VibrationEffectSegment",
  "comment" : "\n * Representation of a single segment of a {@link VibrationEffect}.\n *\n * <p>Vibration effects are represented as a sequence of segments that describes how vibration\n * amplitude and frequency changes over time. Segments can be described as one of the following:\n *\n * <ol>\n *     <li>A predefined vibration effect;\n *     <li>A composable effect primitive;\n *     <li>Fixed amplitude and frequency values to be held for a specified duration;\n *     <li>Pairs of amplitude and frequency values to be ramped to for a specified duration;\n * </ol>\n *\n * @hide\n ",
  "links" : [ "android.os.VibrationEffect" ],
  "variables" : [ {
    "name" : "PARCEL_TOKEN_PREBAKED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_PRIMITIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_STEP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_TOKEN_RAMP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<VibrationEffectSegment>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract long getDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the estimated duration of the segment in milliseconds.\n     *\n     * <p>For segments with an unknown duration (e.g. prebaked or primitive effects where the length\n     * is device and potentially run-time dependent), this returns -1.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean areVibrationFeaturesSupported(@NonNull VibratorInfo vibratorInfo)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a given {@link Vibrator} can play this segment as intended. See\n     * {@link Vibrator#areVibrationFeaturesSupported(VibrationEffect)} for more information about\n     * what counts as supported by a vibrator, and what counts as not.\n     *\n     * @hide\n     ",
    "links" : [ "#areVibrationFeaturesSupported(VibrationEffect)", "Vibrator" ]
  }, {
    "name" : "public abstract boolean isHapticFeedbackCandidate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this segment could be a haptic feedback effect candidate.\n     *\n     * @see VibrationEffect#isHapticFeedbackCandidate()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void validate()",
    "returnType" : "void",
    "comment" : "\n     * Validates the segment, throwing exceptions if any parameter is invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract T resolve(int defaultAmplitude)",
    "returnType" : "T",
    "comment" : "\n     * Resolves amplitudes set to {@link VibrationEffect#DEFAULT_AMPLITUDE}.\n     *\n     * <p>This might fail with {@link IllegalArgumentException} if value is non-positive or larger\n     * than {@link VibrationEffect#MAX_AMPLITUDE}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.VibrationEffect#MAX_AMPLITUDE", "android.os.VibrationEffect#DEFAULT_AMPLITUDE", "IllegalArgumentException" ]
  }, {
    "name" : "public abstract T scale(float scaleFactor)",
    "returnType" : "T",
    "comment" : "\n     * Scale the segment intensity with the given factor.\n     *\n     * <p> This scale is not necessarily linear and may apply a gamma correction to the scale\n     * factor before using it.\n     *\n     * @param scaleFactor scale factor to be applied to the intensity. Values within [0,1) will\n     *                    scale down the intensity, values larger than 1 will scale up\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract T scaleLinearly(float scaleFactor)",
    "returnType" : "T",
    "comment" : "\n     * Performs a linear scaling on the segment intensity with the given factor.\n     *\n     * @param scaleFactor scale factor to be applied to the intensity. Values within [0,1) will\n     *                    scale down the intensity, values larger than 1 will scale up\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract T applyEffectStrength(int effectStrength)",
    "returnType" : "T",
    "comment" : "\n     * Applies given effect strength to prebaked effects.\n     *\n     * @param effectStrength new effect strength to be applied, one of\n     *                       VibrationEffect.EFFECT_STRENGTH_*.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toDebugString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a compact version of the {@link #toString()} result for debugging purposes.\n     *\n     * @hide\n     ",
    "links" : [ "#toString()" ]
  }, {
    "name" : "public static void checkFrequencyArgument(float value, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Checks the given frequency argument is valid to represent a vibration effect frequency in\n     * hertz, i.e. a finite non-negative value.\n     *\n     * @param value the frequency argument value to be checked\n     * @param name the argument name for the error message.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void checkDurationArgument(long value, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Checks the given duration argument is valid, i.e. a non-negative value.\n     *\n     * @param value the duration value to be checked\n     * @param name the argument name for the error message.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static boolean amplitudeRequiresAmplitudeControl(float amplitude)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method to check if an amplitude requires a vibrator to have amplitude control to play.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected static boolean frequencyRequiresFrequencyControl(float frequency)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method to check if a frequency requires a vibrator to have frequency control to play.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract long getDuration()", "public abstract boolean areVibrationFeaturesSupported(@NonNull VibratorInfo vibratorInfo)", "public abstract boolean isHapticFeedbackCandidate()", "public abstract void validate()", "public abstract T resolve(int defaultAmplitude)", "public abstract T scale(float scaleFactor)", "public abstract T scaleLinearly(float scaleFactor)", "public abstract T applyEffectStrength(int effectStrength)", "public abstract String toDebugString()", "public static void checkFrequencyArgument(float value, @NonNull String name)", "public static void checkDurationArgument(long value, @NonNull String name)", "protected static boolean amplitudeRequiresAmplitudeControl(float amplitude)", "protected static boolean frequencyRequiresFrequencyControl(float frequency)" ],
  "variableNames" : [ "PARCEL_TOKEN_PREBAKED", "PARCEL_TOKEN_PRIMITIVE", "PARCEL_TOKEN_STEP", "PARCEL_TOKEN_RAMP", "CREATOR" ]
}