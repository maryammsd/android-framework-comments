{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Modifier.java",
  "packageName" : "java.lang.reflect",
  "className" : "Modifier",
  "comment" : "\n * The Modifier class provides {@code static} methods and\n * constants to decode class and member access modifiers.  The sets of\n * modifiers are represented as integers with distinct bit positions\n * representing different modifiers.  The values for the constants\n * representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of\n * <cite>The Java&trade; Virtual Machine Specification</cite>.\n *\n * @see Class#getModifiers()\n * @see Member#getModifiers()\n *\n * @author Nakul Saraiya\n * @author Kenneth Russell\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PUBLIC",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code public}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRIVATE",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code private}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTECTED",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code protected}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATIC",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code static}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "FINAL",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code final}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNCHRONIZED",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code synchronized}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "VOLATILE",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code volatile}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSIENT",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code transient}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "NATIVE",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code native}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERFACE",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code interface}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "ABSTRACT",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code abstract}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "STRICT",
    "type" : "int",
    "comment" : "\n     * The {@code int} value representing the {@code strictfp}\n     * modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "BRIDGE",
    "type" : "int",
    "comment" : " they are not Java programming language keywords",
    "links" : [ ]
  }, {
    "name" : "VARARGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYNTHETIC",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENUM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MANDATED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONSTRUCTOR",
    "type" : "int",
    "comment" : "\n     * Dex addition to mark instance constructors and static class\n     * initializer methods.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "int",
    "comment" : "\n     * Default methods are marked with a synthetic access flag\n     * to speed up class loading and invocation target lookup.\n     * Implies INTERFACE, not-ABSTRACT, and not-STATIC.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CLASS_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to a class.\n     * @jls 8.1.1 Class Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "INTERFACE_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to an interface.\n     * @jls 9.1.1 Interface Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "CONSTRUCTOR_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to a constructor.\n     * @jls 8.8.3 Constructor Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to a method.\n     * @jls8.4.3  Method Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "FIELD_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to a field.\n     * @jls 8.3.1  Field Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAMETER_MODIFIERS",
    "type" : "int",
    "comment" : "\n     * The Java source modifiers that can be applied to a method or constructor parameter.\n     * @jls 8.4.1 Formal Parameters\n     ",
    "links" : [ ]
  }, {
    "name" : "ACCESS_MODIFIERS",
    "type" : "int",
    "comment" : "\n     *\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isPublic(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code public} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code public} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPrivate(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code private} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code private} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProtected(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code protected} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code protected} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStatic(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code static} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code static} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFinal(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code final} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code final} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSynchronized(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code synchronized} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code synchronized} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isVolatile(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code volatile} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code volatile} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isConstructor(int modifiers)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given modifiers contain {@link Modifier#CONSTRUCTOR}.\n     * @hide\n     ",
    "links" : [ "java.lang.reflect.Modifier#CONSTRUCTOR" ]
  }, {
    "name" : "public static boolean isTransient(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code transient} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code transient} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNative(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code native} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code native} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInterface(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code interface} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code interface} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAbstract(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code abstract} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code abstract} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStrict(int mod)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the integer argument includes the\n     * {@code strictfp} modifier, {@code false} otherwise.\n     *\n     * @param   mod a set of modifiers\n     * @return {@code true} if {@code mod} includes the\n     * {@code strictfp} modifier; {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String toString(int mod)",
    "returnType" : "String",
    "comment" : "\n     * Return a string describing the access modifier flags in\n     * the specified modifier. For example:\n     * <blockquote><pre>\n     *    public final synchronized strictfp\n     * </pre></blockquote>\n     * The modifier names are returned in an order consistent with the\n     * suggested modifier orderings given in sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1 of\n     * <cite>The Java&trade; Language Specification</cite>.\n     * The full modifier ordering used by this method is:\n     * <blockquote> {@code\n     * public protected private abstract static final transient\n     * volatile synchronized native strictfp\n     * interface } </blockquote>\n     * The {@code interface} modifier discussed in this class is\n     * not a true modifier in the Java language and it appears after\n     * all other modifiers listed by this method.  This method may\n     * return a string of modifiers that are not valid modifiers of a\n     * Java entity; in other words, no checking is done on the\n     * possible validity of the combination of modifiers represented\n     * by the input.\n     *\n     * Note that to perform such checking for a known kind of entity,\n     * such as a constructor or method, first AND the argument of\n     * {@code toString} with the appropriate mask from a method like\n     * {@link #constructorModifiers} or {@link #methodModifiers}.\n     *\n     * @param   mod a set of modifiers\n     * @return  a string representation of the set of modifiers\n     * represented by {@code mod}\n     ",
    "links" : [ "#constructorModifiers", "#methodModifiers" ]
  }, {
    "name" : " static boolean isSynthetic(int mod)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isMandated(int mod)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int classModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a class.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a class.\n     *\n     * @jls 8.1.1 Class Modifiers\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int interfaceModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to an interface.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to an interface.\n     *\n     * @jls 9.1.1 Interface Modifiers\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int constructorModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a constructor.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a constructor.\n     *\n     * @jls 8.8.3 Constructor Modifiers\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int methodModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a method.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a method.\n     *\n     * @jls 8.4.3 Method Modifiers\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int fieldModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a field.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a field.\n     *\n     * @jls 8.3.1 Field Modifiers\n     * @since 1.7\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parameterModifiers()",
    "returnType" : "int",
    "comment" : "\n     * Return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a parameter.\n     * @return an {@code int} value OR-ing together the source language\n     * modifiers that can be applied to a parameter.\n     *\n     * @jls 8.4.1 Formal Parameters\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isPublic(int mod)", "public static boolean isPrivate(int mod)", "public static boolean isProtected(int mod)", "public static boolean isStatic(int mod)", "public static boolean isFinal(int mod)", "public static boolean isSynchronized(int mod)", "public static boolean isVolatile(int mod)", "public static boolean isConstructor(int modifiers)", "public static boolean isTransient(int mod)", "public static boolean isNative(int mod)", "public static boolean isInterface(int mod)", "public static boolean isAbstract(int mod)", "public static boolean isStrict(int mod)", "public static String toString(int mod)", " static boolean isSynthetic(int mod)", " static boolean isMandated(int mod)", "public static int classModifiers()", "public static int interfaceModifiers()", "public static int constructorModifiers()", "public static int methodModifiers()", "public static int fieldModifiers()", "public static int parameterModifiers()" ],
  "variableNames" : [ "PUBLIC", "PRIVATE", "PROTECTED", "STATIC", "FINAL", "SYNCHRONIZED", "VOLATILE", "TRANSIENT", "NATIVE", "INTERFACE", "ABSTRACT", "STRICT", "BRIDGE", "VARARGS", "SYNTHETIC", "ANNOTATION", "ENUM", "MANDATED", "CONSTRUCTOR", "DEFAULT", "CLASS_MODIFIERS", "INTERFACE_MODIFIERS", "CONSTRUCTOR_MODIFIERS", "METHOD_MODIFIERS", "FIELD_MODIFIERS", "PARAMETER_MODIFIERS", "ACCESS_MODIFIERS" ]
}