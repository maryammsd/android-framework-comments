{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/AppOpsManager.java",
  "packageName" : "android.app",
  "className" : "OnOpNotedCallback",
  "comment" : "\n     * Callback an app can {@link #setOnOpNotedCallback set} to monitor the app-ops the\n     * system has tracked for it. I.e. each time any app calls {@link #noteOp} or {@link #startOp}\n     * one of a method of this object is called.\n     *\n     * <p><b>There will be a call for all app-ops related to runtime permissions, but not\n     * necessarily for all other app-ops.\n     *\n     * <pre>\n     * setOnOpNotedCallback(getMainExecutor(), new OnOpNotedCallback() {\n     *     ArraySet<Pair<String, String>> opsNotedForThisProcess = new ArraySet<>();\n     *\n     *     private synchronized void addAccess(String op, String accessLocation) {\n     *         // Ops are often noted when runtime permission protected APIs were called.\n     *         // In this case permissionToOp() allows to resolve the permission<->op\n     *         opsNotedForThisProcess.add(new Pair(accessType, accessLocation));\n     *     }\n     *\n     *     public void onNoted(SyncNotedAppOp op) {\n     *         // Accesses is currently happening, hence stack trace describes location of access\n     *         addAccess(op.getOp(), Arrays.toString(Thread.currentThread().getStackTrace()));\n     *     }\n     *\n     *     public void onSelfNoted(SyncNotedAppOp op) {\n     *         onNoted(op);\n     *     }\n     *\n     *     public void onAsyncNoted(AsyncNotedAppOp asyncOp) {\n     *         // Stack trace is not useful for async ops as accessed happened on different thread\n     *         addAccess(asyncOp.getOp(), asyncOp.getMessage());\n     *     }\n     * });\n     * </pre>\n     *\n     * @see #setOnOpNotedCallback\n     ",
  "links" : [ "#startOp", "#noteOp", "#setOnOpNotedCallback" ],
  "variables" : [ {
    "name" : "mAsyncExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAsyncCb",
    "type" : "IAppOpsAsyncNotedCallback",
    "comment" : " Callback registered with the system. This will receive the async notes ops ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected Executor getAsyncNotedExecutor()",
    "returnType" : "Executor",
    "comment" : "\n         * Will be removed before R ships.\n         *\n         * @return The executor for the system to use when calling {@link #onAsyncNoted}.\n         *\n         * @hide\n         ",
    "links" : [ "#onAsyncNoted" ]
  }, {
    "name" : "public abstract void onNoted(@NonNull SyncNotedAppOp op)",
    "returnType" : "void",
    "comment" : "\n         * Called when an app-op was {@link #noteOp noted} for this package inside of a synchronous\n         * API call, i.e. a API call that returned data or waited until the action was performed.\n         *\n         * <p>Called on the calling thread before the API returns. This allows the app to e.g.\n         * collect stack traces to figure out where the access came from.\n         *\n         * @param op op noted\n         ",
    "links" : [ "#noteOp" ]
  }, {
    "name" : "public abstract void onSelfNoted(@NonNull SyncNotedAppOp op)",
    "returnType" : "void",
    "comment" : "\n         * Called when this app noted an app-op for its own package,\n         *\n         * <p>This is very similar to {@link #onNoted} only that the tracking was not caused by the\n         * API provider in a separate process, but by one in the app's own process.\n         *\n         * @param op op noted\n         ",
    "links" : [ "#onNoted" ]
  }, {
    "name" : "public abstract void onAsyncNoted(@NonNull AsyncNotedAppOp asyncOp)",
    "returnType" : "void",
    "comment" : "\n         * Called when an app-op was noted for this package which cannot be delivered via the other\n         * two mechanisms.\n         *\n         * <p>Called as soon as possible after the app-op was noted, but the delivery delay is not\n         * guaranteed. Due to how async calls work in Android this might even be delivered slightly\n         * before the private data is delivered to the app.\n         *\n         * <p>If the app is not running or no {@link OnOpNotedCallback} is registered a small amount\n         * of noted app-ops are buffered and then delivered as soon as a listener is registered.\n         *\n         * @param asyncOp op noted\n         ",
    "links" : [ "OnOpNotedCallback" ]
  } ],
  "methodNames" : [ "protected Executor getAsyncNotedExecutor()", "public abstract void onNoted(@NonNull SyncNotedAppOp op)", "public abstract void onSelfNoted(@NonNull SyncNotedAppOp op)", "public abstract void onAsyncNoted(@NonNull AsyncNotedAppOp asyncOp)" ],
  "variableNames" : [ "mAsyncExecutor", "mAsyncCb" ]
}