{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/radio/ProgramSelector.java",
  "packageName" : "android.hardware.radio",
  "className" : "ProgramSelector",
  "comment" : "\n * A set of identifiers necessary to tune to a given station.\n *\n * This can hold various identifiers, like\n * - AM/FM frequency\n * - HD Radio subchannel\n * - DAB channel info\n *\n * The primary ID uniquely identifies a station and can be used for equality\n * check. The secondary IDs are supplementary and can speed up tuning process,\n * but the primary ID is sufficient (ie. after a full band scan).\n *\n * Two selectors with different secondary IDs, but the same primary ID are\n * considered equal. In particular, secondary IDs vector may get updated for\n * an entry on the program list (ie. when a better frequency for a given\n * station is found).\n *\n * The primaryId of a given programType MUST be of a specific type:\n * - AM, FM: RDS_PI if the station broadcasts RDS, AMFM_FREQUENCY otherwise;\n * - AM_HD, FM_HD: HD_STATION_ID_EXT;\n * - DAB: DAB_SIDECC;\n * - DRMO: DRMO_SERVICE_ID;\n * - SXM: SXM_SERVICE_ID;\n * - VENDOR: VENDOR_PRIMARY.\n * @hide\n ",
  "variables" : [ {
    "name" : "PROGRAM_TYPE_INVALID",
    "type" : "int",
    "comment" : " Invalid program type.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_AM",
    "type" : "int",
    "comment" : " Analogue AM radio (with or without RDS).\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_FM",
    "type" : "int",
    "comment" : " analogue FM radio (with or without RDS).\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_AM_HD",
    "type" : "int",
    "comment" : " AM HD Radio.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_FM_HD",
    "type" : "int",
    "comment" : " FM HD Radio.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_DAB",
    "type" : "int",
    "comment" : " Digital audio broadcasting.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_DRMO",
    "type" : "int",
    "comment" : " Digital Radio Mondiale.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_SXM",
    "type" : "int",
    "comment" : " SiriusXM Satellite Radio.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_VENDOR_START",
    "type" : "int",
    "comment" : " Vendor-specific, not synced across devices.\n     * @deprecated use {@link ProgramIdentifier} instead\n     ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "PROGRAM_TYPE_VENDOR_END",
    "type" : "int",
    "comment" : " @deprecated use {@link ProgramIdentifier} instead ",
    "links" : [ "ProgramIdentifier" ]
  }, {
    "name" : "IDENTIFIER_TYPE_INVALID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_AMFM_FREQUENCY",
    "type" : "int",
    "comment" : " kHz ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_RDS_PI",
    "type" : "int",
    "comment" : " 16bit ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_HD_STATION_ID_EXT",
    "type" : "int",
    "comment" : "\n     * 64bit compound primary identifier for HD Radio.\n     *\n     * Consists of (from the LSB):\n     * - 32bit: Station ID number;\n     * - 4bit: HD_SUBCHANNEL;\n     * - 18bit: AMFM_FREQUENCY.\n     * The remaining bits should be set to zeros when writing on the chip side\n     * and ignored when read.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_HD_SUBCHANNEL",
    "type" : "int",
    "comment" : "\n     * HD Radio subchannel - a value of range 0-7.\n     *\n     * The subchannel index is 0-based (where 0 is MPS and 1..7 are SPS),\n     * as opposed to HD Radio standard (where it's 1-based).\n     *\n     * @deprecated use IDENTIFIER_TYPE_HD_STATION_ID_EXT instead\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_HD_STATION_NAME",
    "type" : "int",
    "comment" : "\n     * 64bit additional identifier for HD Radio.\n     *\n     * Due to Station ID abuse, some HD_STATION_ID_EXT identifiers may be not\n     * globally unique. To provide a best-effort solution, a short version of\n     * station name may be carried as additional identifier and may be used\n     * by the tuner hardware to double-check tuning.\n     *\n     * The name is limited to the first 8 A-Z0-9 characters (lowercase letters\n     * must be converted to uppercase). Encoded in little-endian ASCII:\n     * the first character of the name is the LSB.\n     *\n     * For example: \"Abc\" is encoded as 0x434241.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DAB_SIDECC",
    "type" : "int",
    "comment" : "\n     * @see {@link IDENTIFIER_TYPE_DAB_SID_EXT}\n     ",
    "links" : [ "IDENTIFIER_TYPE_DAB_SID_EXT" ]
  }, {
    "name" : "IDENTIFIER_TYPE_DAB_SID_EXT",
    "type" : "int",
    "comment" : "\n     * 28bit compound primary identifier for Digital Audio Broadcasting.\n     *\n     * Consists of (from the LSB):\n     * - 16bit: SId;\n     * - 8bit: ECC code;\n     * - 4bit: SCIdS.\n     *\n     * SCIdS (Service Component Identifier within the Service) value\n     * of 0 represents the main service, while 1 and above represents\n     * secondary services.\n     *\n     * The remaining bits should be set to zeros when writing on the chip side\n     * and ignored when read.\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DAB_ENSEMBLE",
    "type" : "int",
    "comment" : " 16bit ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DAB_SCID",
    "type" : "int",
    "comment" : " 12bit ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DAB_FREQUENCY",
    "type" : "int",
    "comment" : " kHz ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DRMO_SERVICE_ID",
    "type" : "int",
    "comment" : " 24bit ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DRMO_FREQUENCY",
    "type" : "int",
    "comment" : " kHz ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_DRMO_MODULATION",
    "type" : "int",
    "comment" : "\n     * 1: AM, 2:FM\n     * @deprecated use {@link IDENTIFIER_TYPE_DRMO_FREQUENCY} instead\n     ",
    "links" : [ "IDENTIFIER_TYPE_DRMO_FREQUENCY" ]
  }, {
    "name" : "IDENTIFIER_TYPE_SXM_SERVICE_ID",
    "type" : "int",
    "comment" : " 32bit ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_SXM_CHANNEL",
    "type" : "int",
    "comment" : " 0-999 range ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_VENDOR_START",
    "type" : "int",
    "comment" : "\n     * Primary identifier for vendor-specific radio technology.\n     * The value format is determined by a vendor.\n     *\n     * It must not be used in any other programType than corresponding VENDOR\n     * type between VENDOR_START and VENDOR_END (eg. identifier type 1015 must\n     * not be used in any program type other than 1015).\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_TYPE_VENDOR_END",
    "type" : "int",
    "comment" : "\n     * @see {@link IDENTIFIER_TYPE_VENDOR_START}\n     ",
    "links" : [ "IDENTIFIER_TYPE_VENDOR_START" ]
  }, {
    "name" : "IDENTIFIER_TYPE_VENDOR_PRIMARY_START",
    "type" : "int",
    "comment" : "\n     * @deprecated use {@link IDENTIFIER_TYPE_VENDOR_START} instead\n     ",
    "links" : [ "IDENTIFIER_TYPE_VENDOR_START" ]
  }, {
    "name" : "IDENTIFIER_TYPE_VENDOR_PRIMARY_END",
    "type" : "int",
    "comment" : "\n     * @deprecated use {@link IDENTIFIER_TYPE_VENDOR_END} instead\n     ",
    "links" : [ "IDENTIFIER_TYPE_VENDOR_END" ]
  }, {
    "name" : "mProgramType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrimaryId",
    "type" : "Identifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecondaryIds",
    "type" : "Identifier[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorIds",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ProgramSelector>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getProgramType()",
    "returnType" : "int",
    "comment" : "\n     * Type of a radio technology.\n     *\n     * @return program type.\n     * @deprecated use {@link getPrimaryId} instead\n     ",
    "links" : [ "getPrimaryId" ]
  }, {
    "name" : "public Identifier getPrimaryId()",
    "returnType" : "Identifier",
    "comment" : "\n     * Primary program identifier uniquely identifies a station and is used to\n     * determine equality between two ProgramSelectors.\n     *\n     * @return primary identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Identifier[] getSecondaryIds()",
    "returnType" : "Identifier[]",
    "comment" : "\n     * Secondary program identifier is not required for tuning, but may make it\n     * faster or more reliable.\n     *\n     * @return secondary identifier list, must not be modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFirstId(@IdentifierType int type)",
    "returnType" : "long",
    "comment" : "\n     * Looks up an identifier of a given type (either primary or secondary).\n     *\n     * If there are multiple identifiers if a given type, then first in order (where primary id is\n     * before any secondary) is selected.\n     *\n     * @param type type of identifier.\n     * @return identifier value, if found.\n     * @throws IllegalArgumentException, if not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Identifier[] getAllIds(@IdentifierType int type)",
    "returnType" : "Identifier[]",
    "comment" : "\n     * Looks up all identifier of a given type (either primary or secondary).\n     *\n     * Some identifiers may be provided multiple times, for example\n     * IDENTIFIER_TYPE_AMFM_FREQUENCY for FM Alternate Frequencies.\n     *\n     * @param type type of identifier.\n     * @return a list of identifiers, generated on each call. May be modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getVendorIds()",
    "returnType" : "long[]",
    "comment" : "\n     * Vendor identifiers are passed as-is to the HAL implementation,\n     * preserving elements order.\n     *\n     * @return an array of vendor identifiers, must not be modified.\n     * @deprecated for HAL 1.x compatibility;\n     *             HAL 2.x uses standard primary/secondary lists for vendor IDs\n     ",
    "links" : [ ]
  }, {
    "name" : "public ProgramSelector withSecondaryPreferred(@NonNull Identifier preferred)",
    "returnType" : "ProgramSelector",
    "comment" : "\n     * Creates an equivalent ProgramSelector with a given secondary identifier preferred.\n     *\n     * Used to point to a specific physical identifier for technologies that may broadcast the same\n     * program on different channels. For example, with a DAB program broadcasted over multiple\n     * ensembles, the radio hardware may select the one with the strongest signal. The UI may select\n     * preferred ensemble though, so the radio hardware may try to use it in the first place.\n     *\n     * This is a best-effort hint for the tuner, not a guaranteed behavior.\n     *\n     * Setting the given secondary identifier as preferred means filtering out other secondary\n     * identifiers of its type and adding it to the list.\n     *\n     * @param preferred preferred secondary identifier\n     * @return a new ProgramSelector with a given secondary identifier preferred\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ProgramSelector createAmFmSelector(@RadioManager.Band int band, int frequencyKhz)",
    "returnType" : "ProgramSelector",
    "comment" : "\n     * Builds new ProgramSelector for AM/FM frequency.\n     *\n     * @param band the band.\n     * @param frequencyKhz the frequency in kHz.\n     * @return new ProgramSelector object representing given frequency.\n     * @throws IllegalArgumentException if provided frequency is out of bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidAmFmFrequency(boolean isAm, int frequencyKhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks, if a given AM/FM frequency is roughly valid and in correct unit.\n     *\n     * It does not check the range precisely: it may provide false positives, but not false\n     * negatives. In particular, it may be way off for certain regions.\n     * The main purpose is to avoid passing inproper units, ie. MHz instead of kHz.\n     *\n     * @param isAm true, if AM, false if FM.\n     * @param frequencyKhz the frequency in kHz.\n     * @return true, if the frequency is rougly valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ProgramSelector createAmFmSelector(@RadioManager.Band int band, int frequencyKhz, int subChannel)",
    "returnType" : "ProgramSelector",
    "comment" : "\n     * Builds new ProgramSelector for AM/FM frequency.\n     *\n     * This method variant supports HD Radio subchannels, but it's undesirable to\n     * select them manually. Instead, the value should be retrieved from program list.\n     *\n     * @param band the band.\n     * @param frequencyKhz the frequency in kHz.\n     * @param subChannel 1-based HD Radio subchannel.\n     * @return new ProgramSelector object representing given frequency.\n     * @throws IllegalArgumentException if provided frequency is out of bounds,\n     *         or tried setting a subchannel for analog AM/FM.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PROGRAM_TYPE_INVALID", "PROGRAM_TYPE_AM", "PROGRAM_TYPE_FM", "PROGRAM_TYPE_AM_HD", "PROGRAM_TYPE_FM_HD", "PROGRAM_TYPE_DAB", "PROGRAM_TYPE_DRMO", "PROGRAM_TYPE_SXM", "PROGRAM_TYPE_VENDOR_START", "PROGRAM_TYPE_VENDOR_END", "IDENTIFIER_TYPE_INVALID", "IDENTIFIER_TYPE_AMFM_FREQUENCY", "IDENTIFIER_TYPE_RDS_PI", "IDENTIFIER_TYPE_HD_STATION_ID_EXT", "IDENTIFIER_TYPE_HD_SUBCHANNEL", "IDENTIFIER_TYPE_HD_STATION_NAME", "IDENTIFIER_TYPE_DAB_SIDECC", "IDENTIFIER_TYPE_DAB_SID_EXT", "IDENTIFIER_TYPE_DAB_ENSEMBLE", "IDENTIFIER_TYPE_DAB_SCID", "IDENTIFIER_TYPE_DAB_FREQUENCY", "IDENTIFIER_TYPE_DRMO_SERVICE_ID", "IDENTIFIER_TYPE_DRMO_FREQUENCY", "IDENTIFIER_TYPE_DRMO_MODULATION", "IDENTIFIER_TYPE_SXM_SERVICE_ID", "IDENTIFIER_TYPE_SXM_CHANNEL", "IDENTIFIER_TYPE_VENDOR_START", "IDENTIFIER_TYPE_VENDOR_END", "IDENTIFIER_TYPE_VENDOR_PRIMARY_START", "IDENTIFIER_TYPE_VENDOR_PRIMARY_END", "mProgramType", "mPrimaryId", "mSecondaryIds", "mVendorIds", "CREATOR" ],
  "methodNames" : [ "public int getProgramType()", "public Identifier getPrimaryId()", "public Identifier[] getSecondaryIds()", "public long getFirstId(@IdentifierType int type)", "public Identifier[] getAllIds(@IdentifierType int type)", "public long[] getVendorIds()", "public ProgramSelector withSecondaryPreferred(@NonNull Identifier preferred)", "public static ProgramSelector createAmFmSelector(@RadioManager.Band int band, int frequencyKhz)", "private static boolean isValidAmFmFrequency(boolean isAm, int frequencyKhz)", "public static ProgramSelector createAmFmSelector(@RadioManager.Band int band, int frequencyKhz, int subChannel)", "public String toString()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}