{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/RegisteredServicesCache.java",
  "packageName" : "android.content.pm",
  "className" : "RegisteredServicesCache",
  "comment" : "\n * Cache of registered services. This cache is lazily built by interrogating\n * {@link PackageManager} on a per-user basis. It's updated as packages are\n * added, removed and changed. Users are responsible for calling\n * {@link #invalidateCache(int)} when a user is started, since\n * {@link PackageManager} broadcasts aren't sent for stopped users.\n * <p>\n * The services are referred to by type V and are made available via the\n * {@link #getServiceInfo} method.\n *\n * @hide\n ",
  "links" : [ "#getServiceInfo", "android.content.pm.PackageManager", "#invalidateCache(int)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REGISTERED_SERVICES_DIR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterfaceName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetaDataName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributesName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSerializerAndParser",
    "type" : "XmlSerializerAndParser<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServicesLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserServices",
    "type" : "SparseArray<UserServices<V>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "RegisteredServicesCacheListener<V>",
    "comment" : " the listener and handler are synchronized on \"this\" and must be updated together",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExternalReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserRemovedReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private UserServices<V> findOrCreateUserLocked(int userId)",
    "returnType" : "UserServices<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private UserServices<V> findOrCreateUserLocked(int userId, boolean loadFromFileIfNew)",
    "returnType" : "UserServices<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handlePackageEvent(Intent intent, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateCache(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(FileDescriptor fd, PrintWriter fout, String[] args, int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RegisteredServicesCacheListener<V> getListener()",
    "returnType" : "RegisteredServicesCacheListener<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setListener(RegisteredServicesCacheListener<V> listener, Handler handler)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyListener(final V type, final int userId, final boolean removed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo<V> getServiceInfo(V type, int userId)",
    "returnType" : "ServiceInfo<V>",
    "comment" : "\n     * Accessor for the registered authenticators.\n     * @param type the account type of the authenticator\n     * @return the AuthenticatorInfo that matches the account type or null if none is present\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<ServiceInfo<V>> getAllServices(int userId)",
    "returnType" : "Collection<ServiceInfo<V>>",
    "comment" : "\n     * @return a collection of {@link RegisteredServicesCache.ServiceInfo} objects for all\n     * registered authenticators.\n     ",
    "links" : [ "RegisteredServicesCache.ServiceInfo" ]
  }, {
    "name" : "public void updateServices(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getBindInstantServiceAllowed(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the binding to service is allowed for instant apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBindInstantServiceAllowed(int userId, boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the binding to service is allowed or not for instant apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean inSystemImage(int callerUid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected List<ResolveInfo> queryIntentServices(int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void generateServicesMap(int[] changedUids, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Populate {@link UserServices#services} by scanning installed packages for\n     * given {@link UserHandle}.\n     * @param changedUids the array of uids that have been affected, as mentioned in the broadcast\n     *                    or null to assume that everything is affected.\n     * @param userId the user for whom to update the services map.\n     ",
    "links" : [ "#services", "android.os.UserHandle" ]
  }, {
    "name" : "protected void onServicesChangedLocked(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean containsUid(int[] changedUids, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the list of changed uids is null (wildcard) or the specified uid\n     * is contained in the list of changed uids.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean containsType(ArrayList<ServiceInfo<V>> serviceInfos, V type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean containsTypeAndUid(ArrayList<ServiceInfo<V>> serviceInfos, V type, int uid)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ServiceInfo<V> parseServiceInfo(ResolveInfo service) throws XmlPullParserException, IOException",
    "returnType" : "ServiceInfo<V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readPersistentServicesLocked(InputStream is) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Read all sync status back in to the initial engine state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void migrateIfNecessaryLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writePersistentServicesLocked(UserServices<V> user, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Writes services of a specified user to the file.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onUserRemoved(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected List<UserInfo> getUsers()",
    "returnType" : "List<UserInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected UserInfo getUser(int userId)",
    "returnType" : "UserInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AtomicFile createFileForUser(int userId)",
    "returnType" : "AtomicFile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected File getUserSystemDirectory(int userId)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected File getDataDirectory()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Map<V, Integer> getPersistentServices(int userId)",
    "returnType" : "Map<V, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract V parseServiceAttributes(Resources res, String packageName, AttributeSet attrs)",
    "returnType" : "V",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterReceivers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private UserServices<V> findOrCreateUserLocked(int userId)", "private UserServices<V> findOrCreateUserLocked(int userId, boolean loadFromFileIfNew)", "private void handlePackageEvent(Intent intent, int userId)", "public void invalidateCache(int userId)", "public void dump(FileDescriptor fd, PrintWriter fout, String[] args, int userId)", "public RegisteredServicesCacheListener<V> getListener()", "public void setListener(RegisteredServicesCacheListener<V> listener, Handler handler)", "private void notifyListener(final V type, final int userId, final boolean removed)", "public ServiceInfo<V> getServiceInfo(V type, int userId)", "public Collection<ServiceInfo<V>> getAllServices(int userId)", "public void updateServices(int userId)", "public boolean getBindInstantServiceAllowed(int userId)", "public void setBindInstantServiceAllowed(int userId, boolean allowed)", "protected boolean inSystemImage(int callerUid)", "protected List<ResolveInfo> queryIntentServices(int userId)", "private void generateServicesMap(int[] changedUids, int userId)", "protected void onServicesChangedLocked(int userId)", "private boolean containsUid(int[] changedUids, int uid)", "private boolean containsType(ArrayList<ServiceInfo<V>> serviceInfos, V type)", "private boolean containsTypeAndUid(ArrayList<ServiceInfo<V>> serviceInfos, V type, int uid)", "protected ServiceInfo<V> parseServiceInfo(ResolveInfo service) throws XmlPullParserException, IOException", "private void readPersistentServicesLocked(InputStream is) throws XmlPullParserException, IOException", "private void migrateIfNecessaryLocked()", "private void writePersistentServicesLocked(UserServices<V> user, int userId)", "protected void onUserRemoved(int userId)", "protected List<UserInfo> getUsers()", "protected UserInfo getUser(int userId)", "private AtomicFile createFileForUser(int userId)", "protected File getUserSystemDirectory(int userId)", "protected File getDataDirectory()", "protected Map<V, Integer> getPersistentServices(int userId)", "public abstract V parseServiceAttributes(Resources res, String packageName, AttributeSet attrs)", "public void unregisterReceivers()" ],
  "variableNames" : [ "TAG", "DEBUG", "REGISTERED_SERVICES_DIR", "mContext", "mInterfaceName", "mMetaDataName", "mAttributesName", "mSerializerAndParser", "mServicesLock", "mUserServices", "mListener", "mHandler", "mPackageReceiver", "mExternalReceiver", "mUserRemovedReceiver" ]
}