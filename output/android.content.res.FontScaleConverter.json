{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/FontScaleConverter.java",
  "packageName" : "android.content.res",
  "className" : "FontScaleConverter",
  "comment" : "\n * A converter for non-linear font scaling. Converts font sizes given in \"sp\" dimensions to a\n * \"dp\" dimension according to a non-linear curve.\n *\n * <p>This is meant to improve readability at larger font scales: larger fonts will scale up more\n * slowly than smaller fonts, so we don't get ridiculously huge fonts that don't fit on the screen.\n *\n * <p>The thinking here is that large fonts are already big enough to read, but we still want to\n * scale them slightly to preserve the visual hierarchy when compared to smaller fonts.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " float convertSpToDp(float sp)",
    "returnType" : "float",
    "comment" : "\n     * Converts a dimension in \"sp\" to \"dp\".\n     ",
    "links" : [ ]
  }, {
    "name" : " float convertDpToSp(float dp)",
    "returnType" : "float",
    "comment" : "\n     * Converts a dimension in \"dp\" back to \"sp\".\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isNonLinearFontScalingActive(float fontScale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if non-linear font scaling curves would be in effect for the given scale, false\n     * if the scaling would follow a linear curve or for no scaling.\n     *\n     * <p>Example usage: {@code\n     * isNonLinearFontScalingActive(getResources().getConfiguration().fontScale)}\n     ",
    "links" : [ ]
  }, {
    "name" : " static FontScaleConverter forScale(float fontScale)",
    "returnType" : "FontScaleConverter",
    "comment" : "\n     * Finds a matching FontScaleConverter for the given fontScale factor.\n     *\n     * Generally you shouldn't need this; you can use {@link\n     * android.util.TypedValue#applyDimension(int, float, DisplayMetrics)} directly and it will do\n     * the scaling conversion for you. Dimens and resources loaded from XML will also be\n     * automatically converted. But for UI frameworks or other situations where you need to do the\n     * conversion without an Android Context, you can use this method.\n     *\n     * @param fontScale the scale factor, usually from {@link Configuration#fontScale}.\n     *\n     * @return a converter for the given scale, or null if non-linear scaling should not be used.\n     ",
    "links" : [ "android.util.TypedValue#applyDimension(int", "android.content.res.Configuration#fontScale" ]
  } ],
  "methodNames" : [ " float convertSpToDp(float sp)", " float convertDpToSp(float dp)", " static boolean isNonLinearFontScalingActive(float fontScale)", " static FontScaleConverter forScale(float fontScale)" ],
  "variableNames" : [ ]
}