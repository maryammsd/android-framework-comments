{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/Uri.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : "\n     * Helper class for building or manipulating URI references. Not safe for\n     * concurrent use.\n     *\n     * <p>An absolute hierarchical URI reference follows the pattern:\n     * {@code <scheme>://<authority><absolute path>?<query>#<fragment>}\n     *\n     * <p>Relative URI references (which are always hierarchical) follow one\n     * of two patterns: {@code <relative or absolute path>?<query>#<fragment>}\n     * or {@code //<authority><absolute path>?<query>#<fragment>}\n     *\n     * <p>An opaque URI follows this pattern:\n     * {@code <scheme>:<opaque part>#<fragment>}\n     *\n     * <p>Use {@link Uri#buildUpon()} to obtain a builder representing an existing URI.\n     ",
  "links" : [ "android.net.Uri#buildUpon()" ],
  "variables" : [ {
    "name" : "scheme",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "opaquePart",
    "type" : "Part",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "authority",
    "type" : "Part",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "PathPart",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "query",
    "type" : "Part",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fragment",
    "type" : "Part",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder scheme(String scheme)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the scheme.\n         *\n         * @param scheme name or {@code null} if this is a relative Uri\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder opaquePart(Part opaquePart)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder opaquePart(String opaquePart)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes and sets the given opaque scheme-specific-part.\n         *\n         * @param opaquePart decoded opaque part\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder encodedOpaquePart(String opaquePart)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the previously encoded opaque scheme-specific-part.\n         *\n         * @param opaquePart encoded opaque part\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder authority(Part authority)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder authority(String authority)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes and sets the authority.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder encodedAuthority(String authority)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the previously encoded authority.\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder path(PathPart path)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder path(String path)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the path. Leaves '/' characters intact but encodes others as\n         * necessary.\n         *\n         * <p>If the path is not null and doesn't start with a '/', and if\n         * you specify a scheme and/or authority, the builder will prepend the\n         * given path with a '/'.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder encodedPath(String path)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the previously encoded path.\n         *\n         * <p>If the path is not null and doesn't start with a '/', and if\n         * you specify a scheme and/or authority, the builder will prepend the\n         * given path with a '/'.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder appendPath(String newSegment)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes the given segment and appends it to the path.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder appendEncodedPath(String newSegment)",
    "returnType" : "Builder",
    "comment" : "\n         * Appends the given segment to the path.\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder query(Part query)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder query(String query)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes and sets the query.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder encodedQuery(String query)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the previously encoded query.\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder fragment(Part fragment)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder fragment(String fragment)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes and sets the fragment.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder encodedFragment(String fragment)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the previously encoded fragment.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder appendQueryParameter(String key, String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Encodes the key and value and then appends the parameter to the\n         * query string.\n         *\n         * @param key which will be encoded\n         * @param value which will be encoded\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder clearQuery()",
    "returnType" : "Builder",
    "comment" : "\n         * Clears the the previously set query.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Uri build()",
    "returnType" : "Uri",
    "comment" : "\n         * Constructs a Uri with the current attributes.\n         *\n         * @throws UnsupportedOperationException if the URI is opaque and the\n         *  scheme is null\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasSchemeOrAuthority()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder scheme(String scheme)", " Builder opaquePart(Part opaquePart)", "public Builder opaquePart(String opaquePart)", "public Builder encodedOpaquePart(String opaquePart)", " Builder authority(Part authority)", "public Builder authority(String authority)", "public Builder encodedAuthority(String authority)", " Builder path(PathPart path)", "public Builder path(String path)", "public Builder encodedPath(String path)", "public Builder appendPath(String newSegment)", "public Builder appendEncodedPath(String newSegment)", " Builder query(Part query)", "public Builder query(String query)", "public Builder encodedQuery(String query)", " Builder fragment(Part fragment)", "public Builder fragment(String fragment)", "public Builder encodedFragment(String fragment)", "public Builder appendQueryParameter(String key, String value)", "public Builder clearQuery()", "public Uri build()", "private boolean hasSchemeOrAuthority()", "public String toString()" ],
  "variableNames" : [ "scheme", "opaquePart", "authority", "path", "query", "fragment" ]
}