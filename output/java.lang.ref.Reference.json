{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ref/Reference.java",
  "packageName" : "java.lang.ref",
  "className" : "Reference",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "disableIntrinsic",
    "type" : "boolean",
    "comment" : "\n     * Forces JNI path.\n     * If GC is not in progress (ie: not going through slow path), the referent\n     * can be quickly returned through intrinsic without passing through JNI.\n     * This flag forces the JNI path so that it can be tested and benchmarked.\n     ",
    "links" : [ ]
  }, {
    "name" : "slowPathEnabled",
    "type" : "boolean",
    "comment" : "\n     * Slow path flag for the reference processor.\n     * Used by the reference processor to determine whether or not the referent\n     * can be immediately returned. Because the referent might get swept during\n     * GC, the slow path, which passes through JNI, must be taken.\n     * After initialization, this is only accessed by native code. It is not\n     * used with the concurrent copying collector. It is enabled with mutators\n     * suspended, but disabled asynchronously.\n     ",
    "links" : [ ]
  }, {
    "name" : "referent",
    "type" : "T",
    "comment" : " volatile everywhere.",
    "links" : [ ]
  }, {
    "name" : "queue",
    "type" : "ReferenceQueue<? super T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "queueNext",
    "type" : "Reference",
    "comment" : "\n     * This field forms a singly-linked list of reference objects that have\n     * been enqueued. The queueNext field is non-null if and only if this\n     * reference has been enqueued. After this reference has been enqueued and\n     * before it has been removed from its queue, the queueNext field points\n     * to the next reference on the queue. The last reference on a queue\n     * points to itself. Once this reference has been removed from the\n     * reference queue, the queueNext field points to the\n     * ReferenceQueue.sQueueNextUnenqueued sentinel reference object for the\n     * rest of this reference's lifetime.\n     * <p>\n     * Access to the queueNext field is guarded by synchronization on a lock\n     * internal to 'queue'.\n     ",
    "links" : [ ]
  }, {
    "name" : "pendingNext",
    "type" : "Reference<?>",
    "comment" : "\n     * The pendingNext field is initially set by the GC. After the GC forms a\n     * complete circularly linked list, the list is handed off to the\n     * ReferenceQueueDaemon using the ReferenceQueue.class lock. The\n     * ReferenceQueueDaemon can then read the pendingNext fields without\n     * additional synchronization.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public T get()",
    "returnType" : "T",
    "comment" : "\n     * Returns this reference object's referent.  If this reference object has\n     * been cleared, either by the program or by the garbage collector, then\n     * this method returns <code>null</code>.\n     *\n     * @return   The object to which this reference refers, or\n     *           <code>null</code> if this reference object has been cleared\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native T getReferent()",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean refersTo(T obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if the referent of this reference object is {@code obj}.\n     * Using a {@code null} {@code obj} returns {@code true} if the\n     * reference object has been cleared. Prefer this to a comparison\n     * with the result of {@code get}.\n     *\n     * @param  obj the object to compare with this reference object's referent\n     * @return {@code true} if {@code obj} is the referent of this reference object\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native boolean refersTo0(Object o)",
    "returnType" : "boolean",
    "comment" : " Implementation of refersTo(). ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears this reference object.  Invoking this method will not cause this\n     * object to be enqueued.\n     *\n     * <p> This method is invoked only by Java code; when the garbage collector\n     * clears references it does so directly, without invoking this method.\n     ",
    "links" : [ ]
  }, {
    "name" : " native void clearReferent()",
    "returnType" : "void",
    "comment" : " the referent to null when it is safe to do so.",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnqueued()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this reference object is in its associated queue, if any.\n     * This method returns {@code true} only if all of the following conditions\n     * are met:\n     * <ul>\n     * <li>this reference object was registered with a queue when it was created; and\n     * <li>the garbage collector has added this reference object to the queue\n     *     or {@link #enqueue()} is called; and\n     * <li>this reference object is not yet removed from the queue.\n     * </ul>\n     * Otherwise, this method returns {@code false}.\n     * This method may return {@code false} if this reference object has been cleared\n     * but not enqueued due to the race condition.\n     *\n     * @deprecated\n     * This method was never implemented to test if a reference object has\n     * been cleared and enqueued as it was previously specified since 1.2.\n     * This method could be misused due to the inherent race condition\n     * or without an associated {@code ReferenceQueue}.\n     * An application relying on this method to release critical resources\n     * could cause serious performance issue.\n     * An application should use {@link ReferenceQueue} to reliably determine\n     * what reference objects that have been enqueued or\n     * {@code refersTo(null)} to determine if this reference\n     * object has been cleared.\n     *\n     * @return   {@code true} if and only if this reference object is\n     *           in its associated queue (if any).\n     ",
    "links" : [ "#enqueue()", "java.lang.ref.ReferenceQueue" ]
  }, {
    "name" : "public boolean enqueue()",
    "returnType" : "boolean",
    "comment" : "\n     * Adds this reference object to the queue with which it is registered,\n     * if any.\n     *\n     * <p> This method is invoked only by Java code; when the garbage collector\n     * enqueues references it does so directly, without invoking this method.\n     *\n     * @return   <code>true</code> if this reference object was successfully\n     *           enqueued; <code>false</code> if it was already enqueued or if\n     *           it was not registered with a queue when it was created\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Throws {@link CloneNotSupportedException}. A {@code Reference} cannot be\n     * meaningfully cloned. Construct a new {@code Reference} instead.\n     *\n     * @return never returns normally\n     * @throws  CloneNotSupportedException always\n     *\n     * @since 11\n     ",
    "links" : [ "CloneNotSupportedException" ]
  }, {
    "name" : "public static void reachabilityFence(Object ref)",
    "returnType" : "void",
    "comment" : " @DontInline",
    "links" : [ ]
  } ],
  "methodNames" : [ "public T get()", "private final native T getReferent()", "public final boolean refersTo(T obj)", "private final native boolean refersTo0(Object o)", "public void clear()", " native void clearReferent()", "public boolean isEnqueued()", "public boolean enqueue()", "protected Object clone() throws CloneNotSupportedException", "public static void reachabilityFence(Object ref)" ],
  "variableNames" : [ "disableIntrinsic", "slowPathEnabled", "referent", "queue", "queueNext", "pendingNext" ]
}