{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/sqlite/SQLiteTokenizer.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteTokenizer",
  "comment" : "\n * SQL Tokenizer specialized to extract tokens from SQL (snippets).\n * <p>\n * Based on sqlite3GetToken() in tokenzie.c in SQLite.\n * <p>\n * Source for v3.8.6 (which android uses): http://www.sqlite.org/src/artifact/ae45399d6252b4d7\n * (Latest source as of now: http://www.sqlite.org/src/artifact/78c8085bc7af1922)\n * <p>\n * Also draft spec: http://www.sqlite.org/draft/tokenreq.html\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "OPTION_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPTION_TOKEN_ONLY",
    "type" : "int",
    "comment" : "\n     * Require that SQL contains only tokens; any comments or values will result\n     * in an exception.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isAlpha(char ch)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isNum(char ch)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAlNum(char ch)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAnyOf(char ch, String set)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IllegalArgumentException genException(String message, String sql)",
    "returnType" : "IllegalArgumentException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char peek(String s, int index)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<String> tokenize(@Nullable String sql, int options)",
    "returnType" : "List<String>",
    "comment" : "\n     * Tokenize the given SQL, returning the list of each encountered token.\n     *\n     * @throws IllegalArgumentException if invalid SQL is encountered.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void tokenize(@Nullable String sql, int options, Consumer<String> checker)",
    "returnType" : "void",
    "comment" : "\n     * Tokenize the given SQL, sending each encountered token to the given\n     * {@link Consumer}.\n     *\n     * @throws IllegalArgumentException if invalid SQL is encountered.\n     ",
    "links" : [ "java.util.function.Consumer" ]
  }, {
    "name" : "public static boolean isKeyword(@NonNull String token)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given token is a\n     * <a href=\"https://www.sqlite.org/lang_keywords.html\">SQLite reserved\n     * keyword</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFunction(@NonNull String token)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given token is a\n     * <a href=\"https://www.sqlite.org/lang_corefunc.html\">SQLite reserved\n     * function</a>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isType(@NonNull String token)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if given token is a\n     * <a href=\"https://www.sqlite.org/datatype3.html\">SQLite reserved type</a>.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "OPTION_NONE", "OPTION_TOKEN_ONLY" ],
  "methodNames" : [ "private static boolean isAlpha(char ch)", "private static boolean isNum(char ch)", "private static boolean isAlNum(char ch)", "private static boolean isAnyOf(char ch, String set)", "private static IllegalArgumentException genException(String message, String sql)", "private static char peek(String s, int index)", "public static List<String> tokenize(@Nullable String sql, int options)", "public static void tokenize(@Nullable String sql, int options, Consumer<String> checker)", "public static boolean isKeyword(@NonNull String token)", "public static boolean isFunction(@NonNull String token)", "public static boolean isType(@NonNull String token)" ]
}