{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GnssSingleSatCorrection.java",
  "packageName" : "android.location",
  "className" : "GnssSingleSatCorrection",
  "comment" : "\n * A container with measurement corrections for a single visible satellite\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "HAS_PROB_SAT_IS_LOS_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mSingleSatCorrectionFlags} indicating the presence of {@link\n     * #mProbSatIsLos}.\n     *\n     * @hide\n     ",
    "links" : [ "#mSingleSatCorrectionFlags" ]
  }, {
    "name" : "HAS_EXCESS_PATH_LENGTH_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mSingleSatCorrectionFlags} indicating the presence of {@link\n     * #mExcessPathLengthMeters}.\n     *\n     * @hide\n     ",
    "links" : [ "#mSingleSatCorrectionFlags" ]
  }, {
    "name" : "HAS_EXCESS_PATH_LENGTH_UNC_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mSingleSatCorrectionFlags} indicating the presence of {@link\n     * #mExcessPathLengthUncertaintyMeters}.\n     *\n     * @hide\n     ",
    "links" : [ "#mSingleSatCorrectionFlags" ]
  }, {
    "name" : "HAS_REFLECTING_PLANE_MASK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mSingleSatCorrectionFlags} indicating the presence of {@link\n     * #mReflectingPlane}.\n     *\n     * @hide\n     ",
    "links" : [ "#mSingleSatCorrectionFlags" ]
  }, {
    "name" : "mSingleSatCorrectionFlags",
    "type" : "int",
    "comment" : " A bitmask of fields present in this object (see HAS_* constants defined above) ",
    "links" : [ ]
  }, {
    "name" : "mConstellationType",
    "type" : "int",
    "comment" : " Defines the constellation of the given satellite as defined in {@link GnssStatus}. ",
    "links" : [ "GnssStatus" ]
  }, {
    "name" : "mSatId",
    "type" : "int",
    "comment" : "\n     * Satellite vehicle ID number\n     *\n     * <p>Interpretation depends on {@link GnssStatus#getSvid(int)}.\n     ",
    "links" : [ "GnssStatus#getSvid" ]
  }, {
    "name" : "mCarrierFrequencyHz",
    "type" : "float",
    "comment" : "\n     * Carrier frequency of the signal to be corrected, for example it can be the GPS center\n     * frequency for L1 = 1,575,420,000 Hz, varying GLO channels, etc.\n     *\n     * <p>For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two correction\n     * objects will be reported for this same satellite, in one of the correction objects, all the\n     * values related to L1 will be filled, and in the other all of the values related to L5 will be\n     * filled.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProbSatIsLos",
    "type" : "float",
    "comment" : "\n     * The probability that the satellite is estimated to be in Line-of-Sight condition at the given\n     * location.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExcessPathLengthMeters",
    "type" : "float",
    "comment" : "\n     * Excess path length to be subtracted from pseudorange before using it in calculating location.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExcessPathLengthUncertaintyMeters",
    "type" : "float",
    "comment" : " Error estimate (1-sigma) for the Excess path length estimate ",
    "links" : [ ]
  }, {
    "name" : "mReflectingPlane",
    "type" : "GnssReflectingPlane",
    "comment" : "\n     * Defines the reflecting plane location and azimuth information\n     *\n     * <p>The flag HAS_REFLECTING_PLANE will be used to set this value to invalid if the satellite\n     * signal goes through multiple reflections or if reflection plane serving is not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssSingleSatCorrection>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSingleSatelliteCorrectionFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets a bitmask of fields present in this object\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConstellationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the constellation type.\n     *\n     * <p>The return value is one of those constants with {@code CONSTELLATION_} prefix in {@link\n     * GnssStatus}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSatelliteId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the satellite ID.\n     *\n     * <p>Interpretation depends on {@link #getConstellationType()}. See {@link\n     * GnssStatus#getSvid(int)}.\n     ",
    "links" : [ "#getConstellationType" ]
  }, {
    "name" : "public float getCarrierFrequencyHz()",
    "returnType" : "float",
    "comment" : "\n     * Gets the carrier frequency of the tracked signal.\n     *\n     * <p>For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz,\n     * L5 = 1176.45 MHz, varying GLO channels, etc.\n     *\n     * <p>For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two correction\n     * objects will be reported for this same satellite, in one of the correction objects, all the\n     * values related to L1 will be filled, and in the other all of the values related to L5 will be\n     * filled.\n     *\n     * @return the carrier frequency of the signal tracked in Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getProbabilityLineOfSight()",
    "returnType" : "float",
    "comment" : "\n     * Returns the probability that the satellite is in line-of-sight condition at the given\n     * location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getExcessPathLengthMeters()",
    "returnType" : "float",
    "comment" : "\n     * Returns the Excess path length to be subtracted from pseudorange before using it in\n     * calculating location.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getExcessPathLengthUncertaintyMeters()",
    "returnType" : "float",
    "comment" : " Returns the error estimate (1-sigma) for the Excess path length estimate ",
    "links" : [ ]
  }, {
    "name" : "public GnssReflectingPlane getReflectingPlane()",
    "returnType" : "GnssReflectingPlane",
    "comment" : "\n     * Returns the reflecting plane characteristics at which the signal has bounced\n     *\n     * <p>The flag HAS_REFLECTING_PLANE will be used to set this value to invalid if the satellite\n     * signal goes through multiple reflections or if reflection plane serving is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasValidSatelliteLineOfSight()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getProbabilityLineOfSight()} is valid. ",
    "links" : [ "#getProbabilityLineOfSight" ]
  }, {
    "name" : "public boolean hasExcessPathLength()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthMeters" ]
  }, {
    "name" : "public boolean hasExcessPathLengthUncertainty()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthUncertaintyMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthUncertaintyMeters" ]
  }, {
    "name" : "public boolean hasReflectingPlane()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getReflectingPlane()} is valid. ",
    "links" : [ "#getReflectingPlane" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "HAS_PROB_SAT_IS_LOS_MASK", "HAS_EXCESS_PATH_LENGTH_MASK", "HAS_EXCESS_PATH_LENGTH_UNC_MASK", "HAS_REFLECTING_PLANE_MASK", "mSingleSatCorrectionFlags", "mConstellationType", "mSatId", "mCarrierFrequencyHz", "mProbSatIsLos", "mExcessPathLengthMeters", "mExcessPathLengthUncertaintyMeters", "mReflectingPlane", "CREATOR" ],
  "methodNames" : [ "public int getSingleSatelliteCorrectionFlags()", "public int getConstellationType()", "public int getSatelliteId()", "public float getCarrierFrequencyHz()", "public float getProbabilityLineOfSight()", "public float getExcessPathLengthMeters()", "public float getExcessPathLengthUncertaintyMeters()", "public GnssReflectingPlane getReflectingPlane()", "public boolean hasValidSatelliteLineOfSight()", "public boolean hasExcessPathLength()", "public boolean hasExcessPathLengthUncertainty()", "public boolean hasReflectingPlane()", "public int describeContents()", "public String toString()", "public void writeToParcel(@NonNull Parcel parcel, int flags)" ]
}