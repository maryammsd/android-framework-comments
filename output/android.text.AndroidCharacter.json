{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/AndroidCharacter.java",
  "packageName" : "android.text",
  "className" : "AndroidCharacter",
  "comment" : "\n * AndroidCharacter exposes some character properties that used to be not\n * easily accessed from java.lang.Character, but are now available in ICU.\n * @deprecated Use various methods from {@link android.icu.lang.UCharacter}, instead.\n ",
  "links" : [ "android.icu.lang.UCharacter" ],
  "variables" : [ {
    "name" : "EAST_ASIAN_WIDTH_NEUTRAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH_AMBIGUOUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH_HALF_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH_FULL_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH_NARROW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EAST_ASIAN_WIDTH_WIDE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static native void getDirectionalities(char[] src, byte[] dest, int count)",
    "returnType" : "void",
    "comment" : "\n     * Fill in the first <code>count</code> bytes of <code>dest</code> with the\n     * directionalities from the first <code>count</code> chars of <code>src</code>.\n     * This is just like Character.getDirectionality() except it is a\n     * batch operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native int getEastAsianWidth(char input)",
    "returnType" : "int",
    "comment" : "\n     * Calculate the East Asian Width of a character according to\n     * <a href=\"http://unicode.org/reports/tr11/\">Unicode TR#11</a>. The return\n     * will be one of {@link #EAST_ASIAN_WIDTH_NEUTRAL},\n     * {@link #EAST_ASIAN_WIDTH_AMBIGUOUS}, {@link #EAST_ASIAN_WIDTH_HALF_WIDTH},\n     * {@link #EAST_ASIAN_WIDTH_FULL_WIDTH}, {@link #EAST_ASIAN_WIDTH_NARROW},\n     * or {@link #EAST_ASIAN_WIDTH_WIDE}.\n     * \n     * @param input the character to measure\n     * @return the East Asian Width for input\n     ",
    "links" : [ "#EAST_ASIAN_WIDTH_AMBIGUOUS", "#EAST_ASIAN_WIDTH_HALF_WIDTH", "#EAST_ASIAN_WIDTH_FULL_WIDTH", "#EAST_ASIAN_WIDTH_WIDE", "#EAST_ASIAN_WIDTH_NARROW", "#EAST_ASIAN_WIDTH_NEUTRAL" ]
  }, {
    "name" : "public static native void getEastAsianWidths(char[] src, int start, int count, byte[] dest)",
    "returnType" : "void",
    "comment" : "\n     * Fill the first <code>count</code> bytes of <code>dest</code> with the\n     * East Asian Width from <code>count</code> chars of <code>src</code>\n     * starting at <code>start</code>. East Asian Width is calculated based on\n     * <a href=\"http://unicode.org/reports/tr11/\">Unicode TR#11</a>. Each entry\n     * in <code>dest</code> will be one of {@link #EAST_ASIAN_WIDTH_NEUTRAL},\n     * {@link #EAST_ASIAN_WIDTH_AMBIGUOUS}, {@link #EAST_ASIAN_WIDTH_HALF_WIDTH},\n     * {@link #EAST_ASIAN_WIDTH_FULL_WIDTH}, {@link #EAST_ASIAN_WIDTH_NARROW},\n     * or {@link #EAST_ASIAN_WIDTH_WIDE}.\n     * \n     * @param src character array of input to measure\n     * @param start first character in array to measure\n     * @param count maximum number of characters to measure\n     * @param dest byte array of results for each character in src\n     ",
    "links" : [ "#EAST_ASIAN_WIDTH_AMBIGUOUS", "#EAST_ASIAN_WIDTH_HALF_WIDTH", "#EAST_ASIAN_WIDTH_FULL_WIDTH", "#EAST_ASIAN_WIDTH_WIDE", "#EAST_ASIAN_WIDTH_NARROW", "#EAST_ASIAN_WIDTH_NEUTRAL" ]
  }, {
    "name" : "public static native boolean mirror(char[] text, int start, int count)",
    "returnType" : "boolean",
    "comment" : "\n     * Replace the specified slice of <code>text</code> with the chars'\n     * right-to-left mirrors (if any), returning true if any\n     * replacements were made.\n     *\n     * @param text array of characters to apply mirror operation\n     * @param start first character in array to mirror\n     * @param count maximum number of characters to mirror\n     * @return true if replacements were made\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native char getMirror(char ch)",
    "returnType" : "char",
    "comment" : "\n     * Return the right-to-left mirror (or the original char if none)\n     * of the specified char.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static native void getDirectionalities(char[] src, byte[] dest, int count)", "public static native int getEastAsianWidth(char input)", "public static native void getEastAsianWidths(char[] src, int start, int count, byte[] dest)", "public static native boolean mirror(char[] text, int start, int count)", "public static native char getMirror(char ch)" ],
  "variableNames" : [ "EAST_ASIAN_WIDTH_NEUTRAL", "EAST_ASIAN_WIDTH_AMBIGUOUS", "EAST_ASIAN_WIDTH_HALF_WIDTH", "EAST_ASIAN_WIDTH_FULL_WIDTH", "EAST_ASIAN_WIDTH_NARROW", "EAST_ASIAN_WIDTH_WIDE" ]
}