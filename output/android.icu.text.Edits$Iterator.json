{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Edits.java",
  "packageName" : "android.icu.text",
  "className" : "Iterator",
  "comment" : "\n     * Access to the list of edits.\n     * <p>\n     * At any moment in time, an instance of this class points to a single edit: a \"window\" into a span\n     * of the source string and the corresponding span of the destination string. The source string span\n     * starts at {@link #sourceIndex()} and runs for {@link #oldLength()} chars; the destination string\n     * span starts at {@link #destinationIndex()} and runs for {@link #newLength()} chars.\n     * <p>\n     * The iterator can be moved between edits using the {@link #next()}, {@link #findSourceIndex(int)},\n     * and {@link #findDestinationIndex(int)} methods. Calling any of these methods mutates the iterator\n     * to make it point to the corresponding edit.\n     * <p>\n     * For more information, see the documentation for {@link Edits}.\n     * <p>\n     * Note: Although this class is called \"Iterator\", it does not implement {@link java.util.Iterator}.\n     *\n     * @see #getCoarseIterator\n     * @see #getFineIterator\n     ",
  "links" : [ "#next()", "#oldLength()", "android.icu.text.Edits", "java.util.Iterator", "#destinationIndex()", "#findSourceIndex(int)", "#newLength()", "#findDestinationIndex(int)", "#sourceIndex()" ],
  "variables" : [ {
    "name" : "array",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "index",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "remaining",
    "type" : "int",
    "comment" : "\n         * 0 if we are not within compressed equal-length changes.\n         * Otherwise the number of remaining changes, including the current one.\n         ",
    "links" : [ ]
  }, {
    "name" : "onlyChanges_",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "coarse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dir",
    "type" : "int",
    "comment" : " iteration direction: back(<0), initial(0), forward(>0)",
    "links" : [ ]
  }, {
    "name" : "changed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "oldLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "newLength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "srcIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "replIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "destIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int readLength(int head)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateNextIndexes()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePreviousIndexes()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean noNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean next()",
    "returnType" : "boolean",
    "comment" : "\n         * Advances the iterator to the next edit.\n         * @return true if there is another edit\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean next(boolean onlyChanges)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean previous()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean findSourceIndex(int i)",
    "returnType" : "boolean",
    "comment" : "\n         * Moves the iterator to the edit that contains the source index.\n         * The source index may be found in a no-change edit\n         * even if normal iteration would skip no-change edits.\n         * Normal iteration can continue from a found edit.\n         *\n         * <p>The iterator state before this search logically does not matter.\n         * (It may affect the performance of the search.)\n         *\n         * <p>The iterator state after this search is undefined\n         * if the source index is out of bounds for the source string.\n         *\n         * @param i source index\n         * @return true if the edit for the source index was found\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean findDestinationIndex(int i)",
    "returnType" : "boolean",
    "comment" : "\n         * Moves the iterator to the edit that contains the destination index.\n         * The destination index may be found in a no-change edit\n         * even if normal iteration would skip no-change edits.\n         * Normal iteration can continue from a found edit.\n         *\n         * <p>The iterator state before this search logically does not matter.\n         * (It may affect the performance of the search.)\n         *\n         * <p>The iterator state after this search is undefined\n         * if the source index is out of bounds for the source string.\n         *\n         * @param i destination index\n         * @return true if the edit for the destination index was found\n         ",
    "links" : [ ]
  }, {
    "name" : "private int findIndex(int i, boolean findSource)",
    "returnType" : "int",
    "comment" : " @return -1: error or i<0; 0: found; 1: i>=string length ",
    "links" : [ ]
  }, {
    "name" : "public int destinationIndexFromSourceIndex(int i)",
    "returnType" : "int",
    "comment" : "\n         * Computes the destination index corresponding to the given source index.\n         * If the source index is inside a change edit (not at its start),\n         * then the destination index at the end of that edit is returned,\n         * since there is no information about index mapping inside a change edit.\n         *\n         * <p>(This means that indexes to the start and middle of an edit,\n         * for example around a grapheme cluster, are mapped to indexes\n         * encompassing the entire edit.\n         * The alternative, mapping an interior index to the start,\n         * would map such an interval to an empty one.)\n         *\n         * <p>This operation will usually but not always modify this object.\n         * The iterator state after this search is undefined.\n         *\n         * @param i source index\n         * @return destination index; undefined if i is not 0..string length\n         ",
    "links" : [ ]
  }, {
    "name" : "public int sourceIndexFromDestinationIndex(int i)",
    "returnType" : "int",
    "comment" : "\n         * Computes the source index corresponding to the given destination index.\n         * If the destination index is inside a change edit (not at its start),\n         * then the source index at the end of that edit is returned,\n         * since there is no information about index mapping inside a change edit.\n         *\n         * <p>(This means that indexes to the start and middle of an edit,\n         * for example around a grapheme cluster, are mapped to indexes\n         * encompassing the entire edit.\n         * The alternative, mapping an interior index to the start,\n         * would map such an interval to an empty one.)\n         *\n         * <p>This operation will usually but not always modify this object.\n         * The iterator state after this search is undefined.\n         *\n         * @param i destination index\n         * @return source index; undefined if i is not 0..string length\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChange()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the edit currently represented by the iterator is a change edit.\n         *\n         * @return true if this edit replaces oldLength() units with newLength() different ones.\n         *         false if oldLength units remain unchanged.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int oldLength()",
    "returnType" : "int",
    "comment" : "\n         * The length of the current span in the source string, which starts at {@link #sourceIndex}.\n         *\n         * @return the number of units in the source string which are replaced or remain unchanged.\n         ",
    "links" : [ "#sourceIndex" ]
  }, {
    "name" : "public int newLength()",
    "returnType" : "int",
    "comment" : "\n         * The length of the current span in the destination string, which starts at\n         * {@link #destinationIndex}, or in the replacement string, which starts at\n         * {@link #replacementIndex}.\n         *\n         * @return the number of units in the destination string, if hasChange() is true. Same as\n         *         oldLength if hasChange() is false.\n         ",
    "links" : [ "#replacementIndex", "#destinationIndex" ]
  }, {
    "name" : "public int sourceIndex()",
    "returnType" : "int",
    "comment" : "\n         * The start index of the current span in the source string; the span has length\n         * {@link #oldLength}.\n         *\n         * @return the current index into the source string\n         ",
    "links" : [ "#oldLength" ]
  }, {
    "name" : "public int replacementIndex()",
    "returnType" : "int",
    "comment" : "\n         * The start index of the current span in the replacement string; the span has length\n         * {@link #newLength}. Well-defined only if the current edit is a change edit.\n         * <p>\n         * The <em>replacement string</em> is the concatenation of all substrings of the destination\n         * string corresponding to change edits.\n         * <p>\n         * This method is intended to be used together with operations that write only replacement\n         * characters (e.g., {@link CaseMap#omitUnchangedText()}). The source string can then be modified\n         * in-place.\n         *\n         * @return the current index into the replacement-characters-only string, not counting unchanged\n         *         spans\n         ",
    "links" : [ "#newLength", "android.icu.text.CaseMap#omitUnchangedText()" ]
  }, {
    "name" : "public int destinationIndex()",
    "returnType" : "int",
    "comment" : "\n         * The start index of the current span in the destination string; the span has length\n         * {@link #newLength}.\n         *\n         * @return the current index into the full destination string\n         ",
    "links" : [ "#newLength" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n         * A string representation of the current edit represented by the iterator for debugging. You\n         * should not depend on the contents of the return string; it may change over time.\n         * @return a string representation of the object.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int readLength(int head)", "private void updateNextIndexes()", "private void updatePreviousIndexes()", "private boolean noNext()", "public boolean next()", "private boolean next(boolean onlyChanges)", "private boolean previous()", "public boolean findSourceIndex(int i)", "public boolean findDestinationIndex(int i)", "private int findIndex(int i, boolean findSource)", "public int destinationIndexFromSourceIndex(int i)", "public int sourceIndexFromDestinationIndex(int i)", "public boolean hasChange()", "public int oldLength()", "public int newLength()", "public int sourceIndex()", "public int replacementIndex()", "public int destinationIndex()", "public String toString()" ],
  "variableNames" : [ "array", "index", "length", "remaining", "onlyChanges_", "coarse", "dir", "changed", "oldLength_", "newLength_", "srcIndex", "replIndex", "destIndex" ]
}