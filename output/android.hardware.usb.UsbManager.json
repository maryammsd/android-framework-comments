{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/usb/UsbManager.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbManager",
  "comment" : "\n * This class allows you to access the state of USB and communicate with USB devices.\n * Currently only host mode is supported in the public API.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about communicating with USB hardware, read the\n * <a href=\"{@docRoot}guide/topics/connectivity/usb/index.html\">USB developer guide</a>.</p>\n * </div>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_USB_STATE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A sticky broadcast for USB state change events when in device mode.\n     *\n     * This is a sticky broadcast for clients that includes USB connected/disconnected state,\n     * <ul>\n     * <li> {@link #USB_CONNECTED} boolean indicating whether USB is connected or disconnected.\n     * <li> {@link #USB_HOST_CONNECTED} boolean indicating whether USB is connected or\n     *     disconnected as host.\n     * <li> {@link #USB_CONFIGURED} boolean indicating whether USB is configured.\n     * currently zero if not configured, one for configured.\n     * <li> {@link #USB_FUNCTION_ADB} boolean extra indicating whether the\n     * adb function is enabled\n     * <li> {@link #USB_FUNCTION_RNDIS} boolean extra indicating whether the\n     * RNDIS ethernet function is enabled\n     * <li> {@link #USB_FUNCTION_MTP} boolean extra indicating whether the\n     * MTP function is enabled\n     * <li> {@link #USB_FUNCTION_PTP} boolean extra indicating whether the\n     * PTP function is enabled\n     * <li> {@link #USB_FUNCTION_ACCESSORY} boolean extra indicating whether the\n     * accessory function is enabled\n     * <li> {@link #USB_FUNCTION_AUDIO_SOURCE} boolean extra indicating whether the\n     * audio source function is enabled\n     * <li> {@link #USB_FUNCTION_MIDI} boolean extra indicating whether the\n     * MIDI function is enabled\n     * <li> {@link #USB_FUNCTION_UVC} boolean extra indicating whether the\n     * UVC function is enabled\n     * </ul>\n     * If the sticky intent has not been found, that indicates USB is disconnected,\n     * USB is not configured, MTP function is enabled, and all the other functions are disabled.\n     *\n     * @hide\n     ",
    "links" : [ "#USB_FUNCTION_ADB", "#USB_FUNCTION_RNDIS", "#USB_FUNCTION_MIDI", "#USB_FUNCTION_MTP", "#USB_FUNCTION_PTP", "#USB_FUNCTION_ACCESSORY", "#USB_HOST_CONNECTED", "#USB_FUNCTION_UVC", "#USB_FUNCTION_AUDIO_SOURCE", "#USB_CONNECTED", "#USB_CONFIGURED" ]
  }, {
    "name" : "ACTION_USB_PORT_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A broadcast for USB port changes.\n     *\n     * This intent is sent when a USB port is added, removed, or changes state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_USB_PORT_COMPLIANCE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: A broadcast for USB compliance warning changes.\n     *\n     * This intent is sent when a port partner's\n     * (USB power source/cable/accessory) compliance warnings change state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_USB_DEVICE_ATTACHED",
    "type" : "String",
    "comment" : "\n     * Activity intent sent when user attaches a USB device.\n     *\n     * This intent is sent when a USB device is attached to the USB bus when in host mode.\n     * <ul>\n     * <li> {@link #EXTRA_DEVICE} containing the {@link android.hardware.usb.UsbDevice}\n     * for the attached device\n     * </ul>\n     ",
    "links" : [ "#EXTRA_DEVICE", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "ACTION_USB_DEVICE_DETACHED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A broadcast for USB device detached event.\n     *\n     * This intent is sent when a USB device is detached from the USB bus when in host mode.\n     * <ul>\n     * <li> {@link #EXTRA_DEVICE} containing the {@link android.hardware.usb.UsbDevice}\n     * for the detached device\n     * </ul>\n     ",
    "links" : [ "#EXTRA_DEVICE", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "ACTION_USB_ACCESSORY_ATTACHED",
    "type" : "String",
    "comment" : "\n     * Activity intent sent when user attaches a USB accessory.\n     *\n     * <ul>\n     * <li> {@link #EXTRA_ACCESSORY} containing the {@link android.hardware.usb.UsbAccessory}\n     * for the attached accessory\n     * </ul>\n     ",
    "links" : [ "#EXTRA_ACCESSORY", "android.hardware.usb.UsbAccessory" ]
  }, {
    "name" : "ACTION_USB_ACCESSORY_DETACHED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A broadcast for USB accessory detached event.\n     *\n     * This intent is sent when a USB accessory is detached.\n     * <ul>\n     * <li> {@link #EXTRA_ACCESSORY} containing the {@link UsbAccessory}\n     * for the attached accessory that was detached\n     * </ul>\n     ",
    "links" : [ "#EXTRA_ACCESSORY", "android.hardware.usb.UsbAccessory" ]
  }, {
    "name" : "ACTION_USB_ACCESSORY_HANDSHAKE",
    "type" : "String",
    "comment" : "\n     * Broadcast Action:  A broadcast for USB accessory handshaking information delivery\n     *\n     * This intent is sent when a USB accessory connect attempt\n     *\n     * <p>For more information about communicating with USB accessory handshake, refer to\n     * <a href=\"https://source.android.com/devices/accessories/aoa\">AOA</a> developer guide.</p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CONNECTED",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether USB is connected or disconnected.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_HOST_CONNECTED",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether USB is connected or disconnected as host.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_CONFIGURED",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether USB is configured.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_DATA_UNLOCKED",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether confidential user data, such as photos, should be\n     * made available on the USB connection. This variable will only be set when the user\n     * has explicitly asked for this data to be unlocked.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_NONE",
    "type" : "String",
    "comment" : "\n     * A placeholder indicating that no USB function is being specified.\n     * Used for compatibility with old init scripts to indicate no functions vs. charging function.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_FUNCTION_ADB",
    "type" : "String",
    "comment" : "\n     * Name of the adb USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_RNDIS",
    "type" : "String",
    "comment" : "\n     * Name of the RNDIS ethernet USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_MTP",
    "type" : "String",
    "comment" : "\n     * Name of the MTP USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_PTP",
    "type" : "String",
    "comment" : "\n     * Name of the PTP USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_AUDIO_SOURCE",
    "type" : "String",
    "comment" : "\n     * Name of the audio source USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_MIDI",
    "type" : "String",
    "comment" : "\n     * Name of the MIDI USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_ACCESSORY",
    "type" : "String",
    "comment" : "\n     * Name of the Accessory USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_NCM",
    "type" : "String",
    "comment" : "\n     * Name of the NCM USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "USB_FUNCTION_UVC",
    "type" : "String",
    "comment" : "\n     * Name of the UVC USB function.\n     * Used in extras for the {@link #ACTION_USB_STATE} broadcast\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_STATE" ]
  }, {
    "name" : "GADGET_HAL_UNKNOWN",
    "type" : "String",
    "comment" : "\n     * Name of Gadget Hal Not Present;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_VERSION_1_0",
    "type" : "String",
    "comment" : "\n     * Name of the USB Gadget Hal Version v1.0;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_VERSION_1_1",
    "type" : "String",
    "comment" : "\n     * Name of the USB Gadget Hal Version v1.1;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_VERSION_1_2",
    "type" : "String",
    "comment" : "\n     * Name of the USB Gadget Hal Version v1.2;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_VERSION_2_0",
    "type" : "String",
    "comment" : "\n     * Name of the USB Gadget Hal Version v2.0;\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PORT",
    "type" : "String",
    "comment" : "\n     * Name of extra for {@link #ACTION_USB_PORT_CHANGED}\n     * containing the {@link UsbPort} object for the port.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort", "#ACTION_USB_PORT_CHANGED" ]
  }, {
    "name" : "EXTRA_PORT_STATUS",
    "type" : "String",
    "comment" : "\n     * Name of extra for {@link #ACTION_USB_PORT_CHANGED}\n     * containing the {@link UsbPortStatus} object for the port, or null if the port\n     * was removed.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_PORT_CHANGED", "android.hardware.usb.UsbPortStatus" ]
  }, {
    "name" : "EXTRA_DEVICE",
    "type" : "String",
    "comment" : "\n     * Name of extra for {@link #ACTION_USB_DEVICE_ATTACHED} and\n     * {@link #ACTION_USB_DEVICE_DETACHED} broadcasts\n     * containing the {@link UsbDevice} object for the device.\n     ",
    "links" : [ "#ACTION_USB_DEVICE_DETACHED", "#ACTION_USB_DEVICE_ATTACHED", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "EXTRA_ACCESSORY",
    "type" : "String",
    "comment" : "\n     * Name of extra for {@link #ACTION_USB_ACCESSORY_ATTACHED} and\n     * {@link #ACTION_USB_ACCESSORY_DETACHED} broadcasts\n     * containing the {@link UsbAccessory} object for the accessory.\n     ",
    "links" : [ "#ACTION_USB_ACCESSORY_DETACHED", "android.hardware.usb.UsbAccessory", "#ACTION_USB_ACCESSORY_ATTACHED" ]
  }, {
    "name" : "EXTRA_ACCESSORY_UEVENT_TIME",
    "type" : "String",
    "comment" : "\n     * A long extra indicating ms from boot to get get_protocol UEvent\n     * This is obtained with SystemClock.elapsedRealtime()\n     * Used in extras for {@link #ACTION_USB_ACCESSORY_HANDSHAKE} broadcasts.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_ACCESSORY_HANDSHAKE" ]
  }, {
    "name" : "EXTRA_ACCESSORY_STRING_COUNT",
    "type" : "String",
    "comment" : "\n     * An integer extra indicating numbers of send string during handshake\n     * Used in extras for {@link #ACTION_USB_ACCESSORY_HANDSHAKE} broadcasts\n     *\n     * <p>For more information about control request with identifying string information\n     * between communicating with USB accessory handshake, refer to\n     * <a href=\"https://source.android.com/devices/accessories/aoa\">AOA</a> developer guide.</p>\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_ACCESSORY_HANDSHAKE" ]
  }, {
    "name" : "EXTRA_ACCESSORY_START",
    "type" : "String",
    "comment" : "\n     * Boolean extra indicating whether got start accessory or not\n     * Used in extras for {@link #ACTION_USB_ACCESSORY_HANDSHAKE} broadcasts.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_ACCESSORY_HANDSHAKE" ]
  }, {
    "name" : "EXTRA_ACCESSORY_HANDSHAKE_END",
    "type" : "String",
    "comment" : "\n\n     * A long extra indicating the timestamp just before\n     * sending {@link #ACTION_USB_ACCESSORY_HANDSHAKE}.\n     * Used in extras for {@link #ACTION_USB_ACCESSORY_HANDSHAKE} broadcasts.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_USB_ACCESSORY_HANDSHAKE" ]
  }, {
    "name" : "EXTRA_PERMISSION_GRANTED",
    "type" : "String",
    "comment" : "\n     * Name of extra added to the {@link android.app.PendingIntent}\n     * passed into {@link #requestPermission(UsbDevice, PendingIntent)}\n     * or {@link #requestPermission(UsbAccessory, PendingIntent)}\n     * containing a boolean value indicating whether the user granted permission or not.\n     ",
    "links" : [ "#requestPermission(UsbAccessory", "#requestPermission(UsbDevice", "android.app.PendingIntent" ]
  }, {
    "name" : "EXTRA_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Name of extra added to start systemui.usb.UsbPermissionActivity\n     * containing package name of the app which requests USB permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CAN_BE_DEFAULT",
    "type" : "String",
    "comment" : "\n     * Name of extra added to start systemui.usb.UsbPermissionActivity\n     * containing the whether the app which requests USB permission can be set as default handler\n     * for USB device attach event or USB accessory attach event or not.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The Value for USB gadget hal is not presented.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_V1_0",
    "type" : "int",
    "comment" : "\n     * Value for Gadget Hal Version v1.0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_V1_1",
    "type" : "int",
    "comment" : "\n     * Value for Gadget Hal Version v1.1.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_V1_2",
    "type" : "int",
    "comment" : "\n     * Value for Gadget Hal Version v1.2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "GADGET_HAL_V2_0",
    "type" : "int",
    "comment" : "\n     * Value for Gadget Hal Version v2.0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Value for USB_STATE is not configured.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_LOW_SPEED",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of Low Speed in Mbps (real value is 1.5Mbps).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_FULL_SPEED",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of Full Speed in Mbps.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_HIGH_SPEED",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of High Speed in Mbps.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_5G",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of Super Speed in Mbps.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_10G",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of 10G.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_20G",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of 20G.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_DATA_TRANSFER_RATE_40G",
    "type" : "int",
    "comment" : "\n     * Value for USB Transfer Rate of 40G.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_RETRY",
    "type" : "int",
    "comment" : "\n     * Returned when the client has to retry querying the version.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The Value for USB hal is not presented.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_V1_0",
    "type" : "int",
    "comment" : "\n     * Value for USB Hal Version v1.0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_V1_1",
    "type" : "int",
    "comment" : "\n     * Value for USB Hal Version v1.1.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_V1_2",
    "type" : "int",
    "comment" : "\n     * Value for USB Hal Version v1.2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_V1_3",
    "type" : "int",
    "comment" : "\n     * Value for USB Hal Version v1.3.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_HAL_V2_0",
    "type" : "int",
    "comment" : "\n     * Value for USB Hal Version v2.0.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FUNCTION_NONE",
    "type" : "long",
    "comment" : "\n     * Code for the charging usb function. Passed into {@link #setCurrentFunctions(long)}\n     * Must be equal to {@link GadgetFunction#NONE}\n     * @hide\n     ",
    "links" : [ "#setCurrentFunctions(long)", "android.hardware.usb.gadget.GadgetFunction#NONE" ]
  }, {
    "name" : "FUNCTION_MTP",
    "type" : "long",
    "comment" : "\n     * Code for the mtp usb function. Passed as a mask into {@link #setCurrentFunctions(long)}\n     * Must be equal to {@link GadgetFunction#MTP}\n     * @hide\n     ",
    "links" : [ "#setCurrentFunctions(long)", "android.hardware.usb.gadget.GadgetFunction#MTP" ]
  }, {
    "name" : "FUNCTION_PTP",
    "type" : "long",
    "comment" : "\n     * Code for the ptp usb function. Passed as a mask into {@link #setCurrentFunctions(long)}\n     * Must be equal to {@link GadgetFunction#PTP}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#PTP", "#setCurrentFunctions(long)" ]
  }, {
    "name" : "FUNCTION_RNDIS",
    "type" : "long",
    "comment" : "\n     * Code for the rndis usb function. Passed as a mask into {@link #setCurrentFunctions(long)}\n     * Must be equal to {@link GadgetFunction#RNDIS}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#RNDIS", "#setCurrentFunctions(long)" ]
  }, {
    "name" : "FUNCTION_MIDI",
    "type" : "long",
    "comment" : "\n     * Code for the midi usb function. Passed as a mask into {@link #setCurrentFunctions(long)}\n     * Must be equal to {@link GadgetFunction#MIDI}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#MIDI", "#setCurrentFunctions(long)" ]
  }, {
    "name" : "FUNCTION_ACCESSORY",
    "type" : "long",
    "comment" : "\n     * Code for the accessory usb function.\n     * Must be equal to {@link GadgetFunction#ACCESSORY}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#ACCESSORY" ]
  }, {
    "name" : "FUNCTION_AUDIO_SOURCE",
    "type" : "long",
    "comment" : "\n     * Code for the audio source usb function.\n     * Must be equal to {@link GadgetFunction#AUDIO_SOURCE}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#AUDIO_SOURCE" ]
  }, {
    "name" : "FUNCTION_ADB",
    "type" : "long",
    "comment" : "\n     * Code for the adb usb function.\n     * Must be equal to {@link GadgetFunction#ADB}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#ADB" ]
  }, {
    "name" : "FUNCTION_NCM",
    "type" : "long",
    "comment" : "\n     * Code for the ncm source usb function.\n     * Must be equal to {@link GadgetFunction#NCM}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.gadget.GadgetFunction#NCM" ]
  }, {
    "name" : "FUNCTION_UVC",
    "type" : "long",
    "comment" : "\n     * Code for the uvc usb function. Passed as a mask into {@link #setCurrentFunctions(long)}\n     * Only supported if {@link #isUvcSupportEnabled()} returns true.\n     * Must be equal to {@link GadgetFunction#UVC}\n     * @hide\n     ",
    "links" : [ "#isUvcSupportEnabled()", "android.hardware.usb.gadget.GadgetFunction#UVC", "#setCurrentFunctions(long)" ]
  }, {
    "name" : "SETTABLE_FUNCTIONS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FUNCTION_NAME_TO_CODE",
    "type" : "Map<String, Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUsbOperationCount",
    "type" : "AtomicInteger",
    "comment" : "\n     * Counter for tracking UsbOperation operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IUsbManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayPortListenersLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayPortListeners",
    "type" : "ArrayMap<DisplayPortAltModeInfoListener, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayPortServiceListener",
    "type" : "DisplayPortAltModeInfoDispatchingListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public HashMap<String, UsbDevice> getDeviceList()",
    "returnType" : "HashMap<String, UsbDevice>",
    "comment" : "\n     * Returns a HashMap containing all USB devices currently attached.\n     * USB device name is the key for the returned HashMap.\n     * The result will be empty if no devices are attached, or if\n     * USB host mode is inactive or unsupported.\n     *\n     * @return HashMap containing all connected USB devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UsbDeviceConnection openDevice(UsbDevice device)",
    "returnType" : "UsbDeviceConnection",
    "comment" : "\n     * Opens the device so it can be used to send and receive\n     * data using {@link android.hardware.usb.UsbRequest}.\n     *\n     * @param device the device to open\n     * @return a {@link UsbDeviceConnection}, or {@code null} if open failed\n     ",
    "links" : [ "android.hardware.usb.UsbRequest", "android.hardware.usb.UsbDeviceConnection" ]
  }, {
    "name" : "public UsbAccessory[] getAccessoryList()",
    "returnType" : "UsbAccessory[]",
    "comment" : "\n     * Returns a list of currently attached USB accessories.\n     * (in the current implementation there can be at most one)\n     *\n     * @return list of USB accessories, or null if none are attached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openAccessory(UsbAccessory accessory)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Opens a file descriptor for reading and writing data to the USB accessory.\n     *\n     * <p>If data is read from the {@link java.io.InputStream} created from this file descriptor all\n     * data of a USB transfer should be read at once. If only a partial request is read the rest of\n     * the transfer is dropped.\n     *\n     * @param accessory the USB accessory to open\n     * @return file descriptor, or null if the accessory could not be opened.\n     ",
    "links" : [ "java.io.InputStream" ]
  }, {
    "name" : "public ParcelFileDescriptor getControlFd(long function)",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Gets the functionfs control file descriptor for the given function, with\n     * the usb descriptors and strings already written. The file descriptor is used\n     * by the function implementation to handle events and control requests.\n     *\n     * @param function to get control fd for. Currently {@link #FUNCTION_MTP} and\n     * {@link #FUNCTION_PTP} are supported.\n     * @return A ParcelFileDescriptor holding the valid fd, or null if the fd was not found.\n     *\n     * @hide\n     ",
    "links" : [ "#FUNCTION_MTP", "#FUNCTION_PTP" ]
  }, {
    "name" : "public boolean hasPermission(UsbDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the caller has permission to access the device.\n     * Permission might have been granted temporarily via\n     * {@link #requestPermission(UsbDevice, PendingIntent)} or\n     * by the user choosing the caller as the default application for the device.\n     * Permission for USB devices of class {@link UsbConstants#USB_CLASS_VIDEO} for clients that\n     * target SDK {@link android.os.Build.VERSION_CODES#P} and above can be granted only if they\n     * have additionally the {@link android.Manifest.permission#CAMERA} permission.\n     *\n     * @param device to check permissions for\n     * @return true if caller has permission\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "#requestPermission(UsbDevice", "android.hardware.usb.UsbConstants#USB_CLASS_VIDEO", "android.Manifest.permission#CAMERA" ]
  }, {
    "name" : "public boolean hasPermission(@NonNull UsbDevice device, @NonNull String packageName, int pid, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the caller has permission to access the device. It's similar to the\n     * {@link #hasPermission(UsbDevice)} but allows to specify a different package/uid/pid.\n     *\n     * <p>Not for third-party apps.</p>\n     *\n     * @hide\n     ",
    "links" : [ "#hasPermission(UsbDevice)" ]
  }, {
    "name" : "public boolean hasPermission(UsbAccessory accessory)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the caller has permission to access the accessory.\n     * Permission might have been granted temporarily via\n     * {@link #requestPermission(UsbAccessory, PendingIntent)} or\n     * by the user choosing the caller as the default application for the accessory.\n     *\n     * @param accessory to check permissions for\n     * @return true if caller has permission\n     ",
    "links" : [ "#requestPermission(UsbAccessory" ]
  }, {
    "name" : "public boolean hasPermission(@NonNull UsbAccessory accessory, int pid, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the caller has permission to access the accessory. It's similar to the\n     * {@link #hasPermission(UsbAccessory)} but allows to specify a different uid/pid.\n     *\n     * <p>Not for third-party apps.</p>\n     *\n     * @hide\n     ",
    "links" : [ "#hasPermission(UsbAccessory)" ]
  }, {
    "name" : "public void requestPermission(UsbDevice device, PendingIntent pi)",
    "returnType" : "void",
    "comment" : "\n     * Requests temporary permission for the given package to access the device.\n     * This may result in a system dialog being displayed to the user\n     * if permission had not already been granted.\n     * Success or failure is returned via the {@link android.app.PendingIntent} pi.\n     * If successful, this grants the caller permission to access the device only\n     * until the device is disconnected.\n     *\n     * The following extras will be added to pi:\n     * <ul>\n     * <li> {@link #EXTRA_DEVICE} containing the device passed into this call\n     * <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether\n     * permission was granted by the user\n     * </ul>\n     *\n     * Permission for USB devices of class {@link UsbConstants#USB_CLASS_VIDEO} for clients that\n     * target SDK {@link android.os.Build.VERSION_CODES#P} and above can be granted only if they\n     * have additionally the {@link android.Manifest.permission#CAMERA} permission.\n     *\n     * @param device to request permissions for\n     * @param pi PendingIntent for returning result\n     ",
    "links" : [ "#EXTRA_DEVICE", "android.os.Build.VERSION_CODES#P", "#EXTRA_PERMISSION_GRANTED", "android.hardware.usb.UsbConstants#USB_CLASS_VIDEO", "android.Manifest.permission#CAMERA", "android.app.PendingIntent" ]
  }, {
    "name" : "public void requestPermission(UsbAccessory accessory, PendingIntent pi)",
    "returnType" : "void",
    "comment" : "\n     * Requests temporary permission for the given package to access the accessory.\n     * This may result in a system dialog being displayed to the user\n     * if permission had not already been granted.\n     * Success or failure is returned via the {@link android.app.PendingIntent} pi.\n     * If successful, this grants the caller permission to access the accessory only\n     * until the device is disconnected.\n     *\n     * The following extras will be added to pi:\n     * <ul>\n     * <li> {@link #EXTRA_ACCESSORY} containing the accessory passed into this call\n     * <li> {@link #EXTRA_PERMISSION_GRANTED} containing boolean indicating whether\n     * permission was granted by the user\n     * </ul>\n     *\n     * @param accessory to request permissions for\n     * @param pi PendingIntent for returning result\n     ",
    "links" : [ "#EXTRA_ACCESSORY", "#EXTRA_PERMISSION_GRANTED", "android.app.PendingIntent" ]
  }, {
    "name" : "public void grantPermission(UsbDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Grants permission for USB device without showing system dialog.\n     * Only system components can call this function.\n     * @param device to request permissions for\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantPermission(UsbDevice device, int uid)",
    "returnType" : "void",
    "comment" : "\n     * Grants permission for USB device to given uid without showing system dialog.\n     * Only system components can call this function.\n     * @param device to request permissions for\n     * @uid uid to give permission\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void grantPermission(UsbDevice device, String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Grants permission to specified package for USB device without showing system dialog.\n     * Only system components can call this function, as it requires the MANAGE_USB permission.\n     * @param device to request permissions for\n     * @param packageName of package to grant permissions\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFunctionEnabled(String function)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified USB function is currently enabled when in device mode.\n     * <p>\n     * USB functions represent interfaces which are published to the host to access\n     * services offered by the device.\n     * </p>\n     *\n     * @deprecated use getCurrentFunctions() instead.\n     * @param function name of the USB function\n     * @return true if the USB function is enabled\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentFunctions(@UsbFunctionMode long functions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current USB functions when in device mode.\n     * <p>\n     * USB functions represent interfaces which are published to the host to access\n     * services offered by the device.\n     * </p><p>\n     * This method is intended to select among primary USB functions.  The system may\n     * automatically activate additional functions such as {@link #USB_FUNCTION_ADB}\n     * or {@link #USB_FUNCTION_ACCESSORY} based on other settings and states.\n     * </p><p>\n     * An argument of 0 indicates that the device is charging, and can pick any\n     * appropriate function for that purpose.\n     * </p><p>\n     * Note: This function is asynchronous and may fail silently without applying\n     * the requested changes.\n     * </p>\n     *\n     * @param functions the USB function(s) to set, as a bitwise mask.\n     *                  Must satisfy {@link UsbManager#areSettableFunctions}\n     *\n     * @hide\n     ",
    "links" : [ "#USB_FUNCTION_ADB", "#USB_FUNCTION_ACCESSORY", "android.hardware.usb.UsbManager#areSettableFunctions" ]
  }, {
    "name" : "public void setCurrentFunction(String functions, boolean usbDataUnlocked)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current USB functions when in device mode.\n     *\n     * @deprecated use setCurrentFunctions(long) instead.\n     * @param functions the USB function(s) to set.\n     * @param usbDataUnlocked unused\n\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentFunctions()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current USB functions in device mode.\n     * <p>\n     * This function returns the state of primary USB functions and can return a\n     * mask containing any usb function(s) except for ADB.\n     * </p>\n     *\n     * @return The currently enabled functions, in a bitwise mask.\n     * A zero mask indicates that the current function is the charging function.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setScreenUnlockedFunctions(long functions)",
    "returnType" : "void",
    "comment" : "\n     * Sets the screen unlocked functions, which are persisted and set as the current functions\n     * whenever the screen is unlocked.\n     * <p>\n     * A zero mask has the effect of switching off this feature, so functions\n     * no longer change on screen unlock.\n     * </p><p>\n     * Note: When the screen is on, this method will apply given functions as current functions,\n     * which is asynchronous and may fail silently without applying the requested changes.\n     * </p>\n     *\n     * @param functions functions to set, in a bitwise mask.\n     *                  Must satisfy {@link UsbManager#areSettableFunctions}\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbManager#areSettableFunctions" ]
  }, {
    "name" : "public long getScreenUnlockedFunctions()",
    "returnType" : "long",
    "comment" : "\n     * Gets the current screen unlocked functions.\n     *\n     * @return The currently set screen enabled functions.\n     * A zero mask indicates that the screen unlocked functions feature is not enabled.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUsbBandwidthMbps()",
    "returnType" : "int",
    "comment" : "\n     * Get the Current USB Bandwidth.\n     * <p>\n     * This function returns the current USB bandwidth through USB Gadget HAL.\n     * It should be used when Android device is in USB peripheral mode and\n     * connects to a USB host. If USB state is not configued, API will return\n     * {@value #USB_DATA_TRANSFER_RATE_UNKNOWN}. In addition, the unit of the\n     * return value is Mbps.\n     * </p>\n     *\n     * @return The value of currently USB Bandwidth.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGadgetHalVersion()",
    "returnType" : "int",
    "comment" : "\n     * Get the Current Gadget Hal Version.\n     * <p>\n     * This function returns the current Gadget Hal Version.\n     * </p>\n     *\n     * @return a integer {@code GADGET_HAL_*} represent hal version.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUsbHalVersion()",
    "returnType" : "int",
    "comment" : "\n     * Get the Current USB Hal Version.\n     * <p>\n     * This function returns the current USB Hal Version.\n     * </p>\n     *\n     * @return a integer {@code USB_HAL_*} represent hal version.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetUsbGadget()",
    "returnType" : "void",
    "comment" : "\n     * Resets the USB Gadget.\n     * <p>\n     * Performs USB data stack reset through USB Gadget HAL.\n     * It will force USB data connection reset. The connection will disconnect and reconnect.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isUvcSupportEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether UVC is advertised to be supported or not. SELinux\n     * enforces that this function returns {@code false} when called from a\n     * process that doesn't belong either to a system app, or the\n     * DeviceAsWebcam Service.\n     *\n     * @return true if UVC is supported, false if UVC is not supported or if\n     *         called from a non-system app that isn't DeviceAsWebcam Service.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean enableUsbDataSignal(boolean enable)",
    "returnType" : "boolean",
    "comment" : "\n     * Enable/Disable the USB data signaling.\n     * <p>\n     * Enables/Disables USB data path of all USB ports.\n     * It will force to stop or restore USB data signaling.\n     * </p>\n     *\n     * @param enable enable or disable USB data signaling\n     * @return true enable or disable USB data successfully\n     *         false if something wrong\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setUsbDataSignal(List<UsbPort> usbPorts, boolean disable, boolean revertOnFailure)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isPortDisabled(UsbPort usbPort)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<UsbPort> getPorts()",
    "returnType" : "List<UsbPort>",
    "comment" : "\n     * Returns a list of physical USB ports on the device.\n     * <p>\n     * This list is guaranteed to contain all dual-role USB Type C ports but it might\n     * be missing other ports depending on whether the kernel USB drivers have been\n     * updated to publish all of the device's ports through the new \"dual_role_usb\"\n     * device class (which supports all types of ports despite its name).\n     * </p>\n     *\n     * @return The list of USB ports\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " UsbPortStatus getPortStatus(UsbPort port)",
    "returnType" : "UsbPortStatus",
    "comment" : "\n     * Should only be called by {@link UsbPort#getStatus}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#getStatus" ]
  }, {
    "name" : " boolean isModeChangeSupported(UsbPort port)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given port supports mode change. Should only be called by\n     * {@link UsbPort#isModeChangeSupported}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#isModeChangeSupported" ]
  }, {
    "name" : " void setPortRoles(UsbPort port, int powerRole, int dataRole)",
    "returnType" : "void",
    "comment" : "\n     * Should only be called by {@link UsbPort#setRoles}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#setRoles" ]
  }, {
    "name" : " void enableContaminantDetection(@NonNull UsbPort port, boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * Enables USB port contaminant detection algorithm.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void enableLimitPowerTransfer(@NonNull UsbPort port, boolean limit, int operationId, IUsbOperationInternal callback)",
    "returnType" : "void",
    "comment" : "\n     * Should only be called by {@link UsbPort#enableLimitPowerTransfer}.\n     * <p>\n     * limits or restores power transfer in and out of USB port.\n     *\n     * @param port USB port for which power transfer has to be limited or restored.\n     * @param limit limit power transfer when true.\n     *              relax power transfer restrictions when false.\n     * @param operationId operationId for the request.\n     * @param callback callback object to be invoked when the operation is complete.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#enableLimitPowerTransfer" ]
  }, {
    "name" : " void resetUsbPort(@NonNull UsbPort port, int operationId, IUsbOperationInternal callback)",
    "returnType" : "void",
    "comment" : "\n     * Should only be called by {@link UsbPort#resetUsbPort}.\n     * <p>\n     * Disable and then re-enable USB data signaling.\n     *\n     * Reset USB first port..\n     * It will force to stop and restart USB data signaling.\n     * Call UsbPort API if the device has more than one UsbPort.\n     * </p>\n     *\n     * @param port reset the USB Port\n     * @return true enable or disable USB data successfully\n     *         false if something wrong\n     *\n     * Should only be called by {@link UsbPort#resetUsbPort}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#resetUsbPort" ]
  }, {
    "name" : " boolean enableUsbData(@NonNull UsbPort port, boolean enable, int operationId, IUsbOperationInternal callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Should only be called by {@link UsbPort#enableUsbData}.\n     * <p>\n     * Enables or disables USB data on the specific port.\n     *\n     * @param port USB port for which USB data needs to be enabled or disabled.\n     * @param enable Enable USB data when true.\n     *               Disable USB data when false.\n     * @param operationId operationId for the request.\n     * @param callback callback object to be invoked when the operation is complete.\n     * @return True when the operation is asynchronous. The caller must therefore call\n     *         {@link UsbOperationInternal#waitForOperationComplete} for processing\n     *         the result.\n     *         False when the operation is synchronous. Caller can proceed reading the result\n     *         through {@link UsbOperationInternal#getStatus}\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbOperationInternal#getStatus", "android.hardware.usb.UsbOperationInternal#waitForOperationComplete", "android.hardware.usb.UsbPort#enableUsbData" ]
  }, {
    "name" : " void enableUsbDataWhileDocked(@NonNull UsbPort port, int operationId, IUsbOperationInternal callback)",
    "returnType" : "void",
    "comment" : "\n     * Should only be called by {@link UsbPort#enableUsbDataWhileDocked}.\n     * <p>\n     * Enables or disables USB data when disabled due to docking event.\n     *\n     * @param port USB port for which USB data needs to be enabled.\n     * @param operationId operationId for the request.\n     * @param callback callback object to be invoked when the operation is complete.\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPort#enableUsbDataWhileDocked" ]
  }, {
    "name" : "private boolean registerDisplayPortAltModeEventsIfNeededLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDisplayPortAltModeInfoListener(@NonNull @CallbackExecutor Executor executor, @NonNull DisplayPortAltModeInfoListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers the given listener to listen for DisplayPort Alt Mode changes.\n     * <p>\n     * If this method returns without Exceptions, the caller should ensure to call\n     * {@link #unregisterDisplayPortAltModeListener} when it no longer requires updates.\n     *\n     * @param executor          Executor on which to run the listener.\n     * @param listener          DisplayPortAltModeInfoListener invoked on DisplayPortAltModeInfo\n     *                          changes. See {@link #DisplayPortAltModeInfoListener} for listener\n     *                          details.\n     *\n     * @throws IllegalStateException if listener has already been registered previously but not\n     * unregistered or an unexpected system failure occurs.\n     *\n     * @hide\n     ",
    "links" : [ "#DisplayPortAltModeInfoListener", "#unregisterDisplayPortAltModeListener" ]
  }, {
    "name" : "private void unregisterDisplayPortAltModeEventsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDisplayPortAltModeInfoListener(@NonNull DisplayPortAltModeInfoListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters the given listener if it was previously passed to\n     * registerDisplayPortAltModeInfoListener.\n     *\n     * @param listener          DisplayPortAltModeInfoListener used to register the listener\n     *                          in registerDisplayPortAltModeInfoListener.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsbDeviceConnectionHandler(@Nullable ComponentName usbDeviceConnectionHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the component that will handle USB device connection.\n     * <p>\n     * Setting component allows to specify external USB host manager to handle use cases, where\n     * selection dialog for an activity that will handle USB device is undesirable.\n     * Only system components can call this function, as it requires the MANAGE_USB permission.\n     *\n     * @param usbDeviceConnectionHandler The component to handle usb connections,\n     * {@code null} to unset.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areSettableFunctions(long functions)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given functions are valid inputs to UsbManager.\n     * Currently the empty functions or any of MTP, PTP, RNDIS, MIDI, NCM, UVC are accepted.\n     *\n     * Only one function may be set at a time, except for RNDIS and NCM, which can be set together\n     * because from a user perspective they are the same function (tethering).\n     *\n     * @return Whether the mask is settable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String usbFunctionsToString(long functions)",
    "returnType" : "String",
    "comment" : "\n     * Converts the given function mask to string. Maintains ordering with respect to init scripts.\n     *\n     * @return String representation of given mask\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long usbFunctionsFromString(String functions)",
    "returnType" : "long",
    "comment" : "\n     * Parses a string of usb functions that are comma separated.\n     *\n     * @return A mask of all valid functions in the string\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int usbSpeedToBandwidth(int speed)",
    "returnType" : "int",
    "comment" : "\n     * Converts the given integer of USB speed to corresponding bandwidth.\n     *\n     * @return a value of USB bandwidth\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String usbGadgetHalVersionToString(int version)",
    "returnType" : "String",
    "comment" : "\n     * Converts the given usb gadgdet hal version to String\n     *\n     * @return String representation of Usb Gadget Hal Version\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public HashMap<String, UsbDevice> getDeviceList()", "public UsbDeviceConnection openDevice(UsbDevice device)", "public UsbAccessory[] getAccessoryList()", "public ParcelFileDescriptor openAccessory(UsbAccessory accessory)", "public ParcelFileDescriptor getControlFd(long function)", "public boolean hasPermission(UsbDevice device)", "public boolean hasPermission(@NonNull UsbDevice device, @NonNull String packageName, int pid, int uid)", "public boolean hasPermission(UsbAccessory accessory)", "public boolean hasPermission(@NonNull UsbAccessory accessory, int pid, int uid)", "public void requestPermission(UsbDevice device, PendingIntent pi)", "public void requestPermission(UsbAccessory accessory, PendingIntent pi)", "public void grantPermission(UsbDevice device)", "public void grantPermission(UsbDevice device, int uid)", "public void grantPermission(UsbDevice device, String packageName)", "public boolean isFunctionEnabled(String function)", "public void setCurrentFunctions(@UsbFunctionMode long functions)", "public void setCurrentFunction(String functions, boolean usbDataUnlocked)", "public long getCurrentFunctions()", "public void setScreenUnlockedFunctions(long functions)", "public long getScreenUnlockedFunctions()", "public int getUsbBandwidthMbps()", "public int getGadgetHalVersion()", "public int getUsbHalVersion()", "public void resetUsbGadget()", "public static boolean isUvcSupportEnabled()", "public boolean enableUsbDataSignal(boolean enable)", "private boolean setUsbDataSignal(List<UsbPort> usbPorts, boolean disable, boolean revertOnFailure)", "private boolean isPortDisabled(UsbPort usbPort)", "public List<UsbPort> getPorts()", " UsbPortStatus getPortStatus(UsbPort port)", " boolean isModeChangeSupported(UsbPort port)", " void setPortRoles(UsbPort port, int powerRole, int dataRole)", " void enableContaminantDetection(@NonNull UsbPort port, boolean enable)", " void enableLimitPowerTransfer(@NonNull UsbPort port, boolean limit, int operationId, IUsbOperationInternal callback)", " void resetUsbPort(@NonNull UsbPort port, int operationId, IUsbOperationInternal callback)", " boolean enableUsbData(@NonNull UsbPort port, boolean enable, int operationId, IUsbOperationInternal callback)", " void enableUsbDataWhileDocked(@NonNull UsbPort port, int operationId, IUsbOperationInternal callback)", "private boolean registerDisplayPortAltModeEventsIfNeededLocked()", "public void registerDisplayPortAltModeInfoListener(@NonNull @CallbackExecutor Executor executor, @NonNull DisplayPortAltModeInfoListener listener)", "private void unregisterDisplayPortAltModeEventsLocked()", "public void unregisterDisplayPortAltModeInfoListener(@NonNull DisplayPortAltModeInfoListener listener)", "public void setUsbDeviceConnectionHandler(@Nullable ComponentName usbDeviceConnectionHandler)", "public static boolean areSettableFunctions(long functions)", "public static String usbFunctionsToString(long functions)", "public static long usbFunctionsFromString(String functions)", "public static int usbSpeedToBandwidth(int speed)", "public static String usbGadgetHalVersionToString(int version)" ],
  "variableNames" : [ "TAG", "ACTION_USB_STATE", "ACTION_USB_PORT_CHANGED", "ACTION_USB_PORT_COMPLIANCE_CHANGED", "ACTION_USB_DEVICE_ATTACHED", "ACTION_USB_DEVICE_DETACHED", "ACTION_USB_ACCESSORY_ATTACHED", "ACTION_USB_ACCESSORY_DETACHED", "ACTION_USB_ACCESSORY_HANDSHAKE", "USB_CONNECTED", "USB_HOST_CONNECTED", "USB_CONFIGURED", "USB_DATA_UNLOCKED", "USB_FUNCTION_NONE", "USB_FUNCTION_ADB", "USB_FUNCTION_RNDIS", "USB_FUNCTION_MTP", "USB_FUNCTION_PTP", "USB_FUNCTION_AUDIO_SOURCE", "USB_FUNCTION_MIDI", "USB_FUNCTION_ACCESSORY", "USB_FUNCTION_NCM", "USB_FUNCTION_UVC", "GADGET_HAL_UNKNOWN", "GADGET_HAL_VERSION_1_0", "GADGET_HAL_VERSION_1_1", "GADGET_HAL_VERSION_1_2", "GADGET_HAL_VERSION_2_0", "EXTRA_PORT", "EXTRA_PORT_STATUS", "EXTRA_DEVICE", "EXTRA_ACCESSORY", "EXTRA_ACCESSORY_UEVENT_TIME", "EXTRA_ACCESSORY_STRING_COUNT", "EXTRA_ACCESSORY_START", "EXTRA_ACCESSORY_HANDSHAKE_END", "EXTRA_PERMISSION_GRANTED", "EXTRA_PACKAGE", "EXTRA_CAN_BE_DEFAULT", "GADGET_HAL_NOT_SUPPORTED", "GADGET_HAL_V1_0", "GADGET_HAL_V1_1", "GADGET_HAL_V1_2", "GADGET_HAL_V2_0", "USB_DATA_TRANSFER_RATE_UNKNOWN", "USB_DATA_TRANSFER_RATE_LOW_SPEED", "USB_DATA_TRANSFER_RATE_FULL_SPEED", "USB_DATA_TRANSFER_RATE_HIGH_SPEED", "USB_DATA_TRANSFER_RATE_5G", "USB_DATA_TRANSFER_RATE_10G", "USB_DATA_TRANSFER_RATE_20G", "USB_DATA_TRANSFER_RATE_40G", "USB_HAL_RETRY", "USB_HAL_NOT_SUPPORTED", "USB_HAL_V1_0", "USB_HAL_V1_1", "USB_HAL_V1_2", "USB_HAL_V1_3", "USB_HAL_V2_0", "FUNCTION_NONE", "FUNCTION_MTP", "FUNCTION_PTP", "FUNCTION_RNDIS", "FUNCTION_MIDI", "FUNCTION_ACCESSORY", "FUNCTION_AUDIO_SOURCE", "FUNCTION_ADB", "FUNCTION_NCM", "FUNCTION_UVC", "SETTABLE_FUNCTIONS", "FUNCTION_NAME_TO_CODE", "sUsbOperationCount", "mContext", "mService", "mDisplayPortListenersLock", "mDisplayPortListeners", "mDisplayPortServiceListener" ]
}