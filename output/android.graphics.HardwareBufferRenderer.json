{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/HardwareBufferRenderer.java",
  "packageName" : "android.graphics",
  "className" : "HardwareBufferRenderer",
  "comment" : "\n * <p>Creates an instance of a hardware-accelerated renderer. This is used to render a scene built\n * from {@link RenderNode}s to an output {@link HardwareBuffer}. There can be as many\n * HardwareBufferRenderer instances as desired.</p>\n *\n * <h3>Resources & lifecycle</h3>\n *\n * <p>All HardwareBufferRenderer and {@link HardwareRenderer} instances share a common render\n * thread. Therefore HardwareBufferRenderer will share common resources and GPU utilization with\n * hardware accelerated rendering initiated by the UI thread of an application.\n * The render thread contains the GPU context & resources necessary to do GPU-accelerated\n * rendering. As such, the first HardwareBufferRenderer created comes with the cost of also creating\n * the associated GPU contexts, however each incremental HardwareBufferRenderer thereafter is fairly\n * cheap. The expected usage is to have a HardwareBufferRenderer instance for every active {@link\n * HardwareBuffer}.</p>\n *\n * This is useful in situations where a scene built with {@link RenderNode}s can be consumed\n * directly by the system compositor through\n * {@link SurfaceControl.Transaction#setBuffer(SurfaceControl, HardwareBuffer)}.\n *\n * HardwareBufferRenderer will never clear contents before each draw invocation so previous contents\n * in the {@link HardwareBuffer} target will be preserved across renders.\n ",
  "links" : [ "android.graphics.HardwareRenderer", "SurfaceControl.Transaction#setBuffer(SurfaceControl", "android.hardware.HardwareBuffer", "android.graphics.RenderNode" ],
  "variables" : [ {
    "name" : "DEFAULT_COLORSPACE",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardwareBuffer",
    "type" : "HardwareBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRenderRequest",
    "type" : "RenderRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRootNode",
    "type" : "RenderNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCleaner",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxy",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setContentRoot(@Nullable RenderNode content)",
    "returnType" : "void",
    "comment" : "\n     * Sets the content root to render. It is not necessary to call this whenever the content\n     * recording changes. Any mutations to the RenderNode content, or any of the RenderNodes\n     * contained within the content node, will be applied whenever a new {@link RenderRequest} is\n     * issued via {@link #obtainRenderRequest()} and {@link RenderRequest#draw(Executor,\n     * Consumer)}.\n     *\n     * @param content The content to set as the root RenderNode. If null the content root is removed\n     * and the renderer will draw nothing.\n     ",
    "links" : [ "#obtainRenderRequest()", "RenderRequest", "#draw(Executor" ]
  }, {
    "name" : "public RenderRequest obtainRenderRequest()",
    "returnType" : "RenderRequest",
    "comment" : "\n     * Returns a {@link RenderRequest} that can be used to render into the provided {@link\n     * HardwareBuffer}. This is used to synchronize the RenderNode content provided by {@link\n     * #setContentRoot(RenderNode)}.\n     *\n     * @return An instance of {@link RenderRequest}. The instance may be reused for every frame, so\n     * the caller should not hold onto it for longer than a single render request.\n     ",
    "links" : [ "RenderRequest", "android.hardware.HardwareBuffer", "#setContentRoot(RenderNode)" ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the {@link HardwareBufferRenderer} has already been closed. That is\n     * {@link HardwareBufferRenderer#close()} has been invoked.\n     * @return True if the {@link HardwareBufferRenderer} has been closed, false otherwise.\n     ",
    "links" : [ "android.graphics.HardwareBufferRenderer#close()", "android.graphics.HardwareBufferRenderer" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Releases the resources associated with this {@link HardwareBufferRenderer} instance. **Note**\n     * this does not call {@link HardwareBuffer#close()} on the provided {@link HardwareBuffer}\n     * instance\n     ",
    "links" : [ "android.hardware.HardwareBuffer#close()", "android.hardware.HardwareBuffer", "android.graphics.HardwareBufferRenderer" ]
  }, {
    "name" : "public void setLightSourceGeometry(float lightX, float lightY, @FloatRange(from = 0f) float lightZ, @FloatRange(from = 0f) float lightRadius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the center of the light source. The light source point controls the directionality and\n     * shape of shadows rendered by RenderNode Z & elevation.\n     *\n     * <p>The light source should be setup both as part of initial configuration, and whenever\n     * the window moves to ensure the light source stays anchored in display space instead of in\n     * window space.\n     *\n     * <p>This must be set at least once along with {@link #setLightSourceAlpha(float, float)}\n     * before shadows will work.\n     *\n     * @param lightX The X position of the light source. If unsure, a reasonable default\n     * is 'displayWidth / 2f - windowLeft'.\n     * @param lightY The Y position of the light source. If unsure, a reasonable default\n     * is '0 - windowTop'\n     * @param lightZ The Z position of the light source. Must be >= 0. If unsure, a reasonable\n     * default is 600dp.\n     * @param lightRadius The radius of the light source. Smaller radius will have sharper edges,\n     * larger radius will have softer shadows. If unsure, a reasonable default is 800 dp.\n     ",
    "links" : [ "#setLightSourceAlpha(float" ]
  }, {
    "name" : "public void setLightSourceAlpha(@FloatRange(from = 0.0f, to = 1.0f) float ambientShadowAlpha, @FloatRange(from = 0.0f, to = 1.0f) float spotShadowAlpha)",
    "returnType" : "void",
    "comment" : "\n     * Configures the ambient & spot shadow alphas. This is the alpha used when the shadow has max\n     * alpha, and ramps down from the values provided to zero.\n     *\n     * <p>These values are typically provided by the current theme, see\n     * {@link android.R.attr#spotShadowAlpha} and {@link android.R.attr#ambientShadowAlpha}.\n     *\n     * <p>This must be set at least once along with\n     * {@link #setLightSourceGeometry(float, float, float, float)} before shadows will work.\n     *\n     * @param ambientShadowAlpha The alpha for the ambient shadow. If unsure, a reasonable default\n     * is 0.039f.\n     * @param spotShadowAlpha The alpha for the spot shadow. If unsure, a reasonable default is\n     * 0.19f.\n     ",
    "links" : [ "android.R.attr#ambientShadowAlpha", "#setLightSourceGeometry(float", "android.R.attr#spotShadowAlpha" ]
  }, {
    "name" : " static native int nRender(long renderer, int transform, int width, int height, long colorSpace, Consumer<RenderResult> callback)",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateRootRenderNode()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nDestroyRootRenderNode(long rootRenderNode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreateHardwareBufferRenderer(HardwareBuffer buffer, long rootRenderNode)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetLightGeometry(long bufferRenderer, float lightX, float lightY, float lightZ, float radius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetLightAlpha(long nativeProxy, float ambientShadowAlpha, float spotShadowAlpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void invokeRenderCallback(@NonNull Consumer<RenderResult> callback, int fd, int status)",
    "returnType" : "void",
    "comment" : " Called by native",
    "links" : [ ]
  }, {
    "name" : "private static void validateAlpha(float alpha, String argumentName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validateFinite(float f, String argumentName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void validatePositive(float f, String argumentName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setContentRoot(@Nullable RenderNode content)", "public RenderRequest obtainRenderRequest()", "public boolean isClosed()", "public void close()", "public void setLightSourceGeometry(float lightX, float lightY, @FloatRange(from = 0f) float lightZ, @FloatRange(from = 0f) float lightRadius)", "public void setLightSourceAlpha(@FloatRange(from = 0.0f, to = 1.0f) float ambientShadowAlpha, @FloatRange(from = 0.0f, to = 1.0f) float spotShadowAlpha)", " static native int nRender(long renderer, int transform, int width, int height, long colorSpace, Consumer<RenderResult> callback)", "private static native long nCreateRootRenderNode()", "private static native void nDestroyRootRenderNode(long rootRenderNode)", "private static native long nCreateHardwareBufferRenderer(HardwareBuffer buffer, long rootRenderNode)", "private static native void nSetLightGeometry(long bufferRenderer, float lightX, float lightY, float lightZ, float radius)", "private static native void nSetLightAlpha(long nativeProxy, float ambientShadowAlpha, float spotShadowAlpha)", "private static native long nGetFinalizer()", "private static void invokeRenderCallback(@NonNull Consumer<RenderResult> callback, int fd, int status)", "private static void validateAlpha(float alpha, String argumentName)", "private static void validateFinite(float f, String argumentName)", "private static void validatePositive(float f, String argumentName)" ],
  "variableNames" : [ "DEFAULT_COLORSPACE", "mHardwareBuffer", "mRenderRequest", "mRootNode", "mCleaner", "mProxy" ]
}