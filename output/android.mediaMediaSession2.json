{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaSession2.java",
  "packageName" : "android.media",
  "className" : "MediaSession2",
  "comment" : "\n * This API is not generally intended for third party application developers.\n * Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n * <a href=\"{@docRoot}reference/androidx/media2/session/package-summary.html\">Media2 session\n * Library</a> for consistent behavior across all devices.\n * <p>\n * Allows a media app to expose its transport controls and playback information in a process to\n * other processes including the Android framework and other apps.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_ID_LIST",
    "type" : "List<String>",
    "comment" : "@GuardedBy(\"MediaSession.class\")",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectedControllers",
    "type" : "Map<Controller2Link, ControllerInfo>",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "SessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionStub",
    "type" : "Session2Link",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionActivity",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionToken",
    "type" : "Session2Token",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionManager",
    "type" : "MediaSessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "boolean",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPlaybackActive",
    "type" : "boolean",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mForegroundServiceEventCallback",
    "type" : "ForegroundServiceEventCallback",
    "comment" : "@GuardedBy(\"mLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the session ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public Session2Token getToken()",
    "returnType" : "Session2Token",
    "comment" : "\n     * Returns the {@link Session2Token} for creating {@link MediaController2}.\n     ",
    "links" : [ "Session2Token", "MediaController2" ]
  }, {
    "name" : "public void broadcastSessionCommand(@NonNull Session2Command command, @Nullable Bundle args)",
    "returnType" : "void",
    "comment" : "\n     * Broadcasts a session command to all the connected controllers\n     * <p>\n     * @param command the session command\n     * @param args optional arguments\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object sendSessionCommand(@NonNull ControllerInfo controller, @NonNull Session2Command command, @Nullable Bundle args)",
    "returnType" : "Object",
    "comment" : "\n     * Sends a session command to a specific controller\n     * <p>\n     * @param controller the controller to get the session command\n     * @param command the session command\n     * @param args optional arguments\n     * @return a token which will be sent together in {@link SessionCallback#onCommandResult}\n     *     when its result is received.\n     ",
    "links" : [ "SessionCallback#onCommandResult" ]
  }, {
    "name" : "public void cancelSessionCommand(@NonNull ControllerInfo controller, @NonNull Object token)",
    "returnType" : "void",
    "comment" : "\n     * Cancels the session command previously sent.\n     *\n     * @param controller the controller to get the session command\n     * @param token the token which is returned from {@link #sendSessionCommand}.\n     ",
    "links" : [ "#sendSessionCommand" ]
  }, {
    "name" : "public void setPlaybackActive(boolean playbackActive)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the playback is active (i.e. playing something)\n     *\n     * @param playbackActive {@code true} if the playback active, {@code false} otherwise.\n     *",
    "links" : [ ]
  }, {
    "name" : "public boolean isPlaybackActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whehther the playback is active (i.e. playing something)\n     *\n     * @return {@code true} if the playback active, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ControllerInfo> getConnectedControllers()",
    "returnType" : "List<ControllerInfo>",
    "comment" : "\n     * Gets the list of the connected controllers\n     *\n     * @return list of the connected controllers.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean hasCustomParcelable(@Nullable Bundle bundle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the given bundle includes non-framework Parcelables.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " SessionCallback getCallback()",
    "returnType" : "SessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setForegroundServiceEventCallback(ForegroundServiceEventCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onConnect(final Controller2Link controller, int callingPid, int callingUid, int seq, Bundle connectionRequest)",
    "returnType" : "void",
    "comment" : " Called by Session2Link.onConnect and MediaSession2Service.MediaSession2ServiceStub.connect",
    "links" : [ ]
  }, {
    "name" : " void onDisconnect(@NonNull final Controller2Link controller, int seq)",
    "returnType" : "void",
    "comment" : " Called by Session2Link.onDisconnect",
    "links" : [ ]
  }, {
    "name" : " void onSessionCommand(@NonNull final Controller2Link controller, final int seq, final Session2Command command, final Bundle args, @Nullable ResultReceiver resultReceiver)",
    "returnType" : "void",
    "comment" : " Called by Session2Link.onSessionCommand",
    "links" : [ ]
  }, {
    "name" : " void onCancelCommand(@NonNull final Controller2Link controller, final int seq)",
    "returnType" : "void",
    "comment" : " Called by Session2Link.onCancelCommand",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "SESSION_ID_LIST", "mLock", "mConnectedControllers", "mContext", "mCallbackExecutor", "mCallback", "mSessionStub", "mSessionId", "mSessionActivity", "mSessionToken", "mSessionManager", "mResultHandler", "mClosed", "mPlaybackActive", "mForegroundServiceEventCallback" ],
  "methodNames" : [ "public void close()", "public String getId()", "public Session2Token getToken()", "public void broadcastSessionCommand(@NonNull Session2Command command, @Nullable Bundle args)", "public Object sendSessionCommand(@NonNull ControllerInfo controller, @NonNull Session2Command command, @Nullable Bundle args)", "public void cancelSessionCommand(@NonNull ControllerInfo controller, @NonNull Object token)", "public void setPlaybackActive(boolean playbackActive)", "public boolean isPlaybackActive()", "public List<ControllerInfo> getConnectedControllers()", " static boolean hasCustomParcelable(@Nullable Bundle bundle)", " boolean isClosed()", " SessionCallback getCallback()", " void setForegroundServiceEventCallback(ForegroundServiceEventCallback callback)", " void onConnect(final Controller2Link controller, int callingPid, int callingUid, int seq, Bundle connectionRequest)", " void onDisconnect(@NonNull final Controller2Link controller, int seq)", " void onSessionCommand(@NonNull final Controller2Link controller, final int seq, final Session2Command command, final Bundle args, @Nullable ResultReceiver resultReceiver)", " void onCancelCommand(@NonNull final Controller2Link controller, final int seq)" ]
}