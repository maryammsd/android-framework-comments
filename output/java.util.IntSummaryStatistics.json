{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/IntSummaryStatistics.java",
  "packageName" : "java.util",
  "className" : "IntSummaryStatistics",
  "comment" : "\n * A state object for collecting statistics such as count, min, max, sum, and\n * average.\n *\n * <p>This class is designed to work with (though does not require)\n * {@linkplain java.util.stream streams}. For example, you can compute\n * summary statistics on a stream of ints with:\n * <pre> {@code\n * IntSummaryStatistics stats = intStream.collect(IntSummaryStatistics::new,\n *                                                IntSummaryStatistics::accept,\n *                                                IntSummaryStatistics::combine);\n * }</pre>\n *\n * <p>{@code IntSummaryStatistics} can be used as a\n * {@linkplain java.util.stream.Stream#collect(Collector) reduction}\n * target for a {@linkplain java.util.stream.Stream stream}. For example:\n *\n * <pre> {@code\n * IntSummaryStatistics stats = people.stream()\n *                                    .collect(Collectors.summarizingInt(Person::getDependents));\n *}</pre>\n *\n * This computes, in a single pass, the count of people, as well as the minimum,\n * maximum, sum, and average of their number of dependents.\n *\n * @implNote This implementation is not thread safe. However, it is safe to use\n * {@link java.util.stream.Collectors#summarizingInt(java.util.function.ToIntFunction)\n * Collectors.summarizingInt()} on a parallel stream, because the parallel\n * implementation of {@link java.util.stream.Stream#collect Stream.collect()}\n * provides the necessary partitioning, isolation, and merging of results for\n * safe and efficient parallel execution.\n *\n * <p>This implementation does not check for overflow of the count or the sum.\n * @since 1.8\n ",
  "links" : [ "java.util.stream.Collectors#summarizingInt(java.util.function.ToIntFunction)", "java.util.stream.Stream#collect" ],
  "variables" : [ {
    "name" : "count",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sum",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "min",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "max",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void accept(int value)",
    "returnType" : "void",
    "comment" : "\n     * Records a new value into the summary information\n     *\n     * @param value the input value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void combine(IntSummaryStatistics other)",
    "returnType" : "void",
    "comment" : "\n     * Combines the state of another {@code IntSummaryStatistics} into this one.\n     *\n     * @param other another {@code IntSummaryStatistics}\n     * @throws NullPointerException if {@code other} is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getCount()",
    "returnType" : "long",
    "comment" : "\n     * Returns the count of values recorded.\n     *\n     * @return the count of values\n     ",
    "links" : [ ]
  }, {
    "name" : "public final long getSum()",
    "returnType" : "long",
    "comment" : "\n     * Returns the sum of values recorded, or zero if no values have been\n     * recorded.\n     *\n     * @return the sum of values, or zero if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMin()",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum value recorded, or {@code Integer.MAX_VALUE} if no\n     * values have been recorded.\n     *\n     * @return the minimum value, or {@code Integer.MAX_VALUE} if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMax()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum value recorded, or {@code Integer.MIN_VALUE} if no\n     * values have been recorded.\n     *\n     * @return the maximum value, or {@code Integer.MIN_VALUE} if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public final double getAverage()",
    "returnType" : "double",
    "comment" : "\n     * Returns the arithmetic mean of values recorded, or zero if no values have been\n     * recorded.\n     *\n     * @return the arithmetic mean of values, or zero if none\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a non-empty string representation of this object suitable for\n     * debugging. The exact presentation format is unspecified and may vary\n     * between implementations and versions.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void accept(int value)", "public void combine(IntSummaryStatistics other)", "public final long getCount()", "public final long getSum()", "public final int getMin()", "public final int getMax()", "public final double getAverage()", "public String toString()" ],
  "variableNames" : [ "count", "sum", "min", "max" ]
}