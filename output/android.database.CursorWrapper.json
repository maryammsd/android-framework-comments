{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/CursorWrapper.java",
  "packageName" : "android.database",
  "className" : "CursorWrapper",
  "comment" : "\n * Wrapper class for Cursor that delegates all calls to the actual cursor object.  The primary\n * use for this class is to extend a cursor while overriding only a subset of its methods.\n ",
  "variables" : [ {
    "name" : "mCursor",
    "type" : "Cursor",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Cursor getWrappedCursor()",
    "returnType" : "Cursor",
    "comment" : "\n     * Gets the underlying cursor that is wrapped by this instance.\n     *\n     * @return The wrapped cursor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isClosed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void deactivate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColumnCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColumnIndex(String columnName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getColumnName(int columnIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getColumnNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(int columnIndex)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getFloat(int columnIndex)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInt(int columnIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLong(int columnIndex)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short getShort(int columnIndex)",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getString(int columnIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getBlob(int columnIndex)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getWantsAllOnMoveCalls()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAfterLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isBeforeFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFirst()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getType(int columnIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isNull(int columnIndex)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToLast()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean move(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToPosition(int position)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToNext()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPosition()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveToPrevious()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean requery()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle respond(Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationUri(ContentResolver cr, Uri uri)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNotificationUris(ContentResolver cr, List<Uri> uris)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri getNotificationUri()",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Uri> getNotificationUris()",
    "returnType" : "List<Uri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterContentObserver(ContentObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mCursor" ],
  "methodNames" : [ "public Cursor getWrappedCursor()", "public void close()", "public boolean isClosed()", "public int getCount()", "public void deactivate()", "public boolean moveToFirst()", "public int getColumnCount()", "public int getColumnIndex(String columnName)", "public int getColumnIndexOrThrow(String columnName) throws IllegalArgumentException", "public String getColumnName(int columnIndex)", "public String[] getColumnNames()", "public double getDouble(int columnIndex)", "public void setExtras(Bundle extras)", "public Bundle getExtras()", "public float getFloat(int columnIndex)", "public int getInt(int columnIndex)", "public long getLong(int columnIndex)", "public short getShort(int columnIndex)", "public String getString(int columnIndex)", "public void copyStringToBuffer(int columnIndex, CharArrayBuffer buffer)", "public byte[] getBlob(int columnIndex)", "public boolean getWantsAllOnMoveCalls()", "public boolean isAfterLast()", "public boolean isBeforeFirst()", "public boolean isFirst()", "public boolean isLast()", "public int getType(int columnIndex)", "public boolean isNull(int columnIndex)", "public boolean moveToLast()", "public boolean move(int offset)", "public boolean moveToPosition(int position)", "public boolean moveToNext()", "public int getPosition()", "public boolean moveToPrevious()", "public void registerContentObserver(ContentObserver observer)", "public void registerDataSetObserver(DataSetObserver observer)", "public boolean requery()", "public Bundle respond(Bundle extras)", "public void setNotificationUri(ContentResolver cr, Uri uri)", "public void setNotificationUris(ContentResolver cr, List<Uri> uris)", "public Uri getNotificationUri()", "public List<Uri> getNotificationUris()", "public void unregisterContentObserver(ContentObserver observer)", "public void unregisterDataSetObserver(DataSetObserver observer)" ]
}