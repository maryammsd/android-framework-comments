{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/adselection/AdSelectionManager.java",
  "packageName" : "android.adservices.adselection",
  "className" : "AdSelectionManager",
  "comment" : "\n * AdSelection Manager provides APIs for app and ad-SDKs to run ad selection processes as well as\n * report impressions.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sLogger",
    "type" : "LoggerFactory.Logger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AD_SELECTION_SERVICE",
    "type" : "String",
    "comment" : "\n     * Constant that represents the service name for {@link AdSelectionManager} to be used in {@link\n     * android.adservices.AdServicesFrameworkInitializer#registerServiceWrappers}\n     *\n     * @hide\n     ",
    "links" : [ "android.adservices.AdServicesFrameworkInitializer#registerServiceWrappers", "android.adservices.adselection.AdSelectionManager" ]
  }, {
    "name" : "AD_ID_TIMEOUT_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_API_WARNING_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdIdExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceBinder",
    "type" : "ServiceBinder<AdSelectionService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdIdManager",
    "type" : "AdIdCompatibleManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceProvider",
    "type" : "ServiceProvider",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AdSelectionManager get(@NonNull Context context)",
    "returnType" : "AdSelectionManager",
    "comment" : "\n     * Factory method for creating an instance of AdSelectionManager.\n     *\n     * @param context The {@link Context} to use\n     * @return A {@link AdSelectionManager} instance\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkContext", "android.adservices.adselection.AdSelectionManager" ]
  }, {
    "name" : "public static AdSelectionManager get(@NonNull Context context, @NonNull AdIdCompatibleManager adIdManager, @NonNull AdSelectionService adSelectionService)",
    "returnType" : "AdSelectionManager",
    "comment" : "\n     * Factory method for creating an instance of AdSelectionManager.\n     *\n     * <p>Note: This is for testing only.\n     *\n     * @param context The {@link Context} to use\n     * @param adIdManager The {@link AdIdCompatibleManager} instance to use\n     * @param adSelectionService The {@link AdSelectionService} instance to use\n     * @return A {@link AdSelectionManager} instance\n     * @hide\n     ",
    "links" : [ "android.adservices.adid.AdIdCompatibleManager", "android.app.sdksandbox.SandboxedSdkContext", "AdSelectionService", "android.adservices.adselection.AdSelectionManager" ]
  }, {
    "name" : "public AdSelectionManager initialize(@NonNull Context context)",
    "returnType" : "AdSelectionManager",
    "comment" : "\n     * Initializes {@link AdSelectionManager} with the given {@code context}.\n     *\n     * <p>This method is called by the {@link SandboxedSdkContext} to propagate the correct context.\n     * For more information check the javadoc on the {@link\n     * android.app.sdksandbox.SdkSandboxSystemServiceRegistry}.\n     *\n     * @hide\n     * @see android.app.sdksandbox.SdkSandboxSystemServiceRegistry\n     ",
    "links" : [ "android.app.sdksandbox.SandboxedSdkContext", "android.app.sdksandbox.SdkSandboxSystemServiceRegistry", "android.adservices.adselection.AdSelectionManager" ]
  }, {
    "name" : "public TestAdSelectionManager getTestAdSelectionManager()",
    "returnType" : "TestAdSelectionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ServiceProvider getServiceProvider()",
    "returnType" : "ServiceProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AdSelectionService doGetService()",
    "returnType" : "AdSelectionService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getAdSelectionData(@NonNull GetAdSelectionDataRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<GetAdSelectionDataOutcome, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Collects custom audience data from device. Returns a compressed and encrypted blob to send to\n     * auction servers for ad selection. For more details, please visit <a\n     * href=\"https://developer.android.com/design-for-safety/privacy-sandbox/protected-audience-bidding-and-auction-services\">Bidding\n     * and Auction Services Explainer</a>.\n     *\n     * <p>Custom audience ads must have a {@code ad_render_id} to be eligible for to be collected.\n     *\n     * <p>See {@link AdSelectionManager#persistAdSelectionResult} for how to process the results of\n     * the ad selection run on server-side with the blob generated by this API.\n     *\n     * <p>The output is passed by the receiver, which either returns an {@link\n     * GetAdSelectionDataOutcome} for a successful run, or an {@link Exception} includes the type of\n     * the exception thrown and the corresponding error message.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to run the ad selection.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link TimeoutException} is thrown, it is caused when a timeout is encountered\n     * during bidding, scoring, or overall selection process to find winning Ad.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     ",
    "links" : [ "android.os.LimitExceededException", "IllegalStateException", "android.adservices.adselection.AdSelectionManager#persistAdSelectionResult", "java.util.concurrent.TimeoutException", "SecurityException", "IllegalArgumentException", "android.adservices.adselection.GetAdSelectionDataOutcome" ]
  }, {
    "name" : "public void persistAdSelectionResult(@NonNull PersistAdSelectionResultRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Persists the ad selection results from the server-side. For more details, please visit <a\n     * href=\"https://developer.android.com/design-for-safety/privacy-sandbox/protected-audience-bidding-and-auction-services\">Bidding\n     * and Auction Services Explainer</a>\n     *\n     * <p>See {@link AdSelectionManager#getAdSelectionData} for how to generate an encrypted blob to\n     * run an ad selection on the server side.\n     *\n     * <p>The output is passed by the receiver, which either returns an {@link AdSelectionOutcome}\n     * for a successful run, or an {@link Exception} includes the type of the exception thrown and\n     * the corresponding error message. The {@link AdSelectionOutcome#getAdSelectionId()} is not\n     * guaranteed to be the same as the {@link\n     * PersistAdSelectionResultRequest#getAdSelectionDataId()} or the deprecated {@link\n     * PersistAdSelectionResultRequest#getAdSelectionId()}.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to run the ad selection.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link TimeoutException} is thrown, it is caused when a timeout is encountered\n     * during bidding, scoring, or overall selection process to find winning Ad.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     ",
    "links" : [ "android.adservices.adselection.AdSelectionOutcome", "android.os.LimitExceededException", "IllegalStateException", "android.adservices.adselection.PersistAdSelectionResultRequest#getAdSelectionDataId()", "java.util.concurrent.TimeoutException", "android.adservices.adselection.AdSelectionOutcome#getAdSelectionId()", "SecurityException", "android.adservices.adselection.PersistAdSelectionResultRequest#getAdSelectionId()", "android.adservices.adselection.AdSelectionManager#getAdSelectionData", "IllegalArgumentException" ]
  }, {
    "name" : "public void selectAds(@NonNull AdSelectionConfig adSelectionConfig, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Runs the ad selection process on device to select a remarketing ad for the caller\n     * application.\n     *\n     * <p>The input {@code adSelectionConfig} is provided by the Ads SDK and the {@link\n     * AdSelectionConfig} object is transferred via a Binder call. For this reason, the total size\n     * of these objects is bound to the Android IPC limitations. Failures to transfer the {@link\n     * AdSelectionConfig} will throws an {@link TransactionTooLargeException}.\n     *\n     * <p>The input {@code adSelectionConfig} contains {@code Decision Logic Uri} that could follow\n     * either the HTTPS or Ad Selection Prebuilt schemas.\n     *\n     * <p>If the URI follows HTTPS schema then the host should match the {@code seller}. Otherwise,\n     * {@link IllegalArgumentException} will be thrown.\n     *\n     * <p>Prebuilt URIs are a way of substituting a generic pre-built logics for the required\n     * JavaScripts for {@code scoreAds}. Prebuilt Uri for this endpoint should follow;\n     *\n     * <ul>\n     *   <li>{@code ad-selection-prebuilt://ad-selection/<name>?<script-generation-parameters>}\n     * </ul>\n     *\n     * <p>If an unsupported prebuilt URI is passed or prebuilt URI feature is disabled by the\n     * service then {@link IllegalArgumentException} will be thrown.\n     *\n     * <p>See {@link AdSelectionConfig.Builder#setDecisionLogicUri} for supported {@code <name>} and\n     * required {@code <script-generation-parameters>}.\n     *\n     * <p>The output is passed by the receiver, which either returns an {@link AdSelectionOutcome}\n     * for a successful run, or an {@link Exception} includes the type of the exception thrown and\n     * the corresponding error message.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to run the ad selection.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link TimeoutException} is thrown, it is caused when a timeout is encountered\n     * during bidding, scoring, or overall selection process to find winning Ad.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     ",
    "links" : [ "android.adservices.adselection.AdSelectionOutcome", "android.os.LimitExceededException", "IllegalStateException", "android.os.TransactionTooLargeException", "AdSelectionConfig.Builder#setDecisionLogicUri", "java.util.concurrent.TimeoutException", "android.adservices.adselection.AdSelectionConfig", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "public void selectAds(@NonNull AdSelectionFromOutcomesConfig adSelectionFromOutcomesConfig, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Selects an ad from the results of previously ran ad selections.\n     *\n     * <p>The input {@code adSelectionFromOutcomesConfig} is provided by the Ads SDK and the {@link\n     * AdSelectionFromOutcomesConfig} object is transferred via a Binder call. For this reason, the\n     * total size of these objects is bound to the Android IPC limitations. Failures to transfer the\n     * {@link AdSelectionFromOutcomesConfig} will throws an {@link TransactionTooLargeException}.\n     *\n     * <p>The output is passed by the receiver, which either returns an {@link AdSelectionOutcome}\n     * for a successful run, or an {@link Exception} includes the type of the exception thrown and\n     * the corresponding error message.\n     *\n     * <p>The input {@code adSelectionFromOutcomesConfig} contains:\n     *\n     * <ul>\n     *   <li>{@code Seller} is required to be a registered {@link\n     *       android.adservices.common.AdTechIdentifier}. Otherwise, {@link IllegalStateException}\n     *       will be thrown.\n     *   <li>{@code List of ad selection ids} should exist and come from {@link\n     *       AdSelectionManager#selectAds} calls originated from the same application. Otherwise,\n     *       {@link IllegalArgumentException} for input validation will raise listing violating ad\n     *       selection ids.\n     *   <li>{@code Selection logic URI} that could follow either the HTTPS or Ad Selection Prebuilt\n     *       schemas.\n     *       <p>If the URI follows HTTPS schema then the host should match the {@code seller}.\n     *       Otherwise, {@link IllegalArgumentException} will be thrown.\n     *       <p>Prebuilt URIs are a way of substituting a generic pre-built logics for the required\n     *       JavaScripts for {@code selectOutcome}. Prebuilt Uri for this endpoint should follow;\n     *       <ul>\n     *         <li>{@code\n     *             ad-selection-prebuilt://ad-selection-from-outcomes/<name>?<script-generation-parameters>}\n     *       </ul>\n     *       <p>If an unsupported prebuilt URI is passed or prebuilt URI feature is disabled by the\n     *       service then {@link IllegalArgumentException} will be thrown.\n     *       <p>See {@link AdSelectionFromOutcomesConfig.Builder#setSelectionLogicUri} for supported\n     *       {@code <name>} and required {@code <script-generation-parameters>}.\n     * </ul>\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to run the ad selection.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link TimeoutException} is thrown, it is caused when a timeout is encountered\n     * during bidding, scoring, or overall selection process to find winning Ad.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     ",
    "links" : [ "android.adservices.adselection.AdSelectionOutcome", "android.os.LimitExceededException", "IllegalStateException", "android.os.TransactionTooLargeException", "android.adservices.common.AdTechIdentifier", "AdSelectionFromOutcomesConfig.Builder#setSelectionLogicUri", "java.util.concurrent.TimeoutException", "SecurityException", "android.adservices.adselection.AdSelectionManager#selectAds", "android.adservices.adselection.AdSelectionFromOutcomesConfig", "IllegalArgumentException" ]
  }, {
    "name" : "public void reportImpression(@NonNull ReportImpressionRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that there is a new impression to report for the ad selected by the\n     * ad-selection run identified by {@code adSelectionId}. There is no guarantee about when the\n     * impression will be reported. The impression reporting could be delayed and reports could be\n     * batched.\n     *\n     * <p>To calculate the winning seller reporting URL, the service fetches the seller's JavaScript\n     * logic from the {@link AdSelectionConfig#getDecisionLogicUri()} found at {@link\n     * ReportImpressionRequest#getAdSelectionConfig()}. Then, the service executes one of the\n     * functions found in the seller JS called {@code reportResult}, providing on-device signals as\n     * well as {@link ReportImpressionRequest#getAdSelectionConfig()} as input parameters.\n     *\n     * <p>The function definition of {@code reportResult} is:\n     *\n     * <p>{@code function reportResult(ad_selection_config, render_url, bid, contextual_signals) {\n     * return { 'status': status, 'results': {'signals_for_buyer': signals_for_buyer,\n     * 'reporting_url': reporting_url } }; } }\n     *\n     * <p>To calculate the winning buyer reporting URL, the service fetches the winning buyer's\n     * JavaScript logic which is fetched via the buyer's {@link\n     * android.adservices.customaudience.CustomAudience#getBiddingLogicUri()}. Then, the service\n     * executes one of the functions found in the buyer JS called {@code reportWin}, providing\n     * on-device signals, {@code signals_for_buyer} calculated by {@code reportResult}, and specific\n     * fields from {@link ReportImpressionRequest#getAdSelectionConfig()} as input parameters.\n     *\n     * <p>The function definition of {@code reportWin} is:\n     *\n     * <p>{@code function reportWin(ad_selection_signals, per_buyer_signals, signals_for_buyer,\n     * contextual_signals, custom_audience_reporting_signals) { return {'status': 0, 'results':\n     * {'reporting_url': reporting_url } }; } }\n     *\n     * <p>In addition, buyers and sellers have the option to register to receive reports on specific\n     * ad events. To do so, they can invoke the platform provided {@code registerAdBeacon} function\n     * inside {@code reportWin} and {@code reportResult} for buyers and sellers, respectively.\n     *\n     * <p>The function definition of {@code registerBeacon} is:\n     *\n     * <p>{@code function registerAdBeacon(beacons)}, where {@code beacons} is a dict of string to\n     * string pairs\n     *\n     * <p>For each ad event a buyer/seller is interested in reports for, they would add an {@code\n     * event_key}: {@code event_reporting_uri} pair to the {@code beacons} dict, where {@code\n     * event_key} is an identifier for that specific event. This {@code event_key} should match\n     * {@link ReportEventRequest#getKey()} when the SDK invokes {@link #reportEvent}. In addition,\n     * each {@code event_reporting_uri} should parse properly into a {@link android.net.Uri}. This\n     * will be the {@link android.net.Uri} reported to when the SDK invokes {@link #reportEvent}.\n     *\n     * <p>When the buyer/seller has added all the pairings they want to receive events for, they can\n     * invoke {@code registerAdBeacon(beacons)}, where {@code beacons} is the name of the dict they\n     * added the pairs to.\n     *\n     * <p>{@code registerAdBeacon} will throw a {@code TypeError} in these situations:\n     *\n     * <ol>\n     *   <li>{@code registerAdBeacon}is called more than once. If this error is caught in\n     *       reportWin/reportResult, the original set of pairings will be registered\n     *   <li>{@code registerAdBeacon} doesn't have exactly 1 dict argument.\n     *   <li>The contents of the 1 dict argument are not all {@code String: String} pairings.\n     * </ol>\n     *\n     * <p>The output is passed by the {@code receiver}, which either returns an empty {@link Object}\n     * for a successful run, or an {@link Exception} includes the type of the exception thrown and\n     * the corresponding error message.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to report the impression.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     *\n     * <p>Impressions will be reported at most once as a best-effort attempt.\n     ",
    "links" : [ "android.os.LimitExceededException", "IllegalStateException", "android.adservices.adselection.ReportImpressionRequest#getAdSelectionConfig()", "android.adservices.customaudience.CustomAudience#getBiddingLogicUri()", "android.adservices.adselection.ReportEventRequest#getKey()", "android.net.Uri", "#reportEvent", "Object", "SecurityException", "android.adservices.adselection.AdSelectionConfig#getDecisionLogicUri()", "IllegalArgumentException" ]
  }, {
    "name" : "public void reportEvent(@NonNull ReportEventRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the service that there is a new ad event to report for the ad selected by the\n     * ad-selection run identified by {@code adSelectionId}. An ad event is any occurrence that\n     * happens to an ad associated with the given {@code adSelectionId}. There is no guarantee about\n     * when the ad event will be reported. The event reporting could be delayed and reports could be\n     * batched.\n     *\n     * <p>Using {@link ReportEventRequest#getKey()}, the service will fetch the {@code reportingUri}\n     * that was registered in {@code registerAdBeacon}. See documentation of {@link\n     * #reportImpression} for more details regarding {@code registerAdBeacon}. Then, the service\n     * will attach {@link ReportEventRequest#getData()} to the request body of a POST request and\n     * send the request. The body of the POST request will have the {@code content-type} of {@code\n     * text/plain}, and the data will be transmitted in {@code charset=UTF-8}.\n     *\n     * <p>The output is passed by the receiver, which either returns an empty {@link Object} for a\n     * successful run, or an {@link Exception} includes the type of the exception thrown and the\n     * corresponding error message.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received to report the ad event.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     *\n     * <p>Events will be reported at most once as a best-effort attempt.\n     ",
    "links" : [ "android.os.LimitExceededException", "IllegalStateException", "#reportImpression", "android.adservices.adselection.ReportEventRequest#getKey()", "android.adservices.adselection.ReportEventRequest#getData()", "Object", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "public void setAppInstallAdvertisers(@NonNull SetAppInstallAdvertisersRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)",
    "returnType" : "void",
    "comment" : "\n     * Gives the provided list of adtechs the ability to do app install filtering on the calling\n     * app.\n     *\n     * <p>The input {@code request} is provided by the Ads SDK and the {@code request} object is\n     * transferred via a Binder call. For this reason, the total size of these objects is bound to\n     * the Android IPC limitations. Failures to transfer the {@code advertisers} will throws an\n     * {@link TransactionTooLargeException}.\n     *\n     * <p>The output is passed by the receiver, which either returns an empty {@link Object} for a\n     * successful run, or an {@link Exception} includes the type of the exception thrown and the\n     * corresponding error message.\n     *\n     * <p>If the {@link IllegalArgumentException} is thrown, it is caused by invalid input argument\n     * the API received.\n     *\n     * <p>If the {@link IllegalStateException} is thrown with error message \"Failure of AdSelection\n     * services.\", it is caused by an internal failure of the ad selection service.\n     *\n     * <p>If the {@link LimitExceededException} is thrown, it is caused when the calling package\n     * exceeds the allowed rate limits and is throttled.\n     *\n     * <p>If the {@link SecurityException} is thrown, it is caused when the caller is not authorized\n     * or permission is not requested.\n     ",
    "links" : [ "android.os.LimitExceededException", "IllegalStateException", "android.os.TransactionTooLargeException", "Object", "SecurityException", "IllegalArgumentException" ]
  }, {
    "name" : "public void updateAdCounterHistogram(@NonNull UpdateAdCounterHistogramRequest updateAdCounterHistogramRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> outcomeReceiver)",
    "returnType" : "void",
    "comment" : "\n     * Updates the counter histograms for an ad which was previously selected by a call to {@link\n     * #selectAds(AdSelectionConfig, Executor, OutcomeReceiver)}.\n     *\n     * <p>The counter histograms are used in ad selection to inform frequency cap filtering on\n     * candidate ads, where ads whose frequency caps are met or exceeded are removed from the\n     * bidding process during ad selection.\n     *\n     * <p>Counter histograms can only be updated for ads specified by the given {@code\n     * adSelectionId} returned by a recent call to FLEDGE ad selection from the same caller app.\n     *\n     * <p>A {@link SecurityException} is returned via the {@code outcomeReceiver} if:\n     *\n     * <ol>\n     *   <li>the app has not declared the correct permissions in its manifest, or\n     *   <li>the app or entity identified by the {@code callerAdTechIdentifier} are not authorized\n     *       to use the API.\n     * </ol>\n     *\n     * An {@link IllegalStateException} is returned via the {@code outcomeReceiver} if the call does\n     * not come from an app with a foreground activity.\n     *\n     * <p>A {@link LimitExceededException} is returned via the {@code outcomeReceiver} if the call\n     * exceeds the calling app's API throttle.\n     *\n     * <p>In all other failure cases, the {@code outcomeReceiver} will return an empty {@link\n     * Object}. Note that to protect user privacy, internal errors will not be sent back via an\n     * exception.\n     ",
    "links" : [ "IllegalStateException", "android.os.LimitExceededException", "SecurityException", "Object", "#selectAds(AdSelectionConfig" ]
  }, {
    "name" : "private String getCallerPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] getAdSelectionData(GetAdSelectionDataResponse response) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getCallerSdkName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getAdId(AdSelectionAdIdCallback adSelectionAdIdCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static AdSelectionManager get(@NonNull Context context)", "public static AdSelectionManager get(@NonNull Context context, @NonNull AdIdCompatibleManager adIdManager, @NonNull AdSelectionService adSelectionService)", "public AdSelectionManager initialize(@NonNull Context context)", "public TestAdSelectionManager getTestAdSelectionManager()", " ServiceProvider getServiceProvider()", " AdSelectionService doGetService()", "public void getAdSelectionData(@NonNull GetAdSelectionDataRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<GetAdSelectionDataOutcome, Exception> receiver)", "public void persistAdSelectionResult(@NonNull PersistAdSelectionResultRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)", "public void selectAds(@NonNull AdSelectionConfig adSelectionConfig, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)", "public void selectAds(@NonNull AdSelectionFromOutcomesConfig adSelectionFromOutcomesConfig, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<AdSelectionOutcome, Exception> receiver)", "public void reportImpression(@NonNull ReportImpressionRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)", "public void reportEvent(@NonNull ReportEventRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)", "public void setAppInstallAdvertisers(@NonNull SetAppInstallAdvertisersRequest request, @NonNull Executor executor, @NonNull OutcomeReceiver<Object, Exception> receiver)", "public void updateAdCounterHistogram(@NonNull UpdateAdCounterHistogramRequest updateAdCounterHistogramRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Object, Exception> outcomeReceiver)", "private String getCallerPackageName()", "private byte[] getAdSelectionData(GetAdSelectionDataResponse response) throws IOException", "private String getCallerSdkName()", "private void getAdId(AdSelectionAdIdCallback adSelectionAdIdCallback)" ],
  "variableNames" : [ "sLogger", "AD_SELECTION_SERVICE", "AD_ID_TIMEOUT_MS", "DEBUG_API_WARNING_MESSAGE", "mAdIdExecutor", "mContext", "mServiceBinder", "mAdIdManager", "mServiceProvider" ]
}