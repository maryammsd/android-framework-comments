{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/WhileOps.java",
  "packageName" : "java.util.stream",
  "className" : "TakeWhileTask",
  "comment" : "\n     * {@code ForkJoinTask} implementing takeWhile computation.\n     * <p>\n     * If the pipeline has encounter order then all tasks to the right of\n     * a task where traversal was short-circuited are cancelled.\n     * The results of completed (and cancelled) tasks are discarded.\n     * The result of merging a short-circuited left task and right task (which\n     * may or may not be short-circuited) is that left task.\n     * <p>\n     * If the pipeline has no encounter order then all tasks to the right of\n     * a task where traversal was short-circuited are cancelled.\n     * The results of completed (and possibly cancelled) tasks are not\n     * discarded, as there is no need to throw away computed results.\n     * The result of merging does not change if a left task was\n     * short-circuited.\n     * No attempt is made, once a leaf task stopped taking, for it to cancel\n     * all other tasks, and further more, short-circuit the computation with its\n     * result.\n     *\n     * @param <P_IN> Input element type to the stream pipeline\n     * @param <P_OUT> Output element type from the stream pipeline\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "op",
    "type" : "AbstractPipeline<P_OUT, P_OUT, ?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "generator",
    "type" : "IntFunction<P_OUT[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isOrdered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "thisNodeSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "shortCircuited",
    "type" : "boolean",
    "comment" : " True if a short-circuited",
    "links" : [ ]
  }, {
    "name" : "completed",
    "type" : "boolean",
    "comment" : " True if completed, must be set after the local result",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected TakeWhileTask<P_IN, P_OUT> makeChild(Spliterator<P_IN> spliterator)",
    "returnType" : "TakeWhileTask<P_IN, P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Node<P_OUT> getEmptyResult()",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Node<P_OUT> doLeaf()",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void onCompletion(CountedCompleter<?> caller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Node<P_OUT> merge()",
    "returnType" : "Node<P_OUT>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected TakeWhileTask<P_IN, P_OUT> makeChild(Spliterator<P_IN> spliterator)", "protected final Node<P_OUT> getEmptyResult()", "protected final Node<P_OUT> doLeaf()", "public final void onCompletion(CountedCompleter<?> caller)", " Node<P_OUT> merge()", "protected void cancel()" ],
  "variableNames" : [ "op", "generator", "isOrdered", "thisNodeSize", "shortCircuited", "completed" ]
}