{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/Script.java",
  "packageName" : "android.renderscript",
  "className" : "Script",
  "comment" : "\n * The parent class for all executable scripts. This should not be used by\n * applications.\n *",
  "variables" : [ {
    "name" : "mKIDs",
    "type" : "SparseArray<KernelID>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIIDs",
    "type" : "SparseArray<InvokeID>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFIDs",
    "type" : "SparseArray<FieldID>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInIdsBuffer",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected KernelID createKernelID(int slot, int sig, Element ein, Element eout)",
    "returnType" : "KernelID",
    "comment" : "\n     * Only to be used by generated reflected classes.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected InvokeID createInvokeID(int slot)",
    "returnType" : "InvokeID",
    "comment" : "\n     * Only to be used by generated reflected classes.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected FieldID createFieldID(int slot, Element e)",
    "returnType" : "FieldID",
    "comment" : "\n     * Only to be used by generated reflected classes.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void invoke(int slot)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void invoke(int slot, FieldPacker v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v, LaunchOptions sc)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void forEach(int slot, Allocation[] ains, Allocation aout, FieldPacker v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void forEach(int slot, Allocation[] ains, Allocation aout, FieldPacker v, LaunchOptions sc)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void reduce(int slot, Allocation[] ains, Allocation aout, LaunchOptions sc)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.  (General reduction)\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bindAllocation(Allocation va, int slot)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, float v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getVarF(int index)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, double v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getVarD(int index)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, int v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVarI(int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, long v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getVarJ(int index)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, boolean v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getVarB(int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, BaseObj o)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, FieldPacker v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVar(int index, FieldPacker v, Element e, int[] dims)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getVarV(int index, FieldPacker v)",
    "returnType" : "void",
    "comment" : "\n     * Only intended for use by generated reflected code.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeZone(String timeZone)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mKIDs", "mIIDs", "mFIDs", "mInIdsBuffer" ],
  "methodNames" : [ "protected KernelID createKernelID(int slot, int sig, Element ein, Element eout)", "protected InvokeID createInvokeID(int slot)", "protected FieldID createFieldID(int slot, Element e)", "protected void invoke(int slot)", "protected void invoke(int slot, FieldPacker v)", "protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v)", "protected void forEach(int slot, Allocation ain, Allocation aout, FieldPacker v, LaunchOptions sc)", "protected void forEach(int slot, Allocation[] ains, Allocation aout, FieldPacker v)", "protected void forEach(int slot, Allocation[] ains, Allocation aout, FieldPacker v, LaunchOptions sc)", "protected void reduce(int slot, Allocation[] ains, Allocation aout, LaunchOptions sc)", "public void bindAllocation(Allocation va, int slot)", "public void setVar(int index, float v)", "public float getVarF(int index)", "public void setVar(int index, double v)", "public double getVarD(int index)", "public void setVar(int index, int v)", "public int getVarI(int index)", "public void setVar(int index, long v)", "public long getVarJ(int index)", "public void setVar(int index, boolean v)", "public boolean getVarB(int index)", "public void setVar(int index, BaseObj o)", "public void setVar(int index, FieldPacker v)", "public void setVar(int index, FieldPacker v, Element e, int[] dims)", "public void getVarV(int index, FieldPacker v)", "public void setTimeZone(String timeZone)" ]
}