{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLContextSpi.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLContextSpi",
  "comment" : "\n * This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)\n * for the <code>SSLContext</code> class.\n *\n * <p> All the abstract methods in this class must be implemented by each\n * cryptographic service provider who wishes to supply the implementation\n * of a particular SSL context.\n *\n * @since 1.4\n * @see SSLContext\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract void engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom sr) throws KeyManagementException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this context.\n     *\n     * @param km the sources of authentication keys\n     * @param tm the sources of peer authentication trust decisions\n     * @param sr the source of randomness\n     * @throws KeyManagementException if this operation fails\n     * @see SSLContext#init(KeyManager [], TrustManager [], SecureRandom)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SSLSocketFactory engineGetSocketFactory()",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Returns a <code>SocketFactory</code> object for this\n     * context.\n     *\n     * @return the <code>SocketFactory</code> object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *         initialization and the <code>engineInit()</code>\n     *         has not been called\n     * @see javax.net.ssl.SSLContext#getSocketFactory()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SSLServerSocketFactory engineGetServerSocketFactory()",
    "returnType" : "SSLServerSocketFactory",
    "comment" : "\n     * Returns a <code>ServerSocketFactory</code> object for\n     * this context.\n     *\n     * @return the <code>ServerSocketFactory</code> object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *         initialization and the <code>engineInit()</code>\n     *         has not been called\n     * @see javax.net.ssl.SSLContext#getServerSocketFactory()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SSLEngine engineCreateSSLEngine()",
    "returnType" : "SSLEngine",
    "comment" : "\n     * Creates a new <code>SSLEngine</code> using this context.\n     * <P>\n     * Applications using this factory method are providing no hints\n     * for an internal session reuse strategy. If hints are desired,\n     * {@link #engineCreateSSLEngine(String, int)} should be used\n     * instead.\n     * <P>\n     * Some cipher suites (such as Kerberos) require remote hostname\n     * information, in which case this factory method should not be used.\n     *\n     * @return  the <code>SSLEngine</code> Object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *         initialization and the <code>engineInit()</code>\n     *         has not been called\n     *\n     * @see     SSLContext#createSSLEngine()\n     *\n     * @since   1.5\n     ",
    "links" : [ "#engineCreateSSLEngine(String" ]
  }, {
    "name" : "protected abstract SSLEngine engineCreateSSLEngine(String host, int port)",
    "returnType" : "SSLEngine",
    "comment" : "\n     * Creates a <code>SSLEngine</code> using this context.\n     * <P>\n     * Applications using this factory method are providing hints\n     * for an internal session reuse strategy.\n     * <P>\n     * Some cipher suites (such as Kerberos) require remote hostname\n     * information, in which case peerHost needs to be specified.\n     *\n     * @param host the non-authoritative name of the host\n     * @param port the non-authoritative port\n     * @return  the <code>SSLEngine</code> Object\n     * @throws IllegalStateException if the SSLContextImpl requires\n     *         initialization and the <code>engineInit()</code>\n     *         has not been called\n     *\n     * @see     SSLContext#createSSLEngine(String, int)\n     *\n     * @since   1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SSLSessionContext engineGetServerSessionContext()",
    "returnType" : "SSLSessionContext",
    "comment" : "\n     * Returns a server <code>SSLSessionContext</code> object for\n     * this context.\n     *\n     * @return the <code>SSLSessionContext</code> object\n     * @see javax.net.ssl.SSLContext#getServerSessionContext()\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SSLSessionContext engineGetClientSessionContext()",
    "returnType" : "SSLSessionContext",
    "comment" : "\n     * Returns a client <code>SSLSessionContext</code> object for\n     * this context.\n     *\n     * @return the <code>SSLSessionContext</code> object\n     * @see javax.net.ssl.SSLContext#getClientSessionContext()\n     ",
    "links" : [ ]
  }, {
    "name" : "private SSLSocket getDefaultSocket()",
    "returnType" : "SSLSocket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected SSLParameters engineGetDefaultSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns a copy of the SSLParameters indicating the default\n     * settings for this SSL context.\n     *\n     * <p>The parameters will always have the ciphersuite and protocols\n     * arrays set to non-null values.\n     *\n     * <p>The default implementation obtains the parameters from an\n     * SSLSocket created by calling the\n     * {@linkplain javax.net.SocketFactory#createSocket\n     * SocketFactory.createSocket()} method of this context's SocketFactory.\n     *\n     * @return a copy of the SSLParameters object with the default settings\n     * @throws UnsupportedOperationException if the default SSL parameters\n     *   could not be obtained.\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "protected SSLParameters engineGetSupportedSSLParameters()",
    "returnType" : "SSLParameters",
    "comment" : "\n     * Returns a copy of the SSLParameters indicating the maximum supported\n     * settings for this SSL context.\n     *\n     * <p>The parameters will always have the ciphersuite and protocols\n     * arrays set to non-null values.\n     *\n     * <p>The default implementation obtains the parameters from an\n     * SSLSocket created by calling the\n     * {@linkplain javax.net.SocketFactory#createSocket\n     * SocketFactory.createSocket()} method of this context's SocketFactory.\n     *\n     * @return a copy of the SSLParameters object with the maximum supported\n     *   settings\n     * @throws UnsupportedOperationException if the supported SSL parameters\n     *   could not be obtained.\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract void engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom sr) throws KeyManagementException", "protected abstract SSLSocketFactory engineGetSocketFactory()", "protected abstract SSLServerSocketFactory engineGetServerSocketFactory()", "protected abstract SSLEngine engineCreateSSLEngine()", "protected abstract SSLEngine engineCreateSSLEngine(String host, int port)", "protected abstract SSLSessionContext engineGetServerSessionContext()", "protected abstract SSLSessionContext engineGetClientSessionContext()", "private SSLSocket getDefaultSocket()", "protected SSLParameters engineGetDefaultSSLParameters()", "protected SSLParameters engineGetSupportedSSLParameters()" ],
  "variableNames" : [ ]
}