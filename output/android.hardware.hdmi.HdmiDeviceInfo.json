{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/hdmi/HdmiDeviceInfo.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiDeviceInfo",
  "comment" : "\n * A class to encapsulate device information for HDMI devices including CEC and MHL. In terms of\n * CEC, this container includes basic information such as logical address, physical address and\n * device type, and additional information like vendor id and osd name. In terms of MHL device, this\n * container includes adopter id and device type. Otherwise, it keeps the information of other type\n * devices for which only port ID, physical address are meaningful.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "DEVICE_TV",
    "type" : "int",
    "comment" : " TV device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_RECORDER",
    "type" : "int",
    "comment" : " Recording device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_RESERVED",
    "type" : "int",
    "comment" : " Device type reserved for future usage. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TUNER",
    "type" : "int",
    "comment" : " Tuner device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_PLAYBACK",
    "type" : "int",
    "comment" : " Playback device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_AUDIO_SYSTEM",
    "type" : "int",
    "comment" : " Audio system device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_PURE_CEC_SWITCH",
    "type" : "int",
    "comment" : " @hide Pure CEC switch device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_VIDEO_PROCESSOR",
    "type" : "int",
    "comment" : " @hide Video processor device type. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_INACTIVE",
    "type" : "int",
    "comment" : " Value indicating the device is not an active source.",
    "links" : [ ]
  }, {
    "name" : "ADDR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Logical address used to indicate the source comes from internal device. The logical address\n     * of TV(0) is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATH_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Physical address used to indicate the source comes from internal device. The physical address\n     * of TV(0) is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "PATH_INVALID",
    "type" : "int",
    "comment" : " Invalid physical address (routing path) ",
    "links" : [ ]
  }, {
    "name" : "PORT_INVALID",
    "type" : "int",
    "comment" : " Invalid port ID ",
    "links" : [ ]
  }, {
    "name" : "ID_INVALID",
    "type" : "int",
    "comment" : " Invalid device ID ",
    "links" : [ ]
  }, {
    "name" : "INACTIVE_DEVICE",
    "type" : "HdmiDeviceInfo",
    "comment" : " Device info used to indicate an inactivated device. ",
    "links" : [ ]
  }, {
    "name" : "HDMI_DEVICE_TYPE_CEC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HDMI_DEVICE_TYPE_MHL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HDMI_DEVICE_TYPE_HARDWARE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HDMI_DEVICE_TYPE_INACTIVE",
    "type" : "int",
    "comment" : " Type used to indicate the device that has relinquished its active source status.",
    "links" : [ ]
  }, {
    "name" : "ID_OFFSET_CEC",
    "type" : "int",
    "comment" : " ID_OFFSET_MHL.",
    "links" : [ ]
  }, {
    "name" : "ID_OFFSET_MHL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_OFFSET_HARDWARE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " Common parameters for all device.",
    "links" : [ ]
  }, {
    "name" : "mHdmiDeviceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhysicalAddress",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPortId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogicalAddress",
    "type" : "int",
    "comment" : " CEC only parameters.",
    "links" : [ ]
  }, {
    "name" : "mDeviceType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevicePowerStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : " MHL only parameters.",
    "links" : [ ]
  }, {
    "name" : "mAdopterId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<HdmiDeviceInfo>",
    "comment" : "\n     * A helper class to deserialize {@link HdmiDeviceInfo} for a parcel.\n     ",
    "links" : [ "android.hardware.hdmi.HdmiDeviceInfo" ]
  } ],
  "methods" : [ {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the id of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int idForCecDevice(int address)",
    "returnType" : "int",
    "comment" : "\n     * Returns the id to be used for CEC device.\n     *\n     * @param address logical address of CEC device\n     * @return id for CEC device\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int idForMhlDevice(int portId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the id to be used for MHL device.\n     *\n     * @param portId port which the MHL device is connected to\n     * @return id for MHL device\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int idForHardware(int portId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the id to be used for hardware port.\n     *\n     * @param portId port id\n     * @return id for hardware port\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLogicalAddress()",
    "returnType" : "int",
    "comment" : "\n     * Returns the CEC logical address of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPhysicalAddress()",
    "returnType" : "int",
    "comment" : "\n     * Returns the physical address of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPortId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceType()",
    "returnType" : "int",
    "comment" : "\n     * Returns CEC type of the device. For more details, refer constants between {@link #DEVICE_TV}\n     * and {@link #DEVICE_INACTIVE}.\n     ",
    "links" : [ "#DEVICE_INACTIVE", "#DEVICE_TV" ]
  }, {
    "name" : "public int getDevicePowerStatus()",
    "returnType" : "int",
    "comment" : "\n     * Returns device's power status. It should be one of the following values.\n     * <ul>\n     * <li>{@link HdmiControlManager#POWER_STATUS_ON}\n     * <li>{@link HdmiControlManager#POWER_STATUS_STANDBY}\n     * <li>{@link HdmiControlManager#POWER_STATUS_TRANSIENT_TO_ON}\n     * <li>{@link HdmiControlManager#POWER_STATUS_TRANSIENT_TO_STANDBY}\n     * <li>{@link HdmiControlManager#POWER_STATUS_UNKNOWN}\n     * </ul>\n     ",
    "links" : [ "android.hardware.hdmi.HdmiControlManager#POWER_STATUS_TRANSIENT_TO_ON", "android.hardware.hdmi.HdmiControlManager#POWER_STATUS_ON", "android.hardware.hdmi.HdmiControlManager#POWER_STATUS_STANDBY", "android.hardware.hdmi.HdmiControlManager#POWER_STATUS_TRANSIENT_TO_STANDBY", "android.hardware.hdmi.HdmiControlManager#POWER_STATUS_UNKNOWN" ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * Returns MHL device id. Return -1 for non-MHL device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAdopterId()",
    "returnType" : "int",
    "comment" : "\n     * Returns MHL adopter id. Return -1 for non-MHL device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSourceType()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the device is of a type that can be an input source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCecDevice()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the device represents an HDMI-CEC device. {@code false} if the device\n     * is either MHL or other device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMhlDevice()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the device represents an MHL device. {@code false} if the device is\n     * either CEC or other device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInactivated()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the device represents an inactivated device that relinquishes\n     * its status as active source by &lt;Active Source&gt; (HDMI-CEC) or Content-off (MHL).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayName()",
    "returnType" : "String",
    "comment" : "\n     * Returns display (OSD) name of the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVendorId()",
    "returnType" : "int",
    "comment" : "\n     * Returns vendor id of the device. Vendor id is used to distinguish devices built by other\n     * manufactures. This is required for vendor-specific command on CEC standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Describes the kinds of special objects contained in this Parcelable's marshalled\n     * representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Serializes this object into a {@link Parcel}.\n     *\n     * @param dest The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written. May be 0 or\n     *            {@link Parcelable#PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "android.os.Parcelable#PARCELABLE_WRITE_RETURN_VALUE", "android.os.Parcel" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEVICE_TV", "DEVICE_RECORDER", "DEVICE_RESERVED", "DEVICE_TUNER", "DEVICE_PLAYBACK", "DEVICE_AUDIO_SYSTEM", "DEVICE_PURE_CEC_SWITCH", "DEVICE_VIDEO_PROCESSOR", "DEVICE_INACTIVE", "ADDR_INTERNAL", "PATH_INTERNAL", "PATH_INVALID", "PORT_INVALID", "ID_INVALID", "INACTIVE_DEVICE", "HDMI_DEVICE_TYPE_CEC", "HDMI_DEVICE_TYPE_MHL", "HDMI_DEVICE_TYPE_HARDWARE", "HDMI_DEVICE_TYPE_INACTIVE", "ID_OFFSET_CEC", "ID_OFFSET_MHL", "ID_OFFSET_HARDWARE", "mId", "mHdmiDeviceType", "mPhysicalAddress", "mPortId", "mLogicalAddress", "mDeviceType", "mVendorId", "mDisplayName", "mDevicePowerStatus", "mDeviceId", "mAdopterId", "CREATOR" ],
  "methodNames" : [ "public int getId()", "public static int idForCecDevice(int address)", "public static int idForMhlDevice(int portId)", "public static int idForHardware(int portId)", "public int getLogicalAddress()", "public int getPhysicalAddress()", "public int getPortId()", "public int getDeviceType()", "public int getDevicePowerStatus()", "public int getDeviceId()", "public int getAdopterId()", "public boolean isSourceType()", "public boolean isCecDevice()", "public boolean isMhlDevice()", "public boolean isInactivated()", "public String getDisplayName()", "public int getVendorId()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public String toString()", "public boolean equals(@Nullable Object obj)" ]
}