{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/RelativeDateTimeFormatter.java",
  "packageName" : "android.icu.text",
  "className" : "RelativeDateTimeFormatter",
  "comment" : "\n * Formats simple relative dates. There are two types of relative dates that\n * it handles:\n * <ul>\n *   <li>relative dates with a quantity e.g \"in 5 days\"</li>\n *   <li>relative dates without a quantity e.g \"next Tuesday\"</li>\n * </ul>\n * <p>\n * This API is very basic and is intended to be a building block for more\n * fancy APIs. The caller tells it exactly what to display in a locale\n * independent way. While this class automatically provides the correct plural\n * forms, the grammatical form is otherwise as neutral as possible. It is the\n * caller's responsibility to handle cut-off logic such as deciding between\n * displaying \"in 7 days\" or \"in 1 week.\" This API supports relative dates\n * involving one single unit. This API does not support relative dates\n * involving compound units.\n * e.g \"in 5 days and 4 hours\" nor does it support parsing.\n * This class is both immutable and thread-safe.\n * <p>\n * Here are some examples of use:\n * <blockquote>\n * <pre>\n * RelativeDateTimeFormatter fmt = RelativeDateTimeFormatter.getInstance();\n * fmt.format(1, Direction.NEXT, RelativeUnit.DAYS); // \"in 1 day\"\n * fmt.format(3, Direction.NEXT, RelativeUnit.DAYS); // \"in 3 days\"\n * fmt.format(3.2, Direction.LAST, RelativeUnit.YEARS); // \"3.2 years ago\"\n *\n * fmt.format(Direction.LAST, AbsoluteUnit.SUNDAY); // \"last Sunday\"\n * fmt.format(Direction.THIS, AbsoluteUnit.SUNDAY); // \"this Sunday\"\n * fmt.format(Direction.NEXT, AbsoluteUnit.SUNDAY); // \"next Sunday\"\n * fmt.format(Direction.PLAIN, AbsoluteUnit.SUNDAY); // \"Sunday\"\n *\n * fmt.format(Direction.LAST, AbsoluteUnit.DAY); // \"yesterday\"\n * fmt.format(Direction.THIS, AbsoluteUnit.DAY); // \"today\"\n * fmt.format(Direction.NEXT, AbsoluteUnit.DAY); // \"tomorrow\"\n *\n * fmt.format(Direction.PLAIN, AbsoluteUnit.NOW); // \"now\"\n * </pre>\n * </blockquote>\n * <p>\n * In the future, we may add more forms, such as abbreviated/short forms\n * (3 secs ago), and relative day periods (\"yesterday afternoon\"), etc.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "styleToDateFormatSymbolsWidth",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "qualitativeUnitMap",
    "type" : "EnumMap<Style, EnumMap<AbsoluteUnit, EnumMap<Direction, String>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "patternMap",
    "type" : "EnumMap<Style, EnumMap<RelativeUnit, String[][]>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "combinedDateAndTime",
    "type" : "String",
    "comment" : " MessageFormat pattern for combining date and time.",
    "links" : [ ]
  }, {
    "name" : "pluralRules",
    "type" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numberFormat",
    "type" : "NumberFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "style",
    "type" : "Style",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "capitalizationContext",
    "type" : "DisplayContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "breakIterator",
    "type" : "BreakIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "locale",
    "type" : "ULocale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dateFormatSymbols",
    "type" : "DateFormatSymbols",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fallbackCache",
    "type" : "Style[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "Cache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static RelativeDateTimeFormatter getInstance()",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for the default locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RelativeDateTimeFormatter getInstance(ULocale locale)",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for a particular locale.\n     *\n     * @param locale the locale.\n     * @return An instance of RelativeDateTimeFormatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RelativeDateTimeFormatter getInstance(Locale locale)",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for a particular {@link java.util.Locale}.\n     *\n     * @param locale the {@link java.util.Locale}.\n     * @return An instance of RelativeDateTimeFormatter.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static RelativeDateTimeFormatter getInstance(ULocale locale, NumberFormat nf)",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for a particular locale that uses a particular\n     * NumberFormat object.\n     *\n     * @param locale the locale\n     * @param nf the number format object. It is defensively copied to ensure thread-safety\n     * and immutability of this class.\n     * @return An instance of RelativeDateTimeFormatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RelativeDateTimeFormatter getInstance(ULocale locale, NumberFormat nf, Style style, DisplayContext capitalizationContext)",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for a particular locale that uses a particular\n     * NumberFormat object, style, and capitalization context\n     *\n     * @param locale the locale\n     * @param nf the number format object. It is defensively copied to ensure thread-safety\n     * and immutability of this class. May be null.\n     * @param style the style.\n     * @param capitalizationContext the capitalization context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static RelativeDateTimeFormatter getInstance(Locale locale, NumberFormat nf)",
    "returnType" : "RelativeDateTimeFormatter",
    "comment" : "\n     * Returns a RelativeDateTimeFormatter for a particular {@link java.util.Locale} that uses a\n     * particular NumberFormat object.\n     *\n     * @param locale the {@link java.util.Locale}\n     * @param nf the number format object. It is defensively copied to ensure thread-safety\n     * and immutability of this class.\n     * @return An instance of RelativeDateTimeFormatter.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public String format(double quantity, Direction direction, RelativeUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Formats a relative date with a quantity such as \"in 5 days\" or\n     * \"3 months ago\".\n     *\n     * This method returns a String. To get more information about the\n     * formatting result, use formatToValue().\n     *\n     * @param quantity The numerical amount e.g 5. This value is formatted\n     * according to this object's {@link NumberFormat} object.\n     * @param direction NEXT means a future relative date; LAST means a past\n     * relative date.\n     * @param unit the unit e.g day? month? year?\n     * @return the formatted string\n     * @throws IllegalArgumentException if direction is something other than\n     * NEXT or LAST.\n     ",
    "links" : [ "android.icu.text.NumberFormat" ]
  }, {
    "name" : "public FormattedRelativeDateTime formatToValue(double quantity, Direction direction, RelativeUnit unit)",
    "returnType" : "FormattedRelativeDateTime",
    "comment" : "\n     * Formats a relative date with a quantity such as \"in 5 days\" or\n     * \"3 months ago\".\n     *\n     * This method returns a FormattedRelativeDateTime, which exposes more\n     * information than the String returned by format().\n     *\n     * @param quantity The numerical amount e.g 5. This value is formatted\n     * according to this object's {@link NumberFormat} object.\n     * @param direction NEXT means a future relative date; LAST means a past\n     * relative date.\n     * @param unit the unit e.g day? month? year?\n     * @return the formatted relative datetime\n     * @throws IllegalArgumentException if direction is something other than\n     * NEXT or LAST.\n     ",
    "links" : [ "android.icu.text.NumberFormat" ]
  }, {
    "name" : "private FormattedStringBuilder formatImpl(double quantity, Direction direction, RelativeUnit unit)",
    "returnType" : "FormattedStringBuilder",
    "comment" : " Implementation method for format and formatToValue with RelativeUnit ",
    "links" : [ ]
  }, {
    "name" : "public String formatNumeric(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Format a combination of RelativeDateTimeUnit and numeric offset\n     * using a numeric style, e.g. \"1 week ago\", \"in 1 week\",\n     * \"5 weeks ago\", \"in 5 weeks\".\n     *\n     * This method returns a String. To get more information about the\n     * formatting result, use formatNumericToValue().\n     *\n     * @param offset    The signed offset for the specified unit. This\n     *                  will be formatted according to this object's\n     *                  NumberFormat object.\n     * @param unit      The unit to use when formatting the relative\n     *                  date, e.g. RelativeDateTimeUnit.WEEK,\n     *                  RelativeDateTimeUnit.FRIDAY.\n     * @return          The formatted string (may be empty in case of error)\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedRelativeDateTime formatNumericToValue(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "FormattedRelativeDateTime",
    "comment" : "\n     * Format a combination of RelativeDateTimeUnit and numeric offset\n     * using a numeric style, e.g. \"1 week ago\", \"in 1 week\",\n     * \"5 weeks ago\", \"in 5 weeks\".\n     *\n     * This method returns a FormattedRelativeDateTime, which exposes more\n     * information than the String returned by formatNumeric().\n     *\n     * @param offset    The signed offset for the specified unit. This\n     *                  will be formatted according to this object's\n     *                  NumberFormat object.\n     * @param unit      The unit to use when formatting the relative\n     *                  date, e.g. RelativeDateTimeUnit.WEEK,\n     *                  RelativeDateTimeUnit.FRIDAY.\n     * @return          The formatted string (may be empty in case of error)\n     ",
    "links" : [ ]
  }, {
    "name" : "private FormattedStringBuilder formatNumericImpl(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "FormattedStringBuilder",
    "comment" : " Implementation method for formatNumeric and formatNumericToValue ",
    "links" : [ ]
  }, {
    "name" : "public String format(Direction direction, AbsoluteUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Formats a relative date without a quantity.\n     *\n     * This method returns a String. To get more information about the\n     * formatting result, use formatToValue().\n     *\n     * @param direction NEXT, LAST, THIS, etc.\n     * @param unit e.g SATURDAY, DAY, MONTH\n     * @return the formatted string. If direction has a value that is documented as not being\n     *  fully supported in every locale (for example NEXT_2 or LAST_2) then this function may\n     *  return null to signal that no formatted string is available.\n     * @throws IllegalArgumentException if the direction is incompatible with\n     * unit this can occur with NOW which can only take PLAIN.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedRelativeDateTime formatToValue(Direction direction, AbsoluteUnit unit)",
    "returnType" : "FormattedRelativeDateTime",
    "comment" : "\n     * Formats a relative date without a quantity.\n     *\n     * This method returns a FormattedRelativeDateTime, which exposes more\n     * information than the String returned by format().\n     *\n     * @param direction NEXT, LAST, THIS, etc.\n     * @param unit e.g SATURDAY, DAY, MONTH\n     * @return the formatted string. If direction has a value that is documented as not being\n     *  fully supported in every locale (for example NEXT_2 or LAST_2) then this function may\n     *  return null to signal that no formatted string is available.\n     * @throws IllegalArgumentException if the direction is incompatible with\n     * unit this can occur with NOW which can only take PLAIN.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String formatAbsoluteImpl(Direction direction, AbsoluteUnit unit)",
    "returnType" : "String",
    "comment" : " Implementation method for format and formatToValue with AbsoluteUnit ",
    "links" : [ ]
  }, {
    "name" : "public String format(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "String",
    "comment" : "\n     * Format a combination of RelativeDateTimeUnit and numeric offset\n     * using a text style if possible, e.g. \"last week\", \"this week\",\n     * \"next week\", \"yesterday\", \"tomorrow\". Falls back to numeric\n     * style if no appropriate text term is available for the specified\n     * offset in the object’s locale.\n     *\n     * This method returns a String. To get more information about the\n     * formatting result, use formatToValue().\n     *\n     * @param offset    The signed offset for the specified field.\n     * @param unit      The unit to use when formatting the relative\n     *                  date, e.g. RelativeDateTimeUnit.WEEK,\n     *                  RelativeDateTimeUnit.FRIDAY.\n     * @return          The formatted string (may be empty in case of error)\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedRelativeDateTime formatToValue(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "FormattedRelativeDateTime",
    "comment" : "\n     * Format a combination of RelativeDateTimeUnit and numeric offset\n     * using a text style if possible, e.g. \"last week\", \"this week\",\n     * \"next week\", \"yesterday\", \"tomorrow\". Falls back to numeric\n     * style if no appropriate text term is available for the specified\n     * offset in the object’s locale.\n     *\n     * This method returns a FormattedRelativeDateTime, which exposes more\n     * information than the String returned by format().\n     *\n     * @param offset    The signed offset for the specified field.\n     * @param unit      The unit to use when formatting the relative\n     *                  date, e.g. RelativeDateTimeUnit.WEEK,\n     *                  RelativeDateTimeUnit.FRIDAY.\n     * @return          The formatted string (may be empty in case of error)\n     ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence formatRelativeImpl(double offset, RelativeDateTimeUnit unit)",
    "returnType" : "CharSequence",
    "comment" : " Implementation method for format and formatToValue with RelativeDateTimeUnit. ",
    "links" : [ ]
  }, {
    "name" : "private String getAbsoluteUnitString(Style style, AbsoluteUnit unit, Direction direction)",
    "returnType" : "String",
    "comment" : "\n     * Gets the string value from qualitativeUnitMap with fallback based on style.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String combineDateAndTime(String relativeDateString, String timeString)",
    "returnType" : "String",
    "comment" : "\n     * Combines a relative date string and a time string in this object's\n     * locale. This is done with the same date-time separator used for the\n     * default calendar in this locale.\n     * @param relativeDateString the relative date e.g 'yesterday'\n     * @param timeString the time e.g '3:45'\n     * @return the date and time concatenated according to the default\n     * calendar in this locale e.g 'yesterday, 3:45'\n     ",
    "links" : [ ]
  }, {
    "name" : "public NumberFormat getNumberFormat()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * Returns a copy of the NumberFormat this object is using.\n     * @return A copy of the NumberFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayContext getCapitalizationContext()",
    "returnType" : "DisplayContext",
    "comment" : "\n     * Return capitalization context.\n     * @return The capitalization context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Style getFormatStyle()",
    "returnType" : "Style",
    "comment" : "\n     * Return style\n     * @return The formatting style.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String adjustForContext(String originalFormattedString)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkNoAdjustForContext()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getRelativeUnitPluralPattern(Style style, RelativeUnit unit, int pastFutureIndex, StandardPlural pluralForm)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getRelativeUnitPattern(Style style, RelativeUnit unit, int pastFutureIndex, StandardPlural pluralForm)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Direction keyToDirection(UResource.Key key)",
    "returnType" : "Direction",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static RelativeDateTimeFormatter getInstance()", "public static RelativeDateTimeFormatter getInstance(ULocale locale)", "public static RelativeDateTimeFormatter getInstance(Locale locale)", "public static RelativeDateTimeFormatter getInstance(ULocale locale, NumberFormat nf)", "public static RelativeDateTimeFormatter getInstance(ULocale locale, NumberFormat nf, Style style, DisplayContext capitalizationContext)", "public static RelativeDateTimeFormatter getInstance(Locale locale, NumberFormat nf)", "public String format(double quantity, Direction direction, RelativeUnit unit)", "public FormattedRelativeDateTime formatToValue(double quantity, Direction direction, RelativeUnit unit)", "private FormattedStringBuilder formatImpl(double quantity, Direction direction, RelativeUnit unit)", "public String formatNumeric(double offset, RelativeDateTimeUnit unit)", "public FormattedRelativeDateTime formatNumericToValue(double offset, RelativeDateTimeUnit unit)", "private FormattedStringBuilder formatNumericImpl(double offset, RelativeDateTimeUnit unit)", "public String format(Direction direction, AbsoluteUnit unit)", "public FormattedRelativeDateTime formatToValue(Direction direction, AbsoluteUnit unit)", "private String formatAbsoluteImpl(Direction direction, AbsoluteUnit unit)", "public String format(double offset, RelativeDateTimeUnit unit)", "public FormattedRelativeDateTime formatToValue(double offset, RelativeDateTimeUnit unit)", "private CharSequence formatRelativeImpl(double offset, RelativeDateTimeUnit unit)", "private String getAbsoluteUnitString(Style style, AbsoluteUnit unit, Direction direction)", "public String combineDateAndTime(String relativeDateString, String timeString)", "public NumberFormat getNumberFormat()", "public DisplayContext getCapitalizationContext()", "public Style getFormatStyle()", "private String adjustForContext(String originalFormattedString)", "private void checkNoAdjustForContext()", "private String getRelativeUnitPluralPattern(Style style, RelativeUnit unit, int pastFutureIndex, StandardPlural pluralForm)", "private String getRelativeUnitPattern(Style style, RelativeUnit unit, int pastFutureIndex, StandardPlural pluralForm)", "private static Direction keyToDirection(UResource.Key key)" ],
  "variableNames" : [ "styleToDateFormatSymbolsWidth", "qualitativeUnitMap", "patternMap", "combinedDateAndTime", "pluralRules", "numberFormat", "style", "capitalizationContext", "breakIterator", "locale", "dateFormatSymbols", "fallbackCache", "cache" ]
}