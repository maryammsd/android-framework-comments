{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/Attr.java",
  "packageName" : "org.w3c.dom",
  "className" : "Attr",
  "comment" : "\n * The <code>Attr</code> interface represents an attribute in an\n * <code>Element</code> object. Typically the allowable values for the\n * attribute are defined in a schema associated with the document.\n * <p><code>Attr</code> objects inherit the <code>Node</code> interface, but\n * since they are not actually child nodes of the element they describe, the\n * DOM does not consider them part of the document tree. Thus, the\n * <code>Node</code> attributes <code>parentNode</code>,\n * <code>previousSibling</code>, and <code>nextSibling</code> have a\n * <code>null</code> value for <code>Attr</code> objects. The DOM takes the\n * view that attributes are properties of elements rather than having a\n * separate identity from the elements they are associated with; this should\n * make it more efficient to implement such features as default attributes\n * associated with all elements of a given type. Furthermore,\n * <code>Attr</code> nodes may not be immediate children of a\n * <code>DocumentFragment</code>. However, they can be associated with\n * <code>Element</code> nodes contained within a\n * <code>DocumentFragment</code>. In short, users and implementors of the\n * DOM need to be aware that <code>Attr</code> nodes have some things in\n * common with other objects inheriting the <code>Node</code> interface, but\n * they also are quite distinct.\n * <p>The attribute's effective value is determined as follows: if this\n * attribute has been explicitly assigned any value, that value is the\n * attribute's effective value; otherwise, if there is a declaration for\n * this attribute, and that declaration includes a default value, then that\n * default value is the attribute's effective value; otherwise, the\n * attribute does not exist on this element in the structure model until it\n * has been explicitly added. Note that the <code>Node.nodeValue</code>\n * attribute on the <code>Attr</code> instance can also be used to retrieve\n * the string version of the attribute's value(s).\n * <p> If the attribute was not explicitly given a value in the instance\n * document but has a default value provided by the schema associated with\n * the document, an attribute node will be created with\n * <code>specified</code> set to <code>false</code>. Removing attribute\n * nodes for which a default value is defined in the schema generates a new\n * attribute node with the default value and <code>specified</code> set to\n * <code>false</code>. If validation occurred while invoking\n * <code>Document.normalizeDocument()</code>, attribute nodes with\n * <code>specified</code> equals to <code>false</code> are recomputed\n * according to the default attribute values provided by the schema. If no\n * default value is associate with this attribute in the schema, the\n * attribute node is discarded.\n * <p>In XML, where the value of an attribute can contain entity references,\n * the child nodes of the <code>Attr</code> node may be either\n * <code>Text</code> or <code>EntityReference</code> nodes (when these are\n * in use; see the description of <code>EntityReference</code> for\n * discussion).\n * <p>The DOM Core represents all attribute values as simple strings, even if\n * the DTD or schema associated with the document declares them of some\n * specific type such as tokenized.\n * <p>The way attribute value normalization is performed by the DOM\n * implementation depends on how much the implementation knows about the\n * schema in use. Typically, the <code>value</code> and\n * <code>nodeValue</code> attributes of an <code>Attr</code> node initially\n * returns the normalized value given by the parser. It is also the case\n * after <code>Document.normalizeDocument()</code> is called (assuming the\n * right options have been set). But this may not be the case after\n * mutation, independently of whether the mutation is performed by setting\n * the string value directly or by changing the <code>Attr</code> child\n * nodes. In particular, this is true when <a href='http://www.w3.org/TR/2004/REC-xml-20040204#dt-charref'>character\n * references</a> are involved, given that they are not represented in the DOM and they\n * impact attribute value normalization. On the other hand, if the\n * implementation knows about the schema in use when the attribute value is\n * changed, and it is of a different type than CDATA, it may normalize it\n * again at that time. This is especially true of specialized DOM\n * implementations, such as SVG DOM implementations, which store attribute\n * values in an internal form different from a string.\n * <p>The following table gives some examples of the relations between the\n * attribute value in the original document (parsed attribute), the value as\n * exposed in the DOM, and the serialization of the value:\n * <table border='1' cellpadding='3'>\n * <tr>\n * <th>Examples</th>\n * <th>Parsed\n * attribute value</th>\n * <th>Initial <code>Attr.value</code></th>\n * <th>Serialized attribute value</th>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>\n * Character reference</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x&amp;#178;=5\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x\\u00b2=5\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x&amp;#178;=5\"</pre>\n * </td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>Built-in\n * character entity</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"y&amp;lt;6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"y&lt;6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"y&amp;lt;6\"</pre>\n * </td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>Literal newline between</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\n * \"x=5&amp;#10;y=6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x=5 y=6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x=5&amp;#10;y=6\"</pre>\n * </td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>Normalized newline between</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x=5\n * y=6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x=5 y=6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\"x=5 y=6\"</pre>\n * </td>\n * </tr>\n * <tr>\n * <td valign='top' rowspan='1' colspan='1'>Entity <code>e</code> with literal newline</td>\n * <td valign='top' rowspan='1' colspan='1'>\n * <pre>\n * &lt;!ENTITY e '...&amp;#10;...'&gt; [...]&gt; \"x=5&amp;e;y=6\"</pre>\n * </td>\n * <td valign='top' rowspan='1' colspan='1'><em>Dependent on Implementation and Load Options</em></td>\n * <td valign='top' rowspan='1' colspan='1'><em>Dependent on Implementation and Load/Save Options</em></td>\n * </tr>\n * </table>\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this attribute. If <code>Node.localName</code> is\n     * different from <code>null</code>, this attribute is a qualified name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpecified()",
    "returnType" : "boolean",
    "comment" : "\n     *  <code>True</code> if this attribute was explicitly given a value in\n     * the instance document, <code>false</code> otherwise. If the\n     * application changed the value of this attribute node (even if it ends\n     * up having the same value as the default value) then it is set to\n     * <code>true</code>. The implementation may handle attributes with\n     * default values from other schemas similarly but applications should\n     * use <code>Document.normalizeDocument()</code> to guarantee this\n     * information is up-to-date.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue()",
    "returnType" : "String",
    "comment" : "\n     * On retrieval, the value of the attribute is returned as a string.\n     * Character and general entity references are replaced with their\n     * values. See also the method <code>getAttribute</code> on the\n     * <code>Element</code> interface.\n     * <br>On setting, this creates a <code>Text</code> node with the unparsed\n     * contents of the string, i.e. any characters that an XML processor\n     * would recognize as markup are instead treated as literal text. See\n     * also the method <code>Element.setAttribute()</code>.\n     * <br> Some specialized implementations, such as some [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>]\n     * implementations, may do normalization automatically, even after\n     * mutation; in such case, the value on retrieval may differ from the\n     * value on setting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(String value) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * On retrieval, the value of the attribute is returned as a string.\n     * Character and general entity references are replaced with their\n     * values. See also the method <code>getAttribute</code> on the\n     * <code>Element</code> interface.\n     * <br>On setting, this creates a <code>Text</code> node with the unparsed\n     * contents of the string, i.e. any characters that an XML processor\n     * would recognize as markup are instead treated as literal text. See\n     * also the method <code>Element.setAttribute()</code>.\n     * <br> Some specialized implementations, such as some [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>]\n     * implementations, may do normalization automatically, even after\n     * mutation; in such case, the value on retrieval may differ from the\n     * value on setting.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Element getOwnerElement()",
    "returnType" : "Element",
    "comment" : "\n     * The <code>Element</code> node this attribute is attached to or\n     * <code>null</code> if this attribute is not in use.\n     * @since DOM Level 2\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeInfo getSchemaTypeInfo()",
    "returnType" : "TypeInfo",
    "comment" : "\n     *  The type information associated with this attribute. While the type\n     * information contained in this attribute is guarantee to be correct\n     * after loading the document or invoking\n     * <code>Document.normalizeDocument()</code>, <code>schemaTypeInfo</code>\n     *  may not be reliable if the node was moved.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isId()",
    "returnType" : "boolean",
    "comment" : "\n     *  Returns whether this attribute is known to be of type ID (i.e. to\n     * contain an identifier for its owner element) or not. When it is and\n     * its value is unique, the <code>ownerElement</code> of this attribute\n     * can be retrieved using the method <code>Document.getElementById</code>\n     * . The implementation could use several ways to determine if an\n     * attribute node is known to contain an identifier:\n     * <ul>\n     * <li> If validation\n     * occurred using an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]\n     *  while loading the document or while invoking\n     * <code>Document.normalizeDocument()</code>, the post-schema-validation\n     * infoset contributions (PSVI contributions) values are used to\n     * determine if this attribute is a schema-determined ID attribute using\n     * the <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-sdi'>\n     * schema-determined ID</a> definition in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]\n     * .\n     * </li>\n     * <li> If validation occurred using a DTD while loading the document or\n     * while invoking <code>Document.normalizeDocument()</code>, the infoset <b>[type definition]</b> value is used to determine if this attribute is a DTD-determined ID\n     * attribute using the <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-ddi'>\n     * DTD-determined ID</a> definition in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]\n     * .\n     * </li>\n     * <li> from the use of the methods <code>Element.setIdAttribute()</code>,\n     * <code>Element.setIdAttributeNS()</code>, or\n     * <code>Element.setIdAttributeNode()</code>, i.e. it is an\n     * user-determined ID attribute;\n     * <p ><b>Note:</b>  XPointer framework (see section 3.2 in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]\n     * ) consider the DOM user-determined ID attribute as being part of the\n     * XPointer externally-determined ID definition.\n     * </li>\n     * <li> using mechanisms that\n     * are outside the scope of this specification, it is then an\n     * externally-determined ID attribute. This includes using schema\n     * languages different from XML schema and DTD.\n     * </li>\n     * </ul>\n     * <br> If validation occurred while invoking\n     * <code>Document.normalizeDocument()</code>, all user-determined ID\n     * attributes are reset and all attribute nodes ID information are then\n     * reevaluated in accordance to the schema used. As a consequence, if\n     * the <code>Attr.schemaTypeInfo</code> attribute contains an ID type,\n     * <code>isId</code> will always return true.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getName()", "public boolean getSpecified()", "public String getValue()", "public void setValue(String value) throws DOMException", "public Element getOwnerElement()", "public TypeInfo getSchemaTypeInfo()", "public boolean isId()" ],
  "variableNames" : [ ]
}