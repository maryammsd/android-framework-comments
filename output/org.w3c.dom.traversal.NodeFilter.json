{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/traversal/NodeFilter.java",
  "packageName" : "org.w3c.dom.traversal",
  "className" : "NodeFilter",
  "comment" : "\n * Filters are objects that know how to \"filter out\" nodes. If a\n * <code>NodeIterator</code> or <code>TreeWalker</code> is given a\n * <code>NodeFilter</code>, it applies the filter before it returns the next\n * node. If the filter says to accept the node, the traversal logic returns\n * it; otherwise, traversal looks for the next node and pretends that the\n * node that was rejected was not there.\n * <p>The DOM does not provide any filters. <code>NodeFilter</code> is just an\n * interface that users can implement to provide their own filters.\n * <p><code>NodeFilters</code> do not need to know how to traverse from node\n * to node, nor do they need to know anything about the data structure that\n * is being traversed. This makes it very easy to write filters, since the\n * only thing they have to know how to do is evaluate a single node. One\n * filter may be used with a number of different kinds of traversals,\n * encouraging code reuse.\n * <p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.\n * @since DOM Level 2\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "FILTER_ACCEPT",
    "type" : "short",
    "comment" : "\n     * Accept the node. Navigation methods defined for\n     * <code>NodeIterator</code> or <code>TreeWalker</code> will return this\n     * node.\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_REJECT",
    "type" : "short",
    "comment" : "\n     * Reject the node. Navigation methods defined for\n     * <code>NodeIterator</code> or <code>TreeWalker</code> will not return\n     * this node. For <code>TreeWalker</code>, the children of this node\n     * will also be rejected. <code>NodeIterators</code> treat this as a\n     * synonym for <code>FILTER_SKIP</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_SKIP",
    "type" : "short",
    "comment" : "\n     * Skip this single node. Navigation methods defined for\n     * <code>NodeIterator</code> or <code>TreeWalker</code> will not return\n     * this node. For both <code>NodeIterator</code> and\n     * <code>TreeWalker</code>, the children of this node will still be\n     * considered.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ALL",
    "type" : "int",
    "comment" : "\n     * Show all <code>Nodes</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ELEMENT",
    "type" : "int",
    "comment" : "\n     * Show <code>Element</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATTRIBUTE",
    "type" : "int",
    "comment" : "\n     * Show <code>Attr</code> nodes. This is meaningful only when creating an\n     * <code>NodeIterator</code> or <code>TreeWalker</code> with an\n     * attribute node as its <code>root</code>; in this case, it means that\n     * the attribute node will appear in the first position of the iteration\n     * or traversal. Since attributes are never children of other nodes,\n     * they do not appear when traversing over the document tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_TEXT",
    "type" : "int",
    "comment" : "\n     * Show <code>Text</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_CDATA_SECTION",
    "type" : "int",
    "comment" : "\n     * Show <code>CDATASection</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ENTITY_REFERENCE",
    "type" : "int",
    "comment" : "\n     * Show <code>EntityReference</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ENTITY",
    "type" : "int",
    "comment" : "\n     * Show <code>Entity</code> nodes. This is meaningful only when creating\n     * an <code>NodeIterator</code> or <code>TreeWalker</code> with an\n     * <code>Entity</code> node as its <code>root</code>; in this case, it\n     * means that the <code>Entity</code> node will appear in the first\n     * position of the traversal. Since entities are not part of the\n     * document tree, they do not appear when traversing over the document\n     * tree.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_PROCESSING_INSTRUCTION",
    "type" : "int",
    "comment" : "\n     * Show <code>ProcessingInstruction</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_COMMENT",
    "type" : "int",
    "comment" : "\n     * Show <code>Comment</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT",
    "type" : "int",
    "comment" : "\n     * Show <code>Document</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT_TYPE",
    "type" : "int",
    "comment" : "\n     * Show <code>DocumentType</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT_FRAGMENT",
    "type" : "int",
    "comment" : "\n     * Show <code>DocumentFragment</code> nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHOW_NOTATION",
    "type" : "int",
    "comment" : "\n     * Show <code>Notation</code> nodes. This is meaningful only when creating\n     * an <code>NodeIterator</code> or <code>TreeWalker</code> with a\n     * <code>Notation</code> node as its <code>root</code>; in this case, it\n     * means that the <code>Notation</code> node will appear in the first\n     * position of the traversal. Since notations are not part of the\n     * document tree, they do not appear when traversing over the document\n     * tree.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public short acceptNode(Node n)",
    "returnType" : "short",
    "comment" : "\n     * Test whether a specified node is visible in the logical view of a\n     * <code>TreeWalker</code> or <code>NodeIterator</code>. This function\n     * will be called by the implementation of <code>TreeWalker</code> and\n     * <code>NodeIterator</code>; it is not normally called directly from\n     * user code. (Though you could do so if you wanted to use the same\n     * filter to guide your own application logic.)\n     * @param n The node to check to see if it passes the filter or not.\n     * @return A constant to determine whether the node is accepted,\n     *   rejected, or skipped, as defined above.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public short acceptNode(Node n)" ],
  "variableNames" : [ "FILTER_ACCEPT", "FILTER_REJECT", "FILTER_SKIP", "SHOW_ALL", "SHOW_ELEMENT", "SHOW_ATTRIBUTE", "SHOW_TEXT", "SHOW_CDATA_SECTION", "SHOW_ENTITY_REFERENCE", "SHOW_ENTITY", "SHOW_PROCESSING_INSTRUCTION", "SHOW_COMMENT", "SHOW_DOCUMENT", "SHOW_DOCUMENT_TYPE", "SHOW_DOCUMENT_FRAGMENT", "SHOW_NOTATION" ]
}