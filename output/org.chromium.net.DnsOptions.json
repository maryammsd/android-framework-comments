{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/DnsOptions.java",
  "packageName" : "org.chromium.net",
  "className" : "DnsOptions",
  "comment" : "\n * A class configuring Cronet's host resolution functionality. Note that while we refer to {@code\n * DNS} as the most common mechanism being used for brevity, settings apply to other means of\n * resolving hostnames like hosts file resolution.\n *\n * <p>Cronet resolve hostnames in two ways - either by using the system resolver (using {@code\n * getaddrinfo} provided by system libraries), or by using a custom resolver which is built into the\n * networking stack Cronet uses.\n *\n * <p>The built-in stack provides several advantages over using the system resolver:\n *\n * <ul>\n *   <li>It has been tailored to the needs of the networking stack, particularly speed and\n *       stability.\n *   <li>{@code getaddrinfo} is a blocking call which requires dedicating worker threads and makes\n *       cancellation impossible (we need to abandon the thread until the call completes)\n *   <li>The {@code getaddrinfo} interface gives no insight into the root cause of failures\n *   <li>{@code struct addrinfo} provides no TTL (Time To Live) of the returned addresses. This\n *       restricts flexibility of handling caching (e.g. allowing the use of stale DNS records) and\n *       requires us to either rely on OS DNS caches, or be extremely conservative with the TTL.\n *   <li>As part of the OS, {@code getaddrinfo} evolves slowly. Using a custom stack enables Cronet\n *       to introduce features like encrypted DNS faster.\n * </ul>\n *\n * <p>Most configuration in this class is only applicable if the built-in DNS resolver is used.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mUseBuiltInDnsResolver",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistHostCache",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnableStaleDns",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPersistHostCachePeriodMillis",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreestablishConnectionsToStaleDnsResults",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStaleDnsOptions",
    "type" : "StaleDnsOptions",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Boolean getUseBuiltInDnsResolver()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getPersistHostCache()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getEnableStaleDns()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Long getPersistHostCachePeriodMillis()",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Boolean getPreestablishConnectionsToStaleDnsResults()",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StaleDnsOptions getStaleDnsOptions()",
    "returnType" : "StaleDnsOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Builder builder()",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Boolean getUseBuiltInDnsResolver()", "public Boolean getPersistHostCache()", "public Boolean getEnableStaleDns()", "public Long getPersistHostCachePeriodMillis()", "public Boolean getPreestablishConnectionsToStaleDnsResults()", "public StaleDnsOptions getStaleDnsOptions()", "public static Builder builder()" ],
  "variableNames" : [ "mUseBuiltInDnsResolver", "mPersistHostCache", "mEnableStaleDns", "mPersistHostCachePeriodMillis", "mPreestablishConnectionsToStaleDnsResults", "mStaleDnsOptions" ]
}