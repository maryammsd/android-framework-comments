{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Stream.java",
  "packageName" : "java.util.stream",
  "className" : "Builder",
  "comment" : "\n     * A mutable builder for a {@code Stream}.  This allows the creation of a\n     * {@code Stream} by generating elements individually and adding them to the\n     * {@code Builder} (without the copying overhead that comes from using\n     * an {@code ArrayList} as a temporary buffer.)\n     *\n     * <p>A stream builder has a lifecycle, which starts in a building\n     * phase, during which elements can be added, and then transitions to a built\n     * phase, after which elements may not be added.  The built phase begins\n     * when the {@link #build()} method is called, which creates an ordered\n     * {@code Stream} whose elements are the elements that were added to the stream\n     * builder, in the order they were added.\n     *\n     * @param <T> the type of stream elements\n     * @see Stream#builder()\n     * @since 1.8\n     ",
  "links" : [ "#build()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void accept(T t)",
    "returnType" : "void",
    "comment" : "\n         * Adds an element to the stream being built.\n         *\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         ",
    "links" : [ ]
  }, {
    "name" : " Builder<T> add(T t)",
    "returnType" : "Builder<T>",
    "comment" : "\n         * Adds an element to the stream being built.\n         *\n         * @implSpec\n         * The default implementation behaves as if:\n         * <pre>{@code\n         *     accept(t)\n         *     return this;\n         * }</pre>\n         *\n         * @param t the element to add\n         * @return {@code this} builder\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         ",
    "links" : [ ]
  }, {
    "name" : " Stream<T> build()",
    "returnType" : "Stream<T>",
    "comment" : "\n         * Builds the stream, transitioning this builder to the built state.\n         * An {@code IllegalStateException} is thrown if there are further attempts\n         * to operate on the builder after it has entered the built state.\n         *\n         * @return the built stream\n         * @throws IllegalStateException if the builder has already transitioned to\n         * the built state\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void accept(T t)", " Builder<T> add(T t)", " Stream<T> build()" ],
  "variableNames" : [ ]
}