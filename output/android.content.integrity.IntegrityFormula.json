{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/integrity/IntegrityFormula.java",
  "packageName" : "android.content.integrity",
  "className" : "IntegrityFormula",
  "comment" : "\n * Represents a rule logic/content.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "COMPOUND_FORMULA_TAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STRING_ATOMIC_FORMULA_TAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LONG_ATOMIC_FORMULA_TAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_ATOMIC_FORMULA_TAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "INSTALLER_ALLOWED_BY_MANIFEST_FORMULA_TAG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int getTag()",
    "returnType" : "int",
    "comment" : "\n     * Returns the tag that identifies the current class.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean matches(AppInstallMetadata appInstallMetadata)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when the integrity formula is satisfied by the {@code appInstallMetadata}.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAppCertificateFormula()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when the formula (or one of its atomic formulas) has app certificate as key.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isAppCertificateLineageFormula()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when the formula (or one of its atomic formulas) has app certificate lineage as\n     * key.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isInstallerFormula()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true when the formula (or one of its atomic formulas) has installer package name or\n     * installer certificate as key.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void writeToParcel(@NonNull IntegrityFormula formula, @NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write an {@link IntegrityFormula} to {@link android.os.Parcel}.\n     *\n     * <p>This helper method is needed because non-final class/interface are not allowed to be\n     * {@link Parcelable}.\n     *\n     * @throws IllegalArgumentException if {@link IntegrityFormula} is not a recognized subclass\n     * @hide\n     ",
    "links" : [ "android.content.integrity.IntegrityFormula", "android.os.Parcelable", "android.os.Parcel" ]
  }, {
    "name" : "public static IntegrityFormula readFromParcel(@NonNull Parcel in)",
    "returnType" : "IntegrityFormula",
    "comment" : "\n     * Read a {@link IntegrityFormula} from a {@link android.os.Parcel}.\n     *\n     * <p>We need this (hacky) helper method because non-final class/interface cannot be {@link\n     * Parcelable} (api lint error).\n     *\n     * @throws IllegalArgumentException if the parcel cannot be parsed\n     * @hide\n     ",
    "links" : [ "android.content.integrity.IntegrityFormula", "android.os.Parcelable", "android.os.Parcel" ]
  }, {
    "name" : "public static IntegrityFormula any(@NonNull IntegrityFormula... formulae)",
    "returnType" : "IntegrityFormula",
    "comment" : "\n     * Returns a formula that evaluates to true when any formula in {@code formulae} evaluates to\n     * true.\n     *\n     * <p>Throws an {@link IllegalArgumentException} if formulae has less than two elements.\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public static IntegrityFormula all(@NonNull IntegrityFormula... formulae)",
    "returnType" : "IntegrityFormula",
    "comment" : "\n     * Returns a formula that evaluates to true when all formula in {@code formulae} evaluates to\n     * true.\n     *\n     * <p>Throws an {@link IllegalArgumentException} if formulae has less than two elements.\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public static IntegrityFormula not(@NonNull IntegrityFormula formula)",
    "returnType" : "IntegrityFormula",
    "comment" : " Returns a formula that evaluates to true when {@code formula} evaluates to false. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getTag()", "public abstract boolean matches(AppInstallMetadata appInstallMetadata)", "public abstract boolean isAppCertificateFormula()", "public abstract boolean isAppCertificateLineageFormula()", "public abstract boolean isInstallerFormula()", "public static void writeToParcel(@NonNull IntegrityFormula formula, @NonNull Parcel dest, int flags)", "public static IntegrityFormula readFromParcel(@NonNull Parcel in)", "public static IntegrityFormula any(@NonNull IntegrityFormula... formulae)", "public static IntegrityFormula all(@NonNull IntegrityFormula... formulae)", "public static IntegrityFormula not(@NonNull IntegrityFormula formula)" ],
  "variableNames" : [ "COMPOUND_FORMULA_TAG", "STRING_ATOMIC_FORMULA_TAG", "LONG_ATOMIC_FORMULA_TAG", "BOOLEAN_ATOMIC_FORMULA_TAG", "INSTALLER_ALLOWED_BY_MANIFEST_FORMULA_TAG" ]
}