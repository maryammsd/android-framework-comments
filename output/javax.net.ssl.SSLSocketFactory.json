{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLSocketFactory.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLSocketFactory",
  "comment" : "\n * <code>SSLSocketFactory</code>s create <code>SSLSocket</code>s.\n *\n * @since 1.4\n * @see SSLSocket\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "defaultSocketFactory",
    "type" : "SSLSocketFactory",
    "comment" : " without introducing app compatibility problems.  See http://b/62248930.",
    "links" : [ ]
  }, {
    "name" : "lastVersion",
    "type" : "int",
    "comment" : " private static boolean propertyChecked;",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static synchronized SocketFactory getDefault()",
    "returnType" : "SocketFactory",
    "comment" : "\n     * Returns the default SSL socket factory.\n     *\n     * <p>The first time this method is called, the security property\n     * \"ssl.SocketFactory.provider\" is examined. If it is non-null, a class by\n     * that name is loaded and instantiated. If that is successful and the\n     * object is an instance of SSLSocketFactory, it is made the default SSL\n     * socket factory.\n     *\n     * <p>Otherwise, this method returns\n     * <code>SSLContext.getDefault().getSocketFactory()</code>. If that\n     * call fails, an inoperative factory is returned.\n     *\n     * @return the default <code>SocketFactory</code>\n     * @see SSLContext#getDefault\n     ",
    "links" : [ ]
  }, {
    "name" : " static String getSecurityProperty(final String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getDefaultCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the list of cipher suites which are enabled by default.\n     * Unless a different list is enabled, handshaking on an SSL connection\n     * will use one of these cipher suites.  The minimum quality of service\n     * for these defaults requires confidentiality protection and server\n     * authentication (that is, no anonymous cipher suites).\n     *\n     * @see #getSupportedCipherSuites()\n     * @return array of the cipher suites enabled by default\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getSupportedCipherSuites()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of the cipher suites which could be enabled for use\n     * on an SSL connection.  Normally, only a subset of these will actually\n     * be enabled by default, since this list may include cipher suites which\n     * do not meet quality of service requirements for those defaults.  Such\n     * cipher suites are useful in specialized applications.\n     *\n     * <p class=\"caution\">Applications should not blindly enable all supported\n     * cipher suites.  The supported cipher suites can include signaling cipher suite\n     * values that can cause connection problems if enabled inappropriately.\n     *\n     * <p>The proper way to use this method is to either check if a specific cipher\n     * suite is supported via {@code Arrays.asList(getSupportedCipherSuites()).contains(...)}\n     * or to filter a desired list of cipher suites to only the supported ones via\n     * {@code desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites()))}.\n     *\n     * @see #getDefaultCipherSuites()\n     * @return an array of cipher suite names\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * Returns a socket layered over an existing socket connected to the named\n     * host, at the given port.  This constructor can be used when tunneling SSL\n     * through a proxy or when negotiating the use of SSL over an existing\n     * socket. The host and port refer to the logical peer destination.\n     * This socket is configured using the socket options established for\n     * this factory.\n     *\n     * @param s the existing socket\n     * @param host the server host\n     * @param port the server port\n     * @param autoClose close the underlying socket when this socket is closed\n     * @return a socket connected to the specified host and port\n     * @throws IOException if an I/O error occurs when creating the socket\n     * @throws NullPointerException if the parameter s is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket(Socket s, InputStream consumed, boolean autoClose) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * Creates a server mode {@link Socket} layered over an\n     * existing connected socket, and is able to read data which has\n     * already been consumed/removed from the {@link Socket}'s\n     * underlying {@link InputStream}.\n     * <p>\n     * This method can be used by a server application that needs to\n     * observe the inbound data but still create valid SSL/TLS\n     * connections: for example, inspection of Server Name Indication\n     * (SNI) extensions (See section 3 of <A\n     * HREF=\"http://www.ietf.org/rfc/rfc6066.txt\">TLS Extensions\n     * (RFC6066)</A>).  Data that has been already removed from the\n     * underlying {@link InputStream} should be loaded into the\n     * {@code consumed} stream before this method is called, perhaps\n     * using a {@link java.io.ByteArrayInputStream}.  When this\n     * {@link Socket} begins handshaking, it will read all of the data in\n     * {@code consumed} until it reaches {@code EOF}, then all further\n     * data is read from the underlying {@link InputStream} as\n     * usual.\n     * <p>\n     * The returned socket is configured using the socket options\n     * established for this factory, and is set to use server mode when\n     * handshaking (see {@link SSLSocket#setUseClientMode(boolean)}).\n     *\n     * @param  s\n     *         the existing socket\n     * @param  consumed\n     *         the consumed inbound network data that has already been\n     *         removed from the existing {@link Socket}\n     *         {@link InputStream}.  This parameter may be\n     *         {@code null} if no data has been removed.\n     * @param  autoClose close the underlying socket when this socket is closed.\n     *\n     * @return the {@link Socket} compliant with the socket options\n     *         established for this factory\n     *\n     * @throws IOException if an I/O error occurs when creating the socket\n     * @throws UnsupportedOperationException if the underlying provider\n     *         does not implement the operation\n     * @throws NullPointerException if {@code s} is {@code null}\n     *\n     * @since 1.8\n     *\n     * @hide\n     ",
    "links" : [ "java.io.ByteArrayInputStream", "javax.net.ssl.SSLSocket#setUseClientMode(boolean)", "Socket", "java.io.InputStream" ]
  } ],
  "methodNames" : [ "private static void log(String msg)", "public static synchronized SocketFactory getDefault()", " static String getSecurityProperty(final String name)", "public abstract String[] getDefaultCipherSuites()", "public abstract String[] getSupportedCipherSuites()", "public abstract Socket createSocket(Socket s, String host, int port, boolean autoClose) throws IOException", "public Socket createSocket(Socket s, InputStream consumed, boolean autoClose) throws IOException" ],
  "variableNames" : [ "defaultSocketFactory", "lastVersion", "DEBUG" ]
}