{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/compat/CompatChanges.java",
  "packageName" : "android.app.compat",
  "className" : "CompatChanges",
  "comment" : "\n * CompatChanges APIs - to be used by platform code only (including mainline\n * modules).\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "QUERY_CACHE",
    "type" : "ChangeIdStateCache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isChangeEnabled(long changeId)",
    "returnType" : "boolean",
    "comment" : "\n     * Query if a given compatibility change is enabled for the current process. This method is\n     * intended to be called by code running inside a process of the affected app only.\n     *\n     * <p>If this method returns {@code true}, the calling code should implement the compatibility\n     * change, resulting in differing behaviour compared to earlier releases. If this method returns\n     * {@code false}, the calling code should behave as it did in earlier releases.\n     *\n     * @param changeId The ID of the compatibility change in question.\n     * @return {@code true} if the change is enabled for the current app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChangeEnabled(long changeId, @NonNull String packageName, @NonNull UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * Same as {@code #isChangeEnabled(long)}, except this version should be called on behalf of an\n     * app from a different process that's performing work for the app.\n     *\n     * <p> Note that this involves a binder call to the system server (unless running in the system\n     * server). If the binder call fails, a {@code RuntimeException} will be thrown.\n     *\n     * @param changeId    The ID of the compatibility change in question.\n     * @param packageName The package name of the app in question.\n     * @param user        The user that the operation is done for.\n     * @return {@code true} if the change is enabled for the current app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChangeEnabled(long changeId, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Same as {@code #isChangeEnabled(long)}, except this version should be called on behalf of an\n     * app from a different process that's performing work for the app.\n     *\n     * <p> Note that this involves a binder call to the system server (unless running in the system\n     * server). If the binder call fails, {@code RuntimeException}  will be thrown.\n     *\n     * <p> Returns {@code true} if there are no installed packages for the required UID, or if the\n     * change is enabled for ALL of the installed packages associated with the provided UID. Please\n     * use a more specific API if you want a different behaviour for multi-package UIDs.\n     *\n     * @param changeId The ID of the compatibility change in question.\n     * @param uid      The UID of the app in question.\n     * @return {@code true} if the change is enabled for the current app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void putAllPackageOverrides(@NonNull Map<String, Map<Long, PackageOverride>> packageNameToOverrides)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link #putPackageOverrides(String, Map)} on each entry in {@code\n     * packageNameToOverrides}, but the state of the compat config will be updated only once\n     * instead of for each package.\n     *\n     * @param packageNameToOverrides A map from package name to a map from change ID to the\n     *                               override applied for that package name and change ID.\n     ",
    "links" : [ "#putPackageOverrides(String" ]
  }, {
    "name" : "public static void putPackageOverrides(@NonNull String packageName, @NonNull Map<Long, PackageOverride> overrides)",
    "returnType" : "void",
    "comment" : "\n     * Associates app compat overrides with the given package and their respective change IDs.\n     * This will check whether the caller is allowed to perform this operation on the given apk and\n     * build. Only the installer package is allowed to set overrides on a non-debuggable final\n     * build and a non-test apk.\n     *\n     * <p>Note that calling this method doesn't remove previously added overrides for the given\n     * package if their change ID isn't in the given map, only replaces those that have the same\n     * change ID.\n     *\n     * @param packageName The package name of the app in question.\n     * @param overrides A map from change ID to the override applied for this change ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void removeAllPackageOverrides(@NonNull Map<String, Set<Long>> packageNameToOverridesToRemove)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to calling {@link #removePackageOverrides(String, Set)} on each entry in {@code\n     * packageNameToOverridesToRemove}, but the state of the compat config will be updated only once\n     * instead of for each package.\n     *\n     * @param packageNameToOverridesToRemove A map from package name to a set of change IDs for\n     *                                       which to remove overrides for that package name.\n     ",
    "links" : [ "#removePackageOverrides(String" ]
  }, {
    "name" : "public static void removePackageOverrides(@NonNull String packageName, @NonNull Set<Long> overridesToRemove)",
    "returnType" : "void",
    "comment" : "\n     * Removes app compat overrides for the given package. This will check whether the caller is\n     * allowed to perform this operation on the given apk and build. Only the installer package is\n     * allowed to clear overrides on a non-debuggable final build and a non-test apk.\n     *\n     * <p>Note that calling this method with an empty set is a no-op and no overrides will be\n     * removed for the given package.\n     *\n     * @param packageName The package name of the app in question.\n     * @param overridesToRemove A set of change IDs for which to remove overrides.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isChangeEnabled(long changeId)", "public static boolean isChangeEnabled(long changeId, @NonNull String packageName, @NonNull UserHandle user)", "public static boolean isChangeEnabled(long changeId, int uid)", "public static void putAllPackageOverrides(@NonNull Map<String, Map<Long, PackageOverride>> packageNameToOverrides)", "public static void putPackageOverrides(@NonNull String packageName, @NonNull Map<Long, PackageOverride> overrides)", "public static void removeAllPackageOverrides(@NonNull Map<String, Set<Long>> packageNameToOverridesToRemove)", "public static void removePackageOverrides(@NonNull String packageName, @NonNull Set<Long> overridesToRemove)" ],
  "variableNames" : [ "QUERY_CACHE" ]
}