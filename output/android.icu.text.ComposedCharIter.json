{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/ComposedCharIter.java",
  "packageName" : "android.icu.text",
  "className" : "ComposedCharIter",
  "comment" : "\n * This class has been deprecated since ICU 2.2.\n * One problem is that this class is not designed to return supplementary characters.\n * Use the Normalizer2 and UCharacter classes instead.\n * <p>\n * <tt>ComposedCharIter</tt> is an iterator class that returns all\n * of the precomposed characters defined in the Unicode standard, along\n * with their decomposed forms.  This is often useful when building\n * data tables (<i>e.g.</i> collation tables) which need to treat composed\n * and decomposed characters equivalently.\n * <p>\n * For example, imagine that you have built a collation table with ordering\n * rules for the {@link Normalizer#DECOMP canonically decomposed} forms of all\n * characters used in a particular language.  When you process input text using\n * this table, the text must first be decomposed so that it matches the form\n * used in the table.  This can impose a performance penalty that may be\n * unacceptable in some situations.\n * <p>\n * You can avoid this problem by ensuring that the collation table contains\n * rules for both the decomposed <i>and</i> composed versions of each character.\n * To do so, use a <tt>ComposedCharIter</tt> to iterate through all of the\n * composed characters in Unicode.  If the decomposition for that character\n * consists solely of characters that are listed in your ruleset, you can\n * add a new rule for the composed character that makes it equivalent to\n * its decomposition sequence.\n * <p>\n * Note that <tt>ComposedCharIter</tt> iterates over a <em>static</em> table\n * of the composed characters in Unicode.  If you want to iterate over the\n * composed characters in a particular string, use {@link Normalizer} instead.\n * <p>\n * When constructing a <tt>ComposedCharIter</tt> there is one\n * optional feature that you can enable or disable:\n * <ul>\n *   <li>{@link Normalizer#IGNORE_HANGUL} - Do not iterate over the Hangul\n *          characters and their corresponding Jamo decompositions.\n *          This option is off by default (<i>i.e.</i> Hangul processing is enabled)\n *          since the Unicode standard specifies that Hangul to Jamo \n *          is a canonical decomposition.\n * </ul>\n * <p>\n * <tt>ComposedCharIter</tt> is currently based on version 2.1.8 of the\n * <a href=\"http://www.unicode.org\" target=\"unicode\">Unicode Standard</a>.\n * It will be updated as later versions of Unicode are released.\n * @deprecated ICU 2.2\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.text.Normalizer#IGNORE_HANGUL", "android.icu.text.Normalizer", "android.icu.text.Normalizer#DECOMP" ],
  "variables" : [ {
    "name" : "DONE",
    "type" : "char",
    "comment" : "\n     * Constant that indicates the iteration has completed.\n     * {@link #next} returns this value when there are no more composed characters\n     * over which to iterate.\n     * @deprecated ICU 2.2\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : "n2impl",
    "type" : "Normalizer2Impl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decompBuf",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "curChar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nextChar",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasNext()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether there any precomposed Unicode characters not yet returned\n     * by {@link #next}.\n     * @deprecated ICU 2.2\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : "public char next()",
    "returnType" : "char",
    "comment" : "\n     * Returns the next precomposed Unicode character.\n     * Repeated calls to <tt>next</tt> return all of the precomposed characters defined\n     * by Unicode, in ascending order.  After all precomposed characters have\n     * been returned, {@link #hasNext} will return <tt>false</tt> and further calls\n     * to <tt>next</tt> will return {@link #DONE}.\n     * @deprecated ICU 2.2\n     ",
    "links" : [ "#DONE", "#hasNext" ]
  }, {
    "name" : "public String decomposition()",
    "returnType" : "String",
    "comment" : "\n     * Returns the Unicode decomposition of the current character.\n     * This method returns the decomposition of the precomposed character most\n     * recently returned by {@link #next}.  The resulting decomposition is\n     * affected by the settings of the options passed to the constructor.\n     * @deprecated ICU 2.2\n     ",
    "links" : [ "#next" ]
  }, {
    "name" : "private void findNextChar()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasNext()", "public char next()", "public String decomposition()", "private void findNextChar()" ],
  "variableNames" : [ "DONE", "n2impl", "decompBuf", "curChar", "nextChar" ]
}