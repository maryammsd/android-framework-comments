{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/extensions/ExtensionNamespacesManager.java",
  "packageName" : "org.apache.xalan.extensions",
  "className" : "ExtensionNamespacesManager",
  "comment" : "\n * Used during assembly of a stylesheet to collect the information for each \n * extension namespace that is required during the transformation process \n * to generate an {@link ExtensionHandler}.\n * \n ",
  "links" : [ "org.apache.xalan.extensions.ExtensionHandler" ],
  "variables" : [ {
    "name" : "m_extensions",
    "type" : "Vector",
    "comment" : "\n   * Vector of ExtensionNamespaceSupport objects to be used to generate ExtensionHandlers.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_predefExtensions",
    "type" : "Vector",
    "comment" : "\n   * Vector of ExtensionNamespaceSupport objects for predefined ExtensionNamespaces. Elements\n   * from this vector are added to the m_extensions vector when encountered in the stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_unregisteredExtensions",
    "type" : "Vector",
    "comment" : "\n   * Vector of extension namespaces for which sufficient information is not yet available to\n   * complete the registration process.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerExtension(String namespace)",
    "returnType" : "void",
    "comment" : "\n   * If necessary, register the extension namespace found compiling a function or \n   * creating an extension element. \n   * \n   * If it is a predefined namespace, create a\n   * support object to simplify the instantiate of an appropriate ExtensionHandler\n   * during transformation runtime. Otherwise, add the namespace, if necessary,\n   * to a vector of undefined extension namespaces, to be defined later.\n   * \n   ",
    "links" : [ ]
  }, {
    "name" : "public void registerExtension(ExtensionNamespaceSupport extNsSpt)",
    "returnType" : "void",
    "comment" : "\n   * Register the extension namespace for an ElemExtensionDecl or ElemFunction,\n   * and prepare a support object to launch the appropriate ExtensionHandler at \n   * transformation runtime.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int namespaceIndex(String namespace, Vector extensions)",
    "returnType" : "int",
    "comment" : "\n   * Get the index for a namespace entry in the extension namespace Vector, -1 if\n   * no such entry yet exists.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Vector getExtensions()",
    "returnType" : "Vector",
    "comment" : "\n   * Get the vector of extension namespaces. Used to provide\n   * the extensions table access to a list of extension\n   * namespaces encountered during composition of a stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void registerUnregisteredNamespaces()",
    "returnType" : "void",
    "comment" : "\n   * Attempt to register any unregistered extension namespaces.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExtensionNamespaceSupport defineJavaNamespace(String ns)",
    "returnType" : "ExtensionNamespaceSupport",
    "comment" : "\n   * For any extension namespace that is not either predefined or defined \n   * by a \"component\" declaration or exslt function declaration, attempt \n   * to create an ExtensionNamespaceSuport object for the appropriate \n   * Java class or Java package Extension Handler.\n   * \n   * Called by StylesheetRoot.recompose(), after all ElemTemplate compose()\n   * operations have taken place, in order to set up handlers for\n   * the remaining extension namespaces.\n   * \n   * @param ns The extension namespace URI.\n   * @return   An ExtensionNamespaceSupport object for this namespace\n   * (which defines the ExtensionHandler to be used), or null if such \n   * an object cannot be created. \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExtensionNamespaceSupport defineJavaNamespace(String ns, String classOrPackage)",
    "returnType" : "ExtensionNamespaceSupport",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPredefinedNamespaces()",
    "returnType" : "void",
    "comment" : "\n   * Set up a Vector for predefined extension namespaces.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerExtension(String namespace)", "public void registerExtension(ExtensionNamespaceSupport extNsSpt)", "public int namespaceIndex(String namespace, Vector extensions)", "public Vector getExtensions()", "public void registerUnregisteredNamespaces()", "public ExtensionNamespaceSupport defineJavaNamespace(String ns)", "public ExtensionNamespaceSupport defineJavaNamespace(String ns, String classOrPackage)", "private void setPredefinedNamespaces()" ],
  "variableNames" : [ "m_extensions", "m_predefExtensions", "m_unregisteredExtensions" ]
}