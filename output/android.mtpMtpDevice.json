{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/mtp/MtpDevice.java",
  "packageName" : "android.mtp",
  "className" : "MtpDevice",
  "comment" : "\n * This class represents an MTP or PTP device connected on the USB host bus. An application can\n * instantiate an object of this type, by referencing an attached {@link\n * android.hardware.usb.UsbDevice} and then use methods in this class to get information about the\n * device and objects stored on it, as well as open the connection and transfer data.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "UsbDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : " Make sure that MTP device is closed properly ",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "UsbDeviceConnection",
    "comment" : " Current connection to the {@link #mDevice}, or null if device is not connected ",
    "links" : [ "#mDevice" ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : " used by the JNI code",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean open(@NonNull UsbDeviceConnection connection)",
    "returnType" : "boolean",
    "comment" : "\n     * Opens the MTP device.  Once the device is open it takes ownership of the\n     * {@link android.hardware.usb.UsbDeviceConnection}.\n     * The connection will be closed when you call {@link #close()}\n     * The connection will also be closed if this method fails.\n     *\n     * @param connection an open {@link android.hardware.usb.UsbDeviceConnection} for the device\n     * @return true if the device was successfully opened.\n     ",
    "links" : [ "android.hardware.usb.UsbDeviceConnection", "#close", "android.hardware.usb.UsbDeviceConnection" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes all resources related to the MtpDevice object.\n     * After this is called, the object can not be used until {@link #open} is called again\n     * with a new {@link android.hardware.usb.UsbDeviceConnection}.\n     ",
    "links" : [ "#open", "android.hardware.usb.UsbDeviceConnection" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDeviceName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the USB device\n     * This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceName}\n     * for the device's {@link android.hardware.usb.UsbDevice}\n     *\n     * @return the device name\n     ",
    "links" : [ "android.hardware.usb.UsbDevice#getDeviceName", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the USB ID of the USB device.\n     * This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceId}\n     * for the device's {@link android.hardware.usb.UsbDevice}\n     *\n     * @return the device ID\n     ",
    "links" : [ "android.hardware.usb.UsbDevice#getDeviceId", "android.hardware.usb.UsbDevice" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MtpDeviceInfo getDeviceInfo()",
    "returnType" : "MtpDeviceInfo",
    "comment" : "\n     * Returns the {@link MtpDeviceInfo} for this device\n     *\n     * @return the device info, or null if fetching device info fails\n     ",
    "links" : [ "MtpDeviceInfo" ]
  }, {
    "name" : "public int[] getStorageIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the list of IDs for all storage units on this device\n     * Information about each storage unit can be accessed via {@link #getStorageInfo}.\n     *\n     * @return the list of storage IDs, or null if fetching storage IDs fails\n     ",
    "links" : [ "#getStorageInfo" ]
  }, {
    "name" : "public int[] getObjectHandles(int storageId, int format, int objectHandle)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the list of object handles for all objects on the given storage unit,\n     * with the given format and parent.\n     * Information about each object can be accessed via {@link #getObjectInfo}.\n     *\n     * @param storageId the storage unit to query\n     * @param format the format of the object to return, or zero for all formats\n     * @param objectHandle the parent object to query, -1 for the storage root,\n     *     or zero for all objects\n     * @return the object handles, or null if fetching object handles fails\n     ",
    "links" : [ "#getObjectInfo" ]
  }, {
    "name" : "public byte[] getObject(int objectHandle, int objectSize)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the data for an object as a byte array.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices.\n     *\n     * @param objectHandle handle of the object to read\n     * @param objectSize the size of the object (this should match\n     *      {@link MtpObjectInfo#getCompressedSize})\n     * @return the object's data, or null if reading fails\n     ",
    "links" : [ "MtpObjectInfo#getCompressedSize" ]
  }, {
    "name" : "public long getPartialObject(int objectHandle, long offset, long size, @NonNull byte[] buffer) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Obtains object bytes in the specified range and writes it to an array.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices.\n     *\n     * @param objectHandle handle of the object to read\n     * @param offset Start index of reading range. It must be a non-negative value at most\n     *     0xffffffff.\n     * @param size Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE\n     *     or 0xffffffff. If 0xffffffff is specified, the method obtains the full bytes of object.\n     * @param buffer Array to write data.\n     * @return Size of bytes that are actually read.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getPartialObject64(int objectHandle, long offset, long size, @NonNull byte[] buffer) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Obtains object bytes in the specified range and writes it to an array.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices.\n     *\n     * This is a vender-extended operation supported by Android that enables us to pass\n     * unsigned 64-bit offset. Check if the MTP device supports the operation by using\n     * {@link MtpDeviceInfo#getOperationsSupported()}.\n     *\n     * @param objectHandle handle of the object to read\n     * @param offset Start index of reading range. It must be a non-negative value.\n     * @param size Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE.\n     * @param buffer Array to write data.\n     * @return Size of bytes that are actually read.\n     * @see MtpConstants#OPERATION_GET_PARTIAL_OBJECT_64\n     ",
    "links" : [ "MtpDeviceInfo#getOperationsSupported" ]
  }, {
    "name" : "public byte[] getThumbnail(int objectHandle)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the thumbnail data for an object as a byte array.\n     * The size and format of the thumbnail data can be determined via\n     * {@link MtpObjectInfo#getThumbCompressedSize} and\n     * {@link MtpObjectInfo#getThumbFormat}.\n     * For typical devices the format is JPEG.\n     *\n     * @param objectHandle handle of the object to read\n     * @return the object's thumbnail, or null if reading fails\n     ",
    "links" : [ "MtpObjectInfo#getThumbCompressedSize", "MtpObjectInfo#getThumbFormat" ]
  }, {
    "name" : "public MtpStorageInfo getStorageInfo(int storageId)",
    "returnType" : "MtpStorageInfo",
    "comment" : "\n     * Retrieves the {@link MtpStorageInfo} for a storage unit.\n     *\n     * @param storageId the ID of the storage unit\n     * @return the MtpStorageInfo, or null if fetching storage info fails\n     ",
    "links" : [ "MtpStorageInfo" ]
  }, {
    "name" : "public MtpObjectInfo getObjectInfo(int objectHandle)",
    "returnType" : "MtpObjectInfo",
    "comment" : "\n     * Retrieves the {@link MtpObjectInfo} for an object.\n     *\n     * @param objectHandle the handle of the object\n     * @return the MtpObjectInfo, or null if fetching object info fails\n     ",
    "links" : [ "MtpObjectInfo" ]
  }, {
    "name" : "public boolean deleteObject(int objectHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Deletes an object on the device.  This call may block, since\n     * deleting a directory containing many files may take a long time\n     * on some devices.\n     *\n     * @param objectHandle handle of the object to delete\n     * @return true if the deletion succeeds\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getParent(int objectHandle)",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the object handle for the parent of an object on the device.\n     *\n     * @param objectHandle handle of the object to query\n     * @return the parent's handle, or zero if it is in the root of the storage\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStorageId(int objectHandle)",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the ID of the storage unit containing the given object on the device.\n     *\n     * @param objectHandle handle of the object to query\n     * @return the object's storage unit ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean importFile(int objectHandle, @NonNull String destPath)",
    "returnType" : "boolean",
    "comment" : "\n     * Copies the data for an object to a file in external storage.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices.\n     *\n     * @param objectHandle handle of the object to read\n     * @param destPath path to destination for the file transfer.\n     *      This path should be in the external storage as defined by\n     *      {@link android.os.Environment#getExternalStorageDirectory}\n     * @return true if the file transfer succeeds\n     ",
    "links" : [ "android.os.Environment#getExternalStorageDirectory" ]
  }, {
    "name" : "public boolean importFile(int objectHandle, @NonNull ParcelFileDescriptor descriptor)",
    "returnType" : "boolean",
    "comment" : "\n     * Copies the data for an object to a file descriptor.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices. The file descriptor is not closed\n     * on completion, and must be done by the caller.\n     *\n     * @param objectHandle handle of the object to read\n     * @param descriptor file descriptor to write the data to for the file transfer.\n     * @return true if the file transfer succeeds\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean sendObject(int objectHandle, long size, @NonNull ParcelFileDescriptor descriptor)",
    "returnType" : "boolean",
    "comment" : "\n     * Copies the data for an object from a file descriptor.\n     * This call may block for an arbitrary amount of time depending on the size\n     * of the data and speed of the devices. The file descriptor is not closed\n     * on completion, and must be done by the caller.\n     *\n     * @param objectHandle handle of the target file\n     * @param size size of the file in bytes\n     * @param descriptor file descriptor to read the data from.\n     * @return true if the file transfer succeeds\n     ",
    "links" : [ ]
  }, {
    "name" : "public MtpObjectInfo sendObjectInfo(@NonNull MtpObjectInfo info)",
    "returnType" : "MtpObjectInfo",
    "comment" : "\n     * Uploads an object metadata for a new entry. The {@link MtpObjectInfo} can be\n     * created with the {@link MtpObjectInfo.Builder} class.\n     *\n     * The returned {@link MtpObjectInfo} has the new object handle field filled in.\n     *\n     * @param info metadata of the entry\n     * @return object info of the created entry, or null if sending object info fails\n     ",
    "links" : [ "MtpObjectInfo", "MtpObjectInfo.Builder", "MtpObjectInfo" ]
  }, {
    "name" : "public MtpEvent readEvent(@Nullable CancellationSignal signal) throws IOException",
    "returnType" : "MtpEvent",
    "comment" : "\n     * Reads an event from the device. It blocks the current thread until it gets an event.\n     * It throws OperationCanceledException if it is cancelled by signal.\n     *\n     * @param signal signal for cancellation\n     * @return obtained event\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getObjectSizeLong(int handle, int format) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Returns object size in 64-bit integer.\n     *\n     * Though MtpObjectInfo#getCompressedSize returns the object size in 32-bit unsigned integer,\n     * this method returns the object size in 64-bit integer from the object property. Thus it can\n     * fetch 4GB+ object size correctly. If the device does not support objectSize property, it\n     * throws IOException.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_open(String deviceName, int fd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native MtpDeviceInfo native_get_device_info()",
    "returnType" : "MtpDeviceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int[] native_get_storage_ids()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native MtpStorageInfo native_get_storage_info(int storageId)",
    "returnType" : "MtpStorageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int[] native_get_object_handles(int storageId, int format, int objectHandle)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native MtpObjectInfo native_get_object_info(int objectHandle)",
    "returnType" : "MtpObjectInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native byte[] native_get_object(int objectHandle, long objectSize)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long native_get_partial_object(int objectHandle, long offset, long objectSize, byte[] buffer) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_get_partial_object_64(int objectHandle, long offset, long objectSize, byte[] buffer) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native byte[] native_get_thumbnail(int objectHandle)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_delete_object(int objectHandle)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_get_parent(int objectHandle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_get_storage_id(int objectHandle)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_import_file(int objectHandle, String destPath)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_import_file(int objectHandle, int fd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_send_object(int objectHandle, long size, int fd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native MtpObjectInfo native_send_object_info(MtpObjectInfo info)",
    "returnType" : "MtpObjectInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int native_submit_event_request() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native MtpEvent native_reap_event_request(int handle) throws IOException",
    "returnType" : "MtpEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native void native_discard_event_request(int handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long native_get_object_size_long(int handle, int format) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mDevice", "mCloseGuard", "mConnection", "mLock", "mNativeContext" ],
  "methodNames" : [ "public boolean open(@NonNull UsbDeviceConnection connection)", "public void close()", "protected void finalize() throws Throwable", "public String getDeviceName()", "public int getDeviceId()", "public String toString()", "public MtpDeviceInfo getDeviceInfo()", "public int[] getStorageIds()", "public int[] getObjectHandles(int storageId, int format, int objectHandle)", "public byte[] getObject(int objectHandle, int objectSize)", "public long getPartialObject(int objectHandle, long offset, long size, @NonNull byte[] buffer) throws IOException", "public long getPartialObject64(int objectHandle, long offset, long size, @NonNull byte[] buffer) throws IOException", "public byte[] getThumbnail(int objectHandle)", "public MtpStorageInfo getStorageInfo(int storageId)", "public MtpObjectInfo getObjectInfo(int objectHandle)", "public boolean deleteObject(int objectHandle)", "public long getParent(int objectHandle)", "public long getStorageId(int objectHandle)", "public boolean importFile(int objectHandle, @NonNull String destPath)", "public boolean importFile(int objectHandle, @NonNull ParcelFileDescriptor descriptor)", "public boolean sendObject(int objectHandle, long size, @NonNull ParcelFileDescriptor descriptor)", "public MtpObjectInfo sendObjectInfo(@NonNull MtpObjectInfo info)", "public MtpEvent readEvent(@Nullable CancellationSignal signal) throws IOException", "public long getObjectSizeLong(int handle, int format) throws IOException", "private native boolean native_open(String deviceName, int fd)", "private native void native_close()", "private native MtpDeviceInfo native_get_device_info()", "private native int[] native_get_storage_ids()", "private native MtpStorageInfo native_get_storage_info(int storageId)", "private native int[] native_get_object_handles(int storageId, int format, int objectHandle)", "private native MtpObjectInfo native_get_object_info(int objectHandle)", "private native byte[] native_get_object(int objectHandle, long objectSize)", "private native long native_get_partial_object(int objectHandle, long offset, long objectSize, byte[] buffer) throws IOException", "private native int native_get_partial_object_64(int objectHandle, long offset, long objectSize, byte[] buffer) throws IOException", "private native byte[] native_get_thumbnail(int objectHandle)", "private native boolean native_delete_object(int objectHandle)", "private native int native_get_parent(int objectHandle)", "private native int native_get_storage_id(int objectHandle)", "private native boolean native_import_file(int objectHandle, String destPath)", "private native boolean native_import_file(int objectHandle, int fd)", "private native boolean native_send_object(int objectHandle, long size, int fd)", "private native MtpObjectInfo native_send_object_info(MtpObjectInfo info)", "private native int native_submit_event_request() throws IOException", "private native MtpEvent native_reap_event_request(int handle) throws IOException", "private native void native_discard_event_request(int handle)", "private native long native_get_object_size_long(int handle, int format) throws IOException" ]
}