{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiopolicy/AudioProductStrategy.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioProductStrategy",
  "comment" : "\n * @hide\n * A class to encapsulate a collection of attributes associated to a given product strategy\n * (and for legacy reason, keep the association with the stream type).\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_GROUP",
    "type" : "int",
    "comment" : "\n     * group value to use when introspection API fails.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_FLAGS_AFFECT_STRATEGY_SELECTION",
    "type" : "int",
    "comment" : "\n     * The audio flags that will affect product strategy selection.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAudioAttributesGroups",
    "type" : "AudioAttributesGroup[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * Unique identifier of a product strategy.\n     * This Id can be assimilated to Car Audio Usage and even more generally to usage.\n     * For legacy platforms, the product strategy id is the routing_strategy, which was hidden to\n     * upper layer but was transpiring in the {@link AudioAttributes#getUsage()}.\n     ",
    "links" : [ "android.media.AudioAttributes#getUsage()" ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAudioProductStrategies",
    "type" : "List<AudioProductStrategy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioProductStrategy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ATTRIBUTES",
    "type" : "AudioAttributes",
    "comment" : "\n     * @hide\n     * Default attributes, with default source to be aligned with native.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static List<AudioProductStrategy> getAudioProductStrategies()",
    "returnType" : "List<AudioProductStrategy>",
    "comment" : "\n     * @hide\n     * @return the list of AudioProductStrategy discovered from platform configuration file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AudioProductStrategy getAudioProductStrategyWithId(int id)",
    "returnType" : "AudioProductStrategy",
    "comment" : "\n     * @hide\n     * Return the AudioProductStrategy object for the given strategy ID.\n     * @param id the ID of the strategy to find\n     * @return an AudioProductStrategy on which getId() would return id, null if no such strategy\n     *     exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AudioProductStrategy createInvalidAudioProductStrategy(int id)",
    "returnType" : "AudioProductStrategy",
    "comment" : "\n     * @hide\n     * Create an invalid AudioProductStrategy instance for testing\n     * @param id the ID for the invalid strategy, always use a different one than in use\n     * @return an invalid instance that cannot successfully be used for volume groups or routing\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AudioAttributes getAudioAttributesForStrategyWithLegacyStreamType(int streamType)",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * @hide\n     * @param streamType to match against AudioProductStrategy\n     * @return the AudioAttributes for the first strategy found with the associated stream type\n     *          If no match is found, returns AudioAttributes with unknown content_type and usage\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getLegacyStreamTypeForStrategyWithAudioAttributes(@NonNull AudioAttributes audioAttributes)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param audioAttributes to identify {@link AudioProductStrategy} with\n     * @return legacy stream type associated with matched {@link AudioProductStrategy}. If no\n     *              strategy found or found {@link AudioProductStrategy} does not have associated\n     *              legacy stream (i.e. associated with {@link AudioSystem#STREAM_DEFAULT}) defaults\n     *              to {@link AudioSystem#STREAM_MUSIC}\n     ",
    "links" : [ "android.media.AudioSystem#STREAM_MUSIC", "android.media.audiopolicy.AudioProductStrategy", "android.media.AudioSystem#STREAM_DEFAULT" ]
  }, {
    "name" : "public static int getVolumeGroupIdForAudioAttributes(@NonNull AudioAttributes attributes, boolean fallbackOnDefault)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param attributes the {@link AudioAttributes} to identify VolumeGroupId with\n     * @param fallbackOnDefault if set, allows to fallback on the default group (e.g. the group\n     *                          associated to {@link AudioManager#STREAM_MUSIC}).\n     * @return volume group id associated with the given {@link AudioAttributes} if found,\n     *     default volume group id if fallbackOnDefault is set\n     * <p>By convention, the product strategy with default attributes will be associated to the\n     * default volume group (e.g. associated to {@link AudioManager#STREAM_MUSIC})\n     * or {@link AudioVolumeGroup#DEFAULT_VOLUME_GROUP} if not found.\n     ",
    "links" : [ "android.media.AudioAttributes", "#STREAM_MUSIC", "android.media.audiopolicy.AudioVolumeGroup#DEFAULT_VOLUME_GROUP" ]
  }, {
    "name" : "private static List<AudioProductStrategy> initializeAudioProductStrategies()",
    "returnType" : "List<AudioProductStrategy>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int native_list_audio_product_strategies(ArrayList<AudioProductStrategy> strategies)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @return the product strategy ID (which is the generalisation of Car Audio Usage / legacy\n     *         routing_strategy linked to {@link AudioAttributes#getUsage()}).\n     ",
    "links" : [ "android.media.AudioAttributes#getUsage()" ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     * @return the product strategy name (which is the generalisation of Car Audio Usage / legacy\n     *         routing_strategy linked to {@link AudioAttributes#getUsage()}).\n     ",
    "links" : [ "android.media.AudioAttributes#getUsage()" ]
  }, {
    "name" : "public AudioAttributes getAudioAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * @hide\n     * @return first {@link AudioAttributes} associated to this product strategy.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public AudioAttributes getAudioAttributesForLegacyStreamType(int streamType)",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * @hide\n     * @param streamType legacy stream type used for volume operation only\n     * @return the {@link AudioAttributes} relevant for the given streamType.\n     *         If none is found, it builds the default attributes.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public int getLegacyStreamTypeForAudioAttributes(@NonNull AudioAttributes aa)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param aa the {@link AudioAttributes} to be considered\n     * @return the legacy stream type relevant for the given {@link AudioAttributes}.\n     *         If none is found, it return DEFAULT stream type.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public boolean supportsAudioAttributes(@NonNull AudioAttributes aa)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @param aa the {@link AudioAttributes} to be considered\n     * @return true if the {@link AudioProductStrategy} supports the given {@link AudioAttributes},\n     *         false otherwise.\n     ",
    "links" : [ "android.media.audiopolicy.AudioProductStrategy", "android.media.AudioAttributes" ]
  }, {
    "name" : "public int getVolumeGroupIdForLegacyStreamType(int streamType)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param streamType legacy stream type used for volume operation only\n     * @return the volume group id relevant for the given streamType.\n     *         If none is found, {@link AudioVolumeGroup#DEFAULT_VOLUME_GROUP} is returned.\n     ",
    "links" : [ "android.media.audiopolicy.AudioVolumeGroup#DEFAULT_VOLUME_GROUP" ]
  }, {
    "name" : "public int getVolumeGroupIdForAudioAttributes(@NonNull AudioAttributes aa)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     * @param aa the {@link AudioAttributes} to be considered\n     * @return the volume group id associated with the given audio attributes if found,\n     *         {@link AudioVolumeGroup#DEFAULT_VOLUME_GROUP} otherwise.\n     ",
    "links" : [ "android.media.AudioAttributes", "android.media.audiopolicy.AudioVolumeGroup#DEFAULT_VOLUME_GROUP" ]
  }, {
    "name" : "private static int getVolumeGroupIdForAudioAttributesInt(@NonNull AudioAttributes attributes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AudioAttributes getDefaultAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean attributesMatches(@NonNull AudioAttributes refAttr, @NonNull AudioAttributes attr)",
    "returnType" : "boolean",
    "comment" : "\n     * To avoid duplicating the logic in java and native, we shall make use of\n     * native API native_get_product_strategies_from_audio_attributes\n     * Keep in sync with frameworks/av/media/libaudioclient/AudioProductStrategy::attributesMatches\n     * @param refAttr {@link AudioAttributes} to be taken as the reference\n     * @param attr {@link AudioAttributes} of the requester.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  } ],
  "methodNames" : [ "public static List<AudioProductStrategy> getAudioProductStrategies()", "public static AudioProductStrategy getAudioProductStrategyWithId(int id)", "public static AudioProductStrategy createInvalidAudioProductStrategy(int id)", "public static AudioAttributes getAudioAttributesForStrategyWithLegacyStreamType(int streamType)", "public static int getLegacyStreamTypeForStrategyWithAudioAttributes(@NonNull AudioAttributes audioAttributes)", "public static int getVolumeGroupIdForAudioAttributes(@NonNull AudioAttributes attributes, boolean fallbackOnDefault)", "private static List<AudioProductStrategy> initializeAudioProductStrategies()", "private static native int native_list_audio_product_strategies(ArrayList<AudioProductStrategy> strategies)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public int getId()", "public String getName()", "public AudioAttributes getAudioAttributes()", "public AudioAttributes getAudioAttributesForLegacyStreamType(int streamType)", "public int getLegacyStreamTypeForAudioAttributes(@NonNull AudioAttributes aa)", "public boolean supportsAudioAttributes(@NonNull AudioAttributes aa)", "public int getVolumeGroupIdForLegacyStreamType(int streamType)", "public int getVolumeGroupIdForAudioAttributes(@NonNull AudioAttributes aa)", "private static int getVolumeGroupIdForAudioAttributesInt(@NonNull AudioAttributes attributes)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String toString()", "public static AudioAttributes getDefaultAttributes()", "private static boolean attributesMatches(@NonNull AudioAttributes refAttr, @NonNull AudioAttributes attr)" ],
  "variableNames" : [ "DEFAULT_GROUP", "TAG", "AUDIO_FLAGS_AFFECT_STRATEGY_SELECTION", "mAudioAttributesGroups", "mName", "mId", "sLock", "sAudioProductStrategies", "CREATOR", "DEFAULT_ATTRIBUTES" ]
}