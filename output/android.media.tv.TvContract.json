{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/TvContract.java",
  "packageName" : "android.media.tv",
  "className" : "TvContract",
  "comment" : "\n * The contract between the TV provider and applications. Contains definitions for the supported\n * URIs and columns.\n * <h3>Overview</h3>\n *\n * <p>TvContract defines a basic database of TV content metadata such as channel and program\n * information. The information is stored in {@link Channels} and {@link Programs} tables.\n *\n * <ul>\n *     <li>A row in the {@link Channels} table represents information about a TV channel. The data\n *         format can vary greatly from standard to standard or according to service provider, thus\n *         the columns here are mostly comprised of basic entities that are usually seen to users\n *         regardless of standard such as channel number and name.</li>\n *     <li>A row in the {@link Programs} table represents a set of data describing a TV program such\n *         as program title and start time.</li>\n * </ul>\n ",
  "variables" : [ {
    "name" : "AUTHORITY",
    "type" : "String",
    "comment" : " The authority for the TV provider. ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_READ_TV_LISTINGS",
    "type" : "String",
    "comment" : "\n     * Permission to read TV listings. This is required to read all the TV channel and program\n     * information available on the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PATH_CHANNEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_PROGRAM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_RECORDED_PROGRAM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_PREVIEW_PROGRAM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_WATCH_NEXT_PROGRAM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PATH_PASSTHROUGH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHANNEL_BROWSABLE_REQUESTED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: sent when an application requests the system to make the given channel\n     * browsable.  The operation is performed in the background without user interaction. This\n     * is only relevant to channels with {@link Channels#TYPE_PREVIEW} type.\n     *\n     * <p>The intent must contain the following bundle parameters:\n     * <ul>\n     *     <li>{@link #EXTRA_CHANNEL_ID}: ID for the {@link Channels#TYPE_PREVIEW} channel as a long\n     *     integer.</li>\n     *     <li>{@link #EXTRA_PACKAGE_NAME}: the package name of the requesting application.</li>\n     * </ul>\n     * @hide\n     ",
    "links" : [ "#EXTRA_PACKAGE_NAME", "#TYPE_PREVIEW", "#EXTRA_CHANNEL_ID" ]
  }, {
    "name" : "ACTION_REQUEST_CHANNEL_BROWSABLE",
    "type" : "String",
    "comment" : "\n     * Activity Action: sent by an application telling the system to make the given channel\n     * browsable with user interaction. The system may show UI to ask user to approve the channel.\n     * This is only relevant to channels with {@link Channels#TYPE_PREVIEW} type. Use\n     * {@link Activity#startActivityForResult} to get the result of the request.\n     *\n     * <p>The intent must contain the following bundle parameters:\n     * <ul>\n     *     <li>{@link #EXTRA_CHANNEL_ID}: ID for the {@link Channels#TYPE_PREVIEW} channel as a long\n     *     integer.</li>\n     * </ul>\n     ",
    "links" : [ "android.app.Activity#startActivityForResult", "#TYPE_PREVIEW", "#EXTRA_CHANNEL_ID" ]
  }, {
    "name" : "ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: sent by the system to tell the target TV input that one of its preview\n     * program's browsable state is disabled, i.e., it will no longer be shown to users, which, for\n     * example, might be a result of users' interaction with UI. The input is expected to delete the\n     * preview program from the content provider.\n     *\n     * <p>The intent must contain the following bundle parameter:\n     * <ul>\n     *     <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the disabled preview program ID.</li>\n     * </ul>\n     ",
    "links" : [ "#EXTRA_PREVIEW_PROGRAM_ID" ]
  }, {
    "name" : "ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: sent by the system to tell the target TV input that one of its \"watch next\"\n     * program's browsable state is disabled, i.e., it will no longer be shown to users, which, for\n     * example, might be a result of users' interaction with UI. The input is expected to delete the\n     * \"watch next\" program from the content provider.\n     *\n     * <p>The intent must contain the following bundle parameter:\n     * <ul>\n     *     <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the disabled \"watch next\" program ID.</li>\n     * </ul>\n     ",
    "links" : [ "#EXTRA_WATCH_NEXT_PROGRAM_ID" ]
  }, {
    "name" : "ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: sent by the system to tell the target TV input that one of its existing\n     * preview programs is added to the watch next programs table by user.\n     *\n     * <p>The intent must contain the following bundle parameters:\n     * <ul>\n     *     <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the ID of the existing preview program.</li>\n     *     <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the ID of the new watch next program.</li>\n     * </ul>\n     ",
    "links" : [ "#EXTRA_WATCH_NEXT_PROGRAM_ID", "#EXTRA_PREVIEW_PROGRAM_ID" ]
  }, {
    "name" : "ACTION_INITIALIZE_PROGRAMS",
    "type" : "String",
    "comment" : "\n     * Broadcast Action: sent to the target TV input after it is first installed to notify the input\n     * to initialize its channels and programs to the system content provider.\n     *\n     * <p>Note that this intent is sent only on devices with\n     * {@link android.content.pm.PackageManager#FEATURE_LEANBACK} enabled. Besides that, in order\n     * to receive this intent, the target TV input must:\n     * <ul>\n     *     <li>Declare a broadcast receiver for this intent in its\n     *         <code>AndroidManifest.xml</code>.</li>\n     *     <li>Declare appropriate permissions to write channel and program data in its\n     *         <code>AndroidManifest.xml</code>.</li>\n     * </ul>\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_LEANBACK" ]
  }, {
    "name" : "EXTRA_CHANNEL_ID",
    "type" : "String",
    "comment" : "\n     * The key for a bundle parameter containing a channel ID as a long integer\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * The key for a bundle parameter containing a package name as a string.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PREVIEW_PROGRAM_ID",
    "type" : "String",
    "comment" : " The key for a bundle parameter containing a program ID as a long integer. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_WATCH_NEXT_PROGRAM_ID",
    "type" : "String",
    "comment" : " The key for a bundle parameter containing a watch next program ID as a long integer. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULT_CODE",
    "type" : "String",
    "comment" : "\n     * The key for a bundle parameter containing the result code of a method call as an integer.\n     *\n     * @see #RESULT_OK\n     * @see #RESULT_ERROR_IO\n     * @see #RESULT_ERROR_INVALID_ARGUMENT\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_OK",
    "type" : "int",
    "comment" : "\n     * The result code for a successful execution without error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_IO",
    "type" : "int",
    "comment" : "\n     * The result code for a failure from I/O operation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_INVALID_ARGUMENT",
    "type" : "int",
    "comment" : "\n     * The result code for a failure from invalid argument.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METHOD_GET_COLUMNS",
    "type" : "String",
    "comment" : "\n     * The method name to get existing columns in the given table of the specified content provider.\n     *\n     * <p>The method caller must provide the following parameter:\n     * <ul>\n     *     <li>{@code arg}: The content URI of the target table as a {@link String}.</li>\n     * </ul>\n\n     * <p>On success, the returned {@link android.os.Bundle} will include existing column names\n     * with the key {@link #EXTRA_EXISTING_COLUMN_NAMES}. Otherwise, the return value will be {@code null}.\n     *\n     * @see ContentResolver#call(Uri, String, String, Bundle)\n     * @see #EXTRA_EXISTING_COLUMN_NAMES\n     * @hide\n     ",
    "links" : [ "#EXTRA_EXISTING_COLUMN_NAMES", "android.os.Bundle", "String" ]
  }, {
    "name" : "METHOD_ADD_COLUMN",
    "type" : "String",
    "comment" : "\n     * The method name to add a new column in the given table of the specified content provider.\n     *\n     * <p>The method caller must provide the following parameter:\n     * <ul>\n     *     <li>{@code arg}: The content URI of the target table as a {@link String}.</li>\n     *     <li>{@code extra}: Name, data type, and default value of the new column in a Bundle:\n     *         <ul>\n     *             <li>{@link #EXTRA_COLUMN_NAME} the column name as a {@link String}.</li>\n     *             <li>{@link #EXTRA_DATA_TYPE} the data type as a {@link String}.</li>\n     *             <li>{@link #EXTRA_DEFAULT_VALUE} the default value as a {@link String}.\n     *                 (optional)</li>\n     *         </ul>\n     *     </li>\n     * </ul>\n     *\n     * <p>On success, the returned {@link android.os.Bundle} will include current colum names after\n     * the addition operation with the key {@link #EXTRA_EXISTING_COLUMN_NAMES}. Otherwise, the\n     * return value will be {@code null}.\n     *\n     * @see ContentResolver#call(Uri, String, String, Bundle)\n     * @see #EXTRA_COLUMN_NAME\n     * @see #EXTRA_DATA_TYPE\n     * @see #EXTRA_DEFAULT_VALUE\n     * @see #EXTRA_EXISTING_COLUMN_NAMES\n     * @hide\n     ",
    "links" : [ "#EXTRA_EXISTING_COLUMN_NAMES", "#EXTRA_DATA_TYPE", "android.os.Bundle", "String", "#EXTRA_COLUMN_NAME", "#EXTRA_DEFAULT_VALUE" ]
  }, {
    "name" : "METHOD_GET_BLOCKED_PACKAGES",
    "type" : "String",
    "comment" : "\n     * The method name to get all the blocked packages. When a package is blocked, all the data for\n     * preview programs/channels and watch next programs belonging to this package in the content\n     * provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown\n     * for all the requests to preview programs/channels and watch next programs via\n     * {@link android.content.ContentProvider} from it.\n     *\n     * <p>The returned {@link android.os.Bundle} will include all the blocked package names with the\n     * key {@link #EXTRA_BLOCKED_PACKAGES}.\n     *\n     * @see ContentResolver#call(Uri, String, String, Bundle)\n     * @see #EXTRA_BLOCKED_PACKAGES\n     * @see #METHOD_BLOCK_PACKAGE\n     * @see #METHOD_UNBLOCK_PACKAGE\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#EXTRA_BLOCKED_PACKAGES", "SecurityException", "android.content.ContentProvider" ]
  }, {
    "name" : "METHOD_BLOCK_PACKAGE",
    "type" : "String",
    "comment" : "\n     * The method name to block the access from the given package. When a package is blocked, all\n     * the data for preview programs/channels and watch next programs belonging to this package in\n     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}\n     * will be thrown for all the requests to preview programs/channels and watch next programs via\n     * {@link android.content.ContentProvider} from it.\n     *\n     * <p>The method caller must provide the following parameter:\n     * <ul>\n     *     <li>{@code arg}: The package name to be added as blocked package {@link String}.</li>\n     * </ul>\n     *\n     * <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the\n     * execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is\n     * empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result\n     * code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.\n     *\n     * @see ContentResolver#call(Uri, String, String, Bundle)\n     * @see #EXTRA_RESULT_CODE\n     * @see #METHOD_GET_BLOCKED_PACKAGES\n     * @see #METHOD_UNBLOCK_PACKAGE\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#RESULT_ERROR_IO", "#RESULT_ERROR_INVALID_ARGUMENT", "#RESULT_OK", "#EXTRA_RESULT_CODE", "SecurityException", "String", "android.content.ContentProvider" ]
  }, {
    "name" : "METHOD_UNBLOCK_PACKAGE",
    "type" : "String",
    "comment" : "\n     * The method name to unblock the access from the given package. When a package is blocked, all\n     * the data for preview programs/channels and watch next programs belonging to this package in\n     * the content provider will be cleared. Once a package is blocked, {@link SecurityException}\n     * will be thrown for all the requests to preview programs/channels and watch next programs via\n     * {@link android.content.ContentProvider} from it.\n     *\n     * <p>The method caller must provide the following parameter:\n     * <ul>\n     *     <li>{@code arg}: The package name to be removed from blocked list as a {@link String}.\n     *     </li>\n     * </ul>\n     *\n     * <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the\n     * execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is\n     * empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result\n     * code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.\n     *\n     * @see ContentResolver#call(Uri, String, String, Bundle)\n     * @see #EXTRA_RESULT_CODE\n     * @see #METHOD_GET_BLOCKED_PACKAGES\n     * @see #METHOD_BLOCK_PACKAGE\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "#RESULT_ERROR_IO", "#RESULT_ERROR_INVALID_ARGUMENT", "#RESULT_OK", "#EXTRA_RESULT_CODE", "SecurityException", "String", "android.content.ContentProvider" ]
  }, {
    "name" : "EXTRA_EXISTING_COLUMN_NAMES",
    "type" : "String",
    "comment" : "\n     * The key for a returned {@link Bundle} value containing existing column names in the given\n     * table as an {@link ArrayList} of {@link String}.\n     *\n     * @see #METHOD_GET_COLUMNS\n     * @see #METHOD_ADD_COLUMN\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "String", "java.util.ArrayList" ]
  }, {
    "name" : "EXTRA_COLUMN_NAME",
    "type" : "String",
    "comment" : "\n     * The key for a {@link Bundle} parameter containing the new column name to be added in the\n     * given table as a non-empty {@link CharSequence}.\n     *\n     * @see #METHOD_ADD_COLUMN\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "CharSequence" ]
  }, {
    "name" : "EXTRA_DATA_TYPE",
    "type" : "String",
    "comment" : "\n     * The key for a {@link Bundle} parameter containing the data type of the new column to be added\n     * in the given table as a non-empty {@link CharSequence}, which should be one of the following\n     * values: {@code \"TEXT\"}, {@code \"INTEGER\"}, {@code \"REAL\"}, or {@code \"BLOB\"}.\n     *\n     * @see #METHOD_ADD_COLUMN\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "CharSequence" ]
  }, {
    "name" : "EXTRA_DEFAULT_VALUE",
    "type" : "String",
    "comment" : "\n     * The key for a {@link Bundle} parameter containing the default value of the new column to be\n     * added in the given table as a {@link CharSequence}, which represents a valid default value\n     * according to the data type provided with {@link #EXTRA_DATA_TYPE}.\n     *\n     * @see #METHOD_ADD_COLUMN\n     * @hide\n     ",
    "links" : [ "#EXTRA_DATA_TYPE", "android.os.Bundle", "CharSequence" ]
  }, {
    "name" : "EXTRA_BLOCKED_PACKAGES",
    "type" : "String",
    "comment" : "\n     * The key for a returned {@link Bundle} value containing all the blocked package names as an\n     * {@link ArrayList} of {@link String}.\n     *\n     * @see #METHOD_GET_BLOCKED_PACKAGES\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "String", "java.util.ArrayList" ]
  }, {
    "name" : "PARAM_INPUT",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify TV input\n     * ID to filter channels.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_CHANNEL",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify channel\n     * ID to filter programs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_START_TIME",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify start\n     * time (in milliseconds since the epoch) to filter programs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_END_TIME",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify end time\n     * (in milliseconds since the epoch) to filter programs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_BROWSABLE_ONLY",
    "type" : "String",
    "comment" : "\n     * A query, update or delete URI parameter that allows the caller to operate on all or\n     * browsable-only channels. If set to \"true\", the rows that contain non-browsable channels are\n     * not affected.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_CANONICAL_GENRE",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify canonical\n     * genre to filter programs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_PREVIEW",
    "type" : "String",
    "comment" : "\n     * A query, update or delete URI parameter that allows the caller to operate only on preview or\n     * non-preview channels. If set to \"true\", the operation affects the rows for preview channels\n     * only. If set to \"false\", the operation affects the rows for non-preview channels only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PARAM_PACKAGE",
    "type" : "String",
    "comment" : "\n     * An optional query, update or delete URI parameter that allows the caller to specify package\n     * name to filter channels.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String buildInputId(ComponentName name)",
    "returnType" : "String",
    "comment" : "\n     * Builds an ID that uniquely identifies a TV input service.\n     *\n     * @param name The {@link ComponentName} of the TV input service to build ID for.\n     * @return the ID for the given TV input service.\n     ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "public static Uri buildChannelUri(long channelId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific channel.\n     *\n     * @param channelId The ID of the channel to point to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildChannelUriForPassthroughInput(String inputId)",
    "returnType" : "Uri",
    "comment" : "\n     * Build a special channel URI intended to be used with pass-through inputs. (e.g. HDMI)\n     *\n     * @param inputId The ID of the pass-through input to build a channels URI for.\n     * @see TvInputInfo#isPassthroughInput()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildChannelLogoUri(long channelId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a channel logo. See {@link Channels.Logo}.\n     *\n     * @param channelId The ID of the channel whose logo is pointed to.\n     ",
    "links" : [ "Channels.Logo" ]
  }, {
    "name" : "public static Uri buildChannelLogoUri(Uri channelUri)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a channel logo. See {@link Channels.Logo}.\n     *\n     * @param channelUri The URI of the channel whose logo is pointed to.\n     ",
    "links" : [ "Channels.Logo" ]
  }, {
    "name" : "public static Uri buildChannelsUriForInput(@Nullable String inputId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all channels from a given TV input.\n     *\n     * @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a\n     *            URI for all the TV inputs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildChannelsUriForInput(@Nullable String inputId, boolean browsableOnly)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all or browsable-only channels from a given TV input.\n     *\n     * @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a\n     *            URI for all the TV inputs.\n     * @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set\n     *            to {@code false} the URI points to all channels regardless of whether they are\n     *            browsable or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildChannelsUriForInput(@Nullable String inputId, @Nullable String genre, boolean browsableOnly)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all or browsable-only channels which have programs with the given\n     * genre from the given TV input.\n     *\n     * @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a\n     *            URI for all the TV inputs.\n     * @param genre {@link Programs.Genres} to search. If {@code null}, builds a URI for all genres.\n     * @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set\n     *            to {@code false} the URI points to all channels regardless of whether they are\n     *            browsable or not.\n     * @hide\n     ",
    "links" : [ "Programs.Genres" ]
  }, {
    "name" : "public static Uri buildProgramUri(long programId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific program.\n     *\n     * @param programId The ID of the program to point to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildProgramsUriForChannel(long channelId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all programs on a given channel.\n     *\n     * @param channelId The ID of the channel to return programs for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildProgramsUriForChannel(Uri channelUri)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all programs on a given channel.\n     *\n     * @param channelUri The URI of the channel to return programs for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildProgramsUriForChannel(long channelId, long startTime, long endTime)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to programs on a specific channel whose schedules overlap with the\n     * given time frame.\n     *\n     * @param channelId The ID of the channel to return programs for.\n     * @param startTime The start time used to filter programs. The returned programs will have a\n     *            {@link Programs#COLUMN_END_TIME_UTC_MILLIS} that is greater than or equal to\n                  {@code startTime}.\n     * @param endTime The end time used to filter programs. The returned programs will have\n     *            {@link Programs#COLUMN_START_TIME_UTC_MILLIS} that is less than or equal to\n     *            {@code endTime}.\n     ",
    "links" : [ "#COLUMN_END_TIME_UTC_MILLIS", "#COLUMN_START_TIME_UTC_MILLIS" ]
  }, {
    "name" : "public static Uri buildProgramsUriForChannel(Uri channelUri, long startTime, long endTime)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to programs on a specific channel whose schedules overlap with the\n     * given time frame.\n     *\n     * @param channelUri The URI of the channel to return programs for.\n     * @param startTime The start time used to filter programs. The returned programs should have\n     *            {@link Programs#COLUMN_END_TIME_UTC_MILLIS} that is greater than this time.\n     * @param endTime The end time used to filter programs. The returned programs should have\n     *            {@link Programs#COLUMN_START_TIME_UTC_MILLIS} that is less than this time.\n     ",
    "links" : [ "#COLUMN_END_TIME_UTC_MILLIS", "#COLUMN_START_TIME_UTC_MILLIS" ]
  }, {
    "name" : "public static Uri buildRecordedProgramUri(long recordedProgramId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific recorded program.\n     *\n     * @param recordedProgramId The ID of the recorded program to point to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildPreviewProgramUri(long previewProgramId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific preview program.\n     *\n     * @param previewProgramId The ID of the preview program to point to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildPreviewProgramsUriForChannel(long channelId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all preview programs on a given channel.\n     *\n     * @param channelId The ID of the channel to return preview programs for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildPreviewProgramsUriForChannel(Uri channelUri)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to all preview programs on a given channel.\n     *\n     * @param channelUri The URI of the channel to return preview programs for.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildWatchNextProgramUri(long watchNextProgramId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific watch next program.\n     *\n     * @param watchNextProgramId The ID of the watch next program to point to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri buildWatchedProgramUri(long watchedProgramId)",
    "returnType" : "Uri",
    "comment" : "\n     * Builds a URI that points to a specific program the user watched.\n     *\n     * @param watchedProgramId The ID of the watched program to point to.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isTvUri(Uri uri)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isTwoSegmentUriStartingWith(Uri uri, String pathSegment)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChannelUri(@NonNull Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@code uri} is a channel URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChannelUriForTunerInput(@NonNull Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@code uri} is a channel URI for a tuner input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChannelUriForPassthroughInput(@NonNull Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@code uri} is a channel URI for a pass-through input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isProgramUri(@NonNull Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@code uri} is a program URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isRecordedProgramUri(@NonNull Uri uri)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@code uri} is a recorded program URI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void requestChannelBrowsable(Context context, long channelId)",
    "returnType" : "void",
    "comment" : "\n     * Requests to make a channel browsable.\n     *\n     * <p>Once called, the system will review the request and make the channel browsable based on\n     * its policy. The first request from a package is guaranteed to be approved. This is only\n     * relevant to channels with {@link Channels#TYPE_PREVIEW} type.\n     *\n     * @param context The context for accessing content provider.\n     * @param channelId The channel ID to be browsable.\n     * @see Channels#COLUMN_BROWSABLE\n     ",
    "links" : [ "#TYPE_PREVIEW" ]
  } ],
  "variableNames" : [ "AUTHORITY", "PERMISSION_READ_TV_LISTINGS", "PATH_CHANNEL", "PATH_PROGRAM", "PATH_RECORDED_PROGRAM", "PATH_PREVIEW_PROGRAM", "PATH_WATCH_NEXT_PROGRAM", "PATH_PASSTHROUGH", "ACTION_CHANNEL_BROWSABLE_REQUESTED", "ACTION_REQUEST_CHANNEL_BROWSABLE", "ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED", "ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED", "ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT", "ACTION_INITIALIZE_PROGRAMS", "EXTRA_CHANNEL_ID", "EXTRA_PACKAGE_NAME", "EXTRA_PREVIEW_PROGRAM_ID", "EXTRA_WATCH_NEXT_PROGRAM_ID", "EXTRA_RESULT_CODE", "RESULT_OK", "RESULT_ERROR_IO", "RESULT_ERROR_INVALID_ARGUMENT", "METHOD_GET_COLUMNS", "METHOD_ADD_COLUMN", "METHOD_GET_BLOCKED_PACKAGES", "METHOD_BLOCK_PACKAGE", "METHOD_UNBLOCK_PACKAGE", "EXTRA_EXISTING_COLUMN_NAMES", "EXTRA_COLUMN_NAME", "EXTRA_DATA_TYPE", "EXTRA_DEFAULT_VALUE", "EXTRA_BLOCKED_PACKAGES", "PARAM_INPUT", "PARAM_CHANNEL", "PARAM_START_TIME", "PARAM_END_TIME", "PARAM_BROWSABLE_ONLY", "PARAM_CANONICAL_GENRE", "PARAM_PREVIEW", "PARAM_PACKAGE" ],
  "methodNames" : [ "public static String buildInputId(ComponentName name)", "public static Uri buildChannelUri(long channelId)", "public static Uri buildChannelUriForPassthroughInput(String inputId)", "public static Uri buildChannelLogoUri(long channelId)", "public static Uri buildChannelLogoUri(Uri channelUri)", "public static Uri buildChannelsUriForInput(@Nullable String inputId)", "public static Uri buildChannelsUriForInput(@Nullable String inputId, boolean browsableOnly)", "public static Uri buildChannelsUriForInput(@Nullable String inputId, @Nullable String genre, boolean browsableOnly)", "public static Uri buildProgramUri(long programId)", "public static Uri buildProgramsUriForChannel(long channelId)", "public static Uri buildProgramsUriForChannel(Uri channelUri)", "public static Uri buildProgramsUriForChannel(long channelId, long startTime, long endTime)", "public static Uri buildProgramsUriForChannel(Uri channelUri, long startTime, long endTime)", "public static Uri buildRecordedProgramUri(long recordedProgramId)", "public static Uri buildPreviewProgramUri(long previewProgramId)", "public static Uri buildPreviewProgramsUriForChannel(long channelId)", "public static Uri buildPreviewProgramsUriForChannel(Uri channelUri)", "public static Uri buildWatchNextProgramUri(long watchNextProgramId)", "public static Uri buildWatchedProgramUri(long watchedProgramId)", "private static boolean isTvUri(Uri uri)", "private static boolean isTwoSegmentUriStartingWith(Uri uri, String pathSegment)", "public static boolean isChannelUri(@NonNull Uri uri)", "public static boolean isChannelUriForTunerInput(@NonNull Uri uri)", "public static boolean isChannelUriForPassthroughInput(@NonNull Uri uri)", "public static boolean isProgramUri(@NonNull Uri uri)", "public static boolean isRecordedProgramUri(@NonNull Uri uri)", "public static void requestChannelBrowsable(Context context, long channelId)" ]
}