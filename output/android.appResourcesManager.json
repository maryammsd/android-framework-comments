{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ResourcesManager.java",
  "packageName" : "android.app",
  "className" : "ResourcesManager",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResCompatibilityInfo",
    "type" : "CompatibilityInfo",
    "comment" : "\n     * The global compatibility settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResConfiguration",
    "type" : "Configuration",
    "comment" : "\n     * The global configuration upon which all Resources are based. Multi-window Resources\n     * apply their overrides to this configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResourceImpls",
    "type" : "ArrayMap<ResourcesKey, WeakReference<ResourcesImpl>>",
    "comment" : "\n     * A mapping of ResourceImpls and their configurations. These are heavy weight objects\n     * which should be reused as much as possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResourceReferences",
    "type" : "ArrayList<WeakReference<Resources>>",
    "comment" : "\n     * A list of Resource references that can be reused.\n     ",
    "links" : [ ]
  }, {
    "name" : "mResourcesReferencesQueue",
    "type" : "ReferenceQueue<Resources>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENABLE_APK_ASSETS_CACHE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoadedApkAssets",
    "type" : "LruCache<ApkKey, ApkAssets>",
    "comment" : "\n     * The ApkAssets we are caching and intend to hold strong references to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCachedApkAssets",
    "type" : "ArrayMap<ApkKey, WeakReference<ApkAssets>>",
    "comment" : "\n     * The ApkAssets that are being referenced in the wild that we can reuse, even if they aren't\n     * in our LRU cache. Bonus resources :)\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityResourceReferences",
    "type" : "WeakHashMap<IBinder, ActivityResources>",
    "comment" : "\n     * Each Activity may has a base override configuration that is applied to each Resources object,\n     * which in turn may have their own override configuration specified.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdjustedDisplays",
    "type" : "ArrayMap<Pair<Integer, DisplayAdjustments>, WeakReference<Display>>",
    "comment" : "\n     * A cache of DisplayId, DisplayAdjustments to Display.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUpdateCallbacks",
    "type" : "UpdateHandler",
    "comment" : "\n     * Callback implementation for handling updates to Resources objects.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ResourcesManager getInstance()",
    "returnType" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidatePath(String path)",
    "returnType" : "void",
    "comment" : "\n     * Invalidate and destroy any resources that reference content under the\n     * given filesystem path. Typically used when unmounting a storage device to\n     * try as hard as possible to release any open FDs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Configuration getConfiguration()",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DisplayMetrics getDisplayMetrics()",
    "returnType" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected DisplayMetrics getDisplayMetrics(int displayId, DisplayAdjustments da)",
    "returnType" : "DisplayMetrics",
    "comment" : "\n     * Protected so that tests can override and returns something a fixed value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void applyNonDefaultDisplayMetricsToConfiguration(@NonNull DisplayMetrics dm, @NonNull Configuration config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean applyCompatConfigurationLocked(int displayDensity, @NonNull Configuration compatConfiguration)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Display getAdjustedDisplay(final int displayId, @Nullable DisplayAdjustments displayAdjustments)",
    "returnType" : "Display",
    "comment" : "\n     * Returns an adjusted {@link Display} object based on the inputs or null if display isn't\n     * available. This method is only used within {@link ResourcesManager} to calculate display\n     * metrics based on a set {@link DisplayAdjustments}. All other usages should instead call\n     * {@link ResourcesManager#getAdjustedDisplay(int, Resources)}.\n     *\n     * @param displayId display Id.\n     * @param displayAdjustments display adjustments.\n     ",
    "links" : [ "Display", "ResourcesManager", "DisplayAdjustments", "ResourcesManager#getAdjustedDisplay" ]
  }, {
    "name" : "public Display getAdjustedDisplay(final int displayId, Resources resources)",
    "returnType" : "Display",
    "comment" : "\n     * Returns an adjusted {@link Display} object based on the inputs or null if display isn't\n     * available.\n     *\n     * @param displayId display Id.\n     * @param resources The {@link Resources} backing the display adjustments.\n     ",
    "links" : [ "Display", "Resources" ]
  }, {
    "name" : "private static String overlayPathToIdmapPath(String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ApkAssets loadApkAssets(String path, boolean sharedLib, boolean overlay) throws IOException",
    "returnType" : "ApkAssets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected AssetManager createAssetManager(@NonNull final ResourcesKey key)",
    "returnType" : "AssetManager",
    "comment" : "\n     * Creates an AssetManager from the paths within the ResourcesKey.\n     *\n     * This can be overridden in tests so as to avoid creating a real AssetManager with\n     * real APK paths.\n     * @param key The key containing the resource paths to add to the AssetManager.\n     * @return a new AssetManager.\n    ",
    "links" : [ ]
  }, {
    "name" : "private static int countLiveReferences(Collection<WeakReference<T>> collection)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter printWriter)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Configuration generateConfig(@NonNull ResourcesKey key, @NonNull DisplayMetrics dm)",
    "returnType" : "Configuration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ResourcesImpl createResourcesImpl(@NonNull ResourcesKey key)",
    "returnType" : "ResourcesImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ResourcesImpl findResourcesImplForKeyLocked(@NonNull ResourcesKey key)",
    "returnType" : "ResourcesImpl",
    "comment" : "\n     * Finds a cached ResourcesImpl object that matches the given ResourcesKey.\n     *\n     * @param key The key to match.\n     * @return a ResourcesImpl if the key matches a cache entry, null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ResourcesImpl findOrCreateResourcesImplForKeyLocked(@NonNull ResourcesKey key)",
    "returnType" : "ResourcesImpl",
    "comment" : "\n     * Finds a cached ResourcesImpl object that matches the given ResourcesKey, or\n     * creates a new one and caches it for future use.\n     * @param key The key to match.\n     * @return a ResourcesImpl object matching the key.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ResourcesKey findKeyForResourceImplLocked(@NonNull ResourcesImpl resourceImpl)",
    "returnType" : "ResourcesKey",
    "comment" : "\n     * Find the ResourcesKey that this ResourcesImpl object is associated with.\n     * @return the ResourcesKey or null if none was found.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isSameResourcesOverrideConfig(@Nullable IBinder activityToken, @Nullable Configuration overrideConfig)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if activity resources have same override config as the provided on.\n     * @param activityToken The Activity that resources should be associated with.\n     * @param overrideConfig The override configuration to be checked for equality with.\n     * @return true if activity resources override config matches the provided one or they are both\n     *         null, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private ActivityResources getOrCreateActivityResourcesStructLocked(@NonNull IBinder activityToken)",
    "returnType" : "ActivityResources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Resources findResourcesForActivityLocked(@NonNull IBinder targetActivityToken, @NonNull ResourcesKey targetKey, @NonNull ClassLoader targetClassLoader)",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Resources createResourcesForActivityLocked(@NonNull IBinder activityToken, @NonNull ClassLoader classLoader, @NonNull ResourcesImpl impl, @NonNull CompatibilityInfo compatInfo)",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Resources createResourcesLocked(@NonNull ClassLoader classLoader, @NonNull ResourcesImpl impl, @NonNull CompatibilityInfo compatInfo)",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources createBaseTokenResources(@NonNull IBinder token, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, int displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader, @Nullable List<ResourcesLoader> loaders)",
    "returnType" : "Resources",
    "comment" : "\n     * Creates base resources for a binder token. Calls to\n     * {@link #getResources(IBinder, String, String[], String[], String[], int, Configuration,\n     * CompatibilityInfo, ClassLoader, List)} with the same binder token will have their override\n     * configurations merged with the one specified here.\n     *\n     * @param token Represents an {@link Activity} or {@link WindowContext}.\n     * @param resDir The base resource path. Can be null (only framework resources will be loaded).\n     * @param splitResDirs An array of split resource paths. Can be null.\n     * @param overlayDirs An array of overlay paths. Can be null.\n     * @param libDirs An array of resource library paths. Can be null.\n     * @param displayId The ID of the display for which to create the resources.\n     * @param overrideConfig The configuration to apply on top of the base configuration. Can be\n     *                       {@code null}. This provides the base override for this token.\n     * @param compatInfo The compatibility settings to use. Cannot be null. A default to use is\n     *                   {@link CompatibilityInfo#DEFAULT_COMPATIBILITY_INFO}.\n     * @param classLoader The class loader to use when inflating Resources. If null, the\n     *                    {@link ClassLoader#getSystemClassLoader()} is used.\n     * @return a Resources object from which to access resources.\n     ",
    "links" : [ "#getResources", "Activity", "WindowContext", "CompatibilityInfo#DEFAULT_COMPATIBILITY_INFO", "ClassLoader#getSystemClassLoader" ]
  }, {
    "name" : "private void rebaseKeyForActivity(IBinder activityToken, ResourcesKey key)",
    "returnType" : "void",
    "comment" : "\n     * Rebases a key's override config on top of the Activity's base override.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void cleanupReferences(ArrayList<WeakReference<T>> references, ReferenceQueue<T> referenceQueue)",
    "returnType" : "void",
    "comment" : "\n     * Check WeakReferences and remove any dead references so they don't pile up.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Resources createResources(@Nullable IBinder activityToken, @NonNull ResourcesKey key, @NonNull ClassLoader classLoader)",
    "returnType" : "Resources",
    "comment" : "\n     * Creates a Resources object set with a ResourcesImpl object matching the given key.\n     *\n     * @param activityToken The Activity this Resources object should be associated with.\n     * @param key The key describing the parameters of the ResourcesImpl object.\n     * @param classLoader The classloader to use for the Resources object.\n     *                    If null, {@link ClassLoader#getSystemClassLoader()} is used.\n     * @return A Resources object that gets updated when\n     *         {@link #applyConfigurationToResourcesLocked(Configuration, CompatibilityInfo)}\n     *         is called.\n     ",
    "links" : [ "ClassLoader#getSystemClassLoader", "#applyConfigurationToResourcesLocked" ]
  }, {
    "name" : "public Resources getResources(@Nullable IBinder activityToken, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, int displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader, @Nullable List<ResourcesLoader> loaders)",
    "returnType" : "Resources",
    "comment" : "\n     * Gets or creates a new Resources object associated with the IBinder token. References returned\n     * by this method live as long as the Activity, meaning they can be cached and used by the\n     * Activity even after a configuration change. If any other parameter is changed\n     * (resDir, splitResDirs, overrideConfig) for a given Activity, the same Resources object\n     * is updated and handed back to the caller. However, changing the class loader will result in a\n     * new Resources object.\n     * <p/>\n     * If activityToken is null, a cached Resources object will be returned if it matches the\n     * input parameters. Otherwise a new Resources object that satisfies these parameters is\n     * returned.\n     *\n     * @param activityToken Represents an Activity. If null, global resources are assumed.\n     * @param resDir The base resource path. Can be null (only framework resources will be loaded).\n     * @param splitResDirs An array of split resource paths. Can be null.\n     * @param overlayDirs An array of overlay paths. Can be null.\n     * @param libDirs An array of resource library paths. Can be null.\n     * @param displayId The ID of the display for which to create the resources.\n     * @param overrideConfig The configuration to apply on top of the base configuration. Can be\n     * null. Mostly used with Activities that are in multi-window which may override width and\n     * height properties from the base config.\n     * @param compatInfo The compatibility settings to use. Cannot be null. A default to use is\n     * {@link CompatibilityInfo#DEFAULT_COMPATIBILITY_INFO}.\n     * @param classLoader The class loader to use when inflating Resources. If null, the\n     * {@link ClassLoader#getSystemClassLoader()} is used.\n     * @return a Resources object from which to access resources.\n     ",
    "links" : [ "CompatibilityInfo#DEFAULT_COMPATIBILITY_INFO", "ClassLoader#getSystemClassLoader" ]
  }, {
    "name" : "public void updateResourcesForActivity(@NonNull IBinder activityToken, @Nullable Configuration overrideConfig, int displayId, boolean movedToDifferentDisplay)",
    "returnType" : "void",
    "comment" : "\n     * Updates an Activity's Resources object with overrideConfig. The Resources object\n     * that was previously returned by {@link #getResources(IBinder, String, String[], String[],\n     * String[], int, Configuration, CompatibilityInfo, ClassLoader, List)} is still valid and will\n     * have the updated configuration.\n     *\n     * @param activityToken The Activity token.\n     * @param overrideConfig The configuration override to update.\n     * @param displayId Id of the display where activity currently resides.\n     * @param movedToDifferentDisplay Indicates if the activity was moved to different display.\n     ",
    "links" : [ "#getResources" ]
  }, {
    "name" : "private ResourcesKey rebaseActivityOverrideConfig(@NonNull Resources resources, @NonNull Configuration oldOverrideConfig, @Nullable Configuration newOverrideConfig, int displayId)",
    "returnType" : "ResourcesKey",
    "comment" : "\n     * Rebases an updated override config over any old override config and returns the new one\n     * that an Activity's Resources should be set to.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateActivityResources(Resources resources, ResourcesKey newKey, boolean hasLoader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean applyConfigurationToResources(@NonNull Configuration config, @Nullable CompatibilityInfo compat)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean applyConfigurationToResourcesLocked(@NonNull Configuration config, @Nullable CompatibilityInfo compat)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void applyConfigurationToResourcesLocked(@NonNull Configuration config, @Nullable CompatibilityInfo compat, Configuration tmpConfig, ResourcesKey key, ResourcesImpl resourcesImpl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void appendLibAssetForMainAssetPath(String assetPath, String libAsset)",
    "returnType" : "void",
    "comment" : "\n     * Appends the library asset path to any ResourcesImpl object that contains the main\n     * assetPath.\n     * @param assetPath The main asset path for which to add the library asset path.\n     * @param libAsset The library asset path to add.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void appendLibAssetsForMainAssetPath(String assetPath, String[] libAssets)",
    "returnType" : "void",
    "comment" : "\n     * Appends the library asset paths to any ResourcesImpl object that contains the main\n     * assetPath.\n     * @param assetPath The main asset path for which to add the library asset path.\n     * @param libAssets The library asset paths to add.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void applyNewResourceDirsLocked(@NonNull final ApplicationInfo appInfo, @Nullable final String[] oldPaths)",
    "returnType" : "void",
    "comment" : " TODO(adamlesinski): Make this accept more than just overlay directories.",
    "links" : [ ]
  }, {
    "name" : "private void redirectResourcesToNewImplLocked(@NonNull final ArrayMap<ResourcesImpl, ResourcesKey> updatedResourceKeys)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean overrideTokenDisplayAdjustments(IBinder token, @Nullable Consumer<DisplayAdjustments> override)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides the display adjustments of all resources which are associated with the given token.\n     *\n     * @param token The token that owns the resources.\n     * @param override The operation to override the existing display adjustments. If it is null,\n     *                 the override adjustments will be cleared.\n     * @return {@code true} if the override takes effect.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "sResourcesManager", "mResCompatibilityInfo", "mResConfiguration", "mResourceImpls", "mResourceReferences", "mResourcesReferencesQueue", "ENABLE_APK_ASSETS_CACHE", "mLoadedApkAssets", "mCachedApkAssets", "mActivityResourceReferences", "mAdjustedDisplays", "mUpdateCallbacks" ],
  "methodNames" : [ "public static ResourcesManager getInstance()", "public void invalidatePath(String path)", "public Configuration getConfiguration()", " DisplayMetrics getDisplayMetrics()", "protected DisplayMetrics getDisplayMetrics(int displayId, DisplayAdjustments da)", "private static void applyNonDefaultDisplayMetricsToConfiguration(@NonNull DisplayMetrics dm, @NonNull Configuration config)", "public boolean applyCompatConfigurationLocked(int displayDensity, @NonNull Configuration compatConfiguration)", "private Display getAdjustedDisplay(final int displayId, @Nullable DisplayAdjustments displayAdjustments)", "public Display getAdjustedDisplay(final int displayId, Resources resources)", "private static String overlayPathToIdmapPath(String path)", "private ApkAssets loadApkAssets(String path, boolean sharedLib, boolean overlay) throws IOException", "protected AssetManager createAssetManager(@NonNull final ResourcesKey key)", "private static int countLiveReferences(Collection<WeakReference<T>> collection)", "public void dump(String prefix, PrintWriter printWriter)", "private Configuration generateConfig(@NonNull ResourcesKey key, @NonNull DisplayMetrics dm)", "private ResourcesImpl createResourcesImpl(@NonNull ResourcesKey key)", "private ResourcesImpl findResourcesImplForKeyLocked(@NonNull ResourcesKey key)", "private ResourcesImpl findOrCreateResourcesImplForKeyLocked(@NonNull ResourcesKey key)", "private ResourcesKey findKeyForResourceImplLocked(@NonNull ResourcesImpl resourceImpl)", " boolean isSameResourcesOverrideConfig(@Nullable IBinder activityToken, @Nullable Configuration overrideConfig)", "private ActivityResources getOrCreateActivityResourcesStructLocked(@NonNull IBinder activityToken)", "private Resources findResourcesForActivityLocked(@NonNull IBinder targetActivityToken, @NonNull ResourcesKey targetKey, @NonNull ClassLoader targetClassLoader)", "private Resources createResourcesForActivityLocked(@NonNull IBinder activityToken, @NonNull ClassLoader classLoader, @NonNull ResourcesImpl impl, @NonNull CompatibilityInfo compatInfo)", "private Resources createResourcesLocked(@NonNull ClassLoader classLoader, @NonNull ResourcesImpl impl, @NonNull CompatibilityInfo compatInfo)", "public Resources createBaseTokenResources(@NonNull IBinder token, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, int displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader, @Nullable List<ResourcesLoader> loaders)", "private void rebaseKeyForActivity(IBinder activityToken, ResourcesKey key)", "private static void cleanupReferences(ArrayList<WeakReference<T>> references, ReferenceQueue<T> referenceQueue)", "private Resources createResources(@Nullable IBinder activityToken, @NonNull ResourcesKey key, @NonNull ClassLoader classLoader)", "public Resources getResources(@Nullable IBinder activityToken, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, int displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader, @Nullable List<ResourcesLoader> loaders)", "public void updateResourcesForActivity(@NonNull IBinder activityToken, @Nullable Configuration overrideConfig, int displayId, boolean movedToDifferentDisplay)", "private ResourcesKey rebaseActivityOverrideConfig(@NonNull Resources resources, @NonNull Configuration oldOverrideConfig, @Nullable Configuration newOverrideConfig, int displayId)", "private void updateActivityResources(Resources resources, ResourcesKey newKey, boolean hasLoader)", "public final boolean applyConfigurationToResources(@NonNull Configuration config, @Nullable CompatibilityInfo compat)", "public final boolean applyConfigurationToResourcesLocked(@NonNull Configuration config, @Nullable CompatibilityInfo compat)", "private void applyConfigurationToResourcesLocked(@NonNull Configuration config, @Nullable CompatibilityInfo compat, Configuration tmpConfig, ResourcesKey key, ResourcesImpl resourcesImpl)", "public void appendLibAssetForMainAssetPath(String assetPath, String libAsset)", "public void appendLibAssetsForMainAssetPath(String assetPath, String[] libAssets)", " final void applyNewResourceDirsLocked(@NonNull final ApplicationInfo appInfo, @Nullable final String[] oldPaths)", "private void redirectResourcesToNewImplLocked(@NonNull final ArrayMap<ResourcesImpl, ResourcesKey> updatedResourceKeys)", "public boolean overrideTokenDisplayAdjustments(IBinder token, @Nullable Consumer<DisplayAdjustments> override)" ]
}