{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToTextSAXHandler.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToTextSAXHandler",
  "comment" : "\n * This class converts SAX-like event to SAX events for\n * xsl:output method \"text\". \n * \n * This class is only to be used internally. This class is not a public API.\n * \n * @deprecated As of Xalan 2.7.1, replaced by the use of {@link ToXMLSAXHandler}.\n * \n * @xsl.usage internal\n ",
  "links" : [ "org.apache.xml.serializer.ToXMLSAXHandler" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String arg0, String arg1, String arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#endElement(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void comment(String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Properties getOutputFormat()",
    "returnType" : "Properties",
    "comment" : "\n     * @see Serializer#getOutputFormat()\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * @see Serializer#getOutputStream()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * @see Serializer#getWriter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void indent(int n) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Does nothing because \n     * the indent attribute is ignored for text output.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * @see Serializer#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void serialize(Node node) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @see DOMSerializer#serialize(Node)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setEscaping(boolean escape)",
    "returnType" : "boolean",
    "comment" : "\n     * @see SerializationHandler#setEscaping(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndent(boolean indent)",
    "returnType" : "void",
    "comment" : "\n     * @see SerializationHandler#setIndent(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputFormat(Properties format)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setOutputFormat(Properties)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputStream(OutputStream output)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setOutputStream(OutputStream)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriter(Writer writer)",
    "returnType" : "void",
    "comment" : "\n     * @see Serializer#setWriter(Writer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#addAttribute(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#attributeDecl(String, String, String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#elementDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String arg0, String arg1, String arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#externalEntityDecl(String, String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.DeclHandler#internalEntityDecl(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String arg0) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#endPrefixMapping(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#ignorableWhitespace(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String arg0, String arg1) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     * @see org.xml.sax.ContentHandler#processingInstruction(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator arg0)",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#setDocumentLocator(Locator)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String arg0) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#skippedEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ContentHandler#startElement(String, String, String, Attributes)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#endCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#endDTD()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#startCDATA()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String arg0) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see org.xml.sax.ext.LexicalHandler#startEntity(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     * @see ExtendedContentHandler#startElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String elementName) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     * @see org.xml.sax.ContentHandler#endDocument()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(String characters) throws SAXException",
    "returnType" : "void",
    "comment" : "\n\t *\t\n     * @see ExtendedContentHandler#characters(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] characters, int offset, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n\t * @see org.xml.sax.ContentHandler#characters(char[], int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String name, String value)",
    "returnType" : "void",
    "comment" : "\n     * From XSLTC\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void endElement(String elemName) throws SAXException", "public void endElement(String arg0, String arg1, String arg2) throws SAXException", "public void comment(char[] ch, int start, int length) throws org.xml.sax.SAXException", "public void comment(String data) throws org.xml.sax.SAXException", "public Properties getOutputFormat()", "public OutputStream getOutputStream()", "public Writer getWriter()", "public void indent(int n) throws SAXException", "public boolean reset()", "public void serialize(Node node) throws IOException", "public boolean setEscaping(boolean escape)", "public void setIndent(boolean indent)", "public void setOutputFormat(Properties format)", "public void setOutputStream(OutputStream output)", "public void setWriter(Writer writer)", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean XSLAttribute)", "public void attributeDecl(String arg0, String arg1, String arg2, String arg3, String arg4) throws SAXException", "public void elementDecl(String arg0, String arg1) throws SAXException", "public void externalEntityDecl(String arg0, String arg1, String arg2) throws SAXException", "public void internalEntityDecl(String arg0, String arg1) throws SAXException", "public void endPrefixMapping(String arg0) throws SAXException", "public void ignorableWhitespace(char[] arg0, int arg1, int arg2) throws SAXException", "public void processingInstruction(String arg0, String arg1) throws SAXException", "public void setDocumentLocator(Locator arg0)", "public void skippedEntity(String arg0) throws SAXException", "public void startElement(String arg0, String arg1, String arg2, Attributes arg3) throws SAXException", "public void endCDATA() throws SAXException", "public void endDTD() throws SAXException", "public void startCDATA() throws SAXException", "public void startEntity(String arg0) throws SAXException", "public void startElement(String elementNamespaceURI, String elementLocalName, String elementName) throws SAXException", "public void startElement(String elementName) throws SAXException", "public void endDocument() throws SAXException", "public void characters(String characters) throws SAXException", "public void characters(char[] characters, int offset, int length) throws SAXException", "public void addAttribute(String name, String value)", "public boolean startPrefixMapping(String prefix, String uri, boolean shouldFlush) throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws org.xml.sax.SAXException", "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException" ],
  "variableNames" : [ ]
}