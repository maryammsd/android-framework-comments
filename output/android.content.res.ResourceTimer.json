{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/res/ResourceTimer.java",
  "packageName" : "android.content.res",
  "className" : "ResourceTimer",
  "comment" : "\n * Provides access to the resource timers without intruding on other classes.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnabled",
    "type" : "boolean",
    "comment" : " never set true at runtime, so setting it false here disables the feature entirely.",
    "links" : [ ]
  }, {
    "name" : "sIncrementalMetrics",
    "type" : "boolean",
    "comment" : " the process).",
    "links" : [ ]
  }, {
    "name" : "ENABLE_DEBUG",
    "type" : "boolean",
    "comment" : " Set true to enable some debug behavior.",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : " The global lock.",
    "links" : [ ]
  }, {
    "name" : "sManager",
    "type" : "ResourceTimer",
    "comment" : " The singleton cache manager",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " The handler for the timeouts.",
    "links" : [ ]
  }, {
    "name" : "sProcessStart",
    "type" : "long",
    "comment" : " The time at which the process started.",
    "links" : [ ]
  }, {
    "name" : "sPublicationPoints",
    "type" : "long[]",
    "comment" : " are in units of minutes.",
    "links" : [ ]
  }, {
    "name" : "sCurrentPoint",
    "type" : "int",
    "comment" : " The index of the latest publication point.",
    "links" : [ ]
  }, {
    "name" : "sConfig",
    "type" : "Config",
    "comment" : "\n     * A singleton Config.  This is initialized when the timers are started.\n     ",
    "links" : [ ]
  }, {
    "name" : "sApiMap",
    "type" : "int[]",
    "comment" : "\n     * This array contains the statsd enum associated with each timer entry.  A value of NONE (0)\n     * means that the entry should not be logged to statsd.  (This would be the case for timers\n     * that are created for temporary debugging.)\n     ",
    "links" : [ ]
  }, {
    "name" : "sTimers",
    "type" : "Timer[]",
    "comment" : "\n     * A singleton Summary object that is refilled from the native side.  The length of the array\n     * is the number of timers that can be fetched.  nativeGetTimers() will fill the array to the\n     * smaller of the length of the array or the actual number of timers in the runtime.  The\n     * actual number of timers in the run time is returned by the function.\n     ",
    "links" : [ ]
  }, {
    "name" : "sLastUpdated",
    "type" : "long",
    "comment" : "\n     * The time at which the local timer array was last updated.  This has the same units as\n     * sProcessStart; the difference is the process run time.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void start()",
    "returnType" : "void",
    "comment" : "\n     * Start the manager.  This runs a periodic job that collects and publishes timer values.\n     * This is not part of the constructor only because the looper failicities might not be\n     * available at the beginning of time.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void handleMessage(Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Handle a refresh message.  Publish the metrics and start a timer for the next publication.\n     * The message parameter is unused.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void startTimer()",
    "returnType" : "void",
    "comment" : "\n     * Start a timer to the next publication point.  Publication points are referenced from\n     * process start.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void update(boolean reset)",
    "returnType" : "void",
    "comment" : "\n     * Update the local copy of the timers.  The current time is saved as well.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void publish()",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the accumulated timer information, reset the native counters, and advance the\n     * publication point.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String packedString(int[] a)",
    "returnType" : "String",
    "comment" : "\n     * Given an int[], return a string that is formatted as \"a,b,c\" with no spaces.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void dumpTimers(@NonNull ParcelFileDescriptor pfd, @Nullable String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Update the metrics information and dump it.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeEnableTimers(@NonNull Config config)",
    "returnType" : "int",
    "comment" : " retrieves the runtime timer configuration that are taking effect",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetTimers(@NonNull Timer[] stats, boolean reset)",
    "returnType" : "int",
    "comment" : " runtime timers; it never overflows.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void start()", "private static void handleMessage(Message msg)", "private static void startTimer()", "private static void update(boolean reset)", "private static void publish()", "private static String packedString(int[] a)", "public static void dumpTimers(@NonNull ParcelFileDescriptor pfd, @Nullable String[] args)", "private static native int nativeEnableTimers(@NonNull Config config)", "private static native int nativeGetTimers(@NonNull Timer[] stats, boolean reset)" ],
  "variableNames" : [ "TAG", "sEnabled", "sIncrementalMetrics", "ENABLE_DEBUG", "sLock", "sManager", "mHandler", "sProcessStart", "sPublicationPoints", "sCurrentPoint", "sConfig", "sApiMap", "sTimers", "sLastUpdated" ]
}