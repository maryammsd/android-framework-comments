{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/StringSearch.java",
  "packageName" : "android.icu.text",
  "className" : "StringSearch",
  "comment" : " if necessary. methods could change the index position as it deems fit",
  "links" : [ ],
  "variables" : [ {
    "name" : "pattern_",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "collator_",
    "type" : "RuleBasedCollator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "textIter_",
    "type" : "CollationElementIterator",
    "comment" : " if we are at the start of the text.",
    "links" : [ ]
  }, {
    "name" : "textProcessedIter_",
    "type" : "CollationPCE",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "utilIter_",
    "type" : "CollationElementIterator",
    "comment" : " iteration.",
    "links" : [ ]
  }, {
    "name" : "nfd_",
    "type" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "strength_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ceMask_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "variableTop_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "toShift_",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL_ARRAY_SIZE_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRIMARYORDERMASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDARYORDERMASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TERTIARYORDERMASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CE_MATCH",
    "type" : "int",
    "comment" : " Java porting note: Followings are corresponding to UCompareCEsResult enum",
    "links" : [ ]
  }, {
    "name" : "CE_NO_MATCH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CE_SKIP_TARG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CE_SKIP_PATN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CE_LEVEL2_BASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CE_LEVEL3_BASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public RuleBasedCollator getCollator()",
    "returnType" : "RuleBasedCollator",
    "comment" : "\n     * Gets the {@link RuleBasedCollator} used for the language rules.\n     * <p>\n     * Since <tt>StringSearch</tt> depends on the returned {@link RuleBasedCollator}, any\n     * changes to the {@link RuleBasedCollator} result should follow with a call to\n     * either {@link #reset()} or {@link #setCollator(RuleBasedCollator)} to ensure the correct\n     * search behavior.\n     * </p>\n     * @return {@link RuleBasedCollator} used by this <tt>StringSearch</tt>\n     * @see RuleBasedCollator\n     * @see #setCollator\n     ",
    "links" : [ "#reset()", "android.icu.text.RuleBasedCollator", "#setCollator(RuleBasedCollator)" ]
  }, {
    "name" : "public void setCollator(RuleBasedCollator collator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link RuleBasedCollator} to be used for language-specific searching.\n     * <p>\n     * The iterator's position will not be changed by this method.\n     * @param collator to use for this <tt>StringSearch</tt>\n     * @throws IllegalArgumentException thrown when collator is null\n     * @see #getCollator\n     ",
    "links" : [ "android.icu.text.RuleBasedCollator" ]
  }, {
    "name" : "public String getPattern()",
    "returnType" : "String",
    "comment" : "\n     * Returns the pattern for which <tt>StringSearch</tt> is searching for.\n     * @return the pattern searched for\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPattern(String pattern)",
    "returnType" : "void",
    "comment" : "\n     * Set the pattern to search for.\n     * The iterator's position will not be changed by this method.\n     * @param pattern for searching\n     * @see #getPattern\n     * @exception IllegalArgumentException thrown if pattern is null or of\n     *               length 0\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCanonical()",
    "returnType" : "boolean",
    "comment" : "TODO: hoist this to SearchIterator",
    "links" : [ ]
  }, {
    "name" : "public void setCanonical(boolean allowCanonical)",
    "returnType" : "void",
    "comment" : "TODO: hoist this to SearchIterator",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(CharacterIterator text)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIndex(int position)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleNext(int position)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handlePrevious(int position)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getMask(int strength)",
    "returnType" : "int",
    "comment" : "\n     * Getting the mask for collation strength\n     * @param strength collation strength\n     * @return collation element mask\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getCE(int sourcece)",
    "returnType" : "int",
    "comment" : "\n     * Getting the modified collation elements taking into account the collation\n     * attributes.\n     *\n     * @param sourcece\n     * @return the modified collation element\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int[] addToIntArray(int[] destination, int offset, int value, int increments)",
    "returnType" : "int[]",
    "comment" : "\n     * Direct port of ICU4C static int32_t * addTouint32_tArray(...) in usearch.cpp\n     * (except not taking destination buffer size and status param).\n     * This is used for appending a PCE to Pattern.PCE_ buffer. We probably should\n     * implement this in Pattern class.\n     *\n     * @param destination target array\n     * @param offset destination offset to add value\n     * @param value to be added\n     * @param increments incremental size expected\n     * @return new destination array, destination if there was no new allocation\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] addToLongArray(long[] destination, int offset, int destinationlength, long value, int increments)",
    "returnType" : "long[]",
    "comment" : "\n     * Direct port of ICU4C static int64_t * addTouint64_tArray(...) in usearch.cpp.\n     * This is used for appending a PCE to Pattern.PCE_ buffer. We probably should\n     * implement this in Pattern class.\n     *\n     * @param destination target array\n     * @param offset destination offset to add value\n     * @param destinationlength target array size\n     * @param value to be added\n     * @param increments incremental size expected\n     * @return new destination array, destination if there was no new allocation\n     ",
    "links" : [ ]
  }, {
    "name" : "private int initializePatternCETable()",
    "returnType" : "int",
    "comment" : " TODO: We probably do not need Pattern CE table.",
    "links" : [ ]
  }, {
    "name" : "private int initializePatternPCETable()",
    "returnType" : "int",
    "comment" : "\n     * Initializing the pce table for a pattern.\n     * Stores non-ignorable collation keys.\n     * Table size will be estimated by the size of the pattern text. Table\n     * expansion will be perform as we go along. Adding 1 to ensure that the table\n     * size definitely increases.\n     * @return total number of expansions\n     ",
    "links" : [ ]
  }, {
    "name" : "private int initializePattern()",
    "returnType" : "int",
    "comment" : "      longer needed.",
    "links" : [ ]
  }, {
    "name" : "private void initialize()",
    "returnType" : "void",
    "comment" : "      longer needed.",
    "links" : [ ]
  }, {
    "name" : "protected void setMatchNotFound()",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final boolean isOutOfBounds(int textstart, int textlimit, int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the offset runs out of the text string range\n     * @param textstart offset of the first character in the range\n     * @param textlimit limit offset of the text string range\n     * @param offset to test\n     * @return true if offset is out of bounds, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean checkIdentical(int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks for identical match\n     * @param start offset of possible match\n     * @param end offset of possible match\n     * @return true if identical match is found\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean initTextProcessedIter()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int nextBoundaryAfter(int startIndex)",
    "returnType" : "int",
    "comment" : "\n     * Find the next break boundary after startIndex. If the UStringSearch object\n     * has an external break iterator, use that. Otherwise use the internal character\n     * break iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isBreakBoundary(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if index is on a break boundary. If the UStringSearch\n     * has an external break iterator, test using that, otherwise test\n     * using the internal character break iterator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int compareCE64s(long targCE, long patCE, ElementComparisonType compareType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean search(int startIdx, Match m)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int codePointAt(CharacterIterator iter, int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int codePointBefore(CharacterIterator iter, int index)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean searchBackwards(int startIdx, Match m)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleNextExact()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleNextCanonical()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handleNextCommonImpl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handlePreviousExact()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handlePreviousCanonical()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean handlePreviousCommonImpl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final String getString(CharacterIterator text, int start, int length)",
    "returnType" : "String",
    "comment" : "\n     * Gets a substring out of a CharacterIterator\n     *\n     * Java porting note: Not available in ICU4C\n     *\n     * @param text CharacterIterator\n     * @param start start offset\n     * @param length of substring\n     * @return substring from text starting at start and length length\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public RuleBasedCollator getCollator()", "public void setCollator(RuleBasedCollator collator)", "public String getPattern()", "public void setPattern(String pattern)", "public boolean isCanonical()", "public void setCanonical(boolean allowCanonical)", "public void setTarget(CharacterIterator text)", "public int getIndex()", "public void setIndex(int position)", "public void reset()", "protected int handleNext(int position)", "protected int handlePrevious(int position)", "private static int getMask(int strength)", "private int getCE(int sourcece)", "private static int[] addToIntArray(int[] destination, int offset, int value, int increments)", "private static long[] addToLongArray(long[] destination, int offset, int destinationlength, long value, int increments)", "private int initializePatternCETable()", "private int initializePatternPCETable()", "private int initializePattern()", "private void initialize()", "protected void setMatchNotFound()", "private static final boolean isOutOfBounds(int textstart, int textlimit, int offset)", "private boolean checkIdentical(int start, int end)", "private boolean initTextProcessedIter()", "private int nextBoundaryAfter(int startIndex)", "private boolean isBreakBoundary(int index)", "private static int compareCE64s(long targCE, long patCE, ElementComparisonType compareType)", "private boolean search(int startIdx, Match m)", "private static int codePointAt(CharacterIterator iter, int index)", "private static int codePointBefore(CharacterIterator iter, int index)", "private boolean searchBackwards(int startIdx, Match m)", "private boolean handleNextExact()", "private boolean handleNextCanonical()", "private boolean handleNextCommonImpl()", "private boolean handlePreviousExact()", "private boolean handlePreviousCanonical()", "private boolean handlePreviousCommonImpl()", "private static final String getString(CharacterIterator text, int start, int length)" ],
  "variableNames" : [ "pattern_", "collator_", "textIter_", "textProcessedIter_", "utilIter_", "nfd_", "strength_", "ceMask_", "variableTop_", "toShift_", "INITIAL_ARRAY_SIZE_", "PRIMARYORDERMASK", "SECONDARYORDERMASK", "TERTIARYORDERMASK", "CE_MATCH", "CE_NO_MATCH", "CE_SKIP_TARG", "CE_SKIP_PATN", "CE_LEVEL2_BASE", "CE_LEVEL3_BASE" ]
}