{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/appwidget/AppWidgetHost.java",
  "packageName" : "android.appwidget",
  "className" : "AppWidgetHost",
  "comment" : "\n * AppWidgetHost provides the interaction with the AppWidget service for apps,\n * like the home screen, that want to embed AppWidgets in their UI.\n ",
  "variables" : [ {
    "name" : "HANDLE_UPDATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_PROVIDER_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_PROVIDERS_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_VIEW_DATA_CHANGED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_APP_WIDGET_REMOVED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sServiceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IAppWidgetService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sServiceInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayMetrics",
    "type" : "DisplayMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContextOpPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHostId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "Callbacks",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mViews",
    "type" : "SparseArray<AppWidgetHostView>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnClickHandler",
    "type" : "OnClickHandler",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void bindService(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startListening()",
    "returnType" : "void",
    "comment" : "\n     * Start receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity\n     * becomes visible, i.e. from onStart() in your Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopListening()",
    "returnType" : "void",
    "comment" : "\n     * Stop receiving onAppWidgetChanged calls for your AppWidgets.  Call this when your activity is\n     * no longer visible, i.e. from onStop() in your Activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int allocateAppWidgetId()",
    "returnType" : "int",
    "comment" : "\n     * Get a appWidgetId for a host in the calling process.\n     *\n     * @return a appWidgetId\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void startAppWidgetConfigureActivityForResult(@NonNull Activity activity, int appWidgetId, int intentFlags, int requestCode, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Starts an app widget provider configure activity for result on behalf of the caller.\n     * Use this method if the provider is in another profile as you are not allowed to start\n     * an activity in another profile. You can optionally provide a request code that is\n     * returned in {@link Activity#onActivityResult(int, int, android.content.Intent)} and\n     * an options bundle to be passed to the started activity.\n     * <p>\n     * Note that the provided app widget has to be bound for this method to work.\n     * </p>\n     *\n     * @param activity The activity from which to start the configure one.\n     * @param appWidgetId The bound app widget whose provider's config activity to start.\n     * @param requestCode Optional request code retuned with the result.\n     * @param intentFlags Optional intent flags.\n     *\n     * @throws android.content.ActivityNotFoundException If the activity is not found.\n     *\n     * @see AppWidgetProviderInfo#getProfile()\n     ",
    "links" : [ "android.app.Activity#onActivityResult(int" ]
  }, {
    "name" : "public int[] getAppWidgetIds()",
    "returnType" : "int[]",
    "comment" : "\n     * Gets a list of all the appWidgetIds that are bound to the current host\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteAppWidgetId(int appWidgetId)",
    "returnType" : "void",
    "comment" : "\n     * Stop listening to changes for this AppWidget.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteHost()",
    "returnType" : "void",
    "comment" : "\n     * Remove all records about this host from the AppWidget manager.\n     * <ul>\n     *   <li>Call this when initializing your database, as it might be because of a data wipe.</li>\n     *   <li>Call this to have the AppWidget manager release all resources associated with your\n     *   host.  Any future calls about this host will cause the records to be re-allocated.</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void deleteAllHosts()",
    "returnType" : "void",
    "comment" : "\n     * Remove all records about all hosts for your package.\n     * <ul>\n     *   <li>Call this when initializing your database, as it might be because of a data wipe.</li>\n     *   <li>Call this to have the AppWidget manager release all resources associated with your\n     *   host.  Any future calls about this host will cause the records to be re-allocated.</li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public final AppWidgetHostView createView(Context context, int appWidgetId, AppWidgetProviderInfo appWidget)",
    "returnType" : "AppWidgetHostView",
    "comment" : "\n     * Create the AppWidgetHostView for the given widget.\n     * The AppWidgetHost retains a pointer to the newly-created View.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected AppWidgetHostView onCreateView(Context context, int appWidgetId, AppWidgetProviderInfo appWidget)",
    "returnType" : "AppWidgetHostView",
    "comment" : "\n     * Called to create the AppWidgetHostView.  Override to return a custom subclass if you\n     * need it.  {@more}\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onProviderChanged(int appWidgetId, AppWidgetProviderInfo appWidget)",
    "returnType" : "void",
    "comment" : "\n     * Called when the AppWidget provider for a AppWidget has been upgraded to a new apk.\n     ",
    "links" : [ ]
  }, {
    "name" : " void dispatchOnAppWidgetRemoved(int appWidgetId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAppWidgetRemoved(int appWidgetId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the app widget is removed for appWidgetId\n     * @param appWidgetId\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onProvidersChanged()",
    "returnType" : "void",
    "comment" : "\n     * Called when the set of available widgets changes (ie. widget containing packages\n     * are added, updated or removed, or widget components are enabled or disabled.)\n     ",
    "links" : [ ]
  }, {
    "name" : " void updateAppWidgetView(int appWidgetId, RemoteViews views)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void viewDataChanged(int appWidgetId, int viewId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void clearViews()",
    "returnType" : "void",
    "comment" : "\n     * Clear the list of Views that have been created by this AppWidgetHost.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "HANDLE_UPDATE", "HANDLE_PROVIDER_CHANGED", "HANDLE_PROVIDERS_CHANGED", "HANDLE_VIEW_DATA_CHANGED", "HANDLE_APP_WIDGET_REMOVED", "sServiceLock", "sService", "sServiceInitialized", "mDisplayMetrics", "mContextOpPackageName", "mHandler", "mHostId", "mCallbacks", "mViews", "mOnClickHandler" ],
  "methodNames" : [ "private static void bindService(Context context)", "public void startListening()", "public void stopListening()", "public int allocateAppWidgetId()", "public final void startAppWidgetConfigureActivityForResult(@NonNull Activity activity, int appWidgetId, int intentFlags, int requestCode, @Nullable Bundle options)", "public int[] getAppWidgetIds()", "public void deleteAppWidgetId(int appWidgetId)", "public void deleteHost()", "public static void deleteAllHosts()", "public final AppWidgetHostView createView(Context context, int appWidgetId, AppWidgetProviderInfo appWidget)", "protected AppWidgetHostView onCreateView(Context context, int appWidgetId, AppWidgetProviderInfo appWidget)", "protected void onProviderChanged(int appWidgetId, AppWidgetProviderInfo appWidget)", " void dispatchOnAppWidgetRemoved(int appWidgetId)", "public void onAppWidgetRemoved(int appWidgetId)", "protected void onProvidersChanged()", " void updateAppWidgetView(int appWidgetId, RemoteViews views)", " void viewDataChanged(int appWidgetId, int viewId)", "protected void clearViews()" ]
}