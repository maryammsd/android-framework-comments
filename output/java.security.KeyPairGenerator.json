{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyPairGenerator.java",
  "packageName" : "java.security",
  "className" : "KeyPairGenerator",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the standard name of the algorithm for this key pair generator.\n     * See the KeyPairGenerator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keypairgenerator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return the standard string name of the algorithm.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static KeyPairGenerator getInstance(Instance instance, String algorithm)",
    "returnType" : "KeyPairGenerator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static KeyPairGenerator getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "KeyPairGenerator",
    "comment" : "\n     * Returns a KeyPairGenerator object that generates public/private\n     * key pairs for the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new KeyPairGenerator object encapsulating the\n     * KeyPairGeneratorSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the standard string name of the algorithm.\n     * See the KeyPairGenerator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keypairgenerator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new {@code KeyPairGenerator} object\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code KeyPairGeneratorSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyPairGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "KeyPairGenerator",
    "comment" : "\n     * Returns a KeyPairGenerator object that generates public/private\n     * key pairs for the specified algorithm.\n     *\n     * <p> A new KeyPairGenerator object encapsulating the\n     * KeyPairGeneratorSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard string name of the algorithm.\n     * See the KeyPairGenerator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keypairgenerator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the string name of the provider.\n     *\n     * @return the new {@code KeyPairGenerator} object\n     *\n     * @throws IllegalArgumentException if the provider name is {@code null}\n     *         or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code KeyPairGeneratorSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static KeyPairGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "KeyPairGenerator",
    "comment" : "\n     * Returns a KeyPairGenerator object that generates public/private\n     * key pairs for the specified algorithm.\n     *\n     * <p> A new KeyPairGenerator object encapsulating the\n     * KeyPairGeneratorSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard string name of the algorithm.\n     * See the KeyPairGenerator section in the <a href=\n     * \"{@docRoot}/../specs/security/standard-names.html#keypairgenerator-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new {@code KeyPairGenerator} object\n     *\n     * @throws IllegalArgumentException if the specified provider is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code KeyPairGeneratorSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see Provider\n     *\n     * @since 1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this key pair generator object.\n     *\n     * @return the provider of this key pair generator object\n     ",
    "links" : [ ]
  }, {
    "name" : " void disableFailover()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initialize(int keysize)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator for a certain keysize using\n     * a default parameter set and the {@code SecureRandom}\n     * implementation of the highest-priority installed provider as the source\n     * of randomness.\n     * (If none of the installed providers supply an implementation of\n     * {@code SecureRandom}, a system-provided source of randomness is\n     * used.)\n     *\n     * @param keysize the keysize. This is an\n     * algorithm-specific metric, such as modulus length, specified in\n     * number of bits.\n     *\n     * @exception InvalidParameterException if the {@code keysize} is not\n     * supported by this KeyPairGenerator object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initialize(int keysize, SecureRandom random)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator for a certain keysize with\n     * the given source of randomness (and a default parameter set).\n     *\n     * @param keysize the keysize. This is an\n     * algorithm-specific metric, such as modulus length, specified in\n     * number of bits.\n     * @param random the source of randomness.\n     *\n     * @exception InvalidParameterException if the {@code keysize} is not\n     * supported by this KeyPairGenerator object.\n     *\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void initialize(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator using the specified parameter\n     * set and the {@code SecureRandom}\n     * implementation of the highest-priority installed provider as the source\n     * of randomness.\n     * (If none of the installed providers supply an implementation of\n     * {@code SecureRandom}, a system-provided source of randomness is\n     * used.)\n     *\n     * <p>This concrete method has been added to this previously-defined\n     * abstract class.\n     * This method calls the KeyPairGeneratorSpi\n     * {@link KeyPairGeneratorSpi#initialize(\n     * java.security.spec.AlgorithmParameterSpec,\n     * java.security.SecureRandom) initialize} method,\n     * passing it {@code params} and a source of randomness (obtained\n     * from the highest-priority installed provider or system-provided if none\n     * of the installed providers supply one).\n     * That {@code initialize} method always throws an\n     * UnsupportedOperationException if it is not overridden by the provider.\n     *\n     * @param params the parameter set used to generate the keys.\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key pair generator.\n     *\n     * @since 1.2\n     ",
    "links" : [ "java.security.KeyPairGeneratorSpi#initialize(" ]
  }, {
    "name" : "public void initialize(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes the key pair generator with the given parameter\n     * set and source of randomness.\n     *\n     * <p>This concrete method has been added to this previously-defined\n     * abstract class.\n     * This method calls the KeyPairGeneratorSpi {@link\n     * KeyPairGeneratorSpi#initialize(\n     * java.security.spec.AlgorithmParameterSpec,\n     * java.security.SecureRandom) initialize} method,\n     * passing it {@code params} and {@code random}.\n     * That {@code initialize}\n     * method always throws an\n     * UnsupportedOperationException if it is not overridden by the provider.\n     *\n     * @param params the parameter set used to generate the keys.\n     * @param random the source of randomness.\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key pair generator.\n     *\n     * @since 1.2\n     ",
    "links" : [ "java.security.KeyPairGeneratorSpi#initialize(" ]
  }, {
    "name" : "public final KeyPair genKeyPair()",
    "returnType" : "KeyPair",
    "comment" : "\n     * Generates a key pair.\n     *\n     * <p>If this KeyPairGenerator has not been initialized explicitly,\n     * provider-specific defaults will be used for the size and other\n     * (algorithm-specific) values of the generated keys.\n     *\n     * <p>This will generate a new key pair every time it is called.\n     *\n     * <p>This method is functionally equivalent to\n     * {@link #generateKeyPair() generateKeyPair}.\n     *\n     * @return the generated key pair\n     *\n     * @since 1.2\n     ",
    "links" : [ "#generateKeyPair()" ]
  }, {
    "name" : "public KeyPair generateKeyPair()",
    "returnType" : "KeyPair",
    "comment" : "\n     * Generates a key pair.\n     *\n     * <p>If this KeyPairGenerator has not been initialized explicitly,\n     * provider-specific defaults will be used for the size and other\n     * (algorithm-specific) values of the generated keys.\n     *\n     * <p>This will generate a new key pair every time it is called.\n     *\n     * <p>This method is functionally equivalent to\n     * {@link #genKeyPair() genKeyPair}.\n     *\n     * @return the generated key pair\n     ",
    "links" : [ "#genKeyPair()" ]
  } ],
  "methodNames" : [ "public String getAlgorithm()", "private static KeyPairGenerator getInstance(Instance instance, String algorithm)", "public static KeyPairGenerator getInstance(String algorithm) throws NoSuchAlgorithmException", "public static KeyPairGenerator getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static KeyPairGenerator getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", " void disableFailover()", "public void initialize(int keysize)", "public void initialize(int keysize, SecureRandom random)", "public void initialize(AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException", "public void initialize(AlgorithmParameterSpec params, SecureRandom random) throws InvalidAlgorithmParameterException", "public final KeyPair genKeyPair()", "public KeyPair generateKeyPair()" ],
  "variableNames" : [ "algorithm", "provider" ]
}