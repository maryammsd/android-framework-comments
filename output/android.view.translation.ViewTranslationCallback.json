{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/translation/ViewTranslationCallback.java",
  "packageName" : "android.view.translation",
  "className" : "ViewTranslationCallback",
  "comment" : "\n * <p> Callback for handling the translated information show or hide in the {@link View}.\n *\n * <p> When the platform intelligence starts translation of an app's ui, the system will call\n * {@link View#dispatchCreateViewTranslationRequest} to collect the {@link ViewTranslationRequest}s\n * for translation purpose by traversing the hierarchy then send to translation service. After\n * receiving the {@link ViewTranslationResponse}, the system will call\n * {@link ViewTranslationCallback#onShowTranslation(View)} to show the translated information for\n * the {@link View}.\n ",
  "links" : [ "android.view.translation.ViewTranslationResponse", "android.view.View#dispatchCreateViewTranslationRequest", "android.view.translation.ViewTranslationCallback#onShowTranslation(View)", "android.view.View", "android.view.translation.ViewTranslationRequest" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean onShowTranslation(@NonNull View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when the translated text is ready to show or if the user has requested to reshow the\n     * translated content after hiding it.\n     * <p>\n     * The translated content can be obtained from {@link View#getViewTranslationResponse}. This\n     * method will not be called before {@link View#onViewTranslationResponse} or\n     * {@link View#onVirtualViewTranslationResponses}.\n     *\n     * <p> NOTE: It is possible the user changes text that causes a new\n     * {@link ViewTranslationResponse} returns to show the new translation. If you cache the\n     * {@link ViewTranslationResponse} here, you should remember to keep the cached value up\n     * to date.\n     *\n     * <p> NOTE: For TextView implementation, {@link ContentCaptureSession#notifyViewTextChanged}\n     * shouldn't be called with the translated text, simply calling setText() here will trigger the\n     * method. You should either override {@code View#onProvideContentCaptureStructure()} to report\n     * the original text instead of the translated text or use a different approach to display the\n     * translated text.\n     *\n     * <p> NOTE: In Android version {@link android.os.Build.VERSION_CODES#TIRAMISU} and later,\n     * the implementation must be able to handle a selectable {@link android.widget.TextView}\n     * (i.e., {@link android.widget.TextView#isTextSelectable()} returns {@code true}. The default\n     * callback implementation for TextView uses a {@link android.text.method.TransformationMethod}\n     * to show the translated text, which will cause a crash when the translated text is selected.\n     * Therefore, the default callback temporarily makes the TextView non-selectable while the\n     * translation text is shown. This is one approach for handling selectable TextViews a\n     * TransformationMethod is used.\n     *\n     * See {@link View#onViewTranslationResponse} for how to get the translated information.\n     *\n     * @return {@code true} if the View handles showing the translation.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.view.View#onViewTranslationResponse", "android.view.translation.ViewTranslationResponse", "android.widget.TextView", "android.view.View#onVirtualViewTranslationResponses", "android.view.contentcapture.ContentCaptureSession#notifyViewTextChanged", "android.widget.TextView#isTextSelectable()", "android.text.method.TransformationMethod", "android.view.View#getViewTranslationResponse" ]
  }, {
    "name" : " boolean onHideTranslation(@NonNull View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when user wants to view the original content instead of the translated content. This\n     * method will not be called before {@link View#onViewTranslationResponse} or\n     * {@link View#onVirtualViewTranslationResponses}.\n     *\n     * @return {@code true} if the View handles hiding the translation.\n     ",
    "links" : [ "android.view.View#onViewTranslationResponse", "android.view.View#onVirtualViewTranslationResponses" ]
  }, {
    "name" : " boolean onClearTranslation(@NonNull View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Called when the translation state is no longer needed. It should restore the original content\n     * and clear all saved states.\n     *\n     * @return {@code true} if the View handles clearing the translation.\n     ",
    "links" : [ ]
  }, {
    "name" : " void enableContentPadding()",
    "returnType" : "void",
    "comment" : "\n     * Enables padding on the view's original content.\n     * <p>\n     * This is useful when we do not modify the content directly, rather use a mechanism like\n     * {@link android.text.method.TransformationMethod}. If the app misbehaves when the displayed\n     * translation and the underlying content have different sizes, the platform intelligence can\n     * request that the original content be padded to make the sizes match.\n     *\n     * @hide\n     ",
    "links" : [ "android.text.method.TransformationMethod" ]
  }, {
    "name" : " void setAnimationDurationMillis(int durationMillis)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duration for animations while transitioning the view between the original and\n     * translated contents.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean onShowTranslation(@NonNull View view)", " boolean onHideTranslation(@NonNull View view)", " boolean onClearTranslation(@NonNull View view)", " void enableContentPadding()", " void setAnimationDurationMillis(int durationMillis)" ],
  "variableNames" : [ ]
}