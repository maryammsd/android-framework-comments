{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemPI.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemPI",
  "comment" : "\n * Implement xsl:processing-instruction.\n * <pre>\n * <!ELEMENT xsl:processing-instruction %char-template;>\n * <!ATTLIST xsl:processing-instruction\n *   name %avt; #REQUIRED\n *   %space-att;\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Processing-Instructions\">section-Creating-Processing-Instructions in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_name_atv",
    "type" : "AVT",
    "comment" : "\n   * The xsl:processing-instruction element has a required name\n   * attribute that specifies the name of the processing instruction node.\n   * The value of the name attribute is interpreted as an\n   * attribute value template.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * DJD\n   *\n   * @param v Value for the name attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getName()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"name\" attribute.\n   * DJD\n   *\n   * @return The value of the \"name\" attribute \n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for the element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Create a processing instruction in the result tree.\n   * The content of the xsl:processing-instruction element is a\n   * template for the string-value of the processing instruction node.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Processing-Instructions\">section-Creating-Processing-Instructions in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to child list\n   *\n   * @return The child just added to the child list\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(AVT v)", "public AVT getName()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)" ],
  "variableNames" : [ "serialVersionUID", "m_name_atv" ]
}