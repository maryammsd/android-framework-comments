{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/MbmsDownloadSession.java",
  "packageName" : "android.telephony",
  "className" : "MbmsDownloadSession",
  "comment" : "\n * This class provides functionality for file download over MBMS.\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MBMS_DOWNLOAD_SERVICE_ACTION",
    "type" : "String",
    "comment" : "\n     * Service action which must be handled by the middleware implementing the MBMS file download\n     * interface.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MBMS_DOWNLOAD_SERVICE_OVERRIDE_METADATA",
    "type" : "String",
    "comment" : "\n     * Metadata key that specifies the component name of the service to bind to for file-download.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_MBMS_DOWNLOAD_RESULT",
    "type" : "String",
    "comment" : "\n     * Integer extra that Android will attach to the intent supplied via\n     * {@link android.telephony.mbms.DownloadRequest.Builder#setAppIntent(Intent)}\n     * Indicates the result code of the download. One of\n     * {@link #RESULT_SUCCESSFUL}, {@link #RESULT_EXPIRED}, {@link #RESULT_CANCELLED},\n     * {@link #RESULT_IO_ERROR}, {@link #RESULT_DOWNLOAD_FAILURE}, {@link #RESULT_OUT_OF_STORAGE},\n     * {@link #RESULT_SERVICE_ID_NOT_DEFINED}, or {@link #RESULT_FILE_ROOT_UNREACHABLE}.\n     *\n     * This extra may also be used by the middleware when it is sending intents to the app.\n     ",
    "links" : [ "android.telephony.mbms.DownloadRequest.Builder#setAppIntent", "#RESULT_SUCCESSFUL", "#RESULT_EXPIRED", "#RESULT_CANCELLED", "#RESULT_IO_ERROR", "#RESULT_DOWNLOAD_FAILURE", "#RESULT_OUT_OF_STORAGE", "#RESULT_SERVICE_ID_NOT_DEFINED", "#RESULT_FILE_ROOT_UNREACHABLE" ]
  }, {
    "name" : "EXTRA_MBMS_FILE_INFO",
    "type" : "String",
    "comment" : "\n     * {@link FileInfo} extra that Android will attach to the intent supplied via\n     * {@link android.telephony.mbms.DownloadRequest.Builder#setAppIntent(Intent)}\n     * Indicates the file for which the download result is for. Never null.\n     *\n     * This extra may also be used by the middleware when it is sending intents to the app.\n     ",
    "links" : [ "FileInfo", "android.telephony.mbms.DownloadRequest.Builder#setAppIntent" ]
  }, {
    "name" : "EXTRA_MBMS_COMPLETED_FILE_URI",
    "type" : "String",
    "comment" : "\n     * {@link Uri} extra that Android will attach to the intent supplied via\n     * {@link android.telephony.mbms.DownloadRequest.Builder#setAppIntent(Intent)}\n     * Indicates the location of the successfully downloaded file within the directory that the\n     * app provided via the builder.\n     *\n     * Will always be set to a non-null value if\n     * {@link #EXTRA_MBMS_DOWNLOAD_RESULT} is set to {@link #RESULT_SUCCESSFUL}.\n     ",
    "links" : [ "Uri", "android.telephony.mbms.DownloadRequest.Builder#setAppIntent", "#EXTRA_MBMS_DOWNLOAD_RESULT", "#RESULT_SUCCESSFUL" ]
  }, {
    "name" : "EXTRA_MBMS_DOWNLOAD_REQUEST",
    "type" : "String",
    "comment" : "\n     * Extra containing the {@link DownloadRequest} for which the download result or file\n     * descriptor request is for. Must not be null.\n     ",
    "links" : [ "DownloadRequest" ]
  }, {
    "name" : "DEFAULT_TOP_LEVEL_TEMP_DIRECTORY",
    "type" : "String",
    "comment" : "\n     * The default directory name for all MBMS temp files. If you call\n     * {@link #download(DownloadRequest)} without first calling\n     * {@link #setTempFileRootDirectory(File)}, this directory will be created for you under the\n     * path returned by {@link Context#getFilesDir()}.\n     ",
    "links" : [ "#download", "#setTempFileRootDirectory", "Context#getFilesDir" ]
  }, {
    "name" : "RESULT_SUCCESSFUL",
    "type" : "int",
    "comment" : "\n     * Indicates that the download was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_CANCELLED",
    "type" : "int",
    "comment" : "\n     * Indicates that the download was cancelled via {@link #cancelDownload(DownloadRequest)}.\n     ",
    "links" : [ "#cancelDownload" ]
  }, {
    "name" : "RESULT_EXPIRED",
    "type" : "int",
    "comment" : "\n     * Indicates that the download will not be completed due to the expiration of its download\n     * window on the carrier's network.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_IO_ERROR",
    "type" : "int",
    "comment" : "\n     * Indicates that the download will not be completed due to an I/O error incurred while\n     * writing to temp files.\n     *\n     * This is likely a transient error and another {@link DownloadRequest} should be sent to try\n     * the download again.\n     ",
    "links" : [ "DownloadRequest" ]
  }, {
    "name" : "RESULT_SERVICE_ID_NOT_DEFINED",
    "type" : "int",
    "comment" : "\n     * Indicates that the Service ID specified in the {@link DownloadRequest} is incorrect due to\n     * the Id being incorrect, stale, expired, or similar.\n     ",
    "links" : [ "DownloadRequest" ]
  }, {
    "name" : "RESULT_DOWNLOAD_FAILURE",
    "type" : "int",
    "comment" : "\n     * Indicates that there was an error while processing downloaded files, such as a file repair or\n     * file decoding error and is not due to a file I/O error.\n     *\n     * This is likely a transient error and another {@link DownloadRequest} should be sent to try\n     * the download again.\n     ",
    "links" : [ "DownloadRequest" ]
  }, {
    "name" : "RESULT_OUT_OF_STORAGE",
    "type" : "int",
    "comment" : "\n     * Indicates that the file system is full and the {@link DownloadRequest} can not complete.\n     * Either space must be made on the current file system or the temp file root location must be\n     * changed to a location that is not full to download the temp files.\n     ",
    "links" : [ "DownloadRequest" ]
  }, {
    "name" : "RESULT_FILE_ROOT_UNREACHABLE",
    "type" : "int",
    "comment" : "\n     * Indicates that the file root that was set is currently unreachable. This can happen if the\n     * temp files are set to be stored on external storage and the SD card was removed, for example.\n     * The temp file root should be changed before sending another DownloadRequest.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the middleware has no information on the file.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ACTIVELY_DOWNLOADING",
    "type" : "int",
    "comment" : "\n     * Indicates that the file is actively being downloaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PENDING_DOWNLOAD",
    "type" : "int",
    "comment" : "\n     * Indicates that the file is awaiting the next download or repair operations. When a more\n     * precise status is known, the status will change to either {@link #STATUS_PENDING_REPAIR} or\n     * {@link #STATUS_PENDING_DOWNLOAD_WINDOW}.\n     ",
    "links" : [ "#STATUS_PENDING_REPAIR", "#STATUS_PENDING_DOWNLOAD_WINDOW" ]
  }, {
    "name" : "STATUS_PENDING_REPAIR",
    "type" : "int",
    "comment" : "\n     * Indicates that the file is awaiting file repair after the download has ended.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PENDING_DOWNLOAD_WINDOW",
    "type" : "int",
    "comment" : "\n     * Indicates that the file is waiting to download because its download window has not yet\n     * started and is scheduled for a future time.\n     ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_SANITY_CHECK_FILE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsInitialized",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeathRecipient",
    "type" : "IBinder.DeathRecipient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "AtomicReference<IMbmsDownloadService>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceConnection",
    "type" : "ServiceConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalCallback",
    "type" : "InternalDownloadSessionCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalDownloadStatusListeners",
    "type" : "Map<DownloadStatusListener, InternalDownloadStatusListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalDownloadProgressListeners",
    "type" : "Map<DownloadProgressListener, InternalDownloadProgressListener>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MbmsDownloadSession create(@NonNull Context context, @NonNull Executor executor, @NonNull MbmsDownloadSessionCallback callback)",
    "returnType" : "MbmsDownloadSession",
    "comment" : "\n     * Create a new {@link MbmsDownloadSession} using the system default data subscription ID.\n     * See {@link #create(Context, Executor, int, MbmsDownloadSessionCallback)}\n     ",
    "links" : [ "MbmsDownloadSession", "#create" ]
  }, {
    "name" : "public static MbmsDownloadSession create(@NonNull Context context, @NonNull Executor executor, int subscriptionId, @NonNull final MbmsDownloadSessionCallback callback)",
    "returnType" : "MbmsDownloadSession",
    "comment" : "\n     * Create a new MbmsDownloadManager using the given subscription ID.\n     *\n     * Note that this call will bind a remote service and that may take a bit. The instance of\n     * {@link MbmsDownloadSession} that is returned will not be ready for use until\n     * {@link MbmsDownloadSessionCallback#onMiddlewareReady()} is called on the provided callback.\n     * If you attempt to use the instance before it is ready, an {@link IllegalStateException}\n     * will be thrown or an error will be delivered through\n     * {@link MbmsDownloadSessionCallback#onError(int, String)}.\n     *\n     * This also may throw an {@link IllegalArgumentException}.\n     *\n     * You may only have one instance of {@link MbmsDownloadSession} per UID. If you call this\n     * method while there is an active instance of {@link MbmsDownloadSession} in your process\n     * (in other words, one that has not had {@link #close()} called on it), this method will\n     * throw an {@link IllegalStateException}. If you call this method in a different process\n     * running under the same UID, an error will be indicated via\n     * {@link MbmsDownloadSessionCallback#onError(int, String)}.\n     *\n     * Note that initialization may fail asynchronously. If you wish to try again after you\n     * receive such an asynchronous error, you must call {@link #close()} on the instance of\n     * {@link MbmsDownloadSession} that you received before calling this method again.\n     *\n     * @param context The instance of {@link Context} to use\n     * @param executor The executor on which you wish to execute callbacks.\n     * @param subscriptionId The data subscription ID to use\n     * @param callback A callback to get asynchronous error messages and file service updates.\n     * @return A new instance of {@link MbmsDownloadSession}, or null if an error occurred during\n     * setup.\n     ",
    "links" : [ "MbmsDownloadSession", "MbmsDownloadSessionCallback#onMiddlewareReady", "IllegalStateException", "MbmsDownloadSessionCallback#onError", "IllegalArgumentException", "MbmsDownloadSession", "MbmsDownloadSession", "#close", "IllegalStateException", "MbmsDownloadSessionCallback#onError", "#close", "MbmsDownloadSession", "Context", "MbmsDownloadSession" ]
  }, {
    "name" : "private int bindAndInitialize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestUpdateFileServices(@NonNull List<String> classList)",
    "returnType" : "void",
    "comment" : "\n     * An inspection API to retrieve the list of available\n     * {@link android.telephony.mbms.FileServiceInfo}s currently being advertised.\n     * The results are returned asynchronously via a call to\n     * {@link MbmsDownloadSessionCallback#onFileServicesUpdated(List)}\n     *\n     * Asynchronous error codes via the {@link MbmsDownloadSessionCallback#onError(int, String)}\n     * callback may include any of the errors that are not specific to the streaming use-case.\n     *\n     * May throw an {@link IllegalStateException} or {@link IllegalArgumentException}.\n     *\n     * @param classList A list of service classes which the app wishes to receive\n     *                  {@link MbmsDownloadSessionCallback#onFileServicesUpdated(List)} callbacks\n     *                  about. Subsequent calls to this method will replace this list of service\n     *                  classes (i.e. the middleware will no longer send updates for services\n     *                  matching classes only in the old list).\n     *                  Values in this list should be negotiated with the wireless carrier prior\n     *                  to using this API.\n     ",
    "links" : [ "android.telephony.mbms.FileServiceInfo", "MbmsDownloadSessionCallback#onFileServicesUpdated", "MbmsDownloadSessionCallback#onError", "IllegalStateException", "IllegalArgumentException", "MbmsDownloadSessionCallback#onFileServicesUpdated" ]
  }, {
    "name" : "public void setTempFileRootDirectory(@NonNull File tempFileRootDirectory)",
    "returnType" : "void",
    "comment" : "\n     * Sets the temp file root for downloads.\n     * All temp files created for the middleware to write to will be contained in the specified\n     * directory. Applications that wish to specify a location only need to call this method once\n     * as long their data is persisted in storage -- the argument will be stored both in a\n     * local instance of {@link android.content.SharedPreferences} and by the middleware.\n     *\n     * If this method is not called at least once before calling\n     * {@link #download(DownloadRequest)}, the framework\n     * will default to a directory formed by the concatenation of the app's files directory and\n     * {@link MbmsDownloadSession#DEFAULT_TOP_LEVEL_TEMP_DIRECTORY}.\n     *\n     * Before calling this method, the app must cancel all of its pending\n     * {@link DownloadRequest}s via {@link #cancelDownload(DownloadRequest)}. If this is not done,\n     * you will receive an asynchronous error with code\n     * {@link MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT} unless the\n     * provided directory is the same as what has been previously configured.\n     *\n     * The {@link File} supplied as a root temp file directory must already exist. If not, an\n     * {@link IllegalArgumentException} will be thrown. In addition, as an additional sanity\n     * check, an {@link IllegalArgumentException} will be thrown if you attempt to set the temp\n     * file root directory to one of your data roots (the value of {@link Context#getDataDir()},\n     * {@link Context#getFilesDir()}, or {@link Context#getCacheDir()}).\n     * @param tempFileRootDirectory A directory to place temp files in.\n     ",
    "links" : [ "android.content.SharedPreferences", "#download", "MbmsDownloadSession#DEFAULT_TOP_LEVEL_TEMP_DIRECTORY", "DownloadRequest", "#cancelDownload", "MbmsErrors.DownloadErrors#ERROR_CANNOT_CHANGE_TEMP_FILE_ROOT", "File", "IllegalArgumentException", "IllegalArgumentException", "Context#getDataDir", "Context#getFilesDir", "Context#getCacheDir" ]
  }, {
    "name" : "private void validateTempFileRootSanity(File tempFileRootDirectory) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getTempFileRootDirectory()",
    "returnType" : "File",
    "comment" : "\n     * Retrieves the currently configured temp file root directory. Returns the file that was\n     * configured via {@link #setTempFileRootDirectory(File)} or the default directory\n     * {@link #download(DownloadRequest)} was called without ever\n     * setting the temp file root. If neither method has been called since the last time the app's\n     * shared preferences were reset, returns {@code null}.\n     *\n     * @return A {@link File} pointing to the configured temp file directory, or null if not yet\n     *         configured.\n     ",
    "links" : [ "#setTempFileRootDirectory", "#download", "File" ]
  }, {
    "name" : "public void download(@NonNull DownloadRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Requests the download of a file or set of files that the carrier has indicated to be\n     * available.\n     *\n     * May throw an {@link IllegalArgumentException}\n     *\n     * If {@link #setTempFileRootDirectory(File)} has not called after the app has been installed,\n     * this method will create a directory at the default location defined at\n     * {@link MbmsDownloadSession#DEFAULT_TOP_LEVEL_TEMP_DIRECTORY} and store that as the temp\n     * file root directory.\n     *\n     * If the {@link DownloadRequest} has a destination that is not on the same filesystem as the\n     * temp file directory provided via {@link #getTempFileRootDirectory()}, an\n     * {@link IllegalArgumentException} will be thrown.\n     *\n     * Asynchronous errors through the callback may include any error not specific to the\n     * streaming use-case.\n     *\n     * If no error is delivered via the callback after calling this method, that means that the\n     * middleware has successfully started the download or scheduled the download, if the download\n     * is at a future time.\n     * @param request The request that specifies what should be downloaded.\n     ",
    "links" : [ "IllegalArgumentException", "#setTempFileRootDirectory", "MbmsDownloadSession#DEFAULT_TOP_LEVEL_TEMP_DIRECTORY", "DownloadRequest", "#getTempFileRootDirectory", "IllegalArgumentException" ]
  }, {
    "name" : "public List<DownloadRequest> listPendingDownloads()",
    "returnType" : "List<DownloadRequest>",
    "comment" : "\n     * Returns a list of pending {@link DownloadRequest}s that originated from this application.\n     * A pending request is one that was issued via\n     * {@link #download(DownloadRequest)} but not cancelled through\n     * {@link #cancelDownload(DownloadRequest)}.\n     * @return A list, possibly empty, of {@link DownloadRequest}s\n     ",
    "links" : [ "DownloadRequest", "#download", "#cancelDownload", "DownloadRequest" ]
  }, {
    "name" : "public void addStatusListener(@NonNull DownloadRequest request, @NonNull Executor executor, @NonNull DownloadStatusListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a download status listener for a {@link DownloadRequest} previously requested via\n     * {@link #download(DownloadRequest)}. This callback will only be called as long as both this\n     * app and the middleware are both running -- if either one stops, no further calls on the\n     * provided {@link DownloadStatusListener} will be enqueued.\n     *\n     * If the middleware is not aware of the specified download request,\n     * this method will throw an {@link IllegalArgumentException}.\n     *\n     * If the operation encountered an error, the error code will be delivered via\n     * {@link MbmsDownloadSessionCallback#onError}.\n     *\n     * Repeated calls to this method for the same {@link DownloadRequest} will replace the\n     * previously registered listener.\n     *\n     * @param request The {@link DownloadRequest} that you want updates on.\n     * @param executor The {@link Executor} on which calls to {@code listener } should be executed.\n     * @param listener The listener that should be called when the middleware has information to\n     *                 share on the status download.\n     ",
    "links" : [ "DownloadRequest", "#download", "DownloadStatusListener", "IllegalArgumentException", "MbmsDownloadSessionCallback#onError", "DownloadRequest", "DownloadRequest", "Executor" ]
  }, {
    "name" : "public void removeStatusListener(@NonNull DownloadRequest request, @NonNull DownloadStatusListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Un-register a listener previously registered via\n     * {@link #addStatusListener(DownloadRequest, Executor, DownloadStatusListener)}. After\n     * this method is called, no further calls will be enqueued on the {@link Executor}\n     * provided upon registration, even if this method throws an exception.\n     *\n     * If the middleware is not aware of the specified download request,\n     * this method will throw an {@link IllegalArgumentException}.\n     *\n     * If the operation encountered an error, the error code will be delivered via\n     * {@link MbmsDownloadSessionCallback#onError}.\n     *\n     * @param request The {@link DownloadRequest} provided during registration\n     * @param listener The listener provided during registration.\n     ",
    "links" : [ "#addStatusListener", "Executor", "IllegalArgumentException", "MbmsDownloadSessionCallback#onError", "DownloadRequest" ]
  }, {
    "name" : "public void addProgressListener(@NonNull DownloadRequest request, @NonNull Executor executor, @NonNull DownloadProgressListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers a progress listener for a {@link DownloadRequest} previously requested via\n     * {@link #download(DownloadRequest)}. This listener will only be called as long as both this\n     * app and the middleware are both running -- if either one stops, no further calls on the\n     * provided {@link DownloadProgressListener} will be enqueued.\n     *\n     * If the middleware is not aware of the specified download request,\n     * this method will throw an {@link IllegalArgumentException}.\n     *\n     * If the operation encountered an error, the error code will be delivered via\n     * {@link MbmsDownloadSessionCallback#onError}.\n     *\n     * Repeated calls to this method for the same {@link DownloadRequest} will replace the\n     * previously registered listener.\n     *\n     * @param request The {@link DownloadRequest} that you want updates on.\n     * @param executor The {@link Executor} on which calls to {@code listener} should be executed.\n     * @param listener The listener that should be called when the middleware has information to\n     *                 share on the progress of the download.\n     ",
    "links" : [ "DownloadRequest", "#download", "DownloadProgressListener", "IllegalArgumentException", "MbmsDownloadSessionCallback#onError", "DownloadRequest", "DownloadRequest", "Executor" ]
  }, {
    "name" : "public void removeProgressListener(@NonNull DownloadRequest request, @NonNull DownloadProgressListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Un-register a listener previously registered via\n     * {@link #addProgressListener(DownloadRequest, Executor, DownloadProgressListener)}. After\n     * this method is called, no further callbacks will be enqueued on the {@link Handler}\n     * provided upon registration, even if this method throws an exception.\n     *\n     * If the middleware is not aware of the specified download request,\n     * this method will throw an {@link IllegalArgumentException}.\n     *\n     * If the operation encountered an error, the error code will be delivered via\n     * {@link MbmsDownloadSessionCallback#onError}.\n     *\n     * @param request The {@link DownloadRequest} provided during registration\n     * @param listener The listener provided during registration.\n     ",
    "links" : [ "#addProgressListener", "Handler", "IllegalArgumentException", "MbmsDownloadSessionCallback#onError", "DownloadRequest" ]
  }, {
    "name" : "public void cancelDownload(@NonNull DownloadRequest downloadRequest)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to cancel the specified {@link DownloadRequest}.\n     *\n     * If the operation encountered an error, the error code will be delivered via\n     * {@link MbmsDownloadSessionCallback#onError}.\n     *\n     * @param downloadRequest The download request that you wish to cancel.\n     ",
    "links" : [ "DownloadRequest", "MbmsDownloadSessionCallback#onError" ]
  }, {
    "name" : "public void requestDownloadState(DownloadRequest downloadRequest, FileInfo fileInfo)",
    "returnType" : "void",
    "comment" : "\n     * Requests information about the state of a file pending download.\n     *\n     * The state will be delivered as a callback via\n     * {@link DownloadStatusListener#onStatusUpdated(DownloadRequest, FileInfo, int)}. If no such\n     * callback has been registered via\n     * {@link #addProgressListener(DownloadRequest, Executor, DownloadProgressListener)}, this\n     * method will be a no-op.\n     *\n     * If the middleware has no record of the\n     * file indicated by {@code fileInfo} being associated with {@code downloadRequest},\n     * an {@link IllegalArgumentException} will be thrown.\n     *\n     * @param downloadRequest The download request to query.\n     * @param fileInfo The particular file within the request to get information on.\n     ",
    "links" : [ "DownloadStatusListener#onStatusUpdated", "#addProgressListener", "IllegalArgumentException" ]
  }, {
    "name" : "public void resetDownloadKnowledge(DownloadRequest downloadRequest)",
    "returnType" : "void",
    "comment" : "\n     * Resets the middleware's knowledge of previously-downloaded files in this download request.\n     *\n     * Normally, the middleware keeps track of the hashes of downloaded files and won't re-download\n     * files whose server-reported hash matches one of the already-downloaded files. This means\n     * that if the file is accidentally deleted by the user or by the app, the middleware will\n     * not try to download it again.\n     * This method will reset the middleware's cache of hashes for the provided\n     * {@link DownloadRequest}, so that previously downloaded content will be downloaded again\n     * when available.\n     * This will not interrupt in-progress downloads.\n     *\n     * This is distinct from cancelling and re-issuing the download request -- if you cancel and\n     * re-issue, the middleware will not clear its cache of download state information.\n     *\n     * If the middleware is not aware of the specified download request, an\n     * {@link IllegalArgumentException} will be thrown.\n     *\n     * @param downloadRequest The request to re-download files for.\n     ",
    "links" : [ "DownloadRequest", "IllegalArgumentException" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Terminates this instance.\n     *\n     * After this method returns,\n     * no further callbacks originating from the middleware will be enqueued on the provided\n     * instance of {@link MbmsDownloadSessionCallback}, but callbacks that have already been\n     * enqueued will still be delivered.\n     *\n     * It is safe to call {@link #create(Context, Executor, int, MbmsDownloadSessionCallback)} to\n     * obtain another instance of {@link MbmsDownloadSession} immediately after this method\n     * returns.\n     *\n     * May throw an {@link IllegalStateException}\n     ",
    "links" : [ "MbmsDownloadSessionCallback", "#create", "MbmsDownloadSession", "IllegalStateException" ]
  }, {
    "name" : "private void writeDownloadRequestToken(DownloadRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void deleteDownloadRequestToken(DownloadRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkDownloadRequestDestination(DownloadRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File getDownloadRequestTokenPath(DownloadRequest request)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendErrorToApp(int errorCode, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "MBMS_DOWNLOAD_SERVICE_ACTION", "MBMS_DOWNLOAD_SERVICE_OVERRIDE_METADATA", "EXTRA_MBMS_DOWNLOAD_RESULT", "EXTRA_MBMS_FILE_INFO", "EXTRA_MBMS_COMPLETED_FILE_URI", "EXTRA_MBMS_DOWNLOAD_REQUEST", "DEFAULT_TOP_LEVEL_TEMP_DIRECTORY", "RESULT_SUCCESSFUL", "RESULT_CANCELLED", "RESULT_EXPIRED", "RESULT_IO_ERROR", "RESULT_SERVICE_ID_NOT_DEFINED", "RESULT_DOWNLOAD_FAILURE", "RESULT_OUT_OF_STORAGE", "RESULT_FILE_ROOT_UNREACHABLE", "STATUS_UNKNOWN", "STATUS_ACTIVELY_DOWNLOADING", "STATUS_PENDING_DOWNLOAD", "STATUS_PENDING_REPAIR", "STATUS_PENDING_DOWNLOAD_WINDOW", "DESTINATION_SANITY_CHECK_FILE_NAME", "sIsInitialized", "mContext", "mSubscriptionId", "mDeathRecipient", "mService", "mServiceConnection", "mInternalCallback", "mInternalDownloadStatusListeners", "mInternalDownloadProgressListeners" ],
  "methodNames" : [ "public static MbmsDownloadSession create(@NonNull Context context, @NonNull Executor executor, @NonNull MbmsDownloadSessionCallback callback)", "public static MbmsDownloadSession create(@NonNull Context context, @NonNull Executor executor, int subscriptionId, @NonNull final MbmsDownloadSessionCallback callback)", "private int bindAndInitialize()", "public void requestUpdateFileServices(@NonNull List<String> classList)", "public void setTempFileRootDirectory(@NonNull File tempFileRootDirectory)", "private void validateTempFileRootSanity(File tempFileRootDirectory) throws IOException", "public File getTempFileRootDirectory()", "public void download(@NonNull DownloadRequest request)", "public List<DownloadRequest> listPendingDownloads()", "public void addStatusListener(@NonNull DownloadRequest request, @NonNull Executor executor, @NonNull DownloadStatusListener listener)", "public void removeStatusListener(@NonNull DownloadRequest request, @NonNull DownloadStatusListener listener)", "public void addProgressListener(@NonNull DownloadRequest request, @NonNull Executor executor, @NonNull DownloadProgressListener listener)", "public void removeProgressListener(@NonNull DownloadRequest request, @NonNull DownloadProgressListener listener)", "public void cancelDownload(@NonNull DownloadRequest downloadRequest)", "public void requestDownloadState(DownloadRequest downloadRequest, FileInfo fileInfo)", "public void resetDownloadKnowledge(DownloadRequest downloadRequest)", "public void close()", "private void writeDownloadRequestToken(DownloadRequest request)", "private void deleteDownloadRequestToken(DownloadRequest request)", "private void checkDownloadRequestDestination(DownloadRequest request)", "private File getDownloadRequestTokenPath(DownloadRequest request)", "private void sendErrorToApp(int errorCode, String message)" ]
}