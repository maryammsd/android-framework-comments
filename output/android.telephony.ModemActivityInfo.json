{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ModemActivityInfo.java",
  "packageName" : "android.telephony",
  "className" : "ModemActivityInfo",
  "comment" : "\n * Reports modem activity information.\n * @hide\n ",
  "variables" : [ {
    "name" : "TX_POWER_LEVELS",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level. see power index below\n     * <ul>\n     *   <li> index 0 = tx_power < 0dBm. </li>\n     *   <li> index 1 = 0dBm < tx_power < 5dBm. </li>\n     *   <li> index 2 = 5dBm < tx_power < 15dBm. </li>\n     *   <li> index 3 = 15dBm < tx_power < 20dBm. </li>\n     *   <li> index 4 = tx_power > 20dBm. </li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_LEVEL_0",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level 0: tx_power < 0dBm\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_LEVEL_1",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level 1: 0dBm < tx_power < 5dBm\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_LEVEL_2",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level 2: 5dBm < tx_power < 15dBm\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_LEVEL_3",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level 3: 15dBm < tx_power < 20dBm.\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_LEVEL_4",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) power level 4: tx_power > 20dBm\n     ",
    "links" : [ ]
  }, {
    "name" : "TX_POWER_RANGES",
    "type" : "Range<Integer>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSleepTimeMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleTimeMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransmitPowerInfo",
    "type" : "List<TransmitPower>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRxTimeMs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ModemActivityInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void populateTransmitPowerRange(@NonNull int[] transmitPowerMs)",
    "returnType" : "void",
    "comment" : " helper API to populate tx power range for each bucket *",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * @return milliseconds since boot, including mTimeInMillis spent in sleep.\n     * @see SystemClock#elapsedRealtime()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimestamp(long timestamp)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<TransmitPower> getTransmitPowerInfo()",
    "returnType" : "List<TransmitPower>",
    "comment" : "\n     * @return an arrayList of {@link TransmitPower} with each element representing the total time where\n     * transmitter is awake time (in ms) for a given power range (in dbm).\n     *\n     * @see #TX_POWER_LEVELS\n     ",
    "links" : [ "TransmitPower" ]
  }, {
    "name" : "public void setTransmitTimeMillis(int[] txTimeMs)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getTransmitTimeMillis()",
    "returnType" : "int[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getSleepTimeMillis()",
    "returnType" : "int",
    "comment" : "\n     * @return total mTimeInMillis (in ms) when modem is in a low power or sleep state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSleepTimeMillis(int sleepTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getIdleTimeMillis()",
    "returnType" : "int",
    "comment" : "\n     * @return total mTimeInMillis (in ms) when modem is awake but neither the transmitter nor receiver are\n     * active.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIdleTimeMillis(int idleTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getReceiveTimeMillis()",
    "returnType" : "int",
    "comment" : "\n     * @return rx(receive) mTimeInMillis in ms.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReceiveTimeMillis(int rxTimeMillis)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicate if the ModemActivityInfo is invalid due to modem's invalid reporting.\n     *\n     * @return {@code true} if this {@link ModemActivityInfo} record is valid,\n     * {@code false} otherwise.\n     ",
    "links" : [ "android.telephony.ModemActivityInfo" ]
  }, {
    "name" : "private boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TX_POWER_LEVELS", "TX_POWER_LEVEL_0", "TX_POWER_LEVEL_1", "TX_POWER_LEVEL_2", "TX_POWER_LEVEL_3", "TX_POWER_LEVEL_4", "TX_POWER_RANGES", "mTimestamp", "mSleepTimeMs", "mIdleTimeMs", "mTransmitPowerInfo", "mRxTimeMs", "CREATOR" ],
  "methodNames" : [ "private void populateTransmitPowerRange(@NonNull int[] transmitPowerMs)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public long getTimestamp()", "public void setTimestamp(long timestamp)", "public List<TransmitPower> getTransmitPowerInfo()", "public void setTransmitTimeMillis(int[] txTimeMs)", "public int[] getTransmitTimeMillis()", "public int getSleepTimeMillis()", "public void setSleepTimeMillis(int sleepTimeMillis)", "public int getIdleTimeMillis()", "public void setIdleTimeMillis(int idleTimeMillis)", "public int getReceiveTimeMillis()", "public void setReceiveTimeMillis(int rxTimeMillis)", "public boolean isValid()", "private boolean isEmpty()" ]
}