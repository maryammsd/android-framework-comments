{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/NetworkProvider.java",
  "packageName" : "android.net",
  "className" : "NetworkProvider",
  "comment" : "\n * Base class for network providers such as telephony or Wi-Fi. NetworkProviders connect the device\n * to networks and makes them available to to the core network stack by creating\n * {@link NetworkAgent}s. The networks can then provide connectivity to apps and can be interacted\n * with via networking APIs such as {@link ConnectivityManager}.\n *\n * Subclasses should implement {@link #onNetworkRequested} and {@link #onNetworkRequestWithdrawn}\n * to receive {@link NetworkRequest}s sent by the system and by apps. A network that is not the\n * best (highest-scoring) network for any request is generally not used by the system, and torn\n * down.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "ID_NONE",
    "type" : "int",
    "comment" : "\n     * {@code providerId} value that indicates the absence of a provider. It is the providerId of\n     * any NetworkProvider that is not currently registered, and of any NetworkRequest that is not\n     * currently being satisfied by a network.\n     ",
    "links" : [ ]
  }, {
    "name" : "ID_VPN",
    "type" : "int",
    "comment" : "\n     * A hardcoded ID for NetworkAgents representing VPNs. These agents are not created by any\n     * provider, so they use this constant for clarity instead of NONE.\n     * @hide only used by ConnectivityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_PROVIDER_ID",
    "type" : "int",
    "comment" : "\n     * The first providerId value that will be allocated.\n     * @hide only used by ConnectivityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "CMD_REQUEST_NETWORK",
    "type" : "int",
    "comment" : " @hide only used by ConnectivityService ",
    "links" : [ ]
  }, {
    "name" : "CMD_CANCEL_REQUEST",
    "type" : "int",
    "comment" : " @hide only used by ConnectivityService ",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "Messenger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCm",
    "type" : "ConnectivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Messenger getMessenger()",
    "returnType" : "Messenger",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getProviderId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of this provider. This is known only once the provider is registered via\n     * {@link ConnectivityManager#registerNetworkProvider()}, otherwise the ID is {@link #ID_NONE}.\n     * This ID must be used when registering any {@link NetworkAgent}s.\n     ",
    "links" : [ "ConnectivityManager#registerNetworkProvider", "#ID_NONE", "NetworkAgent" ]
  }, {
    "name" : "public void setProviderId(int providerId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onNetworkRequested(@NonNull NetworkRequest request, @IntRange(from = 0, to = 99) int score, int providerId)",
    "returnType" : "void",
    "comment" : "\n     *  Called when a NetworkRequest is received. The request may be a new request or an existing\n     *  request with a different score.\n     *\n     * @param request the NetworkRequest being received\n     * @param score the score of the network currently satisfying the request, or 0 if none.\n     * @param providerId the ID of the provider that created the network currently satisfying this\n     *                   request, or {@link #ID_NONE} if none.\n     *\n     *  @hide\n     ",
    "links" : [ "#ID_NONE" ]
  }, {
    "name" : "public void onNetworkRequestWithdrawn(@NonNull NetworkRequest request)",
    "returnType" : "void",
    "comment" : "\n     *  Called when a NetworkRequest is withdrawn.\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void declareNetworkRequestUnfulfillable(@NonNull NetworkRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that no provider will ever be able to satisfy the specified request. The provider\n     * must only call this method if it knows that it is the only provider on the system capable of\n     * satisfying this request, and that the request cannot be satisfied. The application filing the\n     * request will receive an {@link NetworkCallback#onUnavailable()} callback.\n     *\n     * @param request the request that permanently cannot be fulfilled\n     * @hide\n     ",
    "links" : [ "NetworkCallback#onUnavailable" ]
  } ],
  "variableNames" : [ "ID_NONE", "ID_VPN", "FIRST_PROVIDER_ID", "CMD_REQUEST_NETWORK", "CMD_CANCEL_REQUEST", "mMessenger", "mName", "mCm", "mProviderId" ],
  "methodNames" : [ "public Messenger getMessenger()", "public String getName()", "public int getProviderId()", "public void setProviderId(int providerId)", "public void onNetworkRequested(@NonNull NetworkRequest request, @IntRange(from = 0, to = 99) int score, int providerId)", "public void onNetworkRequestWithdrawn(@NonNull NetworkRequest request)", "public void declareNetworkRequestUnfulfillable(@NonNull NetworkRequest request)" ]
}