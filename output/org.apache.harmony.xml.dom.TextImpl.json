{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/dom/TextImpl.java",
  "packageName" : "org.apache.harmony.xml.dom",
  "className" : "TextImpl",
  "comment" : "\n * Provides a straightforward implementation of the corresponding W3C DOM\n * interface. The class is used internally only, thus only notable members that\n * are not in the original interface are documented (the W3C docs are quite\n * extensive). Hope that's ok.\n * <p>\n * Some of the fields may have package visibility, so other classes belonging to\n * the DOM implementation can easily access them while maintaining the DOM tree\n * structure.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Text splitText(int offset) throws DOMException",
    "returnType" : "Text",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isElementContentWhitespace()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String getWholeText()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Text replaceWholeText(String content) throws DOMException",
    "returnType" : "Text",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TextImpl firstTextNodeInCurrentRun()",
    "returnType" : "TextImpl",
    "comment" : "\n     * Returns the first text or CDATA node in the current sequence of text and\n     * CDATA nodes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private TextImpl nextTextNode()",
    "returnType" : "TextImpl",
    "comment" : "\n     * Returns the next sibling node if it exists and it is text or CDATA.\n     * Otherwise returns null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TextImpl minimize()",
    "returnType" : "TextImpl",
    "comment" : "\n     * Tries to remove this node using itself and the previous node as context.\n     * If this node's text is empty, this node is removed and null is returned.\n     * If the previous node exists and is a text node, this node's text will be\n     * appended to that node's text and this node will be removed.\n     *\n     * <p>Although this method alters the structure of the DOM tree, it does\n     * not alter the document's semantics.\n     *\n     * @return the node holding this node's text and the end of the operation.\n     *     Can be null if this node contained the empty string.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getNodeName()", "public short getNodeType()", "public final Text splitText(int offset) throws DOMException", "public final boolean isElementContentWhitespace()", "public final String getWholeText()", "public final Text replaceWholeText(String content) throws DOMException", "private TextImpl firstTextNodeInCurrentRun()", "private TextImpl nextTextNode()", "public final TextImpl minimize()" ],
  "variableNames" : [ ]
}