{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/SerializerTraceWriter.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "SerializerTraceWriter",
  "comment" : "\n * This class wraps the real writer, it only purpose is to send\n * CHARACTERTOSTREAM events to the trace listener. \n * Each method immediately sends the call to the wrapped writer unchanged, but\n * in addition it collects characters to be issued to a trace listener.\n * \n * In this way the trace\n * listener knows what characters have been written to the output Writer.\n * \n * There may still be differences in what the trace events say is going to the\n * output writer and what is really going there. These differences will be due\n * to the fact that this class is UTF-8 encoding before emiting the trace event\n * and the underlying writer may not be UTF-8 encoding. There may also be\n * encoding differences.  So the main pupose of this class is to provide a\n * resonable facsimile of the true output.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_writer",
    "type" : "java.io.Writer",
    "comment" : " The real writer to immediately write to.\n     * This reference may be null, in which case nothing is written out, but\n     * only the trace events are fired for output.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_tracer",
    "type" : "SerializerTrace",
    "comment" : " The tracer to send events to ",
    "links" : [ ]
  }, {
    "name" : "buf_length",
    "type" : "int",
    "comment" : " The size of the internal buffer, just to keep too many\n     * events from being sent to the tracer\n     ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * Internal buffer to collect the characters to go to the trace listener.\n     * \n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * How many bytes have been collected and still need to go to trace\n     * listener.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setBufferSize(int size)",
    "returnType" : "void",
    "comment" : "\n     * Creates or replaces the internal buffer, and makes sure it has a few\n     * extra bytes slight overflow of the last UTF8 encoded character.\n     * @param size\n     ",
    "links" : [ ]
  }, {
    "name" : "private void flushBuffer() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flush out the collected characters by sending them to the trace\n     * listener.  These characters are never written to the real writer\n     * (m_writer) because that has already happened with every method\n     * call. This method simple informs the listener of what has already\n     * happened.\n     * @throws IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Flush the internal buffer and flush the Writer\n     * @see java.io.Writer#flush()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Flush the internal buffer and close the Writer\n     * @see java.io.Writer#close()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(final int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write a single character.  The character to be written is contained in\n     * the 16 low-order bits of the given integer value; the 16 high-order bits\n     * are ignored.\n     *\n     * <p> Subclasses that intend to support efficient single-character output\n     * should override this method.\n     *\n     * @param c  int specifying a character to be written.\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(final char[] chars, final int start, final int length) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Write a portion of an array of characters.\n     *\n     * @param  chars  Array of characters\n     * @param  start   Offset from which to start writing characters\n     * @param  length   Number of characters to write\n     *\n     * @exception  IOException  If an I/O error occurs\n     *\n     * @throws java.io.IOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(final String s) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write a string.\n     *\n     * @param  s  String to be written\n     *\n     * @exception  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer getWriter()",
    "returnType" : "Writer",
    "comment" : "\n     * Get the writer that this one directly wraps.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * Get the OutputStream that is the at the end of the\n     * chain of writers.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setBufferSize(int size)", "private void flushBuffer() throws IOException", "public void flush() throws java.io.IOException", "public void close() throws java.io.IOException", "public void write(final int c) throws IOException", "public void write(final char[] chars, final int start, final int length) throws java.io.IOException", "public void write(final String s) throws IOException", "public Writer getWriter()", "public OutputStream getOutputStream()" ],
  "variableNames" : [ "m_writer", "m_tracer", "buf_length", "buf", "count" ]
}