{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/shapes/Shape.java",
  "packageName" : "android.graphics.drawable.shapes",
  "className" : "Shape",
  "comment" : "\n * Defines a generic graphical \"shape.\"\n * <p>\n * Any Shape can be drawn to a Canvas with its own draw() method, but more\n * graphical control is available if you instead pass it to a\n * {@link android.graphics.drawable.ShapeDrawable}.\n * <p>\n * Custom Shape classes must implement {@link #clone()} and return an instance\n * of the custom Shape class.\n ",
  "links" : [ "android.graphics.drawable.ShapeDrawable", "#clone()" ],
  "variables" : [ {
    "name" : "mWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final float getWidth()",
    "returnType" : "float",
    "comment" : "\n     * Returns the width of the Shape.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float getHeight()",
    "returnType" : "float",
    "comment" : "\n     * Returns the height of the Shape.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void draw(Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n     * Draws this shape into the provided Canvas, with the provided Paint.\n     * <p>\n     * Before calling this, you must call {@link #resize(float,float)}.\n     *\n     * @param canvas the Canvas within which this shape should be drawn\n     * @param paint  the Paint object that defines this shape's characteristics\n     ",
    "links" : [ "#resize(float" ]
  }, {
    "name" : "public final void resize(float width, float height)",
    "returnType" : "void",
    "comment" : "\n     * Resizes the dimensions of this shape.\n     * <p>\n     * Must be called before {@link #draw(Canvas,Paint)}.\n     *\n     * @param width the width of the shape (in pixels)\n     * @param height the height of the shape (in pixels)\n     ",
    "links" : [ "#draw(Canvas" ]
  }, {
    "name" : "public boolean hasAlpha()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the Shape is opaque.\n     * <p>\n     * Default impl returns {@code true}. Override if your subclass can be\n     * opaque.\n     *\n     * @return true if any part of the drawable is <em>not</em> opaque.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onResize(float width, float height)",
    "returnType" : "void",
    "comment" : "\n     * Callback method called when {@link #resize(float,float)} is executed.\n     *\n     * @param width the new width of the Shape\n     * @param height the new height of the Shape\n     ",
    "links" : [ "#resize(float" ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "\n     * Computes the Outline of the shape and return it in the supplied Outline\n     * parameter. The default implementation does nothing and {@code outline}\n     * is not changed.\n     *\n     * @param outline the Outline to be populated with the result. Must be\n     *                non-{@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Shape clone() throws CloneNotSupportedException",
    "returnType" : "Shape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final float getWidth()", "public final float getHeight()", "public abstract void draw(Canvas canvas, Paint paint)", "public final void resize(float width, float height)", "public boolean hasAlpha()", "protected void onResize(float width, float height)", "public void getOutline(@NonNull Outline outline)", "public Shape clone() throws CloneNotSupportedException", "public boolean equals(Object o)", "public int hashCode()" ],
  "variableNames" : [ "mWidth", "mHeight" ]
}