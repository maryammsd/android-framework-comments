{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/TextLine.java",
  "packageName" : "android.text",
  "className" : "TextLine",
  "comment" : "\n * Represents a line of styled text, for measuring in visual order and\n * for rendering.\n *\n * <p>Get a new instance using obtain(), and when finished with it, return it\n * to the pool using recycle().\n *\n * <p>Call set to prepare the instance for use, then either draw, measure,\n * metrics, or caretToLeftRightOf.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAB_CHAR",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLen",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDir",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDirections",
    "type" : "Directions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasTabs",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTabs",
    "type" : "TabStops",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChars",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharsValid",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanned",
    "type" : "Spanned",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComputed",
    "type" : "PrecomputedText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRectForMeasure",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRectForPaintAPI",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRectForPrecompute",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunInfo",
    "type" : "Paint.RunInfo",
    "comment" : " Recycling object for Paint APIs. Do not use outside getRunAdvances method.",
    "links" : [ ]
  }, {
    "name" : "mUseFallbackExtent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEllipsisStart",
    "type" : "int",
    "comment" : " We use them to filter out replacement and metric affecting spans on ellipsized away chars.",
    "links" : [ ]
  }, {
    "name" : "mEllipsisEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddedWordSpacingInPx",
    "type" : "float",
    "comment" : " the line width will increase by mAddedWidthForJustify x (number of stretchable whitespaces).",
    "links" : [ ]
  }, {
    "name" : "mAddedLetterSpacingInPx",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsJustifying",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWorkPaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivePaint",
    "type" : "TextPaint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetricAffectingSpanSpanSet",
    "type" : "SpanSet<MetricAffectingSpan>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterStyleSpanSet",
    "type" : "SpanSet<CharacterStyle>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReplacementSpanSpanSet",
    "type" : "SpanSet<ReplacementSpan>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecorationInfo",
    "type" : "DecorationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDecorations",
    "type" : "ArrayList<DecorationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCached",
    "type" : "TextLine[]",
    "comment" : " Not allowed to access. If it's for memory leak workaround, it was already fixed M. ",
    "links" : [ ]
  }, {
    "name" : "TAB_INCREMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float getAddedWordSpacingInPx()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getAddedLetterSpacingInPx()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isJustifying()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static TextLine obtain()",
    "returnType" : "TextLine",
    "comment" : "\n     * Returns a new TextLine from the shared pool.\n     *\n     * @return an uninitialized TextLine\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TextLine recycle(TextLine tl)",
    "returnType" : "TextLine",
    "comment" : "\n     * Puts a TextLine back into the shared pool. Do not use this TextLine once\n     * it has been returned.\n     * @param tl the textLine\n     * @return null, as a convenience from clearing references to the provided\n     * TextLine\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(TextPaint paint, CharSequence text, int start, int limit, int dir, Directions directions, boolean hasTabs, TabStops tabStops, int ellipsisStart, int ellipsisEnd, boolean useFallbackLineSpacing)",
    "returnType" : "void",
    "comment" : "\n     * Initializes a TextLine and prepares it for use.\n     *\n     * @param paint the base paint for the line\n     * @param text the text, can be Styled\n     * @param start the start of the line relative to the text\n     * @param limit the limit of the line relative to the text\n     * @param dir the paragraph direction of this line\n     * @param directions the directions information of this line\n     * @param hasTabs true if the line might contain tabs\n     * @param tabStops the tabStops. Can be null\n     * @param ellipsisStart the start of the ellipsis relative to the line\n     * @param ellipsisEnd the end of the ellipsis relative to the line. When there\n     *                    is no ellipsis, this should be equal to ellipsisStart.\n     * @param useFallbackLineSpacing true for enabling fallback line spacing. false for disabling\n     *                              fallback line spacing.\n     ",
    "links" : [ ]
  }, {
    "name" : "private char charAt(int i)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void justify(@Layout.JustificationMode int justificationMode, float justifyWidth)",
    "returnType" : "void",
    "comment" : "\n     * Justify the line to the given width.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int calculateRunFlag(int bidiRunIndex, int bidiRunCount, int lineDirection)",
    "returnType" : "int",
    "comment" : "\n     * Returns the run flag of at the given BiDi run.\n     *\n     * @param bidiRunIndex a BiDi run index.\n     * @return a run flag of the given BiDi run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int resolveRunFlagForSubSequence(int runFlag, boolean isRtlRun, int runStart, int runEnd, int spanStart, int spanEnd)",
    "returnType" : "int",
    "comment" : "\n     * Resolve the runFlag for the inline span range.\n     *\n     * @param runFlag the runFlag of the current BiDi run.\n     * @param isRtlRun true for RTL run, false for LTR run.\n     * @param runStart the inclusive BiDi run start offset.\n     * @param runEnd the exclusive BiDi run end offset.\n     * @param spanStart the inclusive span start offset.\n     * @param spanEnd the exclusive span end offset.\n     * @return the resolved runFlag.\n     ",
    "links" : [ ]
  }, {
    "name" : " void draw(Canvas c, float x, int top, int y, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Renders the TextLine.\n     *\n     * @param c the canvas to render on\n     * @param x the leading margin position\n     * @param top the top of the line\n     * @param y the baseline\n     * @param bottom the bottom of the line\n     ",
    "links" : [ ]
  }, {
    "name" : "public float metrics(FontMetricsInt fmi, @Nullable RectF drawBounds, boolean returnDrawWidth, @Nullable LineInfo lineInfo)",
    "returnType" : "float",
    "comment" : "\n     * Returns metrics information for the entire line.\n     *\n     * @param fmi receives font metrics information, can be null\n     * @param drawBounds output parameter for drawing bounding box. optional.\n     * @param returnDrawWidth true for returning width of the bounding box, false for returning\n     *                       total advances.\n     * @param lineInfo an optional output parameter for filling line information.\n     * @return the signed width of the line\n     ",
    "links" : [ ]
  }, {
    "name" : " void shape(TextShaper.GlyphsConsumer consumer)",
    "returnType" : "void",
    "comment" : "\n     * Shape the TextLine.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float measure(@IntRange(from = 0) int offset, boolean trailing, @NonNull FontMetricsInt fmi, @Nullable RectF drawBounds, @Nullable LineInfo lineInfo)",
    "returnType" : "float",
    "comment" : "\n     * Returns the signed graphical offset from the leading margin.\n     *\n     * Following examples are all for measuring offset=3. LX(e.g. L0, L1, ...) denotes a\n     * character which has LTR BiDi property. On the other hand, RX(e.g. R0, R1, ...) denotes a\n     * character which has RTL BiDi property. Assuming all character has 1em width.\n     *\n     * Example 1: All LTR chars within LTR context\n     *   Input Text (logical)  :   L0 L1 L2 L3 L4 L5 L6 L7 L8\n     *   Input Text (visual)   :   L0 L1 L2 L3 L4 L5 L6 L7 L8\n     *   Output(trailing=true) :  |--------| (Returns 3em)\n     *   Output(trailing=false):  |--------| (Returns 3em)\n     *\n     * Example 2: All RTL chars within RTL context.\n     *   Input Text (logical)  :   R0 R1 R2 R3 R4 R5 R6 R7 R8\n     *   Input Text (visual)   :   R8 R7 R6 R5 R4 R3 R2 R1 R0\n     *   Output(trailing=true) :                    |--------| (Returns -3em)\n     *   Output(trailing=false):                    |--------| (Returns -3em)\n     *\n     * Example 3: BiDi chars within LTR context.\n     *   Input Text (logical)  :   L0 L1 L2 R3 R4 R5 L6 L7 L8\n     *   Input Text (visual)   :   L0 L1 L2 R5 R4 R3 L6 L7 L8\n     *   Output(trailing=true) :  |-----------------| (Returns 6em)\n     *   Output(trailing=false):  |--------| (Returns 3em)\n     *\n     * Example 4: BiDi chars within RTL context.\n     *   Input Text (logical)  :   L0 L1 L2 R3 R4 R5 L6 L7 L8\n     *   Input Text (visual)   :   L6 L7 L8 R5 R4 R3 L0 L1 L2\n     *   Output(trailing=true) :           |-----------------| (Returns -6em)\n     *   Output(trailing=false):                    |--------| (Returns -3em)\n     *\n     * @param offset the line-relative character offset, between 0 and the line length, inclusive\n     * @param trailing no effect if the offset is not on the BiDi transition offset. If the offset\n     *                 is on the BiDi transition offset and true is passed, the offset is regarded\n     *                 as the edge of the trailing run's edge. If false, the offset is regarded as\n     *                 the edge of the preceding run's edge. See example above.\n     * @param fmi receives metrics information about the requested character, can be null\n     * @param drawBounds output parameter for drawing bounding box. optional.\n     * @param lineInfo an optional output parameter for filling line information.\n     * @return the signed graphical offset from the leading margin to the requested character edge.\n     *         The positive value means the offset is right from the leading edge. The negative\n     *         value means the offset is left from the leading edge.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void measureAllBounds(@NonNull float[] bounds, @Nullable float[] advances)",
    "returnType" : "void",
    "comment" : "\n     * Return the signed horizontal bounds of the characters in the line.\n     *\n     * The length of the returned array equals to 2 * mLen. The left bound of the i th character\n     * is stored at index 2 * i. And the right bound of the i th character is stored at index\n     * (2 * i + 1).\n     *\n     * Check the following examples. LX(e.g. L0, L1, ...) denotes a character which has LTR BiDi\n     * property. On the other hand, RX(e.g. R0, R1, ...) denotes a character which has RTL BiDi\n     * property. Assuming all character has 1em width.\n     *\n     * Example 1: All LTR chars within LTR context\n     *   Input Text (logical)  :   L0 L1 L2 L3\n     *   Input Text (visual)   :   L0 L1 L2 L3\n     *   Output :  [0em, 1em, 1em, 2em, 2em, 3em, 3em, 4em]\n     *\n     * Example 2: All RTL chars within RTL context.\n     *   Input Text (logical)  :   R0 R1 R2 R3\n     *   Input Text (visual)   :   R3 R2 R1 R0\n     *   Output :  [-1em, 0em, -2em, -1em, -3em, -2em, -4em, -3em]\n\n     *\n     * Example 3: BiDi chars within LTR context.\n     *   Input Text (logical)  :   L0 L1 R2 R3 L4 L5\n     *   Input Text (visual)   :   L0 L1 R3 R2 L4 L5\n     *   Output :  [0em, 1em, 1em, 2em, 3em, 4em, 2em, 3em, 4em, 5em, 5em, 6em]\n\n     *\n     * Example 4: BiDi chars within RTL context.\n     *   Input Text (logical)  :   L0 L1 R2 R3 L4 L5\n     *   Input Text (visual)   :   L4 L5 R3 R2 L0 L1\n     *   Output :  [-2em, -1em, -1em, 0em, -3em, -2em, -4em, -3em, -6em, -5em, -5em, -4em]\n     *\n     * @param bounds the array to receive the character bounds data. Its length should be at least\n     *               2 times of the line length.\n     * @param advances the array to receive the character advance data, nullable. If provided, its\n     *                 length should be equal or larger than the line length.\n     *\n     * @throws IllegalArgumentException if the given {@code bounds} is null.\n     * @throws IndexOutOfBoundsException if the given {@code bounds} or {@code advances} doesn't\n     * have enough space to hold the result.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] measureAllOffsets(boolean[] trailing, FontMetricsInt fmi)",
    "returnType" : "float[]",
    "comment" : "\n     * @see #measure(int, boolean, FontMetricsInt, RectF, LineInfo)\n     * @return The measure results for all possible offsets\n     ",
    "links" : [ ]
  }, {
    "name" : "private float drawRun(Canvas c, int start, int limit, boolean runIsRtl, float x, int top, int y, int bottom, boolean needWidth, int runFlag)",
    "returnType" : "float",
    "comment" : "\n     * Draws a unidirectional (but possibly multi-styled) run of text.\n     *\n     *\n     * @param c the canvas to draw on\n     * @param start the line-relative start\n     * @param limit the line-relative limit\n     * @param runIsRtl true if the run is right-to-left\n     * @param x the position of the run that is closest to the leading margin\n     * @param top the top of the line\n     * @param y the baseline\n     * @param bottom the bottom of the line\n     * @param needWidth true if the width value is required.\n     * @param runFlag the run flag to be applied for this run.\n     * @return the signed width of the run, based on the paragraph direction.\n     * Only valid if needWidth is true.\n     ",
    "links" : [ ]
  }, {
    "name" : "private float measureRun(int start, int offset, int limit, boolean runIsRtl, @Nullable FontMetricsInt fmi, @Nullable RectF drawBounds, @Nullable float[] advances, int advancesIndex, float x, @Nullable LineInfo lineInfo, int runFlag)",
    "returnType" : "float",
    "comment" : "\n     * Measures a unidirectional (but possibly multi-styled) run of text.\n     *\n     *\n     * @param start the line-relative start of the run\n     * @param offset the offset to measure to, between start and limit inclusive\n     * @param limit the line-relative limit of the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param fmi receives metrics information about the requested\n     * run, can be null.\n     * @param advances receives the advance information about the requested run, can be null.\n     * @param advancesIndex the start index to fill in the advance information.\n     * @param x horizontal offset of the run.\n     * @param lineInfo an optional output parameter for filling line information.\n     * @param runFlag the run flag to be applied for this run.\n     * @return the signed width from the start of the run to the leading edge\n     * of the character at offset, based on the run (not paragraph) direction\n     ",
    "links" : [ ]
  }, {
    "name" : "private float shapeRun(TextShaper.GlyphsConsumer consumer, int start, int limit, boolean runIsRtl, float x, boolean needWidth, int runFlag)",
    "returnType" : "float",
    "comment" : "\n     * Shape a unidirectional (but possibly multi-styled) run of text.\n     *\n     * @param consumer the consumer of the shape result\n     * @param start the line-relative start\n     * @param limit the line-relative limit\n     * @param runIsRtl true if the run is right-to-left\n     * @param x the position of the run that is closest to the leading margin\n     * @param needWidth true if the width value is required.\n     * @param runFlag the run flag to be applied for this run.\n     * @return the signed width of the run, based on the paragraph direction.\n     * Only valid if needWidth is true.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getOffsetToLeftRightOf(int cursor, boolean toLeft)",
    "returnType" : "int",
    "comment" : "\n     * Walk the cursor through this line, skipping conjuncts and\n     * zero-width characters.\n     *\n     * <p>This function cannot properly walk the cursor off the ends of the line\n     * since it does not know about any shaping on the previous/following line\n     * that might affect the cursor position. Callers must either avoid these\n     * situations or handle the result specially.\n     *\n     * @param cursor the starting position of the cursor, between 0 and the\n     * length of the line, inclusive\n     * @param toLeft true if the caret is moving to the left.\n     * @return the new offset.  If it is less than 0 or greater than the length\n     * of the line, the previous/following line should be examined to get the\n     * actual offset.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getOffsetBeforeAfter(int runIndex, int runStart, int runLimit, boolean runIsRtl, int offset, boolean after)",
    "returnType" : "int",
    "comment" : "\n     * Returns the next valid offset within this directional run, skipping\n     * conjuncts and zero-width characters.  This should not be called to walk\n     * off the end of the line, since the returned values might not be valid\n     * on neighboring lines.  If the returned offset is less than zero or\n     * greater than the line length, the offset should be recomputed on the\n     * preceding or following line, respectively.\n     *\n     * @param runIndex the run index\n     * @param runStart the start of the run\n     * @param runLimit the limit of the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param offset the offset\n     * @param after true if the new offset should logically follow the provided\n     * offset\n     * @return the new offset\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void expandMetricsFromPaint(FontMetricsInt fmi, TextPaint wp)",
    "returnType" : "void",
    "comment" : "\n     * @param wp\n     ",
    "links" : [ ]
  }, {
    "name" : "private void expandMetricsFromPaint(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, FontMetricsInt fmi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void updateMetrics(FontMetricsInt fmi, int previousTop, int previousAscent, int previousDescent, int previousBottom, int previousLeading)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void drawStroke(TextPaint wp, Canvas c, int color, float position, float thickness, float xleft, float xright, float baseline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getRunAdvance(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, int offset, @Nullable float[] advances, int advancesIndex, RectF drawingBounds, @Nullable LineInfo lineInfo)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float handleText(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, Canvas c, TextShaper.GlyphsConsumer consumer, float x, int top, int y, int bottom, FontMetricsInt fmi, RectF drawBounds, boolean needWidth, int offset, @Nullable ArrayList<DecorationInfo> decorations, @Nullable float[] advances, int advancesIndex, @Nullable LineInfo lineInfo, int runFlag)",
    "returnType" : "float",
    "comment" : "\n     * Utility function for measuring and rendering text.  The text must\n     * not include a tab.\n     *\n     * @param wp the working paint\n     * @param start the start of the text\n     * @param end the end of the text\n     * @param runIsRtl true if the run is right-to-left\n     * @param c the canvas, can be null if rendering is not needed\n     * @param consumer the output positioned glyph list, can be null if not necessary\n     * @param x the edge of the run closest to the leading margin\n     * @param top the top of the line\n     * @param y the baseline\n     * @param bottom the bottom of the line\n     * @param fmi receives metrics information, can be null\n     * @param needWidth true if the width of the run is needed\n     * @param offset the offset for the purpose of measuring\n     * @param decorations the list of locations and paremeters for drawing decorations\n     * @param advances receives the advance information about the requested run, can be null.\n     * @param advancesIndex the start index to fill in the advance information.\n     * @param lineInfo an optional output parameter for filling line information.\n     * @param runFlag the run flag to be applied for this run.\n     * @return the signed width of the run based on the run direction; only\n     * valid if needWidth is true\n     ",
    "links" : [ ]
  }, {
    "name" : "private float handleReplacement(ReplacementSpan replacement, TextPaint wp, int start, int limit, boolean runIsRtl, Canvas c, float x, int top, int y, int bottom, FontMetricsInt fmi, boolean needWidth)",
    "returnType" : "float",
    "comment" : "\n     * Utility function for measuring and rendering a replacement.\n     *\n     *\n     * @param replacement the replacement\n     * @param wp the work paint\n     * @param start the start of the run\n     * @param limit the limit of the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param c the canvas, can be null if not rendering\n     * @param x the edge of the replacement closest to the leading margin\n     * @param top the top of the line\n     * @param y the baseline\n     * @param bottom the bottom of the line\n     * @param fmi receives metrics information, can be null\n     * @param needWidth true if the width of the replacement is needed\n     * @return the signed width of the run based on the run direction; only\n     * valid if needWidth is true\n     ",
    "links" : [ ]
  }, {
    "name" : "private int adjustStartHyphenEdit(int start, @Paint.StartHyphenEdit int startHyphenEdit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int adjustEndHyphenEdit(int limit, @Paint.EndHyphenEdit int endHyphenEdit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void extractDecorationInfo(@NonNull TextPaint paint, @NonNull DecorationInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float handleRun(int start, int measureLimit, int limit, boolean runIsRtl, Canvas c, TextShaper.GlyphsConsumer consumer, float x, int top, int y, int bottom, FontMetricsInt fmi, RectF drawBounds, boolean needWidth, @Nullable float[] advances, int advancesIndex, @Nullable LineInfo lineInfo, int runFlag)",
    "returnType" : "float",
    "comment" : "\n     * Utility function for handling a unidirectional run.  The run must not\n     * contain tabs but can contain styles.\n     *\n     *\n     * @param start the line-relative start of the run\n     * @param measureLimit the offset to measure to, between start and limit inclusive\n     * @param limit the limit of the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param c the canvas, can be null\n     * @param consumer the output positioned glyphs, can be null\n     * @param x the end of the run closest to the leading margin\n     * @param top the top of the line\n     * @param y the baseline\n     * @param bottom the bottom of the line\n     * @param fmi receives metrics information, can be null\n     * @param needWidth true if the width is required\n     * @param advances receives the advance information about the requested run, can be null.\n     * @param advancesIndex the start index to fill in the advance information.\n     * @param lineInfo an optional output parameter for filling line information.\n     * @param runFlag the run flag to be applied for this run.\n     * @return the signed width of the run based on the run direction; only\n     * valid if needWidth is true\n     ",
    "links" : [ ]
  }, {
    "name" : "private void drawTextRun(Canvas c, TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, float x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Render a text run with the set-up paint.\n     *\n     * @param c the canvas\n     * @param wp the paint used to render the text\n     * @param start the start of the run\n     * @param end the end of the run\n     * @param contextStart the start of context for the run\n     * @param contextEnd the end of the context for the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param x the x position of the left edge of the run\n     * @param y the baseline of the run\n     ",
    "links" : [ ]
  }, {
    "name" : "private void shapeTextRun(TextShaper.GlyphsConsumer consumer, TextPaint paint, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, float x)",
    "returnType" : "void",
    "comment" : "\n     * Shape a text run with the set-up paint.\n     *\n     * @param consumer the output positioned glyphs list\n     * @param paint the paint used to render the text\n     * @param start the start of the run\n     * @param end the end of the run\n     * @param contextStart the start of context for the run\n     * @param contextEnd the end of the context for the run\n     * @param runIsRtl true if the run is right-to-left\n     * @param x the x position of the left edge of the run\n     ",
    "links" : [ ]
  }, {
    "name" : " float nextTab(float h)",
    "returnType" : "float",
    "comment" : "\n     * Returns the next tab position.\n     *\n     * @param h the (unsigned) offset from the leading margin\n     * @return the (unsigned) tab position after this offset\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isStretchableWhitespace(int ch)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int countStretchableSpaces(int start, int end)",
    "returnType" : "int",
    "comment" : " Return the number of spaces in the text line, for the purpose of justification ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLineEndSpace(char ch)",
    "returnType" : "boolean",
    "comment" : " Note: keep this in sync with Minikin LineBreaker::isLineEndSpace()",
    "links" : [ ]
  }, {
    "name" : "private static boolean equalAttributes(@NonNull TextPaint lp, @NonNull TextPaint rp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public float getAddedWordSpacingInPx()", "public float getAddedLetterSpacingInPx()", "public boolean isJustifying()", "public static TextLine obtain()", "public static TextLine recycle(TextLine tl)", "public void set(TextPaint paint, CharSequence text, int start, int limit, int dir, Directions directions, boolean hasTabs, TabStops tabStops, int ellipsisStart, int ellipsisEnd, boolean useFallbackLineSpacing)", "private char charAt(int i)", "public void justify(@Layout.JustificationMode int justificationMode, float justifyWidth)", "public static int calculateRunFlag(int bidiRunIndex, int bidiRunCount, int lineDirection)", "public static int resolveRunFlagForSubSequence(int runFlag, boolean isRtlRun, int runStart, int runEnd, int spanStart, int spanEnd)", " void draw(Canvas c, float x, int top, int y, int bottom)", "public float metrics(FontMetricsInt fmi, @Nullable RectF drawBounds, boolean returnDrawWidth, @Nullable LineInfo lineInfo)", " void shape(TextShaper.GlyphsConsumer consumer)", "public float measure(@IntRange(from = 0) int offset, boolean trailing, @NonNull FontMetricsInt fmi, @Nullable RectF drawBounds, @Nullable LineInfo lineInfo)", "public void measureAllBounds(@NonNull float[] bounds, @Nullable float[] advances)", "public float[] measureAllOffsets(boolean[] trailing, FontMetricsInt fmi)", "private float drawRun(Canvas c, int start, int limit, boolean runIsRtl, float x, int top, int y, int bottom, boolean needWidth, int runFlag)", "private float measureRun(int start, int offset, int limit, boolean runIsRtl, @Nullable FontMetricsInt fmi, @Nullable RectF drawBounds, @Nullable float[] advances, int advancesIndex, float x, @Nullable LineInfo lineInfo, int runFlag)", "private float shapeRun(TextShaper.GlyphsConsumer consumer, int start, int limit, boolean runIsRtl, float x, boolean needWidth, int runFlag)", " int getOffsetToLeftRightOf(int cursor, boolean toLeft)", "private int getOffsetBeforeAfter(int runIndex, int runStart, int runLimit, boolean runIsRtl, int offset, boolean after)", "private static void expandMetricsFromPaint(FontMetricsInt fmi, TextPaint wp)", "private void expandMetricsFromPaint(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, FontMetricsInt fmi)", " static void updateMetrics(FontMetricsInt fmi, int previousTop, int previousAscent, int previousDescent, int previousBottom, int previousLeading)", "private static void drawStroke(TextPaint wp, Canvas c, int color, float position, float thickness, float xleft, float xright, float baseline)", "private float getRunAdvance(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, int offset, @Nullable float[] advances, int advancesIndex, RectF drawingBounds, @Nullable LineInfo lineInfo)", "private float handleText(TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, Canvas c, TextShaper.GlyphsConsumer consumer, float x, int top, int y, int bottom, FontMetricsInt fmi, RectF drawBounds, boolean needWidth, int offset, @Nullable ArrayList<DecorationInfo> decorations, @Nullable float[] advances, int advancesIndex, @Nullable LineInfo lineInfo, int runFlag)", "private float handleReplacement(ReplacementSpan replacement, TextPaint wp, int start, int limit, boolean runIsRtl, Canvas c, float x, int top, int y, int bottom, FontMetricsInt fmi, boolean needWidth)", "private int adjustStartHyphenEdit(int start, @Paint.StartHyphenEdit int startHyphenEdit)", "private int adjustEndHyphenEdit(int limit, @Paint.EndHyphenEdit int endHyphenEdit)", "private void extractDecorationInfo(@NonNull TextPaint paint, @NonNull DecorationInfo info)", "private float handleRun(int start, int measureLimit, int limit, boolean runIsRtl, Canvas c, TextShaper.GlyphsConsumer consumer, float x, int top, int y, int bottom, FontMetricsInt fmi, RectF drawBounds, boolean needWidth, @Nullable float[] advances, int advancesIndex, @Nullable LineInfo lineInfo, int runFlag)", "private void drawTextRun(Canvas c, TextPaint wp, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, float x, int y)", "private void shapeTextRun(TextShaper.GlyphsConsumer consumer, TextPaint paint, int start, int end, int contextStart, int contextEnd, boolean runIsRtl, float x)", " float nextTab(float h)", "private boolean isStretchableWhitespace(int ch)", "private int countStretchableSpaces(int start, int end)", "public static boolean isLineEndSpace(char ch)", "private static boolean equalAttributes(@NonNull TextPaint lp, @NonNull TextPaint rp)" ],
  "variableNames" : [ "DEBUG", "TAB_CHAR", "mPaint", "mText", "mStart", "mLen", "mDir", "mDirections", "mHasTabs", "mTabs", "mChars", "mCharsValid", "mSpanned", "mComputed", "mTmpRectForMeasure", "mTmpRectForPaintAPI", "mTmpRectForPrecompute", "mRunInfo", "mUseFallbackExtent", "mEllipsisStart", "mEllipsisEnd", "mAddedWordSpacingInPx", "mAddedLetterSpacingInPx", "mIsJustifying", "mWorkPaint", "mActivePaint", "mMetricAffectingSpanSpanSet", "mCharacterStyleSpanSet", "mReplacementSpanSpanSet", "mDecorationInfo", "mDecorations", "sCached", "TAB_INCREMENT" ]
}