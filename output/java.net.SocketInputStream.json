{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/SocketInputStream.java",
  "packageName" : "java.net",
  "className" : "SocketInputStream",
  "comment" : "\n * This stream extends FileInputStream to implement a\n * SocketInputStream. Note that this class should <b>NOT</b> be\n * public.\n *\n * @author      Jonathan Payne\n * @author      Arthur van Hoff\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "eof",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "impl",
    "type" : "AbstractPlainSocketImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "temp",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "socket",
    "type" : "Socket",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closing",
    "type" : "boolean",
    "comment" : "\n     * Closes the stream.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final FileChannel getChannel()",
    "returnType" : "FileChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file input stream.</p>\n     *\n     * The {@code getChannel} method of {@code SocketInputStream}\n     * returns {@code null} since it is a socket based stream.</p>\n     *\n     * @return  the file channel associated with this file input stream\n     *\n     * @since 1.4\n     * @spec JSR-51\n     ",
    "links" : [ "java.nio.channels.FileChannel" ]
  }, {
    "name" : "private native int socketRead0(FileDescriptor fd, byte[] b, int off, int len, int timeout) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into an array of bytes at the specified offset using\n     * the received socket primitive.\n     * @param fd the FileDescriptor\n     * @param b the buffer into which the data is read\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes read\n     * @param timeout the read timeout in ms\n     * @return the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int socketRead(FileDescriptor fd, byte[] b, int off, int len, int timeout) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into an array of bytes at the specified offset using\n     * the received socket primitive.\n     * @param fd the FileDescriptor\n     * @param b the buffer into which the data is read\n     * @param off the start offset of the data\n     * @param len the maximum number of bytes read\n     * @param timeout the read timeout in ms\n     * @return the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into a byte array data from the socket.\n     * @param b the buffer into which the data is read\n     * @return the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int length) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into a byte array <i>b</i> at offset <i>off</i>,\n     * <i>length</i> bytes of data.\n     * @param b the buffer into which the data is read\n     * @param off the start offset of the data\n     * @param length the maximum number of bytes read\n     * @return the actual number of bytes read, -1 is\n     *          returned when the end of the stream is reached.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : " int read(byte[] b, int off, int length, int timeout) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a single byte from the socket.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long numbytes) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips n bytes of input.\n     * @param numbytes the number of bytes to skip\n     * @return  the actual number of bytes skipped.\n     * @exception IOException If an I/O error has occurred.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read without blocking.\n     * @return the number of immediately available bytes\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setEOF(boolean eof)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "\n     * Overrides finalize, the fd is closed by the Socket.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final FileChannel getChannel()", "private native int socketRead0(FileDescriptor fd, byte[] b, int off, int len, int timeout) throws IOException", "private int socketRead(FileDescriptor fd, byte[] b, int off, int len, int timeout) throws IOException", "public int read(byte[] b) throws IOException", "public int read(byte[] b, int off, int length) throws IOException", " int read(byte[] b, int off, int length, int timeout) throws IOException", "public int read() throws IOException", "public long skip(long numbytes) throws IOException", "public int available() throws IOException", "public void close() throws IOException", " void setEOF(boolean eof)", "protected void finalize()" ],
  "variableNames" : [ "eof", "impl", "temp", "socket", "closing" ]
}