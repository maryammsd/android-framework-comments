{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "MessagingStyle",
  "comment" : "\n     * Helper class for generating large-format notifications that include multiple back-and-forth\n     * messages of varying types between any number of people.\n     *\n     * <p>\n     * If the platform does not provide large-format notifications, this method has no effect. The\n     * user will always see the normal notification view.\n     *\n     * <p>\n     * If the app is targeting Android {@link android.os.Build.VERSION_CODES#P} and above, it is\n     * required to use the {@link Person} class in order to get an optimal rendering of the\n     * notification and its avatars. For conversations involving multiple people, the app should\n     * also make sure that it marks the conversation as a group with\n     * {@link #setGroupConversation(boolean)}.\n     *\n     * <p>\n     * From Android {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, messaging style\n     * notifications that are associated with a valid conversation shortcut\n     * (via {@link Notification.Builder#setShortcutId(String)}) are displayed in a dedicated\n     * conversation section in the shade above non-conversation alerting and silence notifications.\n     * To be a valid conversation shortcut, the shortcut must be a\n     * {@link ShortcutInfo.Builder#setLongLived(boolean)} dynamic or cached sharing shortcut.\n     *\n     * <p>\n     * This class is a \"rebuilder\": It attaches to a Builder object and modifies its behavior.\n     * Here's an example of how this may be used:\n     * <pre class=\"prettyprint\">\n     *\n     * Person user = new Person.Builder().setIcon(userIcon).setName(userName).build();\n     * MessagingStyle style = new MessagingStyle(user)\n     *      .addMessage(messages[1].getText(), messages[1].getTime(), messages[1].getPerson())\n     *      .addMessage(messages[2].getText(), messages[2].getTime(), messages[2].getPerson())\n     *      .setGroupConversation(hasMultiplePeople());\n     *\n     * Notification noti = new Notification.Builder()\n     *     .setContentTitle(&quot;2 new messages with &quot; + sender.toString())\n     *     .setContentText(subject)\n     *     .setSmallIcon(R.drawable.new_message)\n     *     .setLargeIcon(aBitmap)\n     *     .setStyle(style)\n     *     .build();\n     * </pre>\n     ",
  "links" : [ "android.os.Build.VERSION_CODES#P", "ShortcutInfo.Builder#setLongLived(boolean)", "#setGroupConversation(boolean)", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.Person", "Notification.Builder#setShortcutId(String)" ],
  "variables" : [ {
    "name" : "MAXIMUM_RETAINED_MESSAGES",
    "type" : "int",
    "comment" : "\n         * The maximum number of messages that will be retained in the Notification itself (the\n         * number displayed is up to the platform).\n         ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_TYPE_LEGACY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_TYPE_NORMAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CONVERSATION_TYPE_IMPORTANT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mUser",
    "type" : "Person",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversationTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortcutIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessages",
    "type" : "List<Message>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHistoricMessages",
    "type" : "List<Message>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsGroupConversation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnreadMessageCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void validate(Context context)",
    "returnType" : "void",
    "comment" : "\n         * Validate that this style was properly composed. This is called at build time.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHeadsUpStatusBarText()",
    "returnType" : "CharSequence",
    "comment" : "\n         * @return the text that should be displayed in the statusBar when heads upped.\n         * If {@code null} is returned, the default implementation will be used.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Person getUser()",
    "returnType" : "Person",
    "comment" : "\n         * @return the user to be displayed for any replies sent by the user\n         ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getUserDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Returns the name to be displayed for any replies sent by the user\n         *\n         * @deprecated use {@link #getUser()} instead\n         ",
    "links" : [ "#getUser()" ]
  }, {
    "name" : "public MessagingStyle setConversationTitle(@Nullable CharSequence conversationTitle)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Sets the title to be displayed on this conversation. May be set to {@code null}.\n         *\n         * <p>Starting in {@link Build.VERSION_CODES#R}, this conversation title will be ignored\n         * if a valid shortcutId is added via {@link Notification.Builder#setShortcutId(String)}.\n         * In this case, {@link ShortcutInfo#getLongLabel()} (or, if missing,\n         * {@link ShortcutInfo#getShortLabel()}) will be shown as the conversation title\n         * instead.\n         *\n         * <p>This API's behavior was changed in SDK version {@link Build.VERSION_CODES#P}. If your\n         * application's target version is less than {@link Build.VERSION_CODES#P}, setting a\n         * conversation title to a non-null value will make {@link #isGroupConversation()} return\n         * {@code true} and passing {@code null} will make it return {@code false}. In\n         * {@link Build.VERSION_CODES#P} and beyond, use {@link #setGroupConversation(boolean)}\n         * to set group conversation status.\n         *\n         * @param conversationTitle Title displayed for this conversation\n         * @return this object for method chaining\n         ",
    "links" : [ "android.content.pm.ShortcutInfo#getShortLabel()", "#setGroupConversation(boolean)", "android.content.pm.ShortcutInfo#getLongLabel()", "Build.VERSION_CODES#R", "#isGroupConversation()", "Build.VERSION_CODES#P", "Notification.Builder#setShortcutId(String)" ]
  }, {
    "name" : "public CharSequence getConversationTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Return the title to be displayed on this conversation. May return {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public MessagingStyle setShortcutIcon(@Nullable Icon conversationIcon)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Sets the icon to be displayed on the conversation, derived from the shortcutId.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Icon getShortcutIcon()",
    "returnType" : "Icon",
    "comment" : "\n         * Return the icon to be displayed on this conversation, derived from the shortcutId. May\n         * return {@code null}.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public MessagingStyle setConversationType(@ConversationType int conversationType)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Sets the conversation type of this MessageStyle notification.\n         * {@link #CONVERSATION_TYPE_LEGACY} will use the \"older\" layout from pre-R,\n         * {@link #CONVERSATION_TYPE_NORMAL} will use the new \"conversation\" layout, and\n         * {@link #CONVERSATION_TYPE_IMPORTANT} will add additional \"important\" treatments.\n         *\n         * @hide\n         ",
    "links" : [ "#CONVERSATION_TYPE_IMPORTANT", "#CONVERSATION_TYPE_NORMAL", "#CONVERSATION_TYPE_LEGACY" ]
  }, {
    "name" : "public int getConversationType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getUnreadMessageCount()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public MessagingStyle setUnreadMessageCount(int unreadMessageCount)",
    "returnType" : "MessagingStyle",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public MessagingStyle addMessage(CharSequence text, long timestamp, CharSequence sender)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Adds a message for display by this notification. Convenience call for a simple\n         * {@link Message} in {@link #addMessage(Notification.MessagingStyle.Message)}.\n         * @param text A {@link CharSequence} to be displayed as the message content\n         * @param timestamp Time in milliseconds at which the message arrived\n         * @param sender A {@link CharSequence} to be used for displaying the name of the\n         * sender. Should be <code>null</code> for messages by the current user, in which case\n         * the platform will insert {@link #getUserDisplayName()}.\n         * Should be unique amongst all individuals in the conversation, and should be\n         * consistent during re-posts of the notification.\n         *\n         * @see Message#Message(CharSequence, long, CharSequence)\n         *\n         * @return this object for method chaining\n         *\n         * @deprecated use {@link #addMessage(CharSequence, long, Person)}\n         ",
    "links" : [ "Message", "#addMessage(CharSequence", "CharSequence", "#getUserDisplayName()", "#addMessage(Notification.MessagingStyle.Message)" ]
  }, {
    "name" : "public MessagingStyle addMessage(@NonNull CharSequence text, long timestamp, @Nullable Person sender)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Adds a message for display by this notification. Convenience call for a simple\n         * {@link Message} in {@link #addMessage(Notification.MessagingStyle.Message)}.\n         * @param text A {@link CharSequence} to be displayed as the message content\n         * @param timestamp Time in milliseconds at which the message arrived\n         * @param sender The {@link Person} who sent the message.\n         * Should be <code>null</code> for messages by the current user, in which case\n         * the platform will insert the user set in {@code MessagingStyle(Person)}.\n         *\n         * @see Message#Message(CharSequence, long, CharSequence)\n         *\n         * @return this object for method chaining\n         ",
    "links" : [ "Message", "CharSequence", "android.app.Person", "#addMessage(Notification.MessagingStyle.Message)" ]
  }, {
    "name" : "public MessagingStyle addMessage(Message message)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Adds a {@link Message} for display in this notification.\n         *\n         * <p>The messages should be added in chronologic order, i.e. the oldest first,\n         * the newest last.\n         *\n         * @param message The {@link Message} to be displayed\n         * @return this object for method chaining\n         ",
    "links" : [ "Message" ]
  }, {
    "name" : "public MessagingStyle addHistoricMessage(Message message)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Adds a {@link Message} for historic context in this notification.\n         *\n         * <p>Messages should be added as historic if they are not the main subject of the\n         * notification but may give context to a conversation. The system may choose to present\n         * them only when relevant, e.g. when replying to a message through a {@link RemoteInput}.\n         *\n         * <p>The messages should be added in chronologic order, i.e. the oldest first,\n         * the newest last.\n         *\n         * @param message The historic {@link Message} to be added\n         * @return this object for method chaining\n         ",
    "links" : [ "android.app.RemoteInput", "Message" ]
  }, {
    "name" : "public List<Message> getMessages()",
    "returnType" : "List<Message>",
    "comment" : "\n         * Gets the list of {@code Message} objects that represent the notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public List<Message> getHistoricMessages()",
    "returnType" : "List<Message>",
    "comment" : "\n         * Gets the list of historic {@code Message}s in the notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "public MessagingStyle setGroupConversation(boolean isGroupConversation)",
    "returnType" : "MessagingStyle",
    "comment" : "\n         * Sets whether this conversation notification represents a group. If the app is targeting\n         * Android P, this is required if the app wants to display the largeIcon set with\n         * {@link Notification.Builder#setLargeIcon(Bitmap)}, otherwise it will be hidden.\n         *\n         * @param isGroupConversation {@code true} if the conversation represents a group,\n         * {@code false} otherwise.\n         * @return this object for method chaining\n         ",
    "links" : [ "Notification.Builder#setLargeIcon(Bitmap)" ]
  }, {
    "name" : "public boolean isGroupConversation()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns {@code true} if this notification represents a group conversation, otherwise\n         * {@code false}.\n         *\n         * <p> If the application that generated this {@link MessagingStyle} targets an SDK version\n         * less than {@link Build.VERSION_CODES#P}, this method becomes dependent on whether or\n         * not the conversation title is set; returning {@code true} if the conversation title is\n         * a non-null value, or {@code false} otherwise. From {@link Build.VERSION_CODES#P} forward,\n         * this method returns what's set by {@link #setGroupConversation(boolean)} allowing for\n         * named, non-group conversations.\n         *\n         * @see #setConversationTitle(CharSequence)\n         ",
    "links" : [ "#setGroupConversation(boolean)", "Build.VERSION_CODES#P", "MessagingStyle" ]
  }, {
    "name" : "public void addExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addExtras(Bundle extras, boolean ensureContrast, int backgroundColor)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static Bundle[] getBundleArrayForMessages(List<Message> messages, boolean ensureContrast, int backgroundColor)",
    "returnType" : "Bundle[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fixTitleAndTextExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void restoreFromExtras(Bundle extras)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean areNotificationsVisiblyDifferent(Style other)",
    "returnType" : "boolean",
    "comment" : "\n         * @hide\n         * Spans are ignored when comparing text for visual difference.\n         ",
    "links" : [ ]
  }, {
    "name" : "private Message findLatestIncomingMessage()",
    "returnType" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Message findLatestIncomingMessage(List<Message> messages)",
    "returnType" : "Message",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeBigContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private RemoteViews makeMessagingView(int viewType)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * Create a messaging layout.\n         *\n         * @param viewType one of StandardTemplateParams.VIEW_TYPE_NORMAL, VIEW_TYPE_BIG,\n         *                VIEW_TYPE_HEADS_UP\n         * @return the created remoteView.\n         ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getKey(Person person)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getOtherPersonName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasOnlyWhiteSpaceSenders()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isWhiteSpace(CharSequence sender)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public RemoteViews makeCompactHeadsUpContentView()",
    "returnType" : "RemoteViews",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void reduceImageSizes(Context context)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private static void reduceMessagesIconSizes(@Nullable List<Message> messages, int maxSize)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void validate(Context context)", "public CharSequence getHeadsUpStatusBarText()", "public Person getUser()", "public CharSequence getUserDisplayName()", "public MessagingStyle setConversationTitle(@Nullable CharSequence conversationTitle)", "public CharSequence getConversationTitle()", "public MessagingStyle setShortcutIcon(@Nullable Icon conversationIcon)", "public Icon getShortcutIcon()", "public MessagingStyle setConversationType(@ConversationType int conversationType)", "public int getConversationType()", "public int getUnreadMessageCount()", "public MessagingStyle setUnreadMessageCount(int unreadMessageCount)", "public MessagingStyle addMessage(CharSequence text, long timestamp, CharSequence sender)", "public MessagingStyle addMessage(@NonNull CharSequence text, long timestamp, @Nullable Person sender)", "public MessagingStyle addMessage(Message message)", "public MessagingStyle addHistoricMessage(Message message)", "public List<Message> getMessages()", "public List<Message> getHistoricMessages()", "public MessagingStyle setGroupConversation(boolean isGroupConversation)", "public boolean isGroupConversation()", "public void addExtras(Bundle extras)", "public void addExtras(Bundle extras, boolean ensureContrast, int backgroundColor)", "private static Bundle[] getBundleArrayForMessages(List<Message> messages, boolean ensureContrast, int backgroundColor)", "private void fixTitleAndTextExtras(Bundle extras)", "protected void restoreFromExtras(Bundle extras)", "public RemoteViews makeContentView(boolean increasedHeight)", "public boolean areNotificationsVisiblyDifferent(Style other)", "private Message findLatestIncomingMessage()", "public static Message findLatestIncomingMessage(List<Message> messages)", "public RemoteViews makeBigContentView()", "private RemoteViews makeMessagingView(int viewType)", "private CharSequence getKey(Person person)", "private CharSequence getOtherPersonName()", "private boolean hasOnlyWhiteSpaceSenders()", "private boolean isWhiteSpace(CharSequence sender)", "public RemoteViews makeHeadsUpContentView(boolean increasedHeight)", "public RemoteViews makeCompactHeadsUpContentView()", "public void reduceImageSizes(Context context)", "private static void reduceMessagesIconSizes(@Nullable List<Message> messages, int maxSize)" ],
  "variableNames" : [ "MAXIMUM_RETAINED_MESSAGES", "CONVERSATION_TYPE_LEGACY", "CONVERSATION_TYPE_NORMAL", "CONVERSATION_TYPE_IMPORTANT", "mUser", "mConversationTitle", "mShortcutIcon", "mMessages", "mHistoricMessages", "mIsGroupConversation", "mConversationType", "mUnreadMessageCount" ]
}