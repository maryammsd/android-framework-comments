{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothGattCharacteristic.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothGattCharacteristic",
  "comment" : "\n * Represents a Bluetooth GATT Characteristic\n *\n * <p>A GATT characteristic is a basic data element used to construct a GATT service, {@link\n * BluetoothGattService}. The characteristic contains a value as well as additional information and\n * optional GATT descriptors, {@link BluetoothGattDescriptor}.\n ",
  "links" : [ "android.bluetooth.BluetoothGattDescriptor", "android.bluetooth.BluetoothGattService" ],
  "variables" : [ {
    "name" : "PROPERTY_BROADCAST",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic is broadcastable. ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_READ",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic is readable. ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_WRITE_NO_RESPONSE",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic can be written without response. ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_WRITE",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic can be written. ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_NOTIFY",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic supports notification ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_INDICATE",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic supports indication ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_SIGNED_WRITE",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic supports write with signature ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_EXTENDED_PROPS",
    "type" : "int",
    "comment" : " Characteristic property: Characteristic has extended properties ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_READ",
    "type" : "int",
    "comment" : " Characteristic read permission ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_READ_ENCRYPTED",
    "type" : "int",
    "comment" : " Characteristic permission: Allow encrypted read operations ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_READ_ENCRYPTED_MITM",
    "type" : "int",
    "comment" : " Characteristic permission: Allow reading with person-in-the-middle protection ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_WRITE",
    "type" : "int",
    "comment" : " Characteristic write permission ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_WRITE_ENCRYPTED",
    "type" : "int",
    "comment" : " Characteristic permission: Allow encrypted writes ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_WRITE_ENCRYPTED_MITM",
    "type" : "int",
    "comment" : " Characteristic permission: Allow encrypted writes with person-in-the-middle protection ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_WRITE_SIGNED",
    "type" : "int",
    "comment" : " Characteristic permission: Allow signed write operations ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_WRITE_SIGNED_MITM",
    "type" : "int",
    "comment" : "\n     * Characteristic permission: Allow signed write operations with person-in-the-middle protection\n     ",
    "links" : [ ]
  }, {
    "name" : "WRITE_TYPE_DEFAULT",
    "type" : "int",
    "comment" : " Write characteristic, requesting acknowledgement by the remote device ",
    "links" : [ ]
  }, {
    "name" : "WRITE_TYPE_NO_RESPONSE",
    "type" : "int",
    "comment" : " Write characteristic without requiring a response by the remote device ",
    "links" : [ ]
  }, {
    "name" : "WRITE_TYPE_SIGNED",
    "type" : "int",
    "comment" : " Write characteristic including authentication signature ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_UINT8",
    "type" : "int",
    "comment" : " Characteristic value format type uint8 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_UINT16",
    "type" : "int",
    "comment" : " Characteristic value format type uint16 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_UINT32",
    "type" : "int",
    "comment" : " Characteristic value format type uint32 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SINT8",
    "type" : "int",
    "comment" : " Characteristic value format type sint8 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SINT16",
    "type" : "int",
    "comment" : " Characteristic value format type sint16 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SINT32",
    "type" : "int",
    "comment" : " Characteristic value format type sint32 ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_SFLOAT",
    "type" : "int",
    "comment" : " Characteristic value format type sfloat (16-bit float) ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_FLOAT",
    "type" : "int",
    "comment" : " Characteristic value format type float (32-bit float) ",
    "links" : [ ]
  }, {
    "name" : "mUuid",
    "type" : "UUID",
    "comment" : "\n     * The UUID of this characteristic.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mInstance",
    "type" : "int",
    "comment" : "\n     * Instance ID for this characteristic.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mProperties",
    "type" : "int",
    "comment" : "\n     * Characteristic properties.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mPermissions",
    "type" : "int",
    "comment" : "\n     * Characteristic permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeySize",
    "type" : "int",
    "comment" : "\n     * Key size (default = 16).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mWriteType",
    "type" : "int",
    "comment" : "\n     * Write type for this characteristic. See WRITE_TYPE_* constants.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "BluetoothGattService",
    "comment" : "\n     * Back-reference to the service this characteristic belongs to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mValue",
    "type" : "byte[]",
    "comment" : "\n     * The cached value of this characteristic.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mDescriptors",
    "type" : "List<BluetoothGattDescriptor>",
    "comment" : " List of descriptors included in this characteristic. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BluetoothGattCharacteristic>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initCharacteristic(BluetoothGattService service, UUID uuid, int instanceId, int properties, int permissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getKeySize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the desired key size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addDescriptor(BluetoothGattDescriptor descriptor)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a descriptor to this characteristic.\n     *\n     * @param descriptor Descriptor to be added to this characteristic.\n     * @return true, if the descriptor was added to the characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : " BluetoothGattDescriptor getDescriptor(UUID uuid, int instanceId)",
    "returnType" : "BluetoothGattDescriptor",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattService getService()",
    "returnType" : "BluetoothGattService",
    "comment" : "\n     * Returns the service this characteristic belongs to.\n     *\n     * @return The associated service\n     ",
    "links" : [ ]
  }, {
    "name" : " void setService(BluetoothGattService service)",
    "returnType" : "void",
    "comment" : "\n     * Sets the service associated with this device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UUID getUuid()",
    "returnType" : "UUID",
    "comment" : "\n     * Returns the UUID of this characteristic\n     *\n     * @return UUID of this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstanceId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the instance ID for this characteristic.\n     *\n     * <p>If a remote device offers multiple characteristics with the same UUID, the instance ID is\n     * used to distuinguish between characteristics.\n     *\n     * @return Instance ID of this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInstanceId(int instanceId)",
    "returnType" : "void",
    "comment" : "\n     * Force the instance ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProperties()",
    "returnType" : "int",
    "comment" : "\n     * Returns the properties of this characteristic.\n     *\n     * <p>The properties contain a bit mask of property flags indicating the features of this\n     * characteristic.\n     *\n     * @return Properties of this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPermissions()",
    "returnType" : "int",
    "comment" : "\n     * Returns the permissions for this characteristic.\n     *\n     * @return Permissions of this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWriteType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the write type for this characteristic.\n     *\n     * @return Write type for this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWriteType(int writeType)",
    "returnType" : "void",
    "comment" : "\n     * Set the write type for this characteristic\n     *\n     * <p>Setting the write type of a characteristic determines how the {@link\n     * BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)} function write\n     * this characteristic.\n     *\n     * @param writeType The write type to for this characteristic. Can be one of: {@link\n     *     #WRITE_TYPE_DEFAULT}, {@link #WRITE_TYPE_NO_RESPONSE} or {@link #WRITE_TYPE_SIGNED}.\n     ",
    "links" : [ "#WRITE_TYPE_NO_RESPONSE", "#WRITE_TYPE_SIGNED", "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "#WRITE_TYPE_DEFAULT" ]
  }, {
    "name" : "public void setKeySize(int keySize)",
    "returnType" : "void",
    "comment" : "\n     * Set the desired key size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothGattDescriptor> getDescriptors()",
    "returnType" : "List<BluetoothGattDescriptor>",
    "comment" : "\n     * Returns a list of descriptors for this characteristic.\n     *\n     * @return Descriptors for this characteristic\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothGattDescriptor getDescriptor(UUID uuid)",
    "returnType" : "BluetoothGattDescriptor",
    "comment" : "\n     * Returns a descriptor with a given UUID out of the list of descriptors for this\n     * characteristic.\n     *\n     * @return GATT descriptor object or null if no descriptor with the given UUID was found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getValue()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the stored value for this characteristic.\n     *\n     * <p>This function returns the stored value for this characteristic as retrieved by calling\n     * {@link BluetoothGatt#readCharacteristic}. The cached value of the characteristic is updated\n     * as a result of a read characteristic operation or if a characteristic update notification has\n     * been received.\n     *\n     * @return Cached value of the characteristic\n     * @deprecated Use {@link BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)} instead\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "android.bluetooth.BluetoothGatt#readCharacteristic" ]
  }, {
    "name" : "public Integer getIntValue(int formatType, int offset)",
    "returnType" : "Integer",
    "comment" : "\n     * Return the stored value of this characteristic.\n     *\n     * <p>The formatType parameter determines how the characteristic value is to be interpreted. For\n     * example, setting formatType to {@link #FORMAT_UINT16} specifies that the first two bytes of\n     * the characteristic value at the given offset are interpreted to generate the return value.\n     *\n     * @param formatType The format type used to interpret the characteristic value.\n     * @param offset Offset at which the integer value can be found.\n     * @return Cached value of the characteristic or null of offset exceeds value size.\n     * @deprecated Use {@link BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)} to get\n     *     the characteristic value\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "#FORMAT_UINT16" ]
  }, {
    "name" : "public Float getFloatValue(int formatType, int offset)",
    "returnType" : "Float",
    "comment" : "\n     * Return the stored value of this characteristic.\n     *\n     * <p>See {@link #getValue} for details.\n     *\n     * @param formatType The format type used to interpret the characteristic value.\n     * @param offset Offset at which the float value can be found.\n     * @return Cached value of the characteristic at a given offset or null if the requested offset\n     *     exceeds the value size.\n     * @deprecated Use {@link BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)} to get\n     *     the characteristic value\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "#getValue" ]
  }, {
    "name" : "public String getStringValue(int offset)",
    "returnType" : "String",
    "comment" : "\n     * Return the stored value of this characteristic.\n     *\n     * <p>See {@link #getValue} for details.\n     *\n     * @param offset Offset at which the string value can be found.\n     * @return Cached value of the characteristic\n     * @deprecated Use {@link BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)} to get\n     *     the characteristic value\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#readCharacteristic(BluetoothGattCharacteristic)", "#getValue" ]
  }, {
    "name" : "public boolean setValue(byte[] value)",
    "returnType" : "boolean",
    "comment" : "\n     * Updates the locally stored value of this characteristic.\n     *\n     * <p>This function modifies the locally stored cached value of this characteristic. To send the\n     * value to the remote device, call {@link BluetoothGatt#writeCharacteristic} to send the value\n     * to the remote device.\n     *\n     * @param value New value for this characteristic\n     * @return true if the locally stored value has been set, false if the requested value could not\n     *     be stored locally.\n     * @deprecated Pass the characteristic value directly into {@link\n     *     BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)}\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "android.bluetooth.BluetoothGatt#writeCharacteristic" ]
  }, {
    "name" : "public boolean setValue(int value, int formatType, int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the locally stored value of this characteristic.\n     *\n     * <p>See {@link #setValue(byte[])} for details.\n     *\n     * @param value New value for this characteristic\n     * @param formatType Integer format type used to transform the value parameter\n     * @param offset Offset at which the value should be placed\n     * @return true if the locally stored value has been set\n     * @deprecated Pass the characteristic value directly into {@link\n     *     BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)}\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "#setValue(byte" ]
  }, {
    "name" : "public boolean setValue(int mantissa, int exponent, int formatType, int offset)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the locally stored value of this characteristic.\n     *\n     * <p>See {@link #setValue(byte[])} for details.\n     *\n     * @param mantissa Mantissa for this characteristic\n     * @param exponent exponent value for this characteristic\n     * @param formatType Float format type used to transform the value parameter\n     * @param offset Offset at which the value should be placed\n     * @return true if the locally stored value has been set\n     * @deprecated Pass the characteristic value directly into {@link\n     *     BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)}\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "#setValue(byte" ]
  }, {
    "name" : "public boolean setValue(String value)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the locally stored value of this characteristic.\n     *\n     * <p>See {@link #setValue(byte[])} for details.\n     *\n     * @param value New value for this characteristic\n     * @return true if the locally stored value has been set\n     * @deprecated Pass the characteristic value directly into {@link\n     *     BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic, byte[], int)}\n     ",
    "links" : [ "android.bluetooth.BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic", "#setValue(byte" ]
  }, {
    "name" : "private int getTypeLen(int formatType)",
    "returnType" : "int",
    "comment" : " Returns the size of a give value type. ",
    "links" : [ ]
  }, {
    "name" : "private int unsignedByteToInt(byte b)",
    "returnType" : "int",
    "comment" : " Convert a signed byte to an unsigned int. ",
    "links" : [ ]
  }, {
    "name" : "private int unsignedBytesToInt(byte b0, byte b1)",
    "returnType" : "int",
    "comment" : " Convert signed bytes to a 16-bit unsigned int. ",
    "links" : [ ]
  }, {
    "name" : "private int unsignedBytesToInt(byte b0, byte b1, byte b2, byte b3)",
    "returnType" : "int",
    "comment" : " Convert signed bytes to a 32-bit unsigned int. ",
    "links" : [ ]
  }, {
    "name" : "private float bytesToFloat(byte b0, byte b1)",
    "returnType" : "float",
    "comment" : " Convert signed bytes to a 16-bit short float value. ",
    "links" : [ ]
  }, {
    "name" : "private float bytesToFloat(byte b0, byte b1, byte b2, byte b3)",
    "returnType" : "float",
    "comment" : " Convert signed bytes to a 32-bit short float value. ",
    "links" : [ ]
  }, {
    "name" : "private int unsignedToSigned(int unsigned, int size)",
    "returnType" : "int",
    "comment" : " Convert an unsigned integer value to a two's-complement encoded signed value. ",
    "links" : [ ]
  }, {
    "name" : "private int intToSignedBits(int i, int size)",
    "returnType" : "int",
    "comment" : " Convert an integer into the signed bits of a given length. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initCharacteristic(BluetoothGattService service, UUID uuid, int instanceId, int properties, int permissions)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public int getKeySize()", "public boolean addDescriptor(BluetoothGattDescriptor descriptor)", " BluetoothGattDescriptor getDescriptor(UUID uuid, int instanceId)", "public BluetoothGattService getService()", " void setService(BluetoothGattService service)", "public UUID getUuid()", "public int getInstanceId()", "public void setInstanceId(int instanceId)", "public int getProperties()", "public int getPermissions()", "public int getWriteType()", "public void setWriteType(int writeType)", "public void setKeySize(int keySize)", "public List<BluetoothGattDescriptor> getDescriptors()", "public BluetoothGattDescriptor getDescriptor(UUID uuid)", "public byte[] getValue()", "public Integer getIntValue(int formatType, int offset)", "public Float getFloatValue(int formatType, int offset)", "public String getStringValue(int offset)", "public boolean setValue(byte[] value)", "public boolean setValue(int value, int formatType, int offset)", "public boolean setValue(int mantissa, int exponent, int formatType, int offset)", "public boolean setValue(String value)", "private int getTypeLen(int formatType)", "private int unsignedByteToInt(byte b)", "private int unsignedBytesToInt(byte b0, byte b1)", "private int unsignedBytesToInt(byte b0, byte b1, byte b2, byte b3)", "private float bytesToFloat(byte b0, byte b1)", "private float bytesToFloat(byte b0, byte b1, byte b2, byte b3)", "private int unsignedToSigned(int unsigned, int size)", "private int intToSignedBits(int i, int size)" ],
  "variableNames" : [ "PROPERTY_BROADCAST", "PROPERTY_READ", "PROPERTY_WRITE_NO_RESPONSE", "PROPERTY_WRITE", "PROPERTY_NOTIFY", "PROPERTY_INDICATE", "PROPERTY_SIGNED_WRITE", "PROPERTY_EXTENDED_PROPS", "PERMISSION_READ", "PERMISSION_READ_ENCRYPTED", "PERMISSION_READ_ENCRYPTED_MITM", "PERMISSION_WRITE", "PERMISSION_WRITE_ENCRYPTED", "PERMISSION_WRITE_ENCRYPTED_MITM", "PERMISSION_WRITE_SIGNED", "PERMISSION_WRITE_SIGNED_MITM", "WRITE_TYPE_DEFAULT", "WRITE_TYPE_NO_RESPONSE", "WRITE_TYPE_SIGNED", "FORMAT_UINT8", "FORMAT_UINT16", "FORMAT_UINT32", "FORMAT_SINT8", "FORMAT_SINT16", "FORMAT_SINT32", "FORMAT_SFLOAT", "FORMAT_FLOAT", "mUuid", "mInstance", "mProperties", "mPermissions", "mKeySize", "mWriteType", "mService", "mValue", "mDescriptors", "CREATOR" ]
}