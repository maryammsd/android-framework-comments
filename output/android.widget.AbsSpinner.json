{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/AbsSpinner.java",
  "packageName" : "android.widget",
  "className" : "AbsSpinner",
  "comment" : "\n * An abstract base class for spinner widgets. SDK users will probably not\n * need to use this class.\n *\n * @attr ref android.R.styleable#AbsSpinner_entries\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "SpinnerAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeightMeasureSpec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidthMeasureSpec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionLeftPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionTopPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionRightPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectionBottomPadding",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpinnerPadding",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecycler",
    "type" : "RecycleBin",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataSetObserver",
    "type" : "DataSetObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTouchFrame",
    "type" : "Rect",
    "comment" : " Temporary frame to hold a child View's frame rectangle ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initAbsSpinner()",
    "returnType" : "void",
    "comment" : "\n     * Common code for different constructor flavors\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdapter(SpinnerAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * The Adapter is used to provide the data which backs this Spinner.\n     * It also provides methods to transform spinner items based on their position\n     * relative to the selected item.\n     * @param adapter The SpinnerAdapter to use for this Spinner\n     ",
    "links" : [ ]
  }, {
    "name" : " void resetList()",
    "returnType" : "void",
    "comment" : "\n     * Clear out all children from the list\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)",
    "returnType" : "void",
    "comment" : "\n     * @see android.view.View#measure(int, int)\n     *\n     * Figure out the dimensions of this Spinner. The width comes from\n     * the widthMeasureSpec as Spinners can't have their width set to\n     * UNSPECIFIED. The height is based on the height of the selected item\n     * plus padding.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getChildHeight(View child)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getChildWidth(View child)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ViewGroup.LayoutParams generateDefaultLayoutParams()",
    "returnType" : "ViewGroup.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void recycleAllViews()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int position, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Jump directly to a specific item in the adapter data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSelection(int position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setSelectionInt(int position, boolean animate)",
    "returnType" : "void",
    "comment" : "\n     * Makes the item at the supplied position selected.\n     *\n     * @param position Position to select\n     * @param animate Should the transition be animated\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void layout(int delta, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public View getSelectedView()",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void requestLayout()",
    "returnType" : "void",
    "comment" : "\n     * Override to prevent spamming ourselves with layout requests\n     * as we place views\n     *\n     * @see android.view.View#requestLayout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public SpinnerAdapter getAdapter()",
    "returnType" : "SpinnerAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int pointToPosition(int x, int y)",
    "returnType" : "int",
    "comment" : "\n     * Maps a point to a position in the list.\n     *\n     * @param x X in local coordinate\n     * @param y Y in local coordinate\n     * @return The position of the item which contains the specified point, or\n     *         {@link #INVALID_POSITION} if the point does not intersect an item.\n     ",
    "links" : [ "#INVALID_POSITION" ]
  }, {
    "name" : "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void autofill(AutofillValue value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initAbsSpinner()", "public void setAdapter(SpinnerAdapter adapter)", " void resetList()", "protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)", " int getChildHeight(View child)", " int getChildWidth(View child)", "protected ViewGroup.LayoutParams generateDefaultLayoutParams()", " void recycleAllViews()", "public void setSelection(int position, boolean animate)", "public void setSelection(int position)", " void setSelectionInt(int position, boolean animate)", " abstract void layout(int delta, boolean animate)", "public View getSelectedView()", "public void requestLayout()", "public SpinnerAdapter getAdapter()", "public int getCount()", "public int pointToPosition(int x, int y)", "protected void dispatchRestoreInstanceState(SparseArray<Parcelable> container)", "public Parcelable onSaveInstanceState()", "public void onRestoreInstanceState(Parcelable state)", "public CharSequence getAccessibilityClassName()", "public void autofill(AutofillValue value)", "public int getAutofillType()", "public AutofillValue getAutofillValue()" ],
  "variableNames" : [ "LOG_TAG", "mAdapter", "mHeightMeasureSpec", "mWidthMeasureSpec", "mSelectionLeftPadding", "mSelectionTopPadding", "mSelectionRightPadding", "mSelectionBottomPadding", "mSpinnerPadding", "mRecycler", "mDataSetObserver", "mTouchFrame" ]
}