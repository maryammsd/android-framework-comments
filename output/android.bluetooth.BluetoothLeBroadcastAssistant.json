{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothLeBroadcastAssistant.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothLeBroadcastAssistant",
  "comment" : "\n * This class provides the public APIs for the LE Audio Broadcast Assistant role, which implements\n * client side control points for Broadcast Audio Scan Service (BASS).\n *\n * <p>An LE Audio Broadcast Assistant can help a Broadcast Sink to scan for available Broadcast\n * Sources. The Broadcast Sink achieves this by offloading the scan to a Broadcast Assistant. This\n * is facilitated by the Broadcast Audio Scan Service (BASS). A BASS server is a GATT server that is\n * part of the Scan Delegator on a Broadcast Sink. A BASS client instead runs on the Broadcast\n * Assistant.\n *\n * <p>Once a GATT connection is established between the BASS client and the BASS server, the\n * Broadcast Sink can offload the scans to the Broadcast Assistant. Upon finding new Broadcast\n * Sources, the Broadcast Assistant then notifies the Broadcast Sink about these over the\n * established GATT connection. The Scan Delegator on the Broadcast Sink can also notify the\n * Assistant about changes such as addition and removal of Broadcast Sources.\n *\n * <p>In the context of this class, BASS server will be addressed as Broadcast Sink and BASS client\n * will be addressed as Broadcast Assistant.\n *\n * <p>BluetoothLeBroadcastAssistant is a proxy object for controlling the Broadcast Assistant\n * service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the\n * BluetoothLeBroadcastAssistant proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutorMap",
    "type" : "Map<Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IBluetoothLeBroadcastAssistantCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of devices via Broadcast Audio Scan\n     * Service (BASS). Please note that in a coordinated set, each set member will connect via BASS\n     * individually. Group operations on a single set member will propagate to the entire set.\n     *\n     * <p>For example, in the binaural case, there will be two different LE devices for the left and\n     * right side and each device will have their own connection state changes. If both devices\n     * belongs to on Coordinated Set, group operation on one of them will affect both devices.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothLeBroadcastAssistant",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothLeBroadcastAssistant getService()",
    "returnType" : "IBluetoothLeBroadcastAssistant",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice sink)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile.\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @throws NullPointerException if <var>device</var> is null\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @throws NullPointerException if <var>device</var> is null\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Callback} that will be invoked during the operation of this profile.\n     *\n     * <p>Repeated registration of the same <var>callback</var> object after the first call to this\n     * method will result with IllegalArgumentException being thrown, even when the\n     * <var>executor</var> is different. API caller would have to call {@link\n     * #unregisterCallback(Callback)} with the same callback object before registering it again.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException if a null executor, or callback is given\n     * @throws IllegalArgumentException if the same <var>callback<var> is already registered\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)", "Callback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link Callback}.\n     *\n     * <p>The same {@link Callback} object used when calling {@link #registerCallback(Executor,\n     * Callback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away.\n     *\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException when callback is null\n     * @throws IllegalArgumentException when the <var>callback</var> was not registered before\n     * @hide\n     ",
    "links" : [ "Callback", "#registerCallback(Executor" ]
  }, {
    "name" : "public void startSearchingForSources(@NonNull List<ScanFilter> filters)",
    "returnType" : "void",
    "comment" : "\n     * Search for LE Audio Broadcast Sources on behalf of all devices connected via Broadcast Audio\n     * Scan Service, filtered by <var>filters</var>.\n     *\n     * <p>On success, {@link Callback#onSearchStarted(int)} will be called with reason code {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}.\n     *\n     * <p>On failure, {@link Callback#onSearchStartFailed(int)} will be called with reason code\n     *\n     * <p>The implementation will also synchronize with discovered Broadcast Sources and get their\n     * metadata before passing the Broadcast Source metadata back to the application using {@link\n     * Callback#onSourceFound(BluetoothLeBroadcastMetadata)}.\n     *\n     * <p>Please disconnect the Broadcast Sink's BASS server by calling {@link\n     * #setConnectionPolicy(BluetoothDevice, int)} with {@link\n     * BluetoothProfile#CONNECTION_POLICY_FORBIDDEN} if you do not want the Broadcast Sink to\n     * receive notifications about this search before calling this method.\n     *\n     * <p>App must also have {@link android.Manifest.permission#ACCESS_FINE_LOCATION\n     * ACCESS_FINE_LOCATION} permission in order to get results.\n     *\n     * <p><var>filters</var> will be AND'ed with internal filters in the implementation and {@link\n     * ScanSettings} will be managed by the implementation.\n     *\n     * @param filters {@link ScanFilter}s for finding exact Broadcast Source, if no filter is\n     *     needed, please provide an empty list instead\n     * @throws NullPointerException when <var>filters</var> argument is null\n     * @throws IllegalStateException when no callback is registered\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSourceFound(BluetoothLeBroadcastMetadata)", "android.bluetooth.BluetoothProfile#CONNECTION_POLICY_FORBIDDEN", "android.bluetooth.le.ScanSettings", "#onSearchStartFailed(int)", "#setConnectionPolicy(BluetoothDevice", "android.bluetooth.le.ScanFilter", "android.Manifest.permission#ACCESS_FINE_LOCATIONACCESS_FINE_LOCATION", "#onSearchStarted(int)" ]
  }, {
    "name" : "public void stopSearchingForSources()",
    "returnType" : "void",
    "comment" : "\n     * Stops an ongoing search for nearby Broadcast Sources.\n     *\n     * <p>On success, {@link Callback#onSearchStopped(int)} will be called with reason code {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}. On failure, {@link\n     * Callback#onSearchStopFailed(int)} will be called with reason code\n     *\n     * @throws IllegalStateException if callback was not registered\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSearchStopped(int)", "#onSearchStopFailed(int)" ]
  }, {
    "name" : "public boolean isSearchInProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if a search has been started by this application.\n     *\n     * @return true if a search has been started by this application\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSource(@NonNull BluetoothDevice sink, @NonNull BluetoothLeBroadcastMetadata sourceMetadata, boolean isGroupOp)",
    "returnType" : "void",
    "comment" : "\n     * Add a Broadcast Source to the Broadcast Sink.\n     *\n     * <p>Caller can modify <var>sourceMetadata</var> before using it in this method to set a\n     * Broadcast Code, to select a different Broadcast Channel in a Broadcast Source such as channel\n     * with a different language, and so on. What can be modified is listed in the documentation of\n     * {@link #modifySource(BluetoothDevice, int, BluetoothLeBroadcastMetadata)} and can also be\n     * modified after a source is added.\n     *\n     * <p>On success, {@link Callback#onSourceAdded(BluetoothDevice, int, int)} will be invoked with\n     * a <var>sourceID</var> assigned by the Broadcast Sink with reason code {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}. However, this callback only indicates that\n     * the Broadcast Sink has allocated resource to receive audio from the Broadcast Source, and\n     * audio stream may not have started. The caller should then wait for {@link\n     * Callback#onReceiveStateChanged(BluetoothDevice, int, BluetoothLeBroadcastReceiveState)}\n     * callback to monitor the encryption and audio sync state.\n     *\n     * <p>Note that wrong broadcast code will not prevent the source from being added to the\n     * Broadcast Sink. Caller should modify the current source to correct the broadcast code.\n     *\n     * <p>On failure, {@link Callback#onSourceAddFailed(BluetoothDevice,\n     * BluetoothLeBroadcastMetadata, int)} will be invoked with the same <var>source</var> metadata\n     * and reason code\n     *\n     * <p>When too many sources was added to Broadcast sink, error {@link\n     * BluetoothStatusCodes#ERROR_REMOTE_NOT_ENOUGH_RESOURCES} will be delivered. In this case,\n     * check the capacity of Broadcast sink via {@link #getMaximumSourceCapacity(BluetoothDevice)}\n     * and the current list of sources via {@link #getAllSources(BluetoothDevice)}.\n     *\n     * <p>Some sources might be added by other Broadcast Assistants and hence was not in {@link\n     * Callback#onSourceAdded(BluetoothDevice, int, int)} callback, but will be updated via {@link\n     * Callback#onReceiveStateChanged(BluetoothDevice, int, BluetoothLeBroadcastReceiveState)}\n     *\n     * <p>If there are multiple members in the coordinated set the sink belongs to, and isGroupOp is\n     * set to true, the Broadcast Source will be added to each sink in the coordinated set and a\n     * separate {@link Callback#onSourceAdded} callback will be invoked for each member of the\n     * coordinated set.\n     *\n     * <p>The <var>isGroupOp</var> option is sticky. This means that subsequent operations using\n     * {@link #modifySource(BluetoothDevice, int, BluetoothLeBroadcastMetadata)} and {@link\n     * #removeSource(BluetoothDevice, int)} will act on all devices in the same coordinated set for\n     * the <var>sink</var> and <var>sourceID</var> pair until the <var>sourceId</var> is removed\n     * from the <var>sink</var> by any Broadcast role (could be another remote device).\n     *\n     * <p>When <var>isGroupOp</var> is true, if one Broadcast Sink in a coordinated set disconnects\n     * from this Broadcast Assistant or lost the Broadcast Source, this Broadcast Assistant will try\n     * to add it back automatically to make sure the whole coordinated set is in the same state.\n     *\n     * @param sink Broadcast Sink to which the Broadcast Source should be added\n     * @param sourceMetadata Broadcast Source metadata to be added to the Broadcast Sink\n     * @param isGroupOp {@code true} if Application wants to perform this operation for all\n     *     coordinated set members throughout this session. Otherwise, caller would have to add,\n     *     modify, and remove individual set members.\n     * @throws NullPointerException if <var>sink</var> or <var>source</var> is null\n     * @throws IllegalStateException if callback was not registered\n     * @hide\n     ",
    "links" : [ "#removeSource(BluetoothDevice", "#modifySource(BluetoothDevice", "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSourceAdded", "#onSourceAdded(BluetoothDevice", "#getAllSources(BluetoothDevice)", "#onReceiveStateChanged(BluetoothDevice", "android.bluetooth.BluetoothStatusCodes#ERROR_REMOTE_NOT_ENOUGH_RESOURCES", "#getMaximumSourceCapacity(BluetoothDevice)", "#onSourceAddFailed(BluetoothDevice" ]
  }, {
    "name" : "public void modifySource(@NonNull BluetoothDevice sink, int sourceId, @NonNull BluetoothLeBroadcastMetadata updatedMetadata)",
    "returnType" : "void",
    "comment" : "\n     * Modify the Broadcast Source information on a Broadcast Sink.\n     *\n     * <p>One can modify {@link BluetoothLeBroadcastMetadata#getBroadcastCode()} if {@link\n     * BluetoothLeBroadcastReceiveState#getBigEncryptionState()} returns {@link\n     * BluetoothLeBroadcastReceiveState#BIG_ENCRYPTION_STATE_BAD_CODE} or {@link\n     * BluetoothLeBroadcastReceiveState#BIG_ENCRYPTION_STATE_CODE_REQUIRED}\n     *\n     * <p>One can modify {@link BluetoothLeBroadcastMetadata#getPaSyncInterval()} if the Broadcast\n     * Assistant received updated information.\n     *\n     * <p>One can modify {@link BluetoothLeBroadcastChannel#isSelected()} to select different\n     * broadcast channel to listen to (one per {@link BluetoothLeBroadcastSubgroup} or set {@link\n     * BluetoothLeBroadcastSubgroup#isNoChannelPreference()} to leave the choice to the Broadcast\n     * Sink.\n     *\n     * <p>One can modify {@link BluetoothLeBroadcastSubgroup#getContentMetadata()} if the subgroup\n     * metadata changes and the Broadcast Sink need help updating the metadata from Broadcast\n     * Assistant.\n     *\n     * <p>Each of the above modifications can be accepted or rejected by the Broadcast Assistant\n     * implement and/or the Broadcast Sink.\n     *\n     * <p>On success, {@link Callback#onSourceModified(BluetoothDevice, int, int)} will be invoked\n     * with reason code {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}.\n     *\n     * <p>On failure, {@link Callback#onSourceModifyFailed(BluetoothDevice, int, int)} will be\n     * invoked with reason code.\n     *\n     * <p>If there are multiple members in the coordinated set the sink belongs to, and isGroupOp is\n     * set to true during {@link #addSource(BluetoothDevice, BluetoothLeBroadcastMetadata,\n     * boolean)}, the source will be modified on each sink in the coordinated set and a separate\n     * {@link Callback#onSourceModified(BluetoothDevice, int, int)} callback will be invoked for\n     * each member of the coordinated set.\n     *\n     * @param sink Broadcast Sink to which the Broadcast Source should be updated\n     * @param sourceId source ID as delivered in {@link Callback#onSourceAdded(BluetoothDevice, int,\n     *     int)}\n     * @param updatedMetadata updated Broadcast Source metadata to be updated on the Broadcast Sink\n     * @throws IllegalStateException if callback was not registered\n     * @throws NullPointerException if <var>sink</var> or <var>updatedMetadata</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastMetadata#getBroadcastCode()", "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSourceAdded(BluetoothDevice", "#addSource(BluetoothDevice", "android.bluetooth.BluetoothLeBroadcastReceiveState#BIG_ENCRYPTION_STATE_CODE_REQUIRED", "#onSourceModifyFailed(BluetoothDevice", "#onSourceModified(BluetoothDevice", "android.bluetooth.BluetoothLeBroadcastSubgroup#getContentMetadata()", "android.bluetooth.BluetoothLeBroadcastReceiveState#BIG_ENCRYPTION_STATE_BAD_CODE", "android.bluetooth.BluetoothLeBroadcastReceiveState#getBigEncryptionState()", "android.bluetooth.BluetoothLeBroadcastMetadata#getPaSyncInterval()", "android.bluetooth.BluetoothLeBroadcastSubgroup", "android.bluetooth.BluetoothLeBroadcastSubgroup#isNoChannelPreference()", "android.bluetooth.BluetoothLeBroadcastChannel#isSelected()" ]
  }, {
    "name" : "public void removeSource(@NonNull BluetoothDevice sink, int sourceId)",
    "returnType" : "void",
    "comment" : "\n     * Removes the Broadcast Source from a Broadcast Sink.\n     *\n     * <p>On success, {@link Callback#onSourceRemoved(BluetoothDevice, int, int)} will be invoked\n     * with reason code {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST}.\n     *\n     * <p>On failure, {@link Callback#onSourceRemoveFailed(BluetoothDevice, int, int)} will be\n     * invoked with reason code.\n     *\n     * <p>If there are multiple members in the coordinated set the sink belongs to, and isGroupOp is\n     * set to true during {@link #addSource(BluetoothDevice, BluetoothLeBroadcastMetadata,\n     * boolean)}, the source will be removed from each sink in the coordinated set and a separate\n     * {@link Callback#onSourceRemoved(BluetoothDevice, int, int)} callback will be invoked for each\n     * member of the coordinated set.\n     *\n     * @param sink Broadcast Sink from which a Broadcast Source should be removed\n     * @param sourceId source ID as delivered in {@link Callback#onSourceAdded(BluetoothDevice, int,\n     *     int)}\n     * @throws NullPointerException when the <var>sink</var> is null\n     * @throws IllegalStateException if callback was not registered\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSourceAdded(BluetoothDevice", "#addSource(BluetoothDevice", "#onSourceRemoved(BluetoothDevice", "#onSourceRemoveFailed(BluetoothDevice" ]
  }, {
    "name" : "public List<BluetoothLeBroadcastReceiveState> getAllSources(@NonNull BluetoothDevice sink)",
    "returnType" : "List<BluetoothLeBroadcastReceiveState>",
    "comment" : "\n     * Get information about all Broadcast Sources that a Broadcast Sink knows about.\n     *\n     * @param sink Broadcast Sink from which to get all Broadcast Sources\n     * @return the list of Broadcast Receive State {@link BluetoothLeBroadcastReceiveState} stored\n     *     in the Broadcast Sink\n     * @throws NullPointerException when <var>sink</var> is null\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothLeBroadcastReceiveState" ]
  }, {
    "name" : "public int getMaximumSourceCapacity(@NonNull BluetoothDevice sink)",
    "returnType" : "int",
    "comment" : "\n     * Get maximum number of sources that can be added to this Broadcast Sink.\n     *\n     * @param sink Broadcast Sink device\n     * @return maximum number of sources that can be added to this Broadcast Sink\n     * @throws NullPointerException when <var>sink</var> is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void log(@NonNull String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothLeBroadcastAssistant getService()", "public BluetoothAdapter getAdapter()", "public int getConnectionState(@NonNull BluetoothDevice sink)", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public List<BluetoothDevice> getConnectedDevices()", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)", "public void unregisterCallback(@NonNull Callback callback)", "public void startSearchingForSources(@NonNull List<ScanFilter> filters)", "public void stopSearchingForSources()", "public boolean isSearchInProgress()", "public void addSource(@NonNull BluetoothDevice sink, @NonNull BluetoothLeBroadcastMetadata sourceMetadata, boolean isGroupOp)", "public void modifySource(@NonNull BluetoothDevice sink, int sourceId, @NonNull BluetoothLeBroadcastMetadata updatedMetadata)", "public void removeSource(@NonNull BluetoothDevice sink, int sourceId)", "public List<BluetoothLeBroadcastReceiveState> getAllSources(@NonNull BluetoothDevice sink)", "public int getMaximumSourceCapacity(@NonNull BluetoothDevice sink)", "private static void log(@NonNull String msg)", "private static boolean isValidDevice(@Nullable BluetoothDevice device)" ],
  "variableNames" : [ "TAG", "DBG", "mCallbackExecutorMap", "mCallback", "ACTION_CONNECTION_STATE_CHANGED", "mCloseGuard", "mBluetoothAdapter", "mService" ]
}