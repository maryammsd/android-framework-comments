{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/ScreenCapture.java",
  "packageName" : "android.window",
  "className" : "ScreenCapture",
  "comment" : "\n * Handles display and layer captures for the system.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCREENSHOT_WAIT_TIME_S",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native int nativeCaptureDisplay(DisplayCaptureArgs captureArgs, long captureListener)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeCaptureLayers(LayerCaptureArgs captureArgs, long captureListener, boolean sync)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateScreenCaptureListener(ObjIntConsumer<ScreenshotHardwareBuffer> consumer)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteListenerToParcel(long nativeObject, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadListenerFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long getNativeListenerFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int captureDisplay(@NonNull DisplayCaptureArgs captureArgs, @NonNull ScreenCaptureListener captureListener)",
    "returnType" : "int",
    "comment" : "\n     * @param captureArgs     Arguments about how to take the screenshot\n     * @param captureListener A listener to receive the screenshot callback\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScreenshotHardwareBuffer captureDisplay(DisplayCaptureArgs captureArgs)",
    "returnType" : "ScreenshotHardwareBuffer",
    "comment" : "\n     * Captures all the surfaces in a display and returns a {@link ScreenshotHardwareBuffer} with\n     * the content.\n     *\n     * @hide\n     ",
    "links" : [ "ScreenshotHardwareBuffer" ]
  }, {
    "name" : "public static ScreenshotHardwareBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale)",
    "returnType" : "ScreenshotHardwareBuffer",
    "comment" : "\n     * Captures a layer and its children and returns a {@link HardwareBuffer} with the content.\n     *\n     * @param layer      The root layer to capture.\n     * @param sourceCrop The portion of the root surface to capture; caller may pass in 'new\n     *                   Rect()' or null if no cropping is desired. If the root layer does not\n     *                   have a buffer or a crop set, then a non-empty source crop must be\n     *                   specified.\n     * @param frameScale The desired scale of the returned buffer; the raw screen will be scaled\n     *                   up/down.\n     * @return Returns a HardwareBuffer that contains the layer capture.\n     * @hide\n     ",
    "links" : [ "android.hardware.HardwareBuffer" ]
  }, {
    "name" : "public static ScreenshotHardwareBuffer captureLayers(@NonNull SurfaceControl layer, @Nullable Rect sourceCrop, float frameScale, int format)",
    "returnType" : "ScreenshotHardwareBuffer",
    "comment" : "\n     * Captures a layer and its children and returns a {@link HardwareBuffer} with the content.\n     *\n     * @param layer      The root layer to capture.\n     * @param sourceCrop The portion of the root surface to capture; caller may pass in 'new\n     *                   Rect()' or null if no cropping is desired. If the root layer does not\n     *                   have a buffer or a crop set, then a non-empty source crop must be\n     *                   specified.\n     * @param frameScale The desired scale of the returned buffer; the raw screen will be scaled\n     *                   up/down.\n     * @param format     The desired pixel format of the returned buffer.\n     * @return Returns a HardwareBuffer that contains the layer capture.\n     * @hide\n     ",
    "links" : [ "android.hardware.HardwareBuffer" ]
  }, {
    "name" : "public static ScreenshotHardwareBuffer captureLayers(LayerCaptureArgs captureArgs)",
    "returnType" : "ScreenshotHardwareBuffer",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScreenshotHardwareBuffer captureLayersExcluding(SurfaceControl layer, Rect sourceCrop, float frameScale, int format, SurfaceControl[] exclude)",
    "returnType" : "ScreenshotHardwareBuffer",
    "comment" : "\n     * Like {@link #captureLayers(SurfaceControl, Rect, float, int)} but with an array of layer\n     * handles to exclude.\n     *\n     * @hide\n     ",
    "links" : [ "#captureLayers(SurfaceControl" ]
  }, {
    "name" : "public static int captureLayers(@NonNull LayerCaptureArgs captureArgs, @NonNull ScreenCaptureListener captureListener)",
    "returnType" : "int",
    "comment" : "\n     * @param captureArgs     Arguments about how to take the screenshot\n     * @param captureListener A listener to receive the screenshot callback\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SynchronousScreenCaptureListener createSyncCaptureListener()",
    "returnType" : "SynchronousScreenCaptureListener",
    "comment" : "\n     * A helper method to handle the async screencapture callbacks synchronously. This should only\n     * be used if the screencapture caller doesn't care that it blocks waiting for a screenshot.\n     *\n     * @return a {@link SynchronousScreenCaptureListener} that should be used for capture\n     * calls into SurfaceFlinger.\n     ",
    "links" : [ "SynchronousScreenCaptureListener" ]
  } ],
  "methodNames" : [ "private static native int nativeCaptureDisplay(DisplayCaptureArgs captureArgs, long captureListener)", "private static native int nativeCaptureLayers(LayerCaptureArgs captureArgs, long captureListener, boolean sync)", "private static native long nativeCreateScreenCaptureListener(ObjIntConsumer<ScreenshotHardwareBuffer> consumer)", "private static native void nativeWriteListenerToParcel(long nativeObject, Parcel out)", "private static native long nativeReadListenerFromParcel(Parcel in)", "private static native long getNativeListenerFinalizer()", "public static int captureDisplay(@NonNull DisplayCaptureArgs captureArgs, @NonNull ScreenCaptureListener captureListener)", "public static ScreenshotHardwareBuffer captureDisplay(DisplayCaptureArgs captureArgs)", "public static ScreenshotHardwareBuffer captureLayers(SurfaceControl layer, Rect sourceCrop, float frameScale)", "public static ScreenshotHardwareBuffer captureLayers(@NonNull SurfaceControl layer, @Nullable Rect sourceCrop, float frameScale, int format)", "public static ScreenshotHardwareBuffer captureLayers(LayerCaptureArgs captureArgs)", "public static ScreenshotHardwareBuffer captureLayersExcluding(SurfaceControl layer, Rect sourceCrop, float frameScale, int format, SurfaceControl[] exclude)", "public static int captureLayers(@NonNull LayerCaptureArgs captureArgs, @NonNull ScreenCaptureListener captureListener)", "public static SynchronousScreenCaptureListener createSyncCaptureListener()" ],
  "variableNames" : [ "TAG", "SCREENSHOT_WAIT_TIME_S" ]
}