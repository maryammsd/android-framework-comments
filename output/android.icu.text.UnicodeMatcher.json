{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UnicodeMatcher.java",
  "packageName" : "android.icu.text",
  "className" : "UnicodeMatcher",
  "comment" : "\n * <code>UnicodeMatcher</code> defines a protocol for objects that can\n * match a range of characters in a Replaceable string.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "U_MISMATCH",
    "type" : "int",
    "comment" : "\n     * Constant returned by <code>matches()</code> indicating a\n     * mismatch between the text and this matcher.  The text contains\n     * a character which does not match, or the text does not contain\n     * all desired characters for a non-incremental match.\n     ",
    "links" : [ ]
  }, {
    "name" : "U_PARTIAL_MATCH",
    "type" : "int",
    "comment" : "\n     * Constant returned by <code>matches()</code> indicating a\n     * partial match between the text and this matcher.  This value is\n     * only returned for incremental match operations.  All characters\n     * of the text match, but more characters are required for a\n     * complete match.  Alternatively, for variable-length matchers,\n     * all characters of the text match, and if more characters were\n     * supplied at limit, they might also match.\n     ",
    "links" : [ ]
  }, {
    "name" : "U_MATCH",
    "type" : "int",
    "comment" : "\n     * Constant returned by <code>matches()</code> indicating a\n     * complete match between the text and this matcher.  For an\n     * incremental variable-length match, this value is returned if\n     * the given text matches, and it is known that additional\n     * characters would not alter the extent of the match.\n     ",
    "links" : [ ]
  }, {
    "name" : "ETHER",
    "type" : "char",
    "comment" : "\n     * The character at index i, where i &lt; contextStart || i &gt;= contextLimit,\n     * is ETHER.  This allows explicit matching by rules and UnicodeSets\n     * of text outside the context.  In traditional terms, this allows anchoring\n     * at the start and/or end.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract int matches(Replaceable text, int[] offset, int limit, boolean incremental)",
    "returnType" : "int",
    "comment" : "\n     * Return a UMatchDegree value indicating the degree of match for\n     * the given text at the given offset.  Zero, one, or more\n     * characters may be matched.\n     *\n     * Matching in the forward direction is indicated by limit &gt;\n     * offset.  Characters from offset forwards to limit-1 will be\n     * considered for matching.\n     *\n     * Matching in the reverse direction is indicated by limit &lt;\n     * offset.  Characters from offset backwards to limit+1 will be\n     * considered for matching.\n     *\n     * If limit == offset then the only match possible is a zero\n     * character match (which subclasses may implement if desired).\n     *\n     * If U_MATCH is returned, then as a side effect, advance the\n     * offset parameter to the limit of the matched substring.  In the\n     * forward direction, this will be the index of the last matched\n     * character plus one.  In the reverse direction, this will be the\n     * index of the last matched character minus one.\n     *\n     * @param text the text to be matched\n     * @param offset on input, the index into text at which to begin\n     * matching.  On output, the limit of the matched text.  The\n     * number of matched characters is the output value of offset\n     * minus the input value.  Offset should always point to the\n     * HIGH SURROGATE (leading code unit) of a pair of surrogates,\n     * both on entry and upon return.\n     * @param limit the limit index of text to be matched.  Greater\n     * than offset for a forward direction match, less than offset for\n     * a backward direction match.  The last character to be\n     * considered for matching will be text.charAt(limit-1) in the\n     * forward direction or text.charAt(limit+1) in the backward\n     * direction.\n     * @param incremental if true, then assume further characters may\n     * be inserted at limit and check for partial matching.  Otherwise\n     * assume the text as given is complete.\n     * @return a match degree value indicating a full match, a partial\n     * match, or a mismatch.  If incremental is false then\n     * U_PARTIAL_MATCH should never be returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toPattern(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this matcher.  If the result of\n     * calling this function is passed to the appropriate parser, it\n     * will produce another matcher that is equal to this one.\n     * @param escapeUnprintable if true then convert unprintable\n     * character to their hex escape representations, \\\\uxxxx or\n     * \\\\Uxxxxxxxx.  Unprintable characters are those other than\n     * U+000A, U+0020..U+007E.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean matchesIndexValue(int v)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this matcher will match a character c, where c\n     * &amp; 0xFF == v, at offset, in the forward direction (with limit &gt;\n     * offset).  This is used by <tt>RuleBasedTransliterator</tt> for\n     * indexing.\n     *\n     * <p>Note:  This API uses an int even though the value will be\n     * restricted to 8 bits in order to avoid complications with\n     * signedness (bytes convert to ints in the range -128..127).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addMatchSetTo(UnicodeSet toUnionTo)",
    "returnType" : "void",
    "comment" : "\n     * Union the set of all characters that may be matched by this object\n     * into the given set.\n     * @param toUnionTo the set into which to union the source characters\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int matches(Replaceable text, int[] offset, int limit, boolean incremental)", "public abstract String toPattern(boolean escapeUnprintable)", "public abstract boolean matchesIndexValue(int v)", "public abstract void addMatchSetTo(UnicodeSet toUnionTo)" ],
  "variableNames" : [ "U_MISMATCH", "U_PARTIAL_MATCH", "U_MATCH", "ETHER" ]
}