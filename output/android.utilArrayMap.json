{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/ArrayMap.java",
  "packageName" : "android.util",
  "className" : "ArrayMap",
  "comment" : "\n * ArrayMap is a generic key->value mapping data structure that is\n * designed to be more memory efficient than a traditional {@link java.util.HashMap}.\n * It keeps its mappings in an array data structure -- an integer array of hash\n * codes for each item, and an Object array of the key/value pairs.  This allows it to\n * avoid having to create an extra object for every entry put in to the map, and it\n * also tries to control the growth of the size of these arrays more aggressively\n * (since growing them only requires copying the entries in the array, not rebuilding\n * a hash map).\n *\n * <p>Note that this implementation is not intended to be appropriate for data structures\n * that may contain large numbers of items.  It is generally slower than a traditional\n * HashMap, since lookups require a binary search and adds and removes require inserting\n * and deleting entries in the array.  For containers holding up to hundreds of items,\n * the performance difference is not significant, less than 50%.</p>\n *\n * <p>Because this container is intended to better balance memory use, unlike most other\n * standard Java containers it will shrink its array as items are removed from it.  Currently\n * you have no control over this shrinking -- if you set a capacity and then remove an\n * item, it may reduce the capacity to better match the current size.  In the future an\n * explicit call to set the capacity should turn off this aggressive shrinking behavior.</p>\n *\n * <p>This structure is <b>NOT</b> thread-safe.</p>\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONCURRENT_MODIFICATION_EXCEPTIONS",
    "type" : "boolean",
    "comment" : "\n     * Attempt to spot concurrent modifications to this data structure.\n     *\n     * It's best-effort, but any time we can throw something more diagnostic than an\n     * ArrayIndexOutOfBoundsException deep in the ArrayMap internals it's going to\n     * save a lot of development time.\n     *\n     * Good times to look for CME include after any allocArrays() call and at the end of\n     * functions that change mSize (put/remove/clear).\n     ",
    "links" : [ ]
  }, {
    "name" : "BASE_SIZE",
    "type" : "int",
    "comment" : "\n     * The minimum amount by which the capacity of a ArrayMap will increase.\n     * This is tuned to be relatively space-efficient.\n     ",
    "links" : [ ]
  }, {
    "name" : "CACHE_SIZE",
    "type" : "int",
    "comment" : "\n     * Maximum number of entries to have in array caches.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_IMMUTABLE_INTS",
    "type" : "int[]",
    "comment" : "\n     * Special hash array value that indicates the container is immutable.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "ArrayMap",
    "comment" : "\n     * @hide Special immutable empty ArrayMap.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseCache",
    "type" : "Object[]",
    "comment" : "\n     * Caches of small array objects to avoid spamming garbage.  The cache\n     * Object[] variable is a pointer to a linked list of array objects.\n     * The first entry in the array is a pointer to the next array in the\n     * list; the second entry is a pointer to the int[] hash code array for it.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseCacheSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTwiceBaseCache",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTwiceBaseCacheSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBaseCacheLock",
    "type" : "Object",
    "comment" : "\n     * Separate locks for each cache since each can be accessed independently of the other without\n     * risk of a deadlock.\n     ",
    "links" : [ ]
  }, {
    "name" : "sTwiceBaseCacheLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdentityHashCode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHashes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArray",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCollections",
    "type" : "MapCollections<K, V>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int binarySearchHashes(int[] hashes, int N, int hash)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int indexOf(Object key, int hash)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int indexOfNull()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void allocArrays(final int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void freeArrays(final int[] hashes, final Object[] array, final int size)",
    "returnType" : "void",
    "comment" : "\n     * Make sure <b>NOT</b> to call this method with arrays that can still be modified. In other\n     * words, don't pass mHashes or mArray in directly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Make the array map empty.  All storage is released.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void erase()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Like {@link #clear}, but doesn't reduce the capacity of the ArrayMap.\n     ",
    "links" : [ "#clear" ]
  }, {
    "name" : "public void ensureCapacity(int minimumCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Ensure the array map can hold at least <var>minimumCapacity</var>\n     * items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsKey(Object key)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a key exists in the array.\n     *\n     * @param key The key to search for.\n     * @return Returns true if the key exists, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfKey(Object key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of a key in the set.\n     *\n     * @param key The key to search for.\n     * @return Returns the index of the key if it exists, else a negative integer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOfValue(Object value)",
    "returnType" : "int",
    "comment" : "\n     * Returns an index for which {@link #valueAt} would return the\n     * specified value, or a negative number if no keys map to the\n     * specified value.\n     * Beware that this is a linear search, unlike lookups by key,\n     * and that multiple keys can map to the same value and this will\n     * find only one of them.\n     ",
    "links" : [ "#valueAt" ]
  }, {
    "name" : "public boolean containsValue(Object value)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether a value exists in the array.  This requires a linear search\n     * through the entire array.\n     *\n     * @param value The value to search for.\n     * @return Returns true if the value exists, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public V get(Object key)",
    "returnType" : "V",
    "comment" : "\n     * Retrieve a value from the array.\n     * @param key The key of the value to retrieve.\n     * @return Returns the value associated with the given key,\n     * or null if there is no such key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public K keyAt(int index)",
    "returnType" : "K",
    "comment" : "\n     * Return the key at the given index in the array.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @return Returns the key stored at the given index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public V valueAt(int index)",
    "returnType" : "V",
    "comment" : "\n     * Return the value at the given index in the array.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @return Returns the value stored at the given index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public V setValueAt(int index, V value)",
    "returnType" : "V",
    "comment" : "\n     * Set the value at a given index in the array.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @param value The new value to store at this index.\n     * @return Returns the previous value at the given index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the array map contains no items.\n     ",
    "links" : [ ]
  }, {
    "name" : "public V put(K key, V value)",
    "returnType" : "V",
    "comment" : "\n     * Add a new value to the array map.\n     * @param key The key under which to store the value.  If\n     * this key already exists in the array, its value will be replaced.\n     * @param value The value to store for the given key.\n     * @return Returns the old value that was stored for the given key, or null if there\n     * was no such key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void append(K key, V value)",
    "returnType" : "void",
    "comment" : "\n     * Special fast path for appending items to the end of the array without validation.\n     * The array must already be large enough to contain the item.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void validate()",
    "returnType" : "void",
    "comment" : "\n     * The use of the {@link #append} function can result in invalid array maps, in particular\n     * an array map where the same key appears multiple times.  This function verifies that\n     * the array map is valid, throwing IllegalArgumentException if a problem is found.  The\n     * main use for this method is validating an array map after unpacking from an IPC, to\n     * protect against malicious callers.\n     * @hide\n     ",
    "links" : [ "#append" ]
  }, {
    "name" : "public void putAll(ArrayMap<? extends K, ? extends V> array)",
    "returnType" : "void",
    "comment" : "\n     * Perform a {@link #put(Object, Object)} of all key/value pairs in <var>array</var>\n     * @param array The array whose contents are to be retrieved.\n     ",
    "links" : [ "#put" ]
  }, {
    "name" : "public V remove(Object key)",
    "returnType" : "V",
    "comment" : "\n     * Remove an existing key from the array map.\n     * @param key The key of the mapping to remove.\n     * @return Returns the value that was stored under the key, or null if there\n     * was no such key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public V removeAt(int index)",
    "returnType" : "V",
    "comment" : "\n     * Remove the key/value mapping at the given index.\n     *\n     * <p>For indices outside of the range <code>0...size()-1</code>, the behavior is undefined for\n     * apps targeting {@link android.os.Build.VERSION_CODES#P} and earlier, and an\n     * {@link ArrayIndexOutOfBoundsException} is thrown for apps targeting\n     * {@link android.os.Build.VERSION_CODES#Q} and later.</p>\n     *\n     * @param index The desired index, must be between 0 and {@link #size()}-1.\n     * @return Returns the value that was stored at this index.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#P", "ArrayIndexOutOfBoundsException", "android.os.Build.VERSION_CODES#Q", "#size" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Return the number of items in this array map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object object)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation returns false if the object is not a map, or\n     * if the maps have different sizes. Otherwise, for each key in this map,\n     * values of both maps are compared. If the values for any key are not\n     * equal, the method returns false, otherwise it returns true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This implementation composes a string by iterating over its mappings. If\n     * this map contains itself as a key or a value, the string \"(this Map)\"\n     * will appear in its place.\n     ",
    "links" : [ ]
  }, {
    "name" : "private MapCollections<K, V> getCollection()",
    "returnType" : "MapCollections<K, V>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the array map contains all of the keys in the given collection.\n     * @param collection The collection whose contents are to be checked against.\n     * @return Returns true if this array map contains a key for every entry\n     * in <var>collection</var>, else returns false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putAll(Map<? extends K, ? extends V> map)",
    "returnType" : "void",
    "comment" : "\n     * Perform a {@link #put(Object, Object)} of all key/value pairs in <var>map</var>\n     * @param map The map whose contents are to be retrieved.\n     ",
    "links" : [ "#put" ]
  }, {
    "name" : "public boolean removeAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all keys in the array map that exist in the given collection.\n     * @param collection The collection whose contents are to be used to remove keys.\n     * @return Returns true if any keys were removed from the array map, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> collection)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all keys in the array map that do <b>not</b> exist in the given collection.\n     * @param collection The collection whose contents are to be used to determine which\n     * keys to keep.\n     * @return Returns true if any keys were removed from the array map, else false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Map.Entry<K, V>> entrySet()",
    "returnType" : "Set<Map.Entry<K, V>>",
    "comment" : "\n     * Return a {@link java.util.Set} for iterating over and interacting with all mappings\n     * in the array map.\n     *\n     * <p><b>Note:</b> this is a very inefficient way to access the array contents, it\n     * requires generating a number of temporary objects and allocates additional state\n     * information associated with the container that will remain for the life of the container.</p>\n     *\n     * <p><b>Note:</b></p> the semantics of this\n     * Set are subtly different than that of a {@link java.util.HashMap}: most important,\n     * the {@link java.util.Map.Entry Map.Entry} object returned by its iterator is a single\n     * object that exists for the entire iterator, so you can <b>not</b> hold on to it\n     * after calling {@link java.util.Iterator#next() Iterator.next}.</p>\n     ",
    "links" : [ "java.util.Set", "java.util.HashMap", "java.util.Map.Entry", "java.util.Iterator#next" ]
  }, {
    "name" : "public Set<K> keySet()",
    "returnType" : "Set<K>",
    "comment" : "\n     * Return a {@link java.util.Set} for iterating over and interacting with all keys\n     * in the array map.\n     *\n     * <p><b>Note:</b> this is a fairly inefficient way to access the array contents, it\n     * requires generating a number of temporary objects and allocates additional state\n     * information associated with the container that will remain for the life of the container.</p>\n     ",
    "links" : [ "java.util.Set" ]
  }, {
    "name" : "public Collection<V> values()",
    "returnType" : "Collection<V>",
    "comment" : "\n     * Return a {@link java.util.Collection} for iterating over and interacting with all values\n     * in the array map.\n     *\n     * <p><b>Note:</b> this is a fairly inefficient way to access the array contents, it\n     * requires generating a number of temporary objects and allocates additional state\n     * information associated with the container that will remain for the life of the container.</p>\n     ",
    "links" : [ "java.util.Collection" ]
  } ],
  "variableNames" : [ "DEBUG", "TAG", "CONCURRENT_MODIFICATION_EXCEPTIONS", "BASE_SIZE", "CACHE_SIZE", "EMPTY_IMMUTABLE_INTS", "EMPTY", "mBaseCache", "mBaseCacheSize", "mTwiceBaseCache", "mTwiceBaseCacheSize", "sBaseCacheLock", "sTwiceBaseCacheLock", "mIdentityHashCode", "mHashes", "mArray", "mSize", "mCollections" ],
  "methodNames" : [ "private static int binarySearchHashes(int[] hashes, int N, int hash)", " int indexOf(Object key, int hash)", " int indexOfNull()", "private void allocArrays(final int size)", "private static void freeArrays(final int[] hashes, final Object[] array, final int size)", "public void clear()", "public void erase()", "public void ensureCapacity(int minimumCapacity)", "public boolean containsKey(Object key)", "public int indexOfKey(Object key)", "public int indexOfValue(Object value)", "public boolean containsValue(Object value)", "public V get(Object key)", "public K keyAt(int index)", "public V valueAt(int index)", "public V setValueAt(int index, V value)", "public boolean isEmpty()", "public V put(K key, V value)", "public void append(K key, V value)", "public void validate()", "public void putAll(ArrayMap<? extends K, ? extends V> array)", "public V remove(Object key)", "public V removeAt(int index)", "public int size()", "public boolean equals(Object object)", "public int hashCode()", "public String toString()", "private MapCollections<K, V> getCollection()", "public boolean containsAll(Collection<?> collection)", "public void putAll(Map<? extends K, ? extends V> map)", "public boolean removeAll(Collection<?> collection)", "public boolean retainAll(Collection<?> collection)", "public Set<Map.Entry<K, V>> entrySet()", "public Set<K> keySet()", "public Collection<V> values()" ]
}