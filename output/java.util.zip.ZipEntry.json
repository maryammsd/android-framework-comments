{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/zip/ZipEntry.java",
  "packageName" : "java.util.zip",
  "className" : "ZipEntry",
  "comment" : "\n * This class is used to represent a ZIP file entry.\n *\n * @author      David Connelly\n * @since 1.1\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "name",
    "type" : "String",
    "comment" : " entry name",
    "links" : [ ]
  }, {
    "name" : "xdostime",
    "type" : "long",
    "comment" : " last modification time (in extended DOS time,",
    "links" : [ ]
  }, {
    "name" : "mtime",
    "type" : "FileTime",
    "comment" : " last modification time, from extra field data",
    "links" : [ ]
  }, {
    "name" : "atime",
    "type" : "FileTime",
    "comment" : " last access time, from extra field data",
    "links" : [ ]
  }, {
    "name" : "ctime",
    "type" : "FileTime",
    "comment" : " creation time, from extra field data",
    "links" : [ ]
  }, {
    "name" : "crc",
    "type" : "long",
    "comment" : " crc-32 of entry data",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "long",
    "comment" : " uncompressed size of entry data",
    "links" : [ ]
  }, {
    "name" : "csize",
    "type" : "long",
    "comment" : " compressed size of entry data",
    "links" : [ ]
  }, {
    "name" : "csizeSet",
    "type" : "boolean",
    "comment" : " Only true if csize was explicitely set by",
    "links" : [ ]
  }, {
    "name" : "method",
    "type" : "int",
    "comment" : " compression method",
    "links" : [ ]
  }, {
    "name" : "flag",
    "type" : "int",
    "comment" : " general purpose flag",
    "links" : [ ]
  }, {
    "name" : "extra",
    "type" : "byte[]",
    "comment" : " optional extra field data for entry",
    "links" : [ ]
  }, {
    "name" : "comment",
    "type" : "String",
    "comment" : " optional comment string for entry",
    "links" : [ ]
  }, {
    "name" : "extraAttributes",
    "type" : "int",
    "comment" : " e.g. POSIX permissions, sym links.",
    "links" : [ ]
  }, {
    "name" : "dataOffset",
    "type" : "long",
    "comment" : " Used by android.util.jar.StrictJarFile from frameworks.",
    "links" : [ ]
  }, {
    "name" : "STORED",
    "type" : "int",
    "comment" : "\n     * Compression method for uncompressed entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFLATED",
    "type" : "int",
    "comment" : "\n     * Compression method for compressed (deflated) entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOSTIME_BEFORE_1980",
    "type" : "long",
    "comment" : "\n     * DOS time constant for representing timestamps before 1980.\n     ",
    "links" : [ ]
  }, {
    "name" : "UPPER_DOSTIME_BOUND",
    "type" : "long",
    "comment" : " Android-changed: Make UPPER_DOSTIME_BOUND public hidden for testing purposes.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getDataOffset()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the entry.\n     * @return the name of the entry\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTime(long time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the last modification time of the entry.\n     *\n     * <p> If the entry is output to a ZIP file or ZIP file formatted\n     * output stream the last modification time set by this method will\n     * be stored into the {@code date and time fields} of the zip file\n     * entry and encoded in standard {@code MS-DOS date and time format}.\n     * The {@link java.util.TimeZone#getDefault() default TimeZone} is\n     * used to convert the epoch time to the MS-DOS data and time.\n     *\n     * @param  time\n     *         The last modification time of the entry in milliseconds\n     *         since the epoch\n     *\n     * @see #getTime()\n     * @see #getLastModifiedTime()\n     ",
    "links" : [ "java.util.TimeZone#getDefault()" ]
  }, {
    "name" : "public long getTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the last modification time of the entry.\n     *\n     * <p> If the entry is read from a ZIP file or ZIP file formatted\n     * input stream, this is the last modification time from the {@code\n     * date and time fields} of the zip file entry. The\n     * {@link java.util.TimeZone#getDefault() default TimeZone} is used\n     * to convert the standard MS-DOS formatted date and time to the\n     * epoch time.\n     *\n     * @return  The last modification time of the entry in milliseconds\n     *          since the epoch, or -1 if not specified\n     *\n     * @see #setTime(long)\n     * @see #setLastModifiedTime(FileTime)\n     ",
    "links" : [ "java.util.TimeZone#getDefault()" ]
  }, {
    "name" : "public void setTimeLocal(LocalDateTime time)",
    "returnType" : "void",
    "comment" : "\n     * Sets the last modification time of the entry in local date-time.\n     *\n     * <p> If the entry is output to a ZIP file or ZIP file formatted\n     * output stream the last modification time set by this method will\n     * be stored into the {@code date and time fields} of the zip file\n     * entry and encoded in standard {@code MS-DOS date and time format}.\n     * If the date-time set is out of the range of the standard {@code\n     * MS-DOS date and time format}, the time will also be stored into\n     * zip file entry's extended timestamp fields in {@code optional\n     * extra data} in UTC time. The {@link java.time.ZoneId#systemDefault()\n     * system default TimeZone} is used to convert the local date-time\n     * to UTC time.\n     *\n     * <p> {@code LocalDateTime} uses a precision of nanoseconds, whereas\n     * this class uses a precision of milliseconds. The conversion will\n     * truncate any excess precision information as though the amount in\n     * nanoseconds was subject to integer division by one million.\n     *\n     * @param  time\n     *         The last modification time of the entry in local date-time\n     *\n     * @see #getTimeLocal()\n     * @since 9\n     ",
    "links" : [ "java.time.ZoneId#systemDefault()" ]
  }, {
    "name" : "public LocalDateTime getTimeLocal()",
    "returnType" : "LocalDateTime",
    "comment" : "\n     * Returns the last modification time of the entry in local date-time.\n     *\n     * <p> If the entry is read from a ZIP file or ZIP file formatted\n     * input stream, this is the last modification time from the zip\n     * file entry's {@code optional extra data} if the extended timestamp\n     * fields are present. Otherwise, the last modification time is read\n     * from entry's standard MS-DOS formatted {@code date and time fields}.\n     *\n     * <p> The {@link java.time.ZoneId#systemDefault() system default TimeZone}\n     * is used to convert the UTC time to local date-time.\n     *\n     * @return  The last modification time of the entry in local date-time\n     *\n     * @see #setTimeLocal(LocalDateTime)\n     * @since 9\n     ",
    "links" : [ "java.time.ZoneId#systemDefault()" ]
  }, {
    "name" : "public ZipEntry setLastModifiedTime(FileTime time)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Sets the last modification time of the entry.\n     *\n     * <p> When output to a ZIP file or ZIP file formatted output stream\n     * the last modification time set by this method will be stored into\n     * zip file entry's {@code date and time fields} in {@code standard\n     * MS-DOS date and time format}), and the extended timestamp fields\n     * in {@code optional extra data} in UTC time.\n     *\n     * @param  time\n     *         The last modification time of the entry\n     * @return This zip entry\n     *\n     * @throws NullPointerException if the {@code time} is null\n     *\n     * @see #getLastModifiedTime()\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileTime getLastModifiedTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the last modification time of the entry.\n     *\n     * <p> If the entry is read from a ZIP file or ZIP file formatted\n     * input stream, this is the last modification time from the zip\n     * file entry's {@code optional extra data} if the extended timestamp\n     * fields are present. Otherwise the last modification time is read\n     * from the entry's {@code date and time fields}, the {@link\n     * java.util.TimeZone#getDefault() default TimeZone} is used to convert\n     * the standard MS-DOS formatted date and time to the epoch time.\n     *\n     * @return The last modification time of the entry, null if not specified\n     *\n     * @see #setLastModifiedTime(FileTime)\n     * @since 1.8\n     ",
    "links" : [ "java.util.TimeZone#getDefault()" ]
  }, {
    "name" : "public ZipEntry setLastAccessTime(FileTime time)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Sets the last access time of the entry.\n     *\n     * <p> If set, the last access time will be stored into the extended\n     * timestamp fields of entry's {@code optional extra data}, when output\n     * to a ZIP file or ZIP file formatted stream.\n     *\n     * @param  time\n     *         The last access time of the entry\n     * @return This zip entry\n     *\n     * @throws NullPointerException if the {@code time} is null\n     *\n     * @see #getLastAccessTime()\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileTime getLastAccessTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the last access time of the entry.\n     *\n     * <p> The last access time is from the extended timestamp fields\n     * of entry's {@code optional extra data} when read from a ZIP file\n     * or ZIP file formatted stream.\n     *\n     * @return The last access time of the entry, null if not specified\n     * @see #setLastAccessTime(FileTime)\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public ZipEntry setCreationTime(FileTime time)",
    "returnType" : "ZipEntry",
    "comment" : "\n     * Sets the creation time of the entry.\n     *\n     * <p> If set, the creation time will be stored into the extended\n     * timestamp fields of entry's {@code optional extra data}, when\n     * output to a ZIP file or ZIP file formatted stream.\n     *\n     * @param  time\n     *         The creation time of the entry\n     * @return This zip entry\n     *\n     * @throws NullPointerException if the {@code time} is null\n     *\n     * @see #getCreationTime()\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileTime getCreationTime()",
    "returnType" : "FileTime",
    "comment" : "\n     * Returns the creation time of the entry.\n     *\n     * <p> The creation time is from the extended timestamp fields of\n     * entry's {@code optional extra data} when read from a ZIP file\n     * or ZIP file formatted stream.\n     *\n     * @return the creation time of the entry, null if not specified\n     * @see #setCreationTime(FileTime)\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSize(long size)",
    "returnType" : "void",
    "comment" : "\n     * Sets the uncompressed size of the entry data.\n     *\n     * @param size the uncompressed size in bytes\n     *\n     * @throws IllegalArgumentException if the specified size is less\n     *         than 0, is greater than 0xFFFFFFFF when\n     *         <a href=\"package-summary.html#zip64\">ZIP64 format</a> is not supported,\n     *         or is less than 0 when ZIP64 is supported\n     * @see #getSize()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSize()",
    "returnType" : "long",
    "comment" : "\n     * Returns the uncompressed size of the entry data.\n     *\n     * @return the uncompressed size of the entry data, or -1 if not known\n     * @see #setSize(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCompressedSize()",
    "returnType" : "long",
    "comment" : "\n     * Returns the size of the compressed entry data.\n     *\n     * <p> In the case of a stored entry, the compressed size will be the same\n     * as the uncompressed size of the entry.\n     *\n     * @return the size of the compressed entry data, or -1 if not known\n     * @see #setCompressedSize(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCompressedSize(long csize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the size of the compressed entry data.\n     *\n     * @param csize the compressed size to set\n     *\n     * @see #getCompressedSize()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCrc(long crc)",
    "returnType" : "void",
    "comment" : "\n     * Sets the CRC-32 checksum of the uncompressed entry data.\n     *\n     * @param crc the CRC-32 value\n     *\n     * @throws IllegalArgumentException if the specified CRC-32 value is\n     *         less than 0 or greater than 0xFFFFFFFF\n     * @see #getCrc()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCrc()",
    "returnType" : "long",
    "comment" : "\n     * Returns the CRC-32 checksum of the uncompressed entry data.\n     *\n     * @return the CRC-32 checksum of the uncompressed entry data, or -1 if\n     * not known\n     *\n     * @see #setCrc(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMethod(int method)",
    "returnType" : "void",
    "comment" : "\n     * Sets the compression method for the entry.\n     *\n     * @param method the compression method, either STORED or DEFLATED\n     *\n     * @throws  IllegalArgumentException if the specified compression\n     *          method is invalid\n     * @see #getMethod()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMethod()",
    "returnType" : "int",
    "comment" : "\n     * Returns the compression method of the entry.\n     *\n     * @return the compression method of the entry, or -1 if not specified\n     * @see #setMethod(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExtra(byte[] extra)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional extra field data for the entry.\n     *\n     * <p> Invoking this method may change this entry's last modification\n     * time, last access time and creation time, if the {@code extra} field\n     * data includes the extensible timestamp fields, such as {@code NTFS tag\n     * 0x0001} or {@code Info-ZIP Extended Timestamp}, as specified in\n     * <a href=\"http://www.info-zip.org/doc/appnote-19970311-iz.zip\">Info-ZIP\n     * Application Note 970311</a>.\n     *\n     * @param  extra\n     *         The extra field data bytes\n     *\n     * @throws IllegalArgumentException if the length of the specified\n     *         extra field data is greater than 0xFFFF bytes\n     *\n     * @see #getExtra()\n     ",
    "links" : [ ]
  }, {
    "name" : " void setExtra0(byte[] extra, boolean doZIP64, boolean isLOC)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional extra field data for the entry.\n     *\n     * @param extra\n     *        the extra field data bytes\n     * @param doZIP64\n     *        if true, set size and csize from ZIP64 fields if present\n     * @param isLOC\n     *        true if setting the extra field for a LOC, false if for\n     *        a CEN\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getExtra()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the extra field data for the entry.\n     *\n     * @return the extra field data for the entry, or null if none\n     *\n     * @see #setExtra(byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setComment(String comment)",
    "returnType" : "void",
    "comment" : "\n     * Sets the optional comment string for the entry.\n     *\n     * <p>ZIP entry comments have maximum length of 0xffff. If the length of the\n     * specified comment string is greater than 0xFFFF bytes after encoding, only\n     * the first 0xFFFF bytes are output to the ZIP file entry.\n     *\n     * @param comment the comment string\n     *\n     * @see #getComment()\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getComment()",
    "returnType" : "String",
    "comment" : "\n     * Returns the comment string for the entry.\n     *\n     * @return the comment string for the entry, or null if none\n     *\n     * @see #setComment(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirectory()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this is a directory entry. A directory entry is\n     * defined to be one whose name ends with a '/'.\n     * @return true if this is a directory entry\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the ZIP entry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this entry.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a copy of this entry.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getDataOffset()", "public String getName()", "public void setTime(long time)", "public long getTime()", "public void setTimeLocal(LocalDateTime time)", "public LocalDateTime getTimeLocal()", "public ZipEntry setLastModifiedTime(FileTime time)", "public FileTime getLastModifiedTime()", "public ZipEntry setLastAccessTime(FileTime time)", "public FileTime getLastAccessTime()", "public ZipEntry setCreationTime(FileTime time)", "public FileTime getCreationTime()", "public void setSize(long size)", "public long getSize()", "public long getCompressedSize()", "public void setCompressedSize(long csize)", "public void setCrc(long crc)", "public long getCrc()", "public void setMethod(int method)", "public int getMethod()", "public void setExtra(byte[] extra)", " void setExtra0(byte[] extra, boolean doZIP64, boolean isLOC)", "public byte[] getExtra()", "public void setComment(String comment)", "public String getComment()", "public boolean isDirectory()", "public String toString()", "public int hashCode()", "public Object clone()" ],
  "variableNames" : [ "name", "xdostime", "mtime", "atime", "ctime", "crc", "size", "csize", "csizeSet", "method", "flag", "extra", "comment", "extraAttributes", "dataOffset", "STORED", "DEFLATED", "DOSTIME_BEFORE_1980", "UPPER_DOSTIME_BOUND" ]
}