{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/PackageManager.java",
  "packageName" : "android.content.pm",
  "className" : "PackageManager",
  "comment" : "\n * Class for retrieving various kinds of information related to the application\n * packages that are currently installed on the device.\n *\n * You can find this class through {@link Context#getPackageManager}.\n *\n * <p class=\"note\"><strong>Note: </strong>If your app targets Android 11 (API level 30) or\n * higher, the methods in this class each return a filtered list of apps. Learn more about how to\n * <a href=\"/training/basics/intents/package-visibility\">manage package visibility</a>.\n * </p>\n ",
  "links" : [ "android.content.Context#getPackageManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APPLY_DEFAULT_TO_DEVICE_PROTECTED_STORAGE",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_SHARED_UID_MIGRATION",
    "type" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_MEDIA_CAPABILITIES",
    "type" : "String",
    "comment" : "\n     * &lt;application&gt; level {@link android.content.pm.PackageManager.Property} tag specifying\n     * the XML resource ID containing an application's media capabilities XML file\n     *\n     * For example:\n     * &lt;application&gt;\n     *   &lt;property android:name=\"android.media.PROPERTY_MEDIA_CAPABILITIES\"\n     *     android:resource=\"@xml/media_capabilities\"&gt;\n     * &lt;application&gt;\n     ",
    "links" : [ "android.content.pm.PackageManager.Property" ]
  }, {
    "name" : "PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES",
    "type" : "String",
    "comment" : "\n     * &lt;application&gt; level {@link android.content.pm.PackageManager.Property} tag\n     * specifying the XML resource ID containing the declaration of the self-certified network\n     * capabilities used by the application.\n     *\n     * <p> Starting from Android 14, usage of some network capabilities in\n     * {@link android.net.ConnectivityManager#requestNetwork} require the application to\n     * declare its usage of that particular capability in this resource. Only some capabilities\n     * require a declaration. Please look up the specific capability you want to use in\n     * {@link android.net.NetworkCapabilities} to see if it needs declaration in this property.\n     *\n     * For example:\n     * &lt;application&gt;\n     *   &lt;property android:name=\"android.net.PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES\"\n     *     android:resource=\"@xml/self_certified_network_capabilities\"&gt;\n     * &lt;application&gt;\n     *\n     * <p> The detail format of self_certified_network_capabilities.xml is described in\n     * {@link android.net.NetworkRequest}\n     ",
    "links" : [ "android.net.ConnectivityManager#requestNetwork", "android.content.pm.PackageManager.Property", "android.net.NetworkCapabilities", "android.net.NetworkRequest" ]
  }, {
    "name" : "PROPERTY_NO_APP_DATA_STORAGE",
    "type" : "String",
    "comment" : "\n     * Application level property that an app can specify to opt-out from having private data\n     * directories both on the internal and external storages.\n     *\n     * <p>Changing the value of this property during app update is not supported, and such updates\n     * will be rejected.\n     *\n     * <p>This should only be set by platform apps that know what they are doing.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_SPECIAL_USE_FGS_SUBTYPE",
    "type" : "String",
    "comment" : "\n     * &lt;service&gt; level {@link android.content.pm.PackageManager.Property} tag specifying\n     * the actual use case of the service if it's foreground service with the type\n     * {@link ServiceInfo#FOREGROUND_SERVICE_TYPE_SPECIAL_USE}.\n     *\n     * <p>\n     * For example:\n     * &lt;service&gt;\n     *   &lt;property android:name=\"android.app.PROPERTY_SPECIAL_USE_FGS_SUBTYPE\"\n     *     android:value=\"foo\"/&gt;\n     * &lt;/service&gt;\n     ",
    "links" : [ "android.content.pm.PackageManager.Property", "android.content.pm.ServiceInfo#FOREGROUND_SERVICE_TYPE_SPECIAL_USE" ]
  }, {
    "name" : "PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT",
    "type" : "String",
    "comment" : "\n     * Application level {@link android.content.pm.PackageManager.Property PackageManager\n     * .Property} for an app to inform the system that the app can be opted-in or opted-out\n     * from the compatibility treatment that rotates camera output by 90 degrees on landscape\n     * sensors on devices known to have compatibility issues.\n     *\n     * <p>The treatment is disabled by default but device manufacturers can enable the treatment\n     * using their discretion to improve camera compatibility. With this property set to\n     * {@code false}, the rotation will not be applied. A value of {@code true}\n     * will ensure that rotation is applied, provided it is enabled for the device. In most cases,\n     * if rotation is the desired behavior this property need not be set. However, if your app\n     * experiences stretching or incorrect rotation on these devices, explicitly setting this to\n     * {@code true} may resolve that behavior. Apps should set this to {@code false} if there\n     * is confidence that the app handles\n     * {@link android.hardware.camera2.CameraCharacteristics#SENSOR_ORIENTATION} correctly.\n     * See <a href=\"https://developer.android.com/training/camera2/camera-preview\"> the\n     * documentation for best practice.</a>\n     *\n     * <p><b>Syntax:</b>\n     * <pre>\n     * &lt;application&gt;\n     *   &lt;property\n     *     android:name=\"android.camera.PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT\"\n     *     android:value=\"true|false\"/&gt;\n     * &lt;/application&gt;\n     * </pre>\n     ",
    "links" : [ "android.content.pm.PackageManager.Property", "android.hardware.camera2.CameraCharacteristics#SENSOR_ORIENTATION" ]
  }, {
    "name" : "PROPERTY_LEGACY_UPDATE_OWNERSHIP_DENYLIST",
    "type" : "String",
    "comment" : "\n     * Application level {@link android.content.pm.PackageManager.Property PackageManager\n     * .Property} for a privileged system installer to define a list of up to 500 packages that\n     * should not have their updates owned by any installer. The list must be provided via a default\n     * XML resource with the following format:\n     *\n     * <pre>\n     * &lt;deny-ownership&gt;PACKAGE_NAME&lt;/deny-ownership&gt;\n     * &lt;deny-ownership&gt;PACKAGE_NAME&lt;/deny-ownership&gt;\n     * </pre>\n     *\n     * <b>NOTE:</b> Installers that provide this property will not granted update ownership for any\n     * packages that they request update ownership of.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager.Property" ]
  }, {
    "name" : "PROPERTY_ANDROID_SAFETY_LABEL",
    "type" : "String",
    "comment" : "\n     * Application level {@link android.content.pm.PackageManager.Property PackageManager\n     * .Property} for a app to inform the installer that a file containing the app's android\n     * safety label data is bundled into the APK as a raw resource.\n     *\n     * <p>For example:\n     * <pre>\n     * &lt;application&gt;\n     *   &lt;property\n     *     android:name=\"android.content.PROPERTY_ANDROID_SAFETY_LABEL\"\n     *     android:resource=\"@raw/app-metadata\"/&gt;\n     * &lt;/application&gt;\n     * </pre>\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager.Property" ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ACTIVITY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_RECEIVER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SERVICE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_PROVIDER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "GET_ACTIVITIES",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * activities in the package in {@link PackageInfo#activities}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#activities", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_RECEIVERS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * intent receivers in the package in\n     * {@link PackageInfo#receivers}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#receivers", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_SERVICES",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * services in the package in {@link PackageInfo#services}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#services", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_PROVIDERS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * content providers in the package in\n     * {@link PackageInfo#providers}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#providers", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_INSTRUMENTATION",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * instrumentation in the package in\n     * {@link PackageInfo#instrumentation}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#instrumentation", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_INTENT_FILTERS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about the\n     * intent filters supported by the activity.\n     *\n     * @deprecated The platform does not support getting {@link IntentFilter}s for the package.\n     ",
    "links" : [ "android.content.IntentFilter", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_SIGNATURES",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about the\n     * signatures included in the package.\n     *\n     * @deprecated use {@code GET_SIGNING_CERTIFICATES} instead\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_RESOLVED_FILTER",
    "type" : "int",
    "comment" : "\n     * {@link ResolveInfo} flag: return the IntentFilter that\n     * was matched for a particular ResolveInfo in\n     * {@link ResolveInfo#filter}.\n     ",
    "links" : [ "android.content.pm.ResolveInfo#filter", "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "GET_META_DATA",
    "type" : "int",
    "comment" : "\n     * {@link ComponentInfo} flag: return the {@link ComponentInfo#metaData}\n     * data {@link android.os.Bundle}s that are associated with a component.\n     * This applies for any API returning a ComponentInfo subclass.\n     ",
    "links" : [ "android.content.pm.ComponentInfo#metaData", "android.os.Bundle", "android.content.pm.ComponentInfo" ]
  }, {
    "name" : "GET_GIDS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return the\n     * {@link PackageInfo#gids group ids} that are associated with an\n     * application.\n     * This applies for any API returning a PackageInfo class, either\n     * directly or nested inside of another.\n     ",
    "links" : [ "android.content.pm.PackageInfo#gids", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_DISABLED_COMPONENTS",
    "type" : "int",
    "comment" : "\n     * @deprecated replaced with {@link #MATCH_DISABLED_COMPONENTS}\n     ",
    "links" : [ "#MATCH_DISABLED_COMPONENTS" ]
  }, {
    "name" : "MATCH_DISABLED_COMPONENTS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: include disabled components in the returned info.\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_SHARED_LIBRARY_FILES",
    "type" : "int",
    "comment" : "\n     * {@link ApplicationInfo} flag: return the\n     * {@link ApplicationInfo#sharedLibraryFiles paths to the shared libraries}\n     * that are associated with an application.\n     * This applies for any API returning an ApplicationInfo class, either\n     * directly or nested inside of another.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#sharedLibraryFiles", "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "GET_URI_PERMISSION_PATTERNS",
    "type" : "int",
    "comment" : "\n     * {@link ProviderInfo} flag: return the\n     * {@link ProviderInfo#uriPermissionPatterns URI permission patterns}\n     * that are associated with a content provider.\n     * This applies for any API returning a ProviderInfo class, either\n     * directly or nested inside of another.\n     ",
    "links" : [ "android.content.pm.ProviderInfo#uriPermissionPatterns", "android.content.pm.ProviderInfo" ]
  }, {
    "name" : "GET_PERMISSIONS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * permissions in the package in\n     * {@link PackageInfo#permissions}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#permissions", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_UNINSTALLED_PACKAGES",
    "type" : "int",
    "comment" : "\n     * @deprecated replaced with {@link #MATCH_UNINSTALLED_PACKAGES}\n     ",
    "links" : [ "#MATCH_UNINSTALLED_PACKAGES" ]
  }, {
    "name" : "MATCH_UNINSTALLED_PACKAGES",
    "type" : "int",
    "comment" : "\n     * Flag parameter to retrieve some information about all applications (even\n     * uninstalled ones) which have data directories. This state could have\n     * resulted if applications have been deleted with flag\n     * {@code DELETE_KEEP_DATA} with a possibility of being replaced or\n     * reinstalled in future.\n     * <p>\n     * Note: this flag may cause less information about currently installed\n     * applications to be returned.\n     * <p>\n     * Note: use of this flag requires the android.permission.QUERY_ALL_PACKAGES\n     * permission to see uninstalled packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "GET_CONFIGURATIONS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return information about\n     * hardware preferences in\n     * {@link PackageInfo#configPreferences PackageInfo.configPreferences},\n     * and requested features in {@link PackageInfo#reqFeatures} and\n     * {@link PackageInfo#featureGroups}.\n     ",
    "links" : [ "android.content.pm.PackageInfo#reqFeatures", "android.content.pm.PackageInfo#featureGroups", "android.content.pm.PackageInfo#configPreferences", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_DISABLED_UNTIL_USED_COMPONENTS",
    "type" : "int",
    "comment" : "\n     * @deprecated replaced with {@link #MATCH_DISABLED_UNTIL_USED_COMPONENTS}.\n     ",
    "links" : [ "#MATCH_DISABLED_UNTIL_USED_COMPONENTS" ]
  }, {
    "name" : "MATCH_DISABLED_UNTIL_USED_COMPONENTS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: include disabled components which are in\n     * that state only because of {@link #COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED}\n     * in the returned info.  Note that if you set this flag, applications\n     * that are in this disabled state will be reported as enabled.\n     ",
    "links" : [ "#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_DEFAULT_ONLY",
    "type" : "int",
    "comment" : "\n     * Resolution and querying flag: if set, only filters that support the\n     * {@link android.content.Intent#CATEGORY_DEFAULT} will be considered for\n     * matching.  This is a synonym for including the CATEGORY_DEFAULT in your\n     * supplied Intent.\n     ",
    "links" : [ "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "MATCH_ALL",
    "type" : "int",
    "comment" : "\n     * Querying flag: if set and if the platform is doing any filtering of the\n     * results, then the filtering will not happen. This is a synonym for saying\n     * that all results should be returned.\n     * <p>\n     * <em>This flag should be used with extreme care.</em>\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_DIRECT_BOOT_UNAWARE",
    "type" : "int",
    "comment" : "\n     * Querying flag: match components which are direct boot <em>unaware</em> in\n     * the returned info, regardless of the current user state.\n     * <p>\n     * When neither {@link #MATCH_DIRECT_BOOT_AWARE} nor\n     * {@link #MATCH_DIRECT_BOOT_UNAWARE} are specified, the default behavior is\n     * to match only runnable components based on the user state. For example,\n     * when a user is started but credentials have not been presented yet, the\n     * user is running \"locked\" and only {@link #MATCH_DIRECT_BOOT_AWARE}\n     * components are returned. Once the user credentials have been presented,\n     * the user is running \"unlocked\" and both {@link #MATCH_DIRECT_BOOT_AWARE}\n     * and {@link #MATCH_DIRECT_BOOT_UNAWARE} components are returned.\n     *\n     * @see UserManager#isUserUnlocked()\n     ",
    "links" : [ "#MATCH_DIRECT_BOOT_AWARE", "#MATCH_DIRECT_BOOT_UNAWARE" ]
  }, {
    "name" : "MATCH_DIRECT_BOOT_AWARE",
    "type" : "int",
    "comment" : "\n     * Querying flag: match components which are direct boot <em>aware</em> in\n     * the returned info, regardless of the current user state.\n     * <p>\n     * When neither {@link #MATCH_DIRECT_BOOT_AWARE} nor\n     * {@link #MATCH_DIRECT_BOOT_UNAWARE} are specified, the default behavior is\n     * to match only runnable components based on the user state. For example,\n     * when a user is started but credentials have not been presented yet, the\n     * user is running \"locked\" and only {@link #MATCH_DIRECT_BOOT_AWARE}\n     * components are returned. Once the user credentials have been presented,\n     * the user is running \"unlocked\" and both {@link #MATCH_DIRECT_BOOT_AWARE}\n     * and {@link #MATCH_DIRECT_BOOT_UNAWARE} components are returned.\n     *\n     * @see UserManager#isUserUnlocked()\n     ",
    "links" : [ "#MATCH_DIRECT_BOOT_AWARE", "#MATCH_DIRECT_BOOT_UNAWARE" ]
  }, {
    "name" : "MATCH_SYSTEM_ONLY",
    "type" : "int",
    "comment" : "\n     * Querying flag: include only components from applications that are marked\n     * with {@link ApplicationInfo#FLAG_SYSTEM}.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#FLAG_SYSTEM" ]
  }, {
    "name" : "MATCH_FACTORY_ONLY",
    "type" : "int",
    "comment" : "\n     * Internal {@link PackageInfo} flag: include only components on the system image.\n     * This will not return information on any unbundled update to system components.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_ANY_USER",
    "type" : "int",
    "comment" : "\n     * Allows querying of packages installed for any user, not just the specific one. This flag\n     * is only meant for use by apps that have INTERACT_ACROSS_USERS permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_KNOWN_PACKAGES",
    "type" : "int",
    "comment" : "\n     * Combination of MATCH_ANY_USER and MATCH_UNINSTALLED_PACKAGES to mean any known\n     * package.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_INSTANT",
    "type" : "int",
    "comment" : "\n     * Internal {@link PackageInfo} flag: include components that are part of an\n     * instant app. By default, instant app components are not matched.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_VISIBLE_TO_INSTANT_APP_ONLY",
    "type" : "int",
    "comment" : "\n     * Internal {@link PackageInfo} flag: include only components that are exposed to\n     * instant apps. Matched components may have been either explicitly or implicitly\n     * exposed.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_EXPLICITLY_VISIBLE_ONLY",
    "type" : "int",
    "comment" : "\n     * Internal {@link PackageInfo} flag: include only components that have been\n     * explicitly exposed to instant apps.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_STATIC_SHARED_AND_SDK_LIBRARIES",
    "type" : "int",
    "comment" : "\n     * Internal {@link PackageInfo} flag: include static shared and SDK libraries.\n     * Apps that depend on static shared/SDK libs can always access the version\n     * of the lib they depend on. System/shell/root can access all shared\n     * libs regardless of dependency but need to explicitly ask for them\n     * via this flag.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_SIGNING_CERTIFICATES",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: return the signing certificates associated with\n     * this package.  Each entry is a signing certificate that the package\n     * has proven it is authorized to use, usually a past signing certificate from\n     * which it has rotated.\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_DIRECT_BOOT_AUTO",
    "type" : "int",
    "comment" : "\n     * Querying flag: automatically match components based on their Direct Boot\n     * awareness and the current user state.\n     * <p>\n     * Since the default behavior is to automatically apply the current user\n     * state, this is effectively a sentinel value that doesn't change the\n     * output of any queries based on its presence or absence.\n     * <p>\n     * Instead, this value can be useful in conjunction with\n     * {@link android.os.StrictMode.VmPolicy.Builder#detectImplicitDirectBoot()}\n     * to detect when a caller is relying on implicit automatic matching,\n     * instead of confirming the explicit behavior they want, using a\n     * combination of these flags:\n     * <ul>\n     * <li>{@link #MATCH_DIRECT_BOOT_AWARE}\n     * <li>{@link #MATCH_DIRECT_BOOT_UNAWARE}\n     * <li>{@link #MATCH_DIRECT_BOOT_AUTO}\n     * </ul>\n     ",
    "links" : [ "#MATCH_DIRECT_BOOT_AWARE", "android.os.StrictMode.VmPolicy.Builder#detectImplicitDirectBoot()", "#MATCH_DIRECT_BOOT_UNAWARE", "#MATCH_DIRECT_BOOT_AUTO" ]
  }, {
    "name" : "MATCH_DEBUG_TRIAGED_MISSING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MATCH_CLONE_PROFILE",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #MATCH_CLONE_PROFILE_LONG} instead.\n     *\n     * @hide\n     ",
    "links" : [ "#MATCH_CLONE_PROFILE_LONG" ]
  }, {
    "name" : "MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: include system apps that are in the uninstalled state and have\n     * been set to be hidden until installed via {@link #setSystemAppState}.\n     * @hide\n     ",
    "links" : [ "#setSystemAppState", "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_APEX",
    "type" : "int",
    "comment" : "\n     * {@link PackageInfo} flag: include APEX packages that are currently\n     * installed. In APEX terminology, this corresponds to packages that are\n     * currently active, i.e. mounted and available to other processes of the OS.\n     * In particular, this flag alone will not match APEX files that are staged\n     * for activation at next reboot.\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "GET_ATTRIBUTIONS",
    "type" : "int",
    "comment" : "\n     * @deprecated Use {@link #GET_ATTRIBUTIONS_LONG} to avoid unintended sign extension.\n     ",
    "links" : [ "#GET_ATTRIBUTIONS_LONG" ]
  }, {
    "name" : "GET_ATTRIBUTIONS_LONG",
    "type" : "long",
    "comment" : "\n     * {@link PackageInfo} flag: return all attributions declared in the package manifest\n     ",
    "links" : [ "android.content.pm.PackageInfo" ]
  }, {
    "name" : "MATCH_ARCHIVED_PACKAGES",
    "type" : "long",
    "comment" : "\n     * Flag parameter to also retrieve some information about archived packages.\n     * Packages can be archived through {@link PackageInstaller#requestArchive} and do not have any\n     * APKs stored on the device, but do keep the data directory.\n     * <p> Note: Archived apps are a subset of apps returned by {@link #MATCH_UNINSTALLED_PACKAGES}.\n     * <p> Note: this flag may cause less information about currently installed\n     * applications to be returned.\n     * <p> Note: use of this flag requires the android.permission.QUERY_ALL_PACKAGES\n     * permission to see uninstalled packages.\n     ",
    "links" : [ "#MATCH_UNINSTALLED_PACKAGES", "android.content.pm.PackageInstaller#requestArchive" ]
  }, {
    "name" : "MATCH_QUARANTINED_COMPONENTS",
    "type" : "long",
    "comment" : "\n     * Querying flag: always match components of packages in quarantined state.\n     * @see #isPackageQuarantined\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_CLONE_PROFILE_LONG",
    "type" : "long",
    "comment" : "\n     * {@link ResolveInfo} flag: allow matching components across clone profile\n     * <p>\n     * This flag is used only for query and not resolution, the default behaviour would be to\n     * restrict querying across clone profile. This flag would be honored only if caller have\n     * permission {@link Manifest.permission.QUERY_CLONED_APPS}.\n     *\n     * @hide\n     ",
    "links" : [ "Manifest.permission.QUERY_CLONED_APPS", "android.content.pm.ResolveInfo" ]
  }, {
    "name" : "SKIP_CURRENT_PROFILE",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #addCrossProfileIntentFilter}: if this flag is set: when\n     * resolving an intent that matches the {@code CrossProfileIntentFilter},\n     * the current profile will be skipped. Only activities in the target user\n     * can respond to the intent.\n     *\n     * @hide\n     ",
    "links" : [ "#addCrossProfileIntentFilter" ]
  }, {
    "name" : "ONLY_IF_NO_MATCH_FOUND",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #addCrossProfileIntentFilter}: if this flag is set:\n     * activities in the other profiles can respond to the intent only if no activity with\n     * non-negative priority in current profile can respond to the intent.\n     * @hide\n     ",
    "links" : [ "#addCrossProfileIntentFilter" ]
  }, {
    "name" : "MODULE_APEX_NAME",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #getModuleInfo}: allow ModuleInfo to be retrieved using the apex module\n     * name, rather than the package name.\n     *\n     * @hide\n     ",
    "links" : [ "#getModuleInfo" ]
  }, {
    "name" : "PERMISSION_GRANTED",
    "type" : "int",
    "comment" : "\n     * Permission check result: this is returned by {@link #checkPermission}\n     * if the permission has been granted to the given package.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "PERMISSION_DENIED",
    "type" : "int",
    "comment" : "\n     * Permission check result: this is returned by {@link #checkPermission}\n     * if the permission has not been granted to the given package.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "SIGNATURE_MATCH",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if all signatures on the two packages match.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "SIGNATURE_NEITHER_SIGNED",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if neither of the two packages is signed.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "SIGNATURE_FIRST_NOT_SIGNED",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if the first package is not signed but the second is.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "SIGNATURE_SECOND_NOT_SIGNED",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if the second package is not signed but the first is.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "SIGNATURE_NO_MATCH",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if not all signatures on both packages match.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "SIGNATURE_UNKNOWN_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Signature check result: this is returned by {@link #checkSignatures}\n     * if either of the packages are not valid.\n     ",
    "links" : [ "#checkSignatures" ]
  }, {
    "name" : "COMPONENT_ENABLED_STATE_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setApplicationEnabledSetting(String, int, int)} and\n     * {@link #setComponentEnabledSetting(ComponentName, int, int)}: This\n     * component or application is in its default enabled state (as specified in\n     * its manifest).\n     * <p>\n     * Explicitly setting the component state to this value restores it's\n     * enabled state to whatever is set in the manifest.\n     ",
    "links" : [ "#setComponentEnabledSetting(ComponentName", "#setApplicationEnabledSetting(String" ]
  }, {
    "name" : "COMPONENT_ENABLED_STATE_ENABLED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setApplicationEnabledSetting(String, int, int)}\n     * and {@link #setComponentEnabledSetting(ComponentName, int, int)}: This\n     * component or application has been explictily enabled, regardless of\n     * what it has specified in its manifest.\n     ",
    "links" : [ "#setComponentEnabledSetting(ComponentName", "#setApplicationEnabledSetting(String" ]
  }, {
    "name" : "COMPONENT_ENABLED_STATE_DISABLED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setApplicationEnabledSetting(String, int, int)}\n     * and {@link #setComponentEnabledSetting(ComponentName, int, int)}: This\n     * component or application has been explicitly disabled, regardless of\n     * what it has specified in its manifest.\n     ",
    "links" : [ "#setComponentEnabledSetting(ComponentName", "#setApplicationEnabledSetting(String" ]
  }, {
    "name" : "COMPONENT_ENABLED_STATE_DISABLED_USER",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setApplicationEnabledSetting(String, int, int)} only: The\n     * user has explicitly disabled the application, regardless of what it has\n     * specified in its manifest.  Because this is due to the user's request,\n     * they may re-enable it if desired through the appropriate system UI.  This\n     * option currently <strong>cannot</strong> be used with\n     * {@link #setComponentEnabledSetting(ComponentName, int, int)}.\n     ",
    "links" : [ "#setComponentEnabledSetting(ComponentName", "#setApplicationEnabledSetting(String" ]
  }, {
    "name" : "COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED",
    "type" : "int",
    "comment" : "\n     * Flag for {@link #setApplicationEnabledSetting(String, int, int)} only: This\n     * application should be considered, until the point where the user actually\n     * wants to use it.  This means that it will not normally show up to the user\n     * (such as in the launcher), but various parts of the user interface can\n     * use {@link #GET_DISABLED_UNTIL_USED_COMPONENTS} to still see it and allow\n     * the user to select it (as for example an IME, device admin, etc).  Such code,\n     * once the user has selected the app, should at that point also make it enabled.\n     * This option currently <strong>can not</strong> be used with\n     * {@link #setComponentEnabledSetting(ComponentName, int, int)}.\n     ",
    "links" : [ "#setComponentEnabledSetting(ComponentName", "#setApplicationEnabledSetting(String", "#GET_DISABLED_UNTIL_USED_COMPONENTS" ]
  }, {
    "name" : "ROLLBACK_DATA_POLICY_RESTORE",
    "type" : "int",
    "comment" : "\n     * User data will be backed up during install and restored during rollback.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLLBACK_DATA_POLICY_WIPE",
    "type" : "int",
    "comment" : "\n     * User data won't be backed up during install but will be wiped out during rollback.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLLBACK_DATA_POLICY_RETAIN",
    "type" : "int",
    "comment" : "\n     * User data won't be backed up during install and will remain unchanged during rollback.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLLBACK_USER_IMPACT_LOW",
    "type" : "int",
    "comment" : "\n     * Rollback will be performed automatically in response to native crashes on startup or\n     * persistent service crashes. More suitable for apps that do not store any user data.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLLBACK_USER_IMPACT_HIGH",
    "type" : "int",
    "comment" : "\n     * Rollback will be performed automatically only when the device is found to be unrecoverable.\n     * More suitable for apps that store user data and have higher impact on user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ROLLBACK_USER_IMPACT_ONLY_MANUAL",
    "type" : "int",
    "comment" : "\n     * Rollback will not be performed automatically. It can be triggered externally.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REPLACE_EXISTING",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that you want to\n     * replace an already installed package, if one exists.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_ALLOW_TEST",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that you want to\n     * allow test packages (those that have set android:testOnly in their\n     * manifest) to be installed.\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package\n     * must be installed to internal storage.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_FROM_ADB",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this install\n     * was initiated via ADB.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_ALL_USERS",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this install\n     * should immediately be visible to all users.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_REQUEST_DOWNGRADE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that an upgrade to a lower version\n     * of a package than currently installed has been requested.\n     *\n     * <p>Note that this flag doesn't guarantee that downgrade will be performed. That decision\n     * depends\n     * on whenever:\n     * <ul>\n     * <li>An app is debuggable.\n     * <li>Or a build is debuggable.\n     * <li>Or {@link #INSTALL_ALLOW_DOWNGRADE} is set.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "#INSTALL_ALLOW_DOWNGRADE", "#installPackage" ]
  }, {
    "name" : "INSTALL_GRANT_ALL_REQUESTED_PERMISSIONS",
    "type" : "int",
    "comment" : "\n     * Flag parameter for package install to indicate that all requested permissions should be\n     * granted to the package. If {@link #INSTALL_ALL_USERS} is set the runtime permissions will\n     * be granted to all users, otherwise only to the owner.\n     * <p/>\n     * If this flag is set, {@link SessionParams#setPermissionState(String, int)} should not be\n     * called.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller.SessionParams#setPermissionState(String", "#INSTALL_ALL_USERS" ]
  }, {
    "name" : "INSTALL_FORCE_VOLUME_UUID",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FORCE_PERMISSION_PROMPT",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that we always want to force\n     * the prompt for permission approval. This overrides any special behaviour for internal\n     * components.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_INSTANT_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package is\n     * to be installed as a lightweight \"ephemeral\" app.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_DONT_KILL_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package contains\n     * a feature split to an existing application and the existing application should not\n     * be killed during the installation process.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_FULL_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package is\n     * to be installed as a heavy weight app. This is fundamentally the opposite of\n     * {@link #INSTALL_INSTANT_APP}.\n     *\n     * @hide\n     ",
    "links" : [ "#INSTALL_INSTANT_APP", "#installPackage" ]
  }, {
    "name" : "INSTALL_ALLOCATE_AGGRESSIVE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package\n     * is critical to system health or security, meaning the system should use\n     * {@link StorageManager#FLAG_ALLOCATE_AGGRESSIVE} internally.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.storage.StorageManager#FLAG_ALLOCATE_AGGRESSIVE", "#installPackage" ]
  }, {
    "name" : "INSTALL_VIRTUAL_PRELOAD",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package\n     * is a virtual preload.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_APEX",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package\n     * is an APEX package\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_ENABLE_ROLLBACK",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that rollback\n     * should be enabled for this install.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_DISABLE_VERIFICATION",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that package verification should be\n     * disabled for this package.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_ALLOW_DOWNGRADE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that\n     * {@link #INSTALL_REQUEST_DOWNGRADE} should be allowed.\n     *\n     * @hide\n     ",
    "links" : [ "#INSTALL_REQUEST_DOWNGRADE", "#installPackage" ]
  }, {
    "name" : "INSTALL_STAGED",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that this package\n     * is being installed as part of a staged install.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_ALL_WHITELIST_RESTRICTED_PERMISSIONS",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that all restricted\n     * permissions should be allowlisted. If {@link #INSTALL_ALL_USERS}\n     * is set the restricted permissions will be allowlisted for all users, otherwise\n     * only to the owner.\n     *\n     * <p>\n     * <strong>Note: </strong>In retrospect it would have been preferred to use\n     * more inclusive terminology when naming this API. Similar APIs added will\n     * refrain from using the term \"whitelist\".\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "#INSTALL_ALL_USERS", "#installPackage" ]
  }, {
    "name" : "INSTALL_DISABLE_ALLOWED_APEX_UPDATE_CHECK",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to indicate that check whether given APEX can be\n     * updated should be disabled for this install.\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_BYPASS_LOW_TARGET_SDK_BLOCK",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to bypass the low targer sdk version block\n     * for this install.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "INSTALL_REQUEST_UPDATE_OWNERSHIP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link SessionParams} to indicate that the\n     * update ownership enforcement is requested.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller.SessionParams" ]
  }, {
    "name" : "INSTALL_FROM_MANAGED_USER_OR_PROFILE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link PackageInstaller.SessionParams} to indicate that this\n     * session is from a managed user or profile.\n     * @hide\n     ",
    "links" : [ "PackageInstaller.SessionParams" ]
  }, {
    "name" : "INSTALL_ARCHIVED",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link PackageInstaller.SessionParams} to indicate that this\n     * session is for archived package installation.\n     * @hide\n     ",
    "links" : [ "PackageInstaller.SessionParams" ]
  }, {
    "name" : "INSTALL_IGNORE_DEXOPT_PROFILE",
    "type" : "int",
    "comment" : "\n     * If set, all dexopt profiles are ignored by dexopt during the installation, including the\n     * profile in the DM file and the profile embedded in the APK file. If an invalid profile is\n     * provided during installation, no warning will be reported by {@code adb install}.\n     *\n     * This option does not affect later dexopt operations (e.g., background dexopt and manual `pm\n     * compile` invocations).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_UNARCHIVE_DRAFT",
    "type" : "int",
    "comment" : "\n     * If set, then the session is a draft session created for an upcoming unarchival by its\n     * installer.\n     *\n     * @see PackageInstaller#requestUnarchive\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_UNARCHIVE",
    "type" : "int",
    "comment" : "\n     * If set, then the {@link PackageInstaller.Session} is an unarchival.\n     *\n     * @see PackageInstaller#requestUnarchive\n     *\n     * @hide\n     ",
    "links" : [ "PackageInstaller.Session" ]
  }, {
    "name" : "INSTALL_DEVELOPMENT_FORCE_NON_STAGED_APEX_UPDATE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #installPackage} to force a non-staged update of an APEX. This is\n     * a development-only feature and should not be used on end user devices.\n     *\n     * @hide\n     ",
    "links" : [ "#installPackage" ]
  }, {
    "name" : "DONT_KILL_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for\n     * {@link #setComponentEnabledSetting(android.content.ComponentName, int, int)} to indicate\n     * that you don't want to kill the app containing the component.  Be careful when you set this\n     * since changing component states can make the containing application's behavior unpredictable.\n     ",
    "links" : [ "#setComponentEnabledSetting(android.content.ComponentName" ]
  }, {
    "name" : "SYNCHRONOUS",
    "type" : "int",
    "comment" : "\n     * Flag parameter for\n     * {@link #setComponentEnabledSetting(android.content.ComponentName, int, int)} to indicate\n     * that the given user's package restrictions state will be serialised to disk after the\n     * component state has been updated. Note that this is synchronous disk access, so calls using\n     * this flag should be run on a background thread.\n     ",
    "links" : [ "#setComponentEnabledSetting(android.content.ComponentName" ]
  }, {
    "name" : "FLAG_SUSPEND_QUARANTINED",
    "type" : "int",
    "comment" : "\n     * Flag parameter {@link #setPackagesSuspended(String[], boolean, PersistableBundle,\n     * PersistableBundle, android.content.pm.SuspendDialogInfo, int)}:\n     * Apps in this state not only appear suspended for all user visible purposes (eg, Launcher,\n     * ShareSheet), but also individual components of the app can behave as disabled depending on\n     * the importance of the calling app.\n     *\n     * @hide\n     ",
    "links" : [ "#setPackagesSuspended(String" ]
  }, {
    "name" : "INSTALL_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Code indicating that the reason for installing this package is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REASON_POLICY",
    "type" : "int",
    "comment" : "\n     * Code indicating that this package was installed due to enterprise policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REASON_DEVICE_RESTORE",
    "type" : "int",
    "comment" : "\n     * Code indicating that this package was installed as part of restoring from another device.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REASON_DEVICE_SETUP",
    "type" : "int",
    "comment" : "\n     * Code indicating that this package was installed as part of device setup.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REASON_USER",
    "type" : "int",
    "comment" : "\n     * Code indicating that the package installation was initiated by the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_REASON_ROLLBACK",
    "type" : "int",
    "comment" : "\n     * Code indicating that the package installation was a rollback initiated by RollbackManager.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_SCENARIO_DEFAULT",
    "type" : "int",
    "comment" : "\n     * A value to indicate the lack of CUJ information, disabling all installation scenario logic.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_SCENARIO_FAST",
    "type" : "int",
    "comment" : "\n     * Installation scenario providing the fastest “install button to launch\" experience possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_SCENARIO_BULK",
    "type" : "int",
    "comment" : "\n     * Installation scenario indicating a bulk operation with the desired result of a fully\n     * optimized application.  If the system is busy or resources are scarce the system will\n     * perform less work to avoid impacting system health.\n     *\n     * Examples of bulk installation scenarios might include device restore, background updates of\n     * multiple applications, or user-triggered updates for all applications.\n     *\n     * The decision to use BULK or BULK_SECONDARY should be based on the desired user experience.\n     * BULK_SECONDARY operations may take less time to complete but, when they do, will produce\n     * less optimized applications.  The device state (e.g. memory usage or battery status) should\n     * not be considered when making this decision as those factors are taken into account by the\n     * Package Manager when acting on the installation scenario.\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_SCENARIO_BULK_SECONDARY",
    "type" : "int",
    "comment" : "\n     * Installation scenario indicating a bulk operation that prioritizes minimal system health\n     * impact over application optimization.  The application may undergo additional optimization\n     * if the system is idle and system resources are abundant.  The more elements of a bulk\n     * operation that are marked BULK_SECONDARY, the faster the entire bulk operation will be.\n     *\n     * See the comments for INSTALL_SCENARIO_BULK for more information.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNINSTALL_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Code indicating that the reason for uninstalling this package is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UNINSTALL_REASON_USER_TYPE",
    "type" : "int",
    "comment" : "\n     * Code indicating that this package was uninstalled due to the type of user.\n     * See UserSystemPackageInstaller\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * on success.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_ALREADY_EXISTS",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the package is already installed.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_INVALID_APK",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the package archive file is invalid.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_INVALID_URI",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the URI passed in is invalid.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_INSUFFICIENT_STORAGE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the package manager service found that the device didn't have enough storage space to\n     * install the app.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_DUPLICATE_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if a package is already installed with the same name.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_NO_SHARED_USER",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the requested shared user does not exist.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_UPDATE_INCOMPATIBLE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if a previously installed package of the same name has a different signature than the new\n     * package (and the old package's data was not removed).\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_SHARED_USER_INCOMPATIBLE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package is requested a shared user which is already installed on the device and\n     * does not have matching signature.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_MISSING_SHARED_LIBRARY",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package uses a shared library that is not available.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_REPLACE_COULDNT_DELETE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * when the package being replaced is a system app and the caller didn't provide the\n     * {@link #DELETE_SYSTEM_APP} flag.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS", "#DELETE_SYSTEM_APP" ]
  }, {
    "name" : "INSTALL_FAILED_DEXOPT",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed while optimizing and validating its dex files, either because there\n     * was not enough storage or the validation failed.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_OLDER_SDK",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed because the current SDK version is older than that required by the\n     * package.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_CONFLICTING_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed because it contains a content provider with the same authority as a\n     * provider already installed in the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_NEWER_SDK",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed because the current SDK version is newer than that required by the\n     * package.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_TEST_ONLY",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed because it has specified that it is a test-only package and the\n     * caller has not supplied the {@link #INSTALL_ALLOW_TEST} flag.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS", "#INSTALL_ALLOW_TEST" ]
  }, {
    "name" : "INSTALL_FAILED_CPU_ABI_INCOMPATIBLE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the package being installed contains native code, but none that is compatible with the\n     * device's CPU_ABI.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_MISSING_FEATURE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package uses a feature that is not available.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_CONTAINER_ERROR",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if a secure container mount point couldn't be\n     * accessed on external media.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_INVALID_INSTALL_LOCATION",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package couldn't be installed in the specified install location.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_MEDIA_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package couldn't be installed in the specified install location because the media\n     * is not available.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_VERIFICATION_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package couldn't be installed because the verification timed out.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_VERIFICATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package couldn't be installed because the verification did not succeed.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_PACKAGE_CHANGED",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the package changed from what the calling program expected.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_UID_CHANGED",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package is assigned a different UID than it previously held.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_VERSION_DOWNGRADE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package has an older version code than the currently installed package.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the old package has target SDK high enough to support runtime permission and the new\n     * package has target SDK low enough to not support runtime permissions.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_SANDBOX_VERSION_DOWNGRADE",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package attempts to downgrade the target sandbox version of the app.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_MISSING_SPLIT",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package requires at least one split and it was not provided.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_DEPRECATED_SDK_VERSION",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package targets a deprecated SDK version.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_NOT_APK",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser was given a path that is not a\n     * file, or does not end with the expected '.apk' extension.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_BAD_MANIFEST",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser was unable to retrieve the\n     * AndroidManifest.xml file.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser encountered an unexpected\n     * exception.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_NO_CERTIFICATES",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser did not find any certificates in\n     * the .apk.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser found inconsistent certificates on\n     * the files in the .apk.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser encountered a\n     * CertificateEncodingException in one of the files in the .apk.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser encountered a bad or missing\n     * package name in the manifest.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: tthis is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser encountered a bad shared user id\n     * name in the manifest.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_MANIFEST_MALFORMED",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser encountered some structural\n     * problem in the manifest.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_MANIFEST_EMPTY",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the parser did not find any actionable tags\n     * (instrumentation or application) in the manifest.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because of system issues.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_USER_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because the user is restricted from installing apps.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_DUPLICATE_PERMISSION",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because it is attempting to define a permission that is already defined by some existing\n     * package.\n     * <p>\n     * The package name of the app which has already defined the permission is passed to a\n     * {@link PackageInstallObserver}, if any, as the {@link #EXTRA_FAILURE_EXISTING_PACKAGE} string\n     * extra; and the name of the permission being redefined is passed in the\n     * {@link #EXTRA_FAILURE_EXISTING_PERMISSION} string extra.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_FAILURE_EXISTING_PACKAGE", "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS", "android.app.PackageInstallObserver", "#EXTRA_FAILURE_EXISTING_PERMISSION" ]
  }, {
    "name" : "INSTALL_FAILED_NO_MATCHING_ABIS",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because its packaged native code did not match any of the ABIs supported by the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "NO_NATIVE_LIBRARIES",
    "type" : "int",
    "comment" : "\n     * Internal return code for NativeLibraryHelper methods to indicate that the package\n     * being processed did not contain any native code. This is placed here only so that\n     * it can belong to the same value space as the other install failure codes.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_ABORTED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_SESSION_INVALID",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: install type is incompatible with some other\n     * installation flags supplied for the operation; or other circumstances such as trying\n     * to upgrade a system app via an Incremental or instant app install.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_BAD_DEX_METADATA",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the dex metadata file is invalid or\n     * if there was no matching apk file for a dex metadata file.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_BAD_SIGNATURE",
    "type" : "int",
    "comment" : "\n     * Installation parse return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if there is any signature problem.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_OTHER_STAGED_SESSION_IN_PROGRESS",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: a new staged session was attempted to be committed while\n     * there is already one in-progress or new session has package that is already staged.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_MULTIPACKAGE_INCONSISTENCY",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: one of the child sessions does not match the parent session\n     * in respect to staged or rollback enabled parameters.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_WRONG_INSTALLED_VERSION",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: the required installed version code\n     * does not match the currently installed package version code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_PROCESS_NOT_DEFINED",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package failed because it contains a request to use a process that was not\n     * explicitly defined as part of its &lt;processes&gt; tag.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_RESOURCES_ARSC_COMPRESSED",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: the {@code resources.arsc} of one of the APKs being\n     * installed is compressed or not aligned on a 4-byte boundary. Resource tables that cannot be\n     * memory mapped exert excess memory pressure on the system and drastically slow down\n     * construction of {@link Resources} objects.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.res.Resources" ]
  }, {
    "name" : "INSTALL_PARSE_FAILED_SKIPPED",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: the package was skipped and should be ignored.\n     *\n     * The reason for the skip is undefined.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_DUPLICATE_PERMISSION_GROUP",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because it is attempting to define a permission group that is already defined by some\n     * existing package.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_BAD_PERMISSION_GROUP",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: this is passed in the\n     * {@link PackageInstaller#EXTRA_LEGACY_STATUS} if the system failed to install the package\n     * because it is attempting to define a permission in a group that does not exists or that is\n     * defined by an packages with an incompatible certificate.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_ACTIVATION_FAILED",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: an error occurred during the activation phase of this\n     * session.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_PRE_APPROVAL_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: requesting user pre-approval is currently unavailable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_FAILED_SHARED_LIBRARY_BAD_CERTIFICATE_DIGEST",
    "type" : "int",
    "comment" : "\n     * Installation return code: this is passed in the {@link PackageInstaller#EXTRA_LEGACY_STATUS}\n     * if the new package declares bad certificate digest for a shared library in the package\n     * manifest.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageInstaller#EXTRA_LEGACY_STATUS" ]
  }, {
    "name" : "INSTALL_FAILED_MULTI_ARCH_NOT_MATCH_ALL_NATIVE_ABIS",
    "type" : "int",
    "comment" : "\n     * Installation failed return code: if the system failed to install the package that\n     * {@link android.R.attr#multiArch} is true in its manifest because its packaged\n     * native code did not match all of the natively ABIs supported by the system.\n     *\n     * @hide\n     ",
    "links" : [ "android.R.attr#multiArch" ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_UNSET",
    "type" : "int",
    "comment" : "\n     * No aspect ratio override has been set by user.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_SPLIT_SCREEN",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to split screen aspect ratio. This is adjusted to\n     * half of the screen without the split screen divider.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_DISPLAY_SIZE",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to the aspect ratio of the device display size.\n     * This will be the portrait aspect ratio of the device if the app has fixed portrait\n     * orientation or the landscape aspect ratio of the device if the app has fixed landscape\n     * orientation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_4_3",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to 4:3 min aspect ratio\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_16_9",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to 16:9 min aspect ratio\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_3_2",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to 3:2 min aspect ratio\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_FULLSCREEN",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user forces app to fullscreen\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_MIN_ASPECT_RATIO_APP_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Aspect ratio override code: user sets to app's default aspect ratio.\n     * This resets both the user-forced aspect ratio, and the device manufacturer\n     * per-app override {@link ActivityInfo#OVERRIDE_ANY_ORIENTATION_TO_USER}.\n     * It is different from {@link #USER_MIN_ASPECT_RATIO_UNSET} as the latter may\n     * apply the device manufacturer per-app orientation override if any,\n     * @hide\n     ",
    "links" : [ "android.content.pm.ActivityInfo#OVERRIDE_ANY_ORIENTATION_TO_USER", "#USER_MIN_ASPECT_RATIO_UNSET" ]
  }, {
    "name" : "DELETE_KEEP_DATA",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #deletePackage} to indicate that you don't want to delete the\n     * package's data directory.\n     *\n     * @hide\n     ",
    "links" : [ "#deletePackage" ]
  }, {
    "name" : "DELETE_ALL_USERS",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #deletePackage} to indicate that you want the\n     * package deleted for all users.\n     *\n     * @hide\n     ",
    "links" : [ "#deletePackage" ]
  }, {
    "name" : "DELETE_SYSTEM_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #deletePackage} to indicate that, if you are calling\n     * uninstall on a system that has been updated, then don't do the normal process\n     * of uninstalling the update and rolling back to the older system version (which\n     * needs to happen for all users); instead, just mark the app as uninstalled for\n     * the current user.\n     *\n     * @hide\n     ",
    "links" : [ "#deletePackage" ]
  }, {
    "name" : "DELETE_DONT_KILL_APP",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #deletePackage} to indicate that, if you are calling\n     * uninstall on a package that is replaced to provide new feature splits, the\n     * existing application should not be killed during the removal process.\n     *\n     * @hide\n     ",
    "links" : [ "#deletePackage" ]
  }, {
    "name" : "DELETE_ARCHIVE",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link PackageInstaller#uninstall(VersionedPackage, int, IntentSender)} to\n     * indicate that the deletion is an archival. This\n     * flag is only for internal usage as part of\n     * {@link PackageInstaller#requestArchive}.\n     ",
    "links" : [ "android.content.pm.PackageInstaller#uninstall(VersionedPackage", "android.content.pm.PackageInstaller#requestArchive" ]
  }, {
    "name" : "DELETE_CHATTY",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #deletePackage} to indicate that package deletion\n     * should be chatty.\n     *\n     * @hide\n     ",
    "links" : [ "#deletePackage" ]
  }, {
    "name" : "DELETE_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * Return code for when package deletion succeeds. This is passed to the\n     * {@link IPackageDeleteObserver} if the system succeeded in deleting the\n     * package.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * for an unspecified reason.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_DEVICE_POLICY_MANAGER",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * because it is the active DevicePolicy manager.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_USER_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * since the user is restricted.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_OWNER_BLOCKED",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * because a profile or device owner has marked the package as\n     * uninstallable.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_ABORTED",
    "type" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "DELETE_FAILED_USED_SHARED_LIBRARY",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * because the packge is a shared library used by other installed packages.\n     * {@hide} ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_APP_PINNED",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * because there is an app pinned.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver" ]
  }, {
    "name" : "DELETE_FAILED_FOR_CHILD_PROFILE",
    "type" : "int",
    "comment" : "\n     * Deletion failed return code: this is passed to the\n     * {@link IPackageDeleteObserver} if the system failed to delete the package\n     * for any child profile with {@link UserProperties#getDeleteAppWithParent()} as true.\n     * @hide\n     ",
    "links" : [ "IPackageDeleteObserver", "android.content.pm.UserProperties#getDeleteAppWithParent()" ]
  }, {
    "name" : "MOVE_SUCCEEDED",
    "type" : "int",
    "comment" : "\n     * Return code that is passed to the {@link IPackageMoveObserver} when the\n     * package has been successfully moved by the system.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_INSUFFICIENT_STORAGE",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} when the\n     * package hasn't been successfully moved by the system because of\n     * insufficient memory on specified media.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_DOESNT_EXIST",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package doesn't exist.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_SYSTEM_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package cannot be moved since its a system package.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_INVALID_LOCATION",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package cannot be moved to the specified location.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_INTERNAL_ERROR",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package cannot be moved to the specified location.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_OPERATION_PENDING",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package already has an operation pending in the queue.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_DEVICE_ADMIN",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if the\n     * specified package cannot be moved since it contains a device admin.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_3RD_PARTY_NOT_ALLOWED_ON_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Error code that is passed to the {@link IPackageMoveObserver} if system does not allow\n     * non-system apps to be moved to internal storage.\n     *\n     * @hide\n     ",
    "links" : [ "IPackageMoveObserver" ]
  }, {
    "name" : "MOVE_FAILED_LOCKED_USER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "MOVE_INTERNAL",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #movePackage} to indicate that\n     * the package should be moved to internal storage if its\n     * been installed on external media.\n     * @hide\n     ",
    "links" : [ "#movePackage" ]
  }, {
    "name" : "MOVE_EXTERNAL_MEDIA",
    "type" : "int",
    "comment" : "\n     * Flag parameter for {@link #movePackage} to indicate that\n     * the package should be moved to external media.\n     * @hide\n     ",
    "links" : [ "#movePackage" ]
  }, {
    "name" : "EXTRA_MOVE_ID",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_PACKAGE_MONITOR_CALLBACK_RESULT",
    "type" : "String",
    "comment" : "\n     * Extra field name for notifying package change event. Currently, it is used by PackageMonitor.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VERIFICATION_ALLOW_WITHOUT_SUFFICIENT",
    "type" : "int",
    "comment" : "\n     * Usable by the required verifier as the {@code verificationCode} argument\n     * for {@link PackageManager#verifyPendingInstall} to indicate that it will\n     * allow the installation to proceed without any of the optional verifiers\n     * needing to vote.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#verifyPendingInstall" ]
  }, {
    "name" : "VERIFICATION_ALLOW",
    "type" : "int",
    "comment" : "\n     * Used as the {@code verificationCode} argument for\n     * {@link PackageManager#verifyPendingInstall} to indicate that the calling\n     * package verifier allows the installation to proceed.\n     ",
    "links" : [ "android.content.pm.PackageManager#verifyPendingInstall" ]
  }, {
    "name" : "VERIFICATION_REJECT",
    "type" : "int",
    "comment" : "\n     * Used as the {@code verificationCode} argument for\n     * {@link PackageManager#verifyPendingInstall} to indicate the calling\n     * package verifier does not vote to allow the installation to proceed.\n     ",
    "links" : [ "android.content.pm.PackageManager#verifyPendingInstall" ]
  }, {
    "name" : "INTENT_FILTER_VERIFICATION_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Used as the {@code verificationCode} argument for\n     * {@link PackageManager#verifyIntentFilter} to indicate that the calling\n     * IntentFilter Verifier confirms that the IntentFilter is verified.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationManager", "android.content.pm.PackageManager#verifyIntentFilter" ]
  }, {
    "name" : "INTENT_FILTER_VERIFICATION_FAILURE",
    "type" : "int",
    "comment" : "\n     * Used as the {@code verificationCode} argument for\n     * {@link PackageManager#verifyIntentFilter} to indicate that the calling\n     * IntentFilter Verifier confirms that the IntentFilter is NOT verified.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationManager", "android.content.pm.PackageManager#verifyIntentFilter" ]
  }, {
    "name" : "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Internal status code to indicate that an IntentFilter verification result is not specified.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK",
    "type" : "int",
    "comment" : "\n     * Used as the {@code status} argument for\n     * {@link #updateIntentVerificationStatusAsUser} to indicate that the User\n     * will always be prompted the Intent Disambiguation Dialog if there are two\n     * or more Intent resolved for the IntentFilter's domain(s).\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "#updateIntentVerificationStatusAsUser", "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS",
    "type" : "int",
    "comment" : "\n     * Used as the {@code status} argument for\n     * {@link #updateIntentVerificationStatusAsUser} to indicate that the User\n     * will never be prompted the Intent Disambiguation Dialog if there are two\n     * or more resolution of the Intent. The default App for the domain(s)\n     * specified in the IntentFilter will also ALWAYS be used.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "#updateIntentVerificationStatusAsUser", "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER",
    "type" : "int",
    "comment" : "\n     * Used as the {@code status} argument for\n     * {@link #updateIntentVerificationStatusAsUser} to indicate that the User\n     * may be prompted the Intent Disambiguation Dialog if there are two or more\n     * Intent resolved. The default App for the domain(s) specified in the\n     * IntentFilter will also NEVER be presented to the User.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "#updateIntentVerificationStatusAsUser", "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS_ASK",
    "type" : "int",
    "comment" : "\n     * Used as the {@code status} argument for\n     * {@link #updateIntentVerificationStatusAsUser} to indicate that this app\n     * should always be considered as an ambiguous candidate for handling the\n     * matching Intent even if there are other candidate apps in the \"always\"\n     * state. Put another way: if there are any 'always ask' apps in a set of\n     * more than one candidate app, then a disambiguation is *always* presented\n     * even if there is another candidate app with the 'always' state.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "#updateIntentVerificationStatusAsUser", "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "APP_METADATA_SOURCE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the app metadata does not exist or its source is unknown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APP_METADATA_SOURCE_APK",
    "type" : "int",
    "comment" : "\n     * Indicates that the app metadata is provided by the APK itself.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APP_METADATA_SOURCE_INSTALLER",
    "type" : "int",
    "comment" : "\n     * Indicates that the app metadata is provided by the installer that installed the app.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APP_METADATA_SOURCE_SYSTEM_IMAGE",
    "type" : "int",
    "comment" : "\n     * Indicates that the app metadata is provided as part of the system image.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAXIMUM_VERIFICATION_TIMEOUT",
    "type" : "long",
    "comment" : "\n     * Can be used as the {@code millisecondsToDelay} argument for\n     * {@link PackageManager#extendVerificationTimeout}. This is the\n     * maximum time {@code PackageManager} waits for the verification\n     * agent to return (in milliseconds).\n     ",
    "links" : [ "android.content.pm.PackageManager#extendVerificationTimeout" ]
  }, {
    "name" : "FEATURE_AUDIO_LOW_LATENCY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device's\n     * audio pipeline is low-latency, more suitable for audio applications sensitive to delays or\n     * lag in sound input or output.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_AUDIO_OUTPUT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes at least one form of audio\n     * output, as defined in the Android Compatibility Definition Document (CDD)\n     * <a href=\"https://source.android.com/compatibility/android-cdd#7_8_audio\">section 7.8 Audio</a>.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_AUDIO_PRO",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has professional audio level of functionality and performance.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_AUDIO_SPATIAL_HEADTRACKING_LOW_LATENCY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}\n     * which indicates whether head tracking for spatial audio operates with low-latency,\n     * as defined by the CDD criteria for the feature.\n     *\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_BLUETOOTH",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device is capable of communicating with\n     * other devices via Bluetooth.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_BLUETOOTH_LE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device is capable of communicating with\n     * other devices via Bluetooth Low Energy radio.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a camera facing away\n     * from the screen.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_AUTOFOCUS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's camera supports auto-focus.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_ANY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has at least one camera pointing in\n     * some direction, or can support an external camera being connected to it.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_EXTERNAL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device can support having an external camera connected to it.\n     * The external camera may not always be connected or available to applications to use.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_FLASH",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's camera supports flash.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_FRONT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a front facing camera.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_LEVEL_FULL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: At least one\n     * of the cameras on the device supports the\n     * {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL full hardware}\n     * capability level.\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: At least one\n     * of the cameras on the device supports the\n     * {@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR manual sensor}\n     * capability level.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR" ]
  }, {
    "name" : "FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: At least one\n     * of the cameras on the device supports the\n     * {@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING manual post-processing}\n     * capability level.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_POST_PROCESSING" ]
  }, {
    "name" : "FEATURE_CAMERA_CAPABILITY_RAW",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: At least one\n     * of the cameras on the device supports the\n     * {@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW RAW}\n     * capability level.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW" ]
  }, {
    "name" : "FEATURE_CAMERA_AR",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: At least one\n     * of the cameras on the device supports the\n     * {@link android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKING\n     * MOTION_TRACKING} capability level.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MOTION_TRACKINGMOTION_TRACKING" ]
  }, {
    "name" : "FEATURE_CAMERA_CONCURRENT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's main front and back cameras can stream\n     * concurrently as described in {@link\n     * android.hardware.camera2.CameraManager#getConcurrentCameraIds()}.\n     * </p>\n     * <p>While {@link android.hardware.camera2.CameraManager#getConcurrentCameraIds()} and\n     * associated APIs are only available on API level 30 or newer, this feature flag may be\n     * advertised by devices on API levels below 30. If present on such a device, the same\n     * guarantees hold: The main front and main back camera can be used at the same time, with\n     * guaranteed stream configurations as defined in the table for concurrent streaming at\n     * {@link android.hardware.camera2.CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)}.\n     * </p>\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.hardware.camera2.CameraManager#getConcurrentCameraIds()", "android.hardware.camera2.CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)" ]
  }, {
    "name" : "FEATURE_CONSUMER_IR",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device is capable of communicating with\n     * consumer IR devices.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CONTEXT_HUB",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports a Context Hub, used to expose the\n     * functionalities in {@link android.hardware.location.ContextHubManager}.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "android.hardware.location.ContextHubManager", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CTS",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_CAR_TEMPLATES_HOST",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * is opted-in to render the application using Automotive App Host\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CAR_SPLITSCREEN_MULTITASKING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:If this\n     * feature is supported, the device should also declare {@link #FEATURE_AUTOMOTIVE} and show\n     * a UI that can display multiple tasks at the same time on a single display. The user can\n     * perform multiple actions on different tasks simultaneously. Apps open in split screen mode\n     * by default, instead of full screen. Unlike Android's multi-window mode, where users can\n     * choose how to display apps, the device determines how apps are shown.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_AUTOMOTIVE" ]
  }, {
    "name" : "FEATURE_CAR_DISPLAY_COMPATIBILITY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This device is capable of launching apps in automotive display\n     * compatibility mode.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_IDENTITY_CREDENTIAL_HARDWARE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the device supports\n     * {@link android.security.identity.IdentityCredentialStore} implemented in secure hardware\n     * at the given feature version.\n     *\n     * <p>Known feature versions include:\n     * <ul>\n     * <li><code>202009</code>: corresponds to the features included in the Identity Credential\n     * API shipped in Android 11.\n     * <li><code>202101</code>: corresponds to the features included in the Identity Credential\n     * API shipped in Android 12.\n     * <li><code>202201</code>: corresponds to the features included in the Identity Credential\n     * API shipped in Android 13.\n     * </ul>\n     ",
    "links" : [ "#getSystemAvailableFeatures", "android.security.identity.IdentityCredentialStore", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the device supports\n     * {@link android.security.identity.IdentityCredentialStore} implemented in secure hardware\n     * with direct access at the given feature version.\n     * See {@link #FEATURE_IDENTITY_CREDENTIAL_HARDWARE} for known feature versions.\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#FEATURE_IDENTITY_CREDENTIAL_HARDWARE", "android.security.identity.IdentityCredentialStore", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_LOCATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports one or more methods of\n     * reporting current location.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LOCATION_GPS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a Global Positioning System\n     * receiver and can report precise location.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LOCATION_NETWORK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device can report location with coarse\n     * accuracy using a network-based geolocation system.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FELICA",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports FeliCa communication, which is based on\n     * ISO/IEC 18092 and JIS X 6319-4.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_RAM_LOW",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's\n     * {@link ActivityManager#isLowRamDevice() ActivityManager.isLowRamDevice()} method returns\n     * true.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.app.ActivityManager#isLowRamDevice()" ]
  }, {
    "name" : "FEATURE_RAM_NORMAL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's\n     * {@link ActivityManager#isLowRamDevice() ActivityManager.isLowRamDevice()} method returns\n     * false.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.app.ActivityManager#isLowRamDevice()" ]
  }, {
    "name" : "FEATURE_MICROPHONE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device can record audio via a\n     * microphone.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device can communicate using Near-Field\n     * Communications (NFC).\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_HCE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports host-\n     * based NFC card emulation.\n     *\n     * TODO remove when depending apps have moved to new constant.\n     * @hide\n     * @deprecated\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_HOST_CARD_EMULATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports host-\n     * based NFC card emulation.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_HOST_CARD_EMULATION_NFCF",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports host-\n     * based NFC-F card emulation.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports uicc-\n     * based NFC card emulation.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports eSE-\n     * based NFC card emulation.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_CHARGING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports NFC charging.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_BEAM",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The Beam API is enabled on the device.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_NFC_ANY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports any\n     * one of the {@link #FEATURE_NFC}, {@link #FEATURE_NFC_HOST_CARD_EMULATION},\n     * {@link #FEATURE_NFC_HOST_CARD_EMULATION_NFCF}, or {@link #FEATURE_NFC_CHARGING} features.\n     *\n     * @hide\n     ",
    "links" : [ "#FEATURE_NFC_CHARGING", "#hasSystemFeature", "#FEATURE_NFC_HOST_CARD_EMULATION", "#getSystemAvailableFeatures", "#FEATURE_NFC", "#FEATURE_NFC_HOST_CARD_EMULATION_NFCF" ]
  }, {
    "name" : "FEATURE_SDK_SANDBOX_WORK_PROFILE_INSTALL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device contains support for installing SDKs to a work\n     * profile.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SE_OMAPI_UICC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Open Mobile API capable UICC-based secure\n     * elements.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SE_OMAPI_ESE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Open Mobile API capable eSE-based secure\n     * elements.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SE_OMAPI_SD",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Open Mobile API capable SD-based secure\n     * elements.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SECURITY_MODEL_COMPATIBLE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device is\n     * compatible with Android’s security model.\n     *\n     * <p>See sections 2 and 9 in the\n     * <a href=\"https://source.android.com/compatibility/android-cdd\">Android CDD</a> for more\n     * details.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_OPENGLES_EXTENSION_PACK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports the OpenGL ES\n     * <a href=\"http://www.khronos.org/registry/gles/extensions/ANDROID/ANDROID_extension_pack_es31a.txt\">\n     * Android Extension Pack</a>.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_VIRTUALIZATION_FRAMEWORK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures()} and {@link #hasSystemFeature(String)}.\n     * This feature indicates whether device supports\n     * <a href=\"https://source.android.com/docs/core/virtualization\">Android Virtualization Framework</a>.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature(String)", "#getSystemAvailableFeatures()" ]
  }, {
    "name" : "FEATURE_VULKAN_HARDWARE_LEVEL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the Vulkan\n     * implementation on this device is hardware accelerated, and the Vulkan native API will\n     * enumerate at least one {@code VkPhysicalDevice}, and the feature version will indicate what\n     * level of optional hardware features limits it supports.\n     * <p>\n     * Level 0 includes the base Vulkan requirements as well as:\n     * <ul><li>{@code VkPhysicalDeviceFeatures::textureCompressionETC2}</li></ul>\n     * <p>\n     * Level 1 additionally includes:\n     * <ul>\n     * <li>{@code VkPhysicalDeviceFeatures::fullDrawIndexUint32}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::imageCubeArray}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::independentBlend}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::geometryShader}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::tessellationShader}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::sampleRateShading}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::textureCompressionASTC_LDR}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::fragmentStoresAndAtomics}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::shaderImageGatherExtended}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::shaderUniformBufferArrayDynamicIndexing}</li>\n     * <li>{@code VkPhysicalDeviceFeatures::shaderSampledImageArrayDynamicIndexing}</li>\n     * </ul>\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_VULKAN_HARDWARE_COMPUTE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the Vulkan\n     * implementation on this device is hardware accelerated, and the Vulkan native API will\n     * enumerate at least one {@code VkPhysicalDevice}, and the feature version will indicate what\n     * level of optional compute features that device supports beyond the Vulkan 1.0 requirements.\n     * <p>\n     * Compute level 0 indicates:\n     * <ul>\n     * <li>The {@code VK_KHR_variable_pointers} extension and\n     *     {@code VkPhysicalDeviceVariablePointerFeaturesKHR::variablePointers} feature are\n           supported.</li>\n     * <li>{@code VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers} is at least 16.</li>\n     * </ul>\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_VULKAN_HARDWARE_VERSION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the Vulkan\n     * implementation on this device is hardware accelerated, and the feature version will indicate\n     * the highest {@code VkPhysicalDeviceProperties::apiVersion} supported by the physical devices\n     * that support the hardware level indicated by {@link #FEATURE_VULKAN_HARDWARE_LEVEL}. The\n     * feature version uses the same encoding as Vulkan version numbers:\n     * <ul>\n     * <li>Major version number in bits 31-22</li>\n     * <li>Minor version number in bits 21-12</li>\n     * <li>Patch version number in bits 11-0</li>\n     * </ul>\n     * A version of 1.1.0 or higher also indicates:\n     * <ul>\n     * <li>The {@code VK_ANDROID_external_memory_android_hardware_buffer} extension is\n     *     supported.</li>\n     * <li>{@code SYNC_FD} external semaphore and fence handles are supported.</li>\n     * <li>{@code VkPhysicalDeviceSamplerYcbcrConversionFeatures::samplerYcbcrConversion} is\n     *     supported.</li>\n     * </ul>\n     * A subset of devices that support Vulkan 1.1 do so via software emulation. For more\n     * information, see\n     * <a href=\"{@docRoot}ndk/guides/graphics/design-notes\">Vulkan Design Guidelines</a>.\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#FEATURE_VULKAN_HARDWARE_LEVEL", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_VULKAN_DEQP_LEVEL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the feature version\n     * specifies a date such that the device is known to pass the Vulkan dEQP test suite associated\n     * with that date.  The date is encoded as follows:\n     * <ul>\n     * <li>Year in bits 31-16</li>\n     * <li>Month in bits 15-8</li>\n     * <li>Day in bits 7-0</li>\n     * </ul>\n     * <p>\n     * Example: 2019-03-01 is encoded as 0x07E30301, and would indicate that the device passes the\n     * Vulkan dEQP test suite version that was current on 2019-03-01.\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_OPENGLES_DEQP_LEVEL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the feature version\n     * specifies a date such that the device is known to pass the OpenGLES dEQP test suite\n     * associated with that date.  The date is encoded as follows:\n     * <ul>\n     * <li>Year in bits 31-16</li>\n     * <li>Month in bits 15-8</li>\n     * <li>Day in bits 7-0</li>\n     * </ul>\n     * <p>\n     * Example: 2021-03-01 is encoded as 0x07E50301, and would indicate that the device passes the\n     * OpenGL ES dEQP test suite version that was current on 2021-03-01.\n     ",
    "links" : [ "#getSystemAvailableFeatures", "#hasSystemFeature(String" ]
  }, {
    "name" : "FEATURE_BROADCAST_RADIO",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes broadcast radio tuner.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SECURE_LOCK_SCREEN",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a secure implementation of keyguard, meaning the\n     * device supports PIN, pattern and password as defined in Android CDD\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_ACCELEROMETER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes an accelerometer.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_BAROMETER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a barometer (air\n     * pressure sensor.)\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_COMPASS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a magnetometer (compass).\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_GYROSCOPE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a gyroscope.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a limited axes accelerometer.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a limited axes gyroscope.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes an uncalibrated limited axes accelerometer.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes an uncalibrated limited axes gyroscope.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_LIGHT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a light sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_PROXIMITY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a proximity sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_STEP_COUNTER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a hardware step counter.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_STEP_DETECTOR",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a hardware step detector.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_HEART_RATE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a heart rate monitor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_HEART_RATE_ECG",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The heart rate sensor on this device is an Electrocardiogram.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_RELATIVE_HUMIDITY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a relative humidity sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_AMBIENT_TEMPERATURE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes an ambient temperature sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_HINGE_ANGLE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a hinge angle sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_HEADING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device includes a heading sensor.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports exposing head tracker sensors from peripheral\n     * devices via the dynamic sensors API.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_HIFI_SENSORS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports high fidelity sensor processing\n     * capabilities.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_ASSIST_GESTURE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports a hardware mechanism for invoking an assist gesture.\n     * @see android.provider.Settings.Secure#ASSIST_GESTURE_ENABLED\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TELEPHONY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a telephony radio with data\n     * communication support.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TELEPHONY_CDMA",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a CDMA telephony stack.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY} has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY" ]
  }, {
    "name" : "FEATURE_TELEPHONY_GSM",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has a GSM telephony stack.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY} has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY" ]
  }, {
    "name" : "FEATURE_TELEPHONY_CARRIERLOCK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports telephony carrier restriction mechanism.\n     *\n     * <p>Devices declaring this feature must have an implementation of the\n     * {@link android.telephony.TelephonyManager#getAllowedCarriers} and\n     * {@link android.telephony.TelephonyManager#setAllowedCarriers}.\n     *\n     * This feature should only be defined if {@link #FEATURE_TELEPHONY_SUBSCRIPTION}\n     * has been defined.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "android.telephony.TelephonyManager#setAllowedCarriers", "#getSystemAvailableFeatures", "android.telephony.TelephonyManager#getAllowedCarriers" ]
  }, {
    "name" : "FEATURE_TELEPHONY_EUICC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports embedded subscriptions on eUICCs.\n     *\n     * This feature should only be defined if {@link #FEATURE_TELEPHONY_SUBSCRIPTION}\n     * has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TELEPHONY_EUICC_MEP",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports multiple enabled profiles on eUICCs.\n     *\n     * <p>Devices declaring this feature must have an implementation of the\n     *  {@link UiccCardInfo#getPorts},\n     *  {@link UiccCardInfo#isMultipleEnabledProfilesSupported} and\n     *  {@link android.telephony.euicc.EuiccManager#switchToSubscription (with portIndex)}.\n     *\n     * This feature should only be defined if {@link #FEATURE_TELEPHONY_EUICC} have been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.telephony.UiccCardInfo#getPorts", "#FEATURE_TELEPHONY_EUICC", "android.telephony.euicc.EuiccManager#switchToSubscription", "android.telephony.UiccCardInfo#isMultipleEnabledProfilesSupported" ]
  }, {
    "name" : "FEATURE_TELEPHONY_MBMS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports cell-broadcast reception using the MBMS APIs.\n     *\n     * <p>This feature should only be defined if both {@link #FEATURE_TELEPHONY_SUBSCRIPTION}\n     * and {@link #FEATURE_TELEPHONY_RADIO_ACCESS} have been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_RADIO_ACCESS" ]
  }, {
    "name" : "FEATURE_TELEPHONY_IMS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports attaching to IMS implementations using the ImsService API in telephony.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY_DATA} has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_DATA" ]
  }, {
    "name" : "FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports a single IMS registration as defined by carrier networks in the IMS service\n     * implementation using the {@link ImsService} API, {@link GbaService} API, and IRadio 1.6 HAL.\n     * <p>\n     * When set, the device must fully support the following APIs for an application to implement\n     * IMS single registration:\n     * <ul>\n     * <li> Updating RCS provisioning status using the {@link ProvisioningManager} API to supply an\n     * RCC.14 defined XML and notify IMS applications of Auto Configuration Server (ACS) or\n     * proprietary server provisioning updates.</li>\n     * <li>Opening a delegate in the device IMS service to forward SIP traffic to the carrier's\n     * network using the {@link SipDelegateManager} API</li>\n     * <li>Listening to EPS dedicated bearer establishment via the\n     * {@link ConnectivityManager#registerQosCallback}\n     * API to indicate to the application when to start/stop media traffic.</li>\n     * <li>Implementing Generic Bootstrapping Architecture (GBA) and providing the associated\n     * authentication keys to applications\n     * requesting this information via the {@link TelephonyManager#bootstrapAuthenticationRequest}\n     * API</li>\n     * <li>Implementing RCS User Capability Exchange using the {@link RcsUceAdapter} API</li>\n     * </ul>\n     * <p>\n     * This feature should only be defined if {@link #FEATURE_TELEPHONY_IMS} is also defined.\n     * @hide\n     ",
    "links" : [ "android.telephony.ims.SipDelegateManager", "#hasSystemFeature", "android.telephony.ims.RcsUceAdapter", "#FEATURE_TELEPHONY_IMS", "#getSystemAvailableFeatures", "android.telephony.gba.GbaService", "android.net.ConnectivityManager#registerQosCallback", "android.telephony.TelephonyManager#bootstrapAuthenticationRequest", "android.telephony.ims.ImsService", "android.telephony.ims.ProvisioningManager" ]
  }, {
    "name" : "FEATURE_TELECOM",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telecom Service APIs.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TELEPHONY_CALLING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for calling service.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY_RADIO_ACCESS},\n     * {@link #FEATURE_TELEPHONY_SUBSCRIPTION}, and {@link #FEATURE_TELECOM} have been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_RADIO_ACCESS", "#FEATURE_TELECOM" ]
  }, {
    "name" : "FEATURE_TELEPHONY_DATA",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for data service.\n     *\n     * <p>This feature should only be defined if both {@link #FEATURE_TELEPHONY_SUBSCRIPTION}\n     * and {@link #FEATURE_TELEPHONY_RADIO_ACCESS} have been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_RADIO_ACCESS" ]
  }, {
    "name" : "FEATURE_TELEPHONY_MESSAGING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for SMS and MMS.\n     *\n     * <p>This feature should only be defined if both {@link #FEATURE_TELEPHONY_SUBSCRIPTION}\n     * and {@link #FEATURE_TELEPHONY_RADIO_ACCESS} have been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEPHONY_SUBSCRIPTION", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_RADIO_ACCESS" ]
  }, {
    "name" : "FEATURE_TELEPHONY_RADIO_ACCESS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for the radio access.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY} has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY" ]
  }, {
    "name" : "FEATURE_TELEPHONY_SATELLITE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for Satellite communication.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY_MESSAGING}\n     * has been defined.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY_MESSAGING" ]
  }, {
    "name" : "FEATURE_TELEPHONY_SUBSCRIPTION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports Telephony APIs for the subscription.\n     *\n     * <p>This feature should only be defined if {@link #FEATURE_TELEPHONY} has been defined.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELEPHONY" ]
  }, {
    "name" : "FEATURE_THREAD_NETWORK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device is capable of communicating with other devices via\n     * <a href=\"https://www.threadgroup.org\">Thread</a> networking protocol.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_UWB",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device is capable of communicating with\n     * other devices via ultra wideband.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_USB_HOST",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports connecting to USB devices\n     * as the USB host.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_USB_ACCESSORY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports connecting to USB accessories.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SIP",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The SIP API is enabled on the device.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SIP_VOIP",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports SIP-based VOIP.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CONNECTION_SERVICE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The Connection Service API is enabled on the device.\n     * @deprecated use {@link #FEATURE_TELECOM} instead.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_TELECOM" ]
  }, {
    "name" : "FEATURE_TOUCHSCREEN",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's display has a touch screen.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TOUCHSCREEN_MULTITOUCH",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's touch screen supports\n     * multitouch sufficient for basic two-finger gesture detection.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's touch screen is capable of\n     * tracking two or more fingers fully independently.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device's touch screen is capable of\n     * tracking a full hand of fingers fully independently -- that is, 5 or\n     * more simultaneous independent pointers.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FAKETOUCH",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device does not have a touch screen, but\n     * does support touch emulation for basic events. For instance, the\n     * device might use a mouse or remote control to drive a cursor, and\n     * emulate basic touch pointer events like down, up, drag, etc. All\n     * devices that support android.hardware.touchscreen or a sub-feature are\n     * presumed to also support faketouch.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device does not have a touch screen, but\n     * does support touch emulation for basic events that supports distinct\n     * tracking of two or more fingers.  This is an extension of\n     * {@link #FEATURE_FAKETOUCH} for input devices with this capability.  Note\n     * that unlike a distinct multitouch screen as defined by\n     * {@link #FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT}, these kinds of input\n     * devices will not actually provide full two-finger gestures since the\n     * input is being transformed to cursor movement on the screen.  That is,\n     * single finger gestures will move a cursor; two-finger swipes will\n     * result in single-finger touch events; other two-finger gestures will\n     * result in the corresponding two-finger touch event.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_FAKETOUCH", "#FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT" ]
  }, {
    "name" : "FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device does not have a touch screen, but\n     * does support touch emulation for basic events that supports tracking\n     * a hand of fingers (5 or more fingers) fully independently.\n     * This is an extension of\n     * {@link #FEATURE_FAKETOUCH} for input devices with this capability.  Note\n     * that unlike a multitouch screen as defined by\n     * {@link #FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND}, not all two finger\n     * gestures can be detected due to the limitations described for\n     * {@link #FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT}.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_FAKETOUCH", "#FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT", "#FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND" ]
  }, {
    "name" : "FEATURE_FINGERPRINT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has biometric hardware to detect a fingerprint.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FACE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has biometric hardware to perform face authentication.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_IRIS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device has biometric hardware to perform iris authentication.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SCREEN_PORTRAIT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports portrait orientation\n     * screens.  For backwards compatibility, you can assume that if neither\n     * this nor {@link #FEATURE_SCREEN_LANDSCAPE} is set then the device supports\n     * both portrait and landscape.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_SCREEN_LANDSCAPE", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SCREEN_LANDSCAPE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports landscape orientation\n     * screens.  For backwards compatibility, you can assume that if neither\n     * this nor {@link #FEATURE_SCREEN_PORTRAIT} is set then the device supports\n     * both portrait and landscape.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_SCREEN_PORTRAIT" ]
  }, {
    "name" : "FEATURE_LIVE_WALLPAPER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports live wallpapers.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_APP_WIDGETS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports app widgets.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CANT_SAVE_STATE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports the\n     * {@link android.R.attr#cantSaveState} API.\n     ",
    "links" : [ "#hasSystemFeature", "android.R.attr#cantSaveState", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_GAME_SERVICE",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports\n     * {@link android.service.games.GameService}.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.service.games.GameService" ]
  }, {
    "name" : "FEATURE_VOICE_RECOGNIZERS",
    "type" : "String",
    "comment" : "\n     * @hide\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports\n     * {@link android.service.voice.VoiceInteractionService} and\n     * {@link android.app.VoiceInteractor}.\n     ",
    "links" : [ "#hasSystemFeature", "android.service.voice.VoiceInteractionService", "#getSystemAvailableFeatures", "android.app.VoiceInteractor" ]
  }, {
    "name" : "FEATURE_HOME_SCREEN",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports a home screen that is replaceable\n     * by third party applications.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_INPUT_METHODS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports adding new input methods implemented\n     * with the {@link android.inputmethodservice.InputMethodService} API.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.inputmethodservice.InputMethodService" ]
  }, {
    "name" : "FEATURE_DEVICE_ADMIN",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports device policy enforcement via device admins.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LEANBACK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports leanback UI. This is\n     * typically used in a living room television experience, but is a software\n     * feature unlike {@link #FEATURE_TELEVISION}. Devices running with this\n     * feature will use resources associated with the \"television\" UI mode.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_TELEVISION", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LEANBACK_ONLY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports only leanback UI. Only\n     * applications designed for this experience should be run, though this is\n     * not enforced by the system.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LIVE_TV",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports live TV and can display\n     * contents from TV inputs implemented with the\n     * {@link android.media.tv.TvInputService} API.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.media.tv.TvInputService" ]
  }, {
    "name" : "FEATURE_WIFI",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports WiFi (802.11) networking.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WIFI_DIRECT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Wi-Fi Direct networking.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WIFI_AWARE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Wi-Fi Aware.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WIFI_PASSPOINT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Wi-Fi Passpoint and all\n     * Passpoint related APIs in {@link WifiManager} are supported. Refer to\n     * {@link WifiManager#addOrUpdatePasspointConfiguration} for more info.\n     ",
    "links" : [ "android.net.wifi.WifiManager#addOrUpdatePasspointConfiguration", "#hasSystemFeature", "android.net.wifi.WifiManager", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WIFI_RTT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports Wi-Fi RTT (IEEE 802.11mc).\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_LOWPAN",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports LoWPAN networking.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_AUTOMOTIVE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This is a device dedicated to showing UI\n     * on a vehicle headunit. A headunit here is defined to be inside a\n     * vehicle that may or may not be moving. A headunit uses either a\n     * primary display in the center console and/or additional displays in\n     * the instrument cluster or elsewhere in the vehicle. Headunit display(s)\n     * have limited size and resolution. The user will likely be focused on\n     * driving so limiting driver distraction is a primary concern. User input\n     * can be a variety of hard buttons, touch, rotary controllers and even mouse-\n     * like interfaces.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TELEVISION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This is a device dedicated to showing UI\n     * on a television.  Television here is defined to be a typical living\n     * room television experience: displayed on a big screen, where the user\n     * is sitting far away from it, and the dominant form of input will be\n     * something like a DPAD, not through touch or mouse.\n     * @deprecated use {@link #FEATURE_LEANBACK} instead.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_LEANBACK", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WATCH",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This is a device dedicated to showing UI\n     * on a watch. A watch here is defined to be a device worn on the body, perhaps on\n     * the wrist. The user is very close when interacting with the device.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_EMBEDDED",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This is a device for IoT and may not have an UI. An embedded\n     * device is defined as a full stack Android device with or without a display and no\n     * user-installable apps.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_PC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This is a device dedicated to be primarily used\n     * with keyboard, mouse or touchpad. This includes traditional desktop\n     * computers, laptops and variants such as convertibles or detachables.\n     * Due to the larger screen, the device will most likely use the\n     * {@link #FEATURE_FREEFORM_WINDOW_MANAGEMENT} feature as well.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "#FEATURE_FREEFORM_WINDOW_MANAGEMENT" ]
  }, {
    "name" : "FEATURE_PRINTING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports printing.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_COMPANION_DEVICE_SETUP",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports {@link android.companion.CompanionDeviceManager#associate associating}\n     * with devices via {@link android.companion.CompanionDeviceManager}.\n     ",
    "links" : [ "android.companion.CompanionDeviceManager#associate", "#hasSystemFeature", "android.companion.CompanionDeviceManager", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_BACKUP",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device can perform backup and restore operations on installed applications.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FREEFORM_WINDOW_MANAGEMENT",
    "type" : "String",
    "comment" : " com.android.internal.R.config_freeformWindowManagement to true in your configuration overlay.",
    "links" : [ ]
  }, {
    "name" : "FEATURE_PICTURE_IN_PICTURE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports picture-in-picture multi-window mode.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_EXPANDED_PICTURE_IN_PICTURE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports expanded picture-in-picture multi-window mode.\n     *\n     * @see android.app.PictureInPictureParams.Builder#setExpandedAspectRatio\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports running activities on secondary displays. Displays here\n     * refers to both physical and virtual displays. Disabling this feature can impact\n     * support for application projection use-cases and support for virtual devices\n     * on the device.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_MANAGED_USERS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports creating secondary users and managed profiles via\n     * {@link DevicePolicyManager}.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.app.admin.DevicePolicyManager" ]
  }, {
    "name" : "FEATURE_MANAGED_PROFILES",
    "type" : "String",
    "comment" : "\n     * @hide\n     * TODO: Remove after dependencies updated b/17392243\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_VERIFIED_BOOT",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports verified boot.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_SECURELY_REMOVES_USERS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports secure removal of users. When a user is deleted the data associated\n     * with that user is securely deleted and no longer available.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_FILE_BASED_ENCRYPTION",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_ADOPTABLE_STORAGE",
    "type" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_WEBVIEW",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has a full implementation of the android.webkit.* APIs. Devices\n     * lacking this feature will not have a functioning WebView implementation.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_ETHERNET",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This device supports ethernet.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_HDMI_CEC",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: This device supports HDMI-CEC.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_GAMEPAD",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has all of the inputs necessary to be considered a compatible game controller, or\n     * includes a compatible game controller in the box.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_MIDI",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has a full implementation of the android.media.midi.* APIs.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_VR_MODE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device implements an optimized mode for virtual reality (VR) applications that handles\n     * stereoscopic rendering of notifications, and disables most monocular system UI components\n     * while a VR application has user focus.\n     * Devices declaring this feature must include an application implementing a\n     * {@link android.service.vr.VrListenerService} that can be targeted by VR applications via\n     * {@link android.app.Activity#setVrModeEnabled}.\n     * @deprecated use {@link #FEATURE_VR_MODE_HIGH_PERFORMANCE} instead.\n     ",
    "links" : [ "#hasSystemFeature", "#FEATURE_VR_MODE_HIGH_PERFORMANCE", "#getSystemAvailableFeatures", "android.app.Activity#setVrModeEnabled", "android.service.vr.VrListenerService" ]
  }, {
    "name" : "FEATURE_VR_MODE_HIGH_PERFORMANCE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device implements an optimized mode for virtual reality (VR) applications that handles\n     * stereoscopic rendering of notifications, disables most monocular system UI components\n     * while a VR application has user focus and meets extra CDD requirements to provide a\n     * high-quality VR experience.\n     * Devices declaring this feature must include an application implementing a\n     * {@link android.service.vr.VrListenerService} that can be targeted by VR applications via\n     * {@link android.app.Activity#setVrModeEnabled}.\n     * and must meet CDD requirements to provide a high-quality VR experience.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.app.Activity#setVrModeEnabled", "android.service.vr.VrListenerService" ]
  }, {
    "name" : "FEATURE_AUTOFILL",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports autofill of user credentials, addresses, credit cards, etc\n     * via integration with {@link android.service.autofill.AutofillService autofill\n     * providers}.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.service.autofill.AutofillService" ]
  }, {
    "name" : "FEATURE_VR_HEADTRACKING",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device implements headtracking suitable for a VR device.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_HARDWARE_KEYSTORE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the device implements\n     * the Android Keystore backed by an isolated execution environment. The version indicates\n     * which features are implemented in the isolated execution environment:\n     * <ul>\n     * <li>300: Ability to include a second IMEI in the ID attestation record, see\n     * {@link android.app.admin.DevicePolicyManager#ID_TYPE_IMEI}.\n     * <li>200: Hardware support for Curve 25519 (including both Ed25519 signature generation and\n     * X25519 key agreement).\n     * <li>100: Hardware support for ECDH (see {@link javax.crypto.KeyAgreement}) and support\n     * for app-generated attestation keys (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias(String)}).\n     * <li>41: Hardware enforcement of device-unlocked keys (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setUnlockedDeviceRequired(boolean)}).\n     * <li>40: Support for wrapped key import (see {@link\n     * android.security.keystore.WrappedKeyEntry}), optional support for ID attestation (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setDevicePropertiesAttestationIncluded(boolean)}),\n     * attestation (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setAttestationChallenge(byte[])}),\n     * AES, HMAC, ECDSA and RSA support where the secret or private key never leaves secure\n     * hardware, and support for requiring user authentication before a key can be used.\n     * </ul>\n     * This feature version is guaranteed to be set for all devices launching with Android 12 and\n     * may be set on devices launching with an earlier version. If the feature version is set, it\n     * will at least have the value 40. If it's not set the device may have a version of\n     * hardware-backed keystore but it may not support all features listed above.\n     ",
    "links" : [ "android.security.keystore.KeyGenParameterSpec.Builder#setUnlockedDeviceRequired(boolean)", "android.security.keystore.KeyGenParameterSpec.Builder#setDevicePropertiesAttestationIncluded(boolean)", "#getSystemAvailableFeatures", "javax.crypto.KeyAgreement", "android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias(String)", "android.security.keystore.KeyGenParameterSpec.Builder#setAttestationChallenge(byte", "#hasSystemFeature(String", "android.app.admin.DevicePolicyManager#ID_TYPE_IMEI", "android.security.keystore.WrappedKeyEntry" ]
  }, {
    "name" : "FEATURE_STRONGBOX_KEYSTORE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures}, {@link #hasSystemFeature(String)}, and\n     * {@link #hasSystemFeature(String, int)}: If this feature is supported, the device implements\n     * the Android Keystore backed by a dedicated secure processor referred to as\n     * <a href=\"https://source.android.com/security/best-practices/hardware#strongbox-keymaster\">\n     * StrongBox</a>. If this feature has a version, the version number indicates which features are\n     * implemented in StrongBox:\n     * <ul>\n     * <li>300: Ability to include a second IMEI in the ID attestation record, see\n     * {@link android.app.admin.DevicePolicyManager#ID_TYPE_IMEI}.\n     * <li>200: No new features for StrongBox (the Android Keystore environment backed by an\n     * isolated execution environment has gained support for Curve 25519 in this version, but\n     * the implementation backed by a dedicated secure processor is not expected to implement it).\n     * <li>100: Hardware support for ECDH (see {@link javax.crypto.KeyAgreement}) and support\n     * for app-generated attestation keys (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias(String)}).\n     * <li>41: Hardware enforcement of device-unlocked keys (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setUnlockedDeviceRequired(boolean)}).\n     * <li>40: Support for wrapped key import (see {@link\n     * android.security.keystore.WrappedKeyEntry}), optional support for ID attestation (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setDevicePropertiesAttestationIncluded(boolean)}),\n     * attestation (see {@link\n     * android.security.keystore.KeyGenParameterSpec.Builder#setAttestationChallenge(byte[])}),\n     * AES, HMAC, ECDSA and RSA support where the secret or private key never leaves secure\n     * hardware, and support for requiring user authentication before a key can be used.\n     * </ul>\n     * If a device has StrongBox, this feature version number is guaranteed to be set for all\n     * devices launching with Android 12 and may be set on devices launching with an earlier\n     * version. If the feature version is set, it will at least have the value 40. If it's not\n     * set the device may have StrongBox but it may not support all features listed above.\n     ",
    "links" : [ "#hasSystemFeature(String)", "android.security.keystore.KeyGenParameterSpec.Builder#setUnlockedDeviceRequired(boolean)", "android.security.keystore.KeyGenParameterSpec.Builder#setDevicePropertiesAttestationIncluded(boolean)", "#getSystemAvailableFeatures", "javax.crypto.KeyAgreement", "android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias(String)", "android.security.keystore.KeyGenParameterSpec.Builder#setAttestationChallenge(byte", "#hasSystemFeature(String", "android.app.admin.DevicePolicyManager#ID_TYPE_IMEI", "android.security.keystore.WrappedKeyEntry" ]
  }, {
    "name" : "FEATURE_SLICES_DISABLED",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device does not have slices implementation.\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_DEVICE_UNIQUE_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device supports device-unique Keystore attestations.  Only available on devices that\n     * also support {@link #FEATURE_STRONGBOX_KEYSTORE}, and can only be used by device owner\n     * apps (see {@link android.app.admin.DevicePolicyManager#generateKeyPair}).\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "android.app.admin.DevicePolicyManager#generateKeyPair", "#getSystemAvailableFeatures", "#FEATURE_STRONGBOX_KEYSTORE" ]
  }, {
    "name" : "FEATURE_DEVICE_ID_ATTESTATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has a Keymaster implementation that supports Device ID attestation.\n     *\n     * @see DevicePolicyManager#isDeviceIdAttestationSupported\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_IPSEC_TUNNELS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the requisite kernel support for multinetworking-capable IPsec tunnels.\n     *\n     * <p>This feature implies that the device supports XFRM Interfaces (CONFIG_XFRM_INTERFACE), or\n     * VTIs with kernel patches allowing updates of output/set mark via UPDSA.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_IPSEC_TUNNEL_MIGRATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the requisite kernel support for migrating IPsec tunnels to new source/destination addresses.\n     *\n     * <p>This feature implies that the device supports XFRM Migration (CONFIG_XFRM_MIGRATE) and has\n     * the kernel fixes to support cross-address-family IPsec tunnel migration\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CONTROLS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and\n     * {@link #hasSystemFeature}: The device supports a system interface for the user to select\n     * and bind device control services provided by applications.\n     *\n     * @see android.service.controls.ControlsProviderService\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_REBOOT_ESCROW",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the requisite hardware support to support reboot escrow of synthetic password for updates.\n     *\n     * <p>This feature implies that the device has the RebootEscrow HAL implementation.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_INCREMENTAL_DELIVERY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the requisite kernel support to support incremental delivery aka Incremental FileSystem.\n     *\n     * feature not present - IncFs is not present on the device.\n     * 1 - IncFs v1, core features, no PerUid support. Optional in R.\n     * 2 - IncFs v2, PerUid support, fs-verity support. Required in S.\n     *\n     * @see IncrementalManager#isFeatureEnabled\n     * @see IncrementalManager#getVersion()\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_EROFS_LEGACY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * has the requisite kernel support for the EROFS filesystem present in 4.19 kernels as a\n     * staging driver, which lacks 0padding and big pcluster support.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_EROFS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * has the requisite kernel support for the EROFS filesystem present in 5.10 kernels, which\n     * has 0padding, big pcluster, and chunked index support.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_TUNER",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}:\n     * The device has tuner hardware to support tuner operations.\n     *\n     * <p>This feature implies that the device has the tuner HAL implementation.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_APP_ENUMERATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the necessary changes to support app enumeration.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_KEYSTORE_SINGLE_USE_KEY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * a Keystore implementation that can only enforce limited use key in hardware with max usage\n     * count equals to 1.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_KEYSTORE_LIMITED_USE_KEY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * a Keystore implementation that can enforce limited use key in hardware with any max usage\n     * count (including count equals to 1).\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_KEYSTORE_APP_ATTEST_KEY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * a Keystore implementation that can create application-specific attestation keys.\n     * See {@link android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias}.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures", "android.security.keystore.KeyGenParameterSpec.Builder#setAttestKeyAlias" ]
  }, {
    "name" : "FEATURE_APP_COMPAT_OVERRIDES",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * is opted-in to receive per-app compatibility overrides that are applied in\n     * {@link com.android.server.compat.overrides.AppCompatOverridesService}.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "com.android.server.compat.overrides.AppCompatOverridesService", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_COMMUNAL_MODE",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports communal mode,\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_DREAM_OVERLAY",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports dream overlay feature, which is an informational layer shown on top of dreams.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WINDOW_MAGNIFICATION",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports window magnification.\n     *\n     * @see android.accessibilityservice.MagnificationConfig#MAGNIFICATION_MODE_WINDOW\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CREDENTIALS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports retrieval of user credentials, via integration with credential providers.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_DEVICE_LOCK",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports locking (for example, by a financing provider in case of a missed payment).\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device\n     * supports showing location-based suggestions for wallet cards provided by the default payment\n     * app.\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_ROTARY_ENCODER_LOW_RES",
    "type" : "String",
    "comment" : "\n     * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n     * the rotary encoder hardware to support rotating bezel on watch.\n     *\n     * @hide\n     ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "FEATURE_CONTEXTUAL_SEARCH_HELPER",
    "type" : "String",
    "comment" : "\n   * Feature for {@link #getSystemAvailableFeatures} and {@link #hasSystemFeature}: The device has\n   * support for contextual search helper.\n   *\n   * @hide\n   ",
    "links" : [ "#hasSystemFeature", "#getSystemAvailableFeatures" ]
  }, {
    "name" : "APP_ENUMERATION_ENABLED_BY_DEFAULT",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_URI",
    "type" : "String",
    "comment" : "\n     * Extra field name for the URI to a verification file. Passed to a package verifier.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_ID",
    "type" : "String",
    "comment" : "\n     * Extra field name for the ID of a package pending verification. Passed to\n     * a package verifier and is used to call back to\n     * {@link PackageManager#verifyPendingInstall(int, int)}\n     ",
    "links" : [ "android.content.pm.PackageManager#verifyPendingInstall(int" ]
  }, {
    "name" : "EXTRA_VERIFICATION_INSTALLER_PACKAGE",
    "type" : "String",
    "comment" : "\n     * Extra field name for the package identifier which is trying to install\n     * the package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_INSTALL_FLAGS",
    "type" : "String",
    "comment" : "\n     * Extra field name for the requested install flags for a package pending\n     * verification. Passed to a package verifier.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_INSTALLER_UID",
    "type" : "String",
    "comment" : "\n     * Extra field name for the uid of who is requesting to install\n     * the package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Extra field name for the package name of a package pending verification.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_RESULT",
    "type" : "String",
    "comment" : "\n     * Extra field name for the result of a verification, either\n     * {@link #VERIFICATION_ALLOW}, or {@link #VERIFICATION_REJECT}.\n     * Passed to package verifiers after a package is verified.\n     ",
    "links" : [ "#VERIFICATION_REJECT", "#VERIFICATION_ALLOW" ]
  }, {
    "name" : "EXTRA_USER_ACTION_REQUIRED",
    "type" : "String",
    "comment" : "\n     * Extra field name for tracking whether user action\n     * was requested for a particular install, either {@code true} or {@code false}.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_VERSION_CODE",
    "type" : "String",
    "comment" : "\n     * Extra field name for the version code of a package pending verification.\n     * @deprecated Use {@link #EXTRA_VERIFICATION_LONG_VERSION_CODE} instead.\n     * @hide\n     ",
    "links" : [ "#EXTRA_VERIFICATION_LONG_VERSION_CODE" ]
  }, {
    "name" : "EXTRA_VERIFICATION_LONG_VERSION_CODE",
    "type" : "String",
    "comment" : "\n     * Extra field name for the long version code of a package pending verification\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VERIFICATION_ROOT_HASH",
    "type" : "String",
    "comment" : "\n     * Extra field name for the Merkle tree root hash of a package.\n     * <p>Passed to a package verifier both prior to verification and as a result\n     * of verification.\n     * <p>The value of the extra is a specially formatted list:\n     * {@code filename1:HASH_1;filename2:HASH_2;...;filenameN:HASH_N}\n     * <p>The extra must include an entry for every APK within an installation. If\n     * a hash is not physically present, a hash value of {@code 0} will be used.\n     * <p>The root hash is generated using SHA-256, no salt with a 4096 byte block\n     * size. See the description of the\n     * <a href=\"https://www.kernel.org/doc/html/latest/filesystems/fsverity.html#merkle-tree\">fs-verity merkle-tree</a>\n     * for more details.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTENT_FILTER_VERIFICATION_ID",
    "type" : "String",
    "comment" : "\n     * Extra field name for the ID of a intent filter pending verification.\n     * Passed to an intent filter verifier and is used to call back to\n     * {@link #verifyIntentFilter}\n     *\n     * @deprecated Use DomainVerificationManager APIs.\n     * @hide\n     ",
    "links" : [ "#verifyIntentFilter" ]
  }, {
    "name" : "EXTRA_INTENT_FILTER_VERIFICATION_URI_SCHEME",
    "type" : "String",
    "comment" : "\n     * Extra field name for the scheme used for an intent filter pending verification. Passed to\n     * an intent filter verifier and is used to construct the URI to verify against.\n     *\n     * Usually this is \"https\"\n     *\n     * @deprecated Use DomainVerificationManager APIs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTENT_FILTER_VERIFICATION_HOSTS",
    "type" : "String",
    "comment" : "\n     * Extra field name for the host names to be used for an intent filter pending verification.\n     * Passed to an intent filter verifier and is used to construct the URI to verify the\n     * intent filter.\n     *\n     * This is a space delimited list of hosts.\n     *\n     * @deprecated Use DomainVerificationManager APIs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_INTENT_FILTER_VERIFICATION_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * Extra field name for the package name to be used for an intent filter pending verification.\n     * Passed to an intent filter verifier and is used to check the verification responses coming\n     * from the hosts. Each host response will need to include the package name of APK containing\n     * the intent filter.\n     *\n     * @deprecated Use DomainVerificationManager APIs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REQUEST_PERMISSIONS",
    "type" : "String",
    "comment" : "\n     * The action used to request that the user approve a permission request\n     * from the application.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REQUEST_PERMISSIONS_FOR_OTHER",
    "type" : "String",
    "comment" : "\n     * The action used to request that the user approve a permission request\n     * from the application. Sent from an application other than the one whose permissions\n     * will be granted. Can only be used by the system server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REQUEST_PERMISSIONS_NAMES",
    "type" : "String",
    "comment" : "\n     * The names of the requested permissions.\n     * <p>\n     * <strong>Type:</strong> String[]\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REQUEST_PERMISSIONS_DEVICE_ID",
    "type" : "String",
    "comment" : "\n     * The deviceId for which the permissions are requested, {@link Context#DEVICE_ID_DEFAULT}\n     * is the default device ID.\n     * <p>\n     * <strong>Type:</strong> int\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT" ]
  }, {
    "name" : "EXTRA_REQUEST_PERMISSIONS_RESULTS",
    "type" : "String",
    "comment" : "\n     * The results from the permissions request.\n     * <p>\n     * <strong>Type:</strong> int[] of #PermissionResult\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_REQUEST_PERMISSIONS_LEGACY_ACCESS_PERMISSION_NAMES",
    "type" : "String",
    "comment" : "\n     * Indicates that the package requesting permissions has legacy access for some permissions,\n     * or had it, but it was recently revoked. These request dialogs may show different text,\n     * indicating that the app is requesting continued access to a permission. Will be cleared\n     * from any permission request intent, if set by a non-system server app.\n     * <p>\n     * <strong>Type:</strong> String[]\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FAILURE_EXISTING_PACKAGE",
    "type" : "String",
    "comment" : "\n     * String extra for {@link PackageInstallObserver} in the 'extras' Bundle in case of\n     * {@link #INSTALL_FAILED_DUPLICATE_PERMISSION}.  This extra names the package which provides\n     * the existing definition for the permission.\n     * @hide\n     ",
    "links" : [ "android.app.PackageInstallObserver", "#INSTALL_FAILED_DUPLICATE_PERMISSION" ]
  }, {
    "name" : "EXTRA_FAILURE_EXISTING_PERMISSION",
    "type" : "String",
    "comment" : "\n     * String extra for {@link PackageInstallObserver} in the 'extras' Bundle in case of\n     * {@link #INSTALL_FAILED_DUPLICATE_PERMISSION}.  This extra names the permission that is\n     * being redundantly defined by the package being installed.\n     * @hide\n     ",
    "links" : [ "android.app.PackageInstallObserver", "#INSTALL_FAILED_DUPLICATE_PERMISSION" ]
  }, {
    "name" : "FLAG_PERMISSION_USER_SET",
    "type" : "int",
    "comment" : "\n    * Permission flag: The permission is set in its current state\n    * by the user and apps can still request it at runtime.\n    *\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_USER_FIXED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is set in its current state\n     * by the user and it is fixed, i.e. apps can no longer request\n     * this permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_POLICY_FIXED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is set in its current state\n     * by device policy and neither apps nor the user can change\n     * its state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_REVOKE_ON_UPGRADE",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is set in a granted state but\n     * access to resources it guards is restricted by other means to\n     * enable revoking a permission on legacy apps that do not support\n     * runtime permissions. If this permission is upgraded to runtime\n     * because the app was updated to support runtime permissions, the\n     * the permission will be revoked in the upgrade process.\n     *\n     * @deprecated Renamed to {@link #FLAG_PERMISSION_REVOKED_COMPAT}.\n     *\n     * @hide\n     ",
    "links" : [ "#FLAG_PERMISSION_REVOKED_COMPAT" ]
  }, {
    "name" : "FLAG_PERMISSION_SYSTEM_FIXED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is set in its current state\n     * because the app is a component that is a part of the system.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_GRANTED_BY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is granted by default because it\n     * enables app functionality that is expected to work out-of-the-box\n     * for providing a smooth user experience. For example, the phone app\n     * is expected to have the phone permission.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_REVIEW_REQUIRED",
    "type" : "int",
    "comment" : "\n     * Permission flag: If app targetSDK < M, then the permission has to be reviewed before any of\n     * the app components can run. If app targetSDK >= M, then the system might need to show a\n     * request dialog for this permission on behalf of an app.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_REVOKE_WHEN_REQUESTED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission has not been explicitly requested by\n     * the app but has been added automatically by the system. Revoke once\n     * the app does explicitly request it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission's usage should be made highly visible to the user\n     * when granted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_USER_SENSITIVE_WHEN_DENIED",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission's usage should be made highly visible to the user\n     * when denied.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_RESTRICTION_INSTALLER_EXEMPT",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is restricted but the app is exempt\n     * from the restriction and is allowed to hold this permission in its\n     * full form and the exemption is provided by the installer on record.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_RESTRICTION_SYSTEM_EXEMPT",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is restricted but the app is exempt\n     * from the restriction and is allowed to hold this permission in its\n     * full form and the exemption is provided by the system due to its\n     * permission policy.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_RESTRICTION_UPGRADE_EXEMPT",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is restricted but the app is exempt\n     * from the restriction and is allowed to hold this permission and the\n     * exemption is provided by the system when upgrading from an OS version\n     * where the permission was not restricted to an OS version where the\n     * permission is restricted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_APPLY_RESTRICTION",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is disabled but may be granted. If\n     * disabled the data protected by the permission should be protected\n     * by a no-op (empty list, default error, etc) instead of crashing the\n     * client.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_GRANTED_BY_ROLE",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is granted because the application holds a role.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_REVOKED_COMPAT",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission should have been revoked but is kept granted for\n     * compatibility. The data protected by the permission should be protected by a no-op (empty\n     * list, default error, etc) instead of crashing the client. The permission will be revoked if\n     * the app is upgraded to supports it.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_ONE_TIME",
    "type" : "int",
    "comment" : "\n     * Permission flag: The permission is one-time and should be revoked automatically on app\n     * inactivity\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_AUTO_REVOKED",
    "type" : "int",
    "comment" : "\n     * Permission flag: Whether permission was revoked by auto-revoke.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_SELECTED_LOCATION_ACCURACY",
    "type" : "int",
    "comment" : "\n     * Permission flag: This location permission is selected as the level of granularity of\n     * location accuracy.\n     * Example: If this flag is set for ACCESS_FINE_LOCATION, FINE location is the selected location\n     *          accuracy for location permissions.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAGS_PERMISSION_RESERVED_PERMISSION_CONTROLLER",
    "type" : "int",
    "comment" : "\n     * Permission flags: Reserved for use by the permission controller. The platform and any\n     * packages besides the permission controller should not assume any definition about these\n     * flags.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAGS_PERMISSION_RESTRICTION_ANY_EXEMPT",
    "type" : "int",
    "comment" : "\n     * Permission flags: Bitwise or of all permission flags allowing an\n     * exemption for a restricted permission.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_PERMISSION_FLAGS",
    "type" : "int",
    "comment" : "\n     * Mask for all permission flags.\n     *\n     * @hide\n     *\n     * @deprecated Don't use - does not capture all flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_PERMISSION_FLAGS_ALL",
    "type" : "int",
    "comment" : "\n     * Mask for all permission flags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "APP_DETAILS_ACTIVITY_CLASS_NAME",
    "type" : "String",
    "comment" : "\n     * Injected activity in app that forwards user to setting activity of that app.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_WHITELIST_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Permission whitelist flag: permissions whitelisted by the system.\n     * Permissions can also be whitelisted by the installer, on upgrade, or on\n     * role grant.\n     *\n     * <p>\n     * <strong>Note: </strong>In retrospect it would have been preferred to use\n     * more inclusive terminology when naming this API. Similar APIs added will\n     * refrain from using the term \"whitelist\".\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_WHITELIST_INSTALLER",
    "type" : "int",
    "comment" : "\n     * Permission whitelist flag: permissions whitelisted by the installer.\n     * Permissions can also be whitelisted by the system, on upgrade, or on role\n     * grant.\n     *\n     * <p>\n     * <strong>Note: </strong>In retrospect it would have been preferred to use\n     * more inclusive terminology when naming this API. Similar APIs added will\n     * refrain from using the term \"whitelist\".\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PERMISSION_WHITELIST_UPGRADE",
    "type" : "int",
    "comment" : "\n     * Permission whitelist flag: permissions whitelisted by the system\n     * when upgrading from an OS version where the permission was not\n     * restricted to an OS version where the permission is restricted.\n     * Permissions can also be whitelisted by the installer, the system, or on\n     * role grant.\n     *\n     * <p>\n     * <strong>Note: </strong>In retrospect it would have been preferred to use\n     * more inclusive terminology when naming this API. Similar APIs added will\n     * refrain from using the term \"whitelist\".\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_SHARED_LIBRARY_SERVICES",
    "type" : "String",
    "comment" : "\n     * This is a library that contains components apps can invoke. For\n     * example, a services for apps to bind to, or standard chooser UI,\n     * etc. This library is versioned and backwards compatible. Clients\n     * should check its version via {@link android.ext.services.Version\n     * #getVersionCode()} and avoid calling APIs added in later versions.\n     * <p>\n     * This shared library no longer exists since Android R.\n     *\n     * @see #getServicesSystemSharedLibraryPackageName()\n     *\n     * @hide\n     ",
    "links" : [ "android.ext.services.Version#getVersionCode()" ]
  }, {
    "name" : "SYSTEM_SHARED_LIBRARY_SHARED",
    "type" : "String",
    "comment" : "\n     * This is a library that contains components apps can dynamically\n     * load. For example, new widgets, helper classes, etc. This library\n     * is versioned and backwards compatible. Clients should check its\n     * version via {@link android.ext.shared.Version#getVersionCode()}\n     * and avoid calling APIs added in later versions.\n     *\n     * @hide\n     ",
    "links" : [ "android.ext.shared.Version#getVersionCode()" ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Used when starting a process for an Activity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_SERVICE",
    "type" : "int",
    "comment" : "\n     * Used when starting a process for a Service.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "\n     * Used when moving a Service to the foreground.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_BROADCAST_RECEIVER",
    "type" : "int",
    "comment" : "\n     * Used when starting a process for a BroadcastReceiver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_CONTENT_PROVIDER",
    "type" : "int",
    "comment" : "\n     * Used when starting a process for a ContentProvider.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_BACKUP",
    "type" : "int",
    "comment" : "\n     * Used when starting a process for a BroadcastReceiver.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_CROSS_PACKAGE",
    "type" : "int",
    "comment" : "\n     * Used with Context.getClassLoader() across Android packages.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_INSTRUMENTATION",
    "type" : "int",
    "comment" : "\n     * Used when starting a package within a process for Instrumentation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NOTIFY_PACKAGE_USE_REASONS_COUNT",
    "type" : "int",
    "comment" : "\n     * Total number of usage reasons.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VERSION_CODE_HIGHEST",
    "type" : "int",
    "comment" : "\n     * Constant for specifying the highest installed package version code.\n     ",
    "links" : [ ]
  }, {
    "name" : "FILTER_APPLICATION_QUERY",
    "type" : "long",
    "comment" : "\n     * Apps targeting Android R and above will need to declare the packages and intents they intend\n     * to use to get details about other apps on a device. Such declarations must be made via the\n     * {@code <queries>} tag in the manifest.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Constant for use with {@link #setSystemAppState} to mark a system app as hidden until\n     * installation.\n     * @hide\n     ",
    "links" : [ "#setSystemAppState" ]
  }, {
    "name" : "SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_VISIBLE",
    "type" : "int",
    "comment" : "\n     * Constant for use with {@link #setSystemAppState} to mark a system app as not hidden until\n     * installation.\n     * @hide\n     ",
    "links" : [ "#setSystemAppState" ]
  }, {
    "name" : "SYSTEM_APP_STATE_INSTALLED",
    "type" : "int",
    "comment" : "\n     * Constant for use with {@link #setSystemAppState} to change a system app's state to installed.\n     * @hide\n     ",
    "links" : [ "#setSystemAppState" ]
  }, {
    "name" : "SYSTEM_APP_STATE_UNINSTALLED",
    "type" : "int",
    "comment" : "\n     * Constant for use with {@link #setSystemAppState} to change a system app's state to\n     * uninstalled.\n     * @hide\n     ",
    "links" : [ "#setSystemAppState" ]
  }, {
    "name" : "PROPERTY_ALLOW_ADB_BACKUP",
    "type" : "String",
    "comment" : "\n     * A manifest property to control app's participation in {@code adb backup}. Should only\n     * be used by system / privileged apps.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_NONE",
    "type" : "int",
    "comment" : "\n     * Flag to denote no restrictions. This should be used to clear any restrictions that may have\n     * been previously set for the package.\n     * @hide\n     * @see #setDistractingPackageRestrictions(String[], int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_HIDE_FROM_SUGGESTIONS",
    "type" : "int",
    "comment" : "\n     * Flag to denote that a package should be hidden from any suggestions to the user.\n     * @hide\n     * @see #setDistractingPackageRestrictions(String[], int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_HIDE_NOTIFICATIONS",
    "type" : "int",
    "comment" : "\n     * Flag to denote that a package's notifications should be hidden.\n     * @hide\n     * @see #setDistractingPackageRestrictions(String[], int)\n     ",
    "links" : [ ]
  }, {
    "name" : "CERT_INPUT_RAW_X509",
    "type" : "int",
    "comment" : "\n     * Certificate input bytes: the input bytes represent an encoded X.509 Certificate which could\n     * be generated using an {@code CertificateFactory}\n     ",
    "links" : [ ]
  }, {
    "name" : "CERT_INPUT_SHA256",
    "type" : "int",
    "comment" : "\n     * Certificate input bytes: the input bytes represent the SHA256 output of an encoded X.509\n     * Certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRUST_ALL",
    "type" : "List<Certificate>",
    "comment" : "\n     * Trust any Installer to provide checksums for the package.\n     * @see #requestChecksums\n     ",
    "links" : [ ]
  }, {
    "name" : "TRUST_NONE",
    "type" : "List<Certificate>",
    "comment" : "\n     * Don't trust any Installer to provide checksums for the package.\n     * This effectively disables optimized Installer-enforced checksums.\n     * @see #requestChecksums\n     ",
    "links" : [ ]
  }, {
    "name" : "sApplicationInfoCache",
    "type" : "PropertyInvalidatedCache<ApplicationInfoQuery, ApplicationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCacheAutoCorker",
    "type" : "PropertyInvalidatedCache.AutoCorker",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPackageInfoCache",
    "type" : "PropertyInvalidatedCache<PackageInfoQuery, PackageInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract PackageInfo getPackageInfo(@NonNull String packageName, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Retrieve overall information about an application package that is\n     * installed on the system.\n     *\n     * Use {@link #getPackageInfo(String, PackageInfoFlags)} when long flags are needed.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A PackageInfo object containing information about the package. If\n     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if the package\n     *         is not found in the list of installed applications, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     ",
    "links" : [ "#getPackageInfo(String" ]
  }, {
    "name" : "public PackageInfo getPackageInfo(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * See {@link #getPackageInfo(String, int)}\n     ",
    "links" : [ "#getPackageInfo(String" ]
  }, {
    "name" : "public abstract PackageInfo getPackageInfo(@NonNull VersionedPackage versionedPackage, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Retrieve overall information about an application package that is\n     * installed on the system. This method can be used for retrieving\n     * information about packages for which multiple versions can be installed\n     * at the time. Currently only packages hosting static shared libraries can\n     * have multiple installed versions. The method can also be used to get info\n     * for a package that has a single version installed by passing\n     * {@link #VERSION_CODE_HIGHEST} in the {@link VersionedPackage}\n     * constructor.\n     *\n     * Use {@link #getPackageInfo(VersionedPackage, PackageInfoFlags)} when long flags are needed.\n     *\n     * @param versionedPackage The versioned package for which to query.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A PackageInfo object containing information about the package. If\n     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if the package\n     *         is not found in the list of installed applications, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     ",
    "links" : [ "#getPackageInfo(VersionedPackage", "android.content.pm.VersionedPackage", "#VERSION_CODE_HIGHEST" ]
  }, {
    "name" : "public PackageInfo getPackageInfo(@NonNull VersionedPackage versionedPackage, @NonNull PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * See {@link #getPackageInfo(VersionedPackage, int)}\n     ",
    "links" : [ "#getPackageInfo(VersionedPackage" ]
  }, {
    "name" : "public abstract PackageInfo getPackageInfoAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Retrieve overall information about an application package that is\n     * installed on the system.\n     *\n     * Use {@link #getPackageInfoAsUser(String, PackageInfoFlags, int)} when long flags are needed.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user id.\n     * @return A PackageInfo object containing information about the package. If\n     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if the package\n     *         is not found in the list of installed applications, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     * @hide\n     ",
    "links" : [ "#getPackageInfoAsUser(String" ]
  }, {
    "name" : "public PackageInfo getPackageInfoAsUser(@NonNull String packageName, @NonNull PackageInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "\n     * See {@link #getPackageInfoAsUser(String, int, int)}\n     * @hide\n     ",
    "links" : [ "#getPackageInfoAsUser(String" ]
  }, {
    "name" : "public abstract String[] currentToCanonicalPackageNames(@NonNull String[] packageNames)",
    "returnType" : "String[]",
    "comment" : "\n     * Map from the current package names in use on the device to whatever\n     * the current canonical name of that package is.\n     * @param packageNames Array of current names to be mapped.\n     * @return Returns an array of the same size as the original, containing\n     * the canonical name for each package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] canonicalToCurrentPackageNames(@NonNull String[] packageNames)",
    "returnType" : "String[]",
    "comment" : "\n     * Map from a packages canonical name to the current name in use on the device.\n     * @param packageNames Array of new names to be mapped.\n     * @return Returns an array of the same size as the original, containing\n     * the current name for each package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Intent getLaunchIntentForPackage(@NonNull String packageName)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns a \"good\" intent to launch a front-door activity in a package.\n     * This is used, for example, to implement an \"open\" button when browsing\n     * through packages.  The current implementation looks first for a main\n     * activity in the category {@link Intent#CATEGORY_INFO}, and next for a\n     * main activity in the category {@link Intent#CATEGORY_LAUNCHER}. Returns\n     * <code>null</code> if neither are found.\n     *\n     * <p>Consider using {@link #getLaunchIntentSenderForPackage(String)} if\n     * the caller is not allowed to query for the <code>packageName</code>.\n     *\n     * @param packageName The name of the package to inspect.\n     *\n     * @return A fully-qualified {@link Intent} that can be used to launch the\n     * main activity in the package. Returns <code>null</code> if the package\n     * does not contain such an activity, or if <em>packageName</em> is not\n     * recognized.\n     *\n     * @see #getLaunchIntentSenderForPackage(String)\n     ",
    "links" : [ "android.content.Intent#CATEGORY_INFO", "android.content.Intent#CATEGORY_LAUNCHER", "android.content.Intent", "#getLaunchIntentSenderForPackage(String)" ]
  }, {
    "name" : "public abstract Intent getLeanbackLaunchIntentForPackage(@NonNull String packageName)",
    "returnType" : "Intent",
    "comment" : "\n     * Return a \"good\" intent to launch a front-door Leanback activity in a\n     * package, for use for example to implement an \"open\" button when browsing\n     * through packages. The current implementation will look for a main\n     * activity in the category {@link Intent#CATEGORY_LEANBACK_LAUNCHER}, or\n     * return null if no main leanback activities are found.\n     *\n     * @param packageName The name of the package to inspect.\n     * @return Returns either a fully-qualified Intent that can be used to launch\n     *         the main Leanback activity in the package, or null if the package\n     *         does not contain such an activity.\n     ",
    "links" : [ "android.content.Intent#CATEGORY_LEANBACK_LAUNCHER" ]
  }, {
    "name" : "public abstract Intent getCarLaunchIntentForPackage(@NonNull String packageName)",
    "returnType" : "Intent",
    "comment" : "\n     * Return a \"good\" intent to launch a front-door Car activity in a\n     * package, for use for example to implement an \"open\" button when browsing\n     * through packages. The current implementation will look for a main\n     * activity in the category {@link Intent#CATEGORY_CAR_LAUNCHER}, or\n     * return null if no main car activities are found.\n     *\n     * @param packageName The name of the package to inspect.\n     * @return Returns either a fully-qualified Intent that can be used to launch\n     *         the main Car activity in the package, or null if the package\n     *         does not contain such an activity.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#CATEGORY_CAR_LAUNCHER" ]
  }, {
    "name" : "public IntentSender getLaunchIntentSenderForPackage(@NonNull String packageName)",
    "returnType" : "IntentSender",
    "comment" : "\n     * Returns an {@link IntentSender} that can be used to launch a front-door activity in a\n     * package. This is used, for example, to implement an \"open\" button when browsing through\n     * packages. The current implementation is the same with\n     * {@link #getLaunchIntentForPackage(String)}. Instead of returning the {@link Intent}, it\n     * returns the {@link IntentSender} which is not restricted by the package visibility.\n     *\n     * <p>The caller can invoke\n     * {@link IntentSender#sendIntent(Context, int, Intent, IntentSender.OnFinished, Handler)}\n     * to launch the activity. An {@link IntentSender.SendIntentException} is thrown if the\n     * package does not contain such an activity, or if <em>packageName</em> is not recognized.\n     *\n     * @param packageName The name of the package to inspect.\n     * @return Returns a {@link IntentSender} to launch the activity.\n     *\n     * @see #getLaunchIntentForPackage(String)\n     ",
    "links" : [ "android.content.IntentSender", "android.content.Intent", "android.content.IntentSender#sendIntent(Context", "#getLaunchIntentForPackage(String)", "IntentSender.SendIntentException" ]
  }, {
    "name" : "public abstract int[] getPackageGids(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "\n     * Return an array of all of the POSIX secondary group IDs that have been\n     * assigned to the given package.\n     * <p>\n     * Note that the same package may have different GIDs under different\n     * {@link UserHandle} on the same device.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @return Returns an int array of the assigned GIDs, or null if there are\n     *         none.\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public abstract int[] getPackageGids(@NonNull String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "\n     * See {@link #getPackageGids(String, int)}.\n     ",
    "links" : [ "#getPackageGids(String" ]
  }, {
    "name" : "public abstract int getPackageUid(@NonNull String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Return the UID associated with the given package name.\n     * <p>\n     * Note that the same package will have different UIDs under different\n     * {@link UserHandle} on the same device.\n     *\n     * Use {@link #getPackageUid(String, PackageInfoFlags)} when long flags are needed.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @return Returns an integer UID who owns the given package name.\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     ",
    "links" : [ "#getPackageUid(String", "android.os.UserHandle" ]
  }, {
    "name" : "public int getPackageUid(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * See {@link #getPackageUid(String, int)}.\n     ",
    "links" : [ "#getPackageUid(String" ]
  }, {
    "name" : "public abstract int getPackageUidAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Return the UID associated with the given package name.\n     * <p>\n     * Note that the same package will have different UIDs under different\n     * {@link UserHandle} on the same device.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @param userId The user handle identifier to look up the package under.\n     * @return Returns an integer UID who owns the given package name.\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     * @hide\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public abstract int getPackageUidAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * See {@link #getPackageUidAsUser(String, PackageInfoFlags, int)}.\n     * Use {@link #getPackageUidAsUser(String, PackageInfoFlags, int)} when long flags are needed.\n     * @hide\n     ",
    "links" : [ "#getPackageUidAsUser(String" ]
  }, {
    "name" : "public int getPackageUidAsUser(@NonNull String packageName, @NonNull PackageInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Return the UID associated with the given package name.\n     * <p>\n     * Note that the same package will have different UIDs under different\n     * {@link UserHandle} on the same device.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of the\n     *            desired package.\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user handle identifier to look up the package under.\n     * @return Returns an integer UID who owns the given package name.\n     * @throws NameNotFoundException if no such package is available to the\n     *             caller.\n     * @hide\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public abstract PermissionInfo getPermissionInfo(@NonNull String permName, @PermissionInfoFlags int flags) throws NameNotFoundException",
    "returnType" : "PermissionInfo",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract List<PermissionInfo> queryPermissionsByGroup(@Nullable String permissionGroup, @PermissionInfoFlags int flags) throws NameNotFoundException",
    "returnType" : "List<PermissionInfo>",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean arePermissionsIndividuallyControlled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if some permissions are individually controlled.\n     *\n     * <p>The user usually grants and revokes permission-groups. If this option is set some\n     * dangerous system permissions can be revoked/granted by the user separately from their group.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isWirelessConsentModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if wireless consent mode is enabled\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PermissionGroupInfo getPermissionGroupInfo(@NonNull String groupName, @PermissionGroupInfoFlags int flags) throws NameNotFoundException",
    "returnType" : "PermissionGroupInfo",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract List<PermissionGroupInfo> getAllPermissionGroups(@PermissionGroupInfoFlags int flags)",
    "returnType" : "List<PermissionGroupInfo>",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public void getPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<List<String>> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the platform-defined permissions which belong to a particular permission group.\n     *\n     * @param permissionGroupName the permission group whose permissions are desired\n     * @param executor the {@link Executor} on which to invoke the callback\n     * @param callback the callback which will receive a list of the platform-defined permissions in\n     *                 the group, or empty if the group is not a valid platform-defined permission\n     *                 group, or there was an exception\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void getGroupOfPlatformPermission(@NonNull String permissionName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the platform-defined permission group of a particular permission, if the permission is a\n     * platform-defined permission.\n     *\n     * @param permissionName the permission whose group is desired\n     * @param executor the {@link Executor} on which to invoke the callback\n     * @param callback the callback which will receive the name of the permission group this\n     *                 permission belongs to, or {@code null} if it has no group, is not a\n     *                 platform-defined permission, or there was an exception\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public abstract ApplicationInfo getApplicationInfo(@NonNull String packageName, int flags) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular\n     * package/application.\n     *\n     * Use {@link #getApplicationInfo(String, ApplicationInfoFlags)} when long flags are needed.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of an\n     *            application.\n     * @param flags Additional option flags to modify the data returned.\n     * @return An {@link ApplicationInfo} containing information about the\n     *         package. If flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if\n     *         the package is not found in the list of installed applications,\n     *         the application information is retrieved from the list of\n     *         uninstalled applications (which includes installed applications\n     *         as well as applications with data directory i.e. applications\n     *         which had been deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "#getApplicationInfo(String", "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo(@NonNull String packageName, @NonNull ApplicationInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * See {@link #getApplicationInfo(String, int)}.\n     ",
    "links" : [ "#getApplicationInfo(String" ]
  }, {
    "name" : "public abstract ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * Use {@link #getApplicationInfoAsUser(String, ApplicationInfoFlags, int)} when long flags are\n     * needed.\n     * {@hide}\n     ",
    "links" : [ "#getApplicationInfoAsUser(String" ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, @NonNull ApplicationInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, int flags, @NonNull UserHandle user) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular\n     * package/application, for a specific user.\n     *\n     * Use {@link #getApplicationInfoAsUser(String, ApplicationInfoFlags, UserHandle)} when long\n     * flags are needed.\n     *\n     * @param packageName The full name (i.e. com.google.apps.contacts) of an\n     *            application.\n     * @param flags Additional option flags to modify the data returned.\n     * @return An {@link ApplicationInfo} containing information about the\n     *         package. If flag {@code MATCH_UNINSTALLED_PACKAGES} is set and if\n     *         the package is not found in the list of installed applications,\n     *         the application information is retrieved from the list of\n     *         uninstalled applications (which includes installed applications\n     *         as well as applications with data directory i.e. applications\n     *         which had been deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     * @hide\n     ",
    "links" : [ "#getApplicationInfoAsUser(String", "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, @NonNull ApplicationInfoFlags flags, @NonNull UserHandle user) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * See {@link #getApplicationInfoAsUser(String, int, UserHandle)}.\n     * @hide\n     ",
    "links" : [ "#getApplicationInfoAsUser(String" ]
  }, {
    "name" : "public int getTargetSdkVersion(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * @return The target SDK version for the given package name.\n     * @throws NameNotFoundException if a package with the given name cannot be found on the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ActivityInfo getActivityInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular activity\n     * class.\n     *\n     * Use {@link #getActivityInfo(ComponentName, ComponentInfoFlags)} when long flags are needed.\n     *\n     * @param component The full component name (i.e.\n     *            com.google.apps.contacts/com.google.apps.contacts.\n     *            ContactsList) of an Activity class.\n     * @param flags Additional option flags to modify the data returned.\n     * @return An {@link ActivityInfo} containing information about the\n     *         activity.\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "android.content.pm.ActivityInfo", "#getActivityInfo(ComponentName" ]
  }, {
    "name" : "public ActivityInfo getActivityInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * See {@link #getActivityInfo(ComponentName, int)}.\n     ",
    "links" : [ "#getActivityInfo(ComponentName" ]
  }, {
    "name" : "public abstract ActivityInfo getReceiverInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular receiver\n     * class.\n     *\n     * Use {@link #getReceiverInfo(ComponentName, ComponentInfoFlags)} when long flags are needed.\n     *\n     * @param component The full component name (i.e.\n     *            com.google.apps.calendar/com.google.apps.calendar.\n     *            CalendarAlarm) of a Receiver class.\n     * @param flags Additional option flags to modify the data returned.\n     * @return An {@link ActivityInfo} containing information about the\n     *         receiver.\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "#getReceiverInfo(ComponentName", "android.content.pm.ActivityInfo" ]
  }, {
    "name" : "public ActivityInfo getReceiverInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "\n     * See {@link #getReceiverInfo(ComponentName, int)}.\n     ",
    "links" : [ "#getReceiverInfo(ComponentName" ]
  }, {
    "name" : "public abstract ServiceInfo getServiceInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular service class.\n     *\n     * Use {@link #getServiceInfo(ComponentName, ComponentInfoFlags)} when long flags are needed.\n     *\n     * @param component The full component name (i.e.\n     *            com.google.apps.media/com.google.apps.media.\n     *            BackgroundPlayback) of a Service class.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A {@link ServiceInfo} object containing information about the\n     *         service.\n     * @throws NameNotFoundException if the component cannot be found on the system.\n     ",
    "links" : [ "#getServiceInfo(ComponentName", "android.content.pm.ServiceInfo" ]
  }, {
    "name" : "public ServiceInfo getServiceInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * See {@link #getServiceInfo(ComponentName, int)}.\n     ",
    "links" : [ "#getServiceInfo(ComponentName" ]
  }, {
    "name" : "public abstract ProviderInfo getProviderInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular content\n     * provider class.\n     *\n     * Use {@link #getProviderInfo(ComponentName, ComponentInfoFlags)} when long flags are needed.\n     *\n     * @param component The full component name (i.e.\n     *            com.google.providers.media/com.google.providers.media.\n     *            MediaProvider) of a ContentProvider class.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A {@link ProviderInfo} object containing information about the\n     *         provider.\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "#getProviderInfo(ComponentName", "android.content.pm.ProviderInfo" ]
  }, {
    "name" : "public ProviderInfo getProviderInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * See {@link #getProviderInfo(ComponentName, int)}.\n     ",
    "links" : [ "#getProviderInfo(ComponentName" ]
  }, {
    "name" : "public ModuleInfo getModuleInfo(@NonNull String packageName, @ModuleInfoFlags int flags) throws NameNotFoundException",
    "returnType" : "ModuleInfo",
    "comment" : "\n     * Retrieve information for a particular module.\n     *\n     * @param packageName The name of the module.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A {@link ModuleInfo} object containing information about the\n     *         module.\n     * @throws NameNotFoundException if a module with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "android.content.pm.ModuleInfo" ]
  }, {
    "name" : "public List<ModuleInfo> getInstalledModules(@InstalledModulesFlags int flags)",
    "returnType" : "List<ModuleInfo>",
    "comment" : "\n     * Return a List of all modules that are installed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @return A {@link List} of {@link ModuleInfo} objects, one for each installed\n     *         module, containing information about the module. In the unlikely case\n     *         there are no installed modules, an empty list is returned.\n     ",
    "links" : [ "java.util.List", "android.content.pm.ModuleInfo" ]
  }, {
    "name" : "public abstract List<PackageInfo> getInstalledPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * Return a List of all packages that are installed for the current user.\n     *\n     * Use {@link #getInstalledPackages(PackageInfoFlags)} when long flags are needed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @return A List of PackageInfo objects, one for each installed package,\n     *         containing information about the package. In the unlikely case\n     *         there are no installed packages, an empty list is returned. If\n     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     ",
    "links" : [ "#getInstalledPackages(PackageInfoFlags)" ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackages(@NonNull PackageInfoFlags flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * See {@link #getInstalledPackages(int)}.\n     ",
    "links" : [ "#getInstalledPackages(int)" ]
  }, {
    "name" : "public PersistableBundle getAppMetadata(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Returns the app metadata for a package.\n     *\n     * @param packageName The package name for which to get the app metadata.\n     * @return A PersistableBundle containing the app metadata that was provided by the installer.\n     *         In the case where a package does not have any metadata, an empty PersistableBundle is\n     *         returned.\n     * @throws NameNotFoundException if no such package is available to the caller.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAppMetadataSource(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Returns the source of the app metadata that is currently associated with the given package.\n     * The value can be {@link #APP_METADATA_SOURCE_UNKNOWN}, {@link #APP_METADATA_SOURCE_APK},\n     * {@link #APP_METADATA_SOURCE_INSTALLER} or {@link #APP_METADATA_SOURCE_SYSTEM_IMAGE}.\n     *\n     * Note: an app can have the app metadata included in the APK, but if the installer also\n     * provides an app metadata during the installation, the one provided by the installer will\n     * take precedence.\n     *\n     * @param packageName The package name for which to get the app metadata source.\n     * @throws NameNotFoundException if no such package is available to the caller.\n     * @throws SecurityException if the caller doesn't have the required permission.\n     * @hide\n     ",
    "links" : [ "#APP_METADATA_SOURCE_INSTALLER", "#APP_METADATA_SOURCE_SYSTEM_IMAGE", "#APP_METADATA_SOURCE_UNKNOWN", "#APP_METADATA_SOURCE_APK" ]
  }, {
    "name" : "public abstract List<PackageInfo> getPackagesHoldingPermissions(@NonNull String[] permissions, int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * Return a List of all installed packages that are currently holding any of\n     * the given permissions.\n     *\n     * Use {@link #getPackagesHoldingPermissions(String[], PackageInfoFlags)} when long flags are\n     * needed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @return A List of PackageInfo objects, one for each installed package\n     *         that holds any of the permissions that were provided, containing\n     *         information about the package. If no installed packages hold any\n     *         of the permissions, an empty list is returned. If flag\n     *         {@code MATCH_UNINSTALLED_PACKAGES} is set, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     ",
    "links" : [ "#getPackagesHoldingPermissions(String" ]
  }, {
    "name" : "public List<PackageInfo> getPackagesHoldingPermissions(@NonNull String[] permissions, @NonNull PackageInfoFlags flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * See {@link #getPackagesHoldingPermissions(String[], int)}.\n     ",
    "links" : [ "#getPackagesHoldingPermissions(String" ]
  }, {
    "name" : "public abstract List<PackageInfo> getInstalledPackagesAsUser(int flags, @UserIdInt int userId)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * Return a List of all packages that are installed on the device, for a\n     * specific user.\n     *\n     * Use {@link #getInstalledPackagesAsUser(PackageInfoFlags, int)} when long flags are needed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user for whom the installed packages are to be listed\n     * @return A List of PackageInfo objects, one for each installed package,\n     *         containing information about the package. In the unlikely case\n     *         there are no installed packages, an empty list is returned. If\n     *         flag {@code MATCH_UNINSTALLED_PACKAGES} is set, the package\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @hide\n     ",
    "links" : [ "#getInstalledPackagesAsUser(PackageInfoFlags" ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackagesAsUser(@NonNull PackageInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * See {@link #getInstalledPackagesAsUser(int, int)}.\n     * @hide\n     ",
    "links" : [ "#getInstalledPackagesAsUser(int" ]
  }, {
    "name" : "public abstract int checkPermission(@NonNull String permName, @NonNull String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Check whether a particular package has been granted a particular\n     * permission.\n     * <p>\n     * <strong>Note: </strong>This API returns the underlying permission state\n     * as-is and is mostly intended for permission managing system apps. To\n     * perform an access check for a certain app, please use the\n     * {@link Context#checkPermission} APIs instead.\n     *\n     * @param permName The name of the permission you are checking for.\n     * @param packageName The name of the package you are checking against.\n     *\n     * @return If the package has the permission, PERMISSION_GRANTED is\n     * returned.  If it does not have the permission, PERMISSION_DENIED\n     * is returned.\n     *\n     * @see #PERMISSION_GRANTED\n     * @see #PERMISSION_DENIED\n     ",
    "links" : [ "android.content.Context#checkPermission" ]
  }, {
    "name" : "public abstract boolean isPermissionRevokedByPolicy(@NonNull String permName, @NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a particular permissions has been revoked for a\n     * package by policy. Typically the device owner or the profile owner\n     * may apply such a policy. The user cannot grant policy revoked\n     * permissions, hence the only way for an app to get such a permission\n     * is by a policy change.\n     *\n     * @param permName The name of the permission you are checking for.\n     * @param packageName The name of the package you are checking against.\n     *\n     * @return Whether the permission is restricted by policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPermissionControllerPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the package name of the component controlling runtime permissions.\n     *\n     * @return the package name of the component controlling runtime permissions\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSdkSandboxPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the component implementing sdk sandbox service.\n     *\n     * @return the package name of the component implementing sdk sandbox service\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean addPermission(@NonNull PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean addPermissionAsync(@NonNull PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract void removePermission(@NonNull String permName)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract void grantRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract void revokeRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public void revokeRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user, @NonNull String reason)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract int getPermissionFlags(@NonNull String permName, @NonNull String packageName, @NonNull UserHandle user)",
    "returnType" : "int",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract void updatePermissionFlags(@NonNull String permName, @NonNull String packageName, @PermissionFlags int flagMask, @PermissionFlags int flagValues, @NonNull UserHandle user)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int whitelistFlag)",
    "returnType" : "Set<String>",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int whitelistFlags)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int whitelistFlags)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public boolean setAutoRevokeWhitelisted(@NonNull String packageName, boolean whitelisted)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoRevokeWhitelisted(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean shouldShowRequestPermissionRationale(@NonNull String permName)",
    "returnType" : "boolean",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getBackgroundPermissionOptionLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the localized label that corresponds to the option in settings for granting\n     * background access.\n     *\n     * <p>The intended use is for apps to reference this label in its instruction for users to grant\n     * a background permission.\n     *\n     * @return the localized label that corresponds to the settings option for granting\n     * background access\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent buildRequestPermissionsIntent(@NonNull String[] permissions)",
    "returnType" : "Intent",
    "comment" : "\n     * Returns an {@link android.content.Intent} suitable for passing to\n     * {@link android.app.Activity#startActivityForResult(android.content.Intent, int)}\n     * which prompts the user to grant permissions to this application.\n     *\n     * @throws NullPointerException if {@code permissions} is {@code null} or empty.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.Activity#startActivityForResult(android.content.Intent", "android.content.Intent" ]
  }, {
    "name" : "public abstract int checkSignatures(@NonNull String packageName1, @NonNull String packageName2)",
    "returnType" : "int",
    "comment" : "\n     * Compare the signatures of two packages to determine if the same\n     * signature appears in both of them.  If they do contain the same\n     * signature, then they are allowed special privileges when working\n     * with each other: they can share the same user-id, run instrumentation\n     * against each other, etc.\n     *\n     * @param packageName1 First package name whose signature will be compared.\n     * @param packageName2 Second package name whose signature will be compared.\n     *\n     * @return Returns an integer indicating whether all signatures on the\n     * two packages match. The value is >= 0 ({@link #SIGNATURE_MATCH}) if\n     * all signatures match or < 0 if there is not a match ({@link\n     * #SIGNATURE_NO_MATCH} or {@link #SIGNATURE_UNKNOWN_PACKAGE}).\n     *\n     * @see #checkSignatures(int, int)\n     ",
    "links" : [ "#SIGNATURE_NO_MATCH", "#SIGNATURE_UNKNOWN_PACKAGE", "#SIGNATURE_MATCH" ]
  }, {
    "name" : "public abstract int checkSignatures(int uid1, int uid2)",
    "returnType" : "int",
    "comment" : "\n     * Like {@link #checkSignatures(String, String)}, but takes UIDs of\n     * the two packages to be checked.  This can be useful, for example,\n     * when doing the check in an IPC, where the UID is the only identity\n     * available.  It is functionally identical to determining the package\n     * associated with the UIDs and checking their signatures.\n     *\n     * @param uid1 First UID whose signature will be compared.\n     * @param uid2 Second UID whose signature will be compared.\n     *\n     * @return Returns an integer indicating whether all signatures on the\n     * two packages match. The value is >= 0 ({@link #SIGNATURE_MATCH}) if\n     * all signatures match or < 0 if there is not a match ({@link\n     * #SIGNATURE_NO_MATCH} or {@link #SIGNATURE_UNKNOWN_PACKAGE}).\n     *\n     * @see #checkSignatures(String, String)\n     ",
    "links" : [ "#SIGNATURE_NO_MATCH", "#checkSignatures(String", "#SIGNATURE_UNKNOWN_PACKAGE", "#SIGNATURE_MATCH" ]
  }, {
    "name" : "public abstract String[] getPackagesForUid(int uid)",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieve the names of all packages that are associated with a particular\n     * user id.  In most cases, this will be a single package name, the package\n     * that has been assigned that user id.  Where there are multiple packages\n     * sharing the same user id through the \"sharedUserId\" mechanism, all\n     * packages with that id will be returned.\n     *\n     * @param uid The user id for which you would like to retrieve the\n     * associated packages.\n     *\n     * @return Returns an array of one or more packages assigned to the user\n     * id, or null if there are no known packages with the given id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getNameForUid(int uid)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the official name associated with a uid. This name is\n     * guaranteed to never change, though it is possible for the underlying\n     * uid to be changed.  That is, if you are storing information about\n     * uids in persistent storage, you should use the string returned\n     * by this function instead of the raw uid.\n     *\n     * @param uid The uid for which you would like to retrieve a name.\n     * @return Returns a unique name for the given uid, or null if the\n     * uid is not currently assigned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getNamesForUids(int[] uids)",
    "returnType" : "String[]",
    "comment" : "\n     * Retrieves the official names associated with each given uid.\n     * @see #getNameForUid(int)\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getUidForSharedUser(@NonNull String sharedUserName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * Return the user id associated with a shared user name. Multiple\n     * applications can specify a shared user name in their manifest and thus\n     * end up using a common uid. This might be used for new applications\n     * that use an existing shared user name and need to know the uid of the\n     * shared user.\n     *\n     * @param sharedUserName The shared user name whose uid is to be retrieved.\n     * @return Returns the UID associated with the shared user.\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<ApplicationInfo> getInstalledApplications(int flags)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "\n     * Return a List of all application packages that are installed for the\n     * current user. If flag GET_UNINSTALLED_PACKAGES has been set, a list of all\n     * applications including those deleted with {@code DELETE_KEEP_DATA}\n     * (partially installed apps with data directory) will be returned.\n     *\n     * Use {@link #getInstalledApplications(ApplicationInfoFlags)} when long flags are needed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @return A List of ApplicationInfo objects, one for each installed\n     *         application. In the unlikely case there are no installed\n     *         packages, an empty list is returned. If flag\n     *         {@code MATCH_UNINSTALLED_PACKAGES} is set, the application\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     ",
    "links" : [ "#getInstalledApplications(ApplicationInfoFlags)" ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplications(@NonNull ApplicationInfoFlags flags)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "\n     * See {@link #getInstalledApplications(int)}\n     * @param flags\n     ",
    "links" : [ "#getInstalledApplications(int)" ]
  }, {
    "name" : "public abstract List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, @UserIdInt int userId)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "\n     * Return a List of all application packages that are installed on the\n     * device, for a specific user. If flag GET_UNINSTALLED_PACKAGES has been\n     * set, a list of all applications including those deleted with\n     * {@code DELETE_KEEP_DATA} (partially installed apps with data directory)\n     * will be returned.\n     *\n     * Use {@link #getInstalledApplicationsAsUser(ApplicationInfoFlags, int)} when long flags are\n     * needed.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user for whom the installed applications are to be\n     *            listed\n     * @return A List of ApplicationInfo objects, one for each installed\n     *         application. In the unlikely case there are no installed\n     *         packages, an empty list is returned. If flag\n     *         {@code MATCH_UNINSTALLED_PACKAGES} is set, the application\n     *         information is retrieved from the list of uninstalled\n     *         applications (which includes installed applications as well as\n     *         applications with data directory i.e. applications which had been\n     *         deleted with {@code DELETE_KEEP_DATA} flag set).\n     * @hide\n     ",
    "links" : [ "#getInstalledApplicationsAsUser(ApplicationInfoFlags" ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplicationsAsUser(@NonNull ApplicationInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "\n     * See {@link #getInstalledApplicationsAsUser(int, int}.\n     * @hide\n     ",
    "links" : [ "#getInstalledApplicationsAsUser(int" ]
  }, {
    "name" : "public abstract List<InstantAppInfo> getInstantApps()",
    "returnType" : "List<InstantAppInfo>",
    "comment" : "\n     * Gets the instant applications the user recently used.\n     *\n     * @return The instant app list.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getInstantAppIcon(String packageName)",
    "returnType" : "Drawable",
    "comment" : "\n     * Gets the icon for an instant application.\n     *\n     * @param packageName The app package name.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isInstantApp()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this application is an instant app.\n     *\n     * @return Whether caller is an instant app.\n     *\n     * @see #isInstantApp(String)\n     * @see #updateInstantAppCookie(byte[])\n     * @see #getInstantAppCookie()\n     * @see #getInstantAppCookieMaxBytes()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isInstantApp(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the given package is an instant app.\n     *\n     * @param packageName The package to check\n     * @return Whether the given package is an instant app.\n     *\n     * @see #isInstantApp()\n     * @see #updateInstantAppCookie(byte[])\n     * @see #getInstantAppCookie()\n     * @see #getInstantAppCookieMaxBytes()\n     * @see #clearInstantAppCookie()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getInstantAppCookieMaxBytes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the maximum size in bytes of the cookie data an instant app\n     * can store on the device.\n     *\n     * @return The max cookie size in bytes.\n     *\n     * @see #isInstantApp()\n     * @see #isInstantApp(String)\n     * @see #updateInstantAppCookie(byte[])\n     * @see #getInstantAppCookie()\n     * @see #clearInstantAppCookie()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getInstantAppCookieMaxSize()",
    "returnType" : "int",
    "comment" : "\n     * deprecated\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getInstantAppCookie()",
    "returnType" : "byte[]",
    "comment" : "\n     * Gets the instant application cookie for this app. Non\n     * instant apps and apps that were instant but were upgraded\n     * to normal apps can still access this API. For instant apps\n     * this cookie is cached for some time after uninstall while for\n     * normal apps the cookie is deleted after the app is uninstalled.\n     * The cookie is always present while the app is installed.\n     *\n     * @return The cookie.\n     *\n     * @see #isInstantApp()\n     * @see #isInstantApp(String)\n     * @see #updateInstantAppCookie(byte[])\n     * @see #getInstantAppCookieMaxBytes()\n     * @see #clearInstantAppCookie()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void clearInstantAppCookie()",
    "returnType" : "void",
    "comment" : "\n     * Clears the instant application cookie for the calling app.\n     *\n     * @see #isInstantApp()\n     * @see #isInstantApp(String)\n     * @see #getInstantAppCookieMaxBytes()\n     * @see #getInstantAppCookie()\n     * @see #clearInstantAppCookie()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void updateInstantAppCookie(@Nullable byte[] cookie)",
    "returnType" : "void",
    "comment" : "\n     * Updates the instant application cookie for the calling app. Non\n     * instant apps and apps that were instant but were upgraded\n     * to normal apps can still access this API. For instant apps\n     * this cookie is cached for some time after uninstall while for\n     * normal apps the cookie is deleted after the app is uninstalled.\n     * The cookie is always present while the app is installed. The\n     * cookie size is limited by {@link #getInstantAppCookieMaxBytes()}.\n     * Passing <code>null</code> or an empty array clears the cookie.\n     * </p>\n     *\n     * @param cookie The cookie data.\n     *\n     * @see #isInstantApp()\n     * @see #isInstantApp(String)\n     * @see #getInstantAppCookieMaxBytes()\n     * @see #getInstantAppCookie()\n     * @see #clearInstantAppCookie()\n     *\n     * @throws IllegalArgumentException if the array exceeds max cookie size.\n     ",
    "links" : [ "#getInstantAppCookieMaxBytes()" ]
  }, {
    "name" : "public abstract boolean setInstantAppCookie(@Nullable byte[] cookie)",
    "returnType" : "boolean",
    "comment" : "\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String[] getSystemSharedLibraryNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Get a list of shared libraries that are available on the\n     * system.\n     *\n     * @return An array of shared library names that are\n     * available on the system, or null if none are installed.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<SharedLibraryInfo> getSharedLibraries(int flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * Get a list of shared libraries on the device.\n     *\n     * Use {@link #getSharedLibraries(PackageInfoFlags)} when long flags are needed.\n     *\n     * @param flags To filter the libraries to return.\n     * @return The shared library list.\n     *\n     * @see #MATCH_UNINSTALLED_PACKAGES\n     ",
    "links" : [ "#getSharedLibraries(PackageInfoFlags)" ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibraries(@NonNull PackageInfoFlags flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * See {@link #getSharedLibraries(int)}.\n     * @param flags\n     ",
    "links" : [ "#getSharedLibraries(int)" ]
  }, {
    "name" : "public abstract List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, @UserIdInt int userId)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * Get a list of shared libraries on the device.\n     *\n     * Use {@link #getSharedLibrariesAsUser(PackageInfoFlags, int)} when long flags are needed.\n     *\n     * @param flags To filter the libraries to return.\n     * @param userId The user to query for.\n     * @return The shared library list.\n     *\n     * @see #MATCH_FACTORY_ONLY\n     * @see #MATCH_KNOWN_PACKAGES\n     * @see #MATCH_ANY_USER\n     * @see #MATCH_UNINSTALLED_PACKAGES\n     *\n     * @hide\n     ",
    "links" : [ "#getSharedLibrariesAsUser(PackageInfoFlags" ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibrariesAsUser(@NonNull PackageInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * See {@link #getSharedLibrariesAsUser(int, int)}.\n     * @hide\n     ",
    "links" : [ "#getSharedLibrariesAsUser(int" ]
  }, {
    "name" : "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, int flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * Get the list of shared libraries declared by a package.\n     *\n     * Use {@link #getDeclaredSharedLibraries(String, PackageInfoFlags)} when long flags are needed.\n     *\n     * @param packageName the package name to query\n     * @param flags the flags to filter packages\n     * @return the shared library list\n     *\n     * @hide\n     ",
    "links" : [ "#getDeclaredSharedLibraries(String" ]
  }, {
    "name" : "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, @NonNull PackageInfoFlags flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "\n     * See {@link #getDeclaredSharedLibraries(String, int)}.\n     * @hide\n     ",
    "links" : [ "#getDeclaredSharedLibraries(String" ]
  }, {
    "name" : "public abstract String getServicesSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Get the name of the package hosting the services shared library.\n     * <p>\n     * Note that this package is no longer a shared library since Android R. It is now a package\n     * that hosts for a bunch of updatable services that the system binds to.\n     *\n     * @return The library host package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSharedSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Get the name of the package hosting the shared components shared library.\n     *\n     * @return The library host package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ChangedPackages getChangedPackages(@IntRange(from = 0) int sequenceNumber)",
    "returnType" : "ChangedPackages",
    "comment" : "\n     * Returns the names of the packages that have been changed\n     * [eg. added, removed or updated] since the given sequence\n     * number.\n     * <p>If no packages have been changed, returns <code>null</code>.\n     * <p>The sequence number starts at <code>0</code> and is\n     * reset every boot.\n     * @param sequenceNumber The first sequence number for which to retrieve package changes.\n     * @see android.provider.Settings.Global#BOOT_COUNT\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract FeatureInfo[] getSystemAvailableFeatures()",
    "returnType" : "FeatureInfo[]",
    "comment" : "\n     * Get a list of features that are available on the\n     * system.\n     *\n     * @return An array of FeatureInfo classes describing the features\n     * that are available on the system, or null if there are none(!!).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasSystemFeature(@NonNull String featureName)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given feature name is one of the available features as\n     * returned by {@link #getSystemAvailableFeatures()}. This tests for the\n     * presence of <em>any</em> version of the given feature name; use\n     * {@link #hasSystemFeature(String, int)} to check for a minimum version.\n     *\n     * @return Returns true if the devices supports the feature, else false.\n     ",
    "links" : [ "#hasSystemFeature(String", "#getSystemAvailableFeatures()" ]
  }, {
    "name" : "public abstract boolean hasSystemFeature(@NonNull String featureName, int version)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the given feature name and version is one of the available\n     * features as returned by {@link #getSystemAvailableFeatures()}. Since\n     * features are defined to always be backwards compatible, this returns true\n     * if the available feature version is greater than or equal to the\n     * requested version.\n     *\n     * @return Returns true if the devices supports the feature, else false.\n     ",
    "links" : [ "#getSystemAvailableFeatures()" ]
  }, {
    "name" : "public abstract ResolveInfo resolveActivity(@NonNull Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * Determine the best action to perform for a given Intent. This is how\n     * {@link Intent#resolveActivity} finds an activity if a class has not been\n     * explicitly specified.\n     * <p>\n     * <em>Note:</em> if using an implicit Intent (without an explicit\n     * ComponentName specified), be sure to consider whether to set the\n     * {@link #MATCH_DEFAULT_ONLY} only flag. You need to do so to resolve the\n     * activity in the same way that\n     * {@link android.content.Context#startActivity(Intent)} and\n     * {@link android.content.Intent#resolveActivity(PackageManager)\n     * Intent.resolveActivity(PackageManager)} do.\n     * </p>\n     *\n     * Use {@link #resolveActivity(Intent, ResolveInfoFlags)} when long flags are needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}.\n     * @return Returns a ResolveInfo object containing the final activity intent\n     *         that was determined to be the best action. Returns null if no\n     *         matching activity was found. If multiple matching activities are\n     *         found and there is no default set, returns a ResolveInfo object\n     *         containing something else, such as the activity resolver.\n     ",
    "links" : [ "#MATCH_DEFAULT_ONLY", "android.content.Intent#resolveActivity", "android.content.Intent#resolveActivity(PackageManager)", "#resolveActivity(Intent", "android.content.Context#startActivity(Intent)", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public ResolveInfo resolveActivity(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * See {@link #resolveActivity(Intent, int)}.\n     ",
    "links" : [ "#resolveActivity(Intent" ]
  }, {
    "name" : "public abstract ResolveInfo resolveActivityAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * Determine the best action to perform for a given Intent for a given user.\n     * This is how {@link Intent#resolveActivity} finds an activity if a class\n     * has not been explicitly specified.\n     * <p>\n     * <em>Note:</em> if using an implicit Intent (without an explicit\n     * ComponentName specified), be sure to consider whether to set the\n     * {@link #MATCH_DEFAULT_ONLY} only flag. You need to do so to resolve the\n     * activity in the same way that\n     * {@link android.content.Context#startActivity(Intent)} and\n     * {@link android.content.Intent#resolveActivity(PackageManager)\n     * Intent.resolveActivity(PackageManager)} do.\n     * </p>\n     *\n     * Use {@link #resolveActivityAsUser(Intent, ResolveInfoFlags, int)} when long flags are needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}.\n     * @param userId The user id.\n     * @return Returns a ResolveInfo object containing the final activity intent\n     *         that was determined to be the best action. Returns null if no\n     *         matching activity was found. If multiple matching activities are\n     *         found and there is no default set, returns a ResolveInfo object\n     *         containing something else, such as the activity resolver.\n     * @hide\n     ",
    "links" : [ "#MATCH_DEFAULT_ONLY", "android.content.Intent#resolveActivity", "android.content.Intent#resolveActivity(PackageManager)", "android.content.Context#startActivity(Intent)", "#resolveActivityAsUser(Intent", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public ResolveInfo resolveActivityAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * See {@link #resolveActivityAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#resolveActivityAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentActivities(@NonNull Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all activities that can be performed for the given intent.\n     *\n     * Use {@link #queryIntentActivities(Intent, ResolveInfoFlags)} when long flags are needed.\n     *\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}. Or, set\n     *            {@link #MATCH_ALL} to prevent any filtering of the results.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching activity, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveActivity}. If there are no matching activities, an\n     *         empty list is returned.\n     ",
    "links" : [ "#queryIntentActivities(Intent", "#MATCH_DEFAULT_ONLY", "#MATCH_ALL", "#resolveActivity", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivities(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentActivities(Intent, int)}.\n     ",
    "links" : [ "#queryIntentActivities(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all activities that can be performed for the given intent, for a\n     * specific user.\n     *\n     * Use {@link #queryIntentActivitiesAsUser(Intent, ResolveInfoFlags, int)} when long flags are\n     * needed.\n     *\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}. Or, set\n     *            {@link #MATCH_ALL} to prevent any filtering of the results.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching activity, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveActivity}. If there are no matching activities, an\n     *         empty list is returned.\n     * @hide\n     ",
    "links" : [ "#MATCH_DEFAULT_ONLY", "#queryIntentActivitiesAsUser(Intent", "#MATCH_ALL", "#resolveActivity", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentActivitiesAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentActivitiesAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all activities that can be performed for the given intent, for a\n     * specific user.\n     *\n     * Use {@link #queryIntentActivitiesAsUser(Intent, ResolveInfoFlags, UserHandle)} when long\n     * flags are needed.\n     *\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}. Or, set\n     *            {@link #MATCH_ALL} to prevent any filtering of the results.\n     * @param user The user being queried.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching activity, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveActivity}. If there are no matching activities, an\n     *         empty list is returned.\n     * @hide\n     ",
    "links" : [ "#MATCH_DEFAULT_ONLY", "#queryIntentActivitiesAsUser(Intent", "#MATCH_ALL", "#resolveActivity", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentActivitiesAsUser(Intent, int, UserHandle)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentActivitiesAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentActivityOptions(@Nullable ComponentName caller, @Nullable Intent[] specifics, @NonNull Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve a set of activities that should be presented to the user as\n     * similar options. This is like {@link #queryIntentActivities}, except it\n     * also allows you to supply a list of more explicit Intents that you would\n     * like to resolve to particular options, and takes care of returning the\n     * final ResolveInfo list in a reasonable order, with no duplicates, based\n     * on those inputs.\n     *\n     * Use {@link #queryIntentActivityOptions(ComponentName, List, Intent, ResolveInfoFlags)} when\n     * long flags are needed.\n     *\n     * @param caller The class name of the activity that is making the request.\n     *            This activity will never appear in the output list. Can be\n     *            null.\n     * @param specifics An array of Intents that should be resolved to the first\n     *            specific results. Can be null.\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned. The\n     *            most important is {@link #MATCH_DEFAULT_ONLY}, to limit the\n     *            resolution to only those activities that support the\n     *            {@link android.content.Intent#CATEGORY_DEFAULT}.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching activity. The list is ordered first by all of the\n     *         intents resolved in <var>specifics</var> and then any additional\n     *         activities that can handle <var>intent</var> but did not get\n     *         included by one of the <var>specifics</var> intents. If there are\n     *         no matching activities, an empty list is returned.\n     ",
    "links" : [ "#MATCH_DEFAULT_ONLY", "#queryIntentActivityOptions(ComponentName", "#queryIntentActivities", "android.content.Intent#CATEGORY_DEFAULT" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivityOptions(@Nullable ComponentName caller, @Nullable List<Intent> specifics, @NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentActivityOptions(ComponentName, Intent[], Intent, int)}.\n     ",
    "links" : [ "#queryIntentActivityOptions(ComponentName" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all receivers that can handle a broadcast of the given intent.\n     *\n     * Use {@link #queryBroadcastReceivers(Intent, ResolveInfoFlags)} when long flags are needed.\n     *\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching receiver, ordered from best to worst. If there are\n     *         no matching receivers, an empty list or null is returned.\n     ",
    "links" : [ "#queryBroadcastReceivers(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryBroadcastReceivers(Intent, int)}.\n     ",
    "links" : [ "#queryBroadcastReceivers(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, int flags, UserHandle userHandle)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all receivers that can handle a broadcast of the given intent,\n     * for a specific user.\n     *\n     * Use {@link #queryBroadcastReceiversAsUser(Intent, ResolveInfoFlags, UserHandle)} when long\n     * flags are needed.\n     *\n     * @param intent The desired intent as per resolveActivity().\n     * @param flags Additional option flags to modify the data returned.\n     * @param userHandle UserHandle of the user being queried.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching receiver, ordered from best to worst. If there are\n     *         no matching receivers, an empty list or null is returned.\n     * @hide\n     ",
    "links" : [ "#queryBroadcastReceiversAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle userHandle)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryBroadcastReceiversAsUser(Intent, int, UserHandle)}.\n     * @hide\n     ",
    "links" : [ "#queryBroadcastReceiversAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * @hide\n     * Use {@link #queryBroadcastReceiversAsUser(Intent, ResolveInfoFlags, int)} when long flags are\n     * needed.\n     ",
    "links" : [ "#queryBroadcastReceiversAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryBroadcastReceiversAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#queryBroadcastReceiversAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @deprecated @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract ResolveInfo resolveService(@NonNull Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * Determine the best service to handle for a given Intent.\n     *\n     * Use {@link #resolveService(Intent, ResolveInfoFlags)} when long flags are needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned.\n     * @return Returns a ResolveInfo object containing the final service intent\n     *         that was determined to be the best action. Returns null if no\n     *         matching service was found.\n     ",
    "links" : [ "#resolveService(Intent" ]
  }, {
    "name" : "public ResolveInfo resolveService(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * See {@link #resolveService(Intent, int)}.\n     ",
    "links" : [ "#resolveService(Intent" ]
  }, {
    "name" : "public abstract ResolveInfo resolveServiceAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * @hide\n     * Use {@link #resolveServiceAsUser(Intent, ResolveInfoFlags, int)} when long flags are needed.\n     ",
    "links" : [ "#resolveServiceAsUser(Intent" ]
  }, {
    "name" : "public ResolveInfo resolveServiceAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * See {@link #resolveServiceAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#resolveServiceAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentServices(@NonNull Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all services that can match the given intent.\n     *\n     * Use {@link #queryIntentServices(Intent, ResolveInfoFlags)} when long flags are needed.\n     *\n     * @param intent The desired intent as per resolveService().\n     * @param flags Additional option flags to modify the data returned.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching service, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveService}. If there are no matching services, an\n     *         empty list or null is returned.\n     ",
    "links" : [ "#resolveService", "#queryIntentServices(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServices(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentServices(Intent, int)}.\n     ",
    "links" : [ "#queryIntentServices(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all services that can match the given intent for a given user.\n     *\n     * Use {@link #queryIntentServicesAsUser(Intent, ResolveInfoFlags, int)} when long flags are\n     * needed.\n     *\n     * @param intent The desired intent as per resolveService().\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user id.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching service, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveService}. If there are no matching services, an\n     *         empty list or null is returned.\n     * @hide\n     ",
    "links" : [ "#queryIntentServicesAsUser(Intent", "#resolveService" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentServicesAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentServicesAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all services that can match the given intent for a given user.\n     *\n     * Use {@link #queryIntentServicesAsUser(Intent, ResolveInfoFlags, UserHandle)} when long flags\n     * are needed.\n     *\n     * @param intent The desired intent as per resolveService().\n     * @param flags Additional option flags to modify the data returned.\n     * @param user The user being queried.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching service, ordered from best to worst. In other\n     *         words, the first item is what would be returned by\n     *         {@link #resolveService}. If there are no matching services, an\n     *         empty list or null is returned.\n     * @hide\n     ",
    "links" : [ "#queryIntentServicesAsUser(Intent", "#resolveService" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentServicesAsUser(Intent, int, UserHandle)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentServicesAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all providers that can match the given intent.\n     *\n     * Use {@link #queryIntentContentProvidersAsUser(Intent, ResolveInfoFlags, int)} when long flags\n     * are needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user id.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching provider, ordered from best to worst. If there are\n     *         no matching services, an empty list or null is returned.\n     * @hide\n     ",
    "links" : [ "#queryIntentContentProvidersAsUser(Intent" ]
  }, {
    "name" : "protected List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentContentProvidersAsUser(Intent, int, int)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentContentProvidersAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all providers that can match the given intent.\n     *\n     * Use {@link #queryIntentContentProvidersAsUser(Intent, ResolveInfoFlags, UserHandle)} when\n     * long flags are needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned.\n     * @param user The user being queried.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching provider, ordered from best to worst. If there are\n     *         no matching services, an empty list or null is returned.\n     * @hide\n     ",
    "links" : [ "#queryIntentContentProvidersAsUser(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentContentProvidersAsUser(Intent, int, UserHandle)}.\n     * @hide\n     ",
    "links" : [ "#queryIntentContentProvidersAsUser(Intent" ]
  }, {
    "name" : "public abstract List<ResolveInfo> queryIntentContentProviders(@NonNull Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * Retrieve all providers that can match the given intent.\n     *\n     * Use {@link #queryIntentContentProviders(Intent, ResolveInfoFlags)} when long flags are\n     * needed.\n     *\n     * @param intent An intent containing all of the desired specification\n     *            (action, data, type, category, and/or component).\n     * @param flags Additional option flags to modify the data returned.\n     * @return Returns a List of ResolveInfo objects containing one entry for\n     *         each matching provider, ordered from best to worst. If there are\n     *         no matching services, an empty list or null is returned.\n     ",
    "links" : [ "#queryIntentContentProviders(Intent" ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProviders(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "\n     * See {@link #queryIntentContentProviders(Intent, int)}.\n     ",
    "links" : [ "#queryIntentContentProviders(Intent" ]
  }, {
    "name" : "public abstract ProviderInfo resolveContentProvider(@NonNull String authority, int flags)",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * Find a single content provider by its authority.\n     * <p>\n     * Example:<p>\n     * <pre>\n     * Uri uri = Uri.parse(\"content://com.example.app.provider/table1\");\n     * ProviderInfo info = packageManager.resolveContentProvider(uri.getAuthority(), flags);\n     * </pre>\n     *\n     * Use {@link #resolveContentProvider(String, ComponentInfoFlags)} when long flags are needed.\n     *\n     * @param authority The authority of the provider to find.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A {@link ProviderInfo} object containing information about the\n     *         provider. If a provider was not found, returns null.\n     ",
    "links" : [ "#resolveContentProvider(String", "android.content.pm.ProviderInfo" ]
  }, {
    "name" : "public ProviderInfo resolveContentProvider(@NonNull String authority, @NonNull ComponentInfoFlags flags)",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * See {@link #resolveContentProvider(String, int)}.\n     ",
    "links" : [ "#resolveContentProvider(String" ]
  }, {
    "name" : "public abstract ProviderInfo resolveContentProviderAsUser(@NonNull String providerName, int flags, @UserIdInt int userId)",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * Find a single content provider by its base path name.\n     *\n     * Use {@link #resolveContentProviderAsUser(String, ComponentInfoFlags, int)} when long flags\n     * are needed.\n     *\n     * @param providerName The name of the provider to find.\n     * @param flags Additional option flags to modify the data returned.\n     * @param userId The user id.\n     * @return A {@link ProviderInfo} object containing information about the\n     *         provider. If a provider was not found, returns null.\n     * @hide\n     ",
    "links" : [ "#resolveContentProviderAsUser(String", "android.content.pm.ProviderInfo" ]
  }, {
    "name" : "public ProviderInfo resolveContentProviderAsUser(@NonNull String providerName, @NonNull ComponentInfoFlags flags, @UserIdInt int userId)",
    "returnType" : "ProviderInfo",
    "comment" : "\n     * See {@link #resolveContentProviderAsUser(String, int, int)}.\n     * @hide\n     ",
    "links" : [ "#resolveContentProviderAsUser(String" ]
  }, {
    "name" : "public abstract List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, int flags)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "\n     * Retrieve content provider information.\n     * <p>\n     * <em>Note: unlike most other methods, an empty result set is indicated\n     * by a null return instead of an empty list.</em>\n     *\n     * Use {@link #queryContentProviders(String, int, ComponentInfoFlags)} when long flags are\n     * needed.\n     *\n     * @param processName If non-null, limits the returned providers to only\n     *            those that are hosted by the given process. If null, all\n     *            content providers are returned.\n     * @param uid If <var>processName</var> is non-null, this is the required\n     *            uid owning the requested content providers.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A list of {@link ProviderInfo} objects containing one entry for\n     *         each provider either matching <var>processName</var> or, if\n     *         <var>processName</var> is null, all known content providers.\n     *         <em>If there are no matching providers, null is returned.</em>\n     ",
    "links" : [ "#queryContentProviders(String", "android.content.pm.ProviderInfo" ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, @NonNull ComponentInfoFlags flags)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "\n     * See {@link #queryContentProviders(String, int, int)}.\n     ",
    "links" : [ "#queryContentProviders(String" ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, int flags, String metaDataKey)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "\n     * Same as {@link #queryContentProviders}, except when {@code metaDataKey} is not null,\n     * it only returns providers which have metadata with the {@code metaDataKey} key.\n     *\n     * <p>DO NOT USE the {@code metaDataKey} parameter, unless you're the contacts provider.\n     * You really shouldn't need it.  Other apps should use {@link #queryIntentContentProviders}\n     * instead.\n     *\n     * <p>The {@code metaDataKey} parameter was added to allow the contacts provider to quickly\n     * scan the GAL providers on the device.  Unfortunately the discovery protocol used metadata\n     * to mark GAL providers, rather than intent filters, so we can't use\n     * {@link #queryIntentContentProviders} for that.\n     *\n     * Use {@link #queryContentProviders(String, int, ComponentInfoFlags, String)} when long flags\n     * are needed.\n     *\n     * @hide\n     ",
    "links" : [ "#queryContentProviders(String", "#queryIntentContentProviders", "#queryContentProviders" ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, @NonNull ComponentInfoFlags flags, @Nullable String metaDataKey)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "\n     * See {@link #queryContentProviders(String, int, int, String)}.\n     * @hide\n     ",
    "links" : [ "#queryContentProviders(String" ]
  }, {
    "name" : "public abstract InstrumentationInfo getInstrumentationInfo(@NonNull ComponentName className, @InstrumentationInfoFlags int flags) throws NameNotFoundException",
    "returnType" : "InstrumentationInfo",
    "comment" : "\n     * Retrieve all of the information we know about a particular\n     * instrumentation class.\n     *\n     * @param className The full name (i.e.\n     *            com.google.apps.contacts.InstrumentList) of an Instrumentation\n     *            class.\n     * @param flags Additional option flags to modify the data returned.\n     * @return An {@link InstrumentationInfo} object containing information\n     *         about the instrumentation.\n     * @throws NameNotFoundException if a package with the given name cannot be\n     *             found on the system.\n     ",
    "links" : [ "android.content.pm.InstrumentationInfo" ]
  }, {
    "name" : "public abstract List<InstrumentationInfo> queryInstrumentation(@NonNull String targetPackage, @InstrumentationInfoFlags int flags)",
    "returnType" : "List<InstrumentationInfo>",
    "comment" : "\n     * Retrieve information about available instrumentation code. May be used to\n     * retrieve either all instrumentation code, or only the code targeting a\n     * particular package.\n     *\n     * @param targetPackage If null, all instrumentation is returned; only the\n     *            instrumentation targeting this package name is returned.\n     * @param flags Additional option flags to modify the data returned.\n     * @return A list of {@link InstrumentationInfo} objects containing one\n     *         entry for each matching instrumentation. If there are no\n     *         instrumentation available, returns an empty list.\n     ",
    "links" : [ "android.content.pm.InstrumentationInfo" ]
  }, {
    "name" : "public abstract Drawable getDrawable(@NonNull String packageName, @DrawableRes int resid, @Nullable ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve an image from a package.  This is a low-level API used by\n     * the various package manager info structures (such as\n     * {@link ComponentInfo} to implement retrieval of their associated\n     * icon.\n     *\n     * @param packageName The name of the package that this icon is coming from.\n     * Cannot be null.\n     * @param resid The resource identifier of the desired image.  Cannot be 0.\n     * @param appInfo Overall information about <var>packageName</var>.  This\n     * may be null, in which case the application information will be retrieved\n     * for you if needed; if you already have this information around, it can\n     * be much more efficient to supply it here.\n     *\n     * @return Returns a Drawable holding the requested image.  Returns null if\n     * an image could not be found for any reason.\n     ",
    "links" : [ "android.content.pm.ComponentInfo" ]
  }, {
    "name" : "public abstract Drawable getActivityIcon(@NonNull ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the icon associated with an activity.  Given the full name of\n     * an activity, retrieves the information about it and calls\n     * {@link ComponentInfo#loadIcon ComponentInfo.loadIcon()} to return its icon.\n     * If the activity cannot be found, NameNotFoundException is thrown.\n     *\n     * @param activityName Name of the activity whose icon is to be retrieved.\n     *\n     * @return Returns the image of the icon, or the default activity icon if\n     * it could not be found.  Does not return null.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * activity could not be loaded.\n     *\n     * @see #getActivityIcon(Intent)\n     ",
    "links" : [ "android.content.pm.ComponentInfo#loadIcon" ]
  }, {
    "name" : "public abstract Drawable getActivityIcon(@NonNull Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the icon associated with an Intent.  If intent.getClassName() is\n     * set, this simply returns the result of\n     * getActivityIcon(intent.getClassName()).  Otherwise it resolves the intent's\n     * component and returns the icon associated with the resolved component.\n     * If intent.getClassName() cannot be found or the Intent cannot be resolved\n     * to a component, NameNotFoundException is thrown.\n     *\n     * @param intent The intent for which you would like to retrieve an icon.\n     *\n     * @return Returns the image of the icon, or the default activity icon if\n     * it could not be found.  Does not return null.\n     * @throws NameNotFoundException Thrown if the resources for application\n     * matching the given intent could not be loaded.\n     *\n     * @see #getActivityIcon(ComponentName)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getActivityBanner(@NonNull ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the banner associated with an activity. Given the full name of\n     * an activity, retrieves the information about it and calls\n     * {@link ComponentInfo#loadIcon ComponentInfo.loadIcon()} to return its\n     * banner. If the activity cannot be found, NameNotFoundException is thrown.\n     *\n     * @param activityName Name of the activity whose banner is to be retrieved.\n     * @return Returns the image of the banner, or null if the activity has no\n     *         banner specified.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     *             activity could not be loaded.\n     * @see #getActivityBanner(Intent)\n     ",
    "links" : [ "android.content.pm.ComponentInfo#loadIcon" ]
  }, {
    "name" : "public abstract Drawable getActivityBanner(@NonNull Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the banner associated with an Intent. If intent.getClassName()\n     * is set, this simply returns the result of\n     * getActivityBanner(intent.getClassName()). Otherwise it resolves the\n     * intent's component and returns the banner associated with the resolved\n     * component. If intent.getClassName() cannot be found or the Intent cannot\n     * be resolved to a component, NameNotFoundException is thrown.\n     *\n     * @param intent The intent for which you would like to retrieve a banner.\n     * @return Returns the image of the banner, or null if the activity has no\n     *         banner specified.\n     * @throws NameNotFoundException Thrown if the resources for application\n     *             matching the given intent could not be loaded.\n     * @see #getActivityBanner(ComponentName)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getDefaultActivityIcon()",
    "returnType" : "Drawable",
    "comment" : "\n     * Return the generic icon for an activity that is used when no specific\n     * icon is defined.\n     *\n     * @return Drawable Image of the icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationIcon(@NonNull ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the icon associated with an application.  If it has not defined\n     * an icon, the default app icon is returned.  Does not return null.\n     *\n     * @param info Information about application being queried.\n     *\n     * @return Returns the image of the icon, or the default application icon\n     * if it could not be found.\n     *\n     * @see #getApplicationIcon(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationIcon(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the icon associated with an application.  Given the name of the\n     * application's package, retrieves the information about it and calls\n     * getApplicationIcon() to return its icon. If the application cannot be\n     * found, NameNotFoundException is thrown.\n     *\n     * @param packageName Name of the package whose application icon is to be\n     *                    retrieved.\n     *\n     * @return Returns the image of the icon, or the default application icon\n     * if it could not be found.  Does not return null.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded.\n     *\n     * @see #getApplicationIcon(ApplicationInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationBanner(@NonNull ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the banner associated with an application.\n     *\n     * @param info Information about application being queried.\n     * @return Returns the image of the banner or null if the application has no\n     *         banner specified.\n     * @see #getApplicationBanner(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationBanner(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the banner associated with an application. Given the name of the\n     * application's package, retrieves the information about it and calls\n     * getApplicationIcon() to return its banner. If the application cannot be\n     * found, NameNotFoundException is thrown.\n     *\n     * @param packageName Name of the package whose application banner is to be\n     *            retrieved.\n     * @return Returns the image of the banner or null if the application has no\n     *         banner specified.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     *             application could not be loaded.\n     * @see #getApplicationBanner(ApplicationInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getActivityLogo(@NonNull ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the logo associated with an activity. Given the full name of an\n     * activity, retrieves the information about it and calls\n     * {@link ComponentInfo#loadLogo ComponentInfo.loadLogo()} to return its\n     * logo. If the activity cannot be found, NameNotFoundException is thrown.\n     *\n     * @param activityName Name of the activity whose logo is to be retrieved.\n     * @return Returns the image of the logo or null if the activity has no logo\n     *         specified.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     *             activity could not be loaded.\n     * @see #getActivityLogo(Intent)\n     ",
    "links" : [ "android.content.pm.ComponentInfo#loadLogo" ]
  }, {
    "name" : "public abstract Drawable getActivityLogo(@NonNull Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the logo associated with an Intent.  If intent.getClassName() is\n     * set, this simply returns the result of\n     * getActivityLogo(intent.getClassName()).  Otherwise it resolves the intent's\n     * component and returns the logo associated with the resolved component.\n     * If intent.getClassName() cannot be found or the Intent cannot be resolved\n     * to a component, NameNotFoundException is thrown.\n     *\n     * @param intent The intent for which you would like to retrieve a logo.\n     *\n     * @return Returns the image of the logo, or null if the activity has no\n     * logo specified.\n     *\n     * @throws NameNotFoundException Thrown if the resources for application\n     * matching the given intent could not be loaded.\n     *\n     * @see #getActivityLogo(ComponentName)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationLogo(@NonNull ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the logo associated with an application.  If it has not specified\n     * a logo, this method returns null.\n     *\n     * @param info Information about application being queried.\n     *\n     * @return Returns the image of the logo, or null if no logo is specified\n     * by the application.\n     *\n     * @see #getApplicationLogo(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getApplicationLogo(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the logo associated with an application.  Given the name of the\n     * application's package, retrieves the information about it and calls\n     * getApplicationLogo() to return its logo. If the application cannot be\n     * found, NameNotFoundException is thrown.\n     *\n     * @param packageName Name of the package whose application logo is to be\n     *                    retrieved.\n     *\n     * @return Returns the image of the logo, or null if no application logo\n     * has been specified.\n     *\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded.\n     *\n     * @see #getApplicationLogo(ApplicationInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable getUserBadgedIcon(@NonNull Drawable drawable, @NonNull UserHandle user)",
    "returnType" : "Drawable",
    "comment" : "\n     * If the target user is a managed profile, then this returns a badged copy of the given icon\n     * to be able to distinguish it from the original icon. For badging an arbitrary drawable use\n     * {@link #getUserBadgedDrawableForDensity(\n     * android.graphics.drawable.Drawable, UserHandle, android.graphics.Rect, int)}.\n     * <p>\n     * If the original drawable is a BitmapDrawable and the backing bitmap is\n     * mutable as per {@link android.graphics.Bitmap#isMutable()}, the badging\n     * is performed in place and the original drawable is returned.\n     * </p>\n     *\n     * @param drawable The drawable to badge.\n     * @param user The target user.\n     * @return A drawable that combines the original icon and a badge as\n     *         determined by the system.\n     ",
    "links" : [ "#getUserBadgedDrawableForDensity(", "android.graphics.Bitmap#isMutable()" ]
  }, {
    "name" : "public abstract Drawable getUserBadgedDrawableForDensity(@NonNull Drawable drawable, @NonNull UserHandle user, @Nullable Rect badgeLocation, int badgeDensity)",
    "returnType" : "Drawable",
    "comment" : "\n     * If the target user is a managed profile of the calling user or the caller\n     * is itself a managed profile, then this returns a badged copy of the given\n     * drawable allowing the user to distinguish it from the original drawable.\n     * The caller can specify the location in the bounds of the drawable to be\n     * badged where the badge should be applied as well as the density of the\n     * badge to be used.\n     * <p>\n     * If the original drawable is a BitmapDrawable and the backing bitmap is\n     * mutable as per {@link android.graphics.Bitmap#isMutable()}, the badging\n     * is performed in place and the original drawable is returned.\n     * </p>\n     *\n     * @param drawable The drawable to badge.\n     * @param user The target user.\n     * @param badgeLocation Where in the bounds of the badged drawable to place\n     *         the badge. If it's {@code null}, the badge is applied on top of the entire\n     *         drawable being badged.\n     * @param badgeDensity The optional desired density for the badge as per\n     *         {@link android.util.DisplayMetrics#densityDpi}. If it's not positive,\n     *         the density of the display is used.\n     * @return A drawable that combines the original drawable and a badge as\n     *         determined by the system.\n     ",
    "links" : [ "android.util.DisplayMetrics#densityDpi", "android.graphics.Bitmap#isMutable()" ]
  }, {
    "name" : "public abstract Drawable getUserBadgeForDensity(@NonNull UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * If the target user is a managed profile of the calling user or the caller\n     * is itself a managed profile, then this returns a drawable to use as a small\n     * icon to include in a view to distinguish it from the original icon.\n     *\n     * @param user The target user.\n     * @param density The optional desired density for the badge as per\n     *         {@link android.util.DisplayMetrics#densityDpi}. If not provided\n     *         the density of the current display is used.\n     * @return the drawable or null if no drawable is required.\n     * @hide\n     ",
    "links" : [ "android.util.DisplayMetrics#densityDpi" ]
  }, {
    "name" : "public abstract Drawable getUserBadgeForDensityNoBackground(@NonNull UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : "\n     * If the target user is a managed profile of the calling user or the caller\n     * is itself a managed profile, then this returns a drawable to use as a small\n     * icon to include in a view to distinguish it from the original icon. This version\n     * doesn't have background protection and should be used over a light background instead of\n     * a badge.\n     *\n     * @param user The target user.\n     * @param density The optional desired density for the badge as per\n     *         {@link android.util.DisplayMetrics#densityDpi}. If not provided\n     *         the density of the current display is used.\n     * @return the drawable or null if no drawable is required.\n     * @hide\n     ",
    "links" : [ "android.util.DisplayMetrics#densityDpi" ]
  }, {
    "name" : "public abstract CharSequence getUserBadgedLabel(@NonNull CharSequence label, @NonNull UserHandle user)",
    "returnType" : "CharSequence",
    "comment" : "\n     * If the target user is a managed profile of the calling user or the caller\n     * is itself a managed profile, then this returns a copy of the label with\n     * badging for accessibility services like talkback. E.g. passing in \"Email\"\n     * and it might return \"Work Email\" for Email in the work profile.\n     *\n     * @param label The label to change.\n     * @param user The target user.\n     * @return A label that combines the original label and a badge as\n     *         determined by the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getText(@NonNull String packageName, @StringRes int resid, @Nullable ApplicationInfo appInfo)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve text from a package.  This is a low-level API used by\n     * the various package manager info structures (such as\n     * {@link ComponentInfo} to implement retrieval of their associated\n     * labels and other text.\n     *\n     * @param packageName The name of the package that this text is coming from.\n     * Cannot be null.\n     * @param resid The resource identifier of the desired text.  Cannot be 0.\n     * @param appInfo Overall information about <var>packageName</var>.  This\n     * may be null, in which case the application information will be retrieved\n     * for you if needed; if you already have this information around, it can\n     * be much more efficient to supply it here.\n     *\n     * @return Returns a CharSequence holding the requested text.  Returns null\n     * if the text could not be found for any reason.\n     ",
    "links" : [ "android.content.pm.ComponentInfo" ]
  }, {
    "name" : "public abstract XmlResourceParser getXml(@NonNull String packageName, @XmlRes int resid, @Nullable ApplicationInfo appInfo)",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Retrieve an XML file from a package.  This is a low-level API used to\n     * retrieve XML meta data.\n     *\n     * @param packageName The name of the package that this xml is coming from.\n     * Cannot be null.\n     * @param resid The resource identifier of the desired xml.  Cannot be 0.\n     * @param appInfo Overall information about <var>packageName</var>.  This\n     * may be null, in which case the application information will be retrieved\n     * for you if needed; if you already have this information around, it can\n     * be much more efficient to supply it here.\n     *\n     * @return Returns an XmlPullParser allowing you to parse out the XML\n     * data.  Returns null if the xml resource could not be found for any\n     * reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CharSequence getApplicationLabel(@NonNull ApplicationInfo info)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the label to use for this application.\n     *\n     * @return Returns a {@link CharSequence} containing the label associated with\n     * this application, or its name the  item does not have a label.\n     * @param info The {@link ApplicationInfo} of the application to get the label of.\n     ",
    "links" : [ "CharSequence", "android.content.pm.ApplicationInfo" ]
  }, {
    "name" : "public abstract Resources getResourcesForActivity(@NonNull ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "\n     * Retrieve the resources associated with an activity.  Given the full\n     * name of an activity, retrieves the information about it and calls\n     * getResources() to return its application's resources.  If the activity\n     * cannot be found, NameNotFoundException is thrown.\n     *\n     * @param activityName Name of the activity whose resources are to be\n     *                     retrieved.\n     *\n     * @return Returns the application's Resources.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded.\n     *\n     * @see #getResourcesForApplication(ApplicationInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Resources getResourcesForApplication(@NonNull ApplicationInfo app) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "\n     * Retrieve the resources for an application.  Throws NameNotFoundException\n     * if the package is no longer installed.\n     *\n     * @param app Information about the desired application.\n     *\n     * @return Returns the application's Resources.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded (most likely because it was uninstalled).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(@NonNull ApplicationInfo app, @Nullable Configuration configuration) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "\n     * Retrieve the resources for an application for the provided configuration.\n     *\n     * @param app Information about the desired application.\n     * @param configuration Overridden configuration when loading the Resources\n     *\n     * @return Returns the application's Resources.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded (most likely because it was uninstalled).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Resources getResourcesForApplication(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "\n     * Retrieve the resources associated with an application.  Given the full\n     * package name of an application, retrieves the information about it and\n     * calls getResources() to return its application's resources.  If the\n     * appPackageName cannot be found, NameNotFoundException is thrown.\n     *\n     * @param packageName Package name of the application whose resources\n     *                       are to be retrieved.\n     *\n     * @return Returns the application's Resources.\n     * @throws NameNotFoundException Thrown if the resources for the given\n     * application could not be loaded.\n     *\n     * @see #getResourcesForApplication(ApplicationInfo)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Resources getResourcesForApplicationAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "\n     * Please don't use this function because it is no longer supported.\n     *\n     * @deprecated Instead of using this function, please use\n     *             {@link Context#createContextAsUser(UserHandle, int)} to create the specified user\n     *             context, {@link Context#getPackageManager()} to get PackageManager instance for\n     *             the specified user, and then\n     *             {@link PackageManager#getResourcesForApplication(String)} to get the same\n     *             Resources instance.\n     * @see {@link Context#createContextAsUser(android.os.UserHandle, int)}\n     * @see {@link Context#getPackageManager()}\n     * @see {@link android.content.pm.PackageManager#getResourcesForApplication(java.lang.String)}\n     * TODO(b/170852794): mark maxTargetSdk as {@code Build.VERSION_CODES.S}\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getResourcesForApplication(String)", "android.content.Context#createContextAsUser(android.os.UserHandle", "android.content.Context#createContextAsUser(UserHandle", "android.content.pm.PackageManager#getResourcesForApplication(java.lang.String)", "android.content.Context#getPackageManager()" ]
  }, {
    "name" : "public PackageInfo getPackageArchiveInfo(@NonNull String archiveFilePath, int flags)",
    "returnType" : "PackageInfo",
    "comment" : "\n     * Retrieve overall information about an application package defined in a\n     * package archive file\n     *\n     * Use {@link #getPackageArchiveInfo(String, PackageInfoFlags)} when long flags are needed.\n     *\n     * @param archiveFilePath The path to the archive file\n     * @param flags Additional option flags to modify the data returned.\n     * @return A PackageInfo object containing information about the package\n     *         archive. If the package could not be parsed, returns null.\n     ",
    "links" : [ "#getPackageArchiveInfo(String" ]
  }, {
    "name" : "public PackageInfo getPackageArchiveInfo(@NonNull String archiveFilePath, @NonNull PackageInfoFlags flags)",
    "returnType" : "PackageInfo",
    "comment" : "\n     * See {@link #getPackageArchiveInfo(String, int)}.\n     ",
    "links" : [ "#getPackageArchiveInfo(String" ]
  }, {
    "name" : "public abstract int installExistingPackage(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * If there is already an application with the given package name installed\n     * on the system for other users, also install it for the calling user.\n     * @hide\n     *\n     * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.\n     ",
    "links" : [ "android.content.pm.PackageInstaller#installExistingPackage()" ]
  }, {
    "name" : "public abstract int installExistingPackage(@NonNull String packageName, @InstallReason int installReason) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * If there is already an application with the given package name installed\n     * on the system for other users, also install it for the calling user.\n     * @hide\n     *\n     * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.\n     ",
    "links" : [ "android.content.pm.PackageInstaller#installExistingPackage()" ]
  }, {
    "name" : "public abstract int installExistingPackageAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * If there is already an application with the given package name installed\n     * on the system for other users, also install it for the specified user.\n     * @hide\n     *\n     * @deprecated use {@link PackageInstaller#installExistingPackage()} instead.\n     ",
    "links" : [ "android.content.pm.PackageInstaller#installExistingPackage()" ]
  }, {
    "name" : "public abstract void verifyPendingInstall(int id, int verificationCode)",
    "returnType" : "void",
    "comment" : "\n     * Allows a package listening to the\n     * {@link Intent#ACTION_PACKAGE_NEEDS_VERIFICATION package verification\n     * broadcast} to respond to the package manager. The response must include\n     * the {@code verificationCode} which is one of\n     * {@link PackageManager#VERIFICATION_ALLOW} or\n     * {@link PackageManager#VERIFICATION_REJECT}.\n     *\n     * @param id pending package identifier as passed via the\n     *            {@link PackageManager#EXTRA_VERIFICATION_ID} Intent extra.\n     * @param verificationCode either {@link PackageManager#VERIFICATION_ALLOW}\n     *            or {@link PackageManager#VERIFICATION_REJECT}.\n     * @throws SecurityException if the caller does not have the\n     *            PACKAGE_VERIFICATION_AGENT permission.\n     ",
    "links" : [ "android.content.pm.PackageManager#VERIFICATION_ALLOW", "android.content.pm.PackageManager#EXTRA_VERIFICATION_ID", "android.content.Intent#ACTION_PACKAGE_NEEDS_VERIFICATION", "android.content.pm.PackageManager#VERIFICATION_REJECT" ]
  }, {
    "name" : "public abstract void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)",
    "returnType" : "void",
    "comment" : "\n     * Allows a package listening to the\n     * {@link Intent#ACTION_PACKAGE_NEEDS_VERIFICATION package verification\n     * broadcast} to extend the default timeout for a response and declare what\n     * action to perform after the timeout occurs. The response must include\n     * the {@code verificationCodeAtTimeout} which is one of\n     * {@link PackageManager#VERIFICATION_ALLOW} or\n     * {@link PackageManager#VERIFICATION_REJECT}.\n     *\n     * This method may only be called once per package id. Additional calls\n     * will have no effect.\n     *\n     * @param id pending package identifier as passed via the\n     *            {@link PackageManager#EXTRA_VERIFICATION_ID} Intent extra.\n     * @param verificationCodeAtTimeout either\n     *            {@link PackageManager#VERIFICATION_ALLOW} or\n     *            {@link PackageManager#VERIFICATION_REJECT}. If\n     *            {@code verificationCodeAtTimeout} is neither\n     *            {@link PackageManager#VERIFICATION_ALLOW} or\n     *            {@link PackageManager#VERIFICATION_REJECT}, then\n     *            {@code verificationCodeAtTimeout} will default to\n     *            {@link PackageManager#VERIFICATION_REJECT}.\n     * @param millisecondsToDelay the amount of time requested for the timeout.\n     *            Must be positive and less than\n     *            {@link PackageManager#MAXIMUM_VERIFICATION_TIMEOUT}. If\n     *            {@code millisecondsToDelay} is out of bounds,\n     *            {@code millisecondsToDelay} will be set to the closest in\n     *            bounds value; namely, 0 or\n     *            {@link PackageManager#MAXIMUM_VERIFICATION_TIMEOUT}.\n     * @throws SecurityException if the caller does not have the\n     *            PACKAGE_VERIFICATION_AGENT permission.\n     ",
    "links" : [ "android.content.pm.PackageManager#VERIFICATION_ALLOW", "android.content.pm.PackageManager#EXTRA_VERIFICATION_ID", "android.content.Intent#ACTION_PACKAGE_NEEDS_VERIFICATION", "android.content.pm.PackageManager#MAXIMUM_VERIFICATION_TIMEOUT", "android.content.pm.PackageManager#VERIFICATION_REJECT" ]
  }, {
    "name" : "public abstract void verifyIntentFilter(int verificationId, int verificationCode, @NonNull List<String> failedDomains)",
    "returnType" : "void",
    "comment" : "\n     * Allows a package listening to the\n     * {@link Intent#ACTION_INTENT_FILTER_NEEDS_VERIFICATION} intent filter verification\n     * broadcast to respond to the package manager. The response must include\n     * the {@code verificationCode} which is one of\n     * {@link PackageManager#INTENT_FILTER_VERIFICATION_SUCCESS} or\n     * {@link PackageManager#INTENT_FILTER_VERIFICATION_FAILURE}.\n     *\n     * @param verificationId pending package identifier as passed via the\n     *            {@link PackageManager#EXTRA_VERIFICATION_ID} Intent extra.\n     * @param verificationCode either {@link PackageManager#INTENT_FILTER_VERIFICATION_SUCCESS}\n     *            or {@link PackageManager#INTENT_FILTER_VERIFICATION_FAILURE}.\n     * @param failedDomains a list of failed domains if the verificationCode is\n     *            {@link PackageManager#INTENT_FILTER_VERIFICATION_FAILURE}, otherwise null;\n     * @throws SecurityException if the caller does not have the\n     *            INTENT_FILTER_VERIFICATION_AGENT permission.\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#INTENT_FILTER_VERIFICATION_SUCCESS", "android.content.pm.PackageManager#INTENT_FILTER_VERIFICATION_FAILURE", "android.content.Intent#ACTION_INTENT_FILTER_NEEDS_VERIFICATION", "android.content.pm.PackageManager#EXTRA_VERIFICATION_ID", "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "public abstract int getIntentVerificationStatusAsUser(@NonNull String packageName, @UserIdInt int userId)",
    "returnType" : "int",
    "comment" : "\n     * Get the status of a Domain Verification Result for an IntentFilter. This is\n     * related to the {@link android.content.IntentFilter#setAutoVerify(boolean)} and\n     * {@link android.content.IntentFilter#getAutoVerify()}\n     *\n     * This is used by the ResolverActivity to change the status depending on what the User select\n     * in the Disambiguation Dialog and also used by the Settings App for changing the default App\n     * for a domain.\n     *\n     * @param packageName The package name of the Activity associated with the IntentFilter.\n     * @param userId The user id.\n     *\n     * @return The status to set to. This can be\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK} or\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS} or\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER} or\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED}\n     *\n     * @deprecated Use {@link DomainVerificationManager} APIs.\n     * @hide\n     ",
    "links" : [ "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS", "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER", "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED", "android.content.pm.verify.domain.DomainVerificationManager", "android.content.IntentFilter#getAutoVerify()", "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK", "android.content.IntentFilter#setAutoVerify(boolean)" ]
  }, {
    "name" : "public abstract boolean updateIntentVerificationStatusAsUser(@NonNull String packageName, int status, @UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Allow to change the status of a Intent Verification status for all IntentFilter of an App.\n     * This is related to the {@link android.content.IntentFilter#setAutoVerify(boolean)} and\n     * {@link android.content.IntentFilter#getAutoVerify()}\n     *\n     * This is used by the ResolverActivity to change the status depending on what the User select\n     * in the Disambiguation Dialog and also used by the Settings App for changing the default App\n     * for a domain.\n     *\n     * @param packageName The package name of the Activity associated with the IntentFilter.\n     * @param status The status to set to. This can be\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK} or\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS} or\n     *              {@link #INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER}\n     * @param userId The user id.\n     *\n     * @return true if the status has been set. False otherwise.\n     *\n     * @deprecated This API represents a very dangerous behavior where Settings or a system app with\n     * the right permissions can force an application to be verified for all of its declared\n     * domains. This has been removed to prevent unintended usage, and no longer does anything,\n     * always returning false. If a caller truly wishes to grant <i></i>every</i> declared web\n     * domain to an application, use\n     * {@link DomainVerificationManager#setDomainVerificationUserSelection(UUID, Set, boolean)},\n     * passing in all of the domains returned inside\n     * {@link DomainVerificationManager#getDomainVerificationUserState(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS", "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER", "android.content.pm.verify.domain.DomainVerificationManager#setDomainVerificationUserSelection(UUID", "android.content.pm.verify.domain.DomainVerificationManager#getDomainVerificationUserState(String)", "android.content.IntentFilter#getAutoVerify()", "#INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK", "android.content.IntentFilter#setAutoVerify(boolean)" ]
  }, {
    "name" : "public abstract List<IntentFilterVerificationInfo> getIntentFilterVerifications(@NonNull String packageName)",
    "returnType" : "List<IntentFilterVerificationInfo>",
    "comment" : "\n     * Get the list of IntentFilterVerificationInfo for a specific package and User.\n     *\n     * @param packageName the package name. When this parameter is set to a non null value,\n     *                    the results will be filtered by the package name provided.\n     *                    Otherwise, there will be no filtering and it will return a list\n     *                    corresponding for all packages\n     *\n     * @return a list of IntentFilterVerificationInfo for a specific package.\n     *\n     * @deprecated Use {@link DomainVerificationManager} instead.\n     * @hide\n     ",
    "links" : [ "android.content.pm.verify.domain.DomainVerificationManager" ]
  }, {
    "name" : "public abstract List<IntentFilter> getAllIntentFilters(@NonNull String packageName)",
    "returnType" : "List<IntentFilter>",
    "comment" : "\n     * Get the list of IntentFilter for a specific package.\n     *\n     * @param packageName the package name. This parameter is set to a non null value,\n     *                    the list will contain all the IntentFilter for that package.\n     *                    Otherwise, the list will be empty.\n     *\n     * @return a list of IntentFilter for a specific package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getDefaultBrowserPackageNameAsUser(@UserIdInt int userId)",
    "returnType" : "String",
    "comment" : "\n     * Get the default Browser package name for a specific user.\n     *\n     * @param userId The user id.\n     *\n     * @return the package name of the default Browser for the specified user. If the user id passed\n     *         is -1 (all users) it will return a null value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setDefaultBrowserPackageNameAsUser(@Nullable String packageName, @UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the default Browser package name for a specific user.\n     *\n     * @param packageName The package name of the default Browser.\n     * @param userId The user id.\n     *\n     * @return true if the default Browser for the specified user has been set,\n     *         otherwise return false. If the user id passed is -1 (all users) this call will not\n     *         do anything and just return false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setInstallerPackageName(@NonNull String targetPackage, @Nullable String installerPackageName)",
    "returnType" : "void",
    "comment" : "\n     * Change the installer associated with a given package.  There are limitations\n     * on how the installer package can be changed; in particular:\n     * <ul>\n     * <li> A SecurityException will be thrown if <var>installerPackageName</var>\n     * is not signed with the same certificate as the calling application.\n     * <li> A SecurityException will be thrown if <var>targetPackage</var> already\n     * has an installer package, and that installer package is not signed with\n     * the same certificate as the calling application.\n     * </ul>\n     *\n     * @param targetPackage The installed package whose installer will be changed.\n     * @param installerPackageName The package name of the new installer.  May be\n     * null to clear the association.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setUpdateAvailable(@NonNull String packageName, boolean updateAvaialble)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract void deletePackage(@NonNull String packageName, @Nullable IPackageDeleteObserver observer, @DeleteFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to delete a package. Since this may take a little while, the\n     * result will be posted back to the given observer. A deletion will fail if\n     * the calling context lacks the\n     * {@link android.Manifest.permission#DELETE_PACKAGES} permission, if the\n     * named package cannot be found, or if the named package is a system\n     * package.\n     *\n     * @param packageName The name of the package to delete\n     * @param observer An observer callback to get notified when the package\n     *            deletion is complete.\n     *            {@link android.content.pm.IPackageDeleteObserver#packageDeleted}\n     *            will be called when that happens. observer may be null to\n     *            indicate that no callback is desired.\n     * @hide\n     ",
    "links" : [ "android.content.pm.IPackageDeleteObserver#packageDeleted", "android.Manifest.permission#DELETE_PACKAGES" ]
  }, {
    "name" : "public abstract void deletePackageAsUser(@NonNull String packageName, @Nullable IPackageDeleteObserver observer, @DeleteFlags int flags, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to delete a package. Since this may take a little while, the\n     * result will be posted back to the given observer. A deletion will fail if\n     * the named package cannot be found, or if the named package is a system\n     * package.\n     *\n     * @param packageName The name of the package to delete\n     * @param observer An observer callback to get notified when the package\n     *            deletion is complete.\n     *            {@link android.content.pm.IPackageDeleteObserver#packageDeleted}\n     *            will be called when that happens. observer may be null to\n     *            indicate that no callback is desired.\n     * @param userId The user Id\n     * @hide\n     ",
    "links" : [ "android.content.pm.IPackageDeleteObserver#packageDeleted" ]
  }, {
    "name" : "public abstract String getInstallerPackageName(@NonNull String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Retrieve the package name of the application that installed a package. This identifies\n     * which market the package came from.\n     *\n     * @param packageName The name of the package to query\n     * @throws IllegalArgumentException if the given package name is not installed\n     *\n     * @deprecated use {@link #getInstallSourceInfo(String)} instead\n     ",
    "links" : [ "#getInstallSourceInfo(String)" ]
  }, {
    "name" : "public InstallSourceInfo getInstallSourceInfo(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "InstallSourceInfo",
    "comment" : "\n     * Retrieves information about how a package was installed or updated.\n     * <p>\n     * If the calling application does not hold the INSTALL_PACKAGES permission then\n     * the result will always return {@code null} from\n     * {@link InstallSourceInfo#getOriginatingPackageName()}.\n     * <p>\n     * If the package that requested the install has been uninstalled, then information about it\n     * will only be returned from {@link InstallSourceInfo#getInitiatingPackageName()} and\n     * {@link InstallSourceInfo#getInitiatingPackageSigningInfo()} if the calling package is\n     * requesting its own install information and is not an instant app.\n     *\n     * @param packageName The name of the package to query\n     * @throws NameNotFoundException if the given package name is not available to the caller.\n     ",
    "links" : [ "android.content.pm.InstallSourceInfo#getInitiatingPackageName()", "android.content.pm.InstallSourceInfo#getOriginatingPackageName()", "android.content.pm.InstallSourceInfo#getInitiatingPackageSigningInfo()" ]
  }, {
    "name" : "public boolean isAppArchivable(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if an app is archivable.\n     *\n     * @throws NameNotFoundException if the given package name is not available to the caller.\n     * @see PackageInstaller#requestArchive\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void clearApplicationUserData(@NonNull String packageName, @Nullable IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to clear the user data directory of an application.\n     * Since this may take a little while, the result will\n     * be posted back to the given observer.  A deletion will fail if the\n     * named package cannot be found, or if the named package is a \"system package\".\n     *\n     * @param packageName The name of the package\n     * @param observer An observer callback to get notified when the operation is finished\n     * {@link android.content.pm.IPackageDataObserver#onRemoveCompleted(String, boolean)}\n     * will be called when that happens.  observer may be null to indicate that\n     * no callback is desired.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.IPackageDataObserver#onRemoveCompleted(String" ]
  }, {
    "name" : "public abstract void deleteApplicationCacheFiles(@NonNull String packageName, @Nullable IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to delete the cache files associated with an application.\n     * Since this may take a little while, the result will\n     * be posted back to the given observer.  A deletion will fail if the calling context\n     * lacks the {@link android.Manifest.permission#DELETE_CACHE_FILES} permission, if the\n     * named package cannot be found, or if the named package is a \"system package\".\n     *\n     * @param packageName The name of the package to delete\n     * @param observer An observer callback to get notified when the cache file deletion\n     * is complete.\n     * {@link android.content.pm.IPackageDataObserver#onRemoveCompleted(String, boolean)}\n     * will be called when that happens.  observer may be null to indicate that\n     * no callback is desired.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#DELETE_CACHE_FILES", "android.content.pm.IPackageDataObserver#onRemoveCompleted(String" ]
  }, {
    "name" : "public abstract void deleteApplicationCacheFilesAsUser(@NonNull String packageName, @UserIdInt int userId, @Nullable IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to delete the cache files associated with an application for a given user. Since\n     * this may take a little while, the result will be posted back to the given observer. A\n     * deletion will fail if the calling context lacks the\n     * {@link android.Manifest.permission#DELETE_CACHE_FILES} permission, if the named package\n     * cannot be found, or if the named package is a \"system package\". If {@code userId} does not\n     * belong to the calling user, the caller must have\n     * {@link android.Manifest.permission#INTERACT_ACROSS_USERS} permission.\n     *\n     * @param packageName The name of the package to delete\n     * @param userId the user for which the cache files needs to be deleted\n     * @param observer An observer callback to get notified when the cache file deletion is\n     *            complete.\n     *            {@link android.content.pm.IPackageDataObserver#onRemoveCompleted(String, boolean)}\n     *            will be called when that happens. observer may be null to indicate that no\n     *            callback is desired.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#DELETE_CACHE_FILES", "android.Manifest.permission#INTERACT_ACROSS_USERS", "android.content.pm.IPackageDataObserver#onRemoveCompleted(String" ]
  }, {
    "name" : "public void freeStorageAndNotify(long freeStorageSize, @Nullable IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Free storage by deleting LRU sorted list of cache files across\n     * all applications. If the currently available free storage\n     * on the device is greater than or equal to the requested\n     * free storage, no cache files are cleared. If the currently\n     * available storage on the device is less than the requested\n     * free storage, some or all of the cache files across\n     * all applications are deleted (based on last accessed time)\n     * to increase the free storage space on the device to\n     * the requested value. There is no guarantee that clearing all\n     * the cache files from all applications will clear up\n     * enough storage to achieve the desired value.\n     * @param freeStorageSize The number of bytes of storage to be\n     * freed by the system. Say if freeStorageSize is XX,\n     * and the current free storage is YY,\n     * if XX is less than YY, just return. if not free XX-YY number\n     * of bytes if possible.\n     * @param observer call back used to notify when\n     * the operation is completed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void freeStorageAndNotify(@Nullable String volumeUuid, long freeStorageSize, @Nullable IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void freeStorage(long freeStorageSize, @Nullable IntentSender pi)",
    "returnType" : "void",
    "comment" : "\n     * Free storage by deleting LRU sorted list of cache files across\n     * all applications. If the currently available free storage\n     * on the device is greater than or equal to the requested\n     * free storage, no cache files are cleared. If the currently\n     * available storage on the device is less than the requested\n     * free storage, some or all of the cache files across\n     * all applications are deleted (based on last accessed time)\n     * to increase the free storage space on the device to\n     * the requested value. There is no guarantee that clearing all\n     * the cache files from all applications will clear up\n     * enough storage to achieve the desired value.\n     * @param freeStorageSize The number of bytes of storage to be\n     * freed by the system. Say if freeStorageSize is XX,\n     * and the current free storage is YY,\n     * if XX is less than YY, just return. if not free XX-YY number\n     * of bytes if possible.\n     * @param pi IntentSender call back used to\n     * notify when the operation is completed.May be null\n     * to indicate that no call back is desired.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void freeStorage(@Nullable String volumeUuid, long freeStorageSize, @Nullable IntentSender pi)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getPackageSizeInfoAsUser(@NonNull String packageName, @UserIdInt int userId, @Nullable IPackageStatsObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Retrieve the size information for a package.\n     * Since this may take a little while, the result will\n     * be posted back to the given observer.  The calling context\n     * should have the {@link android.Manifest.permission#GET_PACKAGE_SIZE} permission.\n     *\n     * @param packageName The name of the package whose size information is to be retrieved\n     * @param userId The user whose size information should be retrieved.\n     * @param observer An observer callback to get notified when the operation\n     * is complete.\n     * {@link android.content.pm.IPackageStatsObserver#onGetStatsCompleted(PackageStats, boolean)}\n     * The observer's callback is invoked with a PackageStats object(containing the\n     * code, data and cache sizes of the package) and a boolean value representing\n     * the status of the operation. observer may be null to indicate that\n     * no callback is desired.\n     *\n     * @deprecated use {@link StorageStatsManager} instead.\n     * @hide\n     ",
    "links" : [ "android.app.usage.StorageStatsManager", "android.Manifest.permission#GET_PACKAGE_SIZE", "android.content.pm.IPackageStatsObserver#onGetStatsCompleted(PackageStats" ]
  }, {
    "name" : "public void getPackageSizeInfo(@NonNull String packageName, IPackageStatsObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #getPackageSizeInfoAsUser(String, int, IPackageStatsObserver)}, but\n     * returns the size for the calling user.\n     *\n     * @deprecated use {@link StorageStatsManager} instead.\n     * @hide\n     ",
    "links" : [ "android.app.usage.StorageStatsManager", "#getPackageSizeInfoAsUser(String" ]
  }, {
    "name" : "public abstract void addPackageToPreferred(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract void removePackageFromPreferred(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract List<PackageInfo> getPreferredPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "\n     * Retrieve the list of all currently configured preferred packages. The\n     * first package on the list is the most preferred, the last is the least\n     * preferred.\n     *\n     * @param flags Additional option flags to modify the data returned.\n     * @return A List of PackageInfo objects, one for each preferred\n     *         application, in order of preference.\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract void addPreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)",
    "returnType" : "void",
    "comment" : "\n     * Add a new preferred activity mapping to the system.  This will be used\n     * to automatically select the given activity component when\n     * {@link Context#startActivity(Intent) Context.startActivity()} finds\n     * multiple matching activities and also matches the given filter.\n     *\n     * @param filter The set of intents under which this activity will be\n     * made preferred.\n     * @param match The IntentFilter match category that this preference\n     * applies to.\n     * @param set The set of activities that the user was picking from when\n     * this preference was made.\n     * @param activity The component name of the activity that is to be\n     * preferred.\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "android.content.Context#startActivity(Intent)", "#queryIntentActivities" ]
  }, {
    "name" : "public void addPreferredActivityAsUser(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #addPreferredActivity(IntentFilter, int,\n            ComponentName[], ComponentName)}, but with a specific userId to apply the preference\n            to.\n     * @hide\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#addPreferredActivity(IntentFilter", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract void replacePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)",
    "returnType" : "void",
    "comment" : "\n     * Replaces an existing preferred activity mapping to the system, and if that were not present\n     * adds a new preferred activity.  This will be used\n     * to automatically select the given activity component when\n     * {@link Context#startActivity(Intent) Context.startActivity()} finds\n     * multiple matching activities and also matches the given filter.\n     *\n     * @param filter The set of intents under which this activity will be\n     * made preferred.\n     * @param match The IntentFilter match category that this preference\n     * applies to.\n     * @param set The set of activities that the user was picking from when\n     * this preference was made.\n     * @param activity The component name of the activity that is to be\n     * preferred.\n     *\n     * @hide\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "android.content.Context#startActivity(Intent)", "#queryIntentActivities" ]
  }, {
    "name" : "public void replacePreferredActivity(@NonNull IntentFilter filter, int match, @NonNull List<ComponentName> set, @NonNull ComponentName activity)",
    "returnType" : "void",
    "comment" : "\n     * Replaces an existing preferred activity mapping to the system, and if that were not present\n     * adds a new preferred activity.  This will be used to automatically select the given activity\n     * component when {@link Context#startActivity(Intent) Context.startActivity()} finds multiple\n     * matching activities and also matches the given filter.\n     *\n     * @param filter The set of intents under which this activity will be made preferred.\n     * @param match The IntentFilter match category that this preference applies to. Should be a\n     *              combination of {@link IntentFilter#MATCH_CATEGORY_MASK} and\n     *              {@link IntentFilter#MATCH_ADJUSTMENT_MASK}).\n     * @param set The set of activities that the user was picking from when this preference was\n     *            made.\n     * @param activity The component name of the activity that is to be preferred.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.IntentFilter#MATCH_CATEGORY_MASK", "android.content.IntentFilter#MATCH_ADJUSTMENT_MASK", "android.content.Context#startActivity(Intent)" ]
  }, {
    "name" : "public void replacePreferredActivityAsUser(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract void clearPackagePreferredActivities(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Remove all preferred activity mappings, previously added with\n     * {@link #addPreferredActivity}, from the\n     * system whose activities are implemented in the given package name.\n     * An application can only clear its own package(s).\n     *\n     * @param packageName The name of the package whose preferred activity\n     * mappings are to be removed.\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#addPreferredActivity", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public void addUniquePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #addPreferredActivity(IntentFilter, int, ComponentName[], ComponentName)},\n     * but removes all existing entries that match this filter.\n     * @hide\n     ",
    "links" : [ "#addPreferredActivity(IntentFilter" ]
  }, {
    "name" : "public abstract int getPreferredActivities(@NonNull List<IntentFilter> outFilters, @NonNull List<ComponentName> outActivities, @Nullable String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Retrieve all preferred activities, previously added with\n     * {@link #addPreferredActivity}, that are\n     * currently registered with the system.\n     *\n     * @param outFilters A required list in which to place the filters of all of the\n     * preferred activities.\n     * @param outActivities A required list in which to place the component names of\n     * all of the preferred activities.\n     * @param packageName An optional package in which you would like to limit\n     * the list.  If null, all activities will be returned; if non-null, only\n     * those activities in the given package are returned.\n     *\n     * @return Returns the total number of registered preferred activities\n     * (the number of distinct IntentFilter records, not the number of unique\n     * activity components) that were found.\n     *\n     * @deprecated This function no longer does anything. It is the platform's\n     * responsibility to assign preferred activities and this cannot be modified\n     * directly. To determine the activities resolved by the platform, use\n     * {@link #resolveActivity} or {@link #queryIntentActivities}. To configure\n     * an app to be responsible for a particular role and to check current role\n     * holders, see {@link android.app.role.RoleManager}.\n     ",
    "links" : [ "android.app.role.RoleManager", "#addPreferredActivity", "#resolveActivity", "#queryIntentActivities" ]
  }, {
    "name" : "public abstract ComponentName getHomeActivities(@NonNull List<ResolveInfo> outActivities)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Ask for the set of available 'home' activities and the current explicit\n     * default, if any.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setComponentEnabledSetting(@NonNull ComponentName componentName, @EnabledState int newState, @EnabledFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set the enabled setting for a package component (activity, receiver, service, provider).\n     * This setting will override any enabled state which may have been set by the component in its\n     * manifest.\n     *\n     * <p>Consider using {@link #setComponentEnabledSettings(List)} if multiple components need to\n     * be updated atomically.\n     *\n     * @param componentName The component to enable\n     * @param newState The new enabled state for the component.\n     * @param flags Optional behavior flags.\n     ",
    "links" : [ "#setComponentEnabledSettings(List)" ]
  }, {
    "name" : "public void setComponentEnabledSettings(@NonNull List<ComponentEnabledSetting> settings)",
    "returnType" : "void",
    "comment" : "\n     * Set the enabled settings for package components such as activities, receivers, services and\n     * providers. This setting will override any enabled state which may have been set by the\n     * component in its manifest.\n     *\n     * <p>This api accepts a list of component changes, and applies them all atomically. The\n     * application can use this api if components have dependencies and need to be updated\n     * atomically.\n     *\n     * <p>The permission is not required if target components are running under the same uid with\n     * the caller.\n     *\n     * @param settings The list of component enabled settings to update. Note that an\n     *                 {@link IllegalArgumentException} is thrown if the duplicated component name\n     *                 is in the list or there's a conflict {@link #DONT_KILL_APP} flag between\n     *                 different components in the same package.\n     *\n     * @see #setComponentEnabledSetting(ComponentName, int, int)\n     ",
    "links" : [ "#DONT_KILL_APP", "IllegalArgumentException" ]
  }, {
    "name" : "public abstract int getComponentEnabledSetting(@NonNull ComponentName componentName)",
    "returnType" : "int",
    "comment" : "\n     * Return the enabled setting for a package component (activity,\n     * receiver, service, provider).  This returns the last value set by\n     * {@link #setComponentEnabledSetting(ComponentName, int, int)}; in most\n     * cases this value will be {@link #COMPONENT_ENABLED_STATE_DEFAULT} since\n     * the value originally specified in the manifest has not been modified.\n     *\n     * @param componentName The component to retrieve.\n     * @return Returns the current enabled state for the component.\n     ",
    "links" : [ "#COMPONENT_ENABLED_STATE_DEFAULT", "#setComponentEnabledSetting(ComponentName" ]
  }, {
    "name" : "public void setSyntheticAppDetailsActivityEnabled(@NonNull String packageName, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether a synthetic app details activity will be generated if the app has no enabled\n     * launcher activity. Disabling this allows the app to have no launcher icon.\n     *\n     * @param packageName The package name of the app\n     * @param enabled The new enabled state for the synthetic app details activity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getSyntheticAppDetailsActivityEnabled(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a synthetic app details activity will be generated if the app has no enabled\n     * launcher activity.\n     *\n     * @param packageName The package name of the app\n     * @return Returns the enabled state for the synthetic app details activity.\n     *\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setApplicationEnabledSetting(@NonNull String packageName, @EnabledState int newState, @EnabledFlags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Set the enabled setting for an application\n     * This setting will override any enabled state which may have been set by the application in\n     * its manifest.  It also overrides the enabled state set in the manifest for any of the\n     * application's components.  It does not override any enabled state set by\n     * {@link #setComponentEnabledSetting} for any of the application's components.\n     *\n     * @param packageName The package name of the application to enable\n     * @param newState The new enabled state for the application.\n     * @param flags Optional behavior flags.\n     ",
    "links" : [ "#setComponentEnabledSetting" ]
  }, {
    "name" : "public abstract int getApplicationEnabledSetting(@NonNull String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Return the enabled setting for an application. This returns\n     * the last value set by\n     * {@link #setApplicationEnabledSetting(String, int, int)}; in most\n     * cases this value will be {@link #COMPONENT_ENABLED_STATE_DEFAULT} since\n     * the value originally specified in the manifest has not been modified.\n     *\n     * @param packageName The package name of the application to retrieve.\n     * @return Returns the current enabled state for the application.\n     * @throws IllegalArgumentException if the named package does not exist.\n     ",
    "links" : [ "#COMPONENT_ENABLED_STATE_DEFAULT", "#setApplicationEnabledSetting(String" ]
  }, {
    "name" : "public abstract void flushPackageRestrictionsAsUser(@UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Flush the package restrictions for a given user to disk. This forces the package restrictions\n     * like component and package enabled settings to be written to disk and avoids the delay that\n     * is otherwise present when changing those settings.\n     *\n     * @param userId Ther userId of the user whose restrictions are to be flushed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean setApplicationHiddenSettingAsUser(@NonNull String packageName, boolean hidden, @NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Puts the package in a hidden state, which is almost like an uninstalled state,\n     * making the package unavailable, but it doesn't remove the data or the actual\n     * package file. Application can be unhidden by either resetting the hidden state\n     * or by installing it, such as with {@link #installExistingPackage(String)}\n     * @hide\n     ",
    "links" : [ "#installExistingPackage(String)" ]
  }, {
    "name" : "public abstract boolean getApplicationHiddenSettingAsUser(@NonNull String packageName, @NonNull UserHandle userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the hidden state of a package.\n     * @see #setApplicationHiddenSettingAsUser(String, boolean, UserHandle)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemAppState(@NonNull String packageName, @SystemAppState int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state of a system app.\n     *\n     * This method can be used to change a system app's hidden-until-installed state (via\n     * {@link #SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN} and\n     * {@link #SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_VISIBLE} or its installation state (via\n     * {@link #SYSTEM_APP_STATE_INSTALLED} and {@link #SYSTEM_APP_STATE_UNINSTALLED}.\n     *\n     * This API may only be called from {@link android.os.Process#SYSTEM_UID} or\n     * {@link android.os.Process#PHONE_UID}.\n     *\n     * @param packageName Package name of the app.\n     * @param state State of the app.\n     * @hide\n     ",
    "links" : [ "#SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_VISIBLE", "#SYSTEM_APP_STATE_UNINSTALLED", "android.os.Process#SYSTEM_UID", "android.os.Process#PHONE_UID", "#SYSTEM_APP_STATE_INSTALLED", "#SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN" ]
  }, {
    "name" : "public abstract boolean isSafeMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the device has been booted into safe mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addOnPermissionsChangeListener(@NonNull OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeOnPermissionsChangeListener(@NonNull OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : "@Deprecated",
    "links" : [ ]
  }, {
    "name" : "public abstract KeySet getKeySetByAlias(@NonNull String packageName, @NonNull String alias)",
    "returnType" : "KeySet",
    "comment" : "\n     * Return the {@link KeySet} associated with the String alias for this\n     * application.\n     *\n     * @param alias The alias for a given {@link KeySet} as defined in the\n     *        application's AndroidManifest.xml.\n     * @hide\n     ",
    "links" : [ "android.content.pm.KeySet" ]
  }, {
    "name" : "public abstract KeySet getSigningKeySet(@NonNull String packageName)",
    "returnType" : "KeySet",
    "comment" : " Return the signing {@link KeySet} for this application.\n     * @hide\n     ",
    "links" : [ "android.content.pm.KeySet" ]
  }, {
    "name" : "public abstract boolean isSignedBy(@NonNull String packageName, @NonNull KeySet ks)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the package denoted by packageName has been signed by all\n     * of the keys specified by the {@link KeySet} ks.  This will return true if\n     * the package has been signed by additional keys (a superset) as well.\n     * Compare to {@link #isSignedByExactly(String packageName, KeySet ks)}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.KeySet", "#isSignedByExactly(String" ]
  }, {
    "name" : "public abstract boolean isSignedByExactly(@NonNull String packageName, @NonNull KeySet ks)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the package denoted by packageName has been signed by all\n     * of, and only, the keys specified by the {@link KeySet} ks. Compare to\n     * {@link #isSignedBy(String packageName, KeySet ks)}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.KeySet", "#isSignedBy(String" ]
  }, {
    "name" : "public String[] setDistractingPackageRestrictions(@NonNull String[] packages, @DistractionRestriction int restrictionFlags)",
    "returnType" : "String[]",
    "comment" : "\n     * Mark or unmark the given packages as distracting to the user.\n     * These packages can have certain restrictions set that should discourage the user to launch\n     * them often. For example, notifications from such an app can be hidden, or the app can be\n     * removed from launcher suggestions, so the user is able to restrict their use of these apps.\n     *\n     * <p>The caller must hold {@link android.Manifest.permission#SUSPEND_APPS} to use this API.\n     *\n     * @param packages Packages to mark as distracting.\n     * @param restrictionFlags Any combination of restrictions to impose on the given packages.\n     *                         {@link #RESTRICTION_NONE} can be used to clear any existing\n     *                         restrictions.\n     * @return A list of packages that could not have the {@code restrictionFlags} set. The system\n     * may prevent restricting critical packages to preserve normal device function.\n     *\n     * @hide\n     * @see #RESTRICTION_NONE\n     * @see #RESTRICTION_HIDE_FROM_SUGGESTIONS\n     * @see #RESTRICTION_HIDE_NOTIFICATIONS\n     ",
    "links" : [ "#RESTRICTION_NONE", "android.Manifest.permission#SUSPEND_APPS" ]
  }, {
    "name" : "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable String dialogMessage)",
    "returnType" : "String[]",
    "comment" : "\n     * Puts the package in a suspended state, where attempts at starting activities are denied.\n     *\n     * <p>It doesn't remove the data or the actual package file. The application's notifications\n     * will be hidden, any of its started activities will be stopped and it will not be able to\n     * show toasts or system alert windows or ring the device.\n     *\n     * <p>When the user tries to launch a suspended app, a system dialog with the given\n     * {@code dialogMessage} will be shown instead. Since the message is supplied to the system as\n     * a {@link String}, the caller needs to take care of localization as needed.\n     * The dialog message can optionally contain a placeholder for the name of the suspended app.\n     * The system uses {@link String#format(Locale, String, Object...) String.format} to insert the\n     * app name into the message, so an example format string could be {@code \"The app %1$s is\n     * currently suspended\"}. This makes it easier for callers to provide a single message which\n     * works for all the packages being suspended in a single call.\n     *\n     * <p>The package must already be installed. If the package is uninstalled while suspended\n     * the package will no longer be suspended. </p>\n     *\n     * <p>Optionally, the suspending app can provide extra information in the form of\n     * {@link PersistableBundle} objects to be shared with the apps being suspended and the\n     * launcher to support customization that they might need to handle the suspended state.\n     *\n     * <p>The caller must hold {@link Manifest.permission#SUSPEND_APPS} to use this API.\n     *\n     * @param packageNames The names of the packages to set the suspended status.\n     * @param suspended If set to {@code true}, the packages will be suspended, if set to\n     * {@code false}, the packages will be unsuspended.\n     * @param appExtras An optional {@link PersistableBundle} that the suspending app can provide\n     *                  which will be shared with the apps being suspended. Ignored if\n     *                  {@code suspended} is false.\n     * @param launcherExtras An optional {@link PersistableBundle} that the suspending app can\n     *                       provide which will be shared with the launcher. Ignored if\n     *                       {@code suspended} is false.\n     * @param dialogMessage The message to be displayed to the user, when they try to launch a\n     *                      suspended app.\n     *\n     * @return an array of package names for which the suspended status could not be set as\n     * requested in this method. Returns {@code null} if {@code packageNames} was {@code null}.\n     *\n     * @deprecated use {@link #setPackagesSuspended(String[], boolean, PersistableBundle,\n     * PersistableBundle, android.content.pm.SuspendDialogInfo)} instead.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.PersistableBundle", "Manifest.permission#SUSPEND_APPS", "String", "#format(Locale", "#setPackagesSuspended(String" ]
  }, {
    "name" : "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable SuspendDialogInfo dialogInfo)",
    "returnType" : "String[]",
    "comment" : "\n     * Puts the given packages in a suspended state, where attempts at starting activities are\n     * denied.\n     *\n     * <p>The suspended application's notifications and all of its windows will be hidden, any\n     * of its started activities will be stopped and it won't be able to ring the device.\n     * It doesn't remove the data or the actual package file.\n     *\n     * <p>When the user tries to launch a suspended app, a system dialog alerting them that the app\n     * is suspended will be shown instead.\n     * The caller can optionally customize the dialog by passing a {@link SuspendDialogInfo} object\n     * to this API. This dialog will have a button that starts the\n     * {@link Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS} intent if the suspending app declares an\n     * activity which handles this action.\n     *\n     * <p>The packages being suspended must already be installed. If a package is uninstalled, it\n     * will no longer be suspended.\n     *\n     * <p>Optionally, the suspending app can provide extra information in the form of\n     * {@link PersistableBundle} objects to be shared with the apps being suspended and the\n     * launcher to support customization that they might need to handle the suspended state.\n     *\n     * <p>The caller must hold {@link Manifest.permission#SUSPEND_APPS} to use this API except for\n     * device owner and profile owner.\n     *\n     * @param packageNames The names of the packages to set the suspended status.\n     * @param suspended If set to {@code true}, the packages will be suspended, if set to\n     * {@code false}, the packages will be unsuspended.\n     * @param appExtras An optional {@link PersistableBundle} that the suspending app can provide\n     *                  which will be shared with the apps being suspended. Ignored if\n     *                  {@code suspended} is false.\n     * @param launcherExtras An optional {@link PersistableBundle} that the suspending app can\n     *                       provide which will be shared with the launcher. Ignored if\n     *                       {@code suspended} is false.\n     * @param dialogInfo An optional {@link SuspendDialogInfo} object describing the dialog that\n     *                   should be shown to the user when they try to launch a suspended app.\n     *                   Ignored if {@code suspended} is false.\n     *\n     * @return an array of package names for which the suspended status could not be set as\n     * requested in this method. Returns {@code null} if {@code packageNames} was {@code null}.\n     *\n     * @see #isPackageSuspended\n     * @see SuspendDialogInfo\n     * @see SuspendDialogInfo.Builder\n     * @see Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS\n     *\n     * @hide\n     ",
    "links" : [ "android.os.PersistableBundle", "Manifest.permission#SUSPEND_APPS", "android.content.pm.SuspendDialogInfo", "android.content.Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS" ]
  }, {
    "name" : "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable SuspendDialogInfo dialogInfo, @SuspendedFlags int flags)",
    "returnType" : "String[]",
    "comment" : "\n     * Puts the given packages in a suspended state, where attempts at starting activities are\n     * denied.\n     *\n     * <p>The suspended application's notifications and all of its windows will be hidden, any\n     * of its started activities will be stopped and it won't be able to ring the device.\n     * It doesn't remove the data or the actual package file.\n     *\n     * <p>When the user tries to launch a suspended app, a system dialog alerting them that the app\n     * is suspended will be shown instead.\n     * The caller can optionally customize the dialog by passing a {@link SuspendDialogInfo} object\n     * to this API. This dialog will have a button that starts the\n     * {@link Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS} intent if the suspending app declares an\n     * activity which handles this action.\n     *\n     * <p>The packages being suspended must already be installed. If a package is uninstalled, it\n     * will no longer be suspended.\n     *\n     * <p>Optionally, the suspending app can provide extra information in the form of\n     * {@link PersistableBundle} objects to be shared with the apps being suspended and the\n     * launcher to support customization that they might need to handle the suspended state.\n     *\n     * <p>The caller must hold {@link Manifest.permission#SUSPEND_APPS} to use this API except for\n     * device owner and profile owner or the {@link Manifest.permission#QUARANTINE_APPS} if the\n     * caller is using {@link #FLAG_SUSPEND_QUARANTINED}.\n     *\n     * @param packageNames The names of the packages to set the suspended status.\n     * @param suspended If set to {@code true}, the packages will be suspended, if set to\n     * {@code false}, the packages will be unsuspended.\n     * @param appExtras An optional {@link PersistableBundle} that the suspending app can provide\n     *                  which will be shared with the apps being suspended. Ignored if\n     *                  {@code suspended} is false.\n     * @param launcherExtras An optional {@link PersistableBundle} that the suspending app can\n     *                       provide which will be shared with the launcher. Ignored if\n     *                       {@code suspended} is false.\n     * @param dialogInfo An optional {@link SuspendDialogInfo} object describing the dialog that\n     *                   should be shown to the user when they try to launch a suspended app.\n     *                   Ignored if {@code suspended} is false.\n     * @param flags Optional behavior flags.\n     *\n     * @return an array of package names for which the suspended status could not be set as\n     * requested in this method. Returns {@code null} if {@code packageNames} was {@code null}.\n     *\n     * @see #isPackageSuspended\n     * @see SuspendDialogInfo\n     * @see SuspendDialogInfo.Builder\n     * @see Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS\n     *\n     * @hide\n     ",
    "links" : [ "android.os.PersistableBundle", "Manifest.permission#SUSPEND_APPS", "#FLAG_SUSPEND_QUARANTINED", "android.content.pm.SuspendDialogInfo", "android.content.Intent#ACTION_SHOW_SUSPENDED_APP_DETAILS", "Manifest.permission#QUARANTINE_APPS" ]
  }, {
    "name" : "public String[] getUnsuspendablePackages(@NonNull String[] packageNames)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns any packages in a given set of packages that cannot be suspended via a call to {@link\n     * #setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle,\n     * SuspendDialogInfo) setPackagesSuspended}. The platform prevents suspending certain critical\n     * packages to keep the device in a functioning state, e.g. the default dialer and launcher.\n     * Apps need to hold {@link Manifest.permission#SUSPEND_APPS SUSPEND_APPS} to call this API.\n     *\n     * <p>\n     * Note that this set of critical packages can change with time, so even though a package name\n     * was not returned by this call, it does not guarantee that a subsequent call to\n     * {@link #setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle,\n     * SuspendDialogInfo) setPackagesSuspended} for that package will succeed, especially if\n     * significant time elapsed between the two calls.\n     *\n     * @param packageNames The packages to check.\n     * @return A list of packages that can not be currently suspended by the system.\n     * @hide\n     ",
    "links" : [ "Manifest.permission#SUSPEND_APPS", "#setPackagesSuspended(String" ]
  }, {
    "name" : "public abstract boolean isPackageSuspendedForUser(@NonNull String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @see #setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle, String)\n     * @param packageName The name of the package to get the suspended status of.\n     * @param userId The user id.\n     * @return {@code true} if the package is suspended or {@code false} if the package is not\n     * suspended.\n     * @throws IllegalArgumentException if the package was not found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspended(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Query if an app is currently suspended.\n     *\n     * @return {@code true} if the given package is suspended, {@code false} otherwise\n     * @throws NameNotFoundException if the package could not be found.\n     *\n     * @see #isPackageSuspended()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspended()",
    "returnType" : "boolean",
    "comment" : "\n     * Apps can query this to know if they have been suspended. A system app with the permission\n     * {@code android.permission.SUSPEND_APPS} can put any app on the device into a suspended state.\n     *\n     * <p>While in this state, the application's notifications will be hidden, any of its started\n     * activities will be stopped and it will not be able to show toasts or dialogs or play audio.\n     * When the user tries to launch a suspended app, the system will, instead, show a\n     * dialog to the user informing them that they cannot use this app while it is suspended.\n     *\n     * <p>When an app is put into this state, the broadcast action\n     * {@link Intent#ACTION_MY_PACKAGE_SUSPENDED} will be delivered to any of its broadcast\n     * receivers that included this action in their intent-filters, <em>including manifest\n     * receivers.</em> Similarly, a broadcast action {@link Intent#ACTION_MY_PACKAGE_UNSUSPENDED}\n     * is delivered when a previously suspended app is taken out of this state. Apps are expected to\n     * use these to gracefully deal with transitions to and from this state.\n     *\n     * @return {@code true} if the calling package has been suspended, {@code false} otherwise.\n     *\n     * @see #getSuspendedPackageAppExtras()\n     * @see Intent#ACTION_MY_PACKAGE_SUSPENDED\n     * @see Intent#ACTION_MY_PACKAGE_UNSUSPENDED\n     ",
    "links" : [ "android.content.Intent#ACTION_MY_PACKAGE_SUSPENDED", "android.content.Intent#ACTION_MY_PACKAGE_UNSUSPENDED" ]
  }, {
    "name" : "public Bundle getSuspendedPackageAppExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a {@link Bundle} of extras that was meant to be sent to the calling app when it was\n     * suspended. An app with the permission {@code android.permission.SUSPEND_APPS} can supply this\n     * to the system at the time of suspending an app.\n     *\n     * <p>This is the same {@link Bundle} that is sent along with the broadcast\n     * {@link Intent#ACTION_MY_PACKAGE_SUSPENDED}, whenever the app is suspended. The contents of\n     * this {@link Bundle} are a contract between the suspended app and the suspending app.\n     *\n     * <p>Note: These extras are optional, so if no extras were supplied to the system, this method\n     * will return {@code null}, even when the calling app has been suspended.\n     *\n     * @return A {@link Bundle} containing the extras for the app, or {@code null} if the\n     * package is not currently suspended.\n     *\n     * @see #isPackageSuspended()\n     * @see Intent#ACTION_MY_PACKAGE_UNSUSPENDED\n     * @see Intent#ACTION_MY_PACKAGE_SUSPENDED\n     * @see Intent#EXTRA_SUSPENDED_PACKAGE_EXTRAS\n     ",
    "links" : [ "android.content.Intent#ACTION_MY_PACKAGE_SUSPENDED", "android.os.Bundle" ]
  }, {
    "name" : "public String getSuspendingPackage(@NonNull String suspendedPackage)",
    "returnType" : "String",
    "comment" : "\n     * Get the name of the package that suspended the given package. Packages can be suspended by\n     * device administrators or apps holding {@link android.Manifest.permission#MANAGE_USERS} or\n     * {@link android.Manifest.permission#SUSPEND_APPS}.\n     *\n     * <p>\n     * <strong>Note:</strong>This API doesn't support cross user suspension and should only be used\n     * for testing.\n     * @param suspendedPackage The package that has been suspended.\n     * @return Name of the package that suspended the given package. Returns {@code null} if the\n     * given package is not currently suspended and the platform package name - i.e.\n     * {@code \"android\"} - if the package was suspended by a device admin.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_USERS", "android.Manifest.permission#SUSPEND_APPS" ]
  }, {
    "name" : "public boolean isPackageStopped(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Query if an app is currently stopped.\n     *\n     * @return {@code true} if the given package is stopped, {@code false} otherwise\n     * @throws NameNotFoundException if the package could not be found.\n     * @see ApplicationInfo#FLAG_STOPPED\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageQuarantined(@NonNull String packageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Query if an app is currently quarantined.\n     * A misbehaving app can be quarantined by e.g. a system of another privileged entity.\n     * Quarantined apps are similar to disabled, but still visible in e.g. Launcher.\n     * Only activities of such apps can still be queried, but not services etc.\n     * Quarantined apps can't be bound to, and won't receive broadcasts.\n     * They can't be resolved, unless {@link #MATCH_QUARANTINED_COMPONENTS} specified.\n     *\n     * @return {@code true} if the given package is quarantined, {@code false} otherwise\n     * @throws NameNotFoundException if the package could not be found.\n     ",
    "links" : [ "#MATCH_QUARANTINED_COMPONENTS" ]
  }, {
    "name" : "public abstract void setApplicationCategoryHint(@NonNull String packageName, @ApplicationInfo.Category int categoryHint)",
    "returnType" : "void",
    "comment" : "\n     * Provide a hint of what the {@link ApplicationInfo#category} value should\n     * be for the given package.\n     * <p>\n     * This hint can only be set by the app which installed this package, as\n     * determined by {@link #getInstallerPackageName(String)}.\n     *\n     * @param packageName the package to change the category hint for.\n     * @param categoryHint the category hint to set.\n     ",
    "links" : [ "android.content.pm.ApplicationInfo#category", "#getInstallerPackageName(String)" ]
  }, {
    "name" : "public static boolean isMoveStatusFinished(int status)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getMoveStatus(int moveId)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract void registerMoveCallback(@NonNull MoveCallback callback, @NonNull Handler handler)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract void unregisterMoveCallback(@NonNull MoveCallback callback)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract int movePackage(@NonNull String packageName, @NonNull VolumeInfo vol)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract VolumeInfo getPackageCurrentVolume(@NonNull ApplicationInfo app)",
    "returnType" : "VolumeInfo",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<VolumeInfo> getPackageCandidateVolumes(@NonNull ApplicationInfo app)",
    "returnType" : "List<VolumeInfo>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract int movePrimaryStorage(@NonNull VolumeInfo vol)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract VolumeInfo getPrimaryStorageCurrentVolume()",
    "returnType" : "VolumeInfo",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<VolumeInfo> getPrimaryStorageCandidateVolumes()",
    "returnType" : "List<VolumeInfo>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract VerifierDeviceIdentity getVerifierDeviceIdentity()",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "\n     * Returns the device identity that verifiers can use to associate their scheme to a particular\n     * device. This should not be used by anything other than a package verifier.\n     *\n     * @return identity that uniquely identifies current device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isUpgrade()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is upgrading, such as first boot after OTA.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceUpgrading()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the device is upgrading, such as first boot after OTA.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PackageInstaller getPackageInstaller()",
    "returnType" : "PackageInstaller",
    "comment" : "\n     * Return interface that offers the ability to install, upgrade, and remove\n     * applications on the device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void addCrossProfileIntentFilter(@NonNull IntentFilter filter, @UserIdInt int sourceUserId, @UserIdInt int targetUserId, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@code CrossProfileIntentFilter}. After calling this method all\n     * intents sent from the user with id sourceUserId can also be be resolved\n     * by activities in the user with id targetUserId if they match the\n     * specified intent filter.\n     *\n     * @param filter The {@link IntentFilter} the intent has to match\n     * @param sourceUserId The source user id.\n     * @param targetUserId The target user id.\n     * @param flags The possible values are {@link #SKIP_CURRENT_PROFILE} and\n     *            {@link #ONLY_IF_NO_MATCH_FOUND}.\n     * @hide\n     ",
    "links" : [ "#ONLY_IF_NO_MATCH_FOUND", "android.content.IntentFilter", "#SKIP_CURRENT_PROFILE" ]
  }, {
    "name" : "public boolean removeCrossProfileIntentFilter(@NonNull IntentFilter filter, @UserIdInt int sourceUserId, @UserIdInt int targetUserId, int flags)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes all {@code CrossProfileIntentFilter}s which matches the specified intent filer,\n     * source, target and flag.\n     *\n     * @param filter       The {@link IntentFilter} the intent has to match\n     * @param sourceUserId The source user id.\n     * @param targetUserId The target user id.\n     * @param flags        The possible values are {@link #SKIP_CURRENT_PROFILE} and\n     *                     {@link #ONLY_IF_NO_MATCH_FOUND}.\n     * @hide\n     ",
    "links" : [ "#ONLY_IF_NO_MATCH_FOUND", "android.content.IntentFilter", "#SKIP_CURRENT_PROFILE" ]
  }, {
    "name" : "public abstract void clearCrossProfileIntentFilters(@UserIdInt int sourceUserId)",
    "returnType" : "void",
    "comment" : "\n     * Clearing {@code CrossProfileIntentFilter}s which have the specified user\n     * as their source, and have been set by the app calling this method.\n     *\n     * @param sourceUserId The source user id.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable loadItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Drawable loadUnbadgedItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isPackageAvailable(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String installStatusToString(int status, @Nullable String msg)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String installStatusToString(int status)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int installStatusToPublicStatus(int status)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String deleteStatusToString(int status, @Nullable String msg)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String deleteStatusToString(int status)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static int deleteStatusToPublicStatus(int status)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public static String permissionFlagToString(int flag)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getInstallReason(@NonNull String packageName, @NonNull UserHandle user)",
    "returnType" : "int",
    "comment" : "\n     * Return the install reason that was recorded when a package was first\n     * installed for a specific user. Requesting the install reason for another\n     * user will require the permission INTERACT_ACROSS_USERS_FULL.\n     *\n     * @param packageName The package for which to retrieve the install reason\n     * @param user The user for whom to retrieve the install reason\n     * @return The install reason. If the package is not installed for the given\n     *         user, {@code INSTALL_REASON_UNKNOWN} is returned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean canRequestPackageInstalls()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the calling package is allowed to request package installs through package\n     * installer. Apps are encouraged to call this API before launching the package installer via\n     * intent {@link android.content.Intent#ACTION_INSTALL_PACKAGE}. Starting from Android O, the\n     * user can explicitly choose what external sources they trust to install apps on the device.\n     * If this API returns false, the install request will be blocked by the package installer and\n     * a dialog will be shown to the user with an option to launch settings to change their\n     * preference. An application must target Android O or higher and declare permission\n     * {@link android.Manifest.permission#REQUEST_INSTALL_PACKAGES} in order to use this API.\n     *\n     * @return true if the calling package is trusted by the user to request install packages on\n     * the device, false otherwise.\n     * @see android.content.Intent#ACTION_INSTALL_PACKAGE\n     * @see android.provider.Settings#ACTION_MANAGE_UNKNOWN_APP_SOURCES\n     ",
    "links" : [ "android.content.Intent#ACTION_INSTALL_PACKAGE", "android.Manifest.permission#REQUEST_INSTALL_PACKAGES" ]
  }, {
    "name" : "public abstract ComponentName getInstantAppResolverSettingsComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the {@link ComponentName} of the activity providing Settings for the Instant App\n     * resolver.\n     *\n     * @see {@link android.content.Intent#ACTION_INSTANT_APP_RESOLVER_SETTINGS}\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName", "android.content.Intent#ACTION_INSTANT_APP_RESOLVER_SETTINGS" ]
  }, {
    "name" : "public abstract ComponentName getInstantAppInstallerComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the {@link ComponentName} of the activity responsible for installing instant\n     * applications.\n     *\n     * @see {@link android.content.Intent#ACTION_INSTALL_INSTANT_APP_PACKAGE}\n     * @hide\n     ",
    "links" : [ "android.content.ComponentName", "android.content.Intent#ACTION_INSTALL_INSTANT_APP_PACKAGE" ]
  }, {
    "name" : "public abstract String getInstantAppAndroidId(@NonNull String packageName, @NonNull UserHandle user)",
    "returnType" : "String",
    "comment" : "\n     * Return the Android Id for a given Instant App.\n     *\n     * @see {@link android.provider.Settings.Secure#ANDROID_ID}\n     * @hide\n     ",
    "links" : [ "android.provider.Settings.Secure#ANDROID_ID" ]
  }, {
    "name" : "public abstract void registerDexModule(@NonNull String dexModulePath, @Nullable DexModuleRegisterCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register an application dex module with the package manager.\n     *\n     * This call no longer does anything. If a callback is given it is called with a false success\n     * value.\n     *\n     * @param dexModulePath the absolute path of the dex module.\n     * @param callback if not null, {@link DexModuleRegisterCallback#onDexModuleRegistered} will\n     *                 be called once the registration finishes.\n     *\n     * @hide\n     ",
    "links" : [ "#onDexModuleRegistered" ]
  }, {
    "name" : "public ArtManager getArtManager()",
    "returnType" : "ArtManager",
    "comment" : "\n     * Returns the {@link ArtManager} associated with this package manager.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.dex.ArtManager" ]
  }, {
    "name" : "public void setHarmfulAppWarning(@NonNull String packageName, @Nullable CharSequence warning)",
    "returnType" : "void",
    "comment" : "\n     * Sets or clears the harmful app warning details for the given app.\n     *\n     * When set, any attempt to launch an activity in this package will be intercepted and a\n     * warning dialog will be shown to the user instead, with the given warning. The user\n     * will have the option to proceed with the activity launch, or to uninstall the application.\n     *\n     * @param packageName The full name of the package to warn on.\n     * @param warning A warning string to display to the user describing the threat posed by the\n     *                application, or null to clear the warning.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHarmfulAppWarning(@NonNull String packageName)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the harmful app warning string for the given app, or null if there is none set.\n     *\n     * @param packageName The full name of the desired package.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(@NonNull String packageName, @NonNull byte[] certificate, @CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Searches the set of signing certificates by which the given package has proven to have been\n     * signed.  This should be used instead of {@code getPackageInfo} with {@code GET_SIGNATURES}\n     * since it takes into account the possibility of signing certificate rotation, except in the\n     * case of packages that are signed by multiple certificates, for which signing certificate\n     * rotation is not supported.  This method is analogous to using {@code getPackageInfo} with\n     * {@code GET_SIGNING_CERTIFICATES} and then searching through the resulting {@code\n     * signingInfo} field to see if the desired certificate is present.\n     *\n     * @param packageName package whose signing certificates to check\n     * @param certificate signing certificate for which to search\n     * @param type representation of the {@code certificate}\n     * @return true if this package was or is signed by exactly the certificate {@code certificate}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(int uid, @NonNull byte[] certificate, @CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Searches the set of signing certificates by which the package(s) for the given uid has proven\n     * to have been signed.  For multiple packages sharing the same uid, this will return the\n     * signing certificates found in the signing history of the \"newest\" package, where \"newest\"\n     * indicates the package with the newest signing certificate in the shared uid group.  This\n     * method should be used instead of {@code getPackageInfo} with {@code GET_SIGNATURES}\n     * since it takes into account the possibility of signing certificate rotation, except in the\n     * case of packages that are signed by multiple certificates, for which signing certificate\n     * rotation is not supported. This method is analogous to using {@code getPackagesForUid}\n     * followed by {@code getPackageInfo} with {@code GET_SIGNING_CERTIFICATES}, selecting the\n     * {@code PackageInfo} of the newest-signed bpackage , and finally searching through the\n     * resulting {@code signingInfo} field to see if the desired certificate is there.\n     *\n     * @param uid uid whose signing certificates to check\n     * @param certificate signing certificate for which to search\n     * @param type representation of the {@code certificate}\n     * @return true if this package was or is signed by exactly the certificate {@code certificate}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void requestChecksums(@NonNull String packageName, boolean includeSplits, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, NameNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Requests the checksums for APKs within a package.\n     * The checksums will be returned asynchronously via onChecksumsReadyListener.\n     *\n     * By default returns all readily available checksums:\n     * - enforced by platform,\n     * - enforced by installer.\n     * If caller needs a specific checksum kind, they can specify it as required.\n     *\n     * <b>Caution: Android can not verify installer-provided checksums. Make sure you specify\n     * trusted installers.</b>\n     *\n     * @param packageName whose checksums to return.\n     * @param includeSplits whether to include checksums for non-base splits.\n     * @param required explicitly request the checksum types. May incur significant\n     *                 CPU/memory/disk usage.\n     * @param trustedInstallers for checksums enforced by installer, which installers are to be\n     *                          trusted.\n     *                          {@link #TRUST_ALL} will return checksums from any installer,\n     *                          {@link #TRUST_NONE} disables optimized installer-enforced checksums,\n     *                          otherwise the list has to be non-empty list of certificates.\n     * @param onChecksumsReadyListener called once when the results are available.\n     * @throws CertificateEncodingException if an encoding error occurs for trustedInstallers.\n     * @throws IllegalArgumentException if the list of trusted installer certificates is empty.\n     * @throws NameNotFoundException if a package with the given name cannot be found on the system.\n     ",
    "links" : [ "#TRUST_ALL", "#TRUST_NONE" ]
  }, {
    "name" : "public String getDefaultTextClassifierPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the default text classifier package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemTextClassifierPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the system defined text classifier package names, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttentionServicePackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return  attention service package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRotationResolverPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return rotation resolver service's package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getWellbeingPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the wellbeing app package name, or null if it's not defined by the OEM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAppPredictionServicePackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the system defined app predictor package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemCaptionsServicePackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the system defined content capture service package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSetupWizardPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the system defined setup wizard package name, or null if there's none.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getContentCaptureServicePackageName()",
    "returnType" : "String",
    "comment" : " the tests we must keep this method.",
    "links" : [ ]
  }, {
    "name" : "public String getIncidentReportApproverPackageName()",
    "returnType" : "String",
    "comment" : "\n     * @return the incident report approver app package name, or null if it's not defined\n     * by the OEM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageStateProtected(@NonNull String packageName, @UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether a given package's state is protected, e.g. package cannot be disabled,\n     *         suspended, hidden or force stopped.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendDeviceCustomizationReadyBroadcast()",
    "returnType" : "void",
    "comment" : "\n     * Notify to the rest of the system that a new device configuration has\n     * been prepared and that it is time to refresh caches.\n     *\n     * @see android.content.Intent#ACTION_DEVICE_CUSTOMIZATION_READY\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoRevokeWhitelisted()",
    "returnType" : "boolean",
    "comment" : "\n     * <p>\n     * <strong>Note: </strong>In retrospect it would have been preferred to use\n     * more inclusive terminology when naming this API. Similar APIs added will\n     * refrain from using the term \"whitelist\".\n     * </p>\n     *\n     * @return whether this package is whitelisted from having its runtime permission be\n     *         auto-revoked if unused for an extended period of time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultApplicationIcon(@NonNull Drawable drawable)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the provided drawable represents the default activity icon provided by the system.\n     *\n     * PackageManager silently returns a default application icon for any package/activity if the\n     * app itself does not define one or if the system encountered any error when loading the icon.\n     *\n     * Developers can use this to check implement app specific logic around retrying or caching.\n     *\n     * @return true if the drawable represents the default activity icon, false otherwise\n     * @see #getDefaultActivityIcon()\n     * @see #getActivityIcon\n     * @see LauncherActivityInfo#getIcon(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMimeGroup(@NonNull String mimeGroup, @NonNull Set<String> mimeTypes)",
    "returnType" : "void",
    "comment" : "\n     * Sets MIME group's MIME types.\n     *\n     * Libraries should use a reverse-DNS prefix followed by a ':' character and library-specific\n     * group name to avoid namespace collisions, e.g. \"com.example:myFeature\".\n     *\n     * @param mimeGroup MIME group to modify.\n     * @param mimeTypes new MIME types contained by MIME group.\n     * @throws IllegalArgumentException if the MIME group was not declared in the manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getMimeGroup(@NonNull String mimeGroup)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Gets all MIME types contained by MIME group.\n     *\n     * Libraries should use a reverse-DNS prefix followed by a ':' character and library-specific\n     * group name to avoid namespace collisions, e.g. \"com.example:myFeature\".\n     *\n     * @param mimeGroup MIME group to retrieve.\n     * @return MIME types contained by the MIME group.\n     * @throws IllegalArgumentException if the MIME group was not declared in the manifest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Property getProperty(@NonNull String propertyName, @NonNull String packageName) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "\n     * Returns the property defined in the given package's &lt;application&gt; tag.\n     *\n     * @throws NameNotFoundException if either the given package is not installed or if the\n     * given property is not defined within the &lt;application&gt; tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Property getProperty(@NonNull String propertyName, @NonNull ComponentName component) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "\n     * Returns the property defined in the given component declaration.\n     *\n     * @throws NameNotFoundException if either the given component does not exist or if the\n     * given property is not defined within the component declaration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Property getPropertyAsUser(@NonNull String propertyName, @NonNull String packageName, @Nullable String className, int userId) throws NameNotFoundException",
    "returnType" : "Property",
    "comment" : "\n     * If the provided className is {@code null}, returns the property defined on the application.\n     * Otherwise, returns the property defined on the component.\n     *\n     * @throws NameNotFoundException if the given package is not installed on the calling user or\n     * component does not exist or if the given property is not defined within the manifest.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryApplicationProperty(@NonNull String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "\n     * Returns the property definition for all &lt;application&gt; tags.\n     * <p>If the property is not defined with any &lt;application&gt; tag,\n     * returns and empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryActivityProperty(@NonNull String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "\n     * Returns the property definition for all &lt;activity&gt; and &lt;activity-alias&gt; tags.\n     * <p>If the property is not defined with any &lt;activity&gt; and &lt;activity-alias&gt; tag,\n     * returns and empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryProviderProperty(@NonNull String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "\n     * Returns the property definition for all &lt;provider&gt; tags.\n     * <p>If the property is not defined with any &lt;provider&gt; tag,\n     * returns and empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryReceiverProperty(@NonNull String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "\n     * Returns the property definition for all &lt;receiver&gt; tags.\n     * <p>If the property is not defined with any &lt;receiver&gt; tag,\n     * returns and empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Property> queryServiceProperty(@NonNull String propertyName)",
    "returnType" : "List<Property>",
    "comment" : "\n     * Returns the property definition for all &lt;service&gt; tags.\n     * <p>If the property is not defined with any &lt;service&gt; tag,\n     * returns and empty list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canPackageQuery(@NonNull String sourcePackageName, @NonNull String targetPackageName) throws NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the source package is able to query for details about the\n     * target package. Applications that share details about other applications should\n     * use this API to determine if those details should be withheld from callers that\n     * do not otherwise have visibility of them.\n     * <p>\n     * Note: The caller must be able to query for details about the source and target\n     * package. A {@link NameNotFoundException} is thrown if it isn't.\n     *\n     * @param sourcePackageName The source package that would receive details about the\n     *                          target package.\n     * @param targetPackageName The target package whose details would be shared with the\n     *                          source package.\n     * @return {@code true} if the source package is able to query for details about the\n     * target package.\n     * @throws NameNotFoundException if either a given package can not be found on the\n     * system, or if the caller is not able to query for details about the source or\n     * target package.\n     ",
    "links" : [ "NameNotFoundException" ]
  }, {
    "name" : "public boolean[] canPackageQuery(@NonNull String sourcePackageName, @NonNull String[] targetPackageNames) throws NameNotFoundException",
    "returnType" : "boolean[]",
    "comment" : "\n     * Same as {@link #canPackageQuery(String, String)} but accepts an array of target packages to\n     * be queried.\n     *\n     * @param sourcePackageName The source package that would receive details about the\n     *                          target package.\n     * @param targetPackageNames An array of target packages whose details would be shared with the\n     *                           source package.\n     * @return An array of booleans where each member specifies whether the source package is able\n     * to query for details about the target package given by the corresponding value at the same\n     * index in the array of target packages.\n     * @throws NameNotFoundException if either a given package can not be found on the\n     * system, or if the caller is not able to query for details about the source or\n     * target packages.\n     ",
    "links" : [ "#canPackageQuery(String" ]
  }, {
    "name" : "public void makeProviderVisible(int recipientUid, String visibleAuthority)",
    "returnType" : "void",
    "comment" : "\n     * Makes a package that provides an authority {@code visibleAuthority} become visible to the\n     * application {@code recipientUid}.\n     *\n     * @throws SecurityException when called by a package other than the contacts provider\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeUidVisible(int recipientUid, int visibleUid)",
    "returnType" : "void",
    "comment" : "\n     * Makes the package associated with the uid {@code visibleUid} become visible to the\n     * recipient application. The recipient application can receive the details about the\n     * visible package if successful.\n     * <p>\n     * Read <a href=\"/training/basics/intents/package-visibility\">package visibility</a> for more\n     * information.\n     *\n     * @param recipientUid The uid of the application that is being given access to {@code\n     *                     visibleUid}\n     * @param visibleUid The uid of the application that is becoming accessible to {@code\n     *                   recipientAppId}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArchivedPackageInfo getArchivedPackage(@NonNull String packageName)",
    "returnType" : "ArchivedPackageInfo",
    "comment" : "\n     * Return archived package info for the package or null if the package is not installed.\n     * @see PackageInstaller#installPackageArchived\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo getApplicationInfoAsUserUncached(String packageName, @ApplicationInfoFlagsBits long flags, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationInfo getApplicationInfoAsUserCached(String packageName, @ApplicationInfoFlagsBits long flags, int userId)",
    "returnType" : "ApplicationInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void disableApplicationInfoCache()",
    "returnType" : "void",
    "comment" : "\n     * Make getApplicationInfoAsUser() bypass the cache in this process.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void invalidatePackageInfoCache()",
    "returnType" : "void",
    "comment" : "\n     * Invalidate caches of package and permission information system-wide.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PackageInfo getPackageInfoAsUserUncached(String packageName, @PackageInfoFlagsBits long flags, int userId)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PackageInfo getPackageInfoAsUserCached(String packageName, @PackageInfoFlagsBits long flags, int userId)",
    "returnType" : "PackageInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void disablePackageInfoCache()",
    "returnType" : "void",
    "comment" : "\n     * Make getPackageInfoAsUser() bypass the cache in this process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void corkPackageInfoCache()",
    "returnType" : "void",
    "comment" : "\n     * Inhibit package info cache invalidations when correct.\n     *\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void uncorkPackageInfoCache()",
    "returnType" : "void",
    "comment" : "\n     * Enable package info cache invalidations.\n     *\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getHoldLockToken()",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns the token to be used by the subsequent calls to holdLock().\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void holdLock(IBinder token, int durationMs)",
    "returnType" : "void",
    "comment" : "\n     * Holds the PM lock for the specified amount of milliseconds.\n     * Intended for use by the tests that need to imitate lock contention.\n     * The token should be obtained by\n     * {@link android.content.pm.PackageManager#getHoldLockToken()}.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getHoldLockToken()" ]
  }, {
    "name" : "public void setKeepUninstalledPackages(@NonNull List<String> packageList)",
    "returnType" : "void",
    "comment" : "\n     * Set a list of apps to keep around as APKs even if no user has currently installed it.\n     * @param packageList List of package names to keep cached.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canUserUninstall(@NonNull String packageName, @NonNull UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a package is blocked from uninstall for a particular user. A package can be\n     * blocked from being uninstalled by a device owner or profile owner.\n     * See {@link DevicePolicyManager#setUninstallBlocked(ComponentName, String, boolean)}.\n     *\n     * @param packageName Name of the package being uninstalled.\n     * @param user UserHandle who's ability to uninstall a package is being checked.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#setUninstallBlocked(ComponentName" ]
  }, {
    "name" : "public boolean shouldShowNewAppInstalledNotification()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link android.provider.Settings.Global#SHOW_NEW_APP_INSTALLED_NOTIFICATION_ENABLED}.\n     *\n     * @hide\n     ",
    "links" : [ "android.provider.Settings.Global#SHOW_NEW_APP_INSTALLED_NOTIFICATION_ENABLED" ]
  }, {
    "name" : "public void relinquishUpdateOwnership(@NonNull String targetPackage)",
    "returnType" : "void",
    "comment" : "\n     * Attempt to relinquish the update ownership of the given package. Only the current\n     * update owner of the given package can use this API.\n     *\n     * @param targetPackage The installed package whose update owner will be changed.\n     * @throws IllegalArgumentException if the given package is invalid.\n     * @throws SecurityException if you are not the current update owner of the given package.\n     *\n     * @see PackageInstaller.SessionParams#setRequestUpdateOwnership\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerPackageMonitorCallback(@NonNull IRemoteCallback callback, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Register for notifications of package changes such as install, removal and other events.\n     *\n     * @param callback the callback to register for receiving the change events\n     * @param userId The id of registered user\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterPackageMonitorCallback(@NonNull IRemoteCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister for notifications of package changes such as install, removal and other events.\n     *\n     * @param callback the callback to unregister for receiving the change events\n     * @see #registerPackageMonitorCallback(IRemoteCallback, int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public T parseAndroidManifest(@NonNull File apkFile, @NonNull Function<XmlResourceParser, T> parserFunction) throws IOException",
    "returnType" : "T",
    "comment" : "\n     * Retrieve AndroidManifest.xml information for the given application apk file.\n     *\n     * <p>Example:\n     *\n     * <pre><code>\n     * Bundle result;\n     * try {\n     *     result = getContext().getPackageManager().parseAndroidManifest(apkFile,\n     *             xmlResourceParser -> {\n     *                 Bundle bundle = new Bundle();\n     *                 // Search the start tag\n     *                 int type;\n     *                 while ((type = xmlResourceParser.next()) != XmlPullParser.START_TAG\n     *                         &amp;&amp; type != XmlPullParser.END_DOCUMENT) {\n     *                 }\n     *                 if (type != XmlPullParser.START_TAG) {\n     *                     return bundle;\n     *                 }\n     *\n     *                 // Start to read the tags and attributes from the xmlResourceParser\n     *                 if (!xmlResourceParser.getName().equals(\"manifest\")) {\n     *                     return bundle;\n     *                 }\n     *                 String packageName = xmlResourceParser.getAttributeValue(null, \"package\");\n     *                 bundle.putString(\"package\", packageName);\n     *\n     *                 // Continue to read the tags and attributes from the xmlResourceParser\n     *\n     *                 return bundle;\n     *             });\n     * } catch (IOException e) {\n     * }\n     * </code></pre>\n     *\n     * Note: When the parserFunction is invoked, the client can read the AndroidManifest.xml\n     * information by the XmlResourceParser object. After leaving the parserFunction, the\n     * XmlResourceParser object will be closed. The caller should also handle the exception for\n     * calling this method.\n     *\n     * @param apkFile The file of an application apk.\n     * @param parserFunction The parserFunction will be invoked with the XmlResourceParser object\n     *        after getting the AndroidManifest.xml of an application package.\n     *\n     * @return Returns the result of the {@link Function#apply(Object)}.\n     *\n     * @throws IOException if the AndroidManifest.xml of an application package cannot be\n     *             read or accessed.\n     ",
    "links" : [ "java.util.function.Function#apply(Object)" ]
  }, {
    "name" : "public TypedArray extractPackageItemInfoAttributes(PackageItemInfo info, String name, String rootTag, int[] attributes)",
    "returnType" : "TypedArray",
    "comment" : "\n     * @param info    The {@link ServiceInfo} to pull the attributes from.\n     * @param name    The name of the Xml metadata where the attributes are stored.\n     * @param rootTag The root tag of the attributes.\n     * @return A {@link TypedArray} of attributes if successful, {@code null} otherwise.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ServiceInfo", "android.content.res.TypedArray" ]
  } ],
  "methodNames" : [ "public int getUserId()", "public abstract PackageInfo getPackageInfo(@NonNull String packageName, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException", "public abstract PackageInfo getPackageInfo(@NonNull VersionedPackage versionedPackage, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(@NonNull VersionedPackage versionedPackage, @NonNull PackageInfoFlags flags) throws NameNotFoundException", "public abstract PackageInfo getPackageInfoAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException", "public PackageInfo getPackageInfoAsUser(@NonNull String packageName, @NonNull PackageInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException", "public abstract String[] currentToCanonicalPackageNames(@NonNull String[] packageNames)", "public abstract String[] canonicalToCurrentPackageNames(@NonNull String[] packageNames)", "public abstract Intent getLaunchIntentForPackage(@NonNull String packageName)", "public abstract Intent getLeanbackLaunchIntentForPackage(@NonNull String packageName)", "public abstract Intent getCarLaunchIntentForPackage(@NonNull String packageName)", "public IntentSender getLaunchIntentSenderForPackage(@NonNull String packageName)", "public abstract int[] getPackageGids(@NonNull String packageName) throws NameNotFoundException", "public abstract int[] getPackageGids(@NonNull String packageName, int flags) throws NameNotFoundException", "public int[] getPackageGids(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException", "public abstract int getPackageUid(@NonNull String packageName, int flags) throws NameNotFoundException", "public int getPackageUid(@NonNull String packageName, @NonNull PackageInfoFlags flags) throws NameNotFoundException", "public abstract int getPackageUidAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException", "public abstract int getPackageUidAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException", "public int getPackageUidAsUser(@NonNull String packageName, @NonNull PackageInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException", "public abstract PermissionInfo getPermissionInfo(@NonNull String permName, @PermissionInfoFlags int flags) throws NameNotFoundException", "public abstract List<PermissionInfo> queryPermissionsByGroup(@Nullable String permissionGroup, @PermissionInfoFlags int flags) throws NameNotFoundException", "public abstract boolean arePermissionsIndividuallyControlled()", "public abstract boolean isWirelessConsentModeEnabled()", "public abstract PermissionGroupInfo getPermissionGroupInfo(@NonNull String groupName, @PermissionGroupInfoFlags int flags) throws NameNotFoundException", "public abstract List<PermissionGroupInfo> getAllPermissionGroups(@PermissionGroupInfoFlags int flags)", "public void getPlatformPermissionsForGroup(@NonNull String permissionGroupName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<List<String>> callback)", "public void getGroupOfPlatformPermission(@NonNull String permissionName, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<String> callback)", "public abstract ApplicationInfo getApplicationInfo(@NonNull String packageName, int flags) throws NameNotFoundException", "public ApplicationInfo getApplicationInfo(@NonNull String packageName, @NonNull ApplicationInfoFlags flags) throws NameNotFoundException", "public abstract ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, int flags, @UserIdInt int userId) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, @NonNull ApplicationInfoFlags flags, @UserIdInt int userId) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, int flags, @NonNull UserHandle user) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(@NonNull String packageName, @NonNull ApplicationInfoFlags flags, @NonNull UserHandle user) throws NameNotFoundException", "public int getTargetSdkVersion(@NonNull String packageName) throws NameNotFoundException", "public abstract ActivityInfo getActivityInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException", "public ActivityInfo getActivityInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException", "public abstract ActivityInfo getReceiverInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException", "public ActivityInfo getReceiverInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException", "public abstract ServiceInfo getServiceInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException", "public ServiceInfo getServiceInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException", "public abstract ProviderInfo getProviderInfo(@NonNull ComponentName component, int flags) throws NameNotFoundException", "public ProviderInfo getProviderInfo(@NonNull ComponentName component, @NonNull ComponentInfoFlags flags) throws NameNotFoundException", "public ModuleInfo getModuleInfo(@NonNull String packageName, @ModuleInfoFlags int flags) throws NameNotFoundException", "public List<ModuleInfo> getInstalledModules(@InstalledModulesFlags int flags)", "public abstract List<PackageInfo> getInstalledPackages(int flags)", "public List<PackageInfo> getInstalledPackages(@NonNull PackageInfoFlags flags)", "public PersistableBundle getAppMetadata(@NonNull String packageName) throws NameNotFoundException", "public int getAppMetadataSource(@NonNull String packageName) throws NameNotFoundException", "public abstract List<PackageInfo> getPackagesHoldingPermissions(@NonNull String[] permissions, int flags)", "public List<PackageInfo> getPackagesHoldingPermissions(@NonNull String[] permissions, @NonNull PackageInfoFlags flags)", "public abstract List<PackageInfo> getInstalledPackagesAsUser(int flags, @UserIdInt int userId)", "public List<PackageInfo> getInstalledPackagesAsUser(@NonNull PackageInfoFlags flags, @UserIdInt int userId)", "public abstract int checkPermission(@NonNull String permName, @NonNull String packageName)", "public abstract boolean isPermissionRevokedByPolicy(@NonNull String permName, @NonNull String packageName)", "public String getPermissionControllerPackageName()", "public String getSdkSandboxPackageName()", "public abstract boolean addPermission(@NonNull PermissionInfo info)", "public abstract boolean addPermissionAsync(@NonNull PermissionInfo info)", "public abstract void removePermission(@NonNull String permName)", "public abstract void grantRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user)", "public abstract void revokeRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user)", "public void revokeRuntimePermission(@NonNull String packageName, @NonNull String permName, @NonNull UserHandle user, @NonNull String reason)", "public abstract int getPermissionFlags(@NonNull String permName, @NonNull String packageName, @NonNull UserHandle user)", "public abstract void updatePermissionFlags(@NonNull String permName, @NonNull String packageName, @PermissionFlags int flagMask, @PermissionFlags int flagValues, @NonNull UserHandle user)", "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int whitelistFlag)", "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int whitelistFlags)", "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permName, @PermissionWhitelistFlags int whitelistFlags)", "public boolean setAutoRevokeWhitelisted(@NonNull String packageName, boolean whitelisted)", "public boolean isAutoRevokeWhitelisted(@NonNull String packageName)", "public abstract boolean shouldShowRequestPermissionRationale(@NonNull String permName)", "public CharSequence getBackgroundPermissionOptionLabel()", "public Intent buildRequestPermissionsIntent(@NonNull String[] permissions)", "public abstract int checkSignatures(@NonNull String packageName1, @NonNull String packageName2)", "public abstract int checkSignatures(int uid1, int uid2)", "public abstract String[] getPackagesForUid(int uid)", "public abstract String getNameForUid(int uid)", "public abstract String[] getNamesForUids(int[] uids)", "public abstract int getUidForSharedUser(@NonNull String sharedUserName) throws NameNotFoundException", "public abstract List<ApplicationInfo> getInstalledApplications(int flags)", "public List<ApplicationInfo> getInstalledApplications(@NonNull ApplicationInfoFlags flags)", "public abstract List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, @UserIdInt int userId)", "public List<ApplicationInfo> getInstalledApplicationsAsUser(@NonNull ApplicationInfoFlags flags, @UserIdInt int userId)", "public abstract List<InstantAppInfo> getInstantApps()", "public abstract Drawable getInstantAppIcon(String packageName)", "public abstract boolean isInstantApp()", "public abstract boolean isInstantApp(@NonNull String packageName)", "public abstract int getInstantAppCookieMaxBytes()", "public abstract int getInstantAppCookieMaxSize()", "public abstract byte[] getInstantAppCookie()", "public abstract void clearInstantAppCookie()", "public abstract void updateInstantAppCookie(@Nullable byte[] cookie)", "public abstract boolean setInstantAppCookie(@Nullable byte[] cookie)", "public abstract String[] getSystemSharedLibraryNames()", "public abstract List<SharedLibraryInfo> getSharedLibraries(int flags)", "public List<SharedLibraryInfo> getSharedLibraries(@NonNull PackageInfoFlags flags)", "public abstract List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, @UserIdInt int userId)", "public List<SharedLibraryInfo> getSharedLibrariesAsUser(@NonNull PackageInfoFlags flags, @UserIdInt int userId)", "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, int flags)", "public List<SharedLibraryInfo> getDeclaredSharedLibraries(@NonNull String packageName, @NonNull PackageInfoFlags flags)", "public abstract String getServicesSystemSharedLibraryPackageName()", "public abstract String getSharedSystemSharedLibraryPackageName()", "public abstract ChangedPackages getChangedPackages(@IntRange(from = 0) int sequenceNumber)", "public abstract FeatureInfo[] getSystemAvailableFeatures()", "public abstract boolean hasSystemFeature(@NonNull String featureName)", "public abstract boolean hasSystemFeature(@NonNull String featureName, int version)", "public abstract ResolveInfo resolveActivity(@NonNull Intent intent, int flags)", "public ResolveInfo resolveActivity(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract ResolveInfo resolveActivityAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public ResolveInfo resolveActivityAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public abstract List<ResolveInfo> queryIntentActivities(@NonNull Intent intent, int flags)", "public List<ResolveInfo> queryIntentActivities(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)", "public List<ResolveInfo> queryIntentActivitiesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)", "public abstract List<ResolveInfo> queryIntentActivityOptions(@Nullable ComponentName caller, @Nullable Intent[] specifics, @NonNull Intent intent, int flags)", "public List<ResolveInfo> queryIntentActivityOptions(@Nullable ComponentName caller, @Nullable List<Intent> specifics, @NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, int flags)", "public List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, int flags, UserHandle userHandle)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle userHandle)", "public abstract List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public List<ResolveInfo> queryBroadcastReceivers(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public abstract ResolveInfo resolveService(@NonNull Intent intent, int flags)", "public ResolveInfo resolveService(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract ResolveInfo resolveServiceAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public ResolveInfo resolveServiceAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public abstract List<ResolveInfo> queryIntentServices(@NonNull Intent intent, int flags)", "public List<ResolveInfo> queryIntentServices(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)", "public List<ResolveInfo> queryIntentServicesAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)", "public abstract List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, int flags, @UserIdInt int userId)", "protected List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @UserIdInt int userId)", "public List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, int flags, @NonNull UserHandle user)", "public List<ResolveInfo> queryIntentContentProvidersAsUser(@NonNull Intent intent, @NonNull ResolveInfoFlags flags, @NonNull UserHandle user)", "public abstract List<ResolveInfo> queryIntentContentProviders(@NonNull Intent intent, int flags)", "public List<ResolveInfo> queryIntentContentProviders(@NonNull Intent intent, @NonNull ResolveInfoFlags flags)", "public abstract ProviderInfo resolveContentProvider(@NonNull String authority, int flags)", "public ProviderInfo resolveContentProvider(@NonNull String authority, @NonNull ComponentInfoFlags flags)", "public abstract ProviderInfo resolveContentProviderAsUser(@NonNull String providerName, int flags, @UserIdInt int userId)", "public ProviderInfo resolveContentProviderAsUser(@NonNull String providerName, @NonNull ComponentInfoFlags flags, @UserIdInt int userId)", "public abstract List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, int flags)", "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, @NonNull ComponentInfoFlags flags)", "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, int flags, String metaDataKey)", "public List<ProviderInfo> queryContentProviders(@Nullable String processName, int uid, @NonNull ComponentInfoFlags flags, @Nullable String metaDataKey)", "public abstract InstrumentationInfo getInstrumentationInfo(@NonNull ComponentName className, @InstrumentationInfoFlags int flags) throws NameNotFoundException", "public abstract List<InstrumentationInfo> queryInstrumentation(@NonNull String targetPackage, @InstrumentationInfoFlags int flags)", "public abstract Drawable getDrawable(@NonNull String packageName, @DrawableRes int resid, @Nullable ApplicationInfo appInfo)", "public abstract Drawable getActivityIcon(@NonNull ComponentName activityName) throws NameNotFoundException", "public abstract Drawable getActivityIcon(@NonNull Intent intent) throws NameNotFoundException", "public abstract Drawable getActivityBanner(@NonNull ComponentName activityName) throws NameNotFoundException", "public abstract Drawable getActivityBanner(@NonNull Intent intent) throws NameNotFoundException", "public abstract Drawable getDefaultActivityIcon()", "public abstract Drawable getApplicationIcon(@NonNull ApplicationInfo info)", "public abstract Drawable getApplicationIcon(@NonNull String packageName) throws NameNotFoundException", "public abstract Drawable getApplicationBanner(@NonNull ApplicationInfo info)", "public abstract Drawable getApplicationBanner(@NonNull String packageName) throws NameNotFoundException", "public abstract Drawable getActivityLogo(@NonNull ComponentName activityName) throws NameNotFoundException", "public abstract Drawable getActivityLogo(@NonNull Intent intent) throws NameNotFoundException", "public abstract Drawable getApplicationLogo(@NonNull ApplicationInfo info)", "public abstract Drawable getApplicationLogo(@NonNull String packageName) throws NameNotFoundException", "public abstract Drawable getUserBadgedIcon(@NonNull Drawable drawable, @NonNull UserHandle user)", "public abstract Drawable getUserBadgedDrawableForDensity(@NonNull Drawable drawable, @NonNull UserHandle user, @Nullable Rect badgeLocation, int badgeDensity)", "public abstract Drawable getUserBadgeForDensity(@NonNull UserHandle user, int density)", "public abstract Drawable getUserBadgeForDensityNoBackground(@NonNull UserHandle user, int density)", "public abstract CharSequence getUserBadgedLabel(@NonNull CharSequence label, @NonNull UserHandle user)", "public abstract CharSequence getText(@NonNull String packageName, @StringRes int resid, @Nullable ApplicationInfo appInfo)", "public abstract XmlResourceParser getXml(@NonNull String packageName, @XmlRes int resid, @Nullable ApplicationInfo appInfo)", "public abstract CharSequence getApplicationLabel(@NonNull ApplicationInfo info)", "public abstract Resources getResourcesForActivity(@NonNull ComponentName activityName) throws NameNotFoundException", "public abstract Resources getResourcesForApplication(@NonNull ApplicationInfo app) throws NameNotFoundException", "public Resources getResourcesForApplication(@NonNull ApplicationInfo app, @Nullable Configuration configuration) throws NameNotFoundException", "public abstract Resources getResourcesForApplication(@NonNull String packageName) throws NameNotFoundException", "public abstract Resources getResourcesForApplicationAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException", "public PackageInfo getPackageArchiveInfo(@NonNull String archiveFilePath, int flags)", "public PackageInfo getPackageArchiveInfo(@NonNull String archiveFilePath, @NonNull PackageInfoFlags flags)", "public abstract int installExistingPackage(@NonNull String packageName) throws NameNotFoundException", "public abstract int installExistingPackage(@NonNull String packageName, @InstallReason int installReason) throws NameNotFoundException", "public abstract int installExistingPackageAsUser(@NonNull String packageName, @UserIdInt int userId) throws NameNotFoundException", "public abstract void verifyPendingInstall(int id, int verificationCode)", "public abstract void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)", "public abstract void verifyIntentFilter(int verificationId, int verificationCode, @NonNull List<String> failedDomains)", "public abstract int getIntentVerificationStatusAsUser(@NonNull String packageName, @UserIdInt int userId)", "public abstract boolean updateIntentVerificationStatusAsUser(@NonNull String packageName, int status, @UserIdInt int userId)", "public abstract List<IntentFilterVerificationInfo> getIntentFilterVerifications(@NonNull String packageName)", "public abstract List<IntentFilter> getAllIntentFilters(@NonNull String packageName)", "public abstract String getDefaultBrowserPackageNameAsUser(@UserIdInt int userId)", "public abstract boolean setDefaultBrowserPackageNameAsUser(@Nullable String packageName, @UserIdInt int userId)", "public abstract void setInstallerPackageName(@NonNull String targetPackage, @Nullable String installerPackageName)", "public abstract void setUpdateAvailable(@NonNull String packageName, boolean updateAvaialble)", "public abstract void deletePackage(@NonNull String packageName, @Nullable IPackageDeleteObserver observer, @DeleteFlags int flags)", "public abstract void deletePackageAsUser(@NonNull String packageName, @Nullable IPackageDeleteObserver observer, @DeleteFlags int flags, @UserIdInt int userId)", "public abstract String getInstallerPackageName(@NonNull String packageName)", "public InstallSourceInfo getInstallSourceInfo(@NonNull String packageName) throws NameNotFoundException", "public boolean isAppArchivable(@NonNull String packageName) throws NameNotFoundException", "public abstract void clearApplicationUserData(@NonNull String packageName, @Nullable IPackageDataObserver observer)", "public abstract void deleteApplicationCacheFiles(@NonNull String packageName, @Nullable IPackageDataObserver observer)", "public abstract void deleteApplicationCacheFilesAsUser(@NonNull String packageName, @UserIdInt int userId, @Nullable IPackageDataObserver observer)", "public void freeStorageAndNotify(long freeStorageSize, @Nullable IPackageDataObserver observer)", "public abstract void freeStorageAndNotify(@Nullable String volumeUuid, long freeStorageSize, @Nullable IPackageDataObserver observer)", "public void freeStorage(long freeStorageSize, @Nullable IntentSender pi)", "public abstract void freeStorage(@Nullable String volumeUuid, long freeStorageSize, @Nullable IntentSender pi)", "public abstract void getPackageSizeInfoAsUser(@NonNull String packageName, @UserIdInt int userId, @Nullable IPackageStatsObserver observer)", "public void getPackageSizeInfo(@NonNull String packageName, IPackageStatsObserver observer)", "public abstract void addPackageToPreferred(@NonNull String packageName)", "public abstract void removePackageFromPreferred(@NonNull String packageName)", "public abstract List<PackageInfo> getPreferredPackages(int flags)", "public abstract void addPreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)", "public void addPreferredActivityAsUser(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity, @UserIdInt int userId)", "public abstract void replacePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)", "public void replacePreferredActivity(@NonNull IntentFilter filter, int match, @NonNull List<ComponentName> set, @NonNull ComponentName activity)", "public void replacePreferredActivityAsUser(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity, @UserIdInt int userId)", "public abstract void clearPackagePreferredActivities(@NonNull String packageName)", "public void addUniquePreferredActivity(@NonNull IntentFilter filter, int match, @Nullable ComponentName[] set, @NonNull ComponentName activity)", "public abstract int getPreferredActivities(@NonNull List<IntentFilter> outFilters, @NonNull List<ComponentName> outActivities, @Nullable String packageName)", "public abstract ComponentName getHomeActivities(@NonNull List<ResolveInfo> outActivities)", "public abstract void setComponentEnabledSetting(@NonNull ComponentName componentName, @EnabledState int newState, @EnabledFlags int flags)", "public void setComponentEnabledSettings(@NonNull List<ComponentEnabledSetting> settings)", "public abstract int getComponentEnabledSetting(@NonNull ComponentName componentName)", "public void setSyntheticAppDetailsActivityEnabled(@NonNull String packageName, boolean enabled)", "public boolean getSyntheticAppDetailsActivityEnabled(@NonNull String packageName)", "public abstract void setApplicationEnabledSetting(@NonNull String packageName, @EnabledState int newState, @EnabledFlags int flags)", "public abstract int getApplicationEnabledSetting(@NonNull String packageName)", "public abstract void flushPackageRestrictionsAsUser(@UserIdInt int userId)", "public abstract boolean setApplicationHiddenSettingAsUser(@NonNull String packageName, boolean hidden, @NonNull UserHandle userHandle)", "public abstract boolean getApplicationHiddenSettingAsUser(@NonNull String packageName, @NonNull UserHandle userHandle)", "public void setSystemAppState(@NonNull String packageName, @SystemAppState int state)", "public abstract boolean isSafeMode()", "public abstract void addOnPermissionsChangeListener(@NonNull OnPermissionsChangedListener listener)", "public abstract void removeOnPermissionsChangeListener(@NonNull OnPermissionsChangedListener listener)", "public abstract KeySet getKeySetByAlias(@NonNull String packageName, @NonNull String alias)", "public abstract KeySet getSigningKeySet(@NonNull String packageName)", "public abstract boolean isSignedBy(@NonNull String packageName, @NonNull KeySet ks)", "public abstract boolean isSignedByExactly(@NonNull String packageName, @NonNull KeySet ks)", "public String[] setDistractingPackageRestrictions(@NonNull String[] packages, @DistractionRestriction int restrictionFlags)", "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable String dialogMessage)", "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable SuspendDialogInfo dialogInfo)", "public String[] setPackagesSuspended(@Nullable String[] packageNames, boolean suspended, @Nullable PersistableBundle appExtras, @Nullable PersistableBundle launcherExtras, @Nullable SuspendDialogInfo dialogInfo, @SuspendedFlags int flags)", "public String[] getUnsuspendablePackages(@NonNull String[] packageNames)", "public abstract boolean isPackageSuspendedForUser(@NonNull String packageName, int userId)", "public boolean isPackageSuspended(@NonNull String packageName) throws NameNotFoundException", "public boolean isPackageSuspended()", "public Bundle getSuspendedPackageAppExtras()", "public String getSuspendingPackage(@NonNull String suspendedPackage)", "public boolean isPackageStopped(@NonNull String packageName) throws NameNotFoundException", "public boolean isPackageQuarantined(@NonNull String packageName) throws NameNotFoundException", "public abstract void setApplicationCategoryHint(@NonNull String packageName, @ApplicationInfo.Category int categoryHint)", "public static boolean isMoveStatusFinished(int status)", "public abstract int getMoveStatus(int moveId)", "public abstract void registerMoveCallback(@NonNull MoveCallback callback, @NonNull Handler handler)", "public abstract void unregisterMoveCallback(@NonNull MoveCallback callback)", "public abstract int movePackage(@NonNull String packageName, @NonNull VolumeInfo vol)", "public abstract VolumeInfo getPackageCurrentVolume(@NonNull ApplicationInfo app)", "public abstract List<VolumeInfo> getPackageCandidateVolumes(@NonNull ApplicationInfo app)", "public abstract int movePrimaryStorage(@NonNull VolumeInfo vol)", "public abstract VolumeInfo getPrimaryStorageCurrentVolume()", "public abstract List<VolumeInfo> getPrimaryStorageCandidateVolumes()", "public abstract VerifierDeviceIdentity getVerifierDeviceIdentity()", "public abstract boolean isUpgrade()", "public boolean isDeviceUpgrading()", "public abstract PackageInstaller getPackageInstaller()", "public abstract void addCrossProfileIntentFilter(@NonNull IntentFilter filter, @UserIdInt int sourceUserId, @UserIdInt int targetUserId, int flags)", "public boolean removeCrossProfileIntentFilter(@NonNull IntentFilter filter, @UserIdInt int sourceUserId, @UserIdInt int targetUserId, int flags)", "public abstract void clearCrossProfileIntentFilters(@UserIdInt int sourceUserId)", "public abstract Drawable loadItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)", "public abstract Drawable loadUnbadgedItemIcon(@NonNull PackageItemInfo itemInfo, @Nullable ApplicationInfo appInfo)", "public abstract boolean isPackageAvailable(@NonNull String packageName)", "public static String installStatusToString(int status, @Nullable String msg)", "public static String installStatusToString(int status)", "public static int installStatusToPublicStatus(int status)", "public static String deleteStatusToString(int status, @Nullable String msg)", "public static String deleteStatusToString(int status)", "public static int deleteStatusToPublicStatus(int status)", "public static String permissionFlagToString(int flag)", "public abstract int getInstallReason(@NonNull String packageName, @NonNull UserHandle user)", "public abstract boolean canRequestPackageInstalls()", "public abstract ComponentName getInstantAppResolverSettingsComponent()", "public abstract ComponentName getInstantAppInstallerComponent()", "public abstract String getInstantAppAndroidId(@NonNull String packageName, @NonNull UserHandle user)", "public abstract void registerDexModule(@NonNull String dexModulePath, @Nullable DexModuleRegisterCallback callback)", "public ArtManager getArtManager()", "public void setHarmfulAppWarning(@NonNull String packageName, @Nullable CharSequence warning)", "public CharSequence getHarmfulAppWarning(@NonNull String packageName)", "public boolean hasSigningCertificate(@NonNull String packageName, @NonNull byte[] certificate, @CertificateInputType int type)", "public boolean hasSigningCertificate(int uid, @NonNull byte[] certificate, @CertificateInputType int type)", "public void requestChecksums(@NonNull String packageName, boolean includeSplits, @Checksum.TypeMask int required, @NonNull List<Certificate> trustedInstallers, @NonNull OnChecksumsReadyListener onChecksumsReadyListener) throws CertificateEncodingException, NameNotFoundException", "public String getDefaultTextClassifierPackageName()", "public String getSystemTextClassifierPackageName()", "public String getAttentionServicePackageName()", "public String getRotationResolverPackageName()", "public String getWellbeingPackageName()", "public String getAppPredictionServicePackageName()", "public String getSystemCaptionsServicePackageName()", "public String getSetupWizardPackageName()", "public final String getContentCaptureServicePackageName()", "public String getIncidentReportApproverPackageName()", "public boolean isPackageStateProtected(@NonNull String packageName, @UserIdInt int userId)", "public void sendDeviceCustomizationReadyBroadcast()", "public boolean isAutoRevokeWhitelisted()", "public boolean isDefaultApplicationIcon(@NonNull Drawable drawable)", "public void setMimeGroup(@NonNull String mimeGroup, @NonNull Set<String> mimeTypes)", "public Set<String> getMimeGroup(@NonNull String mimeGroup)", "public Property getProperty(@NonNull String propertyName, @NonNull String packageName) throws NameNotFoundException", "public Property getProperty(@NonNull String propertyName, @NonNull ComponentName component) throws NameNotFoundException", "public Property getPropertyAsUser(@NonNull String propertyName, @NonNull String packageName, @Nullable String className, int userId) throws NameNotFoundException", "public List<Property> queryApplicationProperty(@NonNull String propertyName)", "public List<Property> queryActivityProperty(@NonNull String propertyName)", "public List<Property> queryProviderProperty(@NonNull String propertyName)", "public List<Property> queryReceiverProperty(@NonNull String propertyName)", "public List<Property> queryServiceProperty(@NonNull String propertyName)", "public boolean canPackageQuery(@NonNull String sourcePackageName, @NonNull String targetPackageName) throws NameNotFoundException", "public boolean[] canPackageQuery(@NonNull String sourcePackageName, @NonNull String[] targetPackageNames) throws NameNotFoundException", "public void makeProviderVisible(int recipientUid, String visibleAuthority)", "public void makeUidVisible(int recipientUid, int visibleUid)", "public ArchivedPackageInfo getArchivedPackage(@NonNull String packageName)", "private static ApplicationInfo getApplicationInfoAsUserUncached(String packageName, @ApplicationInfoFlagsBits long flags, int userId)", "public static ApplicationInfo getApplicationInfoAsUserCached(String packageName, @ApplicationInfoFlagsBits long flags, int userId)", "public static void disableApplicationInfoCache()", "public static void invalidatePackageInfoCache()", "private static PackageInfo getPackageInfoAsUserUncached(String packageName, @PackageInfoFlagsBits long flags, int userId)", "public static PackageInfo getPackageInfoAsUserCached(String packageName, @PackageInfoFlagsBits long flags, int userId)", "public static void disablePackageInfoCache()", "public static void corkPackageInfoCache()", "public static void uncorkPackageInfoCache()", "public IBinder getHoldLockToken()", "public void holdLock(IBinder token, int durationMs)", "public void setKeepUninstalledPackages(@NonNull List<String> packageList)", "public boolean canUserUninstall(@NonNull String packageName, @NonNull UserHandle user)", "public boolean shouldShowNewAppInstalledNotification()", "public void relinquishUpdateOwnership(@NonNull String targetPackage)", "public void registerPackageMonitorCallback(@NonNull IRemoteCallback callback, int userId)", "public void unregisterPackageMonitorCallback(@NonNull IRemoteCallback callback)", "public T parseAndroidManifest(@NonNull File apkFile, @NonNull Function<XmlResourceParser, T> parserFunction) throws IOException", "public TypedArray extractPackageItemInfoAttributes(PackageItemInfo info, String name, String rootTag, int[] attributes)" ],
  "variableNames" : [ "TAG", "APPLY_DEFAULT_TO_DEVICE_PROTECTED_STORAGE", "ENABLE_SHARED_UID_MIGRATION", "PROPERTY_MEDIA_CAPABILITIES", "PROPERTY_SELF_CERTIFIED_NETWORK_CAPABILITIES", "PROPERTY_NO_APP_DATA_STORAGE", "PROPERTY_SPECIAL_USE_FGS_SUBTYPE", "PROPERTY_COMPAT_OVERRIDE_LANDSCAPE_TO_PORTRAIT", "PROPERTY_LEGACY_UPDATE_OWNERSHIP_DENYLIST", "PROPERTY_ANDROID_SAFETY_LABEL", "TYPE_UNKNOWN", "TYPE_ACTIVITY", "TYPE_RECEIVER", "TYPE_SERVICE", "TYPE_PROVIDER", "TYPE_APPLICATION", "GET_ACTIVITIES", "GET_RECEIVERS", "GET_SERVICES", "GET_PROVIDERS", "GET_INSTRUMENTATION", "GET_INTENT_FILTERS", "GET_SIGNATURES", "GET_RESOLVED_FILTER", "GET_META_DATA", "GET_GIDS", "GET_DISABLED_COMPONENTS", "MATCH_DISABLED_COMPONENTS", "GET_SHARED_LIBRARY_FILES", "GET_URI_PERMISSION_PATTERNS", "GET_PERMISSIONS", "GET_UNINSTALLED_PACKAGES", "MATCH_UNINSTALLED_PACKAGES", "GET_CONFIGURATIONS", "GET_DISABLED_UNTIL_USED_COMPONENTS", "MATCH_DISABLED_UNTIL_USED_COMPONENTS", "MATCH_DEFAULT_ONLY", "MATCH_ALL", "MATCH_DIRECT_BOOT_UNAWARE", "MATCH_DIRECT_BOOT_AWARE", "MATCH_SYSTEM_ONLY", "MATCH_FACTORY_ONLY", "MATCH_ANY_USER", "MATCH_KNOWN_PACKAGES", "MATCH_INSTANT", "MATCH_VISIBLE_TO_INSTANT_APP_ONLY", "MATCH_EXPLICITLY_VISIBLE_ONLY", "MATCH_STATIC_SHARED_AND_SDK_LIBRARIES", "GET_SIGNING_CERTIFICATES", "MATCH_DIRECT_BOOT_AUTO", "MATCH_DEBUG_TRIAGED_MISSING", "MATCH_CLONE_PROFILE", "MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS", "MATCH_APEX", "GET_ATTRIBUTIONS", "GET_ATTRIBUTIONS_LONG", "MATCH_ARCHIVED_PACKAGES", "MATCH_QUARANTINED_COMPONENTS", "MATCH_CLONE_PROFILE_LONG", "SKIP_CURRENT_PROFILE", "ONLY_IF_NO_MATCH_FOUND", "MODULE_APEX_NAME", "PERMISSION_GRANTED", "PERMISSION_DENIED", "SIGNATURE_MATCH", "SIGNATURE_NEITHER_SIGNED", "SIGNATURE_FIRST_NOT_SIGNED", "SIGNATURE_SECOND_NOT_SIGNED", "SIGNATURE_NO_MATCH", "SIGNATURE_UNKNOWN_PACKAGE", "COMPONENT_ENABLED_STATE_DEFAULT", "COMPONENT_ENABLED_STATE_ENABLED", "COMPONENT_ENABLED_STATE_DISABLED", "COMPONENT_ENABLED_STATE_DISABLED_USER", "COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED", "ROLLBACK_DATA_POLICY_RESTORE", "ROLLBACK_DATA_POLICY_WIPE", "ROLLBACK_DATA_POLICY_RETAIN", "ROLLBACK_USER_IMPACT_LOW", "ROLLBACK_USER_IMPACT_HIGH", "ROLLBACK_USER_IMPACT_ONLY_MANUAL", "INSTALL_REPLACE_EXISTING", "INSTALL_ALLOW_TEST", "INSTALL_INTERNAL", "INSTALL_FROM_ADB", "INSTALL_ALL_USERS", "INSTALL_REQUEST_DOWNGRADE", "INSTALL_GRANT_ALL_REQUESTED_PERMISSIONS", "INSTALL_FORCE_VOLUME_UUID", "INSTALL_FORCE_PERMISSION_PROMPT", "INSTALL_INSTANT_APP", "INSTALL_DONT_KILL_APP", "INSTALL_FULL_APP", "INSTALL_ALLOCATE_AGGRESSIVE", "INSTALL_VIRTUAL_PRELOAD", "INSTALL_APEX", "INSTALL_ENABLE_ROLLBACK", "INSTALL_DISABLE_VERIFICATION", "INSTALL_ALLOW_DOWNGRADE", "INSTALL_STAGED", "INSTALL_ALL_WHITELIST_RESTRICTED_PERMISSIONS", "INSTALL_DISABLE_ALLOWED_APEX_UPDATE_CHECK", "INSTALL_BYPASS_LOW_TARGET_SDK_BLOCK", "INSTALL_REQUEST_UPDATE_OWNERSHIP", "INSTALL_FROM_MANAGED_USER_OR_PROFILE", "INSTALL_ARCHIVED", "INSTALL_IGNORE_DEXOPT_PROFILE", "INSTALL_UNARCHIVE_DRAFT", "INSTALL_UNARCHIVE", "INSTALL_DEVELOPMENT_FORCE_NON_STAGED_APEX_UPDATE", "DONT_KILL_APP", "SYNCHRONOUS", "FLAG_SUSPEND_QUARANTINED", "INSTALL_REASON_UNKNOWN", "INSTALL_REASON_POLICY", "INSTALL_REASON_DEVICE_RESTORE", "INSTALL_REASON_DEVICE_SETUP", "INSTALL_REASON_USER", "INSTALL_REASON_ROLLBACK", "INSTALL_SCENARIO_DEFAULT", "INSTALL_SCENARIO_FAST", "INSTALL_SCENARIO_BULK", "INSTALL_SCENARIO_BULK_SECONDARY", "UNINSTALL_REASON_UNKNOWN", "UNINSTALL_REASON_USER_TYPE", "INSTALL_UNKNOWN", "INSTALL_SUCCEEDED", "INSTALL_FAILED_ALREADY_EXISTS", "INSTALL_FAILED_INVALID_APK", "INSTALL_FAILED_INVALID_URI", "INSTALL_FAILED_INSUFFICIENT_STORAGE", "INSTALL_FAILED_DUPLICATE_PACKAGE", "INSTALL_FAILED_NO_SHARED_USER", "INSTALL_FAILED_UPDATE_INCOMPATIBLE", "INSTALL_FAILED_SHARED_USER_INCOMPATIBLE", "INSTALL_FAILED_MISSING_SHARED_LIBRARY", "INSTALL_FAILED_REPLACE_COULDNT_DELETE", "INSTALL_FAILED_DEXOPT", "INSTALL_FAILED_OLDER_SDK", "INSTALL_FAILED_CONFLICTING_PROVIDER", "INSTALL_FAILED_NEWER_SDK", "INSTALL_FAILED_TEST_ONLY", "INSTALL_FAILED_CPU_ABI_INCOMPATIBLE", "INSTALL_FAILED_MISSING_FEATURE", "INSTALL_FAILED_CONTAINER_ERROR", "INSTALL_FAILED_INVALID_INSTALL_LOCATION", "INSTALL_FAILED_MEDIA_UNAVAILABLE", "INSTALL_FAILED_VERIFICATION_TIMEOUT", "INSTALL_FAILED_VERIFICATION_FAILURE", "INSTALL_FAILED_PACKAGE_CHANGED", "INSTALL_FAILED_UID_CHANGED", "INSTALL_FAILED_VERSION_DOWNGRADE", "INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE", "INSTALL_FAILED_SANDBOX_VERSION_DOWNGRADE", "INSTALL_FAILED_MISSING_SPLIT", "INSTALL_FAILED_DEPRECATED_SDK_VERSION", "INSTALL_PARSE_FAILED_NOT_APK", "INSTALL_PARSE_FAILED_BAD_MANIFEST", "INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION", "INSTALL_PARSE_FAILED_NO_CERTIFICATES", "INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES", "INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING", "INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME", "INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID", "INSTALL_PARSE_FAILED_MANIFEST_MALFORMED", "INSTALL_PARSE_FAILED_MANIFEST_EMPTY", "INSTALL_FAILED_INTERNAL_ERROR", "INSTALL_FAILED_USER_RESTRICTED", "INSTALL_FAILED_DUPLICATE_PERMISSION", "INSTALL_FAILED_NO_MATCHING_ABIS", "NO_NATIVE_LIBRARIES", "INSTALL_FAILED_ABORTED", "INSTALL_FAILED_SESSION_INVALID", "INSTALL_FAILED_BAD_DEX_METADATA", "INSTALL_FAILED_BAD_SIGNATURE", "INSTALL_FAILED_OTHER_STAGED_SESSION_IN_PROGRESS", "INSTALL_FAILED_MULTIPACKAGE_INCONSISTENCY", "INSTALL_FAILED_WRONG_INSTALLED_VERSION", "INSTALL_FAILED_PROCESS_NOT_DEFINED", "INSTALL_PARSE_FAILED_RESOURCES_ARSC_COMPRESSED", "INSTALL_PARSE_FAILED_SKIPPED", "INSTALL_FAILED_DUPLICATE_PERMISSION_GROUP", "INSTALL_FAILED_BAD_PERMISSION_GROUP", "INSTALL_ACTIVATION_FAILED", "INSTALL_FAILED_PRE_APPROVAL_NOT_AVAILABLE", "INSTALL_FAILED_SHARED_LIBRARY_BAD_CERTIFICATE_DIGEST", "INSTALL_FAILED_MULTI_ARCH_NOT_MATCH_ALL_NATIVE_ABIS", "USER_MIN_ASPECT_RATIO_UNSET", "USER_MIN_ASPECT_RATIO_SPLIT_SCREEN", "USER_MIN_ASPECT_RATIO_DISPLAY_SIZE", "USER_MIN_ASPECT_RATIO_4_3", "USER_MIN_ASPECT_RATIO_16_9", "USER_MIN_ASPECT_RATIO_3_2", "USER_MIN_ASPECT_RATIO_FULLSCREEN", "USER_MIN_ASPECT_RATIO_APP_DEFAULT", "DELETE_KEEP_DATA", "DELETE_ALL_USERS", "DELETE_SYSTEM_APP", "DELETE_DONT_KILL_APP", "DELETE_ARCHIVE", "DELETE_CHATTY", "DELETE_SUCCEEDED", "DELETE_FAILED_INTERNAL_ERROR", "DELETE_FAILED_DEVICE_POLICY_MANAGER", "DELETE_FAILED_USER_RESTRICTED", "DELETE_FAILED_OWNER_BLOCKED", "DELETE_FAILED_ABORTED", "DELETE_FAILED_USED_SHARED_LIBRARY", "DELETE_FAILED_APP_PINNED", "DELETE_FAILED_FOR_CHILD_PROFILE", "MOVE_SUCCEEDED", "MOVE_FAILED_INSUFFICIENT_STORAGE", "MOVE_FAILED_DOESNT_EXIST", "MOVE_FAILED_SYSTEM_PACKAGE", "MOVE_FAILED_INVALID_LOCATION", "MOVE_FAILED_INTERNAL_ERROR", "MOVE_FAILED_OPERATION_PENDING", "MOVE_FAILED_DEVICE_ADMIN", "MOVE_FAILED_3RD_PARTY_NOT_ALLOWED_ON_INTERNAL", "MOVE_FAILED_LOCKED_USER", "MOVE_INTERNAL", "MOVE_EXTERNAL_MEDIA", "EXTRA_MOVE_ID", "EXTRA_PACKAGE_MONITOR_CALLBACK_RESULT", "VERIFICATION_ALLOW_WITHOUT_SUFFICIENT", "VERIFICATION_ALLOW", "VERIFICATION_REJECT", "INTENT_FILTER_VERIFICATION_SUCCESS", "INTENT_FILTER_VERIFICATION_FAILURE", "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED", "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ASK", "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS", "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_NEVER", "INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_ALWAYS_ASK", "APP_METADATA_SOURCE_UNKNOWN", "APP_METADATA_SOURCE_APK", "APP_METADATA_SOURCE_INSTALLER", "APP_METADATA_SOURCE_SYSTEM_IMAGE", "MAXIMUM_VERIFICATION_TIMEOUT", "FEATURE_AUDIO_LOW_LATENCY", "FEATURE_AUDIO_OUTPUT", "FEATURE_AUDIO_PRO", "FEATURE_AUDIO_SPATIAL_HEADTRACKING_LOW_LATENCY", "FEATURE_BLUETOOTH", "FEATURE_BLUETOOTH_LE", "FEATURE_CAMERA", "FEATURE_CAMERA_AUTOFOCUS", "FEATURE_CAMERA_ANY", "FEATURE_CAMERA_EXTERNAL", "FEATURE_CAMERA_FLASH", "FEATURE_CAMERA_FRONT", "FEATURE_CAMERA_LEVEL_FULL", "FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR", "FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING", "FEATURE_CAMERA_CAPABILITY_RAW", "FEATURE_CAMERA_AR", "FEATURE_CAMERA_CONCURRENT", "FEATURE_CONSUMER_IR", "FEATURE_CONTEXT_HUB", "FEATURE_CTS", "FEATURE_CAR_TEMPLATES_HOST", "FEATURE_CAR_SPLITSCREEN_MULTITASKING", "FEATURE_CAR_DISPLAY_COMPATIBILITY", "FEATURE_IDENTITY_CREDENTIAL_HARDWARE", "FEATURE_IDENTITY_CREDENTIAL_HARDWARE_DIRECT_ACCESS", "FEATURE_LOCATION", "FEATURE_LOCATION_GPS", "FEATURE_LOCATION_NETWORK", "FEATURE_FELICA", "FEATURE_RAM_LOW", "FEATURE_RAM_NORMAL", "FEATURE_MICROPHONE", "FEATURE_NFC", "FEATURE_NFC_HCE", "FEATURE_NFC_HOST_CARD_EMULATION", "FEATURE_NFC_HOST_CARD_EMULATION_NFCF", "FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC", "FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE", "FEATURE_NFC_CHARGING", "FEATURE_NFC_BEAM", "FEATURE_NFC_ANY", "FEATURE_SDK_SANDBOX_WORK_PROFILE_INSTALL", "FEATURE_SE_OMAPI_UICC", "FEATURE_SE_OMAPI_ESE", "FEATURE_SE_OMAPI_SD", "FEATURE_SECURITY_MODEL_COMPATIBLE", "FEATURE_OPENGLES_EXTENSION_PACK", "FEATURE_VIRTUALIZATION_FRAMEWORK", "FEATURE_VULKAN_HARDWARE_LEVEL", "FEATURE_VULKAN_HARDWARE_COMPUTE", "FEATURE_VULKAN_HARDWARE_VERSION", "FEATURE_VULKAN_DEQP_LEVEL", "FEATURE_OPENGLES_DEQP_LEVEL", "FEATURE_BROADCAST_RADIO", "FEATURE_SECURE_LOCK_SCREEN", "FEATURE_SENSOR_ACCELEROMETER", "FEATURE_SENSOR_BAROMETER", "FEATURE_SENSOR_COMPASS", "FEATURE_SENSOR_GYROSCOPE", "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES", "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES", "FEATURE_SENSOR_ACCELEROMETER_LIMITED_AXES_UNCALIBRATED", "FEATURE_SENSOR_GYROSCOPE_LIMITED_AXES_UNCALIBRATED", "FEATURE_SENSOR_LIGHT", "FEATURE_SENSOR_PROXIMITY", "FEATURE_SENSOR_STEP_COUNTER", "FEATURE_SENSOR_STEP_DETECTOR", "FEATURE_SENSOR_HEART_RATE", "FEATURE_SENSOR_HEART_RATE_ECG", "FEATURE_SENSOR_RELATIVE_HUMIDITY", "FEATURE_SENSOR_AMBIENT_TEMPERATURE", "FEATURE_SENSOR_HINGE_ANGLE", "FEATURE_SENSOR_HEADING", "FEATURE_SENSOR_DYNAMIC_HEAD_TRACKER", "FEATURE_HIFI_SENSORS", "FEATURE_ASSIST_GESTURE", "FEATURE_TELEPHONY", "FEATURE_TELEPHONY_CDMA", "FEATURE_TELEPHONY_GSM", "FEATURE_TELEPHONY_CARRIERLOCK", "FEATURE_TELEPHONY_EUICC", "FEATURE_TELEPHONY_EUICC_MEP", "FEATURE_TELEPHONY_MBMS", "FEATURE_TELEPHONY_IMS", "FEATURE_TELEPHONY_IMS_SINGLE_REGISTRATION", "FEATURE_TELECOM", "FEATURE_TELEPHONY_CALLING", "FEATURE_TELEPHONY_DATA", "FEATURE_TELEPHONY_MESSAGING", "FEATURE_TELEPHONY_RADIO_ACCESS", "FEATURE_TELEPHONY_SATELLITE", "FEATURE_TELEPHONY_SUBSCRIPTION", "FEATURE_THREAD_NETWORK", "FEATURE_UWB", "FEATURE_USB_HOST", "FEATURE_USB_ACCESSORY", "FEATURE_SIP", "FEATURE_SIP_VOIP", "FEATURE_CONNECTION_SERVICE", "FEATURE_TOUCHSCREEN", "FEATURE_TOUCHSCREEN_MULTITOUCH", "FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT", "FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND", "FEATURE_FAKETOUCH", "FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT", "FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND", "FEATURE_FINGERPRINT", "FEATURE_FACE", "FEATURE_IRIS", "FEATURE_SCREEN_PORTRAIT", "FEATURE_SCREEN_LANDSCAPE", "FEATURE_LIVE_WALLPAPER", "FEATURE_APP_WIDGETS", "FEATURE_CANT_SAVE_STATE", "FEATURE_GAME_SERVICE", "FEATURE_VOICE_RECOGNIZERS", "FEATURE_HOME_SCREEN", "FEATURE_INPUT_METHODS", "FEATURE_DEVICE_ADMIN", "FEATURE_LEANBACK", "FEATURE_LEANBACK_ONLY", "FEATURE_LIVE_TV", "FEATURE_WIFI", "FEATURE_WIFI_DIRECT", "FEATURE_WIFI_AWARE", "FEATURE_WIFI_PASSPOINT", "FEATURE_WIFI_RTT", "FEATURE_LOWPAN", "FEATURE_AUTOMOTIVE", "FEATURE_TELEVISION", "FEATURE_WATCH", "FEATURE_EMBEDDED", "FEATURE_PC", "FEATURE_PRINTING", "FEATURE_COMPANION_DEVICE_SETUP", "FEATURE_BACKUP", "FEATURE_FREEFORM_WINDOW_MANAGEMENT", "FEATURE_PICTURE_IN_PICTURE", "FEATURE_EXPANDED_PICTURE_IN_PICTURE", "FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS", "FEATURE_MANAGED_USERS", "FEATURE_MANAGED_PROFILES", "FEATURE_VERIFIED_BOOT", "FEATURE_SECURELY_REMOVES_USERS", "FEATURE_FILE_BASED_ENCRYPTION", "FEATURE_ADOPTABLE_STORAGE", "FEATURE_WEBVIEW", "FEATURE_ETHERNET", "FEATURE_HDMI_CEC", "FEATURE_GAMEPAD", "FEATURE_MIDI", "FEATURE_VR_MODE", "FEATURE_VR_MODE_HIGH_PERFORMANCE", "FEATURE_AUTOFILL", "FEATURE_VR_HEADTRACKING", "FEATURE_HARDWARE_KEYSTORE", "FEATURE_STRONGBOX_KEYSTORE", "FEATURE_SLICES_DISABLED", "FEATURE_DEVICE_UNIQUE_ATTESTATION", "FEATURE_DEVICE_ID_ATTESTATION", "FEATURE_IPSEC_TUNNELS", "FEATURE_IPSEC_TUNNEL_MIGRATION", "FEATURE_CONTROLS", "FEATURE_REBOOT_ESCROW", "FEATURE_INCREMENTAL_DELIVERY", "FEATURE_EROFS_LEGACY", "FEATURE_EROFS", "FEATURE_TUNER", "FEATURE_APP_ENUMERATION", "FEATURE_KEYSTORE_SINGLE_USE_KEY", "FEATURE_KEYSTORE_LIMITED_USE_KEY", "FEATURE_KEYSTORE_APP_ATTEST_KEY", "FEATURE_APP_COMPAT_OVERRIDES", "FEATURE_COMMUNAL_MODE", "FEATURE_DREAM_OVERLAY", "FEATURE_WINDOW_MAGNIFICATION", "FEATURE_CREDENTIALS", "FEATURE_DEVICE_LOCK", "FEATURE_WALLET_LOCATION_BASED_SUGGESTIONS", "FEATURE_ROTARY_ENCODER_LOW_RES", "FEATURE_CONTEXTUAL_SEARCH_HELPER", "APP_ENUMERATION_ENABLED_BY_DEFAULT", "EXTRA_VERIFICATION_URI", "EXTRA_VERIFICATION_ID", "EXTRA_VERIFICATION_INSTALLER_PACKAGE", "EXTRA_VERIFICATION_INSTALL_FLAGS", "EXTRA_VERIFICATION_INSTALLER_UID", "EXTRA_VERIFICATION_PACKAGE_NAME", "EXTRA_VERIFICATION_RESULT", "EXTRA_USER_ACTION_REQUIRED", "EXTRA_VERIFICATION_VERSION_CODE", "EXTRA_VERIFICATION_LONG_VERSION_CODE", "EXTRA_VERIFICATION_ROOT_HASH", "EXTRA_INTENT_FILTER_VERIFICATION_ID", "EXTRA_INTENT_FILTER_VERIFICATION_URI_SCHEME", "EXTRA_INTENT_FILTER_VERIFICATION_HOSTS", "EXTRA_INTENT_FILTER_VERIFICATION_PACKAGE_NAME", "ACTION_REQUEST_PERMISSIONS", "ACTION_REQUEST_PERMISSIONS_FOR_OTHER", "EXTRA_REQUEST_PERMISSIONS_NAMES", "EXTRA_REQUEST_PERMISSIONS_DEVICE_ID", "EXTRA_REQUEST_PERMISSIONS_RESULTS", "EXTRA_REQUEST_PERMISSIONS_LEGACY_ACCESS_PERMISSION_NAMES", "EXTRA_FAILURE_EXISTING_PACKAGE", "EXTRA_FAILURE_EXISTING_PERMISSION", "FLAG_PERMISSION_USER_SET", "FLAG_PERMISSION_USER_FIXED", "FLAG_PERMISSION_POLICY_FIXED", "FLAG_PERMISSION_REVOKE_ON_UPGRADE", "FLAG_PERMISSION_SYSTEM_FIXED", "FLAG_PERMISSION_GRANTED_BY_DEFAULT", "FLAG_PERMISSION_REVIEW_REQUIRED", "FLAG_PERMISSION_REVOKE_WHEN_REQUESTED", "FLAG_PERMISSION_USER_SENSITIVE_WHEN_GRANTED", "FLAG_PERMISSION_USER_SENSITIVE_WHEN_DENIED", "FLAG_PERMISSION_RESTRICTION_INSTALLER_EXEMPT", "FLAG_PERMISSION_RESTRICTION_SYSTEM_EXEMPT", "FLAG_PERMISSION_RESTRICTION_UPGRADE_EXEMPT", "FLAG_PERMISSION_APPLY_RESTRICTION", "FLAG_PERMISSION_GRANTED_BY_ROLE", "FLAG_PERMISSION_REVOKED_COMPAT", "FLAG_PERMISSION_ONE_TIME", "FLAG_PERMISSION_AUTO_REVOKED", "FLAG_PERMISSION_SELECTED_LOCATION_ACCURACY", "FLAGS_PERMISSION_RESERVED_PERMISSION_CONTROLLER", "FLAGS_PERMISSION_RESTRICTION_ANY_EXEMPT", "MASK_PERMISSION_FLAGS", "MASK_PERMISSION_FLAGS_ALL", "APP_DETAILS_ACTIVITY_CLASS_NAME", "FLAG_PERMISSION_WHITELIST_SYSTEM", "FLAG_PERMISSION_WHITELIST_INSTALLER", "FLAG_PERMISSION_WHITELIST_UPGRADE", "SYSTEM_SHARED_LIBRARY_SERVICES", "SYSTEM_SHARED_LIBRARY_SHARED", "NOTIFY_PACKAGE_USE_ACTIVITY", "NOTIFY_PACKAGE_USE_SERVICE", "NOTIFY_PACKAGE_USE_FOREGROUND_SERVICE", "NOTIFY_PACKAGE_USE_BROADCAST_RECEIVER", "NOTIFY_PACKAGE_USE_CONTENT_PROVIDER", "NOTIFY_PACKAGE_USE_BACKUP", "NOTIFY_PACKAGE_USE_CROSS_PACKAGE", "NOTIFY_PACKAGE_USE_INSTRUMENTATION", "NOTIFY_PACKAGE_USE_REASONS_COUNT", "VERSION_CODE_HIGHEST", "FILTER_APPLICATION_QUERY", "SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_HIDDEN", "SYSTEM_APP_STATE_HIDDEN_UNTIL_INSTALLED_VISIBLE", "SYSTEM_APP_STATE_INSTALLED", "SYSTEM_APP_STATE_UNINSTALLED", "PROPERTY_ALLOW_ADB_BACKUP", "RESTRICTION_NONE", "RESTRICTION_HIDE_FROM_SUGGESTIONS", "RESTRICTION_HIDE_NOTIFICATIONS", "CERT_INPUT_RAW_X509", "CERT_INPUT_SHA256", "TRUST_ALL", "TRUST_NONE", "sApplicationInfoCache", "sCacheAutoCorker", "sPackageInfoCache" ]
}