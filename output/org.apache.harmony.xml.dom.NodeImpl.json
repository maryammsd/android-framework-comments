{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/xml/dom/NodeImpl.java",
  "packageName" : "org.apache.harmony.xml.dom",
  "className" : "NodeImpl",
  "comment" : "\n * A straightforward implementation of the corresponding W3C DOM node.\n *\n * <p>Some fields have package visibility so other classes can access them while\n * maintaining the DOM structure.\n *\n * <p>This class represents a Node that has neither a parent nor children.\n * Subclasses may have either.\n *\n * <p>Some code was adapted from Apache Xerces.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY_LIST",
    "type" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL_TYPE_INFO",
    "type" : "TypeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "document",
    "type" : "DocumentImpl",
    "comment" : "\n     * The containing document. This is non-null except for DocumentTypeImpl\n     * nodes created by the DOMImplementation.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node cloneNode(boolean deep)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NamedNodeMap getAttributes()",
    "returnType" : "NamedNodeMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceURI()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract short getNodeType()",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNodeValue() throws DOMException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPrefix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttributes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSupported(String feature, String version)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void normalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node removeChild(Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setNodeValue(String nodeValue) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPrefix(String prefix) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String validatePrefix(String prefix, boolean namespaceAware, String namespaceURI)",
    "returnType" : "String",
    "comment" : "\n     * Validates the element or attribute namespace prefix on this node.\n     *\n     * @param namespaceAware whether this node is namespace aware\n     * @param namespaceURI this node's namespace URI\n     ",
    "links" : [ ]
  }, {
    "name" : " static void setNameNS(NodeImpl node, String namespaceURI, String qualifiedName)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@code node} to be namespace-aware and assigns its namespace URI\n     * and qualified name.\n     *\n     * @param node an element or attribute node.\n     * @param namespaceURI this node's namespace URI. May be null.\n     * @param qualifiedName a possibly-prefixed name like \"img\" or \"html:img\".\n     ",
    "links" : [ ]
  }, {
    "name" : " static void setName(NodeImpl node, String name)",
    "returnType" : "void",
    "comment" : "\n     * Sets {@code node} to be not namespace-aware and assigns its name.\n     *\n     * @param node an element or attribute node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getBaseURI()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getParentBaseUri()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String sanitizeUri(String uri)",
    "returnType" : "String",
    "comment" : "\n     * Returns the sanitized input if it is a URI, or {@code null} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public short compareDocumentPosition(Node other) throws DOMException",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getTextContent() throws DOMException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void getTextContent(StringBuilder buf) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setTextContent(String textContent) throws DOMException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameNode(Node other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private NodeImpl getNamespacingElement()",
    "returnType" : "NodeImpl",
    "comment" : "\n     * Returns the element whose namespace definitions apply to this node. Use\n     * this element when mapping prefixes to URIs and vice versa.\n     ",
    "links" : [ ]
  }, {
    "name" : "private NodeImpl getContainingElement()",
    "returnType" : "NodeImpl",
    "comment" : "\n     * Returns the nearest ancestor element that contains this node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String lookupPrefix(String namespaceURI)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isPrefixMappedToUri(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given prefix is mapped to the given URI on this\n     * element. Since child elements can redefine prefixes, this check is\n     * necessary: {@code\n     * <foo xmlns:a=\"http://good\">\n     *   <bar xmlns:a=\"http://evil\">\n     *     <a:baz />\n     *   </bar>\n     * </foo>}\n     *\n     * @param prefix the prefix to find. Nullable.\n     * @param uri the URI to match. Non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isDefaultNamespace(String namespaceURI)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final String lookupNamespaceURI(String prefix)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Object> createEqualityKey(Node node)",
    "returnType" : "List<Object>",
    "comment" : "\n     * Returns a list of objects such that two nodes are equal if their lists\n     * are equal. Be careful: the lists may contain NamedNodeMaps and Nodes,\n     * neither of which override Object.equals(). Such values must be compared\n     * manually.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isEqualNode(Node arg)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean namedNodeMapsEqual(NamedNodeMap a, NamedNodeMap b)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Object getFeature(String feature, String version)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Object setUserData(String key, Object data, UserDataHandler handler)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Object getUserData(String key)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Node appendChild(Node newChild) throws DOMException", "public final Node cloneNode(boolean deep)", "public NamedNodeMap getAttributes()", "public NodeList getChildNodes()", "public Node getFirstChild()", "public Node getLastChild()", "public String getLocalName()", "public String getNamespaceURI()", "public Node getNextSibling()", "public String getNodeName()", "public abstract short getNodeType()", "public String getNodeValue() throws DOMException", "public final Document getOwnerDocument()", "public Node getParentNode()", "public String getPrefix()", "public Node getPreviousSibling()", "public boolean hasAttributes()", "public boolean hasChildNodes()", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", "public boolean isSupported(String feature, String version)", "public void normalize()", "public Node removeChild(Node oldChild) throws DOMException", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public final void setNodeValue(String nodeValue) throws DOMException", "public void setPrefix(String prefix) throws DOMException", " static String validatePrefix(String prefix, boolean namespaceAware, String namespaceURI)", " static void setNameNS(NodeImpl node, String namespaceURI, String qualifiedName)", " static void setName(NodeImpl node, String name)", "public final String getBaseURI()", "private String getParentBaseUri()", "private String sanitizeUri(String uri)", "public short compareDocumentPosition(Node other) throws DOMException", "public String getTextContent() throws DOMException", " void getTextContent(StringBuilder buf) throws DOMException", "public final void setTextContent(String textContent) throws DOMException", "public boolean isSameNode(Node other)", "private NodeImpl getNamespacingElement()", "private NodeImpl getContainingElement()", "public final String lookupPrefix(String namespaceURI)", " boolean isPrefixMappedToUri(String prefix, String uri)", "public final boolean isDefaultNamespace(String namespaceURI)", "public final String lookupNamespaceURI(String prefix)", "private static List<Object> createEqualityKey(Node node)", "public final boolean isEqualNode(Node arg)", "private boolean namedNodeMapsEqual(NamedNodeMap a, NamedNodeMap b)", "public final Object getFeature(String feature, String version)", "public final Object setUserData(String key, Object data, UserDataHandler handler)", "public final Object getUserData(String key)" ],
  "variableNames" : [ "EMPTY_LIST", "NULL_TYPE_INFO", "document" ]
}