{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ScaleGestureDetector.java",
  "packageName" : "android.view",
  "className" : "ScaleGestureDetector",
  "comment" : "\n * Detects scaling transformation gestures using the supplied {@link MotionEvent}s.\n * The {@link OnScaleGestureListener} callback will notify users when a particular\n * gesture event has occurred.\n *\n * This class should only be used with {@link MotionEvent}s reported via touch.\n *\n * To use this class:\n * <ul>\n *  <li>Create an instance of the {@code ScaleGestureDetector} for your\n *      {@link View}\n *  <li>In the {@link View#onTouchEvent(MotionEvent)} method ensure you call\n *          {@link #onTouchEvent(MotionEvent)}. The methods defined in your\n *          callback will be executed when the events occur.\n * </ul>\n ",
  "links" : [ "#onTouchEvent(MotionEvent)", "android.view.MotionEvent", "android.view.View", "android.view.View#onTouchEvent(MotionEvent)", "OnScaleGestureListener" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "OnScaleGestureListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuickScaleEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStylusScaleEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrSpan",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevSpan",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialSpan",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrSpanX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrSpanY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevSpanX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevSpanY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrevTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInProgress",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanSlop",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinSpan",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchoredScaleStartX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchoredScaleStartY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchoredScaleMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TOUCH_STABILIZE_TIME",
    "type" : "long",
    "comment" : " ms",
    "links" : [ ]
  }, {
    "name" : "SCALE_FACTOR",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANCHORED_SCALE_MODE_NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANCHORED_SCALE_MODE_DOUBLE_TAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANCHORED_SCALE_MODE_STYLUS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputEventConsistencyVerifier",
    "type" : "InputEventConsistencyVerifier",
    "comment" : "\n     * Consistency verifier for debugging purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGestureDetector",
    "type" : "GestureDetector",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventBeforeOrAboveStartingGestureEvent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean onTouchEvent(@NonNull MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Accepts MotionEvents and dispatches events to a {@link OnScaleGestureListener}\n     * when appropriate.\n     *\n     * <p>Applications should pass a complete and consistent event stream to this method.\n     * A complete and consistent event stream involves all MotionEvents from the initial\n     * ACTION_DOWN to the final ACTION_UP or ACTION_CANCEL.</p>\n     *\n     * @param event The event to process\n     * @return true if the event was processed and the detector wants to receive the\n     *         rest of the MotionEvents in this event stream.\n     ",
    "links" : [ "OnScaleGestureListener" ]
  }, {
    "name" : "private boolean inAnchoredScaleMode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setQuickScaleEnabled(boolean scales)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the associated {@link OnScaleGestureListener} should receive onScale callbacks\n     * when the user performs a doubleTap followed by a swipe. Note that this is enabled by default\n     * if the app targets API 19 and newer.\n     * @param scales true to enable quick scaling, false to disable\n     ",
    "links" : [ "OnScaleGestureListener" ]
  }, {
    "name" : "public boolean isQuickScaleEnabled()",
    "returnType" : "boolean",
    "comment" : "\n   * Return whether the quick scale gesture, in which the user performs a double tap followed by a\n   * swipe, should perform scaling. {@see #setQuickScaleEnabled(boolean)}.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStylusScaleEnabled(boolean scales)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the associates {@link OnScaleGestureListener} should receive\n     * onScale callbacks when the user uses a stylus and presses the button.\n     * Note that this is enabled by default if the app targets API 23 and newer.\n     *\n     * @param scales true to enable stylus scaling, false to disable.\n     ",
    "links" : [ "OnScaleGestureListener" ]
  }, {
    "name" : "public boolean isStylusScaleEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the stylus scale gesture, in which the user uses a stylus and presses the\n     * button, should perform scaling. {@see #setStylusScaleEnabled(boolean)}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInProgress()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if a scale gesture is in progress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getFocusX()",
    "returnType" : "float",
    "comment" : "\n     * Get the X coordinate of the current gesture's focal point.\n     * If a gesture is in progress, the focal point is between\n     * each of the pointers forming the gesture.\n     *\n     * If {@link #isInProgress()} would return false, the result of this\n     * function is undefined.\n     *\n     * @return X coordinate of the focal point in pixels.\n     ",
    "links" : [ "#isInProgress()" ]
  }, {
    "name" : "public float getFocusY()",
    "returnType" : "float",
    "comment" : "\n     * Get the Y coordinate of the current gesture's focal point.\n     * If a gesture is in progress, the focal point is between\n     * each of the pointers forming the gesture.\n     *\n     * If {@link #isInProgress()} would return false, the result of this\n     * function is undefined.\n     *\n     * @return Y coordinate of the focal point in pixels.\n     ",
    "links" : [ "#isInProgress()" ]
  }, {
    "name" : "public float getCurrentSpan()",
    "returnType" : "float",
    "comment" : "\n     * Return the average distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCurrentSpanX()",
    "returnType" : "float",
    "comment" : "\n     * Return the average X distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCurrentSpanY()",
    "returnType" : "float",
    "comment" : "\n     * Return the average Y distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getPreviousSpan()",
    "returnType" : "float",
    "comment" : "\n     * Return the previous average distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Previous distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getPreviousSpanX()",
    "returnType" : "float",
    "comment" : "\n     * Return the previous average X distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Previous distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getPreviousSpanY()",
    "returnType" : "float",
    "comment" : "\n     * Return the previous average Y distance between each of the pointers forming the\n     * gesture in progress through the focal point.\n     *\n     * @return Previous distance between pointers in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getScaleFactor()",
    "returnType" : "float",
    "comment" : "\n     * Return the scaling factor from the previous scale event to the current\n     * event. This value is defined as\n     * ({@link #getCurrentSpan()} / {@link #getPreviousSpan()}).\n     *\n     * @return The current scaling factor.\n     ",
    "links" : [ "#getPreviousSpan()", "#getCurrentSpan()" ]
  }, {
    "name" : "public long getTimeDelta()",
    "returnType" : "long",
    "comment" : "\n     * Return the time difference in milliseconds between the previous\n     * accepted scaling event and the current scaling event.\n     *\n     * @return Time difference since the last scaling event in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getEventTime()",
    "returnType" : "long",
    "comment" : "\n     * Return the event time of the current event being processed.\n     *\n     * @return Current event time in milliseconds.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean onTouchEvent(@NonNull MotionEvent event)", "private boolean inAnchoredScaleMode()", "public void setQuickScaleEnabled(boolean scales)", "public boolean isQuickScaleEnabled()", "public void setStylusScaleEnabled(boolean scales)", "public boolean isStylusScaleEnabled()", "public boolean isInProgress()", "public float getFocusX()", "public float getFocusY()", "public float getCurrentSpan()", "public float getCurrentSpanX()", "public float getCurrentSpanY()", "public float getPreviousSpan()", "public float getPreviousSpanX()", "public float getPreviousSpanY()", "public float getScaleFactor()", "public long getTimeDelta()", "public long getEventTime()" ],
  "variableNames" : [ "TAG", "mContext", "mListener", "mFocusX", "mFocusY", "mQuickScaleEnabled", "mStylusScaleEnabled", "mCurrSpan", "mPrevSpan", "mInitialSpan", "mCurrSpanX", "mCurrSpanY", "mPrevSpanX", "mPrevSpanY", "mCurrTime", "mPrevTime", "mInProgress", "mSpanSlop", "mMinSpan", "mHandler", "mAnchoredScaleStartX", "mAnchoredScaleStartY", "mAnchoredScaleMode", "TOUCH_STABILIZE_TIME", "SCALE_FACTOR", "ANCHORED_SCALE_MODE_NONE", "ANCHORED_SCALE_MODE_DOUBLE_TAP", "ANCHORED_SCALE_MODE_STYLUS", "mInputEventConsistencyVerifier", "mGestureDetector", "mEventBeforeOrAboveStartingGestureEvent" ]
}