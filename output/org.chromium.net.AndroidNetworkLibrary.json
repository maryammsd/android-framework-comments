{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/AndroidNetworkLibrary.java",
  "packageName" : "org.chromium.net",
  "className" : "AndroidNetworkLibrary",
  "comment" : " This class implements net utilities required by the net component. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sHaveAccessNetworkState",
    "type" : "Boolean",
    "comment" : " Cached value indicating if app has ACCESS_NETWORK_STATE permission.",
    "links" : [ ]
  }, {
    "name" : "sHaveAccessWifiState",
    "type" : "Boolean",
    "comment" : " Cached value indicating if app has ACCESS_WIFI_STATE permission.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getMimeTypeFromExtension(String extension)",
    "returnType" : "String",
    "comment" : "\n     * @return the mime type (if any) that is associated with the file\n     *         extension. Returns null if no corresponding mime type exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean haveOnlyLoopbackAddresses()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if it can determine that only loopback addresses are\n     *         configured. i.e. if only 127.0.0.1 and ::1 are routable. Also\n     *         returns false if it cannot determine this.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AndroidCertVerifyResult verifyServerCertificates(byte[][] certChain, String authType, String host)",
    "returnType" : "AndroidCertVerifyResult",
    "comment" : "\n     * Validate the server's certificate chain is trusted. Note that the caller\n     * must still verify the name matches that of the leaf certificate.\n     *\n     * @param certChain The ASN.1 DER encoded bytes for certificates.\n     * @param authType The key exchange algorithm name (e.g. RSA).\n     * @param host The hostname of the server.\n     * @return Android certificate verification result code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[][] getUserAddedRoots()",
    "returnType" : "byte[][]",
    "comment" : "\n     * Get the list of user-added roots.\n     *\n     * @return DER-encoded list of user-added roots.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addTestRootCertificate(byte[] rootCert) throws CertificateException, KeyStoreException, NoSuchAlgorithmException",
    "returnType" : "void",
    "comment" : "\n     * Adds a test root certificate to the local trust store.\n     * @param rootCert DER encoded bytes of the certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearTestRootCertificates() throws NoSuchAlgorithmException, CertificateException, KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Removes all test root certificates added by |addTestRootCertificate| calls from the local\n     * trust store.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getNetworkOperator()",
    "returnType" : "String",
    "comment" : "\n     * Returns the MCC+MNC (mobile country code + mobile network code) as\n     * the numeric name of the current registered operator. This function\n     * potentially blocks the thread, so use with care.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean getIsRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the device is roaming on the currently active network. When true, it\n     * suggests that use of data may incur extra costs.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean getIsCaptivePortal()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the system's captive portal probe was blocked for the current default data\n     * network. The method will return false if the captive portal probe was not blocked, the login\n     * process to the captive portal has been successfully completed, or if the captive portal\n     * status can't be determined. Requires ACCESS_NETWORK_STATE permission. Only available on\n     * Android Marshmallow and later versions. Returns false on earlier versions.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static WifiInfo getWifiInfo()",
    "returnType" : "WifiInfo",
    "comment" : "\n     * Helper function that gets the WifiInfo of the WiFi network. If we have permission to access\n     * to the WiFi state, then we use either {@link NetworkCapabilities} for Android S+ or {@link\n     * WifiManager} for earlier versions. Otherwise, we try to get the WifiInfo via broadcast (Note\n     * that this approach does not work on Android P and above).\n     ",
    "links" : [ "android.net.wifi.WifiManager", "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public static String getWifiSSID()",
    "returnType" : "String",
    "comment" : "\n     * Gets the SSID of the currently associated WiFi access point if there is one, and it is\n     * available. SSID may not be available if the app does not have permissions to access it. On\n     * Android M+, the app accessing SSID needs to have ACCESS_COARSE_LOCATION or\n     * ACCESS_FINE_LOCATION. If there is no WiFi access point or its SSID is unavailable, an empty\n     * string is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setWifiEnabledForTesting(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getWifiSignalLevel(int countBuckets)",
    "returnType" : "int",
    "comment" : "\n     * Gets the signal strength from the currently associated WiFi access point if there is one, and\n     * it is available. Signal strength may not be available if the app does not have permissions to\n     * access it.\n     * @return -1 if value is unavailable, otherwise, a value between 0 and {@code countBuckets-1}\n     *         (both inclusive).\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCleartextPermitted(String host)",
    "returnType" : "boolean",
    "comment" : " Returns true if cleartext traffic to |host| is allowed by the current app. ",
    "links" : [ ]
  }, {
    "name" : "private static boolean haveAccessNetworkState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean haveAccessWifiState()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static DnsStatus getDnsStatusForNetwork(long networkHandle)",
    "returnType" : "DnsStatus",
    "comment" : "\n     * Returns object representing the DNS configuration for the provided\n     * network handle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DnsStatus getCurrentDnsStatus()",
    "returnType" : "DnsStatus",
    "comment" : "\n     * Returns object representing the DNS configuration for the current\n     * default network.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DnsStatus getDnsStatus(Network network)",
    "returnType" : "DnsStatus",
    "comment" : "\n     * Returns object representing the DNS configuration for the provided\n     * network. If |network| is null, uses the active network.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean reportBadDefaultNetwork()",
    "returnType" : "boolean",
    "comment" : " Reports a connectivity issue with the device's current default network. ",
    "links" : [ ]
  }, {
    "name" : "private static void tagSocket(int ifd, int uid, int tag) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Tag socket referenced by {@code ifd} with {@code tag} for UID {@code uid}.\n     *\n     * Assumes thread UID tag isn't set upon entry, and ensures thread UID tag isn't set upon exit.\n     * Unfortunately there is no TrafficStatis.getThreadStatsUid().\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getMimeTypeFromExtension(String extension)", "public static boolean haveOnlyLoopbackAddresses()", "public static AndroidCertVerifyResult verifyServerCertificates(byte[][] certChain, String authType, String host)", "public static byte[][] getUserAddedRoots()", "public static void addTestRootCertificate(byte[] rootCert) throws CertificateException, KeyStoreException, NoSuchAlgorithmException", "public static void clearTestRootCertificates() throws NoSuchAlgorithmException, CertificateException, KeyStoreException", "private static String getNetworkOperator()", "private static boolean getIsRoaming()", "private static boolean getIsCaptivePortal()", "private static WifiInfo getWifiInfo()", "public static String getWifiSSID()", "public static void setWifiEnabledForTesting(boolean enabled)", "public static int getWifiSignalLevel(int countBuckets)", "private static boolean isCleartextPermitted(String host)", "private static boolean haveAccessNetworkState()", "private static boolean haveAccessWifiState()", "public static DnsStatus getDnsStatusForNetwork(long networkHandle)", "public static DnsStatus getCurrentDnsStatus()", "public static DnsStatus getDnsStatus(Network network)", "private static boolean reportBadDefaultNetwork()", "private static void tagSocket(int ifd, int uid, int tag) throws IOException" ],
  "variableNames" : [ "TAG", "sHaveAccessNetworkState", "sHaveAccessWifiState" ]
}