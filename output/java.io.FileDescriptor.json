{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FileDescriptor.java",
  "packageName" : "java.io",
  "className" : "FileDescriptor",
  "comment" : "\n * Instances of the file descriptor class serve as an opaque handle\n * to the underlying machine-specific structure representing an open\n * file, an open socket, or another source or sink of bytes. The\n * main practical use for a file descriptor is to create a\n * <code>FileInputStream</code> or <code>FileOutputStream</code> to\n * contain it.\n * <p>\n * Applications should not create their own file descriptors.\n *\n * @author  Pavani Diwanji\n * @see     java.io.FileInputStream\n * @see     java.io.FileOutputStream\n * @since   JDK1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "descriptor",
    "type" : "int",
    "comment" : " Renaming is to avoid issues with JNI/reflection fetching the descriptor value.",
    "links" : [ ]
  }, {
    "name" : "ownerId",
    "type" : "long",
    "comment" : " value (with 0 meaning 'unowned'). libcore chooses to use System.identityHashCode.",
    "links" : [ ]
  }, {
    "name" : "append",
    "type" : "boolean",
    "comment" : "\n     * true, if file is opened for appending.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_OWNER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "releaseLock",
    "type" : "Object",
    "comment" : " Android-added: lock for release$.",
    "links" : [ ]
  }, {
    "name" : "in",
    "type" : "FileDescriptor",
    "comment" : "\n     * A handle to the standard input stream. Usually, this file\n     * descriptor is not used directly, but rather via the input stream\n     * known as <code>System.in</code>.\n     *\n     * @see     java.lang.System#in\n     ",
    "links" : [ ]
  }, {
    "name" : "out",
    "type" : "FileDescriptor",
    "comment" : "\n     * A handle to the standard output stream. Usually, this file\n     * descriptor is not used directly, but rather via the output stream\n     * known as <code>System.out</code>.\n     * @see     java.lang.System#out\n     ",
    "links" : [ ]
  }, {
    "name" : "err",
    "type" : "FileDescriptor",
    "comment" : "\n     * A handle to the standard error stream. Usually, this file\n     * descriptor is not used directly, but rather via the output stream\n     * known as <code>System.err</code>.\n     *\n     * @see     java.lang.System#err\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean valid()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this file descriptor object is valid.\n     *\n     * @return  <code>true</code> if the file descriptor object represents a\n     *          valid, open file, socket, or other active I/O connection;\n     *          <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public native void sync() throws SyncFailedException",
    "returnType" : "void",
    "comment" : "\n     * Force all system buffers to synchronize with the underlying\n     * device.  This method returns after all modified data and\n     * attributes of this FileDescriptor have been written to the\n     * relevant device(s).  In particular, if this FileDescriptor\n     * refers to a physical storage medium, such as a file in a file\n     * system, sync will not return until all in-memory modified copies\n     * of buffers associated with this FileDescriptor have been\n     * written to the physical medium.\n     *\n     * sync is meant to be used by code that requires physical\n     * storage (such as a file) to be in a known state  For\n     * example, a class that provided a simple transaction facility\n     * might use sync to ensure that all changes to a file caused\n     * by a given transaction were recorded on a storage medium.\n     *\n     * sync only affects buffers downstream of this FileDescriptor.  If\n     * any in-memory buffering is being done by the application (for\n     * example, by a BufferedOutputStream object), those buffers must\n     * be flushed into the FileDescriptor (for example, by invoking\n     * OutputStream.flush) before that data will be affected by sync.\n     *\n     * @exception SyncFailedException\n     *        Thrown when the buffers cannot be flushed,\n     *        or because the system cannot guarantee that all the\n     *        buffers have been synchronized with physical media.\n     * @since     JDK1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean getAppend(int fd)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true, if the file was opened for appending.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getInt$()",
    "returnType" : "int",
    "comment" : "\n     * Returns the int descriptor. It's highly unlikely you should be calling this. Please discuss\n     * your needs with a libcore maintainer before using this method.\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setInt$(int fd)",
    "returnType" : "void",
    "comment" : "\n     * Sets the int descriptor. It's highly unlikely you should be calling this. Please discuss\n     * your needs with a libcore maintainer before using this method.\n     *\n     * @hide This method is @SystemApi(MODULE_LIBRARIES) and used by AFileDescriptor_setFd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cloneForFork()",
    "returnType" : "void",
    "comment" : "\n     * Clones the current native file descriptor and uses this for this FileDescriptor instance.\n     *\n     * This method does not close the current native file descriptor.\n     *\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getOwnerId$()",
    "returnType" : "long",
    "comment" : "\n     * Returns the owner ID of this FileDescriptor. It's highly unlikely you should be calling this.\n     * Please discuss your needs with a libcore maintainer before using this method.\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOwnerId$(long newOwnerId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the owner ID of this FileDescriptor. The owner ID does not need to be unique, but it is\n     * assumed that clashes are rare. See bionic/include/android/fdsan.h for more details.\n     *\n     * It's highly unlikely you should be calling this.\n     * Please discuss your needs with a libcore maintainer before using this method.\n     * @param newOwnerId the owner ID of the Object that is responsible for closing this FileDescriptor\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor release$()",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Returns a copy of this FileDescriptor, and sets this to an invalid state.\n     *\n     * The returned instance is not necessarily {@code valid()}, if the original FileDescriptor\n     * was invalid, or if another thread concurrently calls {@code release$()}.\n     *\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSocket$()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native boolean isSocket(int descriptor)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean valid()", "public native void sync() throws SyncFailedException", "private static native boolean getAppend(int fd)", "public final int getInt$()", "public final void setInt$(int fd)", "public void cloneForFork()", "public long getOwnerId$()", "public void setOwnerId$(long newOwnerId)", "public FileDescriptor release$()", "public boolean isSocket$()", "private static native boolean isSocket(int descriptor)" ],
  "variableNames" : [ "descriptor", "ownerId", "append", "NO_OWNER", "releaseLock", "in", "out", "err" ]
}