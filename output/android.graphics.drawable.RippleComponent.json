{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/RippleComponent.java",
  "packageName" : "android.graphics.drawable",
  "className" : "RippleComponent",
  "comment" : "\n * Abstract class that handles size & positioning common to the ripple & focus states.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mOwner",
    "type" : "RippleDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : " Bounds used for computing max radius. May be modified by the owner. ",
    "links" : [ ]
  }, {
    "name" : "mHasMaxRadius",
    "type" : "boolean",
    "comment" : " Whether we have an explicit maximum radius. ",
    "links" : [ ]
  }, {
    "name" : "mTargetRadius",
    "type" : "float",
    "comment" : " How big this ripple should be when fully entered. ",
    "links" : [ ]
  }, {
    "name" : "mDensityScale",
    "type" : "float",
    "comment" : " Screen density used to adjust pixel-based constants. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onBoundsChange()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void setup(float maxRadius, int densityDpi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getTargetRadius(Rect bounds)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getBounds(Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Populates {@code bounds} with the maximum drawing bounds of the ripple\n     * relative to its center. The resulting bounds should be translated into\n     * parent drawable coordinates before use.\n     *\n     * @param bounds the rect to populate with drawing bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void invalidateSelf()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void onHotspotBoundsChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onTargetRadiusChanged(float targetRadius)",
    "returnType" : "void",
    "comment" : "\n     * Called when the target radius changes.\n     *\n     * @param targetRadius the new target radius\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onBoundsChange()", "public final void setup(float maxRadius, int densityDpi)", "private static float getTargetRadius(Rect bounds)", "public void getBounds(Rect bounds)", "protected final void invalidateSelf()", "protected final void onHotspotBoundsChanged()", "protected void onTargetRadiusChanged(float targetRadius)" ],
  "variableNames" : [ "mOwner", "mBounds", "mHasMaxRadius", "mTargetRadius", "mDensityScale" ]
}