{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/GenericInflater.java",
  "packageName" : "android.preference",
  "className" : "GenericInflater",
  "comment" : "\n * Generic XML inflater. This has been adapted from {@link LayoutInflater} and\n * quickly passed over to use generics.\n * \n * @hide\n * @param T The type of the items to inflate\n * @param P The type of parents (that is those items that contain other items).\n *            Must implement {@link GenericInflater.Parent}\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ "GenericInflater.Parent", "android.view.LayoutInflater" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFactorySet",
    "type" : "boolean",
    "comment" : " these are optional, set by the caller",
    "links" : [ ]
  }, {
    "name" : "mFactory",
    "type" : "Factory<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstructorArgs",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstructorSignature",
    "type" : "Class[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sConstructorMap",
    "type" : "HashMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract GenericInflater cloneInContext(Context newContext)",
    "returnType" : "GenericInflater",
    "comment" : "\n     * Create a copy of the existing inflater object, with the copy\n     * pointing to a different Context than the original.  This is used by\n     * {@link ContextThemeWrapper} to create a new inflater to go along\n     * with the new Context theme.\n     * \n     * @param newContext The new Context to associate with the new inflater.\n     * May be the same as the original Context if desired.\n     * \n     * @return Returns a brand spanking new inflater object associated with\n     * the given Context.\n     ",
    "links" : [ "android.view.ContextThemeWrapper" ]
  }, {
    "name" : "public void setDefaultPackage(String defaultPackage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default package that will be searched for classes to construct\n     * for tag names that have no explicit package.\n     * \n     * @param defaultPackage The default package. This will be prepended to the\n     *            tag name, so it should end with a period.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultPackage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default package, or null if it is not set.\n     * \n     * @see #setDefaultPackage(String)\n     * @return The default package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Return the context we are running in, for access to resources, class\n     * loader, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Factory<T> getFactory()",
    "returnType" : "Factory<T>",
    "comment" : "\n     * Return the current factory (or null). This is called on each element\n     * name. If the factory returns an item, add that to the hierarchy. If it\n     * returns null, proceed to call onCreateItem(name).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFactory(Factory<T> factory)",
    "returnType" : "void",
    "comment" : "\n     * Attach a custom Factory interface for creating items while using this\n     * inflater. This must not be null, and can only be set\n     * once; after setting, you can not change the factory. This is called on\n     * each element name as the XML is parsed. If the factory returns an item,\n     * that is added to the hierarchy. If it returns null, the next factory\n     * default {@link #onCreateItem} method is called.\n     * <p>\n     * If you have an existing inflater and want to add your\n     * own factory to it, use {@link #cloneInContext} to clone the existing\n     * instance and then you can use this function (once) on the returned new\n     * instance. This will merge your own factory with whatever factory the\n     * original instance is using.\n     ",
    "links" : [ "#cloneInContext", "#onCreateItem" ]
  }, {
    "name" : "public T inflate(@XmlRes int resource, P root)",
    "returnType" : "T",
    "comment" : "\n     * Inflate a new item hierarchy from the specified xml resource. Throws\n     * InflaterException if there is an error.\n     * \n     * @param resource ID for an XML resource to load (e.g.,\n     *        <code>R.layout.main_page</code>)\n     * @param root Optional parent of the generated hierarchy.\n     * @return The root of the inflated hierarchy. If root was supplied,\n     *         this is the root item; otherwise it is the root of the inflated\n     *         XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T inflate(XmlPullParser parser, P root)",
    "returnType" : "T",
    "comment" : "\n     * Inflate a new hierarchy from the specified xml node. Throws\n     * InflaterException if there is an error. *\n     * <p>\n     * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n     * reasons, inflation relies heavily on pre-processing of XML files\n     * that is done at build time. Therefore, it is not currently possible to\n     * use inflater with an XmlPullParser over a plain XML file at runtime.\n     * \n     * @param parser XML dom node containing the description of the\n     *        hierarchy.\n     * @param root Optional parent of the generated hierarchy.\n     * @return The root of the inflated hierarchy. If root was supplied,\n     *         this is the that; otherwise it is the root of the inflated\n     *         XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T inflate(@XmlRes int resource, P root, boolean attachToRoot)",
    "returnType" : "T",
    "comment" : "\n     * Inflate a new hierarchy from the specified xml resource. Throws\n     * InflaterException if there is an error.\n     * \n     * @param resource ID for an XML resource to load (e.g.,\n     *        <code>R.layout.main_page</code>)\n     * @param root Optional root to be the parent of the generated hierarchy (if\n     *        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter?\n     * @return The root of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public T inflate(XmlPullParser parser, P root, boolean attachToRoot)",
    "returnType" : "T",
    "comment" : "\n     * Inflate a new hierarchy from the specified XML node. Throws\n     * InflaterException if there is an error.\n     * <p>\n     * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n     * reasons, inflation relies heavily on pre-processing of XML files\n     * that is done at build time. Therefore, it is not currently possible to\n     * use inflater with an XmlPullParser over a plain XML file at runtime.\n     * \n     * @param parser XML dom node containing the description of the\n     *        hierarchy.\n     * @param root Optional to be the parent of the generated hierarchy (if\n     *        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter?\n     * @return The root of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final T createItem(String name, String prefix, AttributeSet attrs) throws ClassNotFoundException, InflateException",
    "returnType" : "T",
    "comment" : "\n     * Low-level function for instantiating by name. This attempts to\n     * instantiate class of the given <var>name</var> found in this\n     * inflater's ClassLoader.\n     * \n     * <p>\n     * There are two things that can happen in an error case: either the\n     * exception describing the error will be thrown, or a null will be\n     * returned. You must deal with both possibilities -- the former will happen\n     * the first time createItem() is called for a class of a particular name,\n     * the latter every time there-after for that class name.\n     * \n     * @param name The full name of the class to be instantiated.\n     * @param attrs The XML attributes supplied for this instance.\n     * \n     * @return The newly instantied item, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected T onCreateItem(String name, AttributeSet attrs) throws ClassNotFoundException",
    "returnType" : "T",
    "comment" : "\n     * This routine is responsible for creating the correct subclass of item\n     * given the xml element name. Override it to handle custom item objects. If\n     * you override this in your subclass be sure to call through to\n     * super.onCreateItem(name) for names you do not recognize.\n     * \n     * @param name The fully qualified class name of the item to be create.\n     * @param attrs An AttributeSet of attributes to apply to the item.\n     * @return The item created.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final T createItemFromTag(XmlPullParser parser, String name, AttributeSet attrs)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void rInflate(XmlPullParser parser, T parent, final AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Recursive method used to descend down the xml hierarchy and instantiate\n     * items, instantiate their children, and then call onFinishInflate().\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean onCreateCustomFromTag(XmlPullParser parser, T parent, final AttributeSet attrs) throws XmlPullParserException",
    "returnType" : "boolean",
    "comment" : "\n     * Before this inflater tries to create an item from the tag, this method\n     * will be called. The parser will be pointing to the start of a tag, you\n     * must stop parsing and return when you reach the end of this element!\n     * \n     * @param parser XML dom node containing the description of the hierarchy.\n     * @param parent The item that should be the parent of whatever you create.\n     * @param attrs An AttributeSet of attributes to apply to the item.\n     * @return Whether you created a custom object (true), or whether this\n     *         inflater should proceed to create an item.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected P onMergeRoots(P givenRoot, boolean attachToGivenRoot, P xmlRoot)",
    "returnType" : "P",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract GenericInflater cloneInContext(Context newContext)", "public void setDefaultPackage(String defaultPackage)", "public String getDefaultPackage()", "public Context getContext()", "public final Factory<T> getFactory()", "public void setFactory(Factory<T> factory)", "public T inflate(@XmlRes int resource, P root)", "public T inflate(XmlPullParser parser, P root)", "public T inflate(@XmlRes int resource, P root, boolean attachToRoot)", "public T inflate(XmlPullParser parser, P root, boolean attachToRoot)", "public final T createItem(String name, String prefix, AttributeSet attrs) throws ClassNotFoundException, InflateException", "protected T onCreateItem(String name, AttributeSet attrs) throws ClassNotFoundException", "private final T createItemFromTag(XmlPullParser parser, String name, AttributeSet attrs)", "private void rInflate(XmlPullParser parser, T parent, final AttributeSet attrs) throws XmlPullParserException, IOException", "protected boolean onCreateCustomFromTag(XmlPullParser parser, T parent, final AttributeSet attrs) throws XmlPullParserException", "protected P onMergeRoots(P givenRoot, boolean attachToGivenRoot, P xmlRoot)" ],
  "variableNames" : [ "DEBUG", "mContext", "mFactorySet", "mFactory", "mConstructorArgs", "mConstructorSignature", "sConstructorMap", "mDefaultPackage" ]
}