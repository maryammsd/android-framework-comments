{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/UserInfo.java",
  "packageName" : "android.content.pm",
  "className" : "UserInfo",
  "comment" : "\n * Per-user information.\n *\n * <p>There are 3 base properties of users: {@link #FLAG_SYSTEM}, {@link #FLAG_FULL}, and\n * {@link #FLAG_PROFILE}. Every user must have one of the following combination of these\n * flags:\n * <ul>\n *    <li>FLAG_SYSTEM (user {@link UserHandle#USER_SYSTEM} on a headless-user-0 device)</li>\n *    <li>FLAG_SYSTEM and FLAG_FULL (user {@link UserHandle#USER_SYSTEM} on a regular device)</li>\n *    <li>FLAG_FULL (non-profile secondary user)</li>\n *    <li>FLAG_PROFILE (profile users)</li>\n * </ul>\n * Users can have also have additional flags (such as FLAG_GUEST) as appropriate.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "FLAG_PRIMARY",
    "type" : "int",
    "comment" : "\n     * Primary user. Only one user can have this flag set. It identifies the first human user\n     * on a device. This flag is not supported in headless system user mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ADMIN",
    "type" : "int",
    "comment" : "\n     * User with administrative privileges. Such a user can create and\n     * delete users.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_GUEST",
    "type" : "int",
    "comment" : "\n     * Indicates a guest user that may be transient.\n     * @deprecated Use {@link UserManager#USER_TYPE_FULL_GUEST} instead.\n     ",
    "links" : [ "UserManager#USER_TYPE_FULL_GUEST" ]
  }, {
    "name" : "FLAG_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Indicates the user has restrictions in privileges, in addition to those for normal users.\n     * Exact meaning TBD. For instance, maybe they can't install apps or administer WiFi access pts.\n     * @deprecated Use {@link UserManager#USER_TYPE_FULL_RESTRICTED} instead.\n     ",
    "links" : [ "UserManager#USER_TYPE_FULL_RESTRICTED" ]
  }, {
    "name" : "FLAG_INITIALIZED",
    "type" : "int",
    "comment" : "\n     * Indicates that this user has gone through its first-time initialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MANAGED_PROFILE",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is a profile of another user, for example holding a users\n     * corporate data.\n     * @deprecated Use {@link UserManager#USER_TYPE_PROFILE_MANAGED} instead.\n     ",
    "links" : [ "UserManager#USER_TYPE_PROFILE_MANAGED" ]
  }, {
    "name" : "FLAG_DISABLED",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is disabled.\n     *\n     * <p>Note: If an ephemeral user is disabled, it shouldn't be later re-enabled. Ephemeral users\n     * are disabled as their removal is in progress to indicate that they shouldn't be re-entered.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_QUIET_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_EPHEMERAL",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is ephemeral. I.e. the user will be removed after leaving\n     * the foreground.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DEMO",
    "type" : "int",
    "comment" : "\n     * User is for demo purposes only and can be removed at any time.\n     * @deprecated Use {@link UserManager#USER_TYPE_FULL_DEMO} instead.\n     ",
    "links" : [ "UserManager#USER_TYPE_FULL_DEMO" ]
  }, {
    "name" : "FLAG_FULL",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is a non-profile human user.\n     *\n     * <p>When creating a new (non-system) user, this flag will always be forced true unless the\n     * user is a {@link #FLAG_PROFILE}. If user {@link UserHandle#USER_SYSTEM} is also a\n     * human user, it must also be flagged as FULL.\n     ",
    "links" : [ "#FLAG_PROFILE", "UserHandle#USER_SYSTEM" ]
  }, {
    "name" : "FLAG_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is {@link UserHandle#USER_SYSTEM}. Not applicable to created users.\n     ",
    "links" : [ "UserHandle#USER_SYSTEM" ]
  }, {
    "name" : "FLAG_PROFILE",
    "type" : "int",
    "comment" : "\n     * Indicates that this user is a profile human user, such as a managed profile.\n     * Mutually exclusive with {@link #FLAG_FULL}.\n     ",
    "links" : [ "#FLAG_FULL" ]
  }, {
    "name" : "NO_PROFILE_GROUP_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "id",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iconPath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "creationTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastLoggedInTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastLoggedInFingerprint",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "userType",
    "type" : "String",
    "comment" : "\n     * Type of user, such as {@link UserManager#USER_TYPE_PROFILE_MANAGED}, corresponding to\n     * {@link com.android.server.pm.UserTypeDetails#getName()}.\n     ",
    "links" : [ "UserManager#USER_TYPE_PROFILE_MANAGED", "com.android.server.pm.UserTypeDetails#getName" ]
  }, {
    "name" : "profileGroupId",
    "type" : "int",
    "comment" : "\n     * If this user is a parent user, it would be its own user id.\n     * If this user is a child user, it would be its parent user id.\n     * Otherwise, it would be {@link #NO_PROFILE_GROUP_ID}.\n     ",
    "links" : [ "#NO_PROFILE_GROUP_ID" ]
  }, {
    "name" : "restrictedProfileParentId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "profileBadge",
    "type" : "int",
    "comment" : "\n     * Index for distinguishing different profiles with the same parent and user type for the\n     * purpose of badging.\n     * It is used for determining which badge color/label to use (if applicable) from\n     * the options available for a particular user type.\n     ",
    "links" : [ ]
  }, {
    "name" : "partial",
    "type" : "boolean",
    "comment" : " User is only partially created. ",
    "links" : [ ]
  }, {
    "name" : "guestToRemove",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "preCreated",
    "type" : "boolean",
    "comment" : "\n     * This is used to optimize the creation of an user, i.e. OEMs might choose to pre-create a\n     * number of users at the first boot, so the actual creation later is faster.\n     *\n     * <p>A {@code preCreated} user is not a real user yet, so it should not show up on regular\n     * user operations (other than user creation per se).\n     *\n     * <p>Once the pre-created is used to create a \"real\" user later on, {@code preCreate} is set to\n     * {@code false}.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<UserInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getDefaultUserType(@UserInfoFlag int userInfoFlag)",
    "returnType" : "String",
    "comment" : "\n     * Get the user type (such as {@link UserManager#USER_TYPE_PROFILE_MANAGED}) that corresponds to\n     * the given {@link UserInfoFlag}s.\n\n     * <p>The userInfoFlag can contain GUEST, RESTRICTED, MANAGED_PROFILE, DEMO, or else be\n     * interpreted as a regular \"secondary\" user. It cannot contain more than one of these.\n     * It can contain other UserInfoFlag properties (like EPHEMERAL), which will be ignored here.\n     *\n     * @throws IllegalArgumentException if userInfoFlag is more than one type of user or if it\n     *                                  is a SYSTEM user.\n     *\n     * @hide\n     ",
    "links" : [ "UserManager#USER_TYPE_PROFILE_MANAGED", "UserInfoFlag" ]
  }, {
    "name" : "public boolean isPrimary()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAdmin()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isGuest()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isProfile()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isManagedProfile()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isQuietModeEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEphemeral()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDemo()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isFull()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the user is a split system user.\n     * <p>If {@link UserManager#isSplitSystemUser split system user mode} is not enabled,\n     * the method always returns false.\n     ",
    "links" : [ "UserManager#isSplitSystemUser" ]
  }, {
    "name" : "public static boolean isSystemOnly(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given user is a split system user.\n     * <p>If {@link UserManager#isSplitSystemUser split system user mode} is not enabled,\n     * the method always returns false.\n     ",
    "links" : [ "UserManager#isSplitSystemUser" ]
  }, {
    "name" : "public boolean supportsSwitchTo()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this user can be switched to.\n     *",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSwitchToByUser()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this user can be switched to by end user through UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHaveProfile()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " TODO(b/142482943): Probably include mUserType here, which means updating TestDevice, etc.",
    "links" : [ ]
  }, {
    "name" : "public String toFullString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String flagsToString(int flags)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FLAG_PRIMARY", "FLAG_ADMIN", "FLAG_GUEST", "FLAG_RESTRICTED", "FLAG_INITIALIZED", "FLAG_MANAGED_PROFILE", "FLAG_DISABLED", "FLAG_QUIET_MODE", "FLAG_EPHEMERAL", "FLAG_DEMO", "FLAG_FULL", "FLAG_SYSTEM", "FLAG_PROFILE", "NO_PROFILE_GROUP_ID", "id", "serialNumber", "name", "iconPath", "flags", "creationTime", "lastLoggedInTime", "lastLoggedInFingerprint", "userType", "profileGroupId", "restrictedProfileParentId", "profileBadge", "partial", "guestToRemove", "preCreated", "CREATOR" ],
  "methodNames" : [ "public static String getDefaultUserType(@UserInfoFlag int userInfoFlag)", "public boolean isPrimary()", "public boolean isAdmin()", "public boolean isGuest()", "public boolean isRestricted()", "public boolean isProfile()", "public boolean isManagedProfile()", "public boolean isEnabled()", "public boolean isQuietModeEnabled()", "public boolean isEphemeral()", "public boolean isInitialized()", "public boolean isDemo()", "public boolean isFull()", "public boolean isSystemOnly()", "public static boolean isSystemOnly(int userId)", "public boolean supportsSwitchTo()", "public boolean supportsSwitchToByUser()", "public boolean canHaveProfile()", "public UserHandle getUserHandle()", "public String toString()", "public String toFullString()", "public static String flagsToString(int flags)", "public int describeContents()", "public void writeToParcel(Parcel dest, int parcelableFlags)" ]
}