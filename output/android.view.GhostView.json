{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/GhostView.java",
  "packageName" : "android.view",
  "className" : "GhostView",
  "comment" : "\n * This view draws another View in an Overlay without changing the parent. It will not be drawn\n * by its parent because its visibility is set to INVISIBLE, but will be drawn\n * here using its render node. When the GhostView is set to INVISIBLE, the View it is\n * shadowing will become VISIBLE and when the GhostView becomes VISIBLE, the shadowed\n * view becomes INVISIBLE.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReferences",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBeingMoved",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onDraw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMatrix(Matrix matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setVisibility(@Visibility int visibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void calculateMatrix(View view, ViewGroup host, Matrix matrix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static GhostView addGhost(View view, ViewGroup viewGroup, Matrix matrix)",
    "returnType" : "GhostView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static GhostView addGhost(View view, ViewGroup viewGroup)",
    "returnType" : "GhostView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void removeGhost(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static GhostView getGhost(View view)",
    "returnType" : "GhostView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void copySize(View from, View to)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int moveGhostViewsToTop(ViewGroup viewGroup, ArrayList<View> tempViews)",
    "returnType" : "int",
    "comment" : "\n     * Move the GhostViews to the end so that they are on top of other views and it is easier\n     * to do binary search for the correct location for the GhostViews in insertIntoOverlay.\n     *\n     * @return The index of the first GhostView or -1 if no GhostView is in the ViewGroup\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void insertIntoOverlay(ViewGroup viewGroup, ViewGroup wrapper, GhostView ghostView, ArrayList<View> tempParents, int firstGhost)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a GhostView into the overlay's ViewGroup in the order in which they\n     * should be displayed by the UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getInsertIndex(ViewGroup overlayViewGroup, ArrayList<View> viewParents, ArrayList<View> tempParents, int firstGhost)",
    "returnType" : "int",
    "comment" : "\n     * Find the index into the overlay to insert the GhostView based on the order that the\n     * views should be drawn. This keeps GhostViews layered in the same order\n     * that they are ordered in the UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isGhostWrapper(View view)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if view is a GhostView's FrameLayout wrapper.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isOnTop(ArrayList<View> viewParents, ArrayList<View> comparedWith)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if viewParents is from a View that is on top of the comparedWith's view.\n     * The ArrayLists contain the ancestors of views in order from top most grandparent, to\n     * the view itself, in order. The goal is to find the first matching parent and then\n     * compare the draw order of the siblings.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void getParents(View view, ArrayList<View> parents)",
    "returnType" : "void",
    "comment" : "\n     * Adds all the parents, grandparents, etc. of view to parents.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isOnTop(View view, View comparedWith)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if view would be drawn on top of comparedWith or false otherwise.\n     * view and comparedWith are siblings with the same parent. This uses the logic\n     * that dispatchDraw uses to determine which View should be drawn first.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onDraw(Canvas canvas)", "public void setMatrix(Matrix matrix)", "public void setVisibility(@Visibility int visibility)", "protected void onDetachedFromWindow()", "public static void calculateMatrix(View view, ViewGroup host, Matrix matrix)", "public static GhostView addGhost(View view, ViewGroup viewGroup, Matrix matrix)", "public static GhostView addGhost(View view, ViewGroup viewGroup)", "public static void removeGhost(View view)", "public static GhostView getGhost(View view)", "private static void copySize(View from, View to)", "private static int moveGhostViewsToTop(ViewGroup viewGroup, ArrayList<View> tempViews)", "private static void insertIntoOverlay(ViewGroup viewGroup, ViewGroup wrapper, GhostView ghostView, ArrayList<View> tempParents, int firstGhost)", "private static int getInsertIndex(ViewGroup overlayViewGroup, ArrayList<View> viewParents, ArrayList<View> tempParents, int firstGhost)", "private static boolean isGhostWrapper(View view)", "private static boolean isOnTop(ArrayList<View> viewParents, ArrayList<View> comparedWith)", "private static void getParents(View view, ArrayList<View> parents)", "private static boolean isOnTop(View view, View comparedWith)" ],
  "variableNames" : [ "mView", "mReferences", "mBeingMoved" ]
}