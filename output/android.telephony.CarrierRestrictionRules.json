{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/CarrierRestrictionRules.java",
  "packageName" : "android.telephony",
  "className" : "CarrierRestrictionRules",
  "comment" : "\n * Contains the list of carrier restrictions.\n * Allowed list: it indicates the list of carriers that are allowed.\n * Excluded list: it indicates the list of carriers that are excluded.\n * Default carrier restriction: it indicates the default behavior and the priority between the two\n * lists:\n *  - not allowed: the device only allows usage of carriers that are present in the allowed list\n *    and not present in the excluded list. This implies that if a carrier is not present in either\n *    list, it is not allowed.\n *  - allowed: the device allows all carriers, except those present in the excluded list and not\n *    present in the allowed list. This implies that if a carrier is not present in either list,\n *    it is allowed.\n * MultiSim policy: it indicates the behavior in case of devices with two or more SIM cards.\n *  - MULTISIM_POLICY_NONE: the same configuration is applied to all SIM slots independently. This\n *    is the default value if none is set.\n *  - MULTISIM_POLICY_ONE_VALID_SIM_MUST_BE_PRESENT: it indicates that any SIM card can be used\n *    as far as one SIM card matching the configuration is present in the device.\n *\n * Both lists support the character '?' as wild character. For example, an entry indicating\n * MCC=310 and MNC=??? will match all networks with MCC=310.\n *\n * Example 1: Allowed list contains MCC and MNC of operator A. Excluded list contains operator B,\n *            which has same MCC and MNC, but also GID1 value. The priority allowed list is set\n *            to true. Only SIM cards of operator A are allowed, but not those of B or any other\n *            operator.\n * Example 2: Allowed list contains MCC and MNC of operator A. Excluded list contains an entry\n *            with same MCC, and '???' as MNC. The priority allowed list is set to false.\n *            SIM cards of operator A and all SIM cards with a different MCC value are allowed.\n *            SIM cards of operators with same MCC value and different MNC are not allowed.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CARRIER_RESTRICTION_DEFAULT_NOT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * The device only allows usage of carriers that are present in the allowed list and not\n     * present in the excluded list. This implies that if a carrier is not present in either list,\n     * it is not allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "CARRIER_RESTRICTION_DEFAULT_ALLOWED",
    "type" : "int",
    "comment" : "\n     * The device allows all carriers, except those present in the excluded list and not present\n     * in the allowed list. This implies that if a carrier is not present in either list, it is\n     * allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_NONE",
    "type" : "int",
    "comment" : " The same configuration is applied to all SIM slots independently. ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_ONE_VALID_SIM_MUST_BE_PRESENT",
    "type" : "int",
    "comment" : "\n     * Indicates that any SIM card can be used as far as one valid card is present in the device.\n     * For the modem, a SIM card is valid when its content (i.e. MCC, MNC, GID, SPN) matches the\n     * carrier restriction configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_APPLY_TO_ALL_SLOTS",
    "type" : "int",
    "comment" : "\n     * Indicates that the SIM lock policy applies uniformly to all sim slots.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_APPLY_TO_ONLY_SLOT_1",
    "type" : "int",
    "comment" : "\n     * The SIM lock configuration applies exclusively to sim slot 1, leaving\n     * all other sim slots unlocked irrespective of the SIM card in slot 1\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_VALID_SIM_MUST_PRESENT_ON_SLOT_1",
    "type" : "int",
    "comment" : "\n     * Valid sim cards must be present on sim slot1 in order\n     * to use other sim slots.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_ACTIVE_SERVICE_ON_SLOT_1_TO_UNBLOCK_OTHER_SLOTS",
    "type" : "int",
    "comment" : "\n     * Valid sim card must be present on slot1 and it must be in full service\n     * in order to use other sim slots.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_ACTIVE_SERVICE_ON_ANY_SLOT_TO_UNBLOCK_OTHER_SLOTS",
    "type" : "int",
    "comment" : "\n     * Valid sim card be present on any slot and it must be in full service\n     * in order to use other sim slots.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_ALL_SIMS_MUST_BE_VALID",
    "type" : "int",
    "comment" : "\n     * Valid sim cards must be present on all slots. If any SIM cards become\n     * invalid then device would set other SIM cards as invalid as well.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTISIM_POLICY_SLOT_POLICY_OTHER",
    "type" : "int",
    "comment" : "\n     * In case there is no match policy listed above.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WILD_CHARACTER",
    "type" : "char",
    "comment" : " Wild character for comparison ",
    "links" : [ ]
  }, {
    "name" : "mAllowedCarriers",
    "type" : "List<CarrierIdentifier>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedCarriers",
    "type" : "List<CarrierIdentifier>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedCarrierInfo",
    "type" : "List<CarrierInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedCarrierInfo",
    "type" : "List<CarrierInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierRestrictionDefault",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMultiSimPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierRestrictionStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUseCarrierLockInfo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<CarrierRestrictionRules>",
    "comment" : "\n     * {@link Parcelable.Creator}\n     ",
    "links" : [ "Parcelable.Creator" ]
  } ],
  "methods" : [ {
    "name" : "public static Builder newBuilder()",
    "returnType" : "Builder",
    "comment" : "\n     * Creates a new builder for this class\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAllCarriersAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if all carriers are allowed\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CarrierIdentifier> getAllowedCarriers()",
    "returnType" : "List<CarrierIdentifier>",
    "comment" : "\n     * Retrieves list of allowed carriers\n     *\n     * @return the list of allowed carriers\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CarrierIdentifier> getExcludedCarriers()",
    "returnType" : "List<CarrierIdentifier>",
    "comment" : "\n     * Retrieves list of excluded carriers\n     *\n     * @return the list of excluded carriers\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CarrierInfo> getExcludedCarriersInfoList()",
    "returnType" : "List<CarrierInfo>",
    "comment" : "\n     * Retrieves list of excluded carrierInfos\n     *\n     * @return the list of excluded carrierInfos\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CarrierInfo> getAllowedCarriersInfoList()",
    "returnType" : "List<CarrierInfo>",
    "comment" : "\n     * Retrieves list of excluded carrierInfos\n     *\n     * @return the list of excluded carrierInfos\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDefaultCarrierRestriction()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the default behavior of carrier restrictions\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMultiSimPolicy()",
    "returnType" : "int",
    "comment" : "\n     * @return The policy used for multi-SIM devices\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Boolean> areCarrierIdentifiersAllowed(@NonNull List<CarrierIdentifier> carrierIds)",
    "returnType" : "List<Boolean>",
    "comment" : "\n     * Tests an array of carriers with the carrier restriction configuration. The list of carrier\n     * ids passed as argument does not need to be the same as currently present in the device.\n     *\n     * @param carrierIds list of {@link CarrierIdentifier}, one for each SIM slot on the device\n     * @return a list of boolean with the same size as input, indicating if each\n     * {@link CarrierIdentifier} is allowed or not.\n     ",
    "links" : [ "android.service.carrier.CarrierIdentifier" ]
  }, {
    "name" : "private static boolean isCarrierIdInList(CarrierIdentifier id, List<CarrierIdentifier> list)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if a certain carrier {@code id} is present inside a {@code list}\n     *\n     * @return true if the carrier {@code id} is present, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String convertNullToEmpty(String value)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean patternMatch(String str, String pattern)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs a case insensitive string comparison against a given pattern. The character '?'\n     * is used in the pattern as wild character in the comparison. The string must have the same\n     * length as the pattern.\n     *\n     * @param str string to match\n     * @param pattern string containing the pattern\n     * @return true in case of match, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCarrierRestrictionStatus()",
    "returnType" : "int",
    "comment" : "\n     * Get the carrier restriction status of the device.\n     * The return value of the API is as follows.\n     * <ul>\n     *      <li>return {@link TelephonyManager#CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER}\n     *      if the caller and the device locked by the network are same</li>\n     *      <li>return {@link TelephonyManager#CARRIER_RESTRICTION_STATUS_RESTRICTED} if the\n     *      caller and the device locked by the network are different</li>\n     *      <li>return {@link TelephonyManager#CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED} if the\n     *      device is not locked</li>\n     *      <li>return {@link TelephonyManager#CARRIER_RESTRICTION_STATUS_UNKNOWN} if the device\n     *      locking state is unavailable or radio does not supports the feature</li>\n     * </ul>\n     ",
    "links" : [ "android.telephony.TelephonyManager#CARRIER_RESTRICTION_STATUS_RESTRICTED", "android.telephony.TelephonyManager#CARRIER_RESTRICTION_STATUS_NOT_RESTRICTED", "android.telephony.TelephonyManager#CARRIER_RESTRICTION_STATUS_UNKNOWN", "android.telephony.TelephonyManager#CARRIER_RESTRICTION_STATUS_RESTRICTED_TO_CALLER" ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * {@link Parcelable#writeToParcel}\n     ",
    "links" : [ "android.os.Parcelable#writeToParcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@link Parcelable#describeContents}\n     ",
    "links" : [ "android.os.Parcelable#describeContents" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getCarrierInfoList()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Builder newBuilder()", "public boolean isAllCarriersAllowed()", "public List<CarrierIdentifier> getAllowedCarriers()", "public List<CarrierIdentifier> getExcludedCarriers()", "public List<CarrierInfo> getExcludedCarriersInfoList()", "public List<CarrierInfo> getAllowedCarriersInfoList()", "public int getDefaultCarrierRestriction()", "public int getMultiSimPolicy()", "public List<Boolean> areCarrierIdentifiersAllowed(@NonNull List<CarrierIdentifier> carrierIds)", "private static boolean isCarrierIdInList(CarrierIdentifier id, List<CarrierIdentifier> list)", "private static String convertNullToEmpty(String value)", "private static boolean patternMatch(String str, String pattern)", "public int getCarrierRestrictionStatus()", "public void writeToParcel(Parcel out, int flags)", "public int describeContents()", "public String toString()", "private String getCarrierInfoList()" ],
  "variableNames" : [ "CARRIER_RESTRICTION_DEFAULT_NOT_ALLOWED", "CARRIER_RESTRICTION_DEFAULT_ALLOWED", "MULTISIM_POLICY_NONE", "MULTISIM_POLICY_ONE_VALID_SIM_MUST_BE_PRESENT", "MULTISIM_POLICY_APPLY_TO_ALL_SLOTS", "MULTISIM_POLICY_APPLY_TO_ONLY_SLOT_1", "MULTISIM_POLICY_VALID_SIM_MUST_PRESENT_ON_SLOT_1", "MULTISIM_POLICY_ACTIVE_SERVICE_ON_SLOT_1_TO_UNBLOCK_OTHER_SLOTS", "MULTISIM_POLICY_ACTIVE_SERVICE_ON_ANY_SLOT_TO_UNBLOCK_OTHER_SLOTS", "MULTISIM_POLICY_ALL_SIMS_MUST_BE_VALID", "MULTISIM_POLICY_SLOT_POLICY_OTHER", "WILD_CHARACTER", "mAllowedCarriers", "mExcludedCarriers", "mAllowedCarrierInfo", "mExcludedCarrierInfo", "mCarrierRestrictionDefault", "mMultiSimPolicy", "mCarrierRestrictionStatus", "mUseCarrierLockInfo", "CREATOR" ]
}