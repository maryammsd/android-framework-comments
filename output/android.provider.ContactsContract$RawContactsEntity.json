{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "RawContactsEntity",
  "comment" : "\n     * <p>\n     * Constants for the raw contacts entities table, which can be thought of as\n     * an outer join of the raw_contacts table with the data table.  It is a strictly\n     * read-only table.\n     * </p>\n     * <p>\n     * If a raw contact has data rows, the RawContactsEntity cursor will contain\n     * a one row for each data row. If the raw contact has no data rows, the\n     * cursor will still contain one row with the raw contact-level information\n     * and nulls for data columns.\n     *\n     * <pre>\n     * Uri entityUri = ContentUris.withAppendedId(RawContactsEntity.CONTENT_URI, rawContactId);\n     * Cursor c = getContentResolver().query(entityUri,\n     *          new String[]{\n     *              RawContactsEntity.SOURCE_ID,\n     *              RawContactsEntity.DATA_ID,\n     *              RawContactsEntity.MIMETYPE,\n     *              RawContactsEntity.DATA1\n     *          }, null, null, null);\n     * try {\n     *     while (c.moveToNext()) {\n     *         String sourceId = c.getString(0);\n     *         if (!c.isNull(1)) {\n     *             String mimeType = c.getString(2);\n     *             String data = c.getString(3);\n     *             ...\n     *         }\n     *     }\n     * } finally {\n     *     c.close();\n     * }\n     * </pre>\n     *\n     * <h3>Columns</h3>\n     * RawContactsEntity has a combination of RawContact and Data columns.\n     *\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>RawContacts</th>\n     * </tr>\n     * <tr>\n     * <td style=\"width: 7em;\">long</td>\n     * <td style=\"width: 20em;\">{@link #_ID}</td>\n     * <td style=\"width: 5em;\">read-only</td>\n     * <td>Raw contact row ID. See {@link RawContacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>long</td>\n     * <td>{@link #CONTACT_ID}</td>\n     * <td>read-only</td>\n     * <td>See {@link RawContacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #AGGREGATION_MODE}</td>\n     * <td>read-only</td>\n     * <td>See {@link RawContacts}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #DELETED}</td>\n     * <td>read-only</td>\n     * <td>See {@link RawContacts}.</td>\n     * </tr>\n     * </table>\n     *\n     * <table class=\"jd-sumtable\">\n     * <tr>\n     * <th colspan='4'>Data</th>\n     * </tr>\n     * <tr>\n     * <td style=\"width: 7em;\">long</td>\n     * <td style=\"width: 20em;\">{@link #DATA_ID}</td>\n     * <td style=\"width: 5em;\">read-only</td>\n     * <td>Data row ID. It will be null if the raw contact has no data rows.</td>\n     * </tr>\n     * <tr>\n     * <td>String</td>\n     * <td>{@link #MIMETYPE}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #IS_PRIMARY}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #IS_SUPER_PRIMARY}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * <tr>\n     * <td>int</td>\n     * <td>{@link #DATA_VERSION}</td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * <tr>\n     * <td>Any type</td>\n     * <td>\n     * {@link #DATA1}<br>\n     * {@link #DATA2}<br>\n     * {@link #DATA3}<br>\n     * {@link #DATA4}<br>\n     * {@link #DATA5}<br>\n     * {@link #DATA6}<br>\n     * {@link #DATA7}<br>\n     * {@link #DATA8}<br>\n     * {@link #DATA9}<br>\n     * {@link #DATA10}<br>\n     * {@link #DATA11}<br>\n     * {@link #DATA12}<br>\n     * {@link #DATA13}<br>\n     * {@link #DATA14}<br>\n     * {@link #DATA15}\n     * </td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * <tr>\n     * <td>Any type</td>\n     * <td>\n     * {@link #SYNC1}<br>\n     * {@link #SYNC2}<br>\n     * {@link #SYNC3}<br>\n     * {@link #SYNC4}\n     * </td>\n     * <td>read-only</td>\n     * <td>See {@link ContactsContract.Data}.</td>\n     * </tr>\n     * </table>\n     ",
  "links" : [ "#SYNC2", "#SYNC3", "#SYNC4", "#MIMETYPE", "#SYNC1", "#DELETED", "#IS_PRIMARY", "#IS_SUPER_PRIMARY", "#DATA14", "#DATA15", "#DATA3", "#DATA12", "#DATA4", "#DATA13", "#DATA1", "#DATA10", "#DATA2", "#DATA11", "RawContacts", "#DATA_ID", "ContactsContract.Data", "#CONTACT_ID", "#DATA9", "#DATA7", "#DATA8", "#DATA5", "#AGGREGATION_MODE", "#DATA6", "#_ID", "#DATA_VERSION" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table\n         ",
    "links" : [ ]
  }, {
    "name" : "CORP_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n        * The content:// style URI for this table in the managed profile\n        *\n        * @hide\n        ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URI for this table, specific to the user's profile.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n         * The MIME type of {@link #CONTENT_URI} providing a directory of raw contact entities.\n         ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "FOR_EXPORT_ONLY",
    "type" : "String",
    "comment" : "\n         * If {@link #FOR_EXPORT_ONLY} is explicitly set to \"1\", returned Cursor toward\n         * Data.CONTENT_URI contains only exportable data.\n         *\n         * This flag is useful (currently) only for vCard exporter in Contacts app, which\n         * needs to exclude \"un-exportable\" data from available data to export, while\n         * Contacts app itself has priviledge to access all data including \"un-expotable\"\n         * ones and providers return all of them regardless of the callers' intention.\n         * <P>Type: INTEGER</p>\n         *\n         * @hide Maybe available only in Eclair and not really ready for public use.\n         * TODO: remove, or implement this feature completely. As of now (Eclair),\n         * we only use this flag in queryEntities(), not query().\n         ",
    "links" : [ "#FOR_EXPORT_ONLY" ]
  }, {
    "name" : "DATA_ID",
    "type" : "String",
    "comment" : "\n         * The ID of the data column. The value will be null if this raw contact has no data rows.\n         * <P>Type: INTEGER</P>\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Map<String, List<ContentValues>> queryRawContactEntity(@NonNull ContentResolver contentResolver, long contactId)",
    "returnType" : "Map<String, List<ContentValues>>",
    "comment" : "\n         * Query raw contacts entity by a contact ID, which can potentially be a managed profile\n         * contact ID.\n         * <p>\n         * @param contentResolver The content resolver to query\n         * @param contactId Contact ID, which can potentially be a managed profile contact ID.\n         * @return A map from a mimetype to a list of the entity content values.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static Map<String, List<ContentValues>> queryRawContactEntity(@NonNull ContentResolver contentResolver, long contactId)" ],
  "variableNames" : [ "TAG", "CONTENT_URI", "CORP_CONTENT_URI", "PROFILE_CONTENT_URI", "CONTENT_TYPE", "FOR_EXPORT_ONLY", "DATA_ID" ]
}