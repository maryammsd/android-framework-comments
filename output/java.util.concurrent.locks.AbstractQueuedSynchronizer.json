{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/locks/AbstractQueuedSynchronizer.java",
  "packageName" : "java.util.concurrent.locks",
  "className" : "AbstractQueuedSynchronizer",
  "comment" : "\n * Provides a framework for implementing blocking locks and related\n * synchronizers (semaphores, events, etc) that rely on\n * first-in-first-out (FIFO) wait queues.  This class is designed to\n * be a useful basis for most kinds of synchronizers that rely on a\n * single atomic {@code int} value to represent state. Subclasses\n * must define the protected methods that change this state, and which\n * define what that state means in terms of this object being acquired\n * or released.  Given these, the other methods in this class carry\n * out all queuing and blocking mechanics. Subclasses can maintain\n * other state fields, but only the atomically updated {@code int}\n * value manipulated using methods {@link #getState}, {@link\n * #setState} and {@link #compareAndSetState} is tracked with respect\n * to synchronization.\n *\n * <p>Subclasses should be defined as non-public internal helper\n * classes that are used to implement the synchronization properties\n * of their enclosing class.  Class\n * {@code AbstractQueuedSynchronizer} does not implement any\n * synchronization interface.  Instead it defines methods such as\n * {@link #acquireInterruptibly} that can be invoked as\n * appropriate by concrete locks and related synchronizers to\n * implement their public methods.\n *\n * <p>This class supports either or both a default <em>exclusive</em>\n * mode and a <em>shared</em> mode. When acquired in exclusive mode,\n * attempted acquires by other threads cannot succeed. Shared mode\n * acquires by multiple threads may (but need not) succeed. This class\n * does not &quot;understand&quot; these differences except in the\n * mechanical sense that when a shared mode acquire succeeds, the next\n * waiting thread (if one exists) must also determine whether it can\n * acquire as well. Threads waiting in the different modes share the\n * same FIFO queue. Usually, implementation subclasses support only\n * one of these modes, but both can come into play for example in a\n * {@link ReadWriteLock}. Subclasses that support only exclusive or\n * only shared modes need not define the methods supporting the unused mode.\n *\n * <p>This class defines a nested {@link ConditionObject} class that\n * can be used as a {@link Condition} implementation by subclasses\n * supporting exclusive mode for which method {@link\n * #isHeldExclusively} reports whether synchronization is exclusively\n * held with respect to the current thread, method {@link #release}\n * invoked with the current {@link #getState} value fully releases\n * this object, and {@link #acquire}, given this saved state value,\n * eventually restores this object to its previous acquired state.  No\n * {@code AbstractQueuedSynchronizer} method otherwise creates such a\n * condition, so if this constraint cannot be met, do not use it.  The\n * behavior of {@link ConditionObject} depends of course on the\n * semantics of its synchronizer implementation.\n *\n * <p>This class provides inspection, instrumentation, and monitoring\n * methods for the internal queue, as well as similar methods for\n * condition objects. These can be exported as desired into classes\n * using an {@code AbstractQueuedSynchronizer} for their\n * synchronization mechanics.\n *\n * <p>Serialization of this class stores only the underlying atomic\n * integer maintaining state, so deserialized objects have empty\n * thread queues. Typical subclasses requiring serializability will\n * define a {@code readObject} method that restores this to a known\n * initial state upon deserialization.\n *\n * <h2>Usage</h2>\n *\n * <p>To use this class as the basis of a synchronizer, redefine the\n * following methods, as applicable, by inspecting and/or modifying\n * the synchronization state using {@link #getState}, {@link\n * #setState} and/or {@link #compareAndSetState}:\n *\n * <ul>\n * <li>{@link #tryAcquire}\n * <li>{@link #tryRelease}\n * <li>{@link #tryAcquireShared}\n * <li>{@link #tryReleaseShared}\n * <li>{@link #isHeldExclusively}\n * </ul>\n *\n * Each of these methods by default throws {@link\n * UnsupportedOperationException}.  Implementations of these methods\n * must be internally thread-safe, and should in general be short and\n * not block. Defining these methods is the <em>only</em> supported\n * means of using this class. All other methods are declared\n * {@code final} because they cannot be independently varied.\n *\n * <p>You may also find the inherited methods from {@link\n * AbstractOwnableSynchronizer} useful to keep track of the thread\n * owning an exclusive synchronizer.  You are encouraged to use them\n * -- this enables monitoring and diagnostic tools to assist users in\n * determining which threads hold locks.\n *\n * <p>Even though this class is based on an internal FIFO queue, it\n * does not automatically enforce FIFO acquisition policies.  The core\n * of exclusive synchronization takes the form:\n *\n * <pre>\n * <em>Acquire:</em>\n *     while (!tryAcquire(arg)) {\n *        <em>enqueue thread if it is not already queued</em>;\n *        <em>possibly block current thread</em>;\n *     }\n *\n * <em>Release:</em>\n *     if (tryRelease(arg))\n *        <em>unblock the first queued thread</em>;\n * </pre>\n *\n * (Shared mode is similar but may involve cascading signals.)\n *\n * <p id=\"barging\">Because checks in acquire are invoked before\n * enqueuing, a newly acquiring thread may <em>barge</em> ahead of\n * others that are blocked and queued.  However, you can, if desired,\n * define {@code tryAcquire} and/or {@code tryAcquireShared} to\n * disable barging by internally invoking one or more of the inspection\n * methods, thereby providing a <em>fair</em> FIFO acquisition order.\n * In particular, most fair synchronizers can define {@code tryAcquire}\n * to return {@code false} if {@link #hasQueuedPredecessors} (a method\n * specifically designed to be used by fair synchronizers) returns\n * {@code true}.  Other variations are possible.\n *\n * <p>Throughput and scalability are generally highest for the\n * default barging (also known as <em>greedy</em>,\n * <em>renouncement</em>, and <em>convoy-avoidance</em>) strategy.\n * While this is not guaranteed to be fair or starvation-free, earlier\n * queued threads are allowed to recontend before later queued\n * threads, and each recontention has an unbiased chance to succeed\n * against incoming threads.  Also, while acquires do not\n * &quot;spin&quot; in the usual sense, they may perform multiple\n * invocations of {@code tryAcquire} interspersed with other\n * computations before blocking.  This gives most of the benefits of\n * spins when exclusive synchronization is only briefly held, without\n * most of the liabilities when it isn't. If so desired, you can\n * augment this by preceding calls to acquire methods with\n * \"fast-path\" checks, possibly prechecking {@link #hasContended}\n * and/or {@link #hasQueuedThreads} to only do so if the synchronizer\n * is likely not to be contended.\n *\n * <p>This class provides an efficient and scalable basis for\n * synchronization in part by specializing its range of use to\n * synchronizers that can rely on {@code int} state, acquire, and\n * release parameters, and an internal FIFO wait queue. When this does\n * not suffice, you can build synchronizers from a lower level using\n * {@link java.util.concurrent.atomic atomic} classes, your own custom\n * {@link java.util.Queue} classes, and {@link LockSupport} blocking\n * support.\n *\n * <h2>Usage Examples</h2>\n *\n * <p>Here is a non-reentrant mutual exclusion lock class that uses\n * the value zero to represent the unlocked state, and one to\n * represent the locked state. While a non-reentrant lock\n * does not strictly require recording of the current owner\n * thread, this class does so anyway to make usage easier to monitor.\n * It also supports conditions and exposes some instrumentation methods:\n *\n * <pre> {@code\n * class Mutex implements Lock, java.io.Serializable {\n *\n *   // Our internal helper class\n *   private static class Sync extends AbstractQueuedSynchronizer {\n *     // Acquires the lock if state is zero\n *     public boolean tryAcquire(int acquires) {\n *       assert acquires == 1; // Otherwise unused\n *       if (compareAndSetState(0, 1)) {\n *         setExclusiveOwnerThread(Thread.currentThread());\n *         return true;\n *       }\n *       return false;\n *     }\n *\n *     // Releases the lock by setting state to zero\n *     protected boolean tryRelease(int releases) {\n *       assert releases == 1; // Otherwise unused\n *       if (!isHeldExclusively())\n *         throw new IllegalMonitorStateException();\n *       setExclusiveOwnerThread(null);\n *       setState(0);\n *       return true;\n *     }\n *\n *     // Reports whether in locked state\n *     public boolean isLocked() {\n *       return getState() != 0;\n *     }\n *\n *     public boolean isHeldExclusively() {\n *       // a data race, but safe due to out-of-thin-air guarantees\n *       return getExclusiveOwnerThread() == Thread.currentThread();\n *     }\n *\n *     // Provides a Condition\n *     public Condition newCondition() {\n *       return new ConditionObject();\n *     }\n *\n *     // Deserializes properly\n *     private void readObject(ObjectInputStream s)\n *         throws IOException, ClassNotFoundException {\n *       s.defaultReadObject();\n *       setState(0); // reset to unlocked state\n *     }\n *   }\n *\n *   // The sync object does all the hard work. We just forward to it.\n *   private final Sync sync = new Sync();\n *\n *   public void lock()              { sync.acquire(1); }\n *   public boolean tryLock()        { return sync.tryAcquire(1); }\n *   public void unlock()            { sync.release(1); }\n *   public Condition newCondition() { return sync.newCondition(); }\n *   public boolean isLocked()       { return sync.isLocked(); }\n *   public boolean isHeldByCurrentThread() {\n *     return sync.isHeldExclusively();\n *   }\n *   public boolean hasQueuedThreads() {\n *     return sync.hasQueuedThreads();\n *   }\n *   public void lockInterruptibly() throws InterruptedException {\n *     sync.acquireInterruptibly(1);\n *   }\n *   public boolean tryLock(long timeout, TimeUnit unit)\n *       throws InterruptedException {\n *     return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n *   }\n * }}</pre>\n *\n * <p>Here is a latch class that is like a\n * {@link java.util.concurrent.CountDownLatch CountDownLatch}\n * except that it only requires a single {@code signal} to\n * fire. Because a latch is non-exclusive, it uses the {@code shared}\n * acquire and release methods.\n *\n * <pre> {@code\n * class BooleanLatch {\n *\n *   private static class Sync extends AbstractQueuedSynchronizer {\n *     boolean isSignalled() { return getState() != 0; }\n *\n *     protected int tryAcquireShared(int ignore) {\n *       return isSignalled() ? 1 : -1;\n *     }\n *\n *     protected boolean tryReleaseShared(int ignore) {\n *       setState(1);\n *       return true;\n *     }\n *   }\n *\n *   private final Sync sync = new Sync();\n *   public boolean isSignalled() { return sync.isSignalled(); }\n *   public void signal()         { sync.releaseShared(1); }\n *   public void await() throws InterruptedException {\n *     sync.acquireSharedInterruptibly(1);\n *   }\n * }}</pre>\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "#hasQueuedThreads", "#tryRelease", "#setState", "#tryReleaseShared", "java.util.concurrent.atomic", "#isHeldExclusively", "#release", "#tryAcquireShared", "java.util.concurrent.locks.LockSupport", "java.util.concurrent.CountDownLatch", "java.util.concurrent.locks.Condition", "#acquire", "#tryAcquire", "#hasContended", "java.util.Queue", "java.util.concurrent.locks.AbstractOwnableSynchronizer", "#getState", "#acquireInterruptibly", "java.util.concurrent.locks.ReadWriteLock", "ConditionObject", "#hasQueuedPredecessors", "#compareAndSetState", "UnsupportedOperationException" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WAITING",
    "type" : "int",
    "comment" : " must be 1",
    "links" : [ ]
  }, {
    "name" : "CANCELLED",
    "type" : "int",
    "comment" : " must be negative",
    "links" : [ ]
  }, {
    "name" : "COND",
    "type" : "int",
    "comment" : " in a condition wait",
    "links" : [ ]
  }, {
    "name" : "head",
    "type" : "Node",
    "comment" : "\n     * Head of the wait queue, lazily initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "tail",
    "type" : "Node",
    "comment" : "\n     * Tail of the wait queue. After initialization, modified only via casTail.\n     ",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "\n     * The synchronization state.\n     ",
    "links" : [ ]
  }, {
    "name" : "U",
    "type" : "Unsafe",
    "comment" : " Unsafe",
    "links" : [ ]
  }, {
    "name" : "STATE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEAD",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAIL",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected final int getState()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current value of synchronization state.\n     * This operation has memory semantics of a {@code volatile} read.\n     * @return current state value\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void setState(int newState)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value of synchronization state.\n     * This operation has memory semantics of a {@code volatile} write.\n     * @param newState the new state value\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean compareAndSetState(int expect, int update)",
    "returnType" : "boolean",
    "comment" : "\n     * Atomically sets synchronization state to the given updated\n     * value if the current state value equals the expected value.\n     * This operation has memory semantics of a {@code volatile} read\n     * and write.\n     *\n     * @param expect the expected value\n     * @param update the new value\n     * @return {@code true} if successful. False return indicates that the actual\n     *         value was not equal to the expected value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean casTail(Node c, Node v)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryInitializeHead()",
    "returnType" : "void",
    "comment" : " tries once to CAS a new dummy node for head ",
    "links" : [ ]
  }, {
    "name" : " final void enqueue(Node node)",
    "returnType" : "void",
    "comment" : "\n     * Enqueues the node unless null. (Currently used only for\n     * ConditionNodes; other cases are interleaved with acquires.)\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean isEnqueued(Node node)",
    "returnType" : "boolean",
    "comment" : " Returns true if node is found in traversal from tail ",
    "links" : [ ]
  }, {
    "name" : "private static void signalNext(Node h)",
    "returnType" : "void",
    "comment" : "\n     * Wakes up the successor of given node, if one exists, and unsets its\n     * WAITING status to avoid park race. This may fail to wake up an\n     * eligible thread when one or more have been cancelled, but\n     * cancelAcquire ensures liveness.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void signalNextIfShared(Node h)",
    "returnType" : "void",
    "comment" : " Wakes up the given node if in shared mode ",
    "links" : [ ]
  }, {
    "name" : " final int acquire(Node node, int arg, boolean shared, boolean interruptible, boolean timed, long time)",
    "returnType" : "int",
    "comment" : "\n     * Main acquire method, invoked by all exported acquire methods.\n     *\n     * @param node null unless a reacquiring Condition\n     * @param arg the acquire argument\n     * @param shared true if shared mode else exclusive\n     * @param interruptible if abort and return negative on interrupt\n     * @param timed if true use timed waits\n     * @param time if timed, the System.nanoTime value to timeout\n     * @return positive if acquired, 0 if timed out, negative if interrupted\n     ",
    "links" : [ ]
  }, {
    "name" : "private void cleanQueue()",
    "returnType" : "void",
    "comment" : "\n     * Possibly repeatedly traverses from tail, unsplicing cancelled\n     * nodes until none are found. Unparks nodes that may have been\n     * relinked to be next eligible acquirer.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int cancelAcquire(Node node, boolean interrupted, boolean interruptible)",
    "returnType" : "int",
    "comment" : "\n     * Cancels an ongoing attempt to acquire.\n     *\n     * @param node the node (may be null if cancelled before enqueuing)\n     * @param interrupted true if thread interrupted\n     * @param interruptible if should report interruption vs reset\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean tryAcquire(int arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to acquire in exclusive mode. This method should query\n     * if the state of the object permits it to be acquired in the\n     * exclusive mode, and if so to acquire it.\n     *\n     * <p>This method is always invoked by the thread performing\n     * acquire.  If this method reports failure, the acquire method\n     * may queue the thread, if it is not already queued, until it is\n     * signalled by a release from some other thread. This can be used\n     * to implement method {@link Lock#tryLock()}.\n     *\n     * <p>The default\n     * implementation throws {@link UnsupportedOperationException}.\n     *\n     * @param arg the acquire argument. This value is always the one\n     *        passed to an acquire method, or is the value saved on entry\n     *        to a condition wait.  The value is otherwise uninterpreted\n     *        and can represent anything you like.\n     * @return {@code true} if successful. Upon success, this object has\n     *         been acquired.\n     * @throws IllegalMonitorStateException if acquiring would place this\n     *         synchronizer in an illegal state. This exception must be\n     *         thrown in a consistent fashion for synchronization to work\n     *         correctly.\n     * @throws UnsupportedOperationException if exclusive mode is not supported\n     ",
    "links" : [ "java.util.concurrent.locks.Lock#tryLock()", "UnsupportedOperationException" ]
  }, {
    "name" : "protected boolean tryRelease(int arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to set the state to reflect a release in exclusive\n     * mode.\n     *\n     * <p>This method is always invoked by the thread performing release.\n     *\n     * <p>The default implementation throws\n     * {@link UnsupportedOperationException}.\n     *\n     * @param arg the release argument. This value is always the one\n     *        passed to a release method, or the current state value upon\n     *        entry to a condition wait.  The value is otherwise\n     *        uninterpreted and can represent anything you like.\n     * @return {@code true} if this object is now in a fully released\n     *         state, so that any waiting threads may attempt to acquire;\n     *         and {@code false} otherwise.\n     * @throws IllegalMonitorStateException if releasing would place this\n     *         synchronizer in an illegal state. This exception must be\n     *         thrown in a consistent fashion for synchronization to work\n     *         correctly.\n     * @throws UnsupportedOperationException if exclusive mode is not supported\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "protected int tryAcquireShared(int arg)",
    "returnType" : "int",
    "comment" : "\n     * Attempts to acquire in shared mode. This method should query if\n     * the state of the object permits it to be acquired in the shared\n     * mode, and if so to acquire it.\n     *\n     * <p>This method is always invoked by the thread performing\n     * acquire.  If this method reports failure, the acquire method\n     * may queue the thread, if it is not already queued, until it is\n     * signalled by a release from some other thread.\n     *\n     * <p>The default implementation throws {@link\n     * UnsupportedOperationException}.\n     *\n     * @param arg the acquire argument. This value is always the one\n     *        passed to an acquire method, or is the value saved on entry\n     *        to a condition wait.  The value is otherwise uninterpreted\n     *        and can represent anything you like.\n     * @return a negative value on failure; zero if acquisition in shared\n     *         mode succeeded but no subsequent shared-mode acquire can\n     *         succeed; and a positive value if acquisition in shared\n     *         mode succeeded and subsequent shared-mode acquires might\n     *         also succeed, in which case a subsequent waiting thread\n     *         must check availability. (Support for three different\n     *         return values enables this method to be used in contexts\n     *         where acquires only sometimes act exclusively.)  Upon\n     *         success, this object has been acquired.\n     * @throws IllegalMonitorStateException if acquiring would place this\n     *         synchronizer in an illegal state. This exception must be\n     *         thrown in a consistent fashion for synchronization to work\n     *         correctly.\n     * @throws UnsupportedOperationException if shared mode is not supported\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "protected boolean tryReleaseShared(int arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to set the state to reflect a release in shared mode.\n     *\n     * <p>This method is always invoked by the thread performing release.\n     *\n     * <p>The default implementation throws\n     * {@link UnsupportedOperationException}.\n     *\n     * @param arg the release argument. This value is always the one\n     *        passed to a release method, or the current state value upon\n     *        entry to a condition wait.  The value is otherwise\n     *        uninterpreted and can represent anything you like.\n     * @return {@code true} if this release of shared mode may permit a\n     *         waiting acquire (shared or exclusive) to succeed; and\n     *         {@code false} otherwise\n     * @throws IllegalMonitorStateException if releasing would place this\n     *         synchronizer in an illegal state. This exception must be\n     *         thrown in a consistent fashion for synchronization to work\n     *         correctly.\n     * @throws UnsupportedOperationException if shared mode is not supported\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "protected boolean isHeldExclusively()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if synchronization is held exclusively with\n     * respect to the current (calling) thread.  This method is invoked\n     * upon each call to a {@link ConditionObject} method.\n     *\n     * <p>The default implementation throws {@link\n     * UnsupportedOperationException}. This method is invoked\n     * internally only within {@link ConditionObject} methods, so need\n     * not be defined if conditions are not used.\n     *\n     * @return {@code true} if synchronization is held exclusively;\n     *         {@code false} otherwise\n     * @throws UnsupportedOperationException if conditions are not supported\n     ",
    "links" : [ "ConditionObject", "UnsupportedOperationException" ]
  }, {
    "name" : "public final void acquire(int arg)",
    "returnType" : "void",
    "comment" : "\n     * Acquires in exclusive mode, ignoring interrupts.  Implemented\n     * by invoking at least once {@link #tryAcquire},\n     * returning on success.  Otherwise the thread is queued, possibly\n     * repeatedly blocking and unblocking, invoking {@link\n     * #tryAcquire} until success.  This method can be used\n     * to implement method {@link Lock#lock}.\n     *\n     * @param arg the acquire argument.  This value is conveyed to\n     *        {@link #tryAcquire} but is otherwise uninterpreted and\n     *        can represent anything you like.\n     ",
    "links" : [ "java.util.concurrent.locks.Lock#lock", "#tryAcquire" ]
  }, {
    "name" : "public final void acquireInterruptibly(int arg) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Acquires in exclusive mode, aborting if interrupted.\n     * Implemented by first checking interrupt status, then invoking\n     * at least once {@link #tryAcquire}, returning on\n     * success.  Otherwise the thread is queued, possibly repeatedly\n     * blocking and unblocking, invoking {@link #tryAcquire}\n     * until success or the thread is interrupted.  This method can be\n     * used to implement method {@link Lock#lockInterruptibly}.\n     *\n     * @param arg the acquire argument.  This value is conveyed to\n     *        {@link #tryAcquire} but is otherwise uninterpreted and\n     *        can represent anything you like.\n     * @throws InterruptedException if the current thread is interrupted\n     ",
    "links" : [ "java.util.concurrent.locks.Lock#lockInterruptibly", "#tryAcquire" ]
  }, {
    "name" : "public final boolean tryAcquireNanos(int arg, long nanosTimeout) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to acquire in exclusive mode, aborting if interrupted,\n     * and failing if the given timeout elapses.  Implemented by first\n     * checking interrupt status, then invoking at least once {@link\n     * #tryAcquire}, returning on success.  Otherwise, the thread is\n     * queued, possibly repeatedly blocking and unblocking, invoking\n     * {@link #tryAcquire} until success or the thread is interrupted\n     * or the timeout elapses.  This method can be used to implement\n     * method {@link Lock#tryLock(long, TimeUnit)}.\n     *\n     * @param arg the acquire argument.  This value is conveyed to\n     *        {@link #tryAcquire} but is otherwise uninterpreted and\n     *        can represent anything you like.\n     * @param nanosTimeout the maximum number of nanoseconds to wait\n     * @return {@code true} if acquired; {@code false} if timed out\n     * @throws InterruptedException if the current thread is interrupted\n     ",
    "links" : [ "java.util.concurrent.locks.Lock#tryLock(long", "#tryAcquire" ]
  }, {
    "name" : "public final boolean release(int arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Releases in exclusive mode.  Implemented by unblocking one or\n     * more threads if {@link #tryRelease} returns true.\n     * This method can be used to implement method {@link Lock#unlock}.\n     *\n     * @param arg the release argument.  This value is conveyed to\n     *        {@link #tryRelease} but is otherwise uninterpreted and\n     *        can represent anything you like.\n     * @return the value returned from {@link #tryRelease}\n     ",
    "links" : [ "java.util.concurrent.locks.Lock#unlock", "#tryRelease" ]
  }, {
    "name" : "public final void acquireShared(int arg)",
    "returnType" : "void",
    "comment" : "\n     * Acquires in shared mode, ignoring interrupts.  Implemented by\n     * first invoking at least once {@link #tryAcquireShared},\n     * returning on success.  Otherwise the thread is queued, possibly\n     * repeatedly blocking and unblocking, invoking {@link\n     * #tryAcquireShared} until success.\n     *\n     * @param arg the acquire argument.  This value is conveyed to\n     *        {@link #tryAcquireShared} but is otherwise uninterpreted\n     *        and can represent anything you like.\n     ",
    "links" : [ "#tryAcquireShared" ]
  }, {
    "name" : "public final void acquireSharedInterruptibly(int arg) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Acquires in shared mode, aborting if interrupted.  Implemented\n     * by first checking interrupt status, then invoking at least once\n     * {@link #tryAcquireShared}, returning on success.  Otherwise the\n     * thread is queued, possibly repeatedly blocking and unblocking,\n     * invoking {@link #tryAcquireShared} until success or the thread\n     * is interrupted.\n     * @param arg the acquire argument.\n     * This value is conveyed to {@link #tryAcquireShared} but is\n     * otherwise uninterpreted and can represent anything\n     * you like.\n     * @throws InterruptedException if the current thread is interrupted\n     ",
    "links" : [ "#tryAcquireShared" ]
  }, {
    "name" : "public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Attempts to acquire in shared mode, aborting if interrupted, and\n     * failing if the given timeout elapses.  Implemented by first\n     * checking interrupt status, then invoking at least once {@link\n     * #tryAcquireShared}, returning on success.  Otherwise, the\n     * thread is queued, possibly repeatedly blocking and unblocking,\n     * invoking {@link #tryAcquireShared} until success or the thread\n     * is interrupted or the timeout elapses.\n     *\n     * @param arg the acquire argument.  This value is conveyed to\n     *        {@link #tryAcquireShared} but is otherwise uninterpreted\n     *        and can represent anything you like.\n     * @param nanosTimeout the maximum number of nanoseconds to wait\n     * @return {@code true} if acquired; {@code false} if timed out\n     * @throws InterruptedException if the current thread is interrupted\n     ",
    "links" : [ "#tryAcquireShared" ]
  }, {
    "name" : "public final boolean releaseShared(int arg)",
    "returnType" : "boolean",
    "comment" : "\n     * Releases in shared mode.  Implemented by unblocking one or more\n     * threads if {@link #tryReleaseShared} returns true.\n     *\n     * @param arg the release argument.  This value is conveyed to\n     *        {@link #tryReleaseShared} but is otherwise uninterpreted\n     *        and can represent anything you like.\n     * @return the value returned from {@link #tryReleaseShared}\n     ",
    "links" : [ "#tryReleaseShared" ]
  }, {
    "name" : "public final boolean hasQueuedThreads()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads are waiting to acquire. Note that\n     * because cancellations due to interrupts and timeouts may occur\n     * at any time, a {@code true} return does not guarantee that any\n     * other thread will ever acquire.\n     *\n     * @return {@code true} if there may be other threads waiting to acquire\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasContended()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads have ever contended to acquire this\n     * synchronizer; that is, if an acquire method has ever blocked.\n     *\n     * <p>In this implementation, this operation returns in\n     * constant time.\n     *\n     * @return {@code true} if there has ever been contention\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Thread getFirstQueuedThread()",
    "returnType" : "Thread",
    "comment" : "\n     * Returns the first (longest-waiting) thread in the queue, or\n     * {@code null} if no threads are currently queued.\n     *\n     * <p>In this implementation, this operation normally returns in\n     * constant time, but may iterate upon contention if other threads are\n     * concurrently modifying the queue.\n     *\n     * @return the first (longest-waiting) thread in the queue, or\n     *         {@code null} if no threads are currently queued\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isQueued(Thread thread)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given thread is currently queued.\n     *\n     * <p>This implementation traverses the queue to determine\n     * presence of the given thread.\n     *\n     * @param thread the thread\n     * @return {@code true} if the given thread is on the queue\n     * @throws NullPointerException if the thread is null\n     ",
    "links" : [ ]
  }, {
    "name" : " final boolean apparentlyFirstQueuedIsExclusive()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the apparent first queued thread, if one\n     * exists, is waiting in exclusive mode.  If this method returns\n     * {@code true}, and the current thread is attempting to acquire in\n     * shared mode (that is, this method is invoked from {@link\n     * #tryAcquireShared}) then it is guaranteed that the current thread\n     * is not the first queued thread.  Used only as a heuristic in\n     * ReentrantReadWriteLock.\n     ",
    "links" : [ "#tryAcquireShared" ]
  }, {
    "name" : "public final boolean hasQueuedPredecessors()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads have been waiting to acquire longer\n     * than the current thread.\n     *\n     * <p>An invocation of this method is equivalent to (but may be\n     * more efficient than):\n     * <pre> {@code\n     * getFirstQueuedThread() != Thread.currentThread()\n     *   && hasQueuedThreads()}</pre>\n     *\n     * <p>Note that because cancellations due to interrupts and\n     * timeouts may occur at any time, a {@code true} return does not\n     * guarantee that some other thread will acquire before the current\n     * thread.  Likewise, it is possible for another thread to win a\n     * race to enqueue after this method has returned {@code false},\n     * due to the queue being empty.\n     *\n     * <p>This method is designed to be used by a fair synchronizer to\n     * avoid <a href=\"AbstractQueuedSynchronizer.html#barging\">barging</a>.\n     * Such a synchronizer's {@link #tryAcquire} method should return\n     * {@code false}, and its {@link #tryAcquireShared} method should\n     * return a negative value, if this method returns {@code true}\n     * (unless this is a reentrant acquire).  For example, the {@code\n     * tryAcquire} method for a fair, reentrant, exclusive mode\n     * synchronizer might look like this:\n     *\n     * <pre> {@code\n     * protected boolean tryAcquire(int arg) {\n     *   if (isHeldExclusively()) {\n     *     // A reentrant acquire; increment hold count\n     *     return true;\n     *   } else if (hasQueuedPredecessors()) {\n     *     return false;\n     *   } else {\n     *     // try to acquire normally\n     *   }\n     * }}</pre>\n     *\n     * @return {@code true} if there is a queued thread preceding the\n     *         current thread, and {@code false} if the current thread\n     *         is at the head of the queue or the queue is empty\n     * @since 1.7\n     ",
    "links" : [ "#tryAcquire", "#tryAcquireShared" ]
  }, {
    "name" : "public final int getQueueLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of threads waiting to\n     * acquire.  The value is only an estimate because the number of\n     * threads may change dynamically while this method traverses\n     * internal data structures.  This method is designed for use in\n     * monitoring system state, not for synchronization control.\n     *\n     * @return the estimated number of threads waiting to acquire\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Collection<Thread> getQueuedThreads()",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing threads that may be waiting to\n     * acquire.  Because the actual set of threads may change\n     * dynamically while constructing this result, the returned\n     * collection is only a best-effort estimate.  The elements of the\n     * returned collection are in no particular order.  This method is\n     * designed to facilitate construction of subclasses that provide\n     * more extensive monitoring facilities.\n     *\n     * @return the collection of threads\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Collection<Thread> getExclusiveQueuedThreads()",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing threads that may be waiting to\n     * acquire in exclusive mode. This has the same properties\n     * as {@link #getQueuedThreads} except that it only returns\n     * those threads waiting due to an exclusive acquire.\n     *\n     * @return the collection of threads\n     ",
    "links" : [ "#getQueuedThreads" ]
  }, {
    "name" : "public final Collection<Thread> getSharedQueuedThreads()",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing threads that may be waiting to\n     * acquire in shared mode. This has the same properties\n     * as {@link #getQueuedThreads} except that it only returns\n     * those threads waiting due to a shared acquire.\n     *\n     * @return the collection of threads\n     ",
    "links" : [ "#getQueuedThreads" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string identifying this synchronizer, as well as its state.\n     * The state, in brackets, includes the String {@code \"State =\"}\n     * followed by the current value of {@link #getState}, and either\n     * {@code \"nonempty\"} or {@code \"empty\"} depending on whether the\n     * queue is empty.\n     *\n     * @return a string identifying this synchronizer, as well as its state\n     ",
    "links" : [ "#getState" ]
  }, {
    "name" : "public final boolean owns(ConditionObject condition)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether the given ConditionObject\n     * uses this synchronizer as its lock.\n     *\n     * @param condition the condition\n     * @return {@code true} if owned\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasWaiters(ConditionObject condition)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads are waiting on the given condition\n     * associated with this synchronizer. Note that because timeouts\n     * and interrupts may occur at any time, a {@code true} return\n     * does not guarantee that a future {@code signal} will awaken\n     * any threads.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * @param condition the condition\n     * @return {@code true} if there are any waiting threads\n     * @throws IllegalMonitorStateException if exclusive synchronization\n     *         is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this synchronizer\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getWaitQueueLength(ConditionObject condition)",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of threads waiting on the\n     * given condition associated with this synchronizer. Note that\n     * because timeouts and interrupts may occur at any time, the\n     * estimate serves only as an upper bound on the actual number of\n     * waiters.  This method is designed for use in monitoring system\n     * state, not for synchronization control.\n     *\n     * @param condition the condition\n     * @return the estimated number of waiting threads\n     * @throws IllegalMonitorStateException if exclusive synchronization\n     *         is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this synchronizer\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Collection<Thread> getWaitingThreads(ConditionObject condition)",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing those threads that may be\n     * waiting on the given condition associated with this\n     * synchronizer.  Because the actual set of threads may change\n     * dynamically while constructing this result, the returned\n     * collection is only a best-effort estimate. The elements of the\n     * returned collection are in no particular order.\n     *\n     * @param condition the condition\n     * @return the collection of threads\n     * @throws IllegalMonitorStateException if exclusive synchronization\n     *         is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this synchronizer\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected final int getState()", "protected final void setState(int newState)", "protected final boolean compareAndSetState(int expect, int update)", "private boolean casTail(Node c, Node v)", "private void tryInitializeHead()", " final void enqueue(Node node)", " final boolean isEnqueued(Node node)", "private static void signalNext(Node h)", "private static void signalNextIfShared(Node h)", " final int acquire(Node node, int arg, boolean shared, boolean interruptible, boolean timed, long time)", "private void cleanQueue()", "private int cancelAcquire(Node node, boolean interrupted, boolean interruptible)", "protected boolean tryAcquire(int arg)", "protected boolean tryRelease(int arg)", "protected int tryAcquireShared(int arg)", "protected boolean tryReleaseShared(int arg)", "protected boolean isHeldExclusively()", "public final void acquire(int arg)", "public final void acquireInterruptibly(int arg) throws InterruptedException", "public final boolean tryAcquireNanos(int arg, long nanosTimeout) throws InterruptedException", "public final boolean release(int arg)", "public final void acquireShared(int arg)", "public final void acquireSharedInterruptibly(int arg) throws InterruptedException", "public final boolean tryAcquireSharedNanos(int arg, long nanosTimeout) throws InterruptedException", "public final boolean releaseShared(int arg)", "public final boolean hasQueuedThreads()", "public final boolean hasContended()", "public final Thread getFirstQueuedThread()", "public final boolean isQueued(Thread thread)", " final boolean apparentlyFirstQueuedIsExclusive()", "public final boolean hasQueuedPredecessors()", "public final int getQueueLength()", "public final Collection<Thread> getQueuedThreads()", "public final Collection<Thread> getExclusiveQueuedThreads()", "public final Collection<Thread> getSharedQueuedThreads()", "public String toString()", "public final boolean owns(ConditionObject condition)", "public final boolean hasWaiters(ConditionObject condition)", "public final int getWaitQueueLength(ConditionObject condition)", "public final Collection<Thread> getWaitingThreads(ConditionObject condition)" ],
  "variableNames" : [ "serialVersionUID", "WAITING", "CANCELLED", "COND", "head", "tail", "state", "U", "STATE", "HEAD", "TAIL" ]
}