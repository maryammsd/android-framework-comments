{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/ContextImpl.java",
  "packageName" : "android.app",
  "className" : "ContextImpl",
  "comment" : "\n * Common implementation of Context API, which provides the base\n * context object for Activity and other application components.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XATTR_INODE_CACHE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XATTR_INODE_CODE_CACHE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSharedPrefsCache",
    "type" : "ArrayMap<String, ArrayMap<File, SharedPreferencesImpl>>",
    "comment" : "\n     * Map from package name, to preference name, to cached preferences.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSharedPrefsPaths",
    "type" : "ArrayMap<String, File>",
    "comment" : "\n     * Map from preference name to generated path.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMainThread",
    "type" : "ActivityThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageInfo",
    "type" : "LoadedApk",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "\n     * The {@link com.android.server.wm.WindowToken} representing this instance if it is\n     * {@link #CONTEXT_TYPE_WINDOW_CONTEXT} or {@link #CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI}.\n     * If the type is {@link #CONTEXT_TYPE_ACTIVITY}, then represents the\n     * {@link android.window.WindowContainerToken} of the activity.\n     ",
    "links" : [ "com.android.server.wm.WindowToken", "#CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI", "#CONTEXT_TYPE_WINDOW_CONTEXT", "#CONTEXT_TYPE_ACTIVITY", "android.window.WindowContainerToken" ]
  }, {
    "name" : "mUser",
    "type" : "UserHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentResolver",
    "type" : "ApplicationContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBasePackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParams",
    "type" : "ContextParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResourcesManager",
    "type" : "ResourcesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResources",
    "type" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : " may be null if invalid display or not initialized yet.",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceDisplayOverrideInResources",
    "type" : "boolean",
    "comment" : "\n     * If set to {@code true} the resources for this context will be configured for mDisplay which\n     * will override the display configuration inherited from {@link #mToken} (or the global\n     * configuration if mToken is null). Typically set for display contexts and contexts derived\n     * from display contexts where changes to the activity display and the global configuration\n     * display should not impact their resources.\n     ",
    "links" : [ "#mToken" ]
  }, {
    "name" : "mIsConfigurationBasedContext",
    "type" : "boolean",
    "comment" : " @see Context#isConfigurationContext() ",
    "links" : [ ]
  }, {
    "name" : "mIsExplicitDeviceId",
    "type" : "boolean",
    "comment" : "\n     *  Indicates that this context was created with an explicit device ID association via\n     *  Context#createDeviceContext and under no circumstances will it ever change, even if\n     *  this context is not associated with a display id, or if the associated display id changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOuterContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThemeResource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTheme",
    "type" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageManager",
    "type" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceiverRestrictedContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitName",
    "type" : "String",
    "comment" : " The name of the split this Context is representing. May be null.",
    "links" : [ ]
  }, {
    "name" : "mAutofillClient",
    "type" : "AutofillClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutofillOptions",
    "type" : "AutofillOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentCaptureOptions",
    "type" : "ContentCaptureOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTEXT_TYPE_NON_UI",
    "type" : "int",
    "comment" : "\n     * Indicates this {@link Context} can not handle UI components properly and is not associated\n     * with a {@link Display} instance.\n     ",
    "links" : [ "android.view.Display", "android.annotation.UiContext" ]
  }, {
    "name" : "CONTEXT_TYPE_DISPLAY_CONTEXT",
    "type" : "int",
    "comment" : "\n     * Indicates this {@link Context} is associated with a {@link Display} instance but should not\n     * be handled UI components properly because it doesn't receive configuration changes\n     * regardless of display property updates.\n     ",
    "links" : [ "android.view.Display", "android.annotation.UiContext" ]
  }, {
    "name" : "CONTEXT_TYPE_ACTIVITY",
    "type" : "int",
    "comment" : "\n     * Indicates this {@link Context} is an {@link Activity} or {@link Activity} derived\n     * {@link Context}.\n     ",
    "links" : [ "android.annotation.UiContext", "android.app.Activity" ]
  }, {
    "name" : "CONTEXT_TYPE_WINDOW_CONTEXT",
    "type" : "int",
    "comment" : "\n     * Indicates this {@link Context} is a {@link WindowContext} or {@link WindowContext} derived\n     * {@link Context}.\n     ",
    "links" : [ "android.window.WindowContext", "android.annotation.UiContext" ]
  }, {
    "name" : "CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI",
    "type" : "int",
    "comment" : "\n     * Indicates this {@link Context} is created from {@link #createSystemContext(ActivityThread)}\n     * or {@link #createSystemUiContext(ContextImpl, int)} or any {@link Context} that system UI\n     * uses.\n     ",
    "links" : [ "#createSystemContext(ActivityThread)", "#createSystemUiContext(ContextImpl", "android.annotation.UiContext" ]
  }, {
    "name" : "mContextType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwnsToken",
    "type" : "boolean",
    "comment" : "\n     * {@code true} to indicate that the {@link Context} owns the {@link #getWindowContextToken()}\n     * and is responsible for detaching the token when the Context is released.\n     *\n     * @see #finalize()\n     ",
    "links" : [ "#getWindowContextToken()", "android.annotation.UiContext" ]
  }, {
    "name" : "mDatabasesDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDatabasesDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferencesDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferencesDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilesDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilesDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCratesDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCratesDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoBackupFilesDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoBackupFilesDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCacheDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCacheDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodeCacheDirLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodeCacheDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMiscDirsLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceCache",
    "type" : "Object[]",
    "comment" : " The system service cache for the system services that are cached per-ContextImpl.",
    "links" : [ ]
  }, {
    "name" : "STATE_UNINITIALIZED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_INITIALIZING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_READY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_NOT_FOUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceInitializationStateArray",
    "type" : "int[]",
    "comment" : "\n     * Initialization state for each service. Any of {@link #STATE_UNINITIALIZED},\n     * {@link #STATE_INITIALIZING} or {@link #STATE_READY},\n     ",
    "links" : [ "#STATE_UNINITIALIZED", "#STATE_INITIALIZING", "#STATE_READY" ]
  }, {
    "name" : "mDeviceIdListenerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceIdChangeListeners",
    "type" : "ArrayList<DeviceIdChangeListenerDelegate>",
    "comment" : "\n     * List of listeners for deviceId changes and their associated Executor.\n     * List is lazy-initialized on first registration\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static ContextImpl getImpl(Context context)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetManager getAssets()",
    "returnType" : "AssetManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResources()",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageManager getPackageManager()",
    "returnType" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentResolver getContentResolver()",
    "returnType" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Looper getMainLooper()",
    "returnType" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Executor getMainExecutor()",
    "returnType" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context getApplicationContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTheme(int resId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getThemeResId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources.Theme getTheme()",
    "returnType" : "Resources.Theme",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initializeTheme()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBasePackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getOpPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getAttributionTag()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContextParams getParams()",
    "returnType" : "ContextParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AttributionSource getAttributionSource()",
    "returnType" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageResourcePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageCodePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(String name, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SharedPreferences getSharedPreferences(File file, int mode)",
    "returnType" : "SharedPreferences",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ArrayMap<File, SharedPreferencesImpl> getSharedPreferencesCacheLocked()",
    "returnType" : "ArrayMap<File, SharedPreferencesImpl>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reloadSharedPreferences()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int moveFiles(File sourceDir, File targetDir, final String prefix)",
    "returnType" : "int",
    "comment" : "\n     * Try our best to migrate all files from source to target that match\n     * requested prefix.\n     *\n     * @return the number of files moved, or -1 if there was trouble.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteSharedPreferences(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File getPreferencesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream openFileInput(String name) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException",
    "returnType" : "FileOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteFile(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static File ensurePrivateDirExists(File file)",
    "returnType" : "File",
    "comment" : "\n     * Common-path handling of app data dir creation\n     ",
    "links" : [ ]
  }, {
    "name" : "private static File ensurePrivateCacheDirExists(File file, String xattr)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static File ensurePrivateDirExists(File file, int mode, int gid, String xattr)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCrateDir(@NonNull String crateId)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getNoBackupFilesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getExternalFilesDir(String type)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalFilesDirs(String type)",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getObbDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getObbDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCodeCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static File getCodeCacheDirBeforeBind(File dataDir)",
    "returnType" : "File",
    "comment" : "\n     * Helper for getting code-cache dir potentially before application bind.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public File getExternalCacheDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalCacheDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File[] getExternalMediaDirs()",
    "returnType" : "File[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getPreloadsFileCache()",
    "returnType" : "File",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public File getFileStreamPath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getSharedPreferencesPath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] fileList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean moveDatabaseFrom(Context sourceContext, String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteDatabase(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDatabasePath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] databaseList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File getDatabasesDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable peekWallpaper()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(Bitmap bitmap) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWallpaper(InputStream data) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWallpaper() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WallpaperManager getWallpaperManager()",
    "returnType" : "WallpaperManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivity(Intent intent, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startActivityAsUser(Intent intent, Bundle options, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int startActivitiesAsUser(Intent[] intents, Bundle options, UserHandle userHandle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void startActivities(Intent[] intents, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions, String[] excludedPermissions, String[] excludedPackages, BroadcastOptions options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcast(Intent intent, String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, String receiverPermission, String receiverAppOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, @Nullable Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendOrderedBroadcast(Intent intent, int initialCode, String receiverPermission, String receiverAppOp, BroadcastReceiver resultReceiver, Handler scheduler, String initialData, @Nullable Bundle initialExtras, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcast(@NonNull Intent intent, @Nullable Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * <p>Perform a {@link #sendBroadcast(Intent)} that is \"sticky,\" meaning the\n     * Intent you are sending stays around after the broadcast is complete,\n     * so that others can quickly retrieve that data through the return\n     * value of {@link #registerReceiver(BroadcastReceiver, IntentFilter)}.  In\n     * all other ways, this behaves the same as\n     * {@link #sendBroadcast(Intent)}.\n     *\n     * @deprecated Sticky broadcasts should not be used.  They provide no security (anyone\n     * can access them), no protection (anyone can modify them), and many other problems.\n     * The recommended pattern is to use a non-sticky broadcast to report that <em>something</em>\n     * has changed, with another mechanism for apps to retrieve the current value whenever\n     * desired.\n     *\n     * @param intent The Intent to broadcast; all receivers matching this\n     * Intent will receive the broadcast, and the Intent will be held to\n     * be re-broadcast to future receivers.\n     * @param options (optional) Additional sending options, generated from a\n     * {@link android.app.BroadcastOptions}.\n     *\n     * @see #sendBroadcast(Intent)\n     * @see #sendStickyOrderedBroadcast(Intent, BroadcastReceiver, Handler, int, String, Bundle)\n     ",
    "links" : [ "#sendBroadcast(Intent)", "android.app.BroadcastOptions", "#registerReceiver(BroadcastReceiver" ]
  }, {
    "name" : "public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcast(Intent intent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, Bundle options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverForAllUsers(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverForAllUsers(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Intent registerReceiverInternal(BroadcastReceiver receiver, int userId, IntentFilter filter, String broadcastPermission, Handler scheduler, Context context, int flags)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterReceiver(BroadcastReceiver receiver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateServiceIntent(Intent service)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundService(Intent service)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean stopService(Intent service)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ComponentName startServiceCommon(Intent service, boolean requireForeground, UserHandle user)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean stopServiceAsUser(Intent service, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean stopServiceCommon(Intent service, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, ServiceConnection conn, int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindService(Intent service, @NonNull BindServiceFlags flags, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindIsolatedService(Intent service, @NonNull BindServiceFlags flags, String instanceName, Executor executor, ServiceConnection conn)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, Handler handler, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, long flags)",
    "returnType" : "IServiceConnection",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IApplicationThread getIApplicationThread()",
    "returnType" : "IApplicationThread",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getProcessToken()",
    "returnType" : "IBinder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Handler getMainThreadHandler()",
    "returnType" : "Handler",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private boolean bindServiceCommon(Intent service, ServiceConnection conn, long flags, String instanceName, Handler handler, Executor executor, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateServiceGroup(@NonNull ServiceConnection conn, int group, int importance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unbindService(ServiceConnection conn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getSystemService(String name)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getSystemServiceName(Class<?> serviceClass)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isUiContext()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConfigurationContext()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSystemOrSystemUI(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Temporary workaround to permit incorrect usages of Context by SystemUI.\n     * TODO(b/147647877): Fix usages and remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void revokeSelfPermissionsOnKill(@NonNull Collection<String> permissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSelfPermission(String permission)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforce(String permission, int resultOfCheck, boolean selfToo, int uid, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforcePermission(String permission, int pid, int uid, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingPermission(String permission, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfPermission(String permission, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkContentUriPermissionFull(Uri uri, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkUriPermissions(@NonNull List<Uri> uris, int pid, int uid, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private int resolveUserId(Uri uri)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkCallingUriPermissions(@NonNull List<Uri> uris, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] checkCallingOrSelfUriPermissions(@NonNull List<Uri> uris, int modeFlags)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String uriModeFlagToString(int uriModeFlags)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceForUri(int modeFlags, int resultOfCheck, boolean selfToo, int uid, Uri uri, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void warnIfCallingFromSystemProcess()",
    "returnType" : "void",
    "comment" : "\n     * Logs a warning if the system process directly called a method such as\n     * {@link #startService(Intent)} instead of {@link #startServiceAsUser(Intent, UserHandle)}.\n     * The \"AsUser\" variants allow us to properly enforce the user's restrictions.\n     ",
    "links" : [ "#startServiceAsUser(Intent", "#startService(Intent)" ]
  }, {
    "name" : "private static Resources createResources(IBinder activityToken, LoadedApk pi, String splitName, @Nullable Integer overrideDisplayId, Configuration overrideConfig, CompatibilityInfo compatInfo, List<ResourcesLoader> resourcesLoader)",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createApplicationContext(ApplicationInfo application, int flags) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Context createApplicationContextAsUser(ApplicationInfo application, int flags, UserHandle user) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createContextForSdkInSandbox(ApplicationInfo sdkInfo, int flags) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContext(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createContextForSplit(String splitName) throws NameNotFoundException",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createConfigurationContext(Configuration overrideConfiguration)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDisplayContext(Display display)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDisplay(Display display)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDeviceContext(int deviceId)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowContext createWindowContext(@WindowType int type, @Nullable Bundle options)",
    "returnType" : "WindowContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowContext createWindowContext(@NonNull Display display, @WindowType int type, @Nullable Bundle options)",
    "returnType" : "WindowContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private WindowContext createWindowContextInternal(@NonNull Display display, @WindowType int type, @Nullable Bundle options)",
    "returnType" : "WindowContext",
    "comment" : "\n     * The internal implementation of {@link Context#createWindowContext(int, Bundle)} and\n     * {@link Context#createWindowContext(Display, int, Bundle)}.\n     *\n     * @param display The {@link Display} instance to be associated with.\n     *\n     * @see Context#createWindowContext(Display, int, Bundle)\n     * @see Context#createWindowContext(int, Bundle)\n     ",
    "links" : [ "android.annotation.UiContext#createWindowContext(int", "android.view.Display", "android.annotation.UiContext#createWindowContext(Display" ]
  }, {
    "name" : "public Context createTokenContext(@NonNull IBinder token, @NonNull Display display)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ContextImpl createWindowContextBase(@NonNull IBinder token, int displayId)",
    "returnType" : "ContextImpl",
    "comment" : "\n     * Creates the base {@link Context} for UI context to associate with a non-{@link Activity}\n     * window.\n     *\n     * @param token The token to associate with {@link Resources}\n     * @param displayId The ID of {@link Display} to associate with.\n     *\n     * @see #createWindowContext(Display, int, Bundle)\n     * @see #createTokenContext(IBinder, Display)\n     ",
    "links" : [ "android.view.Display", "android.content.res.CompatResources", "android.annotation.UiContext", "android.app.Activity" ]
  }, {
    "name" : "private static Resources createWindowContextResources(@NonNull ContextImpl windowContextBase)",
    "returnType" : "Resources",
    "comment" : "\n     * Creates the {@link Resources} to associate with the {@link WindowContext}'s token.\n     *\n     * When there's a {@link Configuration} update, this Resources instance will be updated to match\n     * the new configuration.\n     *\n     * @see WindowTokenClient\n     * @see #getWindowContextToken()\n     ",
    "links" : [ "android.content.res.Configuration", "android.content.res.CompatResources", "android.window.WindowContext" ]
  }, {
    "name" : "public Context createContext(@NonNull ContextParams contextParams)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createAttributionContext(@Nullable String attributionTag)",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createDeviceProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context createCredentialProtectedStorageContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRestricted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceProtectedStorage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCredentialProtectedStorage()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canLoadUnsafeResources()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplay()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isAssociatedWithDisplay()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAssociatedDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Display getDisplayNoVerify()",
    "returnType" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateDisplay(int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDeviceIdIfChanged(int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateDeviceId(int updatedDeviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDeviceIdChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDeviceIdChangeListener(@NonNull IntConsumer listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DeviceIdChangeListenerDelegate getDeviceIdListener(@Nullable IntConsumer listener)",
    "returnType" : "DeviceIdChangeListenerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyOnDeviceChangedListeners(int deviceId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayAdjustments getDisplayAdjustments(int displayId)",
    "returnType" : "DisplayAdjustments",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDataDir()",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDir(String name, int mode)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUser()",
    "returnType" : "UserHandle",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public AutofillClient getAutofillClient()",
    "returnType" : "AutofillClient",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillClient(AutofillClient client)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AutofillOptions getAutofillOptions()",
    "returnType" : "AutofillOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setAutofillOptions(AutofillOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ContentCaptureOptions getContentCaptureOptions()",
    "returnType" : "ContentCaptureOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setContentCaptureOptions(ContentCaptureOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ContextImpl createSystemContext(ActivityThread mainThread)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ContextImpl createSystemUiContext(ContextImpl systemContext, int displayId)",
    "returnType" : "ContextImpl",
    "comment" : "\n     * System Context to be used for UI. This Context has resources that can be themed.\n     * Make sure that the created system UI context shares the same LoadedApk as the system context.\n     * @param systemContext The system context which created by\n     *                      {@link #createSystemContext(ActivityThread)}.\n     * @param displayId The ID of the display where the UI is shown.\n     ",
    "links" : [ "#createSystemContext(ActivityThread)" ]
  }, {
    "name" : " static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo, String opPackageName)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ContextImpl createActivityContext(ActivityThread mainThread, LoadedApk packageInfo, ActivityInfo activityInfo, IBinder activityToken, int displayId, Configuration overrideConfiguration)",
    "returnType" : "ContextImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AttributionSource createAttributionSource(@Nullable String attributionTag, @Nullable AttributionSource nextAttributionSource, @Nullable Set<String> renouncedPermissions, boolean shouldRegister, int deviceId)",
    "returnType" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setResources(Resources r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void scheduleFinalCleanup(String who, String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void performFinalCleanup(String who, String what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Context getReceiverRestrictedContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void setOuterContext(@NonNull Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Context getOuterContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getActivityToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getWindowContextToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkMode(int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setFilePermissionsFromMode(String name, int mode, int extraPermissions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File makeFilename(File base, String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private File[] ensureExternalDirsExistOrFilter(File[] dirs, boolean tryCreateInProcess)",
    "returnType" : "File[]",
    "comment" : "\n     * Ensure that given directories exist, trying to create them if missing. If\n     * unable to create, they are filtered by replacing with {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void closeSystemDialogs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static ContextImpl getImpl(Context context)", "public AssetManager getAssets()", "public Resources getResources()", "public PackageManager getPackageManager()", "public ContentResolver getContentResolver()", "public Looper getMainLooper()", "public Executor getMainExecutor()", "public Context getApplicationContext()", "public void setTheme(int resId)", "public int getThemeResId()", "public Resources.Theme getTheme()", "private void initializeTheme()", "public ClassLoader getClassLoader()", "public String getPackageName()", "public String getBasePackageName()", "public String getOpPackageName()", "public String getAttributionTag()", "public ContextParams getParams()", "public AttributionSource getAttributionSource()", "public ApplicationInfo getApplicationInfo()", "public String getPackageResourcePath()", "public String getPackageCodePath()", "public SharedPreferences getSharedPreferences(String name, int mode)", "public SharedPreferences getSharedPreferences(File file, int mode)", "private ArrayMap<File, SharedPreferencesImpl> getSharedPreferencesCacheLocked()", "public void reloadSharedPreferences()", "private static int moveFiles(File sourceDir, File targetDir, final String prefix)", "public boolean moveSharedPreferencesFrom(Context sourceContext, String name)", "public boolean deleteSharedPreferences(String name)", "private File getPreferencesDir()", "public FileInputStream openFileInput(String name) throws FileNotFoundException", "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException", "public boolean deleteFile(String name)", "private static File ensurePrivateDirExists(File file)", "private static File ensurePrivateCacheDirExists(File file, String xattr)", "private static File ensurePrivateDirExists(File file, int mode, int gid, String xattr)", "public File getFilesDir()", "public File getCrateDir(@NonNull String crateId)", "public File getNoBackupFilesDir()", "public File getExternalFilesDir(String type)", "public File[] getExternalFilesDirs(String type)", "public File getObbDir()", "public File[] getObbDirs()", "public File getCacheDir()", "public File getCodeCacheDir()", " static File getCodeCacheDirBeforeBind(File dataDir)", "public File getExternalCacheDir()", "public File[] getExternalCacheDirs()", "public File[] getExternalMediaDirs()", "public File getPreloadsFileCache()", "public File getFileStreamPath(String name)", "public File getSharedPreferencesPath(String name)", "public String[] fileList()", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory)", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler)", "public boolean moveDatabaseFrom(Context sourceContext, String name)", "public boolean deleteDatabase(String name)", "public File getDatabasePath(String name)", "public String[] databaseList()", "private File getDatabasesDir()", "public Drawable getWallpaper()", "public Drawable peekWallpaper()", "public int getWallpaperDesiredMinimumWidth()", "public int getWallpaperDesiredMinimumHeight()", "public void setWallpaper(Bitmap bitmap) throws IOException", "public void setWallpaper(InputStream data) throws IOException", "public void clearWallpaper() throws IOException", "private WallpaperManager getWallpaperManager()", "public void startActivity(Intent intent)", "public void startActivityAsUser(Intent intent, UserHandle user)", "public void startActivity(Intent intent, Bundle options)", "public void startActivityAsUser(Intent intent, Bundle options, UserHandle user)", "public void startActivities(Intent[] intents)", "public int startActivitiesAsUser(Intent[] intents, Bundle options, UserHandle userHandle)", "public void startActivities(Intent[] intents, Bundle options)", "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags) throws IntentSender.SendIntentException", "public void startIntentSender(IntentSender intent, Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException", "public void sendBroadcast(Intent intent)", "public void sendBroadcast(Intent intent, String receiverPermission)", "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions)", "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions, Bundle options)", "public void sendBroadcastAsUserMultiplePermissions(Intent intent, UserHandle user, String[] receiverPermissions)", "public void sendBroadcastMultiplePermissions(Intent intent, String[] receiverPermissions, String[] excludedPermissions, String[] excludedPackages, BroadcastOptions options)", "public void sendBroadcast(Intent intent, String receiverPermission, Bundle options)", "public void sendBroadcast(Intent intent, String receiverPermission, int appOp)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", " void sendOrderedBroadcast(Intent intent, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras, Bundle options)", "public void sendBroadcastAsUser(Intent intent, UserHandle user)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, Bundle options)", "public void sendBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcastAsUser(Intent intent, UserHandle user, String receiverPermission, int appOp, Bundle options, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, String receiverPermission, String receiverAppOp, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, @Nullable Bundle initialExtras)", "public void sendOrderedBroadcast(Intent intent, int initialCode, String receiverPermission, String receiverAppOp, BroadcastReceiver resultReceiver, Handler scheduler, String initialData, @Nullable Bundle initialExtras, Bundle options)", "public void sendStickyBroadcast(Intent intent)", "public void sendStickyBroadcast(@NonNull Intent intent, @Nullable Bundle options)", "public void sendStickyOrderedBroadcast(Intent intent, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void removeStickyBroadcast(Intent intent)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user)", "public void sendStickyBroadcastAsUser(Intent intent, UserHandle user, Bundle options)", "public void sendStickyOrderedBroadcastAsUser(Intent intent, UserHandle user, BroadcastReceiver resultReceiver, Handler scheduler, int initialCode, String initialData, Bundle initialExtras)", "public void removeStickyBroadcastAsUser(Intent intent, UserHandle user)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, int flags)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)", "public Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)", "public Intent registerReceiverForAllUsers(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler)", "public Intent registerReceiverForAllUsers(BroadcastReceiver receiver, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)", "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler)", "public Intent registerReceiverAsUser(BroadcastReceiver receiver, UserHandle user, IntentFilter filter, String broadcastPermission, Handler scheduler, int flags)", "private Intent registerReceiverInternal(BroadcastReceiver receiver, int userId, IntentFilter filter, String broadcastPermission, Handler scheduler, Context context, int flags)", "public void unregisterReceiver(BroadcastReceiver receiver)", "private void validateServiceIntent(Intent service)", "public ComponentName startService(Intent service)", "public ComponentName startForegroundService(Intent service)", "public boolean stopService(Intent service)", "public ComponentName startServiceAsUser(Intent service, UserHandle user)", "public ComponentName startForegroundServiceAsUser(Intent service, UserHandle user)", "private ComponentName startServiceCommon(Intent service, boolean requireForeground, UserHandle user)", "public boolean stopServiceAsUser(Intent service, UserHandle user)", "private boolean stopServiceCommon(Intent service, UserHandle user)", "public boolean bindService(Intent service, ServiceConnection conn, int flags)", "public boolean bindService(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags)", "public boolean bindService(Intent service, int flags, Executor executor, ServiceConnection conn)", "public boolean bindService(Intent service, @NonNull BindServiceFlags flags, Executor executor, ServiceConnection conn)", "public boolean bindIsolatedService(Intent service, int flags, String instanceName, Executor executor, ServiceConnection conn)", "public boolean bindIsolatedService(Intent service, @NonNull BindServiceFlags flags, String instanceName, Executor executor, ServiceConnection conn)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, int flags, Handler handler, UserHandle user)", "public boolean bindServiceAsUser(Intent service, ServiceConnection conn, @NonNull BindServiceFlags flags, Handler handler, UserHandle user)", "public IServiceConnection getServiceDispatcher(ServiceConnection conn, Handler handler, long flags)", "public IApplicationThread getIApplicationThread()", "public IBinder getProcessToken()", "public Handler getMainThreadHandler()", "private boolean bindServiceCommon(Intent service, ServiceConnection conn, long flags, String instanceName, Handler handler, Executor executor, UserHandle user)", "public void updateServiceGroup(@NonNull ServiceConnection conn, int group, int importance)", "public void unbindService(ServiceConnection conn)", "public boolean startInstrumentation(ComponentName className, String profileFile, Bundle arguments)", "public Object getSystemService(String name)", "public String getSystemServiceName(Class<?> serviceClass)", "public boolean isUiContext()", "public boolean isConfigurationContext()", "private static boolean isSystemOrSystemUI(Context context)", "public int checkPermission(String permission, int pid, int uid)", "public int checkPermission(String permission, int pid, int uid, IBinder callerToken)", "public void revokeSelfPermissionsOnKill(@NonNull Collection<String> permissions)", "public int checkCallingPermission(String permission)", "public int checkCallingOrSelfPermission(String permission)", "public int checkSelfPermission(String permission)", "private void enforce(String permission, int resultOfCheck, boolean selfToo, int uid, String message)", "public void enforcePermission(String permission, int pid, int uid, String message)", "public void enforceCallingPermission(String permission, String message)", "public void enforceCallingOrSelfPermission(String permission, String message)", "public void grantUriPermission(String toPackage, Uri uri, int modeFlags)", "public void revokeUriPermission(Uri uri, int modeFlags)", "public void revokeUriPermission(String targetPackage, Uri uri, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags)", "public int checkContentUriPermissionFull(Uri uri, int pid, int uid, int modeFlags)", "public int[] checkUriPermissions(@NonNull List<Uri> uris, int pid, int uid, int modeFlags)", "public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, IBinder callerToken)", "private int resolveUserId(Uri uri)", "public int checkCallingUriPermission(Uri uri, int modeFlags)", "public int[] checkCallingUriPermissions(@NonNull List<Uri> uris, int modeFlags)", "public int checkCallingOrSelfUriPermission(Uri uri, int modeFlags)", "public int[] checkCallingOrSelfUriPermissions(@NonNull List<Uri> uris, int modeFlags)", "public int checkUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags)", "private String uriModeFlagToString(int uriModeFlags)", "private void enforceForUri(int modeFlags, int resultOfCheck, boolean selfToo, int uid, Uri uri, String message)", "public void enforceUriPermission(Uri uri, int pid, int uid, int modeFlags, String message)", "public void enforceCallingUriPermission(Uri uri, int modeFlags, String message)", "public void enforceCallingOrSelfUriPermission(Uri uri, int modeFlags, String message)", "public void enforceUriPermission(Uri uri, String readPermission, String writePermission, int pid, int uid, int modeFlags, String message)", "private void warnIfCallingFromSystemProcess()", "private static Resources createResources(IBinder activityToken, LoadedApk pi, String splitName, @Nullable Integer overrideDisplayId, Configuration overrideConfig, CompatibilityInfo compatInfo, List<ResourcesLoader> resourcesLoader)", "public Context createApplicationContext(ApplicationInfo application, int flags) throws NameNotFoundException", "private Context createApplicationContextAsUser(ApplicationInfo application, int flags, UserHandle user) throws NameNotFoundException", "public Context createContextForSdkInSandbox(ApplicationInfo sdkInfo, int flags) throws NameNotFoundException", "public Context createPackageContext(String packageName, int flags) throws NameNotFoundException", "public Context createPackageContextAsUser(String packageName, int flags, UserHandle user) throws NameNotFoundException", "public Context createContextAsUser(UserHandle user, @CreatePackageOptions int flags)", "public Context createContextForSplit(String splitName) throws NameNotFoundException", "public Context createConfigurationContext(Configuration overrideConfiguration)", "public Context createDisplayContext(Display display)", "private void setDisplay(Display display)", "public Context createDeviceContext(int deviceId)", "public WindowContext createWindowContext(@WindowType int type, @Nullable Bundle options)", "public WindowContext createWindowContext(@NonNull Display display, @WindowType int type, @Nullable Bundle options)", "private WindowContext createWindowContextInternal(@NonNull Display display, @WindowType int type, @Nullable Bundle options)", "public Context createTokenContext(@NonNull IBinder token, @NonNull Display display)", " ContextImpl createWindowContextBase(@NonNull IBinder token, int displayId)", "private static Resources createWindowContextResources(@NonNull ContextImpl windowContextBase)", "public Context createContext(@NonNull ContextParams contextParams)", "public Context createAttributionContext(@Nullable String attributionTag)", "public Context createDeviceProtectedStorageContext()", "public Context createCredentialProtectedStorageContext()", "public boolean isRestricted()", "public boolean isDeviceProtectedStorage()", "public boolean isCredentialProtectedStorage()", "public boolean canLoadUnsafeResources()", "public Display getDisplay()", "private boolean isAssociatedWithDisplay()", "public int getAssociatedDisplayId()", "public Display getDisplayNoVerify()", "public int getDisplayId()", "public void updateDisplay(int displayId)", "private void updateDeviceIdIfChanged(int displayId)", "public void updateDeviceId(int updatedDeviceId)", "public int getDeviceId()", "public void registerDeviceIdChangeListener(@NonNull @CallbackExecutor Executor executor, @NonNull IntConsumer listener)", "public void unregisterDeviceIdChangeListener(@NonNull IntConsumer listener)", "private DeviceIdChangeListenerDelegate getDeviceIdListener(@Nullable IntConsumer listener)", "private void notifyOnDeviceChangedListeners(int deviceId)", "public DisplayAdjustments getDisplayAdjustments(int displayId)", "public File getDataDir()", "public File getDir(String name, int mode)", "public UserHandle getUser()", "public int getUserId()", "public AutofillClient getAutofillClient()", "public void setAutofillClient(AutofillClient client)", "public AutofillOptions getAutofillOptions()", "public void setAutofillOptions(AutofillOptions options)", "public ContentCaptureOptions getContentCaptureOptions()", "public void setContentCaptureOptions(ContentCaptureOptions options)", "protected void finalize() throws Throwable", " static ContextImpl createSystemContext(ActivityThread mainThread)", " static ContextImpl createSystemUiContext(ContextImpl systemContext, int displayId)", " static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo)", " static ContextImpl createAppContext(ActivityThread mainThread, LoadedApk packageInfo, String opPackageName)", " static ContextImpl createActivityContext(ActivityThread mainThread, LoadedApk packageInfo, ActivityInfo activityInfo, IBinder activityToken, int displayId, Configuration overrideConfiguration)", "private AttributionSource createAttributionSource(@Nullable String attributionTag, @Nullable AttributionSource nextAttributionSource, @Nullable Set<String> renouncedPermissions, boolean shouldRegister, int deviceId)", " void setResources(Resources r)", " void installSystemApplicationInfo(ApplicationInfo info, ClassLoader classLoader)", " final void scheduleFinalCleanup(String who, String what)", " final void performFinalCleanup(String who, String what)", " final Context getReceiverRestrictedContext()", " final void setOuterContext(@NonNull Context context)", " final Context getOuterContext()", "public IBinder getActivityToken()", "public IBinder getWindowContextToken()", "private void checkMode(int mode)", " static void setFilePermissionsFromMode(String name, int mode, int extraPermissions)", "private File makeFilename(File base, String name)", "private File[] ensureExternalDirsExistOrFilter(File[] dirs, boolean tryCreateInProcess)", "public void destroy()", "public void closeSystemDialogs()" ],
  "variableNames" : [ "TAG", "DEBUG", "XATTR_INODE_CACHE", "XATTR_INODE_CODE_CACHE", "sSharedPrefsCache", "mSharedPrefsPaths", "mMainThread", "mPackageInfo", "mClassLoader", "mToken", "mUser", "mContentResolver", "mBasePackageName", "mOpPackageName", "mParams", "mAttributionSource", "mResourcesManager", "mResources", "mDisplay", "mDeviceId", "mForceDisplayOverrideInResources", "mIsConfigurationBasedContext", "mIsExplicitDeviceId", "mFlags", "mOuterContext", "mThemeLock", "mThemeResource", "mTheme", "mPackageManager", "mReceiverRestrictedContext", "mSplitName", "mAutofillClient", "mAutofillOptions", "mContentCaptureOptions", "CONTEXT_TYPE_NON_UI", "CONTEXT_TYPE_DISPLAY_CONTEXT", "CONTEXT_TYPE_ACTIVITY", "CONTEXT_TYPE_WINDOW_CONTEXT", "CONTEXT_TYPE_SYSTEM_OR_SYSTEM_UI", "mContextType", "mOwnsToken", "mDatabasesDirLock", "mDatabasesDir", "mPreferencesDirLock", "mPreferencesDir", "mFilesDirLock", "mFilesDir", "mCratesDirLock", "mCratesDir", "mNoBackupFilesDirLock", "mNoBackupFilesDir", "mCacheDirLock", "mCacheDir", "mCodeCacheDirLock", "mCodeCacheDir", "mMiscDirsLock", "mServiceCache", "STATE_UNINITIALIZED", "STATE_INITIALIZING", "STATE_READY", "STATE_NOT_FOUND", "mServiceInitializationStateArray", "mDeviceIdListenerLock", "mDeviceIdChangeListeners" ]
}