{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/ObjectStack.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "ObjectStack",
  "comment" : "\n * Implement a stack of simple integers.\n *\n * %OPT%\n * This is currently based on ObjectVector, which permits fast acess but pays a\n * heavy recopying penalty if/when its size is increased. If we expect deep\n * stacks, we should consider a version based on ChunkedObjectVector.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Object push(Object i)",
    "returnType" : "Object",
    "comment" : "\n   * Pushes an item onto the top of this stack.\n   *\n   * @param   i   the int to be pushed onto this stack.\n   * @return  the <code>item</code> argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object pop()",
    "returnType" : "Object",
    "comment" : "\n   * Removes the object at the top of this stack and returns that\n   * object as the value of this function.\n   *\n   * @return     The object at the top of this stack.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void quickPop(int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object peek()",
    "returnType" : "Object",
    "comment" : "\n   * Looks at the object at the top of this stack without removing it\n   * from the stack.\n   *\n   * @return     the object at the top of this stack.\n   * @throws  EmptyStackException  if this stack is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object peek(int n)",
    "returnType" : "Object",
    "comment" : "\n   * Looks at the object at the position the stack counting down n items.\n   *\n   * @param n The number of items down, indexed from zero.\n   * @return     the object at n items down.\n   * @throws  EmptyStackException  if this stack is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setTop(Object val)",
    "returnType" : "void",
    "comment" : "\n   * Sets an object at a the top of the statck\n   *\n   *\n   * @param val object to set at the top\n   * @throws  EmptyStackException  if this stack is empty.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean empty()",
    "returnType" : "boolean",
    "comment" : "\n   * Tests if this stack is empty.\n   *\n   * @return  <code>true</code> if this stack is empty;\n   *          <code>false</code> otherwise.\n   * @since   JDK1.0\n   ",
    "links" : [ ]
  }, {
    "name" : "public int search(Object o)",
    "returnType" : "int",
    "comment" : "\n   * Returns where an object is on this stack.\n   *\n   * @param   o   the desired object.\n   * @return  the distance from the top of the stack where the object is]\n   *          located; the return value <code>-1</code> indicates that the\n   *          object is not on the stack.\n   * @since   JDK1.0\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n   * Returns clone of current ObjectStack\n   * \n   * @return clone of current ObjectStack\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Object push(Object i)", "public Object pop()", "public void quickPop(int n)", "public Object peek()", "public Object peek(int n)", "public void setTop(Object val)", "public boolean empty()", "public int search(Object o)", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ ]
}