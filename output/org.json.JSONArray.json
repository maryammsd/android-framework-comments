{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/json/JSONArray.java",
  "packageName" : "org.json",
  "className" : "JSONArray",
  "comment" : "\n * A dense indexed sequence of values. Values may be any mix of\n * {@link JSONObject JSONObjects}, other {@link JSONArray JSONArrays}, Strings,\n * Booleans, Integers, Longs, Doubles, {@code null} or {@link JSONObject#NULL}.\n * Values may not be {@link Double#isNaN() NaNs}, {@link Double#isInfinite()\n * infinities}, or of any type not listed here.\n *\n * <p>{@code JSONArray} has the same type coercion behavior and\n * optional/mandatory accessors as {@link JSONObject}. See that class'\n * documentation for details.\n *\n * <p><strong>Warning:</strong> this class represents null in two incompatible\n * ways: the standard Java {@code null} reference, and the sentinel value {@link\n * JSONObject#NULL}. In particular, {@code get} fails if the requested index\n * holds the null reference, but succeeds if it holds {@code JSONObject.NULL}.\n *\n * <p>Instances of this class are not thread safe. Although this class is\n * nonfinal, it was not designed for inheritance and should not be subclassed.\n * In particular, self-use by overridable methods is not specified. See\n * <i>Effective Java</i> Item 17, \"Design and Document or inheritance or else\n * prohibit it\" for further information.\n ",
  "links" : [ "#isNaN()", "org.json.JSONObject", "#isInfinite()", "org.json.JSONObject#NULL", "org.json.JSONArray" ],
  "variables" : [ {
    "name" : "values",
    "type" : "List<Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(boolean value)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Appends {@code value} to the end of this array.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(double value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Appends {@code value} to the end of this array.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities}.\n     * @return this array.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public JSONArray put(int value)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Appends {@code value} to the end of this array.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(long value)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Appends {@code value} to the end of this array.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(Object value)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Appends {@code value} to the end of this array.\n     *\n     * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double, {@link JSONObject#NULL}, or {@code null}. May\n     *     not be {@link Double#isNaN() NaNs} or {@link Double#isInfinite()\n     *     infinities}. Unsupported values are not permitted and will cause the\n     *     array to be in an inconsistent state.\n     * @return this array.\n     ",
    "links" : [ "#isNaN()", "org.json.JSONObject", "#isInfinite()", "org.json.JSONObject#NULL", "org.json.JSONArray" ]
  }, {
    "name" : " void checkedPut(Object value) throws JSONException",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #put}, with added validity checks.\n     ",
    "links" : [ "#put" ]
  }, {
    "name" : "public JSONArray put(int index, boolean value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Sets the value at {@code index} to {@code value}, null padding this array\n     * to the required length if necessary. If a value already exists at {@code\n     * index}, it will be replaced.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(int index, double value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Sets the value at {@code index} to {@code value}, null padding this array\n     * to the required length if necessary. If a value already exists at {@code\n     * index}, it will be replaced.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities}.\n     * @return this array.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public JSONArray put(int index, int value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Sets the value at {@code index} to {@code value}, null padding this array\n     * to the required length if necessary. If a value already exists at {@code\n     * index}, it will be replaced.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(int index, long value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Sets the value at {@code index} to {@code value}, null padding this array\n     * to the required length if necessary. If a value already exists at {@code\n     * index}, it will be replaced.\n     *\n     * @return this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray put(int index, Object value) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Sets the value at {@code index} to {@code value}, null padding this array\n     * to the required length if necessary. If a value already exists at {@code\n     * index}, it will be replaced.\n     *\n     * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double, {@link JSONObject#NULL}, or {@code null}. May\n     *     not be {@link Double#isNaN() NaNs} or {@link Double#isInfinite()\n     *     infinities}.\n     * @return this array.\n     ",
    "links" : [ "#isNaN()", "org.json.JSONObject", "#isInfinite()", "org.json.JSONObject#NULL", "org.json.JSONArray" ]
  }, {
    "name" : "public boolean isNull(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this array has no value at {@code index}, or if its value\n     * is the {@code null} reference or {@link JSONObject#NULL}.\n     ",
    "links" : [ "org.json.JSONObject#NULL" ]
  }, {
    "name" : "public Object get(int index) throws JSONException",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value at {@code index}.\n     *\n     * @throws JSONException if this array has no value at {@code index}, or if\n     *     that value is the {@code null} reference. This method returns\n     *     normally if the value is {@code JSONObject#NULL}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object opt(int index)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value at {@code index}, or null if the array has no value\n     * at {@code index}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object remove(int index)",
    "returnType" : "Object",
    "comment" : "\n     * Removes and returns the value at {@code index}, or null if the array has no value\n     * at {@code index}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(int index) throws JSONException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a boolean or can\n     * be coerced to a boolean.\n     *\n     * @throws JSONException if the value at {@code index} doesn't exist or\n     *     cannot be coerced to a boolean.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean optBoolean(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a boolean or can\n     * be coerced to a boolean. Returns false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean optBoolean(int index, boolean fallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a boolean or can\n     * be coerced to a boolean. Returns {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(int index) throws JSONException",
    "returnType" : "double",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a double or can\n     * be coerced to a double.\n     *\n     * @throws JSONException if the value at {@code index} doesn't exist or\n     *     cannot be coerced to a double.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double optDouble(int index)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a double or can\n     * be coerced to a double. Returns {@code NaN} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double optDouble(int index, double fallback)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a double or can\n     * be coerced to a double. Returns {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(int index) throws JSONException",
    "returnType" : "int",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is an int or\n     * can be coerced to an int.\n     *\n     * @throws JSONException if the value at {@code index} doesn't exist or\n     *     cannot be coerced to a int.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int optInt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is an int or\n     * can be coerced to an int. Returns 0 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int optInt(int index, int fallback)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is an int or\n     * can be coerced to an int. Returns {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(int index) throws JSONException",
    "returnType" : "long",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a long or\n     * can be coerced to a long.\n     *\n     * @throws JSONException if the value at {@code index} doesn't exist or\n     *     cannot be coerced to a long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long optLong(int index)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a long or\n     * can be coerced to a long. Returns 0 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long optLong(int index, long fallback)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a long or\n     * can be coerced to a long. Returns {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(int index) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Returns the value at {@code index} if it exists, coercing it if\n     * necessary.\n     *\n     * @throws JSONException if no such value exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String optString(int index)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value at {@code index} if it exists, coercing it if\n     * necessary. Returns the empty string if no such value exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String optString(int index, String fallback)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value at {@code index} if it exists, coercing it if\n     * necessary. Returns {@code fallback} if no such value exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray getJSONArray(int index) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a {@code\n     * JSONArray}.\n     *\n     * @throws JSONException if the value doesn't exist or is not a {@code\n     *     JSONArray}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray optJSONArray(int index)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a {@code\n     * JSONArray}. Returns null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject getJSONObject(int index) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a {@code\n     * JSONObject}.\n     *\n     * @throws JSONException if the value doesn't exist or is not a {@code\n     *     JSONObject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject optJSONObject(int index)",
    "returnType" : "JSONObject",
    "comment" : "\n     * Returns the value at {@code index} if it exists and is a {@code\n     * JSONObject}. Returns null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject toJSONObject(JSONArray names) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Returns a new object whose values are the values in this array, and whose\n     * names are the values in {@code names}. Names and values are paired up by\n     * index from 0 through to the shorter array's length. Names that are not\n     * strings will be coerced to strings. This method returns null if either\n     * array is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String join(String separator) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Returns a new string by alternating this array's values with {@code\n     * separator}. This array's string values are quoted and have their special\n     * characters escaped. For example, the array containing the strings '12\"\n     * pizza', 'taco' and 'soda' joined on '+' returns this:\n     * <pre>\"12\\\" pizza\"+\"taco\"+\"soda\"</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Encodes this array as a compact JSON string, such as:\n     * <pre>[94043,90210]</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString(int indentSpaces) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Encodes this array as a human readable JSON string for debugging, such\n     * as:\n     * <pre>\n     * [\n     *     94043,\n     *     90210\n     * ]</pre>\n     *\n     * @param indentSpaces the number of spaces to indent for each level of\n     *     nesting.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeTo(JSONStringer stringer) throws JSONException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int length()", "public JSONArray put(boolean value)", "public JSONArray put(double value) throws JSONException", "public JSONArray put(int value)", "public JSONArray put(long value)", "public JSONArray put(Object value)", " void checkedPut(Object value) throws JSONException", "public JSONArray put(int index, boolean value) throws JSONException", "public JSONArray put(int index, double value) throws JSONException", "public JSONArray put(int index, int value) throws JSONException", "public JSONArray put(int index, long value) throws JSONException", "public JSONArray put(int index, Object value) throws JSONException", "public boolean isNull(int index)", "public Object get(int index) throws JSONException", "public Object opt(int index)", "public Object remove(int index)", "public boolean getBoolean(int index) throws JSONException", "public boolean optBoolean(int index)", "public boolean optBoolean(int index, boolean fallback)", "public double getDouble(int index) throws JSONException", "public double optDouble(int index)", "public double optDouble(int index, double fallback)", "public int getInt(int index) throws JSONException", "public int optInt(int index)", "public int optInt(int index, int fallback)", "public long getLong(int index) throws JSONException", "public long optLong(int index)", "public long optLong(int index, long fallback)", "public String getString(int index) throws JSONException", "public String optString(int index)", "public String optString(int index, String fallback)", "public JSONArray getJSONArray(int index) throws JSONException", "public JSONArray optJSONArray(int index)", "public JSONObject getJSONObject(int index) throws JSONException", "public JSONObject optJSONObject(int index)", "public JSONObject toJSONObject(JSONArray names) throws JSONException", "public String join(String separator) throws JSONException", "public String toString()", "public String toString(int indentSpaces) throws JSONException", " void writeTo(JSONStringer stringer) throws JSONException", "public boolean equals(Object o)", "public int hashCode()" ],
  "variableNames" : [ "values" ]
}