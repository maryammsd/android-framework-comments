{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/StatsEvent.java",
  "packageName" : "android.util",
  "className" : "Buffer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "Buffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverflow",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Buffer obtain()",
    "returnType" : "Buffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte[] getBytes()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMaxSize(final int maxSize, final int numBytesWritten)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasOverflowed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean hasEnoughSpace(final int index, final int numBytes)",
    "returnType" : "boolean",
    "comment" : "\n         * Checks for available space in the byte array.\n         *\n         * @param index starting position in the buffer to start the check.\n         * @param numBytes number of bytes to check from index.\n         * @return true if space is available, false otherwise.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putByte(final int index, final byte value)",
    "returnType" : "int",
    "comment" : "\n         * Writes a byte into the buffer.\n         *\n         * @param index position in the buffer where the byte is written.\n         * @param value the byte to write.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putBoolean(final int index, final boolean value)",
    "returnType" : "int",
    "comment" : "\n         * Writes a boolean into the buffer.\n         *\n         * @param index position in the buffer where the boolean is written.\n         * @param value the boolean to write.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putInt(final int index, final int value)",
    "returnType" : "int",
    "comment" : "\n         * Writes an integer into the buffer.\n         *\n         * @param index position in the buffer where the integer is written.\n         * @param value the integer to write.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putLong(final int index, final long value)",
    "returnType" : "int",
    "comment" : "\n         * Writes a long into the buffer.\n         *\n         * @param index position in the buffer where the long is written.\n         * @param value the long to write.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putFloat(final int index, final float value)",
    "returnType" : "int",
    "comment" : "\n         * Writes a float into the buffer.\n         *\n         * @param index position in the buffer where the float is written.\n         * @param value the float to write.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  }, {
    "name" : "private int putByteArray(final int index, @NonNull final byte[] value)",
    "returnType" : "int",
    "comment" : "\n         * Copies a byte array into the buffer.\n         *\n         * @param index position in the buffer where the byte array is copied.\n         * @param value the byte array to copy.\n         * @return number of bytes written to buffer from this write operation.\n         *",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Buffer obtain()", "private byte[] getBytes()", "private void release()", "private void reset()", "private void setMaxSize(final int maxSize, final int numBytesWritten)", "private boolean hasOverflowed()", "private boolean hasEnoughSpace(final int index, final int numBytes)", "private int putByte(final int index, final byte value)", "private int putBoolean(final int index, final boolean value)", "private int putInt(final int index, final int value)", "private int putLong(final int index, final long value)", "private int putFloat(final int index, final float value)", "private int putByteArray(final int index, @NonNull final byte[] value)" ],
  "variableNames" : [ "sLock", "sPool", "mBytes", "mOverflow", "mMaxSize" ]
}