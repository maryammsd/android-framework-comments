{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/FileTreeWalker.java",
  "packageName" : "java.nio.file",
  "className" : "FileTreeWalker",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "followLinks",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "linkOptions",
    "type" : "LinkOption[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxDepth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stack",
    "type" : "ArrayDeque<DirectoryNode>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private BasicFileAttributes getAttributes(Path file, boolean canUseCached) throws IOException",
    "returnType" : "BasicFileAttributes",
    "comment" : "\n     * Returns the attributes of the given file, taking into account whether\n     * the walk is following sym links is not. The {@code canUseCached}\n     * argument determines whether this method can use cached attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean wouldLoop(Path dir, Object key)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if walking into the given directory would result in a\n     * file system loop/cycle.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Event visit(Path entry, boolean ignoreSecurityException, boolean canUseCached)",
    "returnType" : "Event",
    "comment" : "\n     * Visits the given file, returning the {@code Event} corresponding to that\n     * visit.\n     *\n     * The {@code ignoreSecurityException} parameter determines whether\n     * any SecurityException should be ignored or not. If a SecurityException\n     * is thrown, and is ignored, then this method returns {@code null} to\n     * mean that there is no event corresponding to a visit to the file.\n     *\n     * The {@code canUseCached} parameter determines whether cached attributes\n     * for the file can be used or not.\n     ",
    "links" : [ ]
  }, {
    "name" : " Event walk(Path file)",
    "returnType" : "Event",
    "comment" : "\n     * Start walking from the given file.\n     ",
    "links" : [ ]
  }, {
    "name" : " Event next()",
    "returnType" : "Event",
    "comment" : "\n     * Returns the next Event or {@code null} if there are no more events or\n     * the walker is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void pop()",
    "returnType" : "void",
    "comment" : "\n     * Pops the directory node that is the current top of the stack so that\n     * there are no more events for the directory (including no END_DIRECTORY)\n     * event. This method is a no-op if the stack is empty or the walker is\n     * closed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void skipRemainingSiblings()",
    "returnType" : "void",
    "comment" : "\n     * Skips the remaining entries in the directory at the top of the stack.\n     * This method is a no-op if the stack is empty or the walker is closed.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the walker is open.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes/pops all directories on the stack.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private BasicFileAttributes getAttributes(Path file, boolean canUseCached) throws IOException", "private boolean wouldLoop(Path dir, Object key)", "private Event visit(Path entry, boolean ignoreSecurityException, boolean canUseCached)", " Event walk(Path file)", " Event next()", " void pop()", " void skipRemainingSiblings()", " boolean isOpen()", "public void close()" ],
  "variableNames" : [ "followLinks", "linkOptions", "maxDepth", "stack", "closed" ]
}