{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/ICUResourceBundleReader.java",
  "packageName" : "android.icu.impl",
  "className" : "ResourceCache",
  "comment" : "\n     * Cache of some of one resource bundle's resources.\n     * Avoids creating multiple Java objects for the same resource items,\n     * including multiple copies of their contents.\n     *\n     * <p>Mutable objects must not be cached and then returned to the caller\n     * because the cache must not be writable via the returned reference.\n     *\n     * <p>Resources are mapped by their resource integers.\n     * Empty resources with offset 0 cannot be mapped.\n     * Integers need not and should not be cached.\n     * Multiple .res items may share resource offsets (genrb eliminates some duplicates).\n     *\n     * <p>This cache uses int[] and Object[] arrays to minimize object creation\n     * and avoid auto-boxing.\n     *\n     * <p>Large resource objects are usually stored in SoftReferences.\n     *\n     * <p>For few resources, a small table is used with binary search.\n     * When more resources are cached, then the data structure changes to be faster\n     * but also use more memory.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SIMPLE_LENGTH",
    "type" : "int",
    "comment" : " Number of items to be stored in a simple array with binary search and insertion sort.",
    "links" : [ ]
  }, {
    "name" : "ROOT_BITS",
    "type" : "int",
    "comment" : " then switch to a trie-like tree of levels with different array lengths.",
    "links" : [ ]
  }, {
    "name" : "NEXT_BITS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "keys",
    "type" : "int[]",
    "comment" : " Simple table, used when length >= 0.",
    "links" : [ ]
  }, {
    "name" : "values",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxOffsetBits",
    "type" : "int",
    "comment" : " Trie-like tree of levels, used when length < 0.",
    "links" : [ ]
  }, {
    "name" : "levelBitsList",
    "type" : "int",
    "comment" : "\n         * Number of bits in each level, each stored in a nibble.\n         ",
    "links" : [ ]
  }, {
    "name" : "rootLevel",
    "type" : "Level",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean storeDirectly(int size)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final Object putIfCleared(Object[] values, int index, Object item, int size)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int makeKey(int res)",
    "returnType" : "int",
    "comment" : "\n         * Turns a resource integer (with unused bits in the middle)\n         * into a key with fewer bits (at most keyBits).\n         ",
    "links" : [ ]
  }, {
    "name" : "private int findSimple(int key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized Object get(int res)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " synchronized Object putIfAbsent(int res, Object item, int size)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean storeDirectly(int size)", "private static final Object putIfCleared(Object[] values, int index, Object item, int size)", "private int makeKey(int res)", "private int findSimple(int key)", " synchronized Object get(int res)", " synchronized Object putIfAbsent(int res, Object item, int size)" ],
  "variableNames" : [ "SIMPLE_LENGTH", "ROOT_BITS", "NEXT_BITS", "keys", "values", "length", "maxOffsetBits", "levelBitsList", "rootLevel" ]
}