{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/functions/ServiceCallHelper.java",
  "packageName" : "android.app.appsearch.functions",
  "className" : "ServiceCallHelper",
  "comment" : "\n * Defines a contract for establishing temporary connections to services and executing operations\n * within a specified timeout. Implementations of this interface provide mechanisms to ensure that\n * services are properly unbound after the operation completes or a timeout occurs.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " boolean runServiceCall(@NonNull Intent intent, int bindFlags, long timeoutInMillis, @NonNull UserHandle userHandle, @NonNull RunServiceCallCallback<T> callback)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates service binding and executes a provided method when the service connects. Unbinds\n     * the service after execution or upon timeout. Returns the result of the bindService API.\n     *\n     * <p>When the service connection was made successfully, it's the caller responsibility to\n     * report the usage is completed and can be unbound by calling {@link\n     * ServiceUsageCompleteListener#onCompleted()}.\n     *\n     * <p>This method includes a timeout mechanism to prevent the system from being stuck in a state\n     * where a service is bound indefinitely (for example, if the binder method never returns). This\n     * helps ensure that the calling app does not remain alive unnecessarily.\n     *\n     * @param intent An Intent object that describes the service that should be bound.\n     * @param bindFlags Flags used to control the binding process See {@link\n     *     android.content.Context#bindService}.\n     * @param timeoutInMillis The maximum time in milliseconds to wait for the service connection.\n     * @param userHandle The UserHandle of the user for which the service should be bound.\n     * @param callback A callback to be invoked for various events. See {@link\n     *     RunServiceCallCallback}.\n     ",
    "links" : [ "#onCompleted()", "android.content.Context#bindService", "RunServiceCallCallback" ]
  } ],
  "methodNames" : [ " boolean runServiceCall(@NonNull Intent intent, int bindFlags, long timeoutInMillis, @NonNull UserHandle userHandle, @NonNull RunServiceCallCallback<T> callback)" ],
  "variableNames" : [ ]
}