{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/impl/CameraMetadataNative.java",
  "packageName" : "android.hardware.camera2.impl",
  "className" : "CameraMetadataNative",
  "comment" : "\n * Implementation of camera metadata marshal/unmarshal across Binder to\n * the camera service\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NATIVE_JPEG_FORMAT",
    "type" : "int",
    "comment" : " this should be in sync with HAL_PIXEL_FORMAT_BLOB defined in graphics.h",
    "links" : [ ]
  }, {
    "name" : "CELLID_PROCESS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_PROCESS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FACE_LANDMARK_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<CameraMetadataNative>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_BYTE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT32",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FLOAT",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INT64",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOUBLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_RATIONAL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NUM_TYPES",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sGetCommandMap",
    "type" : "HashMap<Key<?>, GetCommand>",
    "comment" : " metadata.",
    "links" : [ ]
  }, {
    "name" : "sSetCommandMap",
    "type" : "HashMap<Key<?>, SetCommand>",
    "comment" : " metadata.",
    "links" : [ ]
  }, {
    "name" : "mCameraId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasMandatoryConcurrentStreams",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplaySize",
    "type" : "Size",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadataPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static String translateLocationProviderToProcess(final String provider)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String translateProcessToLocationProvider(final String process)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CameraMetadataNative move(CameraMetadataNative other)",
    "returnType" : "CameraMetadataNative",
    "comment" : "\n     * Move the contents from {@code other} into a new camera metadata instance.</p>\n     *\n     * <p>After this call, {@code other} will become empty.</p>\n     *\n     * @param other the previous metadata instance which will get pilfered\n     * @return a new metadata instance with the values from {@code other} moved into it\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T get(CameraCharacteristics.Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(CaptureResult.Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(CaptureRequest.Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * Look-up a metadata field value by its key.\n     *\n     * @param key a non-{@code null} key instance\n     * @return the field corresponding to the {@code key}, or {@code null} if no value was set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setupGlobalVendorTagDescriptor() throws ServiceSpecificException",
    "returnType" : "void",
    "comment" : "\n     * Set the global client-side vendor tag descriptor to allow use of vendor\n     * tags in camera applications.\n     *\n     * @throws ServiceSpecificException\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetupGlobalVendorTagDescriptor()",
    "returnType" : "int",
    "comment" : "\n     * Set the global client-side vendor tag descriptor to allow use of vendor\n     * tags in camera applications.\n     *\n     * @return int An error code corresponding to one of the\n     * {@link ICameraService} error constants, or 0 on success.\n     ",
    "links" : [ "ICameraService" ]
  }, {
    "name" : "public void set(Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "\n     * Set a camera metadata field to a value. The field definitions can be\n     * found in {@link CameraCharacteristics}, {@link CaptureResult}, and\n     * {@link CaptureRequest}.\n     *\n     * @param key The metadata field to write.\n     * @param value The value to set the field to, which must be of a matching\n     * type to the key.\n     ",
    "links" : [ "CameraCharacteristics", "CaptureResult", "CaptureRequest" ]
  }, {
    "name" : "public void set(CaptureRequest.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(CaptureResult.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(CameraCharacteristics.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private T getBase(CameraCharacteristics.Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private T getBase(CaptureResult.Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private T getBase(CaptureRequest.Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private T getBase(Key<T> key)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int[] getAvailableFormats()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean setFaces(Face[] faces)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Face[] getFaces()",
    "returnType" : "Face[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Rect[] getFaceRectangles()",
    "returnType" : "Rect[]",
    "comment" : " that conversion here for just the faces.",
    "links" : [ ]
  }, {
    "name" : "private LensShadingMap getLensShadingMap()",
    "returnType" : "LensShadingMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Location getGpsLocation()",
    "returnType" : "Location",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean setGpsLocation(Location l)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseRecommendedConfigurations(RecommendedStreamConfiguration[] configurations, StreamConfigurationMap fullMap, boolean isDepth, ArrayList<ArrayList<StreamConfiguration>> streamConfigList, ArrayList<ArrayList<StreamConfigurationDuration>> streamDurationList, ArrayList<ArrayList<StreamConfigurationDuration>> streamStallList, boolean[] supportsPrivate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initializeStreamConfigurationData(ArrayList<StreamConfiguration> sc, ArrayList<StreamConfigurationDuration> scd, ArrayList<StreamConfigurationDuration> scs, StreamConfigurationData scData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<RecommendedStreamConfigurationMap> getRecommendedStreamConfigurations()",
    "returnType" : "ArrayList<RecommendedStreamConfigurationMap>",
    "comment" : "\n     * Retrieve the list of recommended stream configurations.\n     *\n     * @return A list of recommended stream configuration maps for each common use case or null\n     *         in case the recommended stream configurations are invalid or incomplete.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isBurstSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MandatoryStreamCombination[] getMandatoryStreamCombinationsHelper(boolean getConcurrent)",
    "returnType" : "MandatoryStreamCombination[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MandatoryStreamCombination[] getMandatoryConcurrentStreamCombinations()",
    "returnType" : "MandatoryStreamCombination[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MandatoryStreamCombination[] getMandatoryStreamCombinations()",
    "returnType" : "MandatoryStreamCombination[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StreamConfigurationMap getStreamConfigurationMap()",
    "returnType" : "StreamConfigurationMap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Integer getMaxRegions(Key<T> key)",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Integer getMaxNumOutputs(Key<T> key)",
    "returnType" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private TonemapCurve getTonemapCurve()",
    "returnType" : "TonemapCurve",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private OisSample[] getOisSamples()",
    "returnType" : "OisSample[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Capability[] getExtendedSceneModeCapabilities()",
    "returnType" : "Capability[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBase(CameraCharacteristics.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBase(CaptureResult.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBase(CaptureRequest.Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setBase(Key<T> key, T value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean setAvailableFormats(int[] value)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean setFaceRectangles(Rect[] faceRects)",
    "returnType" : "boolean",
    "comment" : "\n     * Convert Face Rectangles from managed side to native side as they have different definitions.\n     * <p>\n     * Managed side face rectangles are defined as: left, top, width, height.\n     * Native side face rectangles are defined as: left, top, right, bottom.\n     * The input face rectangle need to be converted to native side definition when set is called.\n     * </p>\n     *\n     * @param faceRects Input face rectangles.\n     * @return true if face rectangles can be set successfully. Otherwise, Let the caller\n     *             (setBase) to handle it appropriately.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setTonemapCurve(TonemapCurve tc)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCameraId(int cameraId)",
    "returnType" : "void",
    "comment" : "\n     * Set the current camera Id.\n     *\n     * @param cameraId Current camera id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHasMandatoryConcurrentStreams(boolean hasMandatoryConcurrentStreams)",
    "returnType" : "void",
    "comment" : "\n     * Set the current camera Id.\n     *\n     * @param hasMandatoryConcurrentStreams whether the metadata advertises mandatory concurrent\n     *        streams.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplaySize(Size displaySize)",
    "returnType" : "void",
    "comment" : "\n     * Set the current display size.\n     *\n     * @param displaySize The current display size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAllocate()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeAllocateCopy(long ptr) throws NullPointerException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeWriteToParcel(Parcel dest, long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeReadFromParcel(Parcel source, long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeSwap(long ptr, long otherPtr) throws NullPointerException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeClose(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized boolean nativeIsEmpty(long ptr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized int nativeGetEntryCount(long ptr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized byte[] nativeReadValues(int tag, long ptr)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeWriteValues(int tag, byte[] src, long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized void nativeDump(long ptr) throws IOException",
    "returnType" : "void",
    "comment" : " dump to LOGD",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized ArrayList nativeGetAllVendorKeys(long ptr, Class keyClass)",
    "returnType" : "ArrayList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized int nativeGetTagFromKeyLocal(long ptr, String keyName) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native synchronized int nativeGetTypeFromTagLocal(long ptr, int tag) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetTagFromKey(String keyName, long vendorId) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetTypeFromTag(int tag, long vendorId) throws IllegalArgumentException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void swap(CameraMetadataNative other)",
    "returnType" : "void",
    "comment" : "\n     * <p>Perform a 0-copy swap of the internal metadata with another object.</p>\n     *\n     * <p>Useful to convert a CameraMetadata into e.g. a CaptureRequest.</p>\n     *\n     * @param other Metadata to swap with\n     * @throws NullPointerException if other was null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getEntryCount()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Does this metadata contain at least 1 entry?\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMetadataPtr()",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the pointer to the native shared_ptr<CameraMetadata> as a Java long.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<K> getAllVendorKeys(Class<K> keyClass)",
    "returnType" : "ArrayList<K>",
    "comment" : "\n     * Return a list containing keys of the given key class for all defined vendor tags.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTag(String key)",
    "returnType" : "int",
    "comment" : "\n     * Convert a key string into the equivalent native tag.\n     *\n     * @throws IllegalArgumentException if the key was not recognized\n     * @throws NullPointerException if the key was null\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTag(String key, long vendorId)",
    "returnType" : "int",
    "comment" : "\n     * Convert a key string into the equivalent native tag.\n     *\n     * @throws IllegalArgumentException if the key was not recognized\n     * @throws NullPointerException if the key was null\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getNativeType(int tag, long vendorId)",
    "returnType" : "int",
    "comment" : "\n     * Get the underlying native type for a tag.\n     *\n     * @param tag An integer tag, see e.g. {@link #getTag}\n     * @param vendorId A vendor tag provider id\n     * @return An int enum for the metadata type, see e.g. {@link #TYPE_BYTE}\n     *\n     * @hide\n     ",
    "links" : [ "#getTag", "#TYPE_BYTE" ]
  }, {
    "name" : "public void writeValues(int tag, byte[] src)",
    "returnType" : "void",
    "comment" : "\n     * <p>Updates the existing entry for tag with the new bytes pointed by src, erasing\n     * the entry if src was null.</p>\n     *\n     * <p>An empty array can be passed in to update the entry to 0 elements.</p>\n     *\n     * @param tag An integer tag, see e.g. {@link #getTag}\n     * @param src An array of bytes, or null to erase the entry\n     *\n     * @hide\n     ",
    "links" : [ "#getTag" ]
  }, {
    "name" : "public byte[] readValues(int tag)",
    "returnType" : "byte[]",
    "comment" : "\n     * <p>Returns a byte[] of data corresponding to this tag. Use a wrapped bytebuffer to unserialize\n     * the data properly.</p>\n     *\n     * <p>An empty array can be returned to denote an existing entry with 0 elements.</p>\n     *\n     * @param tag An integer tag, see e.g. {@link #getTag}\n     *\n     * @return {@code null} if there were 0 entries for this tag, a byte[] otherwise.\n     * @hide\n     ",
    "links" : [ "#getTag" ]
  }, {
    "name" : "public void dumpToLog()",
    "returnType" : "void",
    "comment" : "\n     * Dumps the native metadata contents to logcat.\n     *\n     * <p>Visibility for testing/debugging only. The results will not\n     * include any synthesized keys, as they are invisible to the native layer.</p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Marshaler<T> getMarshalerForKey(Key<T> key, int nativeType)",
    "returnType" : "Marshaler<T>",
    "comment" : "\n     * Get the marshaler compatible with the {@code key} and type {@code T}.\n     *\n     * @throws UnsupportedOperationException\n     *          if the native/managed type combination for {@code key} is not supported\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void registerAllMarshalers()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean areValuesAllNull(Object... objs)",
    "returnType" : "boolean",
    "comment" : " Check if input arguments are all {@code null}.\n     *\n     * @param objs Input arguments for null check\n     * @return {@code true} if input arguments are all {@code null}, otherwise {@code false}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "NATIVE_JPEG_FORMAT", "CELLID_PROCESS", "GPS_PROCESS", "FACE_LANDMARK_SIZE", "CREATOR", "TYPE_BYTE", "TYPE_INT32", "TYPE_FLOAT", "TYPE_INT64", "TYPE_DOUBLE", "TYPE_RATIONAL", "NUM_TYPES", "sGetCommandMap", "sSetCommandMap", "mCameraId", "mHasMandatoryConcurrentStreams", "mDisplaySize", "mMetadataPtr" ],
  "methodNames" : [ "private static String translateLocationProviderToProcess(final String provider)", "private static String translateProcessToLocationProvider(final String process)", "public static CameraMetadataNative move(CameraMetadataNative other)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public T get(CameraCharacteristics.Key<T> key)", "public T get(CaptureResult.Key<T> key)", "public T get(CaptureRequest.Key<T> key)", "public T get(Key<T> key)", "public void readFromParcel(Parcel in)", "public static void setupGlobalVendorTagDescriptor() throws ServiceSpecificException", "private static native int nativeSetupGlobalVendorTagDescriptor()", "public void set(Key<T> key, T value)", "public void set(CaptureRequest.Key<T> key, T value)", "public void set(CaptureResult.Key<T> key, T value)", "public void set(CameraCharacteristics.Key<T> key, T value)", "private void close()", "private T getBase(CameraCharacteristics.Key<T> key)", "private T getBase(CaptureResult.Key<T> key)", "private T getBase(CaptureRequest.Key<T> key)", "private T getBase(Key<T> key)", "private int[] getAvailableFormats()", "private boolean setFaces(Face[] faces)", "private Face[] getFaces()", "private Rect[] getFaceRectangles()", "private LensShadingMap getLensShadingMap()", "private Location getGpsLocation()", "private boolean setGpsLocation(Location l)", "private void parseRecommendedConfigurations(RecommendedStreamConfiguration[] configurations, StreamConfigurationMap fullMap, boolean isDepth, ArrayList<ArrayList<StreamConfiguration>> streamConfigList, ArrayList<ArrayList<StreamConfigurationDuration>> streamDurationList, ArrayList<ArrayList<StreamConfigurationDuration>> streamStallList, boolean[] supportsPrivate)", "public void initializeStreamConfigurationData(ArrayList<StreamConfiguration> sc, ArrayList<StreamConfigurationDuration> scd, ArrayList<StreamConfigurationDuration> scs, StreamConfigurationData scData)", "public ArrayList<RecommendedStreamConfigurationMap> getRecommendedStreamConfigurations()", "private boolean isBurstSupported()", "private MandatoryStreamCombination[] getMandatoryStreamCombinationsHelper(boolean getConcurrent)", "private MandatoryStreamCombination[] getMandatoryConcurrentStreamCombinations()", "private MandatoryStreamCombination[] getMandatoryStreamCombinations()", "private StreamConfigurationMap getStreamConfigurationMap()", "private Integer getMaxRegions(Key<T> key)", "private Integer getMaxNumOutputs(Key<T> key)", "private TonemapCurve getTonemapCurve()", "private OisSample[] getOisSamples()", "private Capability[] getExtendedSceneModeCapabilities()", "private void setBase(CameraCharacteristics.Key<T> key, T value)", "private void setBase(CaptureResult.Key<T> key, T value)", "private void setBase(CaptureRequest.Key<T> key, T value)", "private void setBase(Key<T> key, T value)", "private boolean setAvailableFormats(int[] value)", "private boolean setFaceRectangles(Rect[] faceRects)", "private boolean setTonemapCurve(TonemapCurve tc)", "public void setCameraId(int cameraId)", "public void setHasMandatoryConcurrentStreams(boolean hasMandatoryConcurrentStreams)", "public void setDisplaySize(Size displaySize)", "private static native long nativeAllocate()", "private static native long nativeAllocateCopy(long ptr) throws NullPointerException", "private static native synchronized void nativeWriteToParcel(Parcel dest, long ptr)", "private static native synchronized void nativeReadFromParcel(Parcel source, long ptr)", "private static native synchronized void nativeSwap(long ptr, long otherPtr) throws NullPointerException", "private static native synchronized void nativeClose(long ptr)", "private static native synchronized boolean nativeIsEmpty(long ptr)", "private static native synchronized int nativeGetEntryCount(long ptr)", "private static native synchronized byte[] nativeReadValues(int tag, long ptr)", "private static native synchronized void nativeWriteValues(int tag, byte[] src, long ptr)", "private static native synchronized void nativeDump(long ptr) throws IOException", "private static native synchronized ArrayList nativeGetAllVendorKeys(long ptr, Class keyClass)", "private static native synchronized int nativeGetTagFromKeyLocal(long ptr, String keyName) throws IllegalArgumentException", "private static native synchronized int nativeGetTypeFromTagLocal(long ptr, int tag) throws IllegalArgumentException", "private static native int nativeGetTagFromKey(String keyName, long vendorId) throws IllegalArgumentException", "private static native int nativeGetTypeFromTag(int tag, long vendorId) throws IllegalArgumentException", "public void swap(CameraMetadataNative other)", "public int getEntryCount()", "public boolean isEmpty()", "public long getMetadataPtr()", "public ArrayList<K> getAllVendorKeys(Class<K> keyClass)", "public static int getTag(String key)", "public static int getTag(String key, long vendorId)", "public static int getNativeType(int tag, long vendorId)", "public void writeValues(int tag, byte[] src)", "public byte[] readValues(int tag)", "public void dumpToLog()", "protected void finalize() throws Throwable", "private static Marshaler<T> getMarshalerForKey(Key<T> key, int nativeType)", "private static void registerAllMarshalers()", "private static boolean areValuesAllNull(Object... objs)" ]
}