{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/hdmi/HdmiTimerRecordSources.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiTimerRecordSources",
  "comment" : "\n * Container for timer record source used for timer recording. Timer source consists of two parts,\n * timer info and record source.\n * <p>\n * Timer info contains all timing information used for recording. It consists of the following\n * values.\n * <ul>\n * <li>[Day of Month]\n * <li>[Month of Year]\n * <li>[Start Time]\n * <li>[Duration]\n * <li>[Recording Sequence]\n * </ul>\n * <p>\n * Record source containers all program information used for recording.\n * For more details, look at {@link HdmiRecordSources}.\n * <p>\n * Usage\n * <pre>\n * TimeOrDuration startTime = HdmiTimerRecordSources.ofTime(18, 00);  // 6PM.\n * TimeOrDuration duration = HdmiTimerRecordSource.ofDuration(1, 00);  // 1 hour duration.\n * // For 1 hour from 6PM, August 10th every SaturDay and Sunday.\n * TimerInfo timerInfo = HdmiTimerRecordSource.timerInfoOf(10, 8, starTime, duration,\n *            HdmiTimerRecordSource.RECORDING_SEQUENCE_REPEAT_SATURDAY |\n *            HdmiTimerRecordSource.RECORDING_SEQUENCE_REPEAT_SUNDAY);\n * // create digital source.\n * DigitalServiceSource recordSource = HdmiRecordSource.ofDvb(...);\n * TimerRecordSource source = ofDigitalSource(timerInfo, recordSource);\n * </pre>\n *\n * @hide\n ",
  "links" : [ "android.hardware.hdmi.HdmiRecordSources" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_ONCE_ONLY",
    "type" : "int",
    "comment" : "\n     * Fields for recording sequence.\n     * The following can be merged by OR(|) operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_SUNDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_MONDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_TUESDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_WEDNESDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_THURSDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_FRIDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_SATUREDAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RECORDING_SEQUENCE_REPEAT_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG",
    "type" : "int",
    "comment" : "\n     * External source specifier types.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TimerRecordSource ofDigitalSource(TimerInfo timerInfo, DigitalServiceSource source)",
    "returnType" : "TimerRecordSource",
    "comment" : "\n     * Creates {@link TimerRecordSource} for digital source which is used for &lt;Set Digital\n     * Timer&gt;.\n     *\n     * @param timerInfo timer info used for timer recording\n     * @param source digital source used for timer recording\n     * @return {@link TimerRecordSource}\n     * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null\n     ",
    "links" : [ "TimerRecordSource" ]
  }, {
    "name" : "public static TimerRecordSource ofAnalogueSource(TimerInfo timerInfo, AnalogueServiceSource source)",
    "returnType" : "TimerRecordSource",
    "comment" : "\n     * Creates {@link TimerRecordSource} for analogue source which is used for &lt;Set Analogue\n     * Timer&gt;.\n     *\n     * @param timerInfo timer info used for timer recording\n     * @param source digital source used for timer recording\n     * @return {@link TimerRecordSource}\n     * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null\n     ",
    "links" : [ "TimerRecordSource" ]
  }, {
    "name" : "public static TimerRecordSource ofExternalPlug(TimerInfo timerInfo, ExternalPlugData source)",
    "returnType" : "TimerRecordSource",
    "comment" : "\n     * Creates {@link TimerRecordSource} for external plug which is used for &lt;Set External\n     * Timer&gt;.\n     *\n     * @param timerInfo timer info used for timer recording\n     * @param source digital source used for timer recording\n     * @return {@link TimerRecordSource}\n     * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null\n     ",
    "links" : [ "TimerRecordSource" ]
  }, {
    "name" : "public static TimerRecordSource ofExternalPhysicalAddress(TimerInfo timerInfo, ExternalPhysicalAddress source)",
    "returnType" : "TimerRecordSource",
    "comment" : "\n     * Creates {@link TimerRecordSource} for external physical address which is used for &lt;Set\n     * External Timer&gt;.\n     *\n     * @param timerInfo timer info used for timer recording\n     * @param source digital source used for timer recording\n     * @return {@link TimerRecordSource}\n     * @throws IllegalArgumentException if {@code timerInfo} or {@code source} is null\n     ",
    "links" : [ "TimerRecordSource" ]
  }, {
    "name" : "private static void checkTimerRecordSourceInputs(TimerInfo timerInfo, RecordSource source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Time timeOf(int hour, int minute)",
    "returnType" : "Time",
    "comment" : "\n     * Creates {@link Duration} for time value.\n     *\n     * @param hour hour in range of [0, 23]\n     * @param minute minute in range of [0, 60]\n     * @return {@link Duration}\n     * @throws IllegalArgumentException if hour or minute is out of range\n     ",
    "links" : [ "Duration" ]
  }, {
    "name" : "private static void checkTimeValue(int hour, int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Duration durationOf(int hour, int minute)",
    "returnType" : "Duration",
    "comment" : "\n     * Creates {@link Duration} for duration value.\n     *\n     * @param hour hour in range of [0, 99]\n     * @param minute minute in range of [0, 59]\n     * @return {@link Duration}\n     * @throws IllegalArgumentException if hour or minute is out of range\n     ",
    "links" : [ "Duration" ]
  }, {
    "name" : "private static void checkDurationValue(int hour, int minute)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static TimerInfo timerInfoOf(int dayOfMonth, int monthOfYear, Time startTime, Duration duration, int recordingSequence)",
    "returnType" : "TimerInfo",
    "comment" : "\n     * Creates {@link TimerInfo} with the given information.\n     *\n     * @param dayOfMonth day of month\n     * @param monthOfYear month of year\n     * @param startTime start time in {@link Time}\n     * @param duration duration in {@link Duration}\n     * @param recordingSequence recording sequence. Use RECORDING_SEQUENCE_REPEAT_ONCE_ONLY for no\n     *            repeat. Otherwise use combination of {@link #RECORDING_SEQUENCE_REPEAT_SUNDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_MONDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_TUESDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_WEDNESDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_THURSDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_FRIDAY},\n     *            {@link #RECORDING_SEQUENCE_REPEAT_SATUREDAY}.\n     * @return {@link TimerInfo}.\n     * @throws IllegalArgumentException if input value is invalid\n     ",
    "links" : [ "#RECORDING_SEQUENCE_REPEAT_FRIDAY", "#RECORDING_SEQUENCE_REPEAT_SATUREDAY", "#RECORDING_SEQUENCE_REPEAT_SUNDAY", "#RECORDING_SEQUENCE_REPEAT_WEDNESDAY", "#RECORDING_SEQUENCE_REPEAT_MONDAY", "#RECORDING_SEQUENCE_REPEAT_TUESDAY", "TimerInfo", "Time", "Duration", "#RECORDING_SEQUENCE_REPEAT_THURSDAY" ]
  }, {
    "name" : "public static boolean checkTimerRecordSource(int sourcetype, byte[] recordSource)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks the byte array of timer record source.\n     * @param sourcetype\n     * @param recordSource\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static TimerRecordSource ofDigitalSource(TimerInfo timerInfo, DigitalServiceSource source)", "public static TimerRecordSource ofAnalogueSource(TimerInfo timerInfo, AnalogueServiceSource source)", "public static TimerRecordSource ofExternalPlug(TimerInfo timerInfo, ExternalPlugData source)", "public static TimerRecordSource ofExternalPhysicalAddress(TimerInfo timerInfo, ExternalPhysicalAddress source)", "private static void checkTimerRecordSourceInputs(TimerInfo timerInfo, RecordSource source)", "public static Time timeOf(int hour, int minute)", "private static void checkTimeValue(int hour, int minute)", "public static Duration durationOf(int hour, int minute)", "private static void checkDurationValue(int hour, int minute)", "public static TimerInfo timerInfoOf(int dayOfMonth, int monthOfYear, Time startTime, Duration duration, int recordingSequence)", "public static boolean checkTimerRecordSource(int sourcetype, byte[] recordSource)" ],
  "variableNames" : [ "TAG", "RECORDING_SEQUENCE_REPEAT_ONCE_ONLY", "RECORDING_SEQUENCE_REPEAT_SUNDAY", "RECORDING_SEQUENCE_REPEAT_MONDAY", "RECORDING_SEQUENCE_REPEAT_TUESDAY", "RECORDING_SEQUENCE_REPEAT_WEDNESDAY", "RECORDING_SEQUENCE_REPEAT_THURSDAY", "RECORDING_SEQUENCE_REPEAT_FRIDAY", "RECORDING_SEQUENCE_REPEAT_SATUREDAY", "RECORDING_SEQUENCE_REPEAT_MASK", "EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG", "EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS" ]
}