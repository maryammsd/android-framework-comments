{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CurrencyDisplayNames.java",
  "packageName" : "android.icu.text",
  "className" : "CurrencyDisplayNames",
  "comment" : "\n * Returns currency names localized for a locale.\n *\n * This class is not intended for public subclassing.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static CurrencyDisplayNames getInstance(ULocale locale)",
    "returnType" : "CurrencyDisplayNames",
    "comment" : "\n     * Return an instance of CurrencyDisplayNames that provides information\n     * localized for display in the provided locale.  If there is no data for the\n     * provided locale, this falls back to the current default locale; if there\n     * is no data for that either, it falls back to the root locale.  Substitute\n     * values are returned from APIs when there is no data for the requested ISO\n     * code.\n     *\n     * @param locale the locale into which to localize the names\n     * @return a CurrencyDisplayNames\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CurrencyDisplayNames getInstance(Locale locale)",
    "returnType" : "CurrencyDisplayNames",
    "comment" : "\n     * Return an instance of CurrencyDisplayNames that provides information\n     * localized for display in the provided locale.  If there is no data for the\n     * provided locale, this falls back to the current default locale; if there\n     * is no data for that either, it falls back to the root locale.  Substitute\n     * values are returned from APIs when there is no data for the requested ISO\n     * code.\n     *\n     * @param locale the locale into which to localize the names\n     * @return a CurrencyDisplayNames\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CurrencyDisplayNames getInstance(ULocale locale, boolean noSubstitute)",
    "returnType" : "CurrencyDisplayNames",
    "comment" : "\n     * Return an instance of CurrencyDisplayNames that provides information\n     * localized for display in the provided locale.  If noSubstitute is false,\n     * this behaves like {@link #getInstance(ULocale)}.  Otherwise, 1) if there\n     * is no supporting data for the locale at all, there is no fallback through\n     * the default locale or root, and null is returned, and 2) if there is data\n     * for the locale, but not data for the requested ISO code, null is returned\n     * from those APIs instead of a substitute value.\n     *\n     * @param locale the locale into which to localize the names\n     * @param noSubstitute if true, do not return substitute values.\n     * @return a CurrencyDisplayNames\n     ",
    "links" : [ "#getInstance(ULocale)" ]
  }, {
    "name" : "public static CurrencyDisplayNames getInstance(Locale locale, boolean noSubstitute)",
    "returnType" : "CurrencyDisplayNames",
    "comment" : "\n     * Return an instance of CurrencyDisplayNames that provides information\n     * localized for display in the provided locale.  If noSubstitute is false,\n     * this behaves like {@link #getInstance(Locale)}.  Otherwise, 1) if there\n     * is no supporting data for the locale at all, there is no fallback through\n     * the default locale or root, and null is returned, and 2) if there is data\n     * for the locale, but not data for the requested ISO code, null is returned\n     * from those APIs instead of a substitute value.\n     *\n     * @param locale the {@link java.util.Locale} into which to localize the names\n     * @param noSubstitute if true, do not return substitute values.\n     * @return a CurrencyDisplayNames\n     ",
    "links" : [ "java.util.Locale", "#getInstance(Locale)" ]
  }, {
    "name" : "public static boolean hasData()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if currency display name data is available.\n     * @return true if currency display name data is available\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract ULocale getULocale()",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the locale used to determine how to translate the currency names.\n     * This is not necessarily the same locale passed to {@link #getInstance(ULocale)}.\n     * @return the display locale\n     ",
    "links" : [ "#getInstance(ULocale)" ]
  }, {
    "name" : "public abstract String getSymbol(String isoCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the symbol for the currency with the provided ISO code.\n     * <p>\n     * If there is no data for this symbol, substitutes isoCode,\n     * or returns null if noSubstitute was set in the factory method.\n     *\n     * @param isoCode the three-letter ISO code.\n     * @return the symbol.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getNarrowSymbol(String isoCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the narrow symbol for the currency with the provided ISO code.\n     * <p>\n     * The narrow currency symbol is similar to the regular currency symbol,\n     * but it always takes the shortest form;\n     * for example, \"$\" instead of \"US$\" for USD in en-CA.\n     * <p>\n     * If there is no data for this symbol, substitutes the default symbol,\n     * or returns null if noSubstitute was set in the factory method.\n     *\n     * @param isoCode the three-letter ISO code.\n     * @return the narrow symbol.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getFormalSymbol(String isoCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the formal symbol for the currency with the provided ISO code.\n     * <p>\n     * The formal currency symbol is similar to the regular currency symbol,\n     * but it always takes the form used in formal settings such as banking;\n     * for example, \"NT$\" instead of \"$\" for TWD in zh-TW.\n     * <p>\n     * If there is no data for this symbol, substitutes the default symbol,\n     * or returns null if noSubstitute was set in the factory method.\n     *\n     * @param isoCode the three-letter ISO code.\n     * @return the formal symbol.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getVariantSymbol(String isoCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the variant symbol for the currency with the provided ISO code.\n     * <p>\n     * The variant symbol for a currency is an alternative symbol that is not\n     * necessarily as widely used as the regular symbol.\n     * <p>\n     * If there is no data for variant symbol, substitutes the default symbol,\n     * or returns null if noSubstitute was set in the factory method.\n     *\n     * @param isoCode the three-letter ISO code.\n     * @return the variant symbol.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getName(String isoCode)",
    "returnType" : "String",
    "comment" : "\n     * Returns the 'long name' for the currency with the provided ISO code.\n     * If there is no data for the ISO code, substitutes isoCode, or returns null\n     * if noSubstitute was set in the factory method.\n     *\n     * @param isoCode the three-letter ISO code\n     * @return the display name\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getPluralName(String isoCode, String pluralKey)",
    "returnType" : "String",
    "comment" : "\n     * Returns a 'plural name' for the currency with the provided ISO code corresponding to\n     * the pluralKey.  If there is no data for the ISO code, substitutes isoCode or\n     * returns null.  If there is data for the ISO code but no data for the plural key,\n     * substitutes the 'other' value (and failing that the isoCode) or returns null.\n     *\n     * @param isoCode the three-letter ISO code\n     * @param pluralKey the plural key, for example \"one\", \"other\"\n     * @return the display name\n     * @see android.icu.text.PluralRules\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, String> symbolMap()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns a mapping from localized symbols and currency codes to currency codes.\n     * The returned map is unmodifiable.\n     * @return the map\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map<String, String> nameMap()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Returns a mapping from localized names (standard and plural) to currency codes.\n     * The returned map is unmodifiable.\n     * @return the map\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CurrencyDisplayNames getInstance(ULocale locale)", "public static CurrencyDisplayNames getInstance(Locale locale)", "public static CurrencyDisplayNames getInstance(ULocale locale, boolean noSubstitute)", "public static CurrencyDisplayNames getInstance(Locale locale, boolean noSubstitute)", "public static boolean hasData()", "public abstract ULocale getULocale()", "public abstract String getSymbol(String isoCode)", "public abstract String getNarrowSymbol(String isoCode)", "public abstract String getFormalSymbol(String isoCode)", "public abstract String getVariantSymbol(String isoCode)", "public abstract String getName(String isoCode)", "public abstract String getPluralName(String isoCode, String pluralKey)", "public abstract Map<String, String> symbolMap()", "public abstract Map<String, String> nameMap()" ],
  "variableNames" : [ ]
}