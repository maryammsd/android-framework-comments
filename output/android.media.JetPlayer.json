{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/JetPlayer.java",
  "packageName" : "android.media",
  "className" : "JetPlayer",
  "comment" : "\n * JetPlayer provides access to JET content playback and control.\n * \n * <p>Please refer to the JET Creator User Manual for a presentation of the JET interactive\n * music concept and how to use the JetCreator tool to create content to be player by JetPlayer.\n * \n * <p>Use of the JetPlayer class is based around the playback of a number of JET segments\n * sequentially added to a playback FIFO queue. The rendering of the MIDI content stored in each\n * segment can be dynamically affected by two mechanisms:\n * <ul>\n * <li>tracks in a segment can be muted or unmuted at any moment, individually or through\n *    a mask (to change the mute state of multiple tracks at once)</li>\n * <li>parts of tracks in a segment can be played at predefined points in the segment, in order\n *    to maintain synchronization with the other tracks in the segment. This is achieved through\n *    the notion of \"clips\", which can be triggered at any time, but that will play only at the\n *    right time, as authored in the corresponding JET file.</li>\n * </ul>\n * As a result of the rendering and playback of the JET segments, the user of the JetPlayer instance\n * can receive notifications from the JET engine relative to:\n * <ul>\n * <li>the playback state,</li>\n * <li>the number of segments left to play in the queue,</li>\n * <li>application controller events (CC80-83) to mark points in the MIDI segments.</li>\n * </ul>\n * Use {@link #getJetPlayer()} to construct a JetPlayer instance. JetPlayer is a singleton class.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about how to use JetPlayer, read the\n * <a href=\"{@docRoot}guide/topics/media/jetplayer.html\">JetPlayer</a> developer guide.</p></div>\n ",
  "variables" : [ {
    "name" : "MAXTRACKS",
    "type" : "int",
    "comment" : "\n     * The maximum number of simultaneous tracks. Use {@link #getMaxTracks()} to\n     * access this value.\n     ",
    "links" : [ "#getMaxTracks()" ]
  }, {
    "name" : "JET_EVENT",
    "type" : "int",
    "comment" : " defined in frameworks/base/include/media/JetPlayer.h",
    "links" : [ ]
  }, {
    "name" : "JET_USERID_UPDATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JET_NUMQUEUEDSEGMENT_UPDATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JET_PAUSE_UPDATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_VAL_MASK",
    "type" : "int",
    "comment" : " mask for value",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_CTRL_MASK",
    "type" : "int",
    "comment" : " mask for controller",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_CHAN_MASK",
    "type" : "int",
    "comment" : " mask for channel",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_TRACK_MASK",
    "type" : "int",
    "comment" : " mask for track number",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_SEG_MASK",
    "type" : "int",
    "comment" : " mask for segment ID",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_CTRL_SHIFT",
    "type" : "int",
    "comment" : " shift to get controller number to bit 0",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_CHAN_SHIFT",
    "type" : "int",
    "comment" : " shift to get MIDI channel to bit 0",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_TRACK_SHIFT",
    "type" : "int",
    "comment" : " shift to get track ID to bit 0",
    "links" : [ ]
  }, {
    "name" : "JET_EVENT_SEG_SHIFT",
    "type" : "int",
    "comment" : " shift to get segment ID to bit 0",
    "links" : [ ]
  }, {
    "name" : "JET_OUTPUT_RATE",
    "type" : "int",
    "comment" : " _SAMPLE_RATE_22050 in Android.mk",
    "links" : [ ]
  }, {
    "name" : "JET_OUTPUT_CHANNEL_CONFIG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEventHandler",
    "type" : "NativeEventHandler",
    "comment" : "\n     * Handler for jet events and status updates coming from the native code\n     ",
    "links" : [ ]
  }, {
    "name" : "mInitializationLooper",
    "type" : "Looper",
    "comment" : "\n     * Looper associated with the thread that creates the AudioTrack instance\n     ",
    "links" : [ ]
  }, {
    "name" : "mEventListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock to protect the event listener updates against event notifications\n     ",
    "links" : [ ]
  }, {
    "name" : "mJetEventListener",
    "type" : "OnJetEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "singletonRef",
    "type" : "JetPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativePlayerInJavaObj",
    "type" : "long",
    "comment" : " \n     * Accessed by native methods: provides access to C++ JetPlayer object \n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "--------------------",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static JetPlayer getJetPlayer()",
    "returnType" : "JetPlayer",
    "comment" : "\n     * Factory method for the JetPlayer class.\n     * @return the singleton JetPlayer instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Cloning a JetPlayer instance is not supported. Calling clone() will generate an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Stops the current JET playback, and releases all associated native resources.\n     * The object can no longer be used and the reference should be set to null\n     * after a call to release().\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMaxTracks()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean loadJetFile(String path)",
    "returnType" : "boolean",
    "comment" : "\n     * Loads a .jet file from a given path.\n     * @param path the path to the .jet file, for instance \"/sdcard/mygame/music.jet\".\n     * @return true if loading the .jet file was successful, false if loading failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean loadJetFile(AssetFileDescriptor afd)",
    "returnType" : "boolean",
    "comment" : "\n     * Loads a .jet file from an asset file descriptor.\n     * @param afd the asset file descriptor.\n     * @return true if loading the .jet file was successful, false if loading failed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean closeJetFile()",
    "returnType" : "boolean",
    "comment" : "\n     * Closes the resource containing the JET content.\n     * @return true if successfully closed, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean play()",
    "returnType" : "boolean",
    "comment" : "\n     * Starts playing the JET segment queue.\n     * @return true if rendering and playback is successfully started, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pause()",
    "returnType" : "boolean",
    "comment" : "\n     * Pauses the playback of the JET segment queue.\n     * @return true if rendering and playback is successfully paused, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean queueJetSegment(int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, byte userID)",
    "returnType" : "boolean",
    "comment" : "\n     * Queues the specified segment in the JET queue.\n     * @param segmentNum the identifier of the segment.\n     * @param libNum the index of the sound bank associated with the segment. Use -1 to indicate\n     *    that no sound bank (DLS file) is associated with this segment, in which case JET will use\n     *    the General MIDI library.\n     * @param repeatCount the number of times the segment will be repeated. 0 means the segment will\n     *    only play once. -1 means the segment will repeat indefinitely.\n     * @param transpose the amount of pitch transposition. Set to 0 for normal playback. \n     *    Range is -12 to +12.\n     * @param muteFlags a bitmask to specify which MIDI tracks will be muted during playback. Bit 0\n     *    affects track 0, bit 1 affects track 1 etc.\n     * @param userID a value specified by the application that uniquely identifies the segment. \n     *    this value is received in the\n     *    {@link OnJetEventListener#onJetUserIdUpdate(JetPlayer, int, int)} event listener method.\n     *    Normally, the application will keep a byte value that is incremented each time a new\n     *    segment is queued up. This can be used to look up any special characteristics of that\n     *    track including trigger clips and mute flags.\n     * @return true if the segment was successfully queued, false if the queue is full or if the\n     *    parameters are invalid.\n     ",
    "links" : [ "#onJetUserIdUpdate(JetPlayer" ]
  }, {
    "name" : "public boolean queueJetSegmentMuteArray(int segmentNum, int libNum, int repeatCount, int transpose, boolean[] muteArray, byte userID)",
    "returnType" : "boolean",
    "comment" : "\n     * Queues the specified segment in the JET queue.\n     * @param segmentNum the identifier of the segment.\n     * @param libNum the index of the soundbank associated with the segment. Use -1 to indicate that\n     *    no sound bank (DLS file) is associated with this segment, in which case JET will use\n     *    the General MIDI library.\n     * @param repeatCount the number of times the segment will be repeated. 0 means the segment will\n     *    only play once. -1 means the segment will repeat indefinitely.\n     * @param transpose the amount of pitch transposition. Set to 0 for normal playback. \n     *    Range is -12 to +12.\n     * @param muteArray an array of booleans to specify which MIDI tracks will be muted during\n     *    playback. The value at index 0 affects track 0, value at index 1 affects track 1 etc. \n     *    The length of the array must be {@link #getMaxTracks()} for the call to succeed.\n     * @param userID a value specified by the application that uniquely identifies the segment. \n     *    this value is received in the\n     *    {@link OnJetEventListener#onJetUserIdUpdate(JetPlayer, int, int)} event listener method.\n     *    Normally, the application will keep a byte value that is incremented each time a new\n     *    segment is queued up. This can be used to look up any special characteristics of that\n     *    track including trigger clips and mute flags.\n     * @return true if the segment was successfully queued, false if the queue is full or if the\n     *    parameters are invalid.\n     ",
    "links" : [ "#getMaxTracks()", "#onJetUserIdUpdate(JetPlayer" ]
  }, {
    "name" : "public boolean setMuteFlags(int muteFlags, boolean sync)",
    "returnType" : "boolean",
    "comment" : "\n     * Modifies the mute flags.\n     * @param muteFlags a bitmask to specify which MIDI tracks are muted. Bit 0 affects track 0,\n     *    bit 1 affects track 1 etc.\n     * @param sync if false, the new mute flags will be applied as soon as possible by the JET\n     *    render and playback engine. If true, the mute flags will be updated at the start of the\n     *    next segment. If the segment is repeated, the flags will take effect the next time \n     *    segment is repeated.\n     * @return true if the mute flags were successfully updated, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setMuteArray(boolean[] muteArray, boolean sync)",
    "returnType" : "boolean",
    "comment" : "\n     * Modifies the mute flags for the current active segment.\n     * @param muteArray an array of booleans to specify which MIDI tracks are muted. The value at\n     *    index 0 affects track 0, value at index 1 affects track 1 etc. \n     *    The length of the array must be {@link #getMaxTracks()} for the call to succeed.\n     * @param sync if false, the new mute flags will be applied as soon as possible by the JET\n     *    render and playback engine. If true, the mute flags will be updated at the start of the\n     *    next segment. If the segment is repeated, the flags will take effect the next time \n     *    segment is repeated.\n     * @return true if the mute flags were successfully updated, false otherwise.\n     ",
    "links" : [ "#getMaxTracks()" ]
  }, {
    "name" : "public boolean setMuteFlag(int trackId, boolean muteFlag, boolean sync)",
    "returnType" : "boolean",
    "comment" : "\n     * Mutes or unmutes a single track.\n     * @param trackId the index of the track to mute.\n     * @param muteFlag set to true to mute, false to unmute.\n     * @param sync if false, the new mute flags will be applied as soon as possible by the JET\n     *    render and playback engine. If true, the mute flag will be updated at the start of the\n     *    next segment. If the segment is repeated, the flag will take effect the next time \n     *    segment is repeated.\n     * @return true if the mute flag was successfully updated, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean triggerClip(int clipId)",
    "returnType" : "boolean",
    "comment" : "\n     * Schedules the playback of a clip.\n     * This will automatically update the mute flags in sync with the JET Clip Marker (controller \n     * 103). The parameter clipID must be in the range of 0-63. After the call to triggerClip, when\n     * JET next encounters a controller event 103 with bits 0-5 of the value equal to clipID and \n     * bit 6 set to 1, it will automatically unmute the track containing the controller event.\n     * When JET encounters the complementary controller event 103 with bits 0-5 of the value equal\n     * to clipID and bit 6 set to 0, it will mute the track again.\n     * @param clipId the identifier of the clip to trigger.\n     * @return true if the clip was successfully triggered, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearQueue()",
    "returnType" : "boolean",
    "comment" : "\n     * Empties the segment queue, and clears all clips that are scheduled for playback.\n     * @return true if the queue was successfully cleared, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEventListener(OnJetEventListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener JetPlayer notifies when a JET event is generated by the rendering and\n     * playback engine.\n     * Notifications will be received in the same thread as the one in which the JetPlayer\n     * instance was created.\n     * @param listener\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEventListener(OnJetEventListener listener, Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener JetPlayer notifies when a JET event is generated by the rendering and\n     * playback engine.\n     * Use this method to receive JET events in the Handler associated with another\n     * thread than the one in which you created the JetPlayer instance.\n     * @param listener\n     * @param handler the Handler that will receive the event notification messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_setup(Object Jet_this, int maxTracks, int trackBufferSize)",
    "returnType" : "boolean",
    "comment" : "------------------------",
    "links" : [ ]
  }, {
    "name" : "private final native void native_finalize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native void native_release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_loadJetFromFile(String pathToJetFile)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_loadJetFromFileD(FileDescriptor fd, long offset, long len)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_closeJetFile()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_playJet()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_pauseJet()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_queueJetSegment(int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, byte userID)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_queueJetSegmentMuteArray(int segmentNum, int libNum, int repeatCount, int transpose, boolean[] muteArray, byte userID)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_setMuteFlags(int muteFlags, boolean sync)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_setMuteArray(boolean[] muteArray, boolean sync)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_setMuteFlag(int trackId, boolean muteFlag, boolean sync)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_triggerClip(int clipId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final native boolean native_clearQueue()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void postEventFromNative(Object jetplayer_ref, int what, int arg1, int arg2)",
    "returnType" : "void",
    "comment" : "--------------------",
    "links" : [ ]
  }, {
    "name" : "private static void logd(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void loge(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAXTRACKS", "JET_EVENT", "JET_USERID_UPDATE", "JET_NUMQUEUEDSEGMENT_UPDATE", "JET_PAUSE_UPDATE", "JET_EVENT_VAL_MASK", "JET_EVENT_CTRL_MASK", "JET_EVENT_CHAN_MASK", "JET_EVENT_TRACK_MASK", "JET_EVENT_SEG_MASK", "JET_EVENT_CTRL_SHIFT", "JET_EVENT_CHAN_SHIFT", "JET_EVENT_TRACK_SHIFT", "JET_EVENT_SEG_SHIFT", "JET_OUTPUT_RATE", "JET_OUTPUT_CHANNEL_CONFIG", "mEventHandler", "mInitializationLooper", "mEventListenerLock", "mJetEventListener", "singletonRef", "mNativePlayerInJavaObj", "TAG" ],
  "methodNames" : [ "public static JetPlayer getJetPlayer()", "public Object clone() throws CloneNotSupportedException", "protected void finalize()", "public void release()", "public static int getMaxTracks()", "public boolean loadJetFile(String path)", "public boolean loadJetFile(AssetFileDescriptor afd)", "public boolean closeJetFile()", "public boolean play()", "public boolean pause()", "public boolean queueJetSegment(int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, byte userID)", "public boolean queueJetSegmentMuteArray(int segmentNum, int libNum, int repeatCount, int transpose, boolean[] muteArray, byte userID)", "public boolean setMuteFlags(int muteFlags, boolean sync)", "public boolean setMuteArray(boolean[] muteArray, boolean sync)", "public boolean setMuteFlag(int trackId, boolean muteFlag, boolean sync)", "public boolean triggerClip(int clipId)", "public boolean clearQueue()", "public void setEventListener(OnJetEventListener listener)", "public void setEventListener(OnJetEventListener listener, Handler handler)", "private final native boolean native_setup(Object Jet_this, int maxTracks, int trackBufferSize)", "private final native void native_finalize()", "private final native void native_release()", "private final native boolean native_loadJetFromFile(String pathToJetFile)", "private final native boolean native_loadJetFromFileD(FileDescriptor fd, long offset, long len)", "private final native boolean native_closeJetFile()", "private final native boolean native_playJet()", "private final native boolean native_pauseJet()", "private final native boolean native_queueJetSegment(int segmentNum, int libNum, int repeatCount, int transpose, int muteFlags, byte userID)", "private final native boolean native_queueJetSegmentMuteArray(int segmentNum, int libNum, int repeatCount, int transpose, boolean[] muteArray, byte userID)", "private final native boolean native_setMuteFlags(int muteFlags, boolean sync)", "private final native boolean native_setMuteArray(boolean[] muteArray, boolean sync)", "private final native boolean native_setMuteFlag(int trackId, boolean muteFlag, boolean sync)", "private final native boolean native_triggerClip(int clipId)", "private final native boolean native_clearQueue()", "private static void postEventFromNative(Object jetplayer_ref, int what, int arg1, int arg2)", "private static void logd(String msg)", "private static void loge(String msg)" ]
}