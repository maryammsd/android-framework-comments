{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/ExpandableListAdapter.java",
  "packageName" : "android.widget",
  "className" : "ExpandableListAdapter",
  "comment" : "\n * An adapter that links a {@link ExpandableListView} with the underlying\n * data. The implementation of this interface will provide access\n * to the data of the children (categorized by groups), and also instantiate\n * {@link View}s for children and groups.\n ",
  "links" : [ "android.view.View", "android.widget.ExpandableListView" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void registerDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @see Adapter#registerDataSetObserver(DataSetObserver)\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @see Adapter#unregisterDataSetObserver(DataSetObserver)\n     ",
    "links" : [ ]
  }, {
    "name" : " int getGroupCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of groups.\n     * \n     * @return the number of groups\n     ",
    "links" : [ ]
  }, {
    "name" : " int getChildrenCount(int groupPosition)",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of children in a specified group.\n     * \n     * @param groupPosition the position of the group for which the children\n     *            count should be returned\n     * @return the children count in the specified group\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getGroup(int groupPosition)",
    "returnType" : "Object",
    "comment" : "\n     * Gets the data associated with the given group.\n     * \n     * @param groupPosition the position of the group\n     * @return the data child for the specified group\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getChild(int groupPosition, int childPosition)",
    "returnType" : "Object",
    "comment" : "\n     * Gets the data associated with the given child within the given group.\n     * \n     * @param groupPosition the position of the group that the child resides in\n     * @param childPosition the position of the child with respect to other\n     *            children in the group\n     * @return the data of the child\n     ",
    "links" : [ ]
  }, {
    "name" : " long getGroupId(int groupPosition)",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID for the group at the given position. This group ID must be\n     * unique across groups. The combined ID (see\n     * {@link #getCombinedGroupId(long)}) must be unique across ALL items\n     * (groups and all children).\n     * \n     * @param groupPosition the position of the group for which the ID is wanted\n     * @return the ID associated with the group\n     ",
    "links" : [ "#getCombinedGroupId(long)" ]
  }, {
    "name" : " long getChildId(int groupPosition, int childPosition)",
    "returnType" : "long",
    "comment" : "\n     * Gets the ID for the given child within the given group. This ID must be\n     * unique across all children within the group. The combined ID (see\n     * {@link #getCombinedChildId(long, long)}) must be unique across ALL items\n     * (groups and all children).\n     * \n     * @param groupPosition the position of the group that contains the child\n     * @param childPosition the position of the child within the group for which\n     *            the ID is wanted\n     * @return the ID associated with the child\n     ",
    "links" : [ "#getCombinedChildId(long" ]
  }, {
    "name" : " boolean hasStableIds()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the child and group IDs are stable across changes to the\n     * underlying data.\n     * \n     * @return whether or not the same ID always refers to the same object\n     * @see Adapter#hasStableIds()\n     ",
    "links" : [ ]
  }, {
    "name" : " View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Gets a View that displays the given group. This View is only for the\n     * group--the Views for the group's children will be fetched using\n     * {@link #getChildView(int, int, boolean, View, ViewGroup)}.\n     * \n     * @param groupPosition the position of the group for which the View is\n     *            returned\n     * @param isExpanded whether the group is expanded or collapsed\n     * @param convertView the old view to reuse, if possible. You should check\n     *            that this view is non-null and of an appropriate type before\n     *            using. If it is not possible to convert this view to display\n     *            the correct data, this method can create a new view. It is not\n     *            guaranteed that the convertView will have been previously\n     *            created by\n     *            {@link #getGroupView(int, boolean, View, ViewGroup)}.\n     * @param parent the parent that this view will eventually be attached to\n     * @return the View corresponding to the group at the specified position\n     ",
    "links" : [ "#getChildView(int", "#getGroupView(int" ]
  }, {
    "name" : " View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Gets a View that displays the data for the given child within the given\n     * group.\n     * \n     * @param groupPosition the position of the group that contains the child\n     * @param childPosition the position of the child (for which the View is\n     *            returned) within the group\n     * @param isLastChild Whether the child is the last child within the group\n     * @param convertView the old view to reuse, if possible. You should check\n     *            that this view is non-null and of an appropriate type before\n     *            using. If it is not possible to convert this view to display\n     *            the correct data, this method can create a new view. It is not\n     *            guaranteed that the convertView will have been previously\n     *            created by\n     *            {@link #getChildView(int, int, boolean, View, ViewGroup)}.\n     * @param parent the parent that this view will eventually be attached to\n     * @return the View corresponding to the child at the specified position\n     ",
    "links" : [ "#getChildView(int" ]
  }, {
    "name" : " boolean isChildSelectable(int groupPosition, int childPosition)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the child at the specified position is selectable.\n     * \n     * @param groupPosition the position of the group that contains the child\n     * @param childPosition the position of the child within the group\n     * @return whether the child is selectable.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean areAllItemsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @see ListAdapter#areAllItemsEnabled()\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * @see ListAdapter#isEmpty()\n     ",
    "links" : [ ]
  }, {
    "name" : " void onGroupExpanded(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Called when a group is expanded.\n     * \n     * @param groupPosition The group being expanded.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onGroupCollapsed(int groupPosition)",
    "returnType" : "void",
    "comment" : "\n     * Called when a group is collapsed.\n     * \n     * @param groupPosition The group being collapsed.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getCombinedChildId(long groupId, long childId)",
    "returnType" : "long",
    "comment" : "\n     * Gets an ID for a child that is unique across any item (either group or\n     * child) that is in this list. Expandable lists require each item (group or\n     * child) to have a unique ID among all children and groups in the list.\n     * This method is responsible for returning that unique ID given a child's\n     * ID and its group's ID. Furthermore, if {@link #hasStableIds()} is true, the\n     * returned ID must be stable as well.\n     * \n     * @param groupId The ID of the group that contains this child.\n     * @param childId The ID of the child.\n     * @return The unique (and possibly stable) ID of the child across all\n     *         groups and children in this list.\n     ",
    "links" : [ "#hasStableIds()" ]
  }, {
    "name" : " long getCombinedGroupId(long groupId)",
    "returnType" : "long",
    "comment" : "\n     * Gets an ID for a group that is unique across any item (either group or\n     * child) that is in this list. Expandable lists require each item (group or\n     * child) to have a unique ID among all children and groups in the list.\n     * This method is responsible for returning that unique ID given a group's\n     * ID. Furthermore, if {@link #hasStableIds()} is true, the returned ID must be\n     * stable as well.\n     * \n     * @param groupId The ID of the group\n     * @return The unique (and possibly stable) ID of the group across all\n     *         groups and children in this list.\n     ",
    "links" : [ "#hasStableIds()" ]
  } ],
  "methodNames" : [ " void registerDataSetObserver(DataSetObserver observer)", " void unregisterDataSetObserver(DataSetObserver observer)", " int getGroupCount()", " int getChildrenCount(int groupPosition)", " Object getGroup(int groupPosition)", " Object getChild(int groupPosition, int childPosition)", " long getGroupId(int groupPosition)", " long getChildId(int groupPosition, int childPosition)", " boolean hasStableIds()", " View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)", " View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)", " boolean isChildSelectable(int groupPosition, int childPosition)", " boolean areAllItemsEnabled()", " boolean isEmpty()", " void onGroupExpanded(int groupPosition)", " void onGroupCollapsed(int groupPosition)", " long getCombinedChildId(long groupId, long childId)", " long getCombinedGroupId(long groupId)" ],
  "variableNames" : [ ]
}