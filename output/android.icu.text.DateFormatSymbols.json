{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DateFormatSymbols.java",
  "packageName" : "android.icu.text",
  "className" : "DateFormatSymbols",
  "comment" : "\n * <strong>[icu enhancement]</strong> ICU's replacement for {@link java.text.DateFormatSymbols}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n *\n * <p><code>DateFormatSymbols</code> is a public class for encapsulating\n * localizable date-time formatting data, such as the names of the\n * months, the names of the days of the week, and the time zone data.\n * <code>DateFormat</code> and <code>SimpleDateFormat</code> both use\n * <code>DateFormatSymbols</code> to encapsulate this information.\n *\n * <p>Typically you shouldn't use <code>DateFormatSymbols</code> directly.\n * Rather, you are encouraged to create a date-time formatter with the\n * <code>DateFormat</code> class's factory methods: <code>getTimeInstance</code>,\n * <code>getDateInstance</code>, or <code>getDateTimeInstance</code>.\n * These methods automatically create a <code>DateFormatSymbols</code> for\n * the formatter so that you don't have to. After the\n * formatter is created, you may modify its format pattern using the\n * <code>setPattern</code> method. For more information about\n * creating formatters using <code>DateFormat</code>'s factory methods,\n * see {@link DateFormat}.\n *\n * <p>If you decide to create a date-time formatter with a specific\n * format pattern for a specific locale, you can do so with:\n * <blockquote>\n * <pre>\n * new SimpleDateFormat(aPattern, new DateFormatSymbols(aLocale)).\n * </pre>\n * </blockquote>\n *\n * <p><code>DateFormatSymbols</code> objects are clonable. When you obtain\n * a <code>DateFormatSymbols</code> object, feel free to modify the\n * date-time formatting data. For instance, you can replace the localized\n * date-time format pattern characters with the ones that you feel easy\n * to remember. Or you can change the representative cities\n * to your favorite ones.\n *\n * <p>New <code>DateFormatSymbols</code> subclasses may be added to support\n * <code>SimpleDateFormat</code> for date-time formatting for additional locales.\n *\n * @see          DateFormat\n * @see          SimpleDateFormat\n * @author       Chen-Lieh Huang\n ",
  "links" : [ "java.text.DateFormatSymbols", "android.icu.text.DateFormat" ],
  "variables" : [ {
    "name" : "FORMAT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for context.\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDALONE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for context.\n     ",
    "links" : [ ]
  }, {
    "name" : "NUMERIC",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for context. NUMERIC context\n     * is only supported for leapMonthPatterns.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_CONTEXT_COUNT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for context.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ABBREVIATED",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for width.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIDE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for width.\n     ",
    "links" : [ ]
  }, {
    "name" : "NARROW",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for width.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for width; only supported for weekdays.\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_WIDTH_COUNT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Constant for width.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_FORMAT_WIDE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_FORMAT_NARROW",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_LEAP_MONTH_PATTERN_NUMERIC",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for leap month pattern type, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DT_MONTH_PATTERN_COUNT",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Somewhat temporary constant for month pattern count, adequate for Chinese calendar.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_TIME_SEPARATOR",
    "type" : "String",
    "comment" : "\n     * <strong>[icu]</strong> This default time separator is used for formatting when the locale\n     * doesn't specify any time separator, and always recognized when parsing.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "ALTERNATE_TIME_SEPARATOR",
    "type" : "String",
    "comment" : "\n     * <strong>[icu]</strong> This alternate time separator is always recognized when parsing.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "eras",
    "type" : "String[]",
    "comment" : "\n     * Era strings. For example: \"AD\" and \"BC\".  An array of 2 strings,\n     * indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "eraNames",
    "type" : "String[]",
    "comment" : "\n     * Era name strings. For example: \"Anno Domini\" and \"Before Christ\".  An array of 2 strings,\n     * indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "narrowEras",
    "type" : "String[]",
    "comment" : "\n     * Narrow era names. For example: \"A\" and \"B\". An array of 2 strings,\n     * indexed by <code>Calendar.BC</code> and <code>Calendar.AD</code>.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "months",
    "type" : "String[]",
    "comment" : "\n     * Month strings. For example: \"January\", \"February\", etc.  An array\n     * of 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortMonths",
    "type" : "String[]",
    "comment" : "\n     * Short month strings. For example: \"Jan\", \"Feb\", etc.  An array of\n     * 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "narrowMonths",
    "type" : "String[]",
    "comment" : "\n     * Narrow month strings. For example: \"J\", \"F\", etc.  An array of\n     * 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneMonths",
    "type" : "String[]",
    "comment" : "\n     * Standalone month strings. For example: \"January\", \"February\", etc.  An array\n     * of 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneShortMonths",
    "type" : "String[]",
    "comment" : "\n     * Standalone short month strings. For example: \"Jan\", \"Feb\", etc.  An array of\n     * 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneNarrowMonths",
    "type" : "String[]",
    "comment" : "\n     * Standalone narrow month strings. For example: \"J\", \"F\", etc.  An array of\n     * 13 strings (some calendars have 13 months), indexed by\n     * <code>Calendar.JANUARY</code>, <code>Calendar.FEBRUARY</code>, etc.\n\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "weekdays",
    "type" : "String[]",
    "comment" : "\n     * Format wide weekday strings, for example: \"Sunday\", \"Monday\", etc.\n     * An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>weekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortWeekdays",
    "type" : "String[]",
    "comment" : "\n     * CLDR-style format abbreviated (not short) weekday strings,\n     * for example: \"Sun\", \"Mon\", etc.\n     * An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>shortWeekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shorterWeekdays",
    "type" : "String[]",
    "comment" : " Note, serialization restore from pre-ICU-51 will leave this null.",
    "links" : [ ]
  }, {
    "name" : "narrowWeekdays",
    "type" : "String[]",
    "comment" : "\n     * CLDR-style format narrow weekday strings, for example: \"S\", \"M\", etc.\n     * An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>narrowWeekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Standalone wide weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>standaloneWeekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneShortWeekdays",
    "type" : "String[]",
    "comment" : "\n     * CLDR-style standalone abbreviated (not short) weekday strings,\n     * for example: \"Sun\", \"Mon\", etc.\n     * An array of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>standaloneShortWeekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneShorterWeekdays",
    "type" : "String[]",
    "comment" : " Note, serialization restore from pre-ICU-51 will leave this null.",
    "links" : [ ]
  }, {
    "name" : "standaloneNarrowWeekdays",
    "type" : "String[]",
    "comment" : "\n     * Standalone narrow weekday strings. For example: \"S\", \"M\", etc.  An array\n     * of 8 strings, indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     * The element <code>standaloneNarrowWeekdays[0]</code> is ignored.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "ampms",
    "type" : "String[]",
    "comment" : "\n     * AM and PM strings. For example: \"AM\" and \"PM\".  An array of\n     * 2 strings, indexed by <code>Calendar.AM</code> and\n     * <code>Calendar.PM</code>.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "ampmsNarrow",
    "type" : "String[]",
    "comment" : "\n     * narrow AM and PM strings. For example: \"a\" and \"p\".  An array of\n     * 2 strings, indexed by <code>Calendar.AM</code> and\n     * <code>Calendar.PM</code>.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "timeSeparator",
    "type" : "String",
    "comment" : "\n     * Time separator string. For example: \":\".\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortQuarters",
    "type" : "String[]",
    "comment" : "\n     * Abbreviated quarter names. For example: \"Q1\", \"Q2\", \"Q3\", \"Q4\". An array\n     * of 4 strings indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "narrowQuarters",
    "type" : "String[]",
    "comment" : "\n     * Narrow quarter names. For example: \"1\", \"2\", \"3\", \"4\". An array\n     * of 4 strings indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "quarters",
    "type" : "String[]",
    "comment" : "\n     * Full quarter names. For example: \"1st Quarter\", \"2nd Quarter\", \"3rd Quarter\",\n     * \"4th Quarter\". An array of 4 strings, indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneShortQuarters",
    "type" : "String[]",
    "comment" : "\n     * Standalone abbreviated quarter names. For example: \"Q1\", \"Q2\", \"Q3\", \"Q4\". An array\n     * of 4 strings indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneNarrowQuarters",
    "type" : "String[]",
    "comment" : "\n     * Standalone narrow quarter names. For example: \"1\", \"2\", \"3\", \"4\". An array\n     * of 4 strings indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneQuarters",
    "type" : "String[]",
    "comment" : "\n     * Standalone full quarter names. For example: \"1st Quarter\", \"2nd Quarter\", \"3rd Quarter\",\n     * \"4th Quarter\". An array of 4 strings, indexed by the month divided by 3.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "leapMonthPatterns",
    "type" : "String[]",
    "comment" : "\n     * All leap month patterns, for example \"{0}bis\".\n     * An array of DT_MONTH_PATTERN_COUNT strings, indexed by the DT_LEAP_MONTH_PATTERN_XXX value.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortYearNames",
    "type" : "String[]",
    "comment" : "\n     * Cyclic year names, for example: \"jia-zi\", \"yi-chou\", ... \"gui-hai\".\n     * An array of (normally) 60 strings, corresponding to cyclic years 1-60 (in Calendar YEAR field).\n     * Currently we only have data for format/abbreviated.\n     * For the others, just get from format/abbreviated, ignore set.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "shortZodiacNames",
    "type" : "String[]",
    "comment" : "\n     * Cyclic zodiac names, for example: \"Rat\", \"Ox\", \"Tiger\", etc.\n     * An array of (normally) 12 strings.\n     * Currently we only have data for format/abbreviated.\n     * For the others, just get from format/abbreviated, ignore set.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "zoneStrings",
    "type" : "String[][]",
    "comment" : "\n     * Localized names of time zones in this locale.  This is a\n     * two-dimensional array of strings of size <em>n</em> by <em>m</em>,\n     * where <em>m</em> is at least 5 and up to 7.  Each of the <em>n</em> rows is an\n     * entry containing the localized names for a single <code>TimeZone</code>.\n     * Each such row contains (with <code>i</code> ranging from\n     * 0..<em>n</em>-1):\n     * <ul>\n     * <li><code>zoneStrings[i][0]</code> - time zone ID</li>\n     * <li><code>zoneStrings[i][1]</code> - long name of zone in standard\n     * time</li>\n     * <li><code>zoneStrings[i][2]</code> - short name of zone in\n     * standard time</li>\n     * <li><code>zoneStrings[i][3]</code> - long name of zone in daylight\n     * savings time</li>\n     * <li><code>zoneStrings[i][4]</code> - short name of zone in daylight\n     * savings time</li>\n     * <li><code>zoneStrings[i][5]</code> - location name of zone</li>\n     * <li><code>zoneStrings[i][6]</code> - long generic name of zone</li>\n     * <li><code>zoneStrings[i][7]</code> - short generic of zone</li>\n    *  </ul>\n     * The zone ID is <em>not</em> localized; it corresponds to the ID\n     * value associated with a system time zone object.  All other entries\n     * are localized names.  If a zone does not implement daylight savings\n     * time, the daylight savings time names are ignored.\n     * <em>Note:</em>CLDR 1.5 introduced metazone and its historical mappings.\n     * This simple two-dimensional array is no longer sufficient to represent\n     * localized names and its historic changes.  Since ICU 3.8.1, localized\n     * zone names extracted from ICU locale data is stored in a ZoneStringFormat\n     * instance.  But we still need to support the old way of customizing\n     * localized zone names, so we keep this field for the purpose.\n     * @see android.icu.util.TimeZone\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "patternChars",
    "type" : "String",
    "comment" : "\n     * Unlocalized date-time pattern characters. For example: 'y', 'd', etc.\n     * All locales use the same unlocalized pattern characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "localPatternChars",
    "type" : "String",
    "comment" : "\n     * Localized date-time pattern characters. For example, a locale may\n     * wish to use 'u' rather than 'y' to represent years in its date format\n     * pattern strings.\n     * This string must be exactly 18 characters long, with the index of\n     * the characters described by <code>DateFormat.ERA_FIELD</code>,\n     * <code>DateFormat.YEAR_FIELD</code>, etc.  Thus, if the string were\n     * \"Xz...\", then localized patterns would use 'X' for era and 'z' for year.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "abbreviatedDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for abbreviated (== short) day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "wideDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for wide day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "narrowDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for narrow day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneAbbreviatedDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for standalone abbreviated (== short) day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneWideDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for standalone wide day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "standaloneNarrowDayPeriods",
    "type" : "String[]",
    "comment" : "\n     * Localized names for standalone narrow day periods.\n     * An array of strings, in the order of DayPeriod constants.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " use serialVersionUID from JDK 1.1.4 for interoperability ",
    "links" : [ ]
  }, {
    "name" : "CALENDAR_CLASSES",
    "type" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contextUsageTypeMap",
    "type" : "Map<String, CapitalizationContextUsage>",
    "comment" : " Map from resource key to CapitalizationContextUsage value\n     ",
    "links" : [ ]
  }, {
    "name" : "capitalization",
    "type" : "Map<CapitalizationContextUsage, boolean[]>",
    "comment" : "\n     * Capitalization transforms. For each usage type, the first array element indicates\n     * whether to titlecase for uiListOrMenu context, the second indicates whether to\n     * titlecase for stand-alone context.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "millisPerHour",
    "type" : "int",
    "comment" : "\n     * Useful constant for defining timezone offsets.\n     ",
    "links" : [ ]
  }, {
    "name" : "DFSCACHE",
    "type" : "CacheBase<String, AospExtendedDateFormatSymbols, ULocale>",
    "comment" : "\n    private static CacheBase<String, DateFormatSymbols, ULocale> DFSCACHE =\n        new SoftCache<String, DateFormatSymbols, ULocale>() {\n            @Override\n            protected DateFormatSymbols createInstance(String key, ULocale locale) {\n    ",
    "links" : [ ]
  }, {
    "name" : "LEAP_MONTH_PATTERNS_PATHS",
    "type" : "String[]",
    "comment" : "\n     * Resource bundle paths for each leap month pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_PERIOD_KEYS",
    "type" : "String[]",
    "comment" : "\n     * Keys for dayPeriods\n     ",
    "links" : [ ]
  }, {
    "name" : "requestedLocale",
    "type" : "ULocale",
    "comment" : "\n     * save the input locale\n     ",
    "links" : [ ]
  }, {
    "name" : "validLocale",
    "type" : "ULocale",
    "comment" : "\n     * The most specific locale containing any resource data, or null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  }, {
    "name" : "actualLocale",
    "type" : "ULocale",
    "comment" : "\n     * The locale containing data used to construct this object, or\n     * null.\n     * @see android.icu.util.ULocale\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DateFormatSymbols getInstance()",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Returns a DateFormatSymbols instance for the default locale.\n     *\n     * <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,\n     * this method simply returns <code>new android.icu.text.DateFormatSymbols()</code>.\n     * ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6\n     * or its equivalent implementation for now.\n     *\n     * @return A DateFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateFormatSymbols getInstance(Locale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * Returns a DateFormatSymbols instance for the given locale.\n     *\n     * <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,\n     * this method simply returns <code>new android.icu.text.DateFormatSymbols(locale)</code>.\n     * ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6\n     * or its equivalent implementation for now.\n     *\n     * @param locale the locale.\n     * @return A DateFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateFormatSymbols getInstance(ULocale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * <strong>[icu]</strong> Returns a DateFormatSymbols instance for the given locale.\n     *\n     * <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getInstance</code>,\n     * this method simply returns <code>new android.icu.text.DateFormatSymbols(locale)</code>.\n     * ICU does not support <code>DateFormatSymbolsProvider</code> introduced in Java 6\n     * or its equivalent implementation for now.\n     *\n     * @param locale the locale.\n     * @return A DateFormatSymbols instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the <code>getInstance</code> methods of\n     * this class can return localized instances.\n     *\n     * <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getAvailableLocales</code>,\n     * this method simply returns the array of <code>Locale</code>s available in this\n     * class.  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in\n     * Java 6 or its equivalent implementation for now.\n     *\n     * @return An array of <code>Locale</code>s for which localized\n     * <code>DateFormatSymbols</code> instances are available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns an array of all locales for which the <code>getInstance</code>\n     * methods of this class can return localized instances.\n     *\n     * <strong>[icu] Note:</strong> Unlike <code>java.text.DateFormatSymbols#getAvailableLocales</code>,\n     * this method simply returns the array of <code>ULocale</code>s available in this\n     * class.  ICU does not support <code>DateFormatSymbolsProvider</code> introduced in\n     * Java 6 or its equivalent implementation for now.\n     *\n     * @return An array of <code>ULocale</code>s for which localized\n     * <code>DateFormatSymbols</code> instances are available.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getEras()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns abbreviated era strings. For example: \"AD\" and \"BC\".\n     * @return the era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEras(String[] newEras)",
    "returnType" : "void",
    "comment" : "\n     * Sets abbreviated era strings. For example: \"AD\" and \"BC\".\n     * @param newEras the new era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getEraNames()",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns full era name strings. For example: \"Anno Domini\" and \"Before Christ\".\n     * @return the era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEraNames(String[] newEraNames)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets full era name strings. For example: \"Anno Domini\" and \"Before Christ\".\n     * @param newEraNames the new era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getNarrowEras()",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns narrow era name strings. For example: \"A\" and \"B\".\n     * @return the narrow era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNarrowEras(String[] newNarrowEras)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets narrow era name strings. For example: \"A\" and \"B\".\n     * @param newNarrowEras the new narrow era strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getMonths()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns month strings. For example: \"January\", \"February\", etc.\n     * @return the month strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getMonths(int context, int width)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns month strings. For example: \"January\", \"February\", etc.\n     * @param context    The month context, FORMAT or STANDALONE.\n     * @param width      The width or the returned month string,\n     *                   either WIDE, ABBREVIATED, or NARROW.\n     * @return the month strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonths(String[] newMonths)",
    "returnType" : "void",
    "comment" : "\n     * Sets month strings. For example: \"January\", \"February\", etc.\n     * @param newMonths the new month strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMonths(String[] newMonths, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets month strings. For example: \"January\", \"February\", etc.\n     * @param newMonths the new month strings.\n     * @param context    The formatting context, FORMAT or STANDALONE.\n     * @param width      The width of the month string,\n     *                   either WIDE, ABBREVIATED, or NARROW.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getShortMonths()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns short month strings. For example: \"Jan\", \"Feb\", etc.\n     * @return the short month strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShortMonths(String[] newShortMonths)",
    "returnType" : "void",
    "comment" : "\n     * Sets short month strings. For example: \"Jan\", \"Feb\", etc.\n     * @param newShortMonths the new short month strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getWeekdays()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns wide weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @return the weekday strings. Use <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc. to index the result array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getWeekdays(int context, int width)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @return the weekday strings. Use <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc. to index the result array.\n     * @param context    Formatting context, either FORMAT or STANDALONE.\n     * @param width      Width of strings to be returned, either\n     *                   WIDE, ABBREVIATED, SHORT, or NARROW\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWeekdays(String[] newWeekdays, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @param newWeekdays The new weekday strings.\n     * @param context     The formatting context, FORMAT or STANDALONE.\n     * @param width       The width of the strings,\n     *                    either WIDE, ABBREVIATED, SHORT, or NARROW.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWeekdays(String[] newWeekdays)",
    "returnType" : "void",
    "comment" : "\n     * Sets wide weekday strings. For example: \"Sunday\", \"Monday\", etc.\n     * @param newWeekdays the new weekday strings. The array should\n     * be indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getShortWeekdays()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns abbreviated weekday strings; for example: \"Sun\", \"Mon\", etc.\n     * (Note: the method name is misleading; it does not get the CLDR-style\n     * \"short\" weekday strings, e.g. \"Su\", \"Mo\", etc.)\n     * @return the abbreviated weekday strings. Use <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc. to index the result array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setShortWeekdays(String[] newAbbrevWeekdays)",
    "returnType" : "void",
    "comment" : "\n     * Sets abbreviated weekday strings; for example: \"Sun\", \"Mon\", etc.\n     * (Note: the method name is misleading; it does not set the CLDR-style\n     * \"short\" weekday strings, e.g. \"Su\", \"Mo\", etc.)\n     * @param newAbbrevWeekdays the new abbreviated weekday strings. The array should\n     * be indexed by <code>Calendar.SUNDAY</code>,\n     * <code>Calendar.MONDAY</code>, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getQuarters(int context, int width)",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns quarter strings. For example: \"1st Quarter\", \"2nd Quarter\", etc.\n     * @param context    The quarter context, FORMAT or STANDALONE.\n     * @param width      The width or the returned quarter string,\n     *                   WIDE, NARROW, or ABBREVIATED.\n     * @return the quarter strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setQuarters(String[] newQuarters, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets quarter strings. For example: \"1st Quarter\", \"2nd Quarter\", etc.\n     * @param newQuarters the new quarter strings.\n     * @param context    The formatting context, FORMAT or STANDALONE.\n     * @param width      The width of the quarter string,\n     *                   WIDE, NARROW, or ABBREVIATED.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getYearNames(int context, int width)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns cyclic year name strings if the calendar has them,\n     * for example: \"jia-zi\", \"yi-chou\", etc.\n     * @param context   The usage context: FORMAT, STANDALONE.\n     * @param width     The requested name width: WIDE, ABBREVIATED, SHORT, NARROW.\n     * @return          The year name strings, or null if they are not\n     *                  available for this calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setYearNames(String[] yearNames, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets cyclic year name strings, for example: \"jia-zi\", \"yi-chou\", etc.\n     * @param yearNames The new cyclic year name strings.\n     * @param context   The usage context: FORMAT, STANDALONE (currently only FORMAT is supported).\n     * @param width     The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getZodiacNames(int context, int width)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns calendar zodiac name strings if the calendar has them,\n     * for example: \"Rat\", \"Ox\", \"Tiger\", etc.\n     * @param context   The usage context: FORMAT, STANDALONE.\n     * @param width     The requested name width: WIDE, ABBREVIATED, SHORT, NARROW.\n     * @return          The zodiac name strings, or null if they are not\n     *                  available for this calendar.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setZodiacNames(String[] zodiacNames, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets calendar zodiac name strings, for example: \"Rat\", \"Ox\", \"Tiger\", etc.\n     * @param zodiacNames   The new zodiac name strings.\n     * @param context   The usage context: FORMAT, STANDALONE (currently only FORMAT is supported).\n     * @param width     The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLeapMonthPattern(int context, int width)",
    "returnType" : "String",
    "comment" : "\n     * Returns the appropriate leapMonthPattern if the calendar has them,\n     * for example: \"{0}bis\"\n     * @param context   The usage context: FORMAT, STANDALONE, NUMERIC.\n     * @param width     The requested pattern width: WIDE, ABBREVIATED, SHORT, NARROW.\n     * @return          The leapMonthPattern, or null if not available for\n     *                  this calendar.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLeapMonthPattern(String leapMonthPattern, int context, int width)",
    "returnType" : "void",
    "comment" : "\n     * Sets a leapMonthPattern, for example: \"{0}bis\"\n     * @param leapMonthPattern  The new leapMonthPattern.\n     * @param context   The usage context: FORMAT, STANDALONE, NUMERIC.\n     * @param width     The name width: WIDE, ABBREVIATED, NARROW.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAmPmStrings()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns am/pm strings. For example: \"AM\" and \"PM\".\n     * @return the weekday strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAmPmStrings(String[] newAmpms)",
    "returnType" : "void",
    "comment" : "\n     * Sets am/pm strings. For example: \"AM\" and \"PM\".\n     * @param newAmpms the new ampm strings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAmpmNarrowStrings()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns narrow am/pm strings. For example: \"a\" and \"p\".\n     * @return narrow ampm strings\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTimeSeparatorString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the time separator string. For example: \":\".\n     * @return the time separator string.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeSeparatorString(String newTimeSeparator)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time separator string. For example: \":\".\n     * @param newTimeSeparator the new time separator string.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[][] getZoneStrings()",
    "returnType" : "String[][]",
    "comment" : "\n     * Returns time zone strings.\n     * <p>\n     * The array returned by this API is a two dimensional String array and\n     * each row contains at least following strings:\n     * <ul>\n     * <li>ZoneStrings[n][0] - System time zone ID\n     * <li>ZoneStrings[n][1] - Long standard time display name\n     * <li>ZoneStrings[n][2] - Short standard time display name\n     * <li>ZoneStrings[n][3] - Long daylight saving time display name\n     * <li>ZoneStrings[n][4] - Short daylight saving time display name\n     * </ul>\n     * When a localized display name is not available, the corresponding\n     * array element will be <code>null</code>.\n     * <p>\n     * <b>Note</b>: ICU implements the time zone display name formatting algorithm\n     * specified by <a href=\"http://www.unicode.org/reports/tr35/\">UTS#35 Unicode\n     * Locale Data Markup Language(LDML)</a>. The algorithm supports historic\n     * display name changes and various different types of names not available in\n     * {@link java.text.DateFormatSymbols#getZoneStrings()}. For accessing the full\n     * set of time zone string data used by ICU implementation, you should use\n     * {@link TimeZoneNames} APIs instead.\n     *\n     * @return the time zone strings.\n     ",
    "links" : [ "android.icu.text.TimeZoneNames", "java.text.DateFormatSymbols#getZoneStrings()" ]
  }, {
    "name" : "public void setZoneStrings(String[][] newZoneStrings)",
    "returnType" : "void",
    "comment" : "\n     * Sets time zone strings.\n     * <p>\n     * <b>Note</b>: {@link SimpleDateFormat} no longer uses the\n     * zone strings stored in a <code>DateFormatSymbols</code>.\n     * Therefore, the time zone strings set by this method have\n     * no effects in an instance of <code>SimpleDateFormat</code>\n     * for formatting time zones. If you want to customize time\n     * zone display names formatted by <code>SimpleDateFormat</code>,\n     * you should customize {@link TimeZoneFormat} and set the\n     * instance by {@link SimpleDateFormat#setTimeZoneFormat(TimeZoneFormat)}\n     * instead.\n     *\n     * @param newZoneStrings the new time zone strings.\n     ",
    "links" : [ "android.icu.text.TimeZoneFormat", "android.icu.text.SimpleDateFormat", "android.icu.text.SimpleDateFormat#setTimeZoneFormat(TimeZoneFormat)" ]
  }, {
    "name" : "public String getLocalPatternChars()",
    "returnType" : "String",
    "comment" : "\n     * Returns localized date-time pattern characters. For example: 'u', 't', etc.\n     *\n     * <p>Note: ICU no longer provides localized date-time pattern characters for a locale\n     * starting ICU 3.8.  This method returns the non-localized date-time pattern\n     * characters unless user defined localized data is set by setLocalPatternChars.\n     * @return the localized date-time pattern characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLocalPatternChars(String newLocalPatternChars)",
    "returnType" : "void",
    "comment" : "\n     * Sets localized date-time pattern characters. For example: 'u', 't', etc.\n     * @param newLocalPatternChars the new localized date-time\n     * pattern characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides clone.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Override hashCode.\n     * Generates a hash code for the DateFormatSymbols object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides equals.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initializeData(ULocale desiredLocale, String type)",
    "returnType" : "void",
    "comment" : " We may need to deescalate this API to @internal.",
    "links" : [ ]
  }, {
    "name" : "private static AospExtendedDateFormatSymbols getExtendedInstance(ULocale desiredLocale, String type)",
    "returnType" : "AospExtendedDateFormatSymbols",
    "comment" : " BEGIN Android-added: Narrow quarters needed to implement the Q/q symbols in DateTimeFormatter",
    "links" : [ ]
  }, {
    "name" : "public static AospExtendedDateFormatSymbols getExtendedInstance(ULocale locale)",
    "returnType" : "AospExtendedDateFormatSymbols",
    "comment" : "\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : " void initializeData(DateFormatSymbols dfs)",
    "returnType" : "void",
    "comment" : "\n     * Initializes format symbols using another instance.\n     *\n     * TODO Clean up initialization methods for subclasses\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void initializeData(ULocale desiredLocale, ICUResourceBundle b, String calendarType)",
    "returnType" : "void",
    "comment" : "\n     * Initializes format symbols for the locale and calendar type\n     * @param desiredLocale The locale whose symbols are desired.\n     * @param b Resource bundle provided externally\n     * @param calendarType  The calendar type being used\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeData(ULocale desiredLocale, ICUResourceBundle b, String calendarType, AospExtendedDateFormatSymbols aospExtendedDateFormatSymbols)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean arrayOfArrayEquals(Object[][] aa1, Object[][] aa2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] loadDayPeriodStrings(Map<String, String> resourceMap, String[] copyFrom)",
    "returnType" : "String[]",
    "comment" : "\n     * Loads localized names for day periods in the requested format.\n     * @param resourceMap Contains the dayPeriod resource to load\n     * @param copyFrom If non-null, any values in the result that would otherwise be null are copied\n     *                 from this array\n     ",
    "links" : [ ]
  }, {
    "name" : "private final String[] duplicate(String[] srcArray)",
    "returnType" : "String[]",
    "comment" : "\n     * Clones an array of Strings.\n     * @param srcArray the source array to be cloned.\n     * @return a cloned array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final String[][] duplicate(String[][] srcArray)",
    "returnType" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ResourceBundle getDateFormatBundle(Class<? extends Calendar> calendarClass, Locale locale) throws MissingResourceException",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Finds the ResourceBundle containing the date format information for\n     * a specified calendar subclass in a given locale.\n     * <p>\n     * The resource bundle name is based on the calendar's fully-specified\n     * class name, with \".resources\" inserted at the end of the package name\n     * (just before the class name) and \"Symbols\" appended to the end.\n     * For example, the bundle corresponding to \"android.icu.util.HebrewCalendar\"\n     * is \"android.icu.impl.data.HebrewCalendarSymbols\".\n     * <p>\n     * <b>Note:</b>Because of the structural changes in the ICU locale bundle,\n     * this API no longer works as described.  This method always returns null.\n     * @deprecated ICU 4.0\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourceBundle getDateFormatBundle(Class<? extends Calendar> calendarClass, ULocale locale) throws MissingResourceException",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Finds the ResourceBundle containing the date format information for\n     * a specified calendar subclass in a given locale.\n     * <p>\n     * The resource bundle name is based on the calendar's fully-specified\n     * class name, with \".resources\" inserted at the end of the package name\n     * (just before the class name) and \"Symbols\" appended to the end.\n     * For example, the bundle corresponding to \"android.icu.util.HebrewCalendar\"\n     * is \"android.icu.impl.data.HebrewCalendarSymbols\".\n     * <p>\n     * <b>Note:</b>Because of the structural changes in the ICU locale bundle,\n     * this API no longer works as described.  This method always returns null.\n     * @deprecated ICU 4.0\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourceBundle getDateFormatBundle(Calendar cal, Locale locale) throws MissingResourceException",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Variant of getDateFormatBundle(java.lang.Class, java.util.Locale) that takes\n     * a Calendar instance instead of a Calendar class.\n     * <p>\n     * <b>Note:</b>Because of the structural changes in the ICU locale bundle,\n     * this API no longer works as described.  This method always returns null.\n     * @see #getDateFormatBundle(java.lang.Class, java.util.Locale)\n     * @deprecated ICU 4.0\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ResourceBundle getDateFormatBundle(Calendar cal, ULocale locale) throws MissingResourceException",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Variant of getDateFormatBundle(java.lang.Class, java.util.Locale) that takes\n     * a Calendar instance instead of a Calendar class.\n     * <p>\n     * <b>Note:</b>Because of the structural changes in the ICU locale bundle,\n     * this API no longer works as described.  This method always returns null.\n     * @see #getDateFormatBundle(java.lang.Class, java.util.Locale)\n     * @deprecated ICU 4.0\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ULocale getLocale(ULocale.Type type)",
    "returnType" : "ULocale",
    "comment" : "\n     * Returns the locale that was used to create this object, or null.\n     * This may may differ from the locale requested at the time of\n     * this object's creation.  For example, if an object is created\n     * for locale <tt>en_US_CALIFORNIA</tt>, the actual data may be\n     * drawn from <tt>en</tt> (the <i>actual</i> locale), and\n     * <tt>en_US</tt> may be the most specific locale that exists (the\n     * <i>valid</i> locale).\n     *\n     * <p>Note: This method will be implemented in ICU 3.0; ICU 2.8\n     * contains a partial preview implementation.  The <i>actual</i>\n     * locale is returned correctly, but the <i>valid</i> locale is\n     * not, in most cases.\n     * @param type type of information requested, either {@link\n     * android.icu.util.ULocale#VALID_LOCALE} or {@link\n     * android.icu.util.ULocale#ACTUAL_LOCALE}.\n     * @return the information specified by <i>type</i>, or null if\n     * this object was not constructed from locale data.\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.util.ULocale#ACTUAL_LOCALE", "android.icu.util.ULocale#VALID_LOCALE" ]
  }, {
    "name" : " final void setLocale(ULocale valid, ULocale actual)",
    "returnType" : "void",
    "comment" : "\n     * Sets information about the locales that were used to create this\n     * object.  If the object was not constructed from locale data,\n     * both arguments should be set to null.  Otherwise, neither\n     * should be null.  The actual locale must be at the same level or\n     * less specific than the valid locale.  This method is intended\n     * for use by factories or other entities that create objects of\n     * this class.\n     * @param valid the most specific locale containing any resource\n     * data, or null\n     * @param actual the locale containing data used to construct this\n     * object, or null\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * 3.8 or older version did not have localized GMT format\n     * patterns.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DateFormatSymbols getInstance()", "public static DateFormatSymbols getInstance(Locale locale)", "public static DateFormatSymbols getInstance(ULocale locale)", "public static Locale[] getAvailableLocales()", "public static ULocale[] getAvailableULocales()", "public String[] getEras()", "public void setEras(String[] newEras)", "public String[] getEraNames()", "public void setEraNames(String[] newEraNames)", "public String[] getNarrowEras()", "public void setNarrowEras(String[] newNarrowEras)", "public String[] getMonths()", "public String[] getMonths(int context, int width)", "public void setMonths(String[] newMonths)", "public void setMonths(String[] newMonths, int context, int width)", "public String[] getShortMonths()", "public void setShortMonths(String[] newShortMonths)", "public String[] getWeekdays()", "public String[] getWeekdays(int context, int width)", "public void setWeekdays(String[] newWeekdays, int context, int width)", "public void setWeekdays(String[] newWeekdays)", "public String[] getShortWeekdays()", "public void setShortWeekdays(String[] newAbbrevWeekdays)", "public String[] getQuarters(int context, int width)", "public void setQuarters(String[] newQuarters, int context, int width)", "public String[] getYearNames(int context, int width)", "public void setYearNames(String[] yearNames, int context, int width)", "public String[] getZodiacNames(int context, int width)", "public void setZodiacNames(String[] zodiacNames, int context, int width)", "public String getLeapMonthPattern(int context, int width)", "public void setLeapMonthPattern(String leapMonthPattern, int context, int width)", "public String[] getAmPmStrings()", "public void setAmPmStrings(String[] newAmpms)", "public String[] getAmpmNarrowStrings()", "public String getTimeSeparatorString()", "public void setTimeSeparatorString(String newTimeSeparator)", "public String[][] getZoneStrings()", "public void setZoneStrings(String[][] newZoneStrings)", "public String getLocalPatternChars()", "public void setLocalPatternChars(String newLocalPatternChars)", "public Object clone()", "public int hashCode()", "public boolean equals(Object obj)", "protected void initializeData(ULocale desiredLocale, String type)", "private static AospExtendedDateFormatSymbols getExtendedInstance(ULocale desiredLocale, String type)", "public static AospExtendedDateFormatSymbols getExtendedInstance(ULocale locale)", " void initializeData(DateFormatSymbols dfs)", "protected void initializeData(ULocale desiredLocale, ICUResourceBundle b, String calendarType)", "private void initializeData(ULocale desiredLocale, ICUResourceBundle b, String calendarType, AospExtendedDateFormatSymbols aospExtendedDateFormatSymbols)", "private static final boolean arrayOfArrayEquals(Object[][] aa1, Object[][] aa2)", "private String[] loadDayPeriodStrings(Map<String, String> resourceMap, String[] copyFrom)", "private final String[] duplicate(String[] srcArray)", "private final String[][] duplicate(String[][] srcArray)", "public static ResourceBundle getDateFormatBundle(Class<? extends Calendar> calendarClass, Locale locale) throws MissingResourceException", "public static ResourceBundle getDateFormatBundle(Class<? extends Calendar> calendarClass, ULocale locale) throws MissingResourceException", "public static ResourceBundle getDateFormatBundle(Calendar cal, Locale locale) throws MissingResourceException", "public static ResourceBundle getDateFormatBundle(Calendar cal, ULocale locale) throws MissingResourceException", "public final ULocale getLocale(ULocale.Type type)", " final void setLocale(ULocale valid, ULocale actual)", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException" ],
  "variableNames" : [ "FORMAT", "STANDALONE", "NUMERIC", "DT_CONTEXT_COUNT", "ABBREVIATED", "WIDE", "NARROW", "SHORT", "DT_WIDTH_COUNT", "DT_LEAP_MONTH_PATTERN_FORMAT_WIDE", "DT_LEAP_MONTH_PATTERN_FORMAT_ABBREV", "DT_LEAP_MONTH_PATTERN_FORMAT_NARROW", "DT_LEAP_MONTH_PATTERN_STANDALONE_WIDE", "DT_LEAP_MONTH_PATTERN_STANDALONE_ABBREV", "DT_LEAP_MONTH_PATTERN_STANDALONE_NARROW", "DT_LEAP_MONTH_PATTERN_NUMERIC", "DT_MONTH_PATTERN_COUNT", "DEFAULT_TIME_SEPARATOR", "ALTERNATE_TIME_SEPARATOR", "eras", "eraNames", "narrowEras", "months", "shortMonths", "narrowMonths", "standaloneMonths", "standaloneShortMonths", "standaloneNarrowMonths", "weekdays", "shortWeekdays", "shorterWeekdays", "narrowWeekdays", "standaloneWeekdays", "standaloneShortWeekdays", "standaloneShorterWeekdays", "standaloneNarrowWeekdays", "ampms", "ampmsNarrow", "timeSeparator", "shortQuarters", "narrowQuarters", "quarters", "standaloneShortQuarters", "standaloneNarrowQuarters", "standaloneQuarters", "leapMonthPatterns", "shortYearNames", "shortZodiacNames", "zoneStrings", "patternChars", "localPatternChars", "abbreviatedDayPeriods", "wideDayPeriods", "narrowDayPeriods", "standaloneAbbreviatedDayPeriods", "standaloneWideDayPeriods", "standaloneNarrowDayPeriods", "serialVersionUID", "CALENDAR_CLASSES", "contextUsageTypeMap", "capitalization", "millisPerHour", "DFSCACHE", "LEAP_MONTH_PATTERNS_PATHS", "DAY_PERIOD_KEYS", "requestedLocale", "validLocale", "actualLocale" ]
}