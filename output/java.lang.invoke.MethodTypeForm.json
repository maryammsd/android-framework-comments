{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/invoke/MethodTypeForm.java",
  "packageName" : "java.lang.invoke",
  "className" : "MethodTypeForm",
  "comment" : "\n * Shared information for a group of method types, which differ\n * only by reference types, and therefore share a common erasure\n * and wrapping.\n * <p>\n * For an empirical discussion of the structure of method types,\n * see <a href=\"http://groups.google.com/group/jvm-languages/browse_thread/thread/ac9308ae74da9b7e/\">\n * the thread \"Avoiding Boxing\" on jvm-languages</a>.\n * There are approximately 2000 distinct erased method types in the JDK.\n * There are a little over 10 times that number of unerased types.\n * No more than half of these are likely to be loaded at once.\n * @author John Rose\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "argToSlotTable",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "slotToArgTable",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "argCounts",
    "type" : "long",
    "comment" : " packed slot & value counts",
    "links" : [ ]
  }, {
    "name" : "primCounts",
    "type" : "long",
    "comment" : " packed prim & double counts",
    "links" : [ ]
  }, {
    "name" : "erasedType",
    "type" : "MethodType",
    "comment" : " the canonical erasure",
    "links" : [ ]
  }, {
    "name" : "basicType",
    "type" : "MethodType",
    "comment" : " the canonical erasure, with primitives simplified",
    "links" : [ ]
  }, {
    "name" : "NO_CHANGE",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "ERASE",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "WRAP",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "UNWRAP",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "INTS",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "LONGS",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  }, {
    "name" : "RAW_RETURN",
    "type" : "int",
    "comment" : " Codes for {@link #canonicalize(java.lang.Class, int)}.\n     * ERASE means change every reference to {@code Object}.\n     * WRAP means convert primitives (including {@code void} to their\n     * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\n     * INTS means convert all non-void primitive types to int or long,\n     * according to size.  LONGS means convert all non-void primitives\n     * to long, regardless of size.  RAW_RETURN means convert a type\n     * (assumed to be a return type) to int if it is smaller than an int,\n     * or if it is void.\n     ",
    "links" : [ "#canonicalize(java.lang.Class" ]
  } ],
  "methods" : [ {
    "name" : "public MethodType erasedType()",
    "returnType" : "MethodType",
    "comment" : " Return the type corresponding uniquely (1-1) to this MT-form.\n     *  It might have any primitive returns or arguments, but will have no references except Object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MethodType basicType()",
    "returnType" : "MethodType",
    "comment" : " Return the basic type derived from the erased type of this MT-form.\n     *  A basic type is erased (all references Object) and also has all primitive\n     *  types (except int, long, float, double, void) normalized to int.\n     *  Such basic types correspond to low-level JVM calling sequences.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean assertIsBasicType()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long pack(int a, int b, int c, int d)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char unpack(long packed, int word)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int parameterCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int parameterSlotCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int returnCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int returnSlotCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int primitiveParameterCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int longPrimitiveParameterCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int primitiveReturnCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int longPrimitiveReturnCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPrimitives()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasNonVoidPrimitives()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLongPrimitives()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int parameterToArgSlot(int i)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int argSlotToParameter(int argSlot)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static MethodTypeForm findForm(MethodType mt)",
    "returnType" : "MethodTypeForm",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static MethodType canonicalize(MethodType mt, int howRet, int howArgs)",
    "returnType" : "MethodType",
    "comment" : " Canonicalize the types in the given method type.\n     * If any types change, intern the new type, and return it.\n     * Otherwise return null.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Class<?> canonicalize(Class<?> t, int how)",
    "returnType" : "Class<?>",
    "comment" : " Canonicalize the given return or param type.\n     *  Return null if the type is already canonicalized.\n     ",
    "links" : [ ]
  }, {
    "name" : " static Class<?>[] canonicalizeAll(Class<?>[] ts, int how)",
    "returnType" : "Class<?>[]",
    "comment" : " Canonicalize each param type in the given array.\n     *  Return null if all types are already canonicalized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MethodType erasedType()", "public MethodType basicType()", "private boolean assertIsBasicType()", "private static long pack(int a, int b, int c, int d)", "private static char unpack(long packed, int word)", "public int parameterCount()", "public int parameterSlotCount()", "public int returnCount()", "public int returnSlotCount()", "public int primitiveParameterCount()", "public int longPrimitiveParameterCount()", "public int primitiveReturnCount()", "public int longPrimitiveReturnCount()", "public boolean hasPrimitives()", "public boolean hasNonVoidPrimitives()", "public boolean hasLongPrimitives()", "public int parameterToArgSlot(int i)", "public int argSlotToParameter(int argSlot)", " static MethodTypeForm findForm(MethodType mt)", "public static MethodType canonicalize(MethodType mt, int howRet, int howArgs)", " static Class<?> canonicalize(Class<?> t, int how)", " static Class<?>[] canonicalizeAll(Class<?>[] ts, int how)", "public String toString()" ],
  "variableNames" : [ "argToSlotTable", "slotToArgTable", "argCounts", "primCounts", "erasedType", "basicType", "NO_CHANGE", "ERASE", "WRAP", "UNWRAP", "INTS", "LONGS", "RAW_RETURN" ]
}