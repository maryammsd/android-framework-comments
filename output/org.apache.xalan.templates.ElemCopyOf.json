{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemCopyOf.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemCopyOf",
  "comment" : "\n * Implement xsl:copy-of.\n * <pre>\n * <!ELEMENT xsl:copy-of EMPTY>\n * <!ATTLIST xsl:copy-of select %expr; #REQUIRED>\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#copy-of\">copy-of in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_selectExpression",
    "type" : "XPath",
    "comment" : "\n   * The required select attribute contains an expression.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSelect(XPath expr)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"select\" attribute.\n   * The required select attribute contains an expression.\n   *\n   * @param expr Expression for select attribute \n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getSelect()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"select\" attribute.\n   * The required select attribute contains an expression.\n   *\n   * @return Expression for select attribute \n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * The xsl:copy-of element can be used to insert a result tree\n   * fragment into the result tree, without first converting it to\n   * a string as xsl:value-of does (see [7.6.1 Generating Text with\n   * xsl:value-of]).\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to this node's child list\n   *\n   * @return Child just added to child list\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSelect(XPath expr)", "public XPath getSelect()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_selectExpression" ]
}