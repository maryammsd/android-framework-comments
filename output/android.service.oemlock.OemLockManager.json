{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/oemlock/OemLockManager.java",
  "packageName" : "android.service.oemlock",
  "className" : "OemLockManager",
  "comment" : "\n * Interface for managing the OEM lock on the device.\n *\n * This will only be available if the device implements OEM lock protection.\n *\n * Multiple actors have an opinion on whether the device can be OEM unlocked and they must all be in\n * agreement for unlock to be possible.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IOemLockService",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getLockName()",
    "returnType" : "String",
    "comment" : "\n     * Returns a vendor specific name for the OEM lock.\n     *\n     * This value is used to identify the security protocol used by locks.\n     *\n     * @return The name of the OEM lock or {@code null} if failed to get the name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOemUnlockAllowedByCarrier(boolean allowed, @Nullable byte[] signature)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the carrier has allowed this device to be OEM unlocked.\n     *\n     * Depending on the implementation, the validity of the request might need to be proved. This\n     * can be acheived by passing a signature that the system will use to verify the request is\n     * legitimate.\n     *\n     * All actors involved must agree for OEM unlock to be possible.\n     *\n     * @param allowed Whether the device should be allowed to be unlocked.\n     * @param signature Optional proof of request validity, {@code null} for none.\n     * @throws IllegalArgumentException if a signature is required but was not provided.\n     * @throws SecurityException if the wrong signature was provided.\n     *\n     * @see #isOemUnlockAllowedByCarrier()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOemUnlockAllowedByCarrier()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the carrier has allowed this device to be OEM unlocked.\n     * @return Whether OEM unlock is allowed by the carrier, or true if no OEM lock is present.\n     *\n     * @see #setOemUnlockAllowedByCarrier(boolean, byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOemUnlockAllowedByUser(boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the user has allowed this device to be unlocked.\n     *\n     * All actors involved must agree for OEM unlock to be possible.\n     *\n     * @param allowed Whether the device should be allowed to be unlocked.\n     * @throws SecurityException if the user is not allowed to unlock the device.\n     *\n     * @see #isOemUnlockAllowedByUser()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOemUnlockAllowedByUser()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether, or not, the user has allowed this device to be OEM unlocked.\n     * @return Whether OEM unlock is allowed by the user, or true if no OEM lock is present.\n     *\n     * @see #setOemUnlockAllowedByUser(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOemUnlockAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the bootloader is able to OEM unlock the device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceOemUnlocked()",
    "returnType" : "boolean",
    "comment" : "\n     * @return Whether the device has been OEM unlocked by the bootloader.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getLockName()", "public void setOemUnlockAllowedByCarrier(boolean allowed, @Nullable byte[] signature)", "public boolean isOemUnlockAllowedByCarrier()", "public void setOemUnlockAllowedByUser(boolean allowed)", "public boolean isOemUnlockAllowedByUser()", "public boolean isOemUnlockAllowed()", "public boolean isDeviceOemUnlocked()" ],
  "variableNames" : [ "mService" ]
}