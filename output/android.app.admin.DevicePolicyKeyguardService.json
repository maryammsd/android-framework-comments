{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/admin/DevicePolicyKeyguardService.java",
  "packageName" : "android.app.admin",
  "className" : "DevicePolicyKeyguardService",
  "comment" : "\n * Client interface for providing the SystemUI with secondary lockscreen information.\n *\n * <p>An implementation must be provided by the default configured supervision app that is set as\n * Profile Owner or Device Owner when {@link DevicePolicyManager#setSecondaryLockscreenEnabled} is\n * set to true and the service must be declared in the manifest as handling the action\n * {@link DevicePolicyManager#ACTION_BIND_SECONDARY_LOCKSCREEN_SERVICE}, otherwise the keyguard\n * will fail to bind to the service and continue to unlock.\n *\n * @see DevicePolicyManager#setSecondaryLockscreenEnabled\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IKeyguardCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IKeyguardClient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IBinder onBind(@Nullable Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SurfaceControlViewHost.SurfacePackage onCreateKeyguardSurface(@NonNull IBinder hostInputToken)",
    "returnType" : "SurfaceControlViewHost.SurfacePackage",
    "comment" : "\n     * Called by keyguard once the host surface for the secondary lockscreen is created and ready to\n     * display remote content.\n     *\n     * <p>Implementations are expected to create a Surface hierarchy with view elements for the\n     * admin's desired secondary lockscreen UI, and optionally, interactive elements\n     * that will allow the user to dismiss the secondary lockscreen, subject to the implementation's\n     * requirements. The view hierarchy is expected to be embedded via the\n     * {@link SurfaceControlViewHost} APIs, and returned as a SurfacePackage via\n     * {@link SurfaceControlViewHost#getSurfacePackage}for the keyguard to reparent into its\n     * prepared SurfaceView.\n     *\n     * @param hostInputToken Token of the SurfaceView which will hosting the embedded hierarchy,\n     *                       primarily required by {@link SurfaceControlViewHost} for ANR reporting.\n     *                       It will be provided by the keyguard via\n     *                       {@link android.view.SurfaceView#getHostToken}.\n     * @return the {@link SurfaceControlViewHost.SurfacePackage} for the Surface the\n     *      secondary lockscreen content is attached to.\n     ",
    "links" : [ "SurfaceControlViewHost.SurfacePackage", "android.view.SurfaceControlViewHost#getSurfacePackage", "android.view.SurfaceView#getHostToken", "android.view.SurfaceControlViewHost" ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Signals to keyguard that the secondary lock screen is ready to be dismissed.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mHandler", "mCallback", "mClient" ],
  "methodNames" : [ "public void onDestroy()", "public final IBinder onBind(@Nullable Intent intent)", "public SurfaceControlViewHost.SurfacePackage onCreateKeyguardSurface(@NonNull IBinder hostInputToken)", "public void dismiss()" ]
}