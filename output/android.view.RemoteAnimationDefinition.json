{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/RemoteAnimationDefinition.java",
  "packageName" : "android.view",
  "className" : "RemoteAnimationDefinition",
  "comment" : "\n * Defines which animation types should be overridden by which remote animation.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTransitionAnimationMap",
    "type" : "SparseArray<RemoteAnimationAdapterEntry>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<RemoteAnimationDefinition>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addRemoteAnimation(@TransitionOldType int transition, @ActivityType int activityTypeFilter, RemoteAnimationAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Registers a remote animation for a specific transition.\n     *\n     * @param transition The old transition type. Must be one of WindowManager.TRANSIT_OLD_* values.\n     * @param activityTypeFilter The remote animation only runs if an activity with type of this\n     *                           parameter is involved in the transition.\n     * @param adapter The adapter that described how to run the remote animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRemoteAnimation(@TransitionOldType int transition, RemoteAnimationAdapter adapter)",
    "returnType" : "void",
    "comment" : "\n     * Registers a remote animation for a specific transition without defining an activity type\n     * filter.\n     *\n     * @param transition The old transition type. Must be one of WindowManager.TRANSIT_OLD_* values.\n     * @param adapter The adapter that described how to run the remote animation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTransition(@TransitionOldType int transition, ArraySet<Integer> activityTypes)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a remote animation for specific transition is defined.\n     *\n     * @param transition The old transition type. Must be one of WindowManager.TRANSIT_OLD_* values.\n     * @param activityTypes The set of activity types of activities that are involved in the\n     *                      transition. Will be used for filtering.\n     * @return Whether this definition has defined a remote animation for the specified transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public RemoteAnimationAdapter getAdapter(@TransitionOldType int transition, ArraySet<Integer> activityTypes)",
    "returnType" : "RemoteAnimationAdapter",
    "comment" : "\n     * Retrieves the remote animation for a specific transition.\n     *\n     * @param transition The old transition type. Must be one of WindowManager.TRANSIT_OLD_* values.\n     * @param activityTypes The set of activity types of activities that are involved in the\n     *                      transition. Will be used for filtering.\n     * @return The remote animation adapter for the specified transition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCallingPidUid(int pid, int uid)",
    "returnType" : "void",
    "comment" : "\n     * To be called by system_server to keep track which pid is running the remote animations inside\n     * this definition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void linkToDeath(IBinder.DeathRecipient deathRecipient)",
    "returnType" : "void",
    "comment" : "\n     * Links the death of the runner to the provided death recipient.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addRemoteAnimation(@TransitionOldType int transition, @ActivityType int activityTypeFilter, RemoteAnimationAdapter adapter)", "public void addRemoteAnimation(@TransitionOldType int transition, RemoteAnimationAdapter adapter)", "public boolean hasTransition(@TransitionOldType int transition, ArraySet<Integer> activityTypes)", "public RemoteAnimationAdapter getAdapter(@TransitionOldType int transition, ArraySet<Integer> activityTypes)", "public void setCallingPidUid(int pid, int uid)", "public void linkToDeath(IBinder.DeathRecipient deathRecipient)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "mTransitionAnimationMap", "CREATOR" ]
}