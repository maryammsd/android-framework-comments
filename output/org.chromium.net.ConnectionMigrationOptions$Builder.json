{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/ConnectionMigrationOptions.java",
  "packageName" : "org.chromium.net",
  "className" : "Builder",
  "comment" : " Builder for {@link ConnectionMigrationOptions}. ",
  "links" : [ "org.chromium.net.ConnectionMigrationOptions" ],
  "variables" : [ {
    "name" : "mEnableDefaultNetworkConnectionMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnablePathDegradationMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowServerMigration",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMigrateIdleConnections",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleConnectionMigrationPeriodSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetryPreHandshakeErrorsOnAlternateNetwork",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowNonDefaultNetworkUsage",
    "type" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxTimeOnNonDefaultNetworkSeconds",
    "type" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxWriteErrorEagerMigrationsCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxPathDegradingEagerMigrationsCount",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder enableDefaultNetworkMigration(boolean enableDefaultNetworkConnectionMigration)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables the possibility of migrating connections on default network change. If enabled,\n         * active QUIC connections will be migrated onto the new network when the platform indicates\n         * that the default network is changing.\n         *\n         * @see <a href=\"https://developer.android.com/training/basics/network-ops/reading-network-state#listening-events\">Android\n         *     Network State</a>\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder enablePathDegradationMigration(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables the possibility of migrating connections if the current path is performing\n         * poorly.\n         *\n         * <p>Depending on other configuration, this can result to migrating the connections within\n         * the same default network, or to a non-default network.\n         *\n         * @see #allowNonDefaultNetworkUsage(boolean)\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder allowServerMigration(boolean allowServerMigration)",
    "returnType" : "Builder",
    "comment" : "\n         * Enables the possibility of migrating connections to an alternate server address\n         * at the server's request.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder migrateIdleConnections(boolean migrateIdleConnections)",
    "returnType" : "Builder",
    "comment" : "\n         * Configures whether migration of idle connections should be enabled or not.\n         *\n         * <p>If set to true, idle connections will be migrated too, as long as they haven't been\n         * idle for too long. The setting is shared for all connection migration types. The maximum\n         * idle period for which connections will still be migrated can be customized using {@link\n         * #setIdleConnectionMigrationPeriodSeconds}.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#setIdleConnectionMigrationPeriodSeconds" ]
  }, {
    "name" : "public Builder setIdleConnectionMigrationPeriodSeconds(long idleConnectionMigrationPeriodSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum idle period for which connections will still be migrated, in seconds.\n         * The setting is shared for all connection migration types.\n         *\n         * <p>Only relevant if {@link #migrateIdleConnections(boolean)} is enabled.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#migrateIdleConnections(boolean)" ]
  }, {
    "name" : "public Builder allowNonDefaultNetworkUsage(boolean enable)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether connections can be migrated to an alternate network when Cronet detects\n         * a degradation of the path currently in use.\n         *\n         * <p>Note: This setting can result in requests being sent on non-default metered networks.\n         * Make sure you're using metered networks sparingly, and fine tune parameters like\n         * {@link #setMaxPathDegradingNonDefaultNetworkMigrationsCount(int)}\n         * and {@link #setMaxTimeOnNonDefaultNetworkSeconds} to limit the time on non-default\n         * networks.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#setMaxPathDegradingNonDefaultNetworkMigrationsCount(int)", "#setMaxTimeOnNonDefaultNetworkSeconds" ]
  }, {
    "name" : "public Builder setMaxTimeOnNonDefaultNetworkSeconds(long maxTimeOnNonDefaultNetworkSeconds)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum period for which eagerly migrated connections should remain on the\n         * non-default network before they're migrated back. This time is not cumulative - each\n         * migration off the default network for each connection measures and compares to this value\n         * separately.\n         *\n         * <p>Only relevant if {@link #allowNonDefaultNetworkUsage(boolean)} is enabled.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#allowNonDefaultNetworkUsage(boolean)" ]
  }, {
    "name" : "public Builder setMaxWriteErrorNonDefaultNetworkMigrationsCount(int maxWriteErrorEagerMigrationsCount)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum number of migrations to the non-default network upon encountering write\n         * errors. Counted cumulatively per network per connection.\n         *\n         * <p>Only relevant if {@link #allowNonDefaultNetworkUsage(boolean)} is enabled.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#allowNonDefaultNetworkUsage(boolean)" ]
  }, {
    "name" : "public Builder setMaxPathDegradingNonDefaultNetworkMigrationsCount(int maxPathDegradingEagerMigrationsCount)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the maximum number of migrations to the non-default network upon encountering path\n         * degradation for the existing connection. Counted cumulatively per network per connection.\n         *\n         * <p>Only relevant if {@link #allowNonDefaultNetworkUsage(boolean)} is enabled.\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#allowNonDefaultNetworkUsage(boolean)" ]
  }, {
    "name" : "public Builder retryPreHandshakeErrorsOnNonDefaultNetwork(boolean retryPreHandshakeErrorsOnAlternateNetwork)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether connections with pre-handshake errors should be retried on an alternative\n         * network.\n         *\n         * <p>If true, a new connection may be established an alternate network if it fails\n         * on the default network before handshake is confirmed.\n         *\n         * <p>Note: similarly to {@link #allowNonDefaultNetworkUsage(boolean)} this setting can\n         * result in requests being sent on non-default metered networks. Use with caution!\n         *\n         * @return this builder for chaining\n         ",
    "links" : [ "#allowNonDefaultNetworkUsage(boolean)" ]
  }, {
    "name" : "public ConnectionMigrationOptions build()",
    "returnType" : "ConnectionMigrationOptions",
    "comment" : "\n         * Creates and returns the final {@link ConnectionMigrationOptions} instance, based on the\n         * values in this builder.\n         ",
    "links" : [ "org.chromium.net.ConnectionMigrationOptions" ]
  } ],
  "methodNames" : [ "public Builder enableDefaultNetworkMigration(boolean enableDefaultNetworkConnectionMigration)", "public Builder enablePathDegradationMigration(boolean enable)", "public Builder allowServerMigration(boolean allowServerMigration)", "public Builder migrateIdleConnections(boolean migrateIdleConnections)", "public Builder setIdleConnectionMigrationPeriodSeconds(long idleConnectionMigrationPeriodSeconds)", "public Builder allowNonDefaultNetworkUsage(boolean enable)", "public Builder setMaxTimeOnNonDefaultNetworkSeconds(long maxTimeOnNonDefaultNetworkSeconds)", "public Builder setMaxWriteErrorNonDefaultNetworkMigrationsCount(int maxWriteErrorEagerMigrationsCount)", "public Builder setMaxPathDegradingNonDefaultNetworkMigrationsCount(int maxPathDegradingEagerMigrationsCount)", "public Builder retryPreHandshakeErrorsOnNonDefaultNetwork(boolean retryPreHandshakeErrorsOnAlternateNetwork)", "public ConnectionMigrationOptions build()" ],
  "variableNames" : [ "mEnableDefaultNetworkConnectionMigration", "mEnablePathDegradationMigration", "mAllowServerMigration", "mMigrateIdleConnections", "mIdleConnectionMigrationPeriodSeconds", "mRetryPreHandshakeErrorsOnAlternateNetwork", "mAllowNonDefaultNetworkUsage", "mMaxTimeOnNonDefaultNetworkSeconds", "mMaxWriteErrorEagerMigrationsCount", "mMaxPathDegradingEagerMigrationsCount" ]
}