{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/SearchSuggestionSpec.java",
  "packageName" : "android.app.appsearch",
  "className" : "SearchSuggestionSpec",
  "comment" : "\n * This class represents the specification logic for AppSearch. It can be used to set the filter and\n * settings of search a suggestions.\n *\n * @see AppSearchSession#searchSuggestion\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SearchSuggestionSpec>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterNamespaces",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterSchemas",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterProperties",
    "type" : "Bundle",
    "comment" : " schema type and value is a list of target property paths in that schema to search over.",
    "links" : [ ]
  }, {
    "name" : "mFilterDocumentIds",
    "type" : "Bundle",
    "comment" : " namespace and value is a list of target document ids in that namespace to search over.",
    "links" : [ ]
  }, {
    "name" : "mRankingStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaximumResultCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUGGESTION_RANKING_STRATEGY_DOCUMENT_COUNT",
    "type" : "int",
    "comment" : "\n     * Ranked by the document count that contains the term.\n     *\n     * <p>Suppose the following document is in the index.\n     *\n     * <pre>Doc1 contains: term1 term2 term2 term2</pre>\n     *\n     * <pre>Doc2 contains: term1</pre>\n     *\n     * <p>Then, suppose that a search suggestion for \"t\" is issued with the DOCUMENT_COUNT, the\n     * returned {@link SearchSuggestionResult}s will be: term1, term2. The term1 will have higher\n     * score and appear in the results first.\n     ",
    "links" : [ "android.app.appsearch.SearchSuggestionResult" ]
  }, {
    "name" : "SUGGESTION_RANKING_STRATEGY_TERM_FREQUENCY",
    "type" : "int",
    "comment" : "\n     * Ranked by the term appear frequency.\n     *\n     * <p>Suppose the following document is in the index.\n     *\n     * <pre>Doc1 contains: term1 term2 term2 term2</pre>\n     *\n     * <pre>Doc2 contains: term1</pre>\n     *\n     * <p>Then, suppose that a search suggestion for \"t\" is issued with the TERM_FREQUENCY, the\n     * returned {@link SearchSuggestionResult}s will be: term2, term1. The term2 will have higher\n     * score and appear in the results first.\n     ",
    "links" : [ "android.app.appsearch.SearchSuggestionResult" ]
  }, {
    "name" : "SUGGESTION_RANKING_STRATEGY_NONE",
    "type" : "int",
    "comment" : " No Ranking, results are returned in arbitrary order. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMaximumResultCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum number of wanted suggestion that will be returned in the result object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getFilterNamespaces()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of namespaces to search over.\n     *\n     * <p>If empty, will search over all namespaces.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRankingStrategy()",
    "returnType" : "int",
    "comment" : " Returns the ranking strategy. ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getFilterSchemas()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns the list of schema to search the suggestion over.\n     *\n     * <p>If empty, will search over all schemas.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<String>> getFilterProperties()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns the map of schema and target properties to search over.\n     *\n     * <p>The keys of the returned map are schema types, and the values are the target property path\n     * in that schema to search over.\n     *\n     * <p>If {@link Builder#addFilterPropertyPaths} was never called, returns an empty map. In this\n     * case AppSearch will search over all schemas and properties.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     ",
    "links" : [ "#addFilterPropertyPaths" ]
  }, {
    "name" : "public Map<String, List<String>> getFilterDocumentIds()",
    "returnType" : "Map<String, List<String>>",
    "comment" : "\n     * Returns the map of namespace and target document ids to search over.\n     *\n     * <p>The keys of the returned map are namespaces, and the values are the target document ids in\n     * that namespace to search over.\n     *\n     * <p>If {@link Builder#addFilterDocumentIds} was never called, returns an empty map. In this\n     * case AppSearch will search over all namespace and document ids.\n     *\n     * <p>Calling this function repeatedly is inefficient. Prefer to retain the Map returned by this\n     * function, rather than calling it multiple times.\n     ",
    "links" : [ "#addFilterDocumentIds" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getMaximumResultCount()", "public List<String> getFilterNamespaces()", "public int getRankingStrategy()", "public List<String> getFilterSchemas()", "public Map<String, List<String>> getFilterProperties()", "public Map<String, List<String>> getFilterDocumentIds()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "CREATOR", "mFilterNamespaces", "mFilterSchemas", "mFilterProperties", "mFilterDocumentIds", "mRankingStrategy", "mMaximumResultCount", "SUGGESTION_RANKING_STRATEGY_DOCUMENT_COUNT", "SUGGESTION_RANKING_STRATEGY_TERM_FREQUENCY", "SUGGESTION_RANKING_STRATEGY_NONE" ]
}