{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/SecretKeyFactory.java",
  "packageName" : "javax.crypto",
  "className" : "SecretKeyFactory",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The algorithm associated with this factory",
    "links" : [ ]
  }, {
    "name" : "spi",
    "type" : "SecretKeyFactorySpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : " lock for mutex during provider selection",
    "links" : [ ]
  }, {
    "name" : "serviceIterator",
    "type" : "Iterator<Service>",
    "comment" : " null once provider is selected",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final SecretKeyFactory getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "SecretKeyFactory",
    "comment" : "\n     * Returns a <code>SecretKeyFactory</code> object that converts\n     * secret keys of the specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new SecretKeyFactory object encapsulating the\n     * SecretKeyFactorySpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested secret-key\n     * algorithm.\n     * See the SecretKeyFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @return the new <code>SecretKeyFactory</code> object.\n     *\n     * @exception NullPointerException if the specified algorithm\n     *          is null.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          SecretKeyFactorySpi implementation for the\n     *          specified algorithm.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final SecretKeyFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "SecretKeyFactory",
    "comment" : "\n     * Returns a <code>SecretKeyFactory</code> object that converts\n     * secret keys of the specified algorithm.\n     *\n     * <p> A new SecretKeyFactory object encapsulating the\n     * SecretKeyFactorySpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested secret-key\n     * algorithm.\n     * See the SecretKeyFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>SecretKeyFactory</code> object.\n     *\n     * @exception NoSuchAlgorithmException if a SecretKeyFactorySpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @exception NullPointerException if the specified algorithm\n     *          is null.\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null or empty.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "#getProviders()" ]
  }, {
    "name" : "public static final SecretKeyFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "SecretKeyFactory",
    "comment" : "\n     * Returns a <code>SecretKeyFactory</code> object that converts\n     * secret keys of the specified algorithm.\n     *\n     * <p> A new SecretKeyFactory object encapsulating the\n     * SecretKeyFactorySpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested secret-key\n     * algorithm.\n     * See the SecretKeyFactory section in the <a href=\n     * \"{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory\">\n     * Java Cryptography Architecture Standard Algorithm Name Documentation</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return the new <code>SecretKeyFactory</code> object.\n     *\n     * @exception NullPointerException if the specified algorithm\n     * is null.\n     *\n     * @exception NoSuchAlgorithmException if a SecretKeyFactorySpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @exception IllegalArgumentException if the <code>provider</code>\n     *          is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>SecretKeyFactory</code> object.\n     *\n     * @return the provider of this <code>SecretKeyFactory</code> object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this <code>SecretKeyFactory</code> object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>SecretKeyFactory</code> object.\n     *\n     * @return the algorithm name of this <code>SecretKeyFactory</code>\n     * object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private SecretKeyFactorySpi nextSpi(SecretKeyFactorySpi oldSpi)",
    "returnType" : "SecretKeyFactorySpi",
    "comment" : "\n     * Update the active spi of this class and return the next\n     * implementation for failover. If no more implemenations are\n     * available, this method returns null. However, the active spi of\n     * this class is never set to null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException",
    "returnType" : "SecretKey",
    "comment" : "\n     * Generates a <code>SecretKey</code> object from the provided key\n     * specification (key material).\n     *\n     * @param keySpec the specification (key material) of the secret key\n     *\n     * @return the secret key\n     *\n     * @exception InvalidKeySpecException if the given key specification\n     * is inappropriate for this secret-key factory to produce a secret key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final KeySpec getKeySpec(SecretKey key, Class<?> keySpec) throws InvalidKeySpecException",
    "returnType" : "KeySpec",
    "comment" : "\n     * Returns a specification (key material) of the given key object\n     * in the requested format.\n     *\n     * @param key the key\n     * @param keySpec the requested format in which the key material shall be\n     * returned\n     *\n     * @return the underlying key specification (key material) in the\n     * requested format\n     *\n     * @exception InvalidKeySpecException if the requested key specification is\n     * inappropriate for the given key (e.g., the algorithms associated with\n     * <code>key</code> and <code>keySpec</code> do not match, or\n     * <code>key</code> references a key on a cryptographic hardware device\n     * whereas <code>keySpec</code> is the specification of a software-based\n     * key), or the given key cannot be dealt with\n     * (e.g., the given key has an algorithm or format not supported by this\n     * secret-key factory).\n     ",
    "links" : [ ]
  }, {
    "name" : "public final SecretKey translateKey(SecretKey key) throws InvalidKeyException",
    "returnType" : "SecretKey",
    "comment" : "\n     * Translates a key object, whose provider may be unknown or potentially\n     * untrusted, into a corresponding key object of this secret-key factory.\n     *\n     * @param key the key whose provider is unknown or untrusted\n     *\n     * @return the translated key\n     *\n     * @exception InvalidKeyException if the given key cannot be processed\n     * by this secret-key factory.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final SecretKeyFactory getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final SecretKeyFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final SecretKeyFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final String getAlgorithm()", "private SecretKeyFactorySpi nextSpi(SecretKeyFactorySpi oldSpi)", "public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException", "public final KeySpec getKeySpec(SecretKey key, Class<?> keySpec) throws InvalidKeySpecException", "public final SecretKey translateKey(SecretKey key) throws InvalidKeyException" ],
  "variableNames" : [ "provider", "algorithm", "spi", "lock", "serviceIterator" ]
}