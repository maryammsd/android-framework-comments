{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/TypeVariable.java",
  "packageName" : "java.lang.reflect",
  "className" : "TypeVariable",
  "comment" : " Removed AnnotatedElement super-class.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Type[] getBounds()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects representing the\n     * upper bound(s) of this type variable.  If no upper bound is\n     * explicitly declared, the upper bound is {@code Object}.\n     *\n     * <p>For each upper bound B: <ul> <li>if B is a parameterized\n     * type or a type variable, it is created, (see {@link\n     * java.lang.reflect.ParameterizedType ParameterizedType} for the\n     * details of the creation process for parameterized types).\n     * <li>Otherwise, B is resolved.  </ul>\n     *\n     * @throws TypeNotPresentException  if any of the\n     *     bounds refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if any of the\n     *     bounds refer to a parameterized type that cannot be instantiated\n     *     for any reason\n     * @return an array of {@code Type}s representing the upper\n     *     bound(s) of this type variable\n     ",
    "links" : [ "java.lang.reflect.ParameterizedType" ]
  }, {
    "name" : " D getGenericDeclaration()",
    "returnType" : "D",
    "comment" : "\n     * Returns the {@code GenericDeclaration} object representing the\n     * generic declaration declared this type variable.\n     *\n     * @return the generic declaration declared for this type variable.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this type variable, as it occurs in the source code.\n     *\n     * @return the name of this type variable, as it appears in the source code\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Type[] getBounds()", " D getGenericDeclaration()", " String getName()" ],
  "variableNames" : [ ]
}