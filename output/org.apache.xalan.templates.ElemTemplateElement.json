{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemTemplateElement.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemTemplateElement",
  "comment" : "\n * An instance of this class represents an element inside\n * an xsl:template class.  It has a single \"execute\" method\n * which is expected to perform the given action on the\n * result tree.\n * This class acts like a Element node, and implements the\n * Element interface, but is not a full implementation\n * of that interface... it only implements enough for\n * basic traversal of the tree.\n *\n * @see Stylesheet\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_lineNumber",
    "type" : "int",
    "comment" : " line number where the current document event ends.\n   *  @serial         ",
    "links" : [ ]
  }, {
    "name" : "m_endLineNumber",
    "type" : "int",
    "comment" : " line number where the current document event ends.\n   *  @serial         ",
    "links" : [ ]
  }, {
    "name" : "m_columnNumber",
    "type" : "int",
    "comment" : " the column number where the current document event ends.\n   *  @serial        ",
    "links" : [ ]
  }, {
    "name" : "m_endColumnNumber",
    "type" : "int",
    "comment" : " the column number where the current document event ends.\n   *  @serial        ",
    "links" : [ ]
  }, {
    "name" : "m_defaultSpace",
    "type" : "boolean",
    "comment" : "\n   * Tell if this element has the default space handling\n   * turned off or on according to the xml:space attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_hasTextLitOnly",
    "type" : "boolean",
    "comment" : "\n   * Tell if this element only has one text child, for optimization purposes.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_hasVariableDecl",
    "type" : "boolean",
    "comment" : "\n   * Tell if this element only has one text child, for optimization purposes.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_declaredPrefixes",
    "type" : "List",
    "comment" : "\n   * The list of namespace declarations for this element only.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_prefixTable",
    "type" : "List",
    "comment" : "\n   * The table of {@link XMLNSDecl}s for this element\n   * and all parent elements, screened for excluded prefixes.\n   * @serial\n   ",
    "links" : [ "org.apache.xalan.templates.XMLNSDecl" ]
  }, {
    "name" : "m_docOrderNumber",
    "type" : "int",
    "comment" : " The *relative* document order number of this element.\n   *  @serial ",
    "links" : [ ]
  }, {
    "name" : "m_parentNode",
    "type" : "ElemTemplateElement",
    "comment" : "\n   * Parent node.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_nextSibling",
    "type" : "ElemTemplateElement",
    "comment" : "\n   * Next sibling.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_firstChild",
    "type" : "ElemTemplateElement",
    "comment" : "\n   * First child.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_DOMBackPointer",
    "type" : "org.w3c.dom.Node",
    "comment" : " DOM backpointer that this element originated from.          ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isCompiledTemplate()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this template is a compiled template.\n   *\n   * @return Boolean flag indicating whether this is a compiled template   \n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return An invalid node name\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName()",
    "returnType" : "String",
    "comment" : "\n   * For now, just return the result of getNodeName(), which \n   * the local name.\n   *\n   * @return The result of getNodeName().\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runtimeInit(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function will be called on top-level elements\n   * only, just before the transform begins.\n   *\n   * @param transformer The XSLT TransformerFactory.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute the element's primary function.  Subclasses of this\n   * function may recursivly execute down the element tree.\n   *\n   * @param transformer The XSLT TransformerFactory.\n   * \n   * @throws TransformerException if any checked exception occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetComposed getStylesheetComposed()",
    "returnType" : "StylesheetComposed",
    "comment" : "\n   * Get the owning \"composed\" stylesheet.  This looks up the\n   * inheritance chain until it calls getStylesheetComposed\n   * on a Stylesheet object, which will Get the owning\n   * aggregated stylesheet, or that stylesheet if it is aggregated.\n   *\n   * @return the owning \"composed\" stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stylesheet getStylesheet()",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get the owning stylesheet.  This looks up the\n   * inheritance chain until it calls getStylesheet\n   * on a Stylesheet object, which will return itself.\n   *\n   * @return the owning stylesheet\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetRoot getStylesheetRoot()",
    "returnType" : "StylesheetRoot",
    "comment" : "\n   * Get the owning root stylesheet.  This looks up the\n   * inheritance chain until it calls StylesheetRoot\n   * on a Stylesheet object, which will return a reference\n   * to the root stylesheet.\n   *\n   * @return the owning root stylesheet\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called during recomposition to\n   * control how this element is composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endCompose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This after the template's children have been composed.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(String msg, Object[] args)",
    "returnType" : "void",
    "comment" : "\n   * Throw a template element runtime error.  (Note: should we throw a TransformerException instead?)\n   *\n   * @param msg key of the error that occured.\n   * @param args Arguments to be used in the message\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(String msg)",
    "returnType" : "void",
    "comment" : "\n   * Throw an error.\n   *\n   * @param msg Message key for the error\n   *\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node appendChild(Node newChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Add a child to the child list.\n   * NOTE: This presumes the child did not previously have a parent.\n   * Making that assumption makes this a less expensive operation -- but\n   * requires that if you *do* want to reparent a node, you use removeChild()\n   * first to remove it from its previous context. Failing to do so will\n   * damage the tree.\n   *\n   * @param newChild Child to be added to child list\n   *\n   * @return Child just added to the child list\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement elem)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   * NOTE: This presumes the child did not previously have a parent.\n   * Making that assumption makes this a less expensive operation -- but\n   * requires that if you *do* want to reparent a node, you use removeChild()\n   * first to remove it from its previous context. Failing to do so will\n   * damage the tree.\n   *\n   * @param elem Child to be added to child list\n   *\n   * @return Child just added to the child list\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildNodes()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if there are child nodes.\n   *\n   * @return True if there are child nodes\n   ",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "\n   * Get the type of the node.\n   *\n   * @return Constant for this node type\n   ",
    "links" : [ ]
  }, {
    "name" : "public NodeList getChildNodes()",
    "returnType" : "NodeList",
    "comment" : "\n   * Return the nodelist (same reference).\n   *\n   * @return The nodelist containing the child nodes (this)\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement removeChild(ElemTemplateElement childETE)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Remove a child.\n   * ADDED 9/8/200 to support compilation.\n   * TODO: ***** Alternative is \"removeMe() from my parent if any\"\n   * ... which is less well checked, but more convenient in some cases.\n   * Given that we assume only experts are calling this class, it might\n   * be preferable. It's less DOMish, though.\n   * \n   * @param childETE The child to remove. This operation is a no-op\n   * if oldChild is not a child of this node.\n   *\n   * @return the removed child, or null if the specified\n   * node was not a child of this element.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node replaceChild(Node newChild, Node oldChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Replace the old child with a new child.\n   *\n   * @param newChild New child to replace with\n   * @param oldChild Old child to be replaced\n   *\n   * @return The new child\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node insertBefore(Node newChild, Node refChild) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Unimplemented. See org.w3c.dom.Node\n   *\n   * @param newChild New child node to insert\n   * @param refChild Insert in front of this child\n   *\n   * @return null\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem, ElemTemplateElement oldChildElem)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Replace the old child with a new child.\n   *\n   * @param newChildElem New child to replace with\n   * @param oldChildElem Old child to be replaced\n   *\n   * @return The new child\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * NodeList method: Count the immediate children of this node\n   *\n   * @return The count of children of this node\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node item(int index)",
    "returnType" : "Node",
    "comment" : "\n   * NodeList method: Return the Nth immediate child of this node, or\n   * null if the index is out of bounds.\n   *\n   * @param index Index of child to find\n   * @return org.w3c.dom.Node: the child node at given index\n   ",
    "links" : [ ]
  }, {
    "name" : "public Document getOwnerDocument()",
    "returnType" : "Document",
    "comment" : "\n   * Get the stylesheet owner.\n   *\n   * @return The stylesheet owner\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplate getOwnerXSLTemplate()",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Get the owning xsl:template element.\n   *\n   * @return The owning xsl:template element, this element if it is a xsl:template, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getTagName()",
    "returnType" : "String",
    "comment" : "\n   * Return the element name.\n   *\n   * @return The element name\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTextLitOnly()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this element only has one text child, for optimization purposes.\n   * @return true of this element only has one text literal child.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseIdentifier()",
    "returnType" : "String",
    "comment" : "\n   * Return the base identifier.\n   *\n   * @return The base identifier \n   ",
    "links" : [ ]
  }, {
    "name" : "public int getEndLineNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the line number where the current document event ends.\n   * Note that this is the line position of the first character\n   * after the text associated with the document event.\n   * @return The line number, or -1 if none is available.\n   * @see #getColumnNumber\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the line number where the current document event ends.\n   * Note that this is the line position of the first character\n   * after the text associated with the document event.\n   * @return The line number, or -1 if none is available.\n   * @see #getColumnNumber\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getEndColumnNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the column number where the current document event ends.\n   * Note that this is the column number of the first\n   * character after the text associated with the document\n   * event.  The first column in a line is position 1.\n   * @return The column number, or -1 if none is available.\n   * @see #getLineNumber\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the column number where the current document event ends.\n   * Note that this is the column number of the first\n   * character after the text associated with the document\n   * event.  The first column in a line is position 1.\n   * @return The column number, or -1 if none is available.\n   * @see #getLineNumber\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPublicId()",
    "returnType" : "String",
    "comment" : "\n   * Return the public identifier for the current document event.\n   * <p>This will be the public identifier\n   * @return A string containing the public identifier, or\n   *         null if none is available.\n   * @see #getSystemId\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n   * Return the system identifier for the current document event.\n   *\n   * <p>If the system identifier is a URL, the parser must resolve it\n   * fully before passing it to the application.</p>\n   *\n   * @return A string containing the system identifier, or null\n   *         if none is available.\n   * @see #getPublicId\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocaterInfo(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n   * Set the location information for this element.\n   *\n   * @param locator Source Locator with location information for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setEndLocaterInfo(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n   * Set the end location information for this element.\n   *\n   * @param locator Source Locator with location information for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVariableDecl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setXmlSpace(int v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xml:space\" attribute.\n   * A text node is preserved if an ancestor element of the text node\n   * has an xml:space attribute with a value of preserve, and\n   * no closer ancestor element has xml:space with a value of default.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Text\">section-Creating-Text in XSLT Specification</a>\n   *\n   * @param v  Enumerated value, either Constants.ATTRVAL_PRESERVE \n   * or Constants.ATTRVAL_STRIP.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getXmlSpace()",
    "returnType" : "boolean",
    "comment" : "\n   * Get the \"xml:space\" attribute.\n   * A text node is preserved if an ancestor element of the text node\n   * has an xml:space attribute with a value of preserve, and\n   * no closer ancestor element has xml:space with a value of default.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Text\">section-Creating-Text in XSLT Specification</a>\n   *\n   * @return The value of the xml:space attribute\n   ",
    "links" : [ ]
  }, {
    "name" : "public List getDeclaredPrefixes()",
    "returnType" : "List",
    "comment" : "\n   * Return a table that contains all prefixes available\n   * within this element context.\n   *\n   * @return Vector containing the prefixes available within this\n   * element context \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPrefixes(NamespaceSupport nsSupport) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * From the SAX2 helper class, set the namespace table for\n   * this element.  Take care to call resolveInheritedNamespaceDecls.\n   * after all namespace declarations have been added.\n   *\n   * @param nsSupport non-null reference to NamespaceSupport from \n   * the ContentHandler.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPrefixes(NamespaceSupport nsSupport, boolean excludeXSLDecl) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Copy the namespace declarations from the NamespaceSupport object.  \n   * Take care to call resolveInheritedNamespaceDecls.\n   * after all namespace declarations have been added.\n   *\n   * @param nsSupport non-null reference to NamespaceSupport from \n   * the ContentHandler.\n   * @param excludeXSLDecl true if XSLT namespaces should be ignored.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context)",
    "returnType" : "String",
    "comment" : "\n   * Fullfill the PrefixResolver interface.  Calling this for this class \n   * will throw an error.\n   *\n   * @param prefix The prefix to look up, which may be an empty string (\"\") \n   *               for the default Namespace.\n   * @param context The node context from which to look up the URI.\n   *\n   * @return null if the error listener does not choose to throw an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespaceForPrefix(String prefix)",
    "returnType" : "String",
    "comment" : "\n   * Given a namespace, get the corrisponding prefix.\n   * 9/15/00: This had been iteratively examining the m_declaredPrefixes\n   * field for this node and its parents. That makes life difficult for\n   * the compilation experiment, which doesn't have a static vector of\n   * local declarations. Replaced a recursive solution, which permits\n   * easier subclassing/overriding.\n   *\n   * @param prefix non-null reference to prefix string, which should map \n   *               to a namespace URL.\n   *\n   * @return The namespace URL that the prefix maps to, or null if no \n   *         mapping can be found.\n   ",
    "links" : [ ]
  }, {
    "name" : " List getPrefixTable()",
    "returnType" : "List",
    "comment" : "\n   * Return a table that contains all prefixes available\n   * within this element context.\n   *\n   * @return reference to vector of {@link XMLNSDecl}s, which may be null.\n   ",
    "links" : [ "org.apache.xalan.templates.XMLNSDecl" ]
  }, {
    "name" : " void setPrefixTable(List list)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExcludeResultPrefix(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not the passed URL is contained flagged by\n   * the \"extension-element-prefixes\" property.  This method is overridden \n   * by {@link ElemLiteralResult#containsExcludeResultPrefix}.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param prefix non-null reference to prefix that might be excluded.\n   *\n   * @return true if the prefix should normally be excluded.\n   ",
    "links" : [ "org.apache.xalan.templates.ElemLiteralResult#containsExcludeResultPrefix" ]
  }, {
    "name" : "private boolean excludeResultNSDecl(String prefix, String uri) throws TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the result namespace decl should be excluded.  Should be called before\n   * namespace aliasing (I think).\n   *\n   * @param prefix non-null reference to prefix.\n   * @param uri reference to namespace that prefix maps to, which is protected \n   *            for null, but should really never be passed as null.\n   *\n   * @return true if the given namespace should be excluded.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void resolvePrefixTables() throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Combine the parent's namespaces with this namespace\n   * for fast processing, taking care to reference the\n   * parent's namespace if this namespace adds nothing new.\n   * (Recursive method, walking the elements depth-first,\n   * processing parents before children).\n   * Note that this method builds m_prefixTable with aliased \n   * namespaces, *not* the original namespaces.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void addOrReplaceDecls(XMLNSDecl newDecl)",
    "returnType" : "void",
    "comment" : "\n   * Add or replace this namespace declaration in list\n   * of namespaces in scope for this element.\n   *\n   * @param newDecl namespace declaration to add to list\n   ",
    "links" : [ ]
  }, {
    "name" : " boolean needToCheckExclude()",
    "returnType" : "boolean",
    "comment" : "\n   * Return whether we need to check namespace prefixes \n   * against and exclude result prefixes list.\n   ",
    "links" : [ ]
  }, {
    "name" : " void executeNSDecls(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Send startPrefixMapping events to the result tree handler\n   * for all declared prefix mappings in the stylesheet.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void executeNSDecls(TransformerImpl transformer, String ignorePrefix) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Send startPrefixMapping events to the result tree handler\n   * for all declared prefix mappings in the stylesheet.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param ignorePrefix string prefix to not startPrefixMapping\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Send endPrefixMapping events to the result tree handler\n   * for all declared prefix mappings in the stylesheet.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " void unexecuteNSDecls(TransformerImpl transformer, String ignorePrefix) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Send endPrefixMapping events to the result tree handler\n   * for all declared prefix mappings in the stylesheet.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param ignorePrefix string prefix to not endPrefixMapping\n   * \n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setUid(int i)",
    "returnType" : "void",
    "comment" : "\n   * Set the UID (document order index).\n   *\n   * @param i Index of this child.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getUid()",
    "returnType" : "int",
    "comment" : "\n   * Get the UID (document order index).\n   *\n   * @return Index of this child\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getParentNode()",
    "returnType" : "Node",
    "comment" : "\n   * Get the parent as a Node.\n   *\n   * @return This node's parent node\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getParentElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the parent as an ElemTemplateElement.\n   *\n   * @return This node's parent as an ElemTemplateElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParentElem(ElemTemplateElement p)",
    "returnType" : "void",
    "comment" : "\n   * Set the parent as an ElemTemplateElement.\n   *\n   * @param p This node's parent as an ElemTemplateElement\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNextSibling()",
    "returnType" : "Node",
    "comment" : "\n   * Get the next sibling (as a Node) or return null.\n   *\n   * @return this node's next sibling or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getPreviousSibling()",
    "returnType" : "Node",
    "comment" : "\n   * Get the previous sibling (as a Node) or return null.\n   * Note that this may be expensive if the parent has many kids;\n   * we accept that price in exchange for avoiding the prev pointer\n   * TODO: If we were sure parents and sibs are always ElemTemplateElements,\n   * we could hit the fields directly rather than thru accessors.\n   *\n   * @return This node's previous sibling or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getPreviousSiblingElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the previous sibling (as a Node) or return null.\n   * Note that this may be expensive if the parent has many kids;\n   * we accept that price in exchange for avoiding the prev pointer\n   * TODO: If we were sure parents and sibs are always ElemTemplateElements,\n   * we could hit the fields directly rather than thru accessors.\n   *\n   * @return This node's previous sibling or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getNextSiblingElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the next sibling (as a ElemTemplateElement) or return null.\n   *\n   * @return This node's next sibling (as a ElemTemplateElement) or null \n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getParentNodeElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the parent element.\n   *\n   * @return This node's next parent (as a ElemTemplateElement) or null \n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getFirstChild()",
    "returnType" : "Node",
    "comment" : "\n   * Get the first child as a Node.\n   *\n   * @return This node's first child or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getFirstChildElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the first child as a ElemTemplateElement.\n   *\n   * @return This node's first child (as a ElemTemplateElement) or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getLastChild()",
    "returnType" : "Node",
    "comment" : "\n   * Get the last child.\n   *\n   * @return This node's last child\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement getLastChildElem()",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Get the last child.\n   *\n   * @return This node's last child\n   ",
    "links" : [ ]
  }, {
    "name" : "public org.w3c.dom.Node getDOMBackPointer()",
    "returnType" : "org.w3c.dom.Node",
    "comment" : "\n   * If this stylesheet was created from a DOM, get the\n   * DOM backpointer that this element originated from.\n   * For tooling use.\n   *\n   * @return DOM backpointer that this element originated from or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDOMBackPointer(org.w3c.dom.Node n)",
    "returnType" : "void",
    "comment" : "\n   * If this stylesheet was created from a DOM, set the\n   * DOM backpointer that this element originated from.\n   * For tooling use.\n   *\n   * @param n DOM backpointer that this element originated from.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Object o) throws ClassCastException",
    "returnType" : "int",
    "comment" : "\n   * Compares this object with the specified object for precedence order.\n   * The order is determined by the getImportCountComposed() of the containing\n   * composed stylesheet and the getUid() of this element.\n   * Returns a negative integer, zero, or a positive integer as this\n   * object is less than, equal to, or greater than the specified object.\n   * \n   * @param o The object to be compared to this object\n   * @return  a negative integer, zero, or a positive integer as this object is\n   *          less than, equal to, or greater than the specified object.\n   * @throws ClassCastException if the specified object's\n   *         type prevents it from being compared to this Object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support, org.w3c.dom.Element targetElement) throws TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Get information about whether or not an element should strip whitespace.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @param support The XPath runtime state.\n   * @param targetElement Element to check\n   *\n   * @return true if the whitespace should be stripped.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canStripWhiteSpace()",
    "returnType" : "boolean",
    "comment" : "\n   * Get information about whether or not whitespace can be stripped.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @return true if the whitespace can be stripped.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canAcceptVariables()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this element can accept variable declarations.\n   * @return true if the element can accept and process variable declarations.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void exprSetParent(ExpressionNode n)",
    "returnType" : "void",
    "comment" : " \n   * Set the parent of this node.\n   * @param n Must be a ElemTemplateElement.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExpressionNode exprGetParent()",
    "returnType" : "ExpressionNode",
    "comment" : "\n   * Get the ExpressionNode parent of this node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void exprAddChild(ExpressionNode n, int i)",
    "returnType" : "void",
    "comment" : " \n   * This method tells the node to add its argument to the node's\n   * list of children. \n   * @param n Must be a ElemTemplateElement. \n   ",
    "links" : [ ]
  }, {
    "name" : "public ExpressionNode exprGetChild(int i)",
    "returnType" : "ExpressionNode",
    "comment" : " This method returns a child node.  The children are numbered\n     from zero, left to right. ",
    "links" : [ ]
  }, {
    "name" : "public int exprGetNumChildren()",
    "returnType" : "int",
    "comment" : " Return the number of children the node has. ",
    "links" : [ ]
  }, {
    "name" : "protected boolean accept(XSLTVisitor visitor)",
    "returnType" : "boolean",
    "comment" : "\n   * Accept a visitor and call the appropriate method \n   * for this class.\n   * \n   * @param visitor The visitor whose appropriate method will be called.\n   * @return true if the children of the object should be visited.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(XSLTVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see XSLTVisitable#callVisitors(XSLTVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttributes)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean handlesNullPrefixes()",
    "returnType" : "boolean",
    "comment" : "\n\t * @see PrefixResolver#handlesNullPrefixes()\n\t ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isCompiledTemplate()", "public int getXSLToken()", "public String getNodeName()", "public String getLocalName()", "public void runtimeInit(TransformerImpl transformer) throws TransformerException", "public void execute(TransformerImpl transformer) throws TransformerException", "public StylesheetComposed getStylesheetComposed()", "public Stylesheet getStylesheet()", "public StylesheetRoot getStylesheetRoot()", "public void recompose(StylesheetRoot root) throws TransformerException", "public void compose(StylesheetRoot sroot) throws TransformerException", "public void endCompose(StylesheetRoot sroot) throws TransformerException", "public void error(String msg, Object[] args)", "public void error(String msg)", "public Node appendChild(Node newChild) throws DOMException", "public ElemTemplateElement appendChild(ElemTemplateElement elem)", "public boolean hasChildNodes()", "public short getNodeType()", "public NodeList getChildNodes()", "public ElemTemplateElement removeChild(ElemTemplateElement childETE)", "public Node replaceChild(Node newChild, Node oldChild) throws DOMException", "public Node insertBefore(Node newChild, Node refChild) throws DOMException", "public ElemTemplateElement replaceChild(ElemTemplateElement newChildElem, ElemTemplateElement oldChildElem)", "public int getLength()", "public Node item(int index)", "public Document getOwnerDocument()", "public ElemTemplate getOwnerXSLTemplate()", "public String getTagName()", "public boolean hasTextLitOnly()", "public String getBaseIdentifier()", "public int getEndLineNumber()", "public int getLineNumber()", "public int getEndColumnNumber()", "public int getColumnNumber()", "public String getPublicId()", "public String getSystemId()", "public void setLocaterInfo(SourceLocator locator)", "public void setEndLocaterInfo(SourceLocator locator)", "public boolean hasVariableDecl()", "public void setXmlSpace(int v)", "public boolean getXmlSpace()", "public List getDeclaredPrefixes()", "public void setPrefixes(NamespaceSupport nsSupport) throws TransformerException", "public void setPrefixes(NamespaceSupport nsSupport, boolean excludeXSLDecl) throws TransformerException", "public String getNamespaceForPrefix(String prefix, org.w3c.dom.Node context)", "public String getNamespaceForPrefix(String prefix)", " List getPrefixTable()", " void setPrefixTable(List list)", "public boolean containsExcludeResultPrefix(String prefix, String uri)", "private boolean excludeResultNSDecl(String prefix, String uri) throws TransformerException", "public void resolvePrefixTables() throws TransformerException", " void addOrReplaceDecls(XMLNSDecl newDecl)", " boolean needToCheckExclude()", " void executeNSDecls(TransformerImpl transformer) throws TransformerException", " void executeNSDecls(TransformerImpl transformer, String ignorePrefix) throws TransformerException", " void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException", " void unexecuteNSDecls(TransformerImpl transformer, String ignorePrefix) throws TransformerException", "public void setUid(int i)", "public int getUid()", "public Node getParentNode()", "public ElemTemplateElement getParentElem()", "public void setParentElem(ElemTemplateElement p)", "public Node getNextSibling()", "public Node getPreviousSibling()", "public ElemTemplateElement getPreviousSiblingElem()", "public ElemTemplateElement getNextSiblingElem()", "public ElemTemplateElement getParentNodeElem()", "public Node getFirstChild()", "public ElemTemplateElement getFirstChildElem()", "public Node getLastChild()", "public ElemTemplateElement getLastChildElem()", "public org.w3c.dom.Node getDOMBackPointer()", "public void setDOMBackPointer(org.w3c.dom.Node n)", "public int compareTo(Object o) throws ClassCastException", "public boolean shouldStripWhiteSpace(org.apache.xpath.XPathContext support, org.w3c.dom.Element targetElement) throws TransformerException", "public boolean canStripWhiteSpace()", "public boolean canAcceptVariables()", "public void exprSetParent(ExpressionNode n)", "public ExpressionNode exprGetParent()", "public void exprAddChild(ExpressionNode n, int i)", "public ExpressionNode exprGetChild(int i)", "public int exprGetNumChildren()", "protected boolean accept(XSLTVisitor visitor)", "public void callVisitors(XSLTVisitor visitor)", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttributes)", "protected void callChildVisitors(XSLTVisitor visitor)", "public boolean handlesNullPrefixes()" ],
  "variableNames" : [ "serialVersionUID", "m_lineNumber", "m_endLineNumber", "m_columnNumber", "m_endColumnNumber", "m_defaultSpace", "m_hasTextLitOnly", "m_hasVariableDecl", "m_declaredPrefixes", "m_prefixTable", "m_docOrderNumber", "m_parentNode", "m_nextSibling", "m_firstChild", "m_DOMBackPointer" ]
}