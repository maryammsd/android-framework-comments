{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/p2p/nsd/WifiP2pServiceRequest.java",
  "packageName" : "android.net.wifi.p2p.nsd",
  "className" : "WifiP2pServiceRequest",
  "comment" : "\n * A class for creating a service discovery request for use with\n * {@link WifiP2pManager#addServiceRequest} and {@link WifiP2pManager#removeServiceRequest}\n *\n * <p>This class is used to create service discovery request for custom\n * vendor specific service discovery protocol {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}\n * or to search all service protocols {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL}.\n *\n * <p>For the purpose of creating a UPnP or Bonjour service request, use\n * {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively.\n *\n * {@see WifiP2pManager}\n * {@see WifiP2pUpnpServiceRequest}\n * {@see WifiP2pDnsSdServiceRequest}\n ",
  "links" : [ "android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest", "android.net.wifi.p2p.WifiP2pManager#removeServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_ALL", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC", "android.net.wifi.p2p.WifiP2pManager#addServiceRequest" ],
  "variables" : [ {
    "name" : "mProtocolType",
    "type" : "int",
    "comment" : "\n     * Service discovery protocol. It's defined in table63 in Wi-Fi Direct specification.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLength",
    "type" : "int",
    "comment" : "\n     * The length of the service request TLV.\n     * The value is equal to 2 plus the number of octets in the\n     * query data field.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransId",
    "type" : "int",
    "comment" : "\n     * Service transaction ID.\n     * This is a nonzero value used to match the service request/response TLVs.\n     ",
    "links" : [ ]
  }, {
    "name" : "mQuery",
    "type" : "String",
    "comment" : "\n     * The hex dump string of query data for the requested service information.\n     *\n     * e.g) DnsSd apple file sharing over tcp (dns name=_afpovertcp._tcp.local.)\n     * 0b5f6166706f766572746370c00c000c01\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WifiP2pServiceRequest>",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getTransactionId()",
    "returnType" : "int",
    "comment" : "\n     * Return transaction id.\n     *\n     * @return transaction id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransactionId(int id)",
    "returnType" : "void",
    "comment" : "\n     * Set transaction id.\n     *\n     * @param id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSupplicantQuery()",
    "returnType" : "String",
    "comment" : "\n     * Return wpa_supplicant request string.\n     *\n     * The format is the hex dump of the following frame.\n     * <pre>\n     * _______________________________________________________________\n     * |        Length (2)        |   Type (1)   | Transaction ID (1) |\n     * |                  Query Data (variable)                       |\n     * </pre>\n     *\n     * @return wpa_supplicant request string.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void validateQuery(String query)",
    "returnType" : "void",
    "comment" : "\n     * Validate query.\n     *\n     * <p>If invalid, throw IllegalArgumentException.\n     * @param query The part of service specific query.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static WifiP2pServiceRequest newInstance(int protocolType, String queryData)",
    "returnType" : "WifiP2pServiceRequest",
    "comment" : "\n     * Create a service discovery request.\n     *\n     * @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL}\n     * or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}.\n     * In order to create a UPnP or Bonjour service request, use\n     * {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest}\n     * respectively\n     *\n     * @param queryData hex string that is vendor specific.  Can be null.\n     * @return service discovery request.\n     ",
    "links" : [ "android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_ALL", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC" ]
  }, {
    "name" : "public static WifiP2pServiceRequest newInstance(int protocolType)",
    "returnType" : "WifiP2pServiceRequest",
    "comment" : "\n     * Create a service discovery request.\n     *\n     * @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL}\n     * or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}.\n     * In order to create a UPnP or Bonjour service request, use\n     * {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest}\n     * respectively\n     *\n     * @return service discovery request.\n     ",
    "links" : [ "android.net.wifi.p2p.nsd.WifiP2pUpnpServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pDnsSdServiceRequest", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_ALL", "android.net.wifi.p2p.nsd.WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getTransactionId()", "public void setTransactionId(int id)", "public String getSupplicantQuery()", "private void validateQuery(String query)", "public static WifiP2pServiceRequest newInstance(int protocolType, String queryData)", "public static WifiP2pServiceRequest newInstance(int protocolType)", "public boolean equals(Object o)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "mProtocolType", "mLength", "mTransId", "mQuery", "CREATOR" ]
}