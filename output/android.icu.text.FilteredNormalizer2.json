{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/FilteredNormalizer2.java",
  "packageName" : "android.icu.text",
  "className" : "FilteredNormalizer2",
  "comment" : "\n * Normalization filtered by a UnicodeSet.\n * Normalizes portions of the text contained in the filter set and leaves\n * portions not contained in the filter set unchanged.\n * Filtering is done via UnicodeSet.span(..., UnicodeSet.SpanCondition.SIMPLE).\n * Not-in-the-filter text is treated as \"is normalized\" and \"quick check yes\".\n * This class implements all of (and only) the Normalizer2 API.\n * An instance of this class is unmodifiable/immutable.\n * @author Markus W. Scherer\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "norm2",
    "type" : "Normalizer2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "set",
    "type" : "UnicodeSet",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public StringBuilder normalize(CharSequence src, StringBuilder dest)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Appendable normalize(CharSequence src, Appendable dest)",
    "returnType" : "Appendable",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public StringBuilder append(StringBuilder first, CharSequence second)",
    "returnType" : "StringBuilder",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRawDecomposition(int c)",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int composePair(int a, int b)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCombiningClass(int c)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNormalized(CharSequence s)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Normalizer.QuickCheckResult quickCheck(CharSequence s)",
    "returnType" : "Normalizer.QuickCheckResult",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int spanQuickCheckYes(CharSequence s)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBoundaryBefore(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBoundaryAfter(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInert(int c)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private Appendable normalize(CharSequence src, Appendable dest, UnicodeSet.SpanCondition spanCondition)",
    "returnType" : "Appendable",
    "comment" : " an in-filter prefix.",
    "links" : [ ]
  }, {
    "name" : "private StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second, boolean doNormalize)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public StringBuilder normalize(CharSequence src, StringBuilder dest)", "public Appendable normalize(CharSequence src, Appendable dest)", "public StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second)", "public StringBuilder append(StringBuilder first, CharSequence second)", "public String getDecomposition(int c)", "public String getRawDecomposition(int c)", "public int composePair(int a, int b)", "public int getCombiningClass(int c)", "public boolean isNormalized(CharSequence s)", "public Normalizer.QuickCheckResult quickCheck(CharSequence s)", "public int spanQuickCheckYes(CharSequence s)", "public boolean hasBoundaryBefore(int c)", "public boolean hasBoundaryAfter(int c)", "public boolean isInert(int c)", "private Appendable normalize(CharSequence src, Appendable dest, UnicodeSet.SpanCondition spanCondition)", "private StringBuilder normalizeSecondAndAppend(StringBuilder first, CharSequence second, boolean doNormalize)" ],
  "variableNames" : [ "norm2", "set" ]
}