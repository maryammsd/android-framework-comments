{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemAttributeSet.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemAttributeSet",
  "comment" : "\n * Implement xsl:attribute-set.\n * <pre>\n * &amp;!ELEMENT xsl:attribute-set (xsl:attribute)*>\n * &amp;!ATTLIST xsl:attribute-set\n *   name %qname; #REQUIRED\n *   use-attribute-sets %qnames; #IMPLIED\n * &amp;\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#attribute-sets\">attribute-sets in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_qname",
    "type" : "QName",
    "comment" : "\n   * The name attribute specifies the name of the attribute set.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(QName name)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * The name attribute specifies the name of the attribute set.\n   *\n   * @param name Name attribute to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * The name attribute specifies the name of the attribute set.\n   *\n   * @return The name attribute of the attribute set\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return Token ID of the element \n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The name of this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Apply a set of attributes to the element.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChildElem(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   * <!ELEMENT xsl:attribute-set (xsl:attribute)*>\n   * <!ATTLIST xsl:attribute-set\n   *   name %qname; #REQUIRED\n   *   use-attribute-sets %qnames; #IMPLIED\n   * >\n   *\n   * @param newChild Child to be added to this node's list of children\n   *\n   * @return The child that was just added to the list of children\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root)",
    "returnType" : "void",
    "comment" : "\n   * This function is called during recomposition to\n   * control how this element is composed.\n   * @param root The root stylesheet for this transformation.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(QName name)", "public QName getName()", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChildElem(ElemTemplateElement newChild)", "public void recompose(StylesheetRoot root)" ],
  "variableNames" : [ "serialVersionUID", "m_qname" ]
}