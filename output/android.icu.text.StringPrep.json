{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/StringPrep.java",
  "packageName" : "android.icu.text",
  "className" : "StringPrep",
  "comment" : "\n * StringPrep API implements the StingPrep framework as described by \n * <a href=\"http://www.ietf.org/rfc/rfc3454.txt\">RFC 3454</a>.\n * StringPrep prepares Unicode strings for use in network protocols.\n * Profiles of StingPrep are set of rules and data according to which the\n * Unicode Strings are prepared. Each profiles contains tables which describe\n * how a code point should be treated. The tables are broadly classied into\n * <ul>\n *     <li> Unassigned Table: Contains code points that are unassigned \n *          in the Unicode Version supported by StringPrep. Currently \n *          RFC 3454 supports Unicode 3.2. </li>\n *     <li> Prohibited Table: Contains code points that are prohibited from\n *          the output of the StringPrep processing function. </li>\n *     <li> Mapping Table: Contains code points that are deleted from the output or case mapped. </li>\n * </ul>\n * \n * The procedure for preparing Unicode strings:\n * <ol>\n *      <li> Map: For each character in the input, check if it has a mapping\n *           and, if so, replace it with its mapping. </li>\n *      <li> Normalize: Possibly normalize the result of step 1 using Unicode\n *           normalization. </li>\n *      <li> Prohibit: Check for any characters that are not allowed in the\n *           output.  If any are found, return an error.</li>\n *      <li> Check bidi: Possibly check for right-to-left characters, and if\n *           any are found, make sure that the whole string satisfies the\n *           requirements for bidirectional strings.  If the string does not\n *           satisfy the requirements for bidirectional strings, return an\n *           error.  </li>\n * </ol>\n * @author Ram Viswanadha\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT",
    "type" : "int",
    "comment" : " \n     * Option to prohibit processing of unassigned code points in the input\n     * \n     * @see   #prepare\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_UNASSIGNED",
    "type" : "int",
    "comment" : " \n     * Option to allow processing of unassigned code points in the input\n     * \n     * @see   #prepare\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3491_NAMEPREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3491 Nameprep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3530_NFS4_CS_PREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3530 nfs4_cs_prep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3530_NFS4_CS_PREP_CI",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3530 nfs4_cs_prep with case insensitive option\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3530_NFS4_CIS_PREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3530 nfs4_cis_prep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3530_NFS4_MIXED_PREP_PREFIX",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3530 nfs4_mixed_prep for prefix\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3530_NFS4_MIXED_PREP_SUFFIX",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3530 nfs4_mixed_prep for suffix\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3722_ISCSI",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3722 iSCSI\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3920_NODEPREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3920 XMPP Nodeprep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC3920_RESOURCEPREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC3920 XMPP Resourceprep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC4011_MIB",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC4011 Policy MIB Stringprep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC4013_SASLPREP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC4013 SASLprep\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC4505_TRACE",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC4505 trace\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC4518_LDAP",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC4518 LDAP\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RFC4518_LDAP_CI",
    "type" : "int",
    "comment" : "\n     * Profile type: RFC4518 LDAP for case ignore, numeric and stored prefix\n     * matching rules\n     * @see #getInstance(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PROFILE",
    "type" : "int",
    "comment" : " Last available profile",
    "links" : [ ]
  }, {
    "name" : "PROFILE_NAMES",
    "type" : "String[]",
    "comment" : " Profile names must be aligned to profile type definitions ",
    "links" : [ ]
  }, {
    "name" : "CACHE",
    "type" : "WeakReference<StringPrep>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNASSIGNED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROHIBITED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NORMALIZATION_ON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECK_BIDI_ON",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_THRESHOLD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_INDEX_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_MAPPING_DATA_SIZE",
    "type" : "int",
    "comment" : "  private static final int INDEX_TRIE_SIZE                  =  0; /* number of bytes in normalization trie */",
    "links" : [ ]
  }, {
    "name" : "NORM_CORRECTNS_LAST_UNI_VERSION",
    "type" : "int",
    "comment" : " The array that contains the mapping   ",
    "links" : [ ]
  }, {
    "name" : "ONE_UCHAR_MAPPING_INDEX_START",
    "type" : "int",
    "comment" : " The index of Unicode version of last entry in NormalizationCorrections.txt ",
    "links" : [ ]
  }, {
    "name" : "TWO_UCHARS_MAPPING_INDEX_START",
    "type" : "int",
    "comment" : " The starting index of 1 UChar mapping index in the mapping data array ",
    "links" : [ ]
  }, {
    "name" : "THREE_UCHARS_MAPPING_INDEX_START",
    "type" : "int",
    "comment" : " The starting index of 2 UChars mapping index in the mapping data array ",
    "links" : [ ]
  }, {
    "name" : "FOUR_UCHARS_MAPPING_INDEX_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OPTIONS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INDEX_TOP",
    "type" : "int",
    "comment" : " Bit set of options to turn on in the profile ",
    "links" : [ ]
  }, {
    "name" : "sprepTrie",
    "type" : "CharTrie",
    "comment" : " CharTrie implementation for reading the trie data",
    "links" : [ ]
  }, {
    "name" : "indexes",
    "type" : "int[]",
    "comment" : " Indexes read from the data file",
    "links" : [ ]
  }, {
    "name" : "mappingData",
    "type" : "char[]",
    "comment" : " mapping data read from the data file",
    "links" : [ ]
  }, {
    "name" : "sprepUniVer",
    "type" : "VersionInfo",
    "comment" : " the version of Unicode supported by the data file",
    "links" : [ ]
  }, {
    "name" : "normCorrVer",
    "type" : "VersionInfo",
    "comment" : " is turned on ",
    "links" : [ ]
  }, {
    "name" : "doNFKC",
    "type" : "boolean",
    "comment" : " Option to turn on Normalization",
    "links" : [ ]
  }, {
    "name" : "checkBiDi",
    "type" : "boolean",
    "comment" : " Option to turn on checking for BiDi rules",
    "links" : [ ]
  }, {
    "name" : "bdp",
    "type" : "UBiDiProps",
    "comment" : " bidi properties",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private char getCodePointValue(int ch)",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VersionInfo getVersionInfo(int comp)",
    "returnType" : "VersionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VersionInfo getVersionInfo(byte[] version)",
    "returnType" : "VersionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static StringPrep getInstance(int profile)",
    "returnType" : "StringPrep",
    "comment" : "\n     * Gets a StringPrep instance for the specified profile\n     * \n     * @param profile The profile passed to find the StringPrep instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final void getValues(char trieWord, Values values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StringBuffer map(UCharacterIterator iter, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private StringBuffer normalize(StringBuffer src)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public StringBuffer prepare(UCharacterIterator src, int options) throws StringPrepParseException",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Prepare the input buffer for use in applications with the given profile. This operation maps, normalizes(NFKC),\n     * checks for prohibited and BiDi characters in the order defined by RFC 3454\n     * depending on the options specified in the profile.\n     *\n     * @param src           A UCharacterIterator object containing the source string\n     * @param options       A bit set of options:\n     *   <ul>\n     *     <li>{@link #DEFAULT} Prohibit processing of unassigned code points in the input</li>\n     *     <li>{@link #ALLOW_UNASSIGNED} Treat the unassigned code points are in the input\n     *          as normal Unicode code points.</li>\n     *   </ul>\n     * @return StringBuffer A StringBuffer containing the output\n     * @throws StringPrepParseException An exception occurs when parsing a string is invalid.\n     ",
    "links" : [ "#ALLOW_UNASSIGNED", "#DEFAULT" ]
  }, {
    "name" : "public String prepare(String src, int options) throws StringPrepParseException",
    "returnType" : "String",
    "comment" : "\n     * Prepare the input String for use in applications with the given profile. This operation maps, normalizes(NFKC),\n     * checks for prohibited and BiDi characters in the order defined by RFC 3454\n     * depending on the options specified in the profile.\n     *\n     * @param src           A string\n     * @param options       A bit set of options:\n     *   <ul>\n     *     <li>{@link #DEFAULT} Prohibit processing of unassigned code points in the input</li>\n     *     <li>{@link #ALLOW_UNASSIGNED} Treat the unassigned code points are in the input\n     *          as normal Unicode code points.</li>\n     *   </ul>\n     * @return String A String containing the output\n     * @throws StringPrepParseException An exception when parsing or preparing a string is invalid.\n     ",
    "links" : [ "#ALLOW_UNASSIGNED", "#DEFAULT" ]
  } ],
  "methodNames" : [ "private char getCodePointValue(int ch)", "private static VersionInfo getVersionInfo(int comp)", "private static VersionInfo getVersionInfo(byte[] version)", "public static StringPrep getInstance(int profile)", "private static final void getValues(char trieWord, Values values)", "private StringBuffer map(UCharacterIterator iter, int options) throws StringPrepParseException", "private StringBuffer normalize(StringBuffer src)", "public StringBuffer prepare(UCharacterIterator src, int options) throws StringPrepParseException", "public String prepare(String src, int options) throws StringPrepParseException" ],
  "variableNames" : [ "DEFAULT", "ALLOW_UNASSIGNED", "RFC3491_NAMEPREP", "RFC3530_NFS4_CS_PREP", "RFC3530_NFS4_CS_PREP_CI", "RFC3530_NFS4_CIS_PREP", "RFC3530_NFS4_MIXED_PREP_PREFIX", "RFC3530_NFS4_MIXED_PREP_SUFFIX", "RFC3722_ISCSI", "RFC3920_NODEPREP", "RFC3920_RESOURCEPREP", "RFC4011_MIB", "RFC4013_SASLPREP", "RFC4505_TRACE", "RFC4518_LDAP", "RFC4518_LDAP_CI", "MAX_PROFILE", "PROFILE_NAMES", "CACHE", "UNASSIGNED", "MAP", "PROHIBITED", "DELETE", "TYPE_LIMIT", "NORMALIZATION_ON", "CHECK_BIDI_ON", "TYPE_THRESHOLD", "MAX_INDEX_VALUE", "INDEX_MAPPING_DATA_SIZE", "NORM_CORRECTNS_LAST_UNI_VERSION", "ONE_UCHAR_MAPPING_INDEX_START", "TWO_UCHARS_MAPPING_INDEX_START", "THREE_UCHARS_MAPPING_INDEX_START", "FOUR_UCHARS_MAPPING_INDEX_START", "OPTIONS", "INDEX_TOP", "sprepTrie", "indexes", "mappingData", "sprepUniVer", "normCorrVer", "doNFKC", "checkBiDi", "bdp" ]
}