{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/Scroller.java",
  "packageName" : "android.widget",
  "className" : "Scroller",
  "comment" : "\n * <p>This class encapsulates scrolling. You can use scrollers ({@link Scroller}\n * or {@link OverScroller}) to collect the data you need to produce a scrolling\n * animation&mdash;for example, in response to a fling gesture. Scrollers track\n * scroll offsets for you over time, but they don't automatically apply those\n * positions to your view. It's your responsibility to get and apply new\n * coordinates at a rate that will make the scrolling animation look smooth.</p>\n *\n * <p>Here is a simple example:</p>\n *\n * <pre> private Scroller mScroller = new Scroller(context);\n * ...\n * public void zoomIn() {\n *     // Revert any animation currently in progress\n *     mScroller.forceFinished(true);\n *     // Start scrolling by providing a starting point and\n *     // the distance to travel\n *     mScroller.startScroll(0, 0, 100, 0);\n *     // Invalidate to request a redraw\n *     invalidate();\n * }</pre>\n *\n * <p>To track the changing positions of the x/y coordinates, use\n * {@link #computeScrollOffset}. The method returns a boolean to indicate\n * whether the scroller is finished. If it isn't, it means that a fling or\n * programmatic pan operation is still in progress. You can use this method to\n * find the current offsets of the x and y coordinates, for example:</p>\n *\n * <pre>if (mScroller.computeScrollOffset()) {\n *     // Get current x and y positions\n *     int currX = mScroller.getCurrX();\n *     int currY = mScroller.getCurrY();\n *    ...\n * }</pre>\n ",
  "variables" : [ {
    "name" : "mInterpolator",
    "type" : "Interpolator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinalX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinalY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuration",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationReciprocal",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeltaX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeltaY",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlywheel",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocity",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrVelocity",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDistance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlingFriction",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCROLL_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLING_MODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DECELERATION_RATE",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INFLEXION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "START_TENSION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "END_TENSION",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "P1",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "P2",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NB_SAMPLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPLINE_POSITION",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SPLINE_TIME",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeceleration",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPpi",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPhysicalCoeff",
    "type" : "float",
    "comment" : " A context-specific coefficient adjusted to physical values.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void setFriction(float friction)",
    "returnType" : "void",
    "comment" : "\n     * The amount of friction applied to flings. The default value\n     * is {@link ViewConfiguration#getScrollFriction}.\n     * \n     * @param friction A scalar dimension-less value representing the coefficient of\n     *         friction.\n     ",
    "links" : [ "ViewConfiguration#getScrollFriction" ]
  }, {
    "name" : "private float computeDeceleration(float friction)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * \n     * Returns whether the scroller has finished scrolling.\n     * \n     * @return True if the scroller has finished scrolling, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void forceFinished(boolean finished)",
    "returnType" : "void",
    "comment" : "\n     * Force the finished field to a particular value.\n     *  \n     * @param finished The new finished value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getDuration()",
    "returnType" : "int",
    "comment" : "\n     * Returns how long the scroll event will take, in milliseconds.\n     * \n     * @return The duration of the scroll in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrX()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current X offset in the scroll. \n     * \n     * @return The new X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrY()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current Y offset in the scroll. \n     * \n     * @return The new Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getCurrVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Returns the current velocity.\n     *\n     * @return The original velocity less the deceleration. Result may be\n     * negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getStartX()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start X offset in the scroll. \n     * \n     * @return The start X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getStartY()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start Y offset in the scroll. \n     * \n     * @return The start Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getFinalX()",
    "returnType" : "int",
    "comment" : "\n     * Returns where the scroll will end. Valid only for \"fling\" scrolls.\n     * \n     * @return The final X offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getFinalY()",
    "returnType" : "int",
    "comment" : "\n     * Returns where the scroll will end. Valid only for \"fling\" scrolls.\n     * \n     * @return The final Y offset as an absolute distance from the origin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean computeScrollOffset()",
    "returnType" : "boolean",
    "comment" : "\n     * Call this when you want to know the new location.  If it returns true,\n     * the animation is not yet finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startScroll(int startX, int startY, int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling by providing a starting point and the distance to travel.\n     * The scroll will use the default value of 250 milliseconds for the\n     * duration.\n     * \n     * @param startX Starting horizontal scroll offset in pixels. Positive\n     *        numbers will scroll the content to the left.\n     * @param startY Starting vertical scroll offset in pixels. Positive numbers\n     *        will scroll the content up.\n     * @param dx Horizontal distance to travel. Positive numbers will scroll the\n     *        content to the left.\n     * @param dy Vertical distance to travel. Positive numbers will scroll the\n     *        content up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startScroll(int startX, int startY, int dx, int dy, int duration)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling by providing a starting point, the distance to travel,\n     * and the duration of the scroll.\n     * \n     * @param startX Starting horizontal scroll offset in pixels. Positive\n     *        numbers will scroll the content to the left.\n     * @param startY Starting vertical scroll offset in pixels. Positive numbers\n     *        will scroll the content up.\n     * @param dx Horizontal distance to travel. Positive numbers will scroll the\n     *        content to the left.\n     * @param dy Vertical distance to travel. Positive numbers will scroll the\n     *        content up.\n     * @param duration Duration of the scroll in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)",
    "returnType" : "void",
    "comment" : "\n     * Start scrolling based on a fling gesture. The distance travelled will\n     * depend on the initial velocity of the fling.\n     * \n     * @param startX Starting point of the scroll (X)\n     * @param startY Starting point of the scroll (Y)\n     * @param velocityX Initial velocity of the fling (X) measured in pixels per\n     *        second.\n     * @param velocityY Initial velocity of the fling (Y) measured in pixels per\n     *        second\n     * @param minX Minimum X value. The scroller will not scroll past this\n     *        point.\n     * @param maxX Maximum X value. The scroller will not scroll past this\n     *        point.\n     * @param minY Minimum Y value. The scroller will not scroll past this\n     *        point.\n     * @param maxY Maximum Y value. The scroller will not scroll past this\n     *        point.\n     ",
    "links" : [ ]
  }, {
    "name" : "private double getSplineDeceleration(float velocity)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getSplineFlingDuration(float velocity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private double getSplineFlingDistance(float velocity)",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void abortAnimation()",
    "returnType" : "void",
    "comment" : "\n     * Stops the animation. Contrary to {@link #forceFinished(boolean)},\n     * aborting the animating cause the scroller to move to the final x and y\n     * position\n     *\n     * @see #forceFinished(boolean)\n     ",
    "links" : [ "#forceFinished" ]
  }, {
    "name" : "public void extendDuration(int extend)",
    "returnType" : "void",
    "comment" : "\n     * Extend the scroll animation. This allows a running animation to scroll\n     * further and longer, when used with {@link #setFinalX(int)} or {@link #setFinalY(int)}.\n     *\n     * @param extend Additional time to scroll in milliseconds.\n     * @see #setFinalX(int)\n     * @see #setFinalY(int)\n     ",
    "links" : [ "#setFinalX", "#setFinalY" ]
  }, {
    "name" : "public int timePassed()",
    "returnType" : "int",
    "comment" : "\n     * Returns the time elapsed since the beginning of the scrolling.\n     *\n     * @return The elapsed time in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFinalX(int newX)",
    "returnType" : "void",
    "comment" : "\n     * Sets the final position (X) for this scroller.\n     *\n     * @param newX The new X offset as an absolute distance from the origin.\n     * @see #extendDuration(int)\n     * @see #setFinalY(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFinalY(int newY)",
    "returnType" : "void",
    "comment" : "\n     * Sets the final position (Y) for this scroller.\n     *\n     * @param newY The new Y offset as an absolute distance from the origin.\n     * @see #extendDuration(int)\n     * @see #setFinalX(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isScrollingInDirection(float xvel, float yvel)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mInterpolator", "mMode", "mStartX", "mStartY", "mFinalX", "mFinalY", "mMinX", "mMaxX", "mMinY", "mMaxY", "mCurrX", "mCurrY", "mStartTime", "mDuration", "mDurationReciprocal", "mDeltaX", "mDeltaY", "mFinished", "mFlywheel", "mVelocity", "mCurrVelocity", "mDistance", "mFlingFriction", "DEFAULT_DURATION", "SCROLL_MODE", "FLING_MODE", "DECELERATION_RATE", "INFLEXION", "START_TENSION", "END_TENSION", "P1", "P2", "NB_SAMPLES", "SPLINE_POSITION", "SPLINE_TIME", "mDeceleration", "mPpi", "mPhysicalCoeff" ],
  "methodNames" : [ "public final void setFriction(float friction)", "private float computeDeceleration(float friction)", "public final boolean isFinished()", "public final void forceFinished(boolean finished)", "public final int getDuration()", "public final int getCurrX()", "public final int getCurrY()", "public float getCurrVelocity()", "public final int getStartX()", "public final int getStartY()", "public final int getFinalX()", "public final int getFinalY()", "public boolean computeScrollOffset()", "public void startScroll(int startX, int startY, int dx, int dy)", "public void startScroll(int startX, int startY, int dx, int dy, int duration)", "public void fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)", "private double getSplineDeceleration(float velocity)", "private int getSplineFlingDuration(float velocity)", "private double getSplineFlingDistance(float velocity)", "public void abortAnimation()", "public void extendDuration(int extend)", "public int timePassed()", "public void setFinalX(int newX)", "public void setFinalY(int newY)", "public boolean isScrollingInDirection(float xvel, float yvel)" ]
}