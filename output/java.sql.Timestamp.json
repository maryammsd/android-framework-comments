{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Timestamp.java",
  "packageName" : "java.sql",
  "className" : "Timestamp",
  "comment" : "\n * <P>A thin wrapper around <code>java.util.Date</code> that allows\n * the JDBC API to identify this as an SQL <code>TIMESTAMP</code> value.\n * It adds the ability\n * to hold the SQL <code>TIMESTAMP</code> fractional seconds value, by allowing\n * the specification of fractional seconds to a precision of nanoseconds.\n * A Timestamp also provides formatting and\n * parsing operations to support the JDBC escape syntax for timestamp values.\n *\n * <p>The precision of a Timestamp object is calculated to be either:\n * <ul>\n * <li><code>19 </code>, which is the number of characters in yyyy-mm-dd hh:mm:ss\n * <li> <code> 20 + s </code>, which is the number\n * of characters in the yyyy-mm-dd hh:mm:ss.[fff...] and <code>s</code> represents  the scale of the given Timestamp,\n * its fractional seconds precision.\n *</ul>\n *\n * <P><B>Note:</B> This type is a composite of a <code>java.util.Date</code> and a\n * separate nanoseconds value. Only integral seconds are stored in the\n * <code>java.util.Date</code> component. The fractional seconds - the nanos - are\n * separate.  The <code>Timestamp.equals(Object)</code> method never returns\n * <code>true</code> when passed an object\n * that isn't an instance of <code>java.sql.Timestamp</code>,\n * because the nanos component of a date is unknown.\n * As a result, the <code>Timestamp.equals(Object)</code>\n * method is not symmetric with respect to the\n * <code>java.util.Date.equals(Object)</code>\n * method.  Also, the <code>hashCode</code> method uses the underlying\n * <code>java.util.Date</code>\n * implementation and therefore does not include nanos in its computation.\n * <P>\n * Due to the differences between the <code>Timestamp</code> class\n * and the <code>java.util.Date</code>\n * class mentioned above, it is recommended that code not view\n * <code>Timestamp</code> values generically as an instance of\n * <code>java.util.Date</code>.  The\n * inheritance relationship between <code>Timestamp</code>\n * and <code>java.util.Date</code> really\n * denotes implementation inheritance, and not type inheritance.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "nanos",
    "type" : "int",
    "comment" : "\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTime(long time)",
    "returnType" : "void",
    "comment" : "\n     * Sets this <code>Timestamp</code> object to represent a point in time that is\n     * <tt>time</tt> milliseconds after January 1, 1970 00:00:00 GMT.\n     *\n     * @param time   the number of milliseconds.\n     * @see #getTime\n     * @see #Timestamp(long time)\n     * @see java.util.Calendar\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     * represented by this <code>Timestamp</code> object.\n     *\n     * @return  the number of milliseconds since January 1, 1970, 00:00:00 GMT\n     *          represented by this date.\n     * @see #setTime\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Timestamp valueOf(String s)",
    "returnType" : "Timestamp",
    "comment" : "\n     * Converts a <code>String</code> object in JDBC timestamp escape format to a\n     * <code>Timestamp</code> value.\n     *\n     * @param s timestamp in format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>.  The\n     * fractional seconds may be omitted. The leading zero for <code>mm</code>\n     * and <code>dd</code> may also be omitted.\n     *\n     * @return corresponding <code>Timestamp</code> value\n     * @exception java.lang.IllegalArgumentException if the given argument\n     * does not have the format <code>yyyy-[m]m-[d]d hh:mm:ss[.f...]</code>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Formats a timestamp in JDBC timestamp escape format.\n     *         <code>yyyy-mm-dd hh:mm:ss.fffffffff</code>,\n     * where <code>ffffffffff</code> indicates nanoseconds.\n     * <P>\n     * @return a <code>String</code> object in\n     *           <code>yyyy-mm-dd hh:mm:ss.fffffffff</code> format\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNanos()",
    "returnType" : "int",
    "comment" : "\n     * Gets this <code>Timestamp</code> object's <code>nanos</code> value.\n     *\n     * @return this <code>Timestamp</code> object's fractional seconds component\n     * @see #setNanos\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNanos(int n)",
    "returnType" : "void",
    "comment" : "\n     * Sets this <code>Timestamp</code> object's <code>nanos</code> field\n     * to the given value.\n     *\n     * @param n the new fractional seconds component\n     * @exception java.lang.IllegalArgumentException if the given argument\n     *            is greater than 999999999 or less than 0\n     * @see #getNanos\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Timestamp ts)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests to see if this <code>Timestamp</code> object is\n     * equal to the given <code>Timestamp</code> object.\n     *\n     * @param ts the <code>Timestamp</code> value to compare with\n     * @return <code>true</code> if the given <code>Timestamp</code>\n     *         object is equal to this <code>Timestamp</code> object;\n     *         <code>false</code> otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(java.lang.Object ts)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests to see if this <code>Timestamp</code> object is\n     * equal to the given object.\n     *\n     * This version of the method <code>equals</code> has been added\n     * to fix the incorrect\n     * signature of <code>Timestamp.equals(Timestamp)</code> and to preserve backward\n     * compatibility with existing class files.\n     *\n     * Note: This method is not symmetric with respect to the\n     * <code>equals(Object)</code> method in the base class.\n     *\n     * @param ts the <code>Object</code> value to compare with\n     * @return <code>true</code> if the given <code>Object</code> is an instance\n     *         of a <code>Timestamp</code> that\n     *         is equal to this <code>Timestamp</code> object;\n     *         <code>false</code> otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean before(Timestamp ts)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this <code>Timestamp</code> object is\n     * earlier than the given <code>Timestamp</code> object.\n     *\n     * @param ts the <code>Timestamp</code> value to compare with\n     * @return <code>true</code> if this <code>Timestamp</code> object is earlier;\n     *        <code>false</code> otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean after(Timestamp ts)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this <code>Timestamp</code> object is\n     * later than the given <code>Timestamp</code> object.\n     *\n     * @param ts the <code>Timestamp</code> value to compare with\n     * @return <code>true</code> if this <code>Timestamp</code> object is later;\n     *        <code>false</code> otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(Timestamp ts)",
    "returnType" : "int",
    "comment" : "\n     * Compares this <code>Timestamp</code> object to the given\n     * <code>Timestamp</code> object.\n     *\n     * @param   ts   the <code>Timestamp</code> object to be compared to\n     *                this <code>Timestamp</code> object\n     * @return  the value <code>0</code> if the two <code>Timestamp</code>\n     *          objects are equal; a value less than <code>0</code> if this\n     *          <code>Timestamp</code> object is before the given argument;\n     *          and a value greater than <code>0</code> if this\n     *          <code>Timestamp</code> object is after the given argument.\n     * @since   1.4\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(java.util.Date o)",
    "returnType" : "int",
    "comment" : "\n     * Compares this <code>Timestamp</code> object to the given\n     * <code>Date</code> object.\n     *\n     * @param o the <code>Date</code> to be compared to\n     *          this <code>Timestamp</code> object\n     * @return  the value <code>0</code> if this <code>Timestamp</code> object\n     *          and the given object are equal; a value less than <code>0</code>\n     *          if this  <code>Timestamp</code> object is before the given argument;\n     *          and a value greater than <code>0</code> if this\n     *          <code>Timestamp</code> object is after the given argument.\n     *\n     * @since   1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * The {@code hashCode} method uses the underlying {@code java.util.Date}\n     * implementation and therefore does not include nanos in its computation.\n     *\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTime(long time)", "public long getTime()", "public static Timestamp valueOf(String s)", "public String toString()", "public int getNanos()", "public void setNanos(int n)", "public boolean equals(Timestamp ts)", "public boolean equals(java.lang.Object ts)", "public boolean before(Timestamp ts)", "public boolean after(Timestamp ts)", "public int compareTo(Timestamp ts)", "public int compareTo(java.util.Date o)", "public int hashCode()" ],
  "variableNames" : [ "nanos", "serialVersionUID" ]
}