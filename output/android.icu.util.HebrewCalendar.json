{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/HebrewCalendar.java",
  "packageName" : "android.icu.util",
  "className" : "HebrewCalendar",
  "comment" : "\n * <code>HebrewCalendar</code> is a subclass of <code>Calendar</code>\n * that that implements the traditional Hebrew calendar.\n * This is the civil calendar in Israel and the liturgical calendar\n * of the Jewish faith worldwide.\n * <p>\n * The Hebrew calendar is lunisolar and thus has a number of interesting\n * properties that distinguish it from the Gregorian.  Months start\n * on the day of (an arithmetic approximation of) each new moon.  Since the\n * solar year (approximately 365.24 days) is not an even multiple of\n * the lunar month (approximately 29.53 days) an extra \"leap month\" is\n * inserted in 7 out of every 19 years.  To make matters even more\n * interesting, the start of a year can be delayed by up to three days\n * in order to prevent certain holidays from falling on the Sabbath and\n * to prevent certain illegal year lengths.  Finally, the lengths of certain\n * months can vary depending on the number of days in the year.\n * <p>\n * The leap month is known as \"Adar 1\" and is inserted between the\n * months of Shevat and Adar in leap years.  Since the leap month does\n * not come at the end of the year, calculations involving\n * month numbers are particularly complex.  Users of this class should\n * make sure to use the {@link #roll roll} and {@link #add add} methods\n * rather than attempting to perform date arithmetic by manipulating\n * the fields directly.\n * <p>\n * <b>Note:</b> In the traditional Hebrew calendar, days start at sunset.\n * However, in order to keep the time fields in this class\n * synchronized with those of the other calendars and with local clock time,\n * we treat days and months as beginning at midnight,\n * roughly 6 hours after the corresponding sunset.\n * <p>\n * If you are interested in more information on the rules behind the Hebrew\n * calendar, see one of the following references:\n * <ul>\n * <li>\"<a href=\"http://www.amazon.com/exec/obidos/ASIN/0521564743\">Calendrical Calculations</a>\",\n *      by Nachum Dershowitz &amp; Edward Reingold, Cambridge University Press, 1997, pages 85-91.\n *\n * <li>Hebrew Calendar Science and Myths,\n *      <a href=\"http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/\">\n *      http://web.archive.org/web/20090423084613/http://www.geocities.com/Athens/1584/</a>\n *\n * <li>The Calendar FAQ,\n *      <a href=\"http://www.faqs.org/faqs/calendars/faq/\">\n *      http://www.faqs.org/faqs/calendars/faq/</a>\n * </ul>\n *\n * <p>\n * This class should not be subclassed.</p>\n * <p>\n * HebrewCalendar usually should be instantiated using\n * {@link android.icu.util.Calendar#getInstance(ULocale)} passing in a <code>ULocale</code>\n * with the tag <code>\"@calendar=hebrew\"</code>.</p>\n *\n * @see android.icu.util.GregorianCalendar\n * @see android.icu.util.Calendar\n *\n * @author Laura Werner\n * @author Alan Liu\n ",
  "links" : [ "android.icu.util.Calendar#getInstance(ULocale)", "#roll", "#add" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " jdk1.4.2 serialver",
    "links" : [ ]
  }, {
    "name" : "TISHRI",
    "type" : "int",
    "comment" : "\n     * Constant for Tishri, the 1st month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "HESHVAN",
    "type" : "int",
    "comment" : "\n     * Constant for Heshvan, the 2nd month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "KISLEV",
    "type" : "int",
    "comment" : "\n     * Constant for Kislev, the 3rd month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEVET",
    "type" : "int",
    "comment" : "\n     * Constant for Tevet, the 4th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHEVAT",
    "type" : "int",
    "comment" : "\n     * Constant for Shevat, the 5th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "ADAR_1",
    "type" : "int",
    "comment" : "\n     * Constant for Adar I, the 6th month of the Hebrew year\n     * (present in leap years only). In non-leap years, the calendar\n     * jumps from Shevat (5th month) to Adar (7th month).\n     ",
    "links" : [ ]
  }, {
    "name" : "ADAR",
    "type" : "int",
    "comment" : "\n     * Constant for the Adar, the 7th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "NISAN",
    "type" : "int",
    "comment" : "\n     * Constant for Nisan, the 8th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "IYAR",
    "type" : "int",
    "comment" : "\n     * Constant for Iyar, the 9th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIVAN",
    "type" : "int",
    "comment" : "\n     * Constant for Sivan, the 10th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAMUZ",
    "type" : "int",
    "comment" : "\n     * Constant for Tammuz, the 11th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "AV",
    "type" : "int",
    "comment" : "\n     * Constant for Av, the 12th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "ELUL",
    "type" : "int",
    "comment" : "\n     * Constant for Elul, the 13th month of the Hebrew year.\n     ",
    "links" : [ ]
  }, {
    "name" : "LIMITS",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_LENGTH",
    "type" : "int[][]",
    "comment" : "\n     * The lengths of the Hebrew months.  This is complicated, because there\n     * are three different types of years, or six if you count leap years.\n     * Due to the rules for postponing the start of the year to avoid having\n     * certain holidays fall on the sabbath, the year can end up being three\n     * different lengths, called \"deficient\", \"normal\", and \"complete\".\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH_START",
    "type" : "int[][]",
    "comment" : "\n     * The cumulative # of days to the end of each month in a non-leap year\n     * Although this can be calculated from the MONTH_LENGTH table,\n     * keeping it around separately makes some calculations a lot faster\n     ",
    "links" : [ ]
  }, {
    "name" : "LEAP_MONTH_START",
    "type" : "int[][]",
    "comment" : "\n     * The cumulative # of days to the end of each month in a leap year\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTHS_IN_CYCLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEARS_IN_CYCLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cache",
    "type" : "CalendarCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_PARTS",
    "type" : "long",
    "comment" : " \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.",
    "links" : [ ]
  }, {
    "name" : "DAY_PARTS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_DAYS",
    "type" : "int",
    "comment" : " absolute date.",
    "links" : [ ]
  }, {
    "name" : "MONTH_FRACT",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MONTH_PARTS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BAHARAD",
    "type" : "long",
    "comment" : " Bet (Monday), Hey (5 hours from sunset), Resh-Daled (204).",
    "links" : [ ]
  }, {
    "name" : "gTemporalMonthCodesForHebrew",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(int field, int amount)",
    "returnType" : "void",
    "comment" : "\n     * Add a signed amount to a specified field, using this calendar's rules.\n     * For example, to add three days to the current date, you can call\n     * <code>add(Calendar.DATE, 3)</code>.\n     * <p>\n     * When adding to certain fields, the values of other fields may conflict and\n     * need to be changed.  For example, when adding one to the {@link #MONTH MONTH} field\n     * for the date \"30 Av 5758\", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field\n     * must be adjusted so that the result is \"29 Elul 5758\" rather than the invalid\n     * \"30 Elul 5758\".\n     * <p>\n     * This method is able to add to\n     * all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET},\n     * and {@link #ZONE_OFFSET ZONE_OFFSET}.\n     * <p>\n     * <b>Note:</b> You should always use {@link #roll roll} and add rather\n     * than attempting to perform arithmetic operations directly on the fields\n     * of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves\n     * discontinuously in non-leap years, simple arithmetic can give invalid results.\n     * <p>\n     * @param field     the time field.\n     * @param amount    the amount to add to the field.\n     *\n     * @exception   IllegalArgumentException if the field is invalid or refers\n     *              to a field that cannot be handled by this method.\n     ",
    "links" : [ "#ERA", "#roll", "#DST_OFFSET", "#MONTH", "#DAY_OF_MONTH", "#ZONE_OFFSET" ]
  }, {
    "name" : "public void roll(int field, int amount)",
    "returnType" : "void",
    "comment" : "\n     * Rolls (up/down) a specified amount time on the given field.  For\n     * example, to roll the current date up by three days, you can call\n     * <code>roll(Calendar.DATE, 3)</code>.  If the\n     * field is rolled past its maximum allowable value, it will \"wrap\" back\n     * to its minimum and continue rolling.\n     * For example, calling <code>roll(Calendar.DATE, 10)</code>\n     * on a Hebrew calendar set to \"25 Av 5758\" will result in the date \"5 Av 5758\".\n     * <p>\n     * When rolling certain fields, the values of other fields may conflict and\n     * need to be changed.  For example, when rolling the {@link #MONTH MONTH} field\n     * upward by one for the date \"30 Av 5758\", the {@link #DAY_OF_MONTH DAY_OF_MONTH} field\n     * must be adjusted so that the result is \"29 Elul 5758\" rather than the invalid\n     * \"30 Elul\".\n     * <p>\n     * This method is able to roll\n     * all fields except for {@link #ERA ERA}, {@link #DST_OFFSET DST_OFFSET},\n     * and {@link #ZONE_OFFSET ZONE_OFFSET}.  Subclasses may, of course, add support for\n     * additional fields in their overrides of <code>roll</code>.\n     * <p>\n     * <b>Note:</b> You should always use roll and {@link #add add} rather\n     * than attempting to perform arithmetic operations directly on the fields\n     * of a <tt>HebrewCalendar</tt>.  Since the {@link #MONTH MONTH} field behaves\n     * discontinuously in non-leap years, simple arithmetic can give invalid results.\n     * <p>\n     * @param field     the time field.\n     * @param amount    the amount by which the field should be rolled.\n     *\n     * @exception   IllegalArgumentException if the field is invalid or refers\n     *              to a field that cannot be handled by this method.\n     ",
    "links" : [ "#ERA", "#DST_OFFSET", "#MONTH", "#DAY_OF_MONTH", "#ZONE_OFFSET", "#add" ]
  }, {
    "name" : "private static long startOfYear(int year)",
    "returnType" : "long",
    "comment" : "\n     * Finds the day # of the first day in the given Hebrew year.\n     * To do this, we want to calculate the time of the Tishri 1 new moon\n     * in that year.\n     * <p>\n     * The algorithm here is similar to ones described in a number of\n     * references, including:\n     * <ul>\n     * <li>\"Calendrical Calculations\", by Nachum Dershowitz & Edward Reingold,\n     *     Cambridge University Press, 1997, pages 85-91.\n     *\n     * <li>Hebrew Calendar Science and Myths,\n     *     <a href=\"http://www.geocities.com/Athens/1584/\">\n     *     http://www.geocities.com/Athens/1584/</a>\n     *\n     * <li>The Calendar FAQ,\n     *      <a href=\"http://www.faqs.org/faqs/calendars/faq/\">\n     *      http://www.faqs.org/faqs/calendars/faq/</a>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int yearType(int year)",
    "returnType" : "int",
    "comment" : "\n     * Returns the the type of a given year.\n     *  0   \"Deficient\" year with 353 or 383 days\n     *  1   \"Normal\"    year with 354 or 384 days\n     *  2   \"Complete\"  year with 355 or 385 days\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLeapYear(int year)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether a given Hebrew year is a leap year\n     *\n     * The rule here is that if (year % 19) == 0, 3, 6, 8, 11, 14, or 17.\n     * The formula below performs the same test, believe it or not.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int monthsInYear(int year)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetLimit(int field, int limitType)",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetMonthLength(int extendedYear, int month)",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the given month in the given year\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetYearLength(int eyear)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of days in the given Hebrew year\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void validateField(int field)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * Overrides {@link Calendar#validateField(int)} to provide\n     * special handling for month validation for Hebrew calendar.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.util.Calendar#validateField(int)" ]
  }, {
    "name" : "protected void handleComputeFields(int julianDay)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses may override this method to compute several fields\n     * specific to each calendar system.  These are:\n     *\n     * <ul><li>ERA\n     * <li>YEAR\n     * <li>MONTH\n     * <li>DAY_OF_MONTH\n     * <li>DAY_OF_YEAR\n     * <li>EXTENDED_YEAR</ul>\n     *\n     * Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields,\n     * which will be set when this method is called.  Subclasses can\n     * also call the getGregorianXxx() methods to obtain Gregorian\n     * calendar equivalents for the given Julian day.\n     *\n     * <p>In addition, subclasses should compute any subclass-specific\n     * fields, that is, fields from BASE_FIELD_COUNT to\n     * getFieldCount() - 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleGetExtendedYear()",
    "returnType" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)",
    "returnType" : "int",
    "comment" : "\n     * Return JD of start of given month/year.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getType()",
    "returnType" : "String",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean inTemporalLeapYear()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTemporalMonthCode()",
    "returnType" : "String",
    "comment" : "\n     * Gets The Temporal monthCode value corresponding to the month for the date.\n     * The value is a string identifier that starts with the literal grapheme\n     * \"M\" followed by two graphemes representing the zero-padded month number\n     * of the current month in a normal (non-leap) year and suffixed by an\n     * optional literal grapheme \"L\" if this is a leap month in a lunisolar\n     * calendar. For the Hebrew calendar, the values are \"M01\" .. \"M12\" for\n     * non-leap year, and \"M01\" .. \"M05\", \"M05L\", \"M06\" .. \"M12\" for leap year.\n     *\n     * @return       One of 13 possible strings in {\"M01\".. \"M05\", \"M05L\", \"M06\" .. \"M12\"}.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTemporalMonthCode(String temporalMonth)",
    "returnType" : "void",
    "comment" : "\n     * Sets The Temporal monthCode which is a string identifier that starts\n     * with the literal grapheme \"M\" followed by two graphemes representing\n     * the zero-padded month number of the current month in a normal\n     * (non-leap) year and suffixed by an optional literal grapheme \"L\" if this\n     * is a leap month in a lunisolar calendar. For Hebrew calendar, the values\n     * are \"M01\" .. \"M12\" for non-leap years, and \"M01\" .. \"M05\", \"M05L\", \"M06\"\n     * .. \"M12\" for leap year.\n     * @param temporalMonth The value to be set for temporal monthCode.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int internalGetMonth()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(int field, int amount)", "public void roll(int field, int amount)", "private static long startOfYear(int year)", "private final int yearType(int year)", "public static boolean isLeapYear(int year)", "private static int monthsInYear(int year)", "protected int handleGetLimit(int field, int limitType)", "protected int handleGetMonthLength(int extendedYear, int month)", "protected int handleGetYearLength(int eyear)", "protected void validateField(int field)", "protected void handleComputeFields(int julianDay)", "protected int handleGetExtendedYear()", "protected int handleComputeMonthStart(int eyear, int month, boolean useMonth)", "public String getType()", "public boolean inTemporalLeapYear()", "public String getTemporalMonthCode()", "public void setTemporalMonthCode(String temporalMonth)", "protected int internalGetMonth()" ],
  "variableNames" : [ "serialVersionUID", "TISHRI", "HESHVAN", "KISLEV", "TEVET", "SHEVAT", "ADAR_1", "ADAR", "NISAN", "IYAR", "SIVAN", "TAMUZ", "AV", "ELUL", "LIMITS", "MONTH_LENGTH", "MONTH_START", "LEAP_MONTH_START", "MONTHS_IN_CYCLE", "YEARS_IN_CYCLE", "cache", "HOUR_PARTS", "DAY_PARTS", "MONTH_DAYS", "MONTH_FRACT", "MONTH_PARTS", "BAHARAD", "gTemporalMonthCodesForHebrew" ]
}