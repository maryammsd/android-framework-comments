{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/regex/MatchResult.java",
  "packageName" : "java.util.regex",
  "className" : "MatchResult",
  "comment" : "\n * The result of a match operation.\n *\n * <p>This interface contains query methods used to determine the\n * results of a match against a regular expression. The match boundaries,\n * groups and group boundaries can be seen but not modified through\n * a {@code MatchResult}.\n *\n * @author  Michael McCloskey\n * @see Matcher\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int start()",
    "returnType" : "int",
    "comment" : "\n     * Returns the start index of the match.\n     *\n     * @return  The index of the first character matched\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int start(int group)",
    "returnType" : "int",
    "comment" : "\n     * Returns the start index of the subsequence captured by the given group\n     * during this match.\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression <i>m.</i>{@code start(0)} is equivalent to\n     * <i>m.</i>{@code start()}.  </p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The index of the first character captured by the group,\n     *          or {@code -1} if the match was successful but the group\n     *          itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "public int end()",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset after the last character matched.\n     *\n     * @return  The offset after the last character matched\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     ",
    "links" : [ ]
  }, {
    "name" : "public int end(int group)",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset after the last character of the subsequence\n     * captured by the given group during this match.\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression <i>m.</i>{@code end(0)} is equivalent to\n     * <i>m.</i>{@code end()}.  </p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The offset after the last character captured by the group,\n     *          or {@code -1} if the match was successful\n     *          but the group itself did not match anything\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "public String group()",
    "returnType" : "String",
    "comment" : "\n     * Returns the input subsequence matched by the previous match.\n     *\n     * <p> For a matcher <i>m</i> with input sequence <i>s</i>,\n     * the expressions <i>m.</i>{@code group()} and\n     * <i>s.</i>{@code substring(}<i>m.</i>{@code start(),}&nbsp;<i>m.</i>{@code end())}\n     * are equivalent.  </p>\n     *\n     * <p> Note that some patterns, for example {@code a*}, match the empty\n     * string.  This method will return the empty string when the pattern\n     * successfully matches the empty string in the input.  </p>\n     *\n     * @return The (possibly empty) subsequence matched by the previous match,\n     *         in string form\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     ",
    "links" : [ ]
  }, {
    "name" : "public String group(int group)",
    "returnType" : "String",
    "comment" : "\n     * Returns the input subsequence captured by the given group during the\n     * previous match operation.\n     *\n     * <p> For a matcher <i>m</i>, input sequence <i>s</i>, and group index\n     * <i>g</i>, the expressions <i>m.</i>{@code group(}<i>g</i>{@code )} and\n     * <i>s.</i>{@code substring(}<i>m.</i>{@code start(}<i>g</i>{@code\n     * ),}&nbsp;<i>m.</i>{@code end(}<i>g</i>{@code ))}\n     * are equivalent.  </p>\n     *\n     * <p> <a href=\"Pattern.html#cg\">Capturing groups</a> are indexed from left\n     * to right, starting at one.  Group zero denotes the entire pattern, so\n     * the expression {@code m.group(0)} is equivalent to {@code m.group()}.\n     * </p>\n     *\n     * <p> If the match was successful but the group specified failed to match\n     * any part of the input sequence, then {@code null} is returned. Note\n     * that some groups, for example {@code (a*)}, match the empty string.\n     * This method will return the empty string when such a group successfully\n     * matches the empty string in the input.  </p>\n     *\n     * @param  group\n     *         The index of a capturing group in this matcher's pattern\n     *\n     * @return  The (possibly empty) subsequence captured by the group\n     *          during the previous match, or {@code null} if the group\n     *          failed to match part of the input\n     *\n     * @throws  IllegalStateException\n     *          If no match has yet been attempted,\n     *          or if the previous match operation failed\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If there is no capturing group in the pattern\n     *          with the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "public int groupCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of capturing groups in this match result's pattern.\n     *\n     * <p> Group zero denotes the entire pattern by convention. It is not\n     * included in this count.\n     *\n     * <p> Any non-negative integer smaller than or equal to the value\n     * returned by this method is guaranteed to be a valid group index for\n     * this matcher.  </p>\n     *\n     * @return The number of capturing groups in this matcher's pattern\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int start()", "public int start(int group)", "public int end()", "public int end(int group)", "public String group()", "public String group(int group)", "public int groupCount()" ],
  "variableNames" : [ ]
}