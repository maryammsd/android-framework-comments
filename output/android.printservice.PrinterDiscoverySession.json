{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/printservice/PrinterDiscoverySession.java",
  "packageName" : "android.printservice",
  "className" : "PrinterDiscoverySession",
  "comment" : "\n * This class encapsulates the interaction between a print service and the\n * system during printer discovery. During printer discovery you are responsible\n * for adding discovered printers, removing previously added printers that\n * disappeared, and updating already added printers.\n * <p>\n * During the lifetime of this session you may be asked to start and stop\n * performing printer discovery multiple times. You will receive a call to {@link\n * PrinterDiscoverySession#onStartPrinterDiscovery(List)} to start printer\n * discovery and a call to {@link PrinterDiscoverySession#onStopPrinterDiscovery()}\n * to stop printer discovery. When the system is no longer interested in printers\n * discovered by this session you will receive a call to {@link #onDestroy()} at\n * which point the system will no longer call into the session and all the session\n * methods will do nothing.\n * </p>\n * <p>\n * Discovered printers are added by invoking {@link\n * PrinterDiscoverySession#addPrinters(List)}. Added printers that disappeared are\n * removed by invoking {@link PrinterDiscoverySession#removePrinters(List)}. Added\n * printers whose properties or capabilities changed are updated through a call to\n * {@link PrinterDiscoverySession#addPrinters(List)}. The printers added in this\n * session can be acquired via {@link #getPrinters()} where the returned printers\n * will be an up-to-date snapshot of the printers that you reported during the\n * session. Printers are <strong>not</strong> persisted across sessions.\n * </p>\n * <p>\n * The system will make a call to {@link #onValidatePrinters(List)} if you\n * need to update some printers. It is possible that you add a printer without\n * specifying its capabilities. This enables you to avoid querying all discovered\n * printers for their capabilities, rather querying the capabilities of a printer\n * only if necessary. For example, the system will request that you update a printer\n * if it gets selected by the user. When validating printers you do not need to\n * provide the printers' capabilities but may do so.\n * </p>\n * <p>\n * If the system is interested in being constantly updated for the state of a\n * printer you will receive a call to {@link #onStartPrinterStateTracking(PrinterId)}\n * after which you will have to do a best effort to keep the system updated for\n * changes in the printer state and capabilities. You also <strong>must</strong>\n * update the printer capabilities if you did not provide them when adding it, or\n * the printer will be ignored. When the system is no longer interested in getting\n * updates for a printer you will receive a call to {@link #onStopPrinterStateTracking(\n * PrinterId)}.\n * </p>\n * <p>\n * <strong>Note: </strong> All callbacks in this class are executed on the main\n * application thread. You also have to invoke any method of this class on the main\n * application thread.\n * </p>\n ",
  "links" : [ "android.printservice.PrinterDiscoverySession#removePrinters(List)", "#onStopPrinterStateTracking(", "#getPrinters()", "android.printservice.PrinterDiscoverySession#addPrinters(List)", "#onDestroy()", "android.printservice.PrinterDiscoverySession#onStartPrinterDiscovery(List)", "#onStartPrinterStateTracking(PrinterId)", "#onValidatePrinters(List)", "android.printservice.PrinterDiscoverySession#onStopPrinterDiscovery()" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIdCounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrinters",
    "type" : "ArrayMap<PrinterId, PrinterInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrackedPrinters",
    "type" : "List<PrinterId>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSentPrinters",
    "type" : "ArrayMap<PrinterId, PrinterInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "IPrintServiceClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsDiscoveryStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setObserver(IPrintServiceClient observer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final List<PrinterInfo> getPrinters()",
    "returnType" : "List<PrinterInfo>",
    "comment" : "\n     * Gets the printers reported in this session. For example, if you add two\n     * printers and remove one of them, the returned list will contain only\n     * the printer that was added but not removed.\n     * <p>\n     * <strong>Note: </strong> Calls to this method after the session is\n     * destroyed, that is after the {@link #onDestroy()} callback, will be ignored.\n     * </p>\n     *\n     * @return The printers.\n     *\n     * @see #addPrinters(List)\n     * @see #removePrinters(List)\n     * @see #isDestroyed()\n     ",
    "links" : [ "#onDestroy()" ]
  }, {
    "name" : "public final void addPrinters(@NonNull List<PrinterInfo> printers)",
    "returnType" : "void",
    "comment" : "\n     * Adds discovered printers. Adding an already added printer updates it.\n     * Removed printers can be added again. You can call this method multiple\n     * times during the life of this session. Duplicates will be ignored.\n     * <p>\n     * <strong>Note: </strong> Calls to this method after the session is\n     * destroyed, that is after the {@link #onDestroy()} callback, will be ignored.\n     * </p>\n     *\n     * @param printers The printers to add.\n     *\n     * @see #removePrinters(List)\n     * @see #getPrinters()\n     * @see #isDestroyed()\n     ",
    "links" : [ "#onDestroy()" ]
  }, {
    "name" : "public final void removePrinters(@NonNull List<PrinterId> printerIds)",
    "returnType" : "void",
    "comment" : "\n     * Removes added printers. Removing an already removed or never added\n     * printer has no effect. Removed printers can be added again. You can\n     * call this method multiple times during the lifetime of this session.\n     * <p>\n     * <strong>Note: </strong> Calls to this method after the session is\n     * destroyed, that is after the {@link #onDestroy()} callback, will be ignored.\n     * </p>\n     *\n     * @param printerIds The ids of the removed printers.\n     *\n     * @see #addPrinters(List)\n     * @see #getPrinters()\n     * @see #isDestroyed()\n     ",
    "links" : [ "#onDestroy()" ]
  }, {
    "name" : "private void sendOutOfDiscoveryPeriodPrinterChanges()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onStartPrinterDiscovery(@NonNull List<PrinterId> priorityList)",
    "returnType" : "void",
    "comment" : "\n     * Callback asking you to start printer discovery. Discovered printers should be\n     * added via calling {@link #addPrinters(List)}. Added printers that disappeared\n     * should be removed via calling {@link #removePrinters(List)}. Added printers\n     * whose properties or capabilities changed should be updated via calling {@link\n     * #addPrinters(List)}. You will receive a call to {@link #onStopPrinterDiscovery()}\n     * when you should stop printer discovery.\n     * <p>\n     * During the lifetime of this session all printers that are known to your print\n     * service have to be added. The system does not retain any printers across sessions.\n     * However, if you were asked to start and then stop performing printer discovery\n     * in this session, then a subsequent discovering should not re-discover already\n     * discovered printers. You can get the printers reported during this session by\n     * calling {@link #getPrinters()}.\n     * </p>\n     * <p>\n     * <strong>Note: </strong>You are also given a list of printers whose availability\n     * has to be checked first. For example, these printers could be the user's favorite\n     * ones, therefore they have to be verified first. You do <strong>not need</strong>\n     * to provide the capabilities of the printers, rather verify whether they exist\n     * similarly to {@link #onValidatePrinters(List)}.\n     * </p>\n     *\n     * @param priorityList The list of printers to validate first. Never null.\n     *\n     * @see #onStopPrinterDiscovery()\n     * @see #addPrinters(List)\n     * @see #removePrinters(List)\n     * @see #isPrinterDiscoveryStarted()\n     ",
    "links" : [ "#getPrinters()", "#removePrinters(List)", "#onStopPrinterDiscovery()", "#onValidatePrinters(List)", "#addPrinters(List)" ]
  }, {
    "name" : "public abstract void onStopPrinterDiscovery()",
    "returnType" : "void",
    "comment" : "\n     * Callback notifying you that you should stop printer discovery.\n     *\n     * @see #onStartPrinterDiscovery(List)\n     * @see #isPrinterDiscoveryStarted()\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onValidatePrinters(@NonNull List<PrinterId> printerIds)",
    "returnType" : "void",
    "comment" : "\n     * Callback asking you to validate that the given printers are valid, that\n     * is they exist. You are responsible for checking whether these printers\n     * exist and for the ones that do exist notify the system via calling\n     * {@link #addPrinters(List)}.\n     * <p>\n     * <strong>Note: </strong> You are <strong>not required</strong> to provide\n     * the printer capabilities when updating the printers that do exist.\n     * <p>\n     *\n     * @param printerIds The printers to validate.\n     *\n     * @see android.print.PrinterInfo.Builder#setCapabilities(PrinterCapabilitiesInfo)\n     *      PrinterInfo.Builder.setCapabilities(PrinterCapabilitiesInfo)\n     ",
    "links" : [ "#addPrinters(List)" ]
  }, {
    "name" : "public abstract void onStartPrinterStateTracking(@NonNull PrinterId printerId)",
    "returnType" : "void",
    "comment" : "\n     * Callback asking you to start tracking the state of a printer. Tracking\n     * the state means that you should do a best effort to observe the state\n     * of this printer and notify the system if that state changes via calling\n     * {@link #addPrinters(List)}.\n     * <p>\n     * <strong>Note: </strong> A printer can be initially added without its\n     * capabilities to avoid polling printers that the user will not select.\n     * However, after this method is called you are expected to update the\n     * printer <strong>including</strong> its capabilities. Otherwise, the\n     * printer will be ignored.\n     * <p>\n     * <p>\n     * A scenario when you may be requested to track a printer's state is if\n     * the user selects that printer and the system has to present print\n     * options UI based on the printer's capabilities. In this case the user\n     * should be promptly informed if, for example, the printer becomes\n     * unavailable.\n     * </p>\n     *\n     * @param printerId The printer to start tracking.\n     *\n     * @see #onStopPrinterStateTracking(PrinterId)\n     * @see android.print.PrinterInfo.Builder#setCapabilities(PrinterCapabilitiesInfo)\n     *      PrinterInfo.Builder.setCapabilities(PrinterCapabilitiesInfo)\n     ",
    "links" : [ "#addPrinters(List)" ]
  }, {
    "name" : "public void onRequestCustomPrinterIcon(@NonNull PrinterId printerId, @NonNull CancellationSignal cancellationSignal, @NonNull CustomPrinterIconCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Called by the system to request the custom icon for a printer. Once the icon is available the\n     * print services uses {@link CustomPrinterIconCallback#onCustomPrinterIconLoaded} to send the\n     * icon to the system.\n     *\n     * @param printerId The printer to icon belongs to.\n     * @param cancellationSignal Signal used to cancel the request.\n     * @param callback Callback for returning the icon to the system.\n     *\n     * @see android.print.PrinterInfo.Builder#setHasCustomPrinterIcon(boolean)\n     ",
    "links" : [ "android.printservice.CustomPrinterIconCallback#onCustomPrinterIconLoaded" ]
  }, {
    "name" : "public abstract void onStopPrinterStateTracking(@NonNull PrinterId printerId)",
    "returnType" : "void",
    "comment" : "\n     * Callback asking you to stop tracking the state of a printer. The passed\n     * in printer id is the one for which you received a call to {@link\n     * #onStartPrinterStateTracking(PrinterId)}.\n     *\n     * @param printerId The printer to stop tracking.\n     *\n     * @see #onStartPrinterStateTracking(PrinterId)\n     ",
    "links" : [ "#onStartPrinterStateTracking(PrinterId)" ]
  }, {
    "name" : "public final List<PrinterId> getTrackedPrinters()",
    "returnType" : "List<PrinterId>",
    "comment" : "\n     * Gets the printers that should be tracked. These are printers that are\n     * important to the user and for which you received a call to {@link\n     * #onStartPrinterStateTracking(PrinterId)} asking you to observer their\n     * state and reporting it to the system via {@link #addPrinters(List)}.\n     * You will receive a call to {@link #onStopPrinterStateTracking(PrinterId)}\n     * if you should stop tracking a printer.\n     * <p>\n     * <strong>Note: </strong> Calls to this method after the session is\n     * destroyed, that is after the {@link #onDestroy()} callback, will be ignored.\n     * </p>\n     *\n     * @return The printers.\n     *\n     * @see #onStartPrinterStateTracking(PrinterId)\n     * @see #onStopPrinterStateTracking(PrinterId)\n     * @see #isDestroyed()\n     ",
    "links" : [ "#onStopPrinterStateTracking(PrinterId)", "#onDestroy()", "#onStartPrinterStateTracking(PrinterId)", "#addPrinters(List)" ]
  }, {
    "name" : "public abstract void onDestroy()",
    "returnType" : "void",
    "comment" : "\n     * Notifies you that the session is destroyed. After this callback is invoked\n     * any calls to the methods of this class will be ignored, {@link #isDestroyed()}\n     * will return true and you will also no longer receive callbacks.\n     *\n     * @see #isDestroyed()\n     ",
    "links" : [ "#isDestroyed()" ]
  }, {
    "name" : "public final boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the session is destroyed.\n     *\n     * @return Whether the session is destroyed.\n     *\n     * @see #onDestroy()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isPrinterDiscoveryStarted()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether printer discovery is started.\n     *\n     * @return Whether printer discovery is destroyed.\n     *\n     * @see #onStartPrinterDiscovery(List)\n     * @see #onStopPrinterDiscovery()\n     ",
    "links" : [ ]
  }, {
    "name" : " void startPrinterDiscovery(@NonNull List<PrinterId> priorityList)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void stopPrinterDiscovery()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void validatePrinters(@NonNull List<PrinterId> printerIds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void startPrinterStateTracking(@NonNull PrinterId printerId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void requestCustomPrinterIcon(@NonNull PrinterId printerId)",
    "returnType" : "void",
    "comment" : "\n     * Request the custom icon for a printer.\n     *\n     * @param printerId The printer to icon belongs to.\n     * @see android.print.PrinterInfo.Builder#setHasCustomPrinterIcon()\n     ",
    "links" : [ ]
  }, {
    "name" : " void stopPrinterStateTracking(@NonNull PrinterId printerId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " void setObserver(IPrintServiceClient observer)", " int getId()", "public final List<PrinterInfo> getPrinters()", "public final void addPrinters(@NonNull List<PrinterInfo> printers)", "public final void removePrinters(@NonNull List<PrinterId> printerIds)", "private void sendOutOfDiscoveryPeriodPrinterChanges()", "public abstract void onStartPrinterDiscovery(@NonNull List<PrinterId> priorityList)", "public abstract void onStopPrinterDiscovery()", "public abstract void onValidatePrinters(@NonNull List<PrinterId> printerIds)", "public abstract void onStartPrinterStateTracking(@NonNull PrinterId printerId)", "public void onRequestCustomPrinterIcon(@NonNull PrinterId printerId, @NonNull CancellationSignal cancellationSignal, @NonNull CustomPrinterIconCallback callback)", "public abstract void onStopPrinterStateTracking(@NonNull PrinterId printerId)", "public final List<PrinterId> getTrackedPrinters()", "public abstract void onDestroy()", "public final boolean isDestroyed()", "public final boolean isPrinterDiscoveryStarted()", " void startPrinterDiscovery(@NonNull List<PrinterId> priorityList)", " void stopPrinterDiscovery()", " void validatePrinters(@NonNull List<PrinterId> printerIds)", " void startPrinterStateTracking(@NonNull PrinterId printerId)", " void requestCustomPrinterIcon(@NonNull PrinterId printerId)", " void stopPrinterStateTracking(@NonNull PrinterId printerId)", " void destroy()" ],
  "variableNames" : [ "LOG_TAG", "sIdCounter", "mId", "mPrinters", "mTrackedPrinters", "mLastSentPrinters", "mObserver", "mIsDestroyed", "mIsDiscoveryStarted" ]
}