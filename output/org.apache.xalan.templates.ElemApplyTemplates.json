{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemApplyTemplates.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemApplyTemplates",
  "comment" : "\n * Implement xsl:apply-templates.\n * <pre>\n * &amp;!ELEMENT xsl:apply-templates (xsl:sort|xsl:with-param)*>\n * &amp;!ATTLIST xsl:apply-templates\n *   select %expr; \"node()\"\n *   mode %qname; #IMPLIED\n * &amp;\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Applying-Template-Rules\">section-Applying-Template-Rules in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_mode",
    "type" : "QName",
    "comment" : "\n   * mode %qname; #IMPLIED\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isDefaultTemplate",
    "type" : "boolean",
    "comment" : "\n   * Tells if this belongs to a default template,\n   * in which case it will act different with\n   * regard to processing modes.\n   * @see <a href=\"http://www.w3.org/TR/xslt#built-in-rule\">built-in-rule in XSLT Specification</a>\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setMode(QName mode)",
    "returnType" : "void",
    "comment" : "\n   * Set the mode attribute for this element.\n   *\n   * @param mode reference, which may be null, to the <a href=\"http://www.w3.org/TR/xslt#modes\">current mode</a>.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getMode()",
    "returnType" : "QName",
    "comment" : "\n   * Get the mode attribute for this element.\n   *\n   * @return The mode attribute for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIsDefaultTemplate(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * Set if this belongs to a default template,\n   * in which case it will act different with\n   * regard to processing modes.\n   * @see <a href=\"http://www.w3.org/TR/xslt#built-in-rule\">built-in-rule in XSLT Specification</a>\n   *\n   * @param b boolean value to set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return Token ID for this element types\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return Element name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Apply the context node to the matching templates.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Applying-Template-Rules\">section-Applying-Template-Rules in XSLT Specification</a>\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Perform a query if needed, and call transformNode for each child.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException Thrown in a variety of circumstances.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setMode(QName mode)", "public QName getMode()", "public void setIsDefaultTemplate(boolean b)", "public int getXSLToken()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_mode", "m_isDefaultTemplate" ]
}