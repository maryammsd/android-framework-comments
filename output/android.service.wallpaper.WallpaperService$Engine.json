{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/wallpaper/WallpaperService.java",
  "packageName" : "android.service.wallpaper",
  "className" : "Engine",
  "comment" : "\n     * The actual implementation of a wallpaper.  A wallpaper service may\n     * have multiple instances running (for example as a real wallpaper\n     * and as a preview), each of which is represented by its own Engine\n     * instance.  You must implement {@link WallpaperService#onCreateEngine()}\n     * to return your concrete Engine implementation.\n     ",
  "links" : [ "android.service.wallpaper.WallpaperService#onCreateEngine()" ],
  "variables" : [ {
    "name" : "mIWallpaperEngine",
    "type" : "IWallpaperEngineWrapper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaller",
    "type" : "HandlerCaller",
    "comment" : " Copies from mIWallpaperEngine.",
    "links" : [ ]
  }, {
    "name" : "mConnection",
    "type" : "IWallpaperConnection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitializing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsScreenTurningOn",
    "type" : "boolean",
    "comment" : "\n         * Whether the screen is turning on.\n         * After the display is powered on, brightness is initially off. It is turned on only after\n         * all windows have been drawn, and sysui notifies that it's ready (See\n         * {@link com.android.internal.policy.IKeyguardDrawnCallback}).\n         * As some wallpapers use visibility as a signal to start animations, this makes sure\n         * {@link Engine#onVisibilityChanged} is invoked only when the display is both on and\n         * visible (with brightness on).\n         ",
    "links" : [ "#onVisibilityChanged", "com.android.internal.policy.IKeyguardDrawnCallback" ]
  }, {
    "name" : "mReportedVisible",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreserveVisible",
    "type" : "boolean",
    "comment" : "\n         * This is used with {@link #PRESERVE_VISIBLE_TIMEOUT_MS} to avoid intermediate visibility\n         * changes if the display may be toggled in a short time, e.g. display switch.\n         ",
    "links" : [ "#PRESERVE_VISIBLE_TIMEOUT_MS" ]
  }, {
    "name" : "mDestroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrozenRequested",
    "type" : "boolean",
    "comment" : " host receives onVisibilityChanged(false) callback.",
    "links" : [ ]
  }, {
    "name" : "mCreated",
    "type" : "boolean",
    "comment" : " Current window state.",
    "links" : [ ]
  }, {
    "name" : "mSurfaceCreated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsCreating",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawingAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffsetsChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFixedSizeAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldDimByDefault",
    "type" : "boolean",
    "comment" : " based on its color hints",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mZoom",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowPrivateFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurWindowFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurWindowPrivateFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviewSurfacePosition",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWinFrames",
    "type" : "ClientWindowFrames",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchedContentInsets",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchedStableInsets",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatchedDisplayCutout",
    "type" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsetsState",
    "type" : "InsetsState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempControls",
    "type" : "InsetsSourceControl.Array",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMergedConfiguration",
    "type" : "MergedConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSyncSeqIdBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRelayoutResult",
    "type" : "WindowRelayoutResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceSize",
    "type" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastSurfaceSize",
    "type" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpValues",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayout",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSession",
    "type" : "IWindowSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOffsetMessageEnqueued",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingXOffset",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingYOffset",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingXOffsetStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingYOffsetStep",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalColorAreas",
    "type" : "ArraySet<RectF>",
    "comment" : "\n         * local color extraction related fields. When a user calls `addLocalColorAreas`\n         ",
    "links" : [ ]
  }, {
    "name" : "mLocalColorsToAdd",
    "type" : "ArraySet<RectF>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastProcessLocalColorsTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProcessLocalColorsPending",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPixelCopyCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowPages",
    "type" : "EngineWindowPage[]",
    "comment" : " 2D matrix [x][y] to represent a page of a portion of a window",
    "links" : [ ]
  }, {
    "name" : "mLastScreenshot",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResetWindowPages",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingSync",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingMove",
    "type" : "MotionEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInAmbientMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastColorInvalidation",
    "type" : "long",
    "comment" : " used to throttle onComputeColors",
    "links" : [ ]
  }, {
    "name" : "mNotifyColorsChanged",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClockFunction",
    "type" : "Supplier<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplay",
    "type" : "Display",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomDimAmount",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWallpaperDimAmount",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreviousWallpaperDimAmount",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultDimAmount",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBbqSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlastBufferQueue",
    "type" : "BLASTBufferQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScreenshotSurfaceControl",
    "type" : "SurfaceControl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScreenshotSize",
    "type" : "Point",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceHolder",
    "type" : "BaseSurfaceHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputEventReceiver",
    "type" : "WallpaperInputEventReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindow",
    "type" : "BaseIWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayListener",
    "type" : "DisplayListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SurfaceHolder getSurfaceHolder()",
    "returnType" : "SurfaceHolder",
    "comment" : "\n         * Provides access to the surface in which this wallpaper is drawn.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getWallpaperFlags()",
    "returnType" : "int",
    "comment" : "\n         * Returns the current wallpaper flags indicating which screen this Engine is rendering to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getDesiredMinimumWidth()",
    "returnType" : "int",
    "comment" : "\n         * Convenience for {@link WallpaperManager#getDesiredMinimumWidth()\n         * WallpaperManager.getDesiredMinimumWidth()}, returning the width\n         * that the system would like this wallpaper to run in.\n         ",
    "links" : [ "android.app.WallpaperManager#getDesiredMinimumWidth()" ]
  }, {
    "name" : "public int getDesiredMinimumHeight()",
    "returnType" : "int",
    "comment" : "\n         * Convenience for {@link WallpaperManager#getDesiredMinimumHeight()\n         * WallpaperManager.getDesiredMinimumHeight()}, returning the height\n         * that the system would like this wallpaper to run in.\n         ",
    "links" : [ "android.app.WallpaperManager#getDesiredMinimumHeight()" ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether the wallpaper is currently visible to the user,\n         * this is the last value supplied to\n         * {@link #onVisibilityChanged(boolean)}.\n         ",
    "links" : [ "#onVisibilityChanged(boolean)" ]
  }, {
    "name" : "public boolean supportsLocalColorExtraction()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether the wallpaper is capable of extracting local colors in a rectangle area,\n         * Must implement without calling super:\n         * {@link #addLocalColorsAreas(List)}\n         * {@link #removeLocalColorsAreas(List)}\n         * When local colors change, call {@link #notifyLocalColorsChanged(List, List)}\n         * See {@link com.android.systemui.wallpapers.ImageWallpaper} for an example\n         * @hide\n         ",
    "links" : [ "#removeLocalColorsAreas(List)", "com.android.systemui.wallpapers.ImageWallpaper", "#notifyLocalColorsChanged(List", "#addLocalColorsAreas(List)" ]
  }, {
    "name" : "public boolean isPreview()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this engine is running in preview mode -- that is,\n         * it is being shown to the user before they select it as the actual\n         * wallpaper.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInAmbientMode()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this engine is running in ambient mode -- that is,\n         * it is being shown in low power mode, on always on display.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldZoomOutWallpaper()",
    "returnType" : "boolean",
    "comment" : "\n         * This will be called when the wallpaper is first started. If true is returned, the system\n         * will zoom in the wallpaper by default and zoom it out as the user interacts,\n         * to create depth. Otherwise, zoom will have to be handled manually\n         * in {@link #onZoomChanged(float)}.\n         *\n         * @hide\n         ",
    "links" : [ "#onZoomChanged(float)" ]
  }, {
    "name" : "public boolean shouldWaitForEngineShown()",
    "returnType" : "boolean",
    "comment" : "\n         * This will be called in the end of {@link #updateSurface(boolean, boolean, boolean)}.\n         * If true is returned, the engine will not report shown until rendering finished is\n         * reported. Otherwise, the engine will report shown immediately right after redraw phase\n         * in {@link #updateSurface(boolean, boolean, boolean)}.\n         *\n         * @hide\n         ",
    "links" : [ "#updateSurface(boolean" ]
  }, {
    "name" : "public void reportEngineShown(boolean waitForEngineShown)",
    "returnType" : "void",
    "comment" : "\n         * Reports the rendering is finished, stops waiting, then invokes\n         * {@link IWallpaperEngineWrapper#reportShown()}.\n         *\n         * @hide\n         ",
    "links" : [ "#reportShown()" ]
  }, {
    "name" : "public void setTouchEventsEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Control whether this wallpaper will receive raw touch events\n         * from the window manager as the user interacts with the window\n         * that is currently displaying the wallpaper.  By default they\n         * are turned off.  If enabled, the events will be received in\n         * {@link #onTouchEvent(MotionEvent)}.\n         ",
    "links" : [ "#onTouchEvent(MotionEvent)" ]
  }, {
    "name" : "public void setOffsetNotificationsEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Control whether this wallpaper will receive notifications when the wallpaper\n         * has been scrolled. By default, wallpapers will receive notifications, although\n         * the default static image wallpapers do not. It is a performance optimization to\n         * set this to false.\n         *\n         * @param enabled whether the wallpaper wants to receive offset notifications\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setShowForAllUsers(boolean show)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setFixedSizeAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public float getZoom()",
    "returnType" : "float",
    "comment" : "\n         * Returns the current scale of the surface\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCreate(SurfaceHolder surfaceHolder)",
    "returnType" : "void",
    "comment" : "\n         * Called once to initialize the engine.  After returning, the\n         * engine's surface will be created by the framework.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "\n         * Called right before the engine is going away.  After this the\n         * surface will be destroyed and this Engine object is no longer\n         * valid.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onVisibilityChanged(boolean visible)",
    "returnType" : "void",
    "comment" : "\n         * Called to inform you of the wallpaper becoming visible or\n         * hidden.  <em>It is very important that a wallpaper only use\n         * CPU while it is visible.</em>.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onApplyWindowInsets(WindowInsets insets)",
    "returnType" : "void",
    "comment" : "\n         * Called with the current insets that are in effect for the wallpaper.\n         * This gives you the part of the overall wallpaper surface that will\n         * generally be visible to the user (ignoring position offsets applied to it).\n         *\n         * @param insets Insets to apply.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTouchEvent(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Called as the user performs touch-screen interaction with the\n         * window that is currently showing this wallpaper.  Note that the\n         * events you receive here are driven by the actual application the\n         * user is interacting with, so if it is slow you will get fewer\n         * move events.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onOffsetsChanged(float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset)",
    "returnType" : "void",
    "comment" : "\n         * Called to inform you of the wallpaper's offsets changing\n         * within its contain, corresponding to the container's\n         * call to {@link WallpaperManager#setWallpaperOffsets(IBinder, float, float)\n         * WallpaperManager.setWallpaperOffsets()}.\n         ",
    "links" : [ "android.app.WallpaperManager#setWallpaperOffsets(IBinder" ]
  }, {
    "name" : "public Bundle onCommand(String action, int x, int y, int z, Bundle extras, boolean resultRequested)",
    "returnType" : "Bundle",
    "comment" : "\n         * Process a command that was sent to the wallpaper with\n         * {@link WallpaperManager#sendWallpaperCommand}.\n         * The default implementation does nothing, and always returns null\n         * as the result.\n         *\n         * @param action The name of the command to perform.  This tells you\n         * what to do and how to interpret the rest of the arguments.\n         * @param x Generic integer parameter.\n         * @param y Generic integer parameter.\n         * @param z Generic integer parameter.\n         * @param extras Any additional parameters.\n         * @param resultRequested If true, the caller is requesting that\n         * a result, appropriate for the command, be returned back.\n         * @return If returning a result, create a Bundle and place the\n         * result data in to it.  Otherwise return null.\n         ",
    "links" : [ "android.app.WallpaperManager#sendWallpaperCommand" ]
  }, {
    "name" : "public void onAmbientModeChanged(boolean inAmbientMode, long animationDuration)",
    "returnType" : "void",
    "comment" : "\n         * Called when the device enters or exits ambient mode.\n         *\n         * @param inAmbientMode {@code true} if in ambient mode.\n         * @param animationDuration How long the transition animation to change the ambient state\n         *                          should run, in milliseconds. If 0 is passed as the argument\n         *                          here, the state should be switched immediately.\n         *\n         * @see #isInAmbientMode()\n         * @see WallpaperInfo#supportsAmbientMode()\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onDimAmountChanged(float dimAmount)",
    "returnType" : "void",
    "comment" : "\n         * Called when the dim amount of the wallpaper changed. This can be used to recompute the\n         * wallpaper colors based on the new dim, and call {@link #notifyColorsChanged()}.\n         * @hide\n         ",
    "links" : [ "#notifyColorsChanged()" ]
  }, {
    "name" : "public void onDesiredSizeChanged(int desiredWidth, int desiredHeight)",
    "returnType" : "void",
    "comment" : "\n         * Called when an application has changed the desired virtual size of\n         * the wallpaper.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Convenience for {@link SurfaceHolder.Callback#surfaceChanged\n         * SurfaceHolder.Callback.surfaceChanged()}.\n         ",
    "links" : [ "SurfaceHolder.Callback#surfaceChangedSurfaceHolder.Callback.surfaceChanged()" ]
  }, {
    "name" : "public void onSurfaceRedrawNeeded(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n         * Convenience for {@link SurfaceHolder.Callback2#surfaceRedrawNeeded\n         * SurfaceHolder.Callback.surfaceRedrawNeeded()}.\n         ",
    "links" : [ "SurfaceHolder.Callback2#surfaceRedrawNeededSurfaceHolder.Callback.surfaceRedrawNeeded()" ]
  }, {
    "name" : "public void onSurfaceCreated(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n         * Convenience for {@link SurfaceHolder.Callback#surfaceCreated\n         * SurfaceHolder.Callback.surfaceCreated()}.\n         ",
    "links" : [ "SurfaceHolder.Callback#surfaceCreatedSurfaceHolder.Callback.surfaceCreated()" ]
  }, {
    "name" : "public void onSurfaceDestroyed(SurfaceHolder holder)",
    "returnType" : "void",
    "comment" : "\n         * Convenience for {@link SurfaceHolder.Callback#surfaceDestroyed\n         * SurfaceHolder.Callback.surfaceDestroyed()}.\n         ",
    "links" : [ "SurfaceHolder.Callback#surfaceDestroyedSurfaceHolder.Callback.surfaceDestroyed()" ]
  }, {
    "name" : "public void onWallpaperFlagsChanged(@SetWallpaperFlags int which)",
    "returnType" : "void",
    "comment" : "\n         * Called when the current wallpaper flags change.\n         *\n         * @param which The new flag value\n         * @see #getWallpaperFlags()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onZoomChanged(@FloatRange(from = 0f, to = 1f) float zoom)",
    "returnType" : "void",
    "comment" : "\n         * Called when the zoom level of the wallpaper changed.\n         * This method will be called with the initial zoom level when the surface is created.\n         *\n         * @param zoom the zoom level, between 0 indicating fully zoomed in and 1 indicating fully\n         *             zoomed out.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyColorsChanged()",
    "returnType" : "void",
    "comment" : "\n         * Notifies the engine that wallpaper colors changed significantly.\n         * This will trigger a {@link #onComputeColors()} call.\n         ",
    "links" : [ "#onComputeColors()" ]
  }, {
    "name" : "public WallpaperColors onComputeColors()",
    "returnType" : "WallpaperColors",
    "comment" : "\n         * Called by the system when it needs to know what colors the wallpaper is using.\n         * You might return null if no color information is available at the moment.\n         * In that case you might want to call {@link #notifyColorsChanged()} when\n         * color information becomes available.\n         * <p>\n         * The simplest way of creating a {@link android.app.WallpaperColors} object is by using\n         * {@link android.app.WallpaperColors#fromBitmap(Bitmap)} or\n         * {@link android.app.WallpaperColors#fromDrawable(Drawable)}, but you can also specify\n         * your main colors by constructing a {@link android.app.WallpaperColors} object manually.\n         *\n         * @return Wallpaper colors.\n         ",
    "links" : [ "android.app.WallpaperColors", "#notifyColorsChanged()", "android.app.WallpaperColors#fromDrawable(Drawable)", "android.app.WallpaperColors#fromBitmap(Bitmap)" ]
  }, {
    "name" : "public void notifyLocalColorsChanged(@NonNull List<RectF> regions, @NonNull List<WallpaperColors> colors) throws RuntimeException",
    "returnType" : "void",
    "comment" : "\n         * Send the changed local color areas for the connection\n         * @param regions\n         * @param colors\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private void setPrimaryWallpaperColors(WallpaperColors colors)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateWallpaperDimming(float dimAmount)",
    "returnType" : "void",
    "comment" : "\n         * Update the dim amount of the wallpaper by updating the surface.\n         *\n         * @param dimAmount Float amount between [0.0, 1.0] to dim the wallpaper.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setCreated(boolean created)",
    "returnType" : "void",
    "comment" : "\n         * Sets internal engine state. Only for testing.\n         * @param created {@code true} or {@code false}.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void dump(String prefix, FileDescriptor fd, PrintWriter out, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setZoom(float zoom)",
    "returnType" : "void",
    "comment" : "\n         * Set the wallpaper zoom to the given value. This value will be ignored when in ambient\n         * mode (and zoom will be reset to 0).\n         * @hide\n         * @param zoom between 0 and 1 (inclusive) indicating fully zoomed in to fully zoomed out\n         *              respectively.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void dispatchPointer(MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updateSurface(boolean forceRelayout, boolean forceReport, boolean redrawNeeded)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resizePreview(Rect position)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reposition()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void attach(IWallpaperEngineWrapper wrapper)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Context getDisplayContext()",
    "returnType" : "Context",
    "comment" : "\n         * The {@link Context} with resources that match the current display the wallpaper is on.\n         * For multiple display environment, multiple engines can be created to render on each\n         * display, but these displays may have different densities. Use this context to get the\n         * corresponding resources for currently display, avoiding the context of the service.\n         * <p>\n         * The display context will never be {@code null} after\n         * {@link Engine#onCreate(SurfaceHolder)} has been called.\n         *\n         * @return A {@link Context} for current display.\n         ",
    "links" : [ "android.content.Context", "#onCreate(SurfaceHolder)" ]
  }, {
    "name" : "public void doAmbientModeChanged(boolean inAmbientMode, long animationDuration)",
    "returnType" : "void",
    "comment" : "\n         * Executes life cycle event and updates internal ambient mode state based on\n         * message sent from handler.\n         *\n         * @param inAmbientMode {@code true} if in ambient mode.\n         * @param animationDuration For how long the transition will last, in ms.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : " void doDesiredSizeChanged(int desiredWidth, int desiredHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doDisplayPaddingChanged(Rect padding)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onScreenTurningOnChanged(boolean isScreenTurningOn)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doVisibilityChanged(boolean visible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportVisibility(boolean forceReport)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doOffsetsChanged(boolean always)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processLocalColors()",
    "returnType" : "void",
    "comment" : "\n         * Thread-safe util to call {@link #processLocalColorsInternal} with a minimum interval of\n         * {@link #PROCESS_LOCAL_COLORS_INTERVAL_MS} between two calls.\n         ",
    "links" : [ "#PROCESS_LOCAL_COLORS_INTERVAL_MS", "#processLocalColorsInternal" ]
  }, {
    "name" : "private void processLocalColorsInternal()",
    "returnType" : "void",
    "comment" : "\n         * Default implementation of the local color extraction.\n         * This will take a screenshot of the whole wallpaper on the main thread.\n         * Then, in a background thread, for each launcher page, for each area that needs color\n         * extraction in this page, creates a sub-bitmap and call {@link WallpaperColors#fromBitmap}\n         * to extract the colors. Every time a launcher page has been processed, call\n         * {@link #notifyLocalColorsChanged} with the color and areas of this page.\n         ",
    "links" : [ "android.app.WallpaperColors#fromBitmap", "#notifyLocalColorsChanged" ]
  }, {
    "name" : "private void initWindowPages(EngineWindowPage[] windowPages, float step)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void updatePage(EngineWindowPage currentPage, Set<RectF> areas, int pageIndx, int numPages, float wallpaperDimAmount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePageColors(EngineWindowPage page, Set<RectF> areas, int pageIndx, int numPages, float wallpaperDimAmount)",
    "returnType" : "void",
    "comment" : " locked by the passed page",
    "links" : [ ]
  }, {
    "name" : "private RectF generateSubRect(RectF in, int pageInx, int numPages)",
    "returnType" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetWindowPages()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getRectFPage(RectF area, float step)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addLocalColorsAreas(@NonNull List<RectF> regions)",
    "returnType" : "void",
    "comment" : "\n         * Add local colors areas of interest\n         * @param regions list of areas\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void removeLocalColorsAreas(@NonNull List<RectF> regions)",
    "returnType" : "void",
    "comment" : "\n         * Remove local colors areas of interest if they exist\n         * @param regions list of areas\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private Rect fixRect(Bitmap b, Rect r)",
    "returnType" : "Rect",
    "comment" : " fix the rect to be included within the bounds of the bitmap",
    "links" : [ ]
  }, {
    "name" : "private boolean validStep(float step)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doCommand(WallpaperCommand cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleDisplaySwitch(boolean startToSwitch)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateFrozenState(boolean frozenRequested)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void freeze()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unfreeze()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanUpScreenshotSurfaceControl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scaleAndCropScreenshot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean showScreenshotOfWallpaper()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportSurfaceDestroyed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "private Surface getOrCreateBLASTSurface(int width, int height, int format)",
    "returnType" : "Surface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SurfaceHolder getSurfaceHolder()", "public int getWallpaperFlags()", "public int getDesiredMinimumWidth()", "public int getDesiredMinimumHeight()", "public boolean isVisible()", "public boolean supportsLocalColorExtraction()", "public boolean isPreview()", "public boolean isInAmbientMode()", "public boolean shouldZoomOutWallpaper()", "public boolean shouldWaitForEngineShown()", "public void reportEngineShown(boolean waitForEngineShown)", "public void setTouchEventsEnabled(boolean enabled)", "public void setOffsetNotificationsEnabled(boolean enabled)", "public void setShowForAllUsers(boolean show)", "public void setFixedSizeAllowed(boolean allowed)", "public float getZoom()", "public void onCreate(SurfaceHolder surfaceHolder)", "public void onDestroy()", "public void onVisibilityChanged(boolean visible)", "public void onApplyWindowInsets(WindowInsets insets)", "public void onTouchEvent(MotionEvent event)", "public void onOffsetsChanged(float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset)", "public Bundle onCommand(String action, int x, int y, int z, Bundle extras, boolean resultRequested)", "public void onAmbientModeChanged(boolean inAmbientMode, long animationDuration)", "public void onDimAmountChanged(float dimAmount)", "public void onDesiredSizeChanged(int desiredWidth, int desiredHeight)", "public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height)", "public void onSurfaceRedrawNeeded(SurfaceHolder holder)", "public void onSurfaceCreated(SurfaceHolder holder)", "public void onSurfaceDestroyed(SurfaceHolder holder)", "public void onWallpaperFlagsChanged(@SetWallpaperFlags int which)", "public void onZoomChanged(@FloatRange(from = 0f, to = 1f) float zoom)", "public void notifyColorsChanged()", "public WallpaperColors onComputeColors()", "public void notifyLocalColorsChanged(@NonNull List<RectF> regions, @NonNull List<WallpaperColors> colors) throws RuntimeException", "private void setPrimaryWallpaperColors(WallpaperColors colors)", "private void updateWallpaperDimming(float dimAmount)", "public void setCreated(boolean created)", "protected void dump(String prefix, FileDescriptor fd, PrintWriter out, String[] args)", "public void setZoom(float zoom)", "private void dispatchPointer(MotionEvent event)", " void updateSurface(boolean forceRelayout, boolean forceReport, boolean redrawNeeded)", "private void resizePreview(Rect position)", "private void reposition()", " void attach(IWallpaperEngineWrapper wrapper)", "public Context getDisplayContext()", "public void doAmbientModeChanged(boolean inAmbientMode, long animationDuration)", " void doDesiredSizeChanged(int desiredWidth, int desiredHeight)", " void doDisplayPaddingChanged(Rect padding)", " void onScreenTurningOnChanged(boolean isScreenTurningOn)", " void doVisibilityChanged(boolean visible)", " void reportVisibility(boolean forceReport)", " void doOffsetsChanged(boolean always)", "private void processLocalColors()", "private void processLocalColorsInternal()", "private void initWindowPages(EngineWindowPage[] windowPages, float step)", " void updatePage(EngineWindowPage currentPage, Set<RectF> areas, int pageIndx, int numPages, float wallpaperDimAmount)", "private void updatePageColors(EngineWindowPage page, Set<RectF> areas, int pageIndx, int numPages, float wallpaperDimAmount)", "private RectF generateSubRect(RectF in, int pageInx, int numPages)", "private void resetWindowPages()", "private int getRectFPage(RectF area, float step)", "public void addLocalColorsAreas(@NonNull List<RectF> regions)", "public void removeLocalColorsAreas(@NonNull List<RectF> regions)", "private Rect fixRect(Bitmap b, Rect r)", "private boolean validStep(float step)", " void doCommand(WallpaperCommand cmd)", "private void handleDisplaySwitch(boolean startToSwitch)", "private void updateFrozenState(boolean frozenRequested)", "private void freeze()", "private void unfreeze()", "private void cleanUpScreenshotSurfaceControl()", " void scaleAndCropScreenshot()", "private boolean showScreenshotOfWallpaper()", " void reportSurfaceDestroyed()", "public void detach()", "private Surface getOrCreateBLASTSurface(int width, int height, int format)" ],
  "variableNames" : [ "mIWallpaperEngine", "mCaller", "mConnection", "mWindowToken", "mInitializing", "mVisible", "mIsScreenTurningOn", "mReportedVisible", "mPreserveVisible", "mDestroyed", "mFrozenRequested", "mCreated", "mSurfaceCreated", "mIsCreating", "mDrawingAllowed", "mOffsetsChanged", "mFixedSizeAllowed", "mShouldDimByDefault", "mWidth", "mHeight", "mFormat", "mType", "mCurWidth", "mCurHeight", "mZoom", "mWindowFlags", "mWindowPrivateFlags", "mCurWindowFlags", "mCurWindowPrivateFlags", "mPreviewSurfacePosition", "mWinFrames", "mDispatchedContentInsets", "mDispatchedStableInsets", "mDispatchedDisplayCutout", "mInsetsState", "mTempControls", "mMergedConfiguration", "mSyncSeqIdBundle", "mSurfaceControl", "mRelayoutResult", "mSurfaceSize", "mLastSurfaceSize", "mTmpMatrix", "mTmpValues", "mLayout", "mSession", "mLock", "mOffsetMessageEnqueued", "mPendingXOffset", "mPendingYOffset", "mPendingXOffsetStep", "mPendingYOffsetStep", "mLocalColorAreas", "mLocalColorsToAdd", "mLastProcessLocalColorsTimestamp", "mProcessLocalColorsPending", "mPixelCopyCount", "mWindowPages", "mLastScreenshot", "mResetWindowPages", "mPendingSync", "mPendingMove", "mIsInAmbientMode", "mLastColorInvalidation", "mNotifyColorsChanged", "mClockFunction", "mHandler", "mDisplay", "mDisplayContext", "mDisplayState", "mCustomDimAmount", "mWallpaperDimAmount", "mPreviousWallpaperDimAmount", "mDefaultDimAmount", "mBbqSurfaceControl", "mBlastBufferQueue", "mScreenshotSurfaceControl", "mScreenshotSize", "mSurfaceHolder", "mInputEventReceiver", "mWindow", "mDisplayListener" ]
}