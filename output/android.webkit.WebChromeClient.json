{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/webkit/WebChromeClient.java",
  "packageName" : "android.webkit",
  "className" : "WebChromeClient",
  "comment" : "",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onProgressChanged(WebView view, int newProgress)",
    "returnType" : "void",
    "comment" : "\n     * Tell the host application the current progress of loading a page.\n     * @param view The WebView that initiated the callback.\n     * @param newProgress Current page loading progress, represented by\n     *                    an integer between 0 and 100.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedTitle(WebView view, String title)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application of a change in the document title.\n     * @param view The WebView that initiated the callback.\n     * @param title A String containing the new title of the document.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedIcon(WebView view, Bitmap icon)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application of a new favicon for the current page.\n     * @param view The WebView that initiated the callback.\n     * @param icon A Bitmap containing the favicon for the current page.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application of the url for an apple-touch-icon.\n     * @param view The WebView that initiated the callback.\n     * @param url The icon url.\n     * @param precomposed {@code true} if the url is for a precomposed touch icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onShowCustomView(View view, CustomViewCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the current page has entered full screen mode. After this\n     * call, web content will no longer be rendered in the WebView, but will instead be rendered\n     * in {@code view}. The host application should add this View to a Window which is configured\n     * with {@link android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN} flag in order to\n     * actually display this web content full screen.\n     *\n     * <p>The application may explicitly exit fullscreen mode by invoking {@code callback} (ex. when\n     * the user presses the back button). However, this is generally not necessary as the web page\n     * will often show its own UI to close out of fullscreen. Regardless of how the WebView exits\n     * fullscreen mode, WebView will invoke {@link #onHideCustomView()}, signaling for the\n     * application to remove the custom View.\n     *\n     * <p>If this method is not overridden, WebView will report to the web page it does not support\n     * fullscreen mode and will not honor the web page's request to run in fullscreen mode.\n     *\n     * <p class=\"note\"><b>Note:</b> if overriding this method, the application must also override\n     * {@link #onHideCustomView()}.\n     *\n     * @param view is the View object to be shown.\n     * @param callback invoke this callback to request the page to exit\n     * full screen mode.\n     ",
    "links" : [ "#onHideCustomView()", "android.view.WindowManager.LayoutParams#FLAG_FULLSCREEN" ]
  }, {
    "name" : "public void onShowCustomView(View view, int requestedOrientation, CustomViewCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the current page would\n     * like to show a custom View in a particular orientation.\n     * @param view is the View object to be shown.\n     * @param requestedOrientation An orientation constant as used in\n     * {@link ActivityInfo#screenOrientation ActivityInfo.screenOrientation}.\n     * @param callback is the callback to be invoked if and when the view\n     * is dismissed.\n     * @deprecated This method supports the obsolete plugin mechanism,\n     * and will not be invoked in future\n     ",
    "links" : [ "android.content.pm.ActivityInfo#screenOrientation" ]
  }, {
    "name" : "public void onHideCustomView()",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the current page has exited full screen mode. The host\n     * application must hide the custom View (the View which was previously passed to {@link\n     * #onShowCustomView(View, CustomViewCallback) onShowCustomView()}). After this call, web\n     * content will render in the original WebView again.\n     *\n     * <p class=\"note\"><b>Note:</b> if overriding this method, the application must also override\n     * {@link #onShowCustomView(View, CustomViewCallback) onShowCustomView()}.\n     ",
    "links" : [ "#onShowCustomView(View" ]
  }, {
    "name" : "public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)",
    "returnType" : "boolean",
    "comment" : "\n     * Request the host application to create a new window. If the host\n     * application chooses to honor this request, it should return {@code true} from\n     * this method, create a new WebView to host the window, insert it into the\n     * View system and send the supplied resultMsg message to its target with\n     * the new WebView as an argument. If the host application chooses not to\n     * honor the request, it should return {@code false} from this method. The default\n     * implementation of this method does nothing and hence returns {@code false}.\n     * <p>\n     * Applications should typically not allow windows to be created when the\n     * {@code isUserGesture} flag is false, as this may be an unwanted popup.\n     * <p>\n     * Applications should be careful how they display the new window: don't simply\n     * overlay it over the existing WebView as this may mislead the user about which\n     * site they are viewing. If your application displays the URL of the main page,\n     * make sure to also display the URL of the new window in a similar fashion. If\n     * your application does not display URLs, consider disallowing the creation of\n     * new windows entirely.\n     * <p class=\"note\"><b>Note:</b> There is no trustworthy way to tell which page\n     * requested the new window: the request might originate from a third-party iframe\n     * inside the WebView.\n     *\n     * @param view The WebView from which the request for a new window\n     *             originated.\n     * @param isDialog {@code true} if the new window should be a dialog, rather than\n     *                 a full-size window.\n     * @param isUserGesture {@code true} if the request was initiated by a user gesture,\n     *                      such as the user clicking a link.\n     * @param resultMsg The message to send when once a new WebView has been\n     *                  created. resultMsg.obj is a\n     *                  {@link WebView.WebViewTransport} object. This should be\n     *                  used to transport the new WebView, by calling\n     *                  {@link WebView.WebViewTransport#setWebView(WebView)\n     *                  WebView.WebViewTransport.setWebView(WebView)}.\n     * @return This method should return {@code true} if the host application will\n     *         create a new window, in which case resultMsg should be sent to\n     *         its target. Otherwise, this method should return {@code false}. Returning\n     *         {@code false} from this method but also sending resultMsg will result in\n     *         undefined behavior.\n     ",
    "links" : [ "WebView.WebViewTransport#setWebView(WebView)", "WebView.WebViewTransport" ]
  }, {
    "name" : "public void onRequestFocus(WebView view)",
    "returnType" : "void",
    "comment" : "\n     * Request display and focus for this WebView. This may happen due to\n     * another WebView opening a link in this WebView and requesting that this\n     * WebView be displayed.\n     * @param view The WebView that needs to be focused.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCloseWindow(WebView window)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application to close the given WebView and remove it\n     * from the view system if necessary. At this point, WebCore has stopped\n     * any loading in this window and has removed any cross-scripting ability\n     * in javascript.\n     * <p>\n     * As with {@link #onCreateWindow}, the application should ensure that any\n     * URL or security indicator displayed is updated so that the user can tell\n     * that the page they were interacting with has been closed.\n     *\n     * @param window The WebView that needs to be closed.\n     ",
    "links" : [ "#onCreateWindow" ]
  }, {
    "name" : "public boolean onJsAlert(WebView view, String url, String message, JsResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify the host application that the web page wants to display a\n     * JavaScript {@code alert()} dialog.\n     * <p>The default behavior if this method returns {@code false} or is not\n     * overridden is to show a dialog containing the alert message and suspend\n     * JavaScript execution until the dialog is dismissed.\n     * <p>To show a custom dialog, the app should return {@code true} from this\n     * method, in which case the default dialog will not be shown and JavaScript\n     * execution will be suspended. The app should call\n     * {@code JsResult.confirm()} when the custom dialog is dismissed such that\n     * JavaScript execution can be resumed.\n     * <p>To suppress the dialog and allow JavaScript execution to\n     * continue, call {@code JsResult.confirm()} immediately and then return\n     * {@code true}.\n     * <p>Note that if the {@link WebChromeClient} is set to be {@code null},\n     * or if {@link WebChromeClient} is not set at all, the default dialog will\n     * be suppressed and Javascript execution will continue immediately.\n     * <p>Note that the default dialog does not inherit the {@link\n     * android.view.Display#FLAG_SECURE} flag from the parent window.\n     *\n     * @param view The WebView that initiated the callback.\n     * @param url The url of the page requesting the dialog.\n     * @param message Message to be displayed in the window.\n     * @param result A JsResult to confirm that the user closed the window.\n     * @return boolean {@code true} if the request is handled or ignored.\n     * {@code false} if WebView needs to show the default dialog.\n     ",
    "links" : [ "android.view.Display#FLAG_SECURE", "android.webkit.WebChromeClient" ]
  }, {
    "name" : "public boolean onJsConfirm(WebView view, String url, String message, JsResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify the host application that the web page wants to display a\n     * JavaScript {@code confirm()} dialog.\n     * <p>The default behavior if this method returns {@code false} or is not\n     * overridden is to show a dialog containing the message and suspend\n     * JavaScript execution until the dialog is dismissed. The default dialog\n     * will return {@code true} to the JavaScript {@code confirm()} code when\n     * the user presses the 'confirm' button, and will return {@code false} to\n     * the JavaScript code when the user presses the 'cancel' button or\n     * dismisses the dialog.\n     * <p>To show a custom dialog, the app should return {@code true} from this\n     * method, in which case the default dialog will not be shown and JavaScript\n     * execution will be suspended. The app should call\n     * {@code JsResult.confirm()} or {@code JsResult.cancel()} when the custom\n     * dialog is dismissed.\n     * <p>To suppress the dialog and allow JavaScript execution to continue,\n     * call {@code JsResult.confirm()} or {@code JsResult.cancel()} immediately\n     * and then return {@code true}.\n     * <p>Note that if the {@link WebChromeClient} is set to be {@code null},\n     * or if {@link WebChromeClient} is not set at all, the default dialog will\n     * be suppressed and the default value of {@code false} will be returned to\n     * the JavaScript code immediately.\n     * <p>Note that the default dialog does not inherit the {@link\n     * android.view.Display#FLAG_SECURE} flag from the parent window.\n     *\n     * @param view The WebView that initiated the callback.\n     * @param url The url of the page requesting the dialog.\n     * @param message Message to be displayed in the window.\n     * @param result A JsResult used to send the user's response to\n     *               javascript.\n     * @return boolean {@code true} if the request is handled or ignored.\n     * {@code false} if WebView needs to show the default dialog.\n     ",
    "links" : [ "android.view.Display#FLAG_SECURE", "android.webkit.WebChromeClient" ]
  }, {
    "name" : "public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify the host application that the web page wants to display a\n     * JavaScript {@code prompt()} dialog.\n     * <p>The default behavior if this method returns {@code false} or is not\n     * overridden is to show a dialog containing the message and suspend\n     * JavaScript execution until the dialog is dismissed. Once the dialog is\n     * dismissed, JavaScript {@code prompt()} will return the string that the\n     * user typed in, or null if the user presses the 'cancel' button.\n     * <p>To show a custom dialog, the app should return {@code true} from this\n     * method, in which case the default dialog will not be shown and JavaScript\n     * execution will be suspended. The app should call\n     * {@code JsPromptResult.confirm(result)} when the custom dialog is\n     * dismissed.\n     * <p>To suppress the dialog and allow JavaScript execution to continue,\n     * call {@code JsPromptResult.confirm(result)} immediately and then\n     * return {@code true}.\n     * <p>Note that if the {@link WebChromeClient} is set to be {@code null},\n     * or if {@link WebChromeClient} is not set at all, the default dialog will\n     * be suppressed and {@code null} will be returned to the JavaScript code\n     * immediately.\n     * <p>Note that the default dialog does not inherit the {@link\n     * android.view.Display#FLAG_SECURE} flag from the parent window.\n     *\n     * @param view The WebView that initiated the callback.\n     * @param url The url of the page requesting the dialog.\n     * @param message Message to be displayed in the window.\n     * @param defaultValue The default value displayed in the prompt dialog.\n     * @param result A JsPromptResult used to send the user's reponse to\n     *               javascript.\n     * @return boolean {@code true} if the request is handled or ignored.\n     * {@code false} if WebView needs to show the default dialog.\n     ",
    "links" : [ "android.view.Display#FLAG_SECURE", "android.webkit.WebChromeClient" ]
  }, {
    "name" : "public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result)",
    "returnType" : "boolean",
    "comment" : "\n     * Notify the host application that the web page wants to confirm navigation\n     * from JavaScript {@code onbeforeunload}.\n     * <p>The default behavior if this method returns {@code false} or is not\n     * overridden is to show a dialog containing the message and suspend\n     * JavaScript execution until the dialog is dismissed. The default dialog\n     * will continue the navigation if the user confirms the navigation, and\n     * will stop the navigation if the user wants to stay on the current page.\n     * <p>To show a custom dialog, the app should return {@code true} from this\n     * method, in which case the default dialog will not be shown and JavaScript\n     * execution will be suspended. When the custom dialog is dismissed, the\n     * app should call {@code JsResult.confirm()} to continue the navigation or,\n     * {@code JsResult.cancel()} to stay on the current page.\n     * <p>To suppress the dialog and allow JavaScript execution to continue,\n     * call {@code JsResult.confirm()} or {@code JsResult.cancel()} immediately\n     * and then return {@code true}.\n     * <p>Note that if the {@link WebChromeClient} is set to be {@code null},\n     * or if {@link WebChromeClient} is not set at all, the default dialog will\n     * be suppressed and the navigation will be resumed immediately.\n     * <p>Note that the default dialog does not inherit the {@link\n     * android.view.Display#FLAG_SECURE} flag from the parent window.\n     *\n     * @param view The WebView that initiated the callback.\n     * @param url The url of the page requesting the dialog.\n     * @param message Message to be displayed in the window.\n     * @param result A JsResult used to send the user's response to\n     *               javascript.\n     * @return boolean {@code true} if the request is handled or ignored.\n     * {@code false} if WebView needs to show the default dialog.\n     ",
    "links" : [ "android.view.Display#FLAG_SECURE", "android.webkit.WebChromeClient" ]
  }, {
    "name" : "public void onExceededDatabaseQuota(String url, String databaseIdentifier, long quota, long estimatedDatabaseSize, long totalQuota, WebStorage.QuotaUpdater quotaUpdater)",
    "returnType" : "void",
    "comment" : "\n    * Tell the client that the quota has been exceeded for the Web SQL Database\n    * API for a particular origin and request a new quota. The client must\n    * respond by invoking the\n    * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}\n    * method of the supplied {@link WebStorage.QuotaUpdater} instance. The\n    * minimum value that can be set for the new quota is the current quota. The\n    * default implementation responds with the current quota, so the quota will\n    * not be increased.\n    * @param url The URL of the page that triggered the notification\n    * @param databaseIdentifier The identifier of the database where the quota\n    *                           was exceeded.\n    * @param quota The quota for the origin, in bytes\n    * @param estimatedDatabaseSize The estimated size of the offending\n    *                              database, in bytes\n    * @param totalQuota The total quota for all origins, in bytes\n    * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which\n    *                     must be used to inform the WebView of the new quota.\n    * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota\n    *             Management API.\n    ",
    "links" : [ "WebStorage.QuotaUpdater#updateQuota(long)", "WebStorage.QuotaUpdater" ]
  }, {
    "name" : "public void onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)",
    "returnType" : "void",
    "comment" : "\n    * Notify the host application that the Application Cache has reached the\n    * maximum size. The client must respond by invoking the\n    * {@link WebStorage.QuotaUpdater#updateQuota(long) updateQuota(long)}\n    * method of the supplied {@link WebStorage.QuotaUpdater} instance. The\n    * minimum value that can be set for the new quota is the current quota. The\n    * default implementation responds with the current quota, so the quota will\n    * not be increased.\n    * @param requiredStorage The amount of storage required by the Application\n    *                        Cache operation that triggered this notification,\n    *                        in bytes.\n    * @param quota the current maximum Application Cache size, in bytes\n    * @param quotaUpdater An instance of {@link WebStorage.QuotaUpdater} which\n    *                     must be used to inform the WebView of the new quota.\n    * @deprecated This method is no longer called; WebView now uses the HTML5 / JavaScript Quota\n    *             Management API.\n    ",
    "links" : [ "WebStorage.QuotaUpdater#updateQuota(long)", "WebStorage.QuotaUpdater" ]
  }, {
    "name" : "public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that web content from the specified origin\n     * is attempting to use the Geolocation API, but no permission state is\n     * currently set for that origin. The host application should invoke the\n     * specified callback with the desired permission state. See\n     * {@link GeolocationPermissions} for details.\n     *\n     * <p>Note that for applications targeting Android N and later SDKs\n     * (API level > {@link android.os.Build.VERSION_CODES#M})\n     * this method is only called for requests originating from secure\n     * origins such as https. On non-secure origins geolocation requests\n     * are automatically denied.\n     *\n     * @param origin The origin of the web content attempting to use the\n     *               Geolocation API.\n     * @param callback The callback to use to set the permission state for the\n     *                 origin.\n     ",
    "links" : [ "android.webkit.GeolocationPermissions", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "public void onGeolocationPermissionsHidePrompt()",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that a request for Geolocation permissions,\n     * made with a previous call to\n     * {@link #onGeolocationPermissionsShowPrompt(String,GeolocationPermissions.Callback) onGeolocationPermissionsShowPrompt()}\n     * has been canceled. Any related UI should therefore be hidden.\n     ",
    "links" : [ "#onGeolocationPermissionsShowPrompt(String" ]
  }, {
    "name" : "public void onPermissionRequest(PermissionRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that web content is requesting permission to\n     * access the specified resources and the permission currently isn't granted\n     * or denied. The host application must invoke {@link PermissionRequest#grant(String[])}\n     * or {@link PermissionRequest#deny()}.\n     *\n     * If this method isn't overridden, the permission is denied.\n     *\n     * @param request the PermissionRequest from current web content.\n     ",
    "links" : [ "android.webkit.PermissionRequest#deny()", "android.webkit.PermissionRequest#grant(String" ]
  }, {
    "name" : "public void onPermissionRequestCanceled(PermissionRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Notify the host application that the given permission request\n     * has been canceled. Any related UI should therefore be hidden.\n     *\n     * @param request the PermissionRequest that needs be canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onJsTimeout()",
    "returnType" : "boolean",
    "comment" : " as this.",
    "links" : [ ]
  }, {
    "name" : "public void onConsoleMessage(String message, int lineNumber, String sourceID)",
    "returnType" : "void",
    "comment" : "\n     * Report a JavaScript error message to the host application. The ChromeClient\n     * should override this to process the log message as they see fit.\n     * @param message The error message to report.\n     * @param lineNumber The line number of the error.\n     * @param sourceID The name of the source file that caused the error.\n     * @deprecated Use {@link #onConsoleMessage(ConsoleMessage) onConsoleMessage(ConsoleMessage)}\n     *      instead.\n     ",
    "links" : [ "#onConsoleMessage(ConsoleMessage)" ]
  }, {
    "name" : "public boolean onConsoleMessage(ConsoleMessage consoleMessage)",
    "returnType" : "boolean",
    "comment" : "\n     * Report a JavaScript console message to the host application. The ChromeClient\n     * should override this to process the log message as they see fit.\n     * @param consoleMessage Object containing details of the console message.\n     * @return {@code true} if the message is handled by the client.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getDefaultVideoPoster()",
    "returnType" : "Bitmap",
    "comment" : "\n     * When not playing, video elements are represented by a 'poster' image. The\n     * image to use can be specified by the poster attribute of the video tag in\n     * HTML. If the attribute is absent, then a default poster will be used. This\n     * method allows the ChromeClient to provide that default image.\n     *\n     * @return Bitmap The image to use as a default poster, or {@code null} if no such image is\n     * available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getVideoLoadingProgressView()",
    "returnType" : "View",
    "comment" : "\n     * Obtains a View to be displayed while buffering of full screen video is taking\n     * place. The host application can override this method to provide a View\n     * containing a spinner or similar.\n     *\n     * @return View The View to be displayed whilst the video is loading.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getVisitedHistory(ValueCallback<String[]> callback)",
    "returnType" : "void",
    "comment" : " Obtains a list of all visited history items, used for link coloring\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams)",
    "returnType" : "boolean",
    "comment" : "\n     * Tell the client to show a file chooser.\n     *\n     * This is called to handle HTML forms with 'file' input type, in response to the\n     * user pressing the \"Select File\" button.\n     * To cancel the request, call <code>filePathCallback.onReceiveValue(null)</code> and\n     * return {@code true}.\n     *\n     * @param webView The WebView instance that is initiating the request.\n     * @param filePathCallback Invoke this callback to supply the list of paths to files to upload,\n     *                         or {@code null} to cancel. Must only be called if the\n     *                         {@link #onShowFileChooser} implementation returns {@code true}.\n     * @param fileChooserParams Describes the mode of file chooser to be opened, and options to be\n     *                          used with it.\n     * @return {@code true} if filePathCallback will be invoked, {@code false} to use default\n     *         handling.\n     *\n     * @see FileChooserParams\n     ",
    "links" : [ "#onShowFileChooser" ]
  }, {
    "name" : "public void openFileChooser(ValueCallback<Uri> uploadFile, String acceptType, String capture)",
    "returnType" : "void",
    "comment" : "\n     * Tell the client to open a file chooser.\n     * @param uploadFile A ValueCallback to set the URI of the file to upload.\n     *      onReceiveValue must be called to wake up the thread.a\n     * @param acceptType The value of the 'accept' attribute of the input tag\n     *         associated with this file picker.\n     * @param capture The value of the 'capture' attribute of the input tag\n     *         associated with this file picker.\n     *\n     * @deprecated Use {@link #onShowFileChooser} instead.\n     * @hide This method was not published in any SDK version.\n     ",
    "links" : [ "#onShowFileChooser" ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void onProgressChanged(WebView view, int newProgress)", "public void onReceivedTitle(WebView view, String title)", "public void onReceivedIcon(WebView view, Bitmap icon)", "public void onReceivedTouchIconUrl(WebView view, String url, boolean precomposed)", "public void onShowCustomView(View view, CustomViewCallback callback)", "public void onShowCustomView(View view, int requestedOrientation, CustomViewCallback callback)", "public void onHideCustomView()", "public boolean onCreateWindow(WebView view, boolean isDialog, boolean isUserGesture, Message resultMsg)", "public void onRequestFocus(WebView view)", "public void onCloseWindow(WebView window)", "public boolean onJsAlert(WebView view, String url, String message, JsResult result)", "public boolean onJsConfirm(WebView view, String url, String message, JsResult result)", "public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result)", "public boolean onJsBeforeUnload(WebView view, String url, String message, JsResult result)", "public void onExceededDatabaseQuota(String url, String databaseIdentifier, long quota, long estimatedDatabaseSize, long totalQuota, WebStorage.QuotaUpdater quotaUpdater)", "public void onReachedMaxAppCacheSize(long requiredStorage, long quota, WebStorage.QuotaUpdater quotaUpdater)", "public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback)", "public void onGeolocationPermissionsHidePrompt()", "public void onPermissionRequest(PermissionRequest request)", "public void onPermissionRequestCanceled(PermissionRequest request)", "public boolean onJsTimeout()", "public void onConsoleMessage(String message, int lineNumber, String sourceID)", "public boolean onConsoleMessage(ConsoleMessage consoleMessage)", "public Bitmap getDefaultVideoPoster()", "public View getVideoLoadingProgressView()", "public void getVisitedHistory(ValueCallback<String[]> callback)", "public boolean onShowFileChooser(WebView webView, ValueCallback<Uri[]> filePathCallback, FileChooserParams fileChooserParams)", "public void openFileChooser(ValueCallback<Uri> uploadFile, String acceptType, String capture)" ]
}