{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/patterns/StepPattern.java",
  "packageName" : "org.apache.xpath.patterns",
  "className" : "StepPattern",
  "comment" : "\n * This class represents a single pattern match step.\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_axis",
    "type" : "int",
    "comment" : " The axis for this test. ",
    "links" : [ ]
  }, {
    "name" : "m_targetString",
    "type" : "String",
    "comment" : " only calculate on head",
    "links" : [ ]
  }, {
    "name" : "m_relativePathPattern",
    "type" : "StepPattern",
    "comment" : "\n   * Reference to nodetest and predicate for\n   * parent or ancestor.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_predicates",
    "type" : "Expression[]",
    "comment" : "\n   * The list of predicate expressions for this pattern step.\n   *  @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "DEBUG_MATCHES",
    "type" : "boolean",
    "comment" : " Set to true to send diagnostics about pattern matches to the consol. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void calcTargetString()",
    "returnType" : "void",
    "comment" : "\n   * Calculate the local name or psuedo name of the node that this pattern will test,\n   * for hash table lookup optimization.\n   *\n   * @see org.apache.xpath.compiler.PsuedoNames\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getTargetString()",
    "returnType" : "String",
    "comment" : "\n   * Get the local name or psuedo name of the node that this pattern will test,\n   * for hash table lookup optimization.\n   *\n   *\n   * @return local name or psuedo name of the node.\n   * @see org.apache.xpath.compiler.PsuedoNames\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame\n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list\n   * should be searched backwards for the first qualified name that\n   * corresponds to the variable reference qname.  The position of the\n   * QName in the vector from the start of the vector will be its position\n   * in the stack frame (but variables above the globalsTop value will need\n   * to be offset to the current stack frame).\n   * @param globalsSize The number of variables in the global variable area.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRelativePathPattern(StepPattern expr)",
    "returnType" : "void",
    "comment" : "\n   * Set the reference to nodetest and predicate for\n   * parent or ancestor.\n   *\n   *\n   * @param expr The relative pattern expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public StepPattern getRelativePathPattern()",
    "returnType" : "StepPattern",
    "comment" : "\n   * Get the reference to nodetest and predicate for\n   * parent or ancestor.\n   *\n   *\n   * @return The relative pattern expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression[] getPredicates()",
    "returnType" : "Expression[]",
    "comment" : "\n   * Set the list of predicate expressions for this pattern step.\n   * @return List of expression objects.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside\n   * the current subtree.\n   *\n   * NOTE: Ancestors tests with predicates are problematic, and will require\n   * special treatment.\n   *\n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getPredicate(int i)",
    "returnType" : "Expression",
    "comment" : "\n   * Get a predicate expression.\n   *\n   *\n   * @param i The index of the predicate.\n   *\n   * @return A predicate expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getPredicateCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of predicates for this match pattern step.\n   *\n   *\n   * @return the number of predicates for this match pattern step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPredicates(Expression[] predicates)",
    "returnType" : "void",
    "comment" : "\n   * Set the predicates for this match pattern step.\n   *\n   *\n   * @param predicates An array of expressions that define predicates\n   *                   for this step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void calcScore()",
    "returnType" : "void",
    "comment" : "\n   * Static calc of match score.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int currentNode) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute this pattern step, including predicates.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   * @param currentNode The current node context.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute this pattern step, including predicates.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int currentNode, DTM dtm, int expType) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param currentNode The currentNode.\n   * @param dtm The DTM of the current node.\n   * @param expType The expanded type ID of the current node.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final boolean checkProximityPosition(XPathContext xctxt, int predPos, DTM dtm, int context, int pos)",
    "returnType" : "boolean",
    "comment" : "\n   * New Method to check whether the current node satisfies a position predicate\n   *\n   * @param xctxt The XPath runtime context.\n   * @param predPos Which predicate we're evaluating of foo[1][2][3].\n   * @param dtm The DTM of the current node.\n   * @param context The currentNode.\n   * @param pos The position being requested, i.e. the value returned by \n   *            m_predicates[predPos].execute(xctxt).\n   *\n   * @return true of the position of the context matches pos, false otherwise.\n   ",
    "links" : [ ]
  }, {
    "name" : "private final int getProximityPosition(XPathContext xctxt, int predPos, boolean findLast)",
    "returnType" : "int",
    "comment" : "\n   * Get the proximity position index of the current node based on this\n   * node test.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   * @param predPos Which predicate we're evaluating of foo[1][2][3].\n   * @param findLast If true, don't terminate when the context node is found.\n   *\n   * @return the proximity position index of the current node based on the\n   *         node test.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getProximityPosition(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the proximity position index of the current node based on this\n   * node test.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return the proximity position index of the current node based on the\n   *         node test.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the count of the nodes that match the test, which is the proximity\n   * position of the last node that can pass this test in the sub context\n   * selection.  In XSLT 1-based indexing, this count is the index of the last\n   * node.\n   *\n   *\n   * @param xctxt XPath runtime context.\n   *\n   * @return the count of the nodes that match the test.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final XObject executeRelativePathPattern(XPathContext xctxt, DTM dtm, int currentNode) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute the match pattern step relative to another step.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param dtm The DTM of the current node.\n   * @param currentNode The current node context.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "protected final boolean executePredicates(XPathContext xctxt, DTM dtm, int currentNode) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Execute the predicates on this step to determine if the current node \n   * should be filtered or accepted.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param dtm The DTM of the current node.\n   * @param currentNode The current node context.\n   *\n   * @return true if the node should be accepted, false otherwise.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Get the string represenentation of this step for diagnostic purposes.\n   *\n   *\n   * @return A string representation of this step, built by reverse-engineering \n   * the contained info.\n   ",
    "links" : [ ]
  }, {
    "name" : "public double getMatchScore(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Get the match score of the given node.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param context The node to be tested.\n   *\n   * @return {@link org.apache.xpath.patterns.NodeTest#SCORE_NODETEST},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NONE},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_NSWILD},\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_QNAME}, or\n   *         {@link org.apache.xpath.patterns.NodeTest#SCORE_OTHER}.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.patterns.NodeTest#SCORE_NONE", "org.apache.xpath.patterns.NodeTest#SCORE_QNAME", "org.apache.xpath.patterns.NodeTest#SCORE_OTHER", "org.apache.xpath.patterns.NodeTest#SCORE_NODETEST", "org.apache.xpath.patterns.NodeTest#SCORE_NSWILD" ]
  }, {
    "name" : "public void setAxis(int axis)",
    "returnType" : "void",
    "comment" : "\n   * Set the axis that this step should follow. \n   *\n   *\n   * @param axis The Axis for this test, one of of Axes.ANCESTORORSELF, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Get the axis that this step follows. \n   *\n   *\n   * @return The Axis for this test, one of of Axes.ANCESTORORSELF, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callSubtreeVisitors(XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * Call the visitors on the subtree.  Factored out from callVisitors \n   * so it may be called by derived classes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Expression getExpression()",
    "returnType" : "Expression",
    "comment" : "\n   * @see ExpressionOwner#getExpression()\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExpression(Expression exp)",
    "returnType" : "void",
    "comment" : "\n   * @see ExpressionOwner#setExpression(Expression)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * @see Expression#deepEquals(Expression)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void calcTargetString()", "public String getTargetString()", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public void setRelativePathPattern(StepPattern expr)", "public StepPattern getRelativePathPattern()", "public Expression[] getPredicates()", "public boolean canTraverseOutsideSubtree()", "public Expression getPredicate(int i)", "public final int getPredicateCount()", "public void setPredicates(Expression[] predicates)", "public void calcScore()", "public XObject execute(XPathContext xctxt, int currentNode) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, int currentNode, DTM dtm, int expType) throws javax.xml.transform.TransformerException", "private final boolean checkProximityPosition(XPathContext xctxt, int predPos, DTM dtm, int context, int pos)", "private final int getProximityPosition(XPathContext xctxt, int predPos, boolean findLast)", "public int getProximityPosition(XPathContext xctxt)", "public int getLastPos(XPathContext xctxt)", "protected final XObject executeRelativePathPattern(XPathContext xctxt, DTM dtm, int currentNode) throws javax.xml.transform.TransformerException", "protected final boolean executePredicates(XPathContext xctxt, DTM dtm, int currentNode) throws javax.xml.transform.TransformerException", "public String toString()", "public double getMatchScore(XPathContext xctxt, int context) throws javax.xml.transform.TransformerException", "public void setAxis(int axis)", "public int getAxis()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "protected void callSubtreeVisitors(XPathVisitor visitor)", "public Expression getExpression()", "public void setExpression(Expression exp)", "public boolean deepEquals(Expression expr)" ],
  "variableNames" : [ "serialVersionUID", "m_axis", "m_targetString", "m_relativePathPattern", "m_predicates", "DEBUG_MATCHES" ]
}