{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/MembershipKey.java",
  "packageName" : "java.nio.channels",
  "className" : "MembershipKey",
  "comment" : "\n * A token representing the membership of an Internet Protocol (IP) multicast\n * group.\n *\n * <p> A membership key may represent a membership to receive all datagrams sent\n * to the group, or it may be <em>source-specific</em>, meaning that it\n * represents a membership that receives only datagrams from a specific source\n * address. Whether or not a membership key is source-specific may be determined\n * by invoking its {@link #sourceAddress() sourceAddress} method.\n *\n * <p> A membership key is valid upon creation and remains valid until the\n * membership is dropped by invoking the {@link #drop() drop} method, or\n * the channel is closed. The validity of the membership key may be tested\n * by invoking its {@link #isValid() isValid} method.\n *\n * <p> Where a membership key is not source-specific and the underlying operation\n * system supports source filtering, then the {@link #block block} and {@link\n * #unblock unblock} methods can be used to block or unblock multicast datagrams\n * from particular source addresses.\n *\n * @see MulticastChannel\n *\n * @since 1.7\n ",
  "links" : [ "#sourceAddress()", "#isValid()", "#drop()", "#block", "#unblock" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this membership is valid.\n     *\n     * <p> A multicast group membership is valid upon creation and remains\n     * valid until the membership is dropped by invoking the {@link #drop() drop}\n     * method, or the channel is closed.\n     *\n     * @return  {@code true} if this membership key is valid, {@code false}\n     *          otherwise\n     ",
    "links" : [ "#drop()" ]
  }, {
    "name" : "public abstract void drop()",
    "returnType" : "void",
    "comment" : "\n     * Drop membership.\n     *\n     * <p> If the membership key represents a membership to receive all datagrams\n     * then the membership is dropped and the channel will no longer receive any\n     * datagrams sent to the group. If the membership key is source-specific\n     * then the channel will no longer receive datagrams sent to the group from\n     * that source address.\n     *\n     * <p> After membership is dropped it may still be possible to receive\n     * datagrams sent to the group. This can arise when datagrams are waiting to\n     * be received in the socket's receive buffer. After membership is dropped\n     * then the channel may {@link MulticastChannel#join join} the group again\n     * in which case a new membership key is returned.\n     *\n     * <p> Upon return, this membership object will be {@link #isValid() invalid}.\n     * If the multicast group membership is already invalid then invoking this\n     * method has no effect. Once a multicast group membership is invalid,\n     * it remains invalid forever.\n     ",
    "links" : [ "#isValid()", "java.nio.channels.MulticastChannel#join" ]
  }, {
    "name" : "public abstract MembershipKey block(InetAddress source) throws IOException",
    "returnType" : "MembershipKey",
    "comment" : "\n     * Block multicast datagrams from the given source address.\n     *\n     * <p> If this membership key is not source-specific, and the underlying\n     * operating system supports source filtering, then this method blocks\n     * multicast datagrams from the given source address. If the given source\n     * address is already blocked then this method has no effect.\n     * After a source address is blocked it may still be possible to receive\n     * datagrams from that source. This can arise when datagrams are waiting to\n     * be received in the socket's receive buffer.\n     *\n     * @param   source\n     *          The source address to block\n     *\n     * @return  This membership key\n     *\n     * @throws  IllegalArgumentException\n     *          If the {@code source} parameter is not a unicast address or\n     *          is not the same address type as the multicast group\n     * @throws  IllegalStateException\n     *          If this membership key is source-specific or is no longer valid\n     * @throws  UnsupportedOperationException\n     *          If the underlying operating system does not support source\n     *          filtering\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract MembershipKey unblock(InetAddress source)",
    "returnType" : "MembershipKey",
    "comment" : "\n     * Unblock multicast datagrams from the given source address that was\n     * previously blocked using the {@link #block(InetAddress) block} method.\n     *\n     * @param   source\n     *          The source address to unblock\n     *\n     * @return  This membership key\n     *\n     * @throws  IllegalStateException\n     *          If the given source address is not currently blocked or the\n     *          membership key is no longer valid\n     ",
    "links" : [ "#block(InetAddress)" ]
  }, {
    "name" : "public abstract MulticastChannel channel()",
    "returnType" : "MulticastChannel",
    "comment" : "\n     * Returns the channel for which this membership key was created. This\n     * method will continue to return the channel even after the membership\n     * becomes {@link #isValid invalid}.\n     *\n     * @return  the channel\n     ",
    "links" : [ "#isValid" ]
  }, {
    "name" : "public abstract InetAddress group()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the multicast group for which this membership key was created.\n     * This method will continue to return the group even after the membership\n     * becomes {@link #isValid invalid}.\n     *\n     * @return  the multicast group\n     ",
    "links" : [ "#isValid" ]
  }, {
    "name" : "public abstract NetworkInterface networkInterface()",
    "returnType" : "NetworkInterface",
    "comment" : "\n     * Returns the network interface for which this membership key was created.\n     * This method will continue to return the network interface even after the\n     * membership becomes {@link #isValid invalid}.\n     *\n     * @return  the network interface\n     ",
    "links" : [ "#isValid" ]
  }, {
    "name" : "public abstract InetAddress sourceAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns the source address if this membership key is source-specific,\n     * or {@code null} if this membership is not source-specific.\n     *\n     * @return  The source address if this membership key is source-specific,\n     *          otherwise {@code null}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract boolean isValid()", "public abstract void drop()", "public abstract MembershipKey block(InetAddress source) throws IOException", "public abstract MembershipKey unblock(InetAddress source)", "public abstract MulticastChannel channel()", "public abstract InetAddress group()", "public abstract NetworkInterface networkInterface()", "public abstract InetAddress sourceAddress()" ],
  "variableNames" : [ ]
}