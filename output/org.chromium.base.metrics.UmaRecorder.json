{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/metrics/UmaRecorder.java",
  "packageName" : "org.chromium.base.metrics",
  "className" : "UmaRecorder",
  "comment" : " Common interface for code recording UMA metrics. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void recordBooleanHistogram(String name, boolean sample)",
    "returnType" : "void",
    "comment" : " Records a single sample of a boolean histogram. ",
    "links" : [ ]
  }, {
    "name" : " void recordExponentialHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "\n     * Records a single sample of a histogram with exponentially scaled buckets. See\n     * {@link\n     * https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md#count-histograms}\n     * <p>\n     * This is the default histogram type used by \"counts\", \"times\" and \"memory\" histograms in\n     * {@code base/metrics/histogram_functions.h}\n     *\n     * @param min the smallest value recorded in the first bucket; should be greater than zero.\n     * @param max the smallest value recorded in the overflow bucket.\n     * @param numBuckets number of histogram buckets: Two buckets are used for underflow and\n     *         overflow, and the remaining buckets cover the range {@code [min, max)}; {@code\n     *         numBuckets} should be {@code 100} or less.\n     ",
    "links" : [ "https" ]
  }, {
    "name" : " void recordLinearHistogram(String name, int sample, int min, int max, int numBuckets)",
    "returnType" : "void",
    "comment" : "\n     * Records a single sample of a histogram with evenly spaced buckets. See\n     * {@link\n     * https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md#percentage-or-ratio-histograms}\n     * <p>\n     * This histogram type is best suited for recording enums, percentages and ratios.\n     *\n     * @param min the smallest value recorded in the first bucket; should be equal to one, but will\n     *         work with values greater than zero.\n     * @param max the smallest value recorded in the overflow bucket.\n     * @param numBuckets number of histogram buckets: Two buckets are used for underflow and\n     *         overflow, and the remaining buckets evenly cover the range {@code [min, max)}; {@code\n     *         numBuckets} should be {@code 100} or less.\n     ",
    "links" : [ "https" ]
  }, {
    "name" : " void recordSparseHistogram(String name, int sample)",
    "returnType" : "void",
    "comment" : "\n     * Records a single sample of a sparse histogram. See\n     * {@link\n     * https://chromium.googlesource.com/chromium/src.git/+/HEAD/tools/metrics/histograms/README.md#when-to-use-sparse-histograms}\n     ",
    "links" : [ "https" ]
  }, {
    "name" : " void recordUserAction(String name, long elapsedRealtimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * Records a user action. Action names must be documented in {@code actions.xml}. See {@link\n     * https://source.chromium.org/chromium/chromium/src/+/main:tools/metrics/actions/README.md}\n     *\n     * @param name Name of the user action.\n     * @param elapsedRealtimeMillis Value of {@link android.os.SystemClock.elapsedRealtime()} when\n     *         the action was observed.\n     ",
    "links" : [ "android.os.SystemClock.elapsedRealtime()", "https" ]
  }, {
    "name" : " int getHistogramValueCountForTesting(String name, int sample)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of samples recorded in the given bucket of the given histogram.\n     * Does not reset between batched tests. Different values may fall in the same bucket. Use\n     * HistogramWatcher instead.\n     *\n     * @param name name of the histogram to look up\n     * @param sample the bucket containing this sample value will be looked up\n     ",
    "links" : [ ]
  }, {
    "name" : " int getHistogramTotalCountForTesting(String name)",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of samples recorded for the given histogram.\n     * Does not reset between batched tests. Use HistogramWatcher instead.\n     *\n     * @param name name of the histogram to look up\n     ",
    "links" : [ ]
  }, {
    "name" : " List<HistogramBucket> getHistogramSamplesForTesting(String name)",
    "returnType" : "List<HistogramBucket>",
    "comment" : "\n     * Returns the buckets with the samples recorded for the given histogram.\n     * Does not reset between batched tests. Use HistogramWatcher instead.\n     *\n     * @param name name of the histogram to look up\n     ",
    "links" : [ ]
  }, {
    "name" : " void addUserActionCallbackForTesting(Callback<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a testing callback to be notified on all actions recorded through\n     * {@link RecordUserAction#record(String)}.\n     *\n     * @param callback The callback to be added.\n     ",
    "links" : [ "org.chromium.base.metrics.RecordUserAction#record(String)" ]
  }, {
    "name" : " void removeUserActionCallbackForTesting(Callback<String> callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously added testing user action callback.\n     *\n     * @param callback The callback to be removed.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void recordBooleanHistogram(String name, boolean sample)", " void recordExponentialHistogram(String name, int sample, int min, int max, int numBuckets)", " void recordLinearHistogram(String name, int sample, int min, int max, int numBuckets)", " void recordSparseHistogram(String name, int sample)", " void recordUserAction(String name, long elapsedRealtimeMillis)", " int getHistogramValueCountForTesting(String name, int sample)", " int getHistogramTotalCountForTesting(String name)", " List<HistogramBucket> getHistogramSamplesForTesting(String name)", " void addUserActionCallbackForTesting(Callback<String> callback)", " void removeUserActionCallbackForTesting(Callback<String> callback)" ],
  "variableNames" : [ ]
}