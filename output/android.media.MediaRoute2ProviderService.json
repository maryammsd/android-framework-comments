{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaRoute2ProviderService.java",
  "packageName" : "android.media",
  "className" : "MediaRoute2ProviderService",
  "comment" : "\n * Base class for media route provider services.\n * <p>\n * Media route provider services are used to publish {@link MediaRoute2Info media routes} such as\n * speakers, TVs, etc. The routes are published by calling {@link #notifyRoutes(Collection)}.\n * Media apps which use {@link MediaRouter2} can request to play their media on the routes.\n * </p><p>\n * When {@link MediaRouter2 media router} wants to play media on a route,\n * {@link #onCreateSession(long, String, String, Bundle)} will be called to handle the request.\n * A session can be considered as a group of currently selected routes for each connection.\n * Create and manage the sessions by yourself, and notify the {@link RoutingSessionInfo\n * session infos} when there are any changes.\n * </p><p>\n * The system media router service will bind to media route provider services when a\n * {@link RouteDiscoveryPreference discovery preference} is registered via\n * a {@link MediaRouter2 media router} by an application. See\n * {@link #onDiscoveryPreferenceChanged(RouteDiscoveryPreference)} for the details.\n * </p>\n * Use {@link #notifyRequestFailed(long, int)} to notify the failure with previously received\n * request ID.\n ",
  "links" : [ "android.media.MediaRoute2Info", "#onCreateSession(long", "#notifyRequestFailed(long", "RoutingSessionInfosession", "android.media.MediaRouter2", "#notifyRoutes(Collection)", "android.media.RouteDiscoveryPreference", "#onDiscoveryPreferenceChanged(RouteDiscoveryPreference)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} action that must be declared as handled by the service.\n     * Put this in your manifest to provide media routes.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "CATEGORY_SELF_SCAN_ONLY",
    "type" : "String",
    "comment" : "\n     * A category indicating that the associated provider is only intended for use within the app\n     * that hosts the provider.\n     *\n     * <p>Declaring this category helps the system save resources by avoiding the launch of services\n     * whose routes are known to be private to the app that provides them.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "REQUEST_ID_NONE",
    "type" : "long",
    "comment" : "\n     * The request ID to pass {@link #notifySessionCreated(long, RoutingSessionInfo)}\n     * when {@link MediaRoute2ProviderService} created a session although there was no creation\n     * request.\n     *\n     * @see #notifySessionCreated(long, RoutingSessionInfo)\n     ",
    "links" : [ "#notifySessionCreated(long", "android.media.MediaRoute2ProviderService" ]
  }, {
    "name" : "REASON_UNKNOWN_ERROR",
    "type" : "int",
    "comment" : "\n     * The request has failed due to unknown reason.\n     *\n     * @see #notifyRequestFailed(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_REJECTED",
    "type" : "int",
    "comment" : "\n     * The request has failed since this service rejected the request.\n     *\n     * @see #notifyRequestFailed(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_NETWORK_ERROR",
    "type" : "int",
    "comment" : "\n     * The request has failed due to a network error.\n     *\n     * @see #notifyRequestFailed(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_ROUTE_NOT_AVAILABLE",
    "type" : "int",
    "comment" : "\n     * The request has failed since the requested route is no longer available.\n     *\n     * @see #notifyRequestFailed(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "REASON_INVALID_COMMAND",
    "type" : "int",
    "comment" : "\n     * The request has failed since the request is not valid. For example, selecting a route\n     * which is not selectable.\n     *\n     * @see #notifyRequestFailed(long, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_REQUEST_IDS_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestIdsLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatePublishScheduled",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionUpdateScheduled",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStub",
    "type" : "MediaRoute2ProviderServiceStub",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteCallback",
    "type" : "IMediaRoute2ProviderServiceCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderInfo",
    "type" : "MediaRoute2ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestIds",
    "type" : "Deque<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionInfos",
    "type" : "ArrayMap<String, RoutingSessionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * If overriding this method, call through to the super method for any unknown actions.\n     * <p>\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSetRouteVolume(long requestId, @NonNull String routeId, int volume)",
    "returnType" : "void",
    "comment" : "\n     * Called when a volume setting is requested on a route of the provider\n     *\n     * @param requestId the ID of this request\n     * @param routeId the ID of the route\n     * @param volume the target volume\n     * @see MediaRoute2Info.Builder#setVolume(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSetSessionVolume(long requestId, @NonNull String sessionId, int volume)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@link MediaRouter2.RoutingController#setVolume(int)} is called on\n     * a routing session of the provider\n     *\n     * @param requestId the ID of this request\n     * @param sessionId the ID of the routing session\n     * @param volume the target volume\n     * @see RoutingSessionInfo.Builder#setVolume(int)\n     ",
    "links" : [ "MediaRouter2.RoutingController#setVolume(int)" ]
  }, {
    "name" : "public final RoutingSessionInfo getSessionInfo(@NonNull String sessionId)",
    "returnType" : "RoutingSessionInfo",
    "comment" : "\n     * Gets information of the session with the given id.\n     *\n     * @param sessionId the ID of the session\n     * @return information of the session with the given id.\n     *         null if the session is released or ID is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final List<RoutingSessionInfo> getAllSessionInfo()",
    "returnType" : "List<RoutingSessionInfo>",
    "comment" : "\n     * Gets the list of {@link RoutingSessionInfo session info} that the provider service maintains.\n     ",
    "links" : [ "android.media.RoutingSessionInfo" ]
  }, {
    "name" : "public final void notifySessionCreated(long requestId, @NonNull RoutingSessionInfo sessionInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notifies clients of that the session is created and ready for use.\n     * <p>\n     * If this session is created without any creation request, use {@link #REQUEST_ID_NONE}\n     * as the request ID.\n     *\n     * @param requestId the ID of the previous request to create this session provided in\n     *                  {@link #onCreateSession(long, String, String, Bundle)}. Can be\n     *                  {@link #REQUEST_ID_NONE} if this session is created without any request.\n     * @param sessionInfo information of the new session.\n     *                    The {@link RoutingSessionInfo#getId() id} of the session must be unique.\n     * @see #onCreateSession(long, String, String, Bundle)\n     * @see #getSessionInfo(String)\n     ",
    "links" : [ "#REQUEST_ID_NONE", "#onCreateSession(long", "android.media.RoutingSessionInfo#getId()" ]
  }, {
    "name" : "public final void notifySessionUpdated(@NonNull RoutingSessionInfo sessionInfo)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the existing session is updated. For example, when\n     * {@link RoutingSessionInfo#getSelectedRoutes() selected routes} are changed.\n     ",
    "links" : [ "android.media.RoutingSessionInfo#getSelectedRoutes()" ]
  }, {
    "name" : "public final void notifySessionReleased(@NonNull String sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Notifies that the session is released.\n     *\n     * @param sessionId the ID of the released session.\n     * @see #onReleaseSession(long, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyRequestFailed(long requestId, @Reason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Notifies to the client that the request has failed.\n     *\n     * @param requestId the ID of the previous request\n     * @param reason the reason why the request has failed\n     *\n     * @see #REASON_UNKNOWN_ERROR\n     * @see #REASON_REJECTED\n     * @see #REASON_NETWORK_ERROR\n     * @see #REASON_ROUTE_NOT_AVAILABLE\n     * @see #REASON_INVALID_COMMAND\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onCreateSession(long requestId, @NonNull String packageName, @NonNull String routeId, @Nullable Bundle sessionHints)",
    "returnType" : "void",
    "comment" : "\n     * Called when the service receives a request to create a session.\n     * <p>\n     * You should create and maintain your own session and notifies the client of\n     * session info. Call {@link #notifySessionCreated(long, RoutingSessionInfo)}\n     * with the given {@code requestId} to notify the information of a new session.\n     * The created session must have the same route feature and must include the given route\n     * specified by {@code routeId}.\n     * <p>\n     * If the session can be controlled, you can optionally pass the control hints to\n     * {@link RoutingSessionInfo.Builder#setControlHints(Bundle)}. Control hints is a\n     * {@link Bundle} which contains how to control the session.\n     * <p>\n     * If you can't create the session or want to reject the request, call\n     * {@link #notifyRequestFailed(long, int)} with the given {@code requestId}.\n     *\n     * @param requestId the ID of this request\n     * @param packageName the package name of the application that selected the route\n     * @param routeId the ID of the route initially being connected\n     * @param sessionHints an optional bundle of app-specific arguments sent by\n     *                     {@link MediaRouter2}, or null if none. The contents of this bundle\n     *                     may affect the result of session creation.\n     *\n     * @see RoutingSessionInfo.Builder#Builder(String, String)\n     * @see RoutingSessionInfo.Builder#addSelectedRoute(String)\n     * @see RoutingSessionInfo.Builder#setControlHints(Bundle)\n     ",
    "links" : [ "#notifySessionCreated(long", "android.os.Bundle", "#notifyRequestFailed(long", "RoutingSessionInfo.Builder#setControlHints(Bundle)", "android.media.MediaRouter2" ]
  }, {
    "name" : "public abstract void onReleaseSession(long requestId, @NonNull String sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Called when the session should be released. A client of the session or system can request\n     * a session to be released.\n     * <p>\n     * After releasing the session, call {@link #notifySessionReleased(String)}\n     * with the ID of the released session.\n     *\n     * Note: Calling {@link #notifySessionReleased(String)} will <em>NOT</em> trigger\n     * this method to be called.\n     *\n     * @param requestId the ID of this request\n     * @param sessionId the ID of the session being released.\n     * @see #notifySessionReleased(String)\n     * @see #getSessionInfo(String)\n     ",
    "links" : [ "#notifySessionReleased(String)" ]
  }, {
    "name" : "public abstract void onSelectRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a client requests selecting a route for the session.\n     * After the route is selected, call {@link #notifySessionUpdated(RoutingSessionInfo)}\n     * to update session info.\n     *\n     * @param requestId the ID of this request\n     * @param sessionId the ID of the session\n     * @param routeId the ID of the route\n     ",
    "links" : [ "#notifySessionUpdated(RoutingSessionInfo)" ]
  }, {
    "name" : "public abstract void onDeselectRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a client requests deselecting a route from the session.\n     * After the route is deselected, call {@link #notifySessionUpdated(RoutingSessionInfo)}\n     * to update session info.\n     *\n     * @param requestId the ID of this request\n     * @param sessionId the ID of the session\n     * @param routeId the ID of the route\n     ",
    "links" : [ "#notifySessionUpdated(RoutingSessionInfo)" ]
  }, {
    "name" : "public abstract void onTransferToRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)",
    "returnType" : "void",
    "comment" : "\n     * Called when a client requests transferring a session to a route.\n     * After the transfer is finished, call {@link #notifySessionUpdated(RoutingSessionInfo)}\n     * to update session info.\n     *\n     * @param requestId the ID of this request\n     * @param sessionId the ID of the session\n     * @param routeId the ID of the route\n     ",
    "links" : [ "#notifySessionUpdated(RoutingSessionInfo)" ]
  }, {
    "name" : "public void onDiscoveryPreferenceChanged(@NonNull RouteDiscoveryPreference preference)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link RouteDiscoveryPreference discovery preference} has changed.\n     * <p>\n     * Whenever an application registers a {@link MediaRouter2.RouteCallback callback},\n     * it also provides a discovery preference to specify features of routes that it is interested\n     * in. The media router combines all of these discovery request into a single discovery\n     * preference and notifies each provider.\n     * </p><p>\n     * The provider should examine {@link RouteDiscoveryPreference#getPreferredFeatures()\n     * preferred features} in the discovery preference to determine what kind of routes it should\n     * try to discover and whether it should perform active or passive scans. In many cases,\n     * the provider may be able to save power by not performing any scans when the request doesn't\n     * have any matching route features.\n     * </p>\n     *\n     * @param preference the new discovery preference\n     ",
    "links" : [ "android.media.RouteDiscoveryPreference#getPreferredFeatures()", "android.media.RouteDiscoveryPreference", "MediaRouter2.RouteCallback" ]
  }, {
    "name" : "public final void notifyRoutes(@NonNull Collection<MediaRoute2Info> routes)",
    "returnType" : "void",
    "comment" : "\n     * Updates routes of the provider and notifies the system media router service.\n     ",
    "links" : [ ]
  }, {
    "name" : " void setCallback(IMediaRoute2ProviderServiceCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void schedulePublishState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void publishState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void scheduleUpdateSessions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSessions()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addRequestId(long requestId)",
    "returnType" : "void",
    "comment" : "\n     * Adds a requestId in the request ID list whose max size is {@link #MAX_REQUEST_IDS_SIZE}.\n     * When the max size is reached, the first element is removed (FIFO).\n     ",
    "links" : [ "#MAX_REQUEST_IDS_SIZE" ]
  }, {
    "name" : "private boolean removeRequestId(long requestId)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the given {@code requestId} from received request ID list.\n     * <p>\n     * Returns whether the list contains the {@code requestId}. These are the cases when the list\n     * doesn't contain the given {@code requestId}:\n     * <ul>\n     *     <li>This service has never received a request with the requestId. </li>\n     *     <li>{@link #notifyRequestFailed} or {@link #notifySessionCreated} already has been called\n     *         for the requestId. </li>\n     * </ul>\n     ",
    "links" : [ "#notifyRequestFailed", "#notifySessionCreated" ]
  } ],
  "methodNames" : [ "public IBinder onBind(@NonNull Intent intent)", "public abstract void onSetRouteVolume(long requestId, @NonNull String routeId, int volume)", "public abstract void onSetSessionVolume(long requestId, @NonNull String sessionId, int volume)", "public final RoutingSessionInfo getSessionInfo(@NonNull String sessionId)", "public final List<RoutingSessionInfo> getAllSessionInfo()", "public final void notifySessionCreated(long requestId, @NonNull RoutingSessionInfo sessionInfo)", "public final void notifySessionUpdated(@NonNull RoutingSessionInfo sessionInfo)", "public final void notifySessionReleased(@NonNull String sessionId)", "public final void notifyRequestFailed(long requestId, @Reason int reason)", "public abstract void onCreateSession(long requestId, @NonNull String packageName, @NonNull String routeId, @Nullable Bundle sessionHints)", "public abstract void onReleaseSession(long requestId, @NonNull String sessionId)", "public abstract void onSelectRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)", "public abstract void onDeselectRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)", "public abstract void onTransferToRoute(long requestId, @NonNull String sessionId, @NonNull String routeId)", "public void onDiscoveryPreferenceChanged(@NonNull RouteDiscoveryPreference preference)", "public final void notifyRoutes(@NonNull Collection<MediaRoute2Info> routes)", " void setCallback(IMediaRoute2ProviderServiceCallback callback)", " void schedulePublishState()", "private void publishState()", " void scheduleUpdateSessions()", "private void updateSessions()", "private void addRequestId(long requestId)", "private boolean removeRequestId(long requestId)" ],
  "variableNames" : [ "TAG", "DEBUG", "SERVICE_INTERFACE", "CATEGORY_SELF_SCAN_ONLY", "REQUEST_ID_NONE", "REASON_UNKNOWN_ERROR", "REASON_REJECTED", "REASON_NETWORK_ERROR", "REASON_ROUTE_NOT_AVAILABLE", "REASON_INVALID_COMMAND", "MAX_REQUEST_IDS_SIZE", "mHandler", "mSessionLock", "mRequestIdsLock", "mStatePublishScheduled", "mSessionUpdateScheduled", "mStub", "mRemoteCallback", "mProviderInfo", "mRequestIds", "mSessionInfos" ]
}