{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ConcurrentModificationException.java",
  "packageName" : "java.util",
  "className" : "ConcurrentModificationException",
  "comment" : "\n * This exception may be thrown by methods that have detected concurrent\n * modification of an object when such modification is not permissible.\n * <p>\n * For example, it is not generally permissible for one thread to modify a Collection\n * while another thread is iterating over it.  In general, the results of the\n * iteration are undefined under these circumstances.  Some Iterator\n * implementations (including those of all the general purpose collection implementations\n * provided by the JRE) may choose to throw this exception if this behavior is\n * detected.  Iterators that do this are known as <i>fail-fast</i> iterators,\n * as they fail quickly and cleanly, rather that risking arbitrary,\n * non-deterministic behavior at an undetermined time in the future.\n * <p>\n * Note that this exception does not always indicate that an object has\n * been concurrently modified by a <i>different</i> thread.  If a single\n * thread issues a sequence of method invocations that violates the\n * contract of an object, the object may throw this exception.  For\n * example, if a thread modifies a collection directly while it is\n * iterating over the collection with a fail-fast iterator, the iterator\n * will throw this exception.\n *\n * <p>Note that fail-fast behavior cannot be guaranteed as it is, generally\n * speaking, impossible to make any hard guarantees in the presence of\n * unsynchronized concurrent modification.  Fail-fast operations\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>{@code ConcurrentModificationException}\n * should be used only to detect bugs.</i>\n *\n * @author  Josh Bloch\n * @see     Collection\n * @see     Iterator\n * @see     Spliterator\n * @see     ListIterator\n * @see     Vector\n * @see     LinkedList\n * @see     HashSet\n * @see     Hashtable\n * @see     TreeMap\n * @see     AbstractList\n * @since   1.2\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "serialVersionUID" ]
}