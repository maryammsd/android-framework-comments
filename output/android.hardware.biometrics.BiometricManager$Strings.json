{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/BiometricManager.java",
  "packageName" : "android.hardware.biometrics",
  "className" : "Strings",
  "comment" : "\n     * Provides localized strings for an application that uses {@link BiometricPrompt} to\n     * authenticate the user.\n     ",
  "links" : [ "android.hardware.biometrics.BiometricPrompt" ],
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IAuthService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthenticators",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getButtonLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Provides a localized string that can be used as the label for a button that invokes\n         * {@link BiometricPrompt}.\n         *\n         * <p>When possible, this method should use the given authenticator requirements to more\n         * precisely specify the authentication type that will be used. For example, if\n         * <strong>Class 3</strong> biometric authentication is requested on a device with a\n         * <strong>Class 3</strong> fingerprint sensor and a <strong>Class 2</strong> face sensor,\n         * the returned string should indicate that fingerprint authentication will be used.\n         *\n         * <p>This method should also try to specify which authentication method(s) will be used in\n         * practice when multiple authenticators meet the given requirements. For example, if\n         * biometric authentication is requested on a device with both face and fingerprint sensors\n         * but the user has selected face as their preferred method, the returned string should\n         * indicate that face authentication will be used.\n         *\n         * <p>This method may return {@code null} if none of the requested authenticator types are\n         * available, but this should <em>not</em> be relied upon for checking the status of\n         * authenticators. Instead, use {@link #canAuthenticate(int)}.\n         *\n         * @return The label for a button that invokes {@link BiometricPrompt} for authentication.\n         ",
    "links" : [ "#canAuthenticate(int)", "android.hardware.biometrics.BiometricPrompt" ]
  }, {
    "name" : "public CharSequence getPromptMessage()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Provides a localized string that can be shown while the user is authenticating with\n         * {@link BiometricPrompt}.\n         *\n         * <p>When possible, this method should use the given authenticator requirements to more\n         * precisely specify the authentication type that will be used. For example, if\n         * <strong>Class 3</strong> biometric authentication is requested on a device with a\n         * <strong>Class 3</strong> fingerprint sensor and a <strong>Class 2</strong> face sensor,\n         * the returned string should indicate that fingerprint authentication will be used.\n         *\n         * <p>This method should also try to specify which authentication method(s) will be used in\n         * practice when multiple authenticators meet the given requirements. For example, if\n         * biometric authentication is requested on a device with both face and fingerprint sensors\n         * but the user has selected face as their preferred method, the returned string should\n         * indicate that face authentication will be used.\n         *\n         * <p>This method may return {@code null} if none of the requested authenticator types are\n         * available, but this should <em>not</em> be relied upon for checking the status of\n         * authenticators. Instead, use {@link #canAuthenticate(int)}.\n         *\n         * @return The label for a button that invokes {@link BiometricPrompt} for authentication.\n         ",
    "links" : [ "#canAuthenticate(int)", "android.hardware.biometrics.BiometricPrompt" ]
  }, {
    "name" : "public CharSequence getSettingName()",
    "returnType" : "CharSequence",
    "comment" : "\n         * Provides a localized string that can be shown as the title for an app setting that\n         * enables authentication with {@link BiometricPrompt}.\n         *\n         * <p>When possible, this method should use the given authenticator requirements to more\n         * precisely specify the authentication type that will be used. For example, if\n         * <strong>Class 3</strong> biometric authentication is requested on a device with a\n         * <strong>Class 3</strong> fingerprint sensor and a <strong>Class 2</strong> face sensor,\n         * the returned string should indicate that fingerprint authentication will be used.\n         *\n         * <p>This method should <em>not</em> try to specify which authentication method(s) will be\n         * used in practice when multiple authenticators meet the given requirements. For example,\n         * if biometric authentication is requested on a device with both face and fingerprint\n         * sensors, the returned string should indicate that either face or fingerprint\n         * authentication may be used, regardless of whether the user has enrolled or selected\n         * either as their preferred method.\n         *\n         * <p>This method may return {@code null} if none of the requested authenticator types are\n         * supported by the system, but this should <em>not</em> be relied upon for checking the\n         * status of authenticators. Instead, use {@link #canAuthenticate(int)} or\n         * {@link android.content.pm.PackageManager#hasSystemFeature(String)}.\n         *\n         * @return The label for a button that invokes {@link BiometricPrompt} for authentication.\n         ",
    "links" : [ "#canAuthenticate(int)", "android.content.pm.PackageManager#hasSystemFeature(String)", "android.hardware.biometrics.BiometricPrompt" ]
  } ],
  "methodNames" : [ "public CharSequence getButtonLabel()", "public CharSequence getPromptMessage()", "public CharSequence getSettingName()" ],
  "variableNames" : [ "mContext", "mService", "mAuthenticators" ]
}