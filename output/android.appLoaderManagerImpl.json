{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/LoaderManager.java",
  "packageName" : "android.app",
  "className" : "LoaderManagerImpl",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoaders",
    "type" : "SparseArray<LoaderInfo>",
    "comment" : " stopped or restarted by the application.",
    "links" : [ ]
  }, {
    "name" : "mInactiveLoaders",
    "type" : "SparseArray<LoaderInfo>",
    "comment" : " previously run loader until the new loader's data is available.",
    "links" : [ ]
  }, {
    "name" : "mWho",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetaining",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRetainingStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreatingLoader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHost",
    "type" : "FragmentHostCallback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void updateHostController(FragmentHostCallback host)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FragmentHostCallback getFragmentHostCallback()",
    "returnType" : "FragmentHostCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LoaderInfo createLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<Object> callback)",
    "returnType" : "LoaderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private LoaderInfo createAndInstallLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<Object> callback)",
    "returnType" : "LoaderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void installLoader(LoaderInfo info)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Loader<D> initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Call to initialize a particular ID with a Loader.  If this ID already\n     * has a Loader associated with it, it is left unchanged and any previous\n     * callbacks replaced with the newly provided ones.  If there is not currently\n     * a Loader for the ID, a new one is created and started.\n     * \n     * <p>This function should generally be used when a component is initializing,\n     * to ensure that a Loader it relies on is created.  This allows it to re-use\n     * an existing Loader's data if there already is one, so that for example\n     * when an {@link Activity} is re-created after a configuration change it\n     * does not need to re-create its loaders.\n     * \n     * <p>Note that in the case where an existing Loader is re-used, the\n     * <var>args</var> given here <em>will be ignored</em> because you will\n     * continue using the previous Loader.\n     * \n     * @param id A unique (to this LoaderManager instance) identifier under\n     * which to manage the new Loader.\n     * @param args Optional arguments that will be propagated to\n     * {@link LoaderCallbacks#onCreateLoader(int, Bundle) LoaderCallbacks.onCreateLoader()}.\n     * @param callback Interface implementing management of this Loader.  Required.\n     * Its onCreateLoader() method will be called while inside of the function to\n     * instantiate the Loader object.\n     ",
    "links" : [ "Activity", "LoaderCallbacks#onCreateLoader" ]
  }, {
    "name" : "public Loader<D> restartLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Call to re-create the Loader associated with a particular ID.  If there\n     * is currently a Loader associated with this ID, it will be\n     * canceled/stopped/destroyed as appropriate.  A new Loader with the given\n     * arguments will be created and its data delivered to you once available.\n     * \n     * <p>This function does some throttling of Loaders.  If too many Loaders\n     * have been created for the given ID but not yet generated their data,\n     * new calls to this function will create and return a new Loader but not\n     * actually start it until some previous loaders have completed.\n     * \n     * <p>After calling this function, any previous Loaders associated with\n     * this ID will be considered invalid, and you will receive no further\n     * data updates from them.\n     * \n     * @param id A unique (to this LoaderManager instance) identifier under\n     * which to manage the new Loader.\n     * @param args Optional arguments that will be propagated to\n     * {@link LoaderCallbacks#onCreateLoader(int, Bundle) LoaderCallbacks.onCreateLoader()}.\n     * @param callback Interface implementing management of this Loader.  Required.\n     * Its onCreateLoader() method will be called while inside of the function to\n     * instantiate the Loader object.\n     ",
    "links" : [ "LoaderCallbacks#onCreateLoader" ]
  }, {
    "name" : "public void destroyLoader(int id)",
    "returnType" : "void",
    "comment" : "\n     * Rip down, tear apart, shred to pieces a current Loader ID.  After returning\n     * from this function, any Loader objects associated with this ID are\n     * destroyed.  Any data associated with them is destroyed.  You better not\n     * be using it when you do this.\n     * @param id Identifier of the Loader to be destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Loader<D> getLoader(int id)",
    "returnType" : "Loader<D>",
    "comment" : "\n     * Return the most recent Loader object associated with the\n     * given ID.\n     ",
    "links" : [ ]
  }, {
    "name" : " void doStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doStop()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doRetain()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void finishRetain()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doReportNextStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doReportStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasRunningLoaders()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mLoaders", "mInactiveLoaders", "mWho", "mStarted", "mRetaining", "mRetainingStarted", "mCreatingLoader", "mHost" ],
  "methodNames" : [ " void updateHostController(FragmentHostCallback host)", "public FragmentHostCallback getFragmentHostCallback()", "private LoaderInfo createLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<Object> callback)", "private LoaderInfo createAndInstallLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<Object> callback)", " void installLoader(LoaderInfo info)", "public Loader<D> initLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)", "public Loader<D> restartLoader(int id, Bundle args, LoaderManager.LoaderCallbacks<D> callback)", "public void destroyLoader(int id)", "public Loader<D> getLoader(int id)", " void doStart()", " void doStop()", " void doRetain()", " void finishRetain()", " void doReportNextStart()", " void doReportStart()", " void doDestroy()", "public String toString()", "public void dump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", "public boolean hasRunningLoaders()" ]
}