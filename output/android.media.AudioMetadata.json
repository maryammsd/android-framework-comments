{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioMetadata.java",
  "packageName" : "android.media",
  "className" : "AudioMetadata",
  "comment" : "\n * AudioMetadata class is used to manage typed key-value pairs for\n * configuration and capability requests within the Audio Framework.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_NONE",
    "type" : "int",
    "comment" : " the ones in audio_utils::metadata::metadata_types",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_FLOAT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_DOUBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_STRING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPE_BASEMAP",
    "type" : "int",
    "comment" : " BaseMap is corresponding to audio_utils::metadata::Data",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_OBJ_TYPES",
    "type" : "Map<Class, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUDIO_METADATA_CHARSET",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_PACKAGES",
    "type" : "Map<Integer, DataPackage<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OBJECT_PACKAGE",
    "type" : "ObjectPackage",
    "comment" : " which contains data type and data size besides the payload for the data.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AudioMetadataMap createMap()",
    "returnType" : "AudioMetadataMap",
    "comment" : "\n     * Creates a {@link AudioMetadataMap} suitable for adding keys.\n     * @return an empty {@link AudioMetadataMap} instance.\n     ",
    "links" : [ "android.media.AudioMetadataMap" ]
  }, {
    "name" : "public static Key<T> createKey(@NonNull String name, @NonNull Class<T> type)",
    "returnType" : "Key<T>",
    "comment" : "\n     * Returns a Key object with the correct interface for the AudioMetadata.\n     *\n     * An interface with the same name and type will be treated as\n     * identical for the purposes of value storage, even though\n     * other methods or hidden parameters may return different values.\n     *\n     * @param name The name of the key.\n     * @param type The class type of the value represented by the key.\n     * @param <T> The type of value.\n     * @return a new key interface.\n     *\n     * Creating keys is currently only allowed by the Framework.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static BaseMap fromByteBuffer(ByteBuffer buffer)",
    "returnType" : "BaseMap",
    "comment" : "\n     * @hide\n     * Extract a {@link BaseMap} from a given {@link ByteBuffer}\n     * @param buffer is a byte string that contains information to unpack.\n     * @return a {@link BaseMap} object if extracting successfully from given byte buffer.\n     *     Otherwise, returns {@code null}.\n     ",
    "links" : [ "BaseMap", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public static ByteBuffer toByteBuffer(BaseMap data, ByteOrder order)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * @hide\n     * Pack a {link BaseMap} to a {@link ByteBuffer}\n     * @param data is the object for packing\n     * @param order is the byte order\n     * @return a {@link ByteBuffer} if successfully packing the data.\n     *     Otherwise, returns {@code null};\n     ",
    "links" : [ "java.nio.ByteBuffer" ]
  } ],
  "methodNames" : [ "public static AudioMetadataMap createMap()", "public static Key<T> createKey(@NonNull String name, @NonNull Class<T> type)", "public static BaseMap fromByteBuffer(ByteBuffer buffer)", "public static ByteBuffer toByteBuffer(BaseMap data, ByteOrder order)" ],
  "variableNames" : [ "TAG", "AUDIO_METADATA_OBJ_TYPE_NONE", "AUDIO_METADATA_OBJ_TYPE_INT", "AUDIO_METADATA_OBJ_TYPE_LONG", "AUDIO_METADATA_OBJ_TYPE_FLOAT", "AUDIO_METADATA_OBJ_TYPE_DOUBLE", "AUDIO_METADATA_OBJ_TYPE_STRING", "AUDIO_METADATA_OBJ_TYPE_BASEMAP", "AUDIO_METADATA_OBJ_TYPES", "AUDIO_METADATA_CHARSET", "DATA_PACKAGES", "OBJECT_PACKAGE" ]
}