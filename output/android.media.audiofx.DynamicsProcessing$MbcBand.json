{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiofx/DynamicsProcessing.java",
  "packageName" : "android.media.audiofx",
  "className" : "MbcBand",
  "comment" : "\n     * Class for Multi-Band compressor bands\n     * MBC bands have multiple controllable parameters: enabled/disabled, cutoffFrequency,\n     * attackTime, releaseTime, ratio, threshold, kneeWidth, noiseGateThreshold, expanderRatio,\n     * preGain and postGain.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAttackTime",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleaseTime",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRatio",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKneeWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoiseGateThreshold",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpanderRatio",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreGain",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPostGain",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getAttackTime()",
    "returnType" : "float",
    "comment" : "\n         * gets attack time for compressor in milliseconds (ms)\n         * @return attack time for compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setAttackTime(float attackTime)",
    "returnType" : "void",
    "comment" : "\n         * sets attack time for compressor in milliseconds (ms)\n         * @param attackTime desired for compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getReleaseTime()",
    "returnType" : "float",
    "comment" : "\n         * gets release time for compressor in milliseconds (ms)\n         * @return release time for compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setReleaseTime(float releaseTime)",
    "returnType" : "void",
    "comment" : "\n         * sets release time for compressor in milliseconds (ms)\n         * @param releaseTime desired for compressor in milliseconds (ms)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getRatio()",
    "returnType" : "float",
    "comment" : "\n         * gets the compressor ratio (N:1)\n         * @return compressor ratio (N:1)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setRatio(float ratio)",
    "returnType" : "void",
    "comment" : "\n         * sets compressor ratio (N:1)\n         * @param ratio desired for the compressor (N:1)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getThreshold()",
    "returnType" : "float",
    "comment" : "\n         * gets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS).\n         * Thresholds are negative. A threshold of 0 dB means no compression will take place.\n         * @return compressor threshold in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setThreshold(float threshold)",
    "returnType" : "void",
    "comment" : "\n         * sets the compressor threshold measured in decibels (dB) from 0 dB Full Scale (dBFS).\n         * Thresholds are negative. A threshold of 0 dB means no compression will take place.\n         * @param threshold desired for compressor in decibels(dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getKneeWidth()",
    "returnType" : "float",
    "comment" : "\n         * get Knee Width in decibels (dB) around compressor threshold point. Widths are always\n         * positive, with higher values representing a wider area of transition from the linear zone\n         * to the compression zone. A knee of 0 dB means a more abrupt transition.\n         * @return Knee Width in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setKneeWidth(float kneeWidth)",
    "returnType" : "void",
    "comment" : "\n         * sets knee width in decibels (dB). See\n         * {@link android.media.audiofx.DynamicsProcessing.MbcBand#getKneeWidth} for more\n         * information.\n         * @param kneeWidth desired in decibels (dB)\n         ",
    "links" : [ "android.media.audiofx.DynamicsProcessing.MbcBand#getKneeWidth" ]
  }, {
    "name" : "public float getNoiseGateThreshold()",
    "returnType" : "float",
    "comment" : "\n         * gets the noise gate threshold in decibels (dB) from 0 dB Full Scale (dBFS). Noise gate\n         * thresholds are negative. Signals below this level will be expanded according the\n         * expanderRatio parameter. A Noise Gate Threshold of -75 dB means very quiet signals might\n         * be effectively removed from the signal.\n         * @return Noise Gate Threshold in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setNoiseGateThreshold(float noiseGateThreshold)",
    "returnType" : "void",
    "comment" : "\n         * sets noise gate threshod in decibels (dB). See\n         * {@link android.media.audiofx.DynamicsProcessing.MbcBand#getNoiseGateThreshold} for more\n         * information.\n         * @param noiseGateThreshold desired in decibels (dB)\n         ",
    "links" : [ "android.media.audiofx.DynamicsProcessing.MbcBand#getNoiseGateThreshold" ]
  }, {
    "name" : "public float getExpanderRatio()",
    "returnType" : "float",
    "comment" : "\n         * gets Expander ratio (1:N) for signals below the Noise Gate Threshold.\n         * @return Expander ratio (1:N)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setExpanderRatio(float expanderRatio)",
    "returnType" : "void",
    "comment" : "\n         * sets Expander ratio (1:N) for signals below the Noise Gate Threshold.\n         * @param expanderRatio desired expander ratio (1:N)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getPreGain()",
    "returnType" : "float",
    "comment" : "\n         * gets the gain applied to the signal BEFORE the compression. Measured in decibels (dB)\n         * where 0 dB means no level change.\n         * @return preGain value in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPreGain(float preGain)",
    "returnType" : "void",
    "comment" : "\n         * sets the gain to be applied to the signal BEFORE the compression, measured in decibels\n         * (dB), where 0 dB means no level change.\n         * @param preGain desired in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public float getPostGain()",
    "returnType" : "float",
    "comment" : "\n         * gets the gain applied to the signal AFTER compression. Measured in decibels (dB) where 0\n         * dB means no level change\n         * @return postGain value in decibels (dB)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setPostGain(float postGain)",
    "returnType" : "void",
    "comment" : "\n         * sets the gain to be applied to the siganl AFTER the compression. Measured in decibels\n         * (dB), where 0 dB means no level change.\n         * @param postGain desired value in decibels (dB)\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public float getAttackTime()", "public void setAttackTime(float attackTime)", "public float getReleaseTime()", "public void setReleaseTime(float releaseTime)", "public float getRatio()", "public void setRatio(float ratio)", "public float getThreshold()", "public void setThreshold(float threshold)", "public float getKneeWidth()", "public void setKneeWidth(float kneeWidth)", "public float getNoiseGateThreshold()", "public void setNoiseGateThreshold(float noiseGateThreshold)", "public float getExpanderRatio()", "public void setExpanderRatio(float expanderRatio)", "public float getPreGain()", "public void setPreGain(float preGain)", "public float getPostGain()", "public void setPostGain(float postGain)" ],
  "variableNames" : [ "mAttackTime", "mReleaseTime", "mRatio", "mThreshold", "mKneeWidth", "mNoiseGateThreshold", "mExpanderRatio", "mPreGain", "mPostGain" ]
}