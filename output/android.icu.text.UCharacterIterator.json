{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/UCharacterIterator.java",
  "packageName" : "android.icu.text",
  "className" : "UCharacterIterator",
  "comment" : "\n * Abstract class that defines an API for iteration on text objects.This is an interface for forward and backward\n * iteration and random access into a text object. Forward iteration is done with post-increment and backward iteration\n * is done with pre-decrement semantics, while the <code>java.text.CharacterIterator</code> interface methods provided\n * forward iteration with \"pre-increment\" and backward iteration with pre-decrement semantics. This API is more\n * efficient for forward iteration over code points. The other major difference is that this API can do both code unit\n * and code point iteration, <code>java.text.CharacterIterator</code> can only iterate over code units and is limited to\n * BMP (0 - 0xFFFF)\n *\n * @author Ram\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static final UCharacterIterator getInstance(Replaceable source)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a <code>Replaceable</code> object.\n     *\n     * @param source\n     *            a valid source as a <code>Replaceable</code> object\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UCharacterIterator getInstance(String source)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a source string.\n     *\n     * @param source\n     *            a string\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UCharacterIterator getInstance(char[] source)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a source character array.\n     *\n     * @param source\n     *            an array of UTF-16 code units\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UCharacterIterator getInstance(char[] source, int start, int limit)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a source character array.\n     *\n     * @param source\n     *            an array of UTF-16 code units\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UCharacterIterator getInstance(StringBuffer source)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a source StringBuffer.\n     *\n     * @param source\n     *            an string buffer of UTF-16 code units\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final UCharacterIterator getInstance(CharacterIterator source)",
    "returnType" : "UCharacterIterator",
    "comment" : "\n     * Returns a <code>UCharacterIterator</code> object given a CharacterIterator.\n     *\n     * @param source\n     *            a valid CharacterIterator object.\n     * @return UCharacterIterator object\n     * @exception IllegalArgumentException\n     *                if the argument is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharacterIterator getCharacterIterator()",
    "returnType" : "CharacterIterator",
    "comment" : "\n     * Returns a <code>java.text.CharacterIterator</code> object for the underlying text of this iterator. The returned\n     * iterator is independent of this iterator.\n     *\n     * @return java.text.CharacterIterator object\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int current()",
    "returnType" : "int",
    "comment" : "\n     * Returns the code unit at the current index. If index is out of range, returns DONE. Index is not changed.\n     *\n     * @return current code unit\n     ",
    "links" : [ ]
  }, {
    "name" : "public int currentCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the codepoint at the current index. If the current index is invalid, DONE is returned. If the current\n     * index points to a lead surrogate, and there is a following trail surrogate, then the code point is returned.\n     * Otherwise, the code unit at index is returned. Index is not changed.\n     *\n     * @return current codepoint\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the text\n     *\n     * @return length of the text\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getIndex()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current index in text.\n     *\n     * @return current index in text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int next()",
    "returnType" : "int",
    "comment" : "\n     * Returns the UTF16 code unit at index, and increments to the next code unit (post-increment semantics). If index\n     * is out of range, DONE is returned, and the iterator is reset to the limit of the text.\n     *\n     * @return the next UTF16 code unit, or DONE if the index is at the limit of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int nextCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the code point at index, and increments to the next code point (post-increment semantics). If index does\n     * not point to a valid surrogate pair, the behavior is the same as <code>next()</code>. Otherwise the iterator is\n     * incremented past the surrogate pair, and the code point represented by the pair is returned.\n     *\n     * @return the next codepoint in text, or DONE if the index is at the limit of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int previous()",
    "returnType" : "int",
    "comment" : "\n     * Decrement to the position of the previous code unit in the text, and return it (pre-decrement semantics). If the\n     * resulting index is less than 0, the index is reset to 0 and DONE is returned.\n     *\n     * @return the previous code unit in the text, or DONE if the new index is before the start of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int previousCodePoint()",
    "returnType" : "int",
    "comment" : "\n     * Retreat to the start of the previous code point in the text, and return it (pre-decrement semantics). If the\n     * index is not preceded by a valid surrogate pair, the behavior is the same as <code>previous()</code>. Otherwise\n     * the iterator is decremented to the start of the surrogate pair, and the code point represented by the pair is\n     * returned.\n     *\n     * @return the previous code point in the text, or DONE if the new index is before the start of the text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setIndex(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the index to the specified index in the text.\n     *\n     * @param index\n     *            the index within the text.\n     * @exception IndexOutOfBoundsException\n     *                is thrown if an invalid index is supplied\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToLimit()",
    "returnType" : "void",
    "comment" : "\n     * Sets the current index to the limit.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setToStart()",
    "returnType" : "void",
    "comment" : "\n     * Sets the current index to the start.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getText(char[] fillIn, int offset)",
    "returnType" : "int",
    "comment" : "\n     * Fills the buffer with the underlying text storage of the iterator If the buffer capacity is not enough a\n     * exception is thrown. The capacity of the fill in buffer should at least be equal to length of text in the\n     * iterator obtained by calling <code>getLength()</code>). <b>Usage:</b>\n     *\n     * <pre>\n     *         UChacterIterator iter = new UCharacterIterator.getInstance(text);\n     *         char[] buf = new char[iter.getLength()];\n     *         iter.getText(buf);\n     *\n     *         OR\n     *         char[] buf= new char[1];\n     *         int len = 0;\n     *         for(;;){\n     *             try{\n     *                 len = iter.getText(buf);\n     *                 break;\n     *             }catch(IndexOutOfBoundsException e){\n     *                 buf = new char[iter.getLength()];\n     *             }\n     *         }\n     * </pre>\n     *\n     * @param fillIn\n     *            an array of chars to fill with the underlying UTF-16 code units.\n     * @param offset\n     *            the position within the array to start putting the data.\n     * @return the number of code units added to fillIn, as a convenience\n     * @exception IndexOutOfBoundsException\n     *                exception if there is not enough room after offset in the array, or if offset &lt; 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getText(char[] fillIn)",
    "returnType" : "int",
    "comment" : "\n     * Convenience override for <code>getText(char[], int)</code> that provides an offset of 0.\n     *\n     * @param fillIn\n     *            an array of chars to fill with the underlying UTF-16 code units.\n     * @return the number of code units added to fillIn, as a convenience\n     * @exception IndexOutOfBoundsException\n     *                exception if there is not enough room in the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getText()",
    "returnType" : "String",
    "comment" : "\n     * Convenience method for returning the underlying text storage as as string\n     *\n     * @return the underlying text storage in the iterator as a string\n     ",
    "links" : [ ]
  }, {
    "name" : "public int moveIndex(int delta)",
    "returnType" : "int",
    "comment" : "\n     * Moves the current position by the number of code units specified, either forward or backward depending on the\n     * sign of delta (positive or negative respectively). If the resulting index would be less than zero, the index is\n     * set to zero, and if the resulting index would be greater than limit, the index is set to limit.\n     *\n     * @param delta\n     *            the number of code units to move the current index.\n     * @return the new index.\n     * @exception IndexOutOfBoundsException\n     *                is thrown if an invalid index is supplied\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public int moveCodePointIndex(int delta)",
    "returnType" : "int",
    "comment" : "\n     * Moves the current position by the number of code points specified, either forward or backward depending on the\n     * sign of delta (positive or negative respectively). If the current index is at a trail surrogate then the first\n     * adjustment is by code unit, and the remaining adjustments are by code points. If the resulting index would be\n     * less than zero, the index is set to zero, and if the resulting index would be greater than limit, the index is\n     * set to limit.\n     *\n     * @param delta\n     *            the number of code units to move the current index.\n     * @return the new index\n     * @exception IndexOutOfBoundsException\n     *                is thrown if an invalid delta is supplied\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Creates a copy of this iterator, independent from other iterators. If it is not possible to clone the iterator,\n     * returns null.\n     *\n     * @return copy of this iterator\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final UCharacterIterator getInstance(Replaceable source)", "public static final UCharacterIterator getInstance(String source)", "public static final UCharacterIterator getInstance(char[] source)", "public static final UCharacterIterator getInstance(char[] source, int start, int limit)", "public static final UCharacterIterator getInstance(StringBuffer source)", "public static final UCharacterIterator getInstance(CharacterIterator source)", "public CharacterIterator getCharacterIterator()", "public abstract int current()", "public int currentCodePoint()", "public abstract int getLength()", "public abstract int getIndex()", "public abstract int next()", "public int nextCodePoint()", "public abstract int previous()", "public int previousCodePoint()", "public abstract void setIndex(int index)", "public void setToLimit()", "public void setToStart()", "public abstract int getText(char[] fillIn, int offset)", "public final int getText(char[] fillIn)", "public String getText()", "public int moveIndex(int delta)", "public int moveCodePointIndex(int delta)", "public Object clone() throws CloneNotSupportedException" ],
  "variableNames" : [ ]
}