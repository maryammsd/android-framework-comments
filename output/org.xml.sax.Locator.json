{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/Locator.java",
  "packageName" : "org.xml.sax",
  "className" : "Locator",
  "comment" : "\n * Interface for associating a SAX event with a document location.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>If a SAX parser provides location information to the SAX\n * application, it does so by implementing this interface and then\n * passing an instance to the application using the content\n * handler's {@link org.xml.sax.ContentHandler#setDocumentLocator\n * setDocumentLocator} method.  The application can use the\n * object to obtain the location of any other SAX event\n * in the XML source document.</p>\n *\n * <p>Note that the results returned by the object will be valid only\n * during the scope of each callback method: the application\n * will receive unpredictable results if it attempts to use the\n * locator at any other time, or after parsing completes.</p>\n *\n * <p>SAX parsers are not required to supply a locator, but they are\n * very strongly encouraged to do so.  If the parser supplies a\n * locator, it must do so before reporting any other document events.\n * If no locator has been set by the time the application receives\n * the {@link org.xml.sax.ContentHandler#startDocument startDocument}\n * event, the application should assume that a locator is not\n * available.</p>\n *\n * @since SAX 1.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n * @see org.xml.sax.ContentHandler#setDocumentLocator\n ",
  "links" : [ "org.xml.sax.ContentHandler#setDocumentLocatorsetDocumentLocator", "org.xml.sax.ContentHandler#startDocument" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String getPublicId()",
    "returnType" : "String",
    "comment" : "\n     * Return the public identifier for the current document event.\n     *\n     * <p>The return value is the public identifier of the document\n     * entity or of the external parsed entity in which the markup\n     * triggering the event appears.</p>\n     *\n     * @return A string containing the public identifier, or\n     *         null if none is available.\n     * @see #getSystemId\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSystemId()",
    "returnType" : "String",
    "comment" : "\n     * Return the system identifier for the current document event.\n     *\n     * <p>The return value is the system identifier of the document\n     * entity or of the external parsed entity in which the markup\n     * triggering the event appears.</p>\n     *\n     * <p>If the system identifier is a URL, the parser must resolve it\n     * fully before passing it to the application.  For example, a file\n     * name must always be provided as a <em>file:...</em> URL, and other\n     * kinds of relative URI are also resolved against their bases.</p>\n     *\n     * @return A string containing the system identifier, or null\n     *         if none is available.\n     * @see #getPublicId\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n     * Return the line number where the current document event ends.\n     * Lines are delimited by line ends, which are defined in\n     * the XML specification.\n     *\n     * <p><strong>Warning:</strong> The return value from the method\n     * is intended only as an approximation for the sake of diagnostics;\n     * it is not intended to provide sufficient information\n     * to edit the character content of the original XML document.\n     * In some cases, these \"line\" numbers match what would be displayed\n     * as columns, and in others they may not match the source text\n     * due to internal entity expansion.  </p>\n     *\n     * <p>The return value is an approximation of the line number\n     * in the document entity or external parsed entity where the\n     * markup triggering the event appears.</p>\n     *\n     * <p>If possible, the SAX driver should provide the line position\n     * of the first character after the text associated with the document\n     * event.  The first line is line 1.</p>\n     *\n     * @return The line number, or -1 if none is available.\n     * @see #getColumnNumber\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int getColumnNumber()",
    "returnType" : "int",
    "comment" : "\n     * Return the column number where the current document event ends.\n     * This is one-based number of Java <code>char</code> values since\n     * the last line end.\n     *\n     * <p><strong>Warning:</strong> The return value from the method\n     * is intended only as an approximation for the sake of diagnostics;\n     * it is not intended to provide sufficient information\n     * to edit the character content of the original XML document.\n     * For example, when lines contain combining character sequences, wide\n     * characters, surrogate pairs, or bi-directional text, the value may\n     * not correspond to the column in a text editor's display. </p>\n     *\n     * <p>The return value is an approximation of the column number\n     * in the document entity or external parsed entity where the\n     * markup triggering the event appears.</p>\n     *\n     * <p>If possible, the SAX driver should provide the line position\n     * of the first character after the text associated with the document\n     * event.  The first column in each line is column 1.</p>\n     *\n     * @return The column number, or -1 if none is available.\n     * @see #getLineNumber\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String getPublicId()", "public abstract String getSystemId()", "public abstract int getLineNumber()", "public abstract int getColumnNumber()" ],
  "variableNames" : [ ]
}