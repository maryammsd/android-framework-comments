{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/PathUtils.java",
  "packageName" : "org.chromium.base",
  "className" : "PathUtils",
  "comment" : " This class provides the path related methods for the native library. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THUMBNAIL_DIRECTORY_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_DIRECTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "THUMBNAIL_DIRECTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_DIRECTORY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_DIRECTORIES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInitializationStarted",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDirPathFetchTask",
    "type" : "FutureTask<String[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDataDirectorySuffix",
    "type" : "String",
    "comment" : " the UI thread.",
    "links" : [ ]
  }, {
    "name" : "sCacheSubDirectory",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDataDirectoryBasePath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCacheDirectoryBasePath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void resetForTesting()",
    "returnType" : "void",
    "comment" : " data directory.",
    "links" : [ ]
  }, {
    "name" : "private static String[] getOrComputeDirectoryPaths()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the directory paths from sDirPathFetchTask if available, or compute it synchronously\n     * on the UI thread otherwise. This should only be called as part of Holder's initialization\n     * above to guarantee thread-safety as part of the initialization-on-demand holder idiom.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void chmod(String path, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String[] setPrivateDirectoryPathInternal()",
    "returnType" : "String[]",
    "comment" : "\n     * Fetch the path of the directory where private data is to be stored by the application. This\n     * is meant to be called in an FutureTask in setPrivateDataDirectorySuffix(), but if we need the\n     * result before the FutureTask has had a chance to finish, then it's best to cancel the task\n     * and run it on the UI thread instead, inside getOrComputeDirectoryPaths().\n     *\n     * @see Context#getDir(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setPrivateDirectoryPath(String dataBasePath, String cacheBasePath, String dataDirSuffix, String cacheSubDir)",
    "returnType" : "void",
    "comment" : "\n     * Starts an asynchronous task to fetch the path of the directory where private data is to be\n     * stored by the application.\n     *\n     * <p>This task can run long (or more likely be delayed in a large task queue), in which case we\n     * want to cancel it and run on the UI thread instead. Unfortunately, this means keeping a bit\n     * of extra static state - we need to store the suffix and the application context in case we\n     * need to try to re-execute later.\n     *\n     * @param dataBasePath The base path for the data directory. If null, defaults to using Android\n     *          Platform specific app data directory.\n     * @param cacheBasePath The base path for the cache directory. If null, defaults to using\n     *          Android Platform specific app cache directory.\n     * @param dataDirSuffix The private data directory suffix.\n     * @param cacheSubDir The subdirectory in the cache directory to use, if non-null.\n     * @see Context#getDir(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setPrivateDataDirectorySuffix(String suffix, String cacheSubDir)",
    "returnType" : "void",
    "comment" : "\n     * Starts an asynchronous task to fetch the path of the directory where private data is to be\n     * stored by the application.\n     *\n     * <p>This task can run long (or more likely be delayed in a large task queue), in which case we\n     * want to cancel it and run on the UI thread instead. Unfortunately, this means keeping a bit\n     * of extra static state - we need to store the suffix and the application context in case we\n     * need to try to re-execute later.\n     *\n     * @param suffix The private data directory suffix.\n     * @param cacheSubDir The subdirectory in the cache directory to use, if non-null.\n     * @see Context#getDir(String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setPrivateDataDirectorySuffix(String suffix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getDirectoryPath(int index)",
    "returnType" : "String",
    "comment" : "\n     * @param index The index of the cached directory path.\n     * @return The directory path requested.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDataDirectory()",
    "returnType" : "String",
    "comment" : "\n     * @return the private directory that is used to store application data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getCacheDirectory()",
    "returnType" : "String",
    "comment" : "\n     * @return the cache directory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getThumbnailCacheDirectory()",
    "returnType" : "String",
    "comment" : " environment.",
    "links" : [ ]
  }, {
    "name" : "public static String getDownloadsDirectory()",
    "returnType" : "String",
    "comment" : "\n     * Returns the downloads directory. Before Android Q, this returns the public download directory\n     * for Chrome app. On Q+, this returns the first private download directory for the app, since Q\n     * will block public directory access. May return empty string when there are no external\n     * storage volumes mounted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getAllPrivateDownloadsDirectories()",
    "returnType" : "String[]",
    "comment" : "\n     * @return Download directories including the default storage directory on SD card, and a\n     * private directory on external SD card.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] getExternalDownloadVolumesNames()",
    "returnType" : "String[]",
    "comment" : "\n     * @return The download directory for secondary storage on Q+, returned by\n     * {@link MediaStore#getExternalVolumeNames(Context)}. Notices on Android R, apps can no longer\n     * expose app's private directory for secondary storage. Apps should put files to\n     * /storage/$volume_id/Download/ directory instead.\n     ",
    "links" : [ "android.provider.MediaStore#getExternalVolumeNames(Context)" ]
  }, {
    "name" : "private static String[] toAbsolutePathStrings(@NonNull List<File> files)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getNativeLibraryDirectory()",
    "returnType" : "String",
    "comment" : "\n     * @return the path to native libraries.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getExternalStorageDirectory()",
    "returnType" : "String",
    "comment" : "\n     * @return the external storage directory.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void resetForTesting()", "private static String[] getOrComputeDirectoryPaths()", "private static void chmod(String path, int mode)", "private static String[] setPrivateDirectoryPathInternal()", "public static void setPrivateDirectoryPath(String dataBasePath, String cacheBasePath, String dataDirSuffix, String cacheSubDir)", "public static void setPrivateDataDirectorySuffix(String suffix, String cacheSubDir)", "public static void setPrivateDataDirectorySuffix(String suffix)", "private static String getDirectoryPath(int index)", "public static String getDataDirectory()", "public static String getCacheDirectory()", "public static String getThumbnailCacheDirectory()", "public static String getDownloadsDirectory()", "public static String[] getAllPrivateDownloadsDirectories()", "public static String[] getExternalDownloadVolumesNames()", "private static String[] toAbsolutePathStrings(@NonNull List<File> files)", "private static String getNativeLibraryDirectory()", "public static String getExternalStorageDirectory()" ],
  "variableNames" : [ "TAG", "THUMBNAIL_DIRECTORY_NAME", "DATA_DIRECTORY", "THUMBNAIL_DIRECTORY", "CACHE_DIRECTORY", "NUM_DIRECTORIES", "sInitializationStarted", "sDirPathFetchTask", "sDataDirectorySuffix", "sCacheSubDirectory", "sDataDirectoryBasePath", "sCacheDirectoryBasePath" ]
}