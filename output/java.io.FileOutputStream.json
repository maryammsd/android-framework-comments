{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/FileOutputStream.java",
  "packageName" : "java.io",
  "className" : "FileOutputStream",
  "comment" : "\n * A file output stream is an output stream for writing data to a\n * {@code File} or to a {@code FileDescriptor}. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one {@code FileOutputStream} (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p>{@code FileOutputStream} is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * {@code FileWriter}.\n *\n * @apiNote\n * To release resources used by this stream {@link #close} should be called\n * directly or by try-with-resources. Subclasses are responsible for the cleanup\n * of resources acquired by the subclass.\n * Subclasses that override {@link #finalize} in order to perform cleanup\n * should be modified to use alternative cleanup mechanisms such as\n * {@link java.lang.ref.Cleaner} and remove the overriding {@code finalize} method.\n *\n * @implSpec\n * If this FileOutputStream has been subclassed and the {@link #close}\n * method has been overridden, the {@link #close} method will be\n * called when the FileInputStream is unreachable.\n * Otherwise, it is implementation specific how the resource cleanup described in\n * {@link #close} is performed.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   1.0\n ",
  "links" : [ "#finalize", "java.lang.ref.Cleaner", "#close" ],
  "variables" : [ {
    "name" : "fd",
    "type" : "FileDescriptor",
    "comment" : " Android-added: @ReachabilitySensitive",
    "links" : [ ]
  }, {
    "name" : "channel",
    "type" : "FileChannel",
    "comment" : "\n     * The associated channel, initialized lazily.\n     ",
    "links" : [ ]
  }, {
    "name" : "path",
    "type" : "String",
    "comment" : "\n     * The path of the referenced file\n     * (null if the stream is created with a file descriptor)\n     ",
    "links" : [ ]
  }, {
    "name" : "closeLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "guard",
    "type" : "CloseGuard",
    "comment" : " Android-added: CloseGuard support: Log if the stream is not closed.",
    "links" : [ ]
  }, {
    "name" : "isFdOwner",
    "type" : "boolean",
    "comment" : " Android-added: Field for tracking whether the stream owns the underlying FileDescriptor.",
    "links" : [ ]
  }, {
    "name" : "tracker",
    "type" : "IoTracker",
    "comment" : " Android-added: Tracking of unbuffered I/O.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this file output stream. Implements\n     * the {@code write} method of {@code OutputStream}.\n     *\n     * @param      b   the byte to be written.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code b.length} bytes from the specified byte array\n     * to this file output stream.\n     *\n     * @param      b   the data.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} bytes from the specified byte array\n     * starting at offset {@code off} to this file output stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @throws     IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this file output stream and releases any system resources\n     * associated with this stream. This file output stream may no longer\n     * be used for writing bytes.\n     *\n     * <p> If this stream has an associated channel then the channel is closed\n     * as well.\n     *\n     * @apiNote\n     * Overriding {@link #close} to perform cleanup actions is reliable\n     * only when called directly or when called by try-with-resources.\n     * Do not depend on finalization to invoke {@code close};\n     * finalization is not reliable and is deprecated.\n     * If cleanup of native resources is needed, other mechanisms such as\n     * {@linkplain java.lang.ref.Cleaner} should be used.\n     *\n     * @throws     IOException  if an I/O error occurs.\n     *\n     * @revised 1.4\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public final FileDescriptor getFD() throws IOException",
    "returnType" : "FileDescriptor",
    "comment" : " Android-added: @ReachabilitySensitive",
    "links" : [ ]
  }, {
    "name" : "public FileChannel getChannel()",
    "returnType" : "FileChannel",
    "comment" : "\n     * Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n     * object associated with this file output stream.\n     *\n     * <p> The initial {@link java.nio.channels.FileChannel#position()\n     * position} of the returned channel will be equal to the\n     * number of bytes written to the file so far unless this stream is in\n     * append mode, in which case it will be equal to the size of the file.\n     * Writing bytes to this stream will increment the channel's position\n     * accordingly.  Changing the channel's position, either explicitly or by\n     * writing, will change this stream's file position.\n     *\n     * @return  the file channel associated with this file output stream\n     *\n     * @since 1.4\n     ",
    "links" : [ "java.nio.channels.FileChannel#position()", "java.nio.channels.FileChannel" ]
  }, {
    "name" : "protected void finalize() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Cleans up the connection to the file, and ensures that the\n     * <code>close</code> method of this file output stream is\n     * called when there are no more references to this stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FileInputStream#close()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void close() throws IOException", "public final FileDescriptor getFD() throws IOException", "public FileChannel getChannel()", "protected void finalize() throws IOException" ],
  "variableNames" : [ "fd", "channel", "path", "closeLock", "closed", "guard", "isFdOwner", "tracker" ]
}