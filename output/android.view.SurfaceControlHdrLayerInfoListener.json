{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceControlHdrLayerInfoListener.java",
  "packageName" : "android.view",
  "className" : "SurfaceControlHdrLayerInfoListener",
  "comment" : "\n * Allows for the monitoring of layers with HDR content\n *\n * @hide ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegisteredListeners",
    "type" : "ArrayMap<IBinder, Runnable>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onHdrInfoChanged(IBinder displayToken, int numberOfHdrLayers, int maxW, int maxH, int flags, float maxDesiredHdrSdrRatio)",
    "returnType" : "void",
    "comment" : "\n     * Callback when the HDR information about the given display has changed\n     *\n     * @param displayToken The display this callback is about\n     * @param numberOfHdrLayers How many HDR layers are visible on the display\n     * @param maxW The width of the HDR layer with the largest area\n     * @param maxH The height of the HDR layer with the largest area\n     * @param flags Additional metadata flags, currently always 0\n     *              TODO(b/182312559): Add some flags\n     * @param maxDesiredHdrSdrRatio The max desired HDR/SDR ratio. Unbounded if the ratio is\n     *                              positive infinity.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void register(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "\n     * Registers this as an HDR info listener on the provided display\n     * @param displayToken\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregister(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "\n     * Unregisters this as an HDR info listener on the provided display\n     * @param displayToken\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAll()",
    "returnType" : "void",
    "comment" : "\n     * Unregisters this on all previously registered displays\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetDestructor()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native long nRegister(IBinder displayToken)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onHdrInfoChanged(IBinder displayToken, int numberOfHdrLayers, int maxW, int maxH, int flags, float maxDesiredHdrSdrRatio)", "public void register(IBinder displayToken)", "public void unregister(IBinder displayToken)", "public void unregisterAll()", "private static native long nGetDestructor()", "private native long nRegister(IBinder displayToken)" ],
  "variableNames" : [ "sRegistry", "mRegisteredListeners" ]
}