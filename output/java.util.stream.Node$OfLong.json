{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Node.java",
  "packageName" : "java.util.stream",
  "className" : "OfLong",
  "comment" : "\n     * Specialized {@code Node} for long elements\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void forEach(Consumer<? super Long> consumer)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @param consumer A {@code Consumer} that is to be invoked with each\n         *        element in this {@code Node}.  If this is an\n         *        {@code LongConsumer}, it is cast to {@code LongConsumer} so\n         *        the elements may be processed without boxing.\n         ",
    "links" : [ ]
  }, {
    "name" : " void copyInto(Long[] boxed, int offset)",
    "returnType" : "void",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec the default implementation invokes {@link #asPrimitiveArray()}\n         * to obtain a long[] array then and copies the elements from that\n         * long[] array into the boxed Long[] array.  This is not efficient and\n         * it is recommended to invoke {@link #copyInto(Object, int)}.\n         ",
    "links" : [ "#asPrimitiveArray()", "#copyInto(Object" ]
  }, {
    "name" : " Node.OfLong truncate(long from, long to, IntFunction<Long[]> generator)",
    "returnType" : "Node.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " long[] newArray(int count)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " StreamShape getShape()",
    "returnType" : "StreamShape",
    "comment" : "\n         * {@inheritDoc}\n         * @implSpec The default in {@code Node.OfLong} returns\n         * {@code StreamShape.LONG_VALUE}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void forEach(Consumer<? super Long> consumer)", " void copyInto(Long[] boxed, int offset)", " Node.OfLong truncate(long from, long to, IntFunction<Long[]> generator)", " long[] newArray(int count)", " StreamShape getShape()" ],
  "variableNames" : [ ]
}