{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/system/virtualmachine/VirtualMachineConfig.java",
  "packageName" : "android.system.virtualmachine",
  "className" : "Builder",
  "comment" : "\n     * A builder used to create a {@link VirtualMachineConfig}.\n     *\n     * @hide\n     ",
  "links" : [ "android.system.virtualmachine.VirtualMachineConfig" ],
  "variables" : [ {
    "name" : "DEFAULT_OS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApkPath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraApks",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPayloadConfigPath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomImageConfig",
    "type" : "VirtualMachineCustomImageConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPayloadBinaryName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtectedVm",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProtectedVmSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMemoryBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCpuTopology",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncryptedStorageBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVmOutputCaptured",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVmConsoleInputSupported",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorDiskImage",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOs",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VirtualMachineConfig build()",
    "returnType" : "VirtualMachineConfig",
    "comment" : "\n         * Builds an immutable {@link VirtualMachineConfig}\n         *\n         * @hide\n         ",
    "links" : [ "android.system.virtualmachine.VirtualMachineConfig" ]
  }, {
    "name" : "public Builder setApkPath(@NonNull String apkPath)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the absolute path of the APK containing the binary payload that will execute within\n         * the VM. If not set explicitly, defaults to the split APK containing the payload, if there\n         * is one, and otherwise the primary APK of the context.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addExtraApk(@NonNull String packageName)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify the package name of an extra APK to be included in the VM. Each extra APK is\n         * mounted, in unzipped form, inside the VM, allowing access to the code and/or data within\n         * it. The VM entry point must be in the main APK.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPayloadConfigPath(@NonNull String payloadConfigPath)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the path within the APK to the payload config file that defines software aspects of\n         * the VM. The file is a JSON file; see\n         * packages/modules/Virtualization/microdroid/payload/config/src/lib.rs for the format.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCustomImageConfig(@NonNull VirtualMachineCustomImageConfig customImageConfig)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the custom config file to launch the custom VM.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPayloadBinaryName(@NonNull String payloadBinaryName)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the name of the payload binary file that will be executed within the VM, e.g.\n         * \"payload.so\". The file must reside in the {@code lib/<ABI>} directory of the APK.\n         *\n         * <p>Note that VMs only support 64-bit code, even if the owning app is running as a 32-bit\n         * process.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDebugLevel(@DebugLevel int debugLevel)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the debug level. Defaults to {@link #DEBUG_LEVEL_NONE}.\n         *\n         * <p>If {@link #DEBUG_LEVEL_FULL} is set then logs from inside the VM are exported to the\n         * host and adb connections from the host are possible. This is convenient for debugging but\n         * may compromise the integrity of the VM - including bypassing the protections offered by a\n         * {@linkplain #setProtectedVm protected VM}.\n         *\n         * <p>Note that it isn't possible to {@linkplain #isCompatibleWith change} the debug level\n         * of a VM instance; debug and non-debug VMs always have different secrets.\n         *\n         * @hide\n         ",
    "links" : [ "#DEBUG_LEVEL_NONE", "#DEBUG_LEVEL_FULL" ]
  }, {
    "name" : "public Builder setProtectedVm(boolean protectedVm)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to protect the VM memory from the host. No default is provided, this must be\n         * set explicitly.\n         *\n         * <p>Note that if debugging is {@linkplain #setDebugLevel enabled} for a protected VM, the\n         * VM is not truly protected - direct memory access by the host is prevented, but e.g. the\n         * debugger can be used to access the VM's internals.\n         *\n         * <p>It isn't possible to {@linkplain #isCompatibleWith change} the protected status of a\n         * VM instance; protected and non-protected VMs always have different secrets.\n         *\n         * @see VirtualMachineManager#getCapabilities\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMemoryBytes(@IntRange(from = 1) long memoryBytes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the amount of RAM to give the VM, in bytes. If not explicitly set then a default\n         * size will be used.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCpuTopology(@CpuTopology int cpuTopology)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the CPU topology configuration of the VM. Defaults to {@link #CPU_TOPOLOGY_ONE_CPU}.\n         *\n         * <p>This determines how many virtual CPUs will be created, and their performance and\n         * scheduling characteristics, such as affinity masks. Topology also has an effect on memory\n         * usage as each vCPU requires additional memory to keep its state.\n         *\n         * @hide\n         ",
    "links" : [ "#CPU_TOPOLOGY_ONE_CPU" ]
  }, {
    "name" : "public Builder setEncryptedStorageBytes(@IntRange(from = 1) long encryptedStorageBytes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the size (in bytes) of encrypted storage available to the VM. If not set, no\n         * encrypted storage is provided.\n         *\n         * <p>The storage is encrypted with a key deterministically derived from the VM identity\n         *\n         * <p>The encrypted storage is persistent across VM reboots as well as device reboots. The\n         * backing file (containing encrypted data) is stored in the app's private data directory.\n         *\n         * <p>Note - There is no integrity guarantee or rollback protection on the storage in case\n         * the encrypted data is modified.\n         *\n         * <p>Deleting the VM will delete the encrypted data - there is no way to recover that data.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setVmOutputCaptured(boolean captured)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to allow the app to read the VM outputs (console / log). Default is {@code\n         * false}.\n         *\n         * <p>By default, console and log outputs of a {@linkplain #setDebugLevel debuggable} VM are\n         * automatically forwarded to the host logcat. Setting this as {@code true} will allow the\n         * app to directly read {@linkplain VirtualMachine#getConsoleOutput console output} and\n         * {@linkplain VirtualMachine#getLogOutput log output}, instead of forwarding them to the\n         * host logcat.\n         *\n         * <p>If you turn on output capture, you must consume data from {@link\n         * VirtualMachine#getConsoleOutput} and {@link VirtualMachine#getLogOutput} - because\n         * otherwise the code in the VM may get blocked when the pipe buffer fills up.\n         *\n         * <p>The {@linkplain #setDebugLevel debug level} must be {@link #DEBUG_LEVEL_FULL} to be\n         * set as true.\n         *\n         * @hide\n         ",
    "links" : [ "#DEBUG_LEVEL_FULL", "android.system.virtualmachine.VirtualMachine#getConsoleOutput", "android.system.virtualmachine.VirtualMachine#getLogOutput" ]
  }, {
    "name" : "public Builder setVmConsoleInputSupported(boolean supported)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether to allow the app to write to the VM console. Default is {@code false}.\n         *\n         * <p>Setting this as {@code true} will allow the app to directly write into {@linkplain\n         * VirtualMachine#getConsoleInput console input}.\n         *\n         * <p>The {@linkplain #setDebugLevel debug level} must be {@link #DEBUG_LEVEL_FULL} to be\n         * set as true.\n         *\n         * @hide\n         ",
    "links" : [ "#DEBUG_LEVEL_FULL" ]
  }, {
    "name" : "public Builder setVendorDiskImage(@NonNull File vendorDiskImage)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the path to the disk image with vendor-specific modules.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOs(@NonNull @OsName String os)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an OS for the VM. Defaults to {@code \"microdroid\"}.\n         *\n         * <p>See {@link VirtualMachineManager#getSupportedOSList} for available OS names.\n         *\n         * @hide\n         ",
    "links" : [ "android.system.virtualmachine.VirtualMachineManager#getSupportedOSList" ]
  } ],
  "methodNames" : [ "public VirtualMachineConfig build()", "public Builder setApkPath(@NonNull String apkPath)", "public Builder addExtraApk(@NonNull String packageName)", "public Builder setPayloadConfigPath(@NonNull String payloadConfigPath)", "public Builder setCustomImageConfig(@NonNull VirtualMachineCustomImageConfig customImageConfig)", "public Builder setPayloadBinaryName(@NonNull String payloadBinaryName)", "public Builder setDebugLevel(@DebugLevel int debugLevel)", "public Builder setProtectedVm(boolean protectedVm)", "public Builder setMemoryBytes(@IntRange(from = 1) long memoryBytes)", "public Builder setCpuTopology(@CpuTopology int cpuTopology)", "public Builder setEncryptedStorageBytes(@IntRange(from = 1) long encryptedStorageBytes)", "public Builder setVmOutputCaptured(boolean captured)", "public Builder setVmConsoleInputSupported(boolean supported)", "public Builder setVendorDiskImage(@NonNull File vendorDiskImage)", "public Builder setOs(@NonNull @OsName String os)" ],
  "variableNames" : [ "DEFAULT_OS", "mPackageName", "mApkPath", "mExtraApks", "mPayloadConfigPath", "mCustomImageConfig", "mPayloadBinaryName", "mDebugLevel", "mProtectedVm", "mProtectedVmSet", "mMemoryBytes", "mCpuTopology", "mEncryptedStorageBytes", "mVmOutputCaptured", "mVmConsoleInputSupported", "mVendorDiskImage", "mOs" ]
}