{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemNumber.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemNumber",
  "comment" : "\n * Implement xsl:number.\n * <pre>\n * <!ELEMENT xsl:number EMPTY>\n * <!ATTLIST xsl:number\n *    level (single|multiple|any) \"single\"\n *    count %pattern; #IMPLIED\n *    from %pattern; #IMPLIED\n *    value %expr; #IMPLIED\n *    format %avt; '1'\n *    lang %avt; #IMPLIED\n *    letter-value %avt; #IMPLIED\n *    grouping-separator %avt; #IMPLIED\n *    grouping-size %avt; #IMPLIED\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#number\">number in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_alphaCountTable",
    "type" : "CharArrayWrapper",
    "comment" : "\n     * Chars for converting integers into alpha counts.\n     * @see TransformerImpl#int2alphaCount\n     ",
    "links" : [ ]
  }, {
    "name" : "m_countMatchPattern",
    "type" : "XPath",
    "comment" : "\n   * Only nodes are counted that match this pattern.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_fromMatchPattern",
    "type" : "XPath",
    "comment" : "\n   * Specifies where to count from.\n   * For level=\"single\" or level=\"multiple\":\n   * Only ancestors that are searched are\n   * those that are descendants of the nearest ancestor that matches\n   * the from pattern.\n   * For level=\"any:\n   * Only nodes after the first node before the\n   * current node that match the from pattern are considered.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_level",
    "type" : "int",
    "comment" : "\n   * When level=\"single\", it goes up to the first node in the ancestor-or-self axis\n   * that matches the count pattern, and constructs a list of length one containing\n   * one plus the number of preceding siblings of that ancestor that match the count\n   * pattern. If there is no such ancestor, it constructs an empty list. If the from\n   * attribute is specified, then the only ancestors that are searched are those\n   * that are descendants of the nearest ancestor that matches the from pattern.\n   * Preceding siblings has the same meaning here as with the preceding-sibling axis.\n   *\n   * When level=\"multiple\", it constructs a list of all ancestors of the current node\n   * in document order followed by the element itself; it then selects from the list\n   * those nodes that match the count pattern; it then maps each node in the list to\n   * one plus the number of preceding siblings of that node that match the count pattern.\n   * If the from attribute is specified, then the only ancestors that are searched are\n   * those that are descendants of the nearest ancestor that matches the from pattern.\n   * Preceding siblings has the same meaning here as with the preceding-sibling axis.\n   *\n   * When level=\"any\", it constructs a list of length one containing the number of\n   * nodes that match the count pattern and belong to the set containing the current\n   * node and all nodes at any level of the document that are before the current node\n   * in document order, excluding any namespace and attribute nodes (in other words\n   * the union of the members of the preceding and ancestor-or-self axes). If the\n   * from attribute is specified, then only nodes after the first node before the\n   * current node that match the from pattern are considered.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_valueExpr",
    "type" : "XPath",
    "comment" : "\n   * The value attribute contains an expression. The expression is evaluated\n   * and the resulting object is converted to a number as if by a call to the\n   * number function.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_format_avt",
    "type" : "AVT",
    "comment" : "\n   * The \"format\" attribute is used to control conversion of a list of\n   * numbers into a string.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lang_avt",
    "type" : "AVT",
    "comment" : "\n   * When numbering with an alphabetic sequence, the lang attribute\n   * specifies which language's alphabet is to be used.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lettervalue_avt",
    "type" : "AVT",
    "comment" : "\n   * The letter-value attribute disambiguates between numbering\n   * sequences that use letters.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_groupingSeparator_avt",
    "type" : "AVT",
    "comment" : "\n   * The grouping-separator attribute gives the separator\n   * used as a grouping (e.g. thousands) separator in decimal\n   * numbering sequences.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_groupingSize_avt",
    "type" : "AVT",
    "comment" : "\n   * The optional grouping-size specifies the size (normally 3) of the grouping.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_romanConvertTable",
    "type" : "DecimalToRoman[]",
    "comment" : "\n   * Table to help in converting decimals to roman numerals.\n   * @see org.apache.xalan.transformer.DecimalToRoman\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setCount(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"count\" attribute.\n   * The count attribute is a pattern that specifies what nodes\n   * should be counted at those levels. If count attribute is not\n   * specified, then it defaults to the pattern that matches any\n   * node with the same node type as the current node and, if the\n   * current node has an expanded-name, with the same expanded-name\n   * as the current node.\n   *\n   * @param v Value to set for \"count\" attribute. \n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getCount()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"count\" attribute.\n   * The count attribute is a pattern that specifies what nodes\n   * should be counted at those levels. If count attribute is not\n   * specified, then it defaults to the pattern that matches any\n   * node with the same node type as the current node and, if the\n   * current node has an expanded-name, with the same expanded-name\n   * as the current node.\n   *\n   * @return Value of \"count\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setFrom(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"from\" attribute. Specifies where to count from.\n   * For level=\"single\" or level=\"multiple\":\n   * Only ancestors that are searched are\n   * those that are descendants of the nearest ancestor that matches\n   * the from pattern.\n   * For level=\"any:\n   * Only nodes after the first node before the\n   * current node that match the from pattern are considered.\n   *\n   * @param v Value to set for \"from\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getFrom()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"from\" attribute.\n   * For level=\"single\" or level=\"multiple\":\n   * Only ancestors that are searched are\n   * those that are descendants of the nearest ancestor that matches\n   * the from pattern.\n   * For level=\"any:\n   * Only nodes after the first node before the\n   * current node that match the from pattern are considered.\n   *\n   * @return Value of \"from\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLevel(int v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"level\" attribute.\n   * The level attribute specifies what levels of the source tree should\n   * be considered; it has the values single, multiple or any. The default\n   * is single.\n   *\n   * @param v Value to set for \"level\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLevel()",
    "returnType" : "int",
    "comment" : "\n   * Get the \"level\" attribute.\n   * The level attribute specifies what levels of the source tree should\n   * be considered; it has the values single, multiple or any. The default\n   * is single.\n   *\n   * @return Value of \"level\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setValue(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"value\" attribute.\n   * The value attribute contains an expression. The expression is evaluated\n   * and the resulting object is converted to a number as if by a call to the\n   * number function.\n   *\n   * @param v Value to set for \"value\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getValue()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"value\" attribute.\n   * The value attribute contains an expression. The expression is evaluated\n   * and the resulting object is converted to a number as if by a call to the\n   * number function.\n   *\n   * @return Value of \"value\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setFormat(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"format\" attribute.\n   * The \"format\" attribute is used to control conversion of a list of\n   * numbers into a string.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @param v Value to set for \"format\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getFormat()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"format\" attribute.\n   * The \"format\" attribute is used to control conversion of a list of\n   * numbers into a string.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @return Value of \"format\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLang(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"lang\" attribute.\n   * When numbering with an alphabetic sequence, the lang attribute\n   * specifies which language's alphabet is to be used; it has the same\n   * range of values as xml:lang [XML]; if no lang value is specified,\n   * the language should be determined from the system environment.\n   * Implementers should document for which languages they support numbering.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @param v Value to set for \"lang\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getLang()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"lang\" attribute.\n   * When numbering with an alphabetic sequence, the lang attribute\n   * specifies which language's alphabet is to be used; it has the same\n   * range of values as xml:lang [XML]; if no lang value is specified,\n   * the language should be determined from the system environment.\n   * Implementers should document for which languages they support numbering.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @return Value ofr \"lang\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLetterValue(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"letter-value\" attribute.\n   * The letter-value attribute disambiguates between numbering sequences\n   * that use letters.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @param v Value to set for \"letter-value\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getLetterValue()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"letter-value\" attribute.\n   * The letter-value attribute disambiguates between numbering sequences\n   * that use letters.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @return Value to set for \"letter-value\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingSeparator(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"grouping-separator\" attribute.\n   * The grouping-separator attribute gives the separator\n   * used as a grouping (e.g. thousands) separator in decimal\n   * numbering sequences.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @param v Value to set for \"grouping-separator\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getGroupingSeparator()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"grouping-separator\" attribute.\n   * The grouping-separator attribute gives the separator\n   * used as a grouping (e.g. thousands) separator in decimal\n   * numbering sequences.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @return Value of \"grouping-separator\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setGroupingSize(AVT v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"grouping-size\" attribute.\n   * The optional grouping-size specifies the size (normally 3) of the grouping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @param v Value to set for \"grouping-size\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public AVT getGroupingSize()",
    "returnType" : "AVT",
    "comment" : "\n   * Get the \"grouping-size\" attribute.\n   * The optional grouping-size specifies the size (normally 3) of the grouping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#convert\">convert in XSLT Specification</a>\n   *\n   * @return Value of \"grouping-size\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void execute(TransformerImpl transformer) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Execute an xsl:number instruction. The xsl:number element is\n   * used to insert a formatted number into the result tree.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to child list\n   *\n   * @return Child just added to child list\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  }, {
    "name" : " int findAncestor(XPathContext xctxt, XPath fromMatchPattern, XPath countMatchPattern, int context, ElemNumber namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Given a 'from' pattern (ala xsl:number), a match pattern\n   * and a context, find the first ancestor that matches the\n   * pattern (including the context handed in).\n   *\n   * @param xctxt The XPath runtime state for this.\n   * @param fromMatchPattern The ancestor must match this pattern.\n   * @param countMatchPattern The ancestor must also match this pattern.\n   * @param context The node that \".\" expresses.\n   * @param namespaceContext The context in which namespaces in the\n   * queries are supposed to be expanded.\n   *\n   * @return the first ancestor that matches the given pattern\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private int findPrecedingOrAncestorOrSelf(XPathContext xctxt, XPath fromMatchPattern, XPath countMatchPattern, int context, ElemNumber namespaceContext) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Given a 'from' pattern (ala xsl:number), a match pattern\n   * and a context, find the first ancestor that matches the\n   * pattern (including the context handed in).\n   * @param xctxt The XPath runtime state for this.\n   * @param fromMatchPattern The ancestor must match this pattern.\n   * @param countMatchPattern The ancestor must also match this pattern.\n   * @param context The node that \".\" expresses.\n   * @param namespaceContext The context in which namespaces in the\n   * queries are supposed to be expanded.\n   *\n   * @return the first preceding, ancestor or self node that \n   * matches the given pattern\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " XPath getCountMatchPattern(XPathContext support, int contextNode) throws javax.xml.transform.TransformerException",
    "returnType" : "XPath",
    "comment" : "\n   * Get the count match pattern, or a default value.\n   *\n   * @param support The XPath runtime state for this.\n   * @param contextNode The node that \".\" expresses.\n   *\n   * @return the count match pattern, or a default value. \n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " String getCountString(TransformerImpl transformer, int sourceNode) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Given an XML source node, get the count according to the\n   * parameters set up by the xsl:number attributes.\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param sourceNode The source node being counted.\n   *\n   * @return The count of nodes\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPreviousNode(XPathContext xctxt, int pos) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Get the previous node to be counted.\n   *\n   * @param xctxt The XPath runtime state for this.\n   * @param pos The current node\n   *\n   * @return the previous node to be counted.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getTargetNode(XPathContext xctxt, int sourceNode) throws TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Get the target node that will be counted..\n   *\n   * @param xctxt The XPath runtime state for this.\n   * @param sourceNode non-null reference to the <a href=\"http://www.w3.org/TR/xslt#dt-current-node\">current source node</a>.\n   *\n   * @return the target node that will be counted\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " NodeVector getMatchingAncestors(XPathContext xctxt, int node, boolean stopAtFirstFound) throws javax.xml.transform.TransformerException",
    "returnType" : "NodeVector",
    "comment" : "\n   * Get the ancestors, up to the root, that match the\n   * pattern.\n   * \n   * @param xctxt The XPath runtime state for this.\n   * @param node Count this node and it's ancestors.\n   * @param stopAtFirstFound Flag indicating to stop after the\n   * first node is found (difference between level = single\n   * or multiple)\n   * @return The number of ancestors that match the pattern.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " Locale getLocale(TransformerImpl transformer, int contextNode) throws TransformerException",
    "returnType" : "Locale",
    "comment" : "\n   * Get the locale we should be using.\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param contextNode The node that \".\" expresses.\n   *\n   * @return The locale to use. May be specified by \"lang\" attribute,\n   * but if not, use default locale on the system. \n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private DecimalFormat getNumberFormatter(TransformerImpl transformer, int contextNode) throws TransformerException",
    "returnType" : "DecimalFormat",
    "comment" : "\n   * Get the number formatter to be used the format the numbers\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param contextNode The node that \".\" expresses.\n   *\n   * ($objectName$) @return The number formatter to be used\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " String formatNumberList(TransformerImpl transformer, long[] list, int contextNode) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Format a vector of numbers into a formatted string.\n   * \n   * @param transformer non-null reference to the the current transform-time state.\n   * @param list Array of one or more long integer numbers.\n   * @param contextNode The node that \".\" expresses.\n   * @return String that represents list according to\n   * %conversion-atts; attributes.\n   * TODO: Optimize formatNumberList so that it caches the last count and\n   * reuses that info for the next count.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private void getFormattedNumber(TransformerImpl transformer, int contextNode, char numberType, int numberWidth, long listElement, FastStringBuffer formattedNumber) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Format the given number and store it in the given buffer \n   *\n   *\n   * @param transformer non-null reference to the the current transform-time state.\n   * @param contextNode The node that \".\" expresses.\n   * @param numberType Type to format to\n   * @param numberWidth Maximum length of formatted number\n   * @param listElement Number to format\n   * @param formattedNumber Buffer to store formatted number\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : " String getZeroString()",
    "returnType" : "String",
    "comment" : "\n   * Get a string value for zero, which is not really defined by the 1.0 spec, \n   * thought I think it might be cleared up by the erreta.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String int2singlealphaCount(long val, CharArrayWrapper table)",
    "returnType" : "String",
    "comment" : "\n   * Convert a long integer into alphabetic counting, in other words\n   * count using the sequence A B C ... Z.\n   * \n   * @param val Value to convert -- must be greater than zero.\n   * @param table a table containing one character for each digit in the radix\n   * @return String representing alpha count of number.\n   * @see TransformerImpl#DecimalToRoman\n   *\n   * Note that the radix of the conversion is inferred from the size\n   * of the table.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void int2alphaCount(long val, CharArrayWrapper aTable, FastStringBuffer stringBuf)",
    "returnType" : "void",
    "comment" : "\n   * Convert a long integer into alphabetic counting, in other words\n   * count using the sequence A B C ... Z AA AB AC.... etc.\n   * \n   * @param val Value to convert -- must be greater than zero.\n   * @param table a table containing one character for each digit in the radix\n   * @param aTable Array of alpha characters representing numbers\n   * @param stringBuf Buffer where to save the string representing alpha count of number.\n   * \n   * @see TransformerImpl#DecimalToRoman\n   *\n   * Note that the radix of the conversion is inferred from the size\n   * of the table.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String tradAlphaCount(long val, XResourceBundle thisBundle)",
    "returnType" : "String",
    "comment" : "\n   * Convert a long integer into traditional alphabetic counting, in other words\n   * count using the traditional numbering.\n   * \n   * @param val Value to convert -- must be greater than zero.\n   * @param thisBundle Resource bundle to use\n   * \n   * @return String representing alpha count of number.\n   * @see XSLProcessor#DecimalToRoman\n   *\n   * Note that the radix of the conversion is inferred from the size\n   * of the table.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String long2roman(long val, boolean prefixesAreOK)",
    "returnType" : "String",
    "comment" : "\n   * Convert a long integer into roman numerals.\n   * @param val Value to convert.\n   * @param prefixesAreOK true_ to enable prefix notation (e.g. 4 = \"IV\"),\n   * false_ to disable prefix notation (e.g. 4 = \"IIII\").\n   * @return Roman numeral string.\n   * @see DecimalToRoman\n   * @see m_romanConvertTable\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n   * Call the children visitors.\n   * @param visitor The visitor whose appropriate method will be called.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setCount(XPath v)", "public XPath getCount()", "public void setFrom(XPath v)", "public XPath getFrom()", "public void setLevel(int v)", "public int getLevel()", "public void setValue(XPath v)", "public XPath getValue()", "public void setFormat(AVT v)", "public AVT getFormat()", "public void setLang(AVT v)", "public AVT getLang()", "public void setLetterValue(AVT v)", "public AVT getLetterValue()", "public void setGroupingSeparator(AVT v)", "public AVT getGroupingSeparator()", "public void setGroupingSize(AVT v)", "public AVT getGroupingSize()", "public void compose(StylesheetRoot sroot) throws TransformerException", "public int getXSLToken()", "public String getNodeName()", "public void execute(TransformerImpl transformer) throws TransformerException", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)", " int findAncestor(XPathContext xctxt, XPath fromMatchPattern, XPath countMatchPattern, int context, ElemNumber namespaceContext) throws javax.xml.transform.TransformerException", "private int findPrecedingOrAncestorOrSelf(XPathContext xctxt, XPath fromMatchPattern, XPath countMatchPattern, int context, ElemNumber namespaceContext) throws javax.xml.transform.TransformerException", " XPath getCountMatchPattern(XPathContext support, int contextNode) throws javax.xml.transform.TransformerException", " String getCountString(TransformerImpl transformer, int sourceNode) throws TransformerException", "public int getPreviousNode(XPathContext xctxt, int pos) throws TransformerException", "public int getTargetNode(XPathContext xctxt, int sourceNode) throws TransformerException", " NodeVector getMatchingAncestors(XPathContext xctxt, int node, boolean stopAtFirstFound) throws javax.xml.transform.TransformerException", " Locale getLocale(TransformerImpl transformer, int contextNode) throws TransformerException", "private DecimalFormat getNumberFormatter(TransformerImpl transformer, int contextNode) throws TransformerException", " String formatNumberList(TransformerImpl transformer, long[] list, int contextNode) throws TransformerException", "private void getFormattedNumber(TransformerImpl transformer, int contextNode, char numberType, int numberWidth, long listElement, FastStringBuffer formattedNumber) throws javax.xml.transform.TransformerException", " String getZeroString()", "protected String int2singlealphaCount(long val, CharArrayWrapper table)", "protected void int2alphaCount(long val, CharArrayWrapper aTable, FastStringBuffer stringBuf)", "protected String tradAlphaCount(long val, XResourceBundle thisBundle)", "protected String long2roman(long val, boolean prefixesAreOK)", "public void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)" ],
  "variableNames" : [ "serialVersionUID", "m_alphaCountTable", "m_countMatchPattern", "m_fromMatchPattern", "m_level", "m_valueExpr", "m_format_avt", "m_lang_avt", "m_lettervalue_avt", "m_groupingSeparator_avt", "m_groupingSize_avt", "m_romanConvertTable" ]
}