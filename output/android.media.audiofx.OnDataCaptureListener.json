{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiofx/Visualizer.java",
  "packageName" : "android.media.audiofx",
  "className" : "OnDataCaptureListener",
  "comment" : "\n     * The OnDataCaptureListener interface defines methods called by the Visualizer to periodically\n     * update the audio visualization capture.\n     * The client application can implement this interface and register the listener with the\n     * {@link #setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean)} method.\n     ",
  "links" : [ "#setDataCaptureListener(OnDataCaptureListener" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onWaveFormDataCapture(Visualizer visualizer, byte[] waveform, int samplingRate)",
    "returnType" : "void",
    "comment" : "\n         * Method called when a new waveform capture is available.\n         * <p>Data in the waveform buffer is valid only within the scope of the callback.\n         * Applications which need access to the waveform data after returning from the callback\n         * should make a copy of the data instead of holding a reference.\n         * @param visualizer Visualizer object on which the listener is registered.\n         * @param waveform array of bytes containing the waveform representation.\n         * @param samplingRate sampling rate of the visualized audio.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onFftDataCapture(Visualizer visualizer, byte[] fft, int samplingRate)",
    "returnType" : "void",
    "comment" : "\n         * Method called when a new frequency capture is available.\n         * <p>Data in the fft buffer is valid only within the scope of the callback.\n         * Applications which need access to the fft data after returning from the callback\n         * should make a copy of the data instead of holding a reference.\n         * <p>For the explanation of the fft data array layout, and the example\n         * code for processing it, please see the documentation for {@link #getFft(byte[])} method.\n         *\n         * @param visualizer Visualizer object on which the listener is registered.\n         * @param fft array of bytes containing the frequency representation.\n         * @param samplingRate sampling rate of the visualized audio.\n         ",
    "links" : [ "#getFft(byte" ]
  } ],
  "methodNames" : [ " void onWaveFormDataCapture(Visualizer visualizer, byte[] waveform, int samplingRate)", " void onFftDataCapture(Visualizer visualizer, byte[] fft, int samplingRate)" ],
  "variableNames" : [ ]
}