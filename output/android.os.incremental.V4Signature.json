{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/incremental/V4Signature.java",
  "packageName" : "android.os.incremental",
  "className" : "V4Signature",
  "comment" : "\n * V4 signature fields.\n * Keep in sync with APKSig authoritative copy.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EXT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HASHING_ALGORITHM_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG2_BLOCK_SIZE_4096_BYTES",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INCFS_MAX_SIGNATURE_SIZE",
    "type" : "int",
    "comment" : " incrementalfs.h",
    "links" : [ ]
  }, {
    "name" : "version",
    "type" : "int",
    "comment" : " Always 2 for now.",
    "links" : [ ]
  }, {
    "name" : "hashingInfo",
    "type" : "byte[]",
    "comment" : "\n     * Raw byte array containing the IncFS hashing data.\n     * @see HashingInfo#fromByteArray(byte[])\n     ",
    "links" : [ ]
  }, {
    "name" : "signingInfos",
    "type" : "byte[]",
    "comment" : "\n     * Raw byte array containing V4 signatures.\n     * <p>Passed as-is to the kernel. Can be retrieved later.\n     * @see SigningInfos#fromByteArray(byte[])\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static V4Signature readFrom(ParcelFileDescriptor pfd) throws IOException",
    "returnType" : "V4Signature",
    "comment" : "\n     * Construct a V4Signature from .idsig file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static V4Signature readFrom(@NonNull byte[] bytes) throws IOException",
    "returnType" : "V4Signature",
    "comment" : "\n     * Construct a V4Signature from a byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Store the V4Signature to a byte-array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getSignedData(long fileSize, HashingInfo hashingInfo, SigningInfo signingInfo)",
    "returnType" : "byte[]",
    "comment" : "\n     * Combines necessary data to a signed data blob.\n     * The blob can be validated against signingInfo.signature.\n     *\n     * @param fileSize - size of the signed file (APK)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVersionSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static V4Signature readFrom(InputStream stream) throws IOException",
    "returnType" : "V4Signature",
    "comment" : "\n     * Constructs a V4Signature from an InputStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeTo(OutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int bytesSize(byte[] bytes)",
    "returnType" : "int",
    "comment" : " Utility methods.",
    "links" : [ ]
  }, {
    "name" : "private static void readFully(InputStream stream, byte[] buffer) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int readIntLE(InputStream stream) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeIntLE(OutputStream stream, int v) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] readBytes(InputStream stream, int maxSize) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static byte[] readBytes(ByteBuffer buffer) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBytes(OutputStream stream, byte[] bytes) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBytes(ByteBuffer buffer, byte[] bytes)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static V4Signature readFrom(ParcelFileDescriptor pfd) throws IOException", "public static V4Signature readFrom(@NonNull byte[] bytes) throws IOException", "public byte[] toByteArray()", "public static byte[] getSignedData(long fileSize, HashingInfo hashingInfo, SigningInfo signingInfo)", "public boolean isVersionSupported()", "public static V4Signature readFrom(InputStream stream) throws IOException", "private void writeTo(OutputStream stream) throws IOException", "private static int bytesSize(byte[] bytes)", "private static void readFully(InputStream stream, byte[] buffer) throws IOException", "private static int readIntLE(InputStream stream) throws IOException", "private static void writeIntLE(OutputStream stream, int v) throws IOException", "private static byte[] readBytes(InputStream stream, int maxSize) throws IOException", "private static byte[] readBytes(ByteBuffer buffer) throws IOException", "private static void writeBytes(OutputStream stream, byte[] bytes) throws IOException", "private static void writeBytes(ByteBuffer buffer, byte[] bytes)" ],
  "variableNames" : [ "EXT", "SUPPORTED_VERSION", "HASHING_ALGORITHM_SHA256", "LOG2_BLOCK_SIZE_4096_BYTES", "INCFS_MAX_SIGNATURE_SIZE", "version", "hashingInfo", "signingInfos" ]
}