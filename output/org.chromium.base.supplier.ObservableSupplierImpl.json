{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/ObservableSupplierImpl.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "ObservableSupplierImpl",
  "comment" : "\n * Concrete implementation of {@link ObservableSupplier} to be used by classes owning the\n * ObservableSupplier and providing it as a dependency to others.\n *\n * This class must only be accessed from a single thread.\n *\n * To use:\n *   1. Create a new ObservableSupplierImpl<E> to pass as a dependency\n *   2. Call {@link #set(Object)} when the real object becomes available. {@link #set(Object)} may\n *      be called multiple times. Observers will be notified each time a new object is set.\n *\n * @param <E> The type of the wrapped object.\n ",
  "links" : [ "#set(Object)", "org.chromium.base.supplier.ObservableSupplier" ],
  "variables" : [ {
    "name" : "sIgnoreThreadChecksForTesting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObject",
    "type" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObservers",
    "type" : "ObserverList<Callback<E>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public E addObserver(Callback<E> obs)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeObserver(Callback<E> obs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(E object)",
    "returnType" : "void",
    "comment" : "\n     * Set the object supplied by this supplier. This will notify registered callbacks that the\n     * dependency is available if the object changes. Object equality is used when deciding if the\n     * object has changed, not reference equality.\n     *\n     * @param object The object to supply.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E get()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasObservers()",
    "returnType" : "boolean",
    "comment" : " Returns if there are any observers currently. ",
    "links" : [ ]
  }, {
    "name" : "private void checkThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setIgnoreThreadChecksForTesting(boolean ignoreThreadChecks)",
    "returnType" : "void",
    "comment" : " Used to allow developers to access supplier values on the instrumentation thread. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public E addObserver(Callback<E> obs)", "public void removeObserver(Callback<E> obs)", "public void set(E object)", "public E get()", "public boolean hasObservers()", "private void checkThread()", "public static void setIgnoreThreadChecksForTesting(boolean ignoreThreadChecks)" ],
  "variableNames" : [ "sIgnoreThreadChecksForTesting", "mThread", "mHandler", "mObject", "mObservers" ]
}