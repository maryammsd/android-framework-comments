{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/transition/ChangeTransform.java",
  "packageName" : "android.transition",
  "className" : "ChangeTransform",
  "comment" : "\n * This Transition captures scale and rotation for Views before and after the\n * scene change and animates those changes during the transition.\n *\n * A change in parent is handled as well by capturing the transforms from\n * the parent before and after the scene change and animating those during the\n * transition.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_MATRIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_TRANSFORMS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_PARENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_PARENT_MATRIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_INTERMEDIATE_PARENT_MATRIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPNAME_INTERMEDIATE_MATRIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sTransitionProperties",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NON_TRANSLATIONS_PROPERTY",
    "type" : "Property<PathAnimatorMatrix, float[]>",
    "comment" : "\n     * This property sets the animation matrix properties that are not translations.\n     ",
    "links" : [ ]
  }, {
    "name" : "TRANSLATIONS_PROPERTY",
    "type" : "Property<PathAnimatorMatrix, PointF>",
    "comment" : "\n     * This property sets the translation animation matrix properties.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUseOverlay",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReparent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempMatrix",
    "type" : "Matrix",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean getReparentWithOverlay()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether changes to parent should use an overlay or not. When the parent\n     * change doesn't use an overlay, it affects the transforms of the child. The\n     * default value is <code>true</code>.\n     *\n     * <p>Note: when Overlays are not used when a parent changes, a view can be clipped when\n     * it moves outside the bounds of its parent. Setting\n     * {@link android.view.ViewGroup#setClipChildren(boolean)} and\n     * {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when\n     * Overlays are not used and the parent is animating its location, the position of the\n     * child view will be relative to its parent's final position, so it may appear to \"jump\"\n     * at the beginning.</p>\n     *\n     * @return <code>true</code> when a changed parent should execute the transition\n     * inside the scene root's overlay or <code>false</code> if a parent change only\n     * affects the transform of the transitioning view.\n     * @attr ref android.R.styleable#ChangeTransform_reparentWithOverlay\n     ",
    "links" : [ "android.view.ViewGroup#setClipChildren(boolean)", "android.view.ViewGroup#setClipToPadding(boolean)" ]
  }, {
    "name" : "public void setReparentWithOverlay(boolean reparentWithOverlay)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether changes to parent should use an overlay or not. When the parent\n     * change doesn't use an overlay, it affects the transforms of the child. The\n     * default value is <code>true</code>.\n     *\n     * <p>Note: when Overlays are not used when a parent changes, a view can be clipped when\n     * it moves outside the bounds of its parent. Setting\n     * {@link android.view.ViewGroup#setClipChildren(boolean)} and\n     * {@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when\n     * Overlays are not used and the parent is animating its location, the position of the\n     * child view will be relative to its parent's final position, so it may appear to \"jump\"\n     * at the beginning.</p>\n     *\n     * @param reparentWithOverlay <code>true</code> when a changed parent should execute the\n     *                            transition inside the scene root's overlay or <code>false</code>\n     *                            if a parent change only affects the transform of the transitioning\n     *                            view.\n     * @attr ref android.R.styleable#ChangeTransform_reparentWithOverlay\n     ",
    "links" : [ "android.view.ViewGroup#setClipChildren(boolean)", "android.view.ViewGroup#setClipToPadding(boolean)" ]
  }, {
    "name" : "public boolean getReparent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether parent changes will be tracked by the ChangeTransform. If parent\n     * changes are tracked, then the transform will adjust to the transforms of the\n     * different parents. If they aren't tracked, only the transforms of the transitioning\n     * view will be tracked. Default is true.\n     *\n     * @return whether parent changes will be tracked by the ChangeTransform.\n     * @attr ref android.R.styleable#ChangeTransform_reparent\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReparent(boolean reparent)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether parent changes will be tracked by the ChangeTransform. If parent\n     * changes are tracked, then the transform will adjust to the transforms of the\n     * different parents. If they aren't tracked, only the transforms of the transitioning\n     * view will be tracked. Default is true.\n     *\n     * @param reparent Set to true to track parent changes or false to only track changes\n     *                 of the transitioning view without considering the parent change.\n     * @attr ref android.R.styleable#ChangeTransform_reparent\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getTransitionProperties()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void captureValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureStartValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void captureEndValues(TransitionValues transitionValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "Animator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ObjectAnimator createTransformAnimator(TransitionValues startValues, TransitionValues endValues, final boolean handleParentChange)",
    "returnType" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean parentsMatch(ViewGroup startParent, ViewGroup endParent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void createGhostView(final ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setMatricesForParent(TransitionValues startValues, TransitionValues endValues)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setIdentityTransforms(View view)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setTransforms(View view, float translationX, float translationY, float translationZ, float scaleX, float scaleY, float rotationX, float rotationY, float rotationZ)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PROPNAME_MATRIX", "PROPNAME_TRANSFORMS", "PROPNAME_PARENT", "PROPNAME_PARENT_MATRIX", "PROPNAME_INTERMEDIATE_PARENT_MATRIX", "PROPNAME_INTERMEDIATE_MATRIX", "sTransitionProperties", "NON_TRANSLATIONS_PROPERTY", "TRANSLATIONS_PROPERTY", "mUseOverlay", "mReparent", "mTempMatrix" ],
  "methodNames" : [ "public boolean getReparentWithOverlay()", "public void setReparentWithOverlay(boolean reparentWithOverlay)", "public boolean getReparent()", "public void setReparent(boolean reparent)", "public String[] getTransitionProperties()", "private void captureValues(TransitionValues transitionValues)", "public void captureStartValues(TransitionValues transitionValues)", "public void captureEndValues(TransitionValues transitionValues)", "public Animator createAnimator(ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)", "private ObjectAnimator createTransformAnimator(TransitionValues startValues, TransitionValues endValues, final boolean handleParentChange)", "private boolean parentsMatch(ViewGroup startParent, ViewGroup endParent)", "private void createGhostView(final ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)", "private void setMatricesForParent(TransitionValues startValues, TransitionValues endValues)", "private static void setIdentityTransforms(View view)", "private static void setTransforms(View view, float translationX, float translationY, float translationZ, float scaleX, float scaleY, float rotationX, float rotationY, float rotationZ)" ]
}