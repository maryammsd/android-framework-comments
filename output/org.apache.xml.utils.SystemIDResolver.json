{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/utils/SystemIDResolver.java",
  "packageName" : "org.apache.xml.utils",
  "className" : "SystemIDResolver",
  "comment" : "\n * This class is used to resolve relative URIs and SystemID \n * strings into absolute URIs.\n *\n * <p>This is a generic utility for resolving URIs, other than the \n * fact that it's declared to throw TransformerException.  Please \n * see code comments for details on how resolution is performed.</p>\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static String getAbsoluteURIFromRelative(String localPath)",
    "returnType" : "String",
    "comment" : "\n   * Get an absolute URI from a given relative URI (local path). \n   * \n   * <p>The relative URI is a local filesystem path. The path can be\n   * absolute or relative. If it is a relative path, it is resolved relative \n   * to the system property \"user.dir\" if it is available; if not (i.e. in an \n   * Applet perhaps which throws SecurityException) then we just return the\n   * relative path. The space and backslash characters are also replaced to\n   * generate a good absolute URI.</p>\n   *\n   * @param localPath The relative URI to resolve\n   *\n   * @return Resolved absolute URI\n   ",
    "links" : [ ]
  }, {
    "name" : "private static String getAbsolutePathFromRelativePath(String relativePath)",
    "returnType" : "String",
    "comment" : "\n   * Return an absolute path from a relative path.\n   *\n   * @param relativePath A relative path\n   * @return The absolute path\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAbsoluteURI(String systemId)",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if the systemId denotes an absolute URI .\n   *\n   * @param systemId The systemId string\n   * @return true if the systemId is an an absolute URI\n   ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAbsolutePath(String systemId)",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if the local path is an absolute path.\n   *\n   * @param systemId The path string\n   * @return true if the path is absolute\n   ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isWindowsAbsolutePath(String systemId)",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if the local path is a Windows absolute path.\n   *\n   * @param systemId The path string\n   * @return true if the path is a Windows absolute path\n   ",
    "links" : [ ]
  }, {
    "name" : "private static String replaceChars(String str)",
    "returnType" : "String",
    "comment" : "\n   * Replace spaces with \"%20\" and backslashes with forward slashes in \n   * the input string to generate a well-formed URI string.\n   *\n   * @param str The input string\n   * @return The string after conversion\n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getAbsoluteURI(String systemId)",
    "returnType" : "String",
    "comment" : "\n   * Take a SystemID string and try to turn it into a good absolute URI.\n   *\n   * @param systemId A URI string, which may be absolute or relative.\n   *\n   * @return The resolved absolute URI\n   ",
    "links" : [ ]
  }, {
    "name" : "public static String getAbsoluteURI(String urlString, String base) throws TransformerException",
    "returnType" : "String",
    "comment" : "\n   * Take a SystemID string and try to turn it into a good absolute URI.\n   *\n   * @param urlString SystemID string\n   * @param base The URI string used as the base for resolving the systemID\n   *\n   * @return The resolved absolute URI\n   * @throws TransformerException thrown if the string can't be turned into a URI.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getAbsoluteURIFromRelative(String localPath)", "private static String getAbsolutePathFromRelativePath(String relativePath)", "public static boolean isAbsoluteURI(String systemId)", "public static boolean isAbsolutePath(String systemId)", "private static boolean isWindowsAbsolutePath(String systemId)", "private static String replaceChars(String str)", "public static String getAbsoluteURI(String systemId)", "public static String getAbsoluteURI(String urlString, String base) throws TransformerException" ],
  "variableNames" : [ ]
}