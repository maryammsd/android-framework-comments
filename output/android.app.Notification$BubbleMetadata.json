{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "BubbleMetadata",
  "comment" : "\n     * Encapsulates the information needed to display a notification as a bubble.\n     *\n     * <p>A bubble is used to display app content in a floating window over the existing\n     * foreground activity. A bubble has a collapsed state represented by an icon and an\n     * expanded state that displays an activity. These may be defined via\n     * {@link Builder#Builder(PendingIntent, Icon)} or they may\n     * be defined via an existing shortcut using {@link Builder#Builder(String)}.\n     * </p>\n     *\n     * <b>Notifications with a valid and allowed bubble will display in collapsed state\n     * outside of the notification shade on unlocked devices. When a user interacts with the\n     * collapsed bubble, the bubble activity will be invoked and displayed.</b>\n     *\n     * @see Notification.Builder#setBubbleMetadata(BubbleMetadata)\n     ",
  "links" : [ "android.text.SpannableStringBuilder#Builder(PendingIntent", "android.text.SpannableStringBuilder#Builder(String)" ],
  "variables" : [ {
    "name" : "mPendingIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeleteIntent",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDesiredHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDesiredHeightResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortcutId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_AUTO_EXPAND_BUBBLE",
    "type" : "int",
    "comment" : "\n         * If set and the app creating the bubble is in the foreground, the bubble will be posted\n         * in its expanded state.\n         *\n         * <p>This flag has no effect if the app posting the bubble is not in the foreground.\n         * The app is considered foreground if it is visible and on the screen, note that\n         * a foreground service does not qualify.\n         * </p>\n         *\n         * <p>Generally this flag should only be set if the user has performed an action to request\n         * or create a bubble.</p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SUPPRESS_NOTIFICATION",
    "type" : "int",
    "comment" : "\n         * Indicates whether the notification associated with the bubble is being visually\n         * suppressed from the notification shade. When <code>true</code> the notification is\n         * hidden, when <code>false</code> the notification shows as normal.\n         *\n         * <p>Apps sending bubbles may set this flag so that the bubble is posted <b>without</b>\n         * the associated notification in the notification shade.</p>\n         *\n         * <p>Generally this flag should only be set by the app if the user has performed an\n         * action to request or create a bubble, or if the user has seen the content in the\n         * notification and the notification is no longer relevant. </p>\n         *\n         * <p>The system will also update this flag with <code>true</code> to hide the notification\n         * from the user once the bubble has been expanded. </p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SUPPRESSABLE_BUBBLE",
    "type" : "int",
    "comment" : "\n         * Indicates whether the bubble should be visually suppressed from the bubble stack if the\n         * user is viewing the same content outside of the bubble. For example, the user has a\n         * bubble with Alice and then opens up the main app and navigates to Alice's page.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SUPPRESS_BUBBLE",
    "type" : "int",
    "comment" : "\n         * Indicates whether the bubble is visually suppressed from the bubble stack.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BubbleMetadata>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getShortcutId()",
    "returnType" : "String",
    "comment" : "\n         * @return the shortcut id used for this bubble if created via\n         * {@link Builder#Builder(String)} or null if created\n         * via {@link Builder#Builder(PendingIntent, Icon)}.\n         ",
    "links" : [ "android.text.SpannableStringBuilder#Builder(PendingIntent", "android.text.SpannableStringBuilder#Builder(String)" ]
  }, {
    "name" : "public PendingIntent getIntent()",
    "returnType" : "PendingIntent",
    "comment" : "\n         * @return the pending intent used to populate the floating window for this bubble, or\n         * null if this bubble is created via {@link Builder#Builder(String)}.\n         ",
    "links" : [ "android.text.SpannableStringBuilder#Builder(String)" ]
  }, {
    "name" : "public PendingIntent getDeleteIntent()",
    "returnType" : "PendingIntent",
    "comment" : "\n         * @return the pending intent to send when the bubble is dismissed by a user, if one exists.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Icon getIcon()",
    "returnType" : "Icon",
    "comment" : "\n         * @return the icon that will be displayed for this bubble when it is collapsed, or null\n         * if the bubble is created via {@link Builder#Builder(String)}.\n         ",
    "links" : [ "android.text.SpannableStringBuilder#Builder(String)" ]
  }, {
    "name" : "public int getDesiredHeight()",
    "returnType" : "int",
    "comment" : "\n         * @return the ideal height, in DPs, for the floating window that app content defined by\n         * {@link #getIntent()} for this bubble. A value of 0 indicates a desired height has\n         * not been set.\n         ",
    "links" : [ "#getIntent()" ]
  }, {
    "name" : "public int getDesiredHeightResId()",
    "returnType" : "int",
    "comment" : "\n         * @return the resId of ideal height for the floating window that app content defined by\n         * {@link #getIntent()} for this bubble. A value of 0 indicates a res value has not\n         * been provided for the desired height.\n         ",
    "links" : [ "#getIntent()" ]
  }, {
    "name" : "public boolean getAutoExpandBubble()",
    "returnType" : "boolean",
    "comment" : "\n         * @return whether this bubble should auto expand when it is posted.\n         *\n         * @see BubbleMetadata.Builder#setAutoExpandBubble(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNotificationSuppressed()",
    "returnType" : "boolean",
    "comment" : "\n         * Indicates whether the notification associated with the bubble is being visually\n         * suppressed from the notification shade. When <code>true</code> the notification is\n         * hidden, when <code>false</code> the notification shows as normal.\n         *\n         * <p>Apps sending bubbles may set this flag so that the bubble is posted <b>without</b>\n         * the associated notification in the notification shade.</p>\n         *\n         * <p>Generally the app should only set this flag if the user has performed an\n         * action to request or create a bubble, or if the user has seen the content in the\n         * notification and the notification is no longer relevant. </p>\n         *\n         * <p>The system will update this flag with <code>true</code> to hide the notification\n         * from the user once the bubble has been expanded.</p>\n         *\n         * @return whether this bubble should suppress the notification when it is posted.\n         *\n         * @see BubbleMetadata.Builder#setSuppressNotification(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBubbleSuppressable()",
    "returnType" : "boolean",
    "comment" : "\n         * Indicates whether the bubble should be visually suppressed from the bubble stack if the\n         * user is viewing the same content outside of the bubble. For example, the user has a\n         * bubble with Alice and then opens up the main app and navigates to Alice's page.\n         *\n         * To match the activity and the bubble notification, the bubble notification should\n         * have a locus id set that matches a locus id set on the activity.\n         *\n         * @return whether this bubble should be suppressed when the same content is visible\n         * outside of the bubble.\n         *\n         * @see BubbleMetadata.Builder#setSuppressableBubble(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBubbleSuppressed()",
    "returnType" : "boolean",
    "comment" : "\n         * Indicates whether the bubble is currently visually suppressed from the bubble stack.\n         *\n         * @see BubbleMetadata.Builder#setSuppressableBubble(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setSuppressNotification(boolean suppressed)",
    "returnType" : "void",
    "comment" : "\n         * Sets whether the notification associated with the bubble is being visually\n         * suppressed from the notification shade. When <code>true</code> the notification is\n         * hidden, when <code>false</code> the notification shows as normal.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setSuppressBubble(boolean suppressed)",
    "returnType" : "void",
    "comment" : "\n         * Sets whether the bubble should be visually suppressed from the bubble stack if the\n         * user is viewing the same content outside of the bubble. For example, the user has a\n         * bubble with Alice and then opens up the main app and navigates to Alice's page.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void setFlags(int flags)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getShortcutId()", "public PendingIntent getIntent()", "public PendingIntent getDeleteIntent()", "public Icon getIcon()", "public int getDesiredHeight()", "public int getDesiredHeightResId()", "public boolean getAutoExpandBubble()", "public boolean isNotificationSuppressed()", "public boolean isBubbleSuppressable()", "public boolean isBubbleSuppressed()", "public void setSuppressNotification(boolean suppressed)", "public void setSuppressBubble(boolean suppressed)", "public void setFlags(int flags)", "public int getFlags()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "private void visitUris(@NonNull Consumer<Uri> visitor)" ],
  "variableNames" : [ "mPendingIntent", "mDeleteIntent", "mIcon", "mDesiredHeight", "mDesiredHeightResId", "mFlags", "mShortcutId", "FLAG_AUTO_EXPAND_BUBBLE", "FLAG_SUPPRESS_NOTIFICATION", "FLAG_SUPPRESSABLE_BUBBLE", "FLAG_SUPPRESS_BUBBLE", "CREATOR" ]
}