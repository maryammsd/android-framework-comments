{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/Stylesheet.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "Stylesheet",
  "comment" : "\n * Represents a stylesheet element.\n * <p>All properties in this class have a fixed form of bean-style property\n * accessors for all properties that represent XSL attributes or elements.\n * These properties have setter method names accessed generically by the\n * processor, and so these names must be fixed according to the system\n * defined in the <a href=\"XSLTAttributeDef#getSetterMethodName\">getSetterMethodName</a>\n * function.</p>\n * <p><pre>\n * <!ENTITY % top-level \"\n *  (xsl:import*,\n *   (xsl:include\n *   | xsl:strip-space\n *   | xsl:preserve-space\n *   | xsl:output\n *   | xsl:key\n *   | xsl:decimal-format\n *   | xsl:attribute-set\n *   | xsl:variable\n *   | xsl:param\n *   | xsl:template\n *   | xsl:namespace-alias\n *   %non-xsl-top-level;)*)\n * \">\n *\n * <!ENTITY % top-level-atts '\n *   extension-element-prefixes CDATA #IMPLIED\n *   exclude-result-prefixes CDATA #IMPLIED\n *   id ID #IMPLIED\n *   version NMTOKEN #REQUIRED\n *   xmlns:xsl CDATA #FIXED \"http://www.w3.org/1999/XSL/Transform\"\n *   %space-att;\n * '>\n *\n * <!ELEMENT xsl:stylesheet %top-level;>\n * <!ATTLIST xsl:stylesheet %top-level-atts;>\n *\n * <!ELEMENT xsl:transform %top-level;>\n * <!ATTLIST xsl:transform %top-level-atts;>\n *\n * </p></pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Stylesheet-Structure\">section-Stylesheet-Structure in XSLT Specification</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STYLESHEET_EXT",
    "type" : "String",
    "comment" : "\n   * Extension to be used when serializing to disk.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_XmlnsXsl",
    "type" : "String",
    "comment" : "\n   * The \"xmlns:xsl\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_ExtensionElementURIs",
    "type" : "StringVector",
    "comment" : "\n   * The \"extension-element-prefixes\" property, actually contains URIs.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_ExcludeResultPrefixs",
    "type" : "StringVector",
    "comment" : "\n   * The \"exclude-result-prefixes\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_Id",
    "type" : "String",
    "comment" : "\n   * The \"id\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_Version",
    "type" : "String",
    "comment" : "\n   * The \"version\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isCompatibleMode",
    "type" : "boolean",
    "comment" : "\n   * Whether or not the stylesheet is in \"Forward Compatibility Mode\" \n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_imports",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:import\" list.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_includes",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:include\" properties.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_DecimalFormatDeclarations",
    "type" : "Stack",
    "comment" : "\n   * Table of tables of element decimal-format.\n   * @see DecimalFormatProperties\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_whitespaceStrippingElements",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:strip-space\" properties,\n   * A lookup table of all space stripping elements.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_whitespacePreservingElements",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:preserve-space\" property,\n   * A lookup table of all space preserving elements.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_output",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:output\" properties.  This is a vector of OutputProperties objects.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_keyDeclarations",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:key\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_attributeSets",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:attribute-set\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_topLevelVariables",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:variable\" and \"xsl:param\" properties.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_templates",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:template\" properties.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_prefix_aliases",
    "type" : "Vector",
    "comment" : "\n   * The \"xsl:namespace-alias\" properties.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_NonXslTopLevel",
    "type" : "Hashtable",
    "comment" : "\n   * The \"non-xsl-top-level\" properties.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_href",
    "type" : "String",
    "comment" : "\n   * The base URL of the XSL document.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_publicId",
    "type" : "String",
    "comment" : " The doctype-public element.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_systemId",
    "type" : "String",
    "comment" : " The doctype-system element.\n   *  @serial          ",
    "links" : [ ]
  }, {
    "name" : "m_stylesheetRoot",
    "type" : "StylesheetRoot",
    "comment" : "\n   * The root of the stylesheet, where all the tables common\n   * to all stylesheets are kept.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_stylesheetParent",
    "type" : "Stylesheet",
    "comment" : "\n   * The parent of the stylesheet.  This will be null if this\n   * is the root stylesheet.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Stylesheet getStylesheet()",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get the owning stylesheet.  This looks up the\n   * inheritance chain until it calls getStylesheet\n   * on a Stylesheet object, which will return itself.\n   *\n   * @return The owning stylesheet, itself.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAggregatedType()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this can be cast to a StylesheetComposed, meaning, you\n   * can ask questions from getXXXComposed functions.\n   *\n   * @return False if this is not a StylesheetComposed\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoot()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this is the root of the stylesheet tree.\n   *\n   * @return False is this is not the root of the stylesheet tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Read the stylesheet from a serialization stream.\n   *\n   * @param stream Input stream to read from\n   *\n   * @throws IOException\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream stream) throws IOException",
    "returnType" : "void",
    "comment" : "\n   * Write out the given output stream \n   *\n   *\n   * @param stream The output stream to write out\n   *\n   * @throws IOException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setXmlnsXsl(String v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xmlns:xsl\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#xslt-namespace\">xslt-namespace in XSLT Specification</a>\n   *\n   * @param v The value to be set for the \"xmlns:xsl\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getXmlnsXsl()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"xmlns:xsl\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#xslt-namespace\">xslt-namespace in XSLT Specification</a>\n   *\n   * @return The value of the \"xmlns:xsl\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExtensionElementPrefixes(StringVector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"extension-element-prefixes\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param v The value to be set for the \"extension-element-prefixes\" \n   * property: a vector of extension element URIs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExtensionElementPrefix(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "String",
    "comment" : "\n   * Get and \"extension-element-prefix\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param i Index of extension element URI in list \n   *\n   * @return The extension element URI at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExtensionElementPrefixCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"extension-element-prefixes\" Strings.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @return Number of URIs in the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExtensionElementURI(String uri)",
    "returnType" : "boolean",
    "comment" : "\n   * Find out if this contains a given \"extension-element-prefix\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#extension-element\">extension-element in XSLT Specification</a>\n   *\n   * @param uri URI of extension element to look for\n   *\n   * @return True if the given URI was found in the list \n   ",
    "links" : [ ]
  }, {
    "name" : "public void setExcludeResultPrefixes(StringVector v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"exclude-result-prefixes\" property.\n   * The designation of a namespace as an excluded namespace is\n   * effective within the subtree of the stylesheet rooted at\n   * the element bearing the exclude-result-prefixes or\n   * xsl:exclude-result-prefixes attribute; a subtree rooted\n   * at an xsl:stylesheet element does not include any stylesheets\n   * imported or included by children of that xsl:stylesheet element.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param v A StringVector of prefixes to exclude \n   ",
    "links" : [ ]
  }, {
    "name" : "public String getExcludeResultPrefix(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "String",
    "comment" : "\n   * Get an \"exclude-result-prefix\" property.\n   * The designation of a namespace as an excluded namespace is\n   * effective within the subtree of the stylesheet rooted at\n   * the element bearing the exclude-result-prefixes or\n   * xsl:exclude-result-prefixes attribute; a subtree rooted\n   * at an xsl:stylesheet element does not include any stylesheets\n   * imported or included by children of that xsl:stylesheet element.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param i Index of prefix to get in list \n   *\n   * @return Prefix to be excluded at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExcludeResultPrefixCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"exclude-result-prefixes\" Strings.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @return The number of prefix strings to be excluded. \n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsExcludeResultPrefix(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not the passed prefix is contained flagged by\n   * the \"exclude-result-prefixes\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param prefix non-null reference to prefix that might be excluded.\n   * @param uri reference to namespace that prefix maps to\n   *\n   * @return true if the prefix should normally be excluded.>\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setId(String v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"id\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Embedding-Stylesheets\">section-Embedding-Stylesheets in XSLT Specification</a>\n   *\n   * @param v Value for the \"id\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"id\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Embedding-Stylesheets\">section-Embedding-Stylesheets in XSLT Specification</a>\n   *\n   * @return The value of the \"id\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setVersion(String v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"version\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#forwards\">forwards in XSLT Specification</a>\n   *\n   * @param v Value for the \"version\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getCompatibleMode()",
    "returnType" : "boolean",
    "comment" : "\n   * Get whether or not the stylesheet is in \"Forward Compatibility Mode\"\n   * \n   * @return true if in forward compatible mode, false otherwise\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getVersion()",
    "returnType" : "String",
    "comment" : "\n   * Get the \"version\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#forwards\">forwards in XSLT Specification</a>\n   *\n   * @return The value of the \"version\" property.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setImport(StylesheetComposed v)",
    "returnType" : "void",
    "comment" : "\n   * Add a stylesheet to the \"import\" list.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @param v Stylesheet to add to the import list\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetComposed getImport(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "StylesheetComposed",
    "comment" : "\n   * Get a stylesheet from the \"import\" list.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @param i Index of the stylesheet to get\n   *\n   * @return The stylesheet at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getImportCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of imported stylesheets.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @return the number of imported stylesheets.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setInclude(Stylesheet v)",
    "returnType" : "void",
    "comment" : "\n   * Add a stylesheet to the \"include\" list.\n   * @see <a href=\"http://www.w3.org/TR/xslt#include\">include in XSLT Specification</a>\n   *\n   * @param v Stylesheet to add to the \"include\" list  \n   ",
    "links" : [ ]
  }, {
    "name" : "public Stylesheet getInclude(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get the stylesheet at the given in index in \"include\" list\n   * @see <a href=\"http://www.w3.org/TR/xslt#include\">include in XSLT Specification</a>\n   *\n   * @param i Index of stylesheet to get\n   *\n   * @return Stylesheet at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIncludeCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of included stylesheets.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @return the number of included stylesheets.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimalFormat(DecimalFormatProperties edf)",
    "returnType" : "void",
    "comment" : "\n   * Process the xsl:decimal-format element.\n   *\n   * @param edf Decimal-format element to push into stack  \n   ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties getDecimalFormat(QName name)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n   * Get an \"xsl:decimal-format\" property.\n   * \n   * @see DecimalFormatProperties\n   * @see <a href=\"http://www.w3.org/TR/xslt#format-number\">format-number in XSLT Specification</a>\n   *\n   * @param name The qualified name of the decimal format property.\n   * @return null if not found, otherwise a DecimalFormatProperties\n   * object, from which you can get a DecimalFormatSymbols object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties getDecimalFormat(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n   * Get an \"xsl:decimal-format\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#format-number\">format-number in XSLT Specification</a>\n   * @see DecimalFormatProperties\n   *\n   * @param i Index of decimal-format property in stack\n   *\n   * @return The decimal-format property at the given index \n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getDecimalFormatCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of xsl:decimal-format declarations.\n   * @see DecimalFormatProperties\n   *\n   * @return the number of xsl:decimal-format declarations.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStripSpaces(WhiteSpaceInfo wsi)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:strip-space\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @param wsi WhiteSpaceInfo element to add to list \n   ",
    "links" : [ ]
  }, {
    "name" : "public WhiteSpaceInfo getStripSpace(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "WhiteSpaceInfo",
    "comment" : "\n   * Get an \"xsl:strip-space\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @param i Index of WhiteSpaceInfo to get\n   *\n   * @return WhiteSpaceInfo at given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getStripSpaceCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:strip-space\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:strip-space\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setPreserveSpaces(WhiteSpaceInfo wsi)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:preserve-space\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @param wsi WhiteSpaceInfo element to add to list\n   ",
    "links" : [ ]
  }, {
    "name" : "public WhiteSpaceInfo getPreserveSpace(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "WhiteSpaceInfo",
    "comment" : "\n   * Get a \"xsl:preserve-space\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @param i Index of WhiteSpaceInfo to get\n   *\n   * @return WhiteSpaceInfo at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getPreserveSpaceCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:preserve-space\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#strip\">strip in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:preserve-space\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setOutput(OutputProperties v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:output\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#output\">output in XSLT Specification</a>\n   *\n   * @param v non-null reference to the OutputProperties object to be \n   *          added to the collection.\n   ",
    "links" : [ ]
  }, {
    "name" : "public OutputProperties getOutput(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "OutputProperties",
    "comment" : "\n   * Get an \"xsl:output\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#output\">output in XSLT Specification</a>\n   *\n   * @param i Index of OutputFormatExtended to get\n   *\n   * @return non-null reference to an OutputProperties object.\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getOutputCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:output\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#output\">output in XSLT Specification</a>\n   *\n   * @return The number of OutputProperties objects contained in this stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setKey(KeyDeclaration v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:key\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#key\">key in XSLT Specification</a>\n   *\n   * @param v KeyDeclaration element to add to the list of key declarations \n   ",
    "links" : [ ]
  }, {
    "name" : "public KeyDeclaration getKey(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "KeyDeclaration",
    "comment" : "\n   * Get an \"xsl:key\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#key\">key in XSLT Specification</a>\n   *\n   * @param i Index of KeyDeclaration element to get\n   *\n   * @return KeyDeclaration element at given index in list \n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getKeyCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:key\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#key\">key in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:key\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setAttributeSet(ElemAttributeSet attrSet)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:attribute-set\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#attribute-sets\">attribute-sets in XSLT Specification</a>\n   *\n   * @param attrSet ElemAttributeSet to add to the list of attribute sets\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemAttributeSet getAttributeSet(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "ElemAttributeSet",
    "comment" : "\n   * Get an \"xsl:attribute-set\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#attribute-sets\">attribute-sets in XSLT Specification</a>\n   *\n   * @param i Index of ElemAttributeSet to get in list\n   *\n   * @return ElemAttributeSet at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeSetCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:attribute-set\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#attribute-sets\">attribute-sets in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:attribute-set\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setVariable(ElemVariable v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:variable\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param v ElemVariable object to add to list of top level variables\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemVariable getVariableOrParam(QName qname)",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Get an \"xsl:variable\" or \"xsl:param\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param qname non-null reference to the qualified name of the variable.\n   *\n   * @return The ElemVariable with the given name in the list or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemVariable getVariable(QName qname)",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Get an \"xsl:variable\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param qname Qualified name of the xsl:variable to get \n   *\n   * @return reference to the variable named by qname, or null if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemVariable getVariableOrParam(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "ElemVariable",
    "comment" : "\n   * Get an \"xsl:variable\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param i Index of variable to get in the list\n   *\n   * @return ElemVariable at the given index in the list \n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getVariableOrParamCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:variable\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:variable\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParam(ElemParam v)",
    "returnType" : "void",
    "comment" : "\n   * Set an \"xsl:param\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param v A non-null ElemParam reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemParam getParam(QName qname)",
    "returnType" : "ElemParam",
    "comment" : "\n   * Get an \"xsl:param\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @param qname non-null reference to qualified name of the parameter.\n   *\n   * @return ElemParam with the given name in the list or null\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setTemplate(ElemTemplate v)",
    "returnType" : "void",
    "comment" : "\n   * Set an \"xsl:template\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Defining-Template-Rules\">section-Defining-Template-Rules in XSLT Specification</a>\n   *\n   * @param v ElemTemplate to add to list of templates\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplate getTemplate(int i) throws TransformerException",
    "returnType" : "ElemTemplate",
    "comment" : "\n   * Get an \"xsl:template\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Defining-Template-Rules\">section-Defining-Template-Rules in XSLT Specification</a>\n   *\n   * @param i Index of ElemTemplate in the list to get\n   *\n   * @return ElemTemplate at the given index in the list\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getTemplateCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:template\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Defining-Template-Rules\">section-Defining-Template-Rules in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:template\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNamespaceAlias(NamespaceAlias na)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"xsl:namespace-alias\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param na NamespaceAlias elemeent to add to the list\n   ",
    "links" : [ ]
  }, {
    "name" : "public NamespaceAlias getNamespaceAlias(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "NamespaceAlias",
    "comment" : "\n   * Get an \"xsl:namespace-alias\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#literal-result-element\">literal-result-element in XSLT Specification</a>\n   *\n   * @param i Index of NamespaceAlias element to get from the list \n   *\n   * @return NamespaceAlias element at the given index in the list\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNamespaceAliasCount()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of \"xsl:namespace-alias\" properties.\n   * @see <a href=\"http://www.w3.org/TR/xslt#top-level-variables\">top-level-variables in XSLT Specification</a>\n   *\n   * @return the number of \"xsl:namespace-alias\" properties.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setNonXslTopLevel(QName name, Object obj)",
    "returnType" : "void",
    "comment" : "\n   * Set found a non-xslt element.\n   * @see <a href=\"http://www.w3.org/TR/xslt#stylesheet-element\">stylesheet-element in XSLT Specification</a>\n   *\n   * @param name Qualified name of the element\n   * @param obj The element object\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getNonXslTopLevel(QName name)",
    "returnType" : "Object",
    "comment" : "\n   * Get a non-xslt element.\n   * @see <a href=\"http://www.w3.org/TR/xslt#stylesheet-element\">stylesheet-element in XSLT Specification</a>\n   *\n   * @param name Qualified name of the element to get\n   *\n   * @return The object associate with the given name \n   ",
    "links" : [ ]
  }, {
    "name" : "public String getHref()",
    "returnType" : "String",
    "comment" : "\n   * Get the base identifier with which this stylesheet is associated.\n   *\n   * @return the base identifier with which this stylesheet is associated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setHref(String baseIdent)",
    "returnType" : "void",
    "comment" : "\n   * Set the base identifier with which this stylesheet is associated.\n   *\n   * @param baseIdent the base identifier with which this stylesheet is associated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setLocaterInfo(SourceLocator locator)",
    "returnType" : "void",
    "comment" : "\n   * Set the location information for this element.\n   *\n   * @param locator SourceLocator object with location information  \n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetRoot getStylesheetRoot()",
    "returnType" : "StylesheetRoot",
    "comment" : "\n   * Get the root of the stylesheet, where all the tables common\n   * to all stylesheets are kept.\n   *\n   * @return the root of the stylesheet\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStylesheetRoot(StylesheetRoot v)",
    "returnType" : "void",
    "comment" : "\n   * Set the root of the stylesheet, where all the tables common\n   * to all stylesheets are kept.\n   *\n   * @param v the root of the stylesheet\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stylesheet getStylesheetParent()",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get the parent of the stylesheet.  This will be null if this\n   * is the root stylesheet.\n   *\n   * @return the parent of the stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setStylesheetParent(Stylesheet v)",
    "returnType" : "void",
    "comment" : "\n   * Set the parent of the stylesheet.  This should be null if this\n   * is the root stylesheet.\n   *\n   * @param v the parent of the stylesheet.\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetComposed getStylesheetComposed()",
    "returnType" : "StylesheetComposed",
    "comment" : "\n   * Get the owning aggregated stylesheet, or this\n   * stylesheet if it is aggregated.\n   *\n   * @return the owning aggregated stylesheet or itself\n   ",
    "links" : [ ]
  }, {
    "name" : "public short getNodeType()",
    "returnType" : "short",
    "comment" : "\n   * Get the type of the node.  We'll pretend we're a Document.\n   *\n   * @return the type of the node: document node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The node name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void replaceTemplate(ElemTemplate v, int i) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Replace an \"xsl:template\" property.\n   * This is a hook for CompilingStylesheetHandler, to allow\n   * us to access a template, compile it, instantiate it,\n   * and replace the original with the compiled instance.\n   * ADDED 9/5/2000 to support compilation experiment\n   *\n   * @param v Compiled template to replace with\n   * @param i Index of template to be replaced\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)",
    "returnType" : "void",
    "comment" : "\n     * Call the children visitors.\n     * @param visitor The visitor whose appropriate method will be called.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean accept(XSLTVisitor visitor)",
    "returnType" : "boolean",
    "comment" : "\n   * Accept a visitor and call the appropriate method \n   * for this class.\n   * \n   * @param visitor The visitor whose appropriate method will be called.\n   * @return true if the children of the object should be visited.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Stylesheet getStylesheet()", "public boolean isAggregatedType()", "public boolean isRoot()", "private void readObject(ObjectInputStream stream) throws IOException, TransformerException", "private void writeObject(ObjectOutputStream stream) throws IOException", "public void setXmlnsXsl(String v)", "public String getXmlnsXsl()", "public void setExtensionElementPrefixes(StringVector v)", "public String getExtensionElementPrefix(int i) throws ArrayIndexOutOfBoundsException", "public int getExtensionElementPrefixCount()", "public boolean containsExtensionElementURI(String uri)", "public void setExcludeResultPrefixes(StringVector v)", "public String getExcludeResultPrefix(int i) throws ArrayIndexOutOfBoundsException", "public int getExcludeResultPrefixCount()", "public boolean containsExcludeResultPrefix(String prefix, String uri)", "public void setId(String v)", "public String getId()", "public void setVersion(String v)", "public boolean getCompatibleMode()", "public String getVersion()", "public void setImport(StylesheetComposed v)", "public StylesheetComposed getImport(int i) throws ArrayIndexOutOfBoundsException", "public int getImportCount()", "public void setInclude(Stylesheet v)", "public Stylesheet getInclude(int i) throws ArrayIndexOutOfBoundsException", "public int getIncludeCount()", "public void setDecimalFormat(DecimalFormatProperties edf)", "public DecimalFormatProperties getDecimalFormat(QName name)", "public DecimalFormatProperties getDecimalFormat(int i) throws ArrayIndexOutOfBoundsException", "public int getDecimalFormatCount()", "public void setStripSpaces(WhiteSpaceInfo wsi)", "public WhiteSpaceInfo getStripSpace(int i) throws ArrayIndexOutOfBoundsException", "public int getStripSpaceCount()", "public void setPreserveSpaces(WhiteSpaceInfo wsi)", "public WhiteSpaceInfo getPreserveSpace(int i) throws ArrayIndexOutOfBoundsException", "public int getPreserveSpaceCount()", "public void setOutput(OutputProperties v)", "public OutputProperties getOutput(int i) throws ArrayIndexOutOfBoundsException", "public int getOutputCount()", "public void setKey(KeyDeclaration v)", "public KeyDeclaration getKey(int i) throws ArrayIndexOutOfBoundsException", "public int getKeyCount()", "public void setAttributeSet(ElemAttributeSet attrSet)", "public ElemAttributeSet getAttributeSet(int i) throws ArrayIndexOutOfBoundsException", "public int getAttributeSetCount()", "public void setVariable(ElemVariable v)", "public ElemVariable getVariableOrParam(QName qname)", "public ElemVariable getVariable(QName qname)", "public ElemVariable getVariableOrParam(int i) throws ArrayIndexOutOfBoundsException", "public int getVariableOrParamCount()", "public void setParam(ElemParam v)", "public ElemParam getParam(QName qname)", "public void setTemplate(ElemTemplate v)", "public ElemTemplate getTemplate(int i) throws TransformerException", "public int getTemplateCount()", "public void setNamespaceAlias(NamespaceAlias na)", "public NamespaceAlias getNamespaceAlias(int i) throws ArrayIndexOutOfBoundsException", "public int getNamespaceAliasCount()", "public void setNonXslTopLevel(QName name, Object obj)", "public Object getNonXslTopLevel(QName name)", "public String getHref()", "public void setHref(String baseIdent)", "public void setLocaterInfo(SourceLocator locator)", "public StylesheetRoot getStylesheetRoot()", "public void setStylesheetRoot(StylesheetRoot v)", "public Stylesheet getStylesheetParent()", "public void setStylesheetParent(Stylesheet v)", "public StylesheetComposed getStylesheetComposed()", "public short getNodeType()", "public int getXSLToken()", "public String getNodeName()", "public void replaceTemplate(ElemTemplate v, int i) throws TransformerException", "protected void callChildVisitors(XSLTVisitor visitor, boolean callAttrs)", "protected boolean accept(XSLTVisitor visitor)" ],
  "variableNames" : [ "serialVersionUID", "STYLESHEET_EXT", "m_XmlnsXsl", "m_ExtensionElementURIs", "m_ExcludeResultPrefixs", "m_Id", "m_Version", "m_isCompatibleMode", "m_imports", "m_includes", "m_DecimalFormatDeclarations", "m_whitespaceStrippingElements", "m_whitespacePreservingElements", "m_output", "m_keyDeclarations", "m_attributeSets", "m_topLevelVariables", "m_templates", "m_prefix_aliases", "m_NonXslTopLevel", "m_href", "m_publicId", "m_systemId", "m_stylesheetRoot", "m_stylesheetParent" ]
}