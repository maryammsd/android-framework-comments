{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/textclassifier/TextLinksParams.java",
  "packageName" : "android.view.textclassifier",
  "className" : "TextLinksParams",
  "comment" : "\n * Parameters for generating and applying links.\n * @hide\n ",
  "variables" : [ {
    "name" : "DEFAULT_SPAN_FACTORY",
    "type" : "Function<TextLink, TextLinkSpan>",
    "comment" : "\n     * A function to create spans from TextLinks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mApplyStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpanFactory",
    "type" : "Function<TextLink, TextLinkSpan>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntityConfig",
    "type" : "TextClassifier.EntityConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TextLinksParams fromLinkMask(@LinkifyMask int mask)",
    "returnType" : "TextLinksParams",
    "comment" : "\n     * Returns a new TextLinksParams object based on the specified link mask.\n     *\n     * @param mask the link mask\n     *      e.g. {@link LinkifyMask#PHONE_NUMBERS} | {@link LinkifyMask#EMAIL_ADDRESSES}\n     * @hide\n     ",
    "links" : [ "LinkifyMask#PHONE_NUMBERS", "LinkifyMask#EMAIL_ADDRESSES" ]
  }, {
    "name" : "public TextClassifier.EntityConfig getEntityConfig()",
    "returnType" : "TextClassifier.EntityConfig",
    "comment" : "\n     * Returns the entity config used to determine what entity types to generate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int apply(@NonNull Spannable text, @NonNull TextLinks textLinks)",
    "returnType" : "int",
    "comment" : "\n     * Annotates the given text with the generated links. It will fail if the provided text doesn't\n     * match the original text used to crete the TextLinks.\n     *\n     * @param text the text to apply the links to. Must match the original text\n     * @param textLinks the links to apply to the text\n     *\n     * @return a status code indicating whether or not the links were successfully applied\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int checkApplyStrategy(int applyStrategy)",
    "returnType" : "int",
    "comment" : " @throws IllegalArgumentException if the value is invalid ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEFAULT_SPAN_FACTORY", "mApplyStrategy", "mSpanFactory", "mEntityConfig" ],
  "methodNames" : [ "public static TextLinksParams fromLinkMask(@LinkifyMask int mask)", "public TextClassifier.EntityConfig getEntityConfig()", "public int apply(@NonNull Spannable text, @NonNull TextLinks textLinks)", "private static int checkApplyStrategy(int applyStrategy)" ]
}