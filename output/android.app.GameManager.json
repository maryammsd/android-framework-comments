{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/GameManager.java",
  "packageName" : "android.app",
  "className" : "GameManager",
  "comment" : "\n * The GameManager allows system apps to modify and query the game mode of apps.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IGameManagerService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_MODE_UNSUPPORTED",
    "type" : "int",
    "comment" : "\n     * Game mode is not supported for this application.\n     ",
    "links" : [ ]
  }, {
    "name" : "GAME_MODE_STANDARD",
    "type" : "int",
    "comment" : "\n     * Standard game mode means the platform will use the game's default\n     * performance characteristics.\n     ",
    "links" : [ ]
  }, {
    "name" : "GAME_MODE_PERFORMANCE",
    "type" : "int",
    "comment" : "\n     * Performance game mode maximizes the game's performance.\n     * <p>\n     * This game mode is highly likely to increase battery consumption.\n     ",
    "links" : [ ]
  }, {
    "name" : "GAME_MODE_BATTERY",
    "type" : "int",
    "comment" : "\n     * Battery game mode will save battery and give longer game play time.\n     ",
    "links" : [ ]
  }, {
    "name" : "GAME_MODE_CUSTOM",
    "type" : "int",
    "comment" : "\n     * Custom game mode that has user-provided configuration overrides.\n     * <p>\n     * Custom game mode is expected to be handled only by the platform using users'\n     * preferred config. It is currently not allowed to opt in custom mode in game mode XML file nor\n     * expected to perform app-based optimizations when activated.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getGameMode()",
    "returnType" : "int",
    "comment" : "\n     * Return the user selected game mode for this application.\n     * <p>\n     * An application can use <code>android:isGame=\"true\"</code> or\n     * <code>android:appCategory=\"game\"</code> to indicate that the application is a game. If an\n     * application is not a game, always return {@link #GAME_MODE_UNSUPPORTED}.\n     * <p>\n     * Developers should call this API every time the application is resumed.\n     * <p>\n     * If a game's <code>targetSdkVersion</code> is {@link android.os.Build.VERSION_CODES#TIRAMISU}\n     * or lower, and when the game mode is set to {@link #GAME_MODE_CUSTOM} which is available in\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE} or newer, this API will return\n     * {@link #GAME_MODE_STANDARD} instead for backward compatibility.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#GAME_MODE_CUSTOM", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#GAME_MODE_STANDARD", "#GAME_MODE_UNSUPPORTED" ]
  }, {
    "name" : "public int getGameMode(@NonNull String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Gets the game mode for the given package.\n     * <p>\n     * The caller must have {@link android.Manifest.permission#MANAGE_GAME_MODE}.\n     * <p>\n     * Also see {@link #getGameMode()} on how it handles SDK version compatibility.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_GAME_MODE", "#getGameMode()" ]
  }, {
    "name" : "private int getGameModeImpl(@NonNull String packageName, int targetSdkVersion)",
    "returnType" : "int",
    "comment" : " we don't want a binder call each time to check on behalf of an app using CompatChange.",
    "links" : [ ]
  }, {
    "name" : "public GameModeInfo getGameModeInfo(@NonNull String packageName)",
    "returnType" : "GameModeInfo",
    "comment" : "\n     * Returns the {@link GameModeInfo} associated with the game associated with\n     * the given {@code packageName}. If the given package is not a game, {@code null} is\n     * always returned.\n     * <p>\n     * An application can use <code>android:isGame=\"true\"</code> or\n     * <code>android:appCategory=\"game\"</code> to indicate that the application is a game.\n     * If the manifest doesn't define a category, the category can also be\n     * provided by the installer via\n     * {@link android.content.pm.PackageManager#setApplicationCategoryHint(String, int)}.\n     * <p>\n     *\n     * @hide\n     ",
    "links" : [ "android.app.GameModeInfo", "android.content.pm.PackageManager#setApplicationCategoryHint(String" ]
  }, {
    "name" : "public void setGameMode(@NonNull String packageName, @GameMode int gameMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the game mode for the given package.\n     * <p>\n     * The caller must have {@link android.Manifest.permission#MANAGE_GAME_MODE}.\n     * <p>\n     * Setting the game mode on a non-game application or setting a game to\n     * {@link #GAME_MODE_UNSUPPORTED} will have no effect.\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_GAME_MODE", "#GAME_MODE_UNSUPPORTED" ]
  }, {
    "name" : "public int[] getAvailableGameModes(@NonNull String packageName)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns a list of supported game modes for a given package.\n     * <p>\n     * The caller must have {@link android.Manifest.permission#MANAGE_GAME_MODE}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_GAME_MODE" ]
  }, {
    "name" : "public boolean isAngleEnabled(@NonNull String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if ANGLE is enabled for a given package and user ID.\n     * <p>\n     * ANGLE (Almost Native Graphics Layer Engine) can translate OpenGL ES commands to Vulkan\n     * commands. Enabling ANGLE may improve the performance and/or reduce the power consumption of\n     * applications.\n     * The caller must have {@link android.Manifest.permission#MANAGE_GAME_MODE}.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#MANAGE_GAME_MODE" ]
  }, {
    "name" : "public void notifyGraphicsEnvironmentSetup()",
    "returnType" : "void",
    "comment" : "\n     * Set up the automatic power boost if appropriate.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGameState(@NonNull GameState gameState)",
    "returnType" : "void",
    "comment" : "\n     * Called by games to communicate the current state to the platform.\n     * @param gameState An object set to the current state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGameServiceProvider(@Nullable String packageName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the game service provider to the given package name for test only.\n     *\n     * <p>Passing in {@code null} will clear a previously set value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateCustomGameModeConfiguration(@NonNull String packageName, @NonNull GameModeConfiguration gameModeConfig)",
    "returnType" : "void",
    "comment" : "\n     * Updates the config for the game's {@link #GAME_MODE_CUSTOM} mode.\n     * <p>\n     * The caller must have {@link android.Manifest.permission#MANAGE_GAME_MODE}.\n     *\n     * @param packageName The package name of the game to update\n     * @param gameModeConfig The configuration to use for game mode interventions\n     * @hide\n     ",
    "links" : [ "#GAME_MODE_CUSTOM", "android.Manifest.permission#MANAGE_GAME_MODE" ]
  } ],
  "methodNames" : [ "public int getGameMode()", "public int getGameMode(@NonNull String packageName)", "private int getGameModeImpl(@NonNull String packageName, int targetSdkVersion)", "public GameModeInfo getGameModeInfo(@NonNull String packageName)", "public void setGameMode(@NonNull String packageName, @GameMode int gameMode)", "public int[] getAvailableGameModes(@NonNull String packageName)", "public boolean isAngleEnabled(@NonNull String packageName)", "public void notifyGraphicsEnvironmentSetup()", "public void setGameState(@NonNull GameState gameState)", "public void setGameServiceProvider(@Nullable String packageName)", "public void updateCustomGameModeConfiguration(@NonNull String packageName, @NonNull GameModeConfiguration gameModeConfig)" ],
  "variableNames" : [ "TAG", "mContext", "mService", "GAME_MODE_UNSUPPORTED", "GAME_MODE_STANDARD", "GAME_MODE_PERFORMANCE", "GAME_MODE_BATTERY", "GAME_MODE_CUSTOM" ]
}