{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioTrack.java",
  "packageName" : "android.media",
  "className" : "StreamEventCallback",
  "comment" : "\n     * Abstract class to receive event notifications about the stream playback in offloaded mode.\n     * See {@link AudioTrack#registerStreamEventCallback(Executor, StreamEventCallback)} to register\n     * the callback on the given {@link AudioTrack} instance.\n     ",
  "links" : [ "android.media.AudioTrack", "android.media.AudioTrack#registerStreamEventCallback(Executor" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onTearDown(@NonNull AudioTrack track)",
    "returnType" : "void",
    "comment" : "\n         * Called when an offloaded track is no longer valid and has been discarded by the system.\n         * An example of this happening is when an offloaded track has been paused too long, and\n         * gets invalidated by the system to prevent any other offload.\n         * @param track the {@link AudioTrack} on which the event happened.\n         ",
    "links" : [ "android.media.AudioTrack" ]
  }, {
    "name" : "public void onPresentationEnded(@NonNull AudioTrack track)",
    "returnType" : "void",
    "comment" : "\n         * Called when all the buffers of an offloaded track that were queued in the audio system\n         * (e.g. the combination of the Android audio framework and the device's audio hardware)\n         * have been played after {@link AudioTrack#stop()} has been called.\n         * @param track the {@link AudioTrack} on which the event happened.\n         ",
    "links" : [ "android.media.AudioTrack#stop()", "android.media.AudioTrack" ]
  }, {
    "name" : "public void onDataRequest(@NonNull AudioTrack track, @IntRange(from = 0) int sizeInFrames)",
    "returnType" : "void",
    "comment" : "\n         * Called when more audio data can be written without blocking on an offloaded track.\n         * @param track the {@link AudioTrack} on which the event happened.\n         * @param sizeInFrames the number of frames available to write without blocking.\n         *   Note that the frame size of a compressed stream is 1 byte.\n         ",
    "links" : [ "android.media.AudioTrack" ]
  } ],
  "methodNames" : [ "public void onTearDown(@NonNull AudioTrack track)", "public void onPresentationEnded(@NonNull AudioTrack track)", "public void onDataRequest(@NonNull AudioTrack track, @IntRange(from = 0) int sizeInFrames)" ],
  "variableNames" : [ ]
}