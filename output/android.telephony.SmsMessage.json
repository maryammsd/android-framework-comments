{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/SmsMessage.java",
  "packageName" : "android.telephony",
  "className" : "SmsMessage",
  "comment" : "\n * A Short Message Service message.\n * @see android.provider.Telephony.Sms.Intents#getMessagesFromIntent\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODING_UNKNOWN",
    "type" : "int",
    "comment" : " User data text encoding code unit size ",
    "links" : [ ]
  }, {
    "name" : "ENCODING_7BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODING_8BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODING_16BIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENCODING_KSC5601",
    "type" : "int",
    "comment" : "\n     * This value is not defined in global standard. Only in Korea, this is used.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_BYTES",
    "type" : "int",
    "comment" : " The maximum number of payload bytes per message ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_BYTES_WITH_HEADER",
    "type" : "int",
    "comment" : "\n     * The maximum number of payload bytes per message if a user data header\n     * is present.  This assumes the header only contains the\n     * CONCATENATED_8_BIT_REFERENCE element.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_SEPTETS",
    "type" : "int",
    "comment" : " The maximum number of payload septets per message ",
    "links" : [ ]
  }, {
    "name" : "MAX_USER_DATA_SEPTETS_WITH_HEADER",
    "type" : "int",
    "comment" : "\n     * The maximum number of payload septets per message if a user data header\n     * is present.  This assumes the header only contains the\n     * CONCATENATED_8_BIT_REFERENCE element.\n     ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_3GPP",
    "type" : "String",
    "comment" : "\n     * Indicates a 3GPP format SMS message.\n     * @see SmsManager#injectSmsPdu(byte[], String, PendingIntent)\n     ",
    "links" : [ ]
  }, {
    "name" : "FORMAT_3GPP2",
    "type" : "String",
    "comment" : "\n     * Indicates a 3GPP2 format SMS message.\n     * @see SmsManager#injectSmsPdu(byte[], String, PendingIntent)\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrappedSmsMessage",
    "type" : "SmsMessageBase",
    "comment" : " Contains actual SmsMessage. Only public for debugging and for framework layer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubId",
    "type" : "int",
    "comment" : " Indicates the subId\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNoEmsSupportConfigList",
    "type" : "NoEmsSupportConfig[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsNoEmsSupportConfigListLoaded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setSubId(int subId)",
    "returnType" : "void",
    "comment" : " set Subscription information\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSubId()",
    "returnType" : "int",
    "comment" : " get Subscription information\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SmsMessage createFromPdu(byte[] pdu)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Create an SmsMessage from a raw PDU. Guess format based on Voice\n     * technology first, if it fails use other format.\n     * All applications which handle\n     * incoming SMS messages by processing the {@code SMS_RECEIVED_ACTION} broadcast\n     * intent <b>must</b> now pass the new {@code format} String extra from the intent\n     * into the new method {@code createFromPdu(byte[], String)} which takes an\n     * extra format parameter. This is required in order to correctly decode the PDU on\n     * devices that require support for both 3GPP and 3GPP2 formats at the same time,\n     * such as dual-mode GSM/CDMA and CDMA/LTE phones.\n     * @deprecated Use {@link #createFromPdu(byte[], String)} instead.\n     ",
    "links" : [ "#createFromPdu(byte" ]
  }, {
    "name" : "public static SmsMessage createFromPdu(byte[] pdu, String format)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Create an SmsMessage from a raw PDU with the specified message format. The\n     * message format is passed in the\n     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} as the {@code format}\n     * String extra, and will be either \"3gpp\" for GSM/UMTS/LTE messages in 3GPP format\n     * or \"3gpp2\" for CDMA/LTE messages in 3GPP2 format.\n     *\n     * @param pdu the message PDU from the\n     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} intent\n     * @param format the format extra from the\n     * {@link android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION} intent\n     ",
    "links" : [ "android.provider.Telephony.Sms.Intents#SMS_RECEIVED_ACTION" ]
  }, {
    "name" : "private static SmsMessage createFromPdu(byte[] pdu, String format, boolean fallbackToOtherFormat)",
    "returnType" : "SmsMessage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SmsMessage createFromEfRecord(int index, byte[] data)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Creates an SmsMessage from an SMS EF record.\n     *\n     * @param index Index of SMS EF record.\n     * @param data Record data.\n     * @return An SmsMessage representing the record.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SmsMessage createFromEfRecord(int index, byte[] data, int subId)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Creates an SmsMessage from an SMS EF record.\n     *\n     * @param index Index of SMS EF record.\n     * @param data Record data.\n     * @param subId Subscription Id associated with the record.\n     * @return An SmsMessage representing the record.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SmsMessage createFromNativeSmsSubmitPdu(@NonNull byte[] data, boolean isCdma)",
    "returnType" : "SmsMessage",
    "comment" : "\n     * Create an SmsMessage from a native SMS-Submit PDU, specified by Bluetooth Message Access\n     * Profile Specification v1.4.2 5.8.\n     * This is used by Bluetooth MAP profile to decode message when sending non UTF-8 SMS messages.\n     *\n     * @param data Message data.\n     * @param isCdma Indicates weather the type of the SMS is CDMA.\n     * @return An SmsMessage representing the message.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getTPLayerLengthForPDU(String pdu)",
    "returnType" : "int",
    "comment" : "\n     * Get the TP-Layer-Length for the given SMS-SUBMIT PDU Basically, the\n     * length in bytes (not hex chars) less the SMSC header\n     *\n     * FIXME: This method is only used by a CTS test case that isn't run on CDMA devices.\n     * We should probably deprecate it and remove the obsolete test case.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and the number of\n     * characters remaining until the next message.\n     *\n     * @param msgBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the radio-specific 7-bit encoding\n     *     are counted as single space chars. If false, and if the messageBody contains non-7-bit\n     *     encodable characters, length is calculated using a 16-bit encoding.\n     * @return an int[6] with int[0] being the number of SMS's required, int[1] the number of code\n     *     units used, and int[2] is the number of code units remaining until the next message.\n     *     int[3] is an indicator of the encoding code unit size (see the ENCODING_* definitions in\n     *     SmsConstants). int[4] is the GSM national language table to use, or 0 for the default\n     *     7-bit alphabet. int[5] The GSM national language shift table to use, or 0 for the default\n     *     7-bit extension table.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly, int subId)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and the number of\n     * characters remaining until the next message.\n     *\n     * @param msgBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the radio-specific 7-bit encoding\n     *     are counted as single space chars. If false, and if the messageBody contains non-7-bit\n     *     encodable characters, length is calculated using a 16-bit encoding.\n     * @param subId Subscription to take SMS format.\n     * @return an int[6] with int[0] being the number of SMS's required, int[1] the number of code\n     *     units used, and int[2] is the number of code units remaining until the next message.\n     *     int[3] is an indicator of the encoding code unit size (see the ENCODING_* definitions in\n     *     SmsConstants). int[4] is the GSM national language table to use, or 0 for the default\n     *     7-bit alphabet. int[5] The GSM national language shift table to use, or 0 for the default\n     *     7-bit extension table.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ArrayList<String> fragmentText(String text)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Divide a message text into several fragments, none bigger than the maximum SMS message text\n     * size.\n     *\n     * @param text text, must not be null.\n     * @return an <code>ArrayList</code> of strings that, in order, comprise the original msg text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ArrayList<String> fragmentText(String text, int subId)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Divide a message text into several fragments, none bigger than the maximum SMS message text\n     * size.\n     *\n     * @param text text, must not be null.\n     * @param subId Subscription to take SMS format.\n     * @return an <code>ArrayList</code> of strings that, in order, comprise the original msg text.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(String messageBody, boolean use7bitOnly)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and the number of\n     * characters remaining until the next message, given the current encoding.\n     *\n     * @param messageBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the radio specific (GSM / CDMA)\n     *     alphabet encoding are converted to as a single space characters. If false, a messageBody\n     *     containing non-GSM or non-CDMA alphabet characters are encoded using 16-bit encoding.\n     * @return an int[4] with int[0] being the number of SMS's required, int[1] the number of code\n     *     units used, and int[2] is the number of code units remaining until the next message.\n     *     int[3] is the encoding type that should be used for the message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] calculateLength(String messageBody, boolean use7bitOnly, int subId)",
    "returnType" : "int[]",
    "comment" : "\n     * Calculates the number of SMS's required to encode the message body and the number of\n     * characters remaining until the next message, given the current encoding.\n     *\n     * @param messageBody the message to encode\n     * @param use7bitOnly if true, characters that are not part of the radio specific (GSM / CDMA)\n     *     alphabet encoding are converted to as a single space characters. If false, a messageBody\n     *     containing non-GSM or non-CDMA alphabet characters are encoded using 16-bit encoding.\n     * @param subId Subscription to take SMS format.\n     * @return an int[4] with int[0] being the number of SMS's required, int[1] the number of code\n     *     units used, and int[2] is the number of code units remaining until the next message.\n     *     int[3] is the encoding type that should be used for the message.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Gets an SMS-SUBMIT PDU for a destination address and a message.\n     * This method will not attempt to use any GSM national language 7 bit encodings.\n     *\n     * @param scAddress Service Centre address. Null means use default.\n     * @param destinationAddress the address of the destination for the message.\n     * @param message string representation of the message payload.\n     * @param statusReportRequested indicates whether a report is requested for this message.\n     * @return a <code>SubmitPdu</code> containing the encoded SC address if applicable and the\n     *         encoded message. Returns null on encode error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, int subId)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Gets an SMS-SUBMIT PDU for a destination address and a message.\n     * This method will not attempt to use any GSM national language 7 bit encodings.\n     *\n     * @param scAddress Service Centre address. Null means use default.\n     * @param destinationAddress the address of the destination for the message.\n     * @param message string representation of the message payload.\n     * @param statusReportRequested indicates whether a report is requested for this message.\n     * @param subId subscription of the message.\n     * @return a <code>SubmitPdu</code> containing the encoded SC address if applicable and the\n     *         encoded message. Returns null on encode error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, short destinationPort, byte[] data, boolean statusReportRequested)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Gets an SMS-SUBMIT PDU for a data message to a destination address &amp; port.\n     * This method will not attempt to use any GSM national language 7 bit encodings.\n     *\n     * @param scAddress Service Centre address. Null means use default.\n     * @param destinationAddress the address of the destination for the message.\n     * @param destinationPort the port to deliver the message to at the destination.\n     * @param data the data for the message.\n     * @param statusReportRequested indicates whether a report is requested for this message.\n     * @return a <code>SubmitPdu</code> containing the encoded SC address if applicable and the\n     *         encoded message. Returns null on encode error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SubmitPdu getSmsPdu(int subId, @SmsManager.StatusOnIcc int status, @Nullable String scAddress, @NonNull String address, @NonNull String message, long date)",
    "returnType" : "SubmitPdu",
    "comment" : "\n     * Gets an SMS PDU to store in the ICC.\n     *\n     * @param subId subscription of the message.\n     * @param status message status. One of these status:\n     *               <code>SmsManager.STATUS_ON_ICC_READ</code>\n     *               <code>SmsManager.STATUS_ON_ICC_UNREAD</code>\n     *               <code>SmsManager.STATUS_ON_ICC_SENT</code>\n     *               <code>SmsManager.STATUS_ON_ICC_UNSENT</code>\n     * @param scAddress Service Centre address. Null means use default.\n     * @param address destination or originating address.\n     * @param message string representation of the message payload.\n     * @param date the time stamp the message was received.\n     * @return a <code>SubmitPdu</code> containing the encoded SC address if applicable and the\n     *         encoded message. Returns null on encode error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getSubmitPduEncodedMessage(boolean isTypeGsm, @NonNull String destinationAddress, @NonNull String message, @EncodingSize int encoding, @IntRange(from = 0) int languageTable, @IntRange(from = 0) int languageShiftTable, @IntRange(from = 0, to = 255) int refNumber, @IntRange(from = 1, to = 255) int seqNumber, @IntRange(from = 1, to = 255) int msgCount)",
    "returnType" : "byte[]",
    "comment" : "\n     * Get an SMS-SUBMIT PDU's encoded message.\n     * This is used by Bluetooth MAP profile to handle long non UTF-8 SMS messages.\n     *\n     * @param isTypeGsm true when message's type is GSM, false when type is CDMA\n     * @param destinationAddress the address of the destination for the message\n     * @param message message content\n     * @param encoding User data text encoding code unit size\n     * @param languageTable GSM national language table to use, specified by 3GPP\n     *                      23.040 9.2.3.24.16\n     * @param languageShiftTable GSM national language shift table to use, specified by 3GPP\n     *                           23.040 9.2.3.24.15\n     * @param refNumber reference number of concatenated SMS, specified by 3GPP 23.040 9.2.3.24.1\n     * @param seqNumber sequence number of concatenated SMS, specified by 3GPP 23.040 9.2.3.24.1\n     * @param msgCount count of messages of concatenated SMS, specified by 3GPP 23.040 9.2.3.24.2\n     * @return a byte[] containing the encoded message\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceCenterAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the address of the SMS service center that relayed this message\n     * or null if there is none.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getOriginatingAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the originating address (sender) of this SMS message in String\n     * form or null if unavailable.\n     *\n     * <p>If the address is a GSM-formatted address, it will be in a format specified by 3GPP\n     * 23.040 Sec 9.1.2.5. If it is a CDMA address, it will be a format specified by 3GPP2\n     * C.S005-D Table 2.7.1.3.2.4-2. The choice of format is carrier-specific, so callers of the\n     * should be careful to avoid assumptions about the returned content.\n     *\n     * @return a String representation of the address; null if unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayOriginatingAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the originating address, or email from address if this message\n     * was from an email gateway. Returns null if originating address\n     * unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMessageBody()",
    "returnType" : "String",
    "comment" : "\n     * Returns the message body as a String, if it exists and is text based.\n     * @return message body if there is one, otherwise null\n     ",
    "links" : [ ]
  }, {
    "name" : "public MessageClass getMessageClass()",
    "returnType" : "MessageClass",
    "comment" : "\n     * Returns the class of this message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDisplayMessageBody()",
    "returnType" : "String",
    "comment" : "\n     * Returns the message body, or email message body if this message was from\n     * an email gateway. Returns null if message body unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPseudoSubject()",
    "returnType" : "String",
    "comment" : "\n     * Unofficial convention of a subject line enclosed in parens empty string\n     * if not present\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimestampMillis()",
    "returnType" : "long",
    "comment" : "\n     * Returns the service centre timestamp in currentTimeMillis() format\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmail()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if message is an email.\n     *\n     * @return true if this message came through an email gateway and email\n     *         sender / subject / parsed body are available\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEmailBody()",
    "returnType" : "String",
    "comment" : "\n     * @return if isEmail() is true, body of the email sent through the gateway.\n     *         null otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEmailFrom()",
    "returnType" : "String",
    "comment" : "\n     * @return if isEmail() is true, email from address of email sent through\n     *         the gateway. null otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProtocolIdentifier()",
    "returnType" : "int",
    "comment" : "\n     * Get protocol identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReplace()",
    "returnType" : "boolean",
    "comment" : "\n     * See TS 23.040 9.2.3.9 returns true if this is a \"replace short message\"\n     * SMS\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCphsMwiMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true for CPHS MWI toggle message.\n     *\n     * @return true if this is a CPHS MWI toggle message See CPHS 4.2 section\n     *         B.4.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMWIClearMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a CPHS voicemail / message waiting\n     * indicator (MWI) clear message\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMWISetMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a CPHS voicemail / message waiting\n     * indicator (MWI) set message\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMwiDontStore()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if this message is a \"Message Waiting Indication Group:\n     * Discard Message\" notification and should not be stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getUserData()",
    "returnType" : "byte[]",
    "comment" : "\n     * returns the user data section minus the user data header if one was\n     * present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getPdu()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw PDU for the message.\n     *\n     * @return the raw PDU for the message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatusOnSim()",
    "returnType" : "int",
    "comment" : "\n     * Returns the status of the message on the SIM (read, unread, sent, unsent).\n     *\n     * @return the status of the message on the SIM.  These are:\n     *         SmsManager.STATUS_ON_SIM_FREE\n     *         SmsManager.STATUS_ON_SIM_READ\n     *         SmsManager.STATUS_ON_SIM_UNREAD\n     *         SmsManager.STATUS_ON_SIM_SEND\n     *         SmsManager.STATUS_ON_SIM_UNSENT\n     * @deprecated Use getStatusOnIcc instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatusOnIcc()",
    "returnType" : "int",
    "comment" : "\n     * Returns the status of the message on the ICC (read, unread, sent, unsent).\n     *\n     * @return the status of the message on the ICC.  These are:\n     *         SmsManager.STATUS_ON_ICC_FREE\n     *         SmsManager.STATUS_ON_ICC_READ\n     *         SmsManager.STATUS_ON_ICC_UNREAD\n     *         SmsManager.STATUS_ON_ICC_SEND\n     *         SmsManager.STATUS_ON_ICC_UNSENT\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexOnSim()",
    "returnType" : "int",
    "comment" : "\n     * Returns the record index of the message on the SIM (1-based index).\n     * @return the record index of the message on the SIM, or -1 if this\n     *         SmsMessage was not created from a SIM SMS EF record.\n     * @deprecated Use getIndexOnIcc instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIndexOnIcc()",
    "returnType" : "int",
    "comment" : "\n     * Returns the record index of the message on the ICC (1-based index).\n     * @return the record index of the message on the ICC, or -1 if this\n     *         SmsMessage was not created from a ICC SMS EF record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatus()",
    "returnType" : "int",
    "comment" : "\n     * GSM: For an SMS-STATUS-REPORT message, this returns the status field from the status report.\n     * This field indicates the status of a previously submitted SMS, if requested.\n     * See TS 23.040, 9.2.3.15 TP-Status for a description of values.\n     * CDMA: For not interfering with status codes from GSM, the value is shifted to the bits 31-16.\n     * The value is composed of an error class (bits 25-24) and a status code (bits 23-16). Possible\n     * codes are described in C.S0015-B, v2.0, 4.5.21.\n     *\n     * @return 0 for GSM or 2 shifted left by 16 for CDMA indicates the previously sent message was\n     *         received. See TS 23.040, 9.2.3.15 and C.S0015-B, v2.0, 4.5.21 for a description of\n     *         other possible values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStatusReportMessage()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true iff the message is a SMS-STATUS-REPORT message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReplyPathPresent()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the <code>TP-Reply-Path</code> bit is set in\n     * this message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getReceivedEncodingType()",
    "returnType" : "int",
    "comment" : "\n     * Return the encoding type of a received SMS message, which is specified using ENCODING_*\n     * GSM: defined in android.telephony.SmsConstants\n     * CDMA: defined in android.telephony.cdma.UserData\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is3gpp()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if format of the message is 3GPP.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean useCdmaFormatForMoSms()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether or not to use CDMA format for MO SMS.\n     * If SMS over IMS is supported, then format is based on IMS SMS format,\n     * otherwise format is based on current phone type.\n     *\n     * @return true if Cdma format should be used for MO SMS, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean useCdmaFormatForMoSms(int subId)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether or not to use CDMA format for MO SMS.\n     * If SMS over IMS is supported, then format is based on IMS SMS format,\n     * otherwise format is based on current phone type.\n     *\n     * @param subId Subscription for which phone type is returned.\n     *\n     * @return true if Cdma format should be used for MO SMS, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCdmaVoice()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether or not to current phone type is cdma.\n     *\n     * @return true if current phone type is cdma, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isCdmaVoice(int subId)",
    "returnType" : "boolean",
    "comment" : "\n      * Determines whether or not to current phone type is cdma\n      *\n      * @return true if current phone type is cdma, false otherwise.\n      ",
    "links" : [ ]
  }, {
    "name" : "public static boolean hasEmsSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * Decide if the carrier supports long SMS.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldAppendPageNumberAsPrefix()",
    "returnType" : "boolean",
    "comment" : "\n     * Check where to add \" x/y\" in each SMS segment, begin or end.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isNoEmsSupportConfigListExisted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getRecipientAddress()",
    "returnType" : "String",
    "comment" : "\n     * Returns the recipient address(receiver) of this SMS message in String form or null if\n     * unavailable.\n     * {@hide}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setSubId(int subId)", "public int getSubId()", "public static SmsMessage createFromPdu(byte[] pdu)", "public static SmsMessage createFromPdu(byte[] pdu, String format)", "private static SmsMessage createFromPdu(byte[] pdu, String format, boolean fallbackToOtherFormat)", "public static SmsMessage createFromEfRecord(int index, byte[] data)", "public static SmsMessage createFromEfRecord(int index, byte[] data, int subId)", "public static SmsMessage createFromNativeSmsSubmitPdu(@NonNull byte[] data, boolean isCdma)", "public static int getTPLayerLengthForPDU(String pdu)", "public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly)", "public static int[] calculateLength(CharSequence msgBody, boolean use7bitOnly, int subId)", "public static ArrayList<String> fragmentText(String text)", "public static ArrayList<String> fragmentText(String text, int subId)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly)", "public static int[] calculateLength(String messageBody, boolean use7bitOnly, int subId)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, String message, boolean statusReportRequested, int subId)", "public static SubmitPdu getSubmitPdu(String scAddress, String destinationAddress, short destinationPort, byte[] data, boolean statusReportRequested)", "public static SubmitPdu getSmsPdu(int subId, @SmsManager.StatusOnIcc int status, @Nullable String scAddress, @NonNull String address, @NonNull String message, long date)", "public static byte[] getSubmitPduEncodedMessage(boolean isTypeGsm, @NonNull String destinationAddress, @NonNull String message, @EncodingSize int encoding, @IntRange(from = 0) int languageTable, @IntRange(from = 0) int languageShiftTable, @IntRange(from = 0, to = 255) int refNumber, @IntRange(from = 1, to = 255) int seqNumber, @IntRange(from = 1, to = 255) int msgCount)", "public String getServiceCenterAddress()", "public String getOriginatingAddress()", "public String getDisplayOriginatingAddress()", "public String getMessageBody()", "public MessageClass getMessageClass()", "public String getDisplayMessageBody()", "public String getPseudoSubject()", "public long getTimestampMillis()", "public boolean isEmail()", "public String getEmailBody()", "public String getEmailFrom()", "public int getProtocolIdentifier()", "public boolean isReplace()", "public boolean isCphsMwiMessage()", "public boolean isMWIClearMessage()", "public boolean isMWISetMessage()", "public boolean isMwiDontStore()", "public byte[] getUserData()", "public byte[] getPdu()", "public int getStatusOnSim()", "public int getStatusOnIcc()", "public int getIndexOnSim()", "public int getIndexOnIcc()", "public int getStatus()", "public boolean isStatusReportMessage()", "public boolean isReplyPathPresent()", "public int getReceivedEncodingType()", "public boolean is3gpp()", "private static boolean useCdmaFormatForMoSms()", "private static boolean useCdmaFormatForMoSms(int subId)", "private static boolean isCdmaVoice()", "private static boolean isCdmaVoice(int subId)", "public static boolean hasEmsSupport()", "public static boolean shouldAppendPageNumberAsPrefix()", "private static boolean isNoEmsSupportConfigListExisted()", "public String getRecipientAddress()" ],
  "variableNames" : [ "LOG_TAG", "ENCODING_UNKNOWN", "ENCODING_7BIT", "ENCODING_8BIT", "ENCODING_16BIT", "ENCODING_KSC5601", "MAX_USER_DATA_BYTES", "MAX_USER_DATA_BYTES_WITH_HEADER", "MAX_USER_DATA_SEPTETS", "MAX_USER_DATA_SEPTETS_WITH_HEADER", "FORMAT_3GPP", "FORMAT_3GPP2", "mWrappedSmsMessage", "mSubId", "mNoEmsSupportConfigList", "mIsNoEmsSupportConfigListLoaded" ]
}