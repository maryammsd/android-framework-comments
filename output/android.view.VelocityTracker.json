{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/VelocityTracker.java",
  "packageName" : "android.view",
  "className" : "VelocityTracker",
  "comment" : "\n * Helper for tracking the velocity of motion events, for implementing\n * flinging and other such gestures.\n *\n * Use {@link #obtain} to retrieve a new instance of the class when you are going\n * to begin tracking.  Put the motion events you receive into it with\n * {@link #addMovement(MotionEvent)}.  When you want to determine the velocity, call\n * {@link #computeCurrentVelocity(int)} and then call the velocity-getter methods like\n * {@link #getXVelocity(int)}, {@link #getYVelocity(int)}, or {@link #getAxisVelocity(int, int)}\n * to retrieve velocity for different axes and/or pointer IDs.\n ",
  "links" : [ "#addMovement(MotionEvent)", "#getXVelocity(int)", "#getAxisVelocity(int", "#obtain", "#computeCurrentVelocity(int)", "#getYVelocity(int)" ],
  "variables" : [ {
    "name" : "sPool",
    "type" : "SynchronizedPool<VelocityTracker>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVE_POINTER_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Use the default Velocity Tracker Strategy. Different axes may use different default\n     * strategies.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_IMPULSE",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: Impulse.\n     * Physical model of pushing an object.  Quality: VERY GOOD.\n     * Works with duplicate coordinates, unclean finger liftoff.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_LSQ1",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: LSQ1.\n     * 1st order least squares.  Quality: POOR.\n     * Frequently underfits the touch data especially when the finger accelerates\n     * or changes direction.  Often underestimates velocity.  The direction\n     * is overly influenced by historical touch points.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_LSQ2",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: LSQ2.\n     * 2nd order least squares.  Quality: VERY GOOD.\n     * Pretty much ideal, but can be confused by certain kinds of touch data,\n     * particularly if the panel has a tendency to generate delayed,\n     * duplicate or jittery touch coordinates when the finger is released.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_LSQ3",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: LSQ3.\n     * 3rd order least squares.  Quality: UNUSABLE.\n     * Frequently overfits the touch data yielding wildly divergent estimates\n     * of the velocity when the finger is released.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_WLSQ2_DELTA",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: WLSQ2_DELTA.\n     * 2nd order weighted least squares, delta weighting.  Quality: EXPERIMENTAL\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_WLSQ2_CENTRAL",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: WLSQ2_CENTRAL.\n     * 2nd order weighted least squares, central weighting.  Quality: EXPERIMENTAL\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_WLSQ2_RECENT",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: WLSQ2_RECENT.\n     * 2nd order weighted least squares, recent weighting.  Quality: EXPERIMENTAL\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_INT1",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: INT1.\n     * 1st order integrating filter.  Quality: GOOD.\n     * Not as good as 'lsq2' because it cannot estimate acceleration but it is\n     * more tolerant of errors.  Like 'lsq1', this strategy tends to underestimate\n     * the velocity of a fling but this strategy tends to respond to changes in\n     * direction more quickly and accurately.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_INT2",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: INT2.\n     * 2nd order integrating filter.  Quality: EXPERIMENTAL.\n     * For comparison purposes only.  Unlike 'int1' this strategy can compensate\n     * for acceleration but it typically overestimates the effect.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "VELOCITY_TRACKER_STRATEGY_LEGACY",
    "type" : "int",
    "comment" : "\n     * Velocity Tracker Strategy: Legacy.\n     * Legacy velocity tracker algorithm.  Quality: POOR.\n     * For comparison purposes only.  This algorithm is strongly influenced by\n     * old data points, consistently underestimates velocity and takes a very long\n     * time to adjust to changes in direction.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STRATEGIES",
    "type" : "Map<String, Integer>",
    "comment" : "\n     * Velocity Tracker Strategy look up table.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPtr",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStrategy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeInitialize(int strategy)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDispose(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClear(long ptr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddMovement(long ptr, MotionEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeComputeCurrentVelocity(long ptr, int units, float maxVelocity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native float nativeGetVelocity(long ptr, int axis, int id)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsAxisSupported(int axis)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int toStrategyId(String strStrategy)",
    "returnType" : "int",
    "comment" : "\n     * Return a strategy ID from string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static VelocityTracker obtain()",
    "returnType" : "VelocityTracker",
    "comment" : "\n     * Retrieve a new VelocityTracker object to watch the velocity of a\n     * motion.  Be sure to call {@link #recycle} when done.  You should\n     * generally only maintain an active object while tracking a movement,\n     * so that the VelocityTracker can be re-used elsewhere.\n     *\n     * @return Returns a new VelocityTracker.\n     ",
    "links" : [ "#recycle" ]
  }, {
    "name" : "public static VelocityTracker obtain(String strategy)",
    "returnType" : "VelocityTracker",
    "comment" : "\n     * Obtains a velocity tracker with the specified strategy as string.\n     * For testing and comparison purposes only.\n     * @deprecated Use {@link obtain(int strategy)} instead.\n     *\n     * @param strategy The strategy, or null to use the default.\n     * @return The velocity tracker.\n     *\n     * @hide\n     ",
    "links" : [ "obtain(int" ]
  }, {
    "name" : "public static VelocityTracker obtain(int strategy)",
    "returnType" : "VelocityTracker",
    "comment" : "\n     * Obtains a velocity tracker with the specified strategy.\n     *\n     * @param strategy The strategy Id, VELOCITY_TRACKER_STRATEGY_DEFAULT to use the default.\n     * @return The velocity tracker.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Return a VelocityTracker object back to be re-used by others.  You must\n     * not touch the object after calling this function.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStrategyId()",
    "returnType" : "int",
    "comment" : "\n     * Return strategy Id of VelocityTracker object.\n     * @return The velocity tracker strategy Id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAxisSupported(@VelocityTrackableMotionEventAxis int axis)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a given velocity-trackable {@link MotionEvent} axis is supported for velocity\n     * tracking by this {@link VelocityTracker} instance (refer to\n     * {@link #getAxisVelocity(int, int)} for a list of potentially velocity-trackable axes).\n     *\n     * <p>Note that the value returned from this method will stay the same for a given instance, so\n     * a single check for axis support is enough per a {@link VelocityTracker} instance.\n     *\n     * @param axis The axis to check for velocity support.\n     * @return {@code true} if {@code axis} is supported for velocity tracking, or {@code false}\n     * otherwise.\n     * @see #getAxisVelocity(int, int)\n     * @see #getAxisVelocity(int)\n     ",
    "links" : [ "android.view.VelocityTracker", "#getAxisVelocity(int", "android.view.MotionEvent" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Reset the velocity tracker back to its initial state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addMovement(MotionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Add a user's movement to the tracker.  You should call this for the\n     * initial {@link MotionEvent#ACTION_DOWN}, the following\n     * {@link MotionEvent#ACTION_MOVE} events that you receive, and the\n     * final {@link MotionEvent#ACTION_UP}.  You can, however, call this\n     * for whichever events you desire.\n     *\n     * @param event The MotionEvent you received and would like to track.\n     ",
    "links" : [ "android.view.MotionEvent#ACTION_MOVE", "android.view.MotionEvent#ACTION_UP", "android.view.MotionEvent#ACTION_DOWN" ]
  }, {
    "name" : "public void computeCurrentVelocity(int units)",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to invoking {@link #computeCurrentVelocity(int, float)} with a maximum\n     * velocity of Float.MAX_VALUE.\n     *\n     * @see #computeCurrentVelocity(int, float)\n     ",
    "links" : [ "#computeCurrentVelocity(int" ]
  }, {
    "name" : "public void computeCurrentVelocity(int units, float maxVelocity)",
    "returnType" : "void",
    "comment" : "\n     * Compute the current velocity based on the points that have been\n     * collected.  Only call this when you actually want to retrieve velocity\n     * information, as it is relatively expensive.  You can then retrieve\n     * the velocity with {@link #getXVelocity()} and\n     * {@link #getYVelocity()}.\n     *\n     * @param units The units you would like the velocity in.  A value of 1\n     * provides units per millisecond, 1000 provides units per second, etc.\n     * Note that the units referred to here are the same units with which motion is reported. For\n     * axes X and Y, the units are pixels.\n     * @param maxVelocity The maximum velocity that can be computed by this method.\n     * This value must be declared in the same unit as the units parameter. This value\n     * must be positive.\n     ",
    "links" : [ "#getXVelocity()", "#getYVelocity()" ]
  }, {
    "name" : "public float getXVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed X velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     *\n     * @return The previously computed X velocity.\n     ",
    "links" : [ "#computeCurrentVelocity(int)" ]
  }, {
    "name" : "public float getYVelocity()",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed Y velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     *\n     * @return The previously computed Y velocity.\n     ",
    "links" : [ "#computeCurrentVelocity(int)" ]
  }, {
    "name" : "public float getXVelocity(int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed X velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     *\n     * @param id Which pointer's velocity to return.\n     * @return The previously computed X velocity.\n     ",
    "links" : [ "#computeCurrentVelocity(int)" ]
  }, {
    "name" : "public float getYVelocity(int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed Y velocity.  You must first call\n     * {@link #computeCurrentVelocity(int)} before calling this function.\n     *\n     * @param id Which pointer's velocity to return.\n     * @return The previously computed Y velocity.\n     ",
    "links" : [ "#computeCurrentVelocity(int)" ]
  }, {
    "name" : "public float getAxisVelocity(@VelocityTrackableMotionEventAxis int axis, int id)",
    "returnType" : "float",
    "comment" : "\n     * Retrieve the last computed velocity for a given motion axis. You must first call\n     * {@link #computeCurrentVelocity(int)} or {@link #computeCurrentVelocity(int, float)} before\n     * calling this function.\n     *\n     * <p>In addition to {@link MotionEvent#AXIS_X} and {@link MotionEvent#AXIS_Y} which have been\n     * supported since the introduction of this class, the following axes can be candidates for this\n     * method:\n     * <ul>\n     *   <li> {@link MotionEvent#AXIS_SCROLL}: supported starting\n     *        {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}\n     * </ul>\n     *\n     * <p>Before accessing velocities of an axis using this method, check that your\n     * {@link VelocityTracker} instance supports the axis by using {@link #isAxisSupported(int)}.\n     *\n     * @param axis Which axis' velocity to return.\n     * @param id Which pointer's velocity to return.\n     * @return The previously computed velocity for {@code axis} for pointer ID of {@code id} if\n     * {@code axis} is supported for velocity tracking, or 0 if velocity tracking is not supported\n     * for the axis.\n     * @see #isAxisSupported(int)\n     ",
    "links" : [ "android.view.MotionEvent#AXIS_X", "android.view.VelocityTracker", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.view.MotionEvent#AXIS_SCROLL", "android.view.MotionEvent#AXIS_Y", "#computeCurrentVelocity(int", "#computeCurrentVelocity(int)", "#isAxisSupported(int)" ]
  }, {
    "name" : "public float getAxisVelocity(@VelocityTrackableMotionEventAxis int axis)",
    "returnType" : "float",
    "comment" : "\n     * Equivalent to calling {@link #getAxisVelocity(int, int)} for {@code axis} and the active\n     * pointer.\n     *\n     * @param axis Which axis' velocity to return.\n     * @return The previously computed velocity for {@code axis} for the active pointer if\n     * {@code axis} is supported for velocity tracking, or 0 if velocity tracking is not supported\n     * for the axis.\n     * @see #isAxisSupported(int)\n     * @see #getAxisVelocity(int, int)\n     ",
    "links" : [ "#getAxisVelocity(int" ]
  } ],
  "methodNames" : [ "private static native long nativeInitialize(int strategy)", "private static native void nativeDispose(long ptr)", "private static native void nativeClear(long ptr)", "private static native void nativeAddMovement(long ptr, MotionEvent event)", "private static native void nativeComputeCurrentVelocity(long ptr, int units, float maxVelocity)", "private static native float nativeGetVelocity(long ptr, int axis, int id)", "private static native boolean nativeIsAxisSupported(int axis)", "private static int toStrategyId(String strStrategy)", "public static VelocityTracker obtain()", "public static VelocityTracker obtain(String strategy)", "public static VelocityTracker obtain(int strategy)", "public void recycle()", "public int getStrategyId()", "protected void finalize() throws Throwable", "public boolean isAxisSupported(@VelocityTrackableMotionEventAxis int axis)", "public void clear()", "public void addMovement(MotionEvent event)", "public void computeCurrentVelocity(int units)", "public void computeCurrentVelocity(int units, float maxVelocity)", "public float getXVelocity()", "public float getYVelocity()", "public float getXVelocity(int id)", "public float getYVelocity(int id)", "public float getAxisVelocity(@VelocityTrackableMotionEventAxis int axis, int id)", "public float getAxisVelocity(@VelocityTrackableMotionEventAxis int axis)" ],
  "variableNames" : [ "sPool", "ACTIVE_POINTER_ID", "VELOCITY_TRACKER_STRATEGY_DEFAULT", "VELOCITY_TRACKER_STRATEGY_IMPULSE", "VELOCITY_TRACKER_STRATEGY_LSQ1", "VELOCITY_TRACKER_STRATEGY_LSQ2", "VELOCITY_TRACKER_STRATEGY_LSQ3", "VELOCITY_TRACKER_STRATEGY_WLSQ2_DELTA", "VELOCITY_TRACKER_STRATEGY_WLSQ2_CENTRAL", "VELOCITY_TRACKER_STRATEGY_WLSQ2_RECENT", "VELOCITY_TRACKER_STRATEGY_INT1", "VELOCITY_TRACKER_STRATEGY_INT2", "VELOCITY_TRACKER_STRATEGY_LEGACY", "STRATEGIES", "mPtr", "mStrategy" ]
}