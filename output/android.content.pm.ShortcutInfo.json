{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/ShortcutInfo.java",
  "packageName" : "android.content.pm",
  "className" : "ShortcutInfo",
  "comment" : "\n * Represents a shortcut that can be published via {@link ShortcutManager}.\n *\n * @see ShortcutManager\n ",
  "links" : [ "android.content.pm.ShortcutManager" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RES_TYPE_STRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANDROID_PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMPLICIT_RANK_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RANK_CHANGED_BIT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RANK_NOT_SET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DYNAMIC",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_PINNED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_ICON_RES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_ICON_FILE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_KEY_FIELDS_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_MANIFEST",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_DISABLED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_STRINGS_RESOLVED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_IMMUTABLE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ADAPTIVE_BITMAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_RETURNED_BY_SERVICE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_ICON_FILE_PENDING_SAVE",
    "type" : "int",
    "comment" : " @hide When this is set, the bitmap icon is waiting to be saved. ",
    "links" : [ ]
  }, {
    "name" : "FLAG_SHADOW",
    "type" : "int",
    "comment" : "\n     * \"Shadow\" shortcuts are the ones that are restored, but the owner package hasn't been\n     * installed yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LONG_LIVED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CACHED_NOTIFICATIONS",
    "type" : "int",
    "comment" : "\n     * TODO(b/155135057): This is a quick and temporary fix for b/155135890. ShortcutService doesn't\n     *  need to be aware of the outside world. Replace this with a more extensible solution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_HAS_ICON_URI",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CACHED_PEOPLE_TILE",
    "type" : "int",
    "comment" : "\n     * TODO(b/155135057): This is a quick and temporary fix for b/155135890. ShortcutService doesn't\n     *  need to be aware of the outside world. Replace this with a more extensible solution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CACHED_BUBBLES",
    "type" : "int",
    "comment" : "\n     * TODO(b/155135057): This is a quick and temporary fix for b/155135890. ShortcutService doesn't\n     *  need to be aware of the outside world. Replace this with a more extensible solution.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CACHED_ALL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_ICON",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_INTENT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_NON_KEY_INFO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_RES_NAMES",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_PERSON",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_FOR_CREATOR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_FOR_LAUNCHER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_FOR_LAUNCHER_APPROVAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CLONE_REMOVE_FOR_APP_PREDICTION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_NOT_DISABLED",
    "type" : "int",
    "comment" : "\n     * Shortcut is not disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_BY_APP",
    "type" : "int",
    "comment" : "\n     * Shortcut has been disabled by the publisher app with the\n     * {@link ShortcutManager#disableShortcuts(List)} API.\n     ",
    "links" : [ "android.content.pm.ShortcutManager#disableShortcuts(List)" ]
  }, {
    "name" : "DISABLED_REASON_APP_CHANGED",
    "type" : "int",
    "comment" : "\n     * Shortcut has been disabled due to changes to the publisher app. (e.g. a manifest shortcut\n     * no longer exists.)\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Shortcut is disabled for an unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_RESTORE_ISSUE_START",
    "type" : "int",
    "comment" : "\n     * A disabled reason that's equal to or bigger than this is due to backup and restore issue.\n     * A shortcut with such a reason wil be visible to the launcher, but not to the publisher.\n     * ({@link #isVisibleToPublisher()} will be false.)\n     ",
    "links" : [ "#isVisibleToPublisher()" ]
  }, {
    "name" : "DISABLED_REASON_VERSION_LOWER",
    "type" : "int",
    "comment" : "\n     * Shortcut has been restored from the previous device, but the publisher app on the current\n     * device is of a lower version. The shortcut will not be usable until the app is upgraded to\n     * the same version or higher.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_BACKUP_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * Shortcut has not been restored because the publisher app does not support backup and restore.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_SIGNATURE_MISMATCH",
    "type" : "int",
    "comment" : "\n     * Shortcut has not been restored because the publisher app's signature has changed.\n     ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_REASON_OTHER_RESTORE_ISSUE",
    "type" : "int",
    "comment" : "\n     * Shortcut has not been restored for unknown reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ID_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum length of Shortcut ID. IDs will be truncated at this limit.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_LAUNCHER",
    "type" : "int",
    "comment" : "\n     * Indicates system surfaces managed by a launcher app. e.g. Long-Press Menu.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORTCUT_CATEGORY_CONVERSATION",
    "type" : "String",
    "comment" : "\n     * Shortcut category for messaging related actions, such as chat.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivity",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIcon",
    "type" : "Icon",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitleResName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextResName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mText",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledMessageResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledMessageResName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisabledMessage",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCategories",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntents",
    "type" : "Intent[]",
    "comment" : "\n     * Intents *with extras removed*.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIntentPersistableExtrases",
    "type" : "PersistableBundle[]",
    "comment" : "\n     * Extras for the intents.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPersons",
    "type" : "Person[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocusId",
    "type" : "LocusId",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRank",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImplicitRank",
    "type" : "int",
    "comment" : "\n     * Internally used for auto-rank-adjustment.\n     *\n     * RANK_CHANGED_BIT is used to denote that the rank of a shortcut is changing.\n     * The rest of the bits are used to denote the order in which shortcuts are passed to\n     * APIs, which is used to preserve the argument order when ranks are tie.\n     ",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastChangedTimestamp",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " Internal use only.",
    "links" : [ ]
  }, {
    "name" : "mIconResId",
    "type" : "int",
    "comment" : " Internal use only.",
    "links" : [ ]
  }, {
    "name" : "mIconResName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconUri",
    "type" : "String",
    "comment" : " Internal use only.",
    "links" : [ ]
  }, {
    "name" : "mBitmapPath",
    "type" : "String",
    "comment" : " Internal use only.",
    "links" : [ ]
  }, {
    "name" : "mUserId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERSION_CODE_UNKNOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mDisabledReason",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartingThemeResName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludedSurfaces",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCapabilityBindings",
    "type" : "Map<String, Map<String, List<String>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ShortcutInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getDisabledReasonDebugString(@DisabledReason int disabledReason)",
    "returnType" : "String",
    "comment" : "\n     * Return a label for disabled reasons, which are *not* supposed to be shown to the user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisabledReasonForRestoreIssue(Context context, @DisabledReason int disabledReason)",
    "returnType" : "String",
    "comment" : "\n     * Return a label for a disabled reason for shortcuts that are disabled due to a backup and\n     * restore issue. If the reason is not due to backup & restore, then it'll return null.\n     *\n     * This method returns localized, user-facing strings, which will be returned by\n     * {@link #getDisabledMessage()}.\n     *\n     * @hide\n     ",
    "links" : [ "#getDisabledMessage()" ]
  }, {
    "name" : "public static boolean isDisabledForRestoreIssue(@DisabledReason int disabledReason)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void fixUpIntentExtras()",
    "returnType" : "void",
    "comment" : "\n     * Extract extras from {@link #mIntents} and set them to {@link #mIntentPersistableExtrases}\n     * as {@link PersistableBundle}, and remove extras from the original intents.\n     ",
    "links" : [ "#mIntents", "#mIntentPersistableExtrases", "android.os.PersistableBundle" ]
  }, {
    "name" : "private static ArraySet<String> cloneCategories(Set<String> source)",
    "returnType" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Intent[] cloneIntents(Intent[] intents)",
    "returnType" : "Intent[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static PersistableBundle[] clonePersistableBundle(PersistableBundle[] bundle)",
    "returnType" : "PersistableBundle[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Person[] clonePersons(Person[] persons)",
    "returnType" : "Person[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getSafeId(@NonNull String id)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enforceMandatoryFields(boolean forPinned)",
    "returnType" : "void",
    "comment" : "\n     * Throws if any of the mandatory fields is not set.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ShortcutInfo createFromGenericDocument(@NonNull final Context context, @NonNull final GenericDocument document)",
    "returnType" : "ShortcutInfo",
    "comment" : "\n     * Convert a {@link GenericDocument} into a ShortcutInfo.\n     *\n     * @param context Client context\n     * @param document An instance of {@link GenericDocument} that represents the shortcut.\n     ",
    "links" : [ "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public static ShortcutInfo createFromGenericDocument(final int userId, @NonNull final GenericDocument document)",
    "returnType" : "ShortcutInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private CharSequence getResourceString(Resources res, int resId, CharSequence defValue)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load a string resource from the publisher app.\n     *\n     * @param resId resource ID\n     * @param defValue default value to be returned when the specified resource isn't found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resolveResourceStrings(@NonNull Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Load the string resources for the text fields and set them to the actual value fields.\n     * This will set {@link #FLAG_STRINGS_RESOLVED}.\n     *\n     * @param res {@link Resources} for the publisher.  Must have been loaded with\n     * {@link PackageManager#getResourcesForApplication(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getResourcesForApplication(String)", "#FLAG_STRINGS_RESOLVED", "android.content.res.Resources" ]
  }, {
    "name" : "public static String lookUpResourceName(@NonNull Resources res, int resId, boolean withType, @NonNull String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Look up resource name for a given resource ID.\n     *\n     * @return a simple resource name (e.g. \"text_1\") when {@code withType} is false, or with the\n     * type (e.g. \"string/text_1\").\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getResourcePackageName(@NonNull String fullResourceName)",
    "returnType" : "String",
    "comment" : "\n     * Extract the package name from a fully-donated resource name.\n     * e.g. \"com.android.app1:drawable/icon1\" -> \"com.android.app1\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getResourceTypeName(@NonNull String fullResourceName)",
    "returnType" : "String",
    "comment" : "\n     * Extract the type name from a fully-donated resource name.\n     * e.g. \"com.android.app1:drawable/icon1\" -> \"drawable\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getResourceTypeAndEntryName(@NonNull String fullResourceName)",
    "returnType" : "String",
    "comment" : "\n     * Extract the type name + the entry name from a fully-donated resource name.\n     * e.g. \"com.android.app1:drawable/icon1\" -> \"drawable/icon1\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getResourceEntryName(@NonNull String fullResourceName)",
    "returnType" : "String",
    "comment" : "\n     * Extract the entry name from a fully-donated resource name.\n     * e.g. \"com.android.app1:drawable/icon1\" -> \"icon1\"\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lookUpResourceId(@NonNull Resources res, @Nullable String resourceName, @Nullable String resourceType, String packageName)",
    "returnType" : "int",
    "comment" : "\n     * Return the resource ID for a given resource ID.\n     *\n     * Basically its' a wrapper over {@link Resources#getIdentifier(String, String, String)}, except\n     * if {@code resourceName} is an integer then it'll just return its value.  (Which also the\n     * aforementioned method would do internally, but not documented, so doing here explicitly.)\n     *\n     * @param res {@link Resources} for the publisher.  Must have been loaded with\n     * {@link PackageManager#getResourcesForApplication(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getResourcesForApplication(String)", "android.content.res.Resources#getIdentifier(String", "android.content.res.Resources" ]
  }, {
    "name" : "public void lookupAndFillInResourceNames(@NonNull Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Look up resource names from the resource IDs for the icon res and the text fields, and fill\n     * in the resource name fields.\n     *\n     * @param res {@link Resources} for the publisher.  Must have been loaded with\n     * {@link PackageManager#getResourcesForApplication(String)}.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#getResourcesForApplication(String)", "android.content.res.Resources" ]
  }, {
    "name" : "public void lookupAndFillInResourceIds(@NonNull Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Look up resource IDs from the resource names for the icon res and the text fields, and fill\n     * in the resource ID fields.\n     *\n     * This is called when an app is updated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ShortcutInfo clone(@CloneFlags int cloneFlags)",
    "returnType" : "ShortcutInfo",
    "comment" : "\n     * Copy a {@link ShortcutInfo}, optionally removing fields.\n     * @hide\n     ",
    "links" : [ "android.content.pm.ShortcutInfo" ]
  }, {
    "name" : "public void ensureUpdatableWith(ShortcutInfo source, boolean isUpdating)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *\n     * @isUpdating set true if it's \"update\", as opposed to \"replace\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void copyNonNullFieldsFrom(ShortcutInfo source)",
    "returnType" : "void",
    "comment" : "\n     * Copy non-null/zero fields from another {@link ShortcutInfo}.  Only \"public\" information\n     * will be overwritten.  The timestamp will *not* be updated to be consistent with other\n     * setters (and also the clock is not injectable in this file).\n     *\n     * - Flags will not change\n     * - mBitmapPath will not change\n     * - Current time will be set to timestamp\n     *\n     * @throws IllegalStateException if source is not compatible.\n     *\n     * @hide\n     ",
    "links" : [ "android.content.pm.ShortcutInfo" ]
  }, {
    "name" : "public static Icon validateIcon(Icon icon)",
    "returnType" : "Icon",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IllegalArgumentException getInvalidIconException()",
    "returnType" : "IllegalArgumentException",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ID of a shortcut.\n     *\n     * <p>Shortcut IDs are unique within each publisher app and must be stable across\n     * devices so that shortcuts will still be valid when restored on a different device.\n     * See {@link ShortcutManager} for details.\n     ",
    "links" : [ "android.content.pm.ShortcutManager" ]
  }, {
    "name" : "public LocusId getLocusId()",
    "returnType" : "LocusId",
    "comment" : "\n     * Gets the {@link LocusId} associated with this shortcut.\n     *\n     * <p>Used by the device's intelligence services to correlate objects (such as\n     * {@link Notification} and {@link ContentCaptureContext}) that are correlated.\n     ",
    "links" : [ "android.app.Notification", "android.view.contentcapture.ContentCaptureContext", "android.content.LocusId" ]
  }, {
    "name" : "public String getPackage()",
    "returnType" : "String",
    "comment" : "\n     * Return the package name of the publisher app.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getActivity()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the target activity.\n     *\n     * <p>This has nothing to do with the activity that this shortcut will launch.\n     * Launcher apps should show the launcher icon for the returned activity alongside\n     * this shortcut.\n     *\n     * @see Builder#setActivity\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActivity(ComponentName activity)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Icon getIcon()",
    "returnType" : "Icon",
    "comment" : "\n     * Returns the shortcut icon.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getStartingThemeResName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the theme resource name used for the splash screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public int getTitleResId()",
    "returnType" : "int",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText()",
    "returnType" : "CharSequence",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public int getTextResId()",
    "returnType" : "int",
    "comment" : " @hide -- old signature, the internal code still uses it. ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getShortLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the short description of a shortcut.\n     *\n     * @see Builder#setShortLabel(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getShortLabelResourceId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLongLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the long description of a shortcut.\n     *\n     * @see Builder#setLongLabel(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getLabel()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the {@link #getLongLabel()} if it's populated, and if not, the\n     * {@link #getShortLabel()}.\n     * @hide\n     ",
    "links" : [ "#getLongLabel()", "#getShortLabel()" ]
  }, {
    "name" : "public int getLongLabelResourceId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisabledMessage()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Return the message that should be shown when the user attempts to start a shortcut\n     * that is disabled.\n     *\n     * @see Builder#setDisabledMessage(CharSequence)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisabledMessageResourceId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledReason(@DisabledReason int reason)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getDisabledReason()",
    "returnType" : "int",
    "comment" : "\n     * Returns why a shortcut has been disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getCategories()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return the shortcut's categories.\n     *\n     * @see Builder#setCategories(Set)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Returns the intent that is executed when the user selects this shortcut.\n     * If setIntents() was used, then return the last intent in the array.\n     *\n     * <p>Launcher apps <b>cannot</b> see the intent.  If a {@link ShortcutInfo} is\n     * obtained via {@link LauncherApps}, then this method will always return null.\n     * Launchers can only start a shortcut intent with {@link LauncherApps#startShortcut}.\n     *\n     * @see Builder#setIntent(Intent)\n     ",
    "links" : [ "android.content.pm.LauncherApps", "android.content.pm.ShortcutInfo", "android.content.pm.LauncherApps#startShortcut" ]
  }, {
    "name" : "public Intent[] getIntents()",
    "returnType" : "Intent[]",
    "comment" : "\n     * Return the intent set with {@link Builder#setIntents(Intent[])}.\n     *\n     * <p>Launcher apps <b>cannot</b> see the intents.  If a {@link ShortcutInfo} is\n     * obtained via {@link LauncherApps}, then this method will always return null.\n     * Launchers can only start a shortcut intent with {@link LauncherApps#startShortcut}.\n     *\n     * @see Builder#setIntents(Intent[])\n     ",
    "links" : [ "android.content.pm.LauncherApps", "android.app.TaskStackBuilder#setIntents(Intent", "android.content.pm.ShortcutInfo", "android.content.pm.LauncherApps#startShortcut" ]
  }, {
    "name" : "public Intent[] getIntentsNoExtras()",
    "returnType" : "Intent[]",
    "comment" : "\n     * Return \"raw\" intents, which is the original intents without the extras.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Person[] getPersons()",
    "returnType" : "Person[]",
    "comment" : "\n     * Return the Persons set with {@link Builder#setPersons(Person[])}.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.TaskStackBuilder#setPersons(Person" ]
  }, {
    "name" : "public PersistableBundle[] getIntentPersistableExtrases()",
    "returnType" : "PersistableBundle[]",
    "comment" : "\n     * The extras in the intents.  We convert extras into {@link PersistableBundle} so we can\n     * persist them.\n     * @hide\n     ",
    "links" : [ "android.os.PersistableBundle" ]
  }, {
    "name" : "public int getRank()",
    "returnType" : "int",
    "comment" : "\n     * \"Rank\" of a shortcut, which is a non-negative, sequential value that's unique for each\n     * {@link #getActivity} for each of the two types of shortcuts (static and dynamic).\n     *\n     * <p><em>Floating shortcuts</em>, or shortcuts that are neither static nor dynamic, will all\n     * have rank 0, because they aren't sorted.\n     *\n     * See the {@link ShortcutManager}'s class javadoc for details.\n     *\n     * @see Builder#setRank(int)\n     ",
    "links" : [ "#getActivity", "android.content.pm.ShortcutManager" ]
  }, {
    "name" : "public boolean hasRank()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRank(int rank)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void clearImplicitRankAndRankChangedFlag()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setImplicitRank(int rank)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getImplicitRank()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRankChanged()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRankChanged()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PersistableBundle getExtras()",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Extras that the app can set for any purpose.\n     *\n     * @see Builder#setExtras(PersistableBundle)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUserId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UserHandle getUserHandle()",
    "returnType" : "UserHandle",
    "comment" : "\n     * {@link UserHandle} on which the publisher created this shortcut.\n     ",
    "links" : [ "android.os.UserHandle" ]
  }, {
    "name" : "public long getLastChangedTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Last time when any of the fields was updated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void replaceFlags(@ShortcutFlags int flags)",
    "returnType" : "void",
    "comment" : " @hide",
    "links" : [ ]
  }, {
    "name" : "public void addFlags(@ShortcutFlags int flags)",
    "returnType" : "void",
    "comment" : " @hide",
    "links" : [ ]
  }, {
    "name" : "public void clearFlags(@ShortcutFlags int flags)",
    "returnType" : "void",
    "comment" : " @hide",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFlags(@ShortcutFlags int flags)",
    "returnType" : "boolean",
    "comment" : " @hide",
    "links" : [ ]
  }, {
    "name" : "public boolean isReturnedByServer()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setReturnedByServer()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLongLived()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLongLived()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCached(@ShortcutFlags int cacheFlag)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCached()",
    "returnType" : "boolean",
    "comment" : " Return whether a shortcut is cached. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDynamic()",
    "returnType" : "boolean",
    "comment" : " Return whether a shortcut is dynamic. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPinned()",
    "returnType" : "boolean",
    "comment" : " Return whether a shortcut is pinned. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclaredInManifest()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut is static; that is, whether a shortcut is\n     * published from AndroidManifest.xml.  If {@code true}, the shortcut is\n     * also {@link #isImmutable()}.\n     *\n     * <p>When an app is upgraded and a shortcut is no longer published from AndroidManifest.xml,\n     * this will be set to {@code false}.  If the shortcut is not pinned, then it'll disappear.\n     * However, if it's pinned, it will still be visible, {@link #isEnabled()} will be\n     * {@code false} and {@link #isImmutable()} will be {@code true}.\n     ",
    "links" : [ "#isImmutable()", "#isEnabled()" ]
  }, {
    "name" : "public boolean isManifestShortcut()",
    "returnType" : "boolean",
    "comment" : " @hide kept for unit tests ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFloating()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if pinned or cached, but neither static nor dynamic.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOriginallyFromManifest()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDynamicVisible()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPinnedVisible()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isManifestVisible()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNonManifestVisible()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImmutable()",
    "returnType" : "boolean",
    "comment" : "\n     * Return if a shortcut is immutable, in which case it cannot be modified with any of\n     * {@link ShortcutManager} APIs.\n     *\n     * <p>All static shortcuts are immutable.  When a static shortcut is pinned and is then\n     * disabled because it doesn't appear in AndroidManifest.xml for a newer version of the\n     * app, {@link #isDeclaredInManifest()} returns {@code false}, but the shortcut\n     * is still immutable.\n     *\n     * <p>All shortcuts originally published via the {@link ShortcutManager} APIs\n     * are all mutable.\n     ",
    "links" : [ "#isDeclaredInManifest()", "android.content.pm.ShortcutManager" ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code false} if a shortcut is disabled with\n     * {@link ShortcutManager#disableShortcuts}.\n     ",
    "links" : [ "android.content.pm.ShortcutManager#disableShortcuts" ]
  }, {
    "name" : "public boolean isAlive()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean usesQuota()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIconResource()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut's icon is a resource in the owning package.\n     *\n     * @hide internal/unit tests only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIconUri()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut's icon is provided via a URI.\n     *\n     * @hide internal/unit tests only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasStringResources()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAnyResources()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasIconFile()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut's icon is stored as a file.\n     *\n     * @hide internal/unit tests only\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAdaptiveBitmap()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut's icon is adaptive bitmap following design guideline\n     * defined in {@link android.graphics.drawable.AdaptiveIconDrawable}.\n     *\n     * @hide internal/unit tests only\n     ",
    "links" : [ "android.graphics.drawable.AdaptiveIconDrawable" ]
  }, {
    "name" : "public boolean isIconPendingSave()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIconPendingSave()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void clearIconPendingSave()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVisibleToPublisher()",
    "returnType" : "boolean",
    "comment" : "\n     * When the system wasn't able to restore a shortcut, it'll still be registered to the system\n     * but disabled, and such shortcuts will not be visible to the publisher. They're still visible\n     * to launchers though.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasKeyFieldsOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether a shortcut only contains \"key\" information only or not.  If true, only the\n     * following fields are available.\n     * <ul>\n     *     <li>{@link #getId()}\n     *     <li>{@link #getPackage()}\n     *     <li>{@link #getActivity()}\n     *     <li>{@link #getLastChangedTimestamp()}\n     *     <li>{@link #isDynamic()}\n     *     <li>{@link #isPinned()}\n     *     <li>{@link #isDeclaredInManifest()}\n     *     <li>{@link #isImmutable()}\n     *     <li>{@link #isEnabled()}\n     *     <li>{@link #getUserHandle()}\n     * </ul>\n     *\n     * <p>For performance reasons, shortcuts passed to\n     * {@link LauncherApps.Callback#onShortcutsChanged(String, List, UserHandle)} as well as those\n     * returned from {@link LauncherApps#getShortcuts(ShortcutQuery, UserHandle)}\n     * while using the {@link ShortcutQuery#FLAG_GET_KEY_FIELDS_ONLY} option contain only key\n     * information.\n     ",
    "links" : [ "#isImmutable()", "#getLastChangedTimestamp()", "android.content.pm.LauncherApps.ShortcutQuery#FLAG_GET_KEY_FIELDS_ONLY", "#getId()", "#isDynamic()", "#isPinned()", "#getActivity()", "#getPackage()", "#isEnabled()", "LauncherApps.Callback#onShortcutsChanged(String", "#getUserHandle()", "android.content.pm.LauncherApps#getShortcuts(ShortcutQuery", "#isDeclaredInManifest()" ]
  }, {
    "name" : "public boolean hasStringResourcesResolved()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateTimestamp()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTimestamp(long value)",
    "returnType" : "void",
    "comment" : " VisibleForTesting",
    "links" : [ ]
  }, {
    "name" : "public void clearIcon()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIconResourceId(int iconResourceId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getIconResourceId()",
    "returnType" : "int",
    "comment" : "\n     * Get the resource ID for the icon, valid only when {@link #hasIconResource()} } is true.\n     * @hide internal / tests only.\n     ",
    "links" : [ "#hasIconResource()" ]
  }, {
    "name" : "public void setIconUri(String iconUri)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getIconUri()",
    "returnType" : "String",
    "comment" : "\n     * Get the Uri for the icon, valid only when {@link #hasIconUri()} } is true.\n     * @hide internal / tests only.\n     ",
    "links" : [ "#hasIconUri()" ]
  }, {
    "name" : "public String getBitmapPath()",
    "returnType" : "String",
    "comment" : "\n     * Bitmap path.  Note this will be null even if {@link #hasIconFile()} is set when the save\n     * is pending.  Use {@link #isIconPendingSave()} to check it.\n     *\n     * @hide\n     ",
    "links" : [ "#hasIconFile()", "#isIconPendingSave()" ]
  }, {
    "name" : "public void setBitmapPath(String bitmapPath)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledMessageResId(int disabledMessageResId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledMessage(String disabledMessage)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getTitleResName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTitleResName(String titleResName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getTextResName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setTextResName(String textResName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getDisabledMessageResName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisabledMessageResName(String disabledMessageResName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getIconResName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIconResName(String iconResName)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setIntents(Intent[] intents) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Replaces the intent.\n     *\n     * @throws IllegalArgumentException when extra is not compatible with {@link PersistableBundle}.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.PersistableBundle" ]
  }, {
    "name" : "public static Intent setIntentExtras(Intent intent, PersistableBundle extras)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setCategories(Set<String> categories)",
    "returnType" : "void",
    "comment" : "\n     * Replaces the categories.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExcludedFromSurfaces(@Surface int surface)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the shortcut is excluded from specified surface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getExcludedFromSurfaces()",
    "returnType" : "int",
    "comment" : "\n     * Returns a bitmask of all surfaces this shortcut is excluded from.\n     *\n     * @see ShortcutInfo.Builder#setExcludedFromSurfaces(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Map<String, List<String>>> getCapabilityBindingsInternal()",
    "returnType" : "Map<String, Map<String, List<String>>>",
    "comment" : "\n     * Returns an immutable copy of the capability bindings using internal data structure.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<String, Map<String, List<String>>> cloneCapabilityBindings(@Nullable final Map<String, Map<String, List<String>>> orig)",
    "returnType" : "Map<String, Map<String, List<String>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Capability> getCapabilities()",
    "returnType" : "List<Capability>",
    "comment" : "\n     * Return a list of {@link Capability} associated with the shortcut.\n     ",
    "links" : [ "android.content.pm.Capability" ]
  }, {
    "name" : "public List<CapabilityParams> getCapabilityParams(@NonNull final Capability capability)",
    "returnType" : "List<CapabilityParams>",
    "comment" : "\n     *  Returns the {@link CapabilityParams} in associated with given capability.\n     *\n     *  @param capability {@link Capability} associated with the shortcut.\n     ",
    "links" : [ "android.content.pm.CapabilityParams", "android.content.pm.Capability" ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation, intended for logging.  Some fields will be retracted.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toInsecureString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toDumpString(String indent)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private void addIndentOrComma(StringBuilder sb, String indent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String toStringInner(boolean secure, boolean includeInternalData, String indent)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getDisabledReasonDebugString(@DisabledReason int disabledReason)", "public static String getDisabledReasonForRestoreIssue(Context context, @DisabledReason int disabledReason)", "public static boolean isDisabledForRestoreIssue(@DisabledReason int disabledReason)", "private void fixUpIntentExtras()", "private static ArraySet<String> cloneCategories(Set<String> source)", "private static Intent[] cloneIntents(Intent[] intents)", "private static PersistableBundle[] clonePersistableBundle(PersistableBundle[] bundle)", "private static Person[] clonePersons(Person[] persons)", "private static String getSafeId(@NonNull String id)", "public void enforceMandatoryFields(boolean forPinned)", "public static ShortcutInfo createFromGenericDocument(@NonNull final Context context, @NonNull final GenericDocument document)", "public static ShortcutInfo createFromGenericDocument(final int userId, @NonNull final GenericDocument document)", "private CharSequence getResourceString(Resources res, int resId, CharSequence defValue)", "public void resolveResourceStrings(@NonNull Resources res)", "public static String lookUpResourceName(@NonNull Resources res, int resId, boolean withType, @NonNull String packageName)", "public static String getResourcePackageName(@NonNull String fullResourceName)", "public static String getResourceTypeName(@NonNull String fullResourceName)", "public static String getResourceTypeAndEntryName(@NonNull String fullResourceName)", "public static String getResourceEntryName(@NonNull String fullResourceName)", "public static int lookUpResourceId(@NonNull Resources res, @Nullable String resourceName, @Nullable String resourceType, String packageName)", "public void lookupAndFillInResourceNames(@NonNull Resources res)", "public void lookupAndFillInResourceIds(@NonNull Resources res)", "public ShortcutInfo clone(@CloneFlags int cloneFlags)", "public void ensureUpdatableWith(ShortcutInfo source, boolean isUpdating)", "public void copyNonNullFieldsFrom(ShortcutInfo source)", "public static Icon validateIcon(Icon icon)", "public static IllegalArgumentException getInvalidIconException()", "public String getId()", "public LocusId getLocusId()", "public String getPackage()", "public ComponentName getActivity()", "public void setActivity(ComponentName activity)", "public Icon getIcon()", "public String getStartingThemeResName()", "public CharSequence getTitle()", "public int getTitleResId()", "public CharSequence getText()", "public int getTextResId()", "public CharSequence getShortLabel()", "public int getShortLabelResourceId()", "public CharSequence getLongLabel()", "public CharSequence getLabel()", "public int getLongLabelResourceId()", "public CharSequence getDisabledMessage()", "public int getDisabledMessageResourceId()", "public void setDisabledReason(@DisabledReason int reason)", "public int getDisabledReason()", "public Set<String> getCategories()", "public Intent getIntent()", "public Intent[] getIntents()", "public Intent[] getIntentsNoExtras()", "public Person[] getPersons()", "public PersistableBundle[] getIntentPersistableExtrases()", "public int getRank()", "public boolean hasRank()", "public void setRank(int rank)", "public void clearImplicitRankAndRankChangedFlag()", "public void setImplicitRank(int rank)", "public int getImplicitRank()", "public void setRankChanged()", "public boolean isRankChanged()", "public PersistableBundle getExtras()", "public int getUserId()", "public UserHandle getUserHandle()", "public long getLastChangedTimestamp()", "public int getFlags()", "public void replaceFlags(@ShortcutFlags int flags)", "public void addFlags(@ShortcutFlags int flags)", "public void clearFlags(@ShortcutFlags int flags)", "public boolean hasFlags(@ShortcutFlags int flags)", "public boolean isReturnedByServer()", "public void setReturnedByServer()", "public boolean isLongLived()", "public void setLongLived()", "public void setCached(@ShortcutFlags int cacheFlag)", "public boolean isCached()", "public boolean isDynamic()", "public boolean isPinned()", "public boolean isDeclaredInManifest()", "public boolean isManifestShortcut()", "public boolean isFloating()", "public boolean isOriginallyFromManifest()", "public boolean isDynamicVisible()", "public boolean isPinnedVisible()", "public boolean isManifestVisible()", "public boolean isNonManifestVisible()", "public boolean isImmutable()", "public boolean isEnabled()", "public boolean isAlive()", "public boolean usesQuota()", "public boolean hasIconResource()", "public boolean hasIconUri()", "public boolean hasStringResources()", "public boolean hasAnyResources()", "public boolean hasIconFile()", "public boolean hasAdaptiveBitmap()", "public boolean isIconPendingSave()", "public void setIconPendingSave()", "public void clearIconPendingSave()", "public boolean isVisibleToPublisher()", "public boolean hasKeyFieldsOnly()", "public boolean hasStringResourcesResolved()", "public void updateTimestamp()", "public void setTimestamp(long value)", "public void clearIcon()", "public void setIconResourceId(int iconResourceId)", "public int getIconResourceId()", "public void setIconUri(String iconUri)", "public String getIconUri()", "public String getBitmapPath()", "public void setBitmapPath(String bitmapPath)", "public void setDisabledMessageResId(int disabledMessageResId)", "public void setDisabledMessage(String disabledMessage)", "public String getTitleResName()", "public void setTitleResName(String titleResName)", "public String getTextResName()", "public void setTextResName(String textResName)", "public String getDisabledMessageResName()", "public void setDisabledMessageResName(String disabledMessageResName)", "public String getIconResName()", "public void setIconResName(String iconResName)", "public void setIntents(Intent[] intents) throws IllegalArgumentException", "public static Intent setIntentExtras(Intent intent, PersistableBundle extras)", "public void setCategories(Set<String> categories)", "public boolean isExcludedFromSurfaces(@Surface int surface)", "public int getExcludedFromSurfaces()", "public Map<String, Map<String, List<String>>> getCapabilityBindingsInternal()", "private static Map<String, Map<String, List<String>>> cloneCapabilityBindings(@Nullable final Map<String, Map<String, List<String>>> orig)", "public List<Capability> getCapabilities()", "public List<CapabilityParams> getCapabilityParams(@NonNull final Capability capability)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public String toString()", "public String toInsecureString()", "public String toDumpString(String indent)", "private void addIndentOrComma(StringBuilder sb, String indent)", "private String toStringInner(boolean secure, boolean includeInternalData, String indent)" ],
  "variableNames" : [ "TAG", "RES_TYPE_STRING", "ANDROID_PACKAGE_NAME", "IMPLICIT_RANK_MASK", "RANK_CHANGED_BIT", "RANK_NOT_SET", "FLAG_DYNAMIC", "FLAG_PINNED", "FLAG_HAS_ICON_RES", "FLAG_HAS_ICON_FILE", "FLAG_KEY_FIELDS_ONLY", "FLAG_MANIFEST", "FLAG_DISABLED", "FLAG_STRINGS_RESOLVED", "FLAG_IMMUTABLE", "FLAG_ADAPTIVE_BITMAP", "FLAG_RETURNED_BY_SERVICE", "FLAG_ICON_FILE_PENDING_SAVE", "FLAG_SHADOW", "FLAG_LONG_LIVED", "FLAG_CACHED_NOTIFICATIONS", "FLAG_HAS_ICON_URI", "FLAG_CACHED_PEOPLE_TILE", "FLAG_CACHED_BUBBLES", "FLAG_CACHED_ALL", "CLONE_REMOVE_ICON", "CLONE_REMOVE_INTENT", "CLONE_REMOVE_NON_KEY_INFO", "CLONE_REMOVE_RES_NAMES", "CLONE_REMOVE_PERSON", "CLONE_REMOVE_FOR_CREATOR", "CLONE_REMOVE_FOR_LAUNCHER", "CLONE_REMOVE_FOR_LAUNCHER_APPROVAL", "CLONE_REMOVE_FOR_APP_PREDICTION", "DISABLED_REASON_NOT_DISABLED", "DISABLED_REASON_BY_APP", "DISABLED_REASON_APP_CHANGED", "DISABLED_REASON_UNKNOWN", "DISABLED_REASON_RESTORE_ISSUE_START", "DISABLED_REASON_VERSION_LOWER", "DISABLED_REASON_BACKUP_NOT_SUPPORTED", "DISABLED_REASON_SIGNATURE_MISMATCH", "DISABLED_REASON_OTHER_RESTORE_ISSUE", "MAX_ID_LENGTH", "SURFACE_LAUNCHER", "SHORTCUT_CATEGORY_CONVERSATION", "mId", "mPackageName", "mActivity", "mIcon", "mTitleResId", "mTitleResName", "mTitle", "mTextResId", "mTextResName", "mText", "mDisabledMessageResId", "mDisabledMessageResName", "mDisabledMessage", "mCategories", "mIntents", "mIntentPersistableExtrases", "mPersons", "mLocusId", "mRank", "mImplicitRank", "mExtras", "mLastChangedTimestamp", "mFlags", "mIconResId", "mIconResName", "mIconUri", "mBitmapPath", "mUserId", "VERSION_CODE_UNKNOWN", "mDisabledReason", "mStartingThemeResName", "mExcludedSurfaces", "mCapabilityBindings", "CREATOR" ]
}