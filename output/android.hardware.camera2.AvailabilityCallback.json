{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraManager.java",
  "packageName" : "android.hardware.camera2",
  "className" : "AvailabilityCallback",
  "comment" : "\n     * A callback for camera devices becoming available or unavailable to open.\n     *\n     * <p>Cameras become available when they are no longer in use, or when a new\n     * removable camera is connected. They become unavailable when some\n     * application or service starts using a camera, or when a removable camera\n     * is disconnected.</p>\n     *\n     * <p>Extend this callback and pass an instance of the subclass to\n     * {@link CameraManager#registerAvailabilityCallback} to be notified of such availability\n     * changes.</p>\n     *\n     * @see #registerAvailabilityCallback\n     ",
  "links" : [ "android.hardware.camera2.CameraManager#registerAvailabilityCallback" ],
  "variables" : [ {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDevicePolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCameraAvailable(@NonNull String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * A new camera has become available to use.\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param cameraId The unique identifier of the new camera.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCameraUnavailable(@NonNull String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * A previously-available camera has become unavailable for use.\n         *\n         * <p>If an application had an active CameraDevice instance for the\n         * now-disconnected camera, that application will receive a\n         * {@link CameraDevice.StateCallback#onDisconnected disconnection error}.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param cameraId The unique identifier of the disconnected camera.\n         ",
    "links" : [ "CameraDevice.StateCallback#onDisconnected" ]
  }, {
    "name" : "public void onCameraAccessPrioritiesChanged()",
    "returnType" : "void",
    "comment" : "\n         * Called whenever camera access priorities change.\n         *\n         * <p>Notification that camera access priorities have changed and the camera may\n         * now be openable. An application that was previously denied camera access due to\n         * a higher-priority user already using the camera, or that was disconnected from an\n         * active camera session due to a higher-priority user trying to open the camera,\n         * should try to open the camera again if it still wants to use it.  Note that\n         * multiple applications may receive this callback at the same time, and only one of\n         * them will succeed in opening the camera in practice, depending on exact access\n         * priority levels and timing. This method is useful in cases where multiple\n         * applications may be in the resumed state at the same time, and the user switches\n         * focus between them, or if the current camera-using application moves between\n         * full-screen and Picture-in-Picture (PiP) states. In such cases, the camera\n         * available/unavailable callbacks will not be invoked, but another application may\n         * now have higher priority for camera access than the current camera-using\n         * application.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onPhysicalCameraAvailable(@NonNull String cameraId, @NonNull String physicalCameraId)",
    "returnType" : "void",
    "comment" : "\n         * A physical camera has become available for use again.\n         *\n         * <p>By default, all of the physical cameras of a logical multi-camera are\n         * available, so {@link #onPhysicalCameraAvailable} is not called for any of the physical\n         * cameras of a logical multi-camera, when {@link #onCameraAvailable} for the logical\n         * multi-camera is invoked. However, if some specific physical cameras are unavailable\n         * to begin with, {@link #onPhysicalCameraUnavailable} may be invoked after\n         * {@link #onCameraAvailable}.</p>\n         *\n         * <p>If {@link android.content.pm.ApplicationInfo#targetSdkVersion targetSdkVersion}\n         * &lt; {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, opening a logical camera\n         * disables the {@link #onPhysicalCameraAvailable} and {@link #onPhysicalCameraUnavailable}\n         * callbacks for its physical cameras. For example, if app A opens the camera device:</p>\n         *\n         * <ul>\n         *\n         * <li>All apps subscribing to ActivityCallback get {@link #onCameraUnavailable}.</li>\n         *\n         * <li>No app (including app A) subscribing to ActivityCallback gets\n         * {@link #onPhysicalCameraAvailable} or {@link #onPhysicalCameraUnavailable}, because\n         * the logical camera is unavailable (some app is using it).</li>\n         *\n         * </ul>\n         *\n         * <p>If {@link android.content.pm.ApplicationInfo#targetSdkVersion targetSdkVersion}\n         * &ge; {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}:</p>\n         *\n         * <ul>\n         *\n         * <li>A physical camera status change will trigger {@link #onPhysicalCameraAvailable}\n         * or {@link #onPhysicalCameraUnavailable} even after the logical camera becomes\n         * unavailable. A {@link #onCameraUnavailable} call for a logical camera doesn't reset the\n         * physical cameras' availability status. This makes it possible for an application opening\n         * the logical camera device to know which physical camera becomes unavailable or available\n         * to use.</li>\n         *\n         * <li>Similar to {@link android.os.Build.VERSION_CODES#TIRAMISU Android 13} and earlier,\n         * the logical camera's {@link #onCameraAvailable} callback implies all of its physical\n         * cameras' status become available. {@link #onPhysicalCameraUnavailable} will be called\n         * for any unavailable physical cameras upon the logical camera becoming available.</li>\n         *\n         * </ul>\n         *\n         * <p>Given the pipeline nature of the camera capture through {@link\n         * android.hardware.camera2.CaptureRequest}, there may be frame drops if the application\n         * requests images from a physical camera of a logical multi-camera and that physical camera\n         * becomes unavailable. The application should stop requesting directly from an unavailable\n         * physical camera as soon as {@link #onPhysicalCameraUnavailable} is received, and also be\n         * ready to robustly handle frame drop errors for requests targeting physical cameras,\n         * since those errors may arrive before the unavailability callback.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param cameraId The unique identifier of the logical multi-camera.\n         * @param physicalCameraId The unique identifier of the physical camera.\n         *\n         * @see #onCameraAvailable\n         * @see #onPhysicalCameraUnavailable\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "#onPhysicalCameraUnavailable", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#onPhysicalCameraAvailable", "android.content.pm.ApplicationInfo#targetSdkVersion", "#onCameraUnavailable", "#onCameraAvailable", "android.hardware.camera2.CaptureRequest" ]
  }, {
    "name" : "public void onPhysicalCameraUnavailable(@NonNull String cameraId, @NonNull String physicalCameraId)",
    "returnType" : "void",
    "comment" : "\n         * A previously-available physical camera has become unavailable for use.\n         *\n         * <p>By default, all of the physical cameras of a logical multi-camera are\n         * unavailable if the logical camera itself is unavailable.\n         * No availability callbacks will be called for any of the physical\n         * cameras of its parent logical multi-camera, when {@link #onCameraUnavailable} for\n         * the logical multi-camera is invoked.</p>\n         *\n         * <p>If {@link android.content.pm.ApplicationInfo#targetSdkVersion targetSdkVersion}\n         * &lt; {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, opening a logical camera\n         * disables the {@link #onPhysicalCameraAvailable} and {@link #onPhysicalCameraUnavailable}\n         * callbacks for its physical cameras. For example, if app A opens the camera device:</p>\n         *\n         * <ul>\n         *\n         * <li>All apps subscribing to ActivityCallback get {@link #onCameraUnavailable}.</li>\n         *\n         * <li>No app (including app A) subscribing to ActivityCallback gets\n         * {@link #onPhysicalCameraAvailable} or {@link #onPhysicalCameraUnavailable}, because\n         * the logical camera is unavailable (some app is using it).</li>\n         *\n         * </ul>\n         *\n         * <p>If {@link android.content.pm.ApplicationInfo#targetSdkVersion targetSdkVersion}\n         * &ge; {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}:</p>\n         *\n         * <ul>\n         *\n         * <li>A physical camera status change will trigger {@link #onPhysicalCameraAvailable}\n         * or {@link #onPhysicalCameraUnavailable} even after the logical camera becomes\n         * unavailable. A {@link #onCameraUnavailable} call for a logical camera doesn't reset the\n         * physical cameras' availability status. This makes it possible for an application opening\n         * the logical camera device to know which physical camera becomes unavailable or available\n         * to use.</li>\n         *\n         * <li>Similar to {@link android.os.Build.VERSION_CODES#TIRAMISU Android 13} and earlier,\n         * the logical camera's {@link #onCameraAvailable} callback implies all of its physical\n         * cameras' status become available. {@link #onPhysicalCameraUnavailable} will be called\n         * for any unavailable physical cameras upon the logical camera becoming available.</li>\n         *\n         * </ul>\n         *\n         * <p>Given the pipeline nature of the camera capture through {@link\n         * android.hardware.camera2.CaptureRequest}, there may be frame drops if the application\n         * requests images from a physical camera of a logical multi-camera and that physical camera\n         * becomes unavailable. The application should stop requesting directly from an unavailable\n         * physical camera as soon as {@link #onPhysicalCameraUnavailable} is received, and also be\n         * ready to robustly handle frame drop errors for requests targeting physical cameras,\n         * since those errors may arrive before the unavailability callback.</p>\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *\n         * @param cameraId The unique identifier of the logical multi-camera.\n         * @param physicalCameraId The unique identifier of the physical camera.\n         *\n         * @see #onCameraAvailable\n         * @see #onPhysicalCameraAvailable\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#onPhysicalCameraUnavailable", "#onPhysicalCameraAvailable", "#onCameraUnavailable", "android.content.pm.ApplicationInfo#targetSdkVersion", "#onCameraAvailable", "android.hardware.camera2.CaptureRequest" ]
  }, {
    "name" : "public void onCameraOpened(@NonNull String cameraId, @NonNull String packageId)",
    "returnType" : "void",
    "comment" : "\n         * A camera device has been opened by an application.\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *    android.Manifest.permission.CAMERA_OPEN_CLOSE_LISTENER is required to receive this\n         *    callback\n         * @param cameraId The unique identifier of the camera opened.\n         * @param packageId The package Id of the application opening the camera.\n         *\n         * @see #onCameraClosed\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onCameraClosed(@NonNull String cameraId)",
    "returnType" : "void",
    "comment" : "\n         * A previously-opened camera has been closed.\n         *\n         * <p>The default implementation of this method does nothing.</p>\n         *    android.Manifest.permission.CAMERA_OPEN_CLOSE_LISTENER is required to receive this\n         *    callback.\n         * @param cameraId The unique identifier of the closed camera.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onCameraAvailable(@NonNull String cameraId)", "public void onCameraUnavailable(@NonNull String cameraId)", "public void onCameraAccessPrioritiesChanged()", "public void onPhysicalCameraAvailable(@NonNull String cameraId, @NonNull String physicalCameraId)", "public void onPhysicalCameraUnavailable(@NonNull String cameraId, @NonNull String physicalCameraId)", "public void onCameraOpened(@NonNull String cameraId, @NonNull String packageId)", "public void onCameraClosed(@NonNull String cameraId)" ],
  "variableNames" : [ "mDeviceId", "mDevicePolicy" ]
}