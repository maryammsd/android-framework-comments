{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/ipsec/ike/IkeSessionCallback.java",
  "packageName" : "android.net.ipsec.ike",
  "className" : "IkeSessionCallback",
  "comment" : " implementation.",
  "links" : [ ],
  "variables" : [ {
    "name" : "LIVENESS_STATUS_ON_DEMAND_STARTED",
    "type" : "int",
    "comment" : "\n     * A new on-demand liveness check has started. Called when a liveness check begins with a new\n     * on-demand task.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_STATUS_ON_DEMAND_ONGOING",
    "type" : "int",
    "comment" : "\n     * A new on-demand liveness check is running. Called when a liveness check request is already\n     * running in an on-demand task.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_STATUS_BACKGROUND_STARTED",
    "type" : "int",
    "comment" : "\n     * A new on-demand liveness check has started. Called when a liveness check begins in background\n     * with joining an existing running task.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_STATUS_BACKGROUND_ONGOING",
    "type" : "int",
    "comment" : "\n     * A background liveness check is running. Called when a liveness check request is already\n     * running in background.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Success status. Called when the peer's liveness is proven.\n     *\n     * <p>Note that this status is a result status when the peer is proven as alive, regardless of\n     * whether it is started in on-demand or in background.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LIVENESS_STATUS_FAILURE",
    "type" : "int",
    "comment" : "\n     * Failure status. Called when the IKE message retransmission times out.\n     *\n     * <p>This failure status is called when retransmission timeouts have expired. The IkeSession\n     * will be closed immediately by calling {@link IkeSessionCallback#onClosedWithException} with\n     * {@link android.net.ipsec.ike.exceptions.IkeTimeoutException} in the {@link\n     * IkeException#getCause()}.\n     *\n     * <p>Note that this status is a result status when the peer is determined as dead alive,\n     * regardless of whether it is started in on-demand or in background.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSessionCallback#onClosedWithException", "android.net.ipsec.ike.exceptions.IkeTimeoutException", "android.net.ipsec.ike.exceptions.IkeException#getCause()" ]
  } ],
  "methods" : [ {
    "name" : " void onOpened(@NonNull IkeSessionConfiguration sessionConfiguration)",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link IkeSession} setup succeeds.\n     *\n     * <p>This method does not indicate the first Child Session has been setup. Caller MUST refer to\n     * the corresponding {@link ChildSessionCallback} for the Child Session setup result.\n     *\n     * @param sessionConfiguration the configuration information of {@link IkeSession} negotiated\n     *     during IKE setup.\n     ",
    "links" : [ "android.net.ipsec.ike.ChildSessionCallback", "android.net.ipsec.ike.IkeSession" ]
  }, {
    "name" : " void onClosed()",
    "returnType" : "void",
    "comment" : "\n     * Called when the {@link IkeSession} is closed.\n     *\n     * <p>When the closure is caused by a local, fatal error, {@link\n     * #onClosedWithException(IkeException)} will be fired instead of this method.\n     ",
    "links" : [ "#onClosedWithException(IkeException)", "android.net.ipsec.ike.IkeSession" ]
  }, {
    "name" : " void onClosedExceptionally(@NonNull IkeException exception)",
    "returnType" : "void",
    "comment" : "\n     * Called if {@link IkeSession} setup failed or {@link IkeSession} is closed because of a fatal\n     * error.\n     *\n     * @param exception the detailed error information.\n     * @deprecated Implementers should override {@link #onClosedWithException(IkeException)} to\n     *     handle fatal {@link IkeException}s instead of using this method.\n     * @hide\n     ",
    "links" : [ "#onClosedWithException(IkeException)", "android.net.ipsec.ike.IkeSession", "android.net.ipsec.ike.exceptions.IkeException" ]
  }, {
    "name" : " void onClosedWithException(@NonNull IkeException exception)",
    "returnType" : "void",
    "comment" : "\n     * Called if {@link IkeSession} setup failed or {@link IkeSession} is closed because of a fatal\n     * error.\n     *\n     * @param exception the detailed error information.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSession" ]
  }, {
    "name" : " void onError(@NonNull IkeProtocolException exception)",
    "returnType" : "void",
    "comment" : "\n     * Called if a recoverable error is encountered in an established {@link IkeSession}.\n     *\n     * <p>This method may be triggered by protocol errors such as an INVALID_IKE_SPI or\n     * INVALID_MESSAGE_ID.\n     *\n     * @param exception the detailed error information.\n     * @deprecated Implementers should override {@link #onError(IkeException)} to handle {@link\n     *     IkeProtocolException}s instead of using this method.\n     * @hide\n     ",
    "links" : [ "#onError(IkeException)", "android.net.ipsec.ike.exceptions.IkeProtocolException", "android.net.ipsec.ike.IkeSession" ]
  }, {
    "name" : " void onError(@NonNull IkeException exception)",
    "returnType" : "void",
    "comment" : "\n     * Called if a recoverable error is encountered in an established {@link IkeSession}.\n     *\n     * <p>This method may be triggered by protocol errors such as an INVALID_IKE_SPI, or by\n     * non-protocol errors such as the underlying {@link android.net.Network} dying.\n     *\n     * @param exception the detailed error information.\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSession", "android.net.Network" ]
  }, {
    "name" : " void onIkeSessionConnectionInfoChanged(@NonNull IkeSessionConnectionInfo connectionInfo)",
    "returnType" : "void",
    "comment" : "\n     * Called if the IkeSessionConnectionInfo for an established {@link IkeSession} changes.\n     *\n     * <p>This method will only be called for MOBIKE-enabled Sessions, and only after a Mobility\n     * Event occurs. An mobility event can happen in two Network modes:\n     *\n     * <ul>\n     *   <li><b>Caller managed:</b> The caller controls the underlying Network for the IKE Session\n     *       at all times. The IKE Session will only change underlying Networks if the caller\n     *       initiates it through {@link IkeSession#setNetwork(Network)}. If the caller-specified\n     *       Network is lost, they will be notified via {@link\n     *       IkeSessionCallback#onError(android.net.ipsec.ike.exceptions.IkeException)} with an\n     *       {@link android.net.ipsec.ike.exceptions.IkeNetworkLostException} specifying the Network\n     *       that was lost.\n     *   <li><b>Platform Default:</b> The IKE Session will always track the application default\n     *       Network. The IKE Session will start on the application default Network, and any\n     *       subsequent changes to the default Network (after the IKE_AUTH exchange completes) will\n     *       cause the IKE Session's underlying Network to change. If the default Network is lost\n     *       with no replacements, the caller will be notified via {@link\n     *       IkeSessionCallback#onError(android.net.ipsec.ike.exceptions.IkeException)} with an\n     *       {@link android.net.ipsec.ike.exceptions.IkeNetworkLostException}. The caller can either\n     *       wait until for a new default Network to become available or they may close the Session\n     *       manually via {@link IkeSession#close()}. Note that the IKE Session's maximum\n     *       retransmissions may expire while waiting for a new default Network, in which case the\n     *       Session will automatically close and {@link #onClosedWithException(IkeException)} will\n     *       be fired.\n     * </ul>\n     *\n     * <p>There are three types of mobility events:\n     *\n     * <ul>\n     *   <li>The underlying Network changing, or\n     *   <li>The local address disappearing from the current (and unchanged) underlying Network, or\n     *   <li>The remote address changing.\n     * </ul>\n     *\n     * @param connectionInfo the updated IkeSessionConnectionInfo for the Session.\n     * @hide\n     ",
    "links" : [ "android.net.ipsec.ike.IkeSessionCallback#onError(android.net.ipsec.ike.exceptions.IkeException)", "android.net.ipsec.ike.exceptions.IkeNetworkLostException", "android.net.ipsec.ike.IkeSession#close()", "#onClosedWithException(IkeException)", "android.net.ipsec.ike.IkeSession", "android.net.ipsec.ike.IkeSession#setNetwork(Network)" ]
  }, {
    "name" : " void onLivenessStatusChanged(@LivenessStatus int status)",
    "returnType" : "void",
    "comment" : "\n     * Called when the status changes for the liveness check request.\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_ON_DEMAND_STARTED}: This status is called when\n     * liveness checking is started with a new on-demand DPD task.\n     *\n     * <ul>\n     *   <li>Note that when a client requests a liveness check, if no tasks are currently running in\n     *       the session, a new on-demand DPD task is started and notified of {@link\n     *       LivenessStatus#LIVENESS_STATUS_ON_DEMAND_STARTED}.\n     *   <li>Note that a new on-demand DPD task uses retransmission timeouts from {@link\n     *       IkeSessionParams#getLivenessRetransmissionTimeoutsMillis()}.\n     * </ul>\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_ON_DEMAND_ONGOING}: This status is called when\n     * liveness checking is already running in an on-demand DPD task.\n     *\n     * <ul>\n     *   <li>Note that when a client requests a liveness check, if there is already running in an\n     *       on-demand DPD task, {@link LivenessStatus#LIVENESS_STATUS_ON_DEMAND_ONGOING} is\n     *       notified.\n     * </ul>\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_BACKGROUND_STARTED}: This status is called when\n     * liveness checking is started with joining an existing running task.\n     *\n     * <ul>\n     *   <li>Note that if there is an existing running task in the session and no liveness check\n     *       request is running in the background, the liveness check request will be joined to the\n     *       existing running task in the background. Then, while joining, {@link\n     *       LivenessStatus#LIVENESS_STATUS_BACKGROUND_STARTED} is notified.\n     *   <li>Note that an existing running task uses retransmission timeouts from {@link\n     *       IkeSessionParams#getRetransmissionTimeoutsMillis()}.\n     * </ul>\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_BACKGROUND_ONGOING}: This status is called when\n     * liveness checking is already running with joining an existing running task.\n     *\n     * <ul>\n     *   <li>Note that when a client requests a liveness check, if the request is already running in\n     *       the background, {@link LivenessStatus#LIVENESS_STATUS_ON_DEMAND_ONGOING} is notified.\n     * </ul>\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_SUCCESS}: This status is called when the peer's\n     * liveness is proven. Regardless of whether the request is running in an on-demand task or\n     * running in the background, Success result is reported with this status. Once this status is\n     * called, the liveness check request is done and no further status notifications are made until\n     * the next {@link IkeSession#requestLivenessCheck}.\n     *\n     * <ul>\n     *   <li>Note that if the peer's aliveness is proven in the on-demand DPD task, {@link\n     *       LivenessStatus#LIVENESS_STATUS_SUCCESS} is notified as soon as a valid on-demand DPD\n     *       response is received properly.\n     *   <li>Note that if the peer's liveness is proven in a background liveness check with joining\n     *       an existing running task, it can prove that the peer is alive for a valid incoming\n     *       packet of the joined task. In this case, {@link LivenessStatus#LIVENESS_STATUS_SUCCESS}\n     *       is notified as well.\n     * </ul>\n     *\n     * <p>{@link LivenessStatus#LIVENESS_STATUS_FAILURE}: This state is called when the peer is\n     * determined as dead for a liveness check request. After this status is called, the IkeSession\n     * will be closed immediately by calling {@link IkeSessionCallback#onClosedWithException} with\n     * {@link android.net.ipsec.ike.exceptions.IkeTimeoutException} in the {@link\n     * IkeException#getCause()}. Depending on the type of task for which liveness checking is\n     * performed, the failure result is reported as different retransmission timeouts.\n     *\n     * <ul>\n     *   <li>Note that if an on-demand DPD task is running, This task takes retransmission timeouts\n     *       from {@link IkeSessionParams#getLivenessRetransmissionTimeoutsMillis}, and after all\n     *       timeouts expire, {@link LivenessStatus#LIVENESS_STATUS_FAILURE} is notified and is\n     *       followed by closing session.\n     *   <li>Note that, if the liveness check request is running in the background in the joined\n     *       task, the task takes retransmission timeouts from {@link\n     *       IkeSessionParams#getRetransmissionTimeoutsMillis()}, and after all timeouts expire,\n     *       {@link LivenessStatus#LIVENESS_STATUS_FAILURE} is notified and is followed by closing\n     *       session.\n     * </ul>\n     *\n     * @param status the status of {@link LivenessStatus}\n     * @hide\n     ",
    "links" : [ "#LIVENESS_STATUS_BACKGROUND_STARTED", "android.net.ipsec.ike.IkeSessionCallback#onClosedWithException", "#LIVENESS_STATUS_ON_DEMAND_STARTED", "#LIVENESS_STATUS_SUCCESS", "#LIVENESS_STATUS_ON_DEMAND_ONGOING", "android.net.ipsec.ike.IkeSession#requestLivenessCheck", "android.net.ipsec.ike.IkeSessionParams#getRetransmissionTimeoutsMillis()", "android.net.ipsec.ike.IkeSessionParams#getLivenessRetransmissionTimeoutsMillis()", "LivenessStatus", "#LIVENESS_STATUS_FAILURE", "android.net.ipsec.ike.IkeSessionParams#getLivenessRetransmissionTimeoutsMillis", "android.net.ipsec.ike.exceptions.IkeTimeoutException", "#LIVENESS_STATUS_BACKGROUND_ONGOING", "android.net.ipsec.ike.exceptions.IkeException#getCause()" ]
  } ],
  "methodNames" : [ " void onOpened(@NonNull IkeSessionConfiguration sessionConfiguration)", " void onClosed()", " void onClosedExceptionally(@NonNull IkeException exception)", " void onClosedWithException(@NonNull IkeException exception)", " void onError(@NonNull IkeProtocolException exception)", " void onError(@NonNull IkeException exception)", " void onIkeSessionConnectionInfoChanged(@NonNull IkeSessionConnectionInfo connectionInfo)", " void onLivenessStatusChanged(@LivenessStatus int status)" ],
  "variableNames" : [ "LIVENESS_STATUS_ON_DEMAND_STARTED", "LIVENESS_STATUS_ON_DEMAND_ONGOING", "LIVENESS_STATUS_BACKGROUND_STARTED", "LIVENESS_STATUS_BACKGROUND_ONGOING", "LIVENESS_STATUS_SUCCESS", "LIVENESS_STATUS_FAILURE" ]
}