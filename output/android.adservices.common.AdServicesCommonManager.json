{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/adservices/common/AdServicesCommonManager.java",
  "packageName" : "android.adservices.common",
  "className" : "AdServicesCommonManager",
  "comment" : "\n * AdServicesCommonManager contains APIs common across the various AdServices. It provides two\n * SystemApis:\n *\n * <ul>\n *   <li>isAdServicesEnabled - allows to get AdServices state.\n *   <li>setAdServicesEntryPointEnabled - allows to control AdServices state.\n * </ul>\n *\n * <p>The instance of the {@link AdServicesCommonManager} can be obtained using {@link\n * Context#getSystemService} and {@link AdServicesCommonManager} class.\n *\n * @hide\n ",
  "links" : [ "android.adservices.common.AdServicesCommonManager", "android.app.sdksandbox.SandboxedSdkContext#getSystemService" ],
  "variables" : [ {
    "name" : "AD_SERVICES_COMMON_SERVICE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdServicesCommonServiceBinder",
    "type" : "ServiceBinder<IAdServicesCommonService>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AdServicesCommonManager get(@NonNull Context context)",
    "returnType" : "AdServicesCommonManager",
    "comment" : "\n     * Factory method for creating an instance of AdServicesCommonManager.\n     *\n     * @param context The {@link Context} to use\n     * @return A {@link AdServicesCommonManager} instance\n     ",
    "links" : [ "android.adservices.common.AdServicesCommonManager", "android.app.sdksandbox.SandboxedSdkContext" ]
  }, {
    "name" : "private IAdServicesCommonService getService()",
    "returnType" : "IAdServicesCommonService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void isAdServicesEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the AdService's enablement state which represents whether AdServices feature is enabled\n     * or not. This API is for Android S+, which has the OutcomeReceiver class available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void isAdServicesEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the AdService's enablement state which represents whether AdServices feature is enabled\n     * or not. This API is for Android R, and uses the AdServicesOutcomeReceiver class because\n     * OutcomeReceiver is not available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAdServicesEnabled(boolean adServicesEntryPointEnabled, boolean adIdEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the AdService's enablement state based on the provided parameters.\n     *\n     * <p>As a result of the AdServices state, {@code adServicesEntryPointEnabled}, {@code\n     * adIdEnabled}, appropriate notification may be displayed to the user. It's displayed only once\n     * when all the following conditions are met:\n     *\n     * <ul>\n     *   <li>AdServices state - enabled.\n     *   <li>adServicesEntryPointEnabled - true.\n     * </ul>\n     *\n     * @param adServicesEntryPointEnabled indicate entry point enabled or not\n     * @param adIdEnabled indicate user opt-out of adid or not\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableAdServices(@NonNull AdServicesStates adServicesStates, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Enable AdServices based on the AdServicesStates input parameter. This API is for Android S+,\n     * which has the OutcomeReceiver class available.\n     *\n     * <p>Based on the provided {@code AdServicesStates}, AdServices may be enabled. Specifically,\n     * users will be provided with an enrollment channel (such as notification) to become privacy\n     * sandbox users when:\n     *\n     * <ul>\n     *   <li>isAdServicesUiEnabled - true.\n     *   <li>isU18Account | isAdultAccount - true.\n     * </ul>\n     *\n     * @param {@code AdServicesStates} parcel containing relevant AdServices state variables.\n     * @return false if API is disabled, true if the API call completed successfully. Otherwise, it\n     *     would return one of the following exceptions to the user:\n     *     <ul>\n     *       <li>IllegalStateException - the default exception thrown when service crashes\n     *           unexpectedly.\n     *       <li>SecurityException - when the caller is not authorized to call this API.\n     *       <li>TimeoutException - when the services takes too long to respond.\n     *     </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enableAdServices(@NonNull AdServicesStates adServicesStates, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Enable AdServices based on the AdServicesStates input parameter. This API is for Android R,\n     * and uses the AdServicesOutcomeReceiver class because OutcomeReceiver is not available.\n     *\n     * <p>Based on the provided {@code AdServicesStates}, AdServices may be enabled. Specifically,\n     * users will be provided with an enrollment channel (such as notification) to become privacy\n     * sandbox users when:\n     *\n     * <ul>\n     *   <li>isAdServicesUiEnabled - true.\n     *   <li>isU18Account | isAdultAccount - true.\n     * </ul>\n     *\n     * @param adServicesStates parcel containing relevant AdServices state variables.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void updateAdId(@NonNull UpdateAdIdRequest updateAdIdRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : " TODO(b/295205476): Move exceptions into the callback.",
    "links" : [ ]
  }, {
    "name" : "public void updateAdId(@NonNull UpdateAdIdRequest updateAdIdRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Updates {@link AdId} in Adservices when the device changes {@link AdId}. This API is used by\n     * AdIdProvider.\n     *\n     * @param updateAdIdRequest the request that contains {@link AdId} information to update.\n     * @param executor the executor for the callback.\n     * @param callback the callback in type {@link OutcomeReceiver}, available on Android S and\n     *     above.\n     * @throws IllegalStateException when service is not available or the feature is not enabled, or\n     *     if there is any {@code Binder} invocation error.\n     * @throws SecurityException when the caller is not authorized to call this API.\n     * @hide\n     ",
    "links" : [ "android.adservices.adid.AdId", "android.os.OutcomeReceiver" ]
  }, {
    "name" : "public void getAdservicesCommonStates(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<AdServicesCommonStatesResponse, Exception> callback)",
    "returnType" : "void",
    "comment" : "\n     * Get the AdService's common states.\n     *\n     * @param executor the executor for the callback.\n     * @param callback the callback in type {@link AdServicesOutcomeReceiver}, available on Android\n     *     R and above.\n     * @throws IllegalStateException if there is any {@code Binder} invocation error.\n     * @hide\n     ",
    "links" : [ "android.adservices.common.AdServicesOutcomeReceiver" ]
  } ],
  "methodNames" : [ "public static AdServicesCommonManager get(@NonNull Context context)", "private IAdServicesCommonService getService()", "public void isAdServicesEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)", "public void isAdServicesEnabled(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)", "public void setAdServicesEnabled(boolean adServicesEntryPointEnabled, boolean adIdEnabled)", "public void enableAdServices(@NonNull AdServicesStates adServicesStates, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)", "public void enableAdServices(@NonNull AdServicesStates adServicesStates, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)", "public void updateAdId(@NonNull UpdateAdIdRequest updateAdIdRequest, @NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<Boolean, Exception> callback)", "public void updateAdId(@NonNull UpdateAdIdRequest updateAdIdRequest, @NonNull @CallbackExecutor Executor executor, @NonNull OutcomeReceiver<Boolean, Exception> callback)", "public void getAdservicesCommonStates(@NonNull @CallbackExecutor Executor executor, @NonNull AdServicesOutcomeReceiver<AdServicesCommonStatesResponse, Exception> callback)" ],
  "variableNames" : [ "AD_SERVICES_COMMON_SERVICE", "mContext", "mAdServicesCommonServiceBinder" ]
}