{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationFastLatin.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationFastLatin",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "VERSION",
    "type" : "int",
    "comment" : "\n     * Fast Latin format version (one byte 1..FF).\n     * Must be incremented for any runtime-incompatible changes,\n     * in particular, for changes to any of the following constants.\n     *\n     * When the major version number of the main data format changes,\n     * we can reset this fast Latin version to 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "LATIN_MAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LATIN_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LATIN_MAX_UTF8_LEAD",
    "type" : "int",
    "comment" : " UTF-8 lead byte of LATIN_MAX",
    "links" : [ ]
  }, {
    "name" : "PUNCT_START",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PUNCT_LIMIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_FAST_CHARS",
    "type" : "int",
    "comment" : " excludes U+FFFE & U+FFFF",
    "links" : [ ]
  }, {
    "name" : "SHORT_PRIMARY_MASK",
    "type" : "int",
    "comment" : " bits 15..10",
    "links" : [ ]
  }, {
    "name" : "INDEX_MASK",
    "type" : "int",
    "comment" : " bits 9..0 for expansions & contractions",
    "links" : [ ]
  }, {
    "name" : "SECONDARY_MASK",
    "type" : "int",
    "comment" : " bits 9..5",
    "links" : [ ]
  }, {
    "name" : "CASE_MASK",
    "type" : "int",
    "comment" : " bits 4..3",
    "links" : [ ]
  }, {
    "name" : "LONG_PRIMARY_MASK",
    "type" : "int",
    "comment" : " bits 15..3",
    "links" : [ ]
  }, {
    "name" : "TERTIARY_MASK",
    "type" : "int",
    "comment" : " bits 2..0",
    "links" : [ ]
  }, {
    "name" : "CASE_AND_TERTIARY_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_SHORT_PRIMARIES_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_LONG_PRIMARIES_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_SECONDARIES_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_CASES_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_TERTIARIES_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTRACTION",
    "type" : "int",
    "comment" : "\n     * Contraction with one fast Latin character.\n     * Use INDEX_MASK to find the start of the contraction list after the fixed table.\n     * The first entry contains the default mapping.\n     * Otherwise use CONTR_CHAR_MASK for the contraction character index\n     * (in ascending order).\n     * Use CONTR_LENGTH_SHIFT for the length of the entry\n     * (1=BAIL_OUT, 2=one CE, 3=two CEs).\n     *\n     * Also, U+0000 maps to a contraction entry, so that the fast path need not\n     * check for NUL termination.\n     * It usually maps to a contraction list with only the completely ignorable default value.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXPANSION",
    "type" : "int",
    "comment" : "\n     * An expansion encodes two CEs.\n     * Use INDEX_MASK to find the pair of CEs after the fixed table.\n     *\n     * The higher a mini CE value, the easier it is to process.\n     * For expansions and higher, no context needs to be considered.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_LONG",
    "type" : "int",
    "comment" : "\n     * Encodes one CE with a long/low mini primary (there are 128).\n     * All potentially-variable primaries must be in this range,\n     * to make the short-primary path as fast as possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG_INC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SHORT",
    "type" : "int",
    "comment" : "\n     * Encodes one CE with a short/high primary (there are 60),\n     * plus a secondary CE if the secondary weight is high.\n     * Fast handling: At least all letter primaries should be in this range.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT_INC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SHORT",
    "type" : "int",
    "comment" : " The highest primary weight is reserved for U+FFFF. ",
    "links" : [ ]
  }, {
    "name" : "MIN_SEC_BEFORE",
    "type" : "int",
    "comment" : " must add SEC_OFFSET",
    "links" : [ ]
  }, {
    "name" : "SEC_INC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SEC_BEFORE",
    "type" : "int",
    "comment" : " 5 before common",
    "links" : [ ]
  }, {
    "name" : "COMMON_SEC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SEC_AFTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SEC_AFTER",
    "type" : "int",
    "comment" : " 6 after common",
    "links" : [ ]
  }, {
    "name" : "MIN_SEC_HIGH",
    "type" : "int",
    "comment" : " 20 high secondaries",
    "links" : [ ]
  }, {
    "name" : "MAX_SEC_HIGH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEC_OFFSET",
    "type" : "int",
    "comment" : "\n     * Lookup: Add this offset to secondary weights, except for completely ignorable CEs.\n     * Must be greater than any special value, e.g., MERGE_WEIGHT.\n     * The exact value is not relevant for the format version.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMON_SEC_PLUS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_SEC_OFFSETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COMMON_SEC_PLUS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOWER_CASE",
    "type" : "int",
    "comment" : " case bits include this offset",
    "links" : [ ]
  }, {
    "name" : "TWO_LOWER_CASES",
    "type" : "int",
    "comment" : " 0x80008",
    "links" : [ ]
  }, {
    "name" : "COMMON_TER",
    "type" : "int",
    "comment" : " must add TER_OFFSET",
    "links" : [ ]
  }, {
    "name" : "MAX_TER_AFTER",
    "type" : "int",
    "comment" : " 7 after common",
    "links" : [ ]
  }, {
    "name" : "TER_OFFSET",
    "type" : "int",
    "comment" : "\n     * Lookup: Add this offset to tertiary weights, except for completely ignorable CEs.\n     * Must be greater than any special value, e.g., MERGE_WEIGHT.\n     * Must be greater than case bits as well, so that with combined case+tertiary weights\n     * plus the offset the tertiary bits does not spill over into the case bits.\n     * The exact value is not relevant for the format version.\n     ",
    "links" : [ ]
  }, {
    "name" : "COMMON_TER_PLUS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_TER_OFFSETS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TWO_COMMON_TER_PLUS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MERGE_WEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EOS",
    "type" : "int",
    "comment" : " end of string",
    "links" : [ ]
  }, {
    "name" : "BAIL_OUT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTR_CHAR_MASK",
    "type" : "int",
    "comment" : "\n     * Contraction result first word bits 8..0 contain the\n     * second contraction character, as a char index 0..NUM_FAST_CHARS-1.\n     * Each contraction list is terminated with a word containing CONTR_CHAR_MASK.\n     ",
    "links" : [ ]
  }, {
    "name" : "CONTR_LENGTH_SHIFT",
    "type" : "int",
    "comment" : "\n     * Contraction result first word bits 10..9 contain the result length:\n     * 1=bail out, 2=one mini CE, 3=two mini CEs\n     ",
    "links" : [ ]
  }, {
    "name" : "BAIL_OUT_RESULT",
    "type" : "int",
    "comment" : "\n     * Comparison return value when the regular comparison must be used.\n     * The exact value is not relevant for the format version.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int getCharIndex(char c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getOptions(CollationData data, CollationSettings settings, char[] primaries)",
    "returnType" : "int",
    "comment" : "\n     * Computes the options value for the compare functions\n     * and writes the precomputed primary weights.\n     * Returns -1 if the Latin fastpath is not supported for the data and settings.\n     * The capacity must be LATIN_LIMIT.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compareUTF16(char[] table, char[] primaries, int options, CharSequence left, CharSequence right, int startIndex)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int lookup(char[] table, int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long nextPair(char[] table, int c, int ce, CharSequence s16, int sIndex)",
    "returnType" : "long",
    "comment" : "\n     * Java returns a negative result (use the '~' operator) if sIndex is to be incremented.\n     * C++ modifies sIndex.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getPrimaries(int variableTop, int pair)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getSecondariesFromOneShortCE(int ce)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getSecondaries(int variableTop, int pair)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getCases(int variableTop, boolean strengthIsPrimary, int pair)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getTertiaries(int variableTop, boolean withCaseBits, int pair)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getQuaternaries(int variableTop, int pair)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static int getCharIndex(char c)", "public static int getOptions(CollationData data, CollationSettings settings, char[] primaries)", "public static int compareUTF16(char[] table, char[] primaries, int options, CharSequence left, CharSequence right, int startIndex)", "private static int lookup(char[] table, int c)", "private static long nextPair(char[] table, int c, int ce, CharSequence s16, int sIndex)", "private static int getPrimaries(int variableTop, int pair)", "private static int getSecondariesFromOneShortCE(int ce)", "private static int getSecondaries(int variableTop, int pair)", "private static int getCases(int variableTop, boolean strengthIsPrimary, int pair)", "private static int getTertiaries(int variableTop, boolean withCaseBits, int pair)", "private static int getQuaternaries(int variableTop, int pair)" ],
  "variableNames" : [ "VERSION", "LATIN_MAX", "LATIN_LIMIT", "LATIN_MAX_UTF8_LEAD", "PUNCT_START", "PUNCT_LIMIT", "NUM_FAST_CHARS", "SHORT_PRIMARY_MASK", "INDEX_MASK", "SECONDARY_MASK", "CASE_MASK", "LONG_PRIMARY_MASK", "TERTIARY_MASK", "CASE_AND_TERTIARY_MASK", "TWO_SHORT_PRIMARIES_MASK", "TWO_LONG_PRIMARIES_MASK", "TWO_SECONDARIES_MASK", "TWO_CASES_MASK", "TWO_TERTIARIES_MASK", "CONTRACTION", "EXPANSION", "MIN_LONG", "LONG_INC", "MAX_LONG", "MIN_SHORT", "SHORT_INC", "MAX_SHORT", "MIN_SEC_BEFORE", "SEC_INC", "MAX_SEC_BEFORE", "COMMON_SEC", "MIN_SEC_AFTER", "MAX_SEC_AFTER", "MIN_SEC_HIGH", "MAX_SEC_HIGH", "SEC_OFFSET", "COMMON_SEC_PLUS_OFFSET", "TWO_SEC_OFFSETS", "TWO_COMMON_SEC_PLUS_OFFSET", "LOWER_CASE", "TWO_LOWER_CASES", "COMMON_TER", "MAX_TER_AFTER", "TER_OFFSET", "COMMON_TER_PLUS_OFFSET", "TWO_TER_OFFSETS", "TWO_COMMON_TER_PLUS_OFFSET", "MERGE_WEIGHT", "EOS", "BAIL_OUT", "CONTR_CHAR_MASK", "CONTR_LENGTH_SHIFT", "BAIL_OUT_RESULT" ]
}