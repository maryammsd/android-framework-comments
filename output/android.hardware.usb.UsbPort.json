{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/usb/UsbPort.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbPort",
  "comment" : "\n * Represents a physical USB port and describes its characteristics.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedModes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsbManager",
    "type" : "UsbManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedContaminantProtectionModes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsEnableContaminantPresenceProtection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsEnableContaminantPresenceDetection",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportsComplianceWarnings",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupportedAltModes",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_DATA_ROLES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_ROLE_OFFSET",
    "type" : "int",
    "comment" : "\n     * Points to the first power role in the IUsb HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "sUsbOperationCount",
    "type" : "AtomicInteger",
    "comment" : "\n     * Counter for tracking UsbOperation operations.\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_USB_DATA_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbData} request was successfully completed.\n     ",
    "links" : [ "#enableUsbData" ]
  }, {
    "name" : "ENABLE_USB_DATA_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbData} request failed due to internal error.\n     ",
    "links" : [ "#enableUsbData" ]
  }, {
    "name" : "ENABLE_USB_DATA_ERROR_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbData} request failed as it's not supported.\n     ",
    "links" : [ "#enableUsbData" ]
  }, {
    "name" : "ENABLE_USB_DATA_ERROR_PORT_MISMATCH",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbData} request failed as port id mismatched.\n     ",
    "links" : [ "#enableUsbData" ]
  }, {
    "name" : "ENABLE_USB_DATA_ERROR_OTHER",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbData} request failed due to other reasons.\n     ",
    "links" : [ "#enableUsbData" ]
  }, {
    "name" : "ENABLE_LIMIT_POWER_TRANSFER_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The {@link #enableLimitPowerTransfer} request was successfully completed.\n     ",
    "links" : [ "#enableLimitPowerTransfer" ]
  }, {
    "name" : "ENABLE_LIMIT_POWER_TRANSFER_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * The {@link #enableLimitPowerTransfer} request failed due to internal error.\n     ",
    "links" : [ "#enableLimitPowerTransfer" ]
  }, {
    "name" : "ENABLE_LIMIT_POWER_TRANSFER_ERROR_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The {@link #enableLimitPowerTransfer} request failed as it's not supported.\n     ",
    "links" : [ "#enableLimitPowerTransfer" ]
  }, {
    "name" : "ENABLE_LIMIT_POWER_TRANSFER_ERROR_PORT_MISMATCH",
    "type" : "int",
    "comment" : "\n     * The {@link #enableLimitPowerTransfer} request failed as port id mismatched.\n     ",
    "links" : [ "#enableLimitPowerTransfer" ]
  }, {
    "name" : "ENABLE_LIMIT_POWER_TRANSFER_ERROR_OTHER",
    "type" : "int",
    "comment" : "\n     * The {@link #enableLimitPowerTransfer} request failed due to other reasons.\n     ",
    "links" : [ "#enableLimitPowerTransfer" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request was successfully completed.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request failed due to internal error.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request failed as it's not supported.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_PORT_MISMATCH",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request failed as port id mismatched.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_DATA_ENABLED",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request failed as data is still enabled.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_OTHER",
    "type" : "int",
    "comment" : "\n     * The {@link #enableUsbDataWhileDocked} request failed due to other reasons.\n     ",
    "links" : [ "#enableUsbDataWhileDocked" ]
  }, {
    "name" : "RESET_USB_PORT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * The {@link #resetUsbPort} request was successfully completed.\n     ",
    "links" : [ "#resetUsbPort" ]
  }, {
    "name" : "RESET_USB_PORT_ERROR_INTERNAL",
    "type" : "int",
    "comment" : "\n     * The {@link #resetUsbPort} request failed due to internal error.\n     ",
    "links" : [ "#resetUsbPort" ]
  }, {
    "name" : "RESET_USB_PORT_ERROR_NOT_SUPPORTED",
    "type" : "int",
    "comment" : "\n     * The {@link #resetUsbPort} request failed as it's not supported.\n     ",
    "links" : [ "#resetUsbPort" ]
  }, {
    "name" : "RESET_USB_PORT_ERROR_PORT_MISMATCH",
    "type" : "int",
    "comment" : "\n     * The {@link #resetUsbPort} request failed as port id mismatched.\n     ",
    "links" : [ "#resetUsbPort" ]
  }, {
    "name" : "RESET_USB_PORT_ERROR_OTHER",
    "type" : "int",
    "comment" : "\n     * The {@link #resetUsbPort} request failed due to other reasons.\n     ",
    "links" : [ "#resetUsbPort" ]
  }, {
    "name" : "FLAG_ALT_MODE_TYPE_DISPLAYPORT",
    "type" : "int",
    "comment" : "\n     * Indicates that the Alt Mode being described is DisplayPort.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the unique id of the port.\n     *\n     * @return The unique id of the port; not intended for display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedModes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the supported modes of the port.\n     * <p>\n     * The actual mode of the port may vary depending on what is plugged into it.\n     * </p>\n     *\n     * @return The supported modes: one of {@link UsbPortStatus#MODE_DFP},\n     * {@link UsbPortStatus#MODE_UFP}, or {@link UsbPortStatus#MODE_DUAL}.\n     *\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPortStatus#MODE_DFP", "android.hardware.usb.UsbPortStatus#MODE_UFP", "android.hardware.usb.UsbPortStatus#MODE_DUAL" ]
  }, {
    "name" : "public int getSupportedContaminantProtectionModes()",
    "returnType" : "int",
    "comment" : "\n     * Gets the supported port proctection modes when the port is contaminated.\n     * <p>\n     * The actual mode of the port is decided by the hardware\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsEnableContaminantPresenceProtection()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if UsbService can enable/disable contaminant presence protection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsEnableContaminantPresenceDetection()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells if UsbService can enable/disable contaminant presence detection.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UsbPortStatus getStatus()",
    "returnType" : "UsbPortStatus",
    "comment" : "\n     * Gets the status of this USB port.\n     *\n     * @return The status of the this port, or {@code null} if port is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModeChangeSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this USB port supports mode change\n     *\n     * @return true if mode change is supported.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsComplianceWarnings()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries USB Port to see if the port is capable of identifying\n     * non compliant USB power source/cable/accessory.\n     *\n     * @return true when the UsbPort is capable of identifying\n     *             non compliant USB power\n     *             source/cable/accessory.\n     * @return false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSupportedAltModesMask()",
    "returnType" : "int",
    "comment" : "\n     * Returns all Alt Modes supported by the port.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAltModeSupported(@AltModeType int typeMask)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether all Alt Mode types in a given mask are supported\n     * by the port.\n     *\n     * @return true if all given Alt Modes are supported, false otherwise.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRoles(@UsbPortStatus.UsbPowerRole int powerRole, @UsbPortStatus.UsbDataRole int dataRole)",
    "returnType" : "void",
    "comment" : "\n     * Sets the desired role combination of the port.\n     * <p>\n     * The supported role combinations depend on what is connected to the port and may be\n     * determined by consulting\n     * {@link UsbPortStatus#isRoleCombinationSupported UsbPortStatus.isRoleCombinationSupported}.\n     * </p><p>\n     * Note: This function is asynchronous and may fail silently without applying\n     * the operationed changes.  If this function does cause a status change to occur then\n     * a {@link UsbManager#ACTION_USB_PORT_CHANGED} broadcast will be sent.\n     * </p>\n     *\n     * @param powerRole The desired power role: {@link UsbPortStatus#POWER_ROLE_SOURCE} or\n     *                  {@link UsbPortStatus#POWER_ROLE_SINK}, or\n     *                  {@link UsbPortStatus#POWER_ROLE_NONE} if no power role.\n     * @param dataRole The desired data role: {@link UsbPortStatus#DATA_ROLE_HOST} or\n     *                 {@link UsbPortStatus#DATA_ROLE_DEVICE}, or\n     *                 {@link UsbPortStatus#DATA_ROLE_NONE} if no data role.\n     ",
    "links" : [ "android.hardware.usb.UsbPortStatus#isRoleCombinationSupported", "android.hardware.usb.UsbManager#ACTION_USB_PORT_CHANGED", "android.hardware.usb.UsbPortStatus#DATA_ROLE_HOST", "android.hardware.usb.UsbPortStatus#DATA_ROLE_DEVICE", "android.hardware.usb.UsbPortStatus#DATA_ROLE_NONE", "android.hardware.usb.UsbPortStatus#POWER_ROLE_SOURCE", "android.hardware.usb.UsbPortStatus#POWER_ROLE_SINK", "android.hardware.usb.UsbPortStatus#POWER_ROLE_NONE" ]
  }, {
    "name" : "public void resetUsbPort(@NonNull @CallbackExecutor Executor executor, @NonNull @ResetUsbPortStatus Consumer<Integer> consumer)",
    "returnType" : "void",
    "comment" : "\n     * Reset Usb data on the port.\n     *\n     * @param executor Executor for the callback.\n     * @param consumer A consumer that consumes the reset result.\n     *                 {@link #RESET_USB_PORT_SUCCESS} when request completes\n     *                 successfully or\n     *                 {@link #RESET_USB_PORT_ERROR_INTERNAL} when request\n     *                 fails due to internal error or\n     *                 {@link RESET_USB_PORT_ERROR_NOT_SUPPORTED} when not\n     *                 supported or\n     *                 {@link RESET_USB_PORT_ERROR_PORT_MISMATCH} when request\n     *                 fails due to port id mismatch or\n     *                 {@link RESET_USB_PORT_ERROR_OTHER} when fails due to\n     *                  other reasons.\n     ",
    "links" : [ "#RESET_USB_PORT_ERROR_INTERNAL", "RESET_USB_PORT_ERROR_PORT_MISMATCH", "RESET_USB_PORT_ERROR_OTHER", "#RESET_USB_PORT_SUCCESS", "RESET_USB_PORT_ERROR_NOT_SUPPORTED" ]
  }, {
    "name" : "public int enableUsbData(boolean enable)",
    "returnType" : "int",
    "comment" : "\n     * Enables/Disables Usb data on the port.\n     *\n     * @param enable When true enables USB data if disabled.\n     *               When false disables USB data if enabled.\n     * @return       {@link #ENABLE_USB_DATA_SUCCESS} when request completes successfully or\n     *               {@link #ENABLE_USB_DATA_ERROR_INTERNAL} when request fails due to internal\n     *               error or\n     *               {@link ENABLE_USB_DATA_ERROR_NOT_SUPPORTED} when not supported or\n     *               {@link ENABLE_USB_DATA_ERROR_PORT_MISMATCH} when request fails due to port id\n     *               mismatch or\n     *               {@link ENABLE_USB_DATA_ERROR_OTHER} when fails due to other reasons.\n     ",
    "links" : [ "#ENABLE_USB_DATA_ERROR_INTERNAL", "ENABLE_USB_DATA_ERROR_PORT_MISMATCH", "ENABLE_USB_DATA_ERROR_OTHER", "ENABLE_USB_DATA_ERROR_NOT_SUPPORTED", "#ENABLE_USB_DATA_SUCCESS" ]
  }, {
    "name" : "public int enableUsbDataWhileDocked()",
    "returnType" : "int",
    "comment" : "\n     * Enables Usb data when disabled due to {@link UsbPort#DATA_STATUS_DISABLED_DOCK}\n     *\n     * @return {@link #ENABLE_USB_DATA_WHILE_DOCKED_SUCCESS} when request completes successfully or\n     *         {@link #ENABLE_USB_DATA_WHILE_DOCKED_ERROR_INTERNAL} when request fails due to\n     *         internal error or\n     *         {@link ENABLE_USB_DATA_WHILE_DOCKED_ERROR_NOT_SUPPORTED} when not supported or\n     *         {@link ENABLE_USB_DATA_WHILE_DOCKED_ERROR_PORT_MISMATCH} when request fails due to\n     *         port id mismatch or\n     *         {@link ENABLE_USB_DATA_WHILE_DOCKED_ERROR_DATA_ENABLED} when request fails as data\n     *         is still enabled or\n     *         {@link ENABLE_USB_DATA_WHILE_DOCKED_ERROR_OTHER} when fails due to other reasons.\n     ",
    "links" : [ "#ENABLE_USB_DATA_WHILE_DOCKED_ERROR_INTERNAL", "android.hardware.usb.UsbPort#DATA_STATUS_DISABLED_DOCK", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_PORT_MISMATCH", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_OTHER", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_NOT_SUPPORTED", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_DATA_ENABLED", "#ENABLE_USB_DATA_WHILE_DOCKED_SUCCESS" ]
  }, {
    "name" : "public int enableLimitPowerTransfer(boolean enable)",
    "returnType" : "int",
    "comment" : "\n     * Limits power transfer In and out of the port.\n     * <p>\n     * Disables charging and limits sourcing power(when permitted by the USB spec) until\n     * port disconnect event.\n     * </p>\n     * @param enable limits power transfer when true.\n     * @return {@link #ENABLE_LIMIT_POWER_TRANSFER_SUCCESS} when request completes successfully or\n     *         {@link #ENABLE_LIMIT_POWER_TRANSFER_ERROR_INTERNAL} when request fails due to\n     *         internal error or\n     *         {@link ENABLE_LIMIT_POWER_TRANSFER_ERROR_NOT_SUPPORTED} when not supported or\n     *         {@link ENABLE_LIMIT_POWER_TRANSFER_ERROR_PORT_MISMATCH} when request fails due to\n     *         port id mismatch or\n     *         {@link ENABLE_LIMIT_POWER_TRANSFER_ERROR_OTHER} when fails due to other reasons.\n     ",
    "links" : [ "ENABLE_LIMIT_POWER_TRANSFER_ERROR_NOT_SUPPORTED", "#ENABLE_LIMIT_POWER_TRANSFER_SUCCESS", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_OTHER", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_PORT_MISMATCH", "#ENABLE_LIMIT_POWER_TRANSFER_ERROR_INTERNAL" ]
  }, {
    "name" : "public void enableContaminantDetection(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "public static int combineRolesAsBit(int powerRole, int dataRole)",
    "returnType" : "int",
    "comment" : "\n     * Combines one power and one data role together into a unique value with\n     * exactly one bit set.  This can be used to efficiently determine whether\n     * a combination of roles is supported by testing whether that bit is present\n     * in a bit-field.\n     *\n     * @param powerRole The desired power role: {@link UsbPortStatus#POWER_ROLE_SOURCE}\n     *                  or {@link UsbPortStatus#POWER_ROLE_SINK}, or 0 if no power role.\n     * @param dataRole  The desired data role: {@link UsbPortStatus#DATA_ROLE_HOST}\n     *                  or {@link UsbPortStatus#DATA_ROLE_DEVICE}, or 0 if no data role.\n     * @hide\n     ",
    "links" : [ "android.hardware.usb.UsbPortStatus#DATA_ROLE_HOST", "android.hardware.usb.UsbPortStatus#DATA_ROLE_DEVICE", "android.hardware.usb.UsbPortStatus#POWER_ROLE_SOURCE", "android.hardware.usb.UsbPortStatus#POWER_ROLE_SINK" ]
  }, {
    "name" : "public static String modeToString(int mode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String powerRoleToString(int role)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String dataRoleToString(int role)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String contaminantPresenceStatusToString(int contaminantPresenceStatus)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String usbDataStatusToString(int usbDataStatus)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String powerBrickConnectionStatusToString(int powerBrickConnectionStatus)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String roleCombinationsToString(int combo)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String complianceWarningsToString(@NonNull int[] complianceWarnings)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String dpAltModeStatusToString(int dpAltModeStatus)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkMode(int powerRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkPowerRole(int dataRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkDataRole(int mode)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void checkRoles(int powerRole, int dataRole)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isModeSupported(int mode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getId()", "public int getSupportedModes()", "public int getSupportedContaminantProtectionModes()", "public boolean supportsEnableContaminantPresenceProtection()", "public boolean supportsEnableContaminantPresenceDetection()", "public UsbPortStatus getStatus()", "public boolean isModeChangeSupported()", "public boolean supportsComplianceWarnings()", "public int getSupportedAltModesMask()", "public boolean isAltModeSupported(@AltModeType int typeMask)", "public void setRoles(@UsbPortStatus.UsbPowerRole int powerRole, @UsbPortStatus.UsbDataRole int dataRole)", "public void resetUsbPort(@NonNull @CallbackExecutor Executor executor, @NonNull @ResetUsbPortStatus Consumer<Integer> consumer)", "public int enableUsbData(boolean enable)", "public int enableUsbDataWhileDocked()", "public int enableLimitPowerTransfer(boolean enable)", "public void enableContaminantDetection(boolean enable)", "public static int combineRolesAsBit(int powerRole, int dataRole)", "public static String modeToString(int mode)", "public static String powerRoleToString(int role)", "public static String dataRoleToString(int role)", "public static String contaminantPresenceStatusToString(int contaminantPresenceStatus)", "public static String usbDataStatusToString(int usbDataStatus)", "public static String powerBrickConnectionStatusToString(int powerBrickConnectionStatus)", "public static String roleCombinationsToString(int combo)", "public static String complianceWarningsToString(@NonNull int[] complianceWarnings)", "public static String dpAltModeStatusToString(int dpAltModeStatus)", "public static void checkMode(int powerRole)", "public static void checkPowerRole(int dataRole)", "public static void checkDataRole(int mode)", "public static void checkRoles(int powerRole, int dataRole)", "public boolean isModeSupported(int mode)", "public String toString()" ],
  "variableNames" : [ "TAG", "mId", "mSupportedModes", "mUsbManager", "mSupportedContaminantProtectionModes", "mSupportsEnableContaminantPresenceProtection", "mSupportsEnableContaminantPresenceDetection", "mSupportsComplianceWarnings", "mSupportedAltModes", "NUM_DATA_ROLES", "POWER_ROLE_OFFSET", "sUsbOperationCount", "ENABLE_USB_DATA_SUCCESS", "ENABLE_USB_DATA_ERROR_INTERNAL", "ENABLE_USB_DATA_ERROR_NOT_SUPPORTED", "ENABLE_USB_DATA_ERROR_PORT_MISMATCH", "ENABLE_USB_DATA_ERROR_OTHER", "ENABLE_LIMIT_POWER_TRANSFER_SUCCESS", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_INTERNAL", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_NOT_SUPPORTED", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_PORT_MISMATCH", "ENABLE_LIMIT_POWER_TRANSFER_ERROR_OTHER", "ENABLE_USB_DATA_WHILE_DOCKED_SUCCESS", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_INTERNAL", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_NOT_SUPPORTED", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_PORT_MISMATCH", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_DATA_ENABLED", "ENABLE_USB_DATA_WHILE_DOCKED_ERROR_OTHER", "RESET_USB_PORT_SUCCESS", "RESET_USB_PORT_ERROR_INTERNAL", "RESET_USB_PORT_ERROR_NOT_SUPPORTED", "RESET_USB_PORT_ERROR_PORT_MISMATCH", "RESET_USB_PORT_ERROR_OTHER", "FLAG_ALT_MODE_TYPE_DISPLAYPORT" ]
}