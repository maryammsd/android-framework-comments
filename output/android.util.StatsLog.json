{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/StatsLog.java",
  "packageName" : "android.util",
  "className" : "StatsLog",
  "comment" : "\n * StatsLog provides an API for developers to send events to statsd. The events can be used to\n * define custom metrics inside statsd.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXPERIMENT_IDS_FIELD_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_IS_UID",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant for logging UID field.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_TRUNCATE_TIMESTAMP",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to indicate logged atom event's timestamp should be truncated.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_PRIMARY_FIELD",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant for a state atom's primary field.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_EXCLUSIVE_STATE",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant for state atom's state field.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to indicate the first UID in the attribution chain\n     * is a primary field.\n     * Should only be used for attribution chain fields.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_DEFAULT_STATE",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to indicate which state is default for the state atom.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_TRIGGER_STATE_RESET",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to signal all states should be reset to the default state.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_STATE_NESTED",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to indicate state changes need to account for nesting.\n     * This should only be used with binary state atoms.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_RESTRICTION_CATEGORY",
    "type" : "byte",
    "comment" : "\n     * Annotation ID constant to indicate the restriction category of an atom.\n     * This annotation must only be attached to the atom id. This is an int annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_PERIPHERAL_DEVICE_INFO",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains peripheral device info.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_APP_USAGE",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains app usage information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_APP_ACTIVITY",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains app activity information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_HEALTH_CONNECT",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains health connect information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_ACCESSIBILITY",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains accessibility information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_SYSTEM_SEARCH",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains system search information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_USER_ENGAGEMENT",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains user engagement information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_AMBIENT_SENSING",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains ambient sensing information.\n     * This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ANNOTATION_ID_FIELD_RESTRICTION_DEMOGRAPHIC_CLASSIFICATION",
    "type" : "byte",
    "comment" : "\n     * Annotation ID to indicate that a field of an atom contains demographic classification\n     * information. This is a bool annotation.\n     *\n     * The ID is a byte since StatsEvent.addBooleanAnnotation() and StatsEvent.addIntAnnotation()\n     * accept byte as the type for annotation ids to save space.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_CATEGORY_DIAGNOSTIC",
    "type" : "int",
    "comment" : "\n     * Restriction category for atoms about diagnostics.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_CATEGORY_SYSTEM_INTELLIGENCE",
    "type" : "int",
    "comment" : "\n     * Restriction category for atoms about system intelligence.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_CATEGORY_AUTHENTICATION",
    "type" : "int",
    "comment" : "\n     * Restriction category for atoms about authentication.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESTRICTION_CATEGORY_FRAUD_AND_ABUSE",
    "type" : "int",
    "comment" : "\n     * Restriction category for atoms about fraud and abuse.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean logStart(int label)",
    "returnType" : "boolean",
    "comment" : "\n     * Logs a start event.\n     *\n     * @param label developer-chosen label.\n     * @return True if the log request was sent to statsd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logStop(int label)",
    "returnType" : "boolean",
    "comment" : "\n     * Logs a stop event.\n     *\n     * @param label developer-chosen label.\n     * @return True if the log request was sent to statsd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logEvent(int label)",
    "returnType" : "boolean",
    "comment" : "\n     * Logs an event that does not represent a start or stop boundary.\n     *\n     * @param label developer-chosen label.\n     * @return True if the log request was sent to statsd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean logBinaryPushStateChanged(@NonNull String trainName, long trainVersionCode, int options, int state, @NonNull long[] experimentIds)",
    "returnType" : "boolean",
    "comment" : "\n     * Logs an event for binary push for module updates.\n     *\n     * @param trainName        name of install train.\n     * @param trainVersionCode version code of the train.\n     * @param options          optional flags about this install.\n     *                         The last 3 bits indicate options:\n     *                             0x01: FLAG_REQUIRE_STAGING\n     *                             0x02: FLAG_ROLLBACK_ENABLED\n     *                             0x04: FLAG_REQUIRE_LOW_LATENCY_MONITOR\n     * @param state            current install state. Defined as State enums in\n     *                         BinaryPushStateChanged atom in\n     *                         frameworks/proto_logging/stats/atoms.proto\n     * @param experimentIds    experiment ids.\n     * @return True if the log request was sent to statsd.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void writeRaw(@NonNull byte[] buffer, int size)",
    "returnType" : "void",
    "comment" : "\n     * Write an event to stats log using the raw format.\n     *\n     * @param buffer    The encoded buffer of data to write.\n     * @param size      The number of bytes from the buffer to write.\n     * @hide\n     * @deprecated Use {@link write(final StatsEvent statsEvent)} instead.\n     *\n     ",
    "links" : [ "write(final" ]
  }, {
    "name" : "private static native void writeImpl(@NonNull byte[] buffer, int size, int atomId)",
    "returnType" : "void",
    "comment" : "\n     * Write an event to stats log using the raw format.\n     *\n     * @param buffer    The encoded buffer of data to write.\n     * @param size      The number of bytes from the buffer to write.\n     * @param atomId    The id of the atom to which the event belongs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void write(@NonNull final StatsEvent statsEvent)",
    "returnType" : "void",
    "comment" : "\n     * Write an event to stats log using the raw format encapsulated in StatsEvent.\n     * After writing to stats log, release() is called on the StatsEvent object.\n     * No further action should be taken on the StatsEvent object following this call.\n     *\n     * @param statsEvent    The StatsEvent object containing the encoded buffer of data to write.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean logStart(int label)", "public static boolean logStop(int label)", "public static boolean logEvent(int label)", "public static boolean logBinaryPushStateChanged(@NonNull String trainName, long trainVersionCode, int options, int state, @NonNull long[] experimentIds)", "public static void writeRaw(@NonNull byte[] buffer, int size)", "private static native void writeImpl(@NonNull byte[] buffer, int size, int atomId)", "public static void write(@NonNull final StatsEvent statsEvent)" ],
  "variableNames" : [ "TAG", "DEBUG", "EXPERIMENT_IDS_FIELD_ID", "ANNOTATION_ID_IS_UID", "ANNOTATION_ID_TRUNCATE_TIMESTAMP", "ANNOTATION_ID_PRIMARY_FIELD", "ANNOTATION_ID_EXCLUSIVE_STATE", "ANNOTATION_ID_PRIMARY_FIELD_FIRST_UID", "ANNOTATION_ID_DEFAULT_STATE", "ANNOTATION_ID_TRIGGER_STATE_RESET", "ANNOTATION_ID_STATE_NESTED", "ANNOTATION_ID_RESTRICTION_CATEGORY", "ANNOTATION_ID_FIELD_RESTRICTION_PERIPHERAL_DEVICE_INFO", "ANNOTATION_ID_FIELD_RESTRICTION_APP_USAGE", "ANNOTATION_ID_FIELD_RESTRICTION_APP_ACTIVITY", "ANNOTATION_ID_FIELD_RESTRICTION_HEALTH_CONNECT", "ANNOTATION_ID_FIELD_RESTRICTION_ACCESSIBILITY", "ANNOTATION_ID_FIELD_RESTRICTION_SYSTEM_SEARCH", "ANNOTATION_ID_FIELD_RESTRICTION_USER_ENGAGEMENT", "ANNOTATION_ID_FIELD_RESTRICTION_AMBIENT_SENSING", "ANNOTATION_ID_FIELD_RESTRICTION_DEMOGRAPHIC_CLASSIFICATION", "RESTRICTION_CATEGORY_DIAGNOSTIC", "RESTRICTION_CATEGORY_SYSTEM_INTELLIGENCE", "RESTRICTION_CATEGORY_AUTHENTICATION", "RESTRICTION_CATEGORY_FRAUD_AND_ABUSE" ]
}