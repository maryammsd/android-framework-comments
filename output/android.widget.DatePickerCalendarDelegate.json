{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/DatePickerCalendarDelegate.java",
  "packageName" : "android.widget",
  "className" : "DatePickerCalendarDelegate",
  "comment" : "\n * A delegate for picking up a date (day / month / year).\n ",
  "variables" : [ {
    "name" : "USE_LOCALE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNINITIALIZED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_MONTH_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VIEW_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_START_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_END_YEAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIMATION_DURATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_TEXT_COLOR",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_DISABLED_ALPHA",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYearFormat",
    "type" : "DateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMonthDayFormat",
    "type" : "DateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContainer",
    "type" : "ViewGroup",
    "comment" : " Top-level container.",
    "links" : [ ]
  }, {
    "name" : "mHeaderYear",
    "type" : "TextView",
    "comment" : " Header views.",
    "links" : [ ]
  }, {
    "name" : "mHeaderMonthDay",
    "type" : "TextView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimator",
    "type" : "ViewAnimator",
    "comment" : " Picker views.",
    "links" : [ ]
  }, {
    "name" : "mDayPickerView",
    "type" : "DayPickerView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mYearPickerView",
    "type" : "YearPickerView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSelectDay",
    "type" : "String",
    "comment" : " Accessibility strings.",
    "links" : [ ]
  }, {
    "name" : "mSelectYear",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentView",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxDate",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFirstDayOfWeek",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDaySelectedListener",
    "type" : "OnDaySelectedListener",
    "comment" : "\n     * Listener called when the user selects a day in the day picker view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnYearSelectedListener",
    "type" : "OnYearSelectedListener",
    "comment" : "\n     * Listener called when the user selects a year in the year picker view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnHeaderClickListener",
    "type" : "OnClickListener",
    "comment" : "\n     * Listener called when the user clicks on a header item.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private ColorStateList applyLegacyColorFixes(@Nullable ColorStateList color)",
    "returnType" : "ColorStateList",
    "comment" : "\n     * The legacy text color might have been poorly defined. Ensures that it\n     * has an appropriate activated state, using the selected state if one\n     * exists or modifying the default text color otherwise.\n     *\n     * @param color a legacy text color, or {@code null}\n     * @return a color state list with an appropriate activated state, or\n     *         {@code null} if a valid activated state could not be generated\n     ",
    "links" : [ ]
  }, {
    "name" : "private int multiplyAlphaComponent(int color, float alphaMod)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onLocaleChanged(Locale locale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onCurrentDateChanged(boolean announce)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setCurrentView(final int viewIndex)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void init(int year, int month, int dayOfMonth, DatePicker.OnDateChangedListener callBack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateDate(int year, int month, int dayOfMonth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDate(int year, int month, int dayOfMonth)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onDateChanged(boolean fromUser, boolean callbackToClient)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getYear()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMonth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getDayOfMonth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMinDate(long minDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Calendar getMinDate()",
    "returnType" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMaxDate(long maxDate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Calendar getMaxDate()",
    "returnType" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFirstDayOfWeek(int firstDayOfWeek)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFirstDayOfWeek()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CalendarView getCalendarView()",
    "returnType" : "CalendarView",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCalendarViewShown(boolean shown)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getCalendarViewShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSpinnersShown(boolean shown)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSpinnersShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(Configuration newConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Parcelable onSaveInstanceState(Parcelable superState)",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getDaysInMonth(int month, int year)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void tryVibrate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "USE_LOCALE", "UNINITIALIZED", "VIEW_MONTH_DAY", "VIEW_YEAR", "DEFAULT_START_YEAR", "DEFAULT_END_YEAR", "ANIMATION_DURATION", "ATTRS_TEXT_COLOR", "ATTRS_DISABLED_ALPHA", "mYearFormat", "mMonthDayFormat", "mContainer", "mHeaderYear", "mHeaderMonthDay", "mAnimator", "mDayPickerView", "mYearPickerView", "mSelectDay", "mSelectYear", "mCurrentView", "mTempDate", "mMinDate", "mMaxDate", "mFirstDayOfWeek", "mOnDaySelectedListener", "mOnYearSelectedListener", "mOnHeaderClickListener" ],
  "methodNames" : [ "private ColorStateList applyLegacyColorFixes(@Nullable ColorStateList color)", "private int multiplyAlphaComponent(int color, float alphaMod)", "protected void onLocaleChanged(Locale locale)", "private void onCurrentDateChanged(boolean announce)", "private void setCurrentView(final int viewIndex)", "public void init(int year, int month, int dayOfMonth, DatePicker.OnDateChangedListener callBack)", "public void updateDate(int year, int month, int dayOfMonth)", "private void setDate(int year, int month, int dayOfMonth)", "private void onDateChanged(boolean fromUser, boolean callbackToClient)", "public int getYear()", "public int getMonth()", "public int getDayOfMonth()", "public void setMinDate(long minDate)", "public Calendar getMinDate()", "public void setMaxDate(long maxDate)", "public Calendar getMaxDate()", "public void setFirstDayOfWeek(int firstDayOfWeek)", "public int getFirstDayOfWeek()", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public CalendarView getCalendarView()", "public void setCalendarViewShown(boolean shown)", "public boolean getCalendarViewShown()", "public void setSpinnersShown(boolean shown)", "public boolean getSpinnersShown()", "public void onConfigurationChanged(Configuration newConfig)", "public Parcelable onSaveInstanceState(Parcelable superState)", "public void onRestoreInstanceState(Parcelable state)", "public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event)", "public CharSequence getAccessibilityClassName()", "private static int getDaysInMonth(int month, int year)", "private void tryVibrate()" ]
}