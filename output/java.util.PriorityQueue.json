{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/PriorityQueue.java",
  "packageName" : "java.util",
  "className" : "PriorityQueue",
  "comment" : "\n * An unbounded priority {@linkplain Queue queue} based on a priority heap.\n * The elements of the priority queue are ordered according to their\n * {@linkplain Comparable natural ordering}, or by a {@link Comparator}\n * provided at queue construction time, depending on which constructor is\n * used.  A priority queue does not permit {@code null} elements.\n * A priority queue relying on natural ordering also does not permit\n * insertion of non-comparable objects (doing so may result in\n * {@code ClassCastException}).\n *\n * <p>The <em>head</em> of this queue is the <em>least</em> element\n * with respect to the specified ordering.  If multiple elements are\n * tied for least value, the head is one of those elements -- ties are\n * broken arbitrarily.  The queue retrieval operations {@code poll},\n * {@code remove}, {@code peek}, and {@code element} access the\n * element at the head of the queue.\n *\n * <p>A priority queue is unbounded, but has an internal\n * <i>capacity</i> governing the size of an array used to store the\n * elements on the queue.  It is always at least as large as the queue\n * size.  As elements are added to a priority queue, its capacity\n * grows automatically.  The details of the growth policy are not\n * specified.\n *\n * <p>This class and its iterator implement all of the\n * <em>optional</em> methods of the {@link Collection} and {@link\n * Iterator} interfaces.  The Iterator provided in method {@link\n * #iterator()} and the Spliterator provided in method {@link #spliterator()}\n * are <em>not</em> guaranteed to traverse the elements of\n * the priority queue in any particular order. If you need ordered\n * traversal, consider using {@code Arrays.sort(pq.toArray())}.\n *\n * <p><strong>Note that this implementation is not synchronized.</strong>\n * Multiple threads should not access a {@code PriorityQueue}\n * instance concurrently if any of the threads modifies the queue.\n * Instead, use the thread-safe {@link\n * java.util.concurrent.PriorityBlockingQueue} class.\n *\n * <p>Implementation note: this implementation provides\n * O(log(n)) time for the enqueuing and dequeuing methods\n * ({@code offer}, {@code poll}, {@code remove()} and {@code add});\n * linear time for the {@code remove(Object)} and {@code contains(Object)}\n * methods; and constant time for the retrieval methods\n * ({@code peek}, {@code element}, and {@code size}).\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Josh Bloch, Doug Lea\n * @param <E> the type of elements held in this queue\n ",
  "links" : [ "#iterator()", "java.util.Iterator", "#spliterator()", "java.util.Collection", "java.util.Comparator", "java.util.concurrent.PriorityBlockingQueue" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_INITIAL_CAPACITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "queue",
    "type" : "Object[]",
    "comment" : " non-private to simplify nested class access",
    "links" : [ ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "\n     * The number of elements in the priority queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "comparator",
    "type" : "Comparator<? super E>",
    "comment" : "\n     * The comparator, or null if priority queue uses elements'\n     * natural ordering.\n     ",
    "links" : [ ]
  }, {
    "name" : "modCount",
    "type" : "int",
    "comment" : " non-private to simplify nested class access",
    "links" : [ ]
  }, {
    "name" : "PRIORITY_QUEUE_OFFER_NON_COMPARABLE_ONE_ELEMENT",
    "type" : "long",
    "comment" : "\n     * Since Android 14, {@link PriorityQueue#offer(E)} requires all elements to be comparable if\n     * there was no comparator. Previously, the first element being added did not need to be\n     * comparable.\n     *\n     * This flag is enabled for apps targeting Android 14+.\n     *\n     * @hide\n     ",
    "links" : [ "java.util.PriorityQueue#offer(E)" ]
  } ],
  "methods" : [ {
    "name" : "private static Object[] ensureNonEmpty(Object[] es)",
    "returnType" : "Object[]",
    "comment" : " Ensures that queue[0] exists, helping peek() and poll(). ",
    "links" : [ ]
  }, {
    "name" : "private void initFromPriorityQueue(PriorityQueue<? extends E> c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initElementsFromCollection(Collection<? extends E> c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initFromCollection(Collection<? extends E> c)",
    "returnType" : "void",
    "comment" : "\n     * Initializes queue array with elements from the given Collection.\n     *\n     * @param c the collection\n     ",
    "links" : [ ]
  }, {
    "name" : "private void grow(int minCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Increases the capacity of the array.\n     *\n     * @param minCapacity the desired minimum capacity\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     *\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with elements currently in this priority queue\n     *         according to the priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element into this priority queue.\n     *\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with elements currently in this priority queue\n     *         according to the priority queue's ordering\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Queue#offer" ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this queue,\n     * if it is present.  More formally, removes an element {@code e} such\n     * that {@code o.equals(e)}, if this queue contains one or more such\n     * elements.  Returns {@code true} if and only if this queue contained\n     * the specified element (or equivalently, if this queue changed as a\n     * result of the call).\n     *\n     * @param o element to be removed from this queue, if present\n     * @return {@code true} if this queue changed as a result of the call\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeEq(Object o)",
    "returnType" : "void",
    "comment" : "\n     * Identity-based version for use in Itr.remove.\n     *\n     * @param o element to be removed from this queue, if present\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this queue contains the specified element.\n     * More formally, returns {@code true} if and only if this queue contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this queue\n     * @return {@code true} if this queue contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue.\n     * The elements are in no particular order.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this queue.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this queue; the\n     * runtime type of the returned array is that of the specified array.\n     * The returned array elements are in no particular order.\n     * If the queue fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this queue.\n     *\n     * <p>If the queue fits in the specified array with room to spare\n     * (i.e., the array has more elements than the queue), the element in\n     * the array immediately following the end of the collection is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a queue known to contain only strings.\n     * The following code can be used to dump the queue into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the queue are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose.\n     * @return an array containing all of the elements in this queue\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this queue\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this queue. The iterator\n     * does not return the elements in any particular order.\n     *\n     * @return an iterator over the elements in this queue\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this priority queue.\n     * The queue will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " E removeAt(int i)",
    "returnType" : "E",
    "comment" : "\n     * Removes the ith element from queue.\n     *\n     * Normally this method leaves the elements at up to i-1,\n     * inclusive, untouched.  Under these circumstances, it returns\n     * null.  Occasionally, in order to maintain the heap invariant,\n     * it must swap a later element of the list with one earlier than\n     * i.  Under these circumstances, this method returns the element\n     * that was previously at the end of the list and is now at some\n     * position before i. This fact is used by iterator.remove so as to\n     * avoid missing traversing elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void siftUp(int k, E x)",
    "returnType" : "void",
    "comment" : "\n     * Inserts item x at position k, maintaining heap invariant by\n     * promoting x up the tree until it is greater than or equal to\n     * its parent, or is the root.\n     *\n     * To simplify and speed up coercions and comparisons, the\n     * Comparable and Comparator versions are separated into different\n     * methods that are otherwise identical. (Similarly for siftDown.)\n     *\n     * @param k the position to fill\n     * @param x the item to insert\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void siftUpComparable(int k, T x, Object[] es)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void siftUpUsingComparator(int k, T x, Object[] es, Comparator<? super T> cmp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void siftDown(int k, E x)",
    "returnType" : "void",
    "comment" : "\n     * Inserts item x at position k, maintaining heap invariant by\n     * demoting x down the tree repeatedly until it is less than or\n     * equal to its children or is a leaf.\n     *\n     * @param k the position to fill\n     * @param x the item to insert\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void siftDownComparable(int k, T x, Object[] es, int n)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void siftDownUsingComparator(int k, T x, Object[] es, int n, Comparator<? super T> cmp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void heapify()",
    "returnType" : "void",
    "comment" : "\n     * Establishes the heap invariant (described above) in the entire tree,\n     * assuming nothing about the order of the elements prior to the call.\n     * This classic algorithm due to Floyd (1964) is known to be O(size).\n     ",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super E> comparator()",
    "returnType" : "Comparator<? super E>",
    "comment" : "\n     * Returns the comparator used to order the elements in this\n     * queue, or {@code null} if this queue is sorted according to\n     * the {@linkplain Comparable natural ordering} of its elements.\n     *\n     * @return the comparator used to order this queue, or\n     *         {@code null} if this queue is sorted according to the\n     *         natural ordering of its elements\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this queue to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData The length of the array backing the instance is\n     *             emitted (int), followed by all of its elements\n     *             (each an {@code Object}) in the proper order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes the {@code PriorityQueue} instance from a stream\n     * (that is, deserializes it).\n     *\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * and <em>fail-fast</em> {@link Spliterator} over the elements in this\n     * queue. The spliterator does not traverse elements in any particular order\n     * (the {@link Spliterator#ORDERED ORDERED} characteristic is not reported).\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED},\n     * {@link Spliterator#SUBSIZED}, and {@link Spliterator#NONNULL}.\n     * Overriding implementations should document the reporting of additional\n     * characteristic values.\n     *\n     * @return a {@code Spliterator} over the elements in this queue\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#NONNULL", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Object[] ensureNonEmpty(Object[] es)", "private void initFromPriorityQueue(PriorityQueue<? extends E> c)", "private void initElementsFromCollection(Collection<? extends E> c)", "private void initFromCollection(Collection<? extends E> c)", "private void grow(int minCapacity)", "public boolean add(E e)", "public boolean offer(E e)", "public E peek()", "private int indexOf(Object o)", "public boolean remove(Object o)", " void removeEq(Object o)", "public boolean contains(Object o)", "public Object[] toArray()", "public T[] toArray(T[] a)", "public Iterator<E> iterator()", "public int size()", "public void clear()", "public E poll()", " E removeAt(int i)", "private void siftUp(int k, E x)", "private static void siftUpComparable(int k, T x, Object[] es)", "private static void siftUpUsingComparator(int k, T x, Object[] es, Comparator<? super T> cmp)", "private void siftDown(int k, E x)", "private static void siftDownComparable(int k, T x, Object[] es, int n)", "private static void siftDownUsingComparator(int k, T x, Object[] es, int n, Comparator<? super T> cmp)", "private void heapify()", "public Comparator<? super E> comparator()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public final Spliterator<E> spliterator()", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private boolean bulkRemove(Predicate<? super E> filter)", "public void forEach(Consumer<? super E> action)" ],
  "variableNames" : [ "serialVersionUID", "DEFAULT_INITIAL_CAPACITY", "queue", "size", "comparator", "modCount", "PRIORITY_QUEUE_OFFER_NON_COMPARABLE_ONE_ELEMENT" ]
}