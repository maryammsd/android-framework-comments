{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/PopupMenu.java",
  "packageName" : "android.widget",
  "className" : "PopupMenu",
  "comment" : "\n * A PopupMenu displays a {@link Menu} in a modal popup window anchored to a\n * {@link View}. The popup will appear below the anchor view if there is room,\n * or above it if there is not. If the IME is visible the popup will not\n * overlap it until it is touched. Touching outside of the popup will dismiss\n * it.\n ",
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenu",
    "type" : "MenuBuilder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchor",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPopup",
    "type" : "MenuPopupHelper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMenuItemClickListener",
    "type" : "OnMenuItemClickListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnDismissListener",
    "type" : "OnDismissListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDragListener",
    "type" : "OnTouchListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setGravity(int gravity)",
    "returnType" : "void",
    "comment" : "\n     * Sets the gravity used to align the popup window to its anchor view.\n     * <p>\n     * If the popup is showing, calling this method will take effect only\n     * the next time the popup is shown.\n     *\n     * @param gravity the gravity used to align the popup window\n     * @see #getGravity()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGravity()",
    "returnType" : "int",
    "comment" : "\n     * @return the gravity used to align the popup window to its anchor view\n     * @see #setGravity(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnTouchListener getDragToOpenListener()",
    "returnType" : "OnTouchListener",
    "comment" : "\n     * Returns an {@link OnTouchListener} that can be added to the anchor view\n     * to implement drag-to-open behavior.\n     * <p>\n     * When the listener is set on a view, touching that view and dragging\n     * outside of its bounds will open the popup window. Lifting will select\n     * the currently touched list item.\n     * <p>\n     * Example usage:\n     * <pre>\n     * PopupMenu myPopup = new PopupMenu(context, myAnchor);\n     * myAnchor.setOnTouchListener(myPopup.getDragToOpenListener());\n     * </pre>\n     *\n     * @return a touch listener that controls drag-to-open behavior\n     ",
    "links" : [ "OnTouchListener" ]
  }, {
    "name" : "public Menu getMenu()",
    "returnType" : "Menu",
    "comment" : "\n     * Returns the {@link Menu} associated with this popup. Populate the\n     * returned Menu with items before calling {@link #show()}.\n     *\n     * @return the {@link Menu} associated with this popup\n     * @see #show()\n     * @see #getMenuInflater()\n     ",
    "links" : [ "Menu", "#show", "Menu" ]
  }, {
    "name" : "public MenuInflater getMenuInflater()",
    "returnType" : "MenuInflater",
    "comment" : "\n     * @return a {@link MenuInflater} that can be used to inflate menu items\n     *         from XML into the menu returned by {@link #getMenu()}\n     * @see #getMenu()\n     ",
    "links" : [ "MenuInflater", "#getMenu" ]
  }, {
    "name" : "public void inflate(@MenuRes int menuRes)",
    "returnType" : "void",
    "comment" : "\n     * Inflate a menu resource into this PopupMenu. This is equivalent to\n     * calling {@code popupMenu.getMenuInflater().inflate(menuRes, popupMenu.getMenu())}.\n     *\n     * @param menuRes Menu resource to inflate\n     ",
    "links" : [ ]
  }, {
    "name" : "public void show()",
    "returnType" : "void",
    "comment" : "\n     * Show the menu popup anchored to the view specified during construction.\n     *\n     * @see #dismiss()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dismiss()",
    "returnType" : "void",
    "comment" : "\n     * Dismiss the menu popup.\n     *\n     * @see #show()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener that will be notified when the user selects an item from\n     * the menu.\n     *\n     * @param listener the listener to notify\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnDismissListener(OnDismissListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener that will be notified when this menu is dismissed.\n     *\n     * @param listener the listener to notify\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setForceShowIcon(boolean forceShowIcon)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the popup menu's adapter is forced to show icons in the\n     * menu item views.\n     * <p>\n     * Changes take effect on the next call to show().\n     *\n     * @param forceShowIcon {@code true} to force icons to be shown, or\n     *                  {@code false} for icons to be optionally shown\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListView getMenuListView()",
    "returnType" : "ListView",
    "comment" : "\n     * Returns the {@link ListView} representing the list of menu items in the currently showing\n     * menu.\n     *\n     * @return The view representing the list of menu items.\n     * @hide\n     ",
    "links" : [ "ListView" ]
  } ],
  "variableNames" : [ "mContext", "mMenu", "mAnchor", "mPopup", "mMenuItemClickListener", "mOnDismissListener", "mDragListener" ],
  "methodNames" : [ "public void setGravity(int gravity)", "public int getGravity()", "public OnTouchListener getDragToOpenListener()", "public Menu getMenu()", "public MenuInflater getMenuInflater()", "public void inflate(@MenuRes int menuRes)", "public void show()", "public void dismiss()", "public void setOnMenuItemClickListener(OnMenuItemClickListener listener)", "public void setOnDismissListener(OnDismissListener listener)", "public void setForceShowIcon(boolean forceShowIcon)", "public ListView getMenuListView()" ]
}