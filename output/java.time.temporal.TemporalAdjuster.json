{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/TemporalAdjuster.java",
  "packageName" : "java.time.temporal",
  "className" : "TemporalAdjuster",
  "comment" : "\n * Strategy for adjusting a temporal object.\n * <p>\n * Adjusters are a key tool for modifying temporal objects.\n * They exist to externalize the process of adjustment, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\n * sets the date to the last day of the month.\n * <p>\n * There are two equivalent ways of using a {@code TemporalAdjuster}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link Temporal#with(TemporalAdjuster)}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisAdjuster.adjustInto(temporal);\n *   temporal = temporal.with(thisAdjuster);\n * </pre>\n * It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n * as it is a lot clearer to read in code.\n * <p>\n * The {@link TemporalAdjusters} class contains a standard set of adjusters,\n * available as static methods.\n * These include:\n * <ul>\n * <li>finding the first or last day of the month\n * <li>finding the first day of next month\n * <li>finding the first or last day of the year\n * <li>finding the first day of next year\n * <li>finding the first or last day-of-week within a month, such as \"first Wednesday in June\"\n * <li>finding the next or previous day-of-week, such as \"next Thursday\"\n * </ul>\n *\n * @implSpec\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @see TemporalAdjusters\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.Temporal#with(TemporalAdjuster)", "java.time.temporal.TemporalAdjusters" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Temporal adjustInto(Temporal temporal)",
    "returnType" : "Temporal",
    "comment" : "\n     * Adjusts the specified temporal object.\n     * <p>\n     * This adjusts the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be an adjuster that sets the date avoiding weekends, or one that\n     * sets the date to the last day of the month.\n     * <p>\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with(TemporalAdjuster)}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisAdjuster.adjustInto(temporal);\n     *   temporal = temporal.with(thisAdjuster);\n     * </pre>\n     * It is recommended to use the second approach, {@code with(TemporalAdjuster)},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and adjust it.\n     * The implementation defines the logic of the adjustment and is responsible for\n     * documenting that logic. It may use any method on {@code Temporal} to\n     * query the temporal object and perform the adjustment.\n     * The returned object must have the same observable type as the input object\n     * <p>\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     * <p>\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.\n     * <p>\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param temporal  the temporal object to adjust, not null\n     * @return an object of the same observable type with the adjustment made, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     ",
    "links" : [ "java.time.temporal.Temporal#with(TemporalAdjuster)", "java.time.temporal.TemporalQueries#chronology()" ]
  } ],
  "methodNames" : [ " Temporal adjustInto(Temporal temporal)" ],
  "variableNames" : [ ]
}