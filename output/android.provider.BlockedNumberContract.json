{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/BlockedNumberContract.java",
  "packageName" : "android.provider",
  "className" : "BlockedNumberContract",
  "comment" : "\n * <p>\n * The contract between the blockednumber provider and applications. Contains definitions for\n * the supported URIs and columns.\n * </p>\n *\n * <h3> Overview </h3>\n * <p>\n * The content provider exposes a table containing blocked numbers. The columns and URIs for\n * accessing this table are defined by the {@link BlockedNumbers} class. Messages, and calls from\n * blocked numbers are discarded by the platform. Notifications upon provider changes can be\n * received using a {@link android.database.ContentObserver}.\n * </p>\n * <p>\n * The platform will not block messages, and calls from emergency numbers as defined by\n * {@link android.telephony.PhoneNumberUtils#isEmergencyNumber(String)}. If the user contacts\n * emergency services, number blocking is disabled by the platform for a duration defined by\n * {@link android.telephony.CarrierConfigManager#KEY_DURATION_BLOCKING_DISABLED_AFTER_EMERGENCY_INT}.\n * </p>\n *\n * <h3> Permissions </h3>\n * <p>\n * Only the system, the default SMS application, and the default phone app\n * (See {@link android.telecom.TelecomManager#getDefaultDialerPackage()}), and carrier apps\n * (See {@link android.service.carrier.CarrierService}) can read, and write to the blockednumber\n * provider. However, {@link #canCurrentUserBlockNumbers(Context)} can be accessed by any\n * application.\n * </p>\n *\n * <h3> Data </h3>\n * <p>\n * Other than regular phone numbers, the blocked number provider can also store addresses (such\n * as email) from which a user can receive messages, and calls. The blocked numbers are stored\n * in the {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} column. A normalized version of phone\n * numbers (if normalization is possible) is stored in {@link BlockedNumbers#COLUMN_E164_NUMBER}\n * column. The platform blocks calls, and messages from an address if it is present in in the\n * {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} column or if the E164 version of the address\n * matches the {@link BlockedNumbers#COLUMN_E164_NUMBER} column.\n * </p>\n *\n * <h3> Operations </h3>\n * <dl>\n * <dt><b>Insert</b></dt>\n * <dd>\n * <p>\n * {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} is a required column that needs to be populated.\n * Apps can optionally provide the {@link BlockedNumbers#COLUMN_E164_NUMBER} which is the phone\n * number's E164 representation. The provider automatically populates this column if the app does\n * not provide it. Note that this column is not populated if normalization fails or if the address\n * is not a phone number (eg: email).\n * <p>\n * Attempting to insert an existing blocked number (same\n * {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} column) will result in replacing the existing\n * blocked number.\n * <p>\n * Examples:\n * <pre>\n * ContentValues values = new ContentValues();\n * values.put(BlockedNumbers.COLUMN_ORIGINAL_NUMBER, \"1234567890\");\n * Uri uri = getContentResolver().insert(BlockedNumbers.CONTENT_URI, values);\n * </pre>\n * <pre>\n * ContentValues values = new ContentValues();\n * values.put(BlockedNumbers.COLUMN_ORIGINAL_NUMBER, \"1234567890\");\n * values.put(BlockedNumbers.COLUMN_E164_NUMBER, \"+11234567890\");\n * Uri uri = getContentResolver().insert(BlockedNumbers.CONTENT_URI, values);\n * </pre>\n * <pre>\n * ContentValues values = new ContentValues();\n * values.put(BlockedNumbers.COLUMN_ORIGINAL_NUMBER, \"12345@abdcde.com\");\n * Uri uri = getContentResolver().insert(BlockedNumbers.CONTENT_URI, values);\n * </pre>\n * </p>\n * </dd>\n * <dt><b>Update</b></dt>\n * <dd>\n * <p>\n * Updates are not supported. Use Delete, and Insert instead.\n * </p>\n * </dd>\n * <dt><b>Delete</b></dt>\n * <dd>\n * <p>\n * Deletions can be performed as follows:\n * <pre>\n * ContentValues values = new ContentValues();\n * values.put(BlockedNumbers.COLUMN_ORIGINAL_NUMBER, \"1234567890\");\n * Uri uri = getContentResolver().insert(BlockedNumbers.CONTENT_URI, values);\n * getContentResolver().delete(uri, null, null);\n * </pre>\n * To check if a particular number is blocked, use the method\n * {@link #isBlocked(Context, String)}.\n * </p>\n * </dd>\n * <dt><b>Query</b></dt>\n * <dd>\n * <p>\n * All blocked numbers can be enumerated as follows:\n * <pre>\n * Cursor c = getContentResolver().query(BlockedNumbers.CONTENT_URI,\n *          new String[]{BlockedNumbers.COLUMN_ID, BlockedNumbers.COLUMN_ORIGINAL_NUMBER,\n *          BlockedNumbers.COLUMN_E164_NUMBER}, null, null, null);\n * </pre>\n * </p>\n * </dd>\n * <dt><b>Unblock</b></dt>\n * <dd>\n * <p>\n * Use the method {@link #unblock(Context, String)} to unblock numbers.\n * </p>\n * </dd>\n *\n * <h3> Multi-user </h3>\n * <p>\n * Apps must use the method {@link #canCurrentUserBlockNumbers(Context)} before performing any\n * operation on the blocked number provider. If {@link #canCurrentUserBlockNumbers(Context)} returns\n * {@code false}, all operations on the provider will fail with a {@link SecurityException}. The\n * platform will block calls, and messages from numbers in the provider independent of the current\n * user.\n * </p>\n ",
  "variables" : [ {
    "name" : "AUTHORITY",
    "type" : "String",
    "comment" : " The authority for the blocked number provider ",
    "links" : [ ]
  }, {
    "name" : "AUTHORITY_URI",
    "type" : "Uri",
    "comment" : " A content:// style uri to the authority for the blocked number provider ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METHOD_IS_BLOCKED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "METHOD_UNBLOCK",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RES_NUMBER_IS_BLOCKED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_BLOCKED",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was not\n     * blocked.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "STATUS_BLOCKED_IN_LIST",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was blocked\n     * because it is in the list of blocked numbers maintained by the provider.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "STATUS_BLOCKED_RESTRICTED",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was blocked\n     * because it is from a restricted number.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "STATUS_BLOCKED_UNKNOWN_NUMBER",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was blocked\n     * because it is from an unknown number.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "STATUS_BLOCKED_PAYPHONE",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was blocked\n     * because it is from a pay phone.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "STATUS_BLOCKED_NOT_IN_CONTACTS",
    "type" : "int",
    "comment" : "\n     * Integer reason code used with {@link #RES_BLOCK_STATUS} to indicate that a call was blocked\n     * because it is from a number not in the users contacts.\n     * @hide\n     ",
    "links" : [ "#RES_BLOCK_STATUS" ]
  }, {
    "name" : "RES_BLOCK_STATUS",
    "type" : "String",
    "comment" : "\n     * Integer reason indicating whether a call was blocked, and if so why.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RES_NUM_ROWS_DELETED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "METHOD_CAN_CURRENT_USER_BLOCK_NUMBERS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RES_CAN_BLOCK_NUMBERS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RES_ENHANCED_SETTING_IS_ENABLED",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "RES_SHOW_EMERGENCY_CALL_NOTIFICATION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ENHANCED_SETTING_KEY",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_ENHANCED_SETTING_VALUE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONTACT_EXIST",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL_PRESENTATION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isBlocked(Context context, String phoneNumber)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a given number is in the blocked list.\n     *\n     * <p> This matches the {@code phoneNumber} against the\n     * {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} column, and the E164 representation of the\n     * {@code phoneNumber} with the {@link BlockedNumbers#COLUMN_E164_NUMBER} column.\n     *\n     * <p> Note that if the {@link #canCurrentUserBlockNumbers} is {@code false} for the user\n     * context {@code context}, this method will throw a {@link SecurityException}.\n     *\n     * @return {@code true} if the {@code phoneNumber} is blocked.\n     ",
    "links" : [ "SecurityException", "#COLUMN_ORIGINAL_NUMBER", "#COLUMN_E164_NUMBER", "#canCurrentUserBlockNumbers" ]
  }, {
    "name" : "public static int unblock(Context context, String phoneNumber)",
    "returnType" : "int",
    "comment" : "\n     * Unblocks the {@code phoneNumber} if it is blocked.\n     *\n     * <p> This deletes all rows where the {@code phoneNumber} matches the\n     * {@link BlockedNumbers#COLUMN_ORIGINAL_NUMBER} column or the E164 representation of the\n     * {@code phoneNumber} matches the {@link BlockedNumbers#COLUMN_E164_NUMBER} column.\n     *\n     * <p>To delete rows based on exact match with specific columns such as\n     * {@link BlockedNumbers#COLUMN_ID} use\n     * {@link android.content.ContentProvider#delete(Uri, String, String[])} with\n     * {@link BlockedNumbers#CONTENT_URI} URI.\n     *\n     * <p> Note that if the {@link #canCurrentUserBlockNumbers} is {@code false} for the user\n     * context {@code context}, this method will throw a {@link SecurityException}.\n     *\n     * @return the number of rows deleted in the blocked number provider as a result of unblock.\n     ",
    "links" : [ "#COLUMN_ID", "android.content.ContentProvider#delete(Uri", "SecurityException", "#CONTENT_URI", "#COLUMN_ORIGINAL_NUMBER", "#COLUMN_E164_NUMBER", "#canCurrentUserBlockNumbers" ]
  }, {
    "name" : "public static boolean canCurrentUserBlockNumbers(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if blocking numbers is supported for the current user.\n     * <p> Typically, blocking numbers is only supported for one user at a time.\n     *\n     * @return {@code true} if the current user can block numbers.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "AUTHORITY", "AUTHORITY_URI", "LOG_TAG", "METHOD_IS_BLOCKED", "METHOD_UNBLOCK", "RES_NUMBER_IS_BLOCKED", "STATUS_NOT_BLOCKED", "STATUS_BLOCKED_IN_LIST", "STATUS_BLOCKED_RESTRICTED", "STATUS_BLOCKED_UNKNOWN_NUMBER", "STATUS_BLOCKED_PAYPHONE", "STATUS_BLOCKED_NOT_IN_CONTACTS", "RES_BLOCK_STATUS", "RES_NUM_ROWS_DELETED", "METHOD_CAN_CURRENT_USER_BLOCK_NUMBERS", "RES_CAN_BLOCK_NUMBERS", "RES_ENHANCED_SETTING_IS_ENABLED", "RES_SHOW_EMERGENCY_CALL_NOTIFICATION", "EXTRA_ENHANCED_SETTING_KEY", "EXTRA_ENHANCED_SETTING_VALUE", "EXTRA_CONTACT_EXIST", "EXTRA_CALL_PRESENTATION" ],
  "methodNames" : [ "public static boolean isBlocked(Context context, String phoneNumber)", "public static int unblock(Context context, String phoneNumber)", "public static boolean canCurrentUserBlockNumbers(Context context)" ]
}