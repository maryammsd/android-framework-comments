{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/Buffer.java",
  "packageName" : "java.nio",
  "className" : "Buffer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "UNSAFE",
    "type" : "Unsafe",
    "comment" : " Cached unsafe-access object",
    "links" : [ ]
  }, {
    "name" : "SPLITERATOR_CHARACTERISTICS",
    "type" : "int",
    "comment" : "\n     * The characteristics of Spliterators that traverse and split elements\n     * maintained in Buffers.\n     ",
    "links" : [ ]
  }, {
    "name" : "mark",
    "type" : "int",
    "comment" : " Invariants: mark <= position <= limit <= capacity",
    "links" : [ ]
  }, {
    "name" : "position",
    "type" : "int",
    "comment" : " Android-changed: position field non-private for use by Android's nio implementation classes.",
    "links" : [ ]
  }, {
    "name" : "limit",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "capacity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "address",
    "type" : "long",
    "comment" : " NOTE: hoisted here for speed in JNI GetDirectBufferAddress",
    "links" : [ ]
  }, {
    "name" : "_elementSizeShift",
    "type" : "int",
    "comment" : "\n     * The log base 2 of the element size of this buffer.  Each typed subclass\n     * (ByteBuffer, CharBuffer, etc.) is responsible for initializing this\n     * value.  The value is used by JNI code in frameworks/base/ to avoid the\n     * need for costly 'instanceof' tests.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static IllegalArgumentException createSameBufferException()",
    "returnType" : "IllegalArgumentException",
    "comment" : "\n     * Returns an {@code IllegalArgumentException} indicating that the source\n     * and target are the same {@code Buffer}.  Intended for use in\n     * {@code put(src)} when the parameter is the {@code Buffer} on which the\n     * method is being invoked.\n     *\n     * @return  IllegalArgumentException\n     *          With a message indicating equal source and target buffers\n     ",
    "links" : [ ]
  }, {
    "name" : " static IllegalArgumentException createCapacityException(int capacity)",
    "returnType" : "IllegalArgumentException",
    "comment" : "\n     * Verify that the capacity is nonnegative.\n     *\n     * @param  capacity\n     *         The new buffer's capacity, in $type$s\n     *\n     * @throws IllegalArgumentException\n     *         If the {@code capacity} is a negative integer\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int capacity()",
    "returnType" : "int",
    "comment" : "\n     * Returns this buffer's capacity.\n     *\n     * @return  The capacity of this buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int position()",
    "returnType" : "int",
    "comment" : "\n     * Returns this buffer's position.\n     *\n     * @return  The position of this buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer position(int newPosition)",
    "returnType" : "Buffer",
    "comment" : "\n     * Sets this buffer's position.  If the mark is defined and larger than the\n     * new position then it is discarded.\n     *\n     * @param  newPosition\n     *         The new position value; must be non-negative\n     *         and no larger than the current limit\n     *\n     * @return  This buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on {@code newPosition} do not hold\n     ",
    "links" : [ ]
  }, {
    "name" : "private IllegalArgumentException createPositionException(int newPosition)",
    "returnType" : "IllegalArgumentException",
    "comment" : "\n     * Verify that {@code 0 < newPosition <= limit}\n     *\n     * @param newPosition\n     *        The new position value\n     *\n     * @throws IllegalArgumentException\n     *         If the specified position is out of bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int limit()",
    "returnType" : "int",
    "comment" : "\n     * Returns this buffer's limit.\n     *\n     * @return  The limit of this buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer limit(int newLimit)",
    "returnType" : "Buffer",
    "comment" : "\n     * Sets this buffer's limit.  If the position is larger than the new limit\n     * then it is set to the new limit.  If the mark is defined and larger than\n     * the new limit then it is discarded.\n     *\n     * @param  newLimit\n     *         The new limit value; must be non-negative\n     *         and no larger than this buffer's capacity\n     *\n     * @return  This buffer\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on {@code newLimit} do not hold\n     ",
    "links" : [ ]
  }, {
    "name" : "private IllegalArgumentException createLimitException(int newLimit)",
    "returnType" : "IllegalArgumentException",
    "comment" : "\n     * Verify that {@code 0 < newLimit <= capacity}\n     *\n     * @param newLimit\n     *        The new limit value\n     *\n     * @throws IllegalArgumentException\n     *         If the specified limit is out of bounds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer mark()",
    "returnType" : "Buffer",
    "comment" : "\n     * Sets this buffer's mark at its position.\n     *\n     * @return  This buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer reset()",
    "returnType" : "Buffer",
    "comment" : "\n     * Resets this buffer's position to the previously-marked position.\n     *\n     * <p> Invoking this method neither changes nor discards the mark's\n     * value. </p>\n     *\n     * @return  This buffer\n     *\n     * @throws  InvalidMarkException\n     *          If the mark has not been set\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer clear()",
    "returnType" : "Buffer",
    "comment" : "\n     * Clears this buffer.  The position is set to zero, the limit is set to\n     * the capacity, and the mark is discarded.\n     *\n     * <p> Invoke this method before using a sequence of channel-read or\n     * <i>put</i> operations to fill this buffer.  For example:\n     *\n     * <blockquote><pre>\n     * buf.clear();     // Prepare buffer for reading\n     * in.read(buf);    // Read data</pre></blockquote>\n     *\n     * <p> This method does not actually erase the data in the buffer, but it\n     * is named as if it did because it will most often be used in situations\n     * in which that might as well be the case. </p>\n     *\n     * @return  This buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public Buffer flip()",
    "returnType" : "Buffer",
    "comment" : "\n     * Flips this buffer.  The limit is set to the current position and then\n     * the position is set to zero.  If the mark is defined then it is\n     * discarded.\n     *\n     * <p> After a sequence of channel-read or <i>put</i> operations, invoke\n     * this method to prepare for a sequence of channel-write or relative\n     * <i>get</i> operations.  For example:\n     *\n     * <blockquote><pre>\n     * buf.put(magic);    // Prepend header\n     * in.read(buf);      // Read data into rest of buffer\n     * buf.flip();        // Flip buffer\n     * out.write(buf);    // Write header + data to channel</pre></blockquote>\n     *\n     * <p> This method is often used in conjunction with the {@link\n     * java.nio.ByteBuffer#compact compact} method when transferring data from\n     * one place to another.  </p>\n     *\n     * @return  This buffer\n     ",
    "links" : [ "java.nio.ByteBuffer#compact" ]
  }, {
    "name" : "public Buffer rewind()",
    "returnType" : "Buffer",
    "comment" : "\n     * Rewinds this buffer.  The position is set to zero and the mark is\n     * discarded.\n     *\n     * <p> Invoke this method before a sequence of channel-write or <i>get</i>\n     * operations, assuming that the limit has already been set\n     * appropriately.  For example:\n     *\n     * <blockquote><pre>\n     * out.write(buf);    // Write remaining data\n     * buf.rewind();      // Rewind buffer\n     * buf.get(array);    // Copy data into array</pre></blockquote>\n     *\n     * @return  This buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int remaining()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements between the current position and the\n     * limit.\n     *\n     * @return  The number of elements remaining in this buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasRemaining()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether there are any elements between the current position and\n     * the limit.\n     *\n     * @return  {@code true} if, and only if, there is at least one element\n     *          remaining in this buffer\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isReadOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this buffer is read-only.\n     *\n     * @return  {@code true} if, and only if, this buffer is read-only\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean hasArray()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this buffer is backed by an accessible\n     * array.\n     *\n     * <p> If this method returns {@code true} then the {@link #array() array}\n     * and {@link #arrayOffset() arrayOffset} methods may safely be invoked.\n     * </p>\n     *\n     * @return  {@code true} if, and only if, this buffer\n     *          is backed by an array and is not read-only\n     *\n     * @since 1.6\n     ",
    "links" : [ "#array()", "#arrayOffset()" ]
  }, {
    "name" : "public abstract Object array()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the array that backs this\n     * buffer&nbsp;&nbsp;<i>(optional operation)</i>.\n     *\n     * <p> This method is intended to allow array-backed buffers to be\n     * passed to native code more efficiently. Concrete subclasses\n     * provide more strongly-typed return values for this method.\n     *\n     * <p> Modifications to this buffer's content will cause the returned\n     * array's content to be modified, and vice versa.\n     *\n     * <p> Invoke the {@link #hasArray hasArray} method before invoking this\n     * method in order to ensure that this buffer has an accessible backing\n     * array.  </p>\n     *\n     * @return  The array that backs this buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is backed by an array but is read-only\n     *\n     * @throws  UnsupportedOperationException\n     *          If this buffer is not backed by an accessible array\n     *\n     * @since 1.6\n     ",
    "links" : [ "#hasArray" ]
  }, {
    "name" : "public abstract int arrayOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the offset within this buffer's backing array of the first\n     * element of the buffer&nbsp;&nbsp;<i>(optional operation)</i>.\n     *\n     * <p> If this buffer is backed by an array then buffer position <i>p</i>\n     * corresponds to array index <i>p</i>&nbsp;+&nbsp;{@code arrayOffset()}.\n     *\n     * <p> Invoke the {@link #hasArray hasArray} method before invoking this\n     * method in order to ensure that this buffer has an accessible backing\n     * array.  </p>\n     *\n     * @return  The offset within this buffer's array\n     *          of the first element of the buffer\n     *\n     * @throws  ReadOnlyBufferException\n     *          If this buffer is backed by an array but is read-only\n     *\n     * @throws  UnsupportedOperationException\n     *          If this buffer is not backed by an accessible array\n     *\n     * @since 1.6\n     ",
    "links" : [ "#hasArray" ]
  }, {
    "name" : "public abstract boolean isDirect()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this buffer is\n     * <a href=\"ByteBuffer.html#direct\"><i>direct</i></a>.\n     *\n     * @return  {@code true} if, and only if, this buffer is direct\n     *\n     * @since 1.6\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Buffer slice()",
    "returnType" : "Buffer",
    "comment" : "\n     * Creates a new buffer whose content is a shared subsequence of\n     * this buffer's content.\n     *\n     * <p> The content of the new buffer will start at this buffer's current\n     * position.  Changes to this buffer's content will be visible in the new\n     * buffer, and vice versa; the two buffers' position, limit, and mark\n     * values will be independent.\n     *\n     * <p> The new buffer's position will be zero, its capacity and its limit\n     * will be the number of elements remaining in this buffer, its mark will be\n     * undefined. The new buffer will be direct if, and only if, this buffer is\n     * direct, and it will be read-only if, and only if, this buffer is\n     * read-only.  </p>\n     *\n     * @return  The new buffer\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Buffer slice(int index, int length)",
    "returnType" : "Buffer",
    "comment" : "\n     * Creates a new buffer whose content is a shared subsequence of\n     * this buffer's content.\n     *\n     * <p> The content of the new buffer will start at position {@code index}\n     * in this buffer, and will contain {@code length} elements. Changes to\n     * this buffer's content will be visible in the new buffer, and vice versa;\n     * the two buffers' position, limit, and mark values will be independent.\n     *\n     * <p> The new buffer's position will be zero, its capacity and its limit\n     * will be {@code length}, its mark will be undefined. The new buffer will\n     * be direct if, and only if, this buffer is direct, and it will be\n     * read-only if, and only if, this buffer is read-only.  </p>\n     *\n     * @param   index\n     *          The position in this buffer at which the content of the new\n     *          buffer will start; must be non-negative and no larger than\n     *          {@link #limit() limit()}\n     *\n     * @param   length\n     *          The number of elements the new buffer will contain; must be\n     *          non-negative and no larger than {@code limit() - index}\n     *\n     * @return  The new buffer\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code index} is negative or greater than {@code limit()},\n     *          {@code length} is negative, or {@code length > limit() - index}\n     *\n     * @since 13\n     ",
    "links" : [ "#limit()" ]
  }, {
    "name" : "public abstract Buffer duplicate()",
    "returnType" : "Buffer",
    "comment" : "\n     * Creates a new buffer that shares this buffer's content.\n     *\n     * <p> The content of the new buffer will be that of this buffer.  Changes\n     * to this buffer's content will be visible in the new buffer, and vice\n     * versa; the two buffers' position, limit, and mark values will be\n     * independent.\n     *\n     * <p> The new buffer's capacity, limit, position and mark values will be\n     * identical to those of this buffer. The new buffer will be direct if, and\n     * only if, this buffer is direct, and it will be read-only if, and only if,\n     * this buffer is read-only.  </p>\n     *\n     * @return  The new buffer\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract Object base()",
    "returnType" : "Object",
    "comment" : "\n     *\n     * @return the base reference, paired with the address\n     * field, which in combination can be used for unsafe access into a heap\n     * buffer or direct byte buffer (and views of).\n     ",
    "links" : [ ]
  }, {
    "name" : " final int nextGetIndex()",
    "returnType" : "int",
    "comment" : "\n     * Checks the current position against the limit, throwing a {@link\n     * BufferUnderflowException} if it is not smaller than the limit, and then\n     * increments the position.\n     *\n     * @return  The current position value, before it is incremented\n     ",
    "links" : [ "java.nio.BufferUnderflowException" ]
  }, {
    "name" : " final int nextGetIndex(int nb)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int nextPutIndex()",
    "returnType" : "int",
    "comment" : "\n     * Checks the current position against the limit, throwing a {@link\n     * BufferOverflowException} if it is not smaller than the limit, and then\n     * increments the position.\n     *\n     * @return  The current position value, before it is incremented\n     ",
    "links" : [ "java.nio.BufferOverflowException" ]
  }, {
    "name" : " final int nextPutIndex(int nb)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int checkIndex(int i)",
    "returnType" : "int",
    "comment" : "\n     * Checks the given index against the limit, throwing an {@link\n     * IndexOutOfBoundsException} if it is not smaller than the limit\n     * or is smaller than zero.\n     ",
    "links" : [ "IndexOutOfBoundsException" ]
  }, {
    "name" : " final int checkIndex(int i, int nb)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int markValue()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void discardMark()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void checkBounds(int off, int len, int size)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final void checkScope()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getElementSizeShift()",
    "returnType" : "int",
    "comment" : "\n     * For testing only. This field is accessed directly via JNI from frameworks code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " static IllegalArgumentException createSameBufferException()", " static IllegalArgumentException createCapacityException(int capacity)", "public final int capacity()", "public final int position()", "public Buffer position(int newPosition)", "private IllegalArgumentException createPositionException(int newPosition)", "public final int limit()", "public Buffer limit(int newLimit)", "private IllegalArgumentException createLimitException(int newLimit)", "public Buffer mark()", "public Buffer reset()", "public Buffer clear()", "public Buffer flip()", "public Buffer rewind()", "public final int remaining()", "public final boolean hasRemaining()", "public abstract boolean isReadOnly()", "public abstract boolean hasArray()", "public abstract Object array()", "public abstract int arrayOffset()", "public abstract boolean isDirect()", "public abstract Buffer slice()", "public abstract Buffer slice(int index, int length)", "public abstract Buffer duplicate()", " abstract Object base()", " final int nextGetIndex()", " final int nextGetIndex(int nb)", " final int nextPutIndex()", " final int nextPutIndex(int nb)", " final int checkIndex(int i)", " final int checkIndex(int i, int nb)", " final int markValue()", " final void discardMark()", " static void checkBounds(int off, int len, int size)", " final void checkScope()", "public int getElementSizeShift()" ],
  "variableNames" : [ "UNSAFE", "SPLITERATOR_CHARACTERISTICS", "mark", "position", "limit", "capacity", "address", "_elementSizeShift" ]
}