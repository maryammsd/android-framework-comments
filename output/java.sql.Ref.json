{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/sql/Ref.java",
  "packageName" : "java.sql",
  "className" : "Ref",
  "comment" : "\n * The mapping in the Java programming language of an SQL <code>REF</code>\n * value, which is a reference to an SQL structured type value in the database.\n * <P>\n * SQL <code>REF</code> values are stored in a table that contains\n * instances of a referenceable SQL structured type, and each <code>REF</code>\n * value is a unique identifier for one instance in that table.\n * An SQL <code>REF</code> value may be used in place of the\n * SQL structured type it references, either as a column value in a\n * table or an attribute value in a structured type.\n * <P>\n * Because an SQL <code>REF</code> value is a logical pointer to an\n * SQL structured type, a <code>Ref</code> object is by default also a logical\n * pointer. Thus, retrieving an SQL <code>REF</code> value as\n * a <code>Ref</code> object does not materialize\n * the attributes of the structured type on the client.\n * <P>\n * A <code>Ref</code> object can be stored in the database using the\n * <code>PreparedStatement.setRef</code> method.\n  * <p>\n * All methods on the <code>Ref</code> interface must be fully implemented if the\n * JDBC driver supports the data type.\n *\n * @see Struct\n * @since 1.2\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String getBaseTypeName() throws SQLException",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the fully-qualified SQL name of the SQL structured type that\n     * this <code>Ref</code> object references.\n     *\n     * @return the fully-qualified SQL name of the referenced SQL structured type\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject(java.util.Map<String, Class<?>> map) throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the referenced object and maps it to a Java type\n     * using the given type map.\n     *\n     * @param map a <code>java.util.Map</code> object that contains\n     *        the mapping to use (the fully-qualified name of the SQL\n     *        structured type being referenced and the class object for\n     *        <code>SQLData</code> implementation to which the SQL\n     *        structured type will be mapped)\n     * @return  a Java <code>Object</code> that is the custom mapping for\n     *          the SQL structured type to which this <code>Ref</code>\n     *          object refers\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     * @see #setObject\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getObject() throws SQLException",
    "returnType" : "Object",
    "comment" : "\n     * Retrieves the SQL structured type instance referenced by\n     * this <code>Ref</code> object.  If the connection's type map has an entry\n     * for the structured type, the instance will be custom mapped to\n     * the Java class indicated in the type map.  Otherwise, the\n     * structured type instance will be mapped to a <code>Struct</code> object.\n     *\n     * @return  a Java <code>Object</code> that is the mapping for\n     *          the SQL structured type to which this <code>Ref</code>\n     *          object refers\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     * @see #setObject\n     ",
    "links" : [ ]
  }, {
    "name" : " void setObject(Object value) throws SQLException",
    "returnType" : "void",
    "comment" : "\n     * Sets the structured type value that this <code>Ref</code>\n     * object references to the given instance of <code>Object</code>.\n     * The driver converts this to an SQL structured type when it\n     * sends it to the database.\n     *\n     * @param value an <code>Object</code> representing the SQL\n     *        structured type instance that this\n     *        <code>Ref</code> object will reference\n     * @exception SQLException if a database access error occurs\n     * @exception SQLFeatureNotSupportedException if the JDBC driver does not support\n     * this method\n     * @since 1.4\n     * @see #getObject()\n     * @see #getObject(Map)\n     * @see PreparedStatement#setObject(int, Object)\n     * @see CallableStatement#setObject(String, Object)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " String getBaseTypeName() throws SQLException", " Object getObject(java.util.Map<String, Class<?>> map) throws SQLException", " Object getObject() throws SQLException", " void setObject(Object value) throws SQLException" ],
  "variableNames" : [ ]
}