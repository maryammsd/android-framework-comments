{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreCipherSpiBase.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreCipherSpiBase",
  "comment" : "\n * Base class for {@link CipherSpi} implementations of Android KeyStore backed ciphers.\n *\n * @hide\n ",
  "links" : [ "javax.crypto.CipherSpi" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MGF1_DIGEST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncrypting",
    "type" : "boolean",
    "comment" : " doFinal finishes.",
    "links" : [ ]
  }, {
    "name" : "mKeymasterPurposeOverride",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "AndroidKeyStoreKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRng",
    "type" : "SecureRandom",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOperation",
    "type" : "KeyStoreOperation",
    "comment" : "\n     * Object representing this operation inside keystore service. It is initialized\n     * by {@code engineInit} and is invalidated when {@code engineDoFinal} succeeds and on some\n     * error conditions in between.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOperationChallenge",
    "type" : "long",
    "comment" : "\n     * The operation challenge is required when an operation needs user authorization.\n     * The challenge is subjected to an authenticator, e.g., Gatekeeper or a biometric\n     * authenticator, and included in the authentication token minted by this authenticator.\n     * It may be null, if the operation does not require authorization.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMainDataStreamer",
    "type" : "KeyStoreCryptoOperationStreamer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdditionalAuthenticationDataStreamer",
    "type" : "KeyStoreCryptoOperationStreamer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdditionalAuthenticationDataStreamerClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCachedException",
    "type" : "Exception",
    "comment" : "\n     * Encountered exception which could not be immediately thrown because it was encountered inside\n     * a method that does not throw checked exception. This exception will be thrown from\n     * {@code engineDoFinal}. Once such an exception is encountered, {@code engineUpdate} and\n     * {@code engineDoFinal} start ignoring input data.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCipher",
    "type" : "Cipher",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private Authorization[] getKeyCharacteristics(Key key)",
    "returnType" : "Authorization[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineInit(int opmode, Key key, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineInit(int opmode, Key key, AlgorithmParameters params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineInit(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init(int opmode, Key key, SecureRandom random) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void abortOperation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void resetAll()",
    "returnType" : "void",
    "comment" : "\n     * Resets this cipher to its pristine pre-init state. This must be equivalent to obtaining a new\n     * cipher instance.\n     *\n     * <p>Subclasses storing additional state should override this method, reset the additional\n     * state, and then chain to superclass.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void resetWhilePreservingInitState()",
    "returnType" : "void",
    "comment" : "\n     * Resets this cipher while preserving the initialized state. This must be equivalent to\n     * rolling back the cipher's state to just after the most recent {@code engineInit} completed\n     * successfully.\n     *\n     * <p>Subclasses storing additional post-init state should override this method, reset the\n     * additional state, and then chain to superclass.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureKeystoreOperationInitialized(Authorization[] keyCharacteristics) throws InvalidKeyException, InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected KeyStoreCryptoOperationStreamer createMainDataStreamer(KeyStoreOperation operation)",
    "returnType" : "KeyStoreCryptoOperationStreamer",
    "comment" : "\n     * Creates a streamer which sends plaintext/ciphertext into the provided KeyStore and receives\n     * the corresponding ciphertext/plaintext from the KeyStore.\n     *\n     * <p>This implementation returns a working streamer.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected KeyStoreCryptoOperationStreamer createAdditionalAuthenticationDataStreamer(@SuppressWarnings(\"unused\") KeyStoreOperation operation)",
    "returnType" : "KeyStoreCryptoOperationStreamer",
    "comment" : "\n     * Creates a streamer which sends Additional Authentication Data (AAD) into the KeyStore.\n     *\n     * <p>This implementation returns {@code null}.\n     *\n     * @return stream or {@code null} if AAD is not supported by this cipher.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final byte[] engineUpdate(byte[] input, int inputOffset, int inputLen)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void flushAAD() throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineUpdate(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineUpdate(ByteBuffer input, ByteBuffer output) throws ShortBufferException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineUpdateAAD(byte[] input, int inputOffset, int inputLen)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineUpdateAAD(ByteBuffer src)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final byte[] engineDoFinal(byte[] input, int inputOffset, int inputLen) throws IllegalBlockSizeException, BadPaddingException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineDoFinal(ByteBuffer input, ByteBuffer output) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final Key engineUnwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException",
    "returnType" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineSetMode(String mode) throws NoSuchAlgorithmException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void engineSetPadding(String arg0) throws NoSuchPaddingException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int engineGetKeySize(Key key) throws InvalidKeyException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long getOperationHandle()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void setKey(@NonNull AndroidKeyStoreKey key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void setKeymasterPurposeOverride(int keymasterPurpose)",
    "returnType" : "void",
    "comment" : "\n     * Overrides the default purpose/type of the crypto operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final int getKeymasterPurposeOverride()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isEncrypting()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this cipher is initialized for encryption, {@code false} if this\n     * cipher is initialized for decryption.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final long getConsumedInputSizeBytes()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final long getProducedOutputSizeBytes()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String opmodeToString(int opmode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected abstract void initKey(int opmode, @Nullable Key key) throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this cipher with the provided key.\n     *\n     * @throws InvalidKeyException if the {@code key} is not suitable for this cipher in the\n     *         specified {@code opmode}.\n     *\n     * @see #setKey(AndroidKeyStoreKey)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract AlgorithmParameters engineGetParameters()",
    "returnType" : "AlgorithmParameters",
    "comment" : "\n     * Returns algorithm-specific parameters used by this cipher or {@code null} if no\n     * algorithm-specific parameters are used.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void initAlgorithmSpecificParameters() throws InvalidKeyException",
    "returnType" : "void",
    "comment" : "\n     * Invoked by {@code engineInit} to initialize algorithm-specific parameters when no additional\n     * initialization parameters were provided.\n     *\n     * @throws InvalidKeyException if this cipher cannot be configured based purely on the provided\n     *         key and needs additional parameters to be provided to {@code Cipher.init}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void initAlgorithmSpecificParameters(@Nullable AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Invoked by {@code engineInit} to initialize algorithm-specific parameters when additional\n     * parameters were provided.\n     *\n     * @param params additional algorithm parameters or {@code null} if not specified.\n     *\n     * @throws InvalidAlgorithmParameterException if there is insufficient information to configure\n     *         this cipher or if the provided parameters are not suitable for this cipher.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void initAlgorithmSpecificParameters(@Nullable AlgorithmParameters params) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Invoked by {@code engineInit} to initialize algorithm-specific parameters when additional\n     * parameters were provided.\n     *\n     * @param params additional algorithm parameters or {@code null} if not specified.\n     *\n     * @throws InvalidAlgorithmParameterException if there is insufficient information to configure\n     *         this cipher or if the provided parameters are not suitable for this cipher.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract int getAdditionalEntropyAmountForBegin()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of additional entropy (in bytes) to be provided to the KeyStore's\n     * {@code begin} operation. This amount of entropy is typically what's consumed to generate\n     * random parameters, such as IV.\n     *\n     * <p>For decryption, the return value should be {@code 0} because decryption should not be\n     * consuming any entropy. For encryption, the value combined with\n     * {@link #getAdditionalEntropyAmountForFinish()} should match (or exceed) the amount of Shannon\n     * entropy of the ciphertext produced by this cipher assuming the key, the plaintext, and all\n     * explicitly provided parameters to {@code Cipher.init} are known. For example, for AES CBC\n     * encryption with an explicitly provided IV the return value should be {@code 0}, whereas for\n     * the case where IV is generated by the KeyStore's {@code begin} operation it should be\n     * {@code 16}.\n     ",
    "links" : [ "#getAdditionalEntropyAmountForFinish()" ]
  }, {
    "name" : "protected abstract int getAdditionalEntropyAmountForFinish()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of additional entropy (in bytes) to be provided to the KeyStore's\n     * {@code finish} operation. This amount of entropy is typically what's consumed by encryption\n     * padding scheme.\n     *\n     * <p>For decryption, the return value should be {@code 0} because decryption should not be\n     * consuming any entropy. For encryption, the value combined with\n     * {@link #getAdditionalEntropyAmountForBegin()} should match (or exceed) the amount of Shannon\n     * entropy of the ciphertext produced by this cipher assuming the key, the plaintext, and all\n     * explicitly provided parameters to {@code Cipher.init} are known. For example, for RSA with\n     * OAEP the return value should be the size of the OAEP hash output. For RSA with PKCS#1 padding\n     * the return value should be the size of the padding string or could be raised (for simplicity)\n     * to the size of the modulus.\n     ",
    "links" : [ "#getAdditionalEntropyAmountForBegin()" ]
  }, {
    "name" : "protected abstract void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters)",
    "returnType" : "void",
    "comment" : "\n     * Invoked to add algorithm-specific parameters for the KeyStore's {@code begin} operation.\n     *\n     * @param parameters keystore/keymaster arguments to be populated with algorithm-specific\n     *        parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters, Authorization[] keyCharacteristics)",
    "returnType" : "void",
    "comment" : "\n     * Invoked to add algorithm-specific parameters for the KeyStore's {@code begin} operation,\n     * including the key characteristics. This is useful in case the parameters to {@code begin}\n     * depend on how the key was generated.\n     * The default implementation provided here simply ignores these key characteristics because\n     * they are not be needed for most engines.\n     *\n     * @param parameters keystore/keymaster arguments to be populated with algorithm-specific\n     *                   parameters.\n     * @param keyCharacteristics The key's characteristics.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void loadAlgorithmSpecificParametersFromBeginResult(KeyParameter[] parameters)",
    "returnType" : "void",
    "comment" : "\n     * Invoked to obtain algorithm-specific parameters from the result of the KeyStore's\n     * {@code begin} operation.\n     *\n     * <p>Some parameters, such as IV, are not required to be provided to {@code Cipher.init}. Such\n     * parameters, if not provided, must be generated by KeyStore and returned to the user of\n     * {@code Cipher} and potentially reused after {@code doFinal}.\n     *\n     * @param parameters keystore/keymaster arguments returned by KeyStore {@code createOperation}.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract String getTransform()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private Authorization[] getKeyCharacteristics(Key key)", "protected final void engineInit(int opmode, Key key, SecureRandom random) throws InvalidKeyException", "protected final void engineInit(int opmode, Key key, AlgorithmParameters params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "protected final void engineInit(int opmode, Key key, AlgorithmParameterSpec params, SecureRandom random) throws InvalidKeyException, InvalidAlgorithmParameterException", "private void init(int opmode, Key key, SecureRandom random) throws InvalidKeyException", "private void abortOperation()", "protected void resetAll()", "protected void resetWhilePreservingInitState()", "private void ensureKeystoreOperationInitialized(Authorization[] keyCharacteristics) throws InvalidKeyException, InvalidAlgorithmParameterException", "protected KeyStoreCryptoOperationStreamer createMainDataStreamer(KeyStoreOperation operation)", "protected KeyStoreCryptoOperationStreamer createAdditionalAuthenticationDataStreamer(@SuppressWarnings(\"unused\") KeyStoreOperation operation)", "protected final byte[] engineUpdate(byte[] input, int inputOffset, int inputLen)", "private void flushAAD() throws KeyStoreException", "protected final int engineUpdate(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException", "protected final int engineUpdate(ByteBuffer input, ByteBuffer output) throws ShortBufferException", "protected final void engineUpdateAAD(byte[] input, int inputOffset, int inputLen)", "protected final void engineUpdateAAD(ByteBuffer src)", "protected final byte[] engineDoFinal(byte[] input, int inputOffset, int inputLen) throws IllegalBlockSizeException, BadPaddingException", "protected final int engineDoFinal(byte[] input, int inputOffset, int inputLen, byte[] output, int outputOffset) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException", "protected final int engineDoFinal(ByteBuffer input, ByteBuffer output) throws ShortBufferException, IllegalBlockSizeException, BadPaddingException", "protected final byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException", "protected final Key engineUnwrap(byte[] wrappedKey, String wrappedKeyAlgorithm, int wrappedKeyType) throws InvalidKeyException, NoSuchAlgorithmException", "protected final void engineSetMode(String mode) throws NoSuchAlgorithmException", "protected final void engineSetPadding(String arg0) throws NoSuchPaddingException", "protected final int engineGetKeySize(Key key) throws InvalidKeyException", "public void finalize() throws Throwable", "public final long getOperationHandle()", "protected final void setKey(@NonNull AndroidKeyStoreKey key)", "protected final void setKeymasterPurposeOverride(int keymasterPurpose)", "protected final int getKeymasterPurposeOverride()", "protected final boolean isEncrypting()", "protected final long getConsumedInputSizeBytes()", "protected final long getProducedOutputSizeBytes()", " static String opmodeToString(int opmode)", "protected abstract void initKey(int opmode, @Nullable Key key) throws InvalidKeyException", "protected abstract AlgorithmParameters engineGetParameters()", "protected abstract void initAlgorithmSpecificParameters() throws InvalidKeyException", "protected abstract void initAlgorithmSpecificParameters(@Nullable AlgorithmParameterSpec params) throws InvalidAlgorithmParameterException", "protected abstract void initAlgorithmSpecificParameters(@Nullable AlgorithmParameters params) throws InvalidAlgorithmParameterException", "protected abstract int getAdditionalEntropyAmountForBegin()", "protected abstract int getAdditionalEntropyAmountForFinish()", "protected abstract void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters)", "protected void addAlgorithmSpecificParametersToBegin(@NonNull List<KeyParameter> parameters, Authorization[] keyCharacteristics)", "protected abstract void loadAlgorithmSpecificParametersFromBeginResult(KeyParameter[] parameters)", "protected abstract String getTransform()" ],
  "variableNames" : [ "TAG", "DEFAULT_MGF1_DIGEST", "mEncrypting", "mKeymasterPurposeOverride", "mKey", "mRng", "mOperation", "mOperationChallenge", "mMainDataStreamer", "mAdditionalAuthenticationDataStreamer", "mAdditionalAuthenticationDataStreamerClosed", "mCachedException", "mCipher" ]
}