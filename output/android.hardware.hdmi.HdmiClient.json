{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/hdmi/HdmiClient.java",
  "packageName" : "android.hardware.hdmi",
  "className" : "HdmiClient",
  "comment" : "\n * Parent for classes of various HDMI-CEC device type used to access\n * the HDMI control system service. Contains methods and data used in common.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_VENDOR_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IHdmiControlService",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mIHdmiVendorCommandListener",
    "type" : "IHdmiVendorCommandListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract int getDeviceType()",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "public void selectDevice(int logicalAddress, @NonNull @CallbackExecutor Executor executor, @NonNull OnDeviceSelectedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Selects a CEC logical device to be a new active source.\n     *\n     * <p> Multiple calls to this method are handled in parallel and independently, with no\n     * guarantees about the execution order. The caller receives a callback for each call,\n     * containing the result of that call only.\n     *\n     * @param logicalAddress logical address of the device to select\n     * @param listener listener to get the result with\n     * @throws {@link IllegalArgumentException} if the {@code listener} is null\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "private static IHdmiControlCallback getCallbackWrapper(int logicalAddress, final Executor executor, final OnDeviceSelectedListener listener)",
    "returnType" : "IHdmiControlCallback",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public HdmiDeviceInfo getActiveSource()",
    "returnType" : "HdmiDeviceInfo",
    "comment" : "\n     * Returns the active source information.\n     *\n     * @return {@link HdmiDeviceInfo} object that describes the active source\n     *         or active routing path\n     ",
    "links" : [ "android.hardware.hdmi.HdmiDeviceInfo" ]
  }, {
    "name" : "public void sendKeyEvent(int keyCode, boolean isPressed)",
    "returnType" : "void",
    "comment" : "\n     * Sends a key event to other logical device.\n     *\n     * @param keyCode key code to send. Defined in {@link android.view.KeyEvent}.\n     * @param isPressed true if this is key press event\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public void sendVolumeKeyEvent(int keyCode, boolean isPressed)",
    "returnType" : "void",
    "comment" : "\n     * Sends a volume key event to the primary audio receiver in the system. This method should only\n     * be called when the volume key is not handled by the local device. HDMI framework handles the\n     * logic of finding the address of the receiver.\n     *\n     * @param keyCode key code to send. Defined in {@link android.view.KeyEvent}.\n     * @param isPressed true if this is key press event\n     *\n     * @hide\n     ",
    "links" : [ "android.view.KeyEvent" ]
  }, {
    "name" : "public void sendVendorCommand(int targetAddress, @SuppressLint(\"MissingNullability\") byte[] params, boolean hasVendorId)",
    "returnType" : "void",
    "comment" : "\n     * Sends vendor-specific command.\n     *\n     * @param targetAddress address of the target device\n     * @param params vendor-specific parameter. For &lt;Vendor Command With ID&gt; do not\n     *               include the first 3 bytes (vendor ID).\n     * @param hasVendorId {@code true} if the command type will be &lt;Vendor Command With ID&gt;.\n     *                    {@code false} if the command will be &lt;Vendor Command&gt;\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVendorCommandListener(@NonNull VendorCommandListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener used to receive incoming vendor-specific command. This listener will only\n     * receive {@code <Vendor Command>} but will not receive any {@code <Vendor Command with ID>}\n     * messages.\n     *\n     * @param listener listener object\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVendorCommandListener(@NonNull VendorCommandListener listener, int vendorId)",
    "returnType" : "void",
    "comment" : "\n     * Sets a listener used to receive incoming vendor-specific command.\n     *\n     * @param listener listener object\n     * @param vendorId The listener is interested in {@code <Vendor Command with ID>} received with\n     *     this vendorId and all {@code <Vendor Command>} messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static IHdmiVendorCommandListener getListenerWrapper(final VendorCommandListener listener)",
    "returnType" : "IHdmiVendorCommandListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract int getDeviceType()", "public void selectDevice(int logicalAddress, @NonNull @CallbackExecutor Executor executor, @NonNull OnDeviceSelectedListener listener)", "private static IHdmiControlCallback getCallbackWrapper(int logicalAddress, final Executor executor, final OnDeviceSelectedListener listener)", "public HdmiDeviceInfo getActiveSource()", "public void sendKeyEvent(int keyCode, boolean isPressed)", "public void sendVolumeKeyEvent(int keyCode, boolean isPressed)", "public void sendVendorCommand(int targetAddress, @SuppressLint(\"MissingNullability\") byte[] params, boolean hasVendorId)", "public void setVendorCommandListener(@NonNull VendorCommandListener listener)", "public void setVendorCommandListener(@NonNull VendorCommandListener listener, int vendorId)", "private static IHdmiVendorCommandListener getListenerWrapper(final VendorCommandListener listener)" ],
  "variableNames" : [ "TAG", "UNKNOWN_VENDOR_ID", "mService", "mIHdmiVendorCommandListener" ]
}