{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore/AttestationUtils.java",
  "packageName" : "android.security.keystore",
  "className" : "AttestationUtils",
  "comment" : "\n * Utilities for attesting the device's hardware identifiers.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ID_TYPE_SERIAL",
    "type" : "int",
    "comment" : "\n     * Specifies that the device should attest its serial number. For use with\n     * {@link #attestDeviceIds}.\n     *\n     * @see #attestDeviceIds\n     ",
    "links" : [ "#attestDeviceIds" ]
  }, {
    "name" : "ID_TYPE_IMEI",
    "type" : "int",
    "comment" : "\n     * Specifies that the device should attest its IMEIs. For use with {@link #attestDeviceIds}.\n     *\n     * @see #attestDeviceIds\n     ",
    "links" : [ "#attestDeviceIds" ]
  }, {
    "name" : "ID_TYPE_MEID",
    "type" : "int",
    "comment" : "\n     * Specifies that the device should attest its MEIDs. For use with {@link #attestDeviceIds}.\n     *\n     * @see #attestDeviceIds\n     ",
    "links" : [ "#attestDeviceIds" ]
  }, {
    "name" : "USE_INDIVIDUAL_ATTESTATION",
    "type" : "int",
    "comment" : "\n     * Specifies that the device should sign the attestation record using its device-unique\n     * attestation certificate. For use with {@link #attestDeviceIds}.\n     *\n     * @see #attestDeviceIds\n     ",
    "links" : [ "#attestDeviceIds" ]
  } ],
  "methods" : [ {
    "name" : "public static X509Certificate[] parseCertificateChain(final KeymasterCertificateChain kmChain) throws KeyAttestationException",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Creates an array of X509Certificates from the provided KeymasterCertificateChain.\n     *\n     * @hide Only called by the DevicePolicyManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static X509Certificate[] attestDeviceIds(Context context, @NonNull int[] idTypes, @NonNull byte[] attestationChallenge) throws DeviceIdAttestationException",
    "returnType" : "X509Certificate[]",
    "comment" : "\n     * Performs attestation of the device's identifiers. This method returns a certificate chain\n     * whose first element contains the requested device identifiers in an extension. The device's\n     * manufacturer, model, brand, device and product are always also included in the attestation.\n     * If the device supports attestation in secure hardware, the chain will be rooted at a\n     * trustworthy CA key. Otherwise, the chain will be rooted at an untrusted certificate. See\n     * <a href=\"https://developer.android.com/training/articles/security-key-attestation.html\">\n     * Key Attestation</a> for the format of the certificate extension.\n     * <p>\n     * Attestation will only be successful when all of the following are true:\n     * 1) The device has been set up to support device identifier attestation at the factory.\n     * 2) The user has not permanently disabled device identifier attestation.\n     * 3) You have permission to access the device identifiers you are requesting attestation for.\n     * <p>\n     * For privacy reasons, you cannot distinguish between (1) and (2). If attestation is\n     * unsuccessful, the device may not support it in general or the user may have permanently\n     * disabled it.\n     *\n     * @param context the context to use for retrieving device identifiers.\n     * @param idTypes the types of device identifiers to attest.\n     * @param attestationChallenge a blob to include in the certificate alongside the device\n     * identifiers.\n     *\n     * @return a certificate chain containing the requested device identifiers in the first element\n     *\n     * @exception SecurityException if you are not permitted to obtain an attestation of the\n     * device's identifiers.\n     * @exception DeviceIdAttestationException if the attestation operation fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String generateRandomAlias()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isChainValid(KeymasterCertificateChain chain)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the attestation chain provided is a valid key attestation chain.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static X509Certificate[] parseCertificateChain(final KeymasterCertificateChain kmChain) throws KeyAttestationException", "public static X509Certificate[] attestDeviceIds(Context context, @NonNull int[] idTypes, @NonNull byte[] attestationChallenge) throws DeviceIdAttestationException", "private static String generateRandomAlias()", "public static boolean isChainValid(KeymasterCertificateChain chain)" ],
  "variableNames" : [ "ID_TYPE_SERIAL", "ID_TYPE_IMEI", "ID_TYPE_MEID", "USE_INDIVIDUAL_ATTESTATION" ]
}