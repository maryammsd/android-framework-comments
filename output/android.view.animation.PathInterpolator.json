{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/animation/PathInterpolator.java",
  "packageName" : "android.view.animation",
  "className" : "PathInterpolator",
  "comment" : "\n * An interpolator that can traverse a Path that extends from <code>Point</code>\n * <code>(0, 0)</code> to <code>(1, 1)</code>. The x coordinate along the <code>Path</code>\n * is the input value and the output is the y coordinate of the line at that point.\n * This means that the Path must conform to a function <code>y = f(x)</code>.\n *\n * <p>The <code>Path</code> must not have gaps in the x direction and must not\n * loop back on itself such that there can be two points sharing the same x coordinate.\n * It is alright to have a disjoint line in the vertical direction:</p>\n * <p><blockquote><pre>\n *     Path path = new Path();\n *     path.lineTo(0.25f, 0.25f);\n *     path.moveTo(0.25f, 0.5f);\n *     path.lineTo(1f, 1f);\n * </pre></blockquote></p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PRECISION",
    "type" : "float",
    "comment" : " This governs how accurate the approximation of the Path is.",
    "links" : [ ]
  }, {
    "name" : "mX",
    "type" : "float[]",
    "comment" : " x coordinates in the line",
    "links" : [ ]
  }, {
    "name" : "mY",
    "type" : "float[]",
    "comment" : " y coordinates in the line",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void parseInterpolatorFromTypeArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initQuad(float controlX, float controlY)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initCubic(float x1, float y1, float x2, float y2)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initPath(Path path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getInterpolation(float t)",
    "returnType" : "float",
    "comment" : "\n     * Using the line in the Path in this interpolator that can be described as\n     * <code>y = f(x)</code>, finds the y coordinate of the line given <code>t</code>\n     * as the x coordinate. Values less than 0 will always return 0 and values greater\n     * than 1 will always return 1.\n     *\n     * @param t Treated as the x coordinate along the line.\n     * @return The y coordinate of the Path along the line where x = <code>t</code>.\n     * @see Interpolator#getInterpolation(float)\n     ",
    "links" : [ ]
  }, {
    "name" : "public long createNativeInterpolator()",
    "returnType" : "long",
    "comment" : " @hide *",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void parseInterpolatorFromTypeArray(TypedArray a)", "private void initQuad(float controlX, float controlY)", "private void initCubic(float x1, float y1, float x2, float y2)", "private void initPath(Path path)", "public float getInterpolation(float t)", "public long createNativeInterpolator()" ],
  "variableNames" : [ "PRECISION", "mX", "mY" ]
}