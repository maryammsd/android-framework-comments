{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/coll/CollationWeights.java",
  "packageName" : "android.icu.impl.coll",
  "className" : "CollationWeights",
  "comment" : "\n * Allocates n collation element weights between two exclusive limits.\n * Used only internally by the collation tailoring builder.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "middleLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minBytes",
    "type" : "int[]",
    "comment" : " for byte 1, 2, 3, 4",
    "links" : [ ]
  }, {
    "name" : "maxBytes",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ranges",
    "type" : "WeightRange[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rangeIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rangeCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void initForPrimary(boolean compressible)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initForSecondary()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initForTertiary()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean allocWeights(long lowerLimit, long upperLimit, int n)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine heuristically\n     * what ranges to use for a given number of weights between (excluding)\n     * two limits.\n     *\n     * @param lowerLimit A collation element weight; the ranges will be filled to cover\n     *                   weights greater than this one.\n     * @param upperLimit A collation element weight; the ranges will be filled to cover\n     *                   weights less than this one.\n     * @param n          The number of collation element weights w necessary such that\n     *                   lowerLimit<w<upperLimit in lexical order.\n     * @return true if it is possible to fit n elements between the limits\n     ",
    "links" : [ ]
  }, {
    "name" : "public long nextWeight()",
    "returnType" : "long",
    "comment" : "\n     * Given a set of ranges calculated by allocWeights(),\n     * iterate through the weights.\n     * The ranges are modified to keep the current iteration state.\n     *\n     * @return The next weight in the ranges, or 0xffffffff if there is none left.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int lengthOfWeight(long weight)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getWeightTrail(long weight, int length)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long setWeightTrail(long weight, int length, int trail)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getWeightByte(long weight, int idx)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long setWeightByte(long weight, int idx, int b)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long truncateWeight(long weight, int length)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long incWeightTrail(long weight, int length)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long decWeightTrail(long weight, int length)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int countBytes(int idx)",
    "returnType" : "int",
    "comment" : " @return number of usable byte values for byte idx ",
    "links" : [ ]
  }, {
    "name" : "private long incWeight(long weight, int length)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private long incWeightByOffset(long weight, int length, int offset)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void lengthenRange(WeightRange range)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getWeightRanges(long lowerLimit, long upperLimit)",
    "returnType" : "boolean",
    "comment" : "\n     * Takes two CE weights and calculates the\n     * possible ranges of weights between the two limits, excluding them.\n     * For weights with up to 4 bytes there are up to 2*4-1=7 ranges.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean allocWeightsInShortRanges(int n, int minLength)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean allocWeightsInMinLengthRanges(int n, int minLength)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initForPrimary(boolean compressible)", "public void initForSecondary()", "public void initForTertiary()", "public boolean allocWeights(long lowerLimit, long upperLimit, int n)", "public long nextWeight()", "public static int lengthOfWeight(long weight)", "private static int getWeightTrail(long weight, int length)", "private static long setWeightTrail(long weight, int length, int trail)", "private static int getWeightByte(long weight, int idx)", "private static long setWeightByte(long weight, int idx, int b)", "private static long truncateWeight(long weight, int length)", "private static long incWeightTrail(long weight, int length)", "private static long decWeightTrail(long weight, int length)", "private int countBytes(int idx)", "private long incWeight(long weight, int length)", "private long incWeightByOffset(long weight, int length, int offset)", "private void lengthenRange(WeightRange range)", "private boolean getWeightRanges(long lowerLimit, long upperLimit)", "private boolean allocWeightsInShortRanges(int n, int minLength)", "private boolean allocWeightsInMinLengthRanges(int n, int minLength)" ],
  "variableNames" : [ "middleLength", "minBytes", "maxBytes", "ranges", "rangeIndex", "rangeCount" ]
}