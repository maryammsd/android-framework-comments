{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/GenericDocument.java",
  "packageName" : "android.app.appsearch",
  "className" : "Builder",
  "comment" : " GenericDocument.",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDocumentParcelBuilder",
    "type" : "GenericDocumentParcel.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBuilderTypeInstance",
    "type" : "BuilderType",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public BuilderType setNamespace(@NonNull String namespace)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the app-defined namespace this document resides in, changing the value provided in\n         * the constructor. No special values are reserved or understood by the infrastructure.\n         *\n         * <p>Document IDs are unique within a namespace.\n         *\n         * <p>The number of namespaces per app should be kept small for efficiency reasons.\n         ",
    "links" : [ ]
  }, {
    "name" : "public BuilderType setId(@NonNull String id)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the ID of this document, changing the value provided in the constructor. No special\n         * values are reserved or understood by the infrastructure.\n         *\n         * <p>Document IDs are unique within the combination of package, database, and namespace.\n         *\n         * <p>Setting a document with a duplicate id will overwrite the original document with the\n         * new document, enforcing uniqueness within the above constraint.\n         ",
    "links" : [ ]
  }, {
    "name" : "public BuilderType setSchemaType(@NonNull String schemaType)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the schema type of this document, changing the value provided in the constructor.\n         *\n         * <p>To successfully index a document, the schema type must match the name of an {@link\n         * AppSearchSchema} object previously provided to {@link AppSearchSession#setSchema}.\n         ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "android.app.appsearch.AppSearchSession#setSchema" ]
  }, {
    "name" : "public BuilderType setParentTypes(@NonNull List<String> parentTypes)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the list of parent types of the {@link GenericDocument}'s type.\n         *\n         * <p>Child types must appear before parent types in the list.\n         *\n         * @hide\n         ",
    "links" : [ "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public BuilderType setScore(@IntRange(from = 0, to = Integer.MAX_VALUE) int score)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the score of the {@link GenericDocument}.\n         *\n         * <p>The score is a query-independent measure of the document's quality, relative to other\n         * {@link GenericDocument} objects of the same {@link AppSearchSchema} type.\n         *\n         * <p>Results may be sorted by score using {@link SearchSpec.Builder#setRankingStrategy}.\n         * Documents with higher scores are considered better than documents with lower scores.\n         *\n         * <p>Any non-negative integer can be used a score. By default, scores are set to 0.\n         *\n         * @param score any non-negative {@code int} representing the document's score.\n         * @throws IllegalArgumentException if the score is negative.\n         ",
    "links" : [ "android.app.appsearch.AppSearchSchema", "SearchSpec.Builder#setRankingStrategy", "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public BuilderType setCreationTimestampMillis(@CurrentTimeMillisLong long creationTimestampMillis)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the creation timestamp of the {@link GenericDocument}, in milliseconds.\n         *\n         * <p>This should be set using a value obtained from the {@link System#currentTimeMillis}\n         * time base.\n         *\n         * <p>If this method is not called, this will be set to the time the object is built.\n         *\n         * @param creationTimestampMillis a creation timestamp in milliseconds.\n         ",
    "links" : [ "#currentTimeMillis", "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public BuilderType setTtlMillis(long ttlMillis)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets the TTL (time-to-live) of the {@link GenericDocument}, in milliseconds.\n         *\n         * <p>The TTL is measured against {@link #getCreationTimestampMillis}. At the timestamp of\n         * {@code creationTimestampMillis + ttlMillis}, measured in the {@link\n         * System#currentTimeMillis} time base, the document will be auto-deleted.\n         *\n         * <p>The default value is 0, which means the document is permanent and won't be\n         * auto-deleted until the app is uninstalled or {@link AppSearchSession#remove} is called.\n         *\n         * @param ttlMillis a non-negative duration in milliseconds.\n         * @throws IllegalArgumentException if ttlMillis is negative.\n         ",
    "links" : [ "#currentTimeMillis", "#getCreationTimestampMillis", "android.app.appsearch.GenericDocument", "android.app.appsearch.AppSearchSession#remove" ]
  }, {
    "name" : "public BuilderType setPropertyString(@NonNull String name, @NonNull String... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@code String} values for a property, replacing its previous values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@code String} values of the property.\n         * @throws IllegalArgumentException if no values are provided, or if a passed in {@code\n         *     String} is {@code null} or \"\".\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName" ]
  }, {
    "name" : "public BuilderType setPropertyBoolean(@NonNull String name, @NonNull boolean... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@code boolean} values for a property, replacing its previous\n         * values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@code boolean} values of the property.\n         * @throws IllegalArgumentException if the name is empty or {@code null}.\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName" ]
  }, {
    "name" : "public BuilderType setPropertyLong(@NonNull String name, @NonNull long... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@code long} values for a property, replacing its previous values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@code long} values of the property.\n         * @throws IllegalArgumentException if the name is empty or {@code null}.\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName" ]
  }, {
    "name" : "public BuilderType setPropertyDouble(@NonNull String name, @NonNull double... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@code double} values for a property, replacing its previous values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@code double} values of the property.\n         * @throws IllegalArgumentException if the name is empty or {@code null}.\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName" ]
  }, {
    "name" : "public BuilderType setPropertyBytes(@NonNull String name, @NonNull byte[]... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@code byte[]} for a property, replacing its previous values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@code byte[]} of the property.\n         * @throws IllegalArgumentException if no values are provided, or if a passed in {@code\n         *     byte[]} is {@code null}, or if name is empty.\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName" ]
  }, {
    "name" : "public BuilderType setPropertyDocument(@NonNull String name, @NonNull GenericDocument... values)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Sets one or multiple {@link GenericDocument} values for a property, replacing its\n         * previous values.\n         *\n         * @param name the name associated with the {@code values}. Must match the name for this\n         *     property as given in {@link AppSearchSchema.PropertyConfig#getName}.\n         * @param values the {@link GenericDocument} values of the property.\n         * @throws IllegalArgumentException if no values are provided, or if a passed in {@link\n         *     GenericDocument} is {@code null}, or if name is empty.\n         ",
    "links" : [ "AppSearchSchema.PropertyConfig#getName", "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "public BuilderType clearProperty(@NonNull String name)",
    "returnType" : "BuilderType",
    "comment" : "\n         * Clears the value for the property with the given name.\n         *\n         * <p>Note that this method does not support property paths.\n         *\n         * <p>You should check for the existence of the property in {@link #getPropertyNames} if you\n         * need to make sure the property being cleared actually exists.\n         *\n         * <p>If the string passed is an invalid or nonexistent property, no error message or\n         * behavior will be observed.\n         *\n         * @param name The name of the property to clear.\n         ",
    "links" : [ "#getPropertyNames" ]
  }, {
    "name" : "public GenericDocument build()",
    "returnType" : "GenericDocument",
    "comment" : " Builds the {@link GenericDocument} object. ",
    "links" : [ "android.app.appsearch.GenericDocument" ]
  }, {
    "name" : "private void validatePropertyName(@NonNull String name)",
    "returnType" : "void",
    "comment" : " Method to ensure property names are not blank ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public BuilderType setNamespace(@NonNull String namespace)", "public BuilderType setId(@NonNull String id)", "public BuilderType setSchemaType(@NonNull String schemaType)", "public BuilderType setParentTypes(@NonNull List<String> parentTypes)", "public BuilderType setScore(@IntRange(from = 0, to = Integer.MAX_VALUE) int score)", "public BuilderType setCreationTimestampMillis(@CurrentTimeMillisLong long creationTimestampMillis)", "public BuilderType setTtlMillis(long ttlMillis)", "public BuilderType setPropertyString(@NonNull String name, @NonNull String... values)", "public BuilderType setPropertyBoolean(@NonNull String name, @NonNull boolean... values)", "public BuilderType setPropertyLong(@NonNull String name, @NonNull long... values)", "public BuilderType setPropertyDouble(@NonNull String name, @NonNull double... values)", "public BuilderType setPropertyBytes(@NonNull String name, @NonNull byte[]... values)", "public BuilderType setPropertyDocument(@NonNull String name, @NonNull GenericDocument... values)", "public BuilderType clearProperty(@NonNull String name)", "public GenericDocument build()", "private void validatePropertyName(@NonNull String name)" ],
  "variableNames" : [ "mDocumentParcelBuilder", "mBuilderTypeInstance" ]
}