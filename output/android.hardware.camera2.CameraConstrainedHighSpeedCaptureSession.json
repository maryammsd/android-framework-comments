{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraConstrainedHighSpeedCaptureSession.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraConstrainedHighSpeedCaptureSession",
  "comment" : "\n * A constrained high speed capture session for a {@link CameraDevice}, used for capturing high\n * speed images from the {@link CameraDevice} for high speed video recording use case.\n * <p>\n * A CameraConstrainedHighSpeedCaptureSession is created by providing a session configuration to\n * {@link CameraDevice#createCaptureSession(SessionConfiguration)} with a type of\n * {@link android.hardware.camera2.params.SessionConfiguration#SESSION_HIGH_SPEED}. The\n * CameraCaptureSession returned from {@link CameraCaptureSession.StateCallback} can then be cast to\n * a CameraConstrainedHighSpeedCaptureSession. Once created, the session is active until a new\n * session is created by the camera device, or the camera device is closed.\n * </p>\n * <p>\n * An active high speed capture session is a specialized capture session that is only targeted at\n * high speed video recording (>=120fps) use case if the camera device supports high speed video\n * capability (i.e., {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} contains\n * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO}). It only\n * accepts request lists created via {@link #createHighSpeedRequestList}, and the request list can\n * only be submitted to this session via {@link CameraCaptureSession#captureBurst captureBurst}, or\n * {@link CameraCaptureSession#setRepeatingBurst setRepeatingBurst}. See\n * {@link CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)}\n * for more details of the limitations.\n * </p>\n * <p>\n * Creating a session is an expensive operation and can take several hundred milliseconds, since it\n * requires configuring the camera device's internal pipelines and allocating memory buffers for\n * sending images to the desired targets. Therefore the setup is done asynchronously, and\n * {@link CameraDevice#createConstrainedHighSpeedCaptureSession} will send the ready-to-use\n * CameraCaptureSession to the provided listener's\n * {@link CameraCaptureSession.StateCallback#onConfigured} callback. If configuration cannot be\n * completed, then the {@link CameraCaptureSession.StateCallback#onConfigureFailed} is called, and\n * the session will not become active.\n * </p>\n * <p>\n * If a new session is created by the camera device, then the previous session is closed, and its\n * associated {@link CameraCaptureSession.StateCallback#onClosed onClosed} callback will be\n * invoked. All of the session methods will throw an IllegalStateException if called once the\n * session is closed.\n * </p>\n * <p>\n * A closed session clears any repeating requests (as if {@link #stopRepeating} had been called),\n * but will still complete all of its in-progress capture requests as normal, before a newly created\n * session takes over and reconfigures the camera device.\n * </p>\n ",
  "links" : [ "CameraCaptureSession.StateCallback", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO", "android.hardware.camera2.CameraCaptureSession#setRepeatingBurst", "CameraCaptureSession.StateCallback#onClosed", "CameraCaptureSession.StateCallback#onConfigured", "android.hardware.camera2.CameraDevice#createCaptureSession(SessionConfiguration)", "#createHighSpeedRequestList", "android.hardware.camera2.CameraCaptureSession#captureBurst", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "CameraCaptureSession.StateCallback#onConfigureFailed", "android.hardware.camera2.CameraDevice", "#stopRepeating", "android.hardware.camera2.params.SessionConfiguration#SESSION_HIGH_SPEED", "android.hardware.camera2.CameraDevice#createConstrainedHighSpeedCaptureSession", "android.hardware.camera2.CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract List<CaptureRequest> createHighSpeedRequestList(@NonNull CaptureRequest request) throws CameraAccessException",
    "returnType" : "List<CaptureRequest>",
    "comment" : "\n     * <p>Create a unmodifiable list of requests that is suitable for constrained high speed capture\n     * session streaming.</p>\n     *\n     * <p>High speed video streaming creates significant performance pressure on the camera device,\n     * so to achieve efficient high speed streaming, the camera device may have to aggregate\n     * multiple frames together. This means requests must be sent in batched groups, with all\n     * requests sharing the same settings. This method takes the list of output target\n     * Surfaces (subject to the output Surface requirements specified by the constrained high speed\n     * session) and a {@link CaptureRequest request}, and generates a request list that has the same\n     * controls for each request. The input {@link CaptureRequest request} must contain the target\n     * output Surfaces and target high speed FPS range that is one of the\n     * {@link StreamConfigurationMap#getHighSpeedVideoFpsRangesFor} for the Surface size.</p>\n     *\n     * <p>If both preview and recording Surfaces are specified in the {@code request}, the\n     * {@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE target FPS range} in the input\n     * {@link CaptureRequest request} must be a fixed frame rate FPS range, where the\n     * {@link android.util.Range#getLower minimal FPS} ==\n     * {@link android.util.Range#getUpper() maximum FPS}. The created request list will contain\n     * a interleaved request pattern such that the preview output FPS is at least 30fps, the\n     * recording output FPS is {@link android.util.Range#getUpper() maximum FPS} of the requested\n     * FPS range. The application can submit this request list directly to an active high speed\n     * capture session to achieve high speed video recording. When only preview or recording\n     * Surface is specified, this method will return a list of request that have the same controls\n     * and output targets for all requests.</p>\n     *\n     * <p>Submitting a request list created by this method to a normal capture session will result\n     * in an {@link IllegalArgumentException} if the high speed\n     * {@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE FPS range} is not supported by\n     * {@link CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES}.</p>\n     *\n     * @param request The high speed capture request that will be used to generate the high speed\n     *                request list.\n     * @return A unmodifiable CaptureRequest list that is suitable for constrained high speed\n     *         capture.\n     *\n     * @throws IllegalArgumentException if the set of output Surfaces in the request do not meet the\n     *                                  high speed video capability requirements, or the camera\n     *                                  device doesn't support high speed video capability, or the\n     *                                  request doesn't meet the high speed video capability\n     *                                  requirements, or the request doesn't contain the required\n     *                                  controls for high speed capture.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see CameraDevice#createConstrainedHighSpeedCaptureSession\n     * @see CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE\n     * @see android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoSizes\n     * @see android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoFpsRangesFor\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoFpsRangesFor", "android.hardware.camera2.CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE", "android.util.Range#getLower", "android.hardware.camera2.CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES", "android.hardware.camera2.CaptureRequest", "IllegalArgumentException", "android.util.Range#getUpper()" ]
  } ],
  "methodNames" : [ "public abstract List<CaptureRequest> createHighSpeedRequestList(@NonNull CaptureRequest request) throws CameraAccessException" ],
  "variableNames" : [ ]
}