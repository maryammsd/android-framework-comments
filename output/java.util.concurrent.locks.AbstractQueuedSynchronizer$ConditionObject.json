{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/locks/AbstractQueuedSynchronizer.java",
  "packageName" : "java.util.concurrent.locks",
  "className" : "ConditionObject",
  "comment" : "\n     * Condition implementation for a {@link AbstractQueuedSynchronizer}\n     * serving as the basis of a {@link Lock} implementation.\n     *\n     * <p>Method documentation for this class describes mechanics,\n     * not behavioral specifications from the point of view of Lock\n     * and Condition users. Exported versions of this class will in\n     * general need to be accompanied by documentation describing\n     * condition semantics that rely on those of the associated\n     * {@code AbstractQueuedSynchronizer}.\n     *\n     * <p>This class is Serializable, but all fields are transient,\n     * so deserialized conditions have no waiters.\n     ",
  "links" : [ "java.util.concurrent.locks.AbstractQueuedSynchronizer", "java.util.concurrent.locks.Lock" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "firstWaiter",
    "type" : "ConditionNode",
    "comment" : " First node of condition queue. ",
    "links" : [ ]
  }, {
    "name" : "lastWaiter",
    "type" : "ConditionNode",
    "comment" : " Last node of condition queue. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void doSignal(ConditionNode first, boolean all)",
    "returnType" : "void",
    "comment" : "\n         * Removes and transfers one or all waiters to sync queue.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void signal()",
    "returnType" : "void",
    "comment" : "\n         * Moves the longest-waiting thread, if one exists, from the\n         * wait queue for this condition to the wait queue for the\n         * owning lock.\n         *\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         ",
    "links" : [ "#isHeldExclusively" ]
  }, {
    "name" : "public final void signalAll()",
    "returnType" : "void",
    "comment" : "\n         * Moves all threads from the wait queue for this condition to\n         * the wait queue for the owning lock.\n         *\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         ",
    "links" : [ "#isHeldExclusively" ]
  }, {
    "name" : "private int enableWait(ConditionNode node)",
    "returnType" : "int",
    "comment" : "\n         * Adds node to condition list and releases lock.\n         *\n         * @param node the node\n         * @return savedState to reacquire after wait\n         ",
    "links" : [ ]
  }, {
    "name" : "private boolean canReacquire(ConditionNode node)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if a node that was initially placed on a condition\n         * queue is now ready to reacquire on sync queue.\n         * @param node the node\n         * @return true if is reacquiring\n         ",
    "links" : [ ]
  }, {
    "name" : "private void unlinkCancelledWaiters(ConditionNode node)",
    "returnType" : "void",
    "comment" : "\n         * Unlinks the given node and other non-waiting nodes from\n         * condition queue unless already unlinked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public final void awaitUninterruptibly()",
    "returnType" : "void",
    "comment" : "\n         * Implements uninterruptible condition wait.\n         * <ol>\n         * <li>Save lock state returned by {@link #getState}.\n         * <li>Invoke {@link #release} with saved state as argument,\n         *     throwing IllegalMonitorStateException if it fails.\n         * <li>Block until signalled.\n         * <li>Reacquire by invoking specialized version of\n         *     {@link #acquire} with saved state as argument.\n         * </ol>\n         ",
    "links" : [ "#acquire", "#getState", "#release" ]
  }, {
    "name" : "public final void await() throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n         * Implements interruptible condition wait.\n         * <ol>\n         * <li>If current thread is interrupted, throw InterruptedException.\n         * <li>Save lock state returned by {@link #getState}.\n         * <li>Invoke {@link #release} with saved state as argument,\n         *     throwing IllegalMonitorStateException if it fails.\n         * <li>Block until signalled or interrupted.\n         * <li>Reacquire by invoking specialized version of\n         *     {@link #acquire} with saved state as argument.\n         * <li>If interrupted while blocked in step 4, throw InterruptedException.\n         * </ol>\n         ",
    "links" : [ "#acquire", "#getState", "#release" ]
  }, {
    "name" : "public final long awaitNanos(long nanosTimeout) throws InterruptedException",
    "returnType" : "long",
    "comment" : "\n         * Implements timed condition wait.\n         * <ol>\n         * <li>If current thread is interrupted, throw InterruptedException.\n         * <li>Save lock state returned by {@link #getState}.\n         * <li>Invoke {@link #release} with saved state as argument,\n         *     throwing IllegalMonitorStateException if it fails.\n         * <li>Block until signalled, interrupted, or timed out.\n         * <li>Reacquire by invoking specialized version of\n         *     {@link #acquire} with saved state as argument.\n         * <li>If interrupted while blocked in step 4, throw InterruptedException.\n         * </ol>\n         ",
    "links" : [ "#acquire", "#getState", "#release" ]
  }, {
    "name" : "public final boolean awaitUntil(Date deadline) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n         * Implements absolute timed condition wait.\n         * <ol>\n         * <li>If current thread is interrupted, throw InterruptedException.\n         * <li>Save lock state returned by {@link #getState}.\n         * <li>Invoke {@link #release} with saved state as argument,\n         *     throwing IllegalMonitorStateException if it fails.\n         * <li>Block until signalled, interrupted, or timed out.\n         * <li>Reacquire by invoking specialized version of\n         *     {@link #acquire} with saved state as argument.\n         * <li>If interrupted while blocked in step 4, throw InterruptedException.\n         * <li>If timed out while blocked in step 4, return false, else true.\n         * </ol>\n         ",
    "links" : [ "#acquire", "#getState", "#release" ]
  }, {
    "name" : "public final boolean await(long time, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n         * Implements timed condition wait.\n         * <ol>\n         * <li>If current thread is interrupted, throw InterruptedException.\n         * <li>Save lock state returned by {@link #getState}.\n         * <li>Invoke {@link #release} with saved state as argument,\n         *     throwing IllegalMonitorStateException if it fails.\n         * <li>Block until signalled, interrupted, or timed out.\n         * <li>Reacquire by invoking specialized version of\n         *     {@link #acquire} with saved state as argument.\n         * <li>If interrupted while blocked in step 4, throw InterruptedException.\n         * <li>If timed out while blocked in step 4, return false, else true.\n         * </ol>\n         ",
    "links" : [ "#acquire", "#getState", "#release" ]
  }, {
    "name" : " final boolean isOwnedBy(AbstractQueuedSynchronizer sync)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if this condition was created by the given\n         * synchronization object.\n         *\n         * @return {@code true} if owned\n         ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean hasWaiters()",
    "returnType" : "boolean",
    "comment" : "\n         * Queries whether any threads are waiting on this condition.\n         * Implements {@link AbstractQueuedSynchronizer#hasWaiters(ConditionObject)}.\n         *\n         * @return {@code true} if there are any waiting threads\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         ",
    "links" : [ "java.util.concurrent.locks.AbstractQueuedSynchronizer#hasWaiters(ConditionObject)", "#isHeldExclusively" ]
  }, {
    "name" : "protected final int getWaitQueueLength()",
    "returnType" : "int",
    "comment" : "\n         * Returns an estimate of the number of threads waiting on\n         * this condition.\n         * Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength(ConditionObject)}.\n         *\n         * @return the estimated number of waiting threads\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         ",
    "links" : [ "java.util.concurrent.locks.AbstractQueuedSynchronizer#getWaitQueueLength(ConditionObject)", "#isHeldExclusively" ]
  }, {
    "name" : "protected final Collection<Thread> getWaitingThreads()",
    "returnType" : "Collection<Thread>",
    "comment" : "\n         * Returns a collection containing those threads that may be\n         * waiting on this Condition.\n         * Implements {@link AbstractQueuedSynchronizer#getWaitingThreads(ConditionObject)}.\n         *\n         * @return the collection of threads\n         * @throws IllegalMonitorStateException if {@link #isHeldExclusively}\n         *         returns {@code false}\n         ",
    "links" : [ "java.util.concurrent.locks.AbstractQueuedSynchronizer#getWaitingThreads(ConditionObject)", "#isHeldExclusively" ]
  } ],
  "methodNames" : [ "private void doSignal(ConditionNode first, boolean all)", "public final void signal()", "public final void signalAll()", "private int enableWait(ConditionNode node)", "private boolean canReacquire(ConditionNode node)", "private void unlinkCancelledWaiters(ConditionNode node)", "public final void awaitUninterruptibly()", "public final void await() throws InterruptedException", "public final long awaitNanos(long nanosTimeout) throws InterruptedException", "public final boolean awaitUntil(Date deadline) throws InterruptedException", "public final boolean await(long time, TimeUnit unit) throws InterruptedException", " final boolean isOwnedBy(AbstractQueuedSynchronizer sync)", "protected final boolean hasWaiters()", "protected final int getWaitQueueLength()", "protected final Collection<Thread> getWaitingThreads()" ],
  "variableNames" : [ "serialVersionUID", "firstWaiter", "lastWaiter" ]
}