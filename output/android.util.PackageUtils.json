{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/PackageUtils.java",
  "packageName" : "android.util",
  "className" : "PackageUtils",
  "comment" : "\n * Helper functions applicable to packages.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOW_RAM_BUFFER_SIZE_BYTES",
    "type" : "int",
    "comment" : " 1 kB",
    "links" : [ ]
  }, {
    "name" : "HIGH_RAM_BUFFER_SIZE_BYTES",
    "type" : "int",
    "comment" : " 1 MB",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String[] computeSignaturesSha256Digests(@NonNull Signature[] signatures)",
    "returnType" : "String[]",
    "comment" : "\n     * @see #computeSignaturesSha256Digests(Signature[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String[] computeSignaturesSha256Digests(@NonNull Signature[] signatures, @Nullable String separator)",
    "returnType" : "String[]",
    "comment" : "\n     * Computes the SHA256 digests of a list of signatures. Items in the\n     * resulting array of hashes correspond to the signatures in the\n     * input array.\n     * @param signatures The signatures.\n     * @param separator Separator between each pair of characters, such as a colon, or null to omit.\n     * @return The digest array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String computeSignaturesSha256Digest(@NonNull Signature[] signatures)",
    "returnType" : "String",
    "comment" : "\n     * Computes a SHA256 digest of the signatures' SHA256 digests. First,\n     * individual hashes for each signature is derived in a hexademical\n     * form, then these strings are sorted based the natural ordering, and\n     * finally a hash is derived from these strings' bytes.\n     * @param signatures The signatures.\n     * @return The digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String computeSignaturesSha256Digest(@NonNull String[] sha256Digests)",
    "returnType" : "String",
    "comment" : "\n     * Computes a SHA256 digest in of the signatures SHA256 digests. First,\n     * the strings are sorted based the natural ordering, and then a hash is\n     * derived from these strings' bytes.\n     * @param sha256Digests Signature SHA256 hashes in hexademical form.\n     * @return The digest.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] computeSha256DigestBytes(@NonNull byte[] data)",
    "returnType" : "byte[]",
    "comment" : "\n     * Computes the SHA256 digest of some data.\n     * @param data The data.\n     * @return The digest or null if an error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String computeSha256Digest(@NonNull byte[] data)",
    "returnType" : "String",
    "comment" : "\n     * @see #computeSha256Digest(byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String computeSha256Digest(@NonNull byte[] data, @Nullable String separator)",
    "returnType" : "String",
    "comment" : "\n     * Computes the SHA256 digest of some data.\n     * @param data The data.\n     * @param separator Separator between each pair of characters, such as a colon, or null to omit.\n     * @return The digest or null if an error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] createLargeFileBuffer()",
    "returnType" : "byte[]",
    "comment" : "\n     * Creates a fixed size buffer based on whether the device is low ram or not. This is to be used\n     * with the {@link #computeSha256DigestForLargeFile(String, byte[])} and\n     * {@link #computeSha256DigestForLargeFile(String, byte[], String)} methods.\n     * @return a byte array of size {@link #LOW_RAM_BUFFER_SIZE_BYTES} if the device is a low RAM\n     *          device, otherwise a byte array of size {@link #HIGH_RAM_BUFFER_SIZE_BYTES}\n     ",
    "links" : [ "#computeSha256DigestForLargeFile(String", "#HIGH_RAM_BUFFER_SIZE_BYTES", "#LOW_RAM_BUFFER_SIZE_BYTES" ]
  }, {
    "name" : "public static byte[] computeSha256DigestForLargeFileAsBytes(@NonNull String filePath, @NonNull byte[] fileBuffer)",
    "returnType" : "byte[]",
    "comment" : "\n     * Computes the SHA256 digest of a large file.\n     * @param filePath The path to which the file's content is to be hashed.\n     * @param fileBuffer A buffer to read file's content into memory. It is strongly recommended to\n     *                   make use of the {@link #createLargeFileBuffer()} method to create this\n     *                   buffer.\n     * @return The byte array of SHA256 digest or null if an error occurs.\n     ",
    "links" : [ "#createLargeFileBuffer()" ]
  }, {
    "name" : "public static String computeSha256DigestForLargeFile(@NonNull String filePath, @NonNull byte[] fileBuffer)",
    "returnType" : "String",
    "comment" : "\n     * @see #computeSha256DigestForLargeFile(String, byte[], String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String computeSha256DigestForLargeFile(@NonNull String filePath, @NonNull byte[] fileBuffer, @Nullable String separator)",
    "returnType" : "String",
    "comment" : "\n     * Computes the SHA256 digest of a large file.\n     * @param filePath The path to which the file's content is to be hashed.\n     * @param fileBuffer A buffer to read file's content into memory. It is strongly recommended to\n     *                   make use of the {@link #createLargeFileBuffer()} method to create this\n     *                   buffer.\n     * @param separator Separator between each pair of characters, such as colon, or null to omit.\n     * @see #computeSha256DigestForLargeFile(String, byte[])\n     * @return The encoded string of SHA256 digest or null if an error occurs.\n     ",
    "links" : [ "#createLargeFileBuffer()" ]
  } ],
  "methodNames" : [ "public static String[] computeSignaturesSha256Digests(@NonNull Signature[] signatures)", "public static String[] computeSignaturesSha256Digests(@NonNull Signature[] signatures, @Nullable String separator)", "public static String computeSignaturesSha256Digest(@NonNull Signature[] signatures)", "public static String computeSignaturesSha256Digest(@NonNull String[] sha256Digests)", "public static byte[] computeSha256DigestBytes(@NonNull byte[] data)", "public static String computeSha256Digest(@NonNull byte[] data)", "public static String computeSha256Digest(@NonNull byte[] data, @Nullable String separator)", "public static byte[] createLargeFileBuffer()", "public static byte[] computeSha256DigestForLargeFileAsBytes(@NonNull String filePath, @NonNull byte[] fileBuffer)", "public static String computeSha256DigestForLargeFile(@NonNull String filePath, @NonNull byte[] fileBuffer)", "public static String computeSha256DigestForLargeFile(@NonNull String filePath, @NonNull byte[] fileBuffer, @Nullable String separator)" ],
  "variableNames" : [ "LOW_RAM_BUFFER_SIZE_BYTES", "HIGH_RAM_BUFFER_SIZE_BYTES" ]
}