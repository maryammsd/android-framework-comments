{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/biometrics/fingerprint/IFingerprint.java",
  "packageName" : "android.hardware.biometrics.fingerprint",
  "className" : "Default",
  "comment" : " Default implementation for IFingerprint. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public android.hardware.biometrics.fingerprint.SensorProps[] getSensorProps() throws android.os.RemoteException",
    "returnType" : "android.hardware.biometrics.fingerprint.SensorProps[]",
    "comment" : "\n     * getSensorProps:\n     * \n     * @return A list of properties for all of the fingerprint sensors supported by the HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public android.hardware.biometrics.fingerprint.ISession createSession(int sensorId, int userId, android.hardware.biometrics.fingerprint.ISessionCallback cb) throws android.os.RemoteException",
    "returnType" : "android.hardware.biometrics.fingerprint.ISession",
    "comment" : "\n     * createSession:\n     * \n     * Creates an instance of ISession that can be used by the framework to perform operations such\n     * as ISession#enroll, ISession#authenticate, etc. for the given sensorId and userId.\n     * \n     * Calling this method while there is an active session is considered an error. If the framework\n     * wants to create a new session when it already has an active session, it must first cancel the\n     * current operation if it's cancellable or wait until it completes. Then, the framework must\n     * explicitly close the session with ISession#close. Once the framework receives\n     * ISessionCallback#onSessionClosed, a new session can be created.\n     * \n     * Implementations must store user-specific state or metadata in /data/vendor_de/<user>/fpdata\n     * as specified by the SELinux policy. The directory /data/vendor_de is managed by vold (see\n     * vold_prepare_subdirs.cpp). Implementations may store additional user-specific data, such as\n     * embeddings or templates, in StrongBox.\n     * \n     * @param sensorId The sensorId for which this session is being created.\n     * @param userId The userId for which this session is being created.\n     * @param cb A callback to notify the framework about the session's events.\n     * @return A new session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceHash()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public android.hardware.biometrics.fingerprint.SensorProps[] getSensorProps() throws android.os.RemoteException", "public android.hardware.biometrics.fingerprint.ISession createSession(int sensorId, int userId, android.hardware.biometrics.fingerprint.ISessionCallback cb) throws android.os.RemoteException", "public int getInterfaceVersion()", "public String getInterfaceHash()", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}