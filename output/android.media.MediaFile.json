{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaFile.java",
  "packageName" : "android.media",
  "className" : "MediaFile",
  "comment" : "\n * MediaScanner helper class.\n * <p>\n * This heavily relies upon extension to MIME type mappings which are maintained\n * in {@link MimeMap}, to ensure consistency across the OS.\n * <p>\n * When adding a new file type, first add the MIME type mapping to\n * {@link MimeMap}, and then add the MTP format mapping here.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "FIRST_AUDIO_FILE_TYPE",
    "type" : "int",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "LAST_AUDIO_FILE_TYPE",
    "type" : "int",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "sFileTypeMap",
    "type" : "HashMap<String, MediaFileType>",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "sFileTypeToFormatMap",
    "type" : "HashMap<String, Integer>",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "sMimeTypeToFormatMap",
    "type" : "HashMap<String, Integer>",
    "comment" : " maps mime type to MTP format code",
    "links" : [ ]
  }, {
    "name" : "sFormatToMimeTypeMap",
    "type" : "HashMap<Integer, String>",
    "comment" : " maps MTP format code to mime type",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void addFileType(String extension, int fileType, String mimeType)",
    "returnType" : "void",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "private static void addFileType(int mtpFormatCode, @NonNull String mimeType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAudioFileType(int fileType)",
    "returnType" : "boolean",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isVideoFileType(int fileType)",
    "returnType" : "boolean",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isImageFileType(int fileType)",
    "returnType" : "boolean",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPlayListFileType(int fileType)",
    "returnType" : "boolean",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDrmFileType(int fileType)",
    "returnType" : "boolean",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static MediaFileType getFileType(String path)",
    "returnType" : "MediaFileType",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDocumentMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the mime type is document or not.\n     * @param mimeType the mime type to check\n     * @return true, if the mimeType is matched. Otherwise, false.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isExifMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAudioMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isVideoMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isImageMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPlayListMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDrmMimeType(@Nullable String mimeType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getFileTitle(@NonNull String path)",
    "returnType" : "String",
    "comment" : " generates a title based on file name",
    "links" : [ ]
  }, {
    "name" : "public static String getFileExtension(@Nullable String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getFileTypeForMimeType(String mimeType)",
    "returnType" : "int",
    "comment" : " @deprecated file types no longer exist ",
    "links" : [ ]
  }, {
    "name" : "public static String getMimeType(@Nullable String path, int formatCode)",
    "returnType" : "String",
    "comment" : "\n     * Find the best MIME type for the given item. Prefers mappings from file\n     * extensions, since they're more accurate than format codes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getMimeTypeForFile(@Nullable String path)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getMimeTypeForFormatCode(int formatCode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getFormatCode(@Nullable String path, @Nullable String mimeType)",
    "returnType" : "int",
    "comment" : "\n     * Find the best MTP format code mapping for the given item. Prefers\n     * mappings from MIME types, since they're more accurate than file\n     * extensions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getFormatCodeForFile(@Nullable String path)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getFormatCodeForMimeType(@Nullable String mimeType)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String normalizeMimeType(@Nullable String mimeType)",
    "returnType" : "String",
    "comment" : "\n     * Normalize the given MIME type by bouncing through a default file\n     * extension, if defined. This handles cases like \"application/x-flac\" to\n     * \".flac\" to \"audio/flac\".\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "FIRST_AUDIO_FILE_TYPE", "LAST_AUDIO_FILE_TYPE", "sFileTypeMap", "sFileTypeToFormatMap", "sMimeTypeToFormatMap", "sFormatToMimeTypeMap" ],
  "methodNames" : [ " static void addFileType(String extension, int fileType, String mimeType)", "private static void addFileType(int mtpFormatCode, @NonNull String mimeType)", "public static boolean isAudioFileType(int fileType)", "public static boolean isVideoFileType(int fileType)", "public static boolean isImageFileType(int fileType)", "public static boolean isPlayListFileType(int fileType)", "public static boolean isDrmFileType(int fileType)", "public static MediaFileType getFileType(String path)", "public static boolean isDocumentMimeType(@Nullable String mimeType)", "public static boolean isExifMimeType(@Nullable String mimeType)", "public static boolean isAudioMimeType(@Nullable String mimeType)", "public static boolean isVideoMimeType(@Nullable String mimeType)", "public static boolean isImageMimeType(@Nullable String mimeType)", "public static boolean isPlayListMimeType(@Nullable String mimeType)", "public static boolean isDrmMimeType(@Nullable String mimeType)", "public static String getFileTitle(@NonNull String path)", "public static String getFileExtension(@Nullable String path)", "public static int getFileTypeForMimeType(String mimeType)", "public static String getMimeType(@Nullable String path, int formatCode)", "public static String getMimeTypeForFile(@Nullable String path)", "public static String getMimeTypeForFormatCode(int formatCode)", "public static int getFormatCode(@Nullable String path, @Nullable String mimeType)", "public static int getFormatCodeForFile(@Nullable String path)", "public static int getFormatCodeForMimeType(@Nullable String mimeType)", "private static String normalizeMimeType(@Nullable String mimeType)" ]
}