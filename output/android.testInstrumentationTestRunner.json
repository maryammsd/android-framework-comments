{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/InstrumentationTestRunner.java",
  "packageName" : "android.test",
  "className" : "InstrumentationTestRunner",
  "comment" : " (not JavaDoc)\n * Although not necessary in most case, another way to use this class is to extend it and have the\n * derived class return the desired test suite from the {@link #getTestSuite()} method. The test\n * suite returned from this method will be used if no target class is defined in the meta-data or\n * command line argument parameters. If a derived class is used it needs to be added as an\n * instrumentation to the AndroidManifest.xml and the command to run it would look like:\n * <p/>\n * adb shell am instrument -w com.android.foo/<i>com.android.FooInstrumentationTestRunner</i>\n * <p/>\n * Where <i>com.android.FooInstrumentationTestRunner</i> is the derived class.\n *\n * This model is used by many existing app tests, but can probably be deprecated.\n ",
  "variables" : [ {
    "name" : "ARGUMENT_TEST_CLASS",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_TEST_PACKAGE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_TEST_SIZE_PREDICATE",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_DELAY_MSEC",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SMALL_SUITE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIUM_SUITE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LARGE_SUITE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_LOG_ONLY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_ANNOTATION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ARGUMENT_NOT_ANNOTATION",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SELECT_SMALL",
    "type" : "Predicate<TestMethod>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECT_MEDIUM",
    "type" : "Predicate<TestMethod>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECT_LARGE",
    "type" : "Predicate<TestMethod>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SMALL_SUITE_MAX_RUNTIME",
    "type" : "float",
    "comment" : "\n     * This constant defines the maximum allowed runtime (in ms) for a test included in the \"small\"\n     * suite. It is used to make an educated guess at what suite an unlabeled test belongs.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIUM_SUITE_MAX_RUNTIME",
    "type" : "float",
    "comment" : "\n     * This constant defines the maximum allowed runtime (in ms) for a test included in the\n     * \"medium\" suite. It is used to make an educated guess at what suite an unlabeled test belongs.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_VALUE_ID",
    "type" : "String",
    "comment" : "\n     * This value, if stored with key {@link android.app.Instrumentation#REPORT_KEY_IDENTIFIER},\n     * identifies InstrumentationTestRunner as the source of the report.  This is sent with all\n     * status messages.\n     ",
    "links" : [ "android.app.Instrumentation#REPORT_KEY_IDENTIFIER" ]
  }, {
    "name" : "REPORT_KEY_NUM_TOTAL",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * identifies the total number of tests that are being run.  This is sent with all status\n     * messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_NUM_CURRENT",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * identifies the sequence number of the current test.  This is sent with any status message\n     * describing a specific test being started or completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_NAME_CLASS",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * identifies the name of the current test class.  This is sent with any status message\n     * describing a specific test being started or completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_NAME_TEST",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * identifies the name of the current test.  This is sent with any status message\n     * describing a specific test being started or completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_RUN_TIME",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * reports the run time in seconds of the current test.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_NUM_ITERATIONS",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * reports the number of total iterations of the current test.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_SUITE_ASSIGNMENT",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * reports the guessed suite assignment for the current test.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_COVERAGE_PATH",
    "type" : "String",
    "comment" : "\n     * If included in the status or final bundle sent to an IInstrumentationWatcher, this key\n     * identifies the path to the generated code coverage file.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_VALUE_RESULT_START",
    "type" : "int",
    "comment" : "\n     * The test is starting.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_VALUE_RESULT_OK",
    "type" : "int",
    "comment" : "\n     * The test completed successfully.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_VALUE_RESULT_ERROR",
    "type" : "int",
    "comment" : "\n     * The test completed with an error.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_VALUE_RESULT_FAILURE",
    "type" : "int",
    "comment" : "\n     * The test completed with a failure.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPORT_KEY_STACK",
    "type" : "String",
    "comment" : "\n     * If included in the status bundle sent to an IInstrumentationWatcher, this key\n     * identifies a stack trace describing an error or failure.  This is sent with any status\n     * message describing a specific test being completed.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_COVERAGE_FILE_NAME",
    "type" : "String",
    "comment" : " Default file name for code coverage",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResults",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArguments",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestRunner",
    "type" : "AndroidTestRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebug",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJustCount",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuiteAssignmentMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageOfTests",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCoverage",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCoverageFilePath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayMsec",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onCreate(Bundle arguments)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle getArguments()",
    "returnType" : "Bundle",
    "comment" : "\n     * Get the arguments passed to this instrumentation.\n     *\n     * @return the Bundle object\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void addTestListener(TestListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a {@link TestListener}\n     * @hide\n     ",
    "links" : [ "TestListener" ]
  }, {
    "name" : " List<Predicate<TestMethod>> getBuilderRequirements()",
    "returnType" : "List<Predicate<TestMethod>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseTestClasses(String testClassArg, TestSuiteBuilder testSuiteBuilder)",
    "returnType" : "void",
    "comment" : "\n     * Parses and loads the specified set of test classes\n     *\n     * @param testClassArg - comma-separated list of test classes and methods\n     * @param testSuiteBuilder - builder to add tests to\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseTestClass(String testClassName, TestSuiteBuilder testSuiteBuilder)",
    "returnType" : "void",
    "comment" : "\n     * Parse and load the given test class and, optionally, method\n     *\n     * @param testClassName - full package name of test class and optionally method to add.\n     *        Expected format: com.android.TestClass#testMethod\n     * @param testSuiteBuilder - builder to add tests to\n     ",
    "links" : [ ]
  }, {
    "name" : "protected AndroidTestRunner getAndroidTestRunner()",
    "returnType" : "AndroidTestRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean getBooleanArgument(Bundle arguments, String tag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Predicate<TestMethod> getSizePredicateFromArg(String sizeArg)",
    "returnType" : "Predicate<TestMethod>",
    "comment" : "\n     * Returns the size predicate object, corresponding to the \"size\" argument value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Predicate<TestMethod> getAnnotationPredicate(String annotationClassName)",
    "returnType" : "Predicate<TestMethod>",
    "comment" : "\n    * Returns the test predicate object, corresponding to the annotation class value provided via\n    * the {@link #ARGUMENT_ANNOTATION} argument.\n    *\n    * @return the predicate or <code>null</code>\n    ",
    "links" : [ "#ARGUMENT_ANNOTATION" ]
  }, {
    "name" : "private Predicate<TestMethod> getNotAnnotationPredicate(String annotationClassName)",
    "returnType" : "Predicate<TestMethod>",
    "comment" : "\n     * Returns the negative test predicate object, corresponding to the annotation class value\n     * provided via the {@link #ARGUMENT_NOT_ANNOTATION} argument.\n     *\n     * @return the predicate or <code>null</code>\n     ",
    "links" : [ "#ARGUMENT_NOT_ANNOTATION" ]
  }, {
    "name" : "private Class<? extends Annotation> getAnnotationClass(String annotationClassName)",
    "returnType" : "Class<? extends Annotation>",
    "comment" : "\n     * Helper method to return the annotation class with specified name\n     *\n     * @param annotationClassName the fully qualified name of the class\n     * @return the annotation class or <code>null</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void prepareLooper()",
    "returnType" : "void",
    "comment" : "\n     * Initialize the current thread as a looper.\n     * <p/>\n     * Exposed for unit testing.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TestSuite getTestSuite()",
    "returnType" : "TestSuite",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TestSuite getAllTests()",
    "returnType" : "TestSuite",
    "comment" : "\n     * Override this to define all of the tests to run in your package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ClassLoader getLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * Override this to provide access to the class loader of your package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void generateCoverageReport()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getCoverageFilePath()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportEmmaError(Exception e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void reportEmmaError(String hint, Exception e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "ARGUMENT_TEST_CLASS", "ARGUMENT_TEST_PACKAGE", "ARGUMENT_TEST_SIZE_PREDICATE", "ARGUMENT_DELAY_MSEC", "SMALL_SUITE", "MEDIUM_SUITE", "LARGE_SUITE", "ARGUMENT_LOG_ONLY", "ARGUMENT_ANNOTATION", "ARGUMENT_NOT_ANNOTATION", "SELECT_SMALL", "SELECT_MEDIUM", "SELECT_LARGE", "SMALL_SUITE_MAX_RUNTIME", "MEDIUM_SUITE_MAX_RUNTIME", "REPORT_VALUE_ID", "REPORT_KEY_NUM_TOTAL", "REPORT_KEY_NUM_CURRENT", "REPORT_KEY_NAME_CLASS", "REPORT_KEY_NAME_TEST", "REPORT_KEY_RUN_TIME", "REPORT_KEY_NUM_ITERATIONS", "REPORT_KEY_SUITE_ASSIGNMENT", "REPORT_KEY_COVERAGE_PATH", "REPORT_VALUE_RESULT_START", "REPORT_VALUE_RESULT_OK", "REPORT_VALUE_RESULT_ERROR", "REPORT_VALUE_RESULT_FAILURE", "REPORT_KEY_STACK", "DEFAULT_COVERAGE_FILE_NAME", "LOG_TAG", "mResults", "mArguments", "mTestRunner", "mDebug", "mJustCount", "mSuiteAssignmentMode", "mTestCount", "mPackageOfTests", "mCoverage", "mCoverageFilePath", "mDelayMsec" ],
  "methodNames" : [ "public void onCreate(Bundle arguments)", "public Bundle getArguments()", "protected void addTestListener(TestListener listener)", " List<Predicate<TestMethod>> getBuilderRequirements()", "private void parseTestClasses(String testClassArg, TestSuiteBuilder testSuiteBuilder)", "private void parseTestClass(String testClassName, TestSuiteBuilder testSuiteBuilder)", "protected AndroidTestRunner getAndroidTestRunner()", "private boolean getBooleanArgument(Bundle arguments, String tag)", "private Predicate<TestMethod> getSizePredicateFromArg(String sizeArg)", "private Predicate<TestMethod> getAnnotationPredicate(String annotationClassName)", "private Predicate<TestMethod> getNotAnnotationPredicate(String annotationClassName)", "private Class<? extends Annotation> getAnnotationClass(String annotationClassName)", " void prepareLooper()", "public void onStart()", "public TestSuite getTestSuite()", "public TestSuite getAllTests()", "public ClassLoader getLoader()", "private void generateCoverageReport()", "private String getCoverageFilePath()", "private void reportEmmaError(Exception e)", "private void reportEmmaError(String hint, Exception e)" ]
}