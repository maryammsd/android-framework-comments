{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/filterpacks/videosink/MediaEncoderFilter.java",
  "packageName" : "android.filterpacks.videosink",
  "className" : "MediaEncoderFilter",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "mRecording",
    "type" : "boolean",
    "comment" : " Recording state. When set to false, recording will stop, or will not\n     * start if not yet running the graph. Instead, frames are simply ignored.\n     * When switched back to true, recording will restart. This allows a single\n     * graph to both provide preview and to record video. If this is false,\n     * recording settings can be updated while the graph is running.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOutputFile",
    "type" : "String",
    "comment" : " Filename to save the output. ",
    "links" : [ ]
  }, {
    "name" : "mFd",
    "type" : "FileDescriptor",
    "comment" : " File Descriptor to save the output. ",
    "links" : [ ]
  }, {
    "name" : "mAudioSource",
    "type" : "int",
    "comment" : " Input audio source. If not set, no audio will be recorded.\n     * Select from the values in MediaRecorder.AudioSource\n     ",
    "links" : [ ]
  }, {
    "name" : "mInfoListener",
    "type" : "MediaRecorder.OnInfoListener",
    "comment" : " Media recorder info listener, which needs to implement\n     * MediaRecorder.OnInfoListener. Set this to receive notifications about\n     * recording events.\n     ",
    "links" : [ ]
  }, {
    "name" : "mErrorListener",
    "type" : "MediaRecorder.OnErrorListener",
    "comment" : " Media recorder error listener, which needs to implement\n     * MediaRecorder.OnErrorListener. Set this to receive notifications about\n     * recording errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRecordingDoneListener",
    "type" : "OnRecordingDoneListener",
    "comment" : " Media recording done callback, which needs to implement OnRecordingDoneListener.\n     * Set this to finalize media upon completion of media recording.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOrientationHint",
    "type" : "int",
    "comment" : " Orientation hint. Used for indicating proper video playback orientation.\n     * Units are in degrees of clockwise rotation, valid values are (0, 90, 180,\n     * 270).\n     ",
    "links" : [ ]
  }, {
    "name" : "mProfile",
    "type" : "CamcorderProfile",
    "comment" : " Camcorder profile to use. Select from the profiles available in\n     * android.media.CamcorderProfile. If this field is set, it overrides\n     * settings to width, height, framerate, outputFormat, and videoEncoder.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : " Frame width to be encoded, defaults to 320.\n     * Actual received frame size has to match this ",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : " Frame height to to be encoded, defaults to 240.\n     * Actual received frame size has to match ",
    "links" : [ ]
  }, {
    "name" : "mFps",
    "type" : "int",
    "comment" : " Stream framerate to encode the frames at.\n     * By default, frames are encoded at 30 FPS",
    "links" : [ ]
  }, {
    "name" : "mOutputFormat",
    "type" : "int",
    "comment" : " The output format to encode the frames in.\n     * Choose an output format from the options in\n     * android.media.MediaRecorder.OutputFormat ",
    "links" : [ ]
  }, {
    "name" : "mVideoEncoder",
    "type" : "int",
    "comment" : " The videoencoder to encode the frames with.\n     * Choose a videoencoder from the options in\n     * android.media.MediaRecorder.VideoEncoder ",
    "links" : [ ]
  }, {
    "name" : "mSourceRegion",
    "type" : "Quad",
    "comment" : " The input region to read from the frame. The corners of this quad are\n     * mapped to the output rectangle. The input frame ranges from (0,0)-(1,1),\n     * top-left to bottom-right. The corners of the quad are specified in the\n     * order bottom-left, bottom-right, top-left, top-right.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMaxFileSize",
    "type" : "long",
    "comment" : " The maximum filesize (in bytes) of the recording session.\n     * By default, it will be 0 and will be passed on to the MediaRecorder.\n     * If the limit is zero or negative, MediaRecorder will disable the limit",
    "links" : [ ]
  }, {
    "name" : "mMaxDurationMs",
    "type" : "int",
    "comment" : " The maximum duration (in milliseconds) of the recording session.\n     * By default, it will be 0 and will be passed on to the MediaRecorder.\n     * If the limit is zero or negative, MediaRecorder will record indefinitely",
    "links" : [ ]
  }, {
    "name" : "mTimeBetweenTimeLapseFrameCaptureUs",
    "type" : "long",
    "comment" : " TimeLapse Interval between frames.\n     * By default, it will be 0. Whether the recording is timelapsed\n     * is inferred based on its value being greater than 0 ",
    "links" : [ ]
  }, {
    "name" : "NO_AUDIO_SOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProgram",
    "type" : "ShaderProgram",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScreen",
    "type" : "GLFrame",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingActive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimestampNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastTimeLapseFrameRealTimestampNs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumFramesEncoded",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureTimeLapse",
    "type" : "boolean",
    "comment" : " Inferred based on (mTimeBetweenTimeLapseFrameCaptureUs > 0)",
    "links" : [ ]
  }, {
    "name" : "mLogVerbose",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaRecorder",
    "type" : "MediaRecorder",
    "comment" : " Our hook to the encoder",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setupPorts()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fieldPortValueUpdated(String name, FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateSourceRegion()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateMediaRecorderParams()",
    "returnType" : "void",
    "comment" : " documentation",
    "links" : [ ]
  }, {
    "name" : "public void prepare(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void open(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startRecording(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean skipFrameAndModifyTimestamp(long timestampNs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void process(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void stopRecording(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown(FilterContext context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mRecording", "mOutputFile", "mFd", "mAudioSource", "mInfoListener", "mErrorListener", "mRecordingDoneListener", "mOrientationHint", "mProfile", "mWidth", "mHeight", "mFps", "mOutputFormat", "mVideoEncoder", "mSourceRegion", "mMaxFileSize", "mMaxDurationMs", "mTimeBetweenTimeLapseFrameCaptureUs", "NO_AUDIO_SOURCE", "mSurfaceId", "mProgram", "mScreen", "mRecordingActive", "mTimestampNs", "mLastTimeLapseFrameRealTimestampNs", "mNumFramesEncoded", "mCaptureTimeLapse", "mLogVerbose", "TAG", "mMediaRecorder" ],
  "methodNames" : [ "public void setupPorts()", "public void fieldPortValueUpdated(String name, FilterContext context)", "private void updateSourceRegion()", "private void updateMediaRecorderParams()", "public void prepare(FilterContext context)", "public void open(FilterContext context)", "private void startRecording(FilterContext context)", "public boolean skipFrameAndModifyTimestamp(long timestampNs)", "public void process(FilterContext context)", "private void stopRecording(FilterContext context)", "public void close(FilterContext context)", "public void tearDown(FilterContext context)" ]
}