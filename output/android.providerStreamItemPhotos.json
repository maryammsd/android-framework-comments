{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "StreamItemPhotos",
  "comment" : "\n     * <p>\n     * Constants for the stream_item_photos table, which contains photos associated with\n     * social stream updates.\n     * </p>\n     * <p>\n     * Access to social stream photos requires additional permissions beyond the read/write\n     * contact permissions required by the provider.  Querying for social stream photos\n     * requires android.permission.READ_SOCIAL_STREAM permission, and inserting or updating\n     * social stream photos requires android.permission.WRITE_SOCIAL_STREAM permission.\n     * </p>\n     * <h3>Account check</h3>\n     * <p>\n     * The content URIs to the insert, update and delete operations are required to have the account\n     * information matching that of the owning raw contact as query parameters, namely\n     * {@link RawContacts#ACCOUNT_TYPE} and {@link RawContacts#ACCOUNT_NAME}.\n     * {@link RawContacts#DATA_SET} isn't required.\n     * </p>\n     * <h3>Operations</h3>\n     * <dl>\n     * <dt><b>Insert</b></dt>\n     * <dd>\n     * <p>Social stream photo entries are associated with a social stream item.  Photos\n     * can be inserted into a social stream item in a couple of ways:\n     * <dl>\n     * <dt>\n     * Via the {@link StreamItems.StreamItemPhotos#CONTENT_DIRECTORY} sub-path of a\n     * stream item:\n     * </dt>\n     * <dd>\n     * <pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItemPhotos.SORT_INDEX, 1);\n     * values.put(StreamItemPhotos.PHOTO, photoData);\n     * Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n     * ContentUris.appendId(builder, streamItemId);\n     * builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * Uri photoUri = getContentResolver().insert(builder.build(), values);\n     * long photoId = ContentUris.parseId(photoUri);\n     * </pre>\n     * </dd>\n     * <dt>Via the {@link ContactsContract.StreamItems#CONTENT_PHOTO_URI} URI:</dt>\n     * <dd>\n     * <pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n     * values.put(StreamItemPhotos.SORT_INDEX, 1);\n     * values.put(StreamItemPhotos.PHOTO, photoData);\n     * Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * Uri photoUri = getContentResolver().insert(builder.build(), values);\n     * long photoId = ContentUris.parseId(photoUri);\n     * </pre>\n     * </dd>\n     * </dl>\n     * </p>\n     * </dd>\n     * <dt><b>Update</b></dt>\n     * <dd>\n     * <p>Updates can only be made against a specific {@link StreamItemPhotos} entry,\n     * identified by both the stream item ID it belongs to and the stream item photo ID.\n     * This can be specified in two ways.\n     * <dl>\n     * <dt>Via the {@link StreamItems.StreamItemPhotos#CONTENT_DIRECTORY} sub-path of a\n     * stream item:\n     * </dt>\n     * <dd>\n     * <pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItemPhotos.PHOTO, newPhotoData);\n     * Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n     * ContentUris.appendId(builder, streamItemId);\n     * builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n     * ContentUris.appendId(builder, streamItemPhotoId);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * getContentResolver().update(builder.build(), values, null, null);\n     * </pre>\n     * </dd>\n     * <dt>Via the {@link ContactsContract.StreamItems#CONTENT_PHOTO_URI} URI:</dt>\n     * <dd>\n     * <pre>\n     * ContentValues values = new ContentValues();\n     * values.put(StreamItemPhotos.STREAM_ITEM_ID, streamItemId);\n     * values.put(StreamItemPhotos.PHOTO, newPhotoData);\n     * Uri.Builder builder = StreamItems.CONTENT_PHOTO_URI.buildUpon();\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * getContentResolver().update(builder.build(), values);\n     * </pre>\n     * </dd>\n     * </dl>\n     * </p>\n     * </dd>\n     * <dt><b>Delete</b></dt>\n     * <dd>Deletes can be made against either a specific photo item in a stream item, or\n     * against all or a selected subset of photo items under a stream item.\n     * For example:\n     * <dl>\n     * <dt>Deleting a single photo via the\n     * {@link StreamItems.StreamItemPhotos#CONTENT_DIRECTORY} sub-path of a stream item:\n     * </dt>\n     * <dd>\n     * <pre>\n     * Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n     * ContentUris.appendId(builder, streamItemId);\n     * builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n     * ContentUris.appendId(builder, streamItemPhotoId);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * getContentResolver().delete(builder.build(), null, null);\n     * </pre>\n     * </dd>\n     * <dt>Deleting all photos under a stream item</dt>\n     * <dd>\n     * <pre>\n     * Uri.Builder builder = StreamItems.CONTENT_URI.buildUpon();\n     * ContentUris.appendId(builder, streamItemId);\n     * builder.appendEncodedPath(StreamItems.StreamItemPhotos.CONTENT_DIRECTORY);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_NAME, accountName);\n     * builder.appendQueryParameter(RawContacts.ACCOUNT_TYPE, accountType);\n     * getContentResolver().delete(builder.build(), null, null);\n     * </pre>\n     * </dd>\n     * </dl>\n     * </dd>\n     * <dt><b>Query</b></dt>\n     * <dl>\n     * <dt>Querying for a specific photo in a stream item</dt>\n     * <dd>\n     * <pre>\n     * Cursor c = getContentResolver().query(\n     *     ContentUris.withAppendedId(\n     *         Uri.withAppendedPath(\n     *             ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)\n     *             StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),\n     *         streamItemPhotoId), null, null, null, null);\n     * </pre>\n     * </dd>\n     * <dt>Querying for all photos in a stream item</dt>\n     * <dd>\n     * <pre>\n     * Cursor c = getContentResolver().query(\n     *     Uri.withAppendedPath(\n     *         ContentUris.withAppendedId(StreamItems.CONTENT_URI, streamItemId)\n     *         StreamItems.StreamItemPhotos#CONTENT_DIRECTORY),\n     *     null, null, null, StreamItemPhotos.SORT_INDEX);\n     * </pre>\n     * </dl>\n     * The record will contain both a {@link StreamItemPhotos#PHOTO_FILE_ID} and a\n     * {@link StreamItemPhotos#PHOTO_URI}.  The {@link StreamItemPhotos#PHOTO_FILE_ID}\n     * can be used in conjunction with the {@link ContactsContract.DisplayPhoto} API to\n     * retrieve photo content, or you can open the {@link StreamItemPhotos#PHOTO_URI} as\n     * an asset file, as follows:\n     * <pre>\n     * public InputStream openDisplayPhoto(String photoUri) {\n     *     try {\n     *         AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(photoUri, \"r\");\n     *         return fd.createInputStream();\n     *     } catch (IOException e) {\n     *         return null;\n     *     }\n     * }\n     * <pre>\n     * </dd>\n     * </dl>\n     *\n     * @deprecated - Do not use. This will not be supported in the future. In the future,\n     * cursors returned from related queries will be empty.\n     *\n     * @removed\n     ",
  "variables" : [ {
    "name" : "PHOTO",
    "type" : "String",
    "comment" : "\n         * <p>\n         * The binary representation of the photo.  Any size photo can be inserted;\n         * the provider will resize it appropriately for storage and display.\n         * </p>\n         * <p>\n         * This is only intended for use when inserting or updating a stream item photo.\n         * To retrieve the photo that was stored, open {@link StreamItemPhotos#PHOTO_URI}\n         * as an asset file.\n         * </p>\n         * <P>Type: BLOB</P>\n         *\n         * @deprecated - Do not use. This will not be supported in the future. In the future,\n         * cursors returned from related queries will be empty.\n         ",
    "links" : [ "StreamItemPhotos#PHOTO_URI" ]
  } ],
  "methods" : [ ],
  "variableNames" : [ "PHOTO" ],
  "methodNames" : [ ]
}