{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/NetworkChangeNotifierAutoDetect.java",
  "packageName" : "org.chromium.net",
  "className" : "NetworkChangeNotifierAutoDetect",
  "comment" : " TODO(crbug.com/635567): Fix this properly.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNKNOWN_LINK_SPEED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : " {@link Looper} for the thread this object lives on.",
    "links" : [ "android.os.Looper" ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " Used to post to the thread this object lives on.",
    "links" : [ ]
  }, {
    "name" : "mIntentFilter",
    "type" : "NetworkConnectivityIntentFilter",
    "comment" : " {@link IntentFilter} for incoming global broadcast {@link Intent}s this object listens for.",
    "links" : [ "android.content.IntentFilter", "android.content.Intent" ]
  }, {
    "name" : "mObserver",
    "type" : "Observer",
    "comment" : " Notifications are sent to this {@link Observer}.",
    "links" : [ "Observer" ]
  }, {
    "name" : "mRegistrationPolicy",
    "type" : "RegistrationPolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultNetworkCallback",
    "type" : "NetworkCallback",
    "comment" : " Starting with Android Pie, used to detect changes in default network.",
    "links" : [ ]
  }, {
    "name" : "mConnectivityManagerDelegate",
    "type" : "ConnectivityManagerDelegate",
    "comment" : " mConnectivityManagerDelegates and mWifiManagerDelegate are only non-final for testing.",
    "links" : [ ]
  }, {
    "name" : "mWifiManagerDelegate",
    "type" : "WifiManagerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkCallback",
    "type" : "MyNetworkCallback",
    "comment" : " mNetworkCallback will be null if ConnectivityManager.registerNetworkCallback() ever fails.",
    "links" : [ ]
  }, {
    "name" : "mNetworkRequest",
    "type" : "NetworkRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkState",
    "type" : "NetworkState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIgnoreNextBroadcast",
    "type" : "boolean",
    "comment" : " useless work.",
    "links" : [ ]
  }, {
    "name" : "mShouldSignalObserver",
    "type" : "boolean",
    "comment" : " optimization to avoid useless work.",
    "links" : [ ]
  }, {
    "name" : "mRegisterNetworkCallbackFailed",
    "type" : "boolean",
    "comment" : " network-specific callbacks (e.g. Observer.onNetwork*() ) will be issued.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean onThread()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void assertOnThread()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void runOnThread(Runnable r)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void setConnectivityManagerDelegateForTests(ConnectivityManagerDelegate delegate)",
    "returnType" : "void",
    "comment" : " Allows overriding the ConnectivityManagerDelegate for tests. ",
    "links" : [ ]
  }, {
    "name" : " void setWifiManagerDelegateForTests(WifiManagerDelegate delegate)",
    "returnType" : "void",
    "comment" : " Allows overriding the WifiManagerDelegate for tests. ",
    "links" : [ ]
  }, {
    "name" : " RegistrationPolicy getRegistrationPolicy()",
    "returnType" : "RegistrationPolicy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isReceiverRegisteredForTesting()",
    "returnType" : "boolean",
    "comment" : " Returns whether the object has registered to receive network connectivity intents. ",
    "links" : [ ]
  }, {
    "name" : "public void destroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void register()",
    "returnType" : "void",
    "comment" : " Registers a BroadcastReceiver in the given context. ",
    "links" : [ ]
  }, {
    "name" : "public void unregister()",
    "returnType" : "void",
    "comment" : " Unregisters a BroadcastReceiver in the given context. ",
    "links" : [ ]
  }, {
    "name" : "public NetworkState getCurrentNetworkState()",
    "returnType" : "NetworkState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Network[] getAllNetworksFiltered(ConnectivityManagerDelegate connectivityManagerDelegate, Network ignoreNetwork)",
    "returnType" : "Network[]",
    "comment" : "\n     * Returns all connected networks that are useful and accessible to Chrome.\n     * @param ignoreNetwork ignore this network as if it is not connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Network[] getNetworksForTesting()",
    "returnType" : "Network[]",
    "comment" : " Returns all connected networks that are useful and accessible to Chrome. ",
    "links" : [ ]
  }, {
    "name" : "public long[] getNetworksAndTypes()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns an array of all of the device's currently connected\n     * networks and ConnectionTypes, including only those that are useful and accessible to Chrome.\n     * Array elements are a repeated sequence of:\n     *   NetID of network\n     *   ConnectionType of network\n     * Only available when auto-detection has been enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Network getDefaultNetwork()",
    "returnType" : "Network",
    "comment" : "\n     * Returns the device's current default connected network used for\n     * communication.\n     * Returns null when not implemented.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDefaultNetId()",
    "returnType" : "long",
    "comment" : "\n     * Returns NetID of device's current default connected network used for\n     * communication.\n     * Returns NetId.INVALID when not implemented.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerNetworkCallbackFailed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if NetworkCallback failed to register, indicating that network-specific\n     * callbacks will not be issued.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertToConnectionType(int type, int subtype)",
    "returnType" : "int",
    "comment" : " Returns the connection type for the given ConnectivityManager type and subtype. ",
    "links" : [ ]
  }, {
    "name" : "public void onReceive(Context context, Intent intent)",
    "returnType" : "void",
    "comment" : " BroadcastReceiver",
    "links" : [ ]
  }, {
    "name" : "private void connectionTypeChanged()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void connectionTypeChangedTo(NetworkState networkState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long networkToNetId(Network network)",
    "returnType" : "long",
    "comment" : "\n     * Extracts NetID of Network on Lollipop and NetworkHandle (which is munged NetID) on\n     * Marshmallow and newer releases.\n     * TODO(crbug.com/1489183): Rename networkToNetId to something meaningful and update\n     * javadoc comment.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean onThread()", "private void assertOnThread()", "private void runOnThread(Runnable r)", " void setConnectivityManagerDelegateForTests(ConnectivityManagerDelegate delegate)", " void setWifiManagerDelegateForTests(WifiManagerDelegate delegate)", " RegistrationPolicy getRegistrationPolicy()", " boolean isReceiverRegisteredForTesting()", "public void destroy()", "public void register()", "public void unregister()", "public NetworkState getCurrentNetworkState()", "private static Network[] getAllNetworksFiltered(ConnectivityManagerDelegate connectivityManagerDelegate, Network ignoreNetwork)", "public Network[] getNetworksForTesting()", "public long[] getNetworksAndTypes()", "public Network getDefaultNetwork()", "public long getDefaultNetId()", "public boolean registerNetworkCallbackFailed()", "private static int convertToConnectionType(int type, int subtype)", "public void onReceive(Context context, Intent intent)", "private void connectionTypeChanged()", "private void connectionTypeChangedTo(NetworkState networkState)", "public static long networkToNetId(Network network)" ],
  "variableNames" : [ "TAG", "UNKNOWN_LINK_SPEED", "mLooper", "mHandler", "mIntentFilter", "mObserver", "mRegistrationPolicy", "mDefaultNetworkCallback", "mConnectivityManagerDelegate", "mWifiManagerDelegate", "mNetworkCallback", "mNetworkRequest", "mRegistered", "mNetworkState", "mIgnoreNextBroadcast", "mShouldSignalObserver", "mRegisterNetworkCallbackFailed" ]
}