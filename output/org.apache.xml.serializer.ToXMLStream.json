{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/ToXMLStream.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "ToXMLStream",
  "comment" : "\n * This class converts SAX or SAX-like calls to a \n * serialized xml document.  The xsl:output method is \"xml\".\n * \n * This class is used explicitly in code generated by XSLTC, \n * so it is \"public\", but it should \n * be viewed as internal or package private, this is not an API.\n * \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_xmlcharInfo",
    "type" : "CharInfo",
    "comment" : "\n     * Map that tells which XML characters should have special treatment, and it\n     *  provides character to entity name lookup.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void CopyFrom(ToXMLStream xmlListener)",
    "returnType" : "void",
    "comment" : "\n     * Copy properties from another SerializerToXML.\n     *\n     * @param xmlListener non-null reference to a SerializerToXML object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startDocumentInternal() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the beginning of a document.\n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of the end of a document.\n     *\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startPreserving() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Starts a whitespace preserving section. All characters printed\n     * within a preserving section are printed without indentation and\n     * without consolidating multiple spaces. This is equivalent to\n     * the <tt>xml:space=&quot;preserve&quot;</tt> attribute. Only XML\n     * and HTML serializers need to support this method.\n     * <p>\n     * The contents of the whitespace preserving section will be delivered\n     * through the regular <tt>characters</tt> event.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endPreserving() throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Ends a whitespace preserving section.\n     *\n     * @see #startPreserving\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notification of a processing instruction.\n     *\n     * @param target The processing instruction target.\n     * @param data The processing instruction data, or null if\n     *        none was supplied.\n     * @throws org.xml.sax.SAXException Any SAX exception, possibly\n     *            wrapping another exception.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void entityReference(String name) throws org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n     * Receive notivication of a entityReference.\n     *\n     * @param name The name of the entity.\n     *\n     * @throws org.xml.sax.SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addUniqueAttribute(String name, String value, int flags) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to add an attribute to the currently open element. \n     * The caller has guaranted that this attribute is unique, which means that it\n     * not been seen before and will not be seen again.\n     * \n     * @param name the qualified name of the attribute\n     * @param value the value of the attribute which can contain only\n     * ASCII printable characters characters in the range 32 to 127 inclusive.\n     * @param flags the bit values of this integer give optimization information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean xslAttribute) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Add an attribute to the current element.\n     * @param uri the URI associated with the element name\n     * @param localName local part of the attribute name\n     * @param rawName   prefix:localName\n     * @param type\n     * @param value the value of the attribute\n     * @param xslAttribute true if this attribute is from an xsl:attribute,\n     * false if declared within the elements opening tag.\n     * @throws SAXException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String elemName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * @see ExtendedContentHandler#endElement(String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * This method is used to notify the serializer of a namespace mapping (or node)\n     * that applies to the current element whose startElement() call has already been seen.\n     * The official SAX startPrefixMapping(prefix,uri) is to define a mapping for a child\n     * element that is soon to be seen with a startElement() call. The official SAX call \n     * does not apply to the current element, hence the reason for this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean pushNamespace(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n     * From XSLTC\n     * Declare a prefix to point to a namespace URI. Inform SAX handler\n     * if this is a new prefix mapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean reset()",
    "returnType" : "boolean",
    "comment" : "\n     * Try's to reset the super class and reset this class for \n     * re-use, so that you don't need to create a new serializer \n     * (mostly for performance reasons).\n     * \n     * @return true if the class was successfuly reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetToXMLStream()",
    "returnType" : "void",
    "comment" : "\n     * Reset all of the fields owned by ToStream class\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getXMLVersion()",
    "returnType" : "String",
    "comment" : "\n     * This method checks for the XML version of output document.\n     * If XML version of output document is not specified, then output \n     * document is of version XML 1.0.\n     * If XML version of output doucment is specified, but it is not either \n     * XML 1.0 or XML 1.1, a warning message is generated, the XML Version of\n     * output document is set to XML 1.0 and processing continues.\n     * @return string (XML version)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void CopyFrom(ToXMLStream xmlListener)", "public void startDocumentInternal() throws org.xml.sax.SAXException", "public void endDocument() throws org.xml.sax.SAXException", "public void startPreserving() throws org.xml.sax.SAXException", "public void endPreserving() throws org.xml.sax.SAXException", "public void processingInstruction(String target, String data) throws org.xml.sax.SAXException", "public void entityReference(String name) throws org.xml.sax.SAXException", "public void addUniqueAttribute(String name, String value, int flags) throws SAXException", "public void addAttribute(String uri, String localName, String rawName, String type, String value, boolean xslAttribute) throws SAXException", "public void endElement(String elemName) throws SAXException", "public void namespaceAfterStartElement(final String prefix, final String uri) throws SAXException", "protected boolean pushNamespace(String prefix, String uri)", "public boolean reset()", "private void resetToXMLStream()", "private String getXMLVersion()" ],
  "variableNames" : [ "m_xmlcharInfo" ]
}