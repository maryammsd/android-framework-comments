{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/IntentService.java",
  "packageName" : "android.app",
  "className" : "IntentService",
  "comment" : "\n * IntentService is an extension of the {@link Service} component class that\n * handles asynchronous requests (expressed as {@link Intent}s) on demand.\n * Clients send requests\n * through {@link android.content.Context#startService(Intent)} calls; the\n * service is started as needed, handles each Intent in turn using a worker\n * thread, and stops itself when it runs out of work.\n *\n * <p>This \"work queue processor\" pattern is commonly used to offload tasks\n * from an application's main thread.  The IntentService class exists to\n * simplify this pattern and take care of the mechanics.  To use it, extend\n * IntentService and implement {@link #onHandleIntent(Intent)}.  IntentService\n * will receive the Intents, launch a worker thread, and stop the service as\n * appropriate.\n *\n * <p>All requests are handled on a single worker thread -- they may take as\n * long as necessary (and will not block the application's main loop), but\n * only one request will be processed at a time.\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For a detailed discussion about how to create services, read the\n * <a href=\"{@docRoot}guide/components/services.html\">Services</a> developer\n * guide.</p>\n * </div>\n *\n * @see androidx.core.app.JobIntentService\n *\n * @deprecated IntentService is subject to all the\n *   <a href=\"{@docRoot}about/versions/oreo/background.html\">background execution limits</a>\n *   imposed with Android 8.0 (API level 26). Consider using {@link androidx.work.WorkManager}\n *   instead.\n ",
  "links" : [ "android.content.Context#startService(Intent)", "android.app.Service", "androidx.work.WorkManager", "android.content.Intent", "#onHandleIntent(Intent)" ],
  "variables" : [ {
    "name" : "mServiceLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceHandler",
    "type" : "ServiceHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRedelivery",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setIntentRedelivery(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets intent redelivery preferences.  Usually called from the constructor\n     * with your preferred semantics.\n     *\n     * <p>If enabled is true,\n     * {@link #onStartCommand(Intent, int, int)} will return\n     * {@link Service#START_REDELIVER_INTENT}, so if this process dies before\n     * {@link #onHandleIntent(Intent)} returns, the process will be restarted\n     * and the intent redelivered.  If multiple Intents have been sent, only\n     * the most recent one is guaranteed to be redelivered.\n     *\n     * <p>If enabled is false (the default),\n     * {@link #onStartCommand(Intent, int, int)} will return\n     * {@link Service#START_NOT_STICKY}, and if the process dies, the Intent\n     * dies along with it.\n     ",
    "links" : [ "#onStartCommand(Intent", "android.app.Service#START_NOT_STICKY", "android.app.Service#START_REDELIVER_INTENT", "#onHandleIntent(Intent)" ]
  }, {
    "name" : "public void onCreate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onStart(@Nullable Intent intent, int startId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int onStartCommand(@Nullable Intent intent, int flags, int startId)",
    "returnType" : "int",
    "comment" : "\n     * You should not override this method for your IntentService. Instead,\n     * override {@link #onHandleIntent}, which the system calls when the IntentService\n     * receives a start request.\n     * @see android.app.Service#onStartCommand\n     ",
    "links" : [ "#onHandleIntent" ]
  }, {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * Unless you provide binding for your service, you don't need to implement this\n     * method, because the default implementation returns null.\n     * @see android.app.Service#onBind\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract void onHandleIntent(@Nullable Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * This method is invoked on the worker thread with a request to process.\n     * Only one Intent is processed at a time, but the processing happens on a\n     * worker thread that runs independently from other application logic.\n     * So, if this code takes a long time, it will hold up other requests to\n     * the same IntentService, but it will not hold up anything else.\n     * When all requests have been handled, the IntentService stops itself,\n     * so you should not call {@link #stopSelf}.\n     *\n     * @param intent The value passed to {@link\n     *               android.content.Context#startService(Intent)}.\n     *               This may be null if the service is being restarted after\n     *               its process has gone away; see\n     *               {@link android.app.Service#onStartCommand}\n     *               for details.\n     ",
    "links" : [ "#stopSelf", "android.content.Context#startService(Intent)", "android.app.Service#onStartCommand" ]
  } ],
  "methodNames" : [ "public void setIntentRedelivery(boolean enabled)", "public void onCreate()", "public void onStart(@Nullable Intent intent, int startId)", "public int onStartCommand(@Nullable Intent intent, int flags, int startId)", "public void onDestroy()", "public IBinder onBind(Intent intent)", "protected abstract void onHandleIntent(@Nullable Intent intent)" ],
  "variableNames" : [ "mServiceLooper", "mServiceHandler", "mName", "mRedelivery" ]
}