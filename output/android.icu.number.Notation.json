{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/number/Notation.java",
  "packageName" : "android.icu.number",
  "className" : "Notation",
  "comment" : "\n * A class that defines the notation style to be used when formatting numbers in NumberFormatter.\n *\n * @see NumberFormatter\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SCIENTIFIC",
    "type" : "ScientificNotation",
    "comment" : " TODO: Support engineering intervals other than 3?",
    "links" : [ ]
  }, {
    "name" : "ENGINEERING",
    "type" : "ScientificNotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPACT_SHORT",
    "type" : "CompactNotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMPACT_LONG",
    "type" : "CompactNotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIMPLE",
    "type" : "SimpleNotation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ScientificNotation scientific()",
    "returnType" : "ScientificNotation",
    "comment" : "\n     * Print the number using scientific notation (also known as scientific form, standard index form, or\n     * standard form in the UK). The format for scientific notation varies by locale; for example, many\n     * Western locales display the number in the form \"#E0\", where the number is displayed with one digit\n     * before the decimal separator, zero or more digits after the decimal separator, and the\n     * corresponding power of 10 displayed after the \"E\".\n     *\n     * <p>\n     * Example outputs in <em>en-US</em> when printing 8.765E4 through 8.765E-3:\n     *\n     * <pre>\n     * 8.765E4\n     * 8.765E3\n     * 8.765E2\n     * 8.765E1\n     * 8.765E0\n     * 8.765E-1\n     * 8.765E-2\n     * 8.765E-3\n     * 0E0\n     * </pre>\n     *\n     * @return A ScientificNotation for chaining or passing to the NumberFormatter notation() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScientificNotation engineering()",
    "returnType" : "ScientificNotation",
    "comment" : "\n     * Print the number using engineering notation, a variant of scientific notation in which the\n     * exponent must be divisible by 3.\n     *\n     * <p>\n     * Example outputs in <em>en-US</em> when printing 8.765E4 through 8.765E-3:\n     *\n     * <pre>\n     * 87.65E3\n     * 8.765E3\n     * 876.5E0\n     * 87.65E0\n     * 8.765E0\n     * 876.5E-3\n     * 87.65E-3\n     * 8.765E-3\n     * 0E0\n     * </pre>\n     *\n     * @return A ScientificNotation for chaining or passing to the NumberFormatter notation() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CompactNotation compactShort()",
    "returnType" : "CompactNotation",
    "comment" : "\n     * Print the number using short-form compact notation.\n     *\n     * <p>\n     * <em>Compact notation</em>, defined in Unicode Technical Standard #35 Part 3 Section 2.4.1, prints\n     * numbers with localized prefixes or suffixes corresponding to different powers of ten. Compact\n     * notation is similar to engineering notation in how it scales numbers.\n     *\n     * <p>\n     * Compact notation is ideal for displaying large numbers (over ~1000) to humans while at the same\n     * time minimizing screen real estate.\n     *\n     * <p>\n     * In short form, the powers of ten are abbreviated. In <em>en-US</em>, the abbreviations are \"K\" for\n     * thousands, \"M\" for millions, \"B\" for billions, and \"T\" for trillions. Example outputs in\n     * <em>en-US</em> when printing 8.765E7 through 8.765E0:\n     *\n     * <pre>\n     * 88M\n     * 8.8M\n     * 876K\n     * 88K\n     * 8.8K\n     * 876\n     * 88\n     * 8.8\n     * </pre>\n     *\n     * <p>\n     * When compact notation is specified without an explicit rounding strategy, numbers are rounded off\n     * to the closest integer after scaling the number by the corresponding power of 10, but with a digit\n     * shown after the decimal separator if there is only one digit before the decimal separator. The\n     * default compact notation rounding strategy is equivalent to:\n     *\n     * <pre>\n     * Rounder.integer().withMinDigits(2)\n     * </pre>\n     *\n     * @return A CompactNotation for passing to the NumberFormatter notation() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CompactNotation compactLong()",
    "returnType" : "CompactNotation",
    "comment" : "\n     * Print the number using long-form compact notation. For more information on compact notation, see\n     * {@link #compactShort}.\n     *\n     * <p>\n     * In long form, the powers of ten are spelled out fully. Example outputs in <em>en-US</em> when\n     * printing 8.765E7 through 8.765E0:\n     *\n     * <pre>\n     * 88 million\n     * 8.8 million\n     * 876 thousand\n     * 88 thousand\n     * 8.8 thousand\n     * 876\n     * 88\n     * 8.8\n     * </pre>\n     *\n     * @return A CompactNotation for passing to the NumberFormatter notation() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ "#compactShort" ]
  }, {
    "name" : "public static SimpleNotation simple()",
    "returnType" : "SimpleNotation",
    "comment" : "\n     * Print the number using simple notation without any scaling by powers of ten. This is the default\n     * behavior.\n     *\n     * <p>\n     * Since this is the default behavior, this method needs to be called only when it is necessary to\n     * override a previous setting.\n     *\n     * <p>\n     * Example outputs in <em>en-US</em> when printing 8.765E7 through 8.765E0:\n     *\n     * <pre>\n     * 87,650,000\n     * 8,765,000\n     * 876,500\n     * 87,650\n     * 8,765\n     * 876.5\n     * 87.65\n     * 8.765\n     * </pre>\n     *\n     * @return A SimpleNotation for passing to the NumberFormatter notation() setter.\n     * @see NumberFormatter\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ScientificNotation scientific()", "public static ScientificNotation engineering()", "public static CompactNotation compactShort()", "public static CompactNotation compactLong()", "public static SimpleNotation simple()" ],
  "variableNames" : [ "SCIENTIFIC", "ENGINEERING", "COMPACT_SHORT", "COMPACT_LONG", "SIMPLE" ]
}