{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/usage/StorageStatsManager.java",
  "packageName" : "android.app.usage",
  "className" : "StorageStatsManager",
  "comment" : "\n * Access to detailed storage statistics. This provides a summary of how apps,\n * users, and external/shared storage is utilizing disk space.\n * <p class=\"note\">\n * Note: no permissions are required when calling these APIs for your own\n * package or UID. However, requesting details for any other package requires\n * the {@code android.Manifest.permission#PACKAGE_USAGE_STATS} permission, which\n * is a system-level permission that will not be granted to normal apps.\n * Declaring that permission expresses your intention to use this API and an end\n * user can then choose to grant this permission through the Settings\n * application.\n * </p>\n ",
  "variables" : [ {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IStorageStatsManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isQuotaSupported(@NonNull UUID storageUuid)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isQuotaSupported(String uuid)",
    "returnType" : "boolean",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReservedSupported(@NonNull UUID storageUuid)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBytes(@NonNull UUID storageUuid) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Return the total size of the underlying physical media that is hosting\n     * this storage volume.\n     * <p>\n     * This value is best suited for visual display to end users, since it's\n     * designed to reflect the total storage size advertised in a retail\n     * environment.\n     * <p>\n     * Apps making logical decisions about disk space should always use\n     * {@link File#getTotalSpace()} instead of this value.\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @throws IOException when the storage device isn't present.\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT", "java.io.File#getTotalSpace()" ]
  }, {
    "name" : "public long getTotalBytes(String uuid) throws IOException",
    "returnType" : "long",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public long getFreeBytes(@NonNull UUID storageUuid) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Return the free space on the requested storage volume.\n     * <p>\n     * This value is best suited for visual display to end users, since it's\n     * designed to reflect both unused space <em>and</em> and cached space that\n     * could be reclaimed by the system.\n     * <p>\n     * Apps making logical decisions about disk space should always use\n     * {@link StorageManager#getAllocatableBytes(UUID)} instead of this value.\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @throws IOException when the storage device isn't present.\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT", "android.os.storage.StorageManager#getAllocatableBytes(UUID)" ]
  }, {
    "name" : "public long getFreeBytes(String uuid) throws IOException",
    "returnType" : "long",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public long getCacheBytes(@NonNull UUID storageUuid) throws IOException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public long getCacheBytes(String uuid) throws IOException",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public StorageStats queryStatsForPackage(@NonNull UUID storageUuid, @NonNull String packageName, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException",
    "returnType" : "StorageStats",
    "comment" : "\n     * Return storage statistics for a specific package on the requested storage\n     * volume.\n     * <p class=\"note\">\n     * Note: no permissions are required when calling this API for your own\n     * package. However, requesting details for any other package requires the\n     * {@code android.Manifest.permission#PACKAGE_USAGE_STATS} permission, which\n     * is a system-level permission that will not be granted to normal apps.\n     * Declaring that permission expresses your intention to use this API and an\n     * end user can then choose to grant this permission through the Settings\n     * application.\n     * </p>\n     * <p class=\"note\">\n     * Note: if the requested package uses the {@code android:sharedUserId}\n     * manifest feature, this call will be forced into a slower manual\n     * calculation path. If possible, consider always using\n     * {@link #queryStatsForUid(UUID, int)}, which is typically faster.\n     * </p>\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param packageName the package name you're interested in.\n     * @param user the user you're interested in.\n     * @throws PackageManager.NameNotFoundException when the requested package\n     *             name isn't installed for the requested user.\n     * @throws IOException when the storage device isn't present.\n     * @see ApplicationInfo#storageUuid\n     * @see PackageInfo#packageName\n     ",
    "links" : [ "#queryStatsForUid(UUID", "android.os.storage.StorageManager#UUID_DEFAULT" ]
  }, {
    "name" : "public StorageStats queryStatsForPackage(String uuid, String packageName, UserHandle user) throws PackageManager.NameNotFoundException, IOException",
    "returnType" : "StorageStats",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public StorageStats queryStatsForUid(@NonNull UUID storageUuid, int uid) throws IOException",
    "returnType" : "StorageStats",
    "comment" : "\n     * Return storage statistics for a specific UID on the requested storage\n     * volume.\n     * <p class=\"note\">\n     * Note: no permissions are required when calling this API for your own UID.\n     * However, requesting details for any other UID requires the\n     * {@code android.Manifest.permission#PACKAGE_USAGE_STATS} permission, which\n     * is a system-level permission that will not be granted to normal apps.\n     * Declaring that permission expresses your intention to use this API and an\n     * end user can then choose to grant this permission through the Settings\n     * application.\n     * </p>\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param uid the UID you're interested in.\n     * @throws IOException when the storage device isn't present.\n     * @see ApplicationInfo#storageUuid\n     * @see ApplicationInfo#uid\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT" ]
  }, {
    "name" : "public StorageStats queryStatsForUid(String uuid, int uid) throws IOException",
    "returnType" : "StorageStats",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public StorageStats queryStatsForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws IOException",
    "returnType" : "StorageStats",
    "comment" : "\n     * Return storage statistics for a specific {@link UserHandle} on the\n     * requested storage volume.\n     * <p class=\"note\">\n     * Note: this API requires the\n     * {@code android.Manifest.permission#PACKAGE_USAGE_STATS} permission, which\n     * is a system-level permission that will not be granted to normal apps.\n     * Declaring that permission expresses your intention to use this API and an\n     * end user can then choose to grant this permission through the Settings\n     * application.\n     * </p>\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param user the user you're interested in.\n     * @throws IOException when the storage device isn't present.\n     * @see android.os.Process#myUserHandle()\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT", "android.os.UserHandle" ]
  }, {
    "name" : "public StorageStats queryStatsForUser(String uuid, UserHandle user) throws IOException",
    "returnType" : "StorageStats",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public ExternalStorageStats queryExternalStatsForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws IOException",
    "returnType" : "ExternalStorageStats",
    "comment" : "\n     * Return shared/external storage statistics for a specific\n     * {@link UserHandle} on the requested storage volume.\n     * <p class=\"note\">\n     * Note: this API requires the\n     * {@code android.Manifest.permission#PACKAGE_USAGE_STATS} permission, which\n     * is a system-level permission that will not be granted to normal apps.\n     * Declaring that permission expresses your intention to use this API and an\n     * end user can then choose to grant this permission through the Settings\n     * application.\n     * </p>\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @throws IOException when the storage device isn't present.\n     * @see android.os.Process#myUserHandle()\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT", "android.os.UserHandle" ]
  }, {
    "name" : "public ExternalStorageStats queryExternalStatsForUser(String uuid, UserHandle user) throws IOException",
    "returnType" : "ExternalStorageStats",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public long getCacheQuotaBytes(String volumeUuid, int uid)",
    "returnType" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Collection<CrateInfo> queryCratesForUid(@NonNull UUID storageUuid, int uid) throws IOException, PackageManager.NameNotFoundException",
    "returnType" : "Collection<CrateInfo>",
    "comment" : "\n     * Return all of crate information for the specified storageUuid, packageName, and\n     * userHandle.\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param uid the uid you're interested in.\n     * @return the collection of crate information.\n     * @throws PackageManager.NameNotFoundException when the package name is not found.\n     * @throws IOException cause by IO, not support, or the other reasons.\n     * @hide\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT" ]
  }, {
    "name" : "public Collection<CrateInfo> queryCratesForPackage(@NonNull UUID storageUuid, @NonNull String packageName, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException",
    "returnType" : "Collection<CrateInfo>",
    "comment" : "\n     * Return all of crates information for the specified storageUuid, packageName, and\n     * userHandle.\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param packageName the package name you're interested in.\n     * @param user the user you're interested in.\n     * @return the collection of crate information.\n     * @throws PackageManager.NameNotFoundException when the package name is not found.\n     * @throws IOException cause by IO, not support, or the other reasons.\n     * @hide\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT" ]
  }, {
    "name" : "public Collection<CrateInfo> queryCratesForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException",
    "returnType" : "Collection<CrateInfo>",
    "comment" : "\n     * Return all of crate information for the specified storageUuid, packageName, and\n     * userHandle.\n     *\n     * @param storageUuid the UUID of the storage volume you're interested in,\n     *            such as {@link StorageManager#UUID_DEFAULT}.\n     * @param user the user you're interested in.\n     * @return the collection of crate information.\n     * @throws PackageManager.NameNotFoundException when the package name is not found.\n     * @throws IOException cause by IO, not support, or the other reasons.\n     * @hide\n     ",
    "links" : [ "android.os.storage.StorageManager#UUID_DEFAULT" ]
  } ],
  "variableNames" : [ "mContext", "mService" ],
  "methodNames" : [ "public boolean isQuotaSupported(@NonNull UUID storageUuid)", "public boolean isQuotaSupported(String uuid)", "public boolean isReservedSupported(@NonNull UUID storageUuid)", "public long getTotalBytes(@NonNull UUID storageUuid) throws IOException", "public long getTotalBytes(String uuid) throws IOException", "public long getFreeBytes(@NonNull UUID storageUuid) throws IOException", "public long getFreeBytes(String uuid) throws IOException", "public long getCacheBytes(@NonNull UUID storageUuid) throws IOException", "public long getCacheBytes(String uuid) throws IOException", "public StorageStats queryStatsForPackage(@NonNull UUID storageUuid, @NonNull String packageName, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException", "public StorageStats queryStatsForPackage(String uuid, String packageName, UserHandle user) throws PackageManager.NameNotFoundException, IOException", "public StorageStats queryStatsForUid(@NonNull UUID storageUuid, int uid) throws IOException", "public StorageStats queryStatsForUid(String uuid, int uid) throws IOException", "public StorageStats queryStatsForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws IOException", "public StorageStats queryStatsForUser(String uuid, UserHandle user) throws IOException", "public ExternalStorageStats queryExternalStatsForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws IOException", "public ExternalStorageStats queryExternalStatsForUser(String uuid, UserHandle user) throws IOException", "public long getCacheQuotaBytes(String volumeUuid, int uid)", "public Collection<CrateInfo> queryCratesForUid(@NonNull UUID storageUuid, int uid) throws IOException, PackageManager.NameNotFoundException", "public Collection<CrateInfo> queryCratesForPackage(@NonNull UUID storageUuid, @NonNull String packageName, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException", "public Collection<CrateInfo> queryCratesForUser(@NonNull UUID storageUuid, @NonNull UserHandle user) throws PackageManager.NameNotFoundException, IOException" ]
}