{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/TrustManagerFactory.java",
  "packageName" : "javax.net.ssl",
  "className" : "TrustManagerFactory",
  "comment" : "\n * This class acts as a factory for trust managers based on a\n * source of trust material. Each trust manager manages a specific\n * type of trust material for use by secure sockets. The trust\n * material is based on a KeyStore and/or provider specific sources.\n *\n * <p> Android provides the following <code>TrustManagerFactory</code> algorithms:\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Algorithm</th>\n *       <th>Supported API Levels</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>PKIX</td>\n *       <td>1+</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * @since 1.4\n * @see TrustManager\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "provider",
    "type" : "Provider",
    "comment" : " The provider",
    "links" : [ ]
  }, {
    "name" : "factorySpi",
    "type" : "TrustManagerFactorySpi",
    "comment" : " The provider implementation (delegate)",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : " The name of the trust management algorithm.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final String getDefaultAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Obtains the default TrustManagerFactory algorithm name.\n     *\n     * <p>The default TrustManager can be changed at runtime by setting\n     * the value of the {@code ssl.TrustManagerFactory.algorithm}\n     * security property to the desired algorithm name.\n     *\n     * @see java.security.Security security properties\n     * @return the default algorithm name as specified by the\n     * {@code ssl.TrustManagerFactory.algorithm} security property, or an\n     * implementation-specific default if no such property exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the algorithm name of this <code>TrustManagerFactory</code>\n     * object.\n     *\n     * <p>This is the same name that was specified in one of the\n     * <code>getInstance</code> calls that created this\n     * <code>TrustManagerFactory</code> object.\n     *\n     * @return the algorithm name of this <code>TrustManagerFactory</code>\n     *          object\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final TrustManagerFactory getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "TrustManagerFactory",
    "comment" : "\n     * Returns a <code>TrustManagerFactory</code> object that acts as a\n     * factory for trust managers.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new TrustManagerFactory object encapsulating the\n     * TrustManagerFactorySpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested trust management\n     *          algorithm.  See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @return the new <code>TrustManagerFactory</code> object.\n     *\n     * @exception NoSuchAlgorithmException if no Provider supports a\n     *          TrustManagerFactorySpi implementation for the\n     *          specified algorithm.\n     * @exception NullPointerException if algorithm is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final TrustManagerFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "TrustManagerFactory",
    "comment" : "\n     * Returns a <code>TrustManagerFactory</code> object that acts as a\n     * factory for trust managers.\n     *\n     * <p> A new KeyManagerFactory object encapsulating the\n     * KeyManagerFactorySpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the standard name of the requested trust management\n     *          algorithm.  See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return the new <code>TrustManagerFactory</code> object\n     *\n     * @throws NoSuchAlgorithmException if a TrustManagerFactorySpi\n     *          implementation for the specified algorithm is not\n     *          available from the specified provider.\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *          registered in the security provider list.\n     *\n     * @throws IllegalArgumentException if the provider name is null or empty.\n     * @throws NullPointerException if algorithm is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static final TrustManagerFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "TrustManagerFactory",
    "comment" : "\n     * Returns a <code>TrustManagerFactory</code> object that acts as a\n     * factory for trust managers.\n     *\n     * <p> A new TrustManagerFactory object encapsulating the\n     * TrustManagerFactorySpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the standard name of the requested trust management\n     *          algorithm.  See the <a href=\n     *  \"{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html\">\n     *          Java Secure Socket Extension Reference Guide </a>\n     *          for information about standard algorithm names.\n     *\n     * @param provider an instance of the provider.\n     *\n     * @return the new <code>TrustManagerFactory</code> object.\n     *\n     * @throws NoSuchAlgorithmException if a TrustManagerFactorySpi\n     *          implementation for the specified algorithm is not available\n     *          from the specified Provider object.\n     *\n     * @throws IllegalArgumentException if the provider is null.\n     * @throws NullPointerException if algorithm is null.\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this <code>TrustManagerFactory</code> object.\n     *\n     * @return the provider of this <code>TrustManagerFactory</code> object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void init(KeyStore ks) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this factory with a source of certificate\n     * authorities and related trust material.\n     * <P>\n     * The provider typically uses a KeyStore as a basis for making\n     * trust decisions.\n     * <P>\n     * For more flexible initialization, please see\n     * {@link #init(ManagerFactoryParameters)}.\n     *\n     * @param ks the key store, or null\n     * @throws KeyStoreException if this operation fails\n     ",
    "links" : [ "#init(ManagerFactoryParameters)" ]
  }, {
    "name" : "public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Initializes this factory with a source of provider-specific\n     * trust material.\n     * <P>\n     * In some cases, initialization parameters other than a keystore\n     * may be needed by a provider.  Users of that particular provider\n     * are expected to pass an implementation of the appropriate\n     * <CODE>ManagerFactoryParameters</CODE> as defined by the\n     * provider.  The provider can then call the specified methods in\n     * the <CODE>ManagerFactoryParameters</CODE> implementation to obtain the\n     * needed information.\n     *\n     * @param spec an implementation of a provider-specific parameter\n     *          specification\n     * @throws InvalidAlgorithmParameterException if an error is\n     *          encountered\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TrustManager[] getTrustManagers()",
    "returnType" : "TrustManager[]",
    "comment" : "\n     * Returns one trust manager for each type of trust material.\n     *\n     * @throws IllegalStateException if the factory is not initialized.\n     *\n     * @return the trust managers\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final String getDefaultAlgorithm()", "public final String getAlgorithm()", "public static final TrustManagerFactory getInstance(String algorithm) throws NoSuchAlgorithmException", "public static final TrustManagerFactory getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static final TrustManagerFactory getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final void init(KeyStore ks) throws KeyStoreException", "public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException", "public final TrustManager[] getTrustManagers()" ],
  "variableNames" : [ "provider", "factorySpi", "algorithm" ]
}