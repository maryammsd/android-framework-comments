{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/ContentHandler.java",
  "packageName" : "java.net",
  "className" : "ContentHandler",
  "comment" : "\n * The abstract class {@code ContentHandler} is the superclass\n * of all classes that read an {@code Object} from a\n * {@code URLConnection}.\n * <p>\n * An application does not generally call the\n * {@code getContent} method in this class directly. Instead, an\n * application calls the {@code getContent} method in class\n * {@code URL} or in {@code URLConnection}.\n * The application's content handler factory (an instance of a class that\n * implements the interface {@code ContentHandlerFactory} set\n * up by a call to {@code setContentHandler}) is\n * called with a {@code String} giving the MIME type of the\n * object being received on the socket. The factory returns an\n * instance of a subclass of {@code ContentHandler}, and its\n * {@code getContent} method is called to create the object.\n * <p>\n * If no content handler could be found, URLConnection will\n * look for a content handler in a user-defineable set of places.\n * By default it looks in sun.net.www.content, but users can define a\n * vertical-bar delimited set of class prefixes to search through in\n * addition by defining the java.content.handler.pkgs property.\n * The class name must be of the form:\n * <pre>\n *     {package-prefix}.{major}.{minor}\n * e.g.\n *     YoyoDyne.experimental.text.plain\n * </pre>\n * If the loading of the content handler class would be performed by\n * a classloader that is outside of the delegation chain of the caller,\n * the JVM will need the RuntimePermission \"getClassLoader\".\n *\n * @author  James Gosling\n * @see     java.net.ContentHandler#getContent(java.net.URLConnection)\n * @see     java.net.ContentHandlerFactory\n * @see     java.net.URL#getContent()\n * @see     java.net.URLConnection\n * @see     java.net.URLConnection#getContent()\n * @see     java.net.URLConnection#setContentHandlerFactory(java.net.ContentHandlerFactory)\n * @since   JDK1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Object getContent(URLConnection urlc) throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Given a URL connect stream positioned at the beginning of the\n     * representation of an object, this method reads that stream and\n     * creates an object from it.\n     *\n     * @param      urlc   a URL connection.\n     * @return     the object read by the {@code ContentHandler}.\n     * @exception  IOException  if an I/O error occurs while reading the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getContent(URLConnection urlc, Class[] classes) throws IOException",
    "returnType" : "Object",
    "comment" : "\n     * Given a URL connect stream positioned at the beginning of the\n     * representation of an object, this method reads that stream and\n     * creates an object that matches one of the types specified.\n     *\n     * The default implementation of this method should call getContent()\n     * and screen the return type for a match of the suggested types.\n     *\n     * @param      urlc   a URL connection.\n     * @param      classes      an array of types requested\n     * @return     the object read by the {@code ContentHandler} that is\n     *                 the first match of the suggested types.\n     *                 null if none of the requested  are supported.\n     * @exception  IOException  if an I/O error occurs while reading the object.\n     * @since 1.3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Object getContent(URLConnection urlc) throws IOException", "public Object getContent(URLConnection urlc, Class[] classes) throws IOException" ],
  "variableNames" : [ ]
}