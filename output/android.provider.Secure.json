{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Settings.java",
  "packageName" : "android.provider",
  "className" : "Secure",
  "comment" : "\n     * Secure system settings, containing system preferences that applications\n     * can read but are not allowed to write.  These are for preferences that\n     * the user must explicitly modify through the UI of a system app. Normal\n     * applications cannot modify the secure settings database, either directly\n     * or by calling the \"put\" methods that this class contains.\n     ",
  "variables" : [ {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// style URL for this table\n         ",
    "links" : [ ]
  }, {
    "name" : "sProviderHolder",
    "type" : "ContentProviderHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNameValueCache",
    "type" : "NameValueCache",
    "comment" : " Populated lazily, guarded by class object:",
    "links" : [ ]
  }, {
    "name" : "sLockSettings",
    "type" : "ILockSettings",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsSystemProcess",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO_LOCK_SETTINGS",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MOVED_TO_GLOBAL",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ADAPTIVE_SLEEP",
    "type" : "String",
    "comment" : "\n         * Control whether to enable adaptive sleep mode.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVELOPMENT_SETTINGS_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DEVELOPMENT_SETTINGS_ENABLED}\n         * instead\n         ",
    "links" : [ "android.provider.Settings.Global#DEVELOPMENT_SETTINGS_ENABLED" ]
  }, {
    "name" : "BUGREPORT_IN_POWER_MENU",
    "type" : "String",
    "comment" : "\n         * When the user has enable the option to have a \"bug report\" command\n         * in the power menu.\n         * @deprecated Use {@link android.provider.Settings.Global#BUGREPORT_IN_POWER_MENU} instead\n         * @hide\n         ",
    "links" : [ "android.provider.Settings.Global#BUGREPORT_IN_POWER_MENU" ]
  }, {
    "name" : "ADB_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#ADB_ENABLED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#ADB_ENABLED" ]
  }, {
    "name" : "ALLOW_MOCK_LOCATION",
    "type" : "String",
    "comment" : "\n         * Setting to allow mock locations and location provider status to be injected into the\n         * LocationManager service for testing purposes during application development.  These\n         * locations and status values  override actual location and status information generated\n         * by network, gps, or other location providers.\n         *\n         * @deprecated This settings is not used anymore.\n         ",
    "links" : [ ]
  }, {
    "name" : "ODI_CAPTIONS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting to indicate that on device captions are enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ANDROID_ID",
    "type" : "String",
    "comment" : "\n         * On Android 8.0 (API level 26) and higher versions of the platform,\n         * a 64-bit number (expressed as a hexadecimal string), unique to\n         * each combination of app-signing key, user, and device.\n         * Values of {@code ANDROID_ID} are scoped by signing key and user.\n         * The value may change if a factory reset is performed on the\n         * device or if an APK signing key changes.\n         *\n         * For more information about how the platform handles {@code ANDROID_ID}\n         * in Android 8.0 (API level 26) and higher, see <a\n         * href=\"{@docRoot}about/versions/oreo/android-8.0-changes.html#privacy-all\">\n         * Android 8.0 Behavior Changes</a>.\n         *\n         * <p class=\"note\"><strong>Note:</strong> For apps that were installed\n         * prior to updating the device to a version of Android 8.0\n         * (API level 26) or higher, the value of {@code ANDROID_ID} changes\n         * if the app is uninstalled and then reinstalled after the OTA.\n         * To preserve values across uninstalls after an OTA to Android 8.0\n         * or higher, developers can use\n         * <a href=\"{@docRoot}guide/topics/data/keyvaluebackup.html\">\n         * Key/Value Backup</a>.</p>\n         *\n         * <p>In versions of the platform lower than Android 8.0 (API level 26),\n         * a 64-bit number (expressed as a hexadecimal string) that is randomly\n         * generated when the user first sets up the device and should remain\n         * constant for the lifetime of the user's device.\n         *\n         * On devices that have\n         * <a href=\"{@docRoot}about/versions/android-4.2.html#MultipleUsers\">\n         * multiple users</a>, each user appears as a\n         * completely separate device, so the {@code ANDROID_ID} value is\n         * unique to each user.</p>\n         *\n         * <p class=\"note\"><strong>Note:</strong> If the caller is an Instant App the ID is scoped\n         * to the Instant App, it is generated when the Instant App is first installed and reset if\n         * the user clears the Instant App.\n         ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#BLUETOOTH_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#BLUETOOTH_ON" ]
  }, {
    "name" : "DATA_ROAMING",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DATA_ROAMING} instead\n         ",
    "links" : [ "android.provider.Settings.Global#DATA_ROAMING" ]
  }, {
    "name" : "DEFAULT_INPUT_METHOD",
    "type" : "String",
    "comment" : "\n         * Setting to record the input method used by default, holding the ID\n         * of the desired method.\n         ",
    "links" : [ ]
  }, {
    "name" : "SELECTED_INPUT_METHOD_SUBTYPE",
    "type" : "String",
    "comment" : "\n         * Setting to record the input method subtype used by default, holding the ID\n         * of the desired method.\n         ",
    "links" : [ ]
  }, {
    "name" : "INPUT_METHODS_SUBTYPE_HISTORY",
    "type" : "String",
    "comment" : "\n         * Setting to record the history of input method subtype, holding the pair of ID of IME\n         * and its last used subtype.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INPUT_METHOD_SELECTOR_VISIBILITY",
    "type" : "String",
    "comment" : "\n         * Setting to record the visibility of input method selector\n         ",
    "links" : [ ]
  }, {
    "name" : "VOICE_INTERACTION_SERVICE",
    "type" : "String",
    "comment" : "\n         * The currently selected voice interaction service flattened ComponentName.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_SERVICE",
    "type" : "String",
    "comment" : "\n         * The currently selected autofill service flattened ComponentName.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_FEATURE_FIELD_CLASSIFICATION",
    "type" : "String",
    "comment" : "\n         * Boolean indicating if Autofill supports field classification.\n         *\n         * @see android.service.autofill.AutofillService\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DARK_MODE_DIALOG_SEEN",
    "type" : "String",
    "comment" : "\n         * Boolean indicating if the dark mode dialog shown on first toggle has been seen.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DARK_THEME_CUSTOM_START_TIME",
    "type" : "String",
    "comment" : "\n         * Custom time when Dark theme is scheduled to activate.\n         * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DARK_THEME_CUSTOM_END_TIME",
    "type" : "String",
    "comment" : "\n         * Custom time when Dark theme is scheduled to deactivate.\n         * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_USER_DATA_MAX_USER_DATA_SIZE",
    "type" : "String",
    "comment" : "\n         * Defines value returned by {@link android.service.autofill.UserData#getMaxUserDataSize()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.autofill.UserData#getMaxUserDataSize()" ]
  }, {
    "name" : "AUTOFILL_USER_DATA_MAX_FIELD_CLASSIFICATION_IDS_SIZE",
    "type" : "String",
    "comment" : "\n         * Defines value returned by\n         * {@link android.service.autofill.UserData#getMaxFieldClassificationIdsSize()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.autofill.UserData#getMaxFieldClassificationIdsSize()" ]
  }, {
    "name" : "AUTOFILL_USER_DATA_MAX_CATEGORY_COUNT",
    "type" : "String",
    "comment" : "\n         * Defines value returned by\n         * {@link android.service.autofill.UserData#getMaxCategoryCount()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.autofill.UserData#getMaxCategoryCount()" ]
  }, {
    "name" : "AUTOFILL_USER_DATA_MAX_VALUE_LENGTH",
    "type" : "String",
    "comment" : "\n         * Defines value returned by {@link android.service.autofill.UserData#getMaxValueLength()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.autofill.UserData#getMaxValueLength()" ]
  }, {
    "name" : "AUTOFILL_USER_DATA_MIN_VALUE_LENGTH",
    "type" : "String",
    "comment" : "\n         * Defines value returned by {@link android.service.autofill.UserData#getMinValueLength()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.service.autofill.UserData#getMinValueLength()" ]
  }, {
    "name" : "CONTENT_CAPTURE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Defines whether Content Capture is enabled for the user.\n         *\n         * <p>Type: {@code int} ({@code 0} for disabled, {@code 1} for enabled).\n         * <p>Default: enabled\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_PROVISIONED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#DEVICE_PROVISIONED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#DEVICE_PROVISIONED" ]
  }, {
    "name" : "MANAGED_PROVISIONING_DPC_DOWNLOADED",
    "type" : "String",
    "comment" : "\n         * Indicates whether a DPC has been downloaded during provisioning.\n         *\n         * <p>Type: int (0 for false, 1 for true)\n         *\n         * <p>If this is true, then any attempts to begin setup again should result in factory reset\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SECURE_FRP_MODE",
    "type" : "String",
    "comment" : "\n         * Indicates whether the device is under restricted secure FRP mode.\n         * Secure FRP mode is enabled when the device is under FRP. On solving of FRP challenge,\n         * device is removed from this mode.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_SETUP_COMPLETE",
    "type" : "String",
    "comment" : "\n         * Indicates whether the current user has completed setup via the setup wizard.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_SETUP_PERSONALIZATION_NOT_STARTED",
    "type" : "int",
    "comment" : "\n         * Indicates that the user has not started setup personalization.\n         * One of the possible states for {@link #USER_SETUP_PERSONALIZATION_STATE}.\n         *\n         * @hide\n         ",
    "links" : [ "#USER_SETUP_PERSONALIZATION_STATE" ]
  }, {
    "name" : "USER_SETUP_PERSONALIZATION_STARTED",
    "type" : "int",
    "comment" : "\n         * Indicates that the user has not yet completed setup personalization.\n         * One of the possible states for {@link #USER_SETUP_PERSONALIZATION_STATE}.\n         *\n         * @hide\n         ",
    "links" : [ "#USER_SETUP_PERSONALIZATION_STATE" ]
  }, {
    "name" : "USER_SETUP_PERSONALIZATION_PAUSED",
    "type" : "int",
    "comment" : "\n         * Indicates that the user has snoozed personalization and will complete it later.\n         * One of the possible states for {@link #USER_SETUP_PERSONALIZATION_STATE}.\n         *\n         * @hide\n         ",
    "links" : [ "#USER_SETUP_PERSONALIZATION_STATE" ]
  }, {
    "name" : "USER_SETUP_PERSONALIZATION_COMPLETE",
    "type" : "int",
    "comment" : "\n         * Indicates that the user has completed setup personalization.\n         * One of the possible states for {@link #USER_SETUP_PERSONALIZATION_STATE}.\n         *\n         * @hide\n         ",
    "links" : [ "#USER_SETUP_PERSONALIZATION_STATE" ]
  }, {
    "name" : "USER_SETUP_PERSONALIZATION_STATE",
    "type" : "String",
    "comment" : "\n         * Defines the user's current state of device personalization.\n         * The possible states are defined in {@link UserSetupPersonalization}.\n         *\n         * @hide\n         ",
    "links" : [ "UserSetupPersonalization" ]
  }, {
    "name" : "TV_USER_SETUP_COMPLETE",
    "type" : "String",
    "comment" : "\n         * Whether the current user has been set up via setup wizard (0 = false, 1 = true)\n         * This value differs from USER_SETUP_COMPLETE in that it can be reset back to 0\n         * in case SetupWizard has been re-enabled on TV devices.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "COMPLETED_CATEGORY_PREFIX",
    "type" : "String",
    "comment" : "\n         * The prefix for a category name that indicates whether a suggested action from that\n         * category was marked as completed.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_INPUT_METHODS",
    "type" : "String",
    "comment" : "\n         * List of input methods that are currently enabled.  This is a string\n         * containing the IDs of all enabled input methods, each ID separated\n         * by ':'.\n         *\n         * Format like \"ime0;subtype0;subtype1;subtype2:ime1:ime2;subtype0\"\n         * where imeId is ComponentName and subtype is int32.\n         ",
    "links" : [ ]
  }, {
    "name" : "DISABLED_SYSTEM_INPUT_METHODS",
    "type" : "String",
    "comment" : "\n         * List of system input methods that are currently disabled.  This is a string\n         * containing the IDs of all disabled input methods, each ID separated\n         * by ':'.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_IME_WITH_HARD_KEYBOARD",
    "type" : "String",
    "comment" : "\n         * Whether to show the IME when a hard keyboard is connected. This is a boolean that\n         * determines if the IME should be shown when a hard keyboard is attached.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "HTTP_PROXY",
    "type" : "String",
    "comment" : "\n         * Host name and port for global http proxy. Uses ':' seperator for\n         * between host and port.\n         *\n         * @deprecated Use {@link Global#HTTP_PROXY}\n         ",
    "links" : [ "#HTTP_PROXY" ]
  }, {
    "name" : "ALWAYS_ON_VPN_APP",
    "type" : "String",
    "comment" : "\n         * Package designated as always-on VPN provider.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ON_VPN_LOCKDOWN",
    "type" : "String",
    "comment" : "\n         * Whether to block networking outside of VPN connections while always-on is set.\n         * @see #ALWAYS_ON_VPN_APP\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ON_VPN_LOCKDOWN_WHITELIST",
    "type" : "String",
    "comment" : "\n         * Comma separated list of packages that are allowed to access the network when VPN is in\n         * lockdown mode but not running.\n         * @see #ALWAYS_ON_VPN_LOCKDOWN\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTALL_NON_MARKET_APPS",
    "type" : "String",
    "comment" : "\n         * Whether applications can be installed for this user via the system's\n         * {@link Intent#ACTION_INSTALL_PACKAGE} mechanism.\n         *\n         * <p>1 = permit app installation via the system package installer intent\n         * <p>0 = do not allow use of the package installer\n         * @deprecated Starting from {@link android.os.Build.VERSION_CODES#O}, apps should use\n         * {@link PackageManager#canRequestPackageInstalls()}\n         * @see PackageManager#canRequestPackageInstalls()\n         ",
    "links" : [ "android.content.pm.PackageManager#canRequestPackageInstalls()", "android.os.Build.VERSION_CODES#O", "android.content.Intent#ACTION_INSTALL_PACKAGE" ]
  }, {
    "name" : "UNKNOWN_SOURCES_DEFAULT_REVERSED",
    "type" : "String",
    "comment" : "\n         * A flag to tell {@link com.android.server.devicepolicy.DevicePolicyManagerService} that\n         * the default for {@link #INSTALL_NON_MARKET_APPS} is reversed for this user on OTA. So it\n         * can set the restriction {@link android.os.UserManager#DISALLOW_INSTALL_UNKNOWN_SOURCES}\n         * on behalf of the profile owner if needed to make the change transparent for profile\n         * owners.\n         *\n         * @hide\n         ",
    "links" : [ "com.android.server.devicepolicy.DevicePolicyManagerService", "android.os.UserManager#DISALLOW_INSTALL_UNKNOWN_SOURCES", "#INSTALL_NON_MARKET_APPS" ]
  }, {
    "name" : "LOCATION_PROVIDERS_ALLOWED",
    "type" : "String",
    "comment" : "\n         * Comma-separated list of location providers that are enabled. Do not rely on this value\n         * being present or correct, or on ContentObserver notifications on the corresponding Uri.\n         *\n         * @deprecated The preferred methods for checking provider status and listening for changes\n         * are via {@link LocationManager#isProviderEnabled(String)} and\n         * {@link LocationManager#PROVIDERS_CHANGED_ACTION}.\n         ",
    "links" : [ "android.location.LocationManager#isProviderEnabled(String)", "android.location.LocationManager#PROVIDERS_CHANGED_ACTION" ]
  }, {
    "name" : "LOCATION_MODE",
    "type" : "String",
    "comment" : "\n         * The current location mode of the device. Do not rely on this value being present or on\n         * ContentObserver notifications on the corresponding Uri.\n         *\n         * @deprecated The preferred methods for checking location mode and listening for changes\n         * are via {@link LocationManager#isLocationEnabled()} and\n         * {@link LocationManager#MODE_CHANGED_ACTION}.\n         ",
    "links" : [ "android.location.LocationManager#isLocationEnabled()", "android.location.LocationManager#MODE_CHANGED_ACTION" ]
  }, {
    "name" : "LOCATION_CHANGER",
    "type" : "String",
    "comment" : "\n         * The App or module that changes the location mode.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_CHANGER_UNKNOWN",
    "type" : "int",
    "comment" : "\n         * The location changer is unknown or unable to detect.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_CHANGER_SYSTEM_SETTINGS",
    "type" : "int",
    "comment" : "\n         * Location settings in system settings.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_CHANGER_QUICK_SETTINGS",
    "type" : "int",
    "comment" : "\n         * The location icon in drop down notification drawer.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_OFF",
    "type" : "int",
    "comment" : "\n         * Location mode is off.\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_MODE_SENSORS_ONLY",
    "type" : "int",
    "comment" : "\n         * This mode no longer has any distinct meaning, but is interpreted as the location mode is\n         * on.\n         *\n         * @deprecated See {@link #LOCATION_MODE}.\n         ",
    "links" : [ "#LOCATION_MODE" ]
  }, {
    "name" : "LOCATION_MODE_BATTERY_SAVING",
    "type" : "int",
    "comment" : "\n         * This mode no longer has any distinct meaning, but is interpreted as the location mode is\n         * on.\n         *\n         * @deprecated See {@link #LOCATION_MODE}.\n         ",
    "links" : [ "#LOCATION_MODE" ]
  }, {
    "name" : "LOCATION_MODE_HIGH_ACCURACY",
    "type" : "int",
    "comment" : "\n         * This mode no longer has any distinct meaning, but is interpreted as the location mode is\n         * on.\n         *\n         * @deprecated See {@link #LOCATION_MODE}.\n         ",
    "links" : [ "#LOCATION_MODE" ]
  }, {
    "name" : "LOCATION_MODE_ON",
    "type" : "int",
    "comment" : "\n         * Location mode is on.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_COARSE_ACCURACY_M",
    "type" : "String",
    "comment" : "\n         * The accuracy in meters used for coarsening location for clients with only the coarse\n         * location permission.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_BIOMETRIC_WEAK_FLAGS",
    "type" : "String",
    "comment" : "\n         * A flag containing settings used for biometric weak\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_TO_APP_EXIT_LOCKED",
    "type" : "String",
    "comment" : "\n         * Whether lock-to-app will lock the keyguard when exiting.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_PATTERN_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether autolock is enabled (0 = false, 1 = true)\n         *\n         * @deprecated Use {@link android.app.KeyguardManager} to determine the state and security\n         *             level of the keyguard. Accessing this setting from an app that is targeting\n         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.\n         ",
    "links" : [ "android.app.KeyguardManager", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "LOCK_PATTERN_VISIBLE",
    "type" : "String",
    "comment" : "\n         * Whether lock pattern is visible as user enters (0 = false, 1 = true)\n         *\n         * @deprecated Accessing this setting from an app that is targeting\n         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether lock pattern will vibrate as user enters (0 = false, 1 =\n         * true)\n         *\n         * @deprecated Starting in {@link VERSION_CODES#JELLY_BEAN_MR1} the\n         *             lockscreen uses\n         *             {@link Settings.System#HAPTIC_FEEDBACK_ENABLED}.\n         *             Accessing this setting from an app that is targeting\n         *             {@link VERSION_CODES#M} or later throws a {@code SecurityException}.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#JELLY_BEAN_MR1", "Settings.System#HAPTIC_FEEDBACK_ENABLED", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "LOCK_SCREEN_LOCK_AFTER_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * This preference allows the device to be locked given time after screen goes off,\n         * subject to current DeviceAdmin policy limits.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_OWNER_INFO",
    "type" : "String",
    "comment" : "\n         * This preference contains the string that shows for owner info on LockScreen.\n         * @hide\n         * @deprecated\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_APPWIDGET_IDS",
    "type" : "String",
    "comment" : "\n         * Ids of the user-selected appwidgets on the lockscreen (comma-delimited).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_FALLBACK_APPWIDGET_ID",
    "type" : "String",
    "comment" : "\n         * Id of the appwidget shown on the lock screen when appwidgets are disabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_STICKY_APPWIDGET",
    "type" : "String",
    "comment" : "\n         * Index of the lockscreen appwidget to restore, -1 if none.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_OWNER_INFO_ENABLED",
    "type" : "String",
    "comment" : "\n         * This preference enables showing the owner info on LockScreen.\n         * @hide\n         * @deprecated\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS",
    "type" : "String",
    "comment" : "\n         * Indicates whether the user has allowed notifications to be shown atop a securely locked\n         * screen in their full \"private\" form (same as when the device is unlocked).\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_ALLOW_REMOTE_INPUT",
    "type" : "String",
    "comment" : "\n         * When set by a user, allows notification remote input atop a securely locked screen\n         * without having to unlock\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_CUSTOM_CLOCK_FACE",
    "type" : "String",
    "comment" : "\n         * Indicates which clock face to show on lock screen and AOD formatted as a serialized\n         * {@link org.json.JSONObject} with the format:\n         *     {\"clock\": id, \"_applied_timestamp\": timestamp}\n         * @hide\n         ",
    "links" : [ "org.json.JSONObject" ]
  }, {
    "name" : "DOCKED_CLOCK_FACE",
    "type" : "String",
    "comment" : "\n         * Indicates which clock face to show on lock screen and AOD while docked.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_NOTE_ABOUT_NOTIFICATION_HIDING",
    "type" : "String",
    "comment" : "\n         * Set by the system to track if the user needs to see the call to action for\n         * the lockscreen notification policy.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TRUST_AGENTS_INITIALIZED",
    "type" : "String",
    "comment" : "\n         * Set to 1 by the system after trust agents have been initialized.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOGGING_ID",
    "type" : "String",
    "comment" : "\n         * The Logging ID (a unique 64-bit value) as a hex string.\n         * Used as a pseudonymous identifier for logging.\n         * @deprecated This identifier is poorly initialized and has\n         * many collisions.  It should not be used.\n         ",
    "links" : [ ]
  }, {
    "name" : "NETWORK_PREFERENCE",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#NETWORK_PREFERENCE} instead\n         ",
    "links" : [ "android.provider.Settings.Global#NETWORK_PREFERENCE" ]
  }, {
    "name" : "PARENTAL_CONTROL_ENABLED",
    "type" : "String",
    "comment" : "\n         * No longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "PARENTAL_CONTROL_LAST_UPDATE",
    "type" : "String",
    "comment" : "\n         * No longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "PARENTAL_CONTROL_REDIRECT_URL",
    "type" : "String",
    "comment" : "\n         * No longer supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "SETTINGS_CLASSNAME",
    "type" : "String",
    "comment" : " TODO: 881807",
    "links" : [ ]
  }, {
    "name" : "USB_MASS_STORAGE_ENABLED",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#USB_MASS_STORAGE_ENABLED} instead\n         ",
    "links" : [ "android.provider.Settings.Global#USB_MASS_STORAGE_ENABLED" ]
  }, {
    "name" : "USE_GOOGLE_MAIL",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#USE_GOOGLE_MAIL} instead\n         ",
    "links" : [ "android.provider.Settings.Global#USE_GOOGLE_MAIL" ]
  }, {
    "name" : "ACCESSIBILITY_ENABLED",
    "type" : "String",
    "comment" : "\n         * If accessibility is enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_SHORTCUT_ON_LOCK_SCREEN",
    "type" : "String",
    "comment" : "\n         * Setting specifying if the accessibility shortcut is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_SHORTCUT_DIALOG_SHOWN",
    "type" : "String",
    "comment" : "\n         * Setting specifying if the accessibility shortcut dialog has been shown to this user.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_SHORTCUT_TARGET_SERVICE",
    "type" : "String",
    "comment" : "\n         * Setting specifying the accessibility services, accessibility shortcut targets,\n         * or features to be toggled via the accessibility shortcut.\n         *\n         * <p> This is a colon-separated string list which contains the flattened\n         * {@link ComponentName} and the class name of a system class implementing a supported\n         * accessibility feature.\n         * @hide\n         ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "ACCESSIBILITY_BUTTON_TARGET_COMPONENT",
    "type" : "String",
    "comment" : "\n         * Setting specifying the accessibility service or feature to be toggled via the\n         * accessibility button in the navigation bar. This is either a flattened\n         * {@link ComponentName} or the class name of a system class implementing a supported\n         * accessibility feature.\n         * @hide\n         ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "ACCESSIBILITY_BUTTON_TARGETS",
    "type" : "String",
    "comment" : "\n         * Setting specifying the accessibility services, accessibility shortcut targets,\n         * or features to be toggled via the accessibility button in the navigation bar.\n         *\n         * <p> This is a colon-separated string list which contains the flattened\n         * {@link ComponentName} and the class name of a system class implementing a supported\n         * accessibility feature.\n         * @hide\n         ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "ACCESSIBILITY_SHORTCUT_TARGET_MAGNIFICATION_CONTROLLER",
    "type" : "String",
    "comment" : "\n         * The system class name of magnification controller which is a target to be toggled via\n         * accessibility shortcut or accessibility button.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TOUCH_EXPLORATION_ENABLED",
    "type" : "String",
    "comment" : "\n         * If touch exploration is enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_ACCESSIBILITY_SERVICES",
    "type" : "String",
    "comment" : "\n         * List of the enabled accessibility providers.\n         ",
    "links" : [ ]
  }, {
    "name" : "TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES",
    "type" : "String",
    "comment" : "\n         * List of the accessibility services to which the user has granted\n         * permission to put the device into touch exploration mode.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_ACTIONS_PANEL_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the Global Actions Panel is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_ACTIONS_PANEL_AVAILABLE",
    "type" : "String",
    "comment" : "\n         * Whether the Global Actions Panel can be toggled on or off in Settings.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "GLOBAL_ACTIONS_PANEL_DEBUG_ENABLED",
    "type" : "String",
    "comment" : "\n         * Enables debug mode for the Global Actions Panel.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "HUSH_GESTURE_USED",
    "type" : "String",
    "comment" : "\n         * Whether the hush gesture has ever been used\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MANUAL_RINGER_TOGGLE_COUNT",
    "type" : "String",
    "comment" : "\n         * Number of times the user has manually clicked the ringer toggle\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CHARGING_SOUNDS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether to play a sound for charging events.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CHARGING_VIBRATION_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether to vibrate for charging events.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ZEN_DURATION",
    "type" : "String",
    "comment" : "\n         * If 0, turning on dnd manually will last indefinitely.\n         * Else if non-negative, turning on dnd manually will last for this many minutes.\n         * Else (if negative), turning on dnd manually will surface a dialog that prompts\n         * user to specify a duration.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ZEN_DURATION_PROMPT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ZEN_DURATION_FOREVER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ZEN_UPGRADE_NOTIFICATION",
    "type" : "String",
    "comment" : "\n         * If nonzero, will show the zen upgrade notification when the user toggles DND on/off.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ZEN_SETTINGS_SUGGESTION",
    "type" : "String",
    "comment" : "\n         * If nonzero, will show the zen update settings suggestion.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ZEN_SETTINGS_UPDATED",
    "type" : "String",
    "comment" : "\n         * If nonzero, zen has not been updated to reflect new changes.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ZEN_SETTINGS_SUGGESTION_VIEWED",
    "type" : "String",
    "comment" : "\n         * If nonzero, zen setting suggestion has been viewed by user\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "IN_CALL_NOTIFICATION_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the in call notification is enabled to play sound during calls.  The value is\n         * boolean (1 or 0).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "KEYGUARD_SLICE_URI",
    "type" : "String",
    "comment" : "\n         * Uri of the slice that's presented on the keyguard.\n         * Defaults to a slice with the date and next alarm.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_SPEAK_PASSWORD",
    "type" : "String",
    "comment" : "\n         * Whether to speak passwords while in accessibility mode.\n         *\n         * @deprecated The speaking of passwords is controlled by individual accessibility services.\n         * Apps should ignore this setting and provide complete information to accessibility\n         * at all times, which was the behavior when this value was {@code true}.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether to draw text with high contrast while in accessibility mode.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether the display magnification is enabled via a system-wide\n         * triple tap gesture. Display magnifications allows the user to zoom in the display content\n         * and is targeted to low vision users. The current magnification scale is controlled by\n         * {@link #ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE}.\n         *\n         * @hide\n         ",
    "links" : [ "#ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE" ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether the display magnification is enabled via a shortcut\n         * affordance within the system's navigation area. Display magnifications allows the user to\n         * zoom in the display content and is targeted to low vision users. The current\n         * magnification scale is controlled by {@link #ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE}.\n         *\n         * @deprecated Use {@link #ACCESSIBILITY_BUTTON_TARGETS} instead.\n         * {@link #ACCESSIBILITY_BUTTON_TARGETS} holds the magnification system class name\n         * when navigation bar magnification is enabled.\n         * @hide\n         ",
    "links" : [ "#ACCESSIBILITY_BUTTON_TARGETS", "#ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE" ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE",
    "type" : "String",
    "comment" : "\n         * Setting that specifies what the display magnification scale is.\n         * Display magnifications allows the user to zoom in the display\n         * content and is targeted to low vision users. Whether a display\n         * magnification is performed is controlled by\n         * {@link #ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED} and\n         * {@link #ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED}\n         *\n         * @hide\n         ",
    "links" : [ "#ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED", "#ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED" ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE",
    "type" : "String",
    "comment" : "\n         * Unused mangnification setting\n         *\n         * @hide\n         * @deprecated\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_SOFT_KEYBOARD_MODE",
    "type" : "String",
    "comment" : "\n         * Setting that specifies what mode the soft keyboard is in (default or hidden). Can be\n         * modified from an AccessibilityService using the SoftKeyboardController.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_MODE_AUTO",
    "type" : "int",
    "comment" : "\n         * Default soft keyboard behavior.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_MODE_HIDDEN",
    "type" : "int",
    "comment" : "\n         * Soft keyboard is never shown.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether timed text (captions) should be\n         * displayed in video content. Text display properties are controlled by\n         * the following settings:\n         * <ul>\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_LOCALE}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_EDGE_COLOR}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_EDGE_TYPE}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_TYPEFACE}\n         * <li>{@link #ACCESSIBILITY_CAPTIONING_FONT_SCALE}\n         * </ul>\n         *\n         * @hide\n         ",
    "links" : [ "#ACCESSIBILITY_CAPTIONING_LOCALE", "#ACCESSIBILITY_CAPTIONING_EDGE_COLOR", "#ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR", "#ACCESSIBILITY_CAPTIONING_TYPEFACE", "#ACCESSIBILITY_CAPTIONING_FONT_SCALE", "#ACCESSIBILITY_CAPTIONING_EDGE_TYPE", "#ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR" ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_LOCALE",
    "type" : "String",
    "comment" : "\n         * Setting that specifies the language for captions as a locale string,\n         * e.g. en_US.\n         *\n         * @see java.util.Locale#toString\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_PRESET",
    "type" : "String",
    "comment" : "\n         * Integer property that specifies the preset style for captions, one\n         * of:\n         * <ul>\n         * <li>{@link android.view.accessibility.CaptioningManager.CaptionStyle#PRESET_CUSTOM}\n         * <li>a valid index of {@link android.view.accessibility.CaptioningManager.CaptionStyle#PRESETS}\n         * </ul>\n         *\n         * @see java.util.Locale#toString\n         * @hide\n         ",
    "links" : [ "android.view.accessibility.CaptioningManager.CaptionStyle#PRESET_CUSTOM", "android.view.accessibility.CaptioningManager.CaptionStyle#PRESETS" ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR",
    "type" : "String",
    "comment" : "\n         * Integer property that specifes the background color for captions as a\n         * packed 32-bit color.\n         *\n         * @see android.graphics.Color#argb\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR",
    "type" : "String",
    "comment" : "\n         * Integer property that specifes the foreground color for captions as a\n         * packed 32-bit color.\n         *\n         * @see android.graphics.Color#argb\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_EDGE_TYPE",
    "type" : "String",
    "comment" : "\n         * Integer property that specifes the edge type for captions, one of:\n         * <ul>\n         * <li>{@link android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_NONE}\n         * <li>{@link android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_OUTLINE}\n         * <li>{@link android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_DROP_SHADOW}\n         * </ul>\n         *\n         * @see #ACCESSIBILITY_CAPTIONING_EDGE_COLOR\n         * @hide\n         ",
    "links" : [ "android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_DROP_SHADOW", "android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_NONE", "android.view.accessibility.CaptioningManager.CaptionStyle#EDGE_TYPE_OUTLINE" ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_EDGE_COLOR",
    "type" : "String",
    "comment" : "\n         * Integer property that specifes the edge color for captions as a\n         * packed 32-bit color.\n         *\n         * @see #ACCESSIBILITY_CAPTIONING_EDGE_TYPE\n         * @see android.graphics.Color#argb\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_WINDOW_COLOR",
    "type" : "String",
    "comment" : "\n         * Integer property that specifes the window color for captions as a\n         * packed 32-bit color.\n         *\n         * @see android.graphics.Color#argb\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_TYPEFACE",
    "type" : "String",
    "comment" : "\n         * String property that specifies the typeface for captions, one of:\n         * <ul>\n         * <li>DEFAULT\n         * <li>MONOSPACE\n         * <li>SANS_SERIF\n         * <li>SERIF\n         * </ul>\n         *\n         * @see android.graphics.Typeface\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_CAPTIONING_FONT_SCALE",
    "type" : "String",
    "comment" : "\n         * Floating point property that specifies font scaling for captions.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_INVERSION_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether display color inversion is enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether display color space adjustment is\n         * enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_DISPLAY_DALTONIZER",
    "type" : "String",
    "comment" : "\n         * Integer property that specifies the type of color space adjustment to\n         * perform. Valid values are defined in AccessibilityManager and Settings arrays.xml:\n         * - AccessibilityManager.DALTONIZER_DISABLED = -1\n         * - AccessibilityManager.DALTONIZER_SIMULATE_MONOCHROMACY = 0\n         * - <item>@string/daltonizer_mode_protanomaly</item> = 11\n         * - AccessibilityManager.DALTONIZER_CORRECT_DEUTERANOMALY and\n         *       <item>@string/daltonizer_mode_deuteranomaly</item> = 12\n         * - <item>@string/daltonizer_mode_tritanomaly</item> = 13\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_AUTOCLICK_ENABLED",
    "type" : "String",
    "comment" : "\n         * Setting that specifies whether automatic click when the mouse pointer stops moving is\n         * enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_AUTOCLICK_DELAY",
    "type" : "String",
    "comment" : "\n         * Integer setting specifying amount of time in ms the mouse pointer has to stay still\n         * before performing click when {@link #ACCESSIBILITY_AUTOCLICK_ENABLED} is set.\n         *\n         * @see #ACCESSIBILITY_AUTOCLICK_ENABLED\n         * @hide\n         ",
    "links" : [ "#ACCESSIBILITY_AUTOCLICK_ENABLED" ]
  }, {
    "name" : "ACCESSIBILITY_LARGE_POINTER_ICON",
    "type" : "String",
    "comment" : "\n         * Whether or not larger size icons are used for the pointer of mouse/trackpad for\n         * accessibility.\n         * (0 = false, 1 = true)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LONG_PRESS_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * The timeout for considering a press to be a long press in milliseconds.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MULTI_PRESS_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * The duration in milliseconds between the first tap's up event and the second tap's\n         * down event for an interaction to be considered part of the same multi-press.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_NON_INTERACTIVE_UI_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * Setting that specifies recommended timeout in milliseconds for controls\n         * which don't need user's interactions.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_INTERACTIVE_UI_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * Setting that specifies recommended timeout in milliseconds for controls\n         * which need user's interactions.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_PRINT_SERVICES",
    "type" : "String",
    "comment" : "\n         * List of the enabled print services.\n         *\n         * N and beyond uses {@link #DISABLED_PRINT_SERVICES}. But this might be used in an upgrade\n         * from pre-N.\n         *\n         * @hide\n         ",
    "links" : [ "#DISABLED_PRINT_SERVICES" ]
  }, {
    "name" : "DISABLED_PRINT_SERVICES",
    "type" : "String",
    "comment" : "\n         * List of the disabled print services.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_DENSITY_FORCED",
    "type" : "String",
    "comment" : "\n         * The saved value for WindowManagerService.setForcedDisplayDensity()\n         * formatted as a single integer representing DPI. If unset, then use\n         * the real display density.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TTS_USE_DEFAULTS",
    "type" : "String",
    "comment" : "\n         * Setting to always use the default text-to-speech settings regardless\n         * of the application settings.\n         * 1 = override application settings,\n         * 0 = use application settings (if specified).\n         *\n         * @deprecated  The value of this setting is no longer respected by\n         * the framework text to speech APIs as of the Ice Cream Sandwich release.\n         ",
    "links" : [ ]
  }, {
    "name" : "TTS_DEFAULT_RATE",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech engine speech rate. 100 = 1x\n         ",
    "links" : [ ]
  }, {
    "name" : "TTS_DEFAULT_PITCH",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech engine pitch. 100 = 1x\n         ",
    "links" : [ ]
  }, {
    "name" : "TTS_DEFAULT_SYNTH",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech engine.\n         ",
    "links" : [ ]
  }, {
    "name" : "TTS_DEFAULT_LANG",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech language.\n         *\n         * @deprecated this setting is no longer in use, as of the Ice Cream\n         * Sandwich release. Apps should never need to read this setting directly,\n         * instead can query the TextToSpeech framework classes for the default\n         * locale. {@link TextToSpeech#getLanguage()}.\n         ",
    "links" : [ "android.speech.tts.TextToSpeech#getLanguage()" ]
  }, {
    "name" : "TTS_DEFAULT_COUNTRY",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech country.\n         *\n         * @deprecated this setting is no longer in use, as of the Ice Cream\n         * Sandwich release. Apps should never need to read this setting directly,\n         * instead can query the TextToSpeech framework classes for the default\n         * locale. {@link TextToSpeech#getLanguage()}.\n         ",
    "links" : [ "android.speech.tts.TextToSpeech#getLanguage()" ]
  }, {
    "name" : "TTS_DEFAULT_VARIANT",
    "type" : "String",
    "comment" : "\n         * Default text-to-speech locale variant.\n         *\n         * @deprecated this setting is no longer in use, as of the Ice Cream\n         * Sandwich release. Apps should never need to read this setting directly,\n         * instead can query the TextToSpeech framework classes for the\n         * locale that is in use {@link TextToSpeech#getLanguage()}.\n         ",
    "links" : [ "android.speech.tts.TextToSpeech#getLanguage()" ]
  }, {
    "name" : "TTS_DEFAULT_LOCALE",
    "type" : "String",
    "comment" : "\n         * Stores the default tts locales on a per engine basis. Stored as\n         * a comma seperated list of values, each value being of the form\n         * {@code engine_name:locale} for example,\n         * {@code com.foo.ttsengine:eng-USA,com.bar.ttsengine:esp-ESP}. This\n         * supersedes {@link #TTS_DEFAULT_LANG}, {@link #TTS_DEFAULT_COUNTRY} and\n         * {@link #TTS_DEFAULT_VARIANT}. Apps should never need to read this\n         * setting directly, and can query the TextToSpeech framework classes\n         * for the locale that is in use.\n         *\n         * @hide\n         ",
    "links" : [ "#TTS_DEFAULT_LANG", "#TTS_DEFAULT_COUNTRY", "#TTS_DEFAULT_VARIANT" ]
  }, {
    "name" : "TTS_ENABLED_PLUGINS",
    "type" : "String",
    "comment" : "\n         * Space delimited list of plugin packages that are enabled.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON}\n         * instead.\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON" ]
  }, {
    "name" : "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY}\n         * instead.\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY" ]
  }, {
    "name" : "WIFI_NUM_OPEN_NETWORKS_KEPT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_NUM_OPEN_NETWORKS_KEPT}\n         * instead.\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_NUM_OPEN_NETWORKS_KEPT" ]
  }, {
    "name" : "WIFI_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_ON}\n         * instead.\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_ON" ]
  }, {
    "name" : "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE",
    "type" : "String",
    "comment" : "\n         * The acceptable packet loss percentage (range 0 - 100) before trying\n         * another AP on the same network.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_AP_COUNT",
    "type" : "String",
    "comment" : "\n         * The number of access points required for a network in order for the\n         * watchdog to monitor it.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS",
    "type" : "String",
    "comment" : "\n         * The delay between background checks.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the Wi-Fi watchdog is enabled for background checking even\n         * after it thinks the user has connected to a good access point.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * The timeout for a background ping\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT",
    "type" : "String",
    "comment" : "\n         * The number of initial pings to perform that *may* be ignored if they\n         * fail. Again, if these fail, they will *not* be used in packet loss\n         * calculation. For example, one network always seemed to time out for\n         * the first couple pings, so this is set to 3 by default.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_MAX_AP_CHECKS",
    "type" : "String",
    "comment" : "\n         * The maximum number of access points (per network) to attempt to test.\n         * If this number is reached, the watchdog will no longer monitor the\n         * initial connection state for the network. This is a safeguard for\n         * networks containing multiple APs whose DNS does not respond to pings.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_ON",
    "type" : "String",
    "comment" : "\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_WATCHDOG_ON} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_WATCHDOG_ON" ]
  }, {
    "name" : "WIFI_WATCHDOG_WATCH_LIST",
    "type" : "String",
    "comment" : "\n         * A comma-separated list of SSIDs for which the Wi-Fi watchdog should be enabled.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_COUNT",
    "type" : "String",
    "comment" : "\n         * The number of pings to test if an access point is a good connection.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_DELAY_MS",
    "type" : "String",
    "comment" : "\n         * The delay between pings.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_WATCHDOG_PING_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * The timeout per ping.\n         * @deprecated This setting is not used.\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_MAX_DHCP_RETRY_COUNT",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_MAX_DHCP_RETRY_COUNT} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_MAX_DHCP_RETRY_COUNT" ]
  }, {
    "name" : "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS",
    "type" : "String",
    "comment" : "\n         * @deprecated Use\n         * {@link android.provider.Settings.Global#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS} instead\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS" ]
  }, {
    "name" : "CONNECTIVITY_RELEASE_PENDING_INTENT_DELAY_MS",
    "type" : "String",
    "comment" : "\n         * The number of milliseconds to hold on to a PendingIntent based request. This delay gives\n         * the receivers of the PendingIntent an opportunity to make a new network request before\n         * the Network satisfying the request is potentially removed.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKGROUND_DATA",
    "type" : "String",
    "comment" : "\n         * Whether background data usage is allowed.\n         *\n         * @deprecated As of {@link VERSION_CODES#ICE_CREAM_SANDWICH},\n         *             availability of background data depends on several\n         *             combined factors. When background data is unavailable,\n         *             {@link ConnectivityManager#getActiveNetworkInfo()} will\n         *             now appear disconnected.\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#ICE_CREAM_SANDWICH", "android.net.ConnectivityManager#getActiveNetworkInfo()" ]
  }, {
    "name" : "ALLOWED_GEOLOCATION_ORIGINS",
    "type" : "String",
    "comment" : "\n         * Origins for which browsers should allow geolocation by default.\n         * The value is a space-separated list of origins.\n         ",
    "links" : [ ]
  }, {
    "name" : "PREFERRED_TTY_MODE",
    "type" : "String",
    "comment" : "\n         * The preferred TTY mode     0 = TTy Off, CDMA default\n         *                            1 = TTY Full\n         *                            2 = TTY HCO\n         *                            3 = TTY VCO\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ENHANCED_VOICE_PRIVACY_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the enhanced voice privacy mode is enabled.\n         * 0 = normal voice privacy\n         * 1 = enhanced voice privacy\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TTY_MODE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the TTY mode mode is enabled.\n         * 0 = disabled\n         * 1 = enabled\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "RTT_CALLING_MODE",
    "type" : "String",
    "comment" : "\n         * User-selected RTT mode. When on, outgoing and incoming calls will be answered as RTT\n         * calls when supported by the device and carrier. Boolean value.\n         * 0 = OFF\n         * 1 = ON\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_ENABLED",
    "type" : "String",
    "comment" : "\n        /**\n         * Controls whether settings backup is enabled.\n         * Type: int ( 0 = disabled, 1 = enabled )\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_AUTO_RESTORE",
    "type" : "String",
    "comment" : "\n         * Controls whether application data is automatically restored from backup\n         * at install time.\n         * Type: int ( 0 = disabled, 1 = enabled )\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_PROVISIONED",
    "type" : "String",
    "comment" : "\n         * Indicates whether settings backup has been fully provisioned.\n         * Type: int ( 0 = unprovisioned, 1 = fully provisioned )\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_TRANSPORT",
    "type" : "String",
    "comment" : "\n         * Component of the transport to use for backup/restore.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LAST_SETUP_SHOWN",
    "type" : "String",
    "comment" : "\n         * Indicates the version for which the setup wizard was last shown. The version gets\n         * bumped for each release when there is new setup information to show.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "WIFI_IDLE_MS",
    "type" : "String",
    "comment" : "\n         * The interval in milliseconds after which Wi-Fi is considered idle.\n         * When idle, it is possible for the device to be switched from Wi-Fi to\n         * the mobile data network.\n         * @hide\n         * @deprecated Use {@link android.provider.Settings.Global#WIFI_IDLE_MS}\n         * instead.\n         ",
    "links" : [ "android.provider.Settings.Global#WIFI_IDLE_MS" ]
  }, {
    "name" : "SEARCH_GLOBAL_SEARCH_ACTIVITY",
    "type" : "String",
    "comment" : "\n         * The global search provider chosen by the user (if multiple global\n         * search providers are installed). This will be the provider returned\n         * by {@link SearchManager#getGlobalSearchActivity()} if it's still\n         * installed. This setting is stored as a flattened component name as\n         * per {@link ComponentName#flattenToString()}.\n         *\n         * @hide\n         ",
    "links" : [ "android.app.SearchManager#getGlobalSearchActivity()", "android.content.ComponentName#flattenToString()" ]
  }, {
    "name" : "SEARCH_NUM_PROMOTED_SOURCES",
    "type" : "String",
    "comment" : "\n         * The number of promoted sources in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MAX_RESULTS_TO_DISPLAY",
    "type" : "String",
    "comment" : "\n         * The maximum number of suggestions returned by GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MAX_RESULTS_PER_SOURCE",
    "type" : "String",
    "comment" : "\n         * The number of suggestions GlobalSearch will ask each non-web search source for.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_WEB_RESULTS_OVERRIDE_LIMIT",
    "type" : "String",
    "comment" : "\n         * The number of suggestions the GlobalSearch will ask the web search source for.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS",
    "type" : "String",
    "comment" : "\n         * The number of milliseconds that GlobalSearch will wait for suggestions from\n         * promoted sources before continuing with all other sources.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_SOURCE_TIMEOUT_MILLIS",
    "type" : "String",
    "comment" : "\n         * The number of milliseconds before GlobalSearch aborts search suggesiton queries.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_PREFILL_MILLIS",
    "type" : "String",
    "comment" : "\n         * The maximum number of milliseconds that GlobalSearch shows the previous results\n         * after receiving a new query.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MAX_STAT_AGE_MILLIS",
    "type" : "String",
    "comment" : "\n         * The maximum age of log data used for shortcuts in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS",
    "type" : "String",
    "comment" : "\n         * The maximum age of log data used for source ranking in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING",
    "type" : "String",
    "comment" : "\n         * The minimum number of impressions needed to rank a source in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING",
    "type" : "String",
    "comment" : "\n         * The minimum number of clicks needed to rank a source in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_MAX_SHORTCUTS_RETURNED",
    "type" : "String",
    "comment" : "\n         * The maximum number of shortcuts shown by GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_QUERY_THREAD_CORE_POOL_SIZE",
    "type" : "String",
    "comment" : "\n         * The size of the core thread pool for suggestion queries in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_QUERY_THREAD_MAX_POOL_SIZE",
    "type" : "String",
    "comment" : "\n         * The maximum size of the thread pool for suggestion queries in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE",
    "type" : "String",
    "comment" : "\n         * The size of the core thread pool for shortcut refreshing in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE",
    "type" : "String",
    "comment" : "\n         * The maximum size of the thread pool for shortcut refreshing in GlobalSearch.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_THREAD_KEEPALIVE_SECONDS",
    "type" : "String",
    "comment" : "\n         * The maximun time that excess threads in the GlobalSeach thread pools will\n         * wait before terminating.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT",
    "type" : "String",
    "comment" : "\n         * The maximum number of concurrent suggestion queries to each source.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MOUNT_PLAY_NOTIFICATION_SND",
    "type" : "String",
    "comment" : "\n         * Whether or not alert sounds are played on StorageManagerService events.\n         * (0 = false, 1 = true)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MOUNT_UMS_AUTOSTART",
    "type" : "String",
    "comment" : "\n         * Whether or not UMS auto-starts on UMS host detection. (0 = false, 1 = true)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MOUNT_UMS_PROMPT",
    "type" : "String",
    "comment" : "\n         * Whether or not a notification is displayed on UMS host detection. (0 = false, 1 = true)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MOUNT_UMS_NOTIFY_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not a notification is displayed while UMS is enabled. (0 = false, 1 = true)\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ANR_SHOW_BACKGROUND",
    "type" : "String",
    "comment" : "\n         * If nonzero, ANRs in invisible background processes bring up a dialog.\n         * Otherwise, the process will be silently killed.\n         *\n         * Also prevents ANRs and crash dialogs from being suppressed.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_FIRST_CRASH_DIALOG_DEV_OPTION",
    "type" : "String",
    "comment" : "\n         * If nonzero, crashes in foreground processes will bring up a dialog.\n         * Otherwise, the process will be silently killed.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VOICE_RECOGNITION_SERVICE",
    "type" : "String",
    "comment" : "\n         * The {@link ComponentName} string of the service to be used as the voice recognition\n         * service.\n         *\n         * @hide\n         ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "SELECTED_SPELL_CHECKER",
    "type" : "String",
    "comment" : "\n         * The {@link ComponentName} string of the selected spell checker service which is\n         * one of the services managed by the text service manager.\n         *\n         * @hide\n         ",
    "links" : [ "android.content.ComponentName" ]
  }, {
    "name" : "SELECTED_SPELL_CHECKER_SUBTYPE",
    "type" : "String",
    "comment" : "\n         * {@link android.view.textservice.SpellCheckerSubtype#hashCode()} of the selected subtype\n         * of the selected spell checker service which is one of the services managed by the text\n         * service manager.\n         *\n         * @hide\n         ",
    "links" : [ "android.view.textservice.SpellCheckerSubtype#hashCode()" ]
  }, {
    "name" : "SPELL_CHECKER_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether spell checker is enabled or not.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_POWER_BUTTON_BEHAVIOR",
    "type" : "String",
    "comment" : "\n         * What happens when the user presses the Power button while in-call\n         * and the screen is on.<br/>\n         * <b>Values:</b><br/>\n         * 1 - The Power button turns off the screen and locks the device. (Default behavior)<br/>\n         * 2 - The Power button hangs up the current call.<br/>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MINIMAL_POST_PROCESSING_ALLOWED",
    "type" : "String",
    "comment" : "\n         * Whether the user allows minimal post processing or not.\n         *\n         * <p>Values:\n         * 0 - Not allowed. Any preferences set through the Window.setPreferMinimalPostProcessing\n         *     API will be ignored.\n         * 1 - Allowed. Any preferences set through the Window.setPreferMinimalPostProcessing API\n         *     will be respected and the appropriate signals will be sent to display.\n         *     (Default behaviour)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF",
    "type" : "int",
    "comment" : "\n         * INCALL_POWER_BUTTON_BEHAVIOR value for \"turn off screen\".\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_POWER_BUTTON_BEHAVIOR_HANGUP",
    "type" : "int",
    "comment" : "\n         * INCALL_POWER_BUTTON_BEHAVIOR value for \"hang up\".\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT",
    "type" : "int",
    "comment" : "\n         * INCALL_POWER_BUTTON_BEHAVIOR default value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_BACK_BUTTON_BEHAVIOR",
    "type" : "String",
    "comment" : "\n         * What happens when the user presses the Back button while in-call\n         * and the screen is on.<br/>\n         * <b>Values:</b><br/>\n         * 0 - The Back buttons does nothing different.<br/>\n         * 1 - The Back button hangs up the current call.<br/>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_BACK_BUTTON_BEHAVIOR_NONE",
    "type" : "int",
    "comment" : "\n         * INCALL_BACK_BUTTON_BEHAVIOR value for no action.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_BACK_BUTTON_BEHAVIOR_HANGUP",
    "type" : "int",
    "comment" : "\n         * INCALL_BACK_BUTTON_BEHAVIOR value for \"hang up\".\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INCALL_BACK_BUTTON_BEHAVIOR_DEFAULT",
    "type" : "int",
    "comment" : "\n         * INCALL_POWER_BUTTON_BEHAVIOR default value.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "WAKE_GESTURE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the device should wake when the wake gesture sensor detects motion.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the device should doze if configured.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_ALWAYS_ON",
    "type" : "String",
    "comment" : "\n         * Indicates whether doze should be always on.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_PICK_UP_GESTURE",
    "type" : "String",
    "comment" : "\n         * Whether the device should pulse on pick up gesture.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_PULSE_ON_LONG_PRESS",
    "type" : "String",
    "comment" : "\n         * Whether the device should pulse on long press gesture.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_DOUBLE_TAP_GESTURE",
    "type" : "String",
    "comment" : "\n         * Whether the device should pulse on double tap gesture.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_TAP_SCREEN_GESTURE",
    "type" : "String",
    "comment" : "\n         * Whether the device should respond to the SLPI tap gesture.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_WAKE_LOCK_SCREEN_GESTURE",
    "type" : "String",
    "comment" : "\n         * Gesture that wakes up the display, showing some version of the lock screen.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOZE_WAKE_DISPLAY_GESTURE",
    "type" : "String",
    "comment" : "\n         * Gesture that wakes up the display, toggling between {@link Display.STATE_OFF} and\n         * {@link Display.STATE_DOZE}.\n         * @hide\n         ",
    "links" : [ "Display.STATE_OFF", "Display.STATE_DOZE" ]
  }, {
    "name" : "SUPPRESS_DOZE",
    "type" : "String",
    "comment" : "\n         * Whether the device should suppress the current doze configuration and disable dozing.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SKIP_GESTURE",
    "type" : "String",
    "comment" : "\n         * Gesture that skips media.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SKIP_GESTURE_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of successful gestures.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SKIP_TOUCH_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of non-gesture interaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SKIP_DIRECTION",
    "type" : "String",
    "comment" : "\n         * Direction to advance media for skip gesture\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_GESTURE",
    "type" : "String",
    "comment" : "\n         * Gesture that silences sound (alarms, notification, calls).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_ALARMS_GESTURE_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of successful silence alarms gestures.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_TIMER_GESTURE_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of successful silence timer gestures.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_CALL_GESTURE_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of successful silence call gestures.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_ALARMS_TOUCH_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of non-gesture interaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_TIMER_TOUCH_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of non-gesture interaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SILENCE_CALL_TOUCH_COUNT",
    "type" : "String",
    "comment" : "\n         * Count of non-gesture interaction.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AWARE_TAP_PAUSE_GESTURE_COUNT",
    "type" : "String",
    "comment" : "\n         * Number of successful \"Motion Sense\" tap gestures to pause media.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AWARE_TAP_PAUSE_TOUCH_COUNT",
    "type" : "String",
    "comment" : "\n         * Number of touch interactions to pause media when a \"Motion Sense\" gesture could\n         * have been used.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "UI_NIGHT_MODE",
    "type" : "String",
    "comment" : "\n         * The current night mode that has been selected by the user.  Owned\n         * and controlled by UiModeManagerService.  Constants are as per\n         * UiModeManager.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "UI_NIGHT_MODE_OVERRIDE_ON",
    "type" : "String",
    "comment" : "\n         * The current night mode that has been overridden to turn on by the system.  Owned\n         * and controlled by UiModeManagerService.  Constants are as per\n         * UiModeManager.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "UI_NIGHT_MODE_OVERRIDE_OFF",
    "type" : "String",
    "comment" : "\n         * The current night mode that has been overridden to turn off by the system.  Owned\n         * and controlled by UiModeManagerService.  Constants are as per\n         * UiModeManager.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREENSAVER_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether screensavers are enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREENSAVER_COMPONENTS",
    "type" : "String",
    "comment" : "\n         * The user's chosen screensaver components.\n         *\n         * These will be launched by the PhoneWindowManager after a timeout when not on\n         * battery, or upon dock insertion (if SCREENSAVER_ACTIVATE_ON_DOCK is set to 1).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREENSAVER_ACTIVATE_ON_DOCK",
    "type" : "String",
    "comment" : "\n         * If screensavers are enabled, whether the screensaver should be automatically launched\n         * when the device is inserted into a (desk) dock.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREENSAVER_ACTIVATE_ON_SLEEP",
    "type" : "String",
    "comment" : "\n         * If screensavers are enabled, whether the screensaver should be automatically launched\n         * when the screen times out when not on battery.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SCREENSAVER_DEFAULT_COMPONENT",
    "type" : "String",
    "comment" : "\n         * If screensavers are enabled, the default screensaver component.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NFC_PAYMENT_DEFAULT_COMPONENT",
    "type" : "String",
    "comment" : "\n         * The default NFC payment component\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NFC_PAYMENT_FOREGROUND",
    "type" : "String",
    "comment" : "\n         * Whether NFC payment is handled by the foreground application or a default.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SMS_DEFAULT_APPLICATION",
    "type" : "String",
    "comment" : "\n         * Specifies the package name currently configured to be the primary sms application\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DIALER_DEFAULT_APPLICATION",
    "type" : "String",
    "comment" : "\n         * Specifies the package name currently configured to be the default dialer application\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CALL_SCREENING_DEFAULT_COMPONENT",
    "type" : "String",
    "comment" : "\n         * Specifies the component name currently configured to be the default call screening\n         * application\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "EMERGENCY_ASSISTANCE_APPLICATION",
    "type" : "String",
    "comment" : "\n         * Specifies the package name currently configured to be the emergency assistance application\n         *\n         * @see android.telephony.TelephonyManager#ACTION_EMERGENCY_ASSISTANCE\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_STRUCTURE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Specifies whether the current app context on scren (assist data) will be sent to the\n         * assist application (active voice interaction service).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_SCREENSHOT_ENABLED",
    "type" : "String",
    "comment" : "\n         * Specifies whether a screenshot of the screen contents will be sent to the assist\n         * application (active voice interaction service).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_DISCLOSURE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Specifies whether the screen will show an animation if screen contents are sent to the\n         * assist application (active voice interaction service).\n         *\n         * Note that the disclosure will be forced for third-party assistants or if the device\n         * does not support disabling it.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ROTATION_SUGGESTIONS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ROTATION_SUGGESTIONS_DISABLED",
    "type" : "int",
    "comment" : "\n         * The disabled state of SHOW_ROTATION_SUGGESTIONS.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ROTATION_SUGGESTIONS_ENABLED",
    "type" : "int",
    "comment" : "\n         * The enabled state of SHOW_ROTATION_SUGGESTIONS.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ROTATION_SUGGESTIONS_DEFAULT",
    "type" : "int",
    "comment" : "\n         * The default state of SHOW_ROTATION_SUGGESTIONS.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NUM_ROTATION_SUGGESTIONS_ACCEPTED",
    "type" : "String",
    "comment" : "\n         * The number of accepted rotation suggestions. Used to determine if the user has been\n         * introduced to rotation suggestions.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_NOTIFICATION_ASSISTANT",
    "type" : "String",
    "comment" : "\n         * Read only list of the service components that the current user has explicitly allowed to\n         * see and assist with all of the user's notifications.\n         *\n         * @deprecated Use\n         * {@link NotificationManager#isNotificationAssistantAccessGranted(ComponentName)}.\n         * @hide\n         ",
    "links" : [ "android.app.NotificationManager#isNotificationAssistantAccessGranted(ComponentName)" ]
  }, {
    "name" : "ENABLED_NOTIFICATION_LISTENERS",
    "type" : "String",
    "comment" : "\n         * Read only list of the service components that the current user has explicitly allowed to\n         * see all of the user's notifications, separated by ':'.\n         *\n         * @hide\n         * @deprecated Use\n         * {@link NotificationManager#isNotificationListenerAccessGranted(ComponentName)}.\n         ",
    "links" : [ "android.app.NotificationManager#isNotificationListenerAccessGranted(ComponentName)" ]
  }, {
    "name" : "ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES",
    "type" : "String",
    "comment" : "\n         * Read only list of the packages that the current user has explicitly allowed to\n         * manage do not disturb, separated by ':'.\n         *\n         * @deprecated Use {@link NotificationManager#isNotificationPolicyAccessGranted()}.\n         * @hide\n         ",
    "links" : [ "android.app.NotificationManager#isNotificationPolicyAccessGranted()" ]
  }, {
    "name" : "SYNC_PARENT_SOUNDS",
    "type" : "String",
    "comment" : "\n         * Defines whether managed profile ringtones should be synced from it's parent profile\n         * <p>\n         * 0 = ringtones are not synced\n         * 1 = ringtones are synced from the profile's parent (default)\n         * <p>\n         * This value is only used for managed profiles.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "IMMERSIVE_MODE_CONFIRMATIONS",
    "type" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PRINT_SERVICE_SEARCH_URI",
    "type" : "String",
    "comment" : "\n         * This is the query URI for finding a print service to install.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PAYMENT_SERVICE_SEARCH_URI",
    "type" : "String",
    "comment" : "\n         * This is the query URI for finding a NFC payment service to install.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOFILL_SERVICE_SEARCH_URI",
    "type" : "String",
    "comment" : "\n         * This is the query URI for finding a auto fill service to install.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SKIP_FIRST_USE_HINTS",
    "type" : "String",
    "comment" : "\n         * If enabled, apps should try to skip any introductory hints on first launch. This might\n         * apply to users that are already familiar with the environment or temporary users.\n         * <p>\n         * Type : int (0 to show hints, 1 to skip showing hints)\n         ",
    "links" : [ ]
  }, {
    "name" : "UNSAFE_VOLUME_MUSIC_ACTIVE_MS",
    "type" : "String",
    "comment" : "\n         * Persisted playback time after a user confirmation of an unsafe volume level.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_SHOW_NOTIFICATIONS",
    "type" : "String",
    "comment" : "\n         * Indicates whether notification display on the lock screen is enabled.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_SHOW_SILENT_NOTIFICATIONS",
    "type" : "String",
    "comment" : "\n         * Indicates whether the lock screen should display silent notifications.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_NOTIFICATION_SNOOZE",
    "type" : "String",
    "comment" : "\n         * Indicates whether snooze options should be shown on notifications\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TV_INPUT_HIDDEN_INPUTS",
    "type" : "String",
    "comment" : "\n         * List of TV inputs that are currently hidden. This is a string\n         * containing the IDs of all hidden TV inputs. Each ID is encoded by\n         * {@link android.net.Uri#encode(String)} and separated by ':'.\n         * @hide\n         ",
    "links" : [ "android.net.Uri#encode(String)" ]
  }, {
    "name" : "TV_INPUT_CUSTOM_LABELS",
    "type" : "String",
    "comment" : "\n         * List of custom TV input labels. This is a string containing <TV input id, custom name>\n         * pairs. TV input id and custom name are encoded by {@link android.net.Uri#encode(String)}\n         * and separated by ','. Each pair is separated by ':'.\n         * @hide\n         ",
    "links" : [ "android.net.Uri#encode(String)" ]
  }, {
    "name" : "TV_APP_USES_NON_SYSTEM_INPUTS",
    "type" : "String",
    "comment" : "\n         * Whether TV app uses non-system inputs.\n         *\n         * <p>\n         * The value is boolean (1 or 0), where 1 means non-system TV inputs are allowed,\n         * and 0 means non-system TV inputs are not allowed.\n         *\n         * <p>\n         * Devices such as sound bars may have changed the system property allow_third_party_inputs\n         * to false so the TV Application only uses HDMI and other built in inputs. This setting\n         * allows user to override the default and have the TV Application use third party TV inputs\n         * available on play store.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "USB_AUDIO_AUTOMATIC_ROUTING_DISABLED",
    "type" : "String",
    "comment" : "\n         * Whether automatic routing of system audio to USB audio peripheral is disabled.\n         * The value is boolean (1 or 0), where 1 means automatic routing is disabled,\n         * and 0 means automatic routing is enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SLEEP_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * The timeout in milliseconds before the device fully goes to sleep after\n         * a period of inactivity.  This value sets an upper bound on how long the device\n         * will stay awake or dreaming without user activity.  It should generally\n         * be longer than {@link Settings.System#SCREEN_OFF_TIMEOUT} as otherwise the device\n         * will sleep before it ever has a chance to dream.\n         * <p>\n         * Use -1 to disable this timeout.\n         * </p>\n         *\n         * @hide\n         ",
    "links" : [ "Settings.System#SCREEN_OFF_TIMEOUT" ]
  }, {
    "name" : "ATTENTIVE_TIMEOUT",
    "type" : "String",
    "comment" : "\n         * The timeout in milliseconds before the device goes to sleep due to user inattentiveness,\n         * even if the system is holding wakelocks. It should generally be longer than {@code\n         * config_attentiveWarningDuration}, as otherwise the device will show the attentive\n         * warning constantly. Small timeouts are discouraged, as they will cause the device to\n         * go to sleep quickly after waking up.\n         * <p>\n         * Use -1 to disable this timeout.\n         * </p>\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DOUBLE_TAP_TO_WAKE",
    "type" : "String",
    "comment" : "\n         * Controls whether double tap to wake is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSISTANT",
    "type" : "String",
    "comment" : "\n         * The current assistant component. It could be a voice interaction service,\n         * or an activity that handles ACTION_ASSIST, or empty which means using the default\n         * handling.\n         *\n         * <p>This should be set indirectly by setting the {@link\n         * android.app.role.RoleManager#ROLE_ASSISTANT assistant role}.\n         *\n         * @hide\n         ",
    "links" : [ "android.app.role.RoleManager#ROLE_ASSISTANT" ]
  }, {
    "name" : "CAMERA_GESTURE_DISABLED",
    "type" : "String",
    "comment" : "\n         * Whether the camera launch gesture should be disabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED",
    "type" : "String",
    "comment" : "\n         * Whether the camera launch gesture to double tap the power button when the screen is off\n         * should be disabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the camera double twist gesture to flip between front and back mode should be\n         * enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LIFT_TRIGGER_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not the smart camera lift trigger that launches the camera when the user moves\n         * the phone into a position for taking photos should be enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CAMERA_LIFT_TRIGGER_ENABLED_DEFAULT",
    "type" : "int",
    "comment" : "\n         * The default enable state of the camera lift trigger.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLASHLIGHT_AVAILABLE",
    "type" : "String",
    "comment" : "\n         * Whether or not the flashlight (camera torch mode) is available required to turn\n         * on flashlight.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FLASHLIGHT_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not flashlight is enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_KEYGUARD_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock is allowed on Keyguard.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_DISMISSES_KEYGUARD",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock dismisses the keyguard.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SHOW_MEDIA_WHEN_BYPASSING",
    "type" : "String",
    "comment" : "\n         * Whether or not media is shown automatically when bypassing as a heads up.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_ATTENTION_REQUIRED",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock requires attention. This is a cached value, the source of\n         * truth is obtained through the HAL.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_DIVERSITY_REQUIRED",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock requires a diverse set of poses during enrollment. This is a\n         * cached value, the source of truth is obtained through the HAL.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_APP_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock is allowed for apps (through BiometricPrompt).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION",
    "type" : "String",
    "comment" : "\n         * Whether or not face unlock always requires user confirmation, meaning {@link\n         * android.hardware.biometrics.BiometricPrompt.Builder#setConfirmationRequired(boolean)}\n         * is always 'true'. This overrides the behavior that apps choose in the\n         * setConfirmationRequired API.\n         * @hide\n         ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt.Builder#setConfirmationRequired(boolean)" ]
  }, {
    "name" : "FACE_UNLOCK_RE_ENROLL",
    "type" : "String",
    "comment" : "\n         * Whether or not a user should re enroll their face.\n         *\n         * Face unlock re enroll.\n         *  0 = No re enrollment.\n         *  1 = Re enrollment is suggested.\n         *  2 = Re enrollment is required after a set time period.\n         *  3 = Re enrollment is required immediately.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BIOMETRIC_DEBUG_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not debugging is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_GESTURE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the assist gesture should be enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_GESTURE_SENSITIVITY",
    "type" : "String",
    "comment" : "\n         * Sensitivity control for the assist gesture.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_GESTURE_SILENCE_ALERTS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the assist gesture should silence alerts.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_GESTURE_WAKE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether the assist gesture should wake the phone.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ASSIST_GESTURE_SETUP_COMPLETE",
    "type" : "String",
    "comment" : "\n         * Indicates whether the Assist Gesture Deferred Setup has been completed.\n         * <p>\n         * Type: int (0 for false, 1 for true)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TRUST_AGENTS_EXTEND_UNLOCK",
    "type" : "String",
    "comment" : "\n         * Control whether Trust Agents are in active unlock or extend unlock mode.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCK_SCREEN_WHEN_TRUST_LOST",
    "type" : "String",
    "comment" : "\n         * Control whether the screen locks when trust is lost.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_ACTIVATED",
    "type" : "String",
    "comment" : "\n         * Control whether Night display is currently activated.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_AUTO_MODE",
    "type" : "String",
    "comment" : "\n         * Control whether Night display will automatically activate/deactivate.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_COLOR_TEMPERATURE",
    "type" : "String",
    "comment" : "\n         * Control the color temperature of Night Display, represented in Kelvin.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_CUSTOM_START_TIME",
    "type" : "String",
    "comment" : "\n         * Custom time when Night display is scheduled to activate.\n         * Represented as milliseconds from midnight (e.g. 79200000 == 10pm).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_CUSTOM_END_TIME",
    "type" : "String",
    "comment" : "\n         * Custom time when Night display is scheduled to deactivate.\n         * Represented as milliseconds from midnight (e.g. 21600000 == 6am).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NIGHT_DISPLAY_LAST_ACTIVATED_TIME",
    "type" : "String",
    "comment" : "\n         * A String representing the LocalDateTime when Night display was last activated. Use to\n         * decide whether to apply the current activated state after a reboot or user change. In\n         * legacy cases, this is represented by the time in milliseconds (since epoch).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_WHITE_BALANCE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Control whether display white balance is currently enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ENABLED_VR_LISTENERS",
    "type" : "String",
    "comment" : "\n         * Names of the service components that the current user has explicitly allowed to\n         * be a VR mode listener, separated by ':'.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VR_DISPLAY_MODE",
    "type" : "String",
    "comment" : "\n         * Behavior of the display while in VR mode.\n         *\n         * One of {@link #VR_DISPLAY_MODE_LOW_PERSISTENCE} or {@link #VR_DISPLAY_MODE_OFF}.\n         *\n         * @hide\n         ",
    "links" : [ "#VR_DISPLAY_MODE_OFF", "#VR_DISPLAY_MODE_LOW_PERSISTENCE" ]
  }, {
    "name" : "VR_DISPLAY_MODE_LOW_PERSISTENCE",
    "type" : "int",
    "comment" : "\n         * Lower the display persistence while the system is in VR mode.\n         *\n         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE\n         *\n         * @hide.\n         ",
    "links" : [ ]
  }, {
    "name" : "VR_DISPLAY_MODE_OFF",
    "type" : "int",
    "comment" : "\n         * Do not alter the display persistence while the system is in VR mode.\n         *\n         * @see PackageManager#FEATURE_VR_MODE_HIGH_PERFORMANCE\n         *\n         * @hide.\n         ",
    "links" : [ ]
  }, {
    "name" : "CARRIER_APPS_HANDLED",
    "type" : "String",
    "comment" : "\n         * The latest SDK version that CarrierAppUtils#disableCarrierAppsUntilPrivileged has been\n         * executed for.\n         *\n         * <p>This is used to ensure that we only take one pass which will disable apps that are not\n         * privileged (if any). From then on, we only want to enable apps (when a matching SIM is\n         * inserted), to avoid disabling an app that the user might actively be using.\n         *\n         * <p>Will be set to {@link android.os.Build.VERSION#SDK_INT} once executed. Note that older\n         * SDK versions prior to R set 1 for this value.\n         *\n         * @hide\n         ",
    "links" : [ "android.os.Build.VERSION#SDK_INT" ]
  }, {
    "name" : "MANAGED_PROFILE_CONTACT_REMOTE_SEARCH",
    "type" : "String",
    "comment" : "\n         * Whether parent user can access remote contact in managed profile.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CROSS_PROFILE_CALENDAR_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether parent profile can access remote calendar data in managed profile.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not the automatic storage manager is enabled and should run on the device.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN",
    "type" : "String",
    "comment" : "\n         * How many days of information for the automatic storage manager to retain on the device.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN_DEFAULT",
    "type" : "int",
    "comment" : "\n         * Default number of days of information for the automatic storage manager to retain.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_BYTES_CLEARED",
    "type" : "String",
    "comment" : "\n         * How many bytes the automatic storage manager has cleared out.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_LAST_RUN",
    "type" : "String",
    "comment" : "\n         * Last run time for the automatic storage manager.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_STORAGE_MANAGER_TURNED_OFF_BY_POLICY",
    "type" : "String",
    "comment" : "\n         * If the automatic storage manager has been disabled by policy. Note that this doesn't\n         * mean that the automatic storage manager is prevented from being re-enabled -- this only\n         * means that it was turned off by policy at least once.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_NAVIGATION_KEYS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether SystemUI navigation keys is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "QS_TILES",
    "type" : "String",
    "comment" : "\n         * Holds comma separated list of ordering of QS tiles.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTROLS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Whether this user has enabled Quick controls.\n         *\n         * 0 indicates disabled and 1 indicates enabled. A non existent value should be treated as\n         * enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "POWER_MENU_LOCKED_SHOW_CONTENT",
    "type" : "String",
    "comment" : "\n         * Whether power menu content (cards, passes, controls) will be shown when device is locked.\n         *\n         * 0 indicates hide and 1 indicates show. A non existent value will be treated as hide.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTANT_APPS_ENABLED",
    "type" : "String",
    "comment" : "\n         * Specifies whether the web action API is enabled.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_PAIRED",
    "type" : "String",
    "comment" : "\n         * Has this pairable device been paired or upgraded from a previously paired system.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "CMAS_ADDITIONAL_BROADCAST_PKG",
    "type" : "String",
    "comment" : "\n         * Specifies additional package name for broadcasting the CMAS messages.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_BADGING",
    "type" : "String",
    "comment" : "\n         * Whether the launcher should show any notification badges.\n         * The value is boolean (1 or 0).\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_HISTORY_ENABLED",
    "type" : "String",
    "comment" : "\n         * When enabled the system will maintain a rolling history of received notifications. When\n         * disabled the history will be disabled and deleted.\n         *\n         * The value 1 - enable, 0 - disable\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BUBBLE_IMPORTANT_CONVERSATIONS",
    "type" : "String",
    "comment" : "\n         * When enabled conversations marked as favorites will be set to bubble.\n         *\n         * The value 1 - enable, 0 - disable\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_DISMISS_RTL",
    "type" : "String",
    "comment" : "\n         * Whether notifications are dismissed by a right-to-left swipe (instead of a left-to-right\n         * swipe).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "QS_AUTO_ADDED_TILES",
    "type" : "String",
    "comment" : "\n         * Comma separated list of QS tiles that have been auto-added already.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCKDOWN_IN_POWER_MENU",
    "type" : "String",
    "comment" : "\n         * Whether the Lockdown button should be shown in the power menu.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_MANAGER_CONSTANTS",
    "type" : "String",
    "comment" : "\n         * Backup manager behavioral parameters.\n         * This is encoded as a key=value list, separated by commas. Ex:\n         *\n         * \"key_value_backup_interval_milliseconds=14400000,key_value_backup_require_charging=true\"\n         *\n         * The following keys are supported:\n         *\n         * <pre>\n         * key_value_backup_interval_milliseconds  (long)\n         * key_value_backup_fuzz_milliseconds      (long)\n         * key_value_backup_require_charging       (boolean)\n         * key_value_backup_required_network_type  (int)\n         * full_backup_interval_milliseconds       (long)\n         * full_backup_require_charging            (boolean)\n         * full_backup_required_network_type       (int)\n         * backup_finished_notification_receivers  (String[])\n         * </pre>\n         *\n         * backup_finished_notification_receivers uses \":\" as delimeter for values.\n         *\n         * <p>\n         * Type: string\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACKUP_LOCAL_TRANSPORT_PARAMETERS",
    "type" : "String",
    "comment" : "\n         * Local transport parameters so we can configure it for tests.\n         * This is encoded as a key=value list, separated by commas.\n         *\n         * The following keys are supported:\n         *\n         * <pre>\n         * fake_encryption_flag  (boolean)\n         * </pre>\n         *\n         * <p>\n         * Type: string\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BLUETOOTH_ON_WHILE_DRIVING",
    "type" : "String",
    "comment" : "\n         * Flag to set if the system should predictively attempt to re-enable Bluetooth while\n         * the user is driving.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_HUSH_GESTURE",
    "type" : "String",
    "comment" : "\n         * What behavior should be invoked when the volume hush gesture is triggered\n         * One of VOLUME_HUSH_OFF, VOLUME_HUSH_VIBRATE, VOLUME_HUSH_MUTE.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_HUSH_OFF",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_HUSH_VIBRATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "VOLUME_HUSH_MUTE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "LOW_POWER_MANUAL_ACTIVATION_COUNT",
    "type" : "String",
    "comment" : "\n         * The number of times (integer) the user has manually enabled battery saver.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOW_POWER_WARNING_ACKNOWLEDGED",
    "type" : "String",
    "comment" : "\n         * Whether the \"first time battery saver warning\" dialog needs to be shown (0: default)\n         * or not (1).\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "SUPPRESS_AUTO_BATTERY_SAVER_SUGGESTION",
    "type" : "String",
    "comment" : "\n         * 0 (default) Auto battery saver suggestion has not been suppressed. 1) it has been\n         * suppressed.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PACKAGES_TO_CLEAR_DATA_BEFORE_FULL_RESTORE",
    "type" : "String",
    "comment" : "\n         * List of packages, which data need to be unconditionally cleared before full restore.\n         * Type: string\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NOTIFICATION_NEW_INTERRUPTION_MODEL",
    "type" : "String",
    "comment" : "\n         * Setting to determine whether to use the new notification priority handling features.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_ACCESS_CHECK_INTERVAL_MILLIS",
    "type" : "String",
    "comment" : "\n         * How often to check for location access.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_ACCESS_CHECK_DELAY_MILLIS",
    "type" : "String",
    "comment" : "\n         * Delay between granting location access and checking it.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LOCATION_PERMISSIONS_UPGRADE_TO_Q_MODE",
    "type" : "String",
    "comment" : "\n         * @deprecated This setting does not have any effect anymore\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AUTO_REVOKE_DISABLED",
    "type" : "String",
    "comment" : "\n         * Whether or not the system Auto Revoke feature is disabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "THEME_CUSTOMIZATION_OVERLAY_PACKAGES",
    "type" : "String",
    "comment" : "\n         * Map of android.theme.customization.* categories to the enabled overlay package for that\n         * category, formatted as a serialized {@link org.json.JSONObject}. If there is no\n         * corresponding package included for a category, then all overlay packages in that\n         * category must be disabled.\n         * @hide\n         ",
    "links" : [ "org.json.JSONObject" ]
  }, {
    "name" : "NAVIGATION_MODE",
    "type" : "String",
    "comment" : "\n         * Navigation bar mode.\n         *  0 = 3 button\n         *  1 = 2 button\n         *  2 = fully gestural\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACK_GESTURE_INSET_SCALE_LEFT",
    "type" : "String",
    "comment" : "\n         * Scale factor for the back gesture inset size on the left side of the screen.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "BACK_GESTURE_INSET_SCALE_RIGHT",
    "type" : "String",
    "comment" : "\n         * Scale factor for the back gesture inset size on the right side of the screen.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "NEARBY_SHARING_COMPONENT",
    "type" : "String",
    "comment" : "\n         * Current provider of proximity-based sharing services.\n         * Default value in @string/config_defaultNearbySharingComponent.\n         * No VALIDATOR as this setting will not be backed up.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AWARE_ENABLED",
    "type" : "String",
    "comment" : "\n         * Controls whether aware is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "AWARE_LOCK_ENABLED",
    "type" : "String",
    "comment" : "\n         * Controls whether aware_lock is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "TAP_GESTURE",
    "type" : "String",
    "comment" : "\n         * Controls whether tap gesture is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "PEOPLE_STRIP",
    "type" : "String",
    "comment" : "\n         * Controls whether the people strip is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "MEDIA_CONTROLS_RESUME",
    "type" : "String",
    "comment" : "\n         * Whether or not to enable media resumption\n         * When enabled, media controls in quick settings will populate on boot and persist if\n         * resumable via a MediaBrowserService.\n         * @see Settings.Global#SHOW_MEDIA_ON_QUICK_SETTINGS\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_MAGNIFICATION",
    "type" : "String",
    "comment" : "\n         * Controls if window magnification is enabled.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_MAGNIFICATION_MODE",
    "type" : "String",
    "comment" : "\n         * Controls magnification mode when magnification is enabled via a system-wide\n         * triple tap gesture or the accessibility shortcut.\n         *\n         * @see#ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN\n         * @see#ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN",
    "type" : "int",
    "comment" : "\n         * Magnification mode value that magnifies whole display.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW",
    "type" : "int",
    "comment" : "\n         * Magnification mode value that magnifies magnify particular region in a window\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "LEGACY_RESTORE_SETTINGS",
    "type" : "String[]",
    "comment" : "\n         * Keys we no longer back up under the current schema, but want to continue to\n         * process when restoring historical backup datasets.\n         *\n         * All settings in {@link LEGACY_RESTORE_SETTINGS} array *must* have a non-null validator,\n         * otherwise they won't be restored.\n         *\n         * @hide\n         ",
    "links" : [ "LEGACY_RESTORE_SETTINGS" ]
  }, {
    "name" : "CLONE_TO_MANAGED_PROFILE",
    "type" : "Set<String>",
    "comment" : "\n         * These entries are considered common between the personal and the managed profile,\n         * since the managed profile doesn't get to change them.\n         ",
    "links" : [ ]
  }, {
    "name" : "INSTANT_APP_SETTINGS",
    "type" : "Set<String>",
    "comment" : "\n         * Secure settings which can be accessed by instant apps.\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void getMovedToGlobalSettings(Set<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void clearProviderForTest()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String getString(ContentResolver resolver, String name)",
    "returnType" : "String",
    "comment" : "\n         * Look up a name in the database.\n         * @param resolver to access the database with\n         * @param name to look up in the table\n         * @return the corresponding value, or null if not present\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String getStringForUser(ContentResolver resolver, String name, int userHandle)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(ContentResolver resolver, String name, String value, boolean overrideableByRestore)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database. Values written by this method will be\n         * overridden if a restore happens in the future.\n         *\n         * @param resolver to access the database with\n         * @param name to store\n         * @param value to associate with the name\n         * @return true if the value was set, false on database errors\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(ContentResolver resolver, String name, String value)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database.\n         * @param resolver to access the database with\n         * @param name to store\n         * @param value to associate with the name\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putStringForUser(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, @Nullable String tag, boolean makeDefault, @UserIdInt int userHandle, boolean overrideableByRestore)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putString(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, @Nullable String tag, boolean makeDefault)",
    "returnType" : "boolean",
    "comment" : "\n         * Store a name/value pair into the database.\n         * <p>\n         * The method takes an optional tag to associate with the setting\n         * which can be used to clear only settings made by your package and\n         * associated with this tag by passing the tag to {@link\n         * #resetToDefaults(ContentResolver, String)}. Anyone can override\n         * the current tag. Also if another package changes the setting\n         * then the tag will be set to the one specified in the set call\n         * which can be null. Also any of the settings setters that do not\n         * take a tag as an argument effectively clears the tag.\n         * </p><p>\n         * For example, if you set settings A and B with tags T1 and T2 and\n         * another app changes setting A (potentially to the same value), it\n         * can assign to it a tag T3 (note that now the package that changed\n         * the setting is not yours). Now if you reset your changes for T1 and\n         * T2 only setting B will be reset and A not (as it was changed by\n         * another package) but since A did not change you are in the desired\n         * initial state. Now if the other app changes the value of A (assuming\n         * you registered an observer in the beginning) you would detect that\n         * the setting was changed by another app and handle this appropriately\n         * (ignore, set back to some value, etc).\n         * </p><p>\n         * Also the method takes an argument whether to make the value the\n         * default for this setting. If the system already specified a default\n         * value, then the one passed in here will <strong>not</strong>\n         * be set as the default.\n         * </p>\n         *\n         * @param resolver to access the database with.\n         * @param name to store.\n         * @param value to associate with the name.\n         * @param tag to associate with the setting.\n         * @param makeDefault whether to make the value the default one.\n         * @return true if the value was set, false on database errors.\n         *\n         * @see #resetToDefaults(ContentResolver, String)\n         *\n         * @hide\n         ",
    "links" : [ "#resetToDefaults(ContentResolver" ]
  }, {
    "name" : "public static void resetToDefaults(@NonNull ContentResolver resolver, @Nullable String tag)",
    "returnType" : "void",
    "comment" : "\n         * Reset the settings to their defaults. This would reset <strong>only</strong>\n         * settings set by the caller's package. Think of it of a way to undo your own\n         * changes to the global settings. Passing in the optional tag will reset only\n         * settings changed by your package and associated with this tag.\n         *\n         * @param resolver Handle to the content resolver.\n         * @param tag Optional tag which should be associated with the settings to reset.\n         *\n         * @see #putString(ContentResolver, String, String, String, boolean)\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static void resetToDefaultsAsUser(@NonNull ContentResolver resolver, @Nullable String tag, @ResetMode int mode, @IntRange(from = 0) int userHandle)",
    "returnType" : "void",
    "comment" : "\n         *\n         * Reset the settings to their defaults for a given user with a specific mode. The\n         * optional tag argument is valid only for {@link #RESET_MODE_PACKAGE_DEFAULTS}\n         * allowing resetting the settings made by a package and associated with the tag.\n         *\n         * @param resolver Handle to the content resolver.\n         * @param tag Optional tag which should be associated with the settings to reset.\n         * @param mode The reset mode.\n         * @param userHandle The user for which to reset to defaults.\n         *\n         * @see #RESET_MODE_PACKAGE_DEFAULTS\n         * @see #RESET_MODE_UNTRUSTED_DEFAULTS\n         * @see #RESET_MODE_UNTRUSTED_CHANGES\n         * @see #RESET_MODE_TRUSTED_DEFAULTS\n         *\n         * @hide\n         ",
    "links" : [ "#RESET_MODE_PACKAGE_DEFAULTS" ]
  }, {
    "name" : "public static Uri getUriFor(String name)",
    "returnType" : "Uri",
    "comment" : "\n         * Construct the content URI for a particular name/value pair,\n         * useful for monitoring changes with a ContentObserver.\n         * @param name to look up in the table\n         * @return the corresponding content URI, or null if not present\n         ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(ContentResolver cr, String name, int def)",
    "returnType" : "int",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as an integer.  Note that internally setting values are always\n         * stored as strings; this function converts the string to an integer\n         * for you.  The default value will be returned if the setting is\n         * not defined or not an integer.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid integer.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static int getIntForUser(ContentResolver cr, String name, int def, int userHandle)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static int getInt(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "int",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as an integer.  Note that internally setting values are always\n         * stored as strings; this function converts the string to an integer\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not an integer.\n         *\n         * @return The setting's current value.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static int getIntForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putInt(ContentResolver cr, String name, int value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a single settings value as an\n         * integer. This will either create a new entry in the table if the\n         * given name does not exist, or modify the value of the existing row\n         * with that name.  Note that internally setting values are always\n         * stored as strings, so this function converts the given value to a\n         * string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putIntForUser(ContentResolver cr, String name, int value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(ContentResolver cr, String name, long def)",
    "returnType" : "long",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as a {@code long}.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a {@code long}\n         * for you.  The default value will be returned if the setting is\n         * not defined or not a {@code long}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid {@code long}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static long getLongForUser(ContentResolver cr, String name, long def, int userHandle)",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static long getLong(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "long",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as a {@code long}.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a {@code long}\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @return The setting's current value.\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not an integer.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static long getLongForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putLong(ContentResolver cr, String name, long value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a secure settings value as a long\n         * integer. This will either create a new entry in the table if the\n         * given name does not exist, or modify the value of the existing row\n         * with that name.  Note that internally setting values are always\n         * stored as strings, so this function converts the given value to a\n         * string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putLongForUser(ContentResolver cr, String name, long value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(ContentResolver cr, String name, float def)",
    "returnType" : "float",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as a floating point number.  Note that internally setting values are\n         * always stored as strings; this function converts the string to an\n         * float for you. The default value will be returned if the setting\n         * is not defined or not a valid float.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         * @param def Value to return if the setting is not defined.\n         *\n         * @return The setting's current value, or 'def' if it is not defined\n         * or not a valid float.\n         ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloatForUser(ContentResolver cr, String name, float def, int userHandle)",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static float getFloat(ContentResolver cr, String name) throws SettingNotFoundException",
    "returnType" : "float",
    "comment" : "\n         * Convenience function for retrieving a single secure settings value\n         * as a float.  Note that internally setting values are always\n         * stored as strings; this function converts the string to a float\n         * for you.\n         * <p>\n         * This version does not take a default value.  If the setting has not\n         * been set, or the string value is not a number,\n         * it throws {@link SettingNotFoundException}.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to retrieve.\n         *\n         * @throws SettingNotFoundException Thrown if a setting by the given\n         * name can't be found or the setting value is not a float.\n         *\n         * @return The setting's current value.\n         ",
    "links" : [ "SettingNotFoundException" ]
  }, {
    "name" : "public static float getFloatForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException",
    "returnType" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putFloat(ContentResolver cr, String name, float value)",
    "returnType" : "boolean",
    "comment" : "\n         * Convenience function for updating a single settings value as a\n         * floating point number. This will either create a new entry in the\n         * table if the given name does not exist, or modify the value of the\n         * existing row with that name.  Note that internally setting values\n         * are always stored as strings, so this function converts the given\n         * value to a string before storing it.\n         *\n         * @param cr The ContentResolver to access.\n         * @param name The name of the setting to modify.\n         * @param value The new value for the setting.\n         * @return true if the value was set, false on database errors\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean putFloatForUser(ContentResolver cr, String name, float value, int userHandle)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void getCloneToManagedProfileSettings(Set<String> outKeySet)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLocationProviderEnabled(ContentResolver cr, String provider)",
    "returnType" : "boolean",
    "comment" : "\n         * Helper method for determining if a location provider is enabled.\n         *\n         * @param cr the content resolver to use\n         * @param provider the location provider to query\n         * @return true if the provider is enabled\n         *\n         * @deprecated use {@link LocationManager#isProviderEnabled(String)}\n         ",
    "links" : [ "android.location.LocationManager#isProviderEnabled(String)" ]
  }, {
    "name" : "public static void setLocationProviderEnabled(ContentResolver cr, String provider, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Thread-safe method for enabling or disabling a single location provider. This will have\n         * no effect on Android Q and above.\n         * @param cr the content resolver to use\n         * @param provider the location provider to enable or disable\n         * @param enabled true if the provider should be enabled\n         * @deprecated This API is deprecated\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "CONTENT_URI", "sProviderHolder", "sNameValueCache", "sLockSettings", "sIsSystemProcess", "MOVED_TO_LOCK_SETTINGS", "MOVED_TO_GLOBAL", "ADAPTIVE_SLEEP", "DEVELOPMENT_SETTINGS_ENABLED", "BUGREPORT_IN_POWER_MENU", "ADB_ENABLED", "ALLOW_MOCK_LOCATION", "ODI_CAPTIONS_ENABLED", "ANDROID_ID", "BLUETOOTH_ON", "DATA_ROAMING", "DEFAULT_INPUT_METHOD", "SELECTED_INPUT_METHOD_SUBTYPE", "INPUT_METHODS_SUBTYPE_HISTORY", "INPUT_METHOD_SELECTOR_VISIBILITY", "VOICE_INTERACTION_SERVICE", "AUTOFILL_SERVICE", "AUTOFILL_FEATURE_FIELD_CLASSIFICATION", "DARK_MODE_DIALOG_SEEN", "DARK_THEME_CUSTOM_START_TIME", "DARK_THEME_CUSTOM_END_TIME", "AUTOFILL_USER_DATA_MAX_USER_DATA_SIZE", "AUTOFILL_USER_DATA_MAX_FIELD_CLASSIFICATION_IDS_SIZE", "AUTOFILL_USER_DATA_MAX_CATEGORY_COUNT", "AUTOFILL_USER_DATA_MAX_VALUE_LENGTH", "AUTOFILL_USER_DATA_MIN_VALUE_LENGTH", "CONTENT_CAPTURE_ENABLED", "DEVICE_PROVISIONED", "MANAGED_PROVISIONING_DPC_DOWNLOADED", "SECURE_FRP_MODE", "USER_SETUP_COMPLETE", "USER_SETUP_PERSONALIZATION_NOT_STARTED", "USER_SETUP_PERSONALIZATION_STARTED", "USER_SETUP_PERSONALIZATION_PAUSED", "USER_SETUP_PERSONALIZATION_COMPLETE", "USER_SETUP_PERSONALIZATION_STATE", "TV_USER_SETUP_COMPLETE", "COMPLETED_CATEGORY_PREFIX", "ENABLED_INPUT_METHODS", "DISABLED_SYSTEM_INPUT_METHODS", "SHOW_IME_WITH_HARD_KEYBOARD", "HTTP_PROXY", "ALWAYS_ON_VPN_APP", "ALWAYS_ON_VPN_LOCKDOWN", "ALWAYS_ON_VPN_LOCKDOWN_WHITELIST", "INSTALL_NON_MARKET_APPS", "UNKNOWN_SOURCES_DEFAULT_REVERSED", "LOCATION_PROVIDERS_ALLOWED", "LOCATION_MODE", "LOCATION_CHANGER", "LOCATION_CHANGER_UNKNOWN", "LOCATION_CHANGER_SYSTEM_SETTINGS", "LOCATION_CHANGER_QUICK_SETTINGS", "LOCATION_MODE_OFF", "LOCATION_MODE_SENSORS_ONLY", "LOCATION_MODE_BATTERY_SAVING", "LOCATION_MODE_HIGH_ACCURACY", "LOCATION_MODE_ON", "LOCATION_COARSE_ACCURACY_M", "LOCK_BIOMETRIC_WEAK_FLAGS", "LOCK_TO_APP_EXIT_LOCKED", "LOCK_PATTERN_ENABLED", "LOCK_PATTERN_VISIBLE", "LOCK_PATTERN_TACTILE_FEEDBACK_ENABLED", "LOCK_SCREEN_LOCK_AFTER_TIMEOUT", "LOCK_SCREEN_OWNER_INFO", "LOCK_SCREEN_APPWIDGET_IDS", "LOCK_SCREEN_FALLBACK_APPWIDGET_ID", "LOCK_SCREEN_STICKY_APPWIDGET", "LOCK_SCREEN_OWNER_INFO_ENABLED", "LOCK_SCREEN_ALLOW_PRIVATE_NOTIFICATIONS", "LOCK_SCREEN_ALLOW_REMOTE_INPUT", "LOCK_SCREEN_CUSTOM_CLOCK_FACE", "DOCKED_CLOCK_FACE", "SHOW_NOTE_ABOUT_NOTIFICATION_HIDING", "TRUST_AGENTS_INITIALIZED", "LOGGING_ID", "NETWORK_PREFERENCE", "PARENTAL_CONTROL_ENABLED", "PARENTAL_CONTROL_LAST_UPDATE", "PARENTAL_CONTROL_REDIRECT_URL", "SETTINGS_CLASSNAME", "USB_MASS_STORAGE_ENABLED", "USE_GOOGLE_MAIL", "ACCESSIBILITY_ENABLED", "ACCESSIBILITY_SHORTCUT_ON_LOCK_SCREEN", "ACCESSIBILITY_SHORTCUT_DIALOG_SHOWN", "ACCESSIBILITY_SHORTCUT_TARGET_SERVICE", "ACCESSIBILITY_BUTTON_TARGET_COMPONENT", "ACCESSIBILITY_BUTTON_TARGETS", "ACCESSIBILITY_SHORTCUT_TARGET_MAGNIFICATION_CONTROLLER", "TOUCH_EXPLORATION_ENABLED", "ENABLED_ACCESSIBILITY_SERVICES", "TOUCH_EXPLORATION_GRANTED_ACCESSIBILITY_SERVICES", "GLOBAL_ACTIONS_PANEL_ENABLED", "GLOBAL_ACTIONS_PANEL_AVAILABLE", "GLOBAL_ACTIONS_PANEL_DEBUG_ENABLED", "HUSH_GESTURE_USED", "MANUAL_RINGER_TOGGLE_COUNT", "CHARGING_SOUNDS_ENABLED", "CHARGING_VIBRATION_ENABLED", "ZEN_DURATION", "ZEN_DURATION_PROMPT", "ZEN_DURATION_FOREVER", "SHOW_ZEN_UPGRADE_NOTIFICATION", "SHOW_ZEN_SETTINGS_SUGGESTION", "ZEN_SETTINGS_UPDATED", "ZEN_SETTINGS_SUGGESTION_VIEWED", "IN_CALL_NOTIFICATION_ENABLED", "KEYGUARD_SLICE_URI", "ACCESSIBILITY_SPEAK_PASSWORD", "ACCESSIBILITY_HIGH_TEXT_CONTRAST_ENABLED", "ACCESSIBILITY_DISPLAY_MAGNIFICATION_ENABLED", "ACCESSIBILITY_DISPLAY_MAGNIFICATION_NAVBAR_ENABLED", "ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE", "ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE", "ACCESSIBILITY_SOFT_KEYBOARD_MODE", "SHOW_MODE_AUTO", "SHOW_MODE_HIDDEN", "ACCESSIBILITY_CAPTIONING_ENABLED", "ACCESSIBILITY_CAPTIONING_LOCALE", "ACCESSIBILITY_CAPTIONING_PRESET", "ACCESSIBILITY_CAPTIONING_BACKGROUND_COLOR", "ACCESSIBILITY_CAPTIONING_FOREGROUND_COLOR", "ACCESSIBILITY_CAPTIONING_EDGE_TYPE", "ACCESSIBILITY_CAPTIONING_EDGE_COLOR", "ACCESSIBILITY_CAPTIONING_WINDOW_COLOR", "ACCESSIBILITY_CAPTIONING_TYPEFACE", "ACCESSIBILITY_CAPTIONING_FONT_SCALE", "ACCESSIBILITY_DISPLAY_INVERSION_ENABLED", "ACCESSIBILITY_DISPLAY_DALTONIZER_ENABLED", "ACCESSIBILITY_DISPLAY_DALTONIZER", "ACCESSIBILITY_AUTOCLICK_ENABLED", "ACCESSIBILITY_AUTOCLICK_DELAY", "ACCESSIBILITY_LARGE_POINTER_ICON", "LONG_PRESS_TIMEOUT", "MULTI_PRESS_TIMEOUT", "ACCESSIBILITY_NON_INTERACTIVE_UI_TIMEOUT_MS", "ACCESSIBILITY_INTERACTIVE_UI_TIMEOUT_MS", "ENABLED_PRINT_SERVICES", "DISABLED_PRINT_SERVICES", "DISPLAY_DENSITY_FORCED", "TTS_USE_DEFAULTS", "TTS_DEFAULT_RATE", "TTS_DEFAULT_PITCH", "TTS_DEFAULT_SYNTH", "TTS_DEFAULT_LANG", "TTS_DEFAULT_COUNTRY", "TTS_DEFAULT_VARIANT", "TTS_DEFAULT_LOCALE", "TTS_ENABLED_PLUGINS", "WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON", "WIFI_NETWORKS_AVAILABLE_REPEAT_DELAY", "WIFI_NUM_OPEN_NETWORKS_KEPT", "WIFI_ON", "WIFI_WATCHDOG_ACCEPTABLE_PACKET_LOSS_PERCENTAGE", "WIFI_WATCHDOG_AP_COUNT", "WIFI_WATCHDOG_BACKGROUND_CHECK_DELAY_MS", "WIFI_WATCHDOG_BACKGROUND_CHECK_ENABLED", "WIFI_WATCHDOG_BACKGROUND_CHECK_TIMEOUT_MS", "WIFI_WATCHDOG_INITIAL_IGNORED_PING_COUNT", "WIFI_WATCHDOG_MAX_AP_CHECKS", "WIFI_WATCHDOG_ON", "WIFI_WATCHDOG_WATCH_LIST", "WIFI_WATCHDOG_PING_COUNT", "WIFI_WATCHDOG_PING_DELAY_MS", "WIFI_WATCHDOG_PING_TIMEOUT_MS", "WIFI_MAX_DHCP_RETRY_COUNT", "WIFI_MOBILE_DATA_TRANSITION_WAKELOCK_TIMEOUT_MS", "CONNECTIVITY_RELEASE_PENDING_INTENT_DELAY_MS", "BACKGROUND_DATA", "ALLOWED_GEOLOCATION_ORIGINS", "PREFERRED_TTY_MODE", "ENHANCED_VOICE_PRIVACY_ENABLED", "TTY_MODE_ENABLED", "RTT_CALLING_MODE", "BACKUP_ENABLED", "BACKUP_AUTO_RESTORE", "BACKUP_PROVISIONED", "BACKUP_TRANSPORT", "LAST_SETUP_SHOWN", "WIFI_IDLE_MS", "SEARCH_GLOBAL_SEARCH_ACTIVITY", "SEARCH_NUM_PROMOTED_SOURCES", "SEARCH_MAX_RESULTS_TO_DISPLAY", "SEARCH_MAX_RESULTS_PER_SOURCE", "SEARCH_WEB_RESULTS_OVERRIDE_LIMIT", "SEARCH_PROMOTED_SOURCE_DEADLINE_MILLIS", "SEARCH_SOURCE_TIMEOUT_MILLIS", "SEARCH_PREFILL_MILLIS", "SEARCH_MAX_STAT_AGE_MILLIS", "SEARCH_MAX_SOURCE_EVENT_AGE_MILLIS", "SEARCH_MIN_IMPRESSIONS_FOR_SOURCE_RANKING", "SEARCH_MIN_CLICKS_FOR_SOURCE_RANKING", "SEARCH_MAX_SHORTCUTS_RETURNED", "SEARCH_QUERY_THREAD_CORE_POOL_SIZE", "SEARCH_QUERY_THREAD_MAX_POOL_SIZE", "SEARCH_SHORTCUT_REFRESH_CORE_POOL_SIZE", "SEARCH_SHORTCUT_REFRESH_MAX_POOL_SIZE", "SEARCH_THREAD_KEEPALIVE_SECONDS", "SEARCH_PER_SOURCE_CONCURRENT_QUERY_LIMIT", "MOUNT_PLAY_NOTIFICATION_SND", "MOUNT_UMS_AUTOSTART", "MOUNT_UMS_PROMPT", "MOUNT_UMS_NOTIFY_ENABLED", "ANR_SHOW_BACKGROUND", "SHOW_FIRST_CRASH_DIALOG_DEV_OPTION", "VOICE_RECOGNITION_SERVICE", "SELECTED_SPELL_CHECKER", "SELECTED_SPELL_CHECKER_SUBTYPE", "SPELL_CHECKER_ENABLED", "INCALL_POWER_BUTTON_BEHAVIOR", "MINIMAL_POST_PROCESSING_ALLOWED", "INCALL_POWER_BUTTON_BEHAVIOR_SCREEN_OFF", "INCALL_POWER_BUTTON_BEHAVIOR_HANGUP", "INCALL_POWER_BUTTON_BEHAVIOR_DEFAULT", "INCALL_BACK_BUTTON_BEHAVIOR", "INCALL_BACK_BUTTON_BEHAVIOR_NONE", "INCALL_BACK_BUTTON_BEHAVIOR_HANGUP", "INCALL_BACK_BUTTON_BEHAVIOR_DEFAULT", "WAKE_GESTURE_ENABLED", "DOZE_ENABLED", "DOZE_ALWAYS_ON", "DOZE_PICK_UP_GESTURE", "DOZE_PULSE_ON_LONG_PRESS", "DOZE_DOUBLE_TAP_GESTURE", "DOZE_TAP_SCREEN_GESTURE", "DOZE_WAKE_LOCK_SCREEN_GESTURE", "DOZE_WAKE_DISPLAY_GESTURE", "SUPPRESS_DOZE", "SKIP_GESTURE", "SKIP_GESTURE_COUNT", "SKIP_TOUCH_COUNT", "SKIP_DIRECTION", "SILENCE_GESTURE", "SILENCE_ALARMS_GESTURE_COUNT", "SILENCE_TIMER_GESTURE_COUNT", "SILENCE_CALL_GESTURE_COUNT", "SILENCE_ALARMS_TOUCH_COUNT", "SILENCE_TIMER_TOUCH_COUNT", "SILENCE_CALL_TOUCH_COUNT", "AWARE_TAP_PAUSE_GESTURE_COUNT", "AWARE_TAP_PAUSE_TOUCH_COUNT", "UI_NIGHT_MODE", "UI_NIGHT_MODE_OVERRIDE_ON", "UI_NIGHT_MODE_OVERRIDE_OFF", "SCREENSAVER_ENABLED", "SCREENSAVER_COMPONENTS", "SCREENSAVER_ACTIVATE_ON_DOCK", "SCREENSAVER_ACTIVATE_ON_SLEEP", "SCREENSAVER_DEFAULT_COMPONENT", "NFC_PAYMENT_DEFAULT_COMPONENT", "NFC_PAYMENT_FOREGROUND", "SMS_DEFAULT_APPLICATION", "DIALER_DEFAULT_APPLICATION", "CALL_SCREENING_DEFAULT_COMPONENT", "EMERGENCY_ASSISTANCE_APPLICATION", "ASSIST_STRUCTURE_ENABLED", "ASSIST_SCREENSHOT_ENABLED", "ASSIST_DISCLOSURE_ENABLED", "SHOW_ROTATION_SUGGESTIONS", "SHOW_ROTATION_SUGGESTIONS_DISABLED", "SHOW_ROTATION_SUGGESTIONS_ENABLED", "SHOW_ROTATION_SUGGESTIONS_DEFAULT", "NUM_ROTATION_SUGGESTIONS_ACCEPTED", "ENABLED_NOTIFICATION_ASSISTANT", "ENABLED_NOTIFICATION_LISTENERS", "ENABLED_NOTIFICATION_POLICY_ACCESS_PACKAGES", "SYNC_PARENT_SOUNDS", "IMMERSIVE_MODE_CONFIRMATIONS", "PRINT_SERVICE_SEARCH_URI", "PAYMENT_SERVICE_SEARCH_URI", "AUTOFILL_SERVICE_SEARCH_URI", "SKIP_FIRST_USE_HINTS", "UNSAFE_VOLUME_MUSIC_ACTIVE_MS", "LOCK_SCREEN_SHOW_NOTIFICATIONS", "LOCK_SCREEN_SHOW_SILENT_NOTIFICATIONS", "SHOW_NOTIFICATION_SNOOZE", "TV_INPUT_HIDDEN_INPUTS", "TV_INPUT_CUSTOM_LABELS", "TV_APP_USES_NON_SYSTEM_INPUTS", "USB_AUDIO_AUTOMATIC_ROUTING_DISABLED", "SLEEP_TIMEOUT", "ATTENTIVE_TIMEOUT", "DOUBLE_TAP_TO_WAKE", "ASSISTANT", "CAMERA_GESTURE_DISABLED", "CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED", "CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED", "CAMERA_LIFT_TRIGGER_ENABLED", "CAMERA_LIFT_TRIGGER_ENABLED_DEFAULT", "FLASHLIGHT_AVAILABLE", "FLASHLIGHT_ENABLED", "FACE_UNLOCK_KEYGUARD_ENABLED", "FACE_UNLOCK_DISMISSES_KEYGUARD", "SHOW_MEDIA_WHEN_BYPASSING", "FACE_UNLOCK_ATTENTION_REQUIRED", "FACE_UNLOCK_DIVERSITY_REQUIRED", "FACE_UNLOCK_APP_ENABLED", "FACE_UNLOCK_ALWAYS_REQUIRE_CONFIRMATION", "FACE_UNLOCK_RE_ENROLL", "BIOMETRIC_DEBUG_ENABLED", "ASSIST_GESTURE_ENABLED", "ASSIST_GESTURE_SENSITIVITY", "ASSIST_GESTURE_SILENCE_ALERTS_ENABLED", "ASSIST_GESTURE_WAKE_ENABLED", "ASSIST_GESTURE_SETUP_COMPLETE", "TRUST_AGENTS_EXTEND_UNLOCK", "LOCK_SCREEN_WHEN_TRUST_LOST", "NIGHT_DISPLAY_ACTIVATED", "NIGHT_DISPLAY_AUTO_MODE", "NIGHT_DISPLAY_COLOR_TEMPERATURE", "NIGHT_DISPLAY_CUSTOM_START_TIME", "NIGHT_DISPLAY_CUSTOM_END_TIME", "NIGHT_DISPLAY_LAST_ACTIVATED_TIME", "DISPLAY_WHITE_BALANCE_ENABLED", "ENABLED_VR_LISTENERS", "VR_DISPLAY_MODE", "VR_DISPLAY_MODE_LOW_PERSISTENCE", "VR_DISPLAY_MODE_OFF", "CARRIER_APPS_HANDLED", "MANAGED_PROFILE_CONTACT_REMOTE_SEARCH", "CROSS_PROFILE_CALENDAR_ENABLED", "AUTOMATIC_STORAGE_MANAGER_ENABLED", "AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN", "AUTOMATIC_STORAGE_MANAGER_DAYS_TO_RETAIN_DEFAULT", "AUTOMATIC_STORAGE_MANAGER_BYTES_CLEARED", "AUTOMATIC_STORAGE_MANAGER_LAST_RUN", "AUTOMATIC_STORAGE_MANAGER_TURNED_OFF_BY_POLICY", "SYSTEM_NAVIGATION_KEYS_ENABLED", "QS_TILES", "CONTROLS_ENABLED", "POWER_MENU_LOCKED_SHOW_CONTENT", "INSTANT_APPS_ENABLED", "DEVICE_PAIRED", "CMAS_ADDITIONAL_BROADCAST_PKG", "NOTIFICATION_BADGING", "NOTIFICATION_HISTORY_ENABLED", "BUBBLE_IMPORTANT_CONVERSATIONS", "NOTIFICATION_DISMISS_RTL", "QS_AUTO_ADDED_TILES", "LOCKDOWN_IN_POWER_MENU", "BACKUP_MANAGER_CONSTANTS", "BACKUP_LOCAL_TRANSPORT_PARAMETERS", "BLUETOOTH_ON_WHILE_DRIVING", "VOLUME_HUSH_GESTURE", "VOLUME_HUSH_OFF", "VOLUME_HUSH_VIBRATE", "VOLUME_HUSH_MUTE", "LOW_POWER_MANUAL_ACTIVATION_COUNT", "LOW_POWER_WARNING_ACKNOWLEDGED", "SUPPRESS_AUTO_BATTERY_SAVER_SUGGESTION", "PACKAGES_TO_CLEAR_DATA_BEFORE_FULL_RESTORE", "NOTIFICATION_NEW_INTERRUPTION_MODEL", "LOCATION_ACCESS_CHECK_INTERVAL_MILLIS", "LOCATION_ACCESS_CHECK_DELAY_MILLIS", "LOCATION_PERMISSIONS_UPGRADE_TO_Q_MODE", "AUTO_REVOKE_DISABLED", "THEME_CUSTOMIZATION_OVERLAY_PACKAGES", "NAVIGATION_MODE", "BACK_GESTURE_INSET_SCALE_LEFT", "BACK_GESTURE_INSET_SCALE_RIGHT", "NEARBY_SHARING_COMPONENT", "AWARE_ENABLED", "AWARE_LOCK_ENABLED", "TAP_GESTURE", "PEOPLE_STRIP", "MEDIA_CONTROLS_RESUME", "WINDOW_MAGNIFICATION", "ACCESSIBILITY_MAGNIFICATION_MODE", "ACCESSIBILITY_MAGNIFICATION_MODE_FULLSCREEN", "ACCESSIBILITY_MAGNIFICATION_MODE_WINDOW", "LEGACY_RESTORE_SETTINGS", "CLONE_TO_MANAGED_PROFILE", "INSTANT_APP_SETTINGS" ],
  "methodNames" : [ "public static void getMovedToGlobalSettings(Set<String> outKeySet)", "public static void clearProviderForTest()", "public static String getString(ContentResolver resolver, String name)", "public static String getStringForUser(ContentResolver resolver, String name, int userHandle)", "public static boolean putString(ContentResolver resolver, String name, String value, boolean overrideableByRestore)", "public static boolean putString(ContentResolver resolver, String name, String value)", "public static boolean putStringForUser(ContentResolver resolver, String name, String value, int userHandle)", "public static boolean putStringForUser(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, @Nullable String tag, boolean makeDefault, @UserIdInt int userHandle, boolean overrideableByRestore)", "public static boolean putString(@NonNull ContentResolver resolver, @NonNull String name, @Nullable String value, @Nullable String tag, boolean makeDefault)", "public static void resetToDefaults(@NonNull ContentResolver resolver, @Nullable String tag)", "public static void resetToDefaultsAsUser(@NonNull ContentResolver resolver, @Nullable String tag, @ResetMode int mode, @IntRange(from = 0) int userHandle)", "public static Uri getUriFor(String name)", "public static int getInt(ContentResolver cr, String name, int def)", "public static int getIntForUser(ContentResolver cr, String name, int def, int userHandle)", "public static int getInt(ContentResolver cr, String name) throws SettingNotFoundException", "public static int getIntForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putInt(ContentResolver cr, String name, int value)", "public static boolean putIntForUser(ContentResolver cr, String name, int value, int userHandle)", "public static long getLong(ContentResolver cr, String name, long def)", "public static long getLongForUser(ContentResolver cr, String name, long def, int userHandle)", "public static long getLong(ContentResolver cr, String name) throws SettingNotFoundException", "public static long getLongForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putLong(ContentResolver cr, String name, long value)", "public static boolean putLongForUser(ContentResolver cr, String name, long value, int userHandle)", "public static float getFloat(ContentResolver cr, String name, float def)", "public static float getFloatForUser(ContentResolver cr, String name, float def, int userHandle)", "public static float getFloat(ContentResolver cr, String name) throws SettingNotFoundException", "public static float getFloatForUser(ContentResolver cr, String name, int userHandle) throws SettingNotFoundException", "public static boolean putFloat(ContentResolver cr, String name, float value)", "public static boolean putFloatForUser(ContentResolver cr, String name, float value, int userHandle)", "public static void getCloneToManagedProfileSettings(Set<String> outKeySet)", "public static boolean isLocationProviderEnabled(ContentResolver cr, String provider)", "public static void setLocationProviderEnabled(ContentResolver cr, String provider, boolean enabled)" ]
}