{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/SensorAdditionalInfo.java",
  "packageName" : "android.hardware",
  "className" : "SensorAdditionalInfo",
  "comment" : "",
  "variables" : [ {
    "name" : "sensor",
    "type" : "Sensor",
    "comment" : "\n     * The sensor that generated this event. See\n     * {@link android.hardware.SensorManager SensorManager} for details.\n     ",
    "links" : [ "android.hardware.SensorManager" ]
  }, {
    "name" : "type",
    "type" : "int",
    "comment" : "\n     * Type of this additional info frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "serial",
    "type" : "int",
    "comment" : "\n     * Sequence number of frame for a certain type.\n     ",
    "links" : [ ]
  }, {
    "name" : "floatValues",
    "type" : "float[]",
    "comment" : "\n     * Additional info payload data represented in float values. Depending on the type of\n     * information, this may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "intValues",
    "type" : "int[]",
    "comment" : "\n     * Additional info payload data represented in int values. Depending on the type of information,\n     * this may be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FRAME_BEGIN",
    "type" : "int",
    "comment" : "\n     * Mark the beginning of a set of additional info frames.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_FRAME_END",
    "type" : "int",
    "comment" : "\n     * Mark the end of a set of additional info frames.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNTRACKED_DELAY",
    "type" : "int",
    "comment" : "\n     * Untracked delay. Delays that are introduced by data processing, such as filtering, which is\n     * not taken into account by sensor timestamps.\n     *\n     * Payload:\n     *     floatValues[0]: delay estimation in seconds\n     *     floatValues[1]: delay estimation standard deviation\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INTERNAL_TEMPERATURE",
    "type" : "int",
    "comment" : "\n     * Internal temperature. Sensor hardware device internal temperature.\n     *\n     * Payload:\n     *     floatValues[0]: internal temperature in Celsius.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VEC3_CALIBRATION",
    "type" : "int",
    "comment" : "\n     * Vector calibration parameter. Calibration applied to a sensor with 3 elements vector output,\n     * such as accelerometer, gyro, etc.\n     *\n     * Payload:\n     *     floatValues[0..11]: First 3 rows of a homogeneous matrix in row major order that captures\n     *     any linear transformation, including rotation, scaling, shear, shift.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SENSOR_PLACEMENT",
    "type" : "int",
    "comment" : "\n     * Sensor placement.\n     *\n     * Provides the orientation and location of the sensor element in terms of the\n     * Android coordinate system. This data is given as a 3x4 matrix consisting of a 3x3 rotation\n     * matrix (R) concatenated with a 3x1 location vector (t). The rotation matrix provides the\n     * orientation of the Android device coordinate frame relative to the local coordinate frame of\n     * the sensor. Note that assuming the axes conventions of the sensor are the same as Android,\n     * this is the inverse of the matrix applied to raw samples read from the sensor to convert them\n     * into the Android representation. The location vector represents the translation from the\n     * origin of the Android sensor coordinate system to the geometric center of the sensor,\n     * specified in millimeters (mm).\n     * <p>\n     * <b>Payload</b>:\n     *     <code>floatValues[0..11]</code>: 3x4 matrix in row major order [R; t]\n     * </p>\n     * <p>\n     * <b>Example</b>:\n     *     This raw buffer: <code>{0, 1, 0, 0, -1, 0, 0, 10, 0, 0, 1, -2.5}</code><br>\n     *     Corresponds to this 3x4 matrix:\n     *     <table>\n     *      <thead>\n     *       <tr><td colspan=\"3\">Orientation</td><td>Location</tr>\n     *      </thead>\n     *      <tbody>\n     *       <tr><td>0</td><td>1</td><td>0</td><td>0</td></tr>\n     *       <tr><td>-1</td><td>0</td><td>0</td><td>10</td></tr>\n     *       <tr><td>0</td><td>0</td><td>1</td><td>-2.5</td></tr>\n     *      </tbody>\n     *     </table>\n     *     The sensor is oriented such that:\n     *     <ul>\n     *        <li>The device X axis corresponds to the sensor's local -Y axis\n     *        <li>The device Y axis corresponds to the sensor's local X axis\n     *        <li>The device Z axis and sensor's local Z axis are equivalent\n     *     </ul>\n     *     In other words, if viewing the origin of the Android coordinate system from the positive\n     *     Z direction, the device coordinate frame is to be rotated 90° counter-clockwise about the\n     *     Z axis to align with the sensor's local coordinate frame. Equivalently, a vector in the\n     *     Android coordinate frame may be multiplied with R to rotate it 90° clockwise (270°\n     *     counter-clockwise), yielding its representation in the sensor's coordinate frame.\n     *     Relative to the origin of the Android coordinate system, the physical center of the\n     *     sensor is located 10mm in the positive Y direction, and 2.5mm in the negative Z\n     *     direction.\n     * </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SAMPLING",
    "type" : "int",
    "comment" : "\n     * Sampling parameter. Describes the raw sample period and estimated jitter of sample time in\n     * terms of standard deviation.\n     *\n     * Payload:\n     *     floatValues[0]: raw sample period in seconds.\n     *     floatValues[1]: standard deviation of sampling period.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LOCAL_GEOMAGNETIC_FIELD",
    "type" : "int",
    "comment" : "\n     * Local geo-magnetic Field.\n     *\n     * Additional into to sensor hardware.  Local geomagnetic field information based on\n     * device geo location. This type is primarily for for magnetic field calibration and rotation\n     * vector sensor fusion.\n     *\n     * float[3]: strength (uT), declination and inclination angle (rad).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LOCAL_GRAVITY",
    "type" : "int",
    "comment" : "\n     * Local gravity acceleration strength.\n     *\n     * Additional info to sensor hardware for accelerometer calibration.\n     *\n     * float: gravitational acceleration norm in m/s^2.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DOCK_STATE",
    "type" : "int",
    "comment" : "\n     * Device dock state.\n     *\n     * Additional info to sensor hardware indicating dock states of device.\n     *\n     * int32_t: dock state following definition of {@link android.content.Intent#EXTRA_DOCK_STATE}.\n     *          Undefined values are ignored.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#EXTRA_DOCK_STATE" ]
  }, {
    "name" : "TYPE_HIGH_PERFORMANCE_MODE",
    "type" : "int",
    "comment" : "\n     * High performance mode.\n     *\n     * Additional info to sensor hardware. Device is able to use up more power and take more\n     * resources to improve throughput and latency in high performance mode. One possible use case\n     * is virtual reality, when sensor latency need to be carefully controlled.\n     *\n     * int32_t: 1 or 0, denoting device is in or out of high performance mode, respectively.\n     *          Other values are ignored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MAGNETIC_FIELD_CALIBRATION",
    "type" : "int",
    "comment" : "\n     * Magnetic field calibration hint.\n     *\n     * Additional info to sensor hardware. Device is notified when manually triggered magnetic field\n     * calibration procedure is started or stopped. The calibration procedure is assumed timed out\n     * after 1 minute from start, even if an explicit stop is not received.\n     *\n     * int32_t: 1 for calibration start, 0 for stop, other values are ignored.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_CUSTOM_INFO",
    "type" : "int",
    "comment" : "\n     * Custom sensor info: array of float values interpreted by sensor based on the type\n     * Any type between TYPE_CUSTOM_INFO <= info_type < TYPE_DEBUG_INFO may be\n     * used to send custom sensor info.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_DEBUG_INFO",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SensorAdditionalInfo createLocalGeomagneticField(float strength, float declination, float inclination)",
    "returnType" : "SensorAdditionalInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static SensorAdditionalInfo createCustomInfo(Sensor aSensor, int type, float[] data)",
    "returnType" : "SensorAdditionalInfo",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sensor", "type", "serial", "floatValues", "intValues", "TYPE_FRAME_BEGIN", "TYPE_FRAME_END", "TYPE_UNTRACKED_DELAY", "TYPE_INTERNAL_TEMPERATURE", "TYPE_VEC3_CALIBRATION", "TYPE_SENSOR_PLACEMENT", "TYPE_SAMPLING", "TYPE_LOCAL_GEOMAGNETIC_FIELD", "TYPE_LOCAL_GRAVITY", "TYPE_DOCK_STATE", "TYPE_HIGH_PERFORMANCE_MODE", "TYPE_MAGNETIC_FIELD_CALIBRATION", "TYPE_CUSTOM_INFO", "TYPE_DEBUG_INFO" ],
  "methodNames" : [ "public static SensorAdditionalInfo createLocalGeomagneticField(float strength, float declination, float inclination)", "public static SensorAdditionalInfo createCustomInfo(Sensor aSensor, int type, float[] data)" ]
}