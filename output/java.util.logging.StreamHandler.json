{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/StreamHandler.java",
  "packageName" : "java.util.logging",
  "className" : "StreamHandler",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "output",
    "type" : "OutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "doneHeader",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "writer",
    "type" : "Writer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void configure()",
    "returnType" : "void",
    "comment" : " javadoc.",
    "links" : [ ]
  }, {
    "name" : "protected synchronized void setOutputStream(OutputStream out) throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Change the output stream.\n     * <P>\n     * If there is a current output stream then the <tt>Formatter</tt>'s\n     * tail string is written and the stream is flushed and closed.\n     * Then the output stream is replaced with the new output stream.\n     *\n     * @param out   New output stream.  May not be null.\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setEncoding(String encoding) throws SecurityException, java.io.UnsupportedEncodingException",
    "returnType" : "void",
    "comment" : "\n     * Set (or change) the character encoding used by this <tt>Handler</tt>.\n     * <p>\n     * The encoding should be set before any <tt>LogRecords</tt> are written\n     * to the <tt>Handler</tt>.\n     *\n     * @param encoding  The name of a supported character encoding.\n     *        May be null, to indicate the default platform encoding.\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have <tt>LoggingPermission(\"control\")</tt>.\n     * @exception  UnsupportedEncodingException if the named encoding is\n     *          not supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void publish(LogRecord record)",
    "returnType" : "void",
    "comment" : "\n     * Format and publish a <tt>LogRecord</tt>.\n     * <p>\n     * The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>\n     * and if the given <tt>LogRecord</tt> has at least the required log level.\n     * If not it silently returns.  If so, it calls any associated\n     * <tt>Filter</tt> to check if the record should be published.  If so,\n     * it calls its <tt>Formatter</tt> to format the record and then writes\n     * the result to the current output stream.\n     * <p>\n     * If this is the first <tt>LogRecord</tt> to be written to a given\n     * <tt>OutputStream</tt>, the <tt>Formatter</tt>'s \"head\" string is\n     * written to the stream before the <tt>LogRecord</tt> is written.\n     *\n     * @param  record  description of the log event. A null record is\n     *                 silently ignored and is not published\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLoggable(LogRecord record)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this <tt>Handler</tt> would actually log a given <tt>LogRecord</tt>.\n     * <p>\n     * This method checks if the <tt>LogRecord</tt> has an appropriate level and\n     * whether it satisfies any <tt>Filter</tt>.  It will also return false if\n     * no output stream has been assigned yet or the LogRecord is null.\n     * <p>\n     * @param record  a <tt>LogRecord</tt>\n     * @return true if the <tt>LogRecord</tt> would be logged.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flush any buffered messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void flushAndClose() throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void close() throws SecurityException",
    "returnType" : "void",
    "comment" : "\n     * Close the current output stream.\n     * <p>\n     * The <tt>Formatter</tt>'s \"tail\" string is written to the stream before it\n     * is closed.  In addition, if the <tt>Formatter</tt>'s \"head\" string has not\n     * yet been written to the stream, it will be written before the\n     * \"tail\" string.\n     *\n     * @exception  SecurityException  if a security manager exists and if\n     *             the caller does not have LoggingPermission(\"control\").\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void configure()", "protected synchronized void setOutputStream(OutputStream out) throws SecurityException", "public synchronized void setEncoding(String encoding) throws SecurityException, java.io.UnsupportedEncodingException", "public synchronized void publish(LogRecord record)", "public boolean isLoggable(LogRecord record)", "public synchronized void flush()", "private synchronized void flushAndClose() throws SecurityException", "public synchronized void close() throws SecurityException" ],
  "variableNames" : [ "output", "doneHeader", "writer" ]
}