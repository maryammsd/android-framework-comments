{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ContentProvider.java",
  "packageName" : "android.content",
  "className" : "Transport",
  "comment" : "\n     * Binder object that deals with remoting.\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "mAppOpsManager",
    "type" : "AppOpsManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReadOp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWriteOp",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInterface",
    "type" : "ContentInterface",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " ContentProvider getContentProvider()",
    "returnType" : "ContentProvider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getProviderName()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(String callingPkg, @Nullable String attributionTag, Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getType(Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTypeAsync(Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues initialValues, Bundle extras)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int bulkInsert(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues[] initialValues)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ContentProviderResult[] applyBatch(String callingPkg, @Nullable String attributionTag, String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int delete(String callingPkg, @Nullable String attributionTag, Uri uri, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int update(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues values, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, ICancellationSignal cancellationSignal, IBinder callerToken) throws FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(String callingPkg, @Nullable String attributionTag, String authority, String method, @Nullable String arg, @Nullable Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getStreamTypes(Uri uri, String mimeTypeFilter)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mimeType, Bundle opts, ICancellationSignal cancellationSignal) throws FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICancellationSignal createCancellationSignal()",
    "returnType" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri canonicalize(String callingPkg, @Nullable String attributionTag, Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void canonicalizeAsync(String callingPkg, @Nullable String attributionTag, Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri uncanonicalize(String callingPkg, String attributionTag, Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(String callingPkg, String attributionTag, Uri uri, Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(String callingPkg, @Nullable String attributionTag, Uri uri, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void enforceFilePermission(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, IBinder callerToken) throws FileNotFoundException, SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int enforceReadPermission(String callingPkg, @Nullable String attributionTag, Uri uri, IBinder callerToken) throws SecurityException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int enforceWritePermission(String callingPkg, String attributionTag, Uri uri, IBinder callerToken) throws SecurityException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int noteProxyOp(String callingPkg, String attributionTag, int op)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAppOpsManager", "mReadOp", "mWriteOp", "mInterface" ],
  "methodNames" : [ " ContentProvider getContentProvider()", "public String getProviderName()", "public Cursor query(String callingPkg, @Nullable String attributionTag, Uri uri, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal)", "public String getType(Uri uri)", "public void getTypeAsync(Uri uri, RemoteCallback callback)", "public Uri insert(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues initialValues, Bundle extras)", "public int bulkInsert(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues[] initialValues)", "public ContentProviderResult[] applyBatch(String callingPkg, @Nullable String attributionTag, String authority, ArrayList<ContentProviderOperation> operations) throws OperationApplicationException", "public int delete(String callingPkg, @Nullable String attributionTag, Uri uri, Bundle extras)", "public int update(String callingPkg, @Nullable String attributionTag, Uri uri, ContentValues values, Bundle extras)", "public ParcelFileDescriptor openFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, ICancellationSignal cancellationSignal, IBinder callerToken) throws FileNotFoundException", "public AssetFileDescriptor openAssetFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, ICancellationSignal cancellationSignal) throws FileNotFoundException", "public Bundle call(String callingPkg, @Nullable String attributionTag, String authority, String method, @Nullable String arg, @Nullable Bundle extras)", "public String[] getStreamTypes(Uri uri, String mimeTypeFilter)", "public AssetFileDescriptor openTypedAssetFile(String callingPkg, @Nullable String attributionTag, Uri uri, String mimeType, Bundle opts, ICancellationSignal cancellationSignal) throws FileNotFoundException", "public ICancellationSignal createCancellationSignal()", "public Uri canonicalize(String callingPkg, @Nullable String attributionTag, Uri uri)", "public void canonicalizeAsync(String callingPkg, @Nullable String attributionTag, Uri uri, RemoteCallback callback)", "public Uri uncanonicalize(String callingPkg, String attributionTag, Uri uri)", "public boolean refresh(String callingPkg, String attributionTag, Uri uri, Bundle extras, ICancellationSignal cancellationSignal) throws RemoteException", "public int checkUriPermission(String callingPkg, @Nullable String attributionTag, Uri uri, int uid, int modeFlags)", "private void enforceFilePermission(String callingPkg, @Nullable String attributionTag, Uri uri, String mode, IBinder callerToken) throws FileNotFoundException, SecurityException", "private int enforceReadPermission(String callingPkg, @Nullable String attributionTag, Uri uri, IBinder callerToken) throws SecurityException", "private int enforceWritePermission(String callingPkg, String attributionTag, Uri uri, IBinder callerToken) throws SecurityException", "private int noteProxyOp(String callingPkg, String attributionTag, int op)" ]
}