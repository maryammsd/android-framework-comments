{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/SurfaceSyncGroup.java",
  "packageName" : "android.window",
  "className" : "SurfaceSyncGroup",
  "comment" : "\n * A way for data to be gathered so multiple surfaces can be synced. This is intended to be\n * used with AttachedSurfaceControl, SurfaceView, and SurfaceControlViewHost. This allows different\n * parts of the system to synchronize different surfaces themselves without having to manage timing\n * of different rendering threads.\n * This will also allow synchronization of surfaces across multiple processes. The caller can add\n * SurfaceControlViewHosts from another process to the SurfaceSyncGroup in a different process\n * and this clas will ensure all the surfaces are ready before applying everything together.\n * see the <a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/window/SurfaceSyncGroup.md\">SurfaceSyncGroup documentation</a>\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCounter",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSACTION_READY_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "sTransactionFactory",
    "type" : "Supplier<Transaction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "\n     * Class that collects the {@link SurfaceSyncGroup}s and notifies when all the surfaces have\n     * a frame ready.\n     ",
    "links" : [ "android.window.SurfaceSyncGroup" ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingSyncs",
    "type" : "ArraySet<ITransactionReadyCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransaction",
    "type" : "Transaction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSyncReady",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinished",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransactionReadyConsumer",
    "type" : "Consumer<Transaction>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentSyncGroup",
    "type" : "ISurfaceSyncGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSyncCompleteCallbacks",
    "type" : "ArraySet<Pair<Executor, Runnable>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasWMSync",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurfaceSyncGroupCompletedListener",
    "type" : "ISurfaceSyncGroupCompletedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mISurfaceSyncGroup",
    "type" : "ISurfaceSyncGroup",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAddedToSyncListener",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "\n     * Token to identify this SurfaceSyncGroup. This is used to register the SurfaceSyncGroup in\n     * WindowManager. This token is also sent to other processes' SurfaceSyncGroup that want to be\n     * included in this SurfaceSyncGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "sHandlerThreadLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeoutAdded",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeoutDisabled",
    "type" : "boolean",
    "comment" : "\n     * Disable the timeout for this SSG so it will never be set until there's an explicit call to\n     * add a timeout.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTrackName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static boolean isLocalBinder(IBinder binder)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static SurfaceSyncGroup getSurfaceSyncGroup(ISurfaceSyncGroup iSurfaceSyncGroup)",
    "returnType" : "SurfaceSyncGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setTransactionFactory(Supplier<Transaction> transactionFactory)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void invokeSyncCompleteCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addSyncCompleteCallback(Executor executor, Runnable runnable)",
    "returnType" : "void",
    "comment" : "\n     * Add a {@link Runnable} to be executed when the sync completes.\n     *\n     * @param executor The Executor to invoke the Runnable on\n     * @param runnable The Runnable to get called\n     * @hide\n     ",
    "links" : [ "Runnable" ]
  }, {
    "name" : "public void markSyncReady()",
    "returnType" : "void",
    "comment" : "\n     * Mark the SurfaceSyncGroup as ready to complete. No more data can be added to this\n     * SurfaceSyncGroup.\n     * <p>\n     * Once the SurfaceSyncGroup is marked as ready, it will be able to complete once all child\n     * SurfaceSyncGroup have completed their sync.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(SurfaceView surfaceView, Consumer<SurfaceViewFrameCallback> frameCallbackConsumer)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a SurfaceView to a SurfaceSyncGroup. This requires the caller to notify the start\n     * and finish drawing in order to sync since the client owns the rendering of the SurfaceView.\n     *\n     * @param surfaceView           The SurfaceView to add to the sync.\n     * @param frameCallbackConsumer The callback that's invoked to allow the caller to notify\n     *                              SurfaceSyncGroup when the SurfaceView has started drawing.\n     * @return true if the SurfaceView was successfully added to the SyncGroup, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(@Nullable AttachedSurfaceControl attachedSurfaceControl, @Nullable Runnable runnable)",
    "returnType" : "boolean",
    "comment" : "\n     * Add an AttachedSurfaceControl to the SurfaceSyncGroup. The AttachedSurfaceControl will pause\n     * rendering to ensure the runnable can be invoked and that the sync picks up the frame that\n     * contains the changes.\n     *\n     * @param attachedSurfaceControl The AttachedSurfaceControl that will be add to this\n     *                               SurfaceSyncGroup.\n     * @param runnable               This is run on the same thread that the call was made on, but\n     *                               after the rendering is paused and before continuing to render\n     *                               the next frame. This method will not return until the\n     *                               execution of the runnable completes. This can be used to make\n     *                               changes to the AttachedSurfaceControl, ensuring that the\n     *                               changes are included in the sync.\n     * @return true if the AttachedSurfaceControl was successfully added to the SurfaceSyncGroup,\n     * false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(@NonNull SurfaceControlViewHost.SurfacePackage surfacePackage, @Nullable Runnable runnable)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a SurfaceControlViewHost.SurfacePackage to the SurfaceSyncGroup. This will\n     * get the SurfaceSyncGroup from the SurfacePackage, which will pause rendering for the\n     * SurfaceControlViewHost. The runnable will be invoked to allow the host to update the SCVH\n     * in a synchronized way. Finally, it will add the SCVH to the SurfaceSyncGroup and unpause\n     * rendering in the SCVH, allowing the changes to get picked up and included in the sync.\n     *\n     * @param surfacePackage The SurfacePackage that will be added to this SurfaceSyncGroup.\n     * @param runnable       This is run on the same thread that the call was made on, but\n     *                       after the rendering is paused and before continuing to render\n     *                       the next frame. This method will not return until the\n     *                       execution of the runnable completes. This can be used to make\n     *                       changes to the SurfaceControlViewHost, ensuring that the\n     *                       changes are included in the sync.\n     * @return true if the SurfaceControlViewHost was successfully added to the current\n     * SurfaceSyncGroup, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(@NonNull SurfaceSyncGroup surfaceSyncGroup, @Nullable Runnable runnable)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a SurfaceSyncGroup to the current SurfaceSyncGroup.\n     *\n     * @param surfaceSyncGroup The SurfaceSyncGroup that will be added to this SurfaceSyncGroup.\n     * @param runnable         This is run on the same thread that the call was made on, This\n     *                         method will not return until the execution of the runnable\n     *                         completes. This can be used to make changes to the SurfaceSyncGroup,\n     *                         ensuring that the changes are included in the sync.\n     * @return true if the requested SurfaceSyncGroup was successfully added to the\n     * SurfaceSyncGroup, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(ISurfaceSyncGroup surfaceSyncGroup, boolean parentSyncGroupMerge, @Nullable Runnable runnable)",
    "returnType" : "boolean",
    "comment" : "\n     * Add a {@link ISurfaceSyncGroup} to a SurfaceSyncGroup.\n     *\n     * @param surfaceSyncGroup     An ISyncableSurface that will be added to this SurfaceSyncGroup.\n     * @param parentSyncGroupMerge true if the ISurfaceSyncGroup is added because its child was\n     *                             added to a new SurfaceSyncGroup. That would require the code to\n     *                             call newParent.addToSync(oldParent). When this occurs, we need to\n     *                             reverse the merge order because the oldParent should always be\n     *                             considered older than any other SurfaceSyncGroups.\n     * @param runnable             The Runnable that's invoked before adding the SurfaceSyncGroup\n     * @return true if the SyncGroup was successfully added to the current SyncGroup, false\n     * otherwise.\n     * @hide\n     ",
    "links" : [ "ISurfaceSyncGroup" ]
  }, {
    "name" : "public void addTransaction(@NonNull Transaction transaction)",
    "returnType" : "void",
    "comment" : "\n     * Add a Transaction to this SurfaceSyncGroup. This allows the caller to provide other info that\n     * should be synced with the other transactions in this SurfaceSyncGroup.\n     *\n     * @param transaction The transaction to add to the SurfaceSyncGroup.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAddedToSyncListener(Runnable addedToSyncListener)",
    "returnType" : "void",
    "comment" : "\n     * Add a Runnable to be invoked when the SurfaceSyncGroup has been added to another\n     * SurfaceSyncGroup. This is useful to know when it's safe to proceed rendering.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean addSyncToWm(IBinder token, boolean parentSyncGroupMerge, @Nullable ISurfaceSyncGroupCompletedListener surfaceSyncGroupCompletedListener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean addLocalSync(ISurfaceSyncGroup childSyncToken, boolean parentSyncGroupMerge)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setTransactionCallbackFromParent(ISurfaceSyncGroup parentSyncGroup, ITransactionReadyCallback transactionReadyCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkIfSyncIsComplete()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ITransactionReadyCallback createTransactionReadyCallback(boolean parentSyncGroupMerge)",
    "returnType" : "ITransactionReadyCallback",
    "comment" : "\n     * Create an {@link ITransactionReadyCallback} that the current SurfaceSyncGroup will wait on\n     * before completing. The caller must ensure that the\n     * {@link ITransactionReadyCallback#onTransactionReady(Transaction)} is called in order for this\n     * SurfaceSyncGroup to complete.\n     *\n     * @param parentSyncGroupMerge true if the ISurfaceSyncGroup is added because its child was\n     *                             added to a new SurfaceSyncGroup. That would require the code to\n     *                             call newParent.addToSync(oldParent). When this occurs, we need to\n     *                             reverse the merge order because the oldParent should always be\n     *                             considered older than any other SurfaceSyncGroups.\n     * @hide\n     ",
    "links" : [ "ITransactionReadyCallback", "#onTransactionReady(Transaction)" ]
  }, {
    "name" : "public void toggleTimeout(boolean enable)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addTimeout()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static boolean isLocalBinder(IBinder binder)", "private static SurfaceSyncGroup getSurfaceSyncGroup(ISurfaceSyncGroup iSurfaceSyncGroup)", "public static void setTransactionFactory(Supplier<Transaction> transactionFactory)", "private void invokeSyncCompleteCallbacks()", "public void addSyncCompleteCallback(Executor executor, Runnable runnable)", "public void markSyncReady()", "public boolean add(SurfaceView surfaceView, Consumer<SurfaceViewFrameCallback> frameCallbackConsumer)", "public boolean add(@Nullable AttachedSurfaceControl attachedSurfaceControl, @Nullable Runnable runnable)", "public boolean add(@NonNull SurfaceControlViewHost.SurfacePackage surfacePackage, @Nullable Runnable runnable)", "public boolean add(@NonNull SurfaceSyncGroup surfaceSyncGroup, @Nullable Runnable runnable)", "public boolean add(ISurfaceSyncGroup surfaceSyncGroup, boolean parentSyncGroupMerge, @Nullable Runnable runnable)", "public void addTransaction(@NonNull Transaction transaction)", "public void setAddedToSyncListener(Runnable addedToSyncListener)", "private boolean addSyncToWm(IBinder token, boolean parentSyncGroupMerge, @Nullable ISurfaceSyncGroupCompletedListener surfaceSyncGroupCompletedListener)", "private boolean addLocalSync(ISurfaceSyncGroup childSyncToken, boolean parentSyncGroupMerge)", "private void setTransactionCallbackFromParent(ISurfaceSyncGroup parentSyncGroup, ITransactionReadyCallback transactionReadyCallback)", "public String getName()", "private void checkIfSyncIsComplete()", "public ITransactionReadyCallback createTransactionReadyCallback(boolean parentSyncGroupMerge)", "public void toggleTimeout(boolean enable)", "private void addTimeout()" ],
  "variableNames" : [ "TAG", "DEBUG", "MAX_COUNT", "sCounter", "TRANSACTION_READY_TIMEOUT", "sTransactionFactory", "mLock", "mName", "mPendingSyncs", "mTransaction", "mSyncReady", "mFinished", "mTransactionReadyConsumer", "mParentSyncGroup", "mSyncCompleteCallbacks", "mHasWMSync", "mSurfaceSyncGroupCompletedListener", "mISurfaceSyncGroup", "mAddedToSyncListener", "mToken", "sHandlerThreadLock", "sHandlerThread", "mHandler", "mTimeoutAdded", "mTimeoutDisabled", "mTrackName" ]
}