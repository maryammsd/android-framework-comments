{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/MemoryFile.java",
  "packageName" : "android.os",
  "className" : "MemoryFile",
  "comment" : "\n * MemoryFile is a wrapper for {@link SharedMemory} which can optionally be set to purgeable.\n *\n * Applications should generally prefer to use {@link SharedMemory} which offers more flexible\n * access & control over the shared memory region than MemoryFile does.\n *\n * Purgeable files may have their contents reclaimed by the kernel\n * in low memory conditions (only if allowPurging is set to true).\n * After a file is purged, attempts to read or write the file will\n * cause an IOException to be thrown.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSharedMemory",
    "type" : "SharedMemory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMapping",
    "type" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowPurging",
    "type" : "boolean",
    "comment" : " true if our ashmem region is unpinned",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native boolean native_pin(FileDescriptor fd, boolean pin) throws IOException",
    "returnType" : "boolean",
    "comment" : " Returns 'true' if purged, 'false' otherwise",
    "links" : [ ]
  }, {
    "name" : "private static native int native_get_size(FileDescriptor fd) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes the memory file. If there are no other open references to the memory\n     * file, it will be deleted.\n     ",
    "links" : [ ]
  }, {
    "name" : " void deactivate()",
    "returnType" : "void",
    "comment" : "\n     * Unmaps the memory file from the process's memory space, but does not close it.\n     * After this method has been called, read and write operations through this object\n     * will fail, but {@link #getFileDescriptor()} will still return a valid file descriptor.\n     *\n     * @hide\n     ",
    "links" : [ "#getFileDescriptor" ]
  }, {
    "name" : "private void checkActive() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void beginAccess() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endAccess() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the length of the memory file.\n     *\n     * @return file length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPurgingAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * Is memory file purging enabled?\n     *\n     * @return true if the file may be purged.\n     *\n     * @deprecated Purgable is considered generally fragile and hard to use safely. Applications\n     * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}\n     * to react to memory events and release shared memory regions as appropriate.\n     ",
    "links" : [ "android.content.ComponentCallbacks2#onTrimMemory" ]
  }, {
    "name" : "public synchronized boolean allowPurging(boolean allowPurging) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * Enables or disables purging of the memory file.\n     *\n     * @param allowPurging true if the operating system can purge the contents\n     * of the file in low memory situations\n     * @return previous value of allowPurging\n     *\n     * @deprecated Purgable is considered generally fragile and hard to use safely. Applications\n     * are recommend to instead use {@link android.content.ComponentCallbacks2#onTrimMemory(int)}\n     * to react to memory events and release shared memory regions as appropriate.\n     ",
    "links" : [ "android.content.ComponentCallbacks2#onTrimMemory" ]
  }, {
    "name" : "public InputStream getInputStream()",
    "returnType" : "InputStream",
    "comment" : "\n     * Creates a new InputStream for reading from the memory file.\n     *\n     @return InputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public OutputStream getOutputStream()",
    "returnType" : "OutputStream",
    "comment" : "\n     * Creates a new OutputStream for writing to the memory file.\n     *\n     @return OutputStream\n     ",
    "links" : [ ]
  }, {
    "name" : "public int readBytes(byte[] buffer, int srcOffset, int destOffset, int count) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads bytes from the memory file.\n     * Will throw an IOException if the file has been purged.\n     *\n     * @param buffer byte array to read bytes into.\n     * @param srcOffset offset into the memory file to read from.\n     * @param destOffset offset into the byte array buffer to read into.\n     * @param count number of bytes to read.\n     * @return number of bytes read.\n     * @throws IOException if the memory file has been purged or deactivated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeBytes(byte[] buffer, int srcOffset, int destOffset, int count) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write bytes to the memory file.\n     * Will throw an IOException if the file has been purged.\n     *\n     * @param buffer byte array to write bytes from.\n     * @param srcOffset offset into the byte array buffer to write from.\n     * @param destOffset offset  into the memory file to write to.\n     * @param count number of bytes to write.\n     * @throws IOException if the memory file has been purged or deactivated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FileDescriptor getFileDescriptor() throws IOException",
    "returnType" : "FileDescriptor",
    "comment" : "\n     * Gets a FileDescriptor for the memory file.\n     *\n     * The returned file descriptor is not duplicated.\n     *\n     * @throws IOException If the memory file has been closed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getSize(FileDescriptor fd) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the memory file that the file descriptor refers to,\n     * or -1 if the file descriptor does not refer to a memory file.\n     *\n     * @throws IOException If <code>fd</code> is not a valid file descriptor.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mSharedMemory", "mMapping", "mAllowPurging" ],
  "methodNames" : [ "private static native boolean native_pin(FileDescriptor fd, boolean pin) throws IOException", "private static native int native_get_size(FileDescriptor fd) throws IOException", "public void close()", " void deactivate()", "private void checkActive() throws IOException", "private void beginAccess() throws IOException", "private void endAccess() throws IOException", "public int length()", "public boolean isPurgingAllowed()", "public synchronized boolean allowPurging(boolean allowPurging) throws IOException", "public InputStream getInputStream()", "public OutputStream getOutputStream()", "public int readBytes(byte[] buffer, int srcOffset, int destOffset, int count) throws IOException", "public void writeBytes(byte[] buffer, int srcOffset, int destOffset, int count) throws IOException", "public FileDescriptor getFileDescriptor() throws IOException", "public static int getSize(FileDescriptor fd) throws IOException" ]
}