{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MFParser.java",
  "packageName" : "android.icu.message2",
  "className" : "MFParser",
  "comment" : "\n * This class parses a {@code MessageFormat 2} syntax into a data model {@link MFDataModel.Message}.\n *\n * <p>It is used by {@link MessageFormatter}, but it might be handy for various tools.</p>\n *\n * @deprecated This API is for technology preview only.\n * @hide Only a subset of ICU is exposed in Android\n * @hide draft / provisional / internal are hidden on Android\n ",
  "links" : [ "MFDataModel.Message", "android.icu.message2.MessageFormatter" ],
  "variables" : [ {
    "name" : "EOF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "input",
    "type" : "InputSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RE_NUMBER_LITERAL",
    "type" : "Pattern",
    "comment" : " abnf: number-literal = [\"-\"] (%x30 / (%x31-39 *DIGIT)) [\".\" 1*DIGIT] [%i\"e\" [\"-\" / \"+\"] 1*DIGIT]",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MFDataModel.Message parse(String input) throws MFParseException",
    "returnType" : "MFDataModel.Message",
    "comment" : "\n     * Parses a {@code MessageFormat 2} syntax into a {@link MFDataModel.Message}.\n     *\n     * <p>It is used by {@link MessageFormatter}, but it might be handy for various tools.</p>\n     * @param input the text to parse\n     * @return the parsed {@code MFDataModel.Message}\n     * @throws MFParseException if errors are detected\n     *\n     * @deprecated This API is for technology preview only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "MFDataModel.Message", "android.icu.message2.MessageFormatter" ]
  }, {
    "name" : "private MFDataModel.Message parseImpl() throws MFParseException",
    "returnType" : "MFDataModel.Message",
    "comment" : " Parser proper",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Pattern getPattern() throws MFParseException",
    "returnType" : "MFDataModel.Pattern",
    "comment" : " abnf: pattern = *(text-char / text-escape / placeholder)",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.PatternPart getPatternPart() throws MFParseException",
    "returnType" : "MFDataModel.PatternPart",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getText()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Expression getPlaceholder() throws MFParseException",
    "returnType" : "MFDataModel.Expression",
    "comment" : " abnf: / \"{\" [s] \"/\" identifier *(s option) *(s attribute) [s] \"}\" ; close",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Annotation getAnnotation() throws MFParseException",
    "returnType" : "MFDataModel.Annotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Annotation getMarkupAnnotation() throws MFParseException",
    "returnType" : "MFDataModel.Annotation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Expression getLiteralExpression() throws MFParseException",
    "returnType" : "MFDataModel.Expression",
    "comment" : " abnf: literal-expression = \"{\" [s] literal [s annotation] *(s attribute) [s] \"}\"",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.VariableExpression getVariableExpression() throws MFParseException",
    "returnType" : "MFDataModel.VariableExpression",
    "comment" : " abnf: variable-expression = \"{\" [s] variable [s annotation] *(s attribute) [s] \"}\"",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Expression getAnnotationExpression() throws MFParseException",
    "returnType" : "MFDataModel.Expression",
    "comment" : " abnf: annotation-expression = \"{\" [s] annotation *(s attribute) [s] \"}\"",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Markup getMarkup() throws MFParseException",
    "returnType" : "MFDataModel.Markup",
    "comment" : " abnf: / \"{\" [s] \"/\" identifier *(s option) *(s attribute) [s] \"}\" ; close",
    "links" : [ ]
  }, {
    "name" : "private List<MFDataModel.Attribute> getAttributes() throws MFParseException",
    "returnType" : "List<MFDataModel.Attribute>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Attribute getAttribute() throws MFParseException",
    "returnType" : "MFDataModel.Attribute",
    "comment" : " abnf: attribute = \"@\" identifier [[s] \"=\" [s] (literal / variable)]",
    "links" : [ ]
  }, {
    "name" : "private String getReservedBody() throws MFParseException",
    "returnType" : "String",
    "comment" : " abnf: reserved-escape = backslash ( backslash / \"{\" / \"|\" / \"}\" )",
    "links" : [ ]
  }, {
    "name" : "private String getIdentifier() throws MFParseException",
    "returnType" : "String",
    "comment" : " abnf: name = name-start *name-char",
    "links" : [ ]
  }, {
    "name" : "private Map<String, MFDataModel.Option> getOptions() throws MFParseException",
    "returnType" : "Map<String, MFDataModel.Option>",
    "comment" : " abnf helper: *(s option)",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Option getOption() throws MFParseException",
    "returnType" : "MFDataModel.Option",
    "comment" : " abnf: option = identifier [s] \"=\" [s] (literal / variable)",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.LiteralOrVariableRef getLiteralOrVariableRef() throws MFParseException",
    "returnType" : "MFDataModel.LiteralOrVariableRef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Literal getLiteral() throws MFParseException",
    "returnType" : "MFDataModel.Literal",
    "comment" : " abnf: literal = quoted / unquoted",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.VariableRef getVariableRef() throws MFParseException",
    "returnType" : "MFDataModel.VariableRef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Literal getQuotedLiteral() throws MFParseException",
    "returnType" : "MFDataModel.Literal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Literal getUnQuotedLiteral() throws MFParseException",
    "returnType" : "MFDataModel.Literal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Literal getNumberLiteral()",
    "returnType" : "MFDataModel.Literal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipMandatoryWhitespaces() throws MFParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipOptionalWhitespaces()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int skipWhitespaces()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Message getComplexMessage() throws MFParseException",
    "returnType" : "MFDataModel.Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.SelectMessage getMatch(List<MFDataModel.Declaration> declarations) throws MFParseException",
    "returnType" : "MFDataModel.SelectMessage",
    "comment" : " abnf: match = %s\".match\"",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Variant getVariant() throws MFParseException",
    "returnType" : "MFDataModel.Variant",
    "comment" : " abnf: key = literal / \"*\"",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.LiteralOrCatchallKey getKey(boolean requireSpaces) throws MFParseException",
    "returnType" : "MFDataModel.LiteralOrCatchallKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Declaration getDeclaration() throws MFParseException",
    "returnType" : "MFDataModel.Declaration",
    "comment" : " abnf: reserved-keyword = \".\" name",
    "links" : [ ]
  }, {
    "name" : "private MFDataModel.Pattern getQuotedPattern() throws MFParseException",
    "returnType" : "MFDataModel.Pattern",
    "comment" : " quoted-pattern = \"{{\" pattern \"}}\"",
    "links" : [ ]
  }, {
    "name" : "private String getName() throws MFParseException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkCondition(boolean condition, String message) throws MFParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void error(String message) throws MFParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String peekWithRegExp(Pattern pattern)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static MFDataModel.Message parse(String input) throws MFParseException", "private MFDataModel.Message parseImpl() throws MFParseException", "private MFDataModel.Pattern getPattern() throws MFParseException", "private MFDataModel.PatternPart getPatternPart() throws MFParseException", "private String getText()", "private MFDataModel.Expression getPlaceholder() throws MFParseException", "private MFDataModel.Annotation getAnnotation() throws MFParseException", "private MFDataModel.Annotation getMarkupAnnotation() throws MFParseException", "private MFDataModel.Expression getLiteralExpression() throws MFParseException", "private MFDataModel.VariableExpression getVariableExpression() throws MFParseException", "private MFDataModel.Expression getAnnotationExpression() throws MFParseException", "private MFDataModel.Markup getMarkup() throws MFParseException", "private List<MFDataModel.Attribute> getAttributes() throws MFParseException", "private MFDataModel.Attribute getAttribute() throws MFParseException", "private String getReservedBody() throws MFParseException", "private String getIdentifier() throws MFParseException", "private Map<String, MFDataModel.Option> getOptions() throws MFParseException", "private MFDataModel.Option getOption() throws MFParseException", "private MFDataModel.LiteralOrVariableRef getLiteralOrVariableRef() throws MFParseException", "private MFDataModel.Literal getLiteral() throws MFParseException", "private MFDataModel.VariableRef getVariableRef() throws MFParseException", "private MFDataModel.Literal getQuotedLiteral() throws MFParseException", "private MFDataModel.Literal getUnQuotedLiteral() throws MFParseException", "private MFDataModel.Literal getNumberLiteral()", "private void skipMandatoryWhitespaces() throws MFParseException", "private void skipOptionalWhitespaces()", "private int skipWhitespaces()", "private MFDataModel.Message getComplexMessage() throws MFParseException", "private MFDataModel.SelectMessage getMatch(List<MFDataModel.Declaration> declarations) throws MFParseException", "private MFDataModel.Variant getVariant() throws MFParseException", "private MFDataModel.LiteralOrCatchallKey getKey(boolean requireSpaces) throws MFParseException", "private MFDataModel.Declaration getDeclaration() throws MFParseException", "private MFDataModel.Pattern getQuotedPattern() throws MFParseException", "private String getName() throws MFParseException", "private void checkCondition(boolean condition, String message) throws MFParseException", "private void error(String message) throws MFParseException", "private String peekWithRegExp(Pattern pattern)" ],
  "variableNames" : [ "EOF", "input", "RE_NUMBER_LITERAL" ]
}