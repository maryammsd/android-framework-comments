{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/RegistrationManager.java",
  "packageName" : "android.telephony.ims",
  "className" : "RegistrationManager",
  "comment" : "\n * Manages IMS Service registration state for associated {@code ImsFeature}s.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "REGISTRATION_STATE_NOT_REGISTERED",
    "type" : "int",
    "comment" : "\n     * The IMS service is currently not registered to the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_REGISTERING",
    "type" : "int",
    "comment" : "\n     * The IMS service is currently in the process of registering to the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "REGISTRATION_STATE_REGISTERED",
    "type" : "int",
    "comment" : "\n     * The IMS service is currently registered to the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGESTED_ACTION_NONE",
    "type" : "int",
    "comment" : "\n     * Default value. No action is suggested when IMS registration fails.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGESTED_ACTION_TRIGGER_PLMN_BLOCK",
    "type" : "int",
    "comment" : "\n     * Indicates that the IMS registration is failed with fatal error such as 403 or 404\n     * on all P-CSCF addresses. The radio shall block the current PLMN or disable\n     * the RAT as per the carrier requirements.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGESTED_ACTION_TRIGGER_PLMN_BLOCK_WITH_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * Indicates that the IMS registration on current PLMN failed multiple times.\n     * The radio shall block the current PLMN or disable the RAT during EPS or 5GS mobility\n     * management timer value as per the carrier requirements.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SUGGESTED_ACTION_TRIGGER_RAT_BLOCK",
    "type" : "int",
    "comment" : "\n     * Indicates that the IMS registration on current RAT failed multiple times.\n     * The radio shall block the {@link ImsRegistrationImplBase.ImsRegistrationTech}\n     * included with this and search for other available RATs in the background.\n     * If no other RAT is available that meets the carrier requirements, the\n     * radio may remain on the blocked RAT for internet service. The radio clears all\n     * RATs marked as unavailable if the IMS service is registered to the carrier network.\n     * @hide\n     ",
    "links" : [ "ImsRegistrationImplBase.ImsRegistrationTech" ]
  }, {
    "name" : "SUGGESTED_ACTION_TRIGGER_CLEAR_RAT_BLOCKS",
    "type" : "int",
    "comment" : "\n     * Indicates that the radio clears all RATs marked as unavailable and tries to find\n     * an available RAT that meets the carrier requirements.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IMS_REG_TO_ACCESS_TYPE_MAP",
    "type" : "Map<Integer, Integer>",
    "comment" : " and WWAN are more accurate constants.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static String registrationStateToString(@NetworkRegistrationInfo.RegistrationState final int value)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static int getAccessType(int regtech)",
    "returnType" : "int",
    "comment" : "\n     * @param regtech The registration technology.\n     * @return The Access Network type from registration technology.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationCallback c) throws ImsException",
    "returnType" : "void",
    "comment" : "\n     * Registers a {@link RegistrationCallback} with the system. Use\n     * @param executor The {@link Executor} that will be used to call the IMS registration state\n     *                 callback.\n     * @param c A callback called on the supplied {@link Executor} that will contain the\n     *                      registration state of the IMS service, which will be one of the\n     * {@see  SubscriptionManager.OnSubscriptionsChangedListener} to listen to Subscription changed\n     * events and call {@link #unregisterImsRegistrationCallback(RegistrationCallback)} to clean up.\n     *\n     * When the callback is registered, it will initiate the callback c to be called with the\n     * current registration state.\n     *\n     * @param executor The executor the callback events should be run on.\n     * @param c The {@link RegistrationCallback} to be added.\n     * @see #unregisterImsRegistrationCallback(RegistrationCallback)\n     * @throws ImsException if the subscription associated with this callback is valid, but\n     * the {@code ImsService} associated with the subscription is not available. This can happen if\n     * the service crashed, for example. See {@link ImsException#getCode()} for a more detailed\n     * reason.\n     ",
    "links" : [ "#unregisterImsRegistrationCallback(RegistrationCallback)", "android.telephony.ims.aidl.IImsRegistrationCallback", "android.annotation.CallbackExecutor", "android.telephony.ims.ImsException#getCode()" ]
  }, {
    "name" : " void unregisterImsRegistrationCallback(@NonNull RegistrationCallback c)",
    "returnType" : "void",
    "comment" : "\n     * Removes an existing {@link RegistrationCallback}.\n     *\n     * When the subscription associated with this callback is removed (SIM removed, ESIM swap,\n     * etc...), this callback will automatically be removed. If this method is called for an\n     * inactive subscription, it will result in a no-op.\n     *\n     * @param c The {@link RegistrationCallback} to be removed.\n     * @see android.telephony.SubscriptionManager.OnSubscriptionsChangedListener\n     * @see #registerImsRegistrationCallback(Executor, RegistrationCallback)\n     ",
    "links" : [ "android.telephony.ims.aidl.IImsRegistrationCallback" ]
  }, {
    "name" : " void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsRegistrationState Consumer<Integer> stateCallback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the registration state of the IMS service.\n     * @param executor The {@link Executor} that will be used to call the IMS registration state\n     *                 callback.\n     * @param stateCallback A callback called on the supplied {@link Executor} that will contain the\n *                      registration state of the IMS service, which will be one of the\n *                      following: {@link #REGISTRATION_STATE_NOT_REGISTERED},\n *                      {@link #REGISTRATION_STATE_REGISTERING}, or\n *                      {@link #REGISTRATION_STATE_REGISTERED}.\n     ",
    "links" : [ "#REGISTRATION_STATE_REGISTERING", "#REGISTRATION_STATE_REGISTERED", "android.annotation.CallbackExecutor", "#REGISTRATION_STATE_NOT_REGISTERED" ]
  }, {
    "name" : " void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)",
    "returnType" : "void",
    "comment" : "\n     * Gets the Transport Type associated with the current IMS registration.\n     * @param executor The {@link Executor} that will be used to call the transportTypeCallback.\n     * @param transportTypeCallback The transport type associated with the current IMS registration,\n     * which will be one of following:\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_WWAN},\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_WLAN}, or\n     * {@see AccessNetworkConstants#TRANSPORT_TYPE_INVALID}.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  } ],
  "methodNames" : [ " static String registrationStateToString(@NetworkRegistrationInfo.RegistrationState final int value)", " static int getAccessType(int regtech)", " void registerImsRegistrationCallback(@NonNull @CallbackExecutor Executor executor, @NonNull RegistrationCallback c) throws ImsException", " void unregisterImsRegistrationCallback(@NonNull RegistrationCallback c)", " void getRegistrationState(@NonNull @CallbackExecutor Executor executor, @NonNull @ImsRegistrationState Consumer<Integer> stateCallback)", " void getRegistrationTransportType(@NonNull @CallbackExecutor Executor executor, @NonNull @AccessNetworkConstants.TransportType Consumer<Integer> transportTypeCallback)" ],
  "variableNames" : [ "REGISTRATION_STATE_NOT_REGISTERED", "REGISTRATION_STATE_REGISTERING", "REGISTRATION_STATE_REGISTERED", "SUGGESTED_ACTION_NONE", "SUGGESTED_ACTION_TRIGGER_PLMN_BLOCK", "SUGGESTED_ACTION_TRIGGER_PLMN_BLOCK_WITH_TIMEOUT", "SUGGESTED_ACTION_TRIGGER_RAT_BLOCK", "SUGGESTED_ACTION_TRIGGER_CLEAR_RAT_BLOCKS", "IMS_REG_TO_ACCESS_TYPE_MAP" ]
}