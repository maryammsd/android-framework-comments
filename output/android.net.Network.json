{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/Network.java",
  "packageName" : "android.net",
  "className" : "Network",
  "comment" : "\n * Identifies a {@code Network}.  This is supplied to applications via\n * {@link ConnectivityManager.NetworkCallback} in response to the active\n * {@link ConnectivityManager#requestNetwork} or passive\n * {@link ConnectivityManager#registerNetworkCallback} calls.\n * It is used to direct traffic to the given {@code Network}, either on a {@link Socket} basis\n * through a targeted {@link SocketFactory} or process-wide via\n * {@link ConnectivityManager#bindProcessToNetwork}.\n ",
  "variables" : [ {
    "name" : "netId",
    "type" : "int",
    "comment" : "\n     * The unique id of the network.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkBoundSocketFactory",
    "type" : "NetworkBoundSocketFactory",
    "comment" : " and openConnection, and a lock to protect access to them.",
    "links" : [ ]
  }, {
    "name" : "mUrlConnectionFactory",
    "type" : "HttpURLConnectionFactory",
    "comment" : " maybeInitUrlConnectionFactory() must be called prior to reading this field.",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "httpKeepAlive",
    "type" : "boolean",
    "comment" : " valid integers.",
    "links" : [ ]
  }, {
    "name" : "httpMaxConnections",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "httpKeepAliveDurationMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HANDLE_MAGIC",
    "type" : "long",
    "comment" : " value in the native/android/net.c NDK implementation.",
    "links" : [ ]
  }, {
    "name" : "HANDLE_MAGIC_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateDnsBypass",
    "type" : "boolean",
    "comment" : " code search audits are possible.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<Network>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public InetAddress[] getAllByName(String host) throws UnknownHostException",
    "returnType" : "InetAddress[]",
    "comment" : "\n     * Operates the same as {@code InetAddress.getAllByName} except that host\n     * resolution is done on this network.\n     *\n     * @param host the hostname or literal IP string to be resolved.\n     * @return the array of addresses associated with the specified host.\n     * @throws UnknownHostException if the address lookup fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getByName(String host) throws UnknownHostException",
    "returnType" : "InetAddress",
    "comment" : "\n     * Operates the same as {@code InetAddress.getByName} except that host\n     * resolution is done on this network.\n     *\n     * @param host the hostname to be resolved to an address or {@code null}.\n     * @return the {@code InetAddress} instance representing the host.\n     * @throws UnknownHostException\n     *             if the address lookup fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Network getPrivateDnsBypassingCopy()",
    "returnType" : "Network",
    "comment" : "\n     * Obtain a Network object for which Private DNS is to be bypassed when attempting\n     * to use {@link #getAllByName(String)}/{@link #getByName(String)} methods on the given\n     * instance for hostname resolution.\n     *\n     * @hide\n     ",
    "links" : [ "#getAllByName(String)", "#getByName(String)" ]
  }, {
    "name" : "public int getNetId()",
    "returnType" : "int",
    "comment" : "\n     * Get the unique id of the network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNetIdForResolv()",
    "returnType" : "int",
    "comment" : "\n     * Returns a netid marked with the Private DNS bypass flag.\n     *\n     * This flag must be kept in sync with the NETID_USE_LOCAL_NAMESERVERS flag\n     * in system/netd/include/NetdClient.h.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public SocketFactory getSocketFactory()",
    "returnType" : "SocketFactory",
    "comment" : "\n     * Returns a {@link SocketFactory} bound to this network.  Any {@link Socket} created by\n     * this factory will have its traffic sent over this {@code Network}.  Note that if this\n     * {@code Network} ever disconnects, this factory and any {@link Socket} it produced in the\n     * past or future will cease to work.\n     *\n     * @return a {@link SocketFactory} which produces {@link Socket} instances bound to this\n     *         {@code Network}.\n     ",
    "links" : [ "javax.net.SocketFactory", "java.net.DatagramSocket" ]
  }, {
    "name" : "private void maybeInitUrlConnectionFactory()",
    "returnType" : "void",
    "comment" : " out) ConnectionPools.",
    "links" : [ ]
  }, {
    "name" : "public URLConnection openConnection(URL url) throws IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Opens the specified {@link URL} on this {@code Network}, such that all traffic will be sent\n     * on this Network. The URL protocol must be {@code HTTP} or {@code HTTPS}.\n     *\n     * @return a {@code URLConnection} to the resource referred to by this URL.\n     * @throws MalformedURLException if the URL protocol is not HTTP or HTTPS.\n     * @throws IOException if an error occurs while opening the connection.\n     * @see java.net.URL#openConnection()\n     ",
    "links" : [ "java.net.URL" ]
  }, {
    "name" : "public URLConnection openConnection(URL url, java.net.Proxy proxy) throws IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Opens the specified {@link URL} on this {@code Network}, such that all traffic will be sent\n     * on this Network. The URL protocol must be {@code HTTP} or {@code HTTPS}.\n     *\n     * @param proxy the proxy through which the connection will be established.\n     * @return a {@code URLConnection} to the resource referred to by this URL.\n     * @throws MalformedURLException if the URL protocol is not HTTP or HTTPS.\n     * @throws IllegalArgumentException if the argument proxy is null.\n     * @throws IOException if an error occurs while opening the connection.\n     * @see java.net.URL#openConnection()\n     ",
    "links" : [ "java.net.URL" ]
  }, {
    "name" : "public void bindSocket(DatagramSocket socket) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds the specified {@link DatagramSocket} to this {@code Network}. All data traffic on the\n     * socket will be sent on this {@code Network}, irrespective of any process-wide network binding\n     * set by {@link ConnectivityManager#bindProcessToNetwork}. The socket must not be\n     * connected.\n     ",
    "links" : [ "java.net.DatagramSocket", "android.net.ConnectivityManager#bindProcessToNetwork" ]
  }, {
    "name" : "public void bindSocket(Socket socket) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds the specified {@link Socket} to this {@code Network}. All data traffic on the socket\n     * will be sent on this {@code Network}, irrespective of any process-wide network binding set by\n     * {@link ConnectivityManager#bindProcessToNetwork}. The socket must not be connected.\n     ",
    "links" : [ "java.net.DatagramSocket", "android.net.ConnectivityManager#bindProcessToNetwork" ]
  }, {
    "name" : "public void bindSocket(FileDescriptor fd) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Binds the specified {@link FileDescriptor} to this {@code Network}. All data traffic on the\n     * socket represented by this file descriptor will be sent on this {@code Network},\n     * irrespective of any process-wide network binding set by\n     * {@link ConnectivityManager#bindProcessToNetwork}. The socket must not be connected.\n     ",
    "links" : [ "java.io.FileDescriptor", "android.net.ConnectivityManager#bindProcessToNetwork" ]
  }, {
    "name" : "public static Network fromNetworkHandle(long networkHandle)",
    "returnType" : "Network",
    "comment" : "\n     * Returns a {@link Network} object given a handle returned from {@link #getNetworkHandle}.\n     *\n     * @param networkHandle a handle returned from {@link #getNetworkHandle}.\n     * @return A {@link Network} object derived from {@code networkHandle}.\n     ",
    "links" : [ "#getNetworkHandle", "android.net.Network" ]
  }, {
    "name" : "public long getNetworkHandle()",
    "returnType" : "long",
    "comment" : "\n     * Returns a handle representing this {@code Network}, for use with the NDK API.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " implement the Parcelable interface",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "netId", "mNetworkBoundSocketFactory", "mUrlConnectionFactory", "mLock", "httpKeepAlive", "httpMaxConnections", "httpKeepAliveDurationMs", "HANDLE_MAGIC", "HANDLE_MAGIC_SIZE", "mPrivateDnsBypass", "CREATOR" ],
  "methodNames" : [ "public InetAddress[] getAllByName(String host) throws UnknownHostException", "public InetAddress getByName(String host) throws UnknownHostException", "public Network getPrivateDnsBypassingCopy()", "public int getNetId()", "public int getNetIdForResolv()", "public SocketFactory getSocketFactory()", "private void maybeInitUrlConnectionFactory()", "public URLConnection openConnection(URL url) throws IOException", "public URLConnection openConnection(URL url, java.net.Proxy proxy) throws IOException", "public void bindSocket(DatagramSocket socket) throws IOException", "public void bindSocket(Socket socket) throws IOException", "public void bindSocket(FileDescriptor fd) throws IOException", "public static Network fromNetworkHandle(long networkHandle)", "public long getNetworkHandle()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ]
}