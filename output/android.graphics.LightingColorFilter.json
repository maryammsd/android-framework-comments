{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/LightingColorFilter.java",
  "packageName" : "android.graphics",
  "className" : "LightingColorFilter",
  "comment" : "\n * A color filter that can be used to simulate simple lighting effects.\n * A <code>LightingColorFilter</code> is defined by two parameters, one\n * used to multiply the source color (called <code>colorMultiply</code>)\n * and one used to add to the source color (called <code>colorAdd</code>).\n * The alpha channel is left untouched by this color filter.\n *\n * Given a source color RGB, the resulting R'G'B' color is computed thusly:\n * <pre>\n * R' = R * colorMultiply.R + colorAdd.R\n * G' = G * colorMultiply.G + colorAdd.G\n * B' = B * colorMultiply.B + colorAdd.B\n * </pre>\n * The result is pinned to the <code>[0..255]</code> range for each channel.\n ",
  "variables" : [ {
    "name" : "mMul",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getColorMultiply()",
    "returnType" : "int",
    "comment" : "\n     * Returns the RGB color used to multiply the source color when the\n     * color filter is applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorMultiply(@ColorInt int mul)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the RGB color used to multiply the source color when the\n     * color filter is applied.\n     * The alpha channel of this color is ignored.\n     *\n     * @see #getColorMultiply()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColorAdd()",
    "returnType" : "int",
    "comment" : "\n     * Returns the RGB color that will be added to the source color\n     * when the color filter is applied.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorAdd(@ColorInt int add)",
    "returnType" : "void",
    "comment" : "\n     * Specifies the RGB that will be added to the source color when\n     * the color filter is applied.\n     * The alpha channel of this color is ignored.\n     *\n     * @see #getColorAdd()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " long createNativeInstance()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long native_CreateLightingFilter(int mul, int add)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMul", "mAdd" ],
  "methodNames" : [ "public int getColorMultiply()", "public void setColorMultiply(@ColorInt int mul)", "public int getColorAdd()", "public void setColorAdd(@ColorInt int add)", " long createNativeInstance()", "private static native long native_CreateLightingFilter(int mul, int add)" ]
}