{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvInputService.java",
  "packageName" : "android.media.tv",
  "className" : "Session",
  "comment" : "\n     * Base class for derived classes to implement to provide a TV input session.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "POSITION_UPDATE_INTERVAL_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDispatcherState",
    "type" : "KeyEvent.DispatcherState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "WindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowParams",
    "type" : "WindowManager.LayoutParams",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSurface",
    "type" : "Surface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayViewContainer",
    "type" : "FrameLayout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayView",
    "type" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayViewCleanUpTask",
    "type" : "OverlayViewCleanUpTask",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayViewEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayFrame",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartPositionMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentPositionMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeShiftPositionTrackingRunnable",
    "type" : "TimeShiftPositionTrackingRunnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCallback",
    "type" : "ITvInputSessionCallback",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  }, {
    "name" : "mPendingActions",
    "type" : "List<Runnable>",
    "comment" : " @GuardedBy(\"mLock\")",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setOverlayViewEnabled(final boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables the overlay view.\n         *\n         * <p>By default, the overlay view is disabled. Must be called explicitly after the\n         * session is created to enable the overlay view.\n         *\n         * <p>The TV input service can disable its overlay view when the size of the overlay view is\n         * insufficient to display the whole information, such as when used in Picture-in-picture.\n         * Override {@link #onOverlayViewSizeChanged} to get the size of the overlay view, which\n         * then can be used to determine whether to enable/disable the overlay view.\n         *\n         * @param enable {@code true} if you want to enable the overlay view. {@code false}\n         *            otherwise.\n         ",
    "links" : [ "#onOverlayViewSizeChanged" ]
  }, {
    "name" : "public void notifySessionEvent(@NonNull final String eventType, final Bundle eventArgs)",
    "returnType" : "void",
    "comment" : "\n         * Dispatches an event to the application using this session.\n         *\n         * @param eventType The type of the event.\n         * @param eventArgs Optional arguments of the event.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyChannelRetuned(final Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the current channel is re-tuned for some reason and the\n         * session now displays the content from a new channel. This is used to handle special cases\n         * such as when the current channel becomes unavailable, it is necessary to send the user to\n         * a certain channel or the user changes channel in some other way (e.g. by using a\n         * dedicated remote).\n         *\n         * @param channelUri The URI of the new channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTuned(@NonNull Uri channelUri)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that this session has been tuned to the given channel.\n         *\n         * @param channelUri The URI of the tuned channel.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyTracksChanged(final List<TvTrackInfo> tracks)",
    "returnType" : "void",
    "comment" : "\n         * Sends the list of all audio/video/subtitle tracks. The is used by the framework to\n         * maintain the track information for a given session, which in turn is used by\n         * {@link TvView#getTracks} for the application to retrieve metadata for a given track type.\n         * The TV input service must call this method as soon as the track information becomes\n         * available or is updated. Note that in a case where a part of the information for a\n         * certain track is updated, it is not necessary to create a new {@link TvTrackInfo} object\n         * with a different track ID.\n         *\n         * @param tracks A list which includes track information.\n         ",
    "links" : [ "android.media.tv.TvView#getTracks", "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void notifyTrackSelected(final int type, final String trackId)",
    "returnType" : "void",
    "comment" : "\n         * Sends the type and ID of a selected track. This is used to inform the application that a\n         * specific track is selected. The TV input service must call this method as soon as a track\n         * is selected either by default or in response to a call to {@link #onSelectTrack}. The\n         * selected track ID for a given type is maintained in the framework until the next call to\n         * this method even after the entire track list is updated (but is reset when the session is\n         * tuned to a new channel), so care must be taken not to result in an obsolete track ID.\n         *\n         * @param type The type of the selected track. The type can be\n         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or\n         *            {@link TvTrackInfo#TYPE_SUBTITLE}.\n         * @param trackId The ID of the selected track.\n         * @see #onSelectTrack\n         ",
    "links" : [ "#onSelectTrack", "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public void notifyVideoAvailable()",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the video is now available for watching. Video is blocked\n         * until this method is called.\n         *\n         * <p>The TV input service must call this method as soon as the content rendered onto its\n         * surface is ready for viewing. This method must be called each time {@link #onTune}\n         * is called.\n         *\n         * @see #notifyVideoUnavailable\n         ",
    "links" : [ "#onTune" ]
  }, {
    "name" : "public void notifyVideoUnavailable(@TvInputManager.VideoUnavailableReason final int reason)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the video became unavailable for some reason. This is\n         * primarily used to signal the application to block the screen not to show any intermittent\n         * video artifacts.\n         *\n         * @param reason The reason why the video became unavailable:\n         *            <ul>\n         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN}\n         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING}\n         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL}\n         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING}\n         *            <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY}\n         *            </ul>\n         * @see #notifyVideoAvailable\n         ",
    "links" : [ "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN", "android.media.tv.TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING" ]
  }, {
    "name" : "public void notifyVideoFreezeUpdated(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the video freeze state has been updated.\n         *\n         * <p>When {@code true}, the video is frozen on the last frame but audio playback remains\n         * active.\n         *\n         * @param isFrozen Whether or not the video is frozen\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAudioPresentationChanged(@NonNull final List<AudioPresentation> audioPresentations)",
    "returnType" : "void",
    "comment" : "\n         * Sends an updated list of all audio presentations available from a Next Generation Audio\n         * service. This is used by the framework to maintain the audio presentation information for\n         * a given track of {@link TvTrackInfo#TYPE_AUDIO}, which in turn is used by\n         * {@link TvView#getAudioPresentations} for the application to retrieve metadata for the\n         * current audio track. The TV input service must call this method as soon as the audio\n         * track presentation information becomes available or is updated. Note that in a case\n         * where a part of the information for the current track is updated, it is not necessary\n         * to create a new {@link TvTrackInfo} object with a different track ID.\n         *\n         * @param audioPresentations A list of audio presentation information pertaining to the\n         * selected track.\n         ",
    "links" : [ "android.media.tv.TvView#getAudioPresentations", "android.media.tv.TvTrackInfo#TYPE_AUDIO", "android.media.tv.TvTrackInfo" ]
  }, {
    "name" : "public void notifyAudioPresentationSelected(final int presentationId, final int programId)",
    "returnType" : "void",
    "comment" : "\n         * Sends the presentation and program IDs of the selected audio presentation. This is used\n         * to inform the application that a specific audio presentation is selected. The TV input\n         * service must call this method as soon as an audio presentation is selected either by\n         * default or in response to a call to {@link #onSelectTrack}. The selected audio\n         * presentation ID for a currently selected audio track is maintained in the framework until\n         * the next call to this method even after the entire audio presentation list for the track\n         * is updated (but is reset when the session is tuned to a new channel), so care must be\n         * taken not to result in an obsolete track audio presentation ID.\n         *\n         * @param presentationId The ID of the selected audio presentation for the current track.\n         * @param programId The ID of the program providing the selected audio presentation.\n         * @see #onSelectAudioPresentation\n         ",
    "links" : [ "#onSelectTrack" ]
  }, {
    "name" : "public void notifyContentAllowed()",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the user is allowed to watch the current program content.\n         *\n         * <p>Each TV input service is required to query the system whether the user is allowed to\n         * watch the current program before showing it to the user if the parental controls is\n         * enabled (i.e. {@link TvInputManager#isParentalControlsEnabled\n         * TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input\n         * service should block the content or not is determined by invoking\n         * {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)}\n         * with the content rating for the current program. Then the {@link TvInputManager} makes a\n         * judgment based on the user blocked ratings stored in the secure settings and returns the\n         * result. If the rating in question turns out to be allowed by the user, the TV input\n         * service must call this method to notify the application that is permitted to show the\n         * content.\n         *\n         * <p>Each TV input service also needs to continuously listen to any changes made to the\n         * parental controls settings by registering a broadcast receiver to receive\n         * {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and\n         * {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately\n         * reevaluate the current program with the new parental controls settings.\n         *\n         * @see #notifyContentBlocked\n         * @see TvInputManager\n         ",
    "links" : [ "android.media.tv.TvInputManager#isRatingBlocked", "android.media.tv.TvInputManager#isParentalControlsEnabledTvInputManager.isParentalControlsEnabled()", "android.media.tv.TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED", "android.media.tv.TvInputManager", "android.media.tv.TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED" ]
  }, {
    "name" : "public void notifyContentBlocked(@NonNull final TvContentRating rating)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the current program content is blocked by parent controls.\n         *\n         * <p>Each TV input service is required to query the system whether the user is allowed to\n         * watch the current program before showing it to the user if the parental controls is\n         * enabled (i.e. {@link TvInputManager#isParentalControlsEnabled\n         * TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input\n         * service should block the content or not is determined by invoking\n         * {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)}\n         * with the content rating for the current program or {@link TvContentRating#UNRATED} in\n         * case the rating information is missing. Then the {@link TvInputManager} makes a judgment\n         * based on the user blocked ratings stored in the secure settings and returns the result.\n         * If the rating in question turns out to be blocked, the TV input service must immediately\n         * block the content and call this method with the content rating of the current program to\n         * prompt the PIN verification screen.\n         *\n         * <p>Each TV input service also needs to continuously listen to any changes made to the\n         * parental controls settings by registering a broadcast receiver to receive\n         * {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and\n         * {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately\n         * reevaluate the current program with the new parental controls settings.\n         *\n         * @param rating The content rating for the current TV program. Can be\n         *            {@link TvContentRating#UNRATED}.\n         * @see #notifyContentAllowed\n         * @see TvInputManager\n         ",
    "links" : [ "android.media.tv.TvInputManager#isRatingBlocked", "android.media.tv.TvContentRating#UNRATED", "android.media.tv.TvInputManager#isParentalControlsEnabledTvInputManager.isParentalControlsEnabled()", "android.media.tv.TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED", "android.media.tv.TvInputManager", "android.media.tv.TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED" ]
  }, {
    "name" : "public void notifyTimeShiftStatusChanged(@TvInputManager.TimeShiftStatus final int status)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that the time shift status is changed.\n         *\n         * <p>Prior to calling this method, the application assumes the status\n         * {@link TvInputManager#TIME_SHIFT_STATUS_UNKNOWN}. Right after the session is created, it\n         * is important to invoke the method with the status\n         * {@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} if the implementation does support\n         * time shifting, or {@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED} otherwise. Failure\n         * to notifying the current status change immediately might result in an undesirable\n         * behavior in the application such as hiding the play controls.\n         *\n         * <p>If the status {@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} is reported, the\n         * application assumes it can pause/resume playback, seek to a specified time position and\n         * set playback rate and audio mode. The implementation should override\n         * {@link #onTimeShiftPause}, {@link #onTimeShiftResume}, {@link #onTimeShiftSeekTo},\n         * {@link #onTimeShiftGetStartPosition}, {@link #onTimeShiftGetCurrentPosition} and\n         * {@link #onTimeShiftSetPlaybackParams}.\n         *\n         * @param status The current time shift status. Should be one of the followings.\n         * <ul>\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED}\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE}\n         * <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE}\n         * </ul>\n         ",
    "links" : [ "#onTimeShiftSeekTo", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNKNOWN", "#onTimeShiftGetCurrentPosition", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED", "#onTimeShiftResume", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_AVAILABLE", "#onTimeShiftGetStartPosition", "android.media.tv.TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE", "#onTimeShiftPause", "#onTimeShiftSetPlaybackParams" ]
  }, {
    "name" : "public void notifyBroadcastInfoResponse(@NonNull final BroadcastInfoResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Notifies response for broadcast info.\n         *\n         * @param response broadcast info response.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAdResponse(@NonNull final AdResponse response)",
    "returnType" : "void",
    "comment" : "\n         * Notifies response for advertisement.\n         *\n         * @param response advertisement response.\n         * @see android.media.tv.interactive.TvInteractiveAppService.Session#requestAd(AdRequest)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyAdBufferConsumed(@NonNull AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Notifies the advertisement buffer is consumed.\n         *\n         * @param buffer the {@link AdBuffer} that was consumed.\n         ",
    "links" : [ "android.media.tv.AdBuffer" ]
  }, {
    "name" : "public void notifyTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Sends the raw data from the received TV message as well as the type of message received.\n         *\n         * @param type The of message that was sent, such as\n         * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n         * @param data The raw data of the message. The bundle keys are:\n         *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n         *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n         *             how to parse this data.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "private void notifyTimeShiftStartPositionChanged(final long timeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyTimeShiftCurrentPositionChanged(final long timeMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyAitInfoUpdated(@NonNull final AitInfo aitInfo)",
    "returnType" : "void",
    "comment" : "\n         * Informs the app that the AIT (Application Information Table) is updated.\n         *\n         * <p>This method should also be called when\n         * {@link #onSetInteractiveAppNotificationEnabled(boolean)} is called to send the first AIT\n         * info.\n         *\n         * @see #onSetInteractiveAppNotificationEnabled(boolean)\n         ",
    "links" : [ "#onSetInteractiveAppNotificationEnabled(boolean)" ]
  }, {
    "name" : "public void notifyTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n         * Informs the app that the time shift mode is set or updated.\n         *\n         * @param mode The current time shift mode. The value is one of the following:\n         * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n         * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n         * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public void notifyAvailableSpeeds(@NonNull float[] speeds)",
    "returnType" : "void",
    "comment" : "\n         * Informs the app available speeds for time-shifting.\n         * <p>This should be called when time-shifting is enabled.\n         *\n         * @param speeds An ordered array of playback speeds, expressed as values relative to the\n         *               normal playback speed (1.0), at which the current content can be played as\n         *               a time-shifted broadcast. This is an empty array if the supported playback\n         *               speeds are unknown or the video/broadcast is not in time shift mode. If\n         *               currently in time shift mode, this array will normally include at least\n         *               the values 1.0 (normal speed) and 0.0 (paused).\n         * @see PlaybackParams#getSpeed()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifySignalStrength(@TvInputManager.SignalStrength final int strength)",
    "returnType" : "void",
    "comment" : "\n         * Notifies signal strength.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void notifyCueingMessageAvailability(boolean available)",
    "returnType" : "void",
    "comment" : "\n         * Informs the application that cueing message is available or unavailable.\n         *\n         * <p>The cueing message is used for digital program insertion, based on the standard\n         * ANSI/SCTE 35 2019r1.\n         *\n         * @param available {@code true} if cueing message is available; {@code false} if it becomes\n         *                  unavailable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendTvInputSessionData(@NonNull @TvInputManager.SessionDataType String type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Sends data related to this session to corresponding linked\n         * {@link android.media.tv.ad.TvAdService} object via TvAdView.\n         *\n         * <p>Methods like {@link #notifyBroadcastInfoResponse(BroadcastInfoResponse)} sends the\n         * related data to linked {@link android.media.tv.interactive.TvInteractiveAppService}, but\n         * don't work for {@link android.media.tv.ad.TvAdService}. The method is used specifically\n         * for {@link android.media.tv.ad.TvAdService} use cases.\n         *\n         * @param type data type\n         * @param data the related data values\n         ",
    "links" : [ "android.media.tv.interactive.TvInteractiveAppService", "#notifyBroadcastInfoResponse(BroadcastInfoResponse)", "android.media.tv.ad.TvAdService" ]
  }, {
    "name" : "public void layoutSurface(final int left, final int top, final int right, final int bottom)",
    "returnType" : "void",
    "comment" : "\n         * Assigns a size and position to the surface passed in {@link #onSetSurface}. The position\n         * is relative to the overlay view that sits on top of this surface.\n         *\n         * @param left Left position in pixels, relative to the overlay view.\n         * @param top Top position in pixels, relative to the overlay view.\n         * @param right Right position in pixels, relative to the overlay view.\n         * @param bottom Bottom position in pixels, relative to the overlay view.\n         * @see #onOverlayViewSizeChanged\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : "public abstract void onRelease()",
    "returnType" : "void",
    "comment" : "\n         * Called when the session is released.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSetMain(boolean isMain)",
    "returnType" : "void",
    "comment" : "\n         * Sets the current session as the main session. The main session is a session whose\n         * corresponding TV input determines the HDMI-CEC active source device.\n         *\n         * <p>TV input service that manages HDMI-CEC logical device should implement {@link\n         * #onSetMain} to (1) select the corresponding HDMI logical device as the source device\n         * when {@code isMain} is {@code true}, and to (2) select the internal device (= TV itself)\n         * as the source device when {@code isMain} is {@code false} and the session is still main.\n         * Also, if a surface is passed to a non-main session and active source is changed to\n         * initiate the surface, the active source should be returned to the main session.\n         *\n         * <p>{@link TvView} guarantees that, when tuning involves a session transition, {@code\n         * onSetMain(true)} for new session is called first, {@code onSetMain(false)} for old\n         * session is called afterwards. This allows {@code onSetMain(false)} to be no-op when TV\n         * input service knows that the next main session corresponds to another HDMI logical\n         * device. Practically, this implies that one TV input service should handle all HDMI port\n         * and HDMI-CEC logical devices for smooth active source transition.\n         *\n         * @param isMain If true, session should become main.\n         * @see TvView#setMain\n         * @hide\n         ",
    "links" : [ "#onSetMain", "android.media.tv.TvView" ]
  }, {
    "name" : "public abstract boolean onSetSurface(@Nullable Surface surface)",
    "returnType" : "boolean",
    "comment" : "\n         * Called when the application sets the surface.\n         *\n         * <p>The TV input service should render video onto the given surface. When called with\n         * {@code null}, the input service should immediately free any references to the\n         * currently set surface and stop using it.\n         *\n         * @param surface The surface to be used for video rendering. Can be {@code null}.\n         * @return {@code true} if the surface was set successfully, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Called after any structural changes (format or size) have been made to the surface passed\n         * in {@link #onSetSurface}. This method is always called at least once, after\n         * {@link #onSetSurface} is called with non-null surface.\n         *\n         * @param format The new PixelFormat of the surface.\n         * @param width The new width of the surface.\n         * @param height The new height of the surface.\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : "public void onOverlayViewSizeChanged(int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Called when the size of the overlay view is changed by the application.\n         *\n         * <p>This is always called at least once when the session is created regardless of whether\n         * the overlay view is enabled or not. The overlay view size is the same as the containing\n         * {@link TvView}. Note that the size of the underlying surface can be different if the\n         * surface was changed by calling {@link #layoutSurface}.\n         *\n         * @param width The width of the overlay view.\n         * @param height The height of the overlay view.\n         ",
    "links" : [ "#layoutSurface", "android.media.tv.TvView" ]
  }, {
    "name" : "public abstract void onSetStreamVolume(@FloatRange(from = 0.0, to = 1.0) float volume)",
    "returnType" : "void",
    "comment" : "\n         * Sets the relative stream volume of the current TV input session.\n         *\n         * <p>The implementation should honor this request in order to handle audio focus changes or\n         * mute the current session when multiple sessions, possibly from different inputs are\n         * active. If the method has not yet been called, the implementation should assume the\n         * default value of {@code 1.0f}.\n         *\n         * @param volume A volume value between {@code 0.0f} to {@code 1.0f}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRequestBroadcastInfo(@NonNull BroadcastInfoRequest request)",
    "returnType" : "void",
    "comment" : "\n         * Called when broadcast info is requested.\n         *\n         * @param request broadcast info request\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRemoveBroadcastInfo(int requestId)",
    "returnType" : "void",
    "comment" : "\n         * Called when broadcast info is removed.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onRequestAd(@NonNull AdRequest request)",
    "returnType" : "void",
    "comment" : "\n         * Called when advertisement request is received.\n         *\n         * @param request advertisement request received\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAdBufferReady(@NonNull AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n         * Called when an advertisement buffer is ready for playback.\n         *\n         * @param buffer The {@link AdBuffer} that became ready for playback.\n         ",
    "links" : [ "android.media.tv.AdBuffer" ]
  }, {
    "name" : "public void onTvAdSessionData(@NonNull @TvAdManager.SessionDataType String type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Called when data from the linked {@link android.media.tv.ad.TvAdService} is received.\n         *\n         * @param type the type of the data\n         * @param data a bundle contains the data received\n         * @see android.media.tv.ad.TvAdService.Session#sendTvAdSessionData(String, Bundle)\n         * @see android.media.tv.ad.TvAdView#setTvView(TvView)\n         ",
    "links" : [ "android.media.tv.ad.TvAdService" ]
  }, {
    "name" : "public abstract boolean onTune(Uri channelUri)",
    "returnType" : "boolean",
    "comment" : "\n         * Tunes to a given channel.\n         *\n         * <p>No video will be displayed until {@link #notifyVideoAvailable()} is called.\n         * Also, {@link #notifyVideoUnavailable(int)} should be called when the TV input cannot\n         * continue playing the given channel.\n         *\n         * @param channelUri The URI of the channel.\n         * @return {@code true} if the tuning was successful, {@code false} otherwise.\n         ",
    "links" : [ "#notifyVideoAvailable()", "#notifyVideoUnavailable(int)" ]
  }, {
    "name" : "public boolean onTune(Uri channelUri, Bundle params)",
    "returnType" : "boolean",
    "comment" : "\n         * Tunes to a given channel. Override this method in order to handle domain-specific\n         * features that are only known between certain TV inputs and their clients.\n         *\n         * <p>The default implementation calls {@link #onTune(Uri)}.\n         *\n         * @param channelUri The URI of the channel.\n         * @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped\n         *            name, i.e. prefixed with a package name you own, so that different developers\n         *            will not create conflicting keys.\n         * @return {@code true} if the tuning was successful, {@code false} otherwise.\n         ",
    "links" : [ "#onTune(Uri)" ]
  }, {
    "name" : "public abstract void onSetCaptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables the caption.\n         *\n         * <p>The locale for the user's preferred captioning language can be obtained by calling\n         * {@link CaptioningManager#getLocale CaptioningManager.getLocale()}.\n         *\n         * @param enabled {@code true} to enable, {@code false} to disable.\n         * @see CaptioningManager\n         ",
    "links" : [ "android.view.accessibility.CaptioningManager#getLocale" ]
  }, {
    "name" : "public void onUnblockContent(TvContentRating unblockedRating)",
    "returnType" : "void",
    "comment" : "\n         * Requests to unblock the content according to the given rating.\n         *\n         * <p>The implementation should unblock the content.\n         * TV input service has responsibility to decide when/how the unblock expires\n         * while it can keep previously unblocked ratings in order not to ask a user\n         * to unblock whenever a content rating is changed.\n         * Therefore an unblocked rating can be valid for a channel, a program,\n         * or certain amount of time depending on the implementation.\n         *\n         * @param unblockedRating An unblocked content rating\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSelectTrack(int type, @Nullable String trackId)",
    "returnType" : "boolean",
    "comment" : "\n         * Selects a given track.\n         *\n         * <p>If this is done successfully, the implementation should call\n         * {@link #notifyTrackSelected} to help applications maintain the up-to-date list of the\n         * selected tracks.\n         *\n         * @param trackId The ID of the track to select. {@code null} means to unselect the current\n         *            track for a given type.\n         * @param type The type of the track to select. The type can be\n         *            {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or\n         *            {@link TvTrackInfo#TYPE_SUBTITLE}.\n         * @return {@code true} if the track selection was successful, {@code false} otherwise.\n         * @see #notifyTrackSelected\n         ",
    "links" : [ "android.media.tv.TvTrackInfo#TYPE_VIDEO", "android.media.tv.TvTrackInfo#TYPE_SUBTITLE", "#notifyTrackSelected", "android.media.tv.TvTrackInfo#TYPE_AUDIO" ]
  }, {
    "name" : "public void onSetInteractiveAppNotificationEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Enables or disables interactive app notification.\n         *\n         * <p>This method enables or disables the event detection from the corresponding TV input.\n         * When it's enabled, the TV input service detects events related to interactive app, such\n         * as AIT (Application Information Table) and sends to TvView or the linked TV interactive\n         * app service.\n         *\n         * @param enabled {@code true} to enable, {@code false} to disable.\n         *\n         * @see TvView#setInteractiveAppNotificationEnabled(boolean)\n         * @see Session#notifyAitInfoUpdated(android.media.tv.AitInfo)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onSelectAudioPresentation(int presentationId, int programId)",
    "returnType" : "boolean",
    "comment" : "\n         * Selects an audio presentation.\n         *\n         * <p>On successfully selecting the audio presentation,\n         * {@link #notifyAudioPresentationSelected} is invoked to provide updated information about\n         * the selected audio presentation to applications.\n         *\n         * @param presentationId The ID of the audio presentation to select.\n         * @param programId The ID of the program providing the selected audio presentation.\n         * @return {@code true} if the audio presentation selection was successful,\n         *         {@code false} otherwise.\n         * @see #notifyAudioPresentationSelected\n         ",
    "links" : [ "#notifyAudioPresentationSelected" ]
  }, {
    "name" : "public void onAppPrivateCommand(@NonNull String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Processes a private command sent from the application to the TV input. This can be used\n         * to provide domain-specific features that are only known between certain TV inputs and\n         * their clients.\n         *\n         * @param action Name of the command to be performed. This <em>must</em> be a scoped name,\n         *            i.e. prefixed with a package name you own, so that different developers will\n         *            not create conflicting commands.\n         * @param data Any data to include with the command.\n         ",
    "links" : [ ]
  }, {
    "name" : "public View onCreateOverlayView()",
    "returnType" : "View",
    "comment" : "\n         * Called when the application requests to create an overlay view. Each session\n         * implementation can override this method and return its own view.\n         *\n         * @return a view attached to the overlay window\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onSetTvMessageEnabled(@TvInputManager.TvMessageType int type, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application enables or disables the detection of the specified message\n         * type.\n         * @param type The type of message received, such as\n         *             {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n         * @param enabled {@code true} if TV message detection is enabled,\n         *                {@code false} otherwise.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK" ]
  }, {
    "name" : "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Called when a TV message is received\n         *\n         * @param type The type of message received, such as\n         * {@link TvInputManager#TV_MESSAGE_TYPE_WATERMARK}\n         * @param data The raw data of the message. The bundle keys are:\n         *             {@link TvInputManager#TV_MESSAGE_KEY_STREAM_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_GROUP_ID},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE},\n         *             {@link TvInputManager#TV_MESSAGE_KEY_RAW_DATA}.\n         *             See {@link TvInputManager#TV_MESSAGE_KEY_SUBTYPE} for more information on\n         *             how to parse this data.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TV_MESSAGE_KEY_GROUP_ID", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_STREAM_ID", "android.media.tv.TvInputManager#TV_MESSAGE_TYPE_WATERMARK", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_SUBTYPE", "android.media.tv.TvInputManager#TV_MESSAGE_KEY_RAW_DATA" ]
  }, {
    "name" : "public void onStopPlayback(@TvInteractiveAppService.PlaybackCommandStopMode int mode)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests playback of the Audio, Video, and CC streams to be\n         * stopped, but the metadata should continue to be filtered.\n         *\n         * <p>The metadata that will continue to be filtered includes the PSI\n         * (Program specific information) and SI (Service Information), part of ISO/IEC 13818-1.\n         *\n         * <p> Note that this is different form {@link #timeShiftPause()} as should release the\n         * stream, making it impossible to resume from this position again.\n         * @param mode\n         ",
    "links" : [ "#timeShiftPause()" ]
  }, {
    "name" : "public void onResumePlayback()",
    "returnType" : "void",
    "comment" : "\n         * Resumes playback of the Audio, Video, and CC streams.\n         *\n         * <p> Note that this is different form {@link #timeShiftResume()} as this is intended to be\n         * used after stopping playback. This is used to resume playback from the current position\n         * in the live broadcast.\n         ",
    "links" : [ "#timeShiftResume()" ]
  }, {
    "name" : "public void onSetVideoFrozen(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * Called when a request to freeze the video is received from the TV app. The audio should\n         * continue playback while the video is frozen.\n         *\n         * <p> This should freeze the video to the last frame when the state is set to {@code true}.\n         * @param isFrozen whether or not the video should be frozen.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftPlay(Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to play a given recorded TV program.\n         *\n         * @param recordedProgramUri The URI of a recorded TV program.\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetStartPosition()\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftPause()",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to pause playback.\n         *\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetStartPosition()\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftResume()",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to resume playback.\n         *\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetStartPosition()\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftSeekTo(long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application requests to seek to a specified time position. Normally, the\n         * position is given within range between the start and the current time, inclusively. The\n         * implementation is expected to seek to the nearest time position if the given position is\n         * not in the range.\n         *\n         * @param timeMs The time position to seek to, in milliseconds since the epoch.\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetStartPosition()\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftSetPlaybackParams(PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application sets playback parameters containing the speed and audio mode.\n         *\n         * <p>Once the playback parameters are set, the implementation should honor the current\n         * settings until the next tune request. Pause/resume/seek request does not reset the\n         * parameters previously set.\n         *\n         * @param params The playback params.\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftGetStartPosition()\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onTimeShiftSetMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)",
    "returnType" : "void",
    "comment" : "\n         * Called when the application sets time shift mode.\n         *\n         * @param mode The time shift mode. The value is one of the following:\n         * {@link TvInputManager#TIME_SHIFT_MODE_OFF}, {@link TvInputManager#TIME_SHIFT_MODE_LOCAL},\n         * {@link TvInputManager#TIME_SHIFT_MODE_NETWORK},\n         * {@link TvInputManager#TIME_SHIFT_MODE_AUTO}.\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_MODE_AUTO", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_OFF", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_NETWORK", "android.media.tv.TvInputManager#TIME_SHIFT_MODE_LOCAL" ]
  }, {
    "name" : "public long onTimeShiftGetStartPosition()",
    "returnType" : "long",
    "comment" : "\n         * Returns the start position for time shifting, in milliseconds since the epoch.\n         * Returns {@link TvInputManager#TIME_SHIFT_INVALID_TIME} if the position is unknown at the\n         * moment.\n         *\n         * <p>The start position for time shifting indicates the earliest possible time the user can\n         * seek to. Initially this is equivalent to the time when the implementation starts\n         * recording. Later it may be adjusted because there is insufficient space or the duration\n         * of recording is limited by the implementation. The application does not allow the user to\n         * seek to a position earlier than the start position.\n         *\n         * <p>For playback of a recorded program initiated by {@link #onTimeShiftPlay(Uri)}, the\n         * start position should be 0 and does not change.\n         *\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetCurrentPosition()\n         ",
    "links" : [ "#onTimeShiftPlay(Uri)", "android.media.tv.TvInputManager#TIME_SHIFT_INVALID_TIME" ]
  }, {
    "name" : "public long onTimeShiftGetCurrentPosition()",
    "returnType" : "long",
    "comment" : "\n         * Returns the current position for time shifting, in milliseconds since the epoch.\n         * Returns {@link TvInputManager#TIME_SHIFT_INVALID_TIME} if the position is unknown at the\n         * moment.\n         *\n         * <p>The current position for time shifting is the same as the current position of\n         * playback. It should be equal to or greater than the start position reported by\n         * {@link #onTimeShiftGetStartPosition()}. When playback is completed, the current position\n         * should stay where the playback ends, in other words, the returned value of this mehtod\n         * should be equal to the start position plus the duration of the program.\n         *\n         * @see #onTimeShiftPlay(Uri)\n         * @see #onTimeShiftResume()\n         * @see #onTimeShiftPause()\n         * @see #onTimeShiftSeekTo(long)\n         * @see #onTimeShiftSetPlaybackParams(PlaybackParams)\n         * @see #onTimeShiftGetStartPosition()\n         ",
    "links" : [ "android.media.tv.TvInputManager#TIME_SHIFT_INVALID_TIME", "#onTimeShiftGetStartPosition()" ]
  }, {
    "name" : "public boolean onKeyDown(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Default implementation of {@link android.view.KeyEvent.Callback#onKeyDown(int, KeyEvent)\n         * KeyEvent.Callback.onKeyDown()}: always returns false (doesn't handle the event).\n         *\n         * <p>Override this to intercept key down events before they are processed by the\n         * application. If you return true, the application will not process the event itself. If\n         * you return false, the normal application processing will occur as if the TV input had not\n         * seen the event at all.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         ",
    "links" : [ "android.view.KeyEvent.Callback#onKeyDown(int" ]
  }, {
    "name" : "public boolean onKeyLongPress(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Default implementation of\n         * {@link android.view.KeyEvent.Callback#onKeyLongPress(int, KeyEvent)\n         * KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle the event).\n         *\n         * <p>Override this to intercept key long press events before they are processed by the\n         * application. If you return true, the application will not process the event itself. If\n         * you return false, the normal application processing will occur as if the TV input had not\n         * seen the event at all.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         ",
    "links" : [ "android.view.KeyEvent.Callback#onKeyLongPress(int" ]
  }, {
    "name" : "public boolean onKeyMultiple(int keyCode, int count, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Default implementation of\n         * {@link android.view.KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent)\n         * KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle the event).\n         *\n         * <p>Override this to intercept special key multiple events before they are processed by\n         * the application. If you return true, the application will not itself process the event.\n         * If you return false, the normal application processing will occur as if the TV input had\n         * not seen the event at all.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param count The number of times the action was made.\n         * @param event Description of the key event.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         ",
    "links" : [ "android.view.KeyEvent.Callback#onKeyMultiple(int" ]
  }, {
    "name" : "public boolean onKeyUp(int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Default implementation of {@link android.view.KeyEvent.Callback#onKeyUp(int, KeyEvent)\n         * KeyEvent.Callback.onKeyUp()}: always returns false (doesn't handle the event).\n         *\n         * <p>Override this to intercept key up events before they are processed by the application.\n         * If you return true, the application will not itself process the event. If you return false,\n         * the normal application processing will occur as if the TV input had not seen the event at\n         * all.\n         *\n         * @param keyCode The value in event.getKeyCode().\n         * @param event Description of the key event.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         ",
    "links" : [ "android.view.KeyEvent.Callback#onKeyUp(int" ]
  }, {
    "name" : "public boolean onTouchEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle touch screen motion events on the current input session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTouchEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onTrackballEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle trackball events on the current input session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onTrackballEvent\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onGenericMotionEvent(MotionEvent event)",
    "returnType" : "boolean",
    "comment" : "\n         * Implement this method to handle generic motion events on the current input session.\n         *\n         * @param event The motion event being received.\n         * @return If you handled the event, return {@code true}. If you want to allow the event to\n         *         be handled by the next receiver, return {@code false}.\n         * @see View#onGenericMotionEvent\n         ",
    "links" : [ ]
  }, {
    "name" : " void release()",
    "returnType" : "void",
    "comment" : "\n         * This method is called when the application would like to stop using the current input\n         * session.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setMain(boolean isMain)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetMain}.\n         ",
    "links" : [ "#onSetMain" ]
  }, {
    "name" : " void setSurface(Surface surface)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetSurface}.\n         ",
    "links" : [ "#onSetSurface" ]
  }, {
    "name" : " void dispatchSurfaceChanged(int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSurfaceChanged}.\n         ",
    "links" : [ "#onSurfaceChanged" ]
  }, {
    "name" : " void setStreamVolume(float volume)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetStreamVolume}.\n         ",
    "links" : [ "#onSetStreamVolume" ]
  }, {
    "name" : " void tune(Uri channelUri, Bundle params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTune(Uri, Bundle)}.\n         ",
    "links" : [ "#onTune(Uri" ]
  }, {
    "name" : " void setCaptionEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetCaptionEnabled}.\n         ",
    "links" : [ "#onSetCaptionEnabled" ]
  }, {
    "name" : " void selectAudioPresentation(int presentationId, int programId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSelectAudioPresentation}.\n         ",
    "links" : [ "#onSelectAudioPresentation" ]
  }, {
    "name" : " void selectTrack(int type, String trackId)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSelectTrack}.\n         ",
    "links" : [ "#onSelectTrack" ]
  }, {
    "name" : " void unblockContent(String unblockedRating)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onUnblockContent}.\n         ",
    "links" : [ "#onUnblockContent" ]
  }, {
    "name" : " void setInteractiveAppNotificationEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetInteractiveAppNotificationEnabled}.\n         ",
    "links" : [ "#onSetInteractiveAppNotificationEnabled" ]
  }, {
    "name" : " void setTvMessageEnabled(int type, boolean enabled)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetTvMessageEnabled(int, boolean)}.\n         ",
    "links" : [ "#onSetTvMessageEnabled(int" ]
  }, {
    "name" : " void appPrivateCommand(String action, Bundle data)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onAppPrivateCommand}.\n         ",
    "links" : [ "#onAppPrivateCommand" ]
  }, {
    "name" : " void createOverlayView(IBinder windowToken, Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Creates an overlay view. This calls {@link #onCreateOverlayView} to get a view to attach\n         * to the overlay window.\n         *\n         * @param windowToken A window token of the application.\n         * @param frame A position of the overlay view.\n         ",
    "links" : [ "#onCreateOverlayView" ]
  }, {
    "name" : " void relayoutOverlayView(Rect frame)",
    "returnType" : "void",
    "comment" : "\n         * Relayouts the current overlay view.\n         *\n         * @param frame A new position of the overlay view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void removeOverlayView(boolean clearWindowToken)",
    "returnType" : "void",
    "comment" : "\n         * Removes the current overlay view.\n         ",
    "links" : [ ]
  }, {
    "name" : " void stopPlayback(int mode)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onStopPlayback(int)}.\n         ",
    "links" : [ "#onStopPlayback(int)" ]
  }, {
    "name" : " void resumePlayback()",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onResumePlayback()}.\n         ",
    "links" : [ "#onResumePlayback()" ]
  }, {
    "name" : " void setVideoFrozen(boolean isFrozen)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onSetVideoFrozen(boolean)}.\n         ",
    "links" : [ "#onSetVideoFrozen(boolean)" ]
  }, {
    "name" : " void timeShiftPlay(Uri recordedProgramUri)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftPlay(Uri)}.\n         ",
    "links" : [ "#onTimeShiftPlay(Uri)" ]
  }, {
    "name" : " void timeShiftPause()",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftPause}.\n         ",
    "links" : [ "#onTimeShiftPause" ]
  }, {
    "name" : " void timeShiftResume()",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftResume}.\n         ",
    "links" : [ "#onTimeShiftResume" ]
  }, {
    "name" : " void timeShiftSeekTo(long timeMs)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftSeekTo}.\n         ",
    "links" : [ "#onTimeShiftSeekTo" ]
  }, {
    "name" : " void timeShiftSetPlaybackParams(PlaybackParams params)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftSetPlaybackParams}.\n         ",
    "links" : [ "#onTimeShiftSetPlaybackParams" ]
  }, {
    "name" : " void timeShiftSetMode(int mode)",
    "returnType" : "void",
    "comment" : "\n         * Calls {@link #onTimeShiftSetMode}.\n         ",
    "links" : [ "#onTimeShiftSetMode" ]
  }, {
    "name" : " void timeShiftEnablePositionTracking(boolean enable)",
    "returnType" : "void",
    "comment" : "\n         * Enable/disable position tracking.\n         *\n         * @param enable {@code true} to enable tracking, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : " void scheduleOverlayViewCleanup()",
    "returnType" : "void",
    "comment" : "\n         * Schedules a task which checks whether the overlay view is detached and kills the process\n         * if it is not. Note that this method is expected to be called in a non-main thread.\n         ",
    "links" : [ ]
  }, {
    "name" : " void requestBroadcastInfo(BroadcastInfoRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void removeBroadcastInfo(int requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void requestAd(AdRequest request)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyAdBufferReady(AdBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void notifyTvAdSessionData(String type, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void onTvMessageReceived(int type, Bundle data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)",
    "returnType" : "int",
    "comment" : "\n         * Takes care of dispatching incoming input events and tells whether the event was handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void initialize(ITvInputSessionCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void executeOrPostRunnableOnMainThread(Runnable action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setOverlayViewEnabled(final boolean enable)", "public void notifySessionEvent(@NonNull final String eventType, final Bundle eventArgs)", "public void notifyChannelRetuned(final Uri channelUri)", "public void notifyTuned(@NonNull Uri channelUri)", "public void notifyTracksChanged(final List<TvTrackInfo> tracks)", "public void notifyTrackSelected(final int type, final String trackId)", "public void notifyVideoAvailable()", "public void notifyVideoUnavailable(@TvInputManager.VideoUnavailableReason final int reason)", "public void notifyVideoFreezeUpdated(boolean isFrozen)", "public void notifyAudioPresentationChanged(@NonNull final List<AudioPresentation> audioPresentations)", "public void notifyAudioPresentationSelected(final int presentationId, final int programId)", "public void notifyContentAllowed()", "public void notifyContentBlocked(@NonNull final TvContentRating rating)", "public void notifyTimeShiftStatusChanged(@TvInputManager.TimeShiftStatus final int status)", "public void notifyBroadcastInfoResponse(@NonNull final BroadcastInfoResponse response)", "public void notifyAdResponse(@NonNull final AdResponse response)", "public void notifyAdBufferConsumed(@NonNull AdBuffer buffer)", "public void notifyTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)", "private void notifyTimeShiftStartPositionChanged(final long timeMs)", "private void notifyTimeShiftCurrentPositionChanged(final long timeMs)", "public void notifyAitInfoUpdated(@NonNull final AitInfo aitInfo)", "public void notifyTimeShiftMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)", "public void notifyAvailableSpeeds(@NonNull float[] speeds)", "public void notifySignalStrength(@TvInputManager.SignalStrength final int strength)", "public void notifyCueingMessageAvailability(boolean available)", "public void sendTvInputSessionData(@NonNull @TvInputManager.SessionDataType String type, @NonNull Bundle data)", "public void layoutSurface(final int left, final int top, final int right, final int bottom)", "public abstract void onRelease()", "public void onSetMain(boolean isMain)", "public abstract boolean onSetSurface(@Nullable Surface surface)", "public void onSurfaceChanged(int format, int width, int height)", "public void onOverlayViewSizeChanged(int width, int height)", "public abstract void onSetStreamVolume(@FloatRange(from = 0.0, to = 1.0) float volume)", "public void onRequestBroadcastInfo(@NonNull BroadcastInfoRequest request)", "public void onRemoveBroadcastInfo(int requestId)", "public void onRequestAd(@NonNull AdRequest request)", "public void onAdBufferReady(@NonNull AdBuffer buffer)", "public void onTvAdSessionData(@NonNull @TvAdManager.SessionDataType String type, @NonNull Bundle data)", "public abstract boolean onTune(Uri channelUri)", "public boolean onTune(Uri channelUri, Bundle params)", "public abstract void onSetCaptionEnabled(boolean enabled)", "public void onUnblockContent(TvContentRating unblockedRating)", "public boolean onSelectTrack(int type, @Nullable String trackId)", "public void onSetInteractiveAppNotificationEnabled(boolean enabled)", "public boolean onSelectAudioPresentation(int presentationId, int programId)", "public void onAppPrivateCommand(@NonNull String action, Bundle data)", "public View onCreateOverlayView()", "public void onSetTvMessageEnabled(@TvInputManager.TvMessageType int type, boolean enabled)", "public void onTvMessage(@TvInputManager.TvMessageType int type, @NonNull Bundle data)", "public void onStopPlayback(@TvInteractiveAppService.PlaybackCommandStopMode int mode)", "public void onResumePlayback()", "public void onSetVideoFrozen(boolean isFrozen)", "public void onTimeShiftPlay(Uri recordedProgramUri)", "public void onTimeShiftPause()", "public void onTimeShiftResume()", "public void onTimeShiftSeekTo(long timeMs)", "public void onTimeShiftSetPlaybackParams(PlaybackParams params)", "public void onTimeShiftSetMode(@android.media.tv.TvInputManager.TimeShiftMode int mode)", "public long onTimeShiftGetStartPosition()", "public long onTimeShiftGetCurrentPosition()", "public boolean onKeyDown(int keyCode, KeyEvent event)", "public boolean onKeyLongPress(int keyCode, KeyEvent event)", "public boolean onKeyMultiple(int keyCode, int count, KeyEvent event)", "public boolean onKeyUp(int keyCode, KeyEvent event)", "public boolean onTouchEvent(MotionEvent event)", "public boolean onTrackballEvent(MotionEvent event)", "public boolean onGenericMotionEvent(MotionEvent event)", " void release()", " void setMain(boolean isMain)", " void setSurface(Surface surface)", " void dispatchSurfaceChanged(int format, int width, int height)", " void setStreamVolume(float volume)", " void tune(Uri channelUri, Bundle params)", " void setCaptionEnabled(boolean enabled)", " void selectAudioPresentation(int presentationId, int programId)", " void selectTrack(int type, String trackId)", " void unblockContent(String unblockedRating)", " void setInteractiveAppNotificationEnabled(boolean enabled)", " void setTvMessageEnabled(int type, boolean enabled)", " void appPrivateCommand(String action, Bundle data)", " void createOverlayView(IBinder windowToken, Rect frame)", " void relayoutOverlayView(Rect frame)", " void removeOverlayView(boolean clearWindowToken)", " void stopPlayback(int mode)", " void resumePlayback()", " void setVideoFrozen(boolean isFrozen)", " void timeShiftPlay(Uri recordedProgramUri)", " void timeShiftPause()", " void timeShiftResume()", " void timeShiftSeekTo(long timeMs)", " void timeShiftSetPlaybackParams(PlaybackParams params)", " void timeShiftSetMode(int mode)", " void timeShiftEnablePositionTracking(boolean enable)", " void scheduleOverlayViewCleanup()", " void requestBroadcastInfo(BroadcastInfoRequest request)", " void removeBroadcastInfo(int requestId)", " void requestAd(AdRequest request)", " void notifyAdBufferReady(AdBuffer buffer)", " void notifyTvAdSessionData(String type, Bundle data)", " void onTvMessageReceived(int type, Bundle data)", " int dispatchInputEvent(InputEvent event, InputEventReceiver receiver)", "private void initialize(ITvInputSessionCallback callback)", "private void executeOrPostRunnableOnMainThread(Runnable action)" ],
  "variableNames" : [ "POSITION_UPDATE_INTERVAL_MS", "mDispatcherState", "mWindowManager", "mHandler", "mWindowParams", "mSurface", "mContext", "mOverlayViewContainer", "mOverlayView", "mOverlayViewCleanUpTask", "mOverlayViewEnabled", "mWindowToken", "mOverlayFrame", "mStartPositionMs", "mCurrentPositionMs", "mTimeShiftPositionTrackingRunnable", "mLock", "mSessionCallback", "mPendingActions" ]
}