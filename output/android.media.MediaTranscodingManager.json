{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaTranscodingManager.java",
  "packageName" : "android.media",
  "className" : "MediaTranscodingManager",
  "comment" : "\n Android 12 introduces Compatible media transcoding feature.  See\n <a href=\"https://developer.android.com/about/versions/12/features#compatible_media_transcoding\">\n Compatible media transcoding</a>. MediaTranscodingManager provides an interface to the system's media\n transcoding service and can be used to transcode media files, e.g. transcoding a video from HEVC to\n AVC.\n\n <h3>Transcoding Types</h3>\n <h4>Video Transcoding</h4>\n When transcoding a video file, the video track will be transcoded based on the desired track format\n and the audio track will be pass through without any modification.\n <p class=note>\n Note that currently only support transcoding video file in mp4 format and with single video track.\n\n <h3>Transcoding Request</h3>\n <p>\n To transcode a media file, first create a {@link TranscodingRequest} through its builder class\n {@link VideoTranscodingRequest.Builder}. Transcode requests are then enqueue to the manager through\n {@link MediaTranscodingManager#enqueueRequest(\n         TranscodingRequest, Executor, OnTranscodingFinishedListener)}\n TranscodeRequest are processed based on client process's priority and request priority. When a\n transcode operation is completed the caller is notified via its\n {@link OnTranscodingFinishedListener}.\n In the meantime the caller may use the returned TranscodingSession object to cancel or check the\n status of a specific transcode operation.\n <p>\n Here is an example where <code>Builder</code> is used to specify all parameters\n\n <pre class=prettyprint>\n VideoTranscodingRequest request =\n    new VideoTranscodingRequest.Builder(srcUri, dstUri, videoFormat).build();\n }</pre>\n @hide\n ",
  "links" : [ "VideoTranscodingRequest.Builder", "OnTranscodingFinishedListener", "TranscodingRequest", "android.media.MediaTranscodingManager#enqueueRequest(" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECT_SERVICE_RETRY_COUNT",
    "type" : "int",
    "comment" : " Maximum number of retry to connect to the service. ",
    "links" : [ ]
  }, {
    "name" : "INTERVAL_CONNECT_SERVICE_RETRY_MS",
    "type" : "int",
    "comment" : " Interval between trying to reconnect to the service. ",
    "links" : [ ]
  }, {
    "name" : "BPP",
    "type" : "float",
    "comment" : " Default bpp(bits-per-pixel) to use for calculating default bitrate. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContentResolver",
    "type" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "ExecutorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingTranscodingSessions",
    "type" : "HashMap<Integer, TranscodingSession>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTranscodingClient",
    "type" : "ITranscodingClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMediaTranscodingManager",
    "type" : "MediaTranscodingManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTranscodingClientCallback",
    "type" : "ITranscodingClientCallback",
    "comment" : " Just forwards all the events to the event handler.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void handleTranscodingFinished(int sessionId, TranscodingResultParcel result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTranscodingFailed(int sessionId, int errorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void handleTranscodingProgressUpdate(int sessionId, int newProgress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private IMediaTranscodingService getService(boolean retry)",
    "returnType" : "IMediaTranscodingService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onClientDied()",
    "returnType" : "void",
    "comment" : "\n     * Handle client binder died event.\n     * Upon receiving a binder died event of the client, we will do the following:\n     * 1) For the session that is running, notify the client that the session is failed with\n     *    error code,  so client could choose to retry the session or not.\n     *    TODO(hkuang): Add a new error code to signal service died error.\n     * 2) For the sessions that is still pending or paused, we will resubmit the session\n     *    once we successfully reconnect to the service and register a new client.\n     * 3) When trying to connect to the service and register a new client. The service may need time\n     *    to reboot or never boot up again. So we will retry for a number of times. If we still\n     *    could not connect, we will notify client session failure for the pending and paused\n     *    sessions.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateStatus(int sessionId, int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ITranscodingClient registerClient(IMediaTranscodingService service)",
    "returnType" : "ITranscodingClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ITranscodingClient getTranscodingClient()",
    "returnType" : "ITranscodingClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public TranscodingSession enqueueRequest(@NonNull TranscodingRequest transcodingRequest, @NonNull @CallbackExecutor Executor listenerExecutor, @NonNull OnTranscodingFinishedListener listener)",
    "returnType" : "TranscodingSession",
    "comment" : "\n     * Enqueues a TranscodingRequest for execution.\n     * <p> Upon successfully accepting the request, MediaTranscodingManager will return a\n     * {@link TranscodingSession} to the client. Client should use {@link TranscodingSession} to\n     * track the progress and get the result.\n     * <p> MediaTranscodingManager will return null if fails to accept the request due to service\n     * rebooting. Client could retry again after receiving null.\n     *\n     * @param transcodingRequest The TranscodingRequest to enqueue.\n     * @param listenerExecutor   Executor on which the listener is notified.\n     * @param listener           Listener to get notified when the transcoding session is finished.\n     * @return A TranscodingSession for this operation.\n     * @throws UnsupportedOperationException if the request could not be fulfilled.\n     ",
    "links" : [ "android.media.TranscodingSession" ]
  } ],
  "methodNames" : [ "private void handleTranscodingFinished(int sessionId, TranscodingResultParcel result)", "private void handleTranscodingFailed(int sessionId, int errorCode)", "private void handleTranscodingProgressUpdate(int sessionId, int newProgress)", "private IMediaTranscodingService getService(boolean retry)", "private void onClientDied()", "private void updateStatus(int sessionId, int status)", "private ITranscodingClient registerClient(IMediaTranscodingService service)", "private ITranscodingClient getTranscodingClient()", "public TranscodingSession enqueueRequest(@NonNull TranscodingRequest transcodingRequest, @NonNull @CallbackExecutor Executor listenerExecutor, @NonNull OnTranscodingFinishedListener listener)" ],
  "variableNames" : [ "TAG", "CONNECT_SERVICE_RETRY_COUNT", "INTERVAL_CONNECT_SERVICE_RETRY_MS", "BPP", "mContext", "mContentResolver", "mPackageName", "mPid", "mUid", "mExecutor", "mPendingTranscodingSessions", "mLock", "mTranscodingClient", "sMediaTranscodingManager", "mTranscodingClientCallback" ]
}