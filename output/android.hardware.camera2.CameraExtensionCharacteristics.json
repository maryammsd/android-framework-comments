{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraExtensionCharacteristics.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraExtensionCharacteristics",
  "comment" : "\n * <p>Allows clients to query availability and supported resolutions of camera extensions.</p>\n *\n * <p>Camera extensions give camera clients access to device-specific algorithms and sequences that\n * can improve the overall image quality of snapshots in various cases such as low light, selfies,\n * portraits, and scenes that can benefit from enhanced dynamic range. Often such sophisticated\n * processing sequences will rely on multiple camera frames as input and will produce a single\n * output.</p>\n *\n * <p>Camera extensions are not guaranteed to be present on all devices so camera clients must\n * query for their availability via {@link CameraExtensionCharacteristics#getSupportedExtensions()}.\n * </p>\n *\n * <p>In order to use any available camera extension, camera clients must create a corresponding\n * {@link CameraExtensionSession} via\n * {@link CameraDevice#createExtensionSession(ExtensionSessionConfiguration)}</p>\n *\n * <p>Camera clients must be aware that device-specific camera extensions may support only a\n * subset of the available camera resolutions and must first query\n * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)} for supported\n * single high-quality request output sizes and\n * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)} for supported\n * repeating request output sizes.</p>\n *\n * <p>The extension characteristics for a given device are expected to remain static under\n * normal operating conditions.</p>\n *\n * @see CameraManager#getCameraExtensionCharacteristics(String)\n ",
  "links" : [ "android.hardware.camera2.CameraExtensionSession", "android.hardware.camera2.CameraDevice#createExtensionSession(ExtensionSessionConfiguration)", "android.hardware.camera2.CameraExtensionCharacteristics#getSupportedExtensions()", "android.hardware.camera2.CameraExtensionCharacteristics#getExtensionSupportedSizes(int" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_AUTOMATIC",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation for automatic selection of particular extension\n     * such as HDR or NIGHT depending on the current lighting and environment conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_FACE_RETOUCH",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation which tends to smooth the skin and apply other\n     * cosmetic effects to people's faces.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_BEAUTY",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation which tends to smooth the skin and apply other\n     * cosmetic effects to people's faces.\n     *\n     * @deprecated Use {@link #EXTENSION_FACE_RETOUCH} instead.\n     ",
    "links" : [ "#EXTENSION_FACE_RETOUCH" ]
  }, {
    "name" : "EXTENSION_BOKEH",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation which can blur certain regions of the final image\n     * thereby \"enhancing\" focus for all remaining non-blurred parts.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_HDR",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation for enhancing the dynamic range of the\n     * final image.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_NIGHT",
    "type" : "int",
    "comment" : "\n     * Device-specific extension implementation that aims to suppress noise and improve the\n     * overall image quality under low light conditions.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_EYES_FREE_VIDEOGRAPHY",
    "type" : "int",
    "comment" : "\n     * An extension that aims to lock and stabilize a given region or object of interest.\n     ",
    "links" : [ ]
  }, {
    "name" : "NON_PROCESSING_INPUT_FORMAT",
    "type" : "int",
    "comment" : "\n     * Default camera output in case additional processing from CameraX extensions is not needed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROCESSING_INPUT_FORMAT",
    "type" : "int",
    "comment" : "\n     * CameraX extensions require YUV_420_888 as default input for processing at the moment\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTENSION_LIST",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_SYNTHETIC_CAMERA_CHARACTERISTICS",
    "type" : "List<CameraCharacteristics.Key>",
    "comment" : "\n     * List of synthetic CameraCharacteristics keys that are supported in the extensions.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCameraId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacteristicsMap",
    "type" : "Map<String, CameraCharacteristics>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacteristicsMapNative",
    "type" : "Map<String, CameraMetadataNative>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EFV_PADDING_ZOOM_FACTOR_RANGE",
    "type" : "Key<android.util.Range<Float>>",
    "comment" : "\n     * <p>Minimum and maximum padding zoom factors supported by this camera device for\n     * {@link android.hardware.camera2.ExtensionCaptureRequest#EFV_PADDING_ZOOM_FACTOR } used for\n     * the {@link android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_EYES_FREE_VIDEOGRAPHY }\n     * extension.</p>\n     * <p>The minimum and maximum padding zoom factors supported by the device for\n     * {@link android.hardware.camera2.ExtensionCaptureRequest#EFV_PADDING_ZOOM_FACTOR } used as part of the\n     * {@link android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_EYES_FREE_VIDEOGRAPHY }\n     * extension feature. This extension specific camera characteristic can be queried using\n     * {@link android.hardware.camera2.CameraExtensionCharacteristics#get}.</p>\n     * <p><b>Units</b>: A pair of padding zoom factors in floating-points:\n     * (minPaddingZoomFactor, maxPaddingZoomFactor)</p>\n     * <p><b>Range of valid values:</b><br></p>\n     * <p>1.0 &lt; minPaddingZoomFactor &lt;= maxPaddingZoomFactor</p>\n     * <p><b>Optional</b> - The value for this key may be {@code null} on some devices.</p>\n     ",
    "links" : [ "android.hardware.camera2.ExtensionCaptureRequest#EFV_PADDING_ZOOM_FACTOR", "android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_EYES_FREE_VIDEOGRAPHY", "android.hardware.camera2.CameraExtensionCharacteristics#get" ]
  } ],
  "methods" : [ {
    "name" : "private static ArrayList<Size> getSupportedSizes(List<SizeList> sizesList, Integer format)",
    "returnType" : "ArrayList<Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Size> generateSupportedSizes(List<SizeList> sizesList, Integer format, StreamConfigurationMap streamMap)",
    "returnType" : "List<Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<Size> generateJpegSupportedSizes(List<SizeList> sizesList, StreamConfigurationMap streamMap)",
    "returnType" : "List<Size>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean registerClient(Context ctx, IBinder token, int extension, String cameraId, Map<String, CameraMetadataNative> characteristicsMapNative)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void unregisterClient(Context ctx, IBinder token, int extension)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initializeSession(IInitializeSessionCallback cb, int extension) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void releaseSession(int extension)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAdvancedExtensionsSupported(int extension)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isExtensionSupported(String cameraId, int extensionType, Map<String, CameraMetadataNative> characteristicsMap)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IAdvancedExtenderImpl initializeAdvancedExtension(@Extension int extensionType)",
    "returnType" : "IAdvancedExtenderImpl",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pair<IPreviewExtenderImpl, IImageCaptureExtenderImpl> initializeExtension(@Extension int extensionType)",
    "returnType" : "Pair<IPreviewExtenderImpl, IImageCaptureExtenderImpl>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isOutputSupportedFor(Class<T> klass)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getSupportedExtensions()",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Return a list of supported device-specific extensions for a given camera device.\n     *\n     * @return non-modifiable list of available extensions\n     ",
    "links" : [ ]
  }, {
    "name" : "public T get(@Extension int extension, @NonNull CameraCharacteristics.Key<T> key)",
    "returnType" : "T",
    "comment" : "\n     * Gets an extension specific camera characteristics field value.\n     *\n     * <p>An extension can have a reduced set of camera capabilities (such as limited zoom ratio\n     * range, available video stabilization modes, etc). This API enables applications to query for\n     * an extension’s specific camera characteristics. Applications are recommended to prioritize\n     * obtaining camera characteristics using this API when using an extension. A {@code null}\n     * result indicates that the extension specific characteristic is not defined or available.\n     *\n     * @param extension The extension type.\n     * @param key The characteristics field to read.\n     * @return The value of that key, or {@code null} if the field is not set.\n     *\n     * @throws IllegalArgumentException if the key is not valid or extension type is not a supported\n     * device-specific extension.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<CameraCharacteristics.Key> getKeys(@Extension int extension)",
    "returnType" : "Set<CameraCharacteristics.Key>",
    "comment" : "\n     * Returns the {@link CameraCharacteristics} keys that have extension-specific values.\n     *\n     * <p>An application can query the value from the key using\n     * {@link #get(int, CameraCharacteristics.Key)} API.\n     *\n     * @param extension The extension type.\n     * @return An unmodifiable set of keys that are extension specific.\n     *\n     * @throws IllegalArgumentException in case the extension type is not a\n     * supported device-specific extension\n     ",
    "links" : [ "#get(int", "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "public boolean isPostviewAvailable(@Extension int extension)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks for postview support of still capture.\n     *\n     * <p>A postview is a preview version of the still capture that is available before the final\n     * image. For example, it can be used as a temporary placeholder for the requested capture\n     * while the final image is being processed. The supported sizes for a still capture's postview\n     * can be retrieved using\n     * {@link CameraExtensionCharacteristics#getPostviewSupportedSizes(int, Size, int)}.</p>\n     *\n     * <p>Starting with Android {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM},\n     * the formats of the still capture and postview are not required to be equivalent upon capture\n     * request.</p>\n     *\n     * @param extension the extension type\n     * @return {@code true} in case postview is supported, {@code false} otherwise\n     *\n     * @throws IllegalArgumentException in case the extension type is not a\n     * supported device-specific extension\n     ",
    "links" : [ "android.hardware.camera2.CameraExtensionCharacteristics#getPostviewSupportedSizes(int", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM" ]
  }, {
    "name" : "public List<Size> getPostviewSupportedSizes(@Extension int extension, @NonNull Size captureSize, int format)",
    "returnType" : "List<Size>",
    "comment" : "\n     * Get a list of the postview sizes supported for a still capture, using its\n     * capture size {@code captureSize}, to use as an output for the postview request.\n     *\n     * <p>Available postview sizes will always be either equal to or less than the still\n     * capture size. When choosing the most applicable postview size for a usecase, it should\n     * be noted that lower resolution postviews will generally be available more quickly\n     * than larger resolution postviews. For example, when choosing a size for an optimized\n     * postview that will be displayed as a placeholder while the final image is processed,\n     * the resolution closest to the preview size may be most suitable.</p>\n     *\n     * <p>Note that device-specific extensions are allowed to support only a subset\n     * of the camera resolutions advertised by\n     * {@link StreamConfigurationMap#getOutputSizes}.</p>\n     *\n     * @param extension the extension type\n     * @param captureSize size of the still capture for which the postview is requested\n     * @param format device-specific extension output format of the postview\n     * @return non-modifiable list of available sizes or an empty list if the format and\n     * size is not supported.\n     * @throws IllegalArgumentException in case of unsupported extension or if postview\n     * feature is not supported by extension.\n     ",
    "links" : [ "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes" ]
  }, {
    "name" : "public List<Size> getExtensionSupportedSizes(@Extension int extension, @NonNull Class<T> klass)",
    "returnType" : "List<Size>",
    "comment" : "\n     * Get a list of sizes compatible with {@code klass} to use as an output for the\n     * repeating request\n     * {@link CameraExtensionSession#setRepeatingRequest}.\n     *\n     * <p>Note that device-specific extensions are allowed to support only a subset\n     * of the camera output surfaces and resolutions.\n     * The {@link android.graphics.SurfaceTexture} class is guaranteed at least one size for\n     * backward compatible cameras whereas other output classes are not guaranteed to be supported.\n     * </p>\n     *\n     * <p>Starting with Android {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}\n     * {@link android.view.SurfaceView} classes are also guaranteed to be supported and include\n     * the same resolutions as {@link android.graphics.SurfaceTexture}.\n     * Clients must set the desired SurfaceView resolution by calling\n     * {@link android.view.SurfaceHolder#setFixedSize}.</p>\n     *\n     * @param extension the extension type\n     * @param klass     a non-{@code null} {@link Class} object reference\n     * @return non-modifiable list of available sizes or an empty list if the Surface output is not\n     * supported\n     * @throws NullPointerException     if {@code klass} was {@code null}\n     * @throws IllegalArgumentException in case of  unsupported extension.\n     ",
    "links" : [ "android.hardware.camera2.CameraExtensionSession#setRepeatingRequest", "android.graphics.SurfaceTexture", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.view.SurfaceView", "android.view.SurfaceHolder#setFixedSize", "Class" ]
  }, {
    "name" : "public List<Size> getExtensionSupportedSizes(@Extension int extension, int format)",
    "returnType" : "List<Size>",
    "comment" : "\n     * Check whether a given extension is available and return the\n     * supported output surface resolutions that can be used for high-quality capture\n     * requests via {@link CameraExtensionSession#capture}.\n     *\n     * <p>Note that device-specific extensions are allowed to support only a subset\n     * of the camera resolutions advertised by\n     * {@link StreamConfigurationMap#getOutputSizes}.</p>\n     *\n     * <p>Device-specific extensions currently support at most three\n     * multi-frame capture surface formats. ImageFormat.JPEG will be supported by all\n     * extensions while ImageFormat.YUV_420_888, ImageFormat.JPEG_R, or ImageFormat.YCBCR_P010\n     * may or may not be supported.</p>\n     *\n     * @param extension the extension type\n     * @param format    device-specific extension output format\n     * @return non-modifiable list of available sizes or an empty list if the format is not\n     * supported.\n     * @throws IllegalArgumentException in case of format different from ImageFormat.JPEG,\n     *                                  ImageFormat.YUV_420_888, ImageFormat.JPEG_R,\n     *                                  ImageFormat.YCBCR_P010; or unsupported extension.\n     ",
    "links" : [ "android.hardware.camera2.CameraExtensionSession#capture", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes" ]
  }, {
    "name" : "public Range<Long> getEstimatedCaptureLatencyRangeMillis(@Extension int extension, @NonNull Size captureOutputSize, @ImageFormat.Format int format)",
    "returnType" : "Range<Long>",
    "comment" : "\n     * Returns the estimated capture latency range in milliseconds for the\n     * target capture resolution during the calls to {@link CameraExtensionSession#capture}. This\n     * includes the time spent processing the multi-frame capture request along with any additional\n     * time for encoding of the processed buffer if necessary.\n     *\n     * @param extension         the extension type\n     * @param captureOutputSize size of the capture output surface. If it is not in the supported\n     *                          output sizes, maximum capture output size is used for the estimation\n     * @param format            device-specific extension output format\n     * @return the range of estimated minimal and maximal capture latency in milliseconds\n     * or null if no capture latency info can be provided\n     * @throws IllegalArgumentException in case of format different from {@link ImageFormat#JPEG},\n     *                                  {@link ImageFormat#YUV_420_888}, {@link ImageFormat#JPEG_R}\n     *                                  {@link ImageFormat#YCBCR_P010};\n     *                                  or unsupported extension.\n     ",
    "links" : [ "android.hardware.camera2.CameraExtensionSession#capture", "android.graphics.ImageFormat#JPEG", "android.graphics.ImageFormat#JPEG_R", "android.graphics.ImageFormat#YCBCR_P010", "android.graphics.ImageFormat#YUV_420_888" ]
  }, {
    "name" : "public boolean isCaptureProcessProgressAvailable(@Extension int extension)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieve support for capture progress callbacks via\n     *  {@link CameraExtensionSession.ExtensionCaptureCallback#onCaptureProcessProgressed}.\n     *\n     * @param extension         the extension type\n     * @return {@code true} in case progress callbacks are supported, {@code false} otherwise\n     *\n     * @throws IllegalArgumentException in case of an unsupported extension.\n     ",
    "links" : [ "CameraExtensionSession.ExtensionCaptureCallback#onCaptureProcessProgressed" ]
  }, {
    "name" : "public Set<CaptureRequest.Key> getAvailableCaptureRequestKeys(@Extension int extension)",
    "returnType" : "Set<CaptureRequest.Key>",
    "comment" : "\n     * Returns the set of keys supported by a {@link CaptureRequest} submitted in a\n     * {@link CameraExtensionSession} with a given extension type.\n     *\n     * <p>The set returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>Devices launching on Android {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}\n     * or newer versions are required to support {@link CaptureRequest#CONTROL_AF_MODE},\n     * {@link CaptureRequest#CONTROL_AF_REGIONS}, {@link CaptureRequest#CONTROL_AF_TRIGGER},\n     * {@link CaptureRequest#CONTROL_ZOOM_RATIO} for\n     * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT}.</p>\n     *\n     * @param extension the extension type\n     *\n     * @return non-modifiable set of capture keys supported by camera extension session initialized\n     *         with the given extension type.\n     * @throws IllegalArgumentException in case of unsupported extension.\n     ",
    "links" : [ "android.hardware.camera2.CameraExtensionSession", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.hardware.camera2.CaptureRequest#CONTROL_AF_MODE", "android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_NIGHT", "android.hardware.camera2.CaptureRequest", "android.hardware.camera2.CaptureRequest#CONTROL_AF_TRIGGER", "android.hardware.camera2.CaptureRequest#CONTROL_ZOOM_RATIO", "android.hardware.camera2.CaptureRequest#CONTROL_AF_REGIONS" ]
  }, {
    "name" : "public Set<CaptureResult.Key> getAvailableCaptureResultKeys(@Extension int extension)",
    "returnType" : "Set<CaptureResult.Key>",
    "comment" : "\n     * Returns the set of keys supported by a {@link CaptureResult} passed as an argument to\n     * {@link CameraExtensionSession.ExtensionCaptureCallback#onCaptureResultAvailable}.\n     *\n     * <p>The set returned is not modifiable, so any attempts to modify it will throw\n     * a {@code UnsupportedOperationException}.</p>\n     *\n     * <p>In case the set is empty, then the extension is not able to support any capture results\n     * and the {@link CameraExtensionSession.ExtensionCaptureCallback#onCaptureResultAvailable}\n     * callback will not be fired.</p>\n     *\n     * <p>Devices launching on Android {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}\n     * or newer versions are required to support {@link CaptureResult#CONTROL_AF_MODE},\n     * {@link CaptureResult#CONTROL_AF_REGIONS}, {@link CaptureResult#CONTROL_AF_TRIGGER},\n     * {@link CaptureResult#CONTROL_AF_STATE}, {@link CaptureResult#CONTROL_ZOOM_RATIO} for\n     * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT}.</p>\n     *\n     * @param extension the extension type\n     *\n     * @return non-modifiable set of capture result keys supported by camera extension session\n     *         initialized with the given extension type.\n     * @throws IllegalArgumentException in case of unsupported extension.\n     ",
    "links" : [ "android.hardware.camera2.CaptureResult", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.hardware.camera2.CaptureResult#CONTROL_AF_REGIONS", "android.hardware.camera2.CaptureResult#CONTROL_AF_TRIGGER", "android.hardware.camera2.CaptureResult#CONTROL_AF_STATE", "CameraExtensionSession.ExtensionCaptureCallback#onCaptureResultAvailable", "android.hardware.camera2.CaptureResult#CONTROL_ZOOM_RATIO", "android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_NIGHT", "android.hardware.camera2.CaptureResult#CONTROL_AF_MODE" ]
  } ],
  "methodNames" : [ "private static ArrayList<Size> getSupportedSizes(List<SizeList> sizesList, Integer format)", "private static List<Size> generateSupportedSizes(List<SizeList> sizesList, Integer format, StreamConfigurationMap streamMap)", "private static List<Size> generateJpegSupportedSizes(List<SizeList> sizesList, StreamConfigurationMap streamMap)", "public static boolean registerClient(Context ctx, IBinder token, int extension, String cameraId, Map<String, CameraMetadataNative> characteristicsMapNative)", "public static void unregisterClient(Context ctx, IBinder token, int extension)", "public static void initializeSession(IInitializeSessionCallback cb, int extension) throws RemoteException", "public static void releaseSession(int extension)", "public static boolean areAdvancedExtensionsSupported(int extension)", "public static boolean isExtensionSupported(String cameraId, int extensionType, Map<String, CameraMetadataNative> characteristicsMap)", "public static IAdvancedExtenderImpl initializeAdvancedExtension(@Extension int extensionType)", "public static Pair<IPreviewExtenderImpl, IImageCaptureExtenderImpl> initializeExtension(@Extension int extensionType)", "private static boolean isOutputSupportedFor(Class<T> klass)", "public List<Integer> getSupportedExtensions()", "public T get(@Extension int extension, @NonNull CameraCharacteristics.Key<T> key)", "public Set<CameraCharacteristics.Key> getKeys(@Extension int extension)", "public boolean isPostviewAvailable(@Extension int extension)", "public List<Size> getPostviewSupportedSizes(@Extension int extension, @NonNull Size captureSize, int format)", "public List<Size> getExtensionSupportedSizes(@Extension int extension, @NonNull Class<T> klass)", "public List<Size> getExtensionSupportedSizes(@Extension int extension, int format)", "public Range<Long> getEstimatedCaptureLatencyRangeMillis(@Extension int extension, @NonNull Size captureOutputSize, @ImageFormat.Format int format)", "public boolean isCaptureProcessProgressAvailable(@Extension int extension)", "public Set<CaptureRequest.Key> getAvailableCaptureRequestKeys(@Extension int extension)", "public Set<CaptureResult.Key> getAvailableCaptureResultKeys(@Extension int extension)" ],
  "variableNames" : [ "TAG", "EXTENSION_AUTOMATIC", "EXTENSION_FACE_RETOUCH", "EXTENSION_BEAUTY", "EXTENSION_BOKEH", "EXTENSION_HDR", "EXTENSION_NIGHT", "EXTENSION_EYES_FREE_VIDEOGRAPHY", "NON_PROCESSING_INPUT_FORMAT", "PROCESSING_INPUT_FORMAT", "EXTENSION_LIST", "SUPPORTED_SYNTHETIC_CAMERA_CHARACTERISTICS", "mContext", "mCameraId", "mCharacteristicsMap", "mCharacteristicsMapNative", "EFV_PADDING_ZOOM_FACTOR_RANGE" ]
}