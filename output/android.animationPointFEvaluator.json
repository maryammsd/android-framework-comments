{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/PointFEvaluator.java",
  "packageName" : "android.animation",
  "className" : "PointFEvaluator",
  "comment" : "\n * This evaluator can be used to perform type interpolation between <code>PointF</code> values.\n ",
  "variables" : [ {
    "name" : "mPoint",
    "type" : "PointF",
    "comment" : "\n     * When null, a new PointF is returned on every evaluate call. When non-null,\n     * mPoint will be modified and returned on every evaluate.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PointF evaluate(float fraction, PointF startValue, PointF endValue)",
    "returnType" : "PointF",
    "comment" : "\n     * This function returns the result of linearly interpolating the start and\n     * end PointF values, with <code>fraction</code> representing the proportion\n     * between the start and end values. The calculation is a simple parametric\n     * calculation on each of the separate components in the PointF objects\n     * (x, y).\n     *\n     * <p>If {@link #PointFEvaluator(android.graphics.PointF)} was used to construct\n     * this PointFEvaluator, the object returned will be the <code>reuse</code>\n     * passed into the constructor.</p>\n     *\n     * @param fraction   The fraction from the starting to the ending values\n     * @param startValue The start PointF\n     * @param endValue   The end PointF\n     * @return A linear interpolation between the start and end values, given the\n     *         <code>fraction</code> parameter.\n     ",
    "links" : [ "#PointFEvaluator" ]
  } ],
  "variableNames" : [ "mPoint" ],
  "methodNames" : [ "public PointF evaluate(float fraction, PointF startValue, PointF endValue)" ]
}