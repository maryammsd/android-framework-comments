{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/duration/BasicPeriodFormatterFactory.java",
  "packageName" : "android.icu.impl.duration",
  "className" : "BasicPeriodFormatterFactory",
  "comment" : "\n * An implementation of PeriodFormatterFactory that provides customization of\n * formatting behavior. Instances of this factory are created by\n * BasicPeriodFormatterService.\n *\n * The settings on BasicPeriodFormatterFactory are:\n * <ul>\n *\n * <li><b>setDisplayLimit</b> controls whether phrases like 'more than'\n * or 'less than' will be displayed when the Period has a defined\n * limit.  Default is to display them.</li>\n *\n * <li><b>setDisplayPastFuture</b> controls whether phrases like 'ago'\n * or 'from now' will be displayed to indicate past or future\n * time. Default is to display them.</li>\n *\n * <li><b>setSeparatorVariant</b> controls how separators (between\n * count and period, and multiple periods) will be displayed, when\n * appropriate for the language. Default is to use full\n * separators.</li>\n *\n * <li><b>setUnitVariant</b> controls which of various types of\n * unit names to use.  PLURALIZED indicates that full names will be\n * used.  MEDIUM indicates that medium-length (usually 2-3 character)\n * names will be used.  SHORT indicates that short (usually single\n * character) names will be used.  If there is no localization data\n * available for either the SHORT or MEDIUM names, the other will be\n * used, if neither is available, the PLURALIZED names will be used.\n * Default is PLURALIZED.</li>\n *\n * <li><b>setCountVariant</b> controls how the count for the smallest\n * unit will be formatted: either as an integer, a fraction to the\n * smallest half, or as a decimal with 1, 2, or 3 decimal points.</li>\n * Counts for higher units will be formatted as integers.\n *\n * </ul>\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ds",
    "type" : "PeriodFormatterDataService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "data",
    "type" : "PeriodFormatterData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "customizations",
    "type" : "Customizations",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "customizationsInUse",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "localeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static BasicPeriodFormatterFactory getDefault()",
    "returnType" : "BasicPeriodFormatterFactory",
    "comment" : "\n   * Return the default rdf factory as a BasicPeriodFormatterFactory.\n   *\n   * @return a default BasicPeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setLocale(String localeName)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the locale for this factory.\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setDisplayLimit(boolean display)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set whether limits will be displayed.\n   *\n   * @param display true if limits will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisplayLimit()",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if limits will be displayed.\n   *\n   * @return true if limits will be displayed\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setDisplayPastFuture(boolean display)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set whether past and future will be displayed.\n   *\n   * @param display true if past and future will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisplayPastFuture()",
    "returnType" : "boolean",
    "comment" : "\n   * Return true if past and future will be displayed.\n   *\n   * @return true if past and future will be displayed\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setSeparatorVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set how separators will be displayed.\n   *\n   * @param variant the variant indicating separators will be displayed\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getSeparatorVariant()",
    "returnType" : "int",
    "comment" : "\n   * Return the variant indicating how separators will be displayed.\n   *\n   * @return the variant\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setUnitVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the variant of the time unit names to use.\n   *\n   * @param variant the variant to use\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getUnitVariant()",
    "returnType" : "int",
    "comment" : "\n   * Return the unit variant.\n   *\n   * @return the unit variant\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatterFactory setCountVariant(int variant)",
    "returnType" : "PeriodFormatterFactory",
    "comment" : "\n   * Set the variant of the count to use.\n   *\n   * @param variant the variant to use\n   * @return this PeriodFormatterFactory\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCountVariant()",
    "returnType" : "int",
    "comment" : "\n   * Return the count variant.\n   *\n   * @return the count variant\n   ",
    "links" : [ ]
  }, {
    "name" : "public PeriodFormatter getFormatter()",
    "returnType" : "PeriodFormatter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Customizations updateCustomizations()",
    "returnType" : "Customizations",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " PeriodFormatterData getData()",
    "returnType" : "PeriodFormatterData",
    "comment" : " package access only",
    "links" : [ ]
  }, {
    "name" : " PeriodFormatterData getData(String locName)",
    "returnType" : "PeriodFormatterData",
    "comment" : " package access for use by BasicPeriodFormatter",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static BasicPeriodFormatterFactory getDefault()", "public PeriodFormatterFactory setLocale(String localeName)", "public PeriodFormatterFactory setDisplayLimit(boolean display)", "public boolean getDisplayLimit()", "public PeriodFormatterFactory setDisplayPastFuture(boolean display)", "public boolean getDisplayPastFuture()", "public PeriodFormatterFactory setSeparatorVariant(int variant)", "public int getSeparatorVariant()", "public PeriodFormatterFactory setUnitVariant(int variant)", "public int getUnitVariant()", "public PeriodFormatterFactory setCountVariant(int variant)", "public int getCountVariant()", "public PeriodFormatter getFormatter()", "private Customizations updateCustomizations()", " PeriodFormatterData getData()", " PeriodFormatterData getData(String locName)" ],
  "variableNames" : [ "ds", "data", "customizations", "customizationsInUse", "localeName" ]
}