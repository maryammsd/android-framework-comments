{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/TextBoundsInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "TextBoundsInfo",
  "comment" : "\n * The text bounds information of a slice of text in the editor.\n *\n * <p> This class provides IME the layout information of the text within the range from\n * {@link #getStartIndex()} to {@link #getEndIndex()}. It's intended to be used by IME as a\n * supplementary API to support handwriting gestures.\n * </p>\n ",
  "links" : [ "#getStartIndex()", "#getEndIndex()" ],
  "variables" : [ {
    "name" : "FLAG_CHARACTER_WHITESPACE",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character is a whitespace.\n     *\n     * @see Builder#setCharacterFlags(int[])\n     * @see #getCharacterFlags(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHARACTER_LINEFEED",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character is a linefeed character.\n     *\n     * @see Builder#setCharacterFlags(int[])\n     * @see #getCharacterFlags(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_CHARACTER_PUNCTUATION",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character is a punctuation.\n     *\n     * @see Builder#setCharacterFlags(int[])\n     * @see #getCharacterFlags(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LINE_IS_RTL",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the line this character belongs to has RTL line direction. It's\n     * required that all characters in the same line must have the same direction.\n     *\n     * @see Builder#setCharacterFlags(int[])\n     * @see #getCharacterFlags(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "KNOWN_CHARACTER_FLAGS",
    "type" : "int",
    "comment" : " All the valid flags. ",
    "links" : [ ]
  }, {
    "name" : "BIDI_LEVEL_SHIFT",
    "type" : "int",
    "comment" : "\n     * The amount of shift to get the character's BiDi level from the internal character flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "BIDI_LEVEL_MASK",
    "type" : "int",
    "comment" : "\n     * The mask used to get the character's BiDi level from the internal character flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLAG_LINE_SEGMENT_START",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the start of a line segment.\n     * This flag is only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "FLAG_LINE_SEGMENT_END",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the end of a line segment.\n     * This flag is only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "FLAG_WORD_SEGMENT_START",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the start of a word segment.\n     * This flag is only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "FLAG_WORD_SEGMENT_END",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the end of a word segment.\n     * This flag is only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "FLAG_GRAPHEME_SEGMENT_START",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the start of a grapheme segment.\n     * It's only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "FLAG_GRAPHEME_SEGMENT_END",
    "type" : "int",
    "comment" : "\n     * The flag indicating that the character at the index is the end of a grapheme segment.\n     * It's only used internally to serialize the {@link SegmentFinder}.\n     *\n     * @see #writeToParcel(Parcel, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrixValues",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterBounds",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInternalCharacterFlags",
    "type" : "int[]",
    "comment" : "\n     * The array that encodes character and BiDi levels. They are stored together to save memory\n     * space, and it's easier during serialization.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLineSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWordSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGraphemeSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TextBoundsInfo>",
    "comment" : "\n     * The CREATOR to make this class Parcelable.\n     ",
    "links" : [ ]
  }, {
    "name" : "TEXT_BOUNDS_INFO_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void getMatrix(@NonNull Matrix matrix)",
    "returnType" : "void",
    "comment" : "\n     * Set the given {@link android.graphics.Matrix} to be the transformation\n     * matrix that is to be applied other positional data in this class.\n     ",
    "links" : [ "android.graphics.Matrix" ]
  }, {
    "name" : "public int getStartIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first character whose bounds information is available in this\n     * {@link TextBoundsInfo}, inclusive.\n     *\n     * @see Builder#setStartAndEnd(int, int)\n     ",
    "links" : [ "android.view.inputmethod.TextBoundsInfo" ]
  }, {
    "name" : "public int getEndIndex()",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last character whose bounds information is available in this\n     * {@link TextBoundsInfo}, exclusive.\n     *\n     * @see Builder#setStartAndEnd(int, int)\n     ",
    "links" : [ "android.view.inputmethod.TextBoundsInfo" ]
  }, {
    "name" : "public void getCharacterBounds(int index, @NonNull RectF bounds)",
    "returnType" : "void",
    "comment" : "\n     * Set the bounds of the character at the given {@code index} to the given {@link RectF}, in\n     * the coordinates of the editor.\n     *\n     * @param index the index of the queried character.\n     * @param bounds the {@link RectF} used to receive the result.\n     *\n     * @throws IndexOutOfBoundsException if the given {@code index} is out of the range from\n     * the {@code start} to the {@code end}.\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "public int getCharacterFlags(int index)",
    "returnType" : "int",
    "comment" : "\n     * Return the flags associated with the character at the given {@code index}.\n     * The flags contain the following information:\n     * <ul>\n     *     <li>The {@link #FLAG_CHARACTER_WHITESPACE} flag, indicating the character is a\n     *     whitespace. </li>\n     *     <li>The {@link #FLAG_CHARACTER_LINEFEED} flag, indicating the character is a\n     *     linefeed. </li>\n     *     <li>The {@link #FLAG_CHARACTER_PUNCTUATION} flag, indicating the character is a\n     *     punctuation. </li>\n     *     <li>The {@link #FLAG_LINE_IS_RTL} flag, indicating the line this character belongs to\n     *     has RTL line direction. All characters in the same line must have the same line\n     *     direction. Check {@link #getLineSegmentFinder()} for more information of\n     *     line boundaries. </li>\n     * </ul>\n     *\n     * @param index the index of the queried character.\n     * @return the flags associated with the queried character.\n     *\n     * @throws IndexOutOfBoundsException if the given {@code index} is out of the range from\n     * the {@code start} to the {@code end}.\n     *\n     * @see #FLAG_CHARACTER_WHITESPACE\n     * @see #FLAG_CHARACTER_LINEFEED\n     * @see #FLAG_CHARACTER_PUNCTUATION\n     * @see #FLAG_LINE_IS_RTL\n     ",
    "links" : [ "#FLAG_LINE_IS_RTL", "#FLAG_CHARACTER_LINEFEED", "#FLAG_CHARACTER_WHITESPACE", "#getLineSegmentFinder()", "#FLAG_CHARACTER_PUNCTUATION" ]
  }, {
    "name" : "public int getCharacterBidiLevel(int index)",
    "returnType" : "int",
    "comment" : "\n     * The BiDi level of the character at the given {@code index}. <br/>\n     * BiDi level is defined by\n     * <a href=\"https://unicode.org/reports/tr9/#Basic_Display_Algorithm\" >the unicode\n     * bidirectional algorithm </a>. One can determine whether a character's direction is\n     * right-to-left (RTL) or left-to-right (LTR) by checking the last bit of the BiDi level.\n     * If it's 1, the character is RTL, otherwise the character is LTR. The BiDi level of a\n     * character must be in the range of [0, 125].\n     *\n     * @param index the index of the queried character.\n     * @return the BiDi level of the character, which is an integer in the range of [0, 125].\n     * @throws IndexOutOfBoundsException if the given {@code index} is out of the range from\n     * the {@code start} to the {@code end}.\n     *\n     * @see Builder#setCharacterBidiLevel(int[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public SegmentFinder getWordSegmentFinder()",
    "returnType" : "SegmentFinder",
    "comment" : "\n     * Returns the {@link SegmentFinder} that locates the word boundaries.\n     *\n     * @see Builder#setWordSegmentFinder(SegmentFinder)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public SegmentFinder getGraphemeSegmentFinder()",
    "returnType" : "SegmentFinder",
    "comment" : "\n     * Returns the {@link SegmentFinder} that locates the grapheme boundaries.\n     *\n     * @see Builder#setGraphemeSegmentFinder(SegmentFinder)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public SegmentFinder getLineSegmentFinder()",
    "returnType" : "SegmentFinder",
    "comment" : "\n     * Returns the {@link SegmentFinder} that locates the line boundaries.\n     *\n     * @see Builder#setLineSegmentFinder(SegmentFinder)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public int getOffsetForPosition(float x, float y)",
    "returnType" : "int",
    "comment" : "\n     * Return the index of the closest character to the given position.\n     * It's similar to the text layout API {@link Layout#getOffsetForHorizontal(int, float)}.\n     * And it's mainly used to find the cursor index (the index of the character before which the\n     * cursor should be placed) for the given position. It's guaranteed that the returned index is\n     * a grapheme break. Check {@link #getGraphemeSegmentFinder()} for more information.\n     *\n     * <p>It's assumed that the editor lays out text in horizontal lines from top to bottom and each\n     * line is laid out according to the display algorithm specified in\n     * <a href=\"https://unicode.org/reports/tr9/#Basic_Display_Algorithm\"> unicode bidirectional\n     * algorithm</a>.\n     * </p>\n     *\n     * <p> This method won't check the text ranges whose line information is missing. For example,\n     * the {@link TextBoundsInfo}'s range is from index 5 to 15. If the associated\n     * {@link SegmentFinder} only identifies one line range from 7 to 12. Then this method\n     * won't check the text in the ranges of [5, 7) and [12, 15).\n     * </p>\n     *\n     * <p> Under the following conditions, this method will return -1 indicating that no valid\n     * character is found:\n     * <ul>\n     *   <li> The given {@code y} coordinate is above the first line or below the last line (the\n     *   first line or the last line is identified by the {@link SegmentFinder} returned from\n     *   {@link #getLineSegmentFinder()}). </li>\n     *   <li> There is no character in this {@link TextBoundsInfo}. </li>\n     * </ul>\n     * </p>\n     *\n     * @param x the x coordinates of the interested location, in the editor's coordinates.\n     * @param y the y coordinates of the interested location, in the editor's coordinates.\n     * @return the index of the character whose position is closest to the given location. It will\n     * return -1 if it can't find a character.\n     *\n     * @see Layout#getOffsetForHorizontal(int, float)\n     ",
    "links" : [ "android.view.inputmethod.TextBoundsInfo", "android.text.Layout#getOffsetForHorizontal(int", "#getGraphemeSegmentFinder()", "#getLineSegmentFinder()", "android.text.SegmentFinder" ]
  }, {
    "name" : "private boolean primaryIsTrailingPrevious(int offset, int lineStart, int lineEnd)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the primary position at the given index is the previous character's trailing\n     * position. <br/>\n     *\n     * For LTR character, trailing position is its right edge. For RTL character, trailing position\n     * is its left edge.\n     *\n     * The primary position is defined as the position of a newly inserted character with the\n     * context direction at the given offset. In contrast, the secondary position is the position\n     * of a newly inserted character with the context's opposite direction at the given offset.\n     *\n     * In Android, the trailing position is used for primary position when the direction run after\n     * the given index has a higher level than the current direction run.\n     *\n     * <p>\n     * For example:\n     * (L represents LTR character, and R represents RTL character. The number is the index)\n     * <pre>\n     * input text:          L0 L1 L2 R3 R4 R5 L6 L7 L8\n     * render result:       L0 L1 L2 R5 R4 R3 L6 L7 L8\n     * BiDi Run:            [ Run 0 ][ Run 1 ][ Run 2 ]\n     * BiDi Level:          0  0  0  1  1  1  0  0  0\n     * </pre>\n     *\n     * The index 3 is a BiDi transition point, the cursor can be placed either after L2 or before\n     * R3. Because the bidi level of run 1 is higher than the run 0, this method returns true. And\n     * the cursor should be placed after L2.\n     * <pre>\n     * render result:       L0 L1 L2 R5 R4 R3 L6 L7 L8\n     * position after L2:           |\n     * position before R3:                   |\n     * result position:             |\n     * </pre>\n     *\n     * The index 6 is also a Bidi transition point, the 2 possible cursor positions are exactly the\n     * same as index 3. However, since the bidi level of run 2 is higher than the run 1, this\n     * method returns false. And the cursor should be placed before L6.\n     * <pre>\n     * render result:       L0 L1 L2 R5 R4 R3 L6 L7 L8\n     * position after R5:           |\n     * position before L6:                   |\n     * result position:                      |\n     * </pre>\n     *\n     * This method helps guarantee that the cursor index and the cursor position forms a one to\n     * one relation.\n     * </p>\n     *\n     * @param offset the offset of the character in front of which the cursor is placed. It must be\n     *              the start index of a grapheme. And it must be in the range from lineStart to\n     *              lineEnd. An offset equal to lineEnd is allowed. It indicates that the cursor is\n     *              placed at the end of current line instead of the start of the following line.\n     * @param lineStart the start index of the line that index belongs to, inclusive.\n     * @param lineEnd the end index of the line that index belongs to, exclusive.\n     * @return true if primary position is the trailing position of the previous character.\n     *\n     * @see #getCursorHorizontalPosition(int, int, int, float, float)\n     ",
    "links" : [ ]
  }, {
    "name" : "private float getCursorHorizontalPosition(int index, int lineStart, int lineEnd, float lineLeft, float lineRight)",
    "returnType" : "float",
    "comment" : "\n     * Returns the x coordinates of the cursor at the given index. (The index of the character\n     * before which the cursor should be placed.)\n     *\n     * @param index the character index before which the cursor is placed. It must be the start\n     *              index of a grapheme. It must be in the range from lineStart to lineEnd.\n     *              An index equal to lineEnd is allowed. It indicates that the cursor is\n     *              placed at the end of current line instead of the start of the following line.\n     * @param lineStart start index of the line that index belongs to, inclusive.\n     * @param lineEnd end index of the line that index belongs, exclusive.\n     * @return the x coordinates of the cursor at the given index,\n     *\n     * @see #primaryIsTrailingPrevious(int, int, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getBoundsForRange(int start, int end, @NonNull RectF rectF)",
    "returnType" : "void",
    "comment" : "\n     * Return the minimal rectangle that contains all the characters in the given range.\n     *\n     * @param start the start index of the given range, inclusive.\n     * @param end the end index of the given range, exclusive.\n     * @param rectF the {@link RectF} to receive the bounds.\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "private void getLineInfo(float y, @NonNull int[] characterRange, @Nullable RectF bounds)",
    "returnType" : "void",
    "comment" : "\n     * Return the character range and bounds of the closest line to the given {@code y} coordinate,\n     * in the editor's local coordinates.\n     *\n     * If the given y is above the first line or below the last line -1 will be returned for line\n     * start and end.\n     *\n     * This method assumes that the lines are laid out from the top to bottom.\n     *\n     * @param y the y coordinates used to search for the line.\n     * @param characterRange a two element array used to receive the character range of the line.\n     *                       If no valid line is found -1 will be returned for both start and end.\n     * @param bounds {@link RectF} to receive the line bounds result, nullable. If given, it can\n     *                            still be modified even if no valid line is found.\n     ",
    "links" : [ "android.graphics.RectF" ]
  }, {
    "name" : "public int[] getRangeForRect(@NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)",
    "returnType" : "int[]",
    "comment" : "\n     * Finds the range of text which is inside the specified rectangle area. This method is a\n     * counterpart of the\n     * {@link Layout#getRangeForRect(RectF, SegmentFinder, Layout.TextInclusionStrategy)}.\n     *\n     * <p>It's assumed that the editor lays out text in horizontal lines from top to bottom\n     * and each line is laid out according to the display algorithm specified in\n     * <a href=\"https://unicode.org/reports/tr9/#Basic_Display_Algorithm\"> unicode bidirectional\n     * algorithm</a>.\n     * </p>\n     *\n     * <p> This method won't check the text ranges whose line information is missing. For example,\n     * the {@link TextBoundsInfo}'s range is from index 5 to 15. If the associated line\n     * {@link SegmentFinder} only identifies one line range from 7 to 12. Then this method\n     * won't check the text in the ranges of [5, 7) and [12, 15).\n     * </p>\n     *\n     * @param area area for which the text range will be found\n     * @param segmentFinder SegmentFinder for determining the ranges of text to be considered as a\n     *     text segment\n     * @param inclusionStrategy strategy for determining whether a text segment is inside the\n     *          specified area\n     * @return the text range stored in a two element int array. The first element is the\n     * start (inclusive) of the text range, and the second element is the end (exclusive) character\n     * offsets of the text range, or null if there are no text segments inside the area.\n     *\n     * @see Layout#getRangeForRect(RectF, SegmentFinder, Layout.TextInclusionStrategy)\n     ",
    "links" : [ "android.text.Layout#getRangeForRect(RectF", "android.view.inputmethod.TextBoundsInfo", "android.text.SegmentFinder" ]
  }, {
    "name" : "private int getStartForRectWithinLine(int lineStart, int lineEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)",
    "returnType" : "int",
    "comment" : "\n     * Find the start character index of the first text segments within a line inside the specified\n     * {@code area}.\n     *\n     * @param lineStart the start of this line, inclusive .\n     * @param lineEnd the end of this line, exclusive.\n     * @param area the area inside which the text segments will be found.\n     * @param segmentFinder SegmentFinder for determining the ranges of text to be considered a\n     *                      text segment.\n     * @param inclusionStrategy strategy for determining whether a text segment is inside the\n     *                          specified area.\n     * @return the start index of the first segment in the area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getStartForRectWithinRun(int runStart, int runEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)",
    "returnType" : "int",
    "comment" : "\n     * Find the start character index of the first text segments within the directional run inside\n     * the specified {@code area}.\n     *\n     * @param runStart the start of this directional run, inclusive.\n     * @param runEnd the end of this directional run, exclusive.\n     * @param area the area inside which the text segments will be found.\n     * @param segmentFinder SegmentFinder for determining the ranges of text to be considered a\n     *                      text segment.\n     * @param inclusionStrategy strategy for determining whether a text segment is inside the\n     *                          specified area.\n     * @return the start index of the first segment in the area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getEndForRectWithinLine(int lineStart, int lineEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)",
    "returnType" : "int",
    "comment" : "\n     * Find the end character index of the last text segments within a line inside the specified\n     * {@code area}.\n     *\n     * @param lineStart the start of this line, inclusive .\n     * @param lineEnd the end of this line, exclusive.\n     * @param area the area inside which the text segments will be found.\n     * @param segmentFinder SegmentFinder for determining the ranges of text to be considered a\n     *                      text segment.\n     * @param inclusionStrategy strategy for determining whether a text segment is inside the\n     *                          specified area.\n     * @return the end index of the last segment in the area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getEndForRectWithinRun(int runStart, int runEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)",
    "returnType" : "int",
    "comment" : "\n     * Find the end character index of the last text segments within the directional run inside the\n     * specified {@code area}.\n     *\n     * @param runStart the start of this directional run, inclusive.\n     * @param runEnd the end of this directional run, exclusive.\n     * @param area the area inside which the text segments will be found.\n     * @param segmentFinder SegmentFinder for determining the ranges of text to be considered a\n     *                      text segment.\n     * @param inclusionStrategy strategy for determining whether a text segment is inside the\n     *                          specified area.\n     * @return the end index of the last segment in the area.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static float verticalDistance(@NonNull RectF rectF, float y)",
    "returnType" : "float",
    "comment" : "\n     * Get the vertical distance from the {@code pointF} to the {@code rectF}. It's useful to find\n     * the corresponding line for a given point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Describe the kinds of special objects contained in this Parcelable\n     * instance's marshaled representation. For example, if the object will\n     * include a file descriptor in the output of {@link #writeToParcel(Parcel, int)},\n     * the return value of this method must include the\n     * {@link #CONTENTS_FILE_DESCRIPTOR} bit.\n     *\n     * @return a bitmask indicating the set of special object types marshaled\n     * by this Parcelable object instance.\n     ",
    "links" : [ "#CONTENTS_FILE_DESCRIPTOR", "#writeToParcel(Parcel" ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Flatten this object in to a Parcel.\n     *\n     * @param dest  The Parcel in which the object should be written.\n     * @param flags Additional flags about how the object should be written.\n     *              May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.\n     ",
    "links" : [ "#PARCELABLE_WRITE_RETURN_VALUE" ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Store the {@link TextBoundsInfo} into a {@link Bundle}. This method is used by\n     * {@link RemoteInputConnectionImpl} to transfer the {@link TextBoundsInfo} from the editor\n     * to IME.\n     *\n     * @see TextBoundsInfoResult\n     * @see InputConnection#requestTextBoundsInfo(RectF, Executor, Consumer)\n     * @hide\n     ",
    "links" : [ "android.os.Bundle", "android.view.inputmethod.TextBoundsInfo", "android.view.inputmethod.RemoteInputConnectionImpl" ]
  }, {
    "name" : "public static TextBoundsInfo createFromBundle(@Nullable Bundle bundle)",
    "returnType" : "TextBoundsInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void encodeSegmentFinder(@NonNull int[] flags, int segmentStartFlag, int segmentEndFlag, int start, int end, @NonNull SegmentFinder segmentFinder)",
    "returnType" : "void",
    "comment" : "\n     * Encode the segment start and end positions in {@link SegmentFinder} to a flags array.\n     *\n     * For example:\n     * Text: \"A BC DE\"\n     * Input:\n     *     start: 2, end: 7                                     // substring \"BC DE\"\n     *     SegmentFinder: segment ranges = [(2, 4), (5, 7)]     // a word break iterator\n     *     flags: [0x0000, 0x0000, 0x0080, 0x0000, 0x0000, 0x0000] // 0x0080 is whitespace\n     *     segmentStartFlag: 0x0100\n     *     segmentEndFlag: 0x0200\n     * Output:\n     *     flags: [0x0100, 0x0000, 0x0280, 0x0100, 0x0000, 0x0200]\n     *  The index 2 and 5 encode segment starts, the index 4 and 7 encode a segment end.\n     *\n     * @param flags the flags array to receive the results.\n     * @param segmentStartFlag the flag used to encode the segment start.\n     * @param segmentEndFlag the flag used to encode the segment end.\n     * @param start the start index of the encoded range, inclusive.\n     * @param end the end index of the encoded range, inclusive.\n     * @param segmentFinder the SegmentFinder to be encoded.\n     *\n     * @see #decodeSegmentFinder(int[], int, int, int, int)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "private static SegmentFinder decodeSegmentFinder(int[] flags, int segmentStartFlag, int segmentEndFlag, int start, int end)",
    "returnType" : "SegmentFinder",
    "comment" : "\n     * Decode a {@link SegmentFinder} from a flags array.\n     *\n     * For example:\n     * Text: \"A BC DE\"\n     * Input:\n     *     start: 2, end: 7                                     // substring \"BC DE\"\n     *     flags: [0x0100, 0x0000, 0x0280, 0x0100, 0x0000, 0x0200]\n     *     segmentStartFlag: 0x0100\n     *     segmentEndFlag: 0x0200\n     * Output:\n     *     SegmentFinder: segment ranges = [(2, 4), (5, 7)]\n     *\n     * @param flags the flags array to decode the SegmentFinder.\n     * @param segmentStartFlag the flag to decode a segment start.\n     * @param segmentEndFlag the flag to decode a segment end.\n     * @param start the start index of the interested range, inclusive.\n     * @param end the end index of the interested range, inclusive.\n     *\n     * @see #encodeSegmentFinder(int[], int, int, int, int, SegmentFinder)\n     ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "private static boolean isLineDirectionFlagConsistent(int[] characterFlags, SegmentFinder lineSegmentFinder, int start, int end)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether the {@link #FLAG_LINE_IS_RTL} is the same for characters in the same line.\n     * @return true if all characters in the same line has the same {@link #FLAG_LINE_IS_RTL} flag.\n     ",
    "links" : [ "#FLAG_LINE_IS_RTL" ]
  } ],
  "methodNames" : [ "public void getMatrix(@NonNull Matrix matrix)", "public int getStartIndex()", "public int getEndIndex()", "public void getCharacterBounds(int index, @NonNull RectF bounds)", "public int getCharacterFlags(int index)", "public int getCharacterBidiLevel(int index)", "public SegmentFinder getWordSegmentFinder()", "public SegmentFinder getGraphemeSegmentFinder()", "public SegmentFinder getLineSegmentFinder()", "public int getOffsetForPosition(float x, float y)", "private boolean primaryIsTrailingPrevious(int offset, int lineStart, int lineEnd)", "private float getCursorHorizontalPosition(int index, int lineStart, int lineEnd, float lineLeft, float lineRight)", "private void getBoundsForRange(int start, int end, @NonNull RectF rectF)", "private void getLineInfo(float y, @NonNull int[] characterRange, @Nullable RectF bounds)", "public int[] getRangeForRect(@NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)", "private int getStartForRectWithinLine(int lineStart, int lineEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)", "private int getStartForRectWithinRun(int runStart, int runEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)", "private int getEndForRectWithinLine(int lineStart, int lineEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)", "private int getEndForRectWithinRun(int runStart, int runEnd, @NonNull RectF area, @NonNull SegmentFinder segmentFinder, @NonNull Layout.TextInclusionStrategy inclusionStrategy)", "private static float verticalDistance(@NonNull RectF rectF, float y)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public Bundle toBundle()", "public static TextBoundsInfo createFromBundle(@Nullable Bundle bundle)", "private static void encodeSegmentFinder(@NonNull int[] flags, int segmentStartFlag, int segmentEndFlag, int start, int end, @NonNull SegmentFinder segmentFinder)", "private static SegmentFinder decodeSegmentFinder(int[] flags, int segmentStartFlag, int segmentEndFlag, int start, int end)", "private static boolean isLineDirectionFlagConsistent(int[] characterFlags, SegmentFinder lineSegmentFinder, int start, int end)" ],
  "variableNames" : [ "FLAG_CHARACTER_WHITESPACE", "FLAG_CHARACTER_LINEFEED", "FLAG_CHARACTER_PUNCTUATION", "FLAG_LINE_IS_RTL", "KNOWN_CHARACTER_FLAGS", "BIDI_LEVEL_SHIFT", "BIDI_LEVEL_MASK", "FLAG_LINE_SEGMENT_START", "FLAG_LINE_SEGMENT_END", "FLAG_WORD_SEGMENT_START", "FLAG_WORD_SEGMENT_END", "FLAG_GRAPHEME_SEGMENT_START", "FLAG_GRAPHEME_SEGMENT_END", "mStart", "mEnd", "mMatrixValues", "mCharacterBounds", "mInternalCharacterFlags", "mLineSegmentFinder", "mWordSegmentFinder", "mGraphemeSegmentFinder", "CREATOR", "TEXT_BOUNDS_INFO_KEY" ]
}