{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityWindowInfo.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityWindowInfo",
  "comment" : "\n * This class represents a state snapshot of a window for accessibility\n * purposes. The screen content contains one or more windows where some\n * windows can be descendants of other windows, which is the windows are\n * hierarchically ordered. Note that there is no root window. Hence, the\n * screen content can be seen as a collection of window trees.\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_APPLICATION",
    "type" : "int",
    "comment" : "\n     * Window type: This is an application window. Such a window shows UI for\n     * interacting with an application.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_INPUT_METHOD",
    "type" : "int",
    "comment" : "\n     * Window type: This is an input method window. Such a window shows UI for\n     * inputting text such as keyboard, suggestions, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SYSTEM",
    "type" : "int",
    "comment" : "\n     * Window type: This is an system window. Such a window shows UI for\n     * interacting with the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_ACCESSIBILITY_OVERLAY",
    "type" : "int",
    "comment" : "\n     * Window type: Windows that are overlaid <em>only</em> by an {@link\n     * android.accessibilityservice.AccessibilityService} for interception of\n     * user interactions without changing the windows an accessibility service\n     * can introspect. In particular, an accessibility service can introspect\n     * only windows that a sighted user can interact with which they can touch\n     * these windows or can type into these windows. For example, if there\n     * is a full screen accessibility overlay that is touchable, the windows\n     * below it will be introspectable by an accessibility service regardless\n     * they are covered by a touchable window.\n     ",
    "links" : [ "android.accessibilityservice.AccessibilityService" ]
  }, {
    "name" : "TYPE_SPLIT_SCREEN_DIVIDER",
    "type" : "int",
    "comment" : "\n     * Window type: A system window used to divide the screen in split-screen mode.\n     * This type of window is present only in split-screen mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTIVE_WINDOW_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_CONNECTION_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_WINDOW_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANY_WINDOW_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PICTURE_IN_PICTURE_ACTION_REPLACER_WINDOW_ID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_ACTIVE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOLEAN_PROPERTY_PICTURE_IN_PICTURE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_POOL_SIZE",
    "type" : "int",
    "comment" : " Housekeeping.",
    "links" : [ ]
  }, {
    "name" : "sPool",
    "type" : "SynchronizedPool<AccessibilityWindowInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNumInstancesInUse",
    "type" : "AtomicInteger",
    "comment" : " TODO(b/129300068): Remove sNumInstancesInUse.",
    "links" : [ ]
  }, {
    "name" : "mDisplayId",
    "type" : "int",
    "comment" : " Data.",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLayer",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBooleanProperties",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegionInScreen",
    "type" : "Region",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChildIds",
    "type" : "LongArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTitle",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnchorId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConnectionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AccessibilityWindowInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public CharSequence getTitle()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the title of the window.\n     *\n     * @return The title of the window, or {@code null} if none is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTitle(CharSequence title)",
    "returnType" : "void",
    "comment" : "\n     * Sets the title of the window.\n     *\n     * @param title The title.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the type of the window.\n     *\n     * @return The type.\n     *\n     * @see #TYPE_APPLICATION\n     * @see #TYPE_INPUT_METHOD\n     * @see #TYPE_SYSTEM\n     * @see #TYPE_ACCESSIBILITY_OVERLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * Sets the type of the window.\n     *\n     * @param type The type\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLayer()",
    "returnType" : "int",
    "comment" : "\n     * Gets the layer which determines the Z-order of the window. Windows\n     * with greater layer appear on top of windows with lesser layer.\n     *\n     * @return The window layer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayer(int layer)",
    "returnType" : "void",
    "comment" : "\n     * Sets the layer which determines the Z-order of the window. Windows\n     * with greater layer appear on top of windows with lesser layer.\n     *\n     * @param layer The window layer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getRoot()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the root node in the window's hierarchy.\n     *\n     * @return The root node.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnchorId(long anchorId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the anchor node's ID.\n     *\n     * @param anchorId The anchor's accessibility id in its window.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getAnchor()",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the node that anchors this window to another.\n     *\n     * @return The anchor node, or {@code null} if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPictureInPicture(boolean pictureInPicture)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInPictureInPictureMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the window is in picture-in-picture mode.\n     *\n     * @return {@code true} if the window is in picture-in-picture mode, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityWindowInfo getParent()",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets the parent window.\n     *\n     * @return The parent window, or {@code null} if none exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParentId(int parentId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the parent window id.\n     *\n     * @param parentId The parent id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the unique window id.\n     *\n     * @return windowId The window id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setId(int id)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique window id.\n     *\n     * @param id The window id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConnectionId(int connectionId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the unique id of the IAccessibilityServiceConnection over which\n     * this instance can send requests to the system.\n     *\n     * @param connectionId The connection id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getRegionInScreen(@NonNull Region outRegion)",
    "returnType" : "void",
    "comment" : "\n     * Gets the touchable region of this window in the screen.\n     *\n     * @param outRegion The out window region.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRegionInScreen(Region region)",
    "returnType" : "void",
    "comment" : "\n     * Sets the touchable region of this window in the screen.\n     *\n     * @param region The window region.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getBoundsInScreen(Rect outBounds)",
    "returnType" : "void",
    "comment" : "\n     * Gets the bounds of this window in the screen. This is equivalent to get the bounds of the\n     * Region from {@link #getRegionInScreen(Region)}.\n     *\n     * @param outBounds The out window bounds.\n     ",
    "links" : [ "#getRegionInScreen(Region)" ]
  }, {
    "name" : "public boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this window is active. An active window is the one\n     * the user is currently touching or the window has input focus\n     * and the user is not touching any window.\n     *\n     * @return Whether this is the active window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setActive(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this window is active, which is this is the window\n     * the user is currently touching or the window has input focus\n     * and the user is not touching any window.\n     *\n     * @param active Whether this is the active window.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this window has input focus.\n     *\n     * @return Whether has input focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFocused(boolean focused)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this window has input focus.\n     *\n     * @param focused Whether has input focus.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAccessibilityFocused()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets if this window has accessibility focus.\n     *\n     * @return Whether has accessibility focus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAccessibilityFocused(boolean focused)",
    "returnType" : "void",
    "comment" : "\n     * Sets if this window has accessibility focus.\n     *\n     * @param focused Whether has accessibility focus.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getChildCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of child windows.\n     *\n     * @return The child count.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityWindowInfo getChild(int index)",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets the child window at a given index.\n     *\n     * @param index The index.\n     * @return The child.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addChild(int childId)",
    "returnType" : "void",
    "comment" : "\n     * Adds a child window.\n     *\n     * @param childId The child window id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayId(int displayId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the display Id.\n     *\n     * @param displayId The display id.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the display this window is on, for use with\n     * {@link android.hardware.display.DisplayManager#getDisplay(int)}.\n     *\n     * @return The logical display id.\n     ",
    "links" : [ "android.hardware.display.DisplayManager#getDisplay(int)" ]
  }, {
    "name" : "public static AccessibilityWindowInfo obtain()",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Returns a cached instance if such is available or a new one is\n     * created.\n     *\n     * <p>In most situations object pooling is not beneficial. Create a new instance using the\n     * constructor {@link #AccessibilityWindowInfo()} instead.\n     *\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityWindowInfo()" ]
  }, {
    "name" : "public static AccessibilityWindowInfo obtain(AccessibilityWindowInfo info)",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Returns a cached instance if such is available or a new one is\n     * created. The returned instance is initialized from the given\n     * <code>info</code>.\n     *\n     * <p>In most situations object pooling is not beneficial. Create a new instance using the\n     * constructor {@link #AccessibilityWindowInfo(AccessibilityWindowInfo)} instead.\n     *\n     * @param info The other info.\n     * @return An instance.\n     ",
    "links" : [ "#AccessibilityWindowInfo(AccessibilityWindowInfo)" ]
  }, {
    "name" : "public static void setNumInstancesInUseCounter(AtomicInteger counter)",
    "returnType" : "void",
    "comment" : "\n     * Specify a counter that will be incremented on obtain() and decremented on recycle()\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void recycle()",
    "returnType" : "void",
    "comment" : "\n     * Return an instance back to be reused.\n     * <p>\n     * <strong>Note:</strong> You must not touch the object after calling this function.\n     * </p>\n     *\n     * <p>In most situations object pooling is not beneficial, and recycling is not necessary.\n     *\n     * @throws IllegalStateException If the info is already recycled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh()",
    "returnType" : "boolean",
    "comment" : "\n     * Refreshes this window with the latest state of the window it represents.\n     * <p>\n     * <strong>Note:</strong> If this method returns false this info is obsolete\n     * since it represents a window that is no longer exist.\n     * </p>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void init(AccessibilityWindowInfo other)",
    "returnType" : "void",
    "comment" : "\n     * Initializes this instance from another one.\n     *\n     * @param other The other instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initFromParcel(Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clears the internal state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getBooleanProperty(int property)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the value of a boolean property.\n     *\n     * @param property The property.\n     * @return The value.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setBooleanProperty(int property, boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Sets a boolean property.\n     *\n     * @param property The property.\n     * @param value The value.\n     *\n     * @throws IllegalStateException If called from an AccessibilityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String typeToString(int type)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int differenceFrom(AccessibilityWindowInfo other)",
    "returnType" : "int",
    "comment" : "\n     * Reports how this window differs from a possibly different state of the same window. The\n     * argument must have the same id and type as neither of those properties may change.\n     *\n     * @param other The new state.\n     * @return A set of flags showing how the window has changes, or 0 if the two states are the\n     * same.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "TYPE_APPLICATION", "TYPE_INPUT_METHOD", "TYPE_SYSTEM", "TYPE_ACCESSIBILITY_OVERLAY", "TYPE_SPLIT_SCREEN_DIVIDER", "ACTIVE_WINDOW_ID", "UNDEFINED_CONNECTION_ID", "UNDEFINED_WINDOW_ID", "ANY_WINDOW_ID", "PICTURE_IN_PICTURE_ACTION_REPLACER_WINDOW_ID", "BOOLEAN_PROPERTY_ACTIVE", "BOOLEAN_PROPERTY_FOCUSED", "BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED", "BOOLEAN_PROPERTY_PICTURE_IN_PICTURE", "MAX_POOL_SIZE", "sPool", "sNumInstancesInUse", "mDisplayId", "mType", "mLayer", "mBooleanProperties", "mId", "mParentId", "mRegionInScreen", "mChildIds", "mTitle", "mAnchorId", "mConnectionId", "CREATOR" ],
  "methodNames" : [ "public CharSequence getTitle()", "public void setTitle(CharSequence title)", "public int getType()", "public void setType(int type)", "public int getLayer()", "public void setLayer(int layer)", "public AccessibilityNodeInfo getRoot()", "public void setAnchorId(long anchorId)", "public AccessibilityNodeInfo getAnchor()", "public void setPictureInPicture(boolean pictureInPicture)", "public boolean isInPictureInPictureMode()", "public AccessibilityWindowInfo getParent()", "public void setParentId(int parentId)", "public int getId()", "public void setId(int id)", "public void setConnectionId(int connectionId)", "public void getRegionInScreen(@NonNull Region outRegion)", "public void setRegionInScreen(Region region)", "public void getBoundsInScreen(Rect outBounds)", "public boolean isActive()", "public void setActive(boolean active)", "public boolean isFocused()", "public void setFocused(boolean focused)", "public boolean isAccessibilityFocused()", "public void setAccessibilityFocused(boolean focused)", "public int getChildCount()", "public AccessibilityWindowInfo getChild(int index)", "public void addChild(int childId)", "public void setDisplayId(int displayId)", "public int getDisplayId()", "public static AccessibilityWindowInfo obtain()", "public static AccessibilityWindowInfo obtain(AccessibilityWindowInfo info)", "public static void setNumInstancesInUseCounter(AtomicInteger counter)", "public void recycle()", "public boolean refresh()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)", "private void init(AccessibilityWindowInfo other)", "private void initFromParcel(Parcel parcel)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "private void clear()", "private boolean getBooleanProperty(int property)", "private void setBooleanProperty(int property, boolean value)", "public static String typeToString(int type)", "public int differenceFrom(AccessibilityWindowInfo other)" ]
}