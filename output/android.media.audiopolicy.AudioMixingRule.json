{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiopolicy/AudioMixingRule.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioMixingRule",
  "comment" : "\n * @hide\n *\n * Here's an example of creating a mixing rule for all media playback:\n * <pre>\n * AudioAttributes mediaAttr = new AudioAttributes.Builder()\n *         .setUsage(AudioAttributes.USAGE_MEDIA)\n *         .build();\n * AudioMixingRule mediaRule = new AudioMixingRule.Builder()\n *         .addRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE)\n *         .build();\n * </pre>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "RULE_MATCH_ATTRIBUTE_USAGE",
    "type" : "int",
    "comment" : "\n     * A rule requiring the usage information of the {@link AudioAttributes} to match.\n     * This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or\n     * {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of\n     * {@link AudioAttributes}.\n     ",
    "links" : [ "#addMixRule(int", "android.media.AudioAttributes", "#addRule(AudioAttributes" ]
  }, {
    "name" : "RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET",
    "type" : "int",
    "comment" : "\n     * A rule requiring the capture preset information of the {@link AudioAttributes} to match.\n     * This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or\n     * {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of\n     * {@link AudioAttributes}.\n     ",
    "links" : [ "#addMixRule(int", "android.media.AudioAttributes", "#addRule(AudioAttributes" ]
  }, {
    "name" : "RULE_MATCH_UID",
    "type" : "int",
    "comment" : "\n     * A rule requiring the UID of the audio stream to match that specified.\n     * This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object\n     * parameter is an instance of {@link java.lang.Integer}.\n     ",
    "links" : [ "#addMixRule(int", "java.lang.Integer" ]
  }, {
    "name" : "RULE_MATCH_USERID",
    "type" : "int",
    "comment" : "\n     * A rule requiring the userId of the audio stream to match that specified.\n     * This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object\n     * parameter is an instance of {@link java.lang.Integer}.\n     ",
    "links" : [ "#addMixRule(int", "java.lang.Integer" ]
  }, {
    "name" : "RULE_MATCH_AUDIO_SESSION_ID",
    "type" : "int",
    "comment" : "\n     * A rule requiring the audio session id of the audio stream to match that specified.\n     * This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where Object\n     * parameter is an instance of {@link java.lang.Integer}.\n     * @see android.media.AudioTrack.Builder#setSessionId\n     ",
    "links" : [ "#addMixRule(int", "java.lang.Integer" ]
  }, {
    "name" : "RULE_EXCLUSION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_EXCLUDE_ATTRIBUTE_USAGE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the usage information of the {@link AudioAttributes} to differ.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the capture preset information of the {@link AudioAttributes} to differ.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "RULE_EXCLUDE_UID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the UID information to differ.\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_EXCLUDE_USERID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the userId information to differ.\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_EXCLUDE_AUDIO_SESSION_ID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the audio session id information to differ.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTargetMixType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIX_ROLE_PLAYERS",
    "type" : "int",
    "comment" : "\n     * Captures an audio signal from one or more playback streams.\n     ",
    "links" : [ ]
  }, {
    "name" : "MIX_ROLE_INJECTOR",
    "type" : "int",
    "comment" : "\n     * Injects an audio signal into the framework to replace a recording source.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCriteria",
    "type" : "ArrayList<AudioMixMatchCriterion>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowPrivilegedPlaybackCapture",
    "type" : "boolean",
    "comment" : "TODO b/177061175: rename to mAllowPrivilegedMediaPlaybackCapture",
    "links" : [ ]
  }, {
    "name" : "mVoiceCommunicationCaptureAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<AudioMixingRule>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean isAffectingUsage(int usage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean containsMatchAttributeRuleForUsage(int usage)",
    "returnType" : "boolean",
    "comment" : "\n      * Returns {@code true} if this rule contains a RULE_MATCH_ATTRIBUTE_USAGE criterion for\n      * the given usage\n      *\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : " int getTargetMixType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTargetMixRole()",
    "returnType" : "int",
    "comment" : "\n     * Gets target mix role of this mixing rule.\n     *\n     * <p>The mix role indicates playback streams will be captured or recording source will be\n     * injected.\n     *\n     * @return integer value of {@link #MIX_ROLE_PLAYERS} or {@link #MIX_ROLE_INJECTOR}\n     ",
    "links" : [ "#MIX_ROLE_INJECTOR", "#MIX_ROLE_PLAYERS" ]
  }, {
    "name" : "public ArrayList<AudioMixMatchCriterion> getCriteria()",
    "returnType" : "ArrayList<AudioMixMatchCriterion>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowPrivilegedMediaPlaybackCapture()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean voiceCommunicationCaptureAllowed()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setVoiceCommunicationCaptureAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForCallRedirection()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidSystemApiRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidAttributesSystemApiRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPlayerRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isRecorderRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAudioAttributeRule(int match_rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean isAffectingUsage(int usage)", " boolean containsMatchAttributeRuleForUsage(int usage)", " int getTargetMixType()", "public int getTargetMixRole()", "public ArrayList<AudioMixMatchCriterion> getCriteria()", "public boolean allowPrivilegedMediaPlaybackCapture()", "public boolean voiceCommunicationCaptureAllowed()", "public void setVoiceCommunicationCaptureAllowed(boolean allowed)", "public boolean isForCallRedirection()", "public boolean equals(Object o)", "public int hashCode()", "private static boolean isValidSystemApiRule(int rule)", "private static boolean isValidAttributesSystemApiRule(int rule)", "private static boolean isValidRule(int rule)", "private static boolean isPlayerRule(int rule)", "private static boolean isRecorderRule(int rule)", "private static boolean isAudioAttributeRule(int match_rule)", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "RULE_MATCH_ATTRIBUTE_USAGE", "RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET", "RULE_MATCH_UID", "RULE_MATCH_USERID", "RULE_MATCH_AUDIO_SESSION_ID", "RULE_EXCLUSION_MASK", "RULE_EXCLUDE_ATTRIBUTE_USAGE", "RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET", "RULE_EXCLUDE_UID", "RULE_EXCLUDE_USERID", "RULE_EXCLUDE_AUDIO_SESSION_ID", "mTargetMixType", "MIX_ROLE_PLAYERS", "MIX_ROLE_INJECTOR", "mCriteria", "mAllowPrivilegedPlaybackCapture", "mVoiceCommunicationCaptureAllowed", "CREATOR" ]
}