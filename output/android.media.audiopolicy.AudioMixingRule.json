{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiopolicy/AudioMixingRule.java",
  "packageName" : "android.media.audiopolicy",
  "className" : "AudioMixingRule",
  "comment" : "\n * @hide\n *\n * Here's an example of creating a mixing rule for all media playback:\n * <pre>\n * AudioAttributes mediaAttr = new AudioAttributes.Builder()\n *         .setUsage(AudioAttributes.USAGE_MEDIA)\n *         .build();\n * AudioMixingRule mediaRule = new AudioMixingRule.Builder()\n *         .addRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE)\n *         .build();\n * </pre>\n ",
  "variables" : [ {
    "name" : "RULE_MATCH_ATTRIBUTE_USAGE",
    "type" : "int",
    "comment" : "\n     * A rule requiring the usage information of the {@link AudioAttributes} to match.\n     * This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or\n     * {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of\n     * {@link AudioAttributes}.\n     ",
    "links" : [ "#addMixRule(int", "android.media.AudioAttributes", "#addRule(AudioAttributes" ]
  }, {
    "name" : "RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET",
    "type" : "int",
    "comment" : "\n     * A rule requiring the capture preset information of the {@link AudioAttributes} to match.\n     * This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or\n     * {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of\n     * {@link AudioAttributes}.\n     ",
    "links" : [ "#addMixRule(int", "android.media.AudioAttributes", "#addRule(AudioAttributes" ]
  }, {
    "name" : "RULE_MATCH_UID",
    "type" : "int",
    "comment" : "\n     * A rule requiring the UID of the audio stream to match that specified.\n     * This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object\n     * parameter is an instance of {@link java.lang.Integer}.\n     ",
    "links" : [ "#addMixRule(int", "java.lang.Integer" ]
  }, {
    "name" : "RULE_MATCH_USERID",
    "type" : "int",
    "comment" : "\n     * A rule requiring the userId of the audio stream to match that specified.\n     * This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object\n     * parameter is an instance of {@link java.lang.Integer}.\n     ",
    "links" : [ "#addMixRule(int", "java.lang.Integer" ]
  }, {
    "name" : "RULE_EXCLUSION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_EXCLUDE_ATTRIBUTE_USAGE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the usage information of the {@link AudioAttributes} to differ.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the capture preset information of the {@link AudioAttributes} to differ.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "RULE_EXCLUDE_UID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the UID information to differ.\n     ",
    "links" : [ ]
  }, {
    "name" : "RULE_EXCLUDE_USERID",
    "type" : "int",
    "comment" : "\n     * @hide\n     * A rule requiring the userId information to differ.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTargetMixType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCriteria",
    "type" : "ArrayList<AudioMixMatchCriterion>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowPrivilegedPlaybackCapture",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVoiceCommunicationCaptureAllowed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean isAffectingUsage(int usage)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean containsMatchAttributeRuleForUsage(int usage)",
    "returnType" : "boolean",
    "comment" : "\n      * Returns {@code true} if this rule contains a RULE_MATCH_ATTRIBUTE_USAGE criterion for\n      * the given usage\n      *\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "private static boolean areCriteriaEquivalent(ArrayList<AudioMixMatchCriterion> cr1, ArrayList<AudioMixMatchCriterion> cr2)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getTargetMixType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ArrayList<AudioMixMatchCriterion> getCriteria()",
    "returnType" : "ArrayList<AudioMixMatchCriterion>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowPrivilegedPlaybackCapture()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean voiceCommunicationCaptureAllowed()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setVoiceCommunicationCaptureAllowed(boolean allowed)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidSystemApiRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidAttributesSystemApiRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPlayerRule(int rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isAudioAttributeRule(int match_rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "RULE_MATCH_ATTRIBUTE_USAGE", "RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET", "RULE_MATCH_UID", "RULE_MATCH_USERID", "RULE_EXCLUSION_MASK", "RULE_EXCLUDE_ATTRIBUTE_USAGE", "RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET", "RULE_EXCLUDE_UID", "RULE_EXCLUDE_USERID", "mTargetMixType", "mCriteria", "mAllowPrivilegedPlaybackCapture", "mVoiceCommunicationCaptureAllowed" ],
  "methodNames" : [ " boolean isAffectingUsage(int usage)", " boolean containsMatchAttributeRuleForUsage(int usage)", "private static boolean areCriteriaEquivalent(ArrayList<AudioMixMatchCriterion> cr1, ArrayList<AudioMixMatchCriterion> cr2)", " int getTargetMixType()", "public ArrayList<AudioMixMatchCriterion> getCriteria()", "public boolean allowPrivilegedPlaybackCapture()", "public boolean voiceCommunicationCaptureAllowed()", "public void setVoiceCommunicationCaptureAllowed(boolean allowed)", "public boolean equals(Object o)", "public int hashCode()", "private static boolean isValidSystemApiRule(int rule)", "private static boolean isValidAttributesSystemApiRule(int rule)", "private static boolean isValidRule(int rule)", "private static boolean isPlayerRule(int rule)", "private static boolean isAudioAttributeRule(int match_rule)" ]
}