{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/UiAutomationConnection.java",
  "packageName" : "android.app",
  "className" : "UiAutomationConnection",
  "comment" : "\n * This is a remote object that is passed from the shell to an instrumentation\n * for enabling access to privileged operations which the shell can do and the\n * instrumentation cannot. These privileged operations are needed for implementing\n * a {@link UiAutomation} that enables across application testing by simulating\n * user actions and performing screen introspection.\n *\n * @hide\n ",
  "links" : [ "android.app.UiAutomation" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INITIAL_FROZEN_ROTATION_UNSPECIFIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowManager",
    "type" : "IWindowManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccessibilityManager",
    "type" : "IAccessibilityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPermissionManager",
    "type" : "IPermissionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mActivityManager",
    "type" : "IActivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialFrozenRotation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "IAccessibilityServiceClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsShutdown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOwningUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void connect(IAccessibilityServiceClient client, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean injectInputEvent(InputEvent event, boolean sync, boolean waitForAnimations)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void injectInputEventToInputFilter(InputEvent event) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void syncInputTransactions(boolean waitForAnimations)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setRotation(int rotation)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean takeScreenshot(Rect crop, ScreenCapture.ScreenCaptureListener listener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean takeSurfaceControlScreenshot(@NonNull SurfaceControl surfaceControl, ScreenCapture.ScreenCaptureListener listener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean clearWindowContentFrameStats(int windowId) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowContentFrameStats getWindowContentFrameStats(int windowId) throws RemoteException",
    "returnType" : "WindowContentFrameStats",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWindowAnimationFrameStats()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WindowAnimationFrameStats getWindowAnimationFrameStats()",
    "returnType" : "WindowAnimationFrameStats",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantRuntimePermission(String packageName, String permission, int userId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Grants permission for the {@link Context#DEVICE_ID_DEFAULT default device}\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT" ]
  }, {
    "name" : "public void revokeRuntimePermission(String packageName, String permission, int userId) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Revokes permission for the {@link Context#DEVICE_ID_DEFAULT default device}\n     ",
    "links" : [ "android.content.Context#DEVICE_ID_DEFAULT" ]
  }, {
    "name" : "public void adoptShellPermissionIdentity(int uid, @Nullable String[] permissions) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dropShellPermissionIdentity() throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAdoptedShellPermissions() throws RemoteException",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOverridePermissionState(int uid, String permission, int result) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOverridePermissionState(int uid, String permission) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearOverridePermissionStates(int uid) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAllOverridePermissionStates() throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void executeShellCommand(final String command, final ParcelFileDescriptor sink, final ParcelFileDescriptor source) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void executeShellCommandWithStderr(final String command, final ParcelFileDescriptor sink, final ParcelFileDescriptor source, final ParcelFileDescriptor stderrSink) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void shutdown()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerUiTestAutomationServiceLocked(IAccessibilityServiceClient client, @UserIdInt int userId, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void unregisterUiTestAutomationServiceLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void storeRotationStateLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void restoreRotationStateLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isConnectedLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfShutdownLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfNotConnectedLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwIfCalledByNotTrustedUidLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void connect(IAccessibilityServiceClient client, int flags)", "public void disconnect()", "public boolean injectInputEvent(InputEvent event, boolean sync, boolean waitForAnimations)", "public void injectInputEventToInputFilter(InputEvent event) throws RemoteException", "public void syncInputTransactions(boolean waitForAnimations)", "public boolean setRotation(int rotation)", "public boolean takeScreenshot(Rect crop, ScreenCapture.ScreenCaptureListener listener)", "public boolean takeSurfaceControlScreenshot(@NonNull SurfaceControl surfaceControl, ScreenCapture.ScreenCaptureListener listener)", "public boolean clearWindowContentFrameStats(int windowId) throws RemoteException", "public WindowContentFrameStats getWindowContentFrameStats(int windowId) throws RemoteException", "public void clearWindowAnimationFrameStats()", "public WindowAnimationFrameStats getWindowAnimationFrameStats()", "public void grantRuntimePermission(String packageName, String permission, int userId) throws RemoteException", "public void revokeRuntimePermission(String packageName, String permission, int userId) throws RemoteException", "public void adoptShellPermissionIdentity(int uid, @Nullable String[] permissions) throws RemoteException", "public void dropShellPermissionIdentity() throws RemoteException", "public List<String> getAdoptedShellPermissions() throws RemoteException", "public void addOverridePermissionState(int uid, String permission, int result) throws RemoteException", "public void removeOverridePermissionState(int uid, String permission) throws RemoteException", "public void clearOverridePermissionStates(int uid) throws RemoteException", "public void clearAllOverridePermissionStates() throws RemoteException", "public void executeShellCommand(final String command, final ParcelFileDescriptor sink, final ParcelFileDescriptor source) throws RemoteException", "public void executeShellCommandWithStderr(final String command, final ParcelFileDescriptor sink, final ParcelFileDescriptor source, final ParcelFileDescriptor stderrSink) throws RemoteException", "public void shutdown()", "private void registerUiTestAutomationServiceLocked(IAccessibilityServiceClient client, @UserIdInt int userId, int flags)", "private void unregisterUiTestAutomationServiceLocked()", "private void storeRotationStateLocked()", "private void restoreRotationStateLocked()", "private boolean isConnectedLocked()", "private void throwIfShutdownLocked()", "private void throwIfNotConnectedLocked()", "private void throwIfCalledByNotTrustedUidLocked()" ],
  "variableNames" : [ "TAG", "INITIAL_FROZEN_ROTATION_UNSPECIFIED", "mWindowManager", "mAccessibilityManager", "mPermissionManager", "mActivityManager", "mLock", "mToken", "mInitialFrozenRotation", "mClient", "mIsShutdown", "mOwningUid" ]
}