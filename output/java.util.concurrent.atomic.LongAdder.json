{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/LongAdder.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "LongAdder",
  "comment" : "\n * One or more variables that together maintain an initially zero\n * {@code long} sum.  When updates (method {@link #add}) are contended\n * across threads, the set of variables may grow dynamically to reduce\n * contention. Method {@link #sum} (or, equivalently, {@link\n * #longValue}) returns the current total combined across the\n * variables maintaining the sum.\n *\n * <p>This class is usually preferable to {@link AtomicLong} when\n * multiple threads update a common sum that is used for purposes such\n * as collecting statistics, not for fine-grained synchronization\n * control.  Under low update contention, the two classes have similar\n * characteristics. But under high contention, expected throughput of\n * this class is significantly higher, at the expense of higher space\n * consumption.\n *\n * <p>LongAdders can be used with a {@link\n * java.util.concurrent.ConcurrentHashMap} to maintain a scalable\n * frequency map (a form of histogram or multiset). For example, to\n * add a count to a {@code ConcurrentHashMap<String,LongAdder> freqs},\n * initializing if not already present, you can use {@code\n * freqs.computeIfAbsent(key, k -> new LongAdder()).increment();}\n *\n * <p>This class extends {@link Number}, but does <em>not</em> define\n * methods such as {@code equals}, {@code hashCode} and {@code\n * compareTo} because instances are expected to be mutated, and so are\n * not useful as collection keys.\n *\n * @since 1.8\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.atomic.AtomicLong", "Number", "#longValue", "java.util.concurrent.ConcurrentHashMap", "#sum", "#add" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(long x)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given value.\n     *\n     * @param x the value to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public void increment()",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to {@code add(1)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void decrement()",
    "returnType" : "void",
    "comment" : "\n     * Equivalent to {@code add(-1)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long sum()",
    "returnType" : "long",
    "comment" : "\n     * Returns the current sum.  The returned value is <em>NOT</em> an\n     * atomic snapshot; invocation in the absence of concurrent\n     * updates returns an accurate result, but concurrent updates that\n     * occur while the sum is being calculated might not be\n     * incorporated.\n     *\n     * @return the sum\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets variables maintaining the sum to zero.  This method may\n     * be a useful alternative to creating a new adder, but is only\n     * effective if there are no concurrent updates.  Because this\n     * method is intrinsically racy, it should only be used when it is\n     * known that no threads are concurrently updating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long sumThenReset()",
    "returnType" : "long",
    "comment" : "\n     * Equivalent in effect to {@link #sum} followed by {@link\n     * #reset}. This method may apply for example during quiescent\n     * points between multithreaded computations.  If there are\n     * updates concurrent with this method, the returned value is\n     * <em>not</em> guaranteed to be the final value occurring before\n     * the reset.\n     *\n     * @return the sum\n     ",
    "links" : [ "#reset", "#sum" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the {@link #sum}.\n     * @return the String representation of the {@link #sum}\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Equivalent to {@link #sum}.\n     *\n     * @return the sum\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@link #sum} as an {@code int} after a narrowing\n     * primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@link #sum} as a {@code float}\n     * after a widening primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Returns the {@link #sum} as a {@code double} after a widening\n     * primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.util.concurrent.atomic.LongAdder.SerializationProxy\">\n     * SerializationProxy</a>\n     * representing the state of this instance.\n     *\n     * @return a {@link SerializationProxy}\n     * representing the state of this instance\n     ",
    "links" : [ "SerializationProxy" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(long x)", "public void increment()", "public void decrement()", "public long sum()", "public void reset()", "public long sumThenReset()", "public String toString()", "public long longValue()", "public int intValue()", "public float floatValue()", "public double doubleValue()", "private Object writeReplace()", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException" ],
  "variableNames" : [ "serialVersionUID" ]
}