{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/persistentdata/PersistentDataBlockManager.java",
  "packageName" : "android.service.persistentdata",
  "className" : "PersistentDataBlockManager",
  "comment" : "\n * Interface for reading and writing data blocks to a persistent partition.\n *\n * Allows writing one block at a time. Namely, each time\n * {@link PersistentDataBlockManager#write(byte[])}\n * is called, it will overwite the data that was previously written on the block.\n *\n * Clients can query the size of the currently written block via\n * {@link PersistentDataBlockManager#getDataBlockSize()}.\n *\n * Clients can query the maximum size for a block via\n * {@link PersistentDataBlockManager#getMaximumDataBlockSize()}\n *\n * Clients can read the currently written block by invoking\n * {@link PersistentDataBlockManager#read()}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IPersistentDataBlockService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader lock state is UNKNOWN.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_UNLOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader is UNLOCKED.\n     ",
    "links" : [ ]
  }, {
    "name" : "FLASH_LOCK_LOCKED",
    "type" : "int",
    "comment" : "\n     * Indicates that the device's bootloader is LOCKED.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int write(byte[] data)",
    "returnType" : "int",
    "comment" : "\n     * Writes {@code data} to the persistent partition. Previously written data\n     * will be overwritten. This data will persist across factory resets.\n     *\n     * Returns the number of bytes written or -1 on error. If the block is too big\n     * to fit on the partition, returns -MAX_BLOCK_SIZE.\n     *\n     * {@link #wipe} will block any further {@link #write} operation until reboot,\n     * in which case -1 will be returned.\n     *\n     * @param data the data to write\n     ",
    "links" : [ "#wipe", "#write" ]
  }, {
    "name" : "public byte[] read()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the data block stored on the persistent partition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataBlockSize()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves the size of the block currently written to the persistent partition.\n     *\n     * Return -1 on error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMaximumDataBlockSize()",
    "returnType" : "long",
    "comment" : "\n     * Retrieves the maximum size allowed for a data block.\n     *\n     * Returns -1 on error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void wipe()",
    "returnType" : "void",
    "comment" : "\n     * Zeroes the previously written block in its entirety. Calling this method\n     * will erase all data written to the persistent data partition.\n     * It will also prevent any further {@link #write} operation until reboot,\n     * in order to prevent a potential race condition. See b/30352311.\n     ",
    "links" : [ "#write" ]
  }, {
    "name" : "public void setOemUnlockEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Writes a byte enabling or disabling the ability to \"OEM unlock\" the device.\n     *\n     * @deprecated use {@link OemLockManager#setOemUnlockAllowedByUser(boolean)} instead.\n     ",
    "links" : [ "OemLockManager#setOemUnlockAllowedByUser" ]
  }, {
    "name" : "public boolean getOemUnlockEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not \"OEM unlock\" is enabled or disabled on this device.\n     *\n     * @deprecated use {@link OemLockManager#isOemUnlockAllowedByUser()} instead.\n     ",
    "links" : [ "OemLockManager#isOemUnlockAllowedByUser" ]
  }, {
    "name" : "public int getFlashLockState()",
    "returnType" : "int",
    "comment" : "\n     * Retrieves available information about this device's flash lock state.\n     *\n     * @return {@link #FLASH_LOCK_LOCKED} if device bootloader is locked,\n     * {@link #FLASH_LOCK_UNLOCKED} if device bootloader is unlocked, or {@link #FLASH_LOCK_UNKNOWN}\n     * if this information cannot be ascertained on this device.\n     ",
    "links" : [ "#FLASH_LOCK_LOCKED", "#FLASH_LOCK_UNLOCKED", "#FLASH_LOCK_UNKNOWN" ]
  } ],
  "variableNames" : [ "TAG", "sService", "FLASH_LOCK_UNKNOWN", "FLASH_LOCK_UNLOCKED", "FLASH_LOCK_LOCKED" ],
  "methodNames" : [ "public int write(byte[] data)", "public byte[] read()", "public int getDataBlockSize()", "public long getMaximumDataBlockSize()", "public void wipe()", "public void setOemUnlockEnabled(boolean enabled)", "public boolean getOemUnlockEnabled()", "public int getFlashLockState()" ]
}