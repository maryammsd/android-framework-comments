{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/Counter.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "Counter",
  "comment" : "\n * A class that does incremental counting for support of xsl:number.\n * This class stores a cache of counted nodes (m_countNodes).\n * It tries to cache the counted nodes in document order...\n * the node count is based on its position in the cache list\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAXCOUNTNODES",
    "type" : "int",
    "comment" : "\n   * Set the maximum ammount the m_countNodes list can\n   * grow to.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_countNodesStartCount",
    "type" : "int",
    "comment" : "\n   * The start count from where m_countNodes counts\n   * from.  In other words, the count of a given node\n   * in the m_countNodes vector is node position +\n   * m_countNodesStartCount.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_countNodes",
    "type" : "NodeSetDTM",
    "comment" : "\n   * A vector of all nodes counted so far.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_fromNode",
    "type" : "int",
    "comment" : "\n   * The node from where the counting starts.  This is needed to\n   * find a counter if the node being counted is not immediatly\n   * found in the m_countNodes vector.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_numberElem",
    "type" : "ElemNumber",
    "comment" : "\n   * The owning xsl:number element.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_countResult",
    "type" : "int",
    "comment" : "\n   * Value to store result of last getCount call, for benifit\n   * of returning val from CountersTable.getCounterByCounted,\n   * who calls getCount.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " int getPreviouslyCounted(XPathContext support, int node)",
    "returnType" : "int",
    "comment" : "\n   * Try and find a node that was previously counted. If found,\n   * return a positive integer that corresponds to the count.\n   *\n   * @param support The XPath context to use\n   * @param node The node to be counted.\n   * \n   * @return The count of the node, or -1 if not found.\n   ",
    "links" : [ ]
  }, {
    "name" : " int getLast()",
    "returnType" : "int",
    "comment" : "\n   * Get the last node in the list.\n   *\n   * @return the last node in the list.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int getPreviouslyCounted(XPathContext support, int node)", " int getLast()" ],
  "variableNames" : [ "MAXCOUNTNODES", "m_countNodesStartCount", "m_countNodes", "m_fromNode", "m_numberElem", "m_countResult" ]
}