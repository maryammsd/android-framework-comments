{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/Highlights.java",
  "packageName" : "android.text",
  "className" : "Builder",
  "comment" : "\n     * A builder for the Highlights.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mHighlights",
    "type" : "List<Pair<Paint, int[]>>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addRange(@NonNull Paint paint, @IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "Builder",
    "comment" : "\n         * Add single range highlight.\n         *\n         * The {@link android.widget.TextView} and underlying {@link Layout} draws highlight in the\n         * order of the {@link #addRange} calls.\n         *\n         * For example, the following code draws (1, 2) with red and (2, 5) with blue.\n         * <code>\n         *     val redPaint = Paint().apply { color = Color.RED }\n         *     val bluePaint = Paint().apply { color = Color.BLUE }\n         *     val highlight = Highlights.Builder()\n         *         .addRange(redPaint, 1, 4)\n         *         .addRange(bluePaint, 2, 5)\n         *         .build()\n         * </code>\n         *\n         *\n         * @param paint a paint object used for drawing highlight path.\n         * @param start an inclusive offset of the text.\n         * @param end an exclusive offset of the text.\n         * @return this builder instance.\n         ",
    "links" : [ "android.widget.TextView", "android.text.Layout", "#addRange" ]
  }, {
    "name" : "public Builder addRanges(@NonNull Paint paint, @NonNull int... ranges)",
    "returnType" : "Builder",
    "comment" : "\n         * Add multiple ranges highlight.\n         *\n         * For example, the following code draws (1, 2) with red and (2, 5) with blue.\n         * <code>\n         *     val redPaint = Paint().apply { color = Color.RED }\n         *     val bluePaint = Paint().apply { color = Color.BLUE }\n         *     val highlight = Highlights.Builder()\n         *         .addRange(redPaint, 1, 4)\n         *         .addRange(bluePaint, 2, 5)\n         *         .build()\n         * </code>\n         *\n         * @param paint a paint object used for drawing highlight path.\n         * @param ranges a flatten ranges. The {@code 2 * i}-th element is an inclusive start offset\n         *              of the {@code i}-th character. The {@code 2 * i + 1}-th element is an\n         *              exclusive end offset of the {@code i}-th character.\n         * @return this builder instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Highlights build()",
    "returnType" : "Highlights",
    "comment" : "\n         * Build a new Highlights instance.\n         *\n         * @return a new Highlights instance.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder addRange(@NonNull Paint paint, @IntRange(from = 0) int start, @IntRange(from = 0) int end)", "public Builder addRanges(@NonNull Paint paint, @NonNull int... ranges)", "public Highlights build()" ],
  "variableNames" : [ "mHighlights" ]
}