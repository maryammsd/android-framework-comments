{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Base64.java",
  "packageName" : "java.util",
  "className" : "Encoder",
  "comment" : "\n     * This class implements an encoder for encoding byte data using\n     * the Base64 encoding scheme as specified in RFC 4648 and RFC 2045.\n     *\n     * <p> Instances of {@link Encoder} class are safe for use by\n     * multiple concurrent threads.\n     *\n     * <p> Unless otherwise noted, passing a {@code null} argument to\n     * a method of this class will cause a\n     * {@link java.lang.NullPointerException NullPointerException} to\n     * be thrown.\n     * <p> If the encoded byte output of the needed size can not\n     *     be allocated, the encode methods of this class will\n     *     cause an {@link java.lang.OutOfMemoryError OutOfMemoryError}\n     *     to be thrown.\n     *\n     * @see     Decoder\n     * @since   1.8\n     ",
  "links" : [ "Encoder", "java.lang.NullPointerException", "java.lang.OutOfMemoryError" ],
  "variables" : [ {
    "name" : "newline",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "linemax",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "isURL",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "doPadding",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "toBase64",
    "type" : "char[]",
    "comment" : "\n         * This array is a lookup table that translates 6-bit positive integer\n         * index values into their \"Base64 Alphabet\" equivalents as specified\n         * in \"Table 1: The Base64 Alphabet\" of RFC 2045 (and RFC 4648).\n         ",
    "links" : [ ]
  }, {
    "name" : "toBase64URL",
    "type" : "char[]",
    "comment" : "\n         * It's the lookup table for \"URL and Filename safe Base64\" as specified\n         * in Table 2 of the RFC 4648, with the '+' and '/' changed to '-' and\n         * '_'. This table is used when BASE64_URL is specified.\n         ",
    "links" : [ ]
  }, {
    "name" : "MIMELINEMAX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CRLF",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC4648",
    "type" : "Encoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC4648_URLSAFE",
    "type" : "Encoder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RFC2045",
    "type" : "Encoder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private final int encodedOutLength(int srclen, boolean throwOOME)",
    "returnType" : "int",
    "comment" : "\n         * Calculates the length of the encoded output bytes.\n         *\n         * @param srclen length of the bytes to encode\n         * @param throwOOME if true, throws OutOfMemoryError if the length of\n         *                  the encoded bytes overflows; else returns the\n         *                  length\n         * @return length of the encoded bytes, or -1 if the length overflows\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : "public byte[] encode(byte[] src)",
    "returnType" : "byte[]",
    "comment" : "\n         * Encodes all bytes from the specified byte array into a newly-allocated\n         * byte array using the {@link Base64} encoding scheme. The returned byte\n         * array is of the length of the resulting bytes.\n         *\n         * @param   src\n         *          the byte array to encode\n         * @return  A newly-allocated byte array containing the resulting\n         *          encoded bytes.\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public int encode(byte[] src, byte[] dst)",
    "returnType" : "int",
    "comment" : "\n         * Encodes all bytes from the specified byte array using the\n         * {@link Base64} encoding scheme, writing the resulting bytes to the\n         * given output byte array, starting at offset 0.\n         *\n         * <p> It is the responsibility of the invoker of this method to make\n         * sure the output byte array {@code dst} has enough space for encoding\n         * all bytes from the input byte array. No bytes will be written to the\n         * output byte array if the output byte array is not big enough.\n         *\n         * @param   src\n         *          the byte array to encode\n         * @param   dst\n         *          the output byte array\n         * @return  The number of bytes written to the output byte array\n         *\n         * @throws  IllegalArgumentException if {@code dst} does not have enough\n         *          space for encoding all input bytes.\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public String encodeToString(byte[] src)",
    "returnType" : "String",
    "comment" : "\n         * Encodes the specified byte array into a String using the {@link Base64}\n         * encoding scheme.\n         *\n         * <p> This method first encodes all input bytes into a base64 encoded\n         * byte array and then constructs a new String by using the encoded byte\n         * array and the {@link java.nio.charset.StandardCharsets#ISO_8859_1\n         * ISO-8859-1} charset.\n         *\n         * <p> In other words, an invocation of this method has exactly the same\n         * effect as invoking\n         * {@code new String(encode(src), StandardCharsets.ISO_8859_1)}.\n         *\n         * @param   src\n         *          the byte array to encode\n         * @return  A String containing the resulting Base64 encoded characters\n         ",
    "links" : [ "java.util.Base64", "java.nio.charset.StandardCharsets#ISO_8859_1ISO" ]
  }, {
    "name" : "public ByteBuffer encode(ByteBuffer buffer)",
    "returnType" : "ByteBuffer",
    "comment" : "\n         * Encodes all remaining bytes from the specified byte buffer into\n         * a newly-allocated ByteBuffer using the {@link Base64} encoding\n         * scheme.\n         *\n         * Upon return, the source buffer's position will be updated to\n         * its limit; its limit will not have been changed. The returned\n         * output buffer's position will be zero and its limit will be the\n         * number of resulting encoded bytes.\n         *\n         * @param   buffer\n         *          the source ByteBuffer to encode\n         * @return  A newly-allocated byte buffer containing the encoded bytes.\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public OutputStream wrap(OutputStream os)",
    "returnType" : "OutputStream",
    "comment" : "\n         * Wraps an output stream for encoding byte data using the {@link Base64}\n         * encoding scheme.\n         *\n         * <p> It is recommended to promptly close the returned output stream after\n         * use, during which it will flush all possible leftover bytes to the underlying\n         * output stream. Closing the returned output stream will close the underlying\n         * output stream.\n         *\n         * @param   os\n         *          the output stream.\n         * @return  the output stream for encoding the byte data into the\n         *          specified Base64 encoded format\n         ",
    "links" : [ "java.util.Base64" ]
  }, {
    "name" : "public Encoder withoutPadding()",
    "returnType" : "Encoder",
    "comment" : "\n         * Returns an encoder instance that encodes equivalently to this one,\n         * but without adding any padding character at the end of the encoded\n         * byte data.\n         *\n         * <p> The encoding scheme of this encoder instance is unaffected by\n         * this invocation. The returned encoder instance should be used for\n         * non-padding encoding operation.\n         *\n         * @return an equivalent encoder that encodes without adding any\n         *         padding character at the end\n         ",
    "links" : [ ]
  }, {
    "name" : "private void encodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int encode0(byte[] src, int off, int end, byte[] dst)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private final int encodedOutLength(int srclen, boolean throwOOME)", "public byte[] encode(byte[] src)", "public int encode(byte[] src, byte[] dst)", "public String encodeToString(byte[] src)", "public ByteBuffer encode(ByteBuffer buffer)", "public OutputStream wrap(OutputStream os)", "public Encoder withoutPadding()", "private void encodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL)", "private int encode0(byte[] src, int off, int end, byte[] dst)" ],
  "variableNames" : [ "newline", "linemax", "isURL", "doPadding", "toBase64", "toBase64URL", "MIMELINEMAX", "CRLF", "RFC4648", "RFC4648_URLSAFE", "RFC2045" ]
}