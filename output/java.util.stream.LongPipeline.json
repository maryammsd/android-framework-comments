{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/LongPipeline.java",
  "packageName" : "java.util.stream",
  "className" : "LongPipeline",
  "comment" : " Android-changed: Made public for CTS tests only.",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "private static LongConsumer adapt(Sink<Long> sink)",
    "returnType" : "LongConsumer",
    "comment" : "\n     * Adapt a {@code Sink<Long> to an {@code LongConsumer}, ideally simply\n     * by casting.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Spliterator.OfLong adapt(Spliterator<Long> s)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "\n     * Adapt a {@code Spliterator<Long>} to a {@code Spliterator.OfLong}.\n     *\n     * @implNote\n     * The implementation attempts to cast to a Spliterator.OfLong, and throws\n     * an exception if this cast is not possible.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StreamShape getOutputShape()",
    "returnType" : "StreamShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node<Long> evaluateToNode(PipelineHelper<Long> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Long[]> generator)",
    "returnType" : "Node<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator<Long> wrap(PipelineHelper<Long> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)",
    "returnType" : "Spliterator<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfLong lazySpliterator(Supplier<? extends Spliterator<Long>> supplier)",
    "returnType" : "Spliterator.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean forEachWithCancel(Spliterator<Long> spliterator, Sink<Long> sink)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Node.Builder<Long> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Long[]> generator)",
    "returnType" : "Node.Builder<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Stream<U> mapToObj(LongFunction<? extends U> mapper, int opFlags)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final PrimitiveIterator.OfLong iterator()",
    "returnType" : "PrimitiveIterator.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Spliterator.OfLong spliterator()",
    "returnType" : "Spliterator.OfLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream asDoubleStream()",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<Long> boxed()",
    "returnType" : "Stream<Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream map(LongUnaryOperator mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Stream<U> mapToObj(LongFunction<? extends U> mapper)",
    "returnType" : "Stream<U>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final IntStream mapToInt(LongToIntFunction mapper)",
    "returnType" : "IntStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final DoubleStream mapToDouble(LongToDoubleFunction mapper)",
    "returnType" : "DoubleStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream flatMap(LongFunction<? extends LongStream> mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream mapMulti(LongMapMultiConsumer mapper)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LongStream unordered()",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream filter(LongPredicate predicate)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream peek(LongConsumer action)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream limit(long maxSize)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream skip(long n)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream takeWhile(LongPredicate predicate)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream dropWhile(LongPredicate predicate)",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream sorted()",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongStream distinct()",
    "returnType" : "LongStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEach(LongConsumer action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forEachOrdered(LongConsumer action)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long sum()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalLong min()",
    "returnType" : "OptionalLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalLong max()",
    "returnType" : "OptionalLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalDouble average()",
    "returnType" : "OptionalDouble",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long count()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final LongSummaryStatistics summaryStatistics()",
    "returnType" : "LongSummaryStatistics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long reduce(long identity, LongBinaryOperator op)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalLong reduce(LongBinaryOperator op)",
    "returnType" : "OptionalLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner)",
    "returnType" : "R",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean anyMatch(LongPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean allMatch(LongPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean noneMatch(LongPredicate predicate)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalLong findFirst()",
    "returnType" : "OptionalLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final OptionalLong findAny()",
    "returnType" : "OptionalLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final long[] toArray()",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static LongConsumer adapt(Sink<Long> sink)", "private static Spliterator.OfLong adapt(Spliterator<Long> s)", "public final StreamShape getOutputShape()", "public final Node<Long> evaluateToNode(PipelineHelper<Long> helper, Spliterator<P_IN> spliterator, boolean flattenTree, IntFunction<Long[]> generator)", "public final Spliterator<Long> wrap(PipelineHelper<Long> ph, Supplier<Spliterator<P_IN>> supplier, boolean isParallel)", "public final Spliterator.OfLong lazySpliterator(Supplier<? extends Spliterator<Long>> supplier)", "public final boolean forEachWithCancel(Spliterator<Long> spliterator, Sink<Long> sink)", "public final Node.Builder<Long> makeNodeBuilder(long exactSizeIfKnown, IntFunction<Long[]> generator)", "private Stream<U> mapToObj(LongFunction<? extends U> mapper, int opFlags)", "public final PrimitiveIterator.OfLong iterator()", "public final Spliterator.OfLong spliterator()", "public final DoubleStream asDoubleStream()", "public final Stream<Long> boxed()", "public final LongStream map(LongUnaryOperator mapper)", "public final Stream<U> mapToObj(LongFunction<? extends U> mapper)", "public final IntStream mapToInt(LongToIntFunction mapper)", "public final DoubleStream mapToDouble(LongToDoubleFunction mapper)", "public final LongStream flatMap(LongFunction<? extends LongStream> mapper)", "public final LongStream mapMulti(LongMapMultiConsumer mapper)", "public LongStream unordered()", "public final LongStream filter(LongPredicate predicate)", "public final LongStream peek(LongConsumer action)", "public final LongStream limit(long maxSize)", "public final LongStream skip(long n)", "public final LongStream takeWhile(LongPredicate predicate)", "public final LongStream dropWhile(LongPredicate predicate)", "public final LongStream sorted()", "public final LongStream distinct()", "public void forEach(LongConsumer action)", "public void forEachOrdered(LongConsumer action)", "public final long sum()", "public final OptionalLong min()", "public final OptionalLong max()", "public final OptionalDouble average()", "public final long count()", "public final LongSummaryStatistics summaryStatistics()", "public final long reduce(long identity, LongBinaryOperator op)", "public final OptionalLong reduce(LongBinaryOperator op)", "public final R collect(Supplier<R> supplier, ObjLongConsumer<R> accumulator, BiConsumer<R, R> combiner)", "public final boolean anyMatch(LongPredicate predicate)", "public final boolean allMatch(LongPredicate predicate)", "public final boolean noneMatch(LongPredicate predicate)", "public final OptionalLong findFirst()", "public final OptionalLong findAny()", "public final long[] toArray()" ],
  "variableNames" : [ ]
}