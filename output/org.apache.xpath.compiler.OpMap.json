{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/compiler/OpMap.java",
  "packageName" : "org.apache.xpath.compiler",
  "className" : "OpMap",
  "comment" : "\n * This class represents the data structure basics of the XPath\n * object.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_currentPattern",
    "type" : "String",
    "comment" : "\n   * The current pattern string, for diagnostics purposes\n   ",
    "links" : [ ]
  }, {
    "name" : "MAXTOKENQUEUESIZE",
    "type" : "int",
    "comment" : "\n   * The starting size of the token queue.\n   ",
    "links" : [ ]
  }, {
    "name" : "BLOCKTOKENQUEUESIZE",
    "type" : "int",
    "comment" : "\n   * Amount to grow token queue when it becomes full\n   ",
    "links" : [ ]
  }, {
    "name" : "m_tokenQueue",
    "type" : "ObjectVector",
    "comment" : "\n   *  TokenStack is the queue of used tokens. The current token is the token at the\n   * end of the m_tokenQueue. The idea is that the queue can be marked and a sequence\n   * of tokens can be reused.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_opMap",
    "type" : "OpMapVector",
    "comment" : "\n   * An operations map is used instead of a proper parse tree.  It contains\n   * operations codes and indexes into the m_tokenQueue.\n   * I use an array instead of a full parse tree in order to cut down\n   * on the number of objects created.\n   ",
    "links" : [ ]
  }, {
    "name" : "MAPINDEX_LENGTH",
    "type" : "int",
    "comment" : "\n   * The length is always the opcode position + 1.\n   * Length is always expressed as the opcode+length bytes,\n   * so it is always 2 or greater.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n   * Return the expression as a string for diagnostics.\n   *\n   * @return The expression string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getPatternString()",
    "returnType" : "String",
    "comment" : "\n   * Return the expression as a string for diagnostics.\n   *\n   * @return The expression string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ObjectVector getTokenQueue()",
    "returnType" : "ObjectVector",
    "comment" : "\n   * Get the XPath as a list of tokens.\n   *\n   * @return ObjectVector of tokens.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getToken(int pos)",
    "returnType" : "Object",
    "comment" : "\n   * Get the XPath as a list of tokens.\n   *\n   * @param pos index into token queue.\n   *\n   * @return The token, normally a string.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getTokenQueueSize()",
    "returnType" : "int",
    "comment" : "\n    * Get size of the token queue.\n   *\n   * @return The size of the token queue.\n   ",
    "links" : [ ]
  }, {
    "name" : "public OpMapVector getOpMap()",
    "returnType" : "OpMapVector",
    "comment" : "\n    * Get the opcode list that describes the XPath operations.  It contains\n   * operations codes and indexes into the m_tokenQueue.\n   * I use an array instead of a full parse tree in order to cut down\n   * on the number of objects created.\n   *\n   * @return An IntVector that is the opcode list that describes the XPath operations.\n   ",
    "links" : [ ]
  }, {
    "name" : " void shrink()",
    "returnType" : "void",
    "comment" : "\n   * Replace the large arrays\n   * with a small array.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getOp(int opPos)",
    "returnType" : "int",
    "comment" : "\n  * Given an operation position, return the current op.\n   *\n   * @param opPos index into op map.\n   * @return the op that corresponds to the opPos argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setOp(int opPos, int value)",
    "returnType" : "void",
    "comment" : "\n  * Set the op at index to the given int.\n   *\n   * @param opPos index into op map.\n   * @param value Value to set\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNextOpPos(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Given an operation position, return the end position, i.e. the\n   * beginning of the next operation.\n   *\n   * @param opPos An op position of an operation for which there is a size \n   *              entry following.\n   * @return position of next operation in m_opMap.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getNextStepPos(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Given a location step position, return the end position, i.e. the\n   * beginning of the next step.\n   *\n   * @param opPos the position of a location step.\n   * @return the position of the next location step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static int getNextOpPos(int[] opMap, int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Given an operation position, return the end position, i.e. the\n   * beginning of the next operation.\n   *\n   * @param opMap The operations map.\n   * @param opPos index to operation, for which there is a size entry following.\n   * @return position of next operation in m_opMap.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getFirstPredicateOpPos(int opPos) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Given an FROM_stepType position, return the position of the\n   * first predicate, if there is one, or else this will point\n   * to the end of the FROM_stepType.\n   * Example:\n   *  int posOfPredicate = xpath.getNextOpPos(stepPos);\n   *  boolean hasPredicates =\n   *            OpCodes.OP_PREDICATE == xpath.getOp(posOfPredicate);\n   *\n   * @param opPos position of FROM_stepType op. \n   * @return position of predicate in FROM_stepType structure.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param msg An error msgkey that corresponds to one of the constants found \n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is \n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which \n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to \n   *                              throw an exception.\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public static int getFirstChildPos(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Go to the first child of a given operation.\n   *\n   * @param opPos position of operation.\n   *\n   * @return The position of the first child of the operation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getArgLength(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Get the length of an operation.\n   *\n   * @param opPos The position of the operation in the op map.\n   *\n   * @return The size of the operation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getArgLengthOfStep(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Given a location step, get the length of that step.\n   *\n   * @param opPos Position of location step in op map.\n   *\n   * @return The length of the step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public static int getFirstChildPosOfStep(int opPos)",
    "returnType" : "int",
    "comment" : "\n   * Get the first child position of a given location step.\n   *\n   * @param opPos Position of location step in the location map.\n   *\n   * @return The first child position of the step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getStepTestType(int opPosOfStep)",
    "returnType" : "int",
    "comment" : "\n   * Get the test type of the step, i.e. NODETYPE_XXX value.\n   * \n   * @param opPosOfStep The position of the FROM_XXX step.\n   *\n   * @return NODETYPE_XXX value.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getStepNS(int opPosOfStep)",
    "returnType" : "String",
    "comment" : "\n   * Get the namespace of the step.\n   * \n   * @param opPosOfStep The position of the FROM_XXX step.\n   *\n   * @return The step's namespace, NodeTest.WILD, or null for null namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getStepLocalName(int opPosOfStep)",
    "returnType" : "String",
    "comment" : "\n   * Get the local name of the step.\n   * @param opPosOfStep The position of the FROM_XXX step.\n   *\n   * @return OpCodes.EMPTY, OpCodes.ELEMWILDCARD, or the local name.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public String getPatternString()", "public ObjectVector getTokenQueue()", "public Object getToken(int pos)", "public int getTokenQueueSize()", "public OpMapVector getOpMap()", " void shrink()", "public int getOp(int opPos)", "public void setOp(int opPos, int value)", "public int getNextOpPos(int opPos)", "public int getNextStepPos(int opPos)", "public static int getNextOpPos(int[] opMap, int opPos)", "public int getFirstPredicateOpPos(int opPos) throws javax.xml.transform.TransformerException", "public void error(String msg, Object[] args) throws javax.xml.transform.TransformerException", "public static int getFirstChildPos(int opPos)", "public int getArgLength(int opPos)", "public int getArgLengthOfStep(int opPos)", "public static int getFirstChildPosOfStep(int opPos)", "public int getStepTestType(int opPosOfStep)", "public String getStepNS(int opPosOfStep)", "public String getStepLocalName(int opPosOfStep)" ],
  "variableNames" : [ "m_currentPattern", "MAXTOKENQUEUESIZE", "BLOCKTOKENQUEUESIZE", "m_tokenQueue", "m_opMap", "MAPINDEX_LENGTH" ]
}