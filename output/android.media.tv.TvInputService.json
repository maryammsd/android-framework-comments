{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/TvInputService.java",
  "packageName" : "android.media.tv",
  "className" : "TvInputService",
  "comment" : "\n * The TvInputService class represents a TV input or source such as HDMI or built-in tuner which\n * provides pass-through video or broadcast TV programs.\n *\n * <p>Applications will not normally use this service themselves, instead relying on the standard\n * interaction provided by {@link TvView}. Those implementing TV input services should normally do\n * so by deriving from this class and providing their own session implementation based on\n * {@link TvInputService.Session}. All TV input services must require that clients hold the\n * {@link android.Manifest.permission#BIND_TV_INPUT} in order to interact with the service; if this\n * permission is not specified in the manifest, the system will refuse to bind to that TV input\n * service.\n ",
  "links" : [ "android.Manifest.permission#BIND_TV_INPUT", "TvInputService.Session", "android.media.tv.TvView" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DETACH_OVERLAY_VIEW_TIMEOUT_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * This is the interface name that a service implementing a TV input should say that it support\n     * -- that is, this is the action it uses for its intent filter. To be supported, the service\n     * must also require the {@link android.Manifest.permission#BIND_TV_INPUT} permission so that\n     * other applications cannot abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_TV_INPUT" ]
  }, {
    "name" : "SERVICE_META_DATA",
    "type" : "String",
    "comment" : "\n     * Name under which a TvInputService component publishes information about itself.\n     * This meta-data must reference an XML resource containing an\n     * <code>&lt;{@link android.R.styleable#TvInputService tv-input}&gt;</code>\n     * tag.\n     ",
    "links" : [ "android.R.styleable#TvInputService" ]
  }, {
    "name" : "PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND",
    "type" : "int",
    "comment" : "\n     * Use case of priority hint for {@link android.media.MediaCas#MediaCas(Context, int, String,\n     * int)}: Background. TODO Link: Tuner#Tuner(Context, string, int).\n     ",
    "links" : [ "android.media.MediaCas#MediaCas(Context" ]
  }, {
    "name" : "PRIORITY_HINT_USE_CASE_TYPE_SCAN",
    "type" : "int",
    "comment" : "\n     * Use case of priority hint for {@link android.media.MediaCas#MediaCas(Context, int, String,\n     * int)}: Scan. TODO Link: Tuner#Tuner(Context, string, int).\n     ",
    "links" : [ "android.media.MediaCas#MediaCas(Context" ]
  }, {
    "name" : "PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK",
    "type" : "int",
    "comment" : "\n     * Use case of priority hint for {@link android.media.MediaCas#MediaCas(Context, int, String,\n     * int)}: Playback. TODO Link: Tuner#Tuner(Context, string, int).\n     ",
    "links" : [ "android.media.MediaCas#MediaCas(Context" ]
  }, {
    "name" : "PRIORITY_HINT_USE_CASE_TYPE_LIVE",
    "type" : "int",
    "comment" : "\n     * Use case of priority hint for {@link android.media.MediaCas#MediaCas(Context, int, String,\n     * int)}: Live. TODO Link: Tuner#Tuner(Context, string, int).\n     ",
    "links" : [ "android.media.MediaCas#MediaCas(Context" ]
  }, {
    "name" : "PRIORITY_HINT_USE_CASE_TYPE_RECORD",
    "type" : "int",
    "comment" : "\n     * Use case of priority hint for {@link android.media.MediaCas#MediaCas(Context, int, String,\n     * int)}: Record. TODO Link: Tuner#Tuner(Context, string, int).\n     ",
    "links" : [ "android.media.MediaCas#MediaCas(Context" ]
  }, {
    "name" : "mServiceHandler",
    "type" : "Handler",
    "comment" : "\n     * Handler instance to handle request from TV Input Manager Service. Should be run in the main\n     * looper to be synchronously run with {@code Session.mHandler}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCallbacks",
    "type" : "RemoteCallbackList<ITvInputServiceCallback>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTvInputManager",
    "type" : "TvInputManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder createExtension()",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns a new {@link android.os.Binder}\n     *\n     * <p> if an extension is provided on top of existing {@link TvInputService}; otherwise,\n     * return {@code null}. Override to provide extended interface.\n     *\n     * @see android.os.Binder#setExtension(IBinder)\n     * @hide\n     ",
    "links" : [ "android.os.Binder", "android.media.tv.TvInputService" ]
  }, {
    "name" : "public List<String> getAvailableExtensionInterfaceNames()",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns available extension interfaces. This can be used to provide domain-specific\n     * features that are only known between certain hardware TV inputs and their clients.\n     *\n     * <p>Note that this service-level extension interface mechanism is only for hardware\n     * TV inputs that are bound even when sessions are not created.\n     *\n     * @return a non-null list of available extension interface names. An empty list\n     *         indicates the TV input doesn't support any extension interfaces.\n     * @see #getExtensionInterface\n     * @see #getExtensionInterfacePermission\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder getExtensionInterface(@NonNull String name)",
    "returnType" : "IBinder",
    "comment" : "\n     * Returns an extension interface. This can be used to provide domain-specific features\n     * that are only known between certain hardware TV inputs and their clients.\n     *\n     * <p>Note that this service-level extension interface mechanism is only for hardware\n     * TV inputs that are bound even when sessions are not created.\n     *\n     * @param name The extension interface name.\n     * @return an {@link IBinder} for the given extension interface, {@code null} if the TV input\n     *         doesn't support the given extension interface.\n     * @see #getAvailableExtensionInterfaceNames\n     * @see #getExtensionInterfacePermission\n     * @hide\n     ",
    "links" : [ "android.os.IBinder" ]
  }, {
    "name" : "public String getExtensionInterfacePermission(@NonNull String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns a permission for the given extension interface. This can be used to provide\n     * domain-specific features that are only known between certain hardware TV inputs and their\n     * clients.\n     *\n     * <p>Note that this service-level extension interface mechanism is only for hardware\n     * TV inputs that are bound even when sessions are not created.\n     *\n     * @param name The extension interface name.\n     * @return a name of the permission being checked for the given extension interface,\n     *         {@code null} if there is no required permission, or if the TV input doesn't\n     *         support the given extension interface.\n     * @see #getAvailableExtensionInterfaceNames\n     * @see #getExtensionInterface\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Session onCreateSession(@NonNull String inputId)",
    "returnType" : "Session",
    "comment" : "\n     * Returns a concrete implementation of {@link Session}.\n     *\n     * <p>May return {@code null} if this TV input service fails to create a session for some\n     * reason. If TV input represents an external device connected to a hardware TV input,\n     * {@link HardwareSession} should be returned.\n     *\n     * @param inputId The ID of the TV input associated with the session.\n     ",
    "links" : [ "HardwareSession", "Session" ]
  }, {
    "name" : "public RecordingSession onCreateRecordingSession(@NonNull String inputId)",
    "returnType" : "RecordingSession",
    "comment" : "\n     * Returns a concrete implementation of {@link RecordingSession}.\n     *\n     * <p>May return {@code null} if this TV input service fails to create a recording session for\n     * some reason.\n     *\n     * @param inputId The ID of the TV input associated with the recording session.\n     ",
    "links" : [ "RecordingSession" ]
  }, {
    "name" : "public Session onCreateSession(@NonNull String inputId, @NonNull String sessionId)",
    "returnType" : "Session",
    "comment" : "\n     * Returns a concrete implementation of {@link Session}.\n     *\n     * <p>For any apps that needs sessionId to request tuner resources from TunerResourceManager,\n     * it needs to override this method to get the sessionId passed. When no overriding, this method\n     * calls {@link #onCreateSession(String)} defaultly.\n     *\n     * @param inputId The ID of the TV input associated with the session.\n     * @param sessionId the unique sessionId created by TIF when session is created.\n     ",
    "links" : [ "#onCreateSession(String)", "Session" ]
  }, {
    "name" : "public Session onCreateSession(@NonNull String inputId, @NonNull String sessionId, @NonNull AttributionSource tvAppAttributionSource)",
    "returnType" : "Session",
    "comment" : "\n     * Returns a concrete implementation of {@link Session}.\n     *\n     * <p>For any apps that needs sessionId to request tuner resources from TunerResourceManager and\n     * needs to specify custom AttributionSource to AudioTrack, it needs to override this method to\n     * get the sessionId and AttrubutionSource passed. When no overriding, this method calls {@link\n     * #onCreateSession(String, String)} defaultly.\n     *\n     * @param inputId The ID of the TV input associated with the session.\n     * @param sessionId the unique sessionId created by TIF when session is created.\n     * @param tvAppAttributionSource The Attribution Source of the TV App.\n     ",
    "links" : [ "#onCreateSession(String", "Session" ]
  }, {
    "name" : "public RecordingSession onCreateRecordingSession(@NonNull String inputId, @NonNull String sessionId)",
    "returnType" : "RecordingSession",
    "comment" : "\n     * Returns a concrete implementation of {@link RecordingSession}.\n     *\n     * <p>For any apps that needs sessionId to request tuner resources from TunerResourceManager,\n     * it needs to override this method to get the sessionId passed. When no overriding, this method\n     * calls {@link #onCreateRecordingSession(String)} defaultly.\n     *\n     * @param inputId The ID of the TV input associated with the recording session.\n     * @param sessionId the unique sessionId created by TIF when session is created.\n     ",
    "links" : [ "#onCreateRecordingSession(String)", "RecordingSession" ]
  }, {
    "name" : "public TvInputInfo onHardwareAdded(TvInputHardwareInfo hardwareInfo)",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Returns a new {@link TvInputInfo} object if this service is responsible for\n     * {@code hardwareInfo}; otherwise, return {@code null}. Override to modify default behavior of\n     * ignoring all hardware input.\n     *\n     * @param hardwareInfo {@link TvInputHardwareInfo} object just added.\n     * @hide\n     ",
    "links" : [ "android.media.tv.TvInputHardwareInfo", "android.media.tv.TvInputInfo" ]
  }, {
    "name" : "public String onHardwareRemoved(TvInputHardwareInfo hardwareInfo)",
    "returnType" : "String",
    "comment" : "\n     * Returns the input ID for {@code deviceId} if it is handled by this service;\n     * otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware\n     * input.\n     *\n     * @param hardwareInfo {@link TvInputHardwareInfo} object just removed.\n     * @hide\n     ",
    "links" : [ "android.media.tv.TvInputHardwareInfo" ]
  }, {
    "name" : "public TvInputInfo onHdmiDeviceAdded(HdmiDeviceInfo deviceInfo)",
    "returnType" : "TvInputInfo",
    "comment" : "\n     * Returns a new {@link TvInputInfo} object if this service is responsible for\n     * {@code deviceInfo}; otherwise, return {@code null}. Override to modify default behavior of\n     * ignoring all HDMI logical input device.\n     *\n     * @param deviceInfo {@link HdmiDeviceInfo} object just added.\n     * @hide\n     ",
    "links" : [ "android.media.tv.TvInputInfo", "android.hardware.hdmi.HdmiDeviceInfo" ]
  }, {
    "name" : "public String onHdmiDeviceRemoved(HdmiDeviceInfo deviceInfo)",
    "returnType" : "String",
    "comment" : "\n     * Returns the input ID for {@code deviceInfo} if it is handled by this service; otherwise,\n     * return {@code null}. Override to modify default behavior of ignoring all HDMI logical input\n     * device.\n     *\n     * @param deviceInfo {@link HdmiDeviceInfo} object just removed.\n     * @hide\n     ",
    "links" : [ "android.hardware.hdmi.HdmiDeviceInfo" ]
  }, {
    "name" : "public void onHdmiDeviceUpdated(@NonNull HdmiDeviceInfo deviceInfo)",
    "returnType" : "void",
    "comment" : "\n     * Called when {@code deviceInfo} is updated.\n     *\n     * <p>The changes are usually cuased by the corresponding HDMI-CEC logical device.\n     *\n     * <p>The default behavior ignores all changes.\n     *\n     * <p>The TV input service responsible for {@code deviceInfo} can update the {@link TvInputInfo}\n     * object based on the updated {@code deviceInfo} (e.g. update the label based on the preferred\n     * device OSD name).\n     *\n     * @param deviceInfo the updated {@link HdmiDeviceInfo} object.\n     * @hide\n     ",
    "links" : [ "android.media.tv.TvInputInfo", "android.hardware.hdmi.HdmiDeviceInfo" ]
  }, {
    "name" : "private boolean isPassthroughInput(String inputId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNavigationKey(int keyCode)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(Intent intent)", "public IBinder createExtension()", "public List<String> getAvailableExtensionInterfaceNames()", "public IBinder getExtensionInterface(@NonNull String name)", "public String getExtensionInterfacePermission(@NonNull String name)", "public abstract Session onCreateSession(@NonNull String inputId)", "public RecordingSession onCreateRecordingSession(@NonNull String inputId)", "public Session onCreateSession(@NonNull String inputId, @NonNull String sessionId)", "public Session onCreateSession(@NonNull String inputId, @NonNull String sessionId, @NonNull AttributionSource tvAppAttributionSource)", "public RecordingSession onCreateRecordingSession(@NonNull String inputId, @NonNull String sessionId)", "public TvInputInfo onHardwareAdded(TvInputHardwareInfo hardwareInfo)", "public String onHardwareRemoved(TvInputHardwareInfo hardwareInfo)", "public TvInputInfo onHdmiDeviceAdded(HdmiDeviceInfo deviceInfo)", "public String onHdmiDeviceRemoved(HdmiDeviceInfo deviceInfo)", "public void onHdmiDeviceUpdated(@NonNull HdmiDeviceInfo deviceInfo)", "private boolean isPassthroughInput(String inputId)", "public static boolean isNavigationKey(int keyCode)" ],
  "variableNames" : [ "DEBUG", "TAG", "DETACH_OVERLAY_VIEW_TIMEOUT_MS", "SERVICE_INTERFACE", "SERVICE_META_DATA", "PRIORITY_HINT_USE_CASE_TYPE_BACKGROUND", "PRIORITY_HINT_USE_CASE_TYPE_SCAN", "PRIORITY_HINT_USE_CASE_TYPE_PLAYBACK", "PRIORITY_HINT_USE_CASE_TYPE_LIVE", "PRIORITY_HINT_USE_CASE_TYPE_RECORD", "mServiceHandler", "mCallbacks", "mTvInputManager" ]
}