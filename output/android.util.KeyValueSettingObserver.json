{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/KeyValueSettingObserver.java",
  "packageName" : "android.util",
  "className" : "KeyValueSettingObserver",
  "comment" : "\n * Abstract class for observing changes to a specified setting stored as a comma-separated key value\n * list of parameters. Registers and unregisters a {@link ContentObserver} and handles updates when\n * the setting changes.\n *\n * <p>Subclasses should pass in the relevant setting's {@link Uri} in the constructor and implement\n * {@link #update(KeyValueListParser)} to receive updates when the value changes.\n * Calls to {@link #update(KeyValueListParser)} only trigger after calling {@link\n * #start()}.\n *\n * <p>To get the most up-to-date parameter values, first call {@link #start()} before accessing the\n * values to start observing changes, and then call {@link #stop()} once finished.\n *\n * @hide\n ",
  "links" : [ "#start()", "#update(KeyValueListParser)", "android.net.Uri", "#stop()", "android.database.ContentObserver" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParser",
    "type" : "KeyValueListParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "ContentObserver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResolver",
    "type" : "ContentResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSettingUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : " Starts observing changes for the setting. Pair with {@link #stop()}. ",
    "links" : [ "#stop()" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : " Stops observing changes for the setting. ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSettingValue(ContentResolver resolver)",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link String} representation of the setting. Subclasses should implement this\n     * for their setting.\n     ",
    "links" : [ "String" ]
  }, {
    "name" : "private void setParserValue()",
    "returnType" : "void",
    "comment" : " Updates the parser with the current setting value. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void update(KeyValueListParser parser)",
    "returnType" : "void",
    "comment" : " Subclasses should implement this to update references to their parameters. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void start()", "public void stop()", "public abstract String getSettingValue(ContentResolver resolver)", "private void setParserValue()", "public abstract void update(KeyValueListParser parser)" ],
  "variableNames" : [ "TAG", "mParser", "mObserver", "mResolver", "mSettingUri" ]
}