{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/params/LensShadingMap.java",
  "packageName" : "android.hardware.camera2.params",
  "className" : "LensShadingMap",
  "comment" : "\n * Immutable class for describing a {@code 4 x N x M} lens shading map of floats.\n *\n * @see CaptureResult#STATISTICS_LENS_SHADING_CORRECTION_MAP\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MINIMUM_GAIN_FACTOR",
    "type" : "float",
    "comment" : "\n     * The smallest gain factor in this map.\n     *\n     * <p>All values in this map will be at least this large.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "mRows",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumns",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElements",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getRowCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of rows in this map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of columns in this map.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getGainFactorCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the total number of gain factors in this map.\n     *\n     * <p>A single gain factor contains exactly one color channel.\n     * Use with {@link #copyGainFactors} to allocate a large-enough array.</p>\n     ",
    "links" : [ "#copyGainFactors" ]
  }, {
    "name" : "public float getGainFactor(final int colorChannel, final int column, final int row)",
    "returnType" : "float",
    "comment" : "\n     * Get a single color channel gain factor from this lens shading map by its row and column.\n     *\n     * <p>The rows must be within the range [0, {@link #getRowCount}),\n     * the column must be within the range [0, {@link #getColumnCount}),\n     * and the color channel must be within the range [0, {@value RggbChannelVector#COUNT}).</p>\n     *\n     * <p>The channel order is {@code [R, Geven, Godd, B]}, where\n     * {@code Geven} is the green channel for the even rows of a Bayer pattern, and\n     * {@code Godd} is the odd rows.\n     * </p>\n     *\n     * @param colorChannel color channel from {@code [R, Geven, Godd, B]}\n     * @param column within the range [0, {@link #getColumnCount})\n     * @param row within the range [0, {@link #getRowCount})\n     *\n     * @return a gain factor >= {@value #MINIMUM_GAIN_FACTOR}\n     *\n     * @throws IllegalArgumentException if any of the parameters was out of range\n     *\n     * @see RggbChannelVector#RED\n     * @see RggbChannelVector#GREEN_EVEN\n     * @see RggbChannelVector#GREEN_ODD\n     * @see RggbChannelVector#BLUE\n     * @see #getRowCount\n     * @see #getColumnCount\n     ",
    "links" : [ "#getRowCount", "#getColumnCount" ]
  }, {
    "name" : "public RggbChannelVector getGainFactorVector(final int column, final int row)",
    "returnType" : "RggbChannelVector",
    "comment" : "\n     * Get a gain factor vector from this lens shading map by its row and column.\n     *\n     * <p>The rows must be within the range [0, {@link #getRowCount}),\n     * the column must be within the range [0, {@link #getColumnCount}).</p>\n     *\n     * @param column within the range [0, {@link #getColumnCount})\n     * @param row within the range [0, {@link #getRowCount})\n     *\n     * @return an {@link RggbChannelVector} where each gain factor >= {@value #MINIMUM_GAIN_FACTOR}\n     *\n     * @throws IllegalArgumentException if any of the parameters was out of range\n     *\n     * @see #getRowCount\n     * @see #getColumnCount\n     ",
    "links" : [ "android.hardware.camera2.params.RggbChannelVector", "#getRowCount", "#getColumnCount" ]
  }, {
    "name" : "public void copyGainFactors(final float[] destination, final int offset)",
    "returnType" : "void",
    "comment" : "\n     * Copy all gain factors in row-major order from this lens shading map into the destination.\n     *\n     * <p>Each gain factor will be >= {@link #MINIMUM_GAIN_FACTOR}.</p>\n     *\n     * @param destination\n     *          an array big enough to hold at least {@link RggbChannelVector#COUNT}\n     *          elements after the {@code offset}\n     * @param offset\n     *          a non-negative offset into the array\n     * @throws NullPointerException\n     *          If {@code destination} was {@code null}\n     * @throws IllegalArgumentException\n     *          If offset was negative\n     * @throws ArrayIndexOutOfBoundsException\n     *          If there's not enough room to write the elements at the specified destination and\n     *          offset.\n     *\n     * @see CaptureResult#STATISTICS_LENS_SHADING_CORRECTION_MAP\n     ",
    "links" : [ "android.hardware.camera2.params.RggbChannelVector#COUNT", "#MINIMUM_GAIN_FACTOR" ]
  }, {
    "name" : "public boolean equals(final Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if this LensShadingMap is equal to another LensShadingMap.\n     *\n     * <p>Two lens shading maps are equal if and only if they have the same rows/columns,\n     * and all of their elements are {@link Object#equals equal}.</p>\n     *\n     * @return {@code true} if the objects were equal, {@code false} otherwise\n     ",
    "links" : [ "#equals" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Return the LensShadingMap as a string representation.\n     *\n     * <p> {@code \"LensShadingMap{R:([%f, %f, ... %f], ... [%f, %f, ... %f]), G_even:([%f, %f, ...\n     *  %f], ... [%f, %f, ... %f]), G_odd:([%f, %f, ... %f], ... [%f, %f, ... %f]), B:([%f, %f, ...\n     *  %f], ... [%f, %f, ... %f])}\"},\n     * where each {@code %f} represents one gain factor and each {@code [%f, %f, ... %f]} represents\n     * a row of the lens shading map</p>\n     *\n     * @return string representation of {@link LensShadingMap}\n     ",
    "links" : [ "android.hardware.camera2.params.LensShadingMap" ]
  } ],
  "methodNames" : [ "public int getRowCount()", "public int getColumnCount()", "public int getGainFactorCount()", "public float getGainFactor(final int colorChannel, final int column, final int row)", "public RggbChannelVector getGainFactorVector(final int column, final int row)", "public void copyGainFactors(final float[] destination, final int offset)", "public boolean equals(final Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "MINIMUM_GAIN_FACTOR", "mRows", "mColumns", "mElements" ]
}