{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/urlconnection/MessageLoop.java",
  "packageName" : "org.chromium.net.urlconnection",
  "className" : "MessageLoop",
  "comment" : "\n * A MessageLoop class for use in {@link CronetHttpURLConnection}.\n ",
  "links" : [ "org.chromium.net.urlconnection.CronetHttpURLConnection" ],
  "variables" : [ {
    "name" : "mQueue",
    "type" : "BlockingQueue<Runnable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoopRunning",
    "type" : "boolean",
    "comment" : " Indicates whether this message loop is currently running.",
    "links" : [ ]
  }, {
    "name" : "mLoopFailed",
    "type" : "boolean",
    "comment" : " task enqueued.",
    "links" : [ ]
  }, {
    "name" : "mPriorInterruptedIOException",
    "type" : "InterruptedIOException",
    "comment" : " will be set.",
    "links" : [ ]
  }, {
    "name" : "mPriorRuntimeException",
    "type" : "RuntimeException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INVALID_THREAD_ID",
    "type" : "long",
    "comment" : " Used when assertions are enabled to enforce single-threaded use.",
    "links" : [ ]
  }, {
    "name" : "mThreadId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private boolean calledOnValidThread()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Runnable take(boolean useTimeout, long timeoutNano) throws InterruptedIOException",
    "returnType" : "Runnable",
    "comment" : "\n     * Retrieves a task from the queue with the given timeout.\n     *\n     * @param useTimeout whether to use a timeout.\n     * @param timeoutNano Time to wait, in nanoseconds.\n     * @return A non-{@code null} Runnable from the queue.\n     * @throws InterruptedIOException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void loop() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Runs the message loop. Be sure to call {@link MessageLoop#quit()}\n     * to end the loop. If an interruptedException occurs, the loop cannot be\n     * started again (see {@link #mLoopFailed}).\n     * @throws IOException\n     ",
    "links" : [ "#mLoopFailed", "org.chromium.net.urlconnection.MessageLoop#quit()" ]
  }, {
    "name" : "public void loop(int timeoutMilli) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Runs the message loop. Be sure to call {@link MessageLoop#quit()}\n     * to end the loop. If an interruptedException occurs, the loop cannot be\n     * started again (see {@link #mLoopFailed}).\n     * @param timeoutMilli Timeout, in milliseconds, or 0 for no timeout.\n     * @throws IOException\n     ",
    "links" : [ "#mLoopFailed", "org.chromium.net.urlconnection.MessageLoop#quit()" ]
  }, {
    "name" : "public void quit()",
    "returnType" : "void",
    "comment" : "\n     * This causes {@link #loop()} to stop executing messages after the current\n     * message being executed.  Should only be called from the currently\n     * executing message.\n     ",
    "links" : [ "#loop()" ]
  }, {
    "name" : "public void execute(Runnable task) throws RejectedExecutionException",
    "returnType" : "void",
    "comment" : " Posts a task to the message loop. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : " Returns whether the loop is currently running. Used in testing. ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasLoopFailed()",
    "returnType" : "boolean",
    "comment" : " Returns whether an exception occurred in {#loop()}. Used in testing. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private boolean calledOnValidThread()", "private Runnable take(boolean useTimeout, long timeoutNano) throws InterruptedIOException", "public void loop() throws IOException", "public void loop(int timeoutMilli) throws IOException", "public void quit()", "public void execute(Runnable task) throws RejectedExecutionException", "public boolean isRunning()", "public boolean hasLoopFailed()" ],
  "variableNames" : [ "mQueue", "mLoopRunning", "mLoopFailed", "mPriorInterruptedIOException", "mPriorRuntimeException", "INVALID_THREAD_ID", "mThreadId" ]
}