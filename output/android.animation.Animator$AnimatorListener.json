{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/Animator.java",
  "packageName" : "android.animation",
  "className" : "AnimatorListener",
  "comment" : "\n     * <p>An animation listener receives notifications from an animation.\n     * Notifications indicate animation related events, such as the end or the\n     * repetition of the animation.</p>\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onAnimationStart(@NonNull Animator animation, boolean isReverse)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the start of the animation as well as the animation's overall play direction.\n         * This method's default behavior is to call {@link #onAnimationStart(Animator)}. This\n         * method can be overridden, though not required, to get the additional play direction info\n         * when an animation starts. Skipping calling super when overriding this method results in\n         * {@link #onAnimationStart(Animator)} not getting called.\n         *\n         * @param animation The started animation.\n         * @param isReverse Whether the animation is playing in reverse.\n         ",
    "links" : [ "#onAnimationStart(Animator)" ]
  }, {
    "name" : " void onAnimationEnd(@NonNull Animator animation, boolean isReverse)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the end of the animation. This callback is not invoked\n         * for animations with repeat count set to INFINITE.</p>\n         *\n         * <p>This method's default behavior is to call {@link #onAnimationEnd(Animator)}. This\n         * method can be overridden, though not required, to get the additional play direction info\n         * when an animation ends. Skipping calling super when overriding this method results in\n         * {@link #onAnimationEnd(Animator)} not getting called.\n         *\n         * @param animation The animation which reached its end.\n         * @param isReverse Whether the animation is playing in reverse.\n         ",
    "links" : [ "#onAnimationEnd(Animator)" ]
  }, {
    "name" : " void onAnimationStart(@NonNull Animator animation)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the start of the animation.</p>\n         *\n         * @param animation The started animation.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onAnimationEnd(@NonNull Animator animation)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the end of the animation. This callback is not invoked\n         * for animations with repeat count set to INFINITE.</p>\n         *\n         * @param animation The animation which reached its end.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onAnimationCancel(@NonNull Animator animation)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the cancellation of the animation. This callback is not invoked\n         * for animations with repeat count set to INFINITE.</p>\n         *\n         * @param animation The animation which was canceled.\n         ",
    "links" : [ ]
  }, {
    "name" : " void onAnimationRepeat(@NonNull Animator animation)",
    "returnType" : "void",
    "comment" : "\n         * <p>Notifies the repetition of the animation.</p>\n         *\n         * @param animation The animation which was repeated.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onAnimationStart(@NonNull Animator animation, boolean isReverse)", " void onAnimationEnd(@NonNull Animator animation, boolean isReverse)", " void onAnimationStart(@NonNull Animator animation)", " void onAnimationEnd(@NonNull Animator animation)", " void onAnimationCancel(@NonNull Animator animation)", " void onAnimationRepeat(@NonNull Animator animation)" ],
  "variableNames" : [ ]
}