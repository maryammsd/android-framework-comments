{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/ActivityChooserModel.java",
  "packageName" : "android.widget",
  "className" : "ActivityChooserModel",
  "comment" : "\n * <p>\n * This class represents a data model for choosing a component for handing a\n * given {@link Intent}. The model is responsible for querying the system for\n * activities that can handle the given intent and order found activities\n * based on historical data of previous choices. The historical data is stored\n * in an application private file. If a client does not want to have persistent\n * choice history the file can be omitted, thus the activities will be ordered\n * based on historical usage for the current session.\n * <p>\n * </p>\n * For each backing history file there is a singleton instance of this class. Thus,\n * several clients that specify the same history file will share the same model. Note\n * that if multiple clients are sharing the same model they should implement semantically\n * equivalent functionality since setting the model intent will change the found\n * activities and they may be inconsistent with the functionality of some of the clients.\n * For example, choosing a share activity can be implemented by a single backing\n * model and two different views for performing the selection. If however, one of the\n * views is used for sharing but the other for importing, for example, then each\n * view should be backed by a separate model.\n * </p>\n * <p>\n * The way clients interact with this class is as follows:\n * </p>\n * <p>\n * <pre>\n * <code>\n *  // Get a model and set it to a couple of clients with semantically similar function.\n *  ActivityChooserModel dataModel =\n *      ActivityChooserModel.get(context, \"task_specific_history_file_name.xml\");\n *\n *  ActivityChooserModelClient modelClient1 = getActivityChooserModelClient1();\n *  modelClient1.setActivityChooserModel(dataModel);\n *\n *  ActivityChooserModelClient modelClient2 = getActivityChooserModelClient2();\n *  modelClient2.setActivityChooserModel(dataModel);\n *\n *  // Set an intent to choose a an activity for.\n *  dataModel.setIntent(intent);\n * <pre>\n * <code>\n * </p>\n * <p>\n * <strong>Note:</strong> This class is thread safe.\n * </p>\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "\n     * Flag for selecting debug mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "\n     * Tag used for logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_HISTORICAL_RECORDS",
    "type" : "String",
    "comment" : "\n     * The root tag in the history file.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_HISTORICAL_RECORD",
    "type" : "String",
    "comment" : "\n     * The tag for a record in the history file.\n     ",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_ACTIVITY",
    "type" : "String",
    "comment" : "\n     * Attribute for the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_TIME",
    "type" : "String",
    "comment" : "\n     * Attribute for the choice time.\n     ",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE_WEIGHT",
    "type" : "String",
    "comment" : "\n     * Attribute for the choice weight.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_HISTORY_FILE_NAME",
    "type" : "String",
    "comment" : "\n     * The default name of the choice history file.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_HISTORY_MAX_LENGTH",
    "type" : "int",
    "comment" : "\n     * The default maximal length of the choice history.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ACTIVITY_INFLATION",
    "type" : "int",
    "comment" : "\n     * The amount with which to inflate a chosen activity when set as default.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_HISTORICAL_RECORD_WEIGHT",
    "type" : "float",
    "comment" : "\n     * Default weight for a choice record.\n     ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_FILE_EXTENSION",
    "type" : "String",
    "comment" : "\n     * The extension of the history file.\n     ",
    "links" : [ ]
  }, {
    "name" : "INVALID_INDEX",
    "type" : "int",
    "comment" : "\n     * An invalid item index.\n     ",
    "links" : [ ]
  }, {
    "name" : "sRegistryLock",
    "type" : "Object",
    "comment" : "\n     * Lock to guard the model registry.\n     ",
    "links" : [ ]
  }, {
    "name" : "sDataModelRegistry",
    "type" : "Map<String, ActivityChooserModel>",
    "comment" : "\n     * This the registry for data models.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInstanceLock",
    "type" : "Object",
    "comment" : "\n     * Lock for synchronizing on this instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivities",
    "type" : "List<ActivityResolveInfo>",
    "comment" : "\n     * List of activities that can handle the current intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHistoricalRecords",
    "type" : "List<HistoricalRecord>",
    "comment" : "\n     * List with historical choice records.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPackageMonitor",
    "type" : "PackageMonitor",
    "comment" : "\n     * Monitor for added and removed packages.\n     ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "\n     * Context for accessing resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHistoryFileName",
    "type" : "String",
    "comment" : "\n     * The name of the history file that backs this model.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIntent",
    "type" : "Intent",
    "comment" : "\n     * The intent for which a activity is being chosen.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivitySorter",
    "type" : "ActivitySorter",
    "comment" : "\n     * The sorter for ordering activities based on intent and past choices.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHistoryMaxSize",
    "type" : "int",
    "comment" : "\n     * The maximal length of the choice history.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCanReadHistoricalData",
    "type" : "boolean",
    "comment" : "\n     * Flag whether choice history can be read. In general many clients can\n     * share the same data model and {@link #readHistoricalDataIfNeeded()} may be called\n     * by arbitrary of them any number of times. Therefore, this class guarantees\n     * that the very first read succeeds and subsequent reads can be performed\n     * only after a call to {@link #persistHistoricalDataIfNeeded()} followed by change\n     * of the share records.\n     ",
    "links" : [ "#readHistoricalDataIfNeeded()", "#persistHistoricalDataIfNeeded()" ]
  }, {
    "name" : "mReadShareHistoryCalled",
    "type" : "boolean",
    "comment" : "\n     * Flag whether the choice history was read. This is used to enforce that\n     * before calling {@link #persistHistoricalDataIfNeeded()} a call to\n     * {@link #persistHistoricalDataIfNeeded()} has been made. This aims to avoid a\n     * scenario in which a choice history file exits, it is not read yet and\n     * it is overwritten. Note that always all historical records are read in\n     * full and the file is rewritten. This is necessary since we need to\n     * purge old records that are outside of the sliding window of past choices.\n     ",
    "links" : [ "#persistHistoricalDataIfNeeded()" ]
  }, {
    "name" : "mHistoricalRecordsChanged",
    "type" : "boolean",
    "comment" : "\n     * Flag whether the choice records have changed. In general many clients can\n     * share the same data model and {@link #persistHistoricalDataIfNeeded()} may be called\n     * by arbitrary of them any number of times. Therefore, this class guarantees\n     * that choice history will be persisted only if it has changed.\n     ",
    "links" : [ "#persistHistoricalDataIfNeeded()" ]
  }, {
    "name" : "mReloadActivities",
    "type" : "boolean",
    "comment" : "\n     * Flag whether to reload the activities for the current intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "mActivityChoserModelPolicy",
    "type" : "OnChooseActivityListener",
    "comment" : "\n     * Policy for controlling how the model handles chosen activities.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ActivityChooserModel get(Context context, String historyFileName)",
    "returnType" : "ActivityChooserModel",
    "comment" : "\n     * Gets the data model backed by the contents of the provided file with historical data.\n     * Note that only one data model is backed by a given file, thus multiple calls with\n     * the same file name will return the same model instance. If no such instance is present\n     * it is created.\n     * <p>\n     * <strong>Note:</strong> To use the default historical data file clients should explicitly\n     * pass as file name {@link #DEFAULT_HISTORY_FILE_NAME}. If no persistence of the choice\n     * history is desired clients should pass <code>null</code> for the file name. In such\n     * case a new model is returned for each invocation.\n     * </p>\n     *\n     * <p>\n     * <strong>Always use difference historical data files for semantically different actions.\n     * For example, sharing is different from importing.</strong>\n     * </p>\n     *\n     * @param context Context for loading resources.\n     * @param historyFileName File name with choice history, <code>null</code>\n     *        if the model should not be backed by a file. In this case the activities\n     *        will be ordered only by data from the current session.\n     *\n     * @return The model.\n     ",
    "links" : [ "#DEFAULT_HISTORY_FILE_NAME" ]
  }, {
    "name" : "public void setIntent(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Sets an intent for which to choose a activity.\n     * <p>\n     * <strong>Note:</strong> Clients must set only semantically similar\n     * intents for each data model.\n     * <p>\n     *\n     * @param intent The intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getIntent()",
    "returnType" : "Intent",
    "comment" : "\n     * Gets the intent for which a activity is being chosen.\n     *\n     * @return The intent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActivityCount()",
    "returnType" : "int",
    "comment" : "\n     * Gets the number of activities that can handle the intent.\n     *\n     * @return The activity count.\n     *\n     * @see #setIntent(Intent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo getActivity(int index)",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * Gets an activity at a given index.\n     *\n     * @return The activity.\n     *\n     * @see ActivityResolveInfo\n     * @see #setIntent(Intent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActivityIndex(ResolveInfo activity)",
    "returnType" : "int",
    "comment" : "\n     * Gets the index of a the given activity.\n     *\n     * @param activity The activity index.\n     *\n     * @return The index if found, -1 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent chooseActivity(int index)",
    "returnType" : "Intent",
    "comment" : "\n     * Chooses a activity to handle the current intent. This will result in\n     * adding a historical record for that action and construct intent with\n     * its component name set such that it can be immediately started by the\n     * client.\n     * <p>\n     * <strong>Note:</strong> By calling this method the client guarantees\n     * that the returned intent will be started. This intent is returned to\n     * the client solely to let additional customization before the start.\n     * </p>\n     *\n     * @return An {@link Intent} for launching the activity or null if the\n     *         policy has consumed the intent or there is not current intent\n     *         set via {@link #setIntent(Intent)}.\n     *\n     * @see HistoricalRecord\n     * @see OnChooseActivityListener\n     ",
    "links" : [ "android.content.Intent", "#setIntent(Intent)" ]
  }, {
    "name" : "public void setOnChooseActivityListener(OnChooseActivityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener for choosing an activity.\n     *\n     * @param listener The listener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo getDefaultActivity()",
    "returnType" : "ResolveInfo",
    "comment" : "\n     * Gets the default activity, The default activity is defined as the one\n     * with highest rank i.e. the first one in the list of activities that can\n     * handle the intent.\n     *\n     * @return The default activity, <code>null</code> id not activities.\n     *\n     * @see #getActivity(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultActivity(int index)",
    "returnType" : "void",
    "comment" : "\n     * Sets the default activity. The default activity is set by adding a\n     * historical record with weight high enough that this activity will\n     * become the highest ranked. Such a strategy guarantees that the default\n     * will eventually change if not used. Also the weight of the record for\n     * setting a default is inflated with a constant amount to guarantee that\n     * it will stay as default for awhile.\n     *\n     * @param index The index of the activity to set as default.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void persistHistoricalDataIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * Persists the history data to the backing file if the latter\n     * was provided. Calling this method before a call to {@link #readHistoricalDataIfNeeded()}\n     * throws an exception. Calling this method more than one without choosing an\n     * activity has not effect.\n     *\n     * @throws IllegalStateException If this method is called before a call to\n     *         {@link #readHistoricalDataIfNeeded()}.\n     ",
    "links" : [ "#readHistoricalDataIfNeeded()" ]
  }, {
    "name" : "public void setActivitySorter(ActivitySorter activitySorter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sorter for ordering activities based on historical data and an intent.\n     *\n     * @param activitySorter The sorter.\n     *\n     * @see ActivitySorter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHistoryMaxSize(int historyMaxSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximal size of the historical data. Defaults to\n     * {@link #DEFAULT_HISTORY_MAX_LENGTH}\n     * <p>\n     *   <strong>Note:</strong> Setting this property will immediately\n     *   enforce the specified max history size by dropping enough old\n     *   historical records to enforce the desired size. Thus, any\n     *   records that exceed the history size will be discarded and\n     *   irreversibly lost.\n     * </p>\n     *\n     * @param historyMaxSize The max history size.\n     ",
    "links" : [ "#DEFAULT_HISTORY_MAX_LENGTH" ]
  }, {
    "name" : "public int getHistoryMaxSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the history max size.\n     *\n     * @return The history max size.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHistorySize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the history size.\n     *\n     * @return The history size.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureConsistentState()",
    "returnType" : "void",
    "comment" : "\n     * Ensures the model is in a consistent state which is the\n     * activities for the current intent have been loaded, the\n     * most recent history has been read, and the activities\n     * are sorted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean sortActivitiesIfNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * Sorts the activities if necessary which is if there is a\n     * sorter, there are some activities to sort, and there is some\n     * historical data.\n     *\n     * @return Whether sorting was performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean loadActivitiesIfNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * Loads the activities for the current intent if needed which is\n     * if they are not already loaded for the current intent.\n     *\n     * @return Whether loading was performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean readHistoricalDataIfNeeded()",
    "returnType" : "boolean",
    "comment" : "\n     * Reads the historical data if necessary which is it has\n     * changed, there is a history file, and there is not persist\n     * in progress.\n     *\n     * @return Whether reading was performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean addHisoricalRecord(HistoricalRecord historicalRecord)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a historical record.\n     *\n     * @param historicalRecord The record to add.\n     * @return True if the record was added.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void pruneExcessiveHistoricalRecordsIfNeeded()",
    "returnType" : "void",
    "comment" : "\n     * Prunes older excessive records to guarantee maxHistorySize.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readHistoricalDataImpl()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "DEBUG", "LOG_TAG", "TAG_HISTORICAL_RECORDS", "TAG_HISTORICAL_RECORD", "ATTRIBUTE_ACTIVITY", "ATTRIBUTE_TIME", "ATTRIBUTE_WEIGHT", "DEFAULT_HISTORY_FILE_NAME", "DEFAULT_HISTORY_MAX_LENGTH", "DEFAULT_ACTIVITY_INFLATION", "DEFAULT_HISTORICAL_RECORD_WEIGHT", "HISTORY_FILE_EXTENSION", "INVALID_INDEX", "sRegistryLock", "sDataModelRegistry", "mInstanceLock", "mActivities", "mHistoricalRecords", "mPackageMonitor", "mContext", "mHistoryFileName", "mIntent", "mActivitySorter", "mHistoryMaxSize", "mCanReadHistoricalData", "mReadShareHistoryCalled", "mHistoricalRecordsChanged", "mReloadActivities", "mActivityChoserModelPolicy" ],
  "methodNames" : [ "public static ActivityChooserModel get(Context context, String historyFileName)", "public void setIntent(Intent intent)", "public Intent getIntent()", "public int getActivityCount()", "public ResolveInfo getActivity(int index)", "public int getActivityIndex(ResolveInfo activity)", "public Intent chooseActivity(int index)", "public void setOnChooseActivityListener(OnChooseActivityListener listener)", "public ResolveInfo getDefaultActivity()", "public void setDefaultActivity(int index)", "private void persistHistoricalDataIfNeeded()", "public void setActivitySorter(ActivitySorter activitySorter)", "public void setHistoryMaxSize(int historyMaxSize)", "public int getHistoryMaxSize()", "public int getHistorySize()", "protected void finalize() throws Throwable", "private void ensureConsistentState()", "private boolean sortActivitiesIfNeeded()", "private boolean loadActivitiesIfNeeded()", "private boolean readHistoricalDataIfNeeded()", "private boolean addHisoricalRecord(HistoricalRecord historicalRecord)", "private void pruneExcessiveHistoricalRecordsIfNeeded()", "private void readHistoricalDataImpl()" ]
}