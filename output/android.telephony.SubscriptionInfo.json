{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/SubscriptionInfo.java",
  "packageName" : "android.telephony",
  "className" : "SubscriptionInfo",
  "comment" : "\n * A Parcelable class for Subscription Information.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TEXT_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of text to render on the icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * Subscription Identifier, this is a device unique number\n     * and not an index into an array\n     ",
    "links" : [ ]
  }, {
    "name" : "mIccId",
    "type" : "String",
    "comment" : "\n     * The ICCID of the SIM that is associated with this subscription, empty if unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSimSlotIndex",
    "type" : "int",
    "comment" : "\n     * The index of the SIM slot that currently contains the subscription and not necessarily unique\n     * and maybe {@link SubscriptionManager#INVALID_SIM_SLOT_INDEX} if unknown or the subscription\n     * is inactive.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX" ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "\n     * The name displayed to the user that identifies this subscription. This name is used\n     * in Settings page and can be renamed by the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierName",
    "type" : "CharSequence",
    "comment" : "\n     * The name displayed to the user that identifies subscription provider name. This name is the\n     * SPN displayed in status bar and many other places. Can't be renamed by the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayNameSource",
    "type" : "int",
    "comment" : "\n     * The source of the {@link #mDisplayName}.\n     ",
    "links" : [ "#mDisplayName" ]
  }, {
    "name" : "mIconTint",
    "type" : "int",
    "comment" : "\n     * The color to be used for tinting the icon when displaying to the user.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNumber",
    "type" : "String",
    "comment" : "\n     * The number presented to the user identify this subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDataRoaming",
    "type" : "int",
    "comment" : "\n     * Whether user enables data roaming for this subscription or not. Either\n     * {@link SubscriptionManager#DATA_ROAMING_ENABLE} or\n     * {@link SubscriptionManager#DATA_ROAMING_DISABLE}.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#DATA_ROAMING_ENABLE", "android.telephony.SubscriptionManager#DATA_ROAMING_DISABLE" ]
  }, {
    "name" : "mMcc",
    "type" : "String",
    "comment" : "\n     * Mobile Country Code.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMnc",
    "type" : "String",
    "comment" : "\n     * Mobile Network Code.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEhplmns",
    "type" : "String[]",
    "comment" : "\n     * EHPLMNs associated with the subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHplmns",
    "type" : "String[]",
    "comment" : "\n     * HPLMNs associated with the subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsEmbedded",
    "type" : "boolean",
    "comment" : "\n     * Whether the subscription is from eSIM.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCardString",
    "type" : "String",
    "comment" : "\n     * The string ID of the SIM card. It is the ICCID of the active profile for a UICC card and the\n     * EID for an eUICC card.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n     * The access rules for this subscription, if it is embedded and defines any. This does not\n     * include access rules for non-embedded subscriptions.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierConfigAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n     * The carrier certificates for this subscription that are saved in carrier configs.\n     * This does not include access rules from the Uicc, whether embedded or non-embedded.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsOpportunistic",
    "type" : "boolean",
    "comment" : "\n     * Whether the subscription is opportunistic.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGroupUuid",
    "type" : "ParcelUuid",
    "comment" : "\n     * A UUID assigned to the subscription group. {@code null} if not assigned.\n     *\n     * @see SubscriptionManager#createSubscriptionGroup(List)\n     ",
    "links" : [ ]
  }, {
    "name" : "mCountryIso",
    "type" : "String",
    "comment" : "\n     * ISO Country code for the subscription's provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "\n     * The subscription carrier id.\n     *\n     * @see TelephonyManager#getSimCarrierId()\n     ",
    "links" : [ ]
  }, {
    "name" : "mProfileClass",
    "type" : "int",
    "comment" : "\n     * The profile class populated from the profile metadata if present. Otherwise,\n     * the profile class defaults to {@link SubscriptionManager#PROFILE_CLASS_UNSET} if there is no\n     * profile metadata or the subscription is not on an eUICC ({@link #isEmbedded} returns\n     * {@code false}).\n     ",
    "links" : [ "#isEmbedded", "android.telephony.SubscriptionManager#PROFILE_CLASS_UNSET" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "\n     * Type of the subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGroupOwner",
    "type" : "String",
    "comment" : "\n     * A package name that specifies who created the group. Empty if not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAreUiccApplicationsEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether uicc applications are configured to enable or disable.\n     * By default it's true.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPortIndex",
    "type" : "int",
    "comment" : "\n     * The port index of the Uicc card.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsageSetting",
    "type" : "int",
    "comment" : "\n     * Subscription's preferred usage setting.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTransferStatus",
    "type" : "int",
    "comment" : "\n     * Subscription's transfer status\n     ",
    "links" : [ ]
  }, {
    "name" : "mIconBitmap",
    "type" : "Bitmap",
    "comment" : "\n     * SIM icon bitmap cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCardId",
    "type" : "int",
    "comment" : "\n     * The card ID of the SIM card. This maps uniquely to {@link #mCardString}.\n     ",
    "links" : [ "#mCardString" ]
  }, {
    "name" : "mIsGroupDisabled",
    "type" : "boolean",
    "comment" : "\n     * Whether group of the subscription is disabled. This is only useful if it's a grouped\n     * opportunistic subscription. In this case, if all primary (non-opportunistic) subscriptions\n     * in the group are deactivated (unplugged pSIM or deactivated eSIM profile), we should disable\n     * this opportunistic subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsOnlyNonTerrestrialNetwork",
    "type" : "boolean",
    "comment" : "\n     * Whether this subscription is used for communicating with non-terrestrial networks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mServiceCapabilities",
    "type" : "int",
    "comment" : "\n     * The service capabilities (in the form of bitmask combination) the subscription supports.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SubscriptionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSubscriptionId()",
    "returnType" : "int",
    "comment" : "\n     * @return The subscription ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIccId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ICC ID.\n     *\n     * Starting with API level 29 Security Patch 2021-04-05, returns the ICC ID if the calling app\n     * has been granted the READ_PRIVILEGED_PHONE_STATE permission, has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}), or is a device owner or profile owner that\n     * has been granted the READ_PHONE_STATE permission. The profile owner is an app that owns a\n     * managed profile on the device; for more details see <a\n     * href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>. Profile\n     * owner access is deprecated and will be removed in a future release.\n     *\n     * @return the ICC ID, or an empty string if one of these requirements is not met\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public int getSimSlotIndex()",
    "returnType" : "int",
    "comment" : "\n     * @return The index of the SIM slot that currently contains the subscription and not\n     * necessarily unique and maybe {@link SubscriptionManager#INVALID_SIM_SLOT_INDEX} if unknown or\n     * the subscription is inactive.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX" ]
  }, {
    "name" : "public int getCarrierId()",
    "returnType" : "int",
    "comment" : "\n     * @return The carrier id of this subscription carrier.\n     *\n     * @see TelephonyManager#getSimCarrierId()\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The name displayed to the user that identifies this subscription. This name is\n     * used in Settings page and can be renamed by the user.\n     *\n     * @see #getCarrierName()\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCarrierName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return The name displayed to the user that identifies subscription provider name. This name\n     * is the SPN displayed in status bar and many other places. Can't be renamed by the user.\n     *\n     * @see #getDisplayName()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayNameSource()",
    "returnType" : "int",
    "comment" : "\n     * @return The source of the {@link #getDisplayName()}.\n     *\n     * @hide\n     ",
    "links" : [ "#getDisplayName()" ]
  }, {
    "name" : "public Bitmap createIconBitmap(Context context)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns an icon {@code Bitmap} to represent this {@code SubscriptionInfo} in a\n     * user interface.\n     *\n     * @param context A {@code Context} to get the {@code DisplayMetrics}s from.\n     *\n     * @return A bitmap icon for this {@code SubscriptionInfo}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIconTint()",
    "returnType" : "int",
    "comment" : "\n     * A highlight color to use in displaying information about this {@code PhoneAccount}.\n     *\n     * @return A hexadecimal color value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNumber()",
    "returnType" : "String",
    "comment" : "\n     * Returns the number of this subscription.\n     *\n     * Starting with API level 30, returns the number of this subscription if the calling app meets\n     * at least one of the following requirements:\n     * <ul>\n     *     <li>If the calling app's target SDK is API level 29 or lower and the app has been granted\n     *     the READ_PHONE_STATE permission.\n     *     <li>If the calling app has been granted any of READ_PRIVILEGED_PHONE_STATE,\n     *     READ_PHONE_NUMBERS, or READ_SMS.\n     *     <li>If the calling app has carrier privileges (see {@link\n     *     TelephonyManager#hasCarrierPrivileges}).\n     *     <li>If the calling app is the default SMS role holder.\n     * </ul>\n     *\n     * @return the number of this subscription, or an empty string if none of the requirements\n     * are met.\n     * @deprecated use {@link SubscriptionManager#getPhoneNumber(int)} instead, which takes a\n     *             {@link #getSubscriptionId() subscription ID}.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#getPhoneNumber(int)", "#getSubscriptionId()", "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public int getDataRoaming()",
    "returnType" : "int",
    "comment" : "\n     * Whether user enables data roaming for this subscription or not. Either\n     * {@link SubscriptionManager#DATA_ROAMING_ENABLE} or\n     * {@link SubscriptionManager#DATA_ROAMING_DISABLE}.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#DATA_ROAMING_ENABLE", "android.telephony.SubscriptionManager#DATA_ROAMING_DISABLE" ]
  }, {
    "name" : "public int getMcc()",
    "returnType" : "int",
    "comment" : "\n     * @return The mobile country code.\n     *\n     * @deprecated Use {@link #getMccString()} instead.\n     ",
    "links" : [ "#getMccString()" ]
  }, {
    "name" : "public int getMnc()",
    "returnType" : "int",
    "comment" : "\n     * @return The mobile network code.\n     *\n     * @deprecated Use {@link #getMncString()} instead.\n     ",
    "links" : [ "#getMncString()" ]
  }, {
    "name" : "public String getMccString()",
    "returnType" : "String",
    "comment" : "\n     * @return The mobile country code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMncString()",
    "returnType" : "String",
    "comment" : "\n     * @return The mobile network code.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCountryIso()",
    "returnType" : "String",
    "comment" : "\n     * @return The ISO country code. Empty if not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmbedded()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the subscription is from eSIM.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpportunistic()",
    "returnType" : "boolean",
    "comment" : "\n     * An opportunistic subscription connects to a network that is\n     * limited in functionality and / or coverage.\n     *\n     * @return Whether subscription is opportunistic.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the subscription is from the actively used SIM.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelUuid getGroupUuid()",
    "returnType" : "ParcelUuid",
    "comment" : "\n     * Used in scenarios where different subscriptions are bundled as a group.\n     * It's typically a primary and an opportunistic subscription. (see {@link #isOpportunistic()})\n     * Such that those subscriptions will have some affiliated behaviors such as opportunistic\n     * subscription may be invisible to the user.\n     *\n     * @return Group UUID a String of group UUID if it belongs to a group. Otherwise\n     * {@code null}.\n     ",
    "links" : [ "#isOpportunistic()" ]
  }, {
    "name" : "public List<String> getEhplmns()",
    "returnType" : "List<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getHplmns()",
    "returnType" : "List<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGroupOwner()",
    "returnType" : "String",
    "comment" : "\n     * @return The owner package of group the subscription belongs to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProfileClass()",
    "returnType" : "int",
    "comment" : "\n     * @return The profile class populated from the profile metadata if present. Otherwise,\n     * the profile class defaults to {@link SubscriptionManager#PROFILE_CLASS_UNSET} if there is no\n     * profile metadata or the subscription is not on an eUICC ({@link #isEmbedded} return\n     * {@code false}).\n     *\n     * @hide\n     ",
    "links" : [ "#isEmbedded", "android.telephony.SubscriptionManager#PROFILE_CLASS_UNSET" ]
  }, {
    "name" : "public int getSubscriptionType()",
    "returnType" : "int",
    "comment" : "\n     * This method returns the type of a subscription. It can be\n     * {@link SubscriptionManager#SUBSCRIPTION_TYPE_LOCAL_SIM} or\n     * {@link SubscriptionManager#SUBSCRIPTION_TYPE_REMOTE_SIM}.\n     *\n     * @return The type of the subscription.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#SUBSCRIPTION_TYPE_LOCAL_SIM", "android.telephony.SubscriptionManager#SUBSCRIPTION_TYPE_REMOTE_SIM" ]
  }, {
    "name" : "public boolean canManageSubscription(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the app with the given context is authorized to manage this subscription\n     * according to its metadata. Only supported for embedded subscriptions (if {@link #isEmbedded}\n     * returns true).\n     *\n     * @param context Context of the application to check.\n     * @return Whether the app is authorized to manage this subscription per its metadata.\n     * @hide\n     * @deprecated - Do not use.\n     ",
    "links" : [ "#isEmbedded" ]
  }, {
    "name" : "public boolean canManageSubscription(Context context, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given app is authorized to manage this subscription according to its\n     * metadata. Only supported for embedded subscriptions (if {@link #isEmbedded} returns true).\n     *\n     * @param context Any context.\n     * @param packageName Package name of the app to check.\n     * @return whether the app is authorized to manage this subscription per its metadata.\n     * @hide\n     * @deprecated - Do not use.\n     ",
    "links" : [ "#isEmbedded" ]
  }, {
    "name" : "public List<UiccAccessRule> getAccessRules()",
    "returnType" : "List<UiccAccessRule>",
    "comment" : "\n     * @return The {@link UiccAccessRule}s that are stored in Uicc, dictating who is authorized to\n     * manage this subscription.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.UiccAccessRule" ]
  }, {
    "name" : "public String getCardString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the card string of the SIM card which contains the subscription.\n     *\n     * Starting with API level 29 Security Patch 2021-04-05, returns the card string if the calling\n     * app has been granted the READ_PRIVILEGED_PHONE_STATE permission, has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}), or is a device owner or profile owner that\n     * has been granted the READ_PHONE_STATE permission. The profile owner is an app that owns a\n     * managed profile on the device; for more details see <a\n     * href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>. Profile\n     * owner access is deprecated and will be removed in a future release.\n     *\n     * @return The card string of the SIM card which contains the subscription or an empty string\n     * if these requirements are not met. The card string is the ICCID for UICCs or the EID for\n     * eUICCs.\n     *\n     * @hide\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public int getCardId()",
    "returnType" : "int",
    "comment" : "\n     * @return The card ID of the SIM card which contains the subscription.\n     *\n     * @see UiccCardInfo#getCardId().\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPortIndex()",
    "returnType" : "int",
    "comment" : "\n     * @return The port index of the SIM card which contains the subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupDisabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the group of the subscription is disabled. This is only useful if\n     * it's a grouped opportunistic subscription. In this case, if all primary (non-opportunistic)\n     * subscriptions in the group are deactivated (unplugged pSIM or deactivated eSIM profile), we\n     * should disable this opportunistic subscription.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areUiccApplicationsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if Uicc applications are set to be enabled or disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUsageSetting()",
    "returnType" : "int",
    "comment" : "\n     * Get the usage setting for this subscription.\n     *\n     * @return The usage setting used for this subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOnlyNonTerrestrialNetwork()",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the subscription is exclusively for non-terrestrial networks.\n     *\n     * @return {@code true} if it is a non-terrestrial network subscription, {@code false}\n     * otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<Integer> getServiceCapabilities()",
    "returnType" : "Set<Integer>",
    "comment" : "\n     * Retrieves the service capabilities for the current subscription.\n     *\n     * <p>These capabilities are hint to system components and applications, allowing them to\n     * enhance user experience. For instance, a Dialer application can inform the user that the\n     * current subscription is incapable of making voice calls if the voice service is not\n     * available.\n     *\n     * <p>Correct usage of these service capabilities must also consider the device's overall\n     * service capabilities. For example, even if the subscription supports voice calls, a voice\n     * call might not be feasible on a device that only supports data services. To determine the\n     * device's capabilities for voice and SMS services, refer to\n     * {@code TelephonyManager#isDeviceVoiceCapable()} and\n     * {@code TelephonyManager#isDeviceSmsCapable()}.\n     *\n     * <p>Emergency service availability may not directly correlate with the subscription or\n     * device's general service capabilities. In some cases, emergency calls might be possible\n     * even if the subscription or device does not typically support voice services.\n     *\n     * @return A set of integer representing the subscription's service capabilities,\n     * defined by {@code SubscriptionManager#SERVICE_CAPABILITY_VOICE},\n     * {@code SubscriptionManager#SERVICE_CAPABILITY_SMS}\n     * and {@code SubscriptionManager#SERVICE_CAPABILITY_DATA}.\n     *\n     * @see TelephonyManager#isDeviceVoiceCapable()\n     * @see TelephonyManager#isDeviceSmsCapable()\n     * @see CarrierConfigManager#KEY_CELLULAR_SERVICE_CAPABILITIES_INT_ARRAY\n     * @see SubscriptionManager#SERVICE_CAPABILITY_VOICE\n     * @see SubscriptionManager#SERVICE_CAPABILITY_SMS\n     * @see SubscriptionManager#SERVICE_CAPABILITY_DATA\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTransferStatus()",
    "returnType" : "int",
    "comment" : "\n     * Get the transfer status for this subscription.\n     *\n     * @return The transfer status for this subscription.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getPrintableId(@Nullable String id)",
    "returnType" : "String",
    "comment" : "\n     * Get stripped PII information from the id.\n     *\n     * @param id The raw id (e.g. ICCID, IMSI, etc...).\n     * @return The stripped string.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getSubscriptionId()", "public String getIccId()", "public int getSimSlotIndex()", "public int getCarrierId()", "public CharSequence getDisplayName()", "public CharSequence getCarrierName()", "public int getDisplayNameSource()", "public Bitmap createIconBitmap(Context context)", "public int getIconTint()", "public String getNumber()", "public int getDataRoaming()", "public int getMcc()", "public int getMnc()", "public String getMccString()", "public String getMncString()", "public String getCountryIso()", "public boolean isEmbedded()", "public boolean isOpportunistic()", "public boolean isActive()", "public ParcelUuid getGroupUuid()", "public List<String> getEhplmns()", "public List<String> getHplmns()", "public String getGroupOwner()", "public int getProfileClass()", "public int getSubscriptionType()", "public boolean canManageSubscription(Context context)", "public boolean canManageSubscription(Context context, String packageName)", "public List<UiccAccessRule> getAccessRules()", "public String getCardString()", "public int getCardId()", "public int getPortIndex()", "public boolean isGroupDisabled()", "public boolean areUiccApplicationsEnabled()", "public int getUsageSetting()", "public boolean isOnlyNonTerrestrialNetwork()", "public Set<Integer> getServiceCapabilities()", "public int getTransferStatus()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public static String getPrintableId(@Nullable String id)", "public String toString()", "public boolean equals(Object o)", "public int hashCode()" ],
  "variableNames" : [ "TEXT_SIZE", "mId", "mIccId", "mSimSlotIndex", "mDisplayName", "mCarrierName", "mDisplayNameSource", "mIconTint", "mNumber", "mDataRoaming", "mMcc", "mMnc", "mEhplmns", "mHplmns", "mIsEmbedded", "mCardString", "mNativeAccessRules", "mCarrierConfigAccessRules", "mIsOpportunistic", "mGroupUuid", "mCountryIso", "mCarrierId", "mProfileClass", "mType", "mGroupOwner", "mAreUiccApplicationsEnabled", "mPortIndex", "mUsageSetting", "mTransferStatus", "mIconBitmap", "mCardId", "mIsGroupDisabled", "mIsOnlyNonTerrestrialNetwork", "mServiceCapabilities", "CREATOR" ]
}