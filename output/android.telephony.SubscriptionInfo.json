{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/SubscriptionInfo.java",
  "packageName" : "android.telephony",
  "className" : "SubscriptionInfo",
  "comment" : "\n * A Parcelable class for Subscription Information.\n ",
  "variables" : [ {
    "name" : "TEXT_SIZE",
    "type" : "int",
    "comment" : "\n     * Size of text to render on the icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n     * Subscription Identifier, this is a device unique number\n     * and not an index into an array\n     ",
    "links" : [ ]
  }, {
    "name" : "mIccId",
    "type" : "String",
    "comment" : "\n     * The GID for a SIM that maybe associated with this subscription, empty if unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "mSimSlotIndex",
    "type" : "int",
    "comment" : "\n     * The index of the slot that currently contains the subscription\n     * and not necessarily unique and maybe INVALID_SLOT_ID if unknown\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "\n     * The name displayed to the user that identifies this subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierName",
    "type" : "CharSequence",
    "comment" : "\n     * String that identifies SPN/PLMN\n     * TODO : Add a new field that identifies only SPN for a sim\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "\n     * The subscription carrier id.\n     * @see TelephonyManager#getSimCarrierId()\n     ",
    "links" : [ ]
  }, {
    "name" : "mNameSource",
    "type" : "int",
    "comment" : "\n     * The source of the name, NAME_SOURCE_DEFAULT_SOURCE, NAME_SOURCE_SIM_SPN,\n     * NAME_SOURCE_SIM_PNN, or NAME_SOURCE_USER_INPUT.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIconTint",
    "type" : "int",
    "comment" : "\n     * The color to be used for tinting the icon when displaying to the user\n     ",
    "links" : [ ]
  }, {
    "name" : "mNumber",
    "type" : "String",
    "comment" : "\n     * A number presented to the user identify this subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "mDataRoaming",
    "type" : "int",
    "comment" : "\n     * Data roaming state, DATA_ROAMING_ENABLE, DATA_ROAMING_DISABLE\n     ",
    "links" : [ ]
  }, {
    "name" : "mIconBitmap",
    "type" : "Bitmap",
    "comment" : "\n     * SIM Icon bitmap\n     ",
    "links" : [ ]
  }, {
    "name" : "mMcc",
    "type" : "String",
    "comment" : "\n     * Mobile Country Code\n     ",
    "links" : [ ]
  }, {
    "name" : "mMnc",
    "type" : "String",
    "comment" : "\n     * Mobile Network Code\n     ",
    "links" : [ ]
  }, {
    "name" : "mEhplmns",
    "type" : "String[]",
    "comment" : "\n     * EHPLMNs associated with the subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "mHplmns",
    "type" : "String[]",
    "comment" : "\n     * HPLMNs associated with the subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "mCountryIso",
    "type" : "String",
    "comment" : "\n     * ISO Country code for the subscription's provider\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsEmbedded",
    "type" : "boolean",
    "comment" : "\n     * Whether the subscription is an embedded one.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n     * The access rules for this subscription, if it is embedded and defines any.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierConfigAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n     * The carrier certificates for this subscription that are saved in carrier configs.\n     * The other carrier certificates are embedded on Uicc and stored as part of mNativeAccessRules.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCardString",
    "type" : "String",
    "comment" : "\n     * The string ID of the SIM card. It is the ICCID of the active profile for a UICC card and the\n     * EID for an eUICC card.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCardId",
    "type" : "int",
    "comment" : "\n     * The card ID of the SIM card. This maps uniquely to the card string.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsOpportunistic",
    "type" : "boolean",
    "comment" : "\n     * Whether the subscription is opportunistic.\n     ",
    "links" : [ ]
  }, {
    "name" : "mGroupUUID",
    "type" : "ParcelUuid",
    "comment" : "\n     * A UUID assigned to the subscription group. It returns null if not assigned.\n     * Check {@link SubscriptionManager#createSubscriptionGroup(List)} for more details.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#createSubscriptionGroup(List)" ]
  }, {
    "name" : "mGroupOwner",
    "type" : "String",
    "comment" : "\n     * A package name that specifies who created the group. Null if mGroupUUID is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsGroupDisabled",
    "type" : "boolean",
    "comment" : "\n     * Whether group of the subscription is disabled.\n     * This is only useful if it's a grouped opportunistic subscription. In this case, if all\n     * primary (non-opportunistic) subscriptions in the group are deactivated (unplugged pSIM\n     * or deactivated eSIM profile), we should disable this opportunistic subscription.\n     ",
    "links" : [ ]
  }, {
    "name" : "mProfileClass",
    "type" : "int",
    "comment" : "\n     * Profile class, PROFILE_CLASS_TESTING, PROFILE_CLASS_OPERATIONAL\n     * PROFILE_CLASS_PROVISIONING, or PROFILE_CLASS_UNSET.\n     * A profile on the eUICC can be defined as test, operational, provisioning, or unset.\n     * The profile class will be populated from the profile metadata if present. Otherwise,\n     * the profile class defaults to unset if there is no profile metadata or the subscription\n     * is not on an eUICC ({@link #isEmbedded} returns false).\n     ",
    "links" : [ "#isEmbedded" ]
  }, {
    "name" : "mSubscriptionType",
    "type" : "int",
    "comment" : "\n     * Type of subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "mAreUiccApplicationsEnabled",
    "type" : "boolean",
    "comment" : "\n     * Whether uicc applications are configured to enable or disable.\n     * By default it's true.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<SubscriptionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getSubscriptionId()",
    "returnType" : "int",
    "comment" : "\n     * @return the subscription ID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getIccId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ICC ID.\n     *\n     * Starting with API level 30, returns the ICC ID if the calling app has been granted the\n     * READ_PRIVILEGED_PHONE_STATE permission, has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}), or is a device owner or profile owner that\n     * has been granted the READ_PHONE_STATE permission. The profile owner is an app that owns a\n     * managed profile on the device; for more details see <a\n     * href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>. Profile\n     * owner access is deprecated and will be removed in a future release.\n     *\n     * @return the ICC ID, or an empty string if one of these requirements is not met\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void clearIccId()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSimSlotIndex()",
    "returnType" : "int",
    "comment" : "\n     * @return the slot index of this Subscription's SIM card.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCarrierId()",
    "returnType" : "int",
    "comment" : "\n     * @return the carrier id of this Subscription carrier.\n     * @see TelephonyManager#getSimCarrierId()\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getDisplayName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return the name displayed to the user that identifies this subscription\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayName(CharSequence name)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name displayed to the user that identifies this subscription\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getCarrierName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * @return the name displayed to the user that identifies Subscription provider name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCarrierName(CharSequence name)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name displayed to the user that identifies Subscription provider name\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getNameSource()",
    "returnType" : "int",
    "comment" : "\n     * @return the source of the name, eg NAME_SOURCE_DEFAULT_SOURCE, NAME_SOURCE_SIM_SPN or\n     * NAME_SOURCE_USER_INPUT.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAssociatedPlmns(String[] ehplmns, String[] hplmns)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap createIconBitmap(Context context)",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns an icon {@code Bitmap} to represent this {@code SubscriptionInfo} in a\n     * user interface.\n     *\n     * @param context A {@code Context} to get the {@code DisplayMetrics}s from.\n     *\n     * @return A bitmap icon for this {@code SubscriptionInfo}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIconTint()",
    "returnType" : "int",
    "comment" : "\n     * A highlight color to use in displaying information about this {@code PhoneAccount}.\n     *\n     * @return A hexadecimal color value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setIconTint(int iconTint)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color displayed to the user that identifies this subscription\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNumber()",
    "returnType" : "String",
    "comment" : "\n     * Returns the number of this subscription.\n     *\n     * Starting with API level 30, returns the number of this subscription if the calling app meets\n     * one of the following requirements:\n     * <ul>\n     *     <li>If the calling app's target SDK is API level 29 or lower and the app has been granted\n     *     the READ_PHONE_STATE permission.\n     *     <li>If the calling app has been granted any of READ_PRIVILEGED_PHONE_STATE,\n     *     READ_PHONE_NUMBERS, or READ_SMS.\n     *     <li>If the calling app has carrier privileges (see {@link\n     *     TelephonyManager#hasCarrierPrivileges}).\n     *     <li>If the calling app is the default SMS role holder.\n     * </ul>\n     *\n     * @return the number of this subscription, or an empty string if one of these requirements is\n     * not met\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void clearNumber()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDataRoaming()",
    "returnType" : "int",
    "comment" : "\n     * @return the data roaming state for this subscription, either\n     * {@link SubscriptionManager#DATA_ROAMING_ENABLE} or {@link SubscriptionManager#DATA_ROAMING_DISABLE}.\n     ",
    "links" : [ "android.telephony.SubscriptionManager#DATA_ROAMING_ENABLE", "android.telephony.SubscriptionManager#DATA_ROAMING_DISABLE" ]
  }, {
    "name" : "public int getMcc()",
    "returnType" : "int",
    "comment" : "\n     * @return the MCC.\n     * @deprecated Use {@link #getMccString()} instead.\n     ",
    "links" : [ "#getMccString()" ]
  }, {
    "name" : "public int getMnc()",
    "returnType" : "int",
    "comment" : "\n     * @return the MNC.\n     * @deprecated Use {@link #getMncString()} instead.\n     ",
    "links" : [ "#getMncString()" ]
  }, {
    "name" : "public String getMccString()",
    "returnType" : "String",
    "comment" : "\n     * @return The MCC, as a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMncString()",
    "returnType" : "String",
    "comment" : "\n     * @return The MNC, as a string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCountryIso()",
    "returnType" : "String",
    "comment" : "\n     * @return the ISO country code\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmbedded()",
    "returnType" : "boolean",
    "comment" : " @return whether the subscription is an eUICC one. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOpportunistic()",
    "returnType" : "boolean",
    "comment" : "\n     * An opportunistic subscription connects to a network that is\n     * limited in functionality and / or coverage.\n     *\n     * @return whether subscription is opportunistic.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelUuid getGroupUuid()",
    "returnType" : "ParcelUuid",
    "comment" : "\n     * Used in scenarios where different subscriptions are bundled as a group.\n     * It's typically a primary and an opportunistic subscription. (see {@link #isOpportunistic()})\n     * Such that those subscriptions will have some affiliated behaviors such as opportunistic\n     * subscription may be invisible to the user.\n     *\n     * @return group UUID a String of group UUID if it belongs to a group. Otherwise\n     * it will return null.\n     ",
    "links" : [ "#isOpportunistic()" ]
  }, {
    "name" : "public List<String> getEhplmns()",
    "returnType" : "List<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getHplmns()",
    "returnType" : "List<String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGroupOwner()",
    "returnType" : "String",
    "comment" : "\n     * Return owner package of group the subscription belongs to.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getProfileClass()",
    "returnType" : "int",
    "comment" : "\n     * @return the profile class of this subscription.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSubscriptionType()",
    "returnType" : "int",
    "comment" : "\n     * This method returns the type of a subscription. It can be\n     * {@link SubscriptionManager#SUBSCRIPTION_TYPE_LOCAL_SIM} or\n     * {@link SubscriptionManager#SUBSCRIPTION_TYPE_REMOTE_SIM}.\n     * @return the type of subscription\n     ",
    "links" : [ "android.telephony.SubscriptionManager#SUBSCRIPTION_TYPE_LOCAL_SIM", "android.telephony.SubscriptionManager#SUBSCRIPTION_TYPE_REMOTE_SIM" ]
  }, {
    "name" : "public boolean canManageSubscription(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the app with the given context is authorized to manage this subscription\n     * according to its metadata. Only supported for embedded subscriptions (if {@link #isEmbedded}\n     * returns true).\n     *\n     * @param context Context of the application to check.\n     * @return whether the app is authorized to manage this subscription per its metadata.\n     * @hide\n     * @deprecated - Do not use.\n     ",
    "links" : [ "#isEmbedded" ]
  }, {
    "name" : "public boolean canManageSubscription(Context context, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the given app is authorized to manage this subscription according to its\n     * metadata. Only supported for embedded subscriptions (if {@link #isEmbedded} returns true).\n     *\n     * @param context Any context.\n     * @param packageName Package name of the app to check.\n     * @return whether the app is authorized to manage this subscription per its metadata.\n     * @hide\n     * @deprecated - Do not use.\n     ",
    "links" : [ "#isEmbedded" ]
  }, {
    "name" : "public List<UiccAccessRule> getAccessRules()",
    "returnType" : "List<UiccAccessRule>",
    "comment" : "\n     * @return the {@link UiccAccessRule}s that are stored in Uicc, dictating who\n     * is authorized to manage this subscription.\n     * TODO and fix it properly in R / master: either deprecate this and have 3 APIs\n     *  native + carrier + all, or have this return all by default.\n     * @throws UnsupportedOperationException if this subscription is not embedded.\n     * @hide\n     ",
    "links" : [ "android.telephony.UiccAccessRule" ]
  }, {
    "name" : "public List<UiccAccessRule> getAllAccessRules()",
    "returnType" : "List<UiccAccessRule>",
    "comment" : "\n     * @return the {@link UiccAccessRule}s that are both stored on Uicc and in carrierConfigs\n     * dictating who is authorized to manage this subscription.\n     * @hide\n     ",
    "links" : [ "android.telephony.UiccAccessRule" ]
  }, {
    "name" : "public String getCardString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the card string of the SIM card which contains the subscription.\n     *\n     * Starting with API level 30, returns the card string if the calling app has been granted the\n     * READ_PRIVILEGED_PHONE_STATE permission, has carrier privileges (see\n     * {@link TelephonyManager#hasCarrierPrivileges}), or is a device owner or profile owner that\n     * has been granted the READ_PHONE_STATE permission. The profile owner is an app that owns a\n     * managed profile on the device; for more details see <a\n     * href=\"https://developer.android.com/work/managed-profiles\">Work profiles</a>. Profile\n     * owner access is deprecated and will be removed in a future release.\n     *\n     * @return the card string of the SIM card which contains the subscription or an empty string\n     * if these requirements are not met. The card string is the ICCID for UICCs or the EID for\n     * eUICCs.\n     * @hide\n     * //TODO rename usages in LPA: UiccSlotUtil.java, UiccSlotsManager.java, UiccSlotInfoTest.java\n     ",
    "links" : [ "android.telephony.TelephonyManager#hasCarrierPrivileges" ]
  }, {
    "name" : "public void clearCardString()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCardId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the card ID of the SIM card which contains the subscription (see\n     * {@link UiccCardInfo#getCardId()}.\n     * @return the cardId\n     ",
    "links" : [ "android.telephony.UiccCardInfo#getCardId()" ]
  }, {
    "name" : "public void setGroupDisabled(boolean isGroupDisabled)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the subscription's group is disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isGroupDisabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether the subscription's group is disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean areUiccApplicationsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether uicc applications are set to be enabled or disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String givePrintableIccid(String iccId)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TEXT_SIZE", "mId", "mIccId", "mSimSlotIndex", "mDisplayName", "mCarrierName", "mCarrierId", "mNameSource", "mIconTint", "mNumber", "mDataRoaming", "mIconBitmap", "mMcc", "mMnc", "mEhplmns", "mHplmns", "mCountryIso", "mIsEmbedded", "mNativeAccessRules", "mCarrierConfigAccessRules", "mCardString", "mCardId", "mIsOpportunistic", "mGroupUUID", "mGroupOwner", "mIsGroupDisabled", "mProfileClass", "mSubscriptionType", "mAreUiccApplicationsEnabled", "CREATOR" ],
  "methodNames" : [ "public int getSubscriptionId()", "public String getIccId()", "public void clearIccId()", "public int getSimSlotIndex()", "public int getCarrierId()", "public CharSequence getDisplayName()", "public void setDisplayName(CharSequence name)", "public CharSequence getCarrierName()", "public void setCarrierName(CharSequence name)", "public int getNameSource()", "public void setAssociatedPlmns(String[] ehplmns, String[] hplmns)", "public Bitmap createIconBitmap(Context context)", "public int getIconTint()", "public void setIconTint(int iconTint)", "public String getNumber()", "public void clearNumber()", "public int getDataRoaming()", "public int getMcc()", "public int getMnc()", "public String getMccString()", "public String getMncString()", "public String getCountryIso()", "public boolean isEmbedded()", "public boolean isOpportunistic()", "public ParcelUuid getGroupUuid()", "public List<String> getEhplmns()", "public List<String> getHplmns()", "public String getGroupOwner()", "public int getProfileClass()", "public int getSubscriptionType()", "public boolean canManageSubscription(Context context)", "public boolean canManageSubscription(Context context, String packageName)", "public List<UiccAccessRule> getAccessRules()", "public List<UiccAccessRule> getAllAccessRules()", "public String getCardString()", "public void clearCardString()", "public int getCardId()", "public void setGroupDisabled(boolean isGroupDisabled)", "public boolean isGroupDisabled()", "public boolean areUiccApplicationsEnabled()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "public static String givePrintableIccid(String iccId)", "public String toString()", "public int hashCode()", "public boolean equals(Object obj)" ]
}