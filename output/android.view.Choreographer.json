{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/Choreographer.java",
  "packageName" : "android.view",
  "className" : "Choreographer",
  "comment" : "\n * Coordinates the timing of animations, input and drawing.\n * <p>\n * The choreographer receives timing pulses (such as vertical synchronization)\n * from the display subsystem then schedules work to occur as part of rendering\n * the next display frame.\n * </p><p>\n * Applications typically interact with the choreographer indirectly using\n * higher level abstractions in the animation framework or the view hierarchy.\n * Here are some examples of things you can do using the higher-level APIs.\n * </p>\n * <ul>\n * <li>To post an animation to be processed on a regular time basis synchronized with\n * display frame rendering, use {@link android.animation.ValueAnimator#start}.</li>\n * <li>To post a {@link Runnable} to be invoked once at the beginning of the next display\n * frame, use {@link View#postOnAnimation}.</li>\n * <li>To post a {@link Runnable} to be invoked once at the beginning of the next display\n * frame after a delay, use {@link View#postOnAnimationDelayed}.</li>\n * <li>To post a call to {@link View#invalidate()} to occur once at the beginning of the\n * next display frame, use {@link View#postInvalidateOnAnimation()} or\n * {@link View#postInvalidateOnAnimation(int, int, int, int)}.</li>\n * <li>To ensure that the contents of a {@link View} scroll smoothly and are drawn in\n * sync with display frame rendering, do nothing.  This already happens automatically.\n * {@link View#onDraw} will be called at the appropriate time.</li>\n * </ul>\n * <p>\n * However, there are a few cases where you might want to use the functions of the\n * choreographer directly in your application.  Here are some examples.\n * </p>\n * <ul>\n * <li>If your application does its rendering in a different thread, possibly using GL,\n * or does not use the animation framework or view hierarchy at all\n * and you want to ensure that it is appropriately synchronized with the display, then use\n * {@link Choreographer#postFrameCallback}.</li>\n * <li>... and that's about it.</li>\n * </ul>\n * <p>\n * Each {@link Looper} thread has its own choreographer.  Other threads can\n * post callbacks to run on the choreographer but they will run on the {@link Looper}\n * to which the choreographer belongs.\n * </p>\n ",
  "links" : [ "android.view.View#onDraw", "android.view.View#postOnAnimationDelayed", "android.view.View#invalidate()", "Runnable", "android.os.Looper", "android.view.View#postInvalidateOnAnimation(int", "android.view.View", "android.view.View#postOnAnimation", "android.animation.ValueAnimator#start", "android.view.View#postInvalidateOnAnimation()", "android.view.Choreographer#postFrameCallback" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_JANK",
    "type" : "boolean",
    "comment" : " Prints debug messages about jank which was detected (low volume).",
    "links" : [ ]
  }, {
    "name" : "DEBUG_FRAMES",
    "type" : "boolean",
    "comment" : " Prints debug messages about every frame and callback registered (high volume).",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_FRAME_DELAY",
    "type" : "long",
    "comment" : " be dequeued.",
    "links" : [ ]
  }, {
    "name" : "sFrameDelay",
    "type" : "long",
    "comment" : " The number of milliseconds between animation frames.",
    "links" : [ ]
  }, {
    "name" : "sThreadInstance",
    "type" : "ThreadLocal<Choreographer>",
    "comment" : " Thread local storage for the choreographer.",
    "links" : [ ]
  }, {
    "name" : "mMainInstance",
    "type" : "Choreographer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSfThreadInstance",
    "type" : "ThreadLocal<Choreographer>",
    "comment" : " Thread local storage for the SF choreographer.",
    "links" : [ ]
  }, {
    "name" : "USE_VSYNC",
    "type" : "boolean",
    "comment" : " Enable/disable vsync for animations and drawing.",
    "links" : [ ]
  }, {
    "name" : "USE_FRAME_TIME",
    "type" : "boolean",
    "comment" : " Enable/disable using the frame time instead of returning now.",
    "links" : [ ]
  }, {
    "name" : "SKIPPED_FRAME_WARNING_LIMIT",
    "type" : "int",
    "comment" : " Skipped frames imply jank.",
    "links" : [ ]
  }, {
    "name" : "MSG_DO_FRAME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DO_SCHEDULE_VSYNC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_DO_SCHEDULE_CALLBACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRAME_CALLBACK_TOKEN",
    "type" : "Object",
    "comment" : " All frame callbacks posted by applications have this token or VSYNC_CALLBACK_TOKEN.",
    "links" : [ ]
  }, {
    "name" : "VSYNC_CALLBACK_TOKEN",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "FrameHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayEventReceiver",
    "type" : "FrameDisplayEventReceiver",
    "comment" : " if appropriate when interacting with the display event receiver.",
    "links" : [ ]
  }, {
    "name" : "mCallbackPool",
    "type" : "CallbackRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackQueues",
    "type" : "CallbackQueue[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameScheduled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbacksRunning",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastFrameTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameIntervalNanos",
    "type" : "long",
    "comment" : " DO NOT USE since this will not updated when screen refresh changes. ",
    "links" : [ ]
  }, {
    "name" : "mLastFrameIntervalNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebugPrintNextFrameTimeDelta",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFPSDivisor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastVsyncEventData",
    "type" : "DisplayEventReceiver.VsyncEventData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameData",
    "type" : "FrameData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFrameInfo",
    "type" : "FrameInfo",
    "comment" : "\n     * Contains information about the current frame for jank-tracking,\n     * mainly timings of key events along with a bit of metadata about\n     * view tree state\n     *\n     * TODO: Is there a better home for this? Currently Choreographer\n     * is the only one with CALLBACK_ANIMATION start time, hence why this\n     * resides here.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_TRACE_TITLES",
    "type" : "String[]",
    "comment" : "\n     * Must be kept in sync with CALLBACK_* ints below, used to index into this array.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_INPUT",
    "type" : "int",
    "comment" : "\n     * Callback type: Input callback.  Runs first.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_ANIMATION",
    "type" : "int",
    "comment" : "\n     * Callback type: Animation callback.  Runs before {@link #CALLBACK_INSETS_ANIMATION}.\n     * @hide\n     ",
    "links" : [ "#CALLBACK_INSETS_ANIMATION" ]
  }, {
    "name" : "CALLBACK_INSETS_ANIMATION",
    "type" : "int",
    "comment" : "\n     * Callback type: Animation callback to handle inset updates. This is separate from\n     * {@link #CALLBACK_ANIMATION} as we need to \"gather\" all inset animation updates via\n     * {@link WindowInsetsAnimationController#setInsetsAndAlpha(Insets, float, float)} for multiple\n     * ongoing animations but then update the whole view system with a single callback to\n     * {@link View#dispatchWindowInsetsAnimationProgress} that contains all the combined updated\n     * insets.\n     * <p>\n     * Both input and animation may change insets, so we need to run this after these callbacks, but\n     * before traversals.\n     * <p>\n     * Runs before traversals.\n     * @hide\n     ",
    "links" : [ "android.view.WindowInsetsAnimationController#setInsetsAndAlpha(Insets", "#CALLBACK_ANIMATION", "android.view.View#dispatchWindowInsetsAnimationProgress" ]
  }, {
    "name" : "CALLBACK_TRAVERSAL",
    "type" : "int",
    "comment" : "\n     * Callback type: Traversal callback.  Handles layout and draw.  Runs\n     * after all other asynchronous messages have been handled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLBACK_COMMIT",
    "type" : "int",
    "comment" : "\n     * Callback type: Commit callback.  Handles post-draw operations for the frame.\n     * Runs after traversal completes.  The {@link #getFrameTime() frame time} reported\n     * during this callback may be updated to reflect delays that occurred while\n     * traversals were in progress in case heavy layout operations caused some frames\n     * to be skipped.  The frame time reported during this callback provides a better\n     * estimate of the start time of the frame in which animations (and other updates\n     * to the view hierarchy state) actually took effect.\n     * @hide\n     ",
    "links" : [ "#getFrameTime()" ]
  }, {
    "name" : "CALLBACK_LAST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static float getRefreshRate()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Choreographer getInstance()",
    "returnType" : "Choreographer",
    "comment" : "\n     * Gets the choreographer for the calling thread.  Must be called from\n     * a thread that already has a {@link android.os.Looper} associated with it.\n     *\n     * @return The choreographer for this thread.\n     * @throws IllegalStateException if the thread does not have a looper.\n     ",
    "links" : [ "android.os.Looper" ]
  }, {
    "name" : "public static Choreographer getSfInstance()",
    "returnType" : "Choreographer",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static Choreographer getInstanceForSurfaceControl(long layerHandle, @NonNull Looper looper)",
    "returnType" : "Choreographer",
    "comment" : "\n     * Gets the choreographer associated with the SurfaceControl.\n     *\n     * @param layerHandle to which the choreographer will be attached.\n     * @param looper      the choreographer is attached on this looper.\n     *\n     * @return The choreographer for the looper which is attached\n     * to the sourced SurfaceControl::mNativeHandle.\n     * @throws IllegalStateException if the looper sourced is null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Choreographer getMainThreadInstance()",
    "returnType" : "Choreographer",
    "comment" : "\n     * @return The Choreographer of the main thread, if it exists, or {@code null} otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void releaseInstance()",
    "returnType" : "void",
    "comment" : " Destroys the calling thread's choreographer\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void dispose()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void invalidate()",
    "returnType" : "void",
    "comment" : "\n     * Dispose the DisplayEventReceiver on the Choreographer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isTheLooperSame(Looper looper)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if the sourced looper and the current looper are same.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Looper getLooper()",
    "returnType" : "Looper",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long getFrameDelay()",
    "returnType" : "long",
    "comment" : "\n     * The amount of time, in milliseconds, between each frame of the animation.\n     * <p>\n     * This is a requested time that the animation will attempt to honor, but the actual delay\n     * between frames may be different, depending on system load and capabilities. This is a static\n     * function because the same delay will be applied to all animations, since they are all\n     * run off of a single timing loop.\n     * </p><p>\n     * The frame delay may be ignored when the animation system uses an external timing\n     * source, such as the display refresh rate (vsync), to govern animations.\n     * </p>\n     *\n     * @return the requested time between frames, in milliseconds\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setFrameDelay(long frameDelay)",
    "returnType" : "void",
    "comment" : "\n     * The amount of time, in milliseconds, between each frame of the animation.\n     * <p>\n     * This is a requested time that the animation will attempt to honor, but the actual delay\n     * between frames may be different, depending on system load and capabilities. This is a static\n     * function because the same delay will be applied to all animations, since they are all\n     * run off of a single timing loop.\n     * </p><p>\n     * The frame delay may be ignored when the animation system uses an external timing\n     * source, such as the display refresh rate (vsync), to govern animations.\n     * </p>\n     *\n     * @param frameDelay the requested time between frames, in milliseconds\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long subtractFrameDelay(long delayMillis)",
    "returnType" : "long",
    "comment" : "\n     * Subtracts typical frame delay time from a delay interval in milliseconds.\n     * <p>\n     * This method can be used to compensate for animation delay times that have baked\n     * in assumptions about the frame delay.  For example, it's quite common for code to\n     * assume a 60Hz frame time and bake in a 16ms delay.  When we call\n     * {@link #postAnimationCallbackDelayed} we want to know how long to wait before\n     * posting the animation callback but let the animation timer take care of the remaining\n     * frame delay time.\n     * </p><p>\n     * This method is somewhat conservative about how much of the frame delay it\n     * subtracts.  It uses the same value returned by {@link #getFrameDelay} which by\n     * default is 10ms even though many parts of the system assume 16ms.  Consequently,\n     * we might still wait 6ms before posting an animation callback that we want to run\n     * on the next frame, but this is much better than waiting a whole 16ms and likely\n     * missing the deadline.\n     * </p>\n     *\n     * @param delayMillis The original delay time including an assumed frame delay.\n     * @return The adjusted delay time with the assumed frame delay subtracted out.\n     * @hide\n     ",
    "links" : [ "#postAnimationCallbackDelayed", "#getFrameDelay" ]
  }, {
    "name" : "public long getFrameIntervalNanos()",
    "returnType" : "long",
    "comment" : "\n     * @return The refresh rate as the nanoseconds between frames\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void dump(String prefix, PrintWriter writer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void postCallback(int callbackType, Runnable action, Object token)",
    "returnType" : "void",
    "comment" : "\n     * Posts a callback to run on the next frame.\n     * <p>\n     * The callback runs once then is automatically removed.\n     * </p>\n     *\n     * @param callbackType The callback type.\n     * @param action The callback action to run during the next frame.\n     * @param token The callback token, or null if none.\n     *\n     * @see #removeCallbacks\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postCallbackDelayed(int callbackType, Runnable action, Object token, long delayMillis)",
    "returnType" : "void",
    "comment" : "\n     * Posts a callback to run on the next frame after the specified delay.\n     * <p>\n     * The callback runs once then is automatically removed.\n     * </p>\n     *\n     * @param callbackType The callback type.\n     * @param action The callback action to run during the next frame after the specified delay.\n     * @param token The callback token, or null if none.\n     * @param delayMillis The delay time in milliseconds.\n     *\n     * @see #removeCallback\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void postCallbackDelayedInternal(int callbackType, Object action, Object token, long delayMillis)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void postVsyncCallback(@NonNull VsyncCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Posts a vsync callback to run on the next frame.\n     * <p>\n     * The callback runs once then is automatically removed.\n     * </p>\n     *\n     * @param callback The vsync callback to run during the next frame.\n     *\n     * @see #removeVsyncCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeCallbacks(int callbackType, Runnable action, Object token)",
    "returnType" : "void",
    "comment" : "\n     * Removes callbacks that have the specified action and token.\n     *\n     * @param callbackType The callback type.\n     * @param action The action property of the callbacks to remove, or null to remove\n     * callbacks with any action.\n     * @param token The token property of the callbacks to remove, or null to remove\n     * callbacks with any token.\n     *\n     * @see #postCallback\n     * @see #postCallbackDelayed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeCallbacksInternal(int callbackType, Object action, Object token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void postFrameCallback(FrameCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Posts a frame callback to run on the next frame.\n     * <p>\n     * The callback runs once then is automatically removed.\n     * </p>\n     *\n     * @param callback The frame callback to run during the next frame.\n     *\n     * @see #postFrameCallbackDelayed\n     * @see #removeFrameCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void postFrameCallbackDelayed(FrameCallback callback, long delayMillis)",
    "returnType" : "void",
    "comment" : "\n     * Posts a frame callback to run on the next frame after the specified delay.\n     * <p>\n     * The callback runs once then is automatically removed.\n     * </p>\n     *\n     * @param callback The frame callback to run during the next frame.\n     * @param delayMillis The delay time in milliseconds.\n     *\n     * @see #postFrameCallback\n     * @see #removeFrameCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeFrameCallback(FrameCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously posted frame callback.\n     *\n     * @param callback The frame callback to remove.\n     *\n     * @see #postFrameCallback\n     * @see #postFrameCallbackDelayed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeVsyncCallback(@Nullable VsyncCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously posted vsync callback.\n     *\n     * @param callback The vsync callback to remove.\n     *\n     * @see #postVsyncCallback\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFrameTime()",
    "returnType" : "long",
    "comment" : "\n     * Gets the time when the current frame started.\n     * <p>\n     * This method provides the time in milliseconds when the frame started being rendered.\n     * The frame time provides a stable time base for synchronizing animations\n     * and drawing.  It should be used instead of {@link SystemClock#uptimeMillis()}\n     * or {@link System#nanoTime()} for animations and drawing in the UI.  Using the frame\n     * time helps to reduce inter-frame jitter because the frame time is fixed at the time\n     * the frame was scheduled to start, regardless of when the animations or drawing\n     * callback actually runs.  All callbacks that run as part of rendering a frame will\n     * observe the same frame time so using the frame time also helps to synchronize effects\n     * that are performed by different callbacks.\n     * </p><p>\n     * Please note that the framework already takes care to process animations and\n     * drawing using the frame time as a stable time base.  Most applications should\n     * not need to use the frame time information directly.\n     * </p><p>\n     * This method should only be called from within a callback.\n     * </p>\n     *\n     * @return The frame start time, in the {@link SystemClock#uptimeMillis()} time base.\n     *\n     * @throws IllegalStateException if no frame is in progress.\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#nanoTime()" ]
  }, {
    "name" : "public long getFrameTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Same as {@link #getFrameTime()} but with nanosecond precision.\n     *\n     * @return The frame start time, in the {@link System#nanoTime()} time base.\n     *\n     * @throws IllegalStateException if no frame is in progress.\n     * @hide\n     ",
    "links" : [ "#nanoTime()", "#getFrameTime()" ]
  }, {
    "name" : "public long getLastFrameTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Like {@link #getLastFrameTimeNanos}, but always returns the last frame time, not matter\n     * whether callbacks are currently running.\n     * @return The frame start time of the last frame, in the {@link System#nanoTime()} time base.\n     * @hide\n     ",
    "links" : [ "#nanoTime()", "#getLastFrameTimeNanos" ]
  }, {
    "name" : "public long getExpectedPresentationTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Gets the time in {@link System#nanoTime()} timebase which the current frame\n     * is expected to be presented.\n     * <p>\n     * This time should be used to advance any animation clocks.\n     * Prefer using this method over {@link #getFrameTimeNanos()}.\n     * </p><p>\n     * This method should only be called from within a callback.\n     * </p>\n     *\n     * @return The frame start time, in the {@link System#nanoTime()} time base.\n     *\n     * @throws IllegalStateException if no frame is in progress.\n     * @hide\n     ",
    "links" : [ "#getFrameTimeNanos()", "#nanoTime()" ]
  }, {
    "name" : "public long getExpectedPresentationTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     * Same as {@link #getExpectedPresentationTimeNanos()} but with millisecond precision.\n     *\n     * @return The frame start time, in the {@link SystemClock#uptimeMillis()} time base.\n     *\n     * @throws IllegalStateException if no frame is in progress.\n     * @hide\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis()", "#getExpectedPresentationTimeNanos()" ]
  }, {
    "name" : "public long getLatestExpectedPresentTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Same as {@link #getExpectedPresentationTimeNanos()},\n     * Should always use {@link #getExpectedPresentationTimeNanos()} if it's possilbe.\n     * This method involves a binder call to SF,\n     * calling this method can potentially influence the performance.\n     *\n     * @return The frame start time, in the {@link System#nanoTime()} time base.\n     *\n     * @hide\n     ",
    "links" : [ "#nanoTime()", "#getExpectedPresentationTimeNanos()" ]
  }, {
    "name" : "private void scheduleFrameLocked(long now)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getVsyncId()",
    "returnType" : "long",
    "comment" : "\n     * Returns the vsync id of the last frame callback. Client are expected to call\n     * this function from their frame callback function to get the vsyncId and pass\n     * it together with a buffer or transaction to the Surface Composer. Calling\n     * this function from anywhere else will return an undefined value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getFrameDeadline()",
    "returnType" : "long",
    "comment" : "\n     * Returns the frame deadline in {@link System#nanoTime()} timebase that it is allotted for the\n     * frame to be completed. Client are expected to call this function from their frame callback\n     * function. Calling this function from anywhere else will return an undefined value.\n     *\n     * @hide\n     ",
    "links" : [ "#nanoTime()" ]
  }, {
    "name" : " void setFPSDivisor(int divisor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void traceMessage(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doFrame(long frameTimeNanos, int frame, DisplayEventReceiver.VsyncEventData vsyncEventData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doCallbacks(int callbackType, long frameIntervalNanos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doScheduleVsync()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doScheduleCallback(int callbackType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void scheduleVsyncLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isRunningOnLooperThreadLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CallbackRecord obtainCallbackLocked(long dueTime, Object action, Object token)",
    "returnType" : "CallbackRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void recycleCallbackLocked(CallbackRecord callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static float getRefreshRate()", "public static Choreographer getInstance()", "public static Choreographer getSfInstance()", " static Choreographer getInstanceForSurfaceControl(long layerHandle, @NonNull Looper looper)", "public static Choreographer getMainThreadInstance()", "public static void releaseInstance()", "private void dispose()", " void invalidate()", " boolean isTheLooperSame(Looper looper)", "public Looper getLooper()", "public static long getFrameDelay()", "public static void setFrameDelay(long frameDelay)", "public static long subtractFrameDelay(long delayMillis)", "public long getFrameIntervalNanos()", " void dump(String prefix, PrintWriter writer)", "public void postCallback(int callbackType, Runnable action, Object token)", "public void postCallbackDelayed(int callbackType, Runnable action, Object token, long delayMillis)", "private void postCallbackDelayedInternal(int callbackType, Object action, Object token, long delayMillis)", "public void postVsyncCallback(@NonNull VsyncCallback callback)", "public void removeCallbacks(int callbackType, Runnable action, Object token)", "private void removeCallbacksInternal(int callbackType, Object action, Object token)", "public void postFrameCallback(FrameCallback callback)", "public void postFrameCallbackDelayed(FrameCallback callback, long delayMillis)", "public void removeFrameCallback(FrameCallback callback)", "public void removeVsyncCallback(@Nullable VsyncCallback callback)", "public long getFrameTime()", "public long getFrameTimeNanos()", "public long getLastFrameTimeNanos()", "public long getExpectedPresentationTimeNanos()", "public long getExpectedPresentationTimeMillis()", "public long getLatestExpectedPresentTimeNanos()", "private void scheduleFrameLocked(long now)", "public long getVsyncId()", "public long getFrameDeadline()", " void setFPSDivisor(int divisor)", "private void traceMessage(String msg)", " void doFrame(long frameTimeNanos, int frame, DisplayEventReceiver.VsyncEventData vsyncEventData)", " void doCallbacks(int callbackType, long frameIntervalNanos)", " void doScheduleVsync()", " void doScheduleCallback(int callbackType)", "private void scheduleVsyncLocked()", "private boolean isRunningOnLooperThreadLocked()", "private CallbackRecord obtainCallbackLocked(long dueTime, Object action, Object token)", "private void recycleCallbackLocked(CallbackRecord callback)" ],
  "variableNames" : [ "TAG", "DEBUG_JANK", "DEBUG_FRAMES", "DEFAULT_FRAME_DELAY", "sFrameDelay", "sThreadInstance", "mMainInstance", "sSfThreadInstance", "USE_VSYNC", "USE_FRAME_TIME", "SKIPPED_FRAME_WARNING_LIMIT", "MSG_DO_FRAME", "MSG_DO_SCHEDULE_VSYNC", "MSG_DO_SCHEDULE_CALLBACK", "FRAME_CALLBACK_TOKEN", "VSYNC_CALLBACK_TOKEN", "mLock", "mLooper", "mHandler", "mDisplayEventReceiver", "mCallbackPool", "mCallbackQueues", "mFrameScheduled", "mCallbacksRunning", "mLastFrameTimeNanos", "mFrameIntervalNanos", "mLastFrameIntervalNanos", "mDebugPrintNextFrameTimeDelta", "mFPSDivisor", "mLastVsyncEventData", "mFrameData", "mFrameInfo", "CALLBACK_TRACE_TITLES", "CALLBACK_INPUT", "CALLBACK_ANIMATION", "CALLBACK_INSETS_ANIMATION", "CALLBACK_TRAVERSAL", "CALLBACK_COMMIT", "CALLBACK_LAST" ]
}