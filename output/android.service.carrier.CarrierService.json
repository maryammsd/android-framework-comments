{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/carrier/CarrierService.java",
  "packageName" : "android.service.carrier",
  "className" : "CarrierService",
  "comment" : "\n * A service that exposes carrier-specific functionality to the system.\n * <p>\n * To extend this class, you must declare the service in your manifest file to require the\n * {@link android.Manifest.permission#BIND_CARRIER_SERVICES} permission and include an intent\n * filter with the {@link #CARRIER_SERVICE_INTERFACE}. If the service should have a long-lived\n * binding, set <code>android.service.carrier.LONG_LIVED_BINDING</code> to <code>true</code> in the\n * service's metadata. For example:\n * </p>\n *\n * <pre>{@code\n * <service android:name=\".MyCarrierService\"\n *       android:label=\"@string/service_name\"\n *       android:permission=\"android.permission.BIND_CARRIER_SERVICES\">\n *  <intent-filter>\n *      <action android:name=\"android.service.carrier.CarrierService\" />\n *  </intent-filter>\n *  <meta-data android:name=\"android.service.carrier.LONG_LIVED_BINDING\"\n *             android:value=\"true\" />\n * </service>\n * }</pre>\n ",
  "links" : [ "android.Manifest.permission#BIND_CARRIER_SERVICES", "#CARRIER_SERVICE_INTERFACE" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CARRIER_SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStubWrapper",
    "type" : "ICarrierService.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract PersistableBundle onLoadConfig(CarrierIdentifier id)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Override this method to set carrier configuration.\n     * <p>\n     * This method will be called by telephony services to get carrier-specific configuration\n     * values. The returned config will be saved by the system until,\n     * <ol>\n     * <li>The carrier app package is updated, or</li>\n     * <li>The carrier app requests a reload with\n     * {@link android.telephony.CarrierConfigManager#notifyConfigChangedForSubId\n     * notifyConfigChangedForSubId}.</li>\n     * </ol>\n     * This method can be called after a SIM card loads, which may be before or after boot.\n     * </p>\n     * <p>\n     * This method should not block for a long time. If expensive operations (e.g. network access)\n     * are required, this method can schedule the work and return null. Then, use\n     * {@link android.telephony.CarrierConfigManager#notifyConfigChangedForSubId\n     * notifyConfigChangedForSubId} to trigger a reload when the config is ready.\n     * </p>\n     * <p>\n     * Implementations should use the keys defined in {@link android.telephony.CarrierConfigManager\n     * CarrierConfigManager}. Any configuration values not set in the returned {@link\n     * PersistableBundle} may be overridden by the system's default configuration service.\n     * </p>\n     *\n     * @param id contains details about the current carrier that can be used to decide what\n     *           configuration values to return. Instead of using details like MCCMNC to decide\n     *           current carrier, it also contains subscription carrier id\n     *           {@link android.telephony.TelephonyManager#getSimCarrierId()}, a platform-wide\n     *           unique identifier for each carrier, CarrierConfigService can directly use carrier\n     *           id as the key to look up the carrier info.\n     * @return a {@link PersistableBundle} object containing the configuration or null if default\n     *         values should be used.\n     * @deprecated use {@link #onLoadConfig(int, CarrierIdentifier)} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#getSimCarrierId()", "android.telephony.CarrierConfigManager#notifyConfigChangedForSubIdnotifyConfigChangedForSubId", "android.os.PersistableBundle", "android.telephony.CarrierConfigManagerCarrierConfigManager", "#onLoadConfig(int" ]
  }, {
    "name" : "public PersistableBundle onLoadConfig(int subscriptionId, @Nullable CarrierIdentifier id)",
    "returnType" : "PersistableBundle",
    "comment" : "\n     * Override this method to set carrier configuration on the given {@code subscriptionId}.\n     * <p>\n     * This method will be called by telephony services to get carrier-specific configuration\n     * values. The returned config will be saved by the system until,\n     * <ol>\n     * <li>The carrier app package is updated, or</li>\n     * <li>The carrier app requests a reload with\n     * {@link android.telephony.CarrierConfigManager#notifyConfigChangedForSubId\n     * notifyConfigChangedForSubId}.</li>\n     * </ol>\n     * This method can be called after a SIM card loads, which may be before or after boot.\n     * </p>\n     * <p>\n     * This method should not block for a long time. If expensive operations (e.g. network access)\n     * are required, this method can schedule the work and return null. Then, use\n     * {@link android.telephony.CarrierConfigManager#notifyConfigChangedForSubId\n     * notifyConfigChangedForSubId} to trigger a reload when the config is ready.\n     * </p>\n     * <p>\n     * Implementations should use the keys defined in {@link android.telephony.CarrierConfigManager\n     * CarrierConfigManager}. Any configuration values not set in the returned {@link\n     * PersistableBundle} may be overridden by the system's default configuration service.\n     * </p>\n     * <p>\n     * By default, this method just calls {@link #onLoadConfig(CarrierIdentifier)} with specified\n     * CarrierIdentifier {@code id}. Carrier app with target SDK\n     * {@link android.os.Build.VERSION_CODES#TIRAMISU} and above should override this method to\n     * load carrier configuration on the given {@code subscriptionId}.\n     * Note that {@link #onLoadConfig(CarrierIdentifier)} is still called prior to\n     * {@link android.os.Build.VERSION_CODES#TIRAMISU}.\n     * </p>\n     *\n     * @param subscriptionId the subscription on which the carrier app should load configuration\n     * @param id contains details about the current carrier that can be used to decide what\n     *           configuration values to return. Instead of using details like MCCMNC to decide\n     *           current carrier, it also contains subscription carrier id\n     *           {@link android.telephony.TelephonyManager#getSimCarrierId()}, a platform-wide\n     *           unique identifier for each carrier, CarrierConfigService can directly use carrier\n     *           id as the key to look up the carrier info.\n     * @return a {@link PersistableBundle} object containing the configuration or null if default\n     *         values should be used.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#TIRAMISU", "android.telephony.TelephonyManager#getSimCarrierId()", "android.telephony.CarrierConfigManager#notifyConfigChangedForSubIdnotifyConfigChangedForSubId", "#onLoadConfig(CarrierIdentifier)", "android.os.PersistableBundle", "android.telephony.CarrierConfigManagerCarrierConfigManager" ]
  }, {
    "name" : "public final void notifyCarrierNetworkChange(boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Informs the system of an intentional upcoming carrier network change by\n     * a carrier app. This call is optional and is only used to allow the\n     * system to provide alternative UI while telephony is performing an action\n     * that may result in intentional, temporary network lack of connectivity.\n     * <p>\n     * Based on the active parameter passed in, this method will either show or\n     * hide the alternative UI. There is no timeout associated with showing\n     * this UX, so a carrier app must be sure to call with active set to false\n     * sometime after calling with it set to true.\n     * <p>\n     * Requires Permission: calling app has carrier privileges.\n     *\n     * @param active Whether the carrier network change is or shortly will be\n     *               active. Set this value to true to begin showing\n     *               alternative UI and false to stop.\n     * @see android.telephony.TelephonyManager#hasCarrierPrivileges\n     * @deprecated use {@link #notifyCarrierNetworkChange(int, boolean)} instead.\n     *             With no parameter to specify the subscription, this API will\n     *             apply to all subscriptions that the carrier app has carrier\n     *             privileges on.\n     ",
    "links" : [ "#notifyCarrierNetworkChange(int" ]
  }, {
    "name" : "public final void notifyCarrierNetworkChange(int subscriptionId, boolean active)",
    "returnType" : "void",
    "comment" : "\n     * Informs the system of an intentional upcoming carrier network change by a carrier app on the\n     * given {@code subscriptionId}. This call is optional and is only used to allow the system to\n     * provide alternative UI while telephony is performing an action that may result in\n     * intentional, temporary network lack of connectivity.\n     *\n     * <p>Based on the active parameter passed in, this method will either show or hide the\n     * alternative UI. There is no timeout associated with showing this UX, so a carrier app must\n     * be sure to call with active set to false sometime after calling with it set to true.\n     *\n     * <p>Requires Permission: calling app has carrier privileges.\n     *\n     * @param subscriptionId the subscription of the carrier network that trigger the change.\n     * @param active whether the carrier network change is or shortly will be active. Set this\n     *               value to true to begin showing alternative UI and false to stop.\n     * @see android.telephony.TelephonyManager#hasCarrierPrivileges\n     ",
    "links" : [ ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "\n     * If overriding this method, call through to the super method for any unknown actions.\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract PersistableBundle onLoadConfig(CarrierIdentifier id)", "public PersistableBundle onLoadConfig(int subscriptionId, @Nullable CarrierIdentifier id)", "public final void notifyCarrierNetworkChange(boolean active)", "public final void notifyCarrierNetworkChange(int subscriptionId, boolean active)", "public IBinder onBind(Intent intent)" ],
  "variableNames" : [ "LOG_TAG", "CARRIER_SERVICE_INTERFACE", "mStubWrapper" ]
}