{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothHearingAid.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHearingAid",
  "comment" : "\n * This class provides the public APIs to control the Hearing Aid profile.\n *\n * <p>BluetoothHearingAid is a proxy object for controlling the Bluetooth Hearing Aid Service via\n * IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothHearingAid proxy object.\n *\n * <p>Android only supports one set of connected Bluetooth Hearing Aid device at a time. Each method\n * is protected with its appropriate permission.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Hearing Aid profile. Please\n     * note that in the binaural case, there will be two different LE devices for the left and right\n     * side and each device will have their own connection state changes.S\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can be null if no device\n     *       is active.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE" ]
  }, {
    "name" : "SIDE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates the device side could not be read.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SIDE_LEFT",
    "type" : "int",
    "comment" : "\n     * This device represents Left Hearing Aid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SIDE_RIGHT",
    "type" : "int",
    "comment" : "\n     * This device represents Right Hearing Aid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Indicates the device mode could not be read.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_MONAURAL",
    "type" : "int",
    "comment" : "\n     * This device is Monaural.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_BINAURAL",
    "type" : "int",
    "comment" : "\n     * This device is Binaural (should receive only left or right audio).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HI_SYNC_ID_INVALID",
    "type" : "long",
    "comment" : "\n     * Indicates the HiSyncID could not be read and is unavailable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothHearingAid",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHearingAid getService()",
    "returnType" : "IBluetoothHearingAid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is already connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that connection\n     * state intent for the profile will be broadcasted with the state. Users can get the connection\n     * state of the profile from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p>This API will return false in scenarios like the profile on the Bluetooth device is not in\n     * connected state etc. When this API returns, true, it is guaranteed that the connection state\n     * change intent will be broadcasted with the state. Users can get the disconnection state of\n     * the profile from this intent.\n     *\n     * <p>If the disconnection is initiated by a remote device, the state will transition from\n     * {@link #STATE_CONNECTED} to {@link #STATE_DISCONNECTED}. If the disconnect is initiated by\n     * the host (local) device the state will transition from {@link #STATE_CONNECTED} to state\n     * {@link #STATE_DISCONNECTING} to state {@link #STATE_DISCONNECTED}. The transition to {@link\n     * #STATE_DISCONNECTING} can be used to distinguish between the two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * <p>The active device selection is per profile. An active device's purpose is\n     * profile-specific. For example, Hearing Aid audio streaming is to the active Hearing Aid\n     * device. If a remote device is not connected, it cannot be selected as active.\n     *\n     * <p>This API returns false in scenarios like the profile on the device is not connected or\n     * Bluetooth is not turned on. When this API returns true, it is guaranteed that the {@link\n     * #ACTION_ACTIVE_DEVICE_CHANGED} intent will be broadcasted with the active device.\n     *\n     * @param device the remote Bluetooth device. Could be null to clear the active device and stop\n     *     streaming audio to a Bluetooth device.\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#ACTION_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public List<BluetoothDevice> getActiveDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the connected physical Hearing Aid devices that are active\n     *\n     * @return the list of active devices. The first element is the left active device; the second\n     *     element is the right active device. If either or both side is not active, it will be null\n     *     on that position. Returns empty list on error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * <p>For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n     * Tells remote device to set an absolute volume.\n     *\n     * @param volume Absolute volume to be set on remote\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHiSyncId(@NonNull BluetoothDevice device)",
    "returnType" : "long",
    "comment" : "\n     * Get the HiSyncId (unique hearing aid device identifier) of the device.\n     *\n     * <p><a href=https://source.android.com/devices/bluetooth/asha#hisyncid>HiSyncId documentation\n     * can be found here</a>\n     *\n     * @param device Bluetooth device\n     * @return the HiSyncId of the device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceSide(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the side of the device.\n     *\n     * @param device Bluetooth device.\n     * @return the {@code SIDE_LEFT}, {@code SIDE_RIGHT} of the device, or {@code SIDE_UNKNOWN} if\n     *     one is not available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceMode(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the mode of the device.\n     *\n     * @param device Bluetooth device\n     * @return the {@code MODE_MONAURAL}, {@code MODE_BINAURAL} of the device, or {@code\n     *     MODE_UNKNOWN} if one is not available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public AdvertisementServiceData getAdvertisementServiceData(@NonNull BluetoothDevice device)",
    "returnType" : "AdvertisementServiceData",
    "comment" : "\n     * Get ASHA device's advertisement service data.\n     *\n     * @param device discovered Bluetooth device\n     * @return {@link AdvertisementServiceData}\n     * @hide\n     ",
    "links" : [ "AdvertisementServiceData" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothHearingAid getService()", "public BluetoothAdapter getAdapter()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public List<BluetoothDevice> getActiveDevices()", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public static String stateToString(int state)", "public void setVolume(int volume)", "public long getHiSyncId(@NonNull BluetoothDevice device)", "public int getDeviceSide(@NonNull BluetoothDevice device)", "public int getDeviceMode(@NonNull BluetoothDevice device)", "public AdvertisementServiceData getAdvertisementServiceData(@NonNull BluetoothDevice device)", "private boolean isEnabled()", "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)", "private boolean isValidDevice(BluetoothDevice device)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_ACTIVE_DEVICE_CHANGED", "SIDE_UNKNOWN", "SIDE_LEFT", "SIDE_RIGHT", "MODE_UNKNOWN", "MODE_MONAURAL", "MODE_BINAURAL", "HI_SYNC_ID_INVALID", "mAdapter", "mAttributionSource", "mService" ]
}