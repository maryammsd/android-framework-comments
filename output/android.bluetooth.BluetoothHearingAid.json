{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothHearingAid.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHearingAid",
  "comment" : "\n * This class provides the public APIs to control the Hearing Aid profile.\n *\n * <p>BluetoothHearingAid is a proxy object for controlling the Bluetooth Hearing Aid\n * Service via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get\n * the BluetoothHearingAid proxy object.\n *\n * <p> Android only supports one set of connected Bluetooth Hearing Aid device at a time. Each\n * method is protected with its appropriate permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Hearing Aid\n     * profile. Please note that in the binaural case, there will be two different LE devices for\n     * the left and right side and each device will have their own connection state changes.S\n     *\n     * <p>This intent will have 3 extras:\n     * <ul>\n     * <li> {@link #EXTRA_STATE} - The current state of the profile. </li>\n     * <li> {@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.</li>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. </li>\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of\n     * {@link #STATE_DISCONNECTED}, {@link #STATE_CONNECTING},\n     * {@link #STATE_CONNECTED}, {@link #STATE_DISCONNECTING}.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "ACTION_ACTIVE_DEVICE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the selection of a connected device as active.\n     *\n     * <p>This intent will have one extra:\n     * <ul>\n     * <li> {@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can\n     * be null if no device is active. </li>\n     * </ul>\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH} permission to\n     * receive.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "android.Manifest.permission#BLUETOOTH" ]
  }, {
    "name" : "SIDE_LEFT",
    "type" : "int",
    "comment" : "\n     * This device represents Left Hearing Aid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SIDE_RIGHT",
    "type" : "int",
    "comment" : "\n     * This device represents Right Hearing Aid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_MONAURAL",
    "type" : "int",
    "comment" : "\n     * This device is Monaural.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MODE_BINAURAL",
    "type" : "int",
    "comment" : "\n     * This device is Binaural (should receive only left or right audio).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HI_SYNC_ID_INVALID",
    "type" : "long",
    "comment" : "\n     * Indicates the HiSyncID could not be read and is unavailable.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProfileConnector",
    "type" : "BluetoothProfileConnector<IBluetoothHearingAid>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHearingAid getService()",
    "returnType" : "IBluetoothHearingAid",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate connection to a profile of the remote bluetooth device.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is already connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that\n     * connection state intent for the profile will be broadcasted with\n     * the state. Users can get the connection state of the profile\n     * from this intent.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiate disconnection from a profile\n     *\n     * <p> This API will return false in scenarios like the profile on the\n     * Bluetooth device is not in connected state etc. When this API returns,\n     * true, it is guaranteed that the connection state change\n     * intent will be broadcasted with the state. Users can get the\n     * disconnection state of the profile from this intent.\n     *\n     * <p> If the disconnection is initiated by a remote device, the state\n     * will transition from {@link #STATE_CONNECTED} to\n     * {@link #STATE_DISCONNECTED}. If the disconnect is initiated by the\n     * host (local) device the state will transition from\n     * {@link #STATE_CONNECTED} to state {@link #STATE_DISCONNECTING} to\n     * state {@link #STATE_DISCONNECTED}. The transition to\n     * {@link #STATE_DISCONNECTING} can be used to distinguish between the\n     * two scenarios.\n     *\n     * @param device Remote Bluetooth Device\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#STATE_CONNECTED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setActiveDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Select a connected device as active.\n     *\n     * The active device selection is per profile. An active device's\n     * purpose is profile-specific. For example, Hearing Aid audio\n     * streaming is to the active Hearing Aid device. If a remote device\n     * is not connected, it cannot be selected as active.\n     *\n     * <p> This API returns false in scenarios like the profile on the\n     * device is not connected or Bluetooth is not turned on.\n     * When this API returns true, it is guaranteed that the\n     * {@link #ACTION_ACTIVE_DEVICE_CHANGED} intent will be broadcasted\n     * with the active device.\n     *\n     * <p>Requires {@link android.Manifest.permission#BLUETOOTH_ADMIN}\n     * permission.\n     *\n     * @param device the remote Bluetooth device. Could be null to clear\n     * the active device and stop streaming audio to a Bluetooth device.\n     * @return false on immediate error, true otherwise\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission#BLUETOOTH_ADMIN", "#ACTION_ACTIVE_DEVICE_CHANGED" ]
  }, {
    "name" : "public List<BluetoothDevice> getActiveDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * Get the connected physical Hearing Aid devices that are active\n     *\n     * @return the list of active devices. The first element is the left active\n     * device; the second element is the right active device. If either or both side\n     * is not active, it will be null on that position. Returns empty list on error.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p> The device should already be paired.\n     * Priority can be one of {@link #PRIORITY_ON} or {@link #PRIORITY_OFF},\n     *\n     * @param device Paired bluetooth device\n     * @param priority\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p> The device should already be paired.\n     * Connection policy can be one of {@link #CONNECTION_POLICY_ALLOWED},\n     * {@link #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p> The priority can be any of:\n     * {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p> The connection policy can be any of:\n     * {@link #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN},\n     * {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public static String stateToString(int state)",
    "returnType" : "String",
    "comment" : "\n     * Helper for converting a state to a string.\n     *\n     * For debug use only - strings are not internationalized.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVolume(int volume)",
    "returnType" : "void",
    "comment" : "\n     * Tells remote device to set an absolute volume.\n     *\n     * @param volume Absolute volume to be set on remote\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getHiSyncId(@NonNull BluetoothDevice device)",
    "returnType" : "long",
    "comment" : "\n     * Get the HiSyncId (unique hearing aid device identifier) of the device.\n     *\n     * <a href=https://source.android.com/devices/bluetooth/asha#hisyncid>HiSyncId documentation\n     * can be found here</a>\n     *\n     * @param device Bluetooth device\n     * @return the HiSyncId of the device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceSide(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the side of the device.\n     *\n     * @param device Bluetooth device.\n     * @return SIDE_LEFT or SIDE_RIGHT\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDeviceMode(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the mode of the device.\n     *\n     * @param device Bluetooth device\n     * @return MODE_MONAURAL or MODE_BINAURAL\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_ACTIVE_DEVICE_CHANGED", "SIDE_LEFT", "SIDE_RIGHT", "MODE_MONAURAL", "MODE_BINAURAL", "HI_SYNC_ID_INVALID", "mAdapter", "mProfileConnector" ],
  "methodNames" : [ " void close()", "private IBluetoothHearingAid getService()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public boolean setActiveDevice(@Nullable BluetoothDevice device)", "public List<BluetoothDevice> getActiveDevices()", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public static String stateToString(int state)", "public void setVolume(int volume)", "public long getHiSyncId(@NonNull BluetoothDevice device)", "public int getDeviceSide(BluetoothDevice device)", "public int getDeviceMode(BluetoothDevice device)", "private boolean isEnabled()", "private void verifyDeviceNotNull(BluetoothDevice device, String methodName)", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ]
}