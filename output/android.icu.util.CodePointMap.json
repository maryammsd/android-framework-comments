{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/util/CodePointMap.java",
  "packageName" : "android.icu.util",
  "className" : "CodePointMap",
  "comment" : "\n * Abstract map from Unicode code points (U+0000..U+10FFFF) to integer values.\n * This does not implement java.util.Map.\n *\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int get(int c)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value for a code point as stored in the map, with range checking.\n     * Returns an implementation-defined error value if c is not in the range 0..U+10FFFF.\n     *\n     * @param c the code point\n     * @return the map value,\n     *         or an implementation-defined error value if\n     *         the code point is not in the range 0..U+10FFFF\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean getRange(int start, ValueFilter filter, Range range)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the range object to a range of code points beginning with the start parameter.\n     * The range start is the same as the start input parameter\n     * (even if there are preceding code points that have the same value).\n     * The range end is the last code point such that\n     * all those from start to there have the same value.\n     * Returns false if start is not 0..U+10FFFF.\n     * Can be used to efficiently iterate over all same-value ranges in a map.\n     * (This is normally faster than iterating over code points and get()ting each value,\n     * but may be much slower than a data structure that stores ranges directly.)\n     *\n     * <p>If the {@link ValueFilter} parameter is not null, then\n     * the value to be delivered is passed through that filter, and the return value is the end\n     * of the range where all values are modified to the same actual value.\n     * The value is unchanged if that parameter is null.\n     *\n     * <p>Example:\n     * <pre>\n     * int start = 0;\n     * CodePointMap.Range range = new CodePointMap.Range();\n     * while (map.getRange(start, null, range)) {\n     *     int end = range.getEnd();\n     *     int value = range.getValue();\n     *     // Work with the range start..end and its value.\n     *     start = end + 1;\n     * }\n     * </pre>\n     *\n     * @param start range start\n     * @param filter an object that may modify the map data value,\n     *     or null if the values from the map are to be used unmodified\n     * @param range the range object that will be set to the code point range and value\n     * @return true if start is 0..U+10FFFF; otherwise no new range is fetched\n     ",
    "links" : [ "ValueFilter" ]
  }, {
    "name" : "public boolean getRange(int start, RangeOption option, int surrogateValue, ValueFilter filter, Range range)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the range object to a range of code points beginning with the start parameter.\n     * The range start is the same as the start input parameter\n     * (even if there are preceding code points that have the same value).\n     * The range end is the last code point such that\n     * all those from start to there have the same value.\n     * Returns false if start is not 0..U+10FFFF.\n     *\n     * <p>Same as the simpler {@link #getRange(int, ValueFilter, Range)} but optionally\n     * modifies the range if it overlaps with surrogate code points.\n     *\n     * @param start range start\n     * @param option defines whether surrogates are treated normally,\n     *               or as having the surrogateValue; usually {@link RangeOption#NORMAL}\n     * @param surrogateValue value for surrogates; ignored if option=={@link RangeOption#NORMAL}\n     * @param filter an object that may modify the map data value,\n     *     or null if the values from the map are to be used unmodified\n     * @param range the range object that will be set to the code point range and value\n     * @return true if start is 0..U+10FFFF; otherwise no new range is fetched\n     ",
    "links" : [ "#getRange(int", "#NORMAL" ]
  }, {
    "name" : "public Iterator<Range> iterator()",
    "returnType" : "Iterator<Range>",
    "comment" : "\n     * Convenience iterator over same-map-value code point ranges.\n     * Same as looping over all ranges with {@link #getRange(int, ValueFilter, Range)}\n     * without filtering.\n     * Adjacent ranges have different map values.\n     *\n     * <p>The iterator always returns the same Range object.\n     *\n     * @return a Range iterator\n     ",
    "links" : [ "#getRange(int" ]
  }, {
    "name" : "public StringIterator stringIterator(CharSequence s, int sIndex)",
    "returnType" : "StringIterator",
    "comment" : "\n     * Returns an iterator (not a java.util.Iterator) over code points of a string\n     * for fetching map values.\n     *\n     * @param s string to iterate over\n     * @param sIndex string index where the iteration will start\n     * @return the iterator\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int get(int c)", "public abstract boolean getRange(int start, ValueFilter filter, Range range)", "public boolean getRange(int start, RangeOption option, int surrogateValue, ValueFilter filter, Range range)", "public Iterator<Range> iterator()", "public StringIterator stringIterator(CharSequence s, int sIndex)" ],
  "variableNames" : [ ]
}