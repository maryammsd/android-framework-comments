{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/attribute/UserDefinedFileAttributeView.java",
  "packageName" : "java.nio.file.attribute",
  "className" : "UserDefinedFileAttributeView",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " String name()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this attribute view. Attribute views of this type\n     * have the name {@code \"user\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : " List<String> list() throws IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Returns a list containing the names of the user-defined attributes.\n     *\n     * @return  An unmodifiable list containing the names of the file's\n     *          user-defined\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link\n     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     ",
    "links" : [ "#checkRead(String)", "RuntimePermission" ]
  }, {
    "name" : " int size(String name) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the size of the value of a user-defined attribute.\n     *\n     * @param   name\n     *          The attribute name\n     *\n     * @return  The size of the attribute value, in bytes.\n     *\n     * @throws  ArithmeticException\n     *          If the size of the attribute is larger than {@link Integer#MAX_VALUE}\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link\n     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     ",
    "links" : [ "#MAX_VALUE", "#checkRead(String)", "RuntimePermission" ]
  }, {
    "name" : " int read(String name, ByteBuffer dst) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Read the value of a user-defined attribute into a buffer.\n     *\n     * <p> This method reads the value of the attribute into the given buffer\n     * as a sequence of bytes, failing if the number of bytes remaining in\n     * the buffer is insufficient to read the complete attribute value. The\n     * number of bytes transferred into the buffer is {@code n}, where {@code n}\n     * is the size of the attribute value. The first byte in the sequence is at\n     * index {@code p} and the last byte is at index {@code p + n - 1}, where\n     * {@code p} is the buffer's position. Upon return the buffer's position\n     * will be equal to {@code p + n}; its limit will not have changed.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to read a file's MIME type that is stored as a user-defined\n     * attribute with the name \"{@code user.mimetype}\".\n     * <pre>\n     *    UserDefinedFileAttributeView view =\n     *        Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n     *    String name = \"user.mimetype\";\n     *    ByteBuffer buf = ByteBuffer.allocate(view.size(name));\n     *    view.read(name, buf);\n     *    buf.flip();\n     *    String value = Charset.defaultCharset().decode(buf).toString();\n     * </pre>\n     *\n     * @param   name\n     *          The attribute name\n     * @param   dst\n     *          The destination buffer\n     *\n     * @return  The number of bytes read, possibly zero\n     *\n     * @throws  IllegalArgumentException\n     *          If the destination buffer is read-only\n     * @throws  IOException\n     *          If an I/O error occurs or there is insufficient space in the\n     *          destination buffer for the attribute value\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link\n     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n     *          or its {@link SecurityManager#checkRead(String) checkRead} method\n     *          denies read access to the file.\n     *\n     * @see #size\n     ",
    "links" : [ "#checkRead(String)", "RuntimePermission" ]
  }, {
    "name" : " int write(String name, ByteBuffer src) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Writes the value of a user-defined attribute from a buffer.\n     *\n     * <p> This method writes the value of the attribute from a given buffer as\n     * a sequence of bytes. The size of the value to transfer is {@code r},\n     * where {@code r} is the number of bytes remaining in the buffer, that is\n     * {@code src.remaining()}. The sequence of bytes is transferred from the\n     * buffer starting at index {@code p}, where {@code p} is the buffer's\n     * position. Upon return, the buffer's position will be equal to {@code\n     * p + n}, where {@code n} is the number of bytes transferred; its limit\n     * will not have changed.\n     *\n     * <p> If an attribute of the given name already exists then its value is\n     * replaced. If the attribute does not exist then it is created. If it\n     * implementation specific if a test to check for the existence of the\n     * attribute and the creation of attribute are atomic with respect to other\n     * file system activities.\n     *\n     * <p> Where there is insufficient space to store the attribute, or the\n     * attribute name or value exceed an implementation specific maximum size\n     * then an {@code IOException} is thrown.\n     *\n     * <p> <b>Usage Example:</b>\n     * Suppose we want to write a file's MIME type as a user-defined attribute:\n     * <pre>\n     *    UserDefinedFileAttributeView view =\n     *        FIles.getFileAttributeView(path, UserDefinedFileAttributeView.class);\n     *    view.write(\"user.mimetype\", Charset.defaultCharset().encode(\"text/html\"));\n     * </pre>\n     *\n     * @param   name\n     *          The attribute name\n     * @param   src\n     *          The buffer containing the attribute value\n     *\n     * @return  The number of bytes written, possibly zero\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link\n     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file.\n     ",
    "links" : [ "RuntimePermission", "#checkWrite(String)" ]
  }, {
    "name" : " void delete(String name) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Deletes a user-defined attribute.\n     *\n     * @param   name\n     *          The attribute name\n     *\n     * @throws  IOException\n     *          If an I/O error occurs or the attribute does not exist\n     * @throws  SecurityException\n     *          In the case of the default provider, a security manager is\n     *          installed, and it denies {@link\n     *          RuntimePermission}{@code (\"accessUserDefinedAttributes\")}\n     *          or its {@link SecurityManager#checkWrite(String) checkWrite}\n     *          method denies write access to the file.\n     ",
    "links" : [ "RuntimePermission", "#checkWrite(String)" ]
  } ],
  "methodNames" : [ " String name()", " List<String> list() throws IOException", " int size(String name) throws IOException", " int read(String name, ByteBuffer dst) throws IOException", " int write(String name, ByteBuffer src) throws IOException", " void delete(String name) throws IOException" ],
  "variableNames" : [ ]
}