{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/HardwarePropertiesManager.java",
  "packageName" : "android.os",
  "className" : "HardwarePropertiesManager",
  "comment" : "\n * The HardwarePropertiesManager class provides a mechanism of accessing hardware state of a\n * device: CPU, GPU and battery temperatures, CPU usage per core, fan speed, etc.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IHardwarePropertiesManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TEMPERATURE_CPU",
    "type" : "int",
    "comment" : " Temperature of CPUs in Celsius. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TEMPERATURE_GPU",
    "type" : "int",
    "comment" : " Temperature of GPUs in Celsius. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TEMPERATURE_BATTERY",
    "type" : "int",
    "comment" : " Temperature of battery in Celsius. ",
    "links" : [ ]
  }, {
    "name" : "DEVICE_TEMPERATURE_SKIN",
    "type" : "int",
    "comment" : " Temperature of device skin in Celsius. ",
    "links" : [ ]
  }, {
    "name" : "TEMPERATURE_CURRENT",
    "type" : "int",
    "comment" : " Get current temperature. ",
    "links" : [ ]
  }, {
    "name" : "TEMPERATURE_THROTTLING",
    "type" : "int",
    "comment" : " Get throttling temperature threshold. ",
    "links" : [ ]
  }, {
    "name" : "TEMPERATURE_SHUTDOWN",
    "type" : "int",
    "comment" : " Get shutdown temperature threshold. ",
    "links" : [ ]
  }, {
    "name" : "TEMPERATURE_THROTTLING_BELOW_VR_MIN",
    "type" : "int",
    "comment" : "\n     * Get throttling temperature threshold above which minimum clockrates for VR mode will not be\n     * met.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNDEFINED_TEMPERATURE",
    "type" : "float",
    "comment" : " Undefined temperature constant. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : " Calling app context. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float[] getDeviceTemperatures(@DeviceTemperatureType int type, @TemperatureSource int source)",
    "returnType" : "float[]",
    "comment" : "\n     * Return an array of device temperatures in Celsius.\n     *\n     * @param type type of requested device temperature, one of {@link #DEVICE_TEMPERATURE_CPU},\n     * {@link #DEVICE_TEMPERATURE_GPU}, {@link #DEVICE_TEMPERATURE_BATTERY} or {@link\n     * #DEVICE_TEMPERATURE_SKIN}.\n     * @param source source of requested device temperature, one of {@link #TEMPERATURE_CURRENT},\n     * {@link #TEMPERATURE_THROTTLING}, {@link #TEMPERATURE_THROTTLING_BELOW_VR_MIN} or\n     * {@link #TEMPERATURE_SHUTDOWN}.\n     * @return an array of requested float device temperatures. Temperature equals to\n     *         {@link #UNDEFINED_TEMPERATURE} if undefined.\n     *         Empty if platform doesn't provide the queried temperature.\n     *\n     * @throws SecurityException if something other than the device owner or the current VR service\n     *         tries to retrieve information provided by this service.\n    ",
    "links" : [ "#DEVICE_TEMPERATURE_GPU", "#TEMPERATURE_THROTTLING_BELOW_VR_MIN", "#TEMPERATURE_CURRENT", "#TEMPERATURE_THROTTLING", "#DEVICE_TEMPERATURE_CPU", "#DEVICE_TEMPERATURE_BATTERY", "#DEVICE_TEMPERATURE_SKIN", "#TEMPERATURE_SHUTDOWN", "#UNDEFINED_TEMPERATURE" ]
  }, {
    "name" : "public CpuUsageInfo[] getCpuUsages()",
    "returnType" : "CpuUsageInfo[]",
    "comment" : "\n     * Return an array of CPU usage info for each core.\n     *\n     * @return an array of {@link android.os.CpuUsageInfo} for each core. Return {@code null} for\n     *         each unplugged core.\n     *         Empty if CPU usage is not supported on this system.\n     *\n     * @throws SecurityException if something other than the device owner or the current VR service\n     *         tries to retrieve information provided by this service.\n     ",
    "links" : [ "android.os.CpuUsageInfo" ]
  }, {
    "name" : "public float[] getFanSpeeds()",
    "returnType" : "float[]",
    "comment" : "\n     * Return an array of fan speeds in RPM.\n     *\n     * @return an array of float fan speeds in RPM. Empty if there are no fans or fan speed is not\n     * supported on this system.\n     *\n     * @throws SecurityException if something other than the device owner or the current VR service\n     *         tries to retrieve information provided by this service.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mService", "DEVICE_TEMPERATURE_CPU", "DEVICE_TEMPERATURE_GPU", "DEVICE_TEMPERATURE_BATTERY", "DEVICE_TEMPERATURE_SKIN", "TEMPERATURE_CURRENT", "TEMPERATURE_THROTTLING", "TEMPERATURE_SHUTDOWN", "TEMPERATURE_THROTTLING_BELOW_VR_MIN", "UNDEFINED_TEMPERATURE", "mContext" ],
  "methodNames" : [ "public float[] getDeviceTemperatures(@DeviceTemperatureType int type, @TemperatureSource int source)", "public CpuUsageInfo[] getCpuUsages()", "public float[] getFanSpeeds()" ]
}