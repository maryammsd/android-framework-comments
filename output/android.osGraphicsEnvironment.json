{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/GraphicsEnvironment.java",
  "packageName" : "android.os",
  "className" : "GraphicsEnvironment",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "sInstance",
    "type" : "GraphicsEnvironment",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_VERSION_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_DRIVER_VERSION_CODE",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER_PRERELEASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROPERTY_GFX_DRIVER_BUILD_TIME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_DRIVER_BUILD_TIME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_DEVELOPER_DRIVER_ENABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "METADATA_INJECT_LAYERS_ENABLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_RULES_FILE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANGLE_TEMP_RULES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_ANGLE_FOR_ANDROID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INTENT_KEY_A4A_TOAST_MESSAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_WHITELIST_ALL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_SPHAL_LIBRARIES_FILENAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_0",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VULKAN_1_1",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_GLOBAL_OPT_IN_DEFAULT",
    "type" : "int",
    "comment" : " 3: All apps use system graphics driver",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_GLOBAL_OPT_IN_GAME_DRIVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GAME_DRIVER_GLOBAL_OPT_IN_OFF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClassLoader",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibrarySearchPaths",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLibraryPermittedPaths",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDriverMap",
    "type" : "Map<OpenGlDriverChoice, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static GraphicsEnvironment getInstance()",
    "returnType" : "GraphicsEnvironment",
    "comment" : "\n     * Returns the shared {@link GraphicsEnvironment} instance.\n     ",
    "links" : [ "GraphicsEnvironment" ]
  }, {
    "name" : "public void setup(Context context, Bundle coreSettings)",
    "returnType" : "void",
    "comment" : "\n     * Set up GraphicsEnvironment\n     ",
    "links" : [ ]
  }, {
    "name" : "public static native void hintActivityLaunch()",
    "returnType" : "void",
    "comment" : "\n     * Hint for GraphicsEnvironment that an activity is launching on the process.\n     * Then the app process is allowed to send stats to GpuStats module.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldUseAngle(Context context, Bundle coreSettings, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Query to determine if ANGLE should be used\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getVulkanVersion(PackageManager pm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean canInjectLayers(ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether application is has set the manifest metadata for layer injection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLayerPaths(ClassLoader classLoader, String searchPaths, String permittedPaths)",
    "returnType" : "void",
    "comment" : "\n     * Store the class loader for namespace lookup later.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDebugLayerPathsFromSettings(Bundle coreSettings, IPackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "\n     * Returns the debug layer paths from settings.\n     * Returns null if:\n     *     1) The application process is not debuggable or layer injection metadata flag is not\n     *        true; Or\n     *     2) ENABLE_GPU_DEBUG_LAYERS is not true; Or\n     *     3) Package name is not equal to GPU_DEBUG_APP.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getDebugLayerAppPaths(IPackageManager pm, String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Return the debug layer app's on-disk and in-APK lib directories\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean debugLayerEnabled(Bundle coreSettings, String packageName, ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupGpuLayers(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "void",
    "comment" : "\n     * Set up layer search paths for all apps\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Map<OpenGlDriverChoice, String> buildMap()",
    "returnType" : "Map<OpenGlDriverChoice, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static List<String> getGlobalSettingsString(ContentResolver contentResolver, Bundle bundle, String globalSetting)",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getGlobalSettingsPkgIndex(String pkgName, List<String> globalSettingsDriverPkgs)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ApplicationInfo getAppInfoWithMetadata(Context context, PackageManager pm, String packageName)",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getDriverForPkg(Context context, Bundle bundle, String packageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getAnglePackageName(PackageManager pm)",
    "returnType" : "String",
    "comment" : "\n     * Get the ANGLE package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAngleDebugPackage(Context context, Bundle coreSettings)",
    "returnType" : "String",
    "comment" : "\n     * Check for ANGLE debug package, but only for apps that can load them (dumpable)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean setupAngleWithTempRulesFile(Context context, String packageName, String paths, String devOptIn)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to setup ANGLE with a temporary rules file.\n     * True: Temporary rules file was loaded.\n     * False: Temporary rules file was *not* loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean setupAngleRulesApk(String anglePkgName, ApplicationInfo angleInfo, PackageManager pm, String packageName, String paths, String devOptIn)",
    "returnType" : "boolean",
    "comment" : "\n     * Attempt to setup ANGLE with a rules file loaded from the ANGLE APK.\n     * True: APK rules file was loaded.\n     * False: APK rules file was *not* loaded.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean checkAngleWhitelist(Context context, Bundle bundle, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Pull ANGLE whitelist from GlobalSettings and compare against current package\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setupAngle(Context context, Bundle bundle, PackageManager pm, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Pass ANGLE details down to trigger enable logic\n     *\n     * @param context\n     * @param bundle\n     * @param packageName\n     * @return true: ANGLE setup successfully\n     *         false: ANGLE not setup (not on whitelist, ANGLE not present, etc.)\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean shouldShowAngleInUseDialogBox(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the \"ANGLE In Use\" dialog box should be shown.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean setupAndUseAngle(Context context, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if ANGLE will be used and setup the environment\n     ",
    "links" : [ ]
  }, {
    "name" : "public void showAngleInUseDialogBox(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Show the ANGLE in Use Dialog Box\n     * @param context\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String chooseDriverInternal(Bundle coreSettings, ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "\n     * Return the driver package name to use. Return null for system driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean chooseDriver(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)",
    "returnType" : "boolean",
    "comment" : "\n     * Choose whether the current process should use the builtin or an updated driver.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String chooseAbi(ApplicationInfo ai)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getSphalLibraries(Context context, String driverPackageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean isDebuggable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setLayerPaths(ClassLoader classLoader, String layerPaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDebugLayers(String layers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDebugLayersGLES(String layers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setDriverPathAndSphalLibraries(String path, String sphalLibraries)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setGpuStats(String driverPackageName, String driverVersionName, long driverVersionCode, long driverBuildTime, String appPackageName, int vulkanVersion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void setAngleInfo(String path, String appPackage, String devOptIn, FileDescriptor rulesFd, long rulesOffset, long rulesLength)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean getShouldUseAngle(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean setInjectLayersPrSetDumpable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "sInstance", "DEBUG", "TAG", "SYSTEM_DRIVER_NAME", "SYSTEM_DRIVER_VERSION_NAME", "SYSTEM_DRIVER_VERSION_CODE", "PROPERTY_GFX_DRIVER", "PROPERTY_GFX_DRIVER_PRERELEASE", "PROPERTY_GFX_DRIVER_BUILD_TIME", "METADATA_DRIVER_BUILD_TIME", "METADATA_DEVELOPER_DRIVER_ENABLE", "METADATA_INJECT_LAYERS_ENABLE", "ANGLE_RULES_FILE", "ANGLE_TEMP_RULES", "ACTION_ANGLE_FOR_ANDROID", "ACTION_ANGLE_FOR_ANDROID_TOAST_MESSAGE", "INTENT_KEY_A4A_TOAST_MESSAGE", "GAME_DRIVER_WHITELIST_ALL", "GAME_DRIVER_SPHAL_LIBRARIES_FILENAME", "VULKAN_1_0", "VULKAN_1_1", "GAME_DRIVER_GLOBAL_OPT_IN_DEFAULT", "GAME_DRIVER_GLOBAL_OPT_IN_GAME_DRIVER", "GAME_DRIVER_GLOBAL_OPT_IN_PRERELEASE_DRIVER", "GAME_DRIVER_GLOBAL_OPT_IN_OFF", "mClassLoader", "mLibrarySearchPaths", "mLibraryPermittedPaths", "sDriverMap" ],
  "methodNames" : [ "public static GraphicsEnvironment getInstance()", "public void setup(Context context, Bundle coreSettings)", "public static native void hintActivityLaunch()", "public static boolean shouldUseAngle(Context context, Bundle coreSettings, String packageName)", "private static int getVulkanVersion(PackageManager pm)", "private static boolean canInjectLayers(ApplicationInfo ai)", "public void setLayerPaths(ClassLoader classLoader, String searchPaths, String permittedPaths)", "public String getDebugLayerPathsFromSettings(Bundle coreSettings, IPackageManager pm, String packageName, ApplicationInfo ai)", "private static String getDebugLayerAppPaths(IPackageManager pm, String packageName)", "private boolean debugLayerEnabled(Bundle coreSettings, String packageName, ApplicationInfo ai)", "private void setupGpuLayers(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)", "private static Map<OpenGlDriverChoice, String> buildMap()", "private static List<String> getGlobalSettingsString(ContentResolver contentResolver, Bundle bundle, String globalSetting)", "private static int getGlobalSettingsPkgIndex(String pkgName, List<String> globalSettingsDriverPkgs)", "private static ApplicationInfo getAppInfoWithMetadata(Context context, PackageManager pm, String packageName)", "private static String getDriverForPkg(Context context, Bundle bundle, String packageName)", "private String getAnglePackageName(PackageManager pm)", "private String getAngleDebugPackage(Context context, Bundle coreSettings)", "private static boolean setupAngleWithTempRulesFile(Context context, String packageName, String paths, String devOptIn)", "private static boolean setupAngleRulesApk(String anglePkgName, ApplicationInfo angleInfo, PackageManager pm, String packageName, String paths, String devOptIn)", "private static boolean checkAngleWhitelist(Context context, Bundle bundle, String packageName)", "public boolean setupAngle(Context context, Bundle bundle, PackageManager pm, String packageName)", "private boolean shouldShowAngleInUseDialogBox(Context context)", "private boolean setupAndUseAngle(Context context, String packageName)", "public void showAngleInUseDialogBox(Context context)", "private static String chooseDriverInternal(Bundle coreSettings, ApplicationInfo ai)", "private static boolean chooseDriver(Context context, Bundle coreSettings, PackageManager pm, String packageName, ApplicationInfo ai)", "private static String chooseAbi(ApplicationInfo ai)", "private static String getSphalLibraries(Context context, String driverPackageName)", "private static native boolean isDebuggable()", "private static native void setLayerPaths(ClassLoader classLoader, String layerPaths)", "private static native void setDebugLayers(String layers)", "private static native void setDebugLayersGLES(String layers)", "private static native void setDriverPathAndSphalLibraries(String path, String sphalLibraries)", "private static native void setGpuStats(String driverPackageName, String driverVersionName, long driverVersionCode, long driverBuildTime, String appPackageName, int vulkanVersion)", "private static native void setAngleInfo(String path, String appPackage, String devOptIn, FileDescriptor rulesFd, long rulesOffset, long rulesLength)", "private static native boolean getShouldUseAngle(String packageName)", "private static native boolean setInjectLayersPrSetDumpable()" ]
}