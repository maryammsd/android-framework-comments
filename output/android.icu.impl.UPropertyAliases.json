{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UPropertyAliases.java",
  "packageName" : "android.icu.impl",
  "className" : "UPropertyAliases",
  "comment" : "\n * Wrapper for the pnames.icu binary data file.  This data file is\n * imported from icu4c.  It contains property and property value\n * aliases from the UCD files PropertyAliases.txt and\n * PropertyValueAliases.txt.  The file is built by the icu4c tool\n * genpname.  It must be an ASCII big-endian file to be\n * usable in icu4j.\n *\n * This class performs two functions.\n *\n * (1) It can import the flat binary data into usable objects.\n *\n * (2) It provides an API to access the tree of objects.\n *\n * Needless to say, this class is tightly coupled to the binary format\n * of icu4c's pnames.icu file.\n *\n * Each time a UPropertyAliases is constructed, the pnames.icu file is\n * read, parsed, and data structures assembled.  Clients should create one\n * singleton instance and cache it.\n *\n * @author Alan Liu\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "IX_VALUE_MAPS_OFFSET",
    "type" : "int",
    "comment" : " Byte offsets from the start of the data, after the generic header.",
    "links" : [ ]
  }, {
    "name" : "IX_BYTE_TRIES_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_NAME_GROUPS_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IX_RESERVED3_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "valueMaps",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bytesTries",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nameGroups",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_ACCEPTABLE",
    "type" : "IsAcceptable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_FORMAT",
    "type" : "int",
    "comment" : " \"pnam\"",
    "links" : [ ]
  }, {
    "name" : "INSTANCE",
    "type" : "UPropertyAliases",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void load(ByteBuffer bytes) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findProperty(int property)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int findPropertyValueNameGroup(int valueMapIndex, int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getName(int nameGroupsIndex, int nameIndex)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int asciiToLowercase(int c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean containsName(BytesTrie trie, CharSequence name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPropertyName(int property, int nameChoice)",
    "returnType" : "String",
    "comment" : "\n     * Returns a property name given a property enum.\n     * Multiple names may be available for each property;\n     * the nameChoice selects among them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPropertyValueName(int property, int value, int nameChoice)",
    "returnType" : "String",
    "comment" : "\n     * Returns a value name given a property enum and a value enum.\n     * Multiple names may be available for each value;\n     * the nameChoice selects among them.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getPropertyOrValueEnum(int bytesTrieOffset, CharSequence alias)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPropertyEnum(CharSequence alias)",
    "returnType" : "int",
    "comment" : "\n     * Returns a property enum given one of its property names.\n     * If the property name is not known, this method returns\n     * UProperty.UNDEFINED.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPropertyValueEnum(int property, CharSequence alias)",
    "returnType" : "int",
    "comment" : "\n     * Returns a value enum given a property enum and one of its value names.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPropertyValueEnumNoThrow(int property, CharSequence alias)",
    "returnType" : "int",
    "comment" : "\n     * Returns a value enum given a property enum and one of its value names. Does not throw.\n     * @return value enum, or UProperty.UNDEFINED if not defined for that property\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int compare(String stra, String strb)",
    "returnType" : "int",
    "comment" : "\n     * Compare two property names, returning <0, 0, or >0.  The\n     * comparison is that described as \"loose\" matching in the\n     * Property*Aliases.txt files.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void load(ByteBuffer bytes) throws IOException", "private int findProperty(int property)", "private int findPropertyValueNameGroup(int valueMapIndex, int value)", "private String getName(int nameGroupsIndex, int nameIndex)", "private static int asciiToLowercase(int c)", "private boolean containsName(BytesTrie trie, CharSequence name)", "public String getPropertyName(int property, int nameChoice)", "public String getPropertyValueName(int property, int value, int nameChoice)", "private int getPropertyOrValueEnum(int bytesTrieOffset, CharSequence alias)", "public int getPropertyEnum(CharSequence alias)", "public int getPropertyValueEnum(int property, CharSequence alias)", "public int getPropertyValueEnumNoThrow(int property, CharSequence alias)", "public static int compare(String stra, String strb)" ],
  "variableNames" : [ "IX_VALUE_MAPS_OFFSET", "IX_BYTE_TRIES_OFFSET", "IX_NAME_GROUPS_OFFSET", "IX_RESERVED3_OFFSET", "valueMaps", "bytesTries", "nameGroups", "IS_ACCEPTABLE", "DATA_FORMAT", "INSTANCE" ]
}