{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/GnssExcessPathInfo.java",
  "packageName" : "android.location",
  "className" : "GnssExcessPathInfo",
  "comment" : "\n * Contains the info of an excess path signal caused by reflection\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "HAS_EXCESS_PATH_LENGTH_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_EXCESS_PATH_LENGTH_UNC_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_REFLECTING_PLANE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_ATTENUATION_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : " A bitmask of fields present in this object (see HAS_* constants defined above) ",
    "links" : [ ]
  }, {
    "name" : "mExcessPathLengthMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcessPathLengthUncertaintyMeters",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReflectingPlane",
    "type" : "GnssReflectingPlane",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttenuationDb",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssExcessPathInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getFlags()",
    "returnType" : "int",
    "comment" : "\n     * Gets a bitmask of fields present in this object.\n     *\n     * <p>This API exists for JNI since it is easier for JNI to get one integer flag than looking up\n     * several has* methods.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasExcessPathLength()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthMeters()" ]
  }, {
    "name" : "public float getExcessPathLengthMeters()",
    "returnType" : "float",
    "comment" : "\n     * Returns the excess path length to be subtracted from pseudorange before using it in\n     * calculating location.\n     *\n     * <p>{@link #hasExcessPathLength()} must be true when calling this method. Otherwise, an\n     * {@link UnsupportedOperationException} will be thrown.\n     ",
    "links" : [ "#hasExcessPathLength()", "UnsupportedOperationException" ]
  }, {
    "name" : "public boolean hasExcessPathLengthUncertainty()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getExcessPathLengthUncertaintyMeters()} is valid. ",
    "links" : [ "#getExcessPathLengthUncertaintyMeters()" ]
  }, {
    "name" : "public float getExcessPathLengthUncertaintyMeters()",
    "returnType" : "float",
    "comment" : "\n     * Returns the error estimate (1-sigma) for the excess path length estimate.\n     *\n     * <p>{@link #hasExcessPathLengthUncertainty()} must be true when calling this method.\n     * Otherwise, an {@link UnsupportedOperationException} will be thrown.\n     ",
    "links" : [ "#hasExcessPathLengthUncertainty()", "UnsupportedOperationException" ]
  }, {
    "name" : "public boolean hasReflectingPlane()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getReflectingPlane()} is valid.\n     *\n     * <p>Returns false if the satellite signal goes through multiple reflections or if reflection\n     * plane serving is not supported.\n     ",
    "links" : [ "#getReflectingPlane()" ]
  }, {
    "name" : "public GnssReflectingPlane getReflectingPlane()",
    "returnType" : "GnssReflectingPlane",
    "comment" : "\n     * Returns the reflecting plane characteristics at which the signal has bounced.\n     *\n     * <p>{@link #hasReflectingPlane()} must be true when calling this method. Otherwise, an\n     * {@link UnsupportedOperationException} will be thrown.\n     ",
    "links" : [ "#hasReflectingPlane()", "UnsupportedOperationException" ]
  }, {
    "name" : "public boolean hasAttenuation()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getAttenuationDb()} is valid. ",
    "links" : [ "#getAttenuationDb()" ]
  }, {
    "name" : "public float getAttenuationDb()",
    "returnType" : "float",
    "comment" : "\n     * Returns the expected reduction of signal strength of this path in non-negative dB.\n     *\n     * <p>{@link #hasAttenuation()} must be true when calling this method. Otherwise, an\n     * {@link UnsupportedOperationException} will be thrown.\n     ",
    "links" : [ "#hasAttenuation()", "UnsupportedOperationException" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int parcelFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getFlags()", "public boolean hasExcessPathLength()", "public float getExcessPathLengthMeters()", "public boolean hasExcessPathLengthUncertainty()", "public float getExcessPathLengthUncertaintyMeters()", "public boolean hasReflectingPlane()", "public GnssReflectingPlane getReflectingPlane()", "public boolean hasAttenuation()", "public float getAttenuationDb()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int parcelFlags)", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()" ],
  "variableNames" : [ "HAS_EXCESS_PATH_LENGTH_MASK", "HAS_EXCESS_PATH_LENGTH_UNC_MASK", "HAS_REFLECTING_PLANE_MASK", "HAS_ATTENUATION_MASK", "mFlags", "mExcessPathLengthMeters", "mExcessPathLengthUncertaintyMeters", "mReflectingPlane", "mAttenuationDb", "CREATOR" ]
}