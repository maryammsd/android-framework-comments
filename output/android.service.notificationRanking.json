{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/notification/NotificationListenerService.java",
  "packageName" : "android.service.notification",
  "className" : "Ranking",
  "comment" : "\n     * Stores ranking related information on a currently active notification.\n     *\n     * <p>\n     * Ranking objects aren't automatically updated as notification events\n     * occur. Instead, ranking information has to be retrieved again via the\n     * current {@link RankingMap}.\n     ",
  "variables" : [ {
    "name" : "VISIBILITY_NO_OVERRIDE",
    "type" : "int",
    "comment" : " Value signifying that the user has not expressed a per-app visibility override value.\n         * @hide ",
    "links" : [ ]
  }, {
    "name" : "USER_SENTIMENT_NEGATIVE",
    "type" : "int",
    "comment" : "\n         * The user is likely to have a negative reaction to this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_SENTIMENT_NEUTRAL",
    "type" : "int",
    "comment" : "\n         * It is not known how the user will react to this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "USER_SENTIMENT_POSITIVE",
    "type" : "int",
    "comment" : "\n         * The user is likely to have a positive reaction to this notification.\n         ",
    "links" : [ ]
  }, {
    "name" : "mKey",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRank",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAmbient",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchesInterruptionFilter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibilityOverride",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuppressedVisualEffects",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportanceExplanation",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverrideGroupKey",
    "type" : "String",
    "comment" : " System specified group key.",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "NotificationChannel",
    "comment" : " Notification assistant channel override.",
    "links" : [ ]
  }, {
    "name" : "mOverridePeople",
    "type" : "ArrayList<String>",
    "comment" : " Notification assistant people override.",
    "links" : [ ]
  }, {
    "name" : "mSnoozeCriteria",
    "type" : "ArrayList<SnoozeCriterion>",
    "comment" : " Notification assistant snooze criteria.",
    "links" : [ ]
  }, {
    "name" : "mShowBadge",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserSentiment",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHidden",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastAudiblyAlertedMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoisy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmartActions",
    "type" : "ArrayList<Notification.Action>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmartReplies",
    "type" : "ArrayList<CharSequence>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanBubble",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisuallyInterruptive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsConversation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShortcutInfo",
    "type" : "ShortcutInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBubble",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARCEL_VERSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getKey()",
    "returnType" : "String",
    "comment" : "\n         * Returns the key of the notification this Ranking applies to.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getRank()",
    "returnType" : "int",
    "comment" : "\n         * Returns the rank of the notification.\n         *\n         * @return the rank of the notification, that is the 0-based index in\n         *     the list of active notifications.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAmbient()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the notification is an ambient notification, that is\n         * a notification that doesn't require the user's immediate attention.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getVisibilityOverride()",
    "returnType" : "int",
    "comment" : "\n         * Returns the user specified visibility for the package that posted\n         * this notification, or\n         * {@link NotificationListenerService.Ranking#VISIBILITY_NO_OVERRIDE} if\n         * no such preference has been expressed.\n         * @hide\n         ",
    "links" : [ "NotificationListenerService.Ranking#VISIBILITY_NO_OVERRIDE" ]
  }, {
    "name" : "public int getSuppressedVisualEffects()",
    "returnType" : "int",
    "comment" : "\n         * Returns the type(s) of visual effects that should be suppressed for this notification.\n         * See {@link NotificationManager.Policy}, e.g.\n         * {@link NotificationManager.Policy#SUPPRESSED_EFFECT_LIGHTS}.\n         ",
    "links" : [ "NotificationManager.Policy", "NotificationManager.Policy#SUPPRESSED_EFFECT_LIGHTS" ]
  }, {
    "name" : "public boolean matchesInterruptionFilter()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the notification matches the user's interruption\n         * filter.\n         *\n         * @return {@code true} if the notification is allowed by the filter, or\n         * {@code false} if it is blocked.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getImportance()",
    "returnType" : "int",
    "comment" : "\n         * Returns the importance of the notification, which dictates its\n         * modes of presentation, see: {@link NotificationManager#IMPORTANCE_DEFAULT}, etc.\n         *\n         * @return the importance of the notification\n         ",
    "links" : [ "NotificationManager#IMPORTANCE_DEFAULT" ]
  }, {
    "name" : "public CharSequence getImportanceExplanation()",
    "returnType" : "CharSequence",
    "comment" : "\n         * If the importance has been overridden by user preference, then this will be non-null,\n         * and should be displayed to the user.\n         *\n         * @return the explanation for the importance, or null if it is the natural importance\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getOverrideGroupKey()",
    "returnType" : "String",
    "comment" : "\n         * If the system has overridden the group key, then this will be non-null, and this\n         * key should be used to bundle notifications.\n         ",
    "links" : [ ]
  }, {
    "name" : "public NotificationChannel getChannel()",
    "returnType" : "NotificationChannel",
    "comment" : "\n         * Returns the notification channel this notification was posted to, which dictates\n         * notification behavior and presentation.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getUserSentiment()",
    "returnType" : "int",
    "comment" : "\n         * Returns how the system thinks the user feels about notifications from the\n         * channel provided by {@link #getChannel()}. You can use this information to expose\n         * controls to help the user block this channel's notifications, if the sentiment is\n         * {@link #USER_SENTIMENT_NEGATIVE}, or emphasize this notification if the sentiment is\n         * {@link #USER_SENTIMENT_POSITIVE}.\n         ",
    "links" : [ "#getChannel", "#USER_SENTIMENT_NEGATIVE", "#USER_SENTIMENT_POSITIVE" ]
  }, {
    "name" : "public List<String> getAdditionalPeople()",
    "returnType" : "List<String>",
    "comment" : "\n         * If the {@link NotificationAssistantService} has added people to this notification, then\n         * this will be non-null.\n         * @hide\n         * @removed\n         ",
    "links" : [ "NotificationAssistantService" ]
  }, {
    "name" : "public List<SnoozeCriterion> getSnoozeCriteria()",
    "returnType" : "List<SnoozeCriterion>",
    "comment" : "\n         * Returns snooze criteria provided by the {@link NotificationAssistantService}. If your\n         * user interface displays options for snoozing notifications these criteria should be\n         * displayed as well.\n         * @hide\n         * @removed\n         ",
    "links" : [ "NotificationAssistantService" ]
  }, {
    "name" : "public List<Notification.Action> getSmartActions()",
    "returnType" : "List<Notification.Action>",
    "comment" : "\n         * Returns a list of smart {@link Notification.Action} that can be added by the\n         * {@link NotificationAssistantService}\n         ",
    "links" : [ "Notification.Action", "NotificationAssistantService" ]
  }, {
    "name" : "public List<CharSequence> getSmartReplies()",
    "returnType" : "List<CharSequence>",
    "comment" : "\n         * Returns a list of smart replies that can be added by the\n         * {@link NotificationAssistantService}\n         ",
    "links" : [ "NotificationAssistantService" ]
  }, {
    "name" : "public boolean canShowBadge()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this notification can be displayed as a badge.\n         *\n         * @return true if the notification can be displayed as a badge, false otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSuspended()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the app that posted this notification is suspended, so this notification\n         * should be hidden.\n         *\n         * @return true if the notification should be hidden, false otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAudiblyAlertedMillis()",
    "returnType" : "long",
    "comment" : "\n         * Returns the last time this notification alerted the user via sound or vibration.\n         *\n         * @return the time of the last alerting behavior, in milliseconds.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean canBubble()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the user has allowed bubbles globally, at the app level, and at the\n         * channel level for this notification.\n         *\n         * <p>This does not take into account the current importance of the notification, the\n         * current DND state, or whether the posting app is foreground.</p>\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean visuallyInterruptive()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNoisy()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isConversation()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this notification is a conversation notification.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBubble()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether this notification is actively a bubble.\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public ShortcutInfo getShortcutInfo()",
    "returnType" : "ShortcutInfo",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void populate(String key, int rank, boolean matchesInterruptionFilter, int visibilityOverride, int suppressedVisualEffects, int importance, CharSequence explanation, String overrideGroupKey, NotificationChannel channel, ArrayList<String> overridePeople, ArrayList<SnoozeCriterion> snoozeCriteria, boolean showBadge, int userSentiment, boolean hidden, long lastAudiblyAlertedMs, boolean noisy, ArrayList<Notification.Action> smartActions, ArrayList<CharSequence> smartReplies, boolean canBubble, boolean visuallyInterruptive, boolean isConversation, ShortcutInfo shortcutInfo, boolean isBubble)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public void populate(Ranking other)",
    "returnType" : "void",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String importanceToString(int importance)",
    "returnType" : "String",
    "comment" : "\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "VISIBILITY_NO_OVERRIDE", "USER_SENTIMENT_NEGATIVE", "USER_SENTIMENT_NEUTRAL", "USER_SENTIMENT_POSITIVE", "mKey", "mRank", "mIsAmbient", "mMatchesInterruptionFilter", "mVisibilityOverride", "mSuppressedVisualEffects", "mImportance", "mImportanceExplanation", "mOverrideGroupKey", "mChannel", "mOverridePeople", "mSnoozeCriteria", "mShowBadge", "mUserSentiment", "mHidden", "mLastAudiblyAlertedMs", "mNoisy", "mSmartActions", "mSmartReplies", "mCanBubble", "mVisuallyInterruptive", "mIsConversation", "mShortcutInfo", "mIsBubble", "PARCEL_VERSION" ],
  "methodNames" : [ "public void writeToParcel(Parcel out, int flags)", "public String getKey()", "public int getRank()", "public boolean isAmbient()", "public int getVisibilityOverride()", "public int getSuppressedVisualEffects()", "public boolean matchesInterruptionFilter()", "public int getImportance()", "public CharSequence getImportanceExplanation()", "public String getOverrideGroupKey()", "public NotificationChannel getChannel()", "public int getUserSentiment()", "public List<String> getAdditionalPeople()", "public List<SnoozeCriterion> getSnoozeCriteria()", "public List<Notification.Action> getSmartActions()", "public List<CharSequence> getSmartReplies()", "public boolean canShowBadge()", "public boolean isSuspended()", "public long getLastAudiblyAlertedMillis()", "public boolean canBubble()", "public boolean visuallyInterruptive()", "public boolean isNoisy()", "public boolean isConversation()", "public boolean isBubble()", "public ShortcutInfo getShortcutInfo()", "public void populate(String key, int rank, boolean matchesInterruptionFilter, int visibilityOverride, int suppressedVisualEffects, int importance, CharSequence explanation, String overrideGroupKey, NotificationChannel channel, ArrayList<String> overridePeople, ArrayList<SnoozeCriterion> snoozeCriteria, boolean showBadge, int userSentiment, boolean hidden, long lastAudiblyAlertedMs, boolean noisy, ArrayList<Notification.Action> smartActions, ArrayList<CharSequence> smartReplies, boolean canBubble, boolean visuallyInterruptive, boolean isConversation, ShortcutInfo shortcutInfo, boolean isBubble)", "public void populate(Ranking other)", "public static String importanceToString(int importance)", "public boolean equals(Object o)" ]
}