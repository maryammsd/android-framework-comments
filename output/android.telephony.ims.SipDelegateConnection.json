{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/ims/SipDelegateConnection.java",
  "packageName" : "android.telephony.ims",
  "className" : "SipDelegateConnection",
  "comment" : "\n * Represents a connection to the remote {@link SipDelegate} that is managed by the\n * {@link ImsService} implementing IMS for the subscription that is associated with it.\n * <p>\n * The remote delegate will handle messages sent by this {@link SipDelegateConnection}, notifying\n * the associated {@link DelegateMessageCallback} when the message was either sent successfully or\n * failed to be sent.\n * <p>\n * It is also the responsibility of this {@link SipDelegateConnection} to acknowledge when incoming\n * SIP messages have been received successfully via\n * {@link DelegateMessageCallback#onMessageReceived(SipMessage)} or when there was an error\n * receiving the message using {@link #notifyMessageReceived(String)} and\n * {@link #notifyMessageReceiveError(String, int)}.\n *\n * @see SipDelegateManager#createSipDelegate\n * @hide\n ",
  "links" : [ "#notifyMessageReceiveError(String", "android.telephony.ims.DelegateMessageCallback", "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.SipDelegateConnection", "android.telephony.ims.DelegateMessageCallback#onMessageReceived(SipMessage)", "android.telephony.ims.ImsService", "#notifyMessageReceived(String)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void sendMessage(@NonNull SipMessage sipMessage, long configVersion)",
    "returnType" : "void",
    "comment" : "\n     * Send a SIP message to the SIP delegate to be sent over the carrierâ€™s network. The\n     * {@link SipMessage} will either be acknowledged with\n     * {@link DelegateMessageCallback#onMessageSent(String)} upon successful sending of this message\n     * or {@link DelegateMessageCallback#onMessageSendFailure(String, int)} if there was an error\n     * sending the message.\n     * @param sipMessage The SipMessage to be sent.\n     * @param configVersion The SipDelegateImsConfiguration version used to construct the\n     *                      SipMessage. See {@link SipDelegateConfiguration#getVersion} for more\n     ",
    "links" : [ "android.telephony.ims.SipMessage", "android.telephony.ims.SipDelegateConfiguration#getVersion", "android.telephony.ims.DelegateMessageCallback#onMessageSent(String)", "android.telephony.ims.DelegateMessageCallback#onMessageSendFailure(String" ]
  }, {
    "name" : " void notifyMessageReceived(@NonNull String viaTransactionId)",
    "returnType" : "void",
    "comment" : "\n     * Notify the {@link SipDelegate} that a SIP message received from\n     * {@link DelegateMessageCallback#onMessageReceived(SipMessage)} has been received successfully\n     * and is being processed.\n     * @param viaTransactionId Per RFC3261 Sec 8.1.1.7 the transaction ID associated with the Via\n     *         branch parameter.\n     ",
    "links" : [ "android.telephony.ims.stub.SipDelegate", "android.telephony.ims.DelegateMessageCallback#onMessageReceived(SipMessage)" ]
  }, {
    "name" : " void cleanupSession(@NonNull String callId)",
    "returnType" : "void",
    "comment" : "\n     * The SIP session associated with the provided Call-ID is being closed and routing resources\n     * associated with the session are free to be released. Each SIP session may contain multiple\n     * dialogs due to SIP INVITE forking, so this method must be called after all SIP dialogs\n     * associated with the session has closed.\n     * <p>\n     * Calling this method is also mandatory for situations where the framework IMS stack is waiting\n     * for pending SIP sessions to be closed before it can perform a handover or apply a\n     * provisioning change. See {@link DelegateRegistrationState} for more information about\n     * the scenarios where this can occur.\n     * <p>\n     * This method will need to be called for each SIP session managed by this application when it\n     * is closed.\n     * @param callId The call-ID header value associated with the ongoing SIP Dialog that is\n     *         closing.\n     ",
    "links" : [ "android.telephony.ims.DelegateRegistrationState" ]
  }, {
    "name" : " void notifyMessageReceiveError(@NonNull String viaTransactionId, @SipDelegateManager.MessageFailureReason int reason)",
    "returnType" : "void",
    "comment" : "\n     * Notify the SIP delegate that the SIP message has been received from\n     * {@link DelegateMessageCallback#onMessageReceived(SipMessage)}, however there was an error\n     * processing it.\n     * @param viaTransactionId Per RFC3261 Sec 8.1.1.7 the transaction ID associated with the Via\n     *         branch parameter.\n     * @param reason The reason why the error occurred.\n     ",
    "links" : [ "android.telephony.ims.DelegateMessageCallback#onMessageReceived(SipMessage)" ]
  } ],
  "methodNames" : [ " void sendMessage(@NonNull SipMessage sipMessage, long configVersion)", " void notifyMessageReceived(@NonNull String viaTransactionId)", " void cleanupSession(@NonNull String callId)", " void notifyMessageReceiveError(@NonNull String viaTransactionId, @SipDelegateManager.MessageFailureReason int reason)" ],
  "variableNames" : [ ]
}