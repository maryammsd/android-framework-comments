{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/ScaleDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ScaleDrawable",
  "comment" : "\n * A Drawable that changes the size of another Drawable based on its current\n * level value. You can control how much the child Drawable changes in width\n * and height based on the level, as well as a gravity to control where it is\n * placed in its overall container. Most often used to implement things like\n * progress bars.\n * <p>\n * The default level may be specified from XML using the\n * {@link android.R.styleable#ScaleDrawable_level android:level} property. When\n * this property is not specified, the default level is 0, which corresponds to\n * zero height and/or width depending on the values specified for\n * {@code android.R.styleable#ScaleDrawable_scaleWidth scaleWidth} and\n * {@code android.R.styleable#ScaleDrawable_scaleHeight scaleHeight}. At run\n * time, the level may be set via {@link #setLevel(int)}.\n * <p>\n * A scale drawable may be defined in an XML file with the {@code <scale>}\n * element. For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/resources/drawable-resource.html\">Drawable\n * Resources</a>.\n *\n * @attr ref android.R.styleable#ScaleDrawable_scaleWidth\n * @attr ref android.R.styleable#ScaleDrawable_scaleHeight\n * @attr ref android.R.styleable#ScaleDrawable_scaleGravity\n * @attr ref android.R.styleable#ScaleDrawable_drawable\n * @attr ref android.R.styleable#ScaleDrawable_level\n ",
  "links" : [ "android.R.styleable#ScaleDrawable_level", "#setLevel(int)" ],
  "variables" : [ {
    "name" : "MAX_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTmpRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "ScaleState",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(@NonNull Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(@NonNull TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static float getPercent(TypedArray a, int index, float defaultValue)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DrawableWrapperState mutateConstantState()",
    "returnType" : "DrawableWrapperState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void inflate(@NonNull Resources r, @NonNull XmlPullParser parser, @NonNull AttributeSet attrs, @Nullable Theme theme) throws XmlPullParserException, IOException", "public void applyTheme(@NonNull Theme t)", "private void verifyRequiredAttributes(@NonNull TypedArray a) throws XmlPullParserException", "private void updateStateFromTypedArray(@NonNull TypedArray a)", "private static float getPercent(TypedArray a, int index, float defaultValue)", "public void draw(Canvas canvas)", "public int getOpacity()", "protected boolean onLevelChange(int level)", "protected void onBoundsChange(Rect bounds)", " DrawableWrapperState mutateConstantState()", "private void updateLocalState()" ],
  "variableNames" : [ "MAX_LEVEL", "mTmpRect", "mState" ]
}