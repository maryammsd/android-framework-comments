{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/SensorDirectChannel.java",
  "packageName" : "android.hardware",
  "className" : "SensorDirectChannel",
  "comment" : "\n * Class representing a sensor direct channel. Use\n * {@link SensorManager#createDirectChannel(android.os.MemoryFile)} or\n * {@link SensorManager#createDirectChannel(android.hardware.HardwareBuffer)}\n * to obtain an object. The channel object can be then configured\n * (see {@link #configure(Sensor, int)})\n * to start delivery of sensor events into shared memory buffer.\n ",
  "variables" : [ {
    "name" : "TYPE_MEMORY_FILE",
    "type" : "int",
    "comment" : "\n     * Shared memory type ashmem, wrapped in MemoryFile object.\n     *\n     * @see SensorManager#createDirectChannel(MemoryFile)\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HARDWARE_BUFFER",
    "type" : "int",
    "comment" : "\n     * Shared memory type wrapped by HardwareBuffer object.\n     *\n     * @see SensorManager#createDirectChannel(HardwareBuffer)\n     ",
    "links" : [ ]
  }, {
    "name" : "RATE_STOP",
    "type" : "int",
    "comment" : "\n     * Sensor stopped (no event output).\n     *\n     * @see #configure(Sensor, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "RATE_NORMAL",
    "type" : "int",
    "comment" : "50Hz",
    "links" : [ ]
  }, {
    "name" : "RATE_FAST",
    "type" : "int",
    "comment" : " ~200Hz",
    "links" : [ ]
  }, {
    "name" : "RATE_VERY_FAST",
    "type" : "int",
    "comment" : " ~800Hz",
    "links" : [ ]
  }, {
    "name" : "mClosed",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mManager",
    "type" : "SensorManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeHandle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if a channel is still valid. A channel is invalidated after {@link #close()} is\n     * called.\n     *\n     * @return <code>true</code> if channel is valid.\n     ",
    "links" : [ "#close" ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close sensor direct channel.\n     *\n     * Stop all active sensor in the channel and free sensor system resource related to channel.\n     * Shared memory used for creating the direct channel need to be closed or freed separately.\n     *\n     * @see SensorManager#createDirectChannel(MemoryFile)\n     * @see SensorManager#createDirectChannel(HardwareBuffer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int configure(Sensor sensor, @RateLevel int rateLevel)",
    "returnType" : "int",
    "comment" : "\n     * Configure sensor rate or stop sensor report.\n     *\n     * To start event report of a sensor, or change rate of existing report, call this function with\n     * rateLevel other than {@link android.hardware.SensorDirectChannel#RATE_STOP}. Sensor events\n     * will be added into a queue formed by the shared memory used in creation of direction channel.\n     * Each element of the queue has size of 104 bytes and represents a sensor event. Data\n     * structure of an element (all fields in little-endian):\n     *\n     * <pre>\n     *   offset   type                    name\n     * ------------------------------------------------------------------------\n     *   0x0000   int32_t                 size (always 104)\n     *   0x0004   int32_t                 sensor report token\n     *   0x0008   int32_t                 type (see SensorType)\n     *   0x000C   uint32_t                atomic counter\n     *   0x0010   int64_t                 timestamp (see Event)\n     *   0x0018   float[16]/int64_t[8]    data (data type depends on sensor type)\n     *   0x0058   int32_t[4]              reserved (set to zero)\n     * </pre>\n     *\n     * There are no head or tail pointers. The sequence and frontier of new sensor events is\n     * determined by the atomic counter, which counts from 1 after creation of direct channel and\n     * increments 1 for each new event. Atomic counter will wrap back to 1 after it reaches\n     * UINT32_MAX, skipping value 0 to avoid confusion with uninitialized memory. The writer in\n     * sensor system will wrap around from the start of shared memory region when it reaches the\n     * end. If size of memory region is not a multiple of size of element (104 bytes), the residual\n     * is not used at the end.  Function returns a positive sensor report token on success. This\n     * token can be used to differentiate sensor events from multiple sensor of the same type. For\n     * example, if there are two accelerometers in the system A and B, it is guaranteed different\n     * report tokens will be returned when starting sensor A and B.\n     *\n     * To stop a sensor, call this function with rateLevel equal {@link\n     * android.hardware.SensorDirectChannel#RATE_STOP}. If the sensor parameter is left to be null,\n     * this will stop all active sensor report associated with the direct channel specified.\n     * Function return 1 on success or 0 on failure.\n     *\n     * @param sensor A {@link android.hardware.Sensor} object to denote sensor to be operated.\n     * @param rateLevel rate level defined in {@link android.hardware.SensorDirectChannel}.\n     * @return * starting report or changing rate: positive sensor report token on success,\n     *                                             0 on failure;\n     *         * stopping report: 1 on success, 0 on failure.\n     * @throws NullPointerException when channel is null.\n     ",
    "links" : [ "android.hardware.SensorDirectChannel#RATE_STOP", "android.hardware.Sensor", "android.hardware.SensorDirectChannel" ]
  }, {
    "name" : " int getNativeHandle()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static long[] encodeData(MemoryFile ashmem)",
    "returnType" : "long[]",
    "comment" : "\n     * This function encode handle information in {@link android.os.MemoryFile} into a long array to\n     * be passed down to native methods.\n     *\n     * @hide ",
    "links" : [ "android.os.MemoryFile" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_MEMORY_FILE", "TYPE_HARDWARE_BUFFER", "RATE_STOP", "RATE_NORMAL", "RATE_FAST", "RATE_VERY_FAST", "mClosed", "mCloseGuard", "mManager", "mNativeHandle", "mSize", "mType" ],
  "methodNames" : [ "public boolean isOpen()", "public boolean isValid()", "public void close()", "public int configure(Sensor sensor, @RateLevel int rateLevel)", " int getNativeHandle()", " static long[] encodeData(MemoryFile ashmem)", "protected void finalize() throws Throwable" ]
}