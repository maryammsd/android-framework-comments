{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/WindowConfiguration.java",
  "packageName" : "android.app",
  "className" : "WindowConfiguration",
  "comment" : "\n * Class that contains windowing configuration/state for other objects that contain windows directly\n * or indirectly. E.g. Activities, Task, Displays, ...\n * The test class is {@link com.android.server.wm.WindowConfigurationTests} which must be kept\n * up-to-date and ran anytime changes are made to this class.\n * @hide\n ",
  "links" : [ "com.android.server.wm.WindowConfigurationTests" ],
  "variables" : [ {
    "name" : "mBounds",
    "type" : "Rect",
    "comment" : "\n     * bounds that can differ from app bounds, which may include things such as insets.\n     *\n     * TODO: Investigate combining with {@link #mAppBounds}. Can the latter be a product of the\n     * former?\n     ",
    "links" : [ "#mAppBounds" ]
  }, {
    "name" : "mAppBounds",
    "type" : "Rect",
    "comment" : "\n     * {@link android.graphics.Rect} defining app bounds. The dimensions override usages of\n     * {@link DisplayInfo#appHeight} and {@link DisplayInfo#appWidth} and mirrors these values at\n     * the display level. Lower levels can override these values to provide custom bounds to enforce\n     * features such as a max aspect ratio.\n     ",
    "links" : [ "android.view.DisplayInfo#appHeight", "android.graphics.Rect", "android.view.DisplayInfo#appWidth" ]
  }, {
    "name" : "mMaxBounds",
    "type" : "Rect",
    "comment" : "\n     * The maximum {@link Rect} bounds that an app can expect. It is used to report value of\n     * {@link WindowManager#getMaximumWindowMetrics()}.\n     ",
    "links" : [ "android.graphics.Rect", "android.view.WindowManager#getMaximumWindowMetrics()" ]
  }, {
    "name" : "mDisplayRotation",
    "type" : "int",
    "comment" : "\n     * The rotation of this window's apparent display. This can differ from mRotation in some\n     * situations (like letterbox).\n     ",
    "links" : [ ]
  }, {
    "name" : "mRotation",
    "type" : "int",
    "comment" : "\n     * The current rotation of this window container relative to the default\n     * orientation of the display it is on (regardless of how deep in the hierarchy\n     * it is). It is used by the configuration hierarchy to apply rotation-dependent\n     * policy during bounds calculation.\n     ",
    "links" : [ ]
  }, {
    "name" : "ROTATION_UNDEFINED",
    "type" : "int",
    "comment" : " Rotation is not defined, use the parent containers rotation. ",
    "links" : [ ]
  }, {
    "name" : "mWindowingMode",
    "type" : "int",
    "comment" : " The current windowing mode of the configuration. ",
    "links" : [ ]
  }, {
    "name" : "WINDOWING_MODE_UNDEFINED",
    "type" : "int",
    "comment" : " Windowing mode is currently not defined. ",
    "links" : [ ]
  }, {
    "name" : "WINDOWING_MODE_FULLSCREEN",
    "type" : "int",
    "comment" : " Occupies the full area of the screen or the parent container. ",
    "links" : [ ]
  }, {
    "name" : "WINDOWING_MODE_PINNED",
    "type" : "int",
    "comment" : " Always on-top (always visible). of other siblings in its parent container. ",
    "links" : [ ]
  }, {
    "name" : "WINDOWING_MODE_FREEFORM",
    "type" : "int",
    "comment" : " TODO: Remove once freeform is migrated to wm-shell.",
    "links" : [ ]
  }, {
    "name" : "WINDOWING_MODE_MULTI_WINDOW",
    "type" : "int",
    "comment" : " Generic multi-window with no presentation attribution from the window manager. ",
    "links" : [ ]
  }, {
    "name" : "mActivityType",
    "type" : "int",
    "comment" : " The current activity type of the configuration. ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_UNDEFINED",
    "type" : "int",
    "comment" : " Activity type is currently not defined. ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_STANDARD",
    "type" : "int",
    "comment" : " Standard activity type. Nothing special about the activity... ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_HOME",
    "type" : "int",
    "comment" : " Home/Launcher activity type. ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_RECENTS",
    "type" : "int",
    "comment" : " Recents/Overview activity type. There is only one activity with this type in the system. ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_ASSISTANT",
    "type" : "int",
    "comment" : " Assistant activity type. ",
    "links" : [ ]
  }, {
    "name" : "ACTIVITY_TYPE_DREAM",
    "type" : "int",
    "comment" : " Dream activity type. ",
    "links" : [ ]
  }, {
    "name" : "mAlwaysOnTop",
    "type" : "int",
    "comment" : " The current always on top status of the configuration. ",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ON_TOP_UNDEFINED",
    "type" : "int",
    "comment" : " Always on top is currently not defined. ",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ON_TOP_ON",
    "type" : "int",
    "comment" : " Always on top is currently on for this configuration. ",
    "links" : [ ]
  }, {
    "name" : "ALWAYS_ON_TOP_OFF",
    "type" : "int",
    "comment" : " Always on top is currently off for this configuration. ",
    "links" : [ ]
  }, {
    "name" : "WINDOW_CONFIG_BOUNDS",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mBounds} changed.\n     * @hide ",
    "links" : [ "#mBounds" ]
  }, {
    "name" : "WINDOW_CONFIG_APP_BOUNDS",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mAppBounds} changed.\n     * @hide ",
    "links" : [ "#mAppBounds" ]
  }, {
    "name" : "WINDOW_CONFIG_MAX_BOUNDS",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mMaxBounds} changed.\n     * @hide ",
    "links" : [ "#mMaxBounds" ]
  }, {
    "name" : "WINDOW_CONFIG_WINDOWING_MODE",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mWindowingMode} changed.\n     * @hide ",
    "links" : [ "#mWindowingMode" ]
  }, {
    "name" : "WINDOW_CONFIG_ACTIVITY_TYPE",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mActivityType} changed.\n     * @hide ",
    "links" : [ "#mActivityType" ]
  }, {
    "name" : "WINDOW_CONFIG_ALWAYS_ON_TOP",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mAlwaysOnTop} changed.\n     * @hide ",
    "links" : [ "#mAlwaysOnTop" ]
  }, {
    "name" : "WINDOW_CONFIG_ROTATION",
    "type" : "int",
    "comment" : " Bit that indicates that the {@link #mRotation} changed.\n     * @hide ",
    "links" : [ "#mRotation" ]
  }, {
    "name" : "WINDOW_CONFIG_DISPLAY_ROTATION",
    "type" : "int",
    "comment" : " Bit that indicates that the apparent-display changed.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<WindowConfiguration>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(@NonNull Parcel source)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBounds(@Nullable Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Sets the bounds to the provided {@link Rect}.\n     * Passing {@code null} sets the bounds {@link Rect} to empty.\n     *\n     * @param rect the new bounds value.\n     ",
    "links" : [ "android.graphics.Rect" ]
  }, {
    "name" : "public void setAppBounds(@Nullable Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Sets the app bounds to the provided {@link Rect}.\n     * Passing {@code null} sets the bounds to {@code null}.\n     *\n     * @param rect the new app bounds value.\n     * @see #getAppBounds()\n     ",
    "links" : [ "android.graphics.Rect" ]
  }, {
    "name" : "public void setMaxBounds(@Nullable Rect rect)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum bounds to the provided {@link Rect}.\n     * Passing {@code null} sets the bounds {@link Rect} to empty.\n     *\n     * @param rect the new max bounds value.\n     * @see #getMaxBounds()\n     ",
    "links" : [ "android.graphics.Rect" ]
  }, {
    "name" : "public void setMaxBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * @see #setMaxBounds(Rect)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayRotation(@Surface.Rotation int rotation)",
    "returnType" : "void",
    "comment" : "\n     * Sets the display rotation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlwaysOnTop(boolean alwaysOnTop)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this window should be always on top.\n     * @param alwaysOnTop {@code true} to set window always on top, otherwise {@code false}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unsetAlwaysOnTop()",
    "returnType" : "void",
    "comment" : "\n     * Unsets always-on-top to undefined.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setAlwaysOnTop(@AlwaysOnTop int alwaysOnTop)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAppBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * @see #setAppBounds(Rect)\n     * @see #getAppBounds()\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getAppBounds()",
    "returnType" : "Rect",
    "comment" : " @see #setAppBounds(Rect) ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBounds()",
    "returnType" : "Rect",
    "comment" : " @see #setBounds(Rect) ",
    "links" : [ ]
  }, {
    "name" : "public Rect getMaxBounds()",
    "returnType" : "Rect",
    "comment" : " @see #setMaxBounds(Rect) ",
    "links" : [ ]
  }, {
    "name" : "public int getDisplayRotation()",
    "returnType" : "int",
    "comment" : "\n     * Gets the display rotation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRotation()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRotation(int rotation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWindowingMode(@WindowingMode int windowingMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWindowingMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setActivityType(@ActivityType int activityType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getActivityType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTo(WindowConfiguration other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unset()",
    "returnType" : "void",
    "comment" : " Set this object to completely undefined.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setToDefaults()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static void scaleBounds(float scale, Rect bounds)",
    "returnType" : "void",
    "comment" : "\n     * Size based scaling. This avoid inconsistent length when rounding 4 sides.\n     * E.g. left=12, right=18, scale=0.8. The scaled width can be:\n     *   int((right - left) * scale + 0.5) = int(4.8 + 0.5) = 5\n     * But with rounding both left and right, the width will be inconsistent:\n     *   int(right * scale + 0.5) - int(left * scale + 0.5) = int(14.9) - int(10.1) = 4\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int updateFrom(@NonNull WindowConfiguration delta)",
    "returnType" : "int",
    "comment" : "\n     * Copies the fields from delta into this Configuration object, keeping\n     * track of which ones have changed. Any undefined fields in {@code delta}\n     * are ignored and not copied in to the current Configuration.\n     *\n     * @return a bit mask of the changed fields, as per {@link #diff}\n     * @hide\n     ",
    "links" : [ "#diff" ]
  }, {
    "name" : "public void setTo(@NonNull WindowConfiguration delta, @WindowConfig int mask)",
    "returnType" : "void",
    "comment" : "\n     * Copies the fields specified by mask from delta into this Configuration object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long diff(WindowConfiguration other, boolean compareUndefined)",
    "returnType" : "long",
    "comment" : "\n     * Return a bit mask of the differences between this Configuration object and the given one.\n     * Does not change the values of either. Any undefined fields in <var>other</var> are ignored.\n     * @param other The configuration to diff against.\n     * @param compareUndefined If undefined values should be compared.\n     * @return Returns a bit mask indicating which configuration\n     * values has changed, containing any combination of {@link WindowConfig} flags.\n     *\n     * @see Configuration#diff(Configuration)\n     * @hide\n     ",
    "links" : [ "WindowConfig" ]
  }, {
    "name" : "public int compareTo(WindowConfiguration that)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object that)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.app.WindowConfigurationProto}\n     *\n     * @param protoOutputStream Stream to write the WindowConfiguration object to.\n     * @param fieldId           Field Id of the WindowConfiguration as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.app.WindowConfigurationProto" ]
  }, {
    "name" : "public void readFromProto(ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException",
    "returnType" : "void",
    "comment" : "\n     * Read from a protocol buffer input stream.\n     * Protocol buffer message definition at {@link android.app.WindowConfigurationProto}\n     *\n     * @param proto   Stream to read the WindowConfiguration object from.\n     * @param fieldId Field Id of the WindowConfiguration as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.app.WindowConfigurationProto" ]
  }, {
    "name" : "public boolean hasWindowShadow()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the activities associated with this window configuration display a shadow\n     * around their border.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canResizeTask()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the tasks associated with this window configuration can be resized\n     * independently of their parent container.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean persistTaskBounds()",
    "returnType" : "boolean",
    "comment" : " Returns true if the task bounds should persist across power cycles.\n     * @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean tasksAreFloating()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the tasks associated with this window configuration are floating.\n     * Floating tasks are laid out differently as they are allowed to extend past the display bounds\n     * without overscan insets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFloating(@WindowingMode int windowingMode)",
    "returnType" : "boolean",
    "comment" : " Returns true if the windowingMode represents a floating window. ",
    "links" : [ ]
  }, {
    "name" : "public static boolean inMultiWindowMode(int windowingMode)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the windowingMode represents a window in multi-window mode.\n     * I.e. sharing the screen with another activity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canReceiveKeys()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the windows associated with this window configuration can receive input keys.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAlwaysOnTop()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the container associated with this window configuration is always-on-top of\n     * its siblings.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean useWindowFrameForBackdrop()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the backdrop on the client side should match the frame of the window.\n     * Returns false, if the backdrop should be fullscreen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMovementAnimations()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if windows in this container should be given move animations by default.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportSplitScreenWindowingMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this container can be put in {@link #WINDOWING_MODE_MULTI_WINDOW}\n     * windowing mode based on its current state.\n     * @hide\n     ",
    "links" : [ "#WINDOWING_MODE_MULTI_WINDOW" ]
  }, {
    "name" : "public static boolean supportSplitScreenWindowingMode(int activityType)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areConfigurationsEqualForDisplay(@NonNull Configuration newConfig, @NonNull Configuration oldConfig)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the two {@link Configuration}s are equal to each other for the fields that are read\n     * by {@link Display}.\n     * @hide\n     ",
    "links" : [ "android.content.res.Configuration", "android.view.Display" ]
  }, {
    "name" : "public static String windowingModeToString(@WindowingMode int windowingMode)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String activityTypeToString(@ActivityType int applicationType)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String alwaysOnTopToString(@AlwaysOnTop int alwaysOnTop)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public void readFromParcel(@NonNull Parcel source)", "public int describeContents()", "public void setBounds(@Nullable Rect rect)", "public void setAppBounds(@Nullable Rect rect)", "public void setMaxBounds(@Nullable Rect rect)", "public void setMaxBounds(int left, int top, int right, int bottom)", "public void setDisplayRotation(@Surface.Rotation int rotation)", "public void setAlwaysOnTop(boolean alwaysOnTop)", "public void unsetAlwaysOnTop()", "private void setAlwaysOnTop(@AlwaysOnTop int alwaysOnTop)", "public void setAppBounds(int left, int top, int right, int bottom)", "public Rect getAppBounds()", "public Rect getBounds()", "public Rect getMaxBounds()", "public int getDisplayRotation()", "public int getRotation()", "public void setRotation(int rotation)", "public void setWindowingMode(@WindowingMode int windowingMode)", "public int getWindowingMode()", "public void setActivityType(@ActivityType int activityType)", "public int getActivityType()", "public void setTo(WindowConfiguration other)", "public void unset()", "public void setToDefaults()", "public void scale(float scale)", "private static void scaleBounds(float scale, Rect bounds)", "public int updateFrom(@NonNull WindowConfiguration delta)", "public void setTo(@NonNull WindowConfiguration delta, @WindowConfig int mask)", "public long diff(WindowConfiguration other, boolean compareUndefined)", "public int compareTo(WindowConfiguration that)", "public boolean equals(@Nullable Object that)", "public int hashCode()", "public String toString()", "public void dumpDebug(ProtoOutputStream protoOutputStream, long fieldId)", "public void readFromProto(ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException", "public boolean hasWindowShadow()", "public boolean canResizeTask()", "public boolean persistTaskBounds()", "public boolean tasksAreFloating()", "public static boolean isFloating(@WindowingMode int windowingMode)", "public static boolean inMultiWindowMode(int windowingMode)", "public boolean canReceiveKeys()", "public boolean isAlwaysOnTop()", "public boolean useWindowFrameForBackdrop()", "public boolean hasMovementAnimations()", "public boolean supportSplitScreenWindowingMode()", "public static boolean supportSplitScreenWindowingMode(int activityType)", "public static boolean areConfigurationsEqualForDisplay(@NonNull Configuration newConfig, @NonNull Configuration oldConfig)", "public static String windowingModeToString(@WindowingMode int windowingMode)", "public static String activityTypeToString(@ActivityType int applicationType)", "public static String alwaysOnTopToString(@AlwaysOnTop int alwaysOnTop)" ],
  "variableNames" : [ "mBounds", "mAppBounds", "mMaxBounds", "mDisplayRotation", "mRotation", "ROTATION_UNDEFINED", "mWindowingMode", "WINDOWING_MODE_UNDEFINED", "WINDOWING_MODE_FULLSCREEN", "WINDOWING_MODE_PINNED", "WINDOWING_MODE_FREEFORM", "WINDOWING_MODE_MULTI_WINDOW", "mActivityType", "ACTIVITY_TYPE_UNDEFINED", "ACTIVITY_TYPE_STANDARD", "ACTIVITY_TYPE_HOME", "ACTIVITY_TYPE_RECENTS", "ACTIVITY_TYPE_ASSISTANT", "ACTIVITY_TYPE_DREAM", "mAlwaysOnTop", "ALWAYS_ON_TOP_UNDEFINED", "ALWAYS_ON_TOP_ON", "ALWAYS_ON_TOP_OFF", "WINDOW_CONFIG_BOUNDS", "WINDOW_CONFIG_APP_BOUNDS", "WINDOW_CONFIG_MAX_BOUNDS", "WINDOW_CONFIG_WINDOWING_MODE", "WINDOW_CONFIG_ACTIVITY_TYPE", "WINDOW_CONFIG_ALWAYS_ON_TOP", "WINDOW_CONFIG_ROTATION", "WINDOW_CONFIG_DISPLAY_ROTATION", "CREATOR" ]
}