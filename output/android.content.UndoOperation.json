{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/UndoOperation.java",
  "packageName" : "android.content",
  "className" : "UndoOperation",
  "comment" : "\n * A single undoable operation.  You must subclass this to implement the state\n * and behavior for your operation.  Instances of this class are placed and\n * managed in an {@link UndoManager}.\n *\n * @hide\n ",
  "links" : [ "android.content.UndoManager" ],
  "variables" : [ {
    "name" : "mOwner",
    "type" : "UndoOwner",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public UndoOwner getOwner()",
    "returnType" : "UndoOwner",
    "comment" : "\n     * Owning object as given to {@link #UndoOperation(UndoOwner)}.\n     ",
    "links" : [ "#UndoOperation(UndoOwner)" ]
  }, {
    "name" : "public DATA getOwnerData()",
    "returnType" : "DATA",
    "comment" : "\n     * Synonym for {@link #getOwner()}.{@link android.content.UndoOwner#getData()}.\n     ",
    "links" : [ "#getOwner()", "android.content.UndoOwner#getData()" ]
  }, {
    "name" : "public boolean matchOwner(UndoOwner owner)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this undo operation is a member of the given owner.\n     * The default implementation is <code>owner == getOwner()</code>.  You\n     * can override this to provide more sophisticated dependencies between\n     * owners.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasData()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this operation actually contains modification data.  The\n     * default implementation always returns true.  If you return false, the\n     * operation will be dropped when the final undo state is being built.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean allowMerge()",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if this operation can be merged with a later operation.\n     * The default implementation always returns true.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void commit()",
    "returnType" : "void",
    "comment" : "\n     * Called when this undo state is being committed to the undo stack.\n     * The implementation should perform the initial edits and save any state that\n     * may be needed to undo them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void undo()",
    "returnType" : "void",
    "comment" : "\n     * Called when this undo state is being popped off the undo stack (in to\n     * the temporary redo stack).  The implementation should remove the original\n     * edits and thus restore the target object to its prior value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void redo()",
    "returnType" : "void",
    "comment" : "\n     * Called when this undo state is being pushed back from the transient\n     * redo stack to the main undo stack.  The implementation should re-apply\n     * the edits that were previously removed by {@link #undo}.\n     ",
    "links" : [ "#undo" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public UndoOwner getOwner()", "public DATA getOwnerData()", "public boolean matchOwner(UndoOwner owner)", "public boolean hasData()", "public boolean allowMerge()", "public abstract void commit()", "public abstract void undo()", "public abstract void redo()", "public int describeContents()" ],
  "variableNames" : [ "mOwner" ]
}