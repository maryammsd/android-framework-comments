{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/Text.java",
  "packageName" : "org.w3c.dom",
  "className" : "Text",
  "comment" : "\n * The <code>Text</code> interface inherits from <code>CharacterData</code>\n * and represents the textual content (termed <a href='http://www.w3.org/TR/2004/REC-xml-20040204#syntax'>character data</a> in XML) of an <code>Element</code> or <code>Attr</code>. If there is no\n * markup inside an element's content, the text is contained in a single\n * object implementing the <code>Text</code> interface that is the only\n * child of the element. If there is markup, it is parsed into the\n * information items (elements, comments, etc.) and <code>Text</code> nodes\n * that form the list of children of the element.\n * <p>When a document is first made available via the DOM, there is only one\n * <code>Text</code> node for each block of text. Users may create adjacent\n * <code>Text</code> nodes that represent the contents of a given element\n * without any intervening markup, but should be aware that there is no way\n * to represent the separations between these nodes in XML or HTML, so they\n * will not (in general) persist between DOM editing sessions. The\n * <code>Node.normalize()</code> method merges any such adjacent\n * <code>Text</code> objects into a single node for each block of text.\n * <p> No lexical check is done on the content of a <code>Text</code> node\n * and, depending on its position in the document, some characters must be\n * escaped during serialization using character references; e.g. the\n * characters \"&lt;&amp;\" if the textual content is part of an element or of\n * an attribute, the character sequence \"]]&gt;\" when part of an element,\n * the quotation mark character \" or the apostrophe character ' when part of\n * an attribute.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Text splitText(int offset) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n     * Breaks this node into two nodes at the specified <code>offset</code>,\n     * keeping both in the tree as siblings. After being split, this node\n     * will contain all the content up to the <code>offset</code> point. A\n     * new node of the same type, which contains all the content at and\n     * after the <code>offset</code> point, is returned. If the original\n     * node had a parent node, the new node is inserted as the next sibling\n     * of the original node. When the <code>offset</code> is equal to the\n     * length of this node, the new node has no data.\n     * @param offset The 16-bit unit offset at which to split, starting from\n     *   <code>0</code>.\n     * @return The new node, of the same type as this node.\n     * @exception DOMException\n     *   INDEX_SIZE_ERR: Raised if the specified offset is negative or greater\n     *   than the number of 16-bit units in <code>data</code>.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isElementContentWhitespace()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this text node contains <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>\n     * element content whitespace</a>, often abusively called \"ignorable whitespace\". The text node is\n     * determined to contain whitespace in element content during the load\n     * of the document or if validation occurs while using\n     * <code>Document.normalizeDocument()</code>.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getWholeText()",
    "returnType" : "String",
    "comment" : "\n     * Returns all text of <code>Text</code> nodes logically-adjacent text\n     * nodes to this node, concatenated in document order.\n     * <br>For instance, in the example below <code>wholeText</code> on the\n     * <code>Text</code> node that contains \"bar\" returns \"barfoo\", while on\n     * the <code>Text</code> node that contains \"foo\" it returns \"barfoo\".\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  }, {
    "name" : "public Text replaceWholeText(String content) throws DOMException",
    "returnType" : "Text",
    "comment" : "\n     * Replaces the text of the current node and all logically-adjacent text\n     * nodes with the specified text. All logically-adjacent text nodes are\n     * removed including the current node unless it was the recipient of the\n     * replacement text.\n     * <br>This method returns the node which received the replacement text.\n     * The returned node is:\n     * <ul>\n     * <li><code>null</code>, when the replacement text is\n     * the empty string;\n     * </li>\n     * <li>the current node, except when the current node is\n     * read-only;\n     * </li>\n     * <li> a new <code>Text</code> node of the same type (\n     * <code>Text</code> or <code>CDATASection</code>) as the current node\n     * inserted at the location of the replacement.\n     * </li>\n     * </ul>\n     * <br>For instance, in the above example calling\n     * <code>replaceWholeText</code> on the <code>Text</code> node that\n     * contains \"bar\" with \"yo\" in argument results in the following:\n     * <br>Where the nodes to be removed are read-only descendants of an\n     * <code>EntityReference</code>, the <code>EntityReference</code> must\n     * be removed instead of the read-only nodes. If any\n     * <code>EntityReference</code> to be removed has descendants that are\n     * not <code>EntityReference</code>, <code>Text</code>, or\n     * <code>CDATASection</code> nodes, the <code>replaceWholeText</code>\n     * method must fail before performing any modification of the document,\n     * raising a <code>DOMException</code> with the code\n     * <code>NO_MODIFICATION_ALLOWED_ERR</code>.\n     * <br>For instance, in the example below calling\n     * <code>replaceWholeText</code> on the <code>Text</code> node that\n     * contains \"bar\" fails, because the <code>EntityReference</code> node\n     * \"ent\" contains an <code>Element</code> node which cannot be removed.\n     * @param content The content of the replacing <code>Text</code> node.\n     * @return The <code>Text</code> node created with the specified content.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if one of the <code>Text</code>\n     *   nodes being replaced is readonly.\n     * @since DOM Level 3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Text splitText(int offset) throws DOMException", "public boolean isElementContentWhitespace()", "public String getWholeText()", "public Text replaceWholeText(String content) throws DOMException" ],
  "variableNames" : [ ]
}