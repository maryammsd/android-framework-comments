{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/PKIXParameters.java",
  "packageName" : "java.security.cert",
  "className" : "PKIXParameters",
  "comment" : "\n * Parameters used as input for the PKIX {@code CertPathValidator}\n * algorithm.\n * <p>\n * A PKIX {@code CertPathValidator} uses these parameters to\n * validate a {@code CertPath} according to the PKIX certification path\n * validation algorithm.\n *\n * <p>To instantiate a {@code PKIXParameters} object, an\n * application must specify one or more <i>most-trusted CAs</i> as defined by\n * the PKIX certification path validation algorithm. The most-trusted CAs\n * can be specified using one of two constructors. An application\n * can call {@link #PKIXParameters(Set) PKIXParameters(Set)},\n * specifying a {@code Set} of {@code TrustAnchor} objects, each\n * of which identify a most-trusted CA. Alternatively, an application can call\n * {@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a\n * {@code KeyStore} instance containing trusted certificate entries, each\n * of which will be considered as a most-trusted CA.\n * <p>\n * Once a {@code PKIXParameters} object has been created, other parameters\n * can be specified (by calling {@link #setInitialPolicies setInitialPolicies}\n * or {@link #setDate setDate}, for instance) and then the\n * {@code PKIXParameters} is passed along with the {@code CertPath}\n * to be validated to {@link CertPathValidator#validate\n * CertPathValidator.validate}.\n * <p>\n * Any parameter that is not set (or is set to {@code null}) will\n * be set to the default value for that parameter. The default value for the\n * {@code date} parameter is {@code null}, which indicates\n * the current time when the path is validated. The default for the\n * remaining parameters is the least constrained.\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * Unless otherwise specified, the methods defined in this class are not\n * thread-safe. Multiple threads that need to access a single\n * object concurrently should synchronize amongst themselves and\n * provide the necessary locking. Multiple threads each manipulating\n * separate objects need not synchronize.\n *\n * @see CertPathValidator\n *\n * @since       1.4\n * @author      Sean Mullan\n * @author      Yassir Elley\n ",
  "links" : [ "java.security.cert.CertPathValidator#validateCertPathValidator.validate", "#setInitialPolicies", "#PKIXParameters(Set)", "#PKIXParameters(KeyStore)", "#setDate" ],
  "variables" : [ {
    "name" : "unmodTrustAnchors",
    "type" : "Set<TrustAnchor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "date",
    "type" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "certPathCheckers",
    "type" : "List<PKIXCertPathChecker>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sigProvider",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "revocationEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unmodInitialPolicies",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "explicitPolicyRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "policyMappingInhibited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "anyPolicyInhibited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "policyQualifiersRejected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "certStores",
    "type" : "List<CertStore>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "certSelector",
    "type" : "CertSelector",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Set<TrustAnchor> getTrustAnchors()",
    "returnType" : "Set<TrustAnchor>",
    "comment" : "\n     * Returns an immutable {@code Set} of the most-trusted\n     * CAs.\n     *\n     * @return an immutable {@code Set} of {@code TrustAnchor}s\n     * (never {@code null})\n     *\n     * @see #setTrustAnchors\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrustAnchors(Set<TrustAnchor> trustAnchors) throws InvalidAlgorithmParameterException",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@code Set} of most-trusted CAs.\n     * <p>\n     * Note that the {@code Set} is copied to protect against\n     * subsequent modifications.\n     *\n     * @param trustAnchors a {@code Set} of {@code TrustAnchor}s\n     * @throws InvalidAlgorithmParameterException if the specified\n     * {@code Set} is empty {@code (trustAnchors.isEmpty() == true)}\n     * @throws NullPointerException if the specified {@code Set} is\n     * {@code null}\n     * @throws ClassCastException if any of the elements in the set\n     * are not of type {@code java.security.cert.TrustAnchor}\n     *\n     * @see #getTrustAnchors\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getInitialPolicies()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Returns an immutable {@code Set} of initial\n     * policy identifiers (OID strings), indicating that any one of these\n     * policies would be acceptable to the certificate user for the purposes of\n     * certification path processing. The default return value is an empty\n     * {@code Set}, which is interpreted as meaning that any policy would\n     * be acceptable.\n     *\n     * @return an immutable {@code Set} of initial policy OIDs in\n     * {@code String} format, or an empty {@code Set} (implying any\n     * policy is acceptable). Never returns {@code null}.\n     *\n     * @see #setInitialPolicies\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setInitialPolicies(Set<String> initialPolicies)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@code Set} of initial policy identifiers\n     * (OID strings), indicating that any one of these\n     * policies would be acceptable to the certificate user for the purposes of\n     * certification path processing. By default, any policy is acceptable\n     * (i.e. all policies), so a user that wants to allow any policy as\n     * acceptable does not need to call this method, or can call it\n     * with an empty {@code Set} (or {@code null}).\n     * <p>\n     * Note that the {@code Set} is copied to protect against\n     * subsequent modifications.\n     *\n     * @param initialPolicies a {@code Set} of initial policy\n     * OIDs in {@code String} format (or {@code null})\n     * @throws ClassCastException if any of the elements in the set are\n     * not of type {@code String}\n     *\n     * @see #getInitialPolicies\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCertStores(List<CertStore> stores)",
    "returnType" : "void",
    "comment" : "\n     * Sets the list of {@code CertStore}s to be used in finding\n     * certificates and CRLs. May be {@code null}, in which case\n     * no {@code CertStore}s will be used. The first\n     * {@code CertStore}s in the list may be preferred to those that\n     * appear later.\n     * <p>\n     * Note that the {@code List} is copied to protect against\n     * subsequent modifications.\n     *\n     * @param stores a {@code List} of {@code CertStore}s (or\n     * {@code null})\n     * @throws ClassCastException if any of the elements in the list are\n     * not of type {@code java.security.cert.CertStore}\n     *\n     * @see #getCertStores\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCertStore(CertStore store)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@code CertStore} to the end of the list of\n     * {@code CertStore}s used in finding certificates and CRLs.\n     *\n     * @param store the {@code CertStore} to add. If {@code null},\n     * the store is ignored (not added to list).\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<CertStore> getCertStores()",
    "returnType" : "List<CertStore>",
    "comment" : "\n     * Returns an immutable {@code List} of {@code CertStore}s that\n     * are used to find certificates and CRLs.\n     *\n     * @return an immutable {@code List} of {@code CertStore}s\n     * (may be empty, but never {@code null})\n     *\n     * @see #setCertStores\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRevocationEnabled(boolean val)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RevocationEnabled flag. If this flag is true, the default\n     * revocation checking mechanism of the underlying PKIX service provider\n     * will be used. If this flag is false, the default revocation checking\n     * mechanism will be disabled (not used).\n     * <p>\n     * When a {@code PKIXParameters} object is created, this flag is set\n     * to true. This setting reflects the most common strategy for checking\n     * revocation, since each service provider must support revocation\n     * checking to be PKIX compliant. Sophisticated applications should set\n     * this flag to false when it is not practical to use a PKIX service\n     * provider's default revocation checking mechanism or when an alternative\n     * revocation checking mechanism is to be substituted (by also calling the\n     * {@link #addCertPathChecker addCertPathChecker} or {@link\n     * #setCertPathCheckers setCertPathCheckers} methods).\n     *\n     * @param val the new value of the RevocationEnabled flag\n     ",
    "links" : [ "#setCertPathCheckers", "#addCertPathChecker" ]
  }, {
    "name" : "public boolean isRevocationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks the RevocationEnabled flag. If this flag is true, the default\n     * revocation checking mechanism of the underlying PKIX service provider\n     * will be used. If this flag is false, the default revocation checking\n     * mechanism will be disabled (not used). See the {@link\n     * #setRevocationEnabled setRevocationEnabled} method for more details on\n     * setting the value of this flag.\n     *\n     * @return the current value of the RevocationEnabled flag\n     ",
    "links" : [ "#setRevocationEnabled" ]
  }, {
    "name" : "public void setExplicitPolicyRequired(boolean val)",
    "returnType" : "void",
    "comment" : "\n     * Sets the ExplicitPolicyRequired flag. If this flag is true, an\n     * acceptable policy needs to be explicitly identified in every certificate.\n     * By default, the ExplicitPolicyRequired flag is false.\n     *\n     * @param val {@code true} if explicit policy is to be required,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isExplicitPolicyRequired()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if explicit policy is required. If this flag is true, an\n     * acceptable policy needs to be explicitly identified in every certificate.\n     * By default, the ExplicitPolicyRequired flag is false.\n     *\n     * @return {@code true} if explicit policy is required,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPolicyMappingInhibited(boolean val)",
    "returnType" : "void",
    "comment" : "\n     * Sets the PolicyMappingInhibited flag. If this flag is true, policy\n     * mapping is inhibited. By default, policy mapping is not inhibited (the\n     * flag is false).\n     *\n     * @param val {@code true} if policy mapping is to be inhibited,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPolicyMappingInhibited()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if policy mapping is inhibited. If this flag is true, policy\n     * mapping is inhibited. By default, policy mapping is not inhibited (the\n     * flag is false).\n     *\n     * @return true if policy mapping is inhibited, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAnyPolicyInhibited(boolean val)",
    "returnType" : "void",
    "comment" : "\n     * Sets state to determine if the any policy OID should be processed\n     * if it is included in a certificate. By default, the any policy OID\n     * is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()}\n     * returns {@code false}).\n     *\n     * @param val {@code true} if the any policy OID is to be\n     * inhibited, {@code false} otherwise\n     ",
    "links" : [ "#isAnyPolicyInhibited" ]
  }, {
    "name" : "public boolean isAnyPolicyInhibited()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether the any policy OID should be processed if it\n     * is included in a certificate.\n     *\n     * @return {@code true} if the any policy OID is inhibited,\n     * {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPolicyQualifiersRejected(boolean qualifiersRejected)",
    "returnType" : "void",
    "comment" : "\n     * Sets the PolicyQualifiersRejected flag. If this flag is true,\n     * certificates that include policy qualifiers in a certificate\n     * policies extension that is marked critical are rejected.\n     * If the flag is false, certificates are not rejected on this basis.\n     *\n     * <p> When a {@code PKIXParameters} object is created, this flag is\n     * set to true. This setting reflects the most common (and simplest)\n     * strategy for processing policy qualifiers. Applications that want to use\n     * a more sophisticated policy must set this flag to false.\n     * <p>\n     * Note that the PKIX certification path validation algorithm specifies\n     * that any policy qualifier in a certificate policies extension that is\n     * marked critical must be processed and validated. Otherwise the\n     * certification path must be rejected. If the policyQualifiersRejected flag\n     * is set to false, it is up to the application to validate all policy\n     * qualifiers in this manner in order to be PKIX compliant.\n     *\n     * @param qualifiersRejected the new value of the PolicyQualifiersRejected\n     * flag\n     * @see #getPolicyQualifiersRejected\n     * @see PolicyQualifierInfo\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPolicyQualifiersRejected()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the PolicyQualifiersRejected flag. If this flag is true,\n     * certificates that include policy qualifiers in a certificate policies\n     * extension that is marked critical are rejected.\n     * If the flag is false, certificates are not rejected on this basis.\n     *\n     * <p> When a {@code PKIXParameters} object is created, this flag is\n     * set to true. This setting reflects the most common (and simplest)\n     * strategy for processing policy qualifiers. Applications that want to use\n     * a more sophisticated policy must set this flag to false.\n     *\n     * @return the current value of the PolicyQualifiersRejected flag\n     * @see #setPolicyQualifiersRejected\n     ",
    "links" : [ ]
  }, {
    "name" : "public Date getDate()",
    "returnType" : "Date",
    "comment" : "\n     * Returns the time for which the validity of the certification path\n     * should be determined. If {@code null}, the current time is used.\n     * <p>\n     * Note that the {@code Date} returned is copied to protect against\n     * subsequent modifications.\n     *\n     * @return the {@code Date}, or {@code null} if not set\n     * @see #setDate\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDate(Date date)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time for which the validity of the certification path\n     * should be determined. If {@code null}, the current time is used.\n     * <p>\n     * Note that the {@code Date} supplied here is copied to protect\n     * against subsequent modifications.\n     *\n     * @param date the {@code Date}, or {@code null} for the\n     * current time\n     * @see #getDate\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCertPathCheckers(List<PKIXCertPathChecker> checkers)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@code List} of additional certification path checkers. If\n     * the specified {@code List} contains an object that is not a\n     * {@code PKIXCertPathChecker}, it is ignored.\n     * <p>\n     * Each {@code PKIXCertPathChecker} specified implements\n     * additional checks on a certificate. Typically, these are checks to\n     * process and verify private extensions contained in certificates.\n     * Each {@code PKIXCertPathChecker} should be instantiated with any\n     * initialization parameters needed to execute the check.\n     * <p>\n     * This method allows sophisticated applications to extend a PKIX\n     * {@code CertPathValidator} or {@code CertPathBuilder}.\n     * Each of the specified {@code PKIXCertPathChecker}s will be called,\n     * in turn, by a PKIX {@code CertPathValidator} or\n     * {@code CertPathBuilder} for each certificate processed or\n     * validated.\n     * <p>\n     * Regardless of whether these additional {@code PKIXCertPathChecker}s\n     * are set, a PKIX {@code CertPathValidator} or\n     * {@code CertPathBuilder} must perform all of the required PKIX\n     * checks on each certificate. The one exception to this rule is if the\n     * RevocationEnabled flag is set to false (see the {@link\n     * #setRevocationEnabled setRevocationEnabled} method).\n     * <p>\n     * Note that the {@code List} supplied here is copied and each\n     * {@code PKIXCertPathChecker} in the list is cloned to protect\n     * against subsequent modifications.\n     *\n     * @param checkers a {@code List} of {@code PKIXCertPathChecker}s.\n     * May be {@code null}, in which case no additional checkers will be\n     * used.\n     * @throws ClassCastException if any of the elements in the list\n     * are not of type {@code java.security.cert.PKIXCertPathChecker}\n     * @see #getCertPathCheckers\n     ",
    "links" : [ "#setRevocationEnabled" ]
  }, {
    "name" : "public List<PKIXCertPathChecker> getCertPathCheckers()",
    "returnType" : "List<PKIXCertPathChecker>",
    "comment" : "\n     * Returns the {@code List} of certification path checkers.\n     * The returned {@code List} is immutable, and each\n     * {@code PKIXCertPathChecker} in the {@code List} is cloned\n     * to protect against subsequent modifications.\n     *\n     * @return an immutable {@code List} of\n     * {@code PKIXCertPathChecker}s (may be empty, but not\n     * {@code null})\n     * @see #setCertPathCheckers\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCertPathChecker(PKIXCertPathChecker checker)",
    "returnType" : "void",
    "comment" : "\n     * Adds a {@code PKIXCertPathChecker} to the list of certification\n     * path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}\n     * method for more details.\n     * <p>\n     * Note that the {@code PKIXCertPathChecker} is cloned to protect\n     * against subsequent modifications.\n     *\n     * @param checker a {@code PKIXCertPathChecker} to add to the list of\n     * checks. If {@code null}, the checker is ignored (not added to list).\n     ",
    "links" : [ "#setCertPathCheckers" ]
  }, {
    "name" : "public String getSigProvider()",
    "returnType" : "String",
    "comment" : "\n     * Returns the signature provider's name, or {@code null}\n     * if not set.\n     *\n     * @return the signature provider's name (or {@code null})\n     * @see #setSigProvider\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSigProvider(String sigProvider)",
    "returnType" : "void",
    "comment" : "\n     * Sets the signature provider's name. The specified provider will be\n     * preferred when creating {@link java.security.Signature Signature}\n     * objects. If {@code null} or not set, the first provider found\n     * supporting the algorithm will be used.\n     *\n     * @param sigProvider the signature provider's name (or {@code null})\n     * @see #getSigProvider\n    ",
    "links" : [ "java.security.Signature" ]
  }, {
    "name" : "public CertSelector getTargetCertConstraints()",
    "returnType" : "CertSelector",
    "comment" : "\n     * Returns the required constraints on the target certificate.\n     * The constraints are returned as an instance of {@code CertSelector}.\n     * If {@code null}, no constraints are defined.\n     *\n     * <p>Note that the {@code CertSelector} returned is cloned\n     * to protect against subsequent modifications.\n     *\n     * @return a {@code CertSelector} specifying the constraints\n     * on the target certificate (or {@code null})\n     * @see #setTargetCertConstraints\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTargetCertConstraints(CertSelector selector)",
    "returnType" : "void",
    "comment" : "\n     * Sets the required constraints on the target certificate.\n     * The constraints are specified as an instance of\n     * {@code CertSelector}. If {@code null}, no constraints are\n     * defined.\n     *\n     * <p>Note that the {@code CertSelector} specified is cloned\n     * to protect against subsequent modifications.\n     *\n     * @param selector a {@code CertSelector} specifying the constraints\n     * on the target certificate (or {@code null})\n     * @see #getTargetCertConstraints\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Makes a copy of this {@code PKIXParameters} object. Changes\n     * to the copy will not affect the original and vice versa.\n     *\n     * @return a copy of this {@code PKIXParameters} object\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a formatted string describing the parameters.\n     *\n     * @return a formatted string describing the parameters.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Set<TrustAnchor> getTrustAnchors()", "public void setTrustAnchors(Set<TrustAnchor> trustAnchors) throws InvalidAlgorithmParameterException", "public Set<String> getInitialPolicies()", "public void setInitialPolicies(Set<String> initialPolicies)", "public void setCertStores(List<CertStore> stores)", "public void addCertStore(CertStore store)", "public List<CertStore> getCertStores()", "public void setRevocationEnabled(boolean val)", "public boolean isRevocationEnabled()", "public void setExplicitPolicyRequired(boolean val)", "public boolean isExplicitPolicyRequired()", "public void setPolicyMappingInhibited(boolean val)", "public boolean isPolicyMappingInhibited()", "public void setAnyPolicyInhibited(boolean val)", "public boolean isAnyPolicyInhibited()", "public void setPolicyQualifiersRejected(boolean qualifiersRejected)", "public boolean getPolicyQualifiersRejected()", "public Date getDate()", "public void setDate(Date date)", "public void setCertPathCheckers(List<PKIXCertPathChecker> checkers)", "public List<PKIXCertPathChecker> getCertPathCheckers()", "public void addCertPathChecker(PKIXCertPathChecker checker)", "public String getSigProvider()", "public void setSigProvider(String sigProvider)", "public CertSelector getTargetCertConstraints()", "public void setTargetCertConstraints(CertSelector selector)", "public Object clone()", "public String toString()" ],
  "variableNames" : [ "unmodTrustAnchors", "date", "certPathCheckers", "sigProvider", "revocationEnabled", "unmodInitialPolicies", "explicitPolicyRequired", "policyMappingInhibited", "anyPolicyInhibited", "policyQualifiersRejected", "certStores", "certSelector" ]
}