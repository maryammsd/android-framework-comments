{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/InputMonitor.java",
  "packageName" : "android.view",
  "className" : "InputMonitor",
  "comment" : "\n * An {@code InputMonitor} allows privileged applications and components to monitor streams of\n * {@link InputEvent}s without having to be the designated recipient for the event.\n *\n * For example, focus dispatched events would normally only go to the focused window on the\n * targeted display, but an {@code InputMonitor} will also receive a copy of that event if they're\n * registered to monitor that type of event on the targeted display.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInputChannel",
    "type" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHost",
    "type" : "IInputMonitorHost",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputMonitor>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void pilferPointers()",
    "returnType" : "void",
    "comment" : "\n     * Takes all of the current pointer events streams that are currently being sent to this\n     * monitor and generates appropriate cancellations for the windows that would normally get\n     * them.\n     *\n     * This method should be used with caution as unexpected pilfering can break fundamental user\n     * interactions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispose()",
    "returnType" : "void",
    "comment" : "\n     * Disposes the input monitor.\n     *\n     * Explicitly release all of the resources this monitor is holding on to (e.g. the\n     * InputChannel). Once this method is called, this monitor and any resources it's provided may\n     * no longer be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputChannel getInputChannel()",
    "returnType" : "InputChannel",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IInputMonitorHost getHost()",
    "returnType" : "IInputMonitorHost",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "mInputChannel", "mHost", "CREATOR" ],
  "methodNames" : [ "public void pilferPointers()", "public void dispose()", "public InputChannel getInputChannel()", "public IInputMonitorHost getHost()", "public String toString()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ]
}