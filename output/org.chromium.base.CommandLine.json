{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/CommandLine.java",
  "packageName" : "org.chromium.base",
  "className" : "CommandLine",
  "comment" : "\n * Java mirror of base/command_line.h. Android applications don't have command line arguments.\n * Instead, they're \"simulated\" by reading a file at a specific location early during startup.\n * Applications each define their own files, e.g., ContentShellApplication.COMMAND_LINE_FILE.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sCommandLine",
    "type" : "AtomicReference<CommandLine>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SWITCH_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SWITCH_TERMINATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SWITCH_VALUE_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract boolean hasSwitch(String switchString)",
    "returnType" : "boolean",
    "comment" : "\n     *  Returns true if this command line contains the given switch.\n     *  (Switch names ARE case-sensitive).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String getSwitchValue(String switchString)",
    "returnType" : "String",
    "comment" : "\n     * Return the value associated with the given switch, or null.\n     * @param switchString The switch key to lookup. It should NOT start with '--' !\n     * @return switch value, or null if the switch is not set or set to empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSwitchValue(String switchString, String defaultValue)",
    "returnType" : "String",
    "comment" : "\n     * Return the value associated with the given switch, or {@code defaultValue} if the switch\n     * was not specified.\n     * @param switchString The switch key to lookup. It should NOT start with '--' !\n     * @param defaultValue The default value to return if the switch isn't set.\n     * @return Switch value, or {@code defaultValue} if the switch is not set or set to empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Map getSwitches()",
    "returnType" : "Map",
    "comment" : " Return a copy of all switches, along with their values. ",
    "links" : [ ]
  }, {
    "name" : "public abstract void appendSwitch(String switchString)",
    "returnType" : "void",
    "comment" : "\n     * Append a switch to the command line.  There is no guarantee\n     * this action happens before the switch is needed.\n     * @param switchString the switch to add.  It should NOT start with '--' !\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void appendSwitchWithValue(String switchString, String value)",
    "returnType" : "void",
    "comment" : "\n     * Append a switch and value to the command line.  There is no\n     * guarantee this action happens before the switch is needed.\n     * @param switchString the switch to add.  It should NOT start with '--' !\n     * @param value the value for this switch.\n     * For example, --foo=bar becomes 'foo', 'bar'.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void appendSwitchesAndArguments(String[] array)",
    "returnType" : "void",
    "comment" : "\n     * Append switch/value items in \"command line\" format (excluding argv[0] program name).\n     * E.g. { '--gofast', '--username=fred' }\n     * @param array an array of switch or switch/value items in command line format.\n     *   Unlike the other append routines, these switches SHOULD start with '--' .\n     *   Unlike init(), this does not include the program name in array[0].\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void removeSwitch(String switchString)",
    "returnType" : "void",
    "comment" : "\n     * Remove the switch from the command line.  If no such switch is present, this has no effect.\n     * @param switchString The switch key to lookup. It should NOT start with '--' !\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNativeImplementation()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if the command line is bound to the native (JNI) implementation.\n     * @return true if the underlying implementation is delegating to the native command line.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract String[] getCommandLineArguments()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the switches and arguments passed into the program, with switches and their\n     * values coming before all of the arguments.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroy the command line. Called when a different instance is set.\n     * @see #setInstance\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the command line has already been initialized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CommandLine getInstance()",
    "returnType" : "CommandLine",
    "comment" : " Equivalent to CommandLine::ForCurrentProcess in C++.",
    "links" : [ ]
  }, {
    "name" : "public static void init(@Nullable String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the singleton instance, must be called exactly once (either directly or\n     * via one of the convenience wrappers below) before using the static singleton instance.\n     * @param args command line flags in 'argv' format: args[0] is the program name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void initFromFile(String file)",
    "returnType" : "void",
    "comment" : "\n     * Initialize the command line from the command-line file.\n     *\n     * @param file The fully qualified command line file.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void resetForTesting()",
    "returnType" : "void",
    "comment" : "\n     * Resets both the java proxy and the native command lines. This allows the entire\n     * command line initialization to be re-run including the call to onJniLoaded.\n     ",
    "links" : [ ]
  }, {
    "name" : " static String[] tokenizeQuotedArguments(char[] buffer)",
    "returnType" : "String[]",
    "comment" : "\n     * Parse command line flags from a flat buffer, supporting double-quote enclosed strings\n     * containing whitespace. argv elements are derived by splitting the buffer on whitepace;\n     * double quote characters may enclose tokens containing whitespace; a double-quote literal\n     * may be escaped with back-slash. (Otherwise backslash is taken as a literal).\n     * @param buffer A command line in command line file format as described above.\n     * @return the tokenized arguments, suitable for passing to init().\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void enableNativeProxy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String[] getJavaSwitchesOrNull()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setInstance(CommandLine commandLine)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static char[] readFileAsUtf8(String fileName)",
    "returnType" : "char[]",
    "comment" : "\n     * @param fileName the file to read in.\n     * @return Array of chars read from the file, or null if the file cannot be read.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract boolean hasSwitch(String switchString)", "public abstract String getSwitchValue(String switchString)", "public String getSwitchValue(String switchString, String defaultValue)", "public abstract Map getSwitches()", "public abstract void appendSwitch(String switchString)", "public abstract void appendSwitchWithValue(String switchString, String value)", "public abstract void appendSwitchesAndArguments(String[] array)", "public abstract void removeSwitch(String switchString)", "public boolean isNativeImplementation()", "protected abstract String[] getCommandLineArguments()", "protected void destroy()", "public static boolean isInitialized()", "public static CommandLine getInstance()", "public static void init(@Nullable String[] args)", "public static void initFromFile(String file)", " static void resetForTesting()", " static String[] tokenizeQuotedArguments(char[] buffer)", "public static void enableNativeProxy()", "public static String[] getJavaSwitchesOrNull()", "private static void setInstance(CommandLine commandLine)", "private static char[] readFileAsUtf8(String fileName)" ],
  "variableNames" : [ "sCommandLine", "TAG", "SWITCH_PREFIX", "SWITCH_TERMINATOR", "SWITCH_VALUE_SEPARATOR" ]
}