{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/UnicodeRegex.java",
  "packageName" : "android.icu.impl",
  "className" : "UnicodeRegex",
  "comment" : "\n * Contains utilities to supplement the JDK Regex, since it doesn't handle\n * Unicode well.\n *\n * <p>TODO: Move to android.icu.dev.somewhere.\n * 2015-sep-03: This is used there, and also in CLDR and in UnicodeTools.\n *\n * @author markdavis\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SUPP_ESCAPE",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "symbolTable",
    "type" : "SymbolTable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STANDARD",
    "type" : "UnicodeRegex",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bnfCommentString",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bnfVariableInfix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bnfLineSeparator",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LongestFirst",
    "type" : "Comparator<Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public SymbolTable getSymbolTable()",
    "returnType" : "SymbolTable",
    "comment" : "\n     * Set the symbol table for internal processing\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeRegex setSymbolTable(SymbolTable symbolTable)",
    "returnType" : "UnicodeRegex",
    "comment" : "\n     * Get the symbol table for internal processing\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String transform(String regex)",
    "returnType" : "String",
    "comment" : "\n     * Adds full Unicode property support, with the latest version of Unicode,\n     * to Java Regex, bringing it up to Level 1 (see\n     * http://www.unicode.org/reports/tr18/). It does this by preprocessing the\n     * regex pattern string and interpreting the character classes (\\p{...},\n     * \\P{...}, [...]) according to their syntax and meaning in UnicodeSet. With\n     * this utility, Java regex expressions can be updated to work with the\n     * latest version of Unicode, and with all Unicode properties. Note that the\n     * UnicodeSet syntax has not yet, however, been updated to be completely\n     * consistent with Java regex, so be careful of the differences.\n     * <p>Not thread-safe; create a separate copy for different threads.\n     * <p>In the future, we may extend this to support other regex packages.\n     *\n     * @param regex A modified Java regex pattern, as in the input to\n     *        Pattern.compile(), except that all \"character classes\" are\n     *        processed as if they were UnicodeSet patterns. Example:\n     *        \"abc[:bc=N:]. See UnicodeSet for the differences in syntax.\n     * @return A processed Java regex pattern, suitable for input to\n     *         Pattern.compile().\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String fix(String regex)",
    "returnType" : "String",
    "comment" : "\n     * Convenience static function, using standard parameters.\n     * @param regex as in process()\n     * @return processed regex pattern, as in process()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pattern compile(String regex)",
    "returnType" : "Pattern",
    "comment" : "\n     * Compile a regex string, after processing by fix(...).\n     *\n     * @param regex Raw regex pattern, as in fix(...).\n     * @return Pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Pattern compile(String regex, int options)",
    "returnType" : "Pattern",
    "comment" : "\n     * Compile a regex string, after processing by fix(...).\n     *\n     * @param regex Raw regex pattern, as in fix(...).\n     * @return Pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public String compileBnf(String bnfLines)",
    "returnType" : "String",
    "comment" : "\n     * Compile a composed string from a set of BNF lines; see the List version for more information.\n     *\n     * @param bnfLines Series of BNF lines.\n     * @return Pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public String compileBnf(List<String> lines)",
    "returnType" : "String",
    "comment" : "\n     * Compile a composed string from a set of BNF lines, such as for composing a regex\n     * expression. The lines can be in any order, but there must not be any\n     * cycles. The result can be used as input for fix().\n     * <p>\n     * Example:\n     * <pre>\n     * uri = (?: (scheme) \\\\:)? (host) (?: \\\\? (query))? (?: \\\\u0023 (fragment))?;\n     * scheme = reserved+;\n     * host = // reserved+;\n     * query = [\\\\=reserved]+;\n     * fragment = reserved+;\n     * reserved = [[:ascii:][:alphabetic:]];\n     * </pre>\n     * <p>\n     * Caveats: at this point the parsing is simple; for example, # cannot be\n     * quoted (use \\\\u0023); you can set it to null to disable.\n     * The equality sign and a few others can be reset with\n     * setBnfX().\n     *\n     * @param lines Series of lines that represent a BNF expression. The lines contain\n     *          a series of statements that of the form x=y;. A statement can take\n     *          multiple lines, but there can't be multiple statements on a line.\n     *          A hash quotes to the end of the line.\n     * @return Pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBnfCommentString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBnfCommentString(String bnfCommentString)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBnfVariableInfix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBnfVariableInfix(String bnfVariableInfix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBnfLineSeparator()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBnfLineSeparator(String bnfLineSeparator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static List<String> appendLines(List<String> result, String file, String encoding) throws IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Utility for loading lines from a file.\n     * @param result The result of the appended lines.\n     * @param file The file to have an input stream.\n     * @param encoding if null, then UTF-8\n     * @return filled list\n     * @throws IOException If there were problems opening the file for input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<String> appendLines(List<String> result, InputStream inputStream, String encoding) throws UnsupportedEncodingException, IOException",
    "returnType" : "List<String>",
    "comment" : "\n     * Utility for loading lines from a UTF8 file.\n     * @param result The result of the appended lines.\n     * @param inputStream The input stream.\n     * @param encoding if null, then UTF-8\n     * @return filled list\n     * @throws IOException  If there were problems opening the input stream for reading.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeRegex cloneAsThawed()",
    "returnType" : "UnicodeRegex",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.Freezable#cloneAsThawed()\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeRegex freeze()",
    "returnType" : "UnicodeRegex",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.Freezable#freeze()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : " (non-Javadoc)\n     * @see android.icu.util.Freezable#isFrozen()\n     ",
    "links" : [ ]
  }, {
    "name" : "private int processSet(String regex, int i, StringBuilder result, UnicodeSet temp, ParsePosition pos)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Map<String, String> getVariables(List<String> lines)",
    "returnType" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public SymbolTable getSymbolTable()", "public UnicodeRegex setSymbolTable(SymbolTable symbolTable)", "public String transform(String regex)", "public static String fix(String regex)", "public static Pattern compile(String regex)", "public static Pattern compile(String regex, int options)", "public String compileBnf(String bnfLines)", "public String compileBnf(List<String> lines)", "public String getBnfCommentString()", "public void setBnfCommentString(String bnfCommentString)", "public String getBnfVariableInfix()", "public void setBnfVariableInfix(String bnfVariableInfix)", "public String getBnfLineSeparator()", "public void setBnfLineSeparator(String bnfLineSeparator)", "public static List<String> appendLines(List<String> result, String file, String encoding) throws IOException", "public static List<String> appendLines(List<String> result, InputStream inputStream, String encoding) throws UnsupportedEncodingException, IOException", "public UnicodeRegex cloneAsThawed()", "public UnicodeRegex freeze()", "public boolean isFrozen()", "private int processSet(String regex, int i, StringBuilder result, UnicodeSet temp, ParsePosition pos)", "private Map<String, String> getVariables(List<String> lines)" ],
  "variableNames" : [ "SUPP_ESCAPE", "symbolTable", "STANDARD", "bnfCommentString", "bnfVariableInfix", "bnfLineSeparator", "LongestFirst" ]
}