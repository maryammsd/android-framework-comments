{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/RenamingDelegatingContext.java",
  "packageName" : "android.test",
  "className" : "RenamingDelegatingContext",
  "comment" : "\n * This is a class which delegates to the given context, but performs database\n * and file operations with a renamed database/file name (prefixes default\n * names with a given prefix).\n *\n * @deprecated New tests should be written using the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n ",
  "variables" : [ {
    "name" : "mFileContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilePrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCacheDir",
    "type" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSync",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDatabaseNames",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFileNames",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static T providerWithRenamedContext(Class<T> contentProvider, Context c, String filePrefix) throws IllegalAccessException, InstantiationException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static T providerWithRenamedContext(Class<T> contentProvider, Context c, String filePrefix, boolean allowAccessToExistingFilesAndDbs) throws IllegalAccessException, InstantiationException",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void makeExistingFilesAndDbsAccessible()",
    "returnType" : "void",
    "comment" : "\n     * Makes accessible all files and databases whose names match the filePrefix that was passed to\n     * the constructor. Normally only files and databases that were created through this context are\n     * accessible.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean shouldDiskNameBeVisible(String diskName)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the given diskName starts with the given prefix or not.\n     * @param diskName name of the database/file.\n     ",
    "links" : [ ]
  }, {
    "name" : " String publicNameFromDiskName(String diskName)",
    "returnType" : "String",
    "comment" : "\n     * Returns the public name (everything following the prefix) of the given diskName.\n     * @param diskName name of the database/file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDatabasePrefix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String renamedFileName(String name)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteDatabase(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getDatabasePath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] databaseList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileInputStream openFileInput(String name) throws FileNotFoundException",
    "returnType" : "FileInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException",
    "returnType" : "FileOutputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getFileStreamPath(String name)",
    "returnType" : "File",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean deleteFile(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] fileList()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public File getCacheDir()",
    "returnType" : "File",
    "comment" : "\n     * In order to support calls to getCacheDir(), we create a temp cache dir (inside the real\n     * one) and return it instead.  This code is basically getCacheDir(), except it uses the real\n     * cache dir as the parent directory and creates a test cache dir inside that.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFileContext", "mFilePrefix", "mCacheDir", "mSync", "mDatabaseNames", "mFileNames" ],
  "methodNames" : [ "public static T providerWithRenamedContext(Class<T> contentProvider, Context c, String filePrefix) throws IllegalAccessException, InstantiationException", "public static T providerWithRenamedContext(Class<T> contentProvider, Context c, String filePrefix, boolean allowAccessToExistingFilesAndDbs) throws IllegalAccessException, InstantiationException", "public void makeExistingFilesAndDbsAccessible()", " boolean shouldDiskNameBeVisible(String diskName)", " String publicNameFromDiskName(String diskName)", "public String getDatabasePrefix()", "private String renamedFileName(String name)", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory)", "public SQLiteDatabase openOrCreateDatabase(String name, int mode, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)", "public boolean deleteDatabase(String name)", "public File getDatabasePath(String name)", "public String[] databaseList()", "public FileInputStream openFileInput(String name) throws FileNotFoundException", "public FileOutputStream openFileOutput(String name, int mode) throws FileNotFoundException", "public File getFileStreamPath(String name)", "public boolean deleteFile(String name)", "public String[] fileList()", "public File getCacheDir()" ]
}