{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/VolumeShaper.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n         * Builder class for a {@link VolumeShaper.Configuration} object.\n         * <p> Here is an example where {@code Builder} is used to define the\n         * {@link VolumeShaper.Configuration}.\n         *\n         * <pre class=\"prettyprint\">\n         * VolumeShaper.Configuration LINEAR_RAMP =\n         *         new VolumeShaper.Configuration.Builder()\n         *             .setInterpolatorType(VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR)\n         *             .setCurve(new float[] { 0.f, 1.f }, // times\n         *                       new float[] { 0.f, 1.f }) // volumes\n         *             .setDuration(1000)\n         *             .build();\n         * </pre>\n         * <p>\n         ",
  "links" : [ "VolumeShaper.Configuration" ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : " invalid",
    "links" : [ ]
  }, {
    "name" : "mInterpolatorType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOptionFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDurationMs",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimes",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolumes",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setId(int id)",
    "returnType" : "Builder",
    "comment" : "\n             * @hide\n             * Set the {@code id} for system defined shapers.\n             * @param id the {@code id} to set. If non-negative, then it is used.\n             *        If -1, then the system is expected to assign one.\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if {@code id} < -1.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setInterpolatorType(@InterpolatorType int interpolatorType)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the interpolator type.\n             *\n             * If omitted the default interpolator type is {@link #INTERPOLATOR_TYPE_CUBIC}.\n             *\n             * @param interpolatorType method of interpolation used for the volume curve.\n             *        One of {@link #INTERPOLATOR_TYPE_STEP},\n             *        {@link #INTERPOLATOR_TYPE_LINEAR},\n             *        {@link #INTERPOLATOR_TYPE_CUBIC},\n             *        {@link #INTERPOLATOR_TYPE_CUBIC_MONOTONIC}.\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if {@code interpolatorType} is not valid.\n             ",
    "links" : [ "#INTERPOLATOR_TYPE_STEP", "#INTERPOLATOR_TYPE_CUBIC", "#INTERPOLATOR_TYPE_CUBIC_MONOTONIC", "#INTERPOLATOR_TYPE_LINEAR" ]
  }, {
    "name" : "public Builder setOptionFlags(@OptionFlag int optionFlags)",
    "returnType" : "Builder",
    "comment" : "\n             * @hide\n             * Sets the optional flags\n             *\n             * If omitted, flags are 0. If {@link #OPTION_FLAG_VOLUME_IN_DBFS} has\n             * changed the volume curve needs to be set again as the acceptable\n             * volume domain has changed.\n             *\n             * @param optionFlags new value to replace the old {@code optionFlags}.\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if flag is not recognized.\n             ",
    "links" : [ "#OPTION_FLAG_VOLUME_IN_DBFS" ]
  }, {
    "name" : "public Builder setDuration(long durationMillis)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the {@code VolumeShaper} duration in milliseconds.\n             *\n             * If omitted, the default duration is 1 second.\n             *\n             * @param durationMillis\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if {@code durationMillis}\n             *         is not strictly positive.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCurve(@NonNull float[] times, @NonNull float[] volumes)",
    "returnType" : "Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder reflectTimes()",
    "returnType" : "Builder",
    "comment" : "\n             * Reflects the volume curve so that\n             * the shaper changes volume from the end\n             * to the start.\n             *\n             * @return the same {@code Builder} instance.\n             * @throws IllegalStateException if curve has not been set.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder invertVolumes()",
    "returnType" : "Builder",
    "comment" : "\n             * Inverts the volume curve so that the max volume\n             * becomes the min volume and vice versa.\n             *\n             * @return the same {@code Builder} instance.\n             * @throws IllegalStateException if curve has not been set.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder scaleToEndVolume(float volume)",
    "returnType" : "Builder",
    "comment" : "\n             * Scale the curve end volume to a target value.\n             *\n             * Keeps the start volume the same.\n             * This works best if the volume curve is monotonic.\n             *\n             * @param volume the target end volume to use.\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if {@code volume} is not valid.\n             * @throws IllegalStateException if curve has not been set.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder scaleToStartVolume(float volume)",
    "returnType" : "Builder",
    "comment" : "\n             * Scale the curve start volume to a target value.\n             *\n             * Keeps the end volume the same.\n             * This works best if the volume curve is monotonic.\n             *\n             * @param volume the target start volume to use.\n             * @return the same {@code Builder} instance.\n             * @throws IllegalArgumentException if {@code volume} is not valid.\n             * @throws IllegalStateException if curve has not been set.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Configuration build()",
    "returnType" : "Configuration",
    "comment" : "\n             * Builds a new {@link VolumeShaper} object.\n             *\n             * @return a new {@link VolumeShaper} object.\n             * @throws IllegalStateException if curve is not properly set.\n             ",
    "links" : [ "android.media.VolumeShaper" ]
  } ],
  "methodNames" : [ "public Builder setId(int id)", "public Builder setInterpolatorType(@InterpolatorType int interpolatorType)", "public Builder setOptionFlags(@OptionFlag int optionFlags)", "public Builder setDuration(long durationMillis)", "public Builder setCurve(@NonNull float[] times, @NonNull float[] volumes)", "public Builder reflectTimes()", "public Builder invertVolumes()", "public Builder scaleToEndVolume(float volume)", "public Builder scaleToStartVolume(float volume)", "public Configuration build()" ],
  "variableNames" : [ "mType", "mId", "mInterpolatorType", "mOptionFlags", "mDurationMs", "mTimes", "mVolumes" ]
}