{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/XMLFormatter.java",
  "packageName" : "java.util.logging",
  "className" : "XMLFormatter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "manager",
    "type" : "LogManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void a2(StringBuilder sb, int x)",
    "returnType" : "void",
    "comment" : " Append a two digit number.",
    "links" : [ ]
  }, {
    "name" : "private void appendISO8601(StringBuilder sb, long millis)",
    "returnType" : "void",
    "comment" : " Append the time and date in ISO 8601 format",
    "links" : [ ]
  }, {
    "name" : "private void escape(StringBuilder sb, String text)",
    "returnType" : "void",
    "comment" : " For a null string we append \"<null>\"",
    "links" : [ ]
  }, {
    "name" : "public String format(LogRecord record)",
    "returnType" : "String",
    "comment" : "\n     * Format the given message to XML.\n     * <p>\n     * This method can be overridden in a subclass.\n     * It is recommended to use the {@link Formatter#formatMessage}\n     * convenience method to localize and format the message field.\n     *\n     * @param record the log record to be formatted.\n     * @return a formatted log record\n     ",
    "links" : [ "java.util.logging.Formatter#formatMessage" ]
  }, {
    "name" : "public String getHead(Handler h)",
    "returnType" : "String",
    "comment" : "\n     * Return the header string for a set of XML formatted records.\n     *\n     * @param   h  The target handler (can be null)\n     * @return  a valid XML string\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTail(Handler h)",
    "returnType" : "String",
    "comment" : "\n     * Return the tail string for a set of XML formatted records.\n     *\n     * @param   h  The target handler (can be null)\n     * @return  a valid XML string\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void a2(StringBuilder sb, int x)", "private void appendISO8601(StringBuilder sb, long millis)", "private void escape(StringBuilder sb, String text)", "public String format(LogRecord record)", "public String getHead(Handler h)", "public String getTail(Handler h)" ],
  "variableNames" : [ "manager" ]
}