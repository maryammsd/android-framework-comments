{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/DTMFilter.java",
  "packageName" : "org.apache.xml.dtm",
  "className" : "DTMFilter",
  "comment" : "\n * Simple filter for doing node tests.  Note the semantics of this are\n * somewhat different that the DOM's NodeFilter.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SHOW_ALL",
    "type" : "int",
    "comment" : "\n   * Show all <code>Nodes</code>.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ELEMENT",
    "type" : "int",
    "comment" : "\n   * Show <code>Element</code> nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * Show <code>Attr</code> nodes. This is meaningful only when creating an\n   * iterator or tree-walker with an attribute node as its\n   * <code>root</code>; in this case, it means that the attribute node\n   * will appear in the first position of the iteration or traversal.\n   * Since attributes are never children of other nodes, they do not\n   * appear when traversing over the main document tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_TEXT",
    "type" : "int",
    "comment" : "\n   * Show <code>Text</code> nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_CDATA_SECTION",
    "type" : "int",
    "comment" : "\n   * Show <code>CDATASection</code> nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ENTITY_REFERENCE",
    "type" : "int",
    "comment" : "\n   * Show <code>EntityReference</code> nodes. Note that if Entity References\n   * have been fully expanded while the tree was being constructed, these\n   * nodes will not appear and this mask has no effect.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_ENTITY",
    "type" : "int",
    "comment" : "\n   * Show <code>Entity</code> nodes. This is meaningful only when creating\n   * an iterator or tree-walker with an<code> Entity</code> node as its\n   * <code>root</code>; in this case, it means that the <code>Entity</code>\n   *  node will appear in the first position of the traversal. Since\n   * entities are not part of the document tree, they do not appear when\n   * traversing over the main document tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_PROCESSING_INSTRUCTION",
    "type" : "int",
    "comment" : "\n   * Show <code>ProcessingInstruction</code> nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_COMMENT",
    "type" : "int",
    "comment" : "\n   * Show <code>Comment</code> nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT",
    "type" : "int",
    "comment" : "\n   * Show <code>Document</code> nodes. (Of course, as with Attributes\n   * and such, this is meaningful only when the iteration root is the\n   * Document itself, since Document has no parent.)\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT_TYPE",
    "type" : "int",
    "comment" : "\n   * Show <code>DocumentType</code> nodes. \n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_DOCUMENT_FRAGMENT",
    "type" : "int",
    "comment" : "\n   * Show <code>DocumentFragment</code> nodes. (Of course, as with\n   * Attributes and such, this is meaningful only when the iteration\n   * root is the Document itself, since DocumentFragment has no parent.)\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_NOTATION",
    "type" : "int",
    "comment" : "\n   * Show <code>Notation</code> nodes. This is meaningful only when creating\n   * an iterator or tree-walker with a <code>Notation</code> node as its\n   * <code>root</code>; in this case, it means that the\n   * <code>Notation</code> node will appear in the first position of the\n   * traversal. Since notations are not part of the document tree, they do\n   * not appear when traversing over the main document tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "SHOW_NAMESPACE",
    "type" : "int",
    "comment" : "\n\n   * This bit instructs the iterator to show namespace nodes, which\n   * are modeled by DTM but not by the DOM.  Make sure this does not\n   * conflict with {@link org.w3c.dom.traversal.NodeFilter}.\n   * <p>\n   * %REVIEW% Might be safer to start from higher bits and work down,\n   * to leave room for the DOM to expand its set of constants... Or,\n   * possibly, to create a DTM-specific field for these additional bits.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  }, {
    "name" : "SHOW_BYFUNCTION",
    "type" : "int",
    "comment" : "\n   * Special bit for filters implementing match patterns starting with\n   * a function.  Make sure this does not conflict with\n   * {@link org.w3c.dom.traversal.NodeFilter}.\n   * <p>\n   * %REVIEW% Might be safer to start from higher bits and work down,\n   * to leave room for the DOM to expand its set of constants... Or,\n   * possibly, to create a DTM-specific field for these additional bits.\n   ",
    "links" : [ "org.w3c.dom.traversal.NodeFilter" ]
  } ],
  "methods" : [ {
    "name" : "public short acceptNode(int nodeHandle, int whatToShow)",
    "returnType" : "short",
    "comment" : "\n   * Test whether a specified node is visible in the logical view of a\n   * <code>DTMIterator</code>. Normally, this function\n   * will be called by the implementation of <code>DTMIterator</code>; \n   * it is not normally called directly from\n   * user code.\n   * \n   * @param nodeHandle int Handle of the node.\n   * @param whatToShow one of SHOW_XXX values.\n   * @return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.\n   ",
    "links" : [ ]
  }, {
    "name" : "public short acceptNode(int nodeHandle, int whatToShow, int expandedName)",
    "returnType" : "short",
    "comment" : "\n   * Test whether a specified node is visible in the logical view of a\n   * <code>DTMIterator</code>. Normally, this function\n   * will be called by the implementation of <code>DTMIterator</code>; \n   * it is not normally called directly from\n   * user code.\n   * <p>\n   * TODO: Should this be setNameMatch(expandedName) followed by accept()?\n   * Or will we really be testing a different name at every invocation?\n   * \n   * <p>%REVIEW% Under what circumstances will this be used? The cases\n   * I've considered are just as easy and just about as efficient if\n   * the name test is performed in the DTMIterator... -- Joe</p>\n   * \n   * <p>%REVIEW% Should that 0xFFFF have a mnemonic assigned to it?\n   * Also: This representation is assuming the expanded name is indeed\n   * split into high/low 16-bit halfwords. If we ever change the\n   * balance between namespace and localname bits (eg because we\n   * decide there are many more localnames than namespaces, which is\n   * fairly likely), this is going to break. It might be safer to\n   * encapsulate the details with a makeExpandedName method and make\n   * that responsible for setting up the wildcard version as well.</p>\n   * \n   * @param nodeHandle int Handle of the node.\n   * @param whatToShow one of SHOW_XXX values.\n   * @param expandedName a value defining the exanded name as defined in \n   *                     the DTM interface.  Wild cards will be defined \n   *                     by 0xFFFF in the namespace and/or localname\n   *\t\t\t portion of the expandedName.\n   * @return one of FILTER_ACCEPT, FILTER_REJECT, or FILTER_SKIP.  ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public short acceptNode(int nodeHandle, int whatToShow)", "public short acceptNode(int nodeHandle, int whatToShow, int expandedName)" ],
  "variableNames" : [ "SHOW_ALL", "SHOW_ELEMENT", "SHOW_ATTRIBUTE", "SHOW_TEXT", "SHOW_CDATA_SECTION", "SHOW_ENTITY_REFERENCE", "SHOW_ENTITY", "SHOW_PROCESSING_INSTRUCTION", "SHOW_COMMENT", "SHOW_DOCUMENT", "SHOW_DOCUMENT_TYPE", "SHOW_DOCUMENT_FRAGMENT", "SHOW_NOTATION", "SHOW_NAMESPACE", "SHOW_BYFUNCTION" ]
}