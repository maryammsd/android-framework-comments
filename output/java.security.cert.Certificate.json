{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/Certificate.java",
  "packageName" : "java.security.cert",
  "className" : "Certificate",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "type",
    "type" : "String",
    "comment" : " the certificate type",
    "links" : [ ]
  }, {
    "name" : "hash",
    "type" : "int",
    "comment" : " Default to -1",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final String getType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the type of this certificate.\n     *\n     * @return the type of this certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this certificate for equality with the specified\n     * object. If the {@code other} object is an\n     * {@code instanceof} {@code Certificate}, then\n     * its encoded form is retrieved and compared with the\n     * encoded form of this certificate.\n     *\n     * @param other the object to test for equality with this certificate.\n     * @return true iff the encoded forms of the two certificates\n     * match, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode value for this certificate from its\n     * encoded form.\n     *\n     * @return the hashcode value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getEncoded() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encoded form of this certificate. It is\n     * assumed that each certificate type would have only a single\n     * form of encoding; for example, X.509 certificates would\n     * be encoded as ASN.1 DER.\n     *\n     * @return the encoded form of this certificate\n     *\n     * @exception CertificateEncodingException if an encoding error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this certificate was signed using the\n     * private key that corresponds to the specified public key.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException if there's no default provider.\n     * @exception SignatureException on signature errors.\n     * @exception CertificateException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this certificate was signed using the\n     * private key that corresponds to the specified public key.\n     * This method uses the signature verification engine\n     * supplied by the specified provider.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     * @param sigProvider the name of the signature provider.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException on incorrect provider.\n     * @exception SignatureException on signature errors.\n     * @exception CertificateException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void verify(PublicKey key, Provider sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this certificate was signed using the\n     * private key that corresponds to the specified public key.\n     * This method uses the signature verification engine\n     * supplied by the specified provider. Note that the specified\n     * Provider object does not have to be registered in the provider list.\n     *\n     * <p> This method was added to version 1.8 of the Java Platform\n     * Standard Edition. In order to maintain backwards compatibility with\n     * existing service providers, this method cannot be {@code abstract}\n     * and by default throws an {@code UnsupportedOperationException}.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     * @param sigProvider the signature provider.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception SignatureException on signature errors.\n     * @exception CertificateException on encoding errors.\n     * @exception UnsupportedOperationException if the method is not supported\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this certificate.\n     *\n     * @return a string representation of this certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "\n     * Gets the public key from this certificate.\n     *\n     * @return the public key.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object writeReplace() throws java.io.ObjectStreamException",
    "returnType" : "Object",
    "comment" : "\n     * Replace the Certificate to be serialized.\n     *\n     * @return the alternate Certificate object to be serialized\n     *\n     * @throws java.io.ObjectStreamException if a new object representing\n     * this Certificate could not be created\n     * @since 1.3\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final String getType()", "public boolean equals(Object other)", "public int hashCode()", "public abstract byte[] getEncoded() throws CertificateEncodingException", "public abstract void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public abstract void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public void verify(PublicKey key, Provider sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, SignatureException", "public abstract String toString()", "public abstract PublicKey getPublicKey()", "protected Object writeReplace() throws java.io.ObjectStreamException" ],
  "variableNames" : [ "serialVersionUID", "type", "hash" ]
}