{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/parsing/result/ParseTypeImpl.java",
  "packageName" : "android.content.pm.parsing.result",
  "className" : "ParseTypeImpl",
  "comment" : " @hide ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_FILL_STACK_TRACE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_LOG_ON_ERROR",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG_THROW_ALL_ERRORS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResult",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorMessage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "Exception",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeferredErrors",
    "type" : "ArrayMap<Long, String>",
    "comment" : "\n     * Errors encountered before targetSdkVersion is known.\n     * The size upper bound is the number of longs in {@link DeferredError}\n     ",
    "links" : [ "DeferredError" ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkVersion",
    "type" : "Integer",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParseTypeImpl forParsingWithoutPlatformCompat()",
    "returnType" : "ParseTypeImpl",
    "comment" : "\n     * Specifically for {@link PackageManager#getPackageArchiveInfo(String, int)} where\n     * {@link IPlatformCompat} cannot be used because the cross-package READ_COMPAT_CHANGE_CONFIG\n     * permission cannot be obtained.\n     ",
    "links" : [ "com.android.internal.compat.IPlatformCompat", "android.content.pm.PackageManager#getPackageArchiveInfo(String" ]
  }, {
    "name" : "public static ParseTypeImpl forDefaultParsing()",
    "returnType" : "ParseTypeImpl",
    "comment" : "\n     * Assumes {@link Context#PLATFORM_COMPAT_SERVICE} is available to the caller. For use\n     * with {@link android.content.pm.parsing.ApkLiteParseUtils} or similar where parsing is\n     * done outside of {@link com.android.server.pm.PackageManagerService}.\n     ",
    "links" : [ "com.android.server.pm.PackageManagerService", "android.content.Context#PLATFORM_COMPAT_SERVICE", "android.content.pm.parsing.ApkLiteParseUtils" ]
  }, {
    "name" : "public ParseInput reset()",
    "returnType" : "ParseInput",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> success(ResultType result)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<?> deferError(@NonNull String parseError, long deferredError)",
    "returnType" : "ParseResult<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<?> enableDeferredError(String packageName, int targetSdkVersion)",
    "returnType" : "ParseResult<?>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> skip(@NonNull String parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> error(int parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> error(@NonNull String parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> error(int errorCode, @Nullable String errorMessage)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> error(ParseResult<?> intentResult)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseResult<ResultType> error(int errorCode, @Nullable String errorMessage, Exception exception)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object getResult()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSuccess()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isError()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getErrorCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getErrorMessage()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Exception getException()",
    "returnType" : "Exception",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG_FILL_STACK_TRACE", "DEBUG_LOG_ON_ERROR", "DEBUG_THROW_ALL_ERRORS", "mCallback", "mResult", "mErrorCode", "mErrorMessage", "mException", "mDeferredErrors", "mPackageName", "mTargetSdkVersion" ],
  "methodNames" : [ "public static ParseTypeImpl forParsingWithoutPlatformCompat()", "public static ParseTypeImpl forDefaultParsing()", "public ParseInput reset()", "public ParseResult<ResultType> success(ResultType result)", "public ParseResult<?> deferError(@NonNull String parseError, long deferredError)", "public ParseResult<?> enableDeferredError(String packageName, int targetSdkVersion)", "public ParseResult<ResultType> skip(@NonNull String parseError)", "public ParseResult<ResultType> error(int parseError)", "public ParseResult<ResultType> error(@NonNull String parseError)", "public ParseResult<ResultType> error(int errorCode, @Nullable String errorMessage)", "public ParseResult<ResultType> error(ParseResult<?> intentResult)", "public ParseResult<ResultType> error(int errorCode, @Nullable String errorMessage, Exception exception)", "public Object getResult()", "public boolean isSuccess()", "public boolean isError()", "public int getErrorCode()", "public String getErrorMessage()", "public Exception getException()" ]
}