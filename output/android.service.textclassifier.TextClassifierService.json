{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/textclassifier/TextClassifierService.java",
  "packageName" : "android.service.textclassifier",
  "className" : "TextClassifierService",
  "comment" : "\n * Abstract base class for the TextClassifier service.\n *\n * <p>A TextClassifier service provides text classification related features for the system.\n * The system's default TextClassifierService provider is configured in\n * {@code config_defaultTextClassifierPackage}. If this config has no value, a\n * {@link android.view.textclassifier.TextClassifierImpl} is loaded in the calling app's process.\n *\n * <p>See: {@link TextClassifier}.\n * See: {@link TextClassificationManager}.\n *\n * <p>Include the following in the manifest:\n *\n * <pre>\n * {@literal\n * <service android:name=\".YourTextClassifierService\"\n *          android:permission=\"android.permission.BIND_TEXTCLASSIFIER_SERVICE\">\n *     <intent-filter>\n *         <action android:name=\"android.service.textclassifier.TextClassifierService\" />\n *     </intent-filter>\n * </service>}</pre>\n *\n * <p>From {@link android.os.Build.VERSION_CODES#Q} onward, all callbacks are called on the main\n * thread. Prior to Q, there is no guarantee on what thread the callback will happen. You should\n * make sure the callbacks are executed in your desired thread by using a executor, a handler or\n * something else along the line.\n *\n * @see TextClassifier\n * @hide\n ",
  "links" : [ "android.view.textclassifier.TextClassifier", "android.os.Build.VERSION_CODES#Q", "android.view.textclassifier.TextClassifierImpl", "android.view.textclassifier.TextClassificationManager" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     * To be supported, the service must also require the\n     * {@link android.Manifest.permission#BIND_TEXTCLASSIFIER_SERVICE} permission so\n     * that other applications can not abuse it.\n     ",
    "links" : [ "android.Manifest.permission#BIND_TEXTCLASSIFIER_SERVICE", "android.content.Intent" ]
  }, {
    "name" : "CONNECTED",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "DISCONNECTED",
    "type" : "int",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "KEY_RESULT",
    "type" : "String",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "mMainThreadHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSingleThreadExecutor",
    "type" : "ExecutorService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "ITextClassifierService.Stub",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onUnbind(@NonNull Intent intent)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system connects to service.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the Android system disconnects from the service.\n     *\n     * <p> At this point this service may no longer be an active {@link TextClassifierService}.\n     ",
    "links" : [ "android.service.textclassifier.TextClassifierService" ]
  }, {
    "name" : "public abstract void onSuggestSelection(@Nullable TextClassificationSessionId sessionId, @NonNull TextSelection.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextSelection> callback)",
    "returnType" : "void",
    "comment" : "\n     * Returns suggested text selection start and end indices, recognized entity types, and their\n     * associated confidence scores. The entity types are ordered from highest to lowest scoring.\n     *\n     * @param sessionId the session id\n     * @param request the text selection request\n     * @param cancellationSignal object to watch for canceling the current operation\n     * @param callback the callback to return the result to\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onClassifyText(@Nullable TextClassificationSessionId sessionId, @NonNull TextClassification.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextClassification> callback)",
    "returnType" : "void",
    "comment" : "\n     * Classifies the specified text and returns a {@link TextClassification} object that can be\n     * used to generate a widget for handling the classified text.\n     *\n     * @param sessionId the session id\n     * @param request the text classification request\n     * @param cancellationSignal object to watch for canceling the current operation\n     * @param callback the callback to return the result to\n     ",
    "links" : [ "android.view.textclassifier.TextClassification" ]
  }, {
    "name" : "public abstract void onGenerateLinks(@Nullable TextClassificationSessionId sessionId, @NonNull TextLinks.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextLinks> callback)",
    "returnType" : "void",
    "comment" : "\n     * Generates and returns a {@link TextLinks} that may be applied to the text to annotate it with\n     * links information.\n     *\n     * @param sessionId the session id\n     * @param request the text classification request\n     * @param cancellationSignal object to watch for canceling the current operation\n     * @param callback the callback to return the result to\n     ",
    "links" : [ "android.view.textclassifier.TextLinks" ]
  }, {
    "name" : "public void onDetectLanguage(@Nullable TextClassificationSessionId sessionId, @NonNull TextLanguage.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextLanguage> callback)",
    "returnType" : "void",
    "comment" : "\n     * Detects and returns the language of the give text.\n     *\n     * @param sessionId the session id\n     * @param request the language detection request\n     * @param cancellationSignal object to watch for canceling the current operation\n     * @param callback the callback to return the result to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSuggestConversationActions(@Nullable TextClassificationSessionId sessionId, @NonNull ConversationActions.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<ConversationActions> callback)",
    "returnType" : "void",
    "comment" : "\n     * Suggests and returns a list of actions according to the given conversation.\n     *\n     * @param sessionId the session id\n     * @param request the conversation actions request\n     * @param cancellationSignal object to watch for canceling the current operation\n     * @param callback the callback to return the result to\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSelectionEvent(@Nullable TextClassificationSessionId sessionId, @NonNull SelectionEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Writes the selection event.\n     * This is called when a selection event occurs. e.g. user changed selection; or smart selection\n     * happened.\n     *\n     * <p>The default implementation ignores the event.\n     *\n     * @param sessionId the session id\n     * @param event the selection event\n     * @deprecated\n     *      Use {@link #onTextClassifierEvent(TextClassificationSessionId, TextClassifierEvent)}\n     *      instead\n     ",
    "links" : [ "#onTextClassifierEvent(TextClassificationSessionId" ]
  }, {
    "name" : "public void onTextClassifierEvent(@Nullable TextClassificationSessionId sessionId, @NonNull TextClassifierEvent event)",
    "returnType" : "void",
    "comment" : "\n     * Writes the TextClassifier event.\n     * This is called when a TextClassifier event occurs. e.g. user changed selection,\n     * smart selection happened, or a link was clicked.\n     *\n     * <p>The default implementation ignores the event.\n     *\n     * @param sessionId the session id\n     * @param event the TextClassifier event\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onCreateTextClassificationSession(@NonNull TextClassificationContext context, @NonNull TextClassificationSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Creates a new text classification session for the specified context.\n     *\n     * @param context the text classification context\n     * @param sessionId the session's Id\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onDestroyTextClassificationSession(@NonNull TextClassificationSessionId sessionId)",
    "returnType" : "void",
    "comment" : "\n     * Destroys the text classification session identified by the specified sessionId.\n     *\n     * @param sessionId the id of the session to destroy\n     ",
    "links" : [ ]
  }, {
    "name" : "public final TextClassifier getLocalTextClassifier()",
    "returnType" : "TextClassifier",
    "comment" : "\n     * Returns a TextClassifier that runs in this service's process.\n     * If the local TextClassifier is disabled, this returns {@link TextClassifier#NO_OP}.\n     *\n     * @deprecated Use {@link #getDefaultTextClassifierImplementation(Context)} instead.\n     ",
    "links" : [ "android.view.textclassifier.TextClassifier#NO_OP", "#getDefaultTextClassifierImplementation(Context)" ]
  }, {
    "name" : "public static TextClassifier getDefaultTextClassifierImplementation(@NonNull Context context)",
    "returnType" : "TextClassifier",
    "comment" : "\n     * Returns the platform's default TextClassifier implementation.\n     *\n     * @throws RuntimeException if the TextClassifier from\n     *                          PackageManager#getDefaultTextClassifierPackageName() calls\n     *                          this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static T getResponse(Bundle bundle)",
    "returnType" : "T",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static void putResponse(Bundle bundle, T response)",
    "returnType" : "void",
    "comment" : " @hide *",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName getServiceComponentName(Context context, String packageName, int resolveFlags)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the component name of the textclassifier service from the given package.\n     * Otherwise, returns null.\n     *\n     * @param context\n     * @param packageName  the package to look for.\n     * @param resolveFlags the flags that are used by PackageManager to resolve the component name.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final IBinder onBind(@NonNull Intent intent)", "public boolean onUnbind(@NonNull Intent intent)", "public void onConnected()", "public void onDisconnected()", "public abstract void onSuggestSelection(@Nullable TextClassificationSessionId sessionId, @NonNull TextSelection.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextSelection> callback)", "public abstract void onClassifyText(@Nullable TextClassificationSessionId sessionId, @NonNull TextClassification.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextClassification> callback)", "public abstract void onGenerateLinks(@Nullable TextClassificationSessionId sessionId, @NonNull TextLinks.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextLinks> callback)", "public void onDetectLanguage(@Nullable TextClassificationSessionId sessionId, @NonNull TextLanguage.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<TextLanguage> callback)", "public void onSuggestConversationActions(@Nullable TextClassificationSessionId sessionId, @NonNull ConversationActions.Request request, @NonNull CancellationSignal cancellationSignal, @NonNull Callback<ConversationActions> callback)", "public void onSelectionEvent(@Nullable TextClassificationSessionId sessionId, @NonNull SelectionEvent event)", "public void onTextClassifierEvent(@Nullable TextClassificationSessionId sessionId, @NonNull TextClassifierEvent event)", "public void onCreateTextClassificationSession(@NonNull TextClassificationContext context, @NonNull TextClassificationSessionId sessionId)", "public void onDestroyTextClassificationSession(@NonNull TextClassificationSessionId sessionId)", "public final TextClassifier getLocalTextClassifier()", "public static TextClassifier getDefaultTextClassifierImplementation(@NonNull Context context)", "public static T getResponse(Bundle bundle)", "public static void putResponse(Bundle bundle, T response)", "public static ComponentName getServiceComponentName(Context context, String packageName, int resolveFlags)" ],
  "variableNames" : [ "LOG_TAG", "SERVICE_INTERFACE", "CONNECTED", "DISCONNECTED", "KEY_RESULT", "mMainThreadHandler", "mSingleThreadExecutor", "mBinder" ]
}