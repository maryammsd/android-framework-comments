{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/DisplayCutout.java",
  "packageName" : "android.view",
  "className" : "DisplayCutout",
  "comment" : "\n * Represents the area of the display that is not functional for displaying content.\n *\n * <p>{@code DisplayCutout} is immutable.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMULATION_OVERLAY_CATEGORY",
    "type" : "String",
    "comment" : "\n     * Category for overlays that allow emulating a display cutout on devices that don't have\n     * one.\n     *\n     * @see android.content.om.IOverlayManager\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ZERO_RECT",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_CUTOUT",
    "type" : "DisplayCutout",
    "comment" : "\n     * An instance where {@link #isEmpty()} returns {@code true}.\n     *\n     * @hide\n     ",
    "links" : [ "#isEmpty()" ]
  }, {
    "name" : "NULL_PAIR",
    "type" : "Pair<Path, DisplayCutout>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHE_LOCK",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedSpec",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedDisplayWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedDisplayHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedDensity",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedCutout",
    "type" : "Pair<Path, DisplayCutout>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCachedWaterfallInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSafeInsets",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaterfallInsets",
    "type" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOUNDS_POSITION_LEFT",
    "type" : "int",
    "comment" : "\n     * The bound is at the left of the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BOUNDS_POSITION_TOP",
    "type" : "int",
    "comment" : "\n     * The bound is at the top of the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BOUNDS_POSITION_RIGHT",
    "type" : "int",
    "comment" : "\n     * The bound is at the right of the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BOUNDS_POSITION_BOTTOM",
    "type" : "int",
    "comment" : "\n     * The bound is at the bottom of the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BOUNDS_POSITION_LENGTH",
    "type" : "int",
    "comment" : "\n     * The number of possible positions at which bounds can be located.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mBounds",
    "type" : "Bounds",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Rect getCopyOrRef(Rect r, boolean copyArguments)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getWaterfallInsets()",
    "returnType" : "Insets",
    "comment" : "\n     * Returns the insets representing the curved areas of a waterfall display.\n     *\n     * A waterfall display has curved areas along the edges of the screen. Apps should be careful\n     * when showing UI and handling touch input in those insets because the curve may impair\n     * legibility and can frequently lead to unintended touch inputs.\n     *\n     * @return the insets for the curved areas of a waterfall display in pixels or {@code\n     * Insets.NONE} if there are no curved areas or they don't overlap with the window.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Rect[] extractBoundsFromList(Rect safeInsets, List<Rect> boundingRects)",
    "returnType" : "Rect[]",
    "comment" : "\n     * Find the position of the bounding rect, and create an array of Rect whose index represents\n     * the position (= BoundsPosition).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundsEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there is no cutout, i.e. the bounds are empty.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the safe insets are empty (and therefore the current view does not\n     * overlap with the cutout or cutout area).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSafeInsetTop()",
    "returnType" : "int",
    "comment" : "\n     * Returns the inset from the top which avoids the display cutout in pixels.\n     *\n     * @see WindowInsets.Type#displayCutout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSafeInsetBottom()",
    "returnType" : "int",
    "comment" : "\n     * Returns the inset from the bottom which avoids the display cutout in pixels.\n     *\n     * @see WindowInsets.Type#displayCutout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSafeInsetLeft()",
    "returnType" : "int",
    "comment" : "\n     * Returns the inset from the left which avoids the display cutout in pixels.\n     *\n     * @see WindowInsets.Type#displayCutout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSafeInsetRight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the inset from the right which avoids the display cutout in pixels.\n     *\n     * @see WindowInsets.Type#displayCutout()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getSafeInsets()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the safe insets in a rect in pixel units.\n     *\n     * @return a rect which is set to the safe insets.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Rect> getBoundingRects()",
    "returnType" : "List<Rect>",
    "comment" : "\n     * Returns a list of {@code Rect}s, each of which is the bounding rectangle for a non-functional\n     * area on the display.\n     *\n     * There will be at most one non-functional area per short edge of the device, and none on\n     * the long edges.\n     *\n     * @return a list of bounding {@code Rect}s, one for each display cutout area. No empty Rect is\n     * returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect[] getBoundingRectsAll()",
    "returnType" : "Rect[]",
    "comment" : "\n     * Returns an array of {@code Rect}s, each of which is the bounding rectangle for a non-\n     * functional area on the display. Ordinal value of BoundPosition is used as an index of\n     * the array.\n     *\n     * There will be at most one non-functional area per short edge of the device, and none on\n     * the long edges.\n     *\n     * @return an array of bounding {@code Rect}s, one for each display cutout area. This might\n     * contain ZERO_RECT, which means there is no cutout area at the position.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundingRectLeft()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a bounding rectangle for a non-functional area on the display which is located on\n     * the left of the screen.\n     *\n     * @return bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle\n     * is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundingRectTop()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a bounding rectangle for a non-functional area on the display which is located on\n     * the top of the screen.\n     *\n     * @return bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle\n     * is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundingRectRight()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a bounding rectangle for a non-functional area on the display which is located on\n     * the right of the screen.\n     *\n     * @return bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle\n     * is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Rect getBoundingRectBottom()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a bounding rectangle for a non-functional area on the display which is located on\n     * the bottom of the screen.\n     *\n     * @return bounding rectangle in pixels. In case of no bounding rectangle, an empty rectangle\n     * is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayCutout inset(int insetLeft, int insetTop, int insetRight, int insetBottom)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Insets the reference frame of the cutout in the given directions.\n     *\n     * @return a copy of this instance which has been inset\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Rect insetInsets(int insetLeft, int insetTop, int insetRight, int insetBottom, Rect insets)",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayCutout replaceSafeInsets(Rect safeInsets)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Returns a copy of this instance with the safe insets replaced with the parameter.\n     *\n     * @param safeInsets the new safe insets in pixels\n     * @return a copy of this instance with the safe insets replaced with the argument.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int atLeastZero(int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static DisplayCutout fromBoundingRect(int left, int top, int right, int bottom, @BoundsPosition int pos)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Creates an instance from a bounding rect.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayCutout fromBoundsAndWaterfall(Rect[] bounds, Insets waterfallInsets)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Creates an instance from a bounding and waterfall insets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayCutout fromBounds(Rect[] bounds)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Creates an instance from a bounding {@link Path}.\n     *\n     * @hide\n     ",
    "links" : [ "android.graphics.Path" ]
  }, {
    "name" : "public static DisplayCutout fromResourcesRectApproximation(Resources res, int displayWidth, int displayHeight)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Creates the display cutout according to\n     * @android:string/config_mainBuiltInDisplayCutoutRectApproximation, which is the closest\n     * rectangle-base approximation of the cutout.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Path pathFromResources(Resources res, int displayWidth, int displayHeight)",
    "returnType" : "Path",
    "comment" : "\n     * Creates an instance according to @android:string/config_mainBuiltInDisplayCutout.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayCutout fromSpec(String spec, int displayWidth, int displayHeight, float density, Insets waterfallInsets)",
    "returnType" : "DisplayCutout",
    "comment" : "\n     * Creates an instance according to the supplied {@link android.util.PathParser.PathData} spec.\n     *\n     * @hide\n     ",
    "links" : [ "android.util.PathParser.PathData" ]
  }, {
    "name" : "private static Pair<Path, DisplayCutout> pathAndDisplayCutoutFromSpec(String spec, int displayWidth, int displayHeight, float density, Insets waterfallInsets)",
    "returnType" : "Pair<Path, DisplayCutout>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Insets loadWaterfallInset(Resources res)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "EMULATION_OVERLAY_CATEGORY", "ZERO_RECT", "NO_CUTOUT", "NULL_PAIR", "CACHE_LOCK", "sCachedSpec", "sCachedDisplayWidth", "sCachedDisplayHeight", "sCachedDensity", "sCachedCutout", "sCachedWaterfallInsets", "mSafeInsets", "mWaterfallInsets", "BOUNDS_POSITION_LEFT", "BOUNDS_POSITION_TOP", "BOUNDS_POSITION_RIGHT", "BOUNDS_POSITION_BOTTOM", "BOUNDS_POSITION_LENGTH", "mBounds" ],
  "methodNames" : [ "private static Rect getCopyOrRef(Rect r, boolean copyArguments)", "public Insets getWaterfallInsets()", "public static Rect[] extractBoundsFromList(Rect safeInsets, List<Rect> boundingRects)", "public boolean isBoundsEmpty()", "public boolean isEmpty()", "public int getSafeInsetTop()", "public int getSafeInsetBottom()", "public int getSafeInsetLeft()", "public int getSafeInsetRight()", "public Rect getSafeInsets()", "public List<Rect> getBoundingRects()", "public Rect[] getBoundingRectsAll()", "public Rect getBoundingRectLeft()", "public Rect getBoundingRectTop()", "public Rect getBoundingRectRight()", "public Rect getBoundingRectBottom()", "public int hashCode()", "public boolean equals(Object o)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public DisplayCutout inset(int insetLeft, int insetTop, int insetRight, int insetBottom)", "private Rect insetInsets(int insetLeft, int insetTop, int insetRight, int insetBottom, Rect insets)", "public DisplayCutout replaceSafeInsets(Rect safeInsets)", "private static int atLeastZero(int value)", "public static DisplayCutout fromBoundingRect(int left, int top, int right, int bottom, @BoundsPosition int pos)", "public static DisplayCutout fromBoundsAndWaterfall(Rect[] bounds, Insets waterfallInsets)", "public static DisplayCutout fromBounds(Rect[] bounds)", "public static DisplayCutout fromResourcesRectApproximation(Resources res, int displayWidth, int displayHeight)", "public static Path pathFromResources(Resources res, int displayWidth, int displayHeight)", "public static DisplayCutout fromSpec(String spec, int displayWidth, int displayHeight, float density, Insets waterfallInsets)", "private static Pair<Path, DisplayCutout> pathAndDisplayCutoutFromSpec(String spec, int displayWidth, int displayHeight, float density, Insets waterfallInsets)", "private static Insets loadWaterfallInset(Resources res)" ]
}