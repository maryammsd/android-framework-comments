{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/feature/MmTelFeature.java",
  "packageName" : "android.telephony.ims.feature",
  "className" : "MmTelFeature",
  "comment" : "\n * Base implementation for Voice and SMS (IR-92) and Video (IR-94) IMS support.\n *\n * Any class wishing to use MmTelFeature should extend this class and implement all methods that the\n * service supports.\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImsMMTelBinder",
    "type" : "IImsMmTelFeature",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_CALL_IMS",
    "type" : "int",
    "comment" : "\n     * To be returned by {@link #shouldProcessCall(String[])} when the ImsService should process the\n     * outgoing call as IMS.\n     * @hide\n     ",
    "links" : [ "#shouldProcessCall" ]
  }, {
    "name" : "PROCESS_CALL_CSFB",
    "type" : "int",
    "comment" : "\n     * To be returned by {@link #shouldProcessCall(String[])} when the telephony framework should\n     * not process the outgoing call as IMS and should instead use circuit switch.\n     * @hide\n     ",
    "links" : [ "#shouldProcessCall" ]
  }, {
    "name" : "EXTRA_IS_USSD",
    "type" : "String",
    "comment" : "\n     * If the flag is present and true, it indicates that the incoming call is for USSD.\n     * <p>\n     * This is an optional boolean flag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IS_UNKNOWN_CALL",
    "type" : "String",
    "comment" : "\n     * If this flag is present and true, this call is marked as an unknown dialing call instead\n     * of an incoming call. An example of such a call is a call that is originated by sending\n     * commands (like AT commands) directly to the modem without Android involvement or dialing\n     * calls appearing over IMS when the modem does a silent redial from circuit-switched to IMS in\n     * certain situations.\n     * <p>\n     * This is an optional boolean flag.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "IImsMmTelListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setListener(IImsMmTelListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @param listener A {@link Listener} used when the MmTelFeature receives an incoming call and\n     *     notifies the framework.\n     ",
    "links" : [ "Listener" ]
  }, {
    "name" : "private IImsMmTelListener getListener()",
    "returnType" : "IImsMmTelListener",
    "comment" : "\n     * @return the listener associated with this MmTelFeature. May be null if it has not been set\n     * by the framework yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final MmTelCapabilities queryCapabilityStatus()",
    "returnType" : "MmTelCapabilities",
    "comment" : "\n     * The current capability status that this MmTelFeature has defined is available. This\n     * configuration will be used by the platform to figure out which capabilities are CURRENTLY\n     * available to be used.\n     *\n     * Should be a subset of the capabilities that are enabled by the framework in\n     * {@link #changeEnabledCapabilities}.\n     * @return A copy of the current MmTelFeature capability status.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public final void notifyCapabilitiesStatusChanged(@NonNull MmTelCapabilities c)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that the status of the Capabilities has changed. Even though the\n     * MmTelFeature capability may be enabled by the framework, the status may be disabled due to\n     * the feature being unavailable from the network.\n     * @param c The current capability status of the MmTelFeature. If a capability is disabled, then\n     * the status of that capability is disabled. This can happen if the network does not currently\n     * support the capability that is enabled. A capability that is disabled by the framework (via\n     * {@link #changeEnabledCapabilities}) should also show the status as disabled.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public final void notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework of an incoming call.\n     * @param c The {@link ImsCallSessionImplBase} of the new incoming call.\n     * @param extras A bundle containing extra parameters related to the call. See\n     * {@link #EXTRA_IS_UNKNOWN_CALL} and {@link #EXTRA_IS_USSD} above.\n      * @hide\n     ",
    "links" : [ "ImsCallSessionImplBase", "#EXTRA_IS_UNKNOWN_CALL", "#EXTRA_IS_USSD" ]
  }, {
    "name" : "public final void notifyRejectedCall(@NonNull ImsCallProfile callProfile, @NonNull ImsReasonInfo reason)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework that a call has been implicitly rejected by this MmTelFeature\n     * during call setup.\n     * @param callProfile The {@link ImsCallProfile} IMS call profile with details.\n     *        This can be null if no call information is available for the rejected call.\n     * @param reason The {@link ImsReasonInfo} call rejection reason.\n     * @hide\n     ",
    "links" : [ "ImsCallProfile", "ImsReasonInfo" ]
  }, {
    "name" : "public final void notifyIncomingCallSession(IImsCallSession c, Bundle extras)",
    "returnType" : "void",
    "comment" : "\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void notifyVoiceMessageCountUpdate(int count)",
    "returnType" : "void",
    "comment" : "\n     * Notify the framework of a change in the Voice Message count.\n     * @link count the new Voice Message count.\n     * @hide\n     ",
    "links" : [ "count" ]
  }, {
    "name" : "public boolean queryCapabilityConfiguration(@MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides the MmTelFeature with the ability to return the framework Capability Configuration\n     * for a provided Capability. If the framework calls {@link #changeEnabledCapabilities} and\n     * includes a capability A to enable or disable, this method should return the correct enabled\n     * status for capability A.\n     * @param capability The capability that we are querying the configuration for.\n     * @return true if the capability is enabled, false otherwise.\n     * @hide\n     ",
    "links" : [ "#changeEnabledCapabilities" ]
  }, {
    "name" : "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)",
    "returnType" : "void",
    "comment" : "\n     * The MmTelFeature should override this method to handle the enabling/disabling of\n     * MmTel Features, defined in {@link MmTelCapabilities.MmTelCapability}. The framework assumes\n     * the {@link CapabilityChangeRequest} was processed successfully. If a subset of capabilities\n     * could not be set to their new values,\n     * {@link CapabilityCallbackProxy#onChangeCapabilityConfigurationError} must be called\n     * individually for each capability whose processing resulted in an error.\n     *\n     * Enabling/Disabling a capability here indicates that the capability should be registered or\n     * deregistered (depending on the capability change) and become available or unavailable to\n     * the framework.\n     * * @hide\n     ",
    "links" : [ "MmTelCapabilities.MmTelCapability", "CapabilityChangeRequest", "CapabilityCallbackProxy#onChangeCapabilityConfigurationError" ]
  }, {
    "name" : "public ImsCallProfile createCallProfile(int callSessionType, int callType)",
    "returnType" : "ImsCallProfile",
    "comment" : "\n     * Creates a {@link ImsCallProfile} from the service capabilities & IMS registration state.\n     *\n     * @param callSessionType a service type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NONE}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NORMAL}\n     *        {@link ImsCallProfile#SERVICE_TYPE_EMERGENCY}\n     * @param callType a call type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#CALL_TYPE_VOICE}\n     *        {@link ImsCallProfile#CALL_TYPE_VT}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_RX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_NODIR}\n     *        {@link ImsCallProfile#CALL_TYPE_VS}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_RX}\n     * @return a {@link ImsCallProfile} object\n     * @hide\n     ",
    "links" : [ "ImsCallProfile", "ImsCallProfile", "ImsCallProfile#SERVICE_TYPE_NONE", "ImsCallProfile#SERVICE_TYPE_NORMAL", "ImsCallProfile#SERVICE_TYPE_EMERGENCY", "ImsCallProfile", "ImsCallProfile#CALL_TYPE_VOICE", "ImsCallProfile#CALL_TYPE_VT", "ImsCallProfile#CALL_TYPE_VT_TX", "ImsCallProfile#CALL_TYPE_VT_RX", "ImsCallProfile#CALL_TYPE_VT_NODIR", "ImsCallProfile#CALL_TYPE_VS", "ImsCallProfile#CALL_TYPE_VS_TX", "ImsCallProfile#CALL_TYPE_VS_RX", "ImsCallProfile" ]
  }, {
    "name" : "public IImsCallSession createCallSessionInterface(ImsCallProfile profile) throws RemoteException",
    "returnType" : "IImsCallSession",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImsCallSessionImplBase createCallSession(@NonNull ImsCallProfile profile)",
    "returnType" : "ImsCallSessionImplBase",
    "comment" : "\n     * Creates an {@link ImsCallSession} with the specified call profile.\n     * Use other methods, if applicable, instead of interacting with\n     * {@link ImsCallSession} directly.\n     *\n     * @param profile a call profile to make the call\n     * @hide\n     ",
    "links" : [ "ImsCallSession", "ImsCallSession" ]
  }, {
    "name" : "public int shouldProcessCall(@NonNull String[] numbers)",
    "returnType" : "int",
    "comment" : "\n     * Called by the framework to determine if the outgoing call, designated by the outgoing\n     * {@link String}s, should be processed as an IMS call or CSFB call. If this method's\n     * functionality is not overridden, the platform will process every call as IMS as long as the\n     * MmTelFeature reports that the {@link MmTelCapabilities#CAPABILITY_TYPE_VOICE} capability is\n     * available.\n     * @param numbers An array of {@link String}s that will be used for placing the call. There can\n     *         be multiple {@link String}s listed in the case when we want to place an outgoing\n     *         call as a conference.\n     * @return a {@link ProcessCallResult} to the framework, which will be used to determine if the\n     *        call will be placed over IMS or via CSFB.\n     * @hide\n     ",
    "links" : [ "String", "MmTelCapabilities#CAPABILITY_TYPE_VOICE", "String", "String", "ProcessCallResult" ]
  }, {
    "name" : "protected IImsUt getUtInterface() throws RemoteException",
    "returnType" : "IImsUt",
    "comment" : "\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected IImsEcbm getEcbmInterface() throws RemoteException",
    "returnType" : "IImsEcbm",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public IImsMultiEndpoint getMultiEndpointInterface() throws RemoteException",
    "returnType" : "IImsMultiEndpoint",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImsUtImplBase getUt()",
    "returnType" : "ImsUtImplBase",
    "comment" : "\n     * @return The {@link ImsUtImplBase} Ut interface implementation for the supplementary service\n     * configuration.\n     * @hide\n     ",
    "links" : [ "ImsUtImplBase" ]
  }, {
    "name" : "public ImsEcbmImplBase getEcbm()",
    "returnType" : "ImsEcbmImplBase",
    "comment" : "\n     * @return The {@link ImsEcbmImplBase} Emergency call-back mode interface for emergency VoLTE\n     * calls that support it.\n     * @hide\n     ",
    "links" : [ "ImsEcbmImplBase" ]
  }, {
    "name" : "public ImsMultiEndpointImplBase getMultiEndpoint()",
    "returnType" : "ImsMultiEndpointImplBase",
    "comment" : "\n     * @return The {@link ImsMultiEndpointImplBase} implementation for implementing Dialog event\n     * package processing for multi-endpoint.\n     * @hide\n     ",
    "links" : [ "ImsMultiEndpointImplBase" ]
  }, {
    "name" : "public void setUiTtyMode(int mode, @Nullable Message onCompleteMessage)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current UI TTY mode for the MmTelFeature.\n     * @param mode An integer containing the new UI TTY Mode, can consist of\n     *         {@link TelecomManager#TTY_MODE_OFF},\n     *         {@link TelecomManager#TTY_MODE_FULL},\n     *         {@link TelecomManager#TTY_MODE_HCO},\n     *         {@link TelecomManager#TTY_MODE_VCO}\n     * @param onCompleteMessage If non-null, this MmTelFeature should call this {@link Message} when\n     *         the operation is complete by using the associated {@link android.os.Messenger} in\n     *         {@link Message#replyTo}. For example:\n     * {@code\n     *     // Set UI TTY Mode and other operations...\n     *     try {\n     *         // Notify framework that the mode was changed.\n     *         Messenger uiMessenger = onCompleteMessage.replyTo;\n     *         uiMessenger.send(onCompleteMessage);\n     *     } catch (RemoteException e) {\n     *         // Remote side is dead\n     *     }\n     * }\n     * @hide\n     ",
    "links" : [ "TelecomManager#TTY_MODE_OFF", "TelecomManager#TTY_MODE_FULL", "TelecomManager#TTY_MODE_HCO", "TelecomManager#TTY_MODE_VCO", "Message", "android.os.Messenger", "Message#replyTo" ]
  }, {
    "name" : "private void setSmsListener(IImsSmsListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void sendSms(int token, int messageRef, String format, String smsc, boolean isRetry, byte[] pdu)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void acknowledgeSmsReport(int token, int messageRef, @ImsSmsImplBase.StatusReportResult int result)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onSmsReady()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ImsSmsImplBase getSmsImplementation()",
    "returnType" : "ImsSmsImplBase",
    "comment" : "\n     * Must be overridden by IMS Provider to be able to support SMS over IMS. Otherwise a default\n     * non-functional implementation is returned.\n     *\n     * @return an instance of {@link ImsSmsImplBase} which should be implemented by the IMS\n     * Provider.\n     * @hide\n     ",
    "links" : [ "ImsSmsImplBase" ]
  }, {
    "name" : "private String getSmsFormat()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureRemoved()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureReady()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final IImsMmTelFeature getBinder()",
    "returnType" : "IImsMmTelFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "mImsMMTelBinder", "PROCESS_CALL_IMS", "PROCESS_CALL_CSFB", "EXTRA_IS_USSD", "EXTRA_IS_UNKNOWN_CALL", "mListener" ],
  "methodNames" : [ "private void setListener(IImsMmTelListener listener)", "private IImsMmTelListener getListener()", "public final MmTelCapabilities queryCapabilityStatus()", "public final void notifyCapabilitiesStatusChanged(@NonNull MmTelCapabilities c)", "public final void notifyIncomingCall(@NonNull ImsCallSessionImplBase c, @NonNull Bundle extras)", "public final void notifyRejectedCall(@NonNull ImsCallProfile callProfile, @NonNull ImsReasonInfo reason)", "public final void notifyIncomingCallSession(IImsCallSession c, Bundle extras)", "public final void notifyVoiceMessageCountUpdate(int count)", "public boolean queryCapabilityConfiguration(@MmTelCapabilities.MmTelCapability int capability, @ImsRegistrationImplBase.ImsRegistrationTech int radioTech)", "public void changeEnabledCapabilities(@NonNull CapabilityChangeRequest request, @NonNull CapabilityCallbackProxy c)", "public ImsCallProfile createCallProfile(int callSessionType, int callType)", "public IImsCallSession createCallSessionInterface(ImsCallProfile profile) throws RemoteException", "public ImsCallSessionImplBase createCallSession(@NonNull ImsCallProfile profile)", "public int shouldProcessCall(@NonNull String[] numbers)", "protected IImsUt getUtInterface() throws RemoteException", "protected IImsEcbm getEcbmInterface() throws RemoteException", "public IImsMultiEndpoint getMultiEndpointInterface() throws RemoteException", "public ImsUtImplBase getUt()", "public ImsEcbmImplBase getEcbm()", "public ImsMultiEndpointImplBase getMultiEndpoint()", "public void setUiTtyMode(int mode, @Nullable Message onCompleteMessage)", "private void setSmsListener(IImsSmsListener listener)", "private void sendSms(int token, int messageRef, String format, String smsc, boolean isRetry, byte[] pdu)", "private void acknowledgeSms(int token, int messageRef, @ImsSmsImplBase.DeliverStatusResult int result)", "private void acknowledgeSmsReport(int token, int messageRef, @ImsSmsImplBase.StatusReportResult int result)", "private void onSmsReady()", "public ImsSmsImplBase getSmsImplementation()", "private String getSmsFormat()", "public void onFeatureRemoved()", "public void onFeatureReady()", "public final IImsMmTelFeature getBinder()" ]
}