{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/Handler.java",
  "packageName" : "android.os",
  "className" : "Handler",
  "comment" : "\n * A Handler allows you to send and process {@link Message} and Runnable\n * objects associated with a thread's {@link MessageQueue}.  Each Handler\n * instance is associated with a single thread and that thread's message\n * queue. When you create a new Handler it is bound to a {@link Looper}.\n * It will deliver messages and runnables to that Looper's message\n * queue and execute them on that Looper's thread.\n *\n * <p>There are two main uses for a Handler: (1) to schedule messages and\n * runnables to be executed at some point in the future; and (2) to enqueue\n * an action to be performed on a different thread than your own.\n *\n * <p>Scheduling messages is accomplished with the\n * {@link #post}, {@link #postAtTime(Runnable, long)},\n * {@link #postDelayed}, {@link #sendEmptyMessage},\n * {@link #sendMessage}, {@link #sendMessageAtTime}, and\n * {@link #sendMessageDelayed} methods.  The <em>post</em> versions allow\n * you to enqueue Runnable objects to be called by the message queue when\n * they are received; the <em>sendMessage</em> versions allow you to enqueue\n * a {@link Message} object containing a bundle of data that will be\n * processed by the Handler's {@link #handleMessage} method (requiring that\n * you implement a subclass of Handler).\n * \n * <p>When posting or sending to a Handler, you can either\n * allow the item to be processed as soon as the message queue is ready\n * to do so, or specify a delay before it gets processed or absolute time for\n * it to be processed.  The latter two allow you to implement timeouts,\n * ticks, and other timing-based behavior.\n * \n * <p>When a\n * process is created for your application, its main thread is dedicated to\n * running a message queue that takes care of managing the top-level\n * application objects (activities, broadcast receivers, etc) and any windows\n * they create.  You can create your own threads, and communicate back with\n * the main application thread through a Handler.  This is done by calling\n * the same <em>post</em> or <em>sendMessage</em> methods as before, but from\n * your new thread.  The given Runnable or Message will then be scheduled\n * in the Handler's message queue and processed when appropriate.\n ",
  "variables" : [ {
    "name" : "FIND_POTENTIAL_LEAKS",
    "type" : "boolean",
    "comment" : "\n     * Set this flag to true to detect anonymous, local or member classes\n     * that extend this Handler class and that are not static. These kind\n     * of classes can potentially create leaks.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAIN_THREAD_HANDLER",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLooper",
    "type" : "Looper",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQueue",
    "type" : "MessageQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAsynchronous",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "IMessenger",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void handleMessage(@NonNull Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Subclasses must implement this to receive messages.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dispatchMessage(@NonNull Message msg)",
    "returnType" : "void",
    "comment" : "\n     * Handle system messages here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Handler createAsync(@NonNull Looper looper)",
    "returnType" : "Handler",
    "comment" : "\n     * Create a new Handler whose posted messages and runnables are not subject to\n     * synchronization barriers such as display vsync.\n     *\n     * <p>Messages sent to an async handler are guaranteed to be ordered with respect to one another,\n     * but not necessarily with respect to messages from other Handlers.</p>\n     *\n     * @see #createAsync(Looper, Callback) to create an async Handler with custom message handling.\n     *\n     * @param looper the Looper that the new Handler should be bound to\n     * @return a new async Handler instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Handler createAsync(@NonNull Looper looper, @NonNull Callback callback)",
    "returnType" : "Handler",
    "comment" : "\n     * Create a new Handler whose posted messages and runnables are not subject to\n     * synchronization barriers such as display vsync.\n     *\n     * <p>Messages sent to an async handler are guaranteed to be ordered with respect to one another,\n     * but not necessarily with respect to messages from other Handlers.</p>\n     *\n     * @see #createAsync(Looper) to create an async Handler without custom message handling.\n     *\n     * @param looper the Looper that the new Handler should be bound to\n     * @return a new async Handler instance\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Handler getMain()",
    "returnType" : "Handler",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static Handler mainIfNull(@Nullable Handler handler)",
    "returnType" : "Handler",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getTraceName(@NonNull Message message)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public String getMessageName(@NonNull Message message)",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representing the name of the specified message.\n     * The default implementation will either return the class name of the\n     * message callback if any, or the hexadecimal representation of the\n     * message \"what\" field.\n     *  \n     * @param message The message whose name is being queried \n     ",
    "links" : [ ]
  }, {
    "name" : "public final Message obtainMessage()",
    "returnType" : "Message",
    "comment" : "\n     * Returns a new {@link android.os.Message Message} from the global message pool. More efficient than\n     * creating and allocating new instances. The retrieved message has its handler set to this instance (Message.target == this).\n     *  If you don't want that facility, just call Message.obtain() instead.\n     ",
    "links" : [ "android.os.Message" ]
  }, {
    "name" : "public final Message obtainMessage(int what)",
    "returnType" : "Message",
    "comment" : "\n     * Same as {@link #obtainMessage()}, except that it also sets the what member of the returned Message.\n     * \n     * @param what Value to assign to the returned Message.what field.\n     * @return A Message from the global message pool.\n     ",
    "links" : [ "#obtainMessage()" ]
  }, {
    "name" : "public final Message obtainMessage(int what, @Nullable Object obj)",
    "returnType" : "Message",
    "comment" : "\n     * \n     * Same as {@link #obtainMessage()}, except that it also sets the what and obj members \n     * of the returned Message.\n     * \n     * @param what Value to assign to the returned Message.what field.\n     * @param obj Value to assign to the returned Message.obj field.\n     * @return A Message from the global message pool.\n     ",
    "links" : [ "#obtainMessage()" ]
  }, {
    "name" : "public final Message obtainMessage(int what, int arg1, int arg2)",
    "returnType" : "Message",
    "comment" : "\n     * \n     * Same as {@link #obtainMessage()}, except that it also sets the what, arg1 and arg2 members of the returned\n     * Message.\n     * @param what Value to assign to the returned Message.what field.\n     * @param arg1 Value to assign to the returned Message.arg1 field.\n     * @param arg2 Value to assign to the returned Message.arg2 field.\n     * @return A Message from the global message pool.\n     ",
    "links" : [ "#obtainMessage()" ]
  }, {
    "name" : "public final Message obtainMessage(int what, int arg1, int arg2, @Nullable Object obj)",
    "returnType" : "Message",
    "comment" : "\n     * \n     * Same as {@link #obtainMessage()}, except that it also sets the what, obj, arg1,and arg2 values on the \n     * returned Message.\n     * @param what Value to assign to the returned Message.what field.\n     * @param arg1 Value to assign to the returned Message.arg1 field.\n     * @param arg2 Value to assign to the returned Message.arg2 field.\n     * @param obj Value to assign to the returned Message.obj field.\n     * @return A Message from the global message pool.\n     ",
    "links" : [ "#obtainMessage()" ]
  }, {
    "name" : "public final boolean post(@NonNull Runnable r)",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the Runnable r to be added to the message queue.\n     * The runnable will be run on the thread to which this handler is \n     * attached. \n     *  \n     * @param r The Runnable that will be executed.\n     * \n     * @return Returns true if the Runnable was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the Runnable r to be added to the message queue, to be run\n     * at a specific time given by <var>uptimeMillis</var>.\n     * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>\n     * Time spent in deep sleep will add an additional delay to execution.\n     * The runnable will be run on the thread to which this handler is attached.\n     *\n     * @param r The Runnable that will be executed.\n     * @param uptimeMillis The absolute time at which the callback should run,\n     *         using the {@link android.os.SystemClock#uptimeMillis} time-base.\n     *  \n     * @return Returns true if the Runnable was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the Runnable will be processed -- if\n     *         the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final boolean postAtTime(@NonNull Runnable r, @Nullable Object token, long uptimeMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the Runnable r to be added to the message queue, to be run\n     * at a specific time given by <var>uptimeMillis</var>.\n     * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>\n     * Time spent in deep sleep will add an additional delay to execution.\n     * The runnable will be run on the thread to which this handler is attached.\n     *\n     * @param r The Runnable that will be executed.\n     * @param token An instance which can be used to cancel {@code r} via\n     *         {@link #removeCallbacksAndMessages}.\n     * @param uptimeMillis The absolute time at which the callback should run,\n     *         using the {@link android.os.SystemClock#uptimeMillis} time-base.\n     * \n     * @return Returns true if the Runnable was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the Runnable will be processed -- if\n     *         the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     *         \n     * @see android.os.SystemClock#uptimeMillis\n     ",
    "links" : [ "#removeCallbacksAndMessages", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final boolean postDelayed(@NonNull Runnable r, long delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the Runnable r to be added to the message queue, to be run\n     * after the specified amount of time elapses.\n     * The runnable will be run on the thread to which this handler\n     * is attached.\n     * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>\n     * Time spent in deep sleep will add an additional delay to execution.\n     *  \n     * @param r The Runnable that will be executed.\n     * @param delayMillis The delay (in milliseconds) until the Runnable\n     *        will be executed.\n     *        \n     * @return Returns true if the Runnable was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the Runnable will be processed --\n     *         if the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     ",
    "links" : [ "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final boolean postDelayed(Runnable r, int what, long delayMillis)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final boolean postDelayed(@NonNull Runnable r, @Nullable Object token, long delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Causes the Runnable r to be added to the message queue, to be run\n     * after the specified amount of time elapses.\n     * The runnable will be run on the thread to which this handler\n     * is attached.\n     * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>\n     * Time spent in deep sleep will add an additional delay to execution.\n     *\n     * @param r The Runnable that will be executed.\n     * @param token An instance which can be used to cancel {@code r} via\n     *         {@link #removeCallbacksAndMessages}.\n     * @param delayMillis The delay (in milliseconds) until the Runnable\n     *        will be executed.\n     *\n     * @return Returns true if the Runnable was successfully placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the Runnable will be processed --\n     *         if the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     ",
    "links" : [ "#removeCallbacksAndMessages", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final boolean postAtFrontOfQueue(@NonNull Runnable r)",
    "returnType" : "boolean",
    "comment" : "\n     * Posts a message to an object that implements Runnable.\n     * Causes the Runnable r to executed on the next iteration through the\n     * message queue. The runnable will be run on the thread to which this\n     * handler is attached.\n     * <b>This method is only for use in very special circumstances -- it\n     * can easily starve the message queue, cause ordering problems, or have\n     * other unexpected side-effects.</b>\n     *  \n     * @param r The Runnable that will be executed.\n     * \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean runWithScissors(@NonNull Runnable r, long timeout)",
    "returnType" : "boolean",
    "comment" : "\n     * Runs the specified task synchronously.\n     * <p>\n     * If the current thread is the same as the handler thread, then the runnable\n     * runs immediately without being enqueued.  Otherwise, posts the runnable\n     * to the handler and waits for it to complete before returning.\n     * </p><p>\n     * This method is dangerous!  Improper use can result in deadlocks.\n     * Never call this method while any locks are held or use it in a\n     * possibly re-entrant manner.\n     * </p><p>\n     * This method is occasionally useful in situations where a background thread\n     * must synchronously await completion of a task that must run on the\n     * handler's thread.  However, this problem is often a symptom of bad design.\n     * Consider improving the design (if possible) before resorting to this method.\n     * </p><p>\n     * One example of where you might want to use this method is when you just\n     * set up a Handler thread and need to perform some initialization steps on\n     * it before continuing execution.\n     * </p><p>\n     * If timeout occurs then this method returns <code>false</code> but the runnable\n     * will remain posted on the handler and may already be in progress or\n     * complete at a later time.\n     * </p><p>\n     * When using this method, be sure to use {@link Looper#quitSafely} when\n     * quitting the looper.  Otherwise {@link #runWithScissors} may hang indefinitely.\n     * (TODO: We should fix this by making MessageQueue aware of blocking runnables.)\n     * </p>\n     *\n     * @param r The Runnable that will be executed synchronously.\n     * @param timeout The timeout in milliseconds, or 0 to wait indefinitely.\n     *\n     * @return Returns true if the Runnable was successfully executed.\n     *         Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     *\n     * @hide This method is prone to abuse and should probably not be in the API.\n     * If we ever do make it part of the API, we might want to rename it to something\n     * less funny like runUnsafe().\n     ",
    "links" : [ "#runWithScissors", "android.os.Looper#quitSafely" ]
  }, {
    "name" : "public final void removeCallbacks(@NonNull Runnable r)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of Runnable r that are in the message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeCallbacks(@NonNull Runnable r, @Nullable Object token)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of Runnable <var>r</var> with Object\n     * <var>token</var> that are in the message queue.  If <var>token</var> is null,\n     * all callbacks will be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean sendMessage(@NonNull Message msg)",
    "returnType" : "boolean",
    "comment" : "\n     * Pushes a message onto the end of the message queue after all pending messages\n     * before the current time. It will be received in {@link #handleMessage},\n     * in the thread attached to this handler.\n     *  \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ "#handleMessage" ]
  }, {
    "name" : "public final boolean sendEmptyMessage(int what)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends a Message containing only the what value.\n     *  \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean sendEmptyMessageDelayed(int what, long delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends a Message containing only the what value, to be delivered\n     * after the specified amount of time elapses.\n     * @see #sendMessageDelayed(android.os.Message, long) \n     * \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean sendMessageDelayed(@NonNull Message msg, long delayMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Enqueue a message into the message queue after all pending messages\n     * before (current time + delayMillis). You will receive it in\n     * {@link #handleMessage}, in the thread attached to this handler.\n     *  \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the message will be processed -- if\n     *         the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     ",
    "links" : [ "#handleMessage" ]
  }, {
    "name" : "public boolean sendMessageAtTime(@NonNull Message msg, long uptimeMillis)",
    "returnType" : "boolean",
    "comment" : "\n     * Enqueue a message into the message queue after all pending messages\n     * before the absolute time (in milliseconds) <var>uptimeMillis</var>.\n     * <b>The time-base is {@link android.os.SystemClock#uptimeMillis}.</b>\n     * Time spent in deep sleep will add an additional delay to execution.\n     * You will receive it in {@link #handleMessage}, in the thread attached\n     * to this handler.\n     * \n     * @param uptimeMillis The absolute time at which the message should be\n     *         delivered, using the\n     *         {@link android.os.SystemClock#uptimeMillis} time-base.\n     *         \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.  Note that a\n     *         result of true does not mean the message will be processed -- if\n     *         the looper is quit before the delivery time of the message\n     *         occurs then the message will be dropped.\n     ",
    "links" : [ "#handleMessage", "android.os.SystemClock#uptimeMillis" ]
  }, {
    "name" : "public final boolean sendMessageAtFrontOfQueue(@NonNull Message msg)",
    "returnType" : "boolean",
    "comment" : "\n     * Enqueue a message at the front of the message queue, to be processed on\n     * the next iteration of the message loop.  You will receive it in\n     * {@link #handleMessage}, in the thread attached to this handler.\n     * <b>This method is only for use in very special circumstances -- it\n     * can easily starve the message queue, cause ordering problems, or have\n     * other unexpected side-effects.</b>\n     *  \n     * @return Returns true if the message was successfully placed in to the \n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     ",
    "links" : [ "#handleMessage" ]
  }, {
    "name" : "public final boolean executeOrSendMessage(@NonNull Message msg)",
    "returnType" : "boolean",
    "comment" : "\n     * Executes the message synchronously if called on the same thread this handler corresponds to,\n     * or {@link #sendMessage pushes it to the queue} otherwise\n     *\n     * @return Returns true if the message was successfully ran or placed in to the\n     *         message queue.  Returns false on failure, usually because the\n     *         looper processing the message queue is exiting.\n     * @hide\n     ",
    "links" : [ "#sendMessage" ]
  }, {
    "name" : "private boolean enqueueMessage(@NonNull MessageQueue queue, @NonNull Message msg, long uptimeMillis)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void removeMessages(int what)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of messages with code 'what' that are in the\n     * message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeMessages(int what, @Nullable Object object)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of messages with code 'what' and whose obj is\n     * 'object' that are in the message queue.  If <var>object</var> is null,\n     * all messages will be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeEqualMessages(int what, @Nullable Object object)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of messages with code 'what' and whose obj is\n     * 'object' that are in the message queue.  If <var>object</var> is null,\n     * all messages will be removed.\n     *\n     *@hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeCallbacksAndMessages(@Nullable Object token)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of callbacks and sent messages whose\n     * <var>obj</var> is <var>token</var>.  If <var>token</var> is null,\n     * all callbacks and messages will be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void removeCallbacksAndEqualMessages(@Nullable Object token)",
    "returnType" : "void",
    "comment" : "\n     * Remove any pending posts of callbacks and sent messages whose\n     * <var>obj</var> is <var>token</var>.  If <var>token</var> is null,\n     * all callbacks and messages will be removed.\n     *\n     *@hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasMessages(int what)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any pending posts of messages with code 'what' in\n     * the message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasMessagesOrCallbacks()",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether there are any messages or callbacks currently scheduled on this handler.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasMessages(int what, @Nullable Object object)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any pending posts of messages with code 'what' and\n     * whose obj is 'object' in the message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasEqualMessages(int what, @Nullable Object object)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any pending posts of messages with code 'what' and\n     * whose obj is 'object' in the message queue.\n     *\n     *@hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasCallbacks(@NonNull Runnable r)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if there are any pending posts of messages with callback r in\n     * the message queue.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Looper getLooper()",
    "returnType" : "Looper",
    "comment" : " we could instead export a getMessageQueue() method... ",
    "links" : [ ]
  }, {
    "name" : "public final void dump(@NonNull Printer pw, @NonNull String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void dumpMine(@NonNull Printer pw, @NonNull String prefix)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final IMessenger getIMessenger()",
    "returnType" : "IMessenger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Message getPostMessage(Runnable r)",
    "returnType" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Message getPostMessage(Runnable r, Object token)",
    "returnType" : "Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void handleCallback(Message message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FIND_POTENTIAL_LEAKS", "TAG", "MAIN_THREAD_HANDLER", "mLooper", "mQueue", "mCallback", "mAsynchronous", "mMessenger" ],
  "methodNames" : [ "public void handleMessage(@NonNull Message msg)", "public void dispatchMessage(@NonNull Message msg)", "public static Handler createAsync(@NonNull Looper looper)", "public static Handler createAsync(@NonNull Looper looper, @NonNull Callback callback)", "public static Handler getMain()", "public static Handler mainIfNull(@Nullable Handler handler)", "public String getTraceName(@NonNull Message message)", "public String getMessageName(@NonNull Message message)", "public final Message obtainMessage()", "public final Message obtainMessage(int what)", "public final Message obtainMessage(int what, @Nullable Object obj)", "public final Message obtainMessage(int what, int arg1, int arg2)", "public final Message obtainMessage(int what, int arg1, int arg2, @Nullable Object obj)", "public final boolean post(@NonNull Runnable r)", "public final boolean postAtTime(@NonNull Runnable r, long uptimeMillis)", "public final boolean postAtTime(@NonNull Runnable r, @Nullable Object token, long uptimeMillis)", "public final boolean postDelayed(@NonNull Runnable r, long delayMillis)", "public final boolean postDelayed(Runnable r, int what, long delayMillis)", "public final boolean postDelayed(@NonNull Runnable r, @Nullable Object token, long delayMillis)", "public final boolean postAtFrontOfQueue(@NonNull Runnable r)", "public final boolean runWithScissors(@NonNull Runnable r, long timeout)", "public final void removeCallbacks(@NonNull Runnable r)", "public final void removeCallbacks(@NonNull Runnable r, @Nullable Object token)", "public final boolean sendMessage(@NonNull Message msg)", "public final boolean sendEmptyMessage(int what)", "public final boolean sendEmptyMessageDelayed(int what, long delayMillis)", "public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis)", "public final boolean sendMessageDelayed(@NonNull Message msg, long delayMillis)", "public boolean sendMessageAtTime(@NonNull Message msg, long uptimeMillis)", "public final boolean sendMessageAtFrontOfQueue(@NonNull Message msg)", "public final boolean executeOrSendMessage(@NonNull Message msg)", "private boolean enqueueMessage(@NonNull MessageQueue queue, @NonNull Message msg, long uptimeMillis)", "public final void removeMessages(int what)", "public final void removeMessages(int what, @Nullable Object object)", "public final void removeEqualMessages(int what, @Nullable Object object)", "public final void removeCallbacksAndMessages(@Nullable Object token)", "public final void removeCallbacksAndEqualMessages(@Nullable Object token)", "public final boolean hasMessages(int what)", "public final boolean hasMessagesOrCallbacks()", "public final boolean hasMessages(int what, @Nullable Object object)", "public final boolean hasEqualMessages(int what, @Nullable Object object)", "public final boolean hasCallbacks(@NonNull Runnable r)", "public final Looper getLooper()", "public final void dump(@NonNull Printer pw, @NonNull String prefix)", "public final void dumpMine(@NonNull Printer pw, @NonNull String prefix)", "public String toString()", " final IMessenger getIMessenger()", "private static Message getPostMessage(Runnable r)", "private static Message getPostMessage(Runnable r, Object token)", "private static void handleCallback(Message message)" ]
}