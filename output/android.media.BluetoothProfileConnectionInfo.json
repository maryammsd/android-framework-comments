{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/BluetoothProfileConnectionInfo.java",
  "packageName" : "android.media",
  "className" : "BluetoothProfileConnectionInfo",
  "comment" : "\n * Contains information about Bluetooth profile connection state changed\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mProfile",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSupprNoisy",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVolume",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsLeOutput",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BluetoothProfileConnectionInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createA2dpInfo(boolean suppressNoisyIntent, int volume)",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Constructor for A2dp info\n     *\n     * @param suppressNoisyIntent if true the {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY}\n     * intent will not be sent.\n     *\n     * @param volume of device -1 to ignore value\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY" ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createA2dpSinkInfo(int volume)",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Constructor for A2dp sink info\n     * The {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY} intent will not be sent.\n     *\n     * @param volume of device -1 to ignore value\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY" ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createHearingAidInfo(boolean suppressNoisyIntent)",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Constructor for hearing aid info\n     *\n     * @param suppressNoisyIntent if true the {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY}\n     * intent will not be sent.\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY" ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createLeAudioInfo(boolean suppressNoisyIntent, boolean isLeOutput)",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Factory method for <code>BluetoothProfileConnectionInfo</code> for an LE device\n     * Use this method for an input device connection,\n     * or for an output device connection if the connection volume is unknown,\n     * otherwise use {@link #createLeAudioOutputInfo(boolean, int)}.\n     * @param suppressNoisyIntent if true the {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY}\n     * intent will not be sent.\n     *\n     * @param isLeOutput if true mean the device is an output device, if false it's an input device\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY", "#createLeAudioOutputInfo(boolean" ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createLeAudioOutputInfo(boolean suppressNoisyIntent, int volume)",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Factory method for <code>BluetoothProfileConnectionInfo</code> for an LE output device\n     * Use this method for an output device connection with a volume to be used at connection\n     * time.\n     * @param suppressNoisyIntent if true the {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY}\n     *     intent will not be sent.\n     * @param volume the volume index of the device, -1 if unknown or to be ignored\n     * @return an instance of BluetoothProfileConnectionInfo for the BLE output device that reflects\n     *     the given parameters\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY" ]
  }, {
    "name" : "public int getProfile()",
    "returnType" : "int",
    "comment" : "\n     * @return The profile connection\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSuppressNoisyIntent()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if {@link AudioManager.ACTION_AUDIO_BECOMING_NOISY} intent will not be\n     * sent\n     ",
    "links" : [ "AudioManager.ACTION_AUDIO_BECOMING_NOISY" ]
  }, {
    "name" : "public int getVolume()",
    "returnType" : "int",
    "comment" : "\n     * Only for {@link BluetoothProfile.A2DP} profile\n     * @return the volume of the connection or -1 if the value is ignored\n     ",
    "links" : [ "BluetoothProfile.A2DP" ]
  }, {
    "name" : "public boolean isLeOutput()",
    "returnType" : "boolean",
    "comment" : "\n     * Only for {@link BluetoothProfile.LE_AUDIO} profile\n     * @return {@code true} is the LE device is an output device, {@code false} if it's an input\n     * device\n     ",
    "links" : [ "BluetoothProfile.LE_AUDIO" ]
  }, {
    "name" : "public static BluetoothProfileConnectionInfo createHfpInfo()",
    "returnType" : "BluetoothProfileConnectionInfo",
    "comment" : "\n     * Factory method for <code>BluetoothProfileConnectionInfo</code> for an HFP device.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel dest, @WriteFlags int flags)", "public int describeContents()", "public static BluetoothProfileConnectionInfo createA2dpInfo(boolean suppressNoisyIntent, int volume)", "public static BluetoothProfileConnectionInfo createA2dpSinkInfo(int volume)", "public static BluetoothProfileConnectionInfo createHearingAidInfo(boolean suppressNoisyIntent)", "public static BluetoothProfileConnectionInfo createLeAudioInfo(boolean suppressNoisyIntent, boolean isLeOutput)", "public static BluetoothProfileConnectionInfo createLeAudioOutputInfo(boolean suppressNoisyIntent, int volume)", "public int getProfile()", "public boolean isSuppressNoisyIntent()", "public int getVolume()", "public boolean isLeOutput()", "public static BluetoothProfileConnectionInfo createHfpInfo()" ],
  "variableNames" : [ "mProfile", "mSupprNoisy", "mVolume", "mIsLeOutput", "CREATOR" ]
}