{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryConsumer.java",
  "packageName" : "android.os",
  "className" : "BatteryConsumer",
  "comment" : "\n * Interface for objects containing battery attribution data.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_ANY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_SCREEN",
    "type" : "int",
    "comment" : " 0",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_CPU",
    "type" : "int",
    "comment" : " 1",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_BLUETOOTH",
    "type" : "int",
    "comment" : " 2",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_CAMERA",
    "type" : "int",
    "comment" : " 3",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_AUDIO",
    "type" : "int",
    "comment" : " 4",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_VIDEO",
    "type" : "int",
    "comment" : " 5",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_FLASHLIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_SYSTEM_SERVICES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_MOBILE_RADIO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_SENSORS",
    "type" : "int",
    "comment" : " 9",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_GNSS",
    "type" : "int",
    "comment" : " 10",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_WIFI",
    "type" : "int",
    "comment" : " 11",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_WAKELOCK",
    "type" : "int",
    "comment" : " 12",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_MEMORY",
    "type" : "int",
    "comment" : " 13",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_PHONE",
    "type" : "int",
    "comment" : " 14",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_AMBIENT_DISPLAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_IDLE",
    "type" : "int",
    "comment" : " 16",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_REATTRIBUTED_TO_OTHER_CONSUMERS",
    "type" : "int",
    "comment" : " The value should be negative or zero.",
    "links" : [ ]
  }, {
    "name" : "POWER_COMPONENT_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIRST_CUSTOM_POWER_COMPONENT_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_CUSTOM_POWER_COMPONENT_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sPowerComponentNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POWER_MODEL_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * Unspecified power model.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_MODEL_POWER_PROFILE",
    "type" : "int",
    "comment" : "\n     * Power model that is based on average consumption rates that hardware components\n     * consume in various states.\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_MODEL_ENERGY_CONSUMPTION",
    "type" : "int",
    "comment" : "\n     * Power model that is based on energy consumption stats provided by PowerStats HAL.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_UNSPECIFIED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_ANY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_FOREGROUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_BACKGROUND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_FOREGROUND_SERVICE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_CACHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESS_STATE_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sProcessStateNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SUPPORTED_POWER_COMPONENTS_PER_PROCESS_STATE",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_INDEX_BATTERY_CONSUMER_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UNSPECIFIED_DIMENSIONS",
    "type" : "Dimensions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "BatteryConsumerData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPowerComponents",
    "type" : "PowerComponents",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public double getConsumedPower()",
    "returnType" : "double",
    "comment" : "\n     * Total power consumed by this consumer, in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getConsumedPower(Dimensions dimensions)",
    "returnType" : "double",
    "comment" : "\n     * Returns power consumed aggregated over the specified dimensions, in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Key[] getKeys(@PowerComponent int componentId)",
    "returnType" : "Key[]",
    "comment" : "\n     * Returns keys for various power values attributed to the specified component\n     * held by this BatteryUsageStats object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Key getKey(@PowerComponent int componentId)",
    "returnType" : "Key",
    "comment" : "\n     * Returns the key for the power attributed to the specified component,\n     * for all values of other dimensions such as process state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Key getKey(@PowerComponent int componentId, @ProcessState int processState)",
    "returnType" : "Key",
    "comment" : "\n     * Returns the key for the power attributed to the specified component and process state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getConsumedPower(@PowerComponent int componentId)",
    "returnType" : "double",
    "comment" : "\n     * Returns the amount of drain attributed to the specified drain type, e.g. CPU, WiFi etc.\n     *\n     * @param componentId The ID of the power component, e.g.\n     *                    {@link BatteryConsumer#POWER_COMPONENT_CPU}.\n     * @return Amount of consumed power in mAh.\n     ",
    "links" : [ "android.os.BatteryConsumer#POWER_COMPONENT_CPU" ]
  }, {
    "name" : "public double getConsumedPower(@NonNull Key key)",
    "returnType" : "double",
    "comment" : "\n     * Returns the amount of drain attributed to the specified drain type, e.g. CPU, WiFi etc.\n     *\n     * @param key The key of the power component, obtained by calling {@link #getKey} or\n     *            {@link #getKeys} method.\n     * @return Amount of consumed power in mAh.\n     ",
    "links" : [ "#getKeys", "#getKey" ]
  }, {
    "name" : "public int getPowerModel(@BatteryConsumer.PowerComponent int componentId)",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the model that was used for power estimation.\n     *\n     * @param componentId The ID of the power component, e.g.\n     *                    {@link BatteryConsumer#POWER_COMPONENT_CPU}.\n     ",
    "links" : [ "android.os.BatteryConsumer#POWER_COMPONENT_CPU" ]
  }, {
    "name" : "public int getPowerModel(@NonNull BatteryConsumer.Key key)",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of the model that was used for power estimation.\n     *\n     * @param key The key of the power component, obtained by calling {@link #getKey} or\n     *            {@link #getKeys} method.\n     ",
    "links" : [ "#getKeys", "#getKey" ]
  }, {
    "name" : "public double getConsumedPowerForCustomComponent(int componentId)",
    "returnType" : "double",
    "comment" : "\n     * Returns the amount of drain attributed to the specified custom drain type.\n     *\n     * @param componentId The ID of the custom power component.\n     * @return Amount of consumed power in mAh.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCustomPowerComponentCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getCustomPowerComponentName(int componentId)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the specified power component.\n     *\n     * @param componentId The ID of the custom power component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsageDurationMillis(@PowerComponent int componentId)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of time since BatteryStats reset used by the specified component, e.g.\n     * CPU, WiFi etc.\n     *\n     * @param componentId The ID of the power component, e.g.\n     *                    {@link UidBatteryConsumer#POWER_COMPONENT_CPU}.\n     * @return Amount of time in milliseconds.\n     ",
    "links" : [ "android.os.UidBatteryConsumer#POWER_COMPONENT_CPU" ]
  }, {
    "name" : "public long getUsageDurationMillis(@NonNull Key key)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of time since BatteryStats reset used by the specified component, e.g.\n     * CPU, WiFi etc.\n     *\n     *\n     * @param key The key of the power component, obtained by calling {@link #getKey} or\n     *            {@link #getKeys} method.\n     * @return Amount of time in milliseconds.\n     ",
    "links" : [ "#getKeys", "#getKey" ]
  }, {
    "name" : "public long getUsageDurationForCustomComponentMillis(int componentId)",
    "returnType" : "long",
    "comment" : "\n     * Returns the amount of usage time attributed to the specified custom component\n     * since BatteryStats reset.\n     *\n     * @param componentId The ID of the custom power component.\n     * @return Amount of time in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String powerComponentIdToString(@BatteryConsumer.PowerComponent int componentId)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the specified component.  Intended for logging and debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String powerModelToString(@BatteryConsumer.PowerModel int powerModel)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the specified power model.  Intended for logging and debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int powerModelToProtoEnum(@BatteryConsumer.PowerModel int powerModel)",
    "returnType" : "int",
    "comment" : "\n     * Returns the equivalent PowerModel enum for the specified power model.\n     * {@see BatteryUsageStatsAtomsProto.BatteryConsumerData.PowerComponentUsage.PowerModel}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String processStateToString(@BatteryConsumer.ProcessState int processState)",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the specified process state.  Intended for logging and debugging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Prints the stats in a human-readable format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void dump(PrintWriter pw, boolean skipEmptyComponents)",
    "returnType" : "void",
    "comment" : "\n     * Prints the stats in a human-readable format.\n     *\n     * @param skipEmptyComponents if true, omit any power components with a zero amount.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasStatsProtoData()",
    "returnType" : "boolean",
    "comment" : " Returns whether there are any atoms.proto BATTERY_CONSUMER_DATA data to write to a proto. ",
    "links" : [ ]
  }, {
    "name" : " void writeStatsProto(@NonNull ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " Writes the atoms.proto BATTERY_CONSUMER_DATA for this BatteryConsumer to the given proto. ",
    "links" : [ ]
  }, {
    "name" : "private boolean writeStatsProtoImpl(@Nullable ProtoOutputStream proto, long fieldId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there are any atoms.proto BATTERY_CONSUMER_DATA data to write to a proto,\n     * and writes it to the given proto if it is non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long convertMahToDeciCoulombs(double powerMah)",
    "returnType" : "long",
    "comment" : " Converts charge from milliamp hours (mAh) to decicoulombs (dC). ",
    "links" : [ ]
  }, {
    "name" : " static BatteryConsumerDataLayout createBatteryConsumerDataLayout(String[] customPowerComponentNames, boolean includePowerModels, boolean includeProcessStateData)",
    "returnType" : "BatteryConsumerDataLayout",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public double getConsumedPower()", "public double getConsumedPower(Dimensions dimensions)", "public Key[] getKeys(@PowerComponent int componentId)", "public Key getKey(@PowerComponent int componentId)", "public Key getKey(@PowerComponent int componentId, @ProcessState int processState)", "public double getConsumedPower(@PowerComponent int componentId)", "public double getConsumedPower(@NonNull Key key)", "public int getPowerModel(@BatteryConsumer.PowerComponent int componentId)", "public int getPowerModel(@NonNull BatteryConsumer.Key key)", "public double getConsumedPowerForCustomComponent(int componentId)", "public int getCustomPowerComponentCount()", "public String getCustomPowerComponentName(int componentId)", "public long getUsageDurationMillis(@PowerComponent int componentId)", "public long getUsageDurationMillis(@NonNull Key key)", "public long getUsageDurationForCustomComponentMillis(int componentId)", "public static String powerComponentIdToString(@BatteryConsumer.PowerComponent int componentId)", "public static String powerModelToString(@BatteryConsumer.PowerModel int powerModel)", "public static int powerModelToProtoEnum(@BatteryConsumer.PowerModel int powerModel)", "public static String processStateToString(@BatteryConsumer.ProcessState int processState)", "public void dump(PrintWriter pw)", "public abstract void dump(PrintWriter pw, boolean skipEmptyComponents)", " boolean hasStatsProtoData()", " void writeStatsProto(@NonNull ProtoOutputStream proto, long fieldId)", "private boolean writeStatsProtoImpl(@Nullable ProtoOutputStream proto, long fieldId)", " static long convertMahToDeciCoulombs(double powerMah)", " static BatteryConsumerDataLayout createBatteryConsumerDataLayout(String[] customPowerComponentNames, boolean includePowerModels, boolean includeProcessStateData)" ],
  "variableNames" : [ "TAG", "POWER_COMPONENT_ANY", "POWER_COMPONENT_SCREEN", "POWER_COMPONENT_CPU", "POWER_COMPONENT_BLUETOOTH", "POWER_COMPONENT_CAMERA", "POWER_COMPONENT_AUDIO", "POWER_COMPONENT_VIDEO", "POWER_COMPONENT_FLASHLIGHT", "POWER_COMPONENT_SYSTEM_SERVICES", "POWER_COMPONENT_MOBILE_RADIO", "POWER_COMPONENT_SENSORS", "POWER_COMPONENT_GNSS", "POWER_COMPONENT_WIFI", "POWER_COMPONENT_WAKELOCK", "POWER_COMPONENT_MEMORY", "POWER_COMPONENT_PHONE", "POWER_COMPONENT_AMBIENT_DISPLAY", "POWER_COMPONENT_IDLE", "POWER_COMPONENT_REATTRIBUTED_TO_OTHER_CONSUMERS", "POWER_COMPONENT_COUNT", "FIRST_CUSTOM_POWER_COMPONENT_ID", "LAST_CUSTOM_POWER_COMPONENT_ID", "sPowerComponentNames", "POWER_MODEL_UNDEFINED", "POWER_MODEL_POWER_PROFILE", "POWER_MODEL_ENERGY_CONSUMPTION", "PROCESS_STATE_UNSPECIFIED", "PROCESS_STATE_ANY", "PROCESS_STATE_FOREGROUND", "PROCESS_STATE_BACKGROUND", "PROCESS_STATE_FOREGROUND_SERVICE", "PROCESS_STATE_CACHED", "PROCESS_STATE_COUNT", "sProcessStateNames", "SUPPORTED_POWER_COMPONENTS_PER_PROCESS_STATE", "COLUMN_INDEX_BATTERY_CONSUMER_TYPE", "COLUMN_COUNT", "UNSPECIFIED_DIMENSIONS", "mData", "mPowerComponents" ]
}