{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/mtp/MtpStorageManager.java",
  "packageName" : "android.mtp",
  "className" : "MtpStorageManager",
  "comment" : "\n * MtpStorageManager provides functionality for listing, tracking, and notifying MtpServer of\n * filesystem changes. As directories are listed, this class will cache the results,\n * and send events when objects are added/removed from cached directories.\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sDebug",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IN_ONLYDIR",
    "type" : "int",
    "comment" : " Inotify flags not provided by FileObserver",
    "links" : [ ]
  }, {
    "name" : "IN_Q_OVERFLOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IN_IGNORED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IN_ISDIR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMtpNotifier",
    "type" : "MtpNotifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObjects",
    "type" : "HashMap<Integer, MtpObject>",
    "comment" : " Instead, they can be found in mRoots keyed by storageId.",
    "links" : [ ]
  }, {
    "name" : "mRoots",
    "type" : "HashMap<Integer, MtpObject>",
    "comment" : " A cache of the root MtpObject for each storage, keyed by storage id.",
    "links" : [ ]
  }, {
    "name" : "mNextObjectId",
    "type" : "int",
    "comment" : " Object and Storage ids are allocated incrementally and not to be reused.",
    "links" : [ ]
  }, {
    "name" : "mNextStorageId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubdirectories",
    "type" : "Set<String>",
    "comment" : " not allow them to be modified.",
    "links" : [ ]
  }, {
    "name" : "mCheckConsistency",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConsistencyThread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void close()",
    "returnType" : "void",
    "comment" : "\n     * Clean up resources used by the storage manager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setSubdirectories(Set<String> subDirs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the special subdirectories, which are the subdirectories of root storage that queries\n     * are restricted to. Must be done before any root storages are accessed.\n     * @param subDirs Subdirectories to set, or null to reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized MtpStorage addMtpStorage(StorageVolume volume, Supplier<Boolean> isHostWindows)",
    "returnType" : "MtpStorage",
    "comment" : "\n     * Allocates an MTP storage id for the given volume and add it to current roots.\n     * @param volume Storage to add.\n     * @return the associated MtpStorage\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void removeMtpStorage(MtpStorage storage)",
    "returnType" : "void",
    "comment" : "\n     * Removes the given storage and all associated items from the cache.\n     * @param storage Storage to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean isSpecialSubDir(MtpObject obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the given object can be renamed, moved, or deleted.\n     * If there are special subdirectories, they cannot be modified.\n     * @param obj Object to check.\n     * @return Whether object can be modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized MtpObject getByPath(String path)",
    "returnType" : "MtpObject",
    "comment" : "\n     * Get the object with the specified path. Visit any necessary directories on the way.\n     * @param path Full path of the object to find.\n     * @return The desired object, or null if it cannot be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized MtpObject getObject(int id)",
    "returnType" : "MtpObject",
    "comment" : "\n     * Get the object with specified id.\n     * @param id Id of object. must not be 0 or 0xFFFFFFFF\n     * @return Object, or null if error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MtpObject getStorageRoot(int id)",
    "returnType" : "MtpObject",
    "comment" : "\n     * Get the storage with specified id.\n     * @param id Storage id.\n     * @return Object that is the root of the storage, or null if error.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int getNextObjectId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getNextStorageId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized List<MtpObject> getObjects(int parent, int format, int storageId)",
    "returnType" : "List<MtpObject>",
    "comment" : "\n     * Get all objects matching the given parent, format, and storage\n     * @param parent object id of the parent. 0 for all objects, 0xFFFFFFFF for all object in root\n     * @param format format of returned objects. 0 for any format\n     * @param storageId storage id to look in. 0xFFFFFFFF for all storages\n     * @return A list of matched objects, or null if error\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean getObjects(List<MtpObject> toAdd, MtpObject parent, int format, boolean rec)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized Collection<MtpObject> getChildren(MtpObject object)",
    "returnType" : "Collection<MtpObject>",
    "comment" : "\n     * Return the children of the given object. If the object hasn't been visited yet, add\n     * its children to the cache and start observing it.\n     * @param object the parent object\n     * @return The collection of child objects or null if error\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized MtpObject addObjectToCache(MtpObject parent, String newName, boolean isDir)",
    "returnType" : "MtpObject",
    "comment" : "\n     * Create a new object from the given path and add it to the cache.\n     * @param parent The parent object\n     * @param newName Path of the new object\n     * @return the new object if success, else null\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean removeObjectFromCache(MtpObject removed, boolean removeGlobal, boolean recursive)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove the given path from the cache.\n     * @param removed The removed object\n     * @param removeGlobal Whether to remove the object from the global id map\n     * @param recursive Whether to also remove its children recursively.\n     * @return true if successfully removed\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void handleAddedObject(MtpObject parent, String path, boolean isDir)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void handleRemovedObject(MtpObject obj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized void handleChangedObject(MtpObject parent, String path)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flushEvents()",
    "returnType" : "void",
    "comment" : "\n     * Block the caller until all events currently in the event queue have been\n     * read and processed. Used for testing purposes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void dump()",
    "returnType" : "void",
    "comment" : "\n     * Dumps a representation of the cache to log.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean checkConsistency()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks consistency of the cache. This checks whether all objects have correct links\n     * to their parent, and whether directories are missing or have extraneous objects.\n     * @return true iff cache is consistent\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int beginSendObject(MtpObject parent, String name, int format)",
    "returnType" : "int",
    "comment" : "\n     * Informs MtpStorageManager that an object with the given path is about to be added.\n     * @param parent The parent object of the object to be added.\n     * @param name Filename of object to add.\n     * @return Object id of the added object, or -1 if it cannot be added.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean endSendObject(MtpObject obj, boolean succeeded)",
    "returnType" : "boolean",
    "comment" : "\n     * Clean up the object state after a sendObject operation.\n     * @param obj The object, returned from beginAddObject().\n     * @param succeeded Whether the file was successfully created.\n     * @return Whether cache state was successfully cleaned up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean beginRenameObject(MtpObject obj, String newName)",
    "returnType" : "boolean",
    "comment" : "\n     * Informs MtpStorageManager that the given object is about to be renamed.\n     * If this returns true, it must be followed with an endRenameObject()\n     * @param obj Object to be renamed.\n     * @param newName New name of the object.\n     * @return Whether renaming is allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean endRenameObject(MtpObject obj, String oldName, boolean success)",
    "returnType" : "boolean",
    "comment" : "\n     * Cleans up cache state after a rename operation and sends any events that were missed.\n     * @param obj The object being renamed, the same one that was passed in beginRenameObject().\n     * @param oldName The previous name of the object.\n     * @param success Whether the rename operation succeeded.\n     * @return Whether state was successfully cleaned up.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean beginRemoveObject(MtpObject obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Informs MtpStorageManager that the given object is about to be deleted by the initiator,\n     * so don't send an event.\n     * @param obj Object to be deleted.\n     * @return Whether cache deletion is allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean endRemoveObject(MtpObject obj, boolean success)",
    "returnType" : "boolean",
    "comment" : "\n     * Clean up cache state after a delete operation and send any events that were missed.\n     * @param obj Object to be deleted, same one passed in beginRemoveObject().\n     * @param success Whether operation was completed successfully.\n     * @return Whether cache state is correct.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean beginMoveObject(MtpObject obj, MtpObject newParent)",
    "returnType" : "boolean",
    "comment" : "\n     * Informs MtpStorageManager that the given object is about to be moved to a new parent.\n     * @param obj Object to be moved.\n     * @param newParent The new parent object.\n     * @return Whether the move is allowed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean endMoveObject(MtpObject oldParent, MtpObject newParent, String name, boolean success)",
    "returnType" : "boolean",
    "comment" : "\n     * Clean up cache state after a move operation and send any events that were missed.\n     * @param oldParent The old parent object.\n     * @param newParent The new parent object.\n     * @param name The name of the object being moved.\n     * @param success Whether operation was completed successfully.\n     * @return Whether cache state is correct.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int beginCopyObject(MtpObject object, MtpObject newParent)",
    "returnType" : "int",
    "comment" : "\n     * Informs MtpStorageManager that the given object is about to be copied recursively.\n     * @param object Object to be copied\n     * @param newParent New parent for the object.\n     * @return The object id for the new copy, or -1 if error.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean endCopyObject(MtpObject object, boolean success)",
    "returnType" : "boolean",
    "comment" : "\n     * Cleans up cache state after a copy operation.\n     * @param object Object that was copied.\n     * @param success Whether the operation was successful.\n     * @return Whether cache state is consistent.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalEndAddObject(MtpObject obj, boolean succeeded, boolean removeGlobal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalEndRemoveObject(MtpObject obj, boolean success, boolean removeGlobal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalBeginRenameObject(MtpObject fromObj, MtpObject toObj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalEndRenameObject(MtpObject fromObj, MtpObject toObj, boolean success)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalBeginRemoveObject(MtpObject obj, MtpOperation op)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalBeginCopyObject(MtpObject obj, boolean newId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized boolean generalEndCopyObject(MtpObject obj, boolean success, boolean addGlobal)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void close()", "public synchronized void setSubdirectories(Set<String> subDirs)", "public synchronized MtpStorage addMtpStorage(StorageVolume volume, Supplier<Boolean> isHostWindows)", "public synchronized void removeMtpStorage(MtpStorage storage)", "private synchronized boolean isSpecialSubDir(MtpObject obj)", "public synchronized MtpObject getByPath(String path)", "public synchronized MtpObject getObject(int id)", "public MtpObject getStorageRoot(int id)", "private int getNextObjectId()", "private int getNextStorageId()", "public synchronized List<MtpObject> getObjects(int parent, int format, int storageId)", "private synchronized boolean getObjects(List<MtpObject> toAdd, MtpObject parent, int format, boolean rec)", "private synchronized Collection<MtpObject> getChildren(MtpObject object)", "private synchronized MtpObject addObjectToCache(MtpObject parent, String newName, boolean isDir)", "private synchronized boolean removeObjectFromCache(MtpObject removed, boolean removeGlobal, boolean recursive)", "private synchronized void handleAddedObject(MtpObject parent, String path, boolean isDir)", "private synchronized void handleRemovedObject(MtpObject obj)", "private synchronized void handleChangedObject(MtpObject parent, String path)", "public void flushEvents()", "public synchronized void dump()", "public synchronized boolean checkConsistency()", "public synchronized int beginSendObject(MtpObject parent, String name, int format)", "public synchronized boolean endSendObject(MtpObject obj, boolean succeeded)", "public synchronized boolean beginRenameObject(MtpObject obj, String newName)", "public synchronized boolean endRenameObject(MtpObject obj, String oldName, boolean success)", "public synchronized boolean beginRemoveObject(MtpObject obj)", "public synchronized boolean endRemoveObject(MtpObject obj, boolean success)", "public synchronized boolean beginMoveObject(MtpObject obj, MtpObject newParent)", "public synchronized boolean endMoveObject(MtpObject oldParent, MtpObject newParent, String name, boolean success)", "public synchronized int beginCopyObject(MtpObject object, MtpObject newParent)", "public synchronized boolean endCopyObject(MtpObject object, boolean success)", "private synchronized boolean generalEndAddObject(MtpObject obj, boolean succeeded, boolean removeGlobal)", "private synchronized boolean generalEndRemoveObject(MtpObject obj, boolean success, boolean removeGlobal)", "private synchronized boolean generalBeginRenameObject(MtpObject fromObj, MtpObject toObj)", "private synchronized boolean generalEndRenameObject(MtpObject fromObj, MtpObject toObj, boolean success)", "private synchronized boolean generalBeginRemoveObject(MtpObject obj, MtpOperation op)", "private synchronized boolean generalBeginCopyObject(MtpObject obj, boolean newId)", "private synchronized boolean generalEndCopyObject(MtpObject obj, boolean success, boolean addGlobal)" ],
  "variableNames" : [ "TAG", "sDebug", "IN_ONLYDIR", "IN_Q_OVERFLOW", "IN_IGNORED", "IN_ISDIR", "mMtpNotifier", "mObjects", "mRoots", "mNextObjectId", "mNextStorageId", "mSubdirectories", "mCheckConsistency", "mConsistencyThread" ]
}