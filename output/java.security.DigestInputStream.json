{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/DigestInputStream.java",
  "packageName" : "java.security",
  "className" : "DigestInputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "on",
    "type" : "boolean",
    "comment" : " Are we on or off? ",
    "links" : [ ]
  }, {
    "name" : "digest",
    "type" : "MessageDigest",
    "comment" : "\n     * The message digest associated with this stream.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MessageDigest getMessageDigest()",
    "returnType" : "MessageDigest",
    "comment" : "\n     * Returns the message digest associated with this stream.\n     *\n     * @return the message digest associated with this stream.\n     * @see #setMessageDigest(java.security.MessageDigest)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessageDigest(MessageDigest digest)",
    "returnType" : "void",
    "comment" : "\n     * Associates the specified message digest with this stream.\n     *\n     * @param digest the message digest to be associated with this stream.\n     * @see #getMessageDigest()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads a byte, and updates the message digest (if the digest\n     * function is on).  That is, this method reads a byte from the\n     * input stream, blocking until the byte is actually read. If the\n     * digest function is on (see {@link #on(boolean) on}), this method\n     * will then call {@code update} on the message digest associated\n     * with this stream, passing it the byte read.\n     *\n     * @return the byte read.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte)\n     ",
    "links" : [ "#on(boolean)" ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads into a byte array, and updates the message digest (if the\n     * digest function is on).  That is, this method reads up to\n     * {@code len} bytes from the input stream into the array\n     * {@code b}, starting at offset {@code off}. This method\n     * blocks until the data is actually\n     * read. If the digest function is on (see\n     * {@link #on(boolean) on}), this method will then call {@code update}\n     * on the message digest associated with this stream, passing it\n     * the data.\n     *\n     * @param b the array into which the data is read.\n     *\n     * @param off the starting offset into {@code b} of where the\n     * data should be placed.\n     *\n     * @param len the maximum number of bytes to be read from the input\n     * stream into b, starting at offset {@code off}.\n     *\n     * @return  the actual number of bytes read. This is less than\n     * {@code len} if the end of the stream is reached prior to\n     * reading {@code len} bytes. -1 is returned if no bytes were\n     * read because the end of the stream had already been reached when\n     * the call was made.\n     *\n     * @exception IOException if an I/O error occurs.\n     *\n     * @see MessageDigest#update(byte[], int, int)\n     ",
    "links" : [ "#on(boolean)" ]
  }, {
    "name" : "public void on(boolean on)",
    "returnType" : "void",
    "comment" : "\n     * Turns the digest function on or off. The default is on.  When\n     * it is on, a call to one of the {@code read} methods results in an\n     * update on the message digest.  But when it is off, the message\n     * digest is not updated.\n     *\n     * @param on true to turn the digest function on, false to turn\n     * it off.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Prints a string representation of this digest input stream and\n     * its associated message digest object.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MessageDigest getMessageDigest()", "public void setMessageDigest(MessageDigest digest)", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public void on(boolean on)", "public String toString()" ],
  "variableNames" : [ "on", "digest" ]
}