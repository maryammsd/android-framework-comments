{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/Expression.java",
  "packageName" : "org.apache.xpath",
  "className" : "Expression",
  "comment" : "\n * This abstract class serves as the base for all expression objects.  An\n * Expression can be executed to return a {@link org.apache.xpath.objects.XObject},\n * normally has a location within a document or DOM, can send error and warning\n * events, and normally do not hold state and are meant to be immutable once\n * construction has completed.  An exception to the immutibility rule is iterators\n * and walkers, which must be cloned in order to be used -- the original must\n * still be immutable.\n ",
  "links" : [ "org.apache.xpath.objects.XObject" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_parent",
    "type" : "ExpressionNode",
    "comment" : "\n   * The location where this expression was built from.  Need for diagnostic\n   *  messages. May be null.\n   *  @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean canTraverseOutsideSubtree()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression or it's subexpressions can traverse outside\n   * the current subtree.\n   *\n   * @return true if traversal outside the context node's subtree can occur.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int currentNode) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param currentNode The currentNode.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, int currentNode, DTM dtm, int expType) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param currentNode The currentNode.\n   * @param dtm The DTM of the current node.\n   * @param expType The expanded type ID of the current node.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt, boolean destructiveOK) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression, but tell that a \"safe\" object doesn't have \n   * to be returned.  The default implementation just calls execute(xctxt).\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param destructiveOK true if a \"safe\" object doesn't need to be returned.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   ",
    "links" : [ ]
  }, {
    "name" : "public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "double",
    "comment" : "\n   * Evaluate expression to a number.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @return The expression evaluated as a double.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Evaluate expression to a boolean.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @return false\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public XMLString xstr(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XMLString",
    "comment" : "\n   * Cast result object to a string.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @return The string this wraps or the empty string if null\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNodesetExpr()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the expression is a nodeset expression.  In other words, tell\n   * if you can execute {@link #asNode(XPathContext) asNode} without an exception.\n   * @return true if the expression can be represented as a nodeset.\n   ",
    "links" : [ "#asNode(XPathContext)" ]
  }, {
    "name" : "public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Return the first node out of the nodeset, if this expression is\n   * a nodeset expression.\n   * @param xctxt The XPath runtime context.\n   * @return the first node out of the nodeset, or DTM.NULL.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator asIterator(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Given an select expression and a context, evaluate the XPath\n   * and return the resulting iterator.\n   *\n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   *\n   *\n   * @return A valid DTMIterator.\n   * @throws TransformerException thrown if the active ProblemListener decides\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator asIteratorRaw(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Given an select expression and a context, evaluate the XPath\n   * and return the resulting iterator, but do not clone.\n   *\n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   *\n   *\n   * @return A valid DTMIterator.\n   * @throws TransformerException thrown if the active ProblemListener decides\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public void executeCharsToContentHandler(XPathContext xctxt, ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * NEEDSDOC @param handler\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStableNumber()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this expression returns a stable number that will not change during \n   * iterations within the expression.  This is used to determine if a proximity \n   * position predicate can indicate that no more searching has to occur.\n   * \n   *\n   * @return true if the expression represents a stable number.\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame\n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list\n   * should be searched backwards for the first qualified name that\n   * corresponds to the variable reference qname.  The position of the\n   * QName in the vector from the start of the vector will be its position\n   * in the stack frame (but variables above the globalsTop value will need\n   * to be offset to the current stack frame).\n   * NEEDSDOC @param globalsSize\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean deepEquals(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * Compare this object with another object and see \n   * if they are equal, include the sub heararchy.\n   * \n   * @param expr Another expression object.\n   * @return true if this objects class and the expr\n   * object's class are the same, and the data contained \n   * within both objects are considered equal.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isSameClass(Expression expr)",
    "returnType" : "boolean",
    "comment" : "\n   * This is a utility method to tell if the passed in \n   * class is the same class as this.  It is to be used by\n   * the deepEquals method.  I'm bottlenecking it here \n   * because I'm not totally confident that comparing the \n   * class objects is the best way to do this.\n   * @return true of the passed in class is the exact same \n   * class as this class.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void warn(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Warn the user of an problem.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param msg An error msgkey that corresponds to one of the conststants found\n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is\n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which\n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to\n   *                              throw an exception.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public void assertion(boolean b, java.lang.String msg)",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an assertion error, and probably throw an\n   * exception.\n   *\n   * @param b  If false, a runtime exception will be thrown.\n   * @param msg The assertion message, which should be informative.\n   *\n   * @throws RuntimeException if the b argument is false.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void error(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Tell the user of an error, and probably throw an\n   * exception.\n   *\n   * @param xctxt The XPath runtime context.\n   * @param msg An error msgkey that corresponds to one of the constants found\n   *            in {@link org.apache.xpath.res.XPATHErrorResources}, which is\n   *            a key for a format string.\n   * @param args An array of arguments represented in the format string, which\n   *             may be null.\n   *\n   * @throws TransformerException if the current ErrorListoner determines to\n   *                              throw an exception.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ "org.apache.xpath.res.XPATHErrorResources" ]
  }, {
    "name" : "public ExpressionNode getExpressionOwner()",
    "returnType" : "ExpressionNode",
    "comment" : "\n   * Get the first non-Expression parent of this node.\n   * @return null or first ancestor that is not an Expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void exprSetParent(ExpressionNode n)",
    "returnType" : "void",
    "comment" : " This pair of methods are used to inform the node of its\n    parent. ",
    "links" : [ ]
  }, {
    "name" : "public ExpressionNode exprGetParent()",
    "returnType" : "ExpressionNode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void exprAddChild(ExpressionNode n, int i)",
    "returnType" : "void",
    "comment" : " This method tells the node to add its argument to the node's\n    list of children.  ",
    "links" : [ ]
  }, {
    "name" : "public ExpressionNode exprGetChild(int i)",
    "returnType" : "ExpressionNode",
    "comment" : " This method returns a child node.  The children are numbered\n     from zero, left to right. ",
    "links" : [ ]
  }, {
    "name" : "public int exprGetNumChildren()",
    "returnType" : "int",
    "comment" : " Return the number of children the node has. ",
    "links" : [ ]
  }, {
    "name" : "public String getPublicId()",
    "returnType" : "String",
    "comment" : "\n   * Return the public identifier for the current document event.\n   *\n   * <p>The return value is the public identifier of the document\n   * entity or of the external parsed entity in which the markup that\n   * triggered the event appears.</p>\n   *\n   * @return A string containing the public identifier, or\n   *         null if none is available.\n   * @see #getSystemId\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n   * Return the system identifier for the current document event.\n   *\n   * <p>The return value is the system identifier of the document\n   * entity or of the external parsed entity in which the markup that\n   * triggered the event appears.</p>\n   *\n   * <p>If the system identifier is a URL, the parser must resolve it\n   * fully before passing it to the application.</p>\n   *\n   * @return A string containing the system identifier, or null\n   *         if none is available.\n   * @see #getPublicId\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the line number where the current document event ends.\n   *\n   * <p><strong>Warning:</strong> The return value from the method\n   * is intended only as an approximation for the sake of error\n   * reporting; it is not intended to provide sufficient information\n   * to edit the character content of the original XML document.</p>\n   *\n   * <p>The return value is an approximation of the line number\n   * in the document entity or external parsed entity where the\n   * markup that triggered the event appears.</p>\n   *\n   * @return The line number, or -1 if none is available.\n   * @see #getColumnNumber\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getColumnNumber()",
    "returnType" : "int",
    "comment" : "\n   * Return the character position where the current document event ends.\n   *\n   * <p><strong>Warning:</strong> The return value from the method\n   * is intended only as an approximation for the sake of error\n   * reporting; it is not intended to provide sufficient information\n   * to edit the character content of the original XML document.</p>\n   *\n   * <p>The return value is an approximation of the column number\n   * in the document entity or external parsed entity where the\n   * markup that triggered the event appears.</p>\n   *\n   * @return The column number, or -1 if none is available.\n   * @see #getLineNumber\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean canTraverseOutsideSubtree()", "public XObject execute(XPathContext xctxt, int currentNode) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, int currentNode, DTM dtm, int expType) throws javax.xml.transform.TransformerException", "public abstract XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public XObject execute(XPathContext xctxt, boolean destructiveOK) throws javax.xml.transform.TransformerException", "public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public XMLString xstr(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public boolean isNodesetExpr()", "public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public DTMIterator asIterator(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException", "public DTMIterator asIteratorRaw(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException", "public void executeCharsToContentHandler(XPathContext xctxt, ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException", "public boolean isStableNumber()", "public abstract void fixupVariables(java.util.Vector vars, int globalsSize)", "public abstract boolean deepEquals(Expression expr)", "protected final boolean isSameClass(Expression expr)", "public void warn(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public void assertion(boolean b, java.lang.String msg)", "public void error(XPathContext xctxt, String msg, Object[] args) throws javax.xml.transform.TransformerException", "public ExpressionNode getExpressionOwner()", "public void exprSetParent(ExpressionNode n)", "public ExpressionNode exprGetParent()", "public void exprAddChild(ExpressionNode n, int i)", "public ExpressionNode exprGetChild(int i)", "public int exprGetNumChildren()", "public String getPublicId()", "public String getSystemId()", "public int getLineNumber()", "public int getColumnNumber()" ],
  "variableNames" : [ "serialVersionUID", "m_parent" ]
}