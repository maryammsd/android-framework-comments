{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/Formatter.java",
  "packageName" : "java.util.logging",
  "className" : "Formatter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String format(LogRecord record)",
    "returnType" : "String",
    "comment" : "\n     * Format the given log record and return the formatted string.\n     * <p>\n     * The resulting formatted String will normally include a\n     * localized and formatted version of the LogRecord's message field.\n     * It is recommended to use the {@link Formatter#formatMessage}\n     * convenience method to localize and format the message field.\n     *\n     * @param record the log record to be formatted.\n     * @return the formatted log record\n     ",
    "links" : [ "java.util.logging.Formatter#formatMessage" ]
  }, {
    "name" : "public String getHead(Handler h)",
    "returnType" : "String",
    "comment" : "\n     * Return the header string for a set of formatted records.\n     * <p>\n     * This base class returns an empty string, but this may be\n     * overridden by subclasses.\n     *\n     * @param   h  The target handler (can be null)\n     * @return  header string\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTail(Handler h)",
    "returnType" : "String",
    "comment" : "\n     * Return the tail string for a set of formatted records.\n     * <p>\n     * This base class returns an empty string, but this may be\n     * overridden by subclasses.\n     *\n     * @param   h  The target handler (can be null)\n     * @return  tail string\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String formatMessage(LogRecord record)",
    "returnType" : "String",
    "comment" : "\n     * Localize and format the message string from a log record.  This\n     * method is provided as a convenience for Formatter subclasses to\n     * use when they are performing formatting.\n     * <p>\n     * The message string is first localized to a format string using\n     * the record's ResourceBundle.  (If there is no ResourceBundle,\n     * or if the message key is not found, then the key is used as the\n     * format string.)  The format String uses java.text style\n     * formatting.\n     * <ul>\n     * <li>If there are no parameters, no formatter is used.\n     * <li>Otherwise, if the string contains \"{0\" then\n     *     java.text.MessageFormat  is used to format the string.\n     * <li>Otherwise no formatting is performed.\n     * </ul>\n     * <p>\n     *\n     * @param  record  the log record containing the raw message\n     * @return   a localized and formatted message\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String format(LogRecord record)", "public String getHead(Handler h)", "public String getTail(Handler h)", "public synchronized String formatMessage(LogRecord record)" ],
  "variableNames" : [ ]
}