{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/CrossProfileAppsInternal.java",
  "packageName" : "android.content.pm",
  "className" : "CrossProfileAppsInternal",
  "comment" : "\n * Exposes internal methods from {@link com.android.server.pm.CrossProfileAppsServiceImpl} to other\n * system server classes.\n *\n * @hide Only for use within the system server.\n ",
  "links" : [ "com.android.server.pm.CrossProfileAppsServiceImpl" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract boolean verifyPackageHasInteractAcrossProfilePermission(String packageName, @UserIdInt int userId) throws PackageManager.NameNotFoundException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the package has the necessary permissions to communicate cross-profile.\n     *\n     * <p>This means having at least one of these conditions:\n     * <ul>\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_USERS_FULL} granted.\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_USERS} granted.\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_PROFILES} granted, or the corresponding\n     *     AppOps {@code android:interact_across_profiles} is set to \"allow\".\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean verifyUidHasInteractAcrossProfilePermission(String packageName, int uid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the package has the necessary permissions to communicate cross-profile.\n     *\n     * <p>This means having at least one of these conditions:\n     * <ul>\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_USERS_FULL} granted.\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_USERS} granted.\n     *     <li>{@code Manifest.permission.INTERACT_ACROSS_PROFILES} granted, or the corresponding\n     *     AppOps {@code android:interact_across_profiles} is set to \"allow\".\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<UserHandle> getTargetUserProfiles(String packageName, @UserIdInt int userId)",
    "returnType" : "List<UserHandle>",
    "comment" : "\n     * Returns the list of target user profiles for the given package on the given user. See {@link\n     * CrossProfileApps#getTargetUserProfiles()}.\n     ",
    "links" : [ "android.content.pm.CrossProfileApps#getTargetUserProfiles()" ]
  }, {
    "name" : "public abstract void setInteractAcrossProfilesAppOp(String packageName, @Mode int newMode, @UserIdInt int userId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the app-op for {@link android.Manifest.permission#INTERACT_ACROSS_PROFILES} that is\n     * configurable by users in Settings. This configures it for the profile group of the given\n     * user.\n     *\n     * @see CrossProfileApps#setInteractAcrossProfilesAppOp(String, int)\n     ",
    "links" : [ "android.Manifest.permission#INTERACT_ACROSS_PROFILES" ]
  } ],
  "methodNames" : [ "public abstract boolean verifyPackageHasInteractAcrossProfilePermission(String packageName, @UserIdInt int userId) throws PackageManager.NameNotFoundException", "public abstract boolean verifyUidHasInteractAcrossProfilePermission(String packageName, int uid)", "public abstract List<UserHandle> getTargetUserProfiles(String packageName, @UserIdInt int userId)", "public abstract void setInteractAcrossProfilesAppOp(String packageName, @Mode int newMode, @UserIdInt int userId)" ],
  "variableNames" : [ ]
}