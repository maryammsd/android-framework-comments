{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/webkit/URLUtil.java",
  "packageName" : "android.webkit",
  "className" : "URLUtil",
  "comment" : "",
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRACE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ASSET_BASE",
    "type" : "String",
    "comment" : " \"file:///android_asset/foo/bar.png\".",
    "links" : [ ]
  }, {
    "name" : "RESOURCE_BASE",
    "type" : "String",
    "comment" : " \"drawable-hdpi\" directory as well.",
    "links" : [ ]
  }, {
    "name" : "FILE_BASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROXY_BASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_BASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_DISPOSITION_PATTERN",
    "type" : "Pattern",
    "comment" : " Regex used to parse content-disposition headers ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String guessUrl(String inUrl)",
    "returnType" : "String",
    "comment" : "\n     * Cleans up (if possible) user-entered web addresses\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String composeSearchUrl(String inQuery, String template, String queryPlaceHolder)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[] decode(byte[] url) throws IllegalArgumentException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean verifyURLEncoding(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is correctly URL encoded\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int parseHex(byte b)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAssetUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is an asset file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isResourceUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a resource file.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isCookielessProxyUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a proxy url to allow cookieless network\n     * requests from a file url.\n     * @deprecated Cookieless proxy is no longer supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isFileUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a local file.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isAboutUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is an about: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isDataUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a data: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isJavaScriptUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a javascript: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHttpUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is an http: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHttpsUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is an https: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNetworkUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a network url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isContentUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is a content: url.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidUrl(String url)",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the url is valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stripAnchor(String url)",
    "returnType" : "String",
    "comment" : "\n     * Strips the url of the anchor.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String guessFileName(String url, @Nullable String contentDisposition, @Nullable String mimeType)",
    "returnType" : "String",
    "comment" : "\n     * Guesses canonical filename that a download would have, using\n     * the URL and contentDisposition. File extension, if not defined,\n     * is added based on the mimetype\n     * @param url Url to the content\n     * @param contentDisposition Content-Disposition HTTP header or {@code null}\n     * @param mimeType Mime-type of the content or {@code null}\n     *\n     * @return suggested filename\n     ",
    "links" : [ ]
  }, {
    "name" : " static String parseContentDisposition(String contentDisposition)",
    "returnType" : "String",
    "comment" : "\n     * Parse the Content-Disposition HTTP Header. The format of the header\n     * is defined here: http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html\n     * This header provides a filename for content that is going to be\n     * downloaded to the file system. We only support the attachment type.\n     * Note that RFC 2616 specifies the filename value must be double-quoted.\n     * Unfortunately some servers do not quote the value so to maintain\n     * consistent behaviour with other browsers, we allow unquoted values too.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOGTAG", "TRACE", "ASSET_BASE", "RESOURCE_BASE", "FILE_BASE", "PROXY_BASE", "CONTENT_BASE", "CONTENT_DISPOSITION_PATTERN" ],
  "methodNames" : [ "public static String guessUrl(String inUrl)", "public static String composeSearchUrl(String inQuery, String template, String queryPlaceHolder)", "public static byte[] decode(byte[] url) throws IllegalArgumentException", " static boolean verifyURLEncoding(String url)", "private static int parseHex(byte b)", "public static boolean isAssetUrl(String url)", "public static boolean isResourceUrl(String url)", "public static boolean isCookielessProxyUrl(String url)", "public static boolean isFileUrl(String url)", "public static boolean isAboutUrl(String url)", "public static boolean isDataUrl(String url)", "public static boolean isJavaScriptUrl(String url)", "public static boolean isHttpUrl(String url)", "public static boolean isHttpsUrl(String url)", "public static boolean isNetworkUrl(String url)", "public static boolean isContentUrl(String url)", "public static boolean isValidUrl(String url)", "public static String stripAnchor(String url)", "public static final String guessFileName(String url, @Nullable String contentDisposition, @Nullable String mimeType)", " static String parseContentDisposition(String contentDisposition)" ]
}