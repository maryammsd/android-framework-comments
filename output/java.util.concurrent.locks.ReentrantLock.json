{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/locks/ReentrantLock.java",
  "packageName" : "java.util.concurrent.locks",
  "className" : "ReentrantLock",
  "comment" : "\n * A reentrant mutual exclusion {@link Lock} with the same basic\n * behavior and semantics as the implicit monitor lock accessed using\n * {@code synchronized} methods and statements, but with extended\n * capabilities.\n *\n * <p>A {@code ReentrantLock} is <em>owned</em> by the thread last\n * successfully locking, but not yet unlocking it. A thread invoking\n * {@code lock} will return, successfully acquiring the lock, when\n * the lock is not owned by another thread. The method will return\n * immediately if the current thread already owns the lock. This can\n * be checked using methods {@link #isHeldByCurrentThread}, and {@link\n * #getHoldCount}.\n *\n * <p>The constructor for this class accepts an optional\n * <em>fairness</em> parameter.  When set {@code true}, under\n * contention, locks favor granting access to the longest-waiting\n * thread.  Otherwise this lock does not guarantee any particular\n * access order.  Programs using fair locks accessed by many threads\n * may display lower overall throughput (i.e., are slower; often much\n * slower) than those using the default setting, but have smaller\n * variances in times to obtain locks and guarantee lack of\n * starvation. Note however, that fairness of locks does not guarantee\n * fairness of thread scheduling. Thus, one of many threads using a\n * fair lock may obtain it multiple times in succession while other\n * active threads are not progressing and not currently holding the\n * lock.\n * Also note that the untimed {@link #tryLock()} method does not\n * honor the fairness setting. It will succeed if the lock\n * is available even if other threads are waiting.\n *\n * <p>It is recommended practice to <em>always</em> immediately\n * follow a call to {@code lock} with a {@code try} block, most\n * typically in a before/after construction such as:\n *\n * <pre> {@code\n * class X {\n *   private final ReentrantLock lock = new ReentrantLock();\n *   // ...\n *\n *   public void m() {\n *     lock.lock();  // block until condition holds\n *     try {\n *       // ... method body\n *     } finally {\n *       lock.unlock();\n *     }\n *   }\n * }}</pre>\n *\n * <p>In addition to implementing the {@link Lock} interface, this\n * class defines a number of {@code public} and {@code protected}\n * methods for inspecting the state of the lock.  Some of these\n * methods are only useful for instrumentation and monitoring.\n *\n * <p>Serialization of this class behaves in the same way as built-in\n * locks: a deserialized lock is in the unlocked state, regardless of\n * its state when serialized.\n *\n * <p>This lock supports a maximum of 2147483647 recursive locks by\n * the same thread. Attempts to exceed this limit result in\n * {@link Error} throws from locking methods.\n *\n * @since 1.5\n * @author Doug Lea\n ",
  "links" : [ "java.util.concurrent.locks.Lock", "#isHeldByCurrentThread", "Error", "#tryLock()", "#getHoldCount" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sync",
    "type" : "Sync",
    "comment" : " Synchronizer providing all implementation mechanics ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void lock()",
    "returnType" : "void",
    "comment" : "\n     * Acquires the lock.\n     *\n     * <p>Acquires the lock if it is not held by another thread and returns\n     * immediately, setting the lock hold count to one.\n     *\n     * <p>If the current thread already holds the lock then the hold\n     * count is incremented by one and the method returns immediately.\n     *\n     * <p>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until the lock has been acquired,\n     * at which time the lock hold count is set to one.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lockInterruptibly() throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Acquires the lock unless the current thread is\n     * {@linkplain Thread#interrupt interrupted}.\n     *\n     * <p>Acquires the lock if it is not held by another thread and returns\n     * immediately, setting the lock hold count to one.\n     *\n     * <p>If the current thread already holds this lock then the hold count\n     * is incremented by one and the method returns immediately.\n     *\n     * <p>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until one of two things happens:\n     *\n     * <ul>\n     *\n     * <li>The lock is acquired by the current thread; or\n     *\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts} the\n     * current thread.\n     *\n     * </ul>\n     *\n     * <p>If the lock is acquired by the current thread then the lock hold\n     * count is set to one.\n     *\n     * <p>If the current thread:\n     *\n     * <ul>\n     *\n     * <li>has its interrupted status set on entry to this method; or\n     *\n     * <li>is {@linkplain Thread#interrupt interrupted} while acquiring\n     * the lock,\n     *\n     * </ul>\n     *\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>In this implementation, as this method is an explicit\n     * interruption point, preference is given to responding to the\n     * interrupt over normal or reentrant acquisition of the lock.\n     *\n     * @throws InterruptedException if the current thread is interrupted\n     ",
    "links" : [ "InterruptedException" ]
  }, {
    "name" : "public boolean tryLock()",
    "returnType" : "boolean",
    "comment" : "\n     * Acquires the lock only if it is not held by another thread at the time\n     * of invocation.\n     *\n     * <p>Acquires the lock if it is not held by another thread and\n     * returns immediately with the value {@code true}, setting the\n     * lock hold count to one. Even when this lock has been set to use a\n     * fair ordering policy, a call to {@code tryLock()} <em>will</em>\n     * immediately acquire the lock if it is available, whether or not\n     * other threads are currently waiting for the lock.\n     * This &quot;barging&quot; behavior can be useful in certain\n     * circumstances, even though it breaks fairness. If you want to honor\n     * the fairness setting for this lock, then use\n     * {@link #tryLock(long, TimeUnit) tryLock(0, TimeUnit.SECONDS)}\n     * which is almost equivalent (it also detects interruption).\n     *\n     * <p>If the current thread already holds this lock then the hold\n     * count is incremented by one and the method returns {@code true}.\n     *\n     * <p>If the lock is held by another thread then this method will return\n     * immediately with the value {@code false}.\n     *\n     * @return {@code true} if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; and {@code false} otherwise\n     ",
    "links" : [ "#tryLock(long" ]
  }, {
    "name" : "public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException",
    "returnType" : "boolean",
    "comment" : "\n     * Acquires the lock if it is not held by another thread within the given\n     * waiting time and the current thread has not been\n     * {@linkplain Thread#interrupt interrupted}.\n     *\n     * <p>Acquires the lock if it is not held by another thread and returns\n     * immediately with the value {@code true}, setting the lock hold count\n     * to one. If this lock has been set to use a fair ordering policy then\n     * an available lock <em>will not</em> be acquired if any other threads\n     * are waiting for the lock. This is in contrast to the {@link #tryLock()}\n     * method. If you want a timed {@code tryLock} that does permit barging on\n     * a fair lock then combine the timed and un-timed forms together:\n     *\n     * <pre> {@code\n     * if (lock.tryLock() ||\n     *     lock.tryLock(timeout, unit)) {\n     *   ...\n     * }}</pre>\n     *\n     * <p>If the current thread\n     * already holds this lock then the hold count is incremented by one and\n     * the method returns {@code true}.\n     *\n     * <p>If the lock is held by another thread then the\n     * current thread becomes disabled for thread scheduling\n     * purposes and lies dormant until one of three things happens:\n     *\n     * <ul>\n     *\n     * <li>The lock is acquired by the current thread; or\n     *\n     * <li>Some other thread {@linkplain Thread#interrupt interrupts}\n     * the current thread; or\n     *\n     * <li>The specified waiting time elapses\n     *\n     * </ul>\n     *\n     * <p>If the lock is acquired then the value {@code true} is returned and\n     * the lock hold count is set to one.\n     *\n     * <p>If the current thread:\n     *\n     * <ul>\n     *\n     * <li>has its interrupted status set on entry to this method; or\n     *\n     * <li>is {@linkplain Thread#interrupt interrupted} while\n     * acquiring the lock,\n     *\n     * </ul>\n     * then {@link InterruptedException} is thrown and the current thread's\n     * interrupted status is cleared.\n     *\n     * <p>If the specified waiting time elapses then the value {@code false}\n     * is returned.  If the time is less than or equal to zero, the method\n     * will not wait at all.\n     *\n     * <p>In this implementation, as this method is an explicit\n     * interruption point, preference is given to responding to the\n     * interrupt over normal or reentrant acquisition of the lock, and\n     * over reporting the elapse of the waiting time.\n     *\n     * @param timeout the time to wait for the lock\n     * @param unit the time unit of the timeout argument\n     * @return {@code true} if the lock was free and was acquired by the\n     *         current thread, or the lock was already held by the current\n     *         thread; and {@code false} if the waiting time elapsed before\n     *         the lock could be acquired\n     * @throws InterruptedException if the current thread is interrupted\n     * @throws NullPointerException if the time unit is null\n     ",
    "links" : [ "#tryLock()", "InterruptedException" ]
  }, {
    "name" : "public void unlock()",
    "returnType" : "void",
    "comment" : "\n     * Attempts to release this lock.\n     *\n     * <p>If the current thread is the holder of this lock then the hold\n     * count is decremented.  If the hold count is now zero then the lock\n     * is released.  If the current thread is not the holder of this\n     * lock then {@link IllegalMonitorStateException} is thrown.\n     *\n     * @throws IllegalMonitorStateException if the current thread does not\n     *         hold this lock\n     ",
    "links" : [ "IllegalMonitorStateException" ]
  }, {
    "name" : "public Condition newCondition()",
    "returnType" : "Condition",
    "comment" : "\n     * Returns a {@link Condition} instance for use with this\n     * {@link Lock} instance.\n     *\n     * <p>The returned {@link Condition} instance supports the same\n     * usages as do the {@link Object} monitor methods ({@link\n     * Object#wait() wait}, {@link Object#notify notify}, and {@link\n     * Object#notifyAll notifyAll}) when used with the built-in\n     * monitor lock.\n     *\n     * <ul>\n     *\n     * <li>If this lock is not held when any of the {@link Condition}\n     * {@linkplain Condition#await() waiting} or {@linkplain\n     * Condition#signal signalling} methods are called, then an {@link\n     * IllegalMonitorStateException} is thrown.\n     *\n     * <li>When the condition {@linkplain Condition#await() waiting}\n     * methods are called the lock is released and, before they\n     * return, the lock is reacquired and the lock hold count restored\n     * to what it was when the method was called.\n     *\n     * <li>If a thread is {@linkplain Thread#interrupt interrupted}\n     * while waiting then the wait will terminate, an {@link\n     * InterruptedException} will be thrown, and the thread's\n     * interrupted status will be cleared.\n     *\n     * <li>Waiting threads are signalled in FIFO order.\n     *\n     * <li>The ordering of lock reacquisition for threads returning\n     * from waiting methods is the same as for threads initially\n     * acquiring the lock, which is in the default case not specified,\n     * but for <em>fair</em> locks favors those threads that have been\n     * waiting the longest.\n     *\n     * </ul>\n     *\n     * @return the Condition object\n     ",
    "links" : [ "java.util.concurrent.locks.Condition", "java.util.concurrent.locks.Lock", "Object", "#wait()", "#notifyAll", "#notify", "InterruptedException", "IllegalMonitorStateException" ]
  }, {
    "name" : "public int getHoldCount()",
    "returnType" : "int",
    "comment" : "\n     * Queries the number of holds on this lock by the current thread.\n     *\n     * <p>A thread has a hold on a lock for each lock action that is not\n     * matched by an unlock action.\n     *\n     * <p>The hold count information is typically only used for testing and\n     * debugging purposes. For example, if a certain section of code should\n     * not be entered with the lock already held then we can assert that\n     * fact:\n     *\n     * <pre> {@code\n     * class X {\n     *   final ReentrantLock lock = new ReentrantLock();\n     *   // ...\n     *   public void m() {\n     *     assert lock.getHoldCount() == 0;\n     *     lock.lock();\n     *     try {\n     *       // ... method body\n     *     } finally {\n     *       lock.unlock();\n     *     }\n     *   }\n     * }}</pre>\n     *\n     * @return the number of holds on this lock by the current thread,\n     *         or zero if this lock is not held by the current thread\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHeldByCurrentThread()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this lock is held by the current thread.\n     *\n     * <p>Analogous to the {@link Thread#holdsLock(Object)} method for\n     * built-in monitor locks, this method is typically used for\n     * debugging and testing. For example, a method that should only be\n     * called while a lock is held can assert that this is the case:\n     *\n     * <pre> {@code\n     * class X {\n     *   final ReentrantLock lock = new ReentrantLock();\n     *   // ...\n     *\n     *   public void m() {\n     *       assert lock.isHeldByCurrentThread();\n     *       // ... method body\n     *   }\n     * }}</pre>\n     *\n     * <p>It can also be used to ensure that a reentrant lock is used\n     * in a non-reentrant manner, for example:\n     *\n     * <pre> {@code\n     * class X {\n     *   final ReentrantLock lock = new ReentrantLock();\n     *   // ...\n     *\n     *   public void m() {\n     *       assert !lock.isHeldByCurrentThread();\n     *       lock.lock();\n     *       try {\n     *           // ... method body\n     *       } finally {\n     *           lock.unlock();\n     *       }\n     *   }\n     * }}</pre>\n     *\n     * @return {@code true} if current thread holds this lock and\n     *         {@code false} otherwise\n     ",
    "links" : [ "#holdsLock(Object)" ]
  }, {
    "name" : "public boolean isLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries if this lock is held by any thread. This method is\n     * designed for use in monitoring of the system state,\n     * not for synchronization control.\n     *\n     * @return {@code true} if any thread holds this lock and\n     *         {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isFair()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this lock has fairness set true.\n     *\n     * @return {@code true} if this lock has fairness set true\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Thread getOwner()",
    "returnType" : "Thread",
    "comment" : "\n     * Returns the thread that currently owns this lock, or\n     * {@code null} if not owned. When this method is called by a\n     * thread that is not the owner, the return value reflects a\n     * best-effort approximation of current lock status. For example,\n     * the owner may be momentarily {@code null} even if there are\n     * threads trying to acquire the lock but have not yet done so.\n     * This method is designed to facilitate construction of\n     * subclasses that provide more extensive lock monitoring\n     * facilities.\n     *\n     * @return the owner, or {@code null} if not owned\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasQueuedThreads()",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads are waiting to acquire this lock. Note that\n     * because cancellations may occur at any time, a {@code true}\n     * return does not guarantee that any other thread will ever\n     * acquire this lock.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * @return {@code true} if there may be other threads waiting to\n     *         acquire the lock\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean hasQueuedThread(Thread thread)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether the given thread is waiting to acquire this\n     * lock. Note that because cancellations may occur at any time, a\n     * {@code true} return does not guarantee that this thread\n     * will ever acquire this lock.  This method is designed primarily for use\n     * in monitoring of the system state.\n     *\n     * @param thread the thread\n     * @return {@code true} if the given thread is queued waiting for this lock\n     * @throws NullPointerException if the thread is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getQueueLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of threads waiting to acquire\n     * this lock.  The value is only an estimate because the number of\n     * threads may change dynamically while this method traverses\n     * internal data structures.  This method is designed for use in\n     * monitoring system state, not for synchronization control.\n     *\n     * @return the estimated number of threads waiting for this lock\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Collection<Thread> getQueuedThreads()",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing threads that may be waiting to\n     * acquire this lock.  Because the actual set of threads may change\n     * dynamically while constructing this result, the returned\n     * collection is only a best-effort estimate.  The elements of the\n     * returned collection are in no particular order.  This method is\n     * designed to facilitate construction of subclasses that provide\n     * more extensive monitoring facilities.\n     *\n     * @return the collection of threads\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasWaiters(Condition condition)",
    "returnType" : "boolean",
    "comment" : "\n     * Queries whether any threads are waiting on the given condition\n     * associated with this lock. Note that because timeouts and\n     * interrupts may occur at any time, a {@code true} return does\n     * not guarantee that a future {@code signal} will awaken any\n     * threads.  This method is designed primarily for use in\n     * monitoring of the system state.\n     *\n     * @param condition the condition\n     * @return {@code true} if there are any waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWaitQueueLength(Condition condition)",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of threads waiting on the\n     * given condition associated with this lock. Note that because\n     * timeouts and interrupts may occur at any time, the estimate\n     * serves only as an upper bound on the actual number of waiters.\n     * This method is designed for use in monitoring of the system\n     * state, not for synchronization control.\n     *\n     * @param condition the condition\n     * @return the estimated number of waiting threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Collection<Thread> getWaitingThreads(Condition condition)",
    "returnType" : "Collection<Thread>",
    "comment" : "\n     * Returns a collection containing those threads that may be\n     * waiting on the given condition associated with this lock.\n     * Because the actual set of threads may change dynamically while\n     * constructing this result, the returned collection is only a\n     * best-effort estimate. The elements of the returned collection\n     * are in no particular order.  This method is designed to\n     * facilitate construction of subclasses that provide more\n     * extensive condition monitoring facilities.\n     *\n     * @param condition the condition\n     * @return the collection of threads\n     * @throws IllegalMonitorStateException if this lock is not held\n     * @throws IllegalArgumentException if the given condition is\n     *         not associated with this lock\n     * @throws NullPointerException if the condition is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string identifying this lock, as well as its lock state.\n     * The state, in brackets, includes either the String {@code \"Unlocked\"}\n     * or the String {@code \"Locked by\"} followed by the\n     * {@linkplain Thread#getName name} of the owning thread.\n     *\n     * @return a string identifying this lock, as well as its lock state\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void lock()", "public void lockInterruptibly() throws InterruptedException", "public boolean tryLock()", "public boolean tryLock(long timeout, TimeUnit unit) throws InterruptedException", "public void unlock()", "public Condition newCondition()", "public int getHoldCount()", "public boolean isHeldByCurrentThread()", "public boolean isLocked()", "public final boolean isFair()", "protected Thread getOwner()", "public final boolean hasQueuedThreads()", "public final boolean hasQueuedThread(Thread thread)", "public final int getQueueLength()", "protected Collection<Thread> getQueuedThreads()", "public boolean hasWaiters(Condition condition)", "public int getWaitQueueLength(Condition condition)", "protected Collection<Thread> getWaitingThreads(Condition condition)", "public String toString()" ],
  "variableNames" : [ "serialVersionUID", "sync" ]
}