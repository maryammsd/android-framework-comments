{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/navigationbar/KeyButtonDrawable.java",
  "packageName" : "android.inputmethodservice.navigationbar",
  "className" : "KeyButtonDrawable",
  "comment" : "\n * Drawable for {@link KeyButtonView}s that supports tinting between two colors, rotation and shows\n * a shadow. AnimatedVectorDrawable will only support tinting from intensities but has no support\n * for shadows nor rotations.\n ",
  "links" : [ "android.inputmethodservice.navigationbar.KeyButtonView" ],
  "variables" : [ {
    "name" : "KEY_DRAWABLE_ROTATE",
    "type" : "FloatProperty<KeyButtonDrawable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_DRAWABLE_TRANSLATE_Y",
    "type" : "FloatProperty<KeyButtonDrawable>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIconPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "ShadowDrawableState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatedDrawable",
    "type" : "AnimatedVectorDrawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimatedDrawableCallback",
    "type" : "Callback",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDarkIntensity(float intensity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRotation(float degrees)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTranslationX(float x)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTranslationY(float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTranslation(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setShadowProperties(int x, int y, int size, int color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getDarkIntensity()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getRotation()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getTranslationX()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getTranslationY()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canAnimate()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void resetAnimation()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAnimationCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getDrawableBackgroundColor()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean hasOvalBg()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void regenerateBitmapIconCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void regenerateBitmapShadowCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateShadowAlpha()",
    "returnType" : "void",
    "comment" : "\n     * Set the alpha of the shadow. As dark intensity increases, drop the alpha of the shadow since\n     * dark color and shadow should not be visible at the same time.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setDrawableBounds(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Prevent shadow clipping by offsetting the drawable bounds by the shadow and its offset\n     * @param d the drawable to set the bounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static KeyButtonDrawable create(Context context, @ColorInt int lightColor, @ColorInt int darkColor, @DrawableRes int iconResId, boolean hasShadow, Color ovalBackgroundColor)",
    "returnType" : "KeyButtonDrawable",
    "comment" : "\n     * Creates a KeyButtonDrawable with a shadow given its icon. For more information, see\n     * {@link #create(Context, int, boolean, boolean)}.\n     ",
    "links" : [ "#create(Context" ]
  } ],
  "methodNames" : [ "public void setDarkIntensity(float intensity)", "public void setRotation(float degrees)", "public void setTranslationX(float x)", "public void setTranslationY(float y)", "public void setTranslation(float x, float y)", "public void setShadowProperties(int x, int y, int size, int color)", "public boolean setVisible(boolean visible, boolean restart)", "public void jumpToCurrentState()", "public void setAlpha(int alpha)", "public void setColorFilter(ColorFilter colorFilter)", "public float getDarkIntensity()", "public float getRotation()", "public float getTranslationX()", "public float getTranslationY()", "public ConstantState getConstantState()", "public int getOpacity()", "public int getIntrinsicHeight()", "public int getIntrinsicWidth()", "public boolean canAnimate()", "public void startAnimation()", "public void resetAnimation()", "public void clearAnimationCallbacks()", "public void draw(Canvas canvas)", "public boolean canApplyTheme()", " int getDrawableBackgroundColor()", " boolean hasOvalBg()", "private void regenerateBitmapIconCache()", "private void regenerateBitmapShadowCache()", "private void updateShadowAlpha()", "private void setDrawableBounds(Drawable d)", "public static KeyButtonDrawable create(Context context, @ColorInt int lightColor, @ColorInt int darkColor, @DrawableRes int iconResId, boolean hasShadow, Color ovalBackgroundColor)" ],
  "variableNames" : [ "KEY_DRAWABLE_ROTATE", "KEY_DRAWABLE_TRANSLATE_Y", "mIconPaint", "mShadowPaint", "mState", "mAnimatedDrawable", "mAnimatedDrawableCallback" ]
}