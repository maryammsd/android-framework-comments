{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Downloads.java",
  "packageName" : "android.provider",
  "className" : "Impl",
  "comment" : "\n     * Implementation details\n     *\n     * Exposes constants used to interact with the download manager's\n     * content provider.\n     * The constants URI ... STATUS are the names of columns in the downloads table.\n     *\n     * @hide\n     ",
  "variables" : [ {
    "name" : "AUTHORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_ACCESS",
    "type" : "String",
    "comment" : "\n         * The permission to access the download manager\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_ACCESS_ADVANCED",
    "type" : "String",
    "comment" : "\n         * The permission to access the download manager's advanced functions\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_ACCESS_ALL",
    "type" : "String",
    "comment" : "\n         * The permission to access the all the downloads in the manager.\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_CACHE",
    "type" : "String",
    "comment" : "\n         * The permission to directly access the download manager's cache\n         * directory\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_SEND_INTENTS",
    "type" : "String",
    "comment" : "\n         * The permission to send broadcasts on download completion\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_CACHE_NON_PURGEABLE",
    "type" : "String",
    "comment" : "\n         * The permission to download files to the cache partition that won't be automatically\n         * purged when space is needed.\n         ",
    "links" : [ ]
  }, {
    "name" : "PERMISSION_NO_NOTIFICATION",
    "type" : "String",
    "comment" : "\n         * The permission to download files without any system notification being shown.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content:// URI to access downloads owned by the caller's UID.\n         ",
    "links" : [ ]
  }, {
    "name" : "ALL_DOWNLOADS_CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n         * The content URI for accessing all downloads across all UIDs (requires the\n         * ACCESS_ALL_DOWNLOADS permission).\n         ",
    "links" : [ ]
  }, {
    "name" : "PUBLICLY_ACCESSIBLE_DOWNLOADS_URI_SEGMENT",
    "type" : "String",
    "comment" : " URI segment to access a publicly accessible downloaded file ",
    "links" : [ ]
  }, {
    "name" : "PUBLICLY_ACCESSIBLE_DOWNLOADS_URI",
    "type" : "Uri",
    "comment" : "\n         * The content URI for accessing publicly accessible downloads (i.e., it requires no\n         * permissions to access this downloaded file)\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_DOWNLOAD_COMPLETED",
    "type" : "String",
    "comment" : "\n         * Broadcast Action: this is sent by the download manager to the app\n         * that had initiated a download when that download completes. The\n         * download's content: uri is specified in the intent's data.\n         ",
    "links" : [ ]
  }, {
    "name" : "ACTION_NOTIFICATION_CLICKED",
    "type" : "String",
    "comment" : "\n         * Broadcast Action: this is sent by the download manager to the app\n         * that had initiated a download when the user selects the notification\n         * associated with that download. The download's content: uri is specified\n         * in the intent's data if the click is associated with a single download,\n         * or Downloads.CONTENT_URI if the notification is associated with\n         * multiple downloads.\n         * Note: this is not currently sent for downloads that have completed\n         * successfully.\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_URI",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the URI of the data being downloaded.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_APP_DATA",
    "type" : "String",
    "comment" : "\n         * The name of the column containing application-specific data.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read/Write</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_NO_INTEGRITY",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the flags that indicates whether\n         * the initiating application is capable of verifying the integrity of\n         * the downloaded file. When this flag is set, the download manager\n         * performs downloads and reports success even in some situations where\n         * it can't guarantee that the download has completed (e.g. when doing\n         * a byte-range request without an ETag, or when it can't determine\n         * whether a download fully completed).\n         * <P>Type: BOOLEAN</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_FILE_NAME_HINT",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the filename that the initiating\n         * application recommends. When possible, the download manager will attempt\n         * to use this filename, or a variation, as the actual name for the file.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "_DATA",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the filename where the downloaded data\n         * was actually stored.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_MIME_TYPE",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the MIME type of the downloaded data.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_DESTINATION",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the flag that controls the destination\n         * of the download. See the DESTINATION_* constants for a list of legal values.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_VISIBILITY",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the flags that controls whether the\n         * download is displayed by the UI. See the VISIBILITY_* constants for\n         * a list of legal values.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Init/Read/Write</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_CONTROL",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the current control state  of the download.\n         * Applications can write to this to control (pause/resume) the download.\n         * the CONTROL_* constants for a list of legal values.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_STATUS",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the current status of the download.\n         * Applications can read this to follow the progress of each download. See\n         * the STATUS_* constants for a list of legal values.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_LAST_MODIFICATION",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the date at which some interesting\n         * status changed in the download. Stored as a System.currentTimeMillis()\n         * value.\n         * <P>Type: BIGINT</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_NOTIFICATION_PACKAGE",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the package name of the application\n         * that initiating the download. The download manager will send\n         * notifications to a component in this package when the download completes.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_NOTIFICATION_CLASS",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the component name of the class that\n         * will receive notifications associated with the download. The\n         * package/class combination is passed to\n         * Intent.setClassName(String,String).\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_NOTIFICATION_EXTRAS",
    "type" : "String",
    "comment" : "\n         * If extras are specified when requesting a download they will be provided in the intent that\n         * is sent to the specified class and package when a download has finished.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_COOKIE_DATA",
    "type" : "String",
    "comment" : "\n         * The name of the column contain the values of the cookie to be used for\n         * the download. This is used directly as the value for the Cookie: HTTP\n         * header that gets sent with the request.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_USER_AGENT",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the user agent that the initiating\n         * application wants the download manager to use for this download.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_REFERER",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the referer (sic) that the initiating\n         * application wants the download manager to use for this download.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_TOTAL_BYTES",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the total size of the file being\n         * downloaded.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_CURRENT_BYTES",
    "type" : "String",
    "comment" : "\n         * The name of the column containing the size of the part of the file that\n         * has been downloaded so far.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_OTHER_UID",
    "type" : "String",
    "comment" : "\n         * The name of the column where the initiating application can provide the\n         * UID of another application that is allowed to access this download. If\n         * multiple applications share the same UID, all those applications will be\n         * allowed to access this download. This column can be updated after the\n         * download is initiated. This requires the permission\n         * android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Init</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_TITLE",
    "type" : "String",
    "comment" : "\n         * The name of the column where the initiating application can provided the\n         * title of this download. The title will be displayed ito the user in the\n         * list of downloads.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read/Write</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_DESCRIPTION",
    "type" : "String",
    "comment" : "\n         * The name of the column where the initiating application can provide the\n         * description of this download. The description will be displayed to the\n         * user in the list of downloads.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Init/Read/Write</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_IS_PUBLIC_API",
    "type" : "String",
    "comment" : "\n         * The name of the column indicating whether the download was requesting through the public\n         * API.  This controls some differences in behavior.\n         * <P>Type: BOOLEAN</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ALLOWED_NETWORK_TYPES",
    "type" : "String",
    "comment" : "\n         * The name of the column holding a bitmask of allowed network types.  This is only used for\n         * public API downloads.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ALLOW_ROAMING",
    "type" : "String",
    "comment" : "\n         * The name of the column indicating whether roaming connections can be used.  This is only\n         * used for public API downloads.\n         * <P>Type: BOOLEAN</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ALLOW_METERED",
    "type" : "String",
    "comment" : "\n         * The name of the column indicating whether metered connections can be used.  This is only\n         * used for public API downloads.\n         * <P>Type: BOOLEAN</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI",
    "type" : "String",
    "comment" : "\n         * Whether or not this download should be displayed in the system's Downloads UI.  Defaults\n         * to true.\n         * <P>Type: INTEGER</P>\n         * <P>Owner can Init/Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT",
    "type" : "String",
    "comment" : "\n         * If true, the user has confirmed that this download can proceed over the mobile network\n         * even though it exceeds the recommended maximum size.\n         * <P>Type: BOOLEAN</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_DELETED",
    "type" : "String",
    "comment" : "\n         * Set to true if this download is deleted. It is completely removed from the database\n         * when MediaProvider database also deletes the metadata asociated with this downloaded file.\n         * <P>Type: BOOLEAN</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_MEDIAPROVIDER_URI",
    "type" : "String",
    "comment" : "\n         * The URI to the corresponding entry in MediaProvider for this downloaded entry. It is\n         * used to delete the entries from MediaProvider database when it is deleted from the\n         * downloaded list.\n         * <P>Type: TEXT</P>\n         * <P>Owner can Read</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_MEDIASTORE_URI",
    "type" : "String",
    "comment" : "\n         * Similar to {@link #COLUMN_MEDIAPROVIDER_URI}, except this cannot be updated/queried\n         * by apps and will be the source of truth when updating/deleting download entries in\n         * MediaProvider database.\n         *\n         * <P>Type: TEXT</P>\n         ",
    "links" : [ "#COLUMN_MEDIAPROVIDER_URI" ]
  }, {
    "name" : "COLUMN_MEDIA_SCANNED",
    "type" : "String",
    "comment" : "\n         * The column that is used to remember whether the media scanner was invoked.\n         * It can take the values: {@link #MEDIA_NOT_SCANNED}, {@link #MEDIA_SCANNED} or\n         * {@link #MEDIA_NOT_SCANNABLE} or {@code null}. If it's value is {@code null}, it will be\n         * treated as {@link #MEDIA_NOT_SCANNED}.\n         *\n         * <P>Type: TEXT</P>\n         ",
    "links" : [ "#MEDIA_NOT_SCANNED", "#MEDIA_SCANNED", "#MEDIA_NOT_SCANNABLE", "#MEDIA_NOT_SCANNED" ]
  }, {
    "name" : "MEDIA_NOT_SCANNED",
    "type" : "int",
    "comment" : " Possible values for column {@link #COLUMN_MEDIA_SCANNED} ",
    "links" : [ "#COLUMN_MEDIA_SCANNED" ]
  }, {
    "name" : "MEDIA_SCANNED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MEDIA_NOT_SCANNABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ERROR_MSG",
    "type" : "String",
    "comment" : "\n         * The column with errorMsg for a failed downloaded.\n         * Used only for debugging purposes.\n         * <P>Type: TEXT</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_LAST_UPDATESRC",
    "type" : "String",
    "comment" : "\n         *  This column stores the source of the last update to this row.\n         *  This column is only for internal use.\n         *  Valid values are indicated by LAST_UPDATESRC_* constants.\n         * <P>Type: INT</P>\n         ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_FAILED_CONNECTIONS",
    "type" : "String",
    "comment" : " The column that is used to count retries ",
    "links" : [ ]
  }, {
    "name" : "COLUMN_ALLOW_WRITE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRES_CHARGING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_REQUIRES_DEVICE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COLUMN_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_UPDATESRC_NOT_RELEVANT",
    "type" : "int",
    "comment" : "\n         * default value for {@link #COLUMN_LAST_UPDATESRC}.\n         * This value is used when this column's value is not relevant.\n         ",
    "links" : [ "#COLUMN_LAST_UPDATESRC" ]
  }, {
    "name" : "LAST_UPDATESRC_DONT_NOTIFY_DOWNLOADSVC",
    "type" : "int",
    "comment" : "\n         * One of the values taken by {@link #COLUMN_LAST_UPDATESRC}.\n         * This value is used when the update is NOT to be relayed to the DownloadService\n         * (and thus spare DownloadService from scanning the database when this change occurs)\n         ",
    "links" : [ "#COLUMN_LAST_UPDATESRC" ]
  }, {
    "name" : "DESTINATION_EXTERNAL",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the external storage. This is the\n         * default behavior, and should be used for any file that the user\n         * can freely access, copy, delete. Even with that destination,\n         * unencrypted DRM files are saved in secure internal storage.\n         * Downloads to the external destination only write files for which\n         * there is a registered handler. The resulting files are accessible\n         * by filename to all applications.\n         ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_CACHE_PARTITION",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the download manager's private\n         * partition. This is the behavior used by applications that want to\n         * download private files that are used and deleted soon after they\n         * get downloaded. All file types are allowed, and only the initiating\n         * application can access the file (indirectly through a content\n         * provider). This requires the\n         * android.permission.ACCESS_DOWNLOAD_MANAGER_ADVANCED permission.\n         ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_CACHE_PARTITION_PURGEABLE",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the download manager's private\n         * partition and will be purged as necessary to make space. This is\n         * for private files (similar to CACHE_PARTITION) that aren't deleted\n         * immediately after they are used, and are kept around by the download\n         * manager as long as space is available.\n         ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_CACHE_PARTITION_NOROAMING",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the download manager's private\n         * partition, as with DESTINATION_CACHE_PARTITION, but the download\n         * will not proceed if the user is on a roaming data connection.\n         ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_FILE_URI",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the location given by the file URI in\n         * {@link #COLUMN_FILE_NAME_HINT}.\n         ",
    "links" : [ "#COLUMN_FILE_NAME_HINT" ]
  }, {
    "name" : "DESTINATION_SYSTEMCACHE_PARTITION",
    "type" : "int",
    "comment" : "\n         * This download will be saved to the system cache (\"/cache\")\n         * partition. This option is only used by system apps and so it requires\n         * android.permission.ACCESS_CACHE_FILESYSTEM permission.\n         ",
    "links" : [ ]
  }, {
    "name" : "DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD",
    "type" : "int",
    "comment" : "\n         * This download was completed by the caller (i.e., NOT downloadmanager)\n         * and caller wants to have this download displayed in Downloads App.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTROL_RUN",
    "type" : "int",
    "comment" : "\n         * This download is allowed to run.\n         ",
    "links" : [ ]
  }, {
    "name" : "CONTROL_PAUSED",
    "type" : "int",
    "comment" : "\n         * This download must pause at the first opportunity.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PENDING",
    "type" : "int",
    "comment" : "\n         * This download hasn't stated yet\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_RUNNING",
    "type" : "int",
    "comment" : "\n         * This download has started\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PAUSED_BY_APP",
    "type" : "int",
    "comment" : "\n         * This download has been paused by the owning app.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_WAITING_TO_RETRY",
    "type" : "int",
    "comment" : "\n         * This download encountered some network error and is waiting before retrying the request.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_WAITING_FOR_NETWORK",
    "type" : "int",
    "comment" : "\n         * This download is waiting for network connectivity to proceed.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_QUEUED_FOR_WIFI",
    "type" : "int",
    "comment" : "\n         * This download exceeded a size limit for mobile networks and is waiting for a Wi-Fi\n         * connection to proceed.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_INSUFFICIENT_SPACE_ERROR",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed due to insufficient storage\n         * space.  Typically, this is because the SD card is full.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_DEVICE_NOT_FOUND_ERROR",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because no external storage\n         * device was found.  Typically, this is because the SD card is not\n         * mounted.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_SUCCESS",
    "type" : "int",
    "comment" : "\n         * This download has successfully completed.\n         * Warning: there might be other status values that indicate success\n         * in the future.\n         * Use isStatusSuccess() to capture the entire category.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BAD_REQUEST",
    "type" : "int",
    "comment" : "\n         * This request couldn't be parsed. This is also used when processing\n         * requests with unknown/unsupported URI schemes.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_NOT_ACCEPTABLE",
    "type" : "int",
    "comment" : "\n         * This download can't be performed because the content type cannot be\n         * handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_LENGTH_REQUIRED",
    "type" : "int",
    "comment" : "\n         * This download cannot be performed because the length cannot be\n         * determined accurately. This is the code for the HTTP error \"Length\n         * Required\", which is typically used when making requests that require\n         * a content length but don't have one, and it is also used in the\n         * client when a response is received whose length cannot be determined\n         * accurately (therefore making it impossible to know when a download\n         * completes).\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_PRECONDITION_FAILED",
    "type" : "int",
    "comment" : "\n         * This download was interrupted and cannot be resumed.\n         * This is the code for the HTTP error \"Precondition Failed\", and it is\n         * also used in situations where the client doesn't have an ETag at all.\n         ",
    "links" : [ ]
  }, {
    "name" : "MIN_ARTIFICIAL_ERROR_STATUS",
    "type" : "int",
    "comment" : "\n         * The lowest-valued error status that is not an actual HTTP status code.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_FILE_ALREADY_EXISTS_ERROR",
    "type" : "int",
    "comment" : "\n         * The requested destination file already exists.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_CANNOT_RESUME",
    "type" : "int",
    "comment" : "\n         * Some possibly transient error occurred, but we can't resume the download.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_CANCELED",
    "type" : "int",
    "comment" : "\n         * This download was canceled\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNKNOWN_ERROR",
    "type" : "int",
    "comment" : "\n         * This download has completed with an error.\n         * Warning: there will be other status values that indicate errors in\n         * the future. Use isStatusError() to capture the entire category.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_FILE_ERROR",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because of a storage issue.\n         * Typically, that's because the filesystem is missing or full.\n         * Use the more specific {@link #STATUS_INSUFFICIENT_SPACE_ERROR}\n         * and {@link #STATUS_DEVICE_NOT_FOUND_ERROR} when appropriate.\n         ",
    "links" : [ "#STATUS_INSUFFICIENT_SPACE_ERROR", "#STATUS_DEVICE_NOT_FOUND_ERROR" ]
  }, {
    "name" : "STATUS_UNHANDLED_REDIRECT",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because of an HTTP\n         * redirect response that the download manager couldn't\n         * handle.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_UNHANDLED_HTTP_CODE",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because of an\n         * unspecified unhandled HTTP code.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_HTTP_DATA_ERROR",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because of an\n         * error receiving or processing data at the HTTP level.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_HTTP_EXCEPTION",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because of an\n         * HttpException while setting up the request.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_TOO_MANY_REDIRECTS",
    "type" : "int",
    "comment" : "\n         * This download couldn't be completed because there were\n         * too many redirects.\n         ",
    "links" : [ ]
  }, {
    "name" : "STATUS_BLOCKED",
    "type" : "int",
    "comment" : "\n         * This download has failed because requesting application has been\n         * blocked by {@link NetworkPolicyManager}.\n         *\n         * @hide\n         * @deprecated since behavior now uses\n         *             {@link #STATUS_WAITING_FOR_NETWORK}\n         ",
    "links" : [ "NetworkPolicyManager", "#STATUS_WAITING_FOR_NETWORK" ]
  }, {
    "name" : "VISIBILITY_VISIBLE",
    "type" : "int",
    "comment" : "\n         * This download is visible but only shows in the notifications\n         * while it's in progress.\n         ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_VISIBLE_NOTIFY_COMPLETED",
    "type" : "int",
    "comment" : "\n         * This download is visible and shows in the notifications while\n         * in progress and after completion.\n         ",
    "links" : [ ]
  }, {
    "name" : "VISIBILITY_HIDDEN",
    "type" : "int",
    "comment" : "\n         * This download doesn't show in the UI or in the notifications.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isStatusInformational(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the status is informational (i.e. 1xx).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStatusSuccess(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the status is a success (i.e. 2xx).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStatusError(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the status is an error (i.e. 4xx or 5xx).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStatusClientError(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the status is a client error (i.e. 4xx).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isStatusServerError(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the status is a server error (i.e. 5xx).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNotificationToBeDisplayed(int visibility)",
    "returnType" : "boolean",
    "comment" : "\n         * this method determines if a notification should be displayed for a\n         * given {@link #COLUMN_VISIBILITY} value\n         * @param visibility the value of {@link #COLUMN_VISIBILITY}.\n         * @return true if the notification should be displayed. false otherwise.\n         ",
    "links" : [ "#COLUMN_VISIBILITY", "#COLUMN_VISIBILITY" ]
  }, {
    "name" : "public static boolean isStatusCompleted(int status)",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the download has completed (either with success or\n         * error).\n         ",
    "links" : [ ]
  }, {
    "name" : "public static String statusToString(int status)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "AUTHORITY", "PERMISSION_ACCESS", "PERMISSION_ACCESS_ADVANCED", "PERMISSION_ACCESS_ALL", "PERMISSION_CACHE", "PERMISSION_SEND_INTENTS", "PERMISSION_CACHE_NON_PURGEABLE", "PERMISSION_NO_NOTIFICATION", "CONTENT_URI", "ALL_DOWNLOADS_CONTENT_URI", "PUBLICLY_ACCESSIBLE_DOWNLOADS_URI_SEGMENT", "PUBLICLY_ACCESSIBLE_DOWNLOADS_URI", "ACTION_DOWNLOAD_COMPLETED", "ACTION_NOTIFICATION_CLICKED", "COLUMN_URI", "COLUMN_APP_DATA", "COLUMN_NO_INTEGRITY", "COLUMN_FILE_NAME_HINT", "_DATA", "COLUMN_MIME_TYPE", "COLUMN_DESTINATION", "COLUMN_VISIBILITY", "COLUMN_CONTROL", "COLUMN_STATUS", "COLUMN_LAST_MODIFICATION", "COLUMN_NOTIFICATION_PACKAGE", "COLUMN_NOTIFICATION_CLASS", "COLUMN_NOTIFICATION_EXTRAS", "COLUMN_COOKIE_DATA", "COLUMN_USER_AGENT", "COLUMN_REFERER", "COLUMN_TOTAL_BYTES", "COLUMN_CURRENT_BYTES", "COLUMN_OTHER_UID", "COLUMN_TITLE", "COLUMN_DESCRIPTION", "COLUMN_IS_PUBLIC_API", "COLUMN_ALLOWED_NETWORK_TYPES", "COLUMN_ALLOW_ROAMING", "COLUMN_ALLOW_METERED", "COLUMN_IS_VISIBLE_IN_DOWNLOADS_UI", "COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT", "COLUMN_DELETED", "COLUMN_MEDIAPROVIDER_URI", "COLUMN_MEDIASTORE_URI", "COLUMN_MEDIA_SCANNED", "MEDIA_NOT_SCANNED", "MEDIA_SCANNED", "MEDIA_NOT_SCANNABLE", "COLUMN_ERROR_MSG", "COLUMN_LAST_UPDATESRC", "COLUMN_FAILED_CONNECTIONS", "COLUMN_ALLOW_WRITE", "FLAG_REQUIRES_CHARGING", "FLAG_REQUIRES_DEVICE_IDLE", "COLUMN_FLAGS", "LAST_UPDATESRC_NOT_RELEVANT", "LAST_UPDATESRC_DONT_NOTIFY_DOWNLOADSVC", "DESTINATION_EXTERNAL", "DESTINATION_CACHE_PARTITION", "DESTINATION_CACHE_PARTITION_PURGEABLE", "DESTINATION_CACHE_PARTITION_NOROAMING", "DESTINATION_FILE_URI", "DESTINATION_SYSTEMCACHE_PARTITION", "DESTINATION_NON_DOWNLOADMANAGER_DOWNLOAD", "CONTROL_RUN", "CONTROL_PAUSED", "STATUS_PENDING", "STATUS_RUNNING", "STATUS_PAUSED_BY_APP", "STATUS_WAITING_TO_RETRY", "STATUS_WAITING_FOR_NETWORK", "STATUS_QUEUED_FOR_WIFI", "STATUS_INSUFFICIENT_SPACE_ERROR", "STATUS_DEVICE_NOT_FOUND_ERROR", "STATUS_SUCCESS", "STATUS_BAD_REQUEST", "STATUS_NOT_ACCEPTABLE", "STATUS_LENGTH_REQUIRED", "STATUS_PRECONDITION_FAILED", "MIN_ARTIFICIAL_ERROR_STATUS", "STATUS_FILE_ALREADY_EXISTS_ERROR", "STATUS_CANNOT_RESUME", "STATUS_CANCELED", "STATUS_UNKNOWN_ERROR", "STATUS_FILE_ERROR", "STATUS_UNHANDLED_REDIRECT", "STATUS_UNHANDLED_HTTP_CODE", "STATUS_HTTP_DATA_ERROR", "STATUS_HTTP_EXCEPTION", "STATUS_TOO_MANY_REDIRECTS", "STATUS_BLOCKED", "VISIBILITY_VISIBLE", "VISIBILITY_VISIBLE_NOTIFY_COMPLETED", "VISIBILITY_HIDDEN" ],
  "methodNames" : [ "public static boolean isStatusInformational(int status)", "public static boolean isStatusSuccess(int status)", "public static boolean isStatusError(int status)", "public static boolean isStatusClientError(int status)", "public static boolean isStatusServerError(int status)", "public static boolean isNotificationToBeDisplayed(int visibility)", "public static boolean isStatusCompleted(int status)", "public static String statusToString(int status)" ]
}