{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/OutputStreamWriter.java",
  "packageName" : "java.io",
  "className" : "OutputStreamWriter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "se",
    "type" : "StreamEncoder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the character encoding being used by this stream.\n     *\n     * <p> If the encoding has an historical name then that name is returned;\n     * otherwise the encoding's canonical name is returned.\n     *\n     * <p> If this instance was created with the {@link\n     * #OutputStreamWriter(OutputStream, String)} constructor then the returned\n     * name, being unique for the encoding, may differ from the name passed to\n     * the constructor.  This method may return {@code null} if the stream has\n     * been closed. </p>\n     *\n     * @return The historical name of this encoding, or possibly\n     *         {@code null} if the stream has been closed\n     *\n     * @see java.nio.charset.Charset\n     *\n     * @revised 1.4\n     ",
    "links" : [ "#OutputStreamWriter(OutputStream" ]
  }, {
    "name" : " void flushBuffer() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes the output buffer to the underlying byte stream, without flushing\n     * the byte stream itself.  This method is non-private only so that it may\n     * be invoked by PrintStream.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a single character.\n     *\n     * @throws     IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a portion of an array of characters.\n     *\n     * @param  cbuf  Buffer of characters\n     * @param  off   Offset from which to start writing characters\n     * @param  len   Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given array\n     *\n     * @throws  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(String str, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes a portion of a string.\n     *\n     * @param  str  A String\n     * @param  off  Offset from which to start writing characters\n     * @param  len  Number of characters to write\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given string\n     *\n     * @throws  IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public Writer append(CharSequence csq, int start, int end) throws IOException",
    "returnType" : "Writer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Writer append(CharSequence csq) throws IOException",
    "returnType" : "Writer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes the stream.\n     *\n     * @throws     IOException  If an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getEncoding()", " void flushBuffer() throws IOException", "public void write(int c) throws IOException", "public void write(char[] cbuf, int off, int len) throws IOException", "public void write(String str, int off, int len) throws IOException", "public Writer append(CharSequence csq, int start, int end) throws IOException", "public Writer append(CharSequence csq) throws IOException", "public void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "se" ]
}