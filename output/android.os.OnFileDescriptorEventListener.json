{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/MessageQueue.java",
  "packageName" : "android.os",
  "className" : "OnFileDescriptorEventListener",
  "comment" : "\n     * A listener which is invoked when file descriptor related events occur.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EVENT_INPUT",
    "type" : "int",
    "comment" : "\n         * File descriptor event: Indicates that the file descriptor is ready for input\n         * operations, such as reading.\n         * <p>\n         * The listener should read all available data from the file descriptor\n         * then return <code>true</code> to keep the listener active or <code>false</code>\n         * to remove the listener.\n         * </p><p>\n         * In the case of a socket, this event may be generated to indicate\n         * that there is at least one incoming connection that the listener\n         * should accept.\n         * </p><p>\n         * This event will only be generated if the {@link #EVENT_INPUT} event mask was\n         * specified when the listener was added.\n         * </p>\n         ",
    "links" : [ "#EVENT_INPUT" ]
  }, {
    "name" : "EVENT_OUTPUT",
    "type" : "int",
    "comment" : "\n         * File descriptor event: Indicates that the file descriptor is ready for output\n         * operations, such as writing.\n         * <p>\n         * The listener should write as much data as it needs.  If it could not\n         * write everything at once, then it should return <code>true</code> to\n         * keep the listener active.  Otherwise, it should return <code>false</code>\n         * to remove the listener then re-register it later when it needs to write\n         * something else.\n         * </p><p>\n         * This event will only be generated if the {@link #EVENT_OUTPUT} event mask was\n         * specified when the listener was added.\n         * </p>\n         ",
    "links" : [ "#EVENT_OUTPUT" ]
  }, {
    "name" : "EVENT_ERROR",
    "type" : "int",
    "comment" : "\n         * File descriptor event: Indicates that the file descriptor encountered a\n         * fatal error.\n         * <p>\n         * File descriptor errors can occur for various reasons.  One common error\n         * is when the remote peer of a socket or pipe closes its end of the connection.\n         * </p><p>\n         * This event may be generated at any time regardless of whether the\n         * {@link #EVENT_ERROR} event mask was specified when the listener was added.\n         * </p>\n         ",
    "links" : [ "#EVENT_ERROR" ]
  } ],
  "methods" : [ {
    "name" : " int onFileDescriptorEvents(@NonNull FileDescriptor fd, @Events int events)",
    "returnType" : "int",
    "comment" : "\n         * Called when a file descriptor receives events.\n         *\n         * @param fd The file descriptor.\n         * @param events The set of events that occurred: a combination of the\n         * {@link #EVENT_INPUT}, {@link #EVENT_OUTPUT}, and {@link #EVENT_ERROR} event masks.\n         * @return The new set of events to watch, or 0 to unregister the listener.\n         *\n         * @see #EVENT_INPUT\n         * @see #EVENT_OUTPUT\n         * @see #EVENT_ERROR\n         ",
    "links" : [ "#EVENT_OUTPUT", "#EVENT_ERROR", "#EVENT_INPUT" ]
  } ],
  "methodNames" : [ " int onFileDescriptorEvents(@NonNull FileDescriptor fd, @Events int events)" ],
  "variableNames" : [ "EVENT_INPUT", "EVENT_OUTPUT", "EVENT_ERROR" ]
}