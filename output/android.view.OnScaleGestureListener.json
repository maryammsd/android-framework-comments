{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ScaleGestureDetector.java",
  "packageName" : "android.view",
  "className" : "OnScaleGestureListener",
  "comment" : "\n     * The listener for receiving notifications when gestures occur.\n     * If you want to listen for all the different gestures then implement\n     * this interface. If you only want to listen for a subset it might\n     * be easier to extend {@link SimpleOnScaleGestureListener}.\n     *\n     * An application will receive events in the following order:\n     * <ul>\n     *  <li>One {@link OnScaleGestureListener#onScaleBegin(ScaleGestureDetector)}\n     *  <li>Zero or more {@link OnScaleGestureListener#onScale(ScaleGestureDetector)}\n     *  <li>One {@link OnScaleGestureListener#onScaleEnd(ScaleGestureDetector)}\n     * </ul>\n     ",
  "links" : [ "SimpleOnScaleGestureListener", "#onScaleBegin(ScaleGestureDetector)", "#onScaleEnd(ScaleGestureDetector)", "#onScale(ScaleGestureDetector)" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean onScale(@NonNull ScaleGestureDetector detector)",
    "returnType" : "boolean",
    "comment" : "\n         * Responds to scaling events for a gesture in progress.\n         * Reported by pointer motion.\n         *\n         * @param detector The detector reporting the event - use this to\n         *          retrieve extended info about event state.\n         * @return Whether or not the detector should consider this event\n         *          as handled. If an event was not handled, the detector\n         *          will continue to accumulate movement until an event is\n         *          handled. This can be useful if an application, for example,\n         *          only wants to update scaling factors if the change is\n         *          greater than 0.01.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean onScaleBegin(@NonNull ScaleGestureDetector detector)",
    "returnType" : "boolean",
    "comment" : "\n         * Responds to the beginning of a scaling gesture. Reported by\n         * new pointers going down.\n         *\n         * @param detector The detector reporting the event - use this to\n         *          retrieve extended info about event state.\n         * @return Whether or not the detector should continue recognizing\n         *          this gesture. For example, if a gesture is beginning\n         *          with a focal point outside of a region where it makes\n         *          sense, onScaleBegin() may return false to ignore the\n         *          rest of the gesture.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onScaleEnd(@NonNull ScaleGestureDetector detector)",
    "returnType" : "void",
    "comment" : "\n         * Responds to the end of a scale gesture. Reported by existing\n         * pointers going up.\n         *\n         * Once a scale has ended, {@link ScaleGestureDetector#getFocusX()}\n         * and {@link ScaleGestureDetector#getFocusY()} will return focal point\n         * of the pointers remaining on the screen.\n         *\n         * @param detector The detector reporting the event - use this to\n         *          retrieve extended info about event state.\n         ",
    "links" : [ "android.view.ScaleGestureDetector#getFocusY()", "android.view.ScaleGestureDetector#getFocusX()" ]
  } ],
  "methodNames" : [ "public boolean onScale(@NonNull ScaleGestureDetector detector)", "public boolean onScaleBegin(@NonNull ScaleGestureDetector detector)", "public void onScaleEnd(@NonNull ScaleGestureDetector detector)" ],
  "variableNames" : [ ]
}