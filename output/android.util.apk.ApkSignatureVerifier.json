{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/apk/ApkSignatureVerifier.java",
  "packageName" : "android.util.apk",
  "className" : "ApkSignatureVerifier",
  "comment" : "\n * Facade class that takes care of the details of APK verification on\n * behalf of ParsingPackageUtils.\n *\n * @hide for internal use only.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sBuffer",
    "type" : "AtomicReference<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sOverrideSigningDetails",
    "type" : "ArrayMap<SigningDetails, SigningDetails>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ParseResult<SigningDetails> verify(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion)",
    "returnType" : "ParseResult<SigningDetails>",
    "comment" : "\n     * Verifies the provided APK and returns the certificates associated with each signer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ParseResult<SigningDetails> unsafeGetCertsWithoutVerification(ParseInput input, String apkPath, int minSignatureSchemeVersion)",
    "returnType" : "ParseResult<SigningDetails>",
    "comment" : "\n     * Returns the certificates associated with each signer for the given APK without verification.\n     * This method is dangerous and should not be used, unless the caller is absolutely certain the\n     * APK is trusted.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetails> verifySignatures(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)",
    "returnType" : "ParseResult<SigningDetails>",
    "comment" : "\n     * Verifies the provided APK using all allowed signing schemas.\n     * @return the certificates associated with each signer.\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addOverrideSigningDetails(@NonNull SigningDetails oldSigningDetails, @NonNull SigningDetails newSigningDetails)",
    "returnType" : "void",
    "comment" : "\n     * Add a pair of signing details so that packages signed with {@code oldSigningDetails} will\n     * behave as if they are signed by the {@code newSigningDetails}.\n     *\n     * @param oldSigningDetails the original signing detail of the package\n     * @param newSigningDetails the new signing detail that will replace the original one\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void removeOverrideSigningDetails(@NonNull SigningDetails oldSigningDetails)",
    "returnType" : "void",
    "comment" : "\n     * Remove a pair of signing details previously added via {@link #addOverrideSigningDetails} by\n     * the old signing details.\n     *\n     * @param oldSigningDetails the original signing detail of the package\n     * @throws SecurityException if the build is not debuggable\n     ",
    "links" : [ "#addOverrideSigningDetails" ]
  }, {
    "name" : "public static void clearOverrideSigningDetails()",
    "returnType" : "void",
    "comment" : "\n     * Clear all pairs of signing details previously added via {@link #addOverrideSigningDetails}.\n     ",
    "links" : [ "#addOverrideSigningDetails" ]
  }, {
    "name" : "public static ParseResult<SigningDetailsWithDigests> verifySignaturesInternal(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "\n     * Verifies the provided APK using all allowed signing schemas.\n     * @return the certificates associated with each signer and content digests.\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetailsWithDigests> verifyV3AndBelowSignatures(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetailsWithDigests> verifyV4Signature(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws SignatureNotFoundException",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "\n     * Verifies the provided APK using V4 schema.\n     *\n     * @param verifyFull whether to verify (V4 vs V3) or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V4 signatures in the APK\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetailsWithDigests> verifyV3Signature(ParseInput input, String apkPath, boolean verifyFull) throws SignatureNotFoundException",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "\n     * Verifies the provided APK using V3 schema.\n     *\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V3 signatures in the APK\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetailsWithDigests> verifyV2Signature(ParseInput input, String apkPath, boolean verifyFull) throws SignatureNotFoundException",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "\n     * Verifies the provided APK using V2 schema.\n     *\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     * @return the certificates associated with each signer.\n     * @throws SignatureNotFoundException if there are no V2 signatures in the APK\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<SigningDetailsWithDigests> verifyV1Signature(ParseInput input, String apkPath, boolean verifyFull)",
    "returnType" : "ParseResult<SigningDetailsWithDigests>",
    "comment" : "\n     * Verifies the provided APK using JAR schema.\n     * @return the certificates associated with each signer.\n     * @param verifyFull whether to verify all contents of this APK or just collect certificates.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ParseResult<Certificate[][]> loadCertificates(ParseInput input, StrictJarFile jarFile, ZipEntry entry)",
    "returnType" : "ParseResult<Certificate[][]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void readFullyIgnoringContents(InputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Signature[] convertToSignatures(Certificate[][] certs) throws CertificateEncodingException",
    "returnType" : "Signature[]",
    "comment" : "\n     * Converts an array of certificate chains into the {@code Signature} equivalent used by the\n     * PackageManager.\n     *\n     * @throws CertificateEncodingException if it is unable to create a Signature object.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void closeQuietly(StrictJarFile jarFile)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getMinimumSignatureSchemeVersionForTargetSdk(int targetSdk)",
    "returnType" : "int",
    "comment" : "\n     * Returns the minimum signature scheme version required for an app targeting the specified\n     * {@code targetSdk}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException",
    "returnType" : "byte[]",
    "comment" : "\n     * @return the verity root hash in the Signing Block.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException",
    "returnType" : "byte[]",
    "comment" : "\n     * Generates the Merkle tree and verity metadata to the buffer allocated by the {@code\n     * ByteBufferFactory}.\n     *\n     * @return the verity root hash of the generated Merkle tree.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static ParseResult<SigningDetails> verify(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion)", "public static ParseResult<SigningDetails> unsafeGetCertsWithoutVerification(ParseInput input, String apkPath, int minSignatureSchemeVersion)", "private static ParseResult<SigningDetails> verifySignatures(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)", "public static void addOverrideSigningDetails(@NonNull SigningDetails oldSigningDetails, @NonNull SigningDetails newSigningDetails)", "public static void removeOverrideSigningDetails(@NonNull SigningDetails oldSigningDetails)", "public static void clearOverrideSigningDetails()", "public static ParseResult<SigningDetailsWithDigests> verifySignaturesInternal(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)", "private static ParseResult<SigningDetailsWithDigests> verifyV3AndBelowSignatures(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull)", "private static ParseResult<SigningDetailsWithDigests> verifyV4Signature(ParseInput input, String apkPath, @SignatureSchemeVersion int minSignatureSchemeVersion, boolean verifyFull) throws SignatureNotFoundException", "private static ParseResult<SigningDetailsWithDigests> verifyV3Signature(ParseInput input, String apkPath, boolean verifyFull) throws SignatureNotFoundException", "private static ParseResult<SigningDetailsWithDigests> verifyV2Signature(ParseInput input, String apkPath, boolean verifyFull) throws SignatureNotFoundException", "private static ParseResult<SigningDetailsWithDigests> verifyV1Signature(ParseInput input, String apkPath, boolean verifyFull)", "private static ParseResult<Certificate[][]> loadCertificates(ParseInput input, StrictJarFile jarFile, ZipEntry entry)", "private static void readFullyIgnoringContents(InputStream in) throws IOException", "private static Signature[] convertToSignatures(Certificate[][] certs) throws CertificateEncodingException", "private static void closeQuietly(StrictJarFile jarFile)", "public static int getMinimumSignatureSchemeVersionForTargetSdk(int targetSdk)", "public static byte[] getVerityRootHash(String apkPath) throws IOException, SecurityException", "public static byte[] generateApkVerity(String apkPath, ByteBufferFactory bufferFactory) throws IOException, SignatureNotFoundException, SecurityException, DigestException, NoSuchAlgorithmException" ],
  "variableNames" : [ "LOG_TAG", "sBuffer", "sOverrideSigningDetails" ]
}