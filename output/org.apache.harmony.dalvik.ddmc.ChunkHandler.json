{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/dalvik/ddmc/ChunkHandler.java",
  "packageName" : "org.apache.harmony.dalvik.ddmc",
  "className" : "ChunkHandler",
  "comment" : "\n * Handle a chunk of data sent from a DDM server.\n *\n * To handle a chunk type, sub-class {@link ChunkHandler} and register your class\n * with {@link DdmServer}.\n *\n * @hide\n ",
  "links" : [ "org.apache.harmony.dalvik.ddmc.DdmServer", "org.apache.harmony.dalvik.ddmc.ChunkHandler" ],
  "variables" : [ {
    "name" : "CHUNK_ORDER",
    "type" : "ByteOrder",
    "comment" : "\n     * Byte order of the data in the chunk.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CHUNK_FAIL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the DDM server connects.  The handler is allowed to\n     * send messages to the server.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onDisconnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when the DDM server disconnects.  Can be used to disable\n     * periodic transmissions or clean up saved state.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Chunk handleChunk(Chunk request)",
    "returnType" : "Chunk",
    "comment" : "\n     * Handle a single chunk of data.  {@code request} includes the type and\n     * the chunk payload.\n     *\n     * Returns a response in a {@link Chunk}.\n     *\n     * @param request chunk type and payload\n     * @return        {@link Chunk} with response\n     *\n     * @hide\n     ",
    "links" : [ "org.apache.harmony.dalvik.ddmc.Chunk" ]
  }, {
    "name" : "public static Chunk createFailChunk(int errorCode, String msg)",
    "returnType" : "Chunk",
    "comment" : "\n     * Create a FAIL chunk.  The {@link #handleChunk(Chunk)} methods can use this to\n     * return an error message when they are not able to process a chunk.\n     *\n     * @param errorCode arbitrary number to distinguish error\n     * @param msg       error message\n     * @return          {@link Chunk} with response\n     *\n     * @hide\n     ",
    "links" : [ "org.apache.harmony.dalvik.ddmc.Chunk", "#handleChunk(Chunk)" ]
  }, {
    "name" : "public static ByteBuffer wrapChunk(Chunk request)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Utility function to wrap a {@link ByteBuffer} around a {@link Chunk}.\n     *\n     * @param request chunk to be wrapped\n     * @return        {@link ByteBuffer} wrapping data from the given chunk\n     *\n     * @hide\n     ",
    "links" : [ "org.apache.harmony.dalvik.ddmc.Chunk", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public static int type(String typeName)",
    "returnType" : "int",
    "comment" : "\n     * Convert a 4-character string to a 32-bit type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String name(int type)",
    "returnType" : "String",
    "comment" : "\n     * Convert an integer type to a 4-character string.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onConnected()", "public abstract void onDisconnected()", "public abstract Chunk handleChunk(Chunk request)", "public static Chunk createFailChunk(int errorCode, String msg)", "public static ByteBuffer wrapChunk(Chunk request)", "public static int type(String typeName)", "public static String name(int type)" ],
  "variableNames" : [ "CHUNK_ORDER", "CHUNK_FAIL" ]
}