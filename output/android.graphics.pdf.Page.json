{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/pdf/PdfDocument.java",
  "packageName" : "android.graphics.pdf",
  "className" : "Page",
  "comment" : "\n     * This class represents a PDF document page. It has associated\n     * a canvas on which you can draw content and is acquired by a\n     * call to {@link #getCanvas()}. It also has associated a\n     * {@link PageInfo} instance that describes its attributes. Also\n     * a page has \n     ",
  "variables" : [ {
    "name" : "mPageInfo",
    "type" : "PageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCanvas",
    "type" : "Canvas",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Canvas getCanvas()",
    "returnType" : "Canvas",
    "comment" : "\n         * Gets the {@link Canvas} of the page.\n         *\n         * <p>\n         * <strong>Note: </strong> There are some draw operations that are not yet\n         * supported by the canvas returned by this method. More specifically:\n         * <ul>\n         * <li>Inverse path clipping performed via {@link Canvas#clipPath(android.graphics.Path,\n         *     android.graphics.Region.Op) Canvas.clipPath(android.graphics.Path,\n         *     android.graphics.Region.Op)} for {@link\n         *     android.graphics.Region.Op#REVERSE_DIFFERENCE\n         *     Region.Op#REVERSE_DIFFERENCE} operations.</li>\n         * <li>{@link Canvas#drawVertices(android.graphics.Canvas.VertexMode, int,\n         *     float[], int, float[], int, int[], int, short[], int, int,\n         *     android.graphics.Paint) Canvas.drawVertices(\n         *     android.graphics.Canvas.VertexMode, int, float[], int, float[],\n         *     int, int[], int, short[], int, int, android.graphics.Paint)}</li>\n         * <li>Color filters set via {@link Paint#setColorFilter(\n         *     android.graphics.ColorFilter)}</li>\n         * <li>Mask filters set via {@link Paint#setMaskFilter(\n         *     android.graphics.MaskFilter)}</li>\n         * <li>Some XFER modes such as\n         *     {@link android.graphics.PorterDuff.Mode#SRC_ATOP PorterDuff.Mode SRC},\n         *     {@link android.graphics.PorterDuff.Mode#DST_ATOP PorterDuff.DST_ATOP},\n         *     {@link android.graphics.PorterDuff.Mode#XOR PorterDuff.XOR},\n         *     {@link android.graphics.PorterDuff.Mode#ADD PorterDuff.ADD}</li>\n         * </ul>\n         *\n         * @return The canvas if the page is not finished, null otherwise.\n         *\n         * @see PdfDocument#finishPage(Page)\n         ",
    "links" : [ "android.graphics.Canvas#drawVertices(android.graphics.Canvas.VertexMode", "android.graphics.Canvas#clipPath(android.graphics.Path", "android.graphics.Paint#setColorFilter(", "android.graphics.PorterDuff.Mode#ADD", "android.graphics.PorterDuff.Mode#DST_ATOP", "android.graphics.Region.Op#REVERSE_DIFFERENCERegion.Op", "android.graphics.PorterDuff.Mode#XOR", "android.graphics.Paint#setMaskFilter(", "android.graphics.Canvas", "android.graphics.PorterDuff.Mode#SRC_ATOP" ]
  }, {
    "name" : "public PageInfo getInfo()",
    "returnType" : "PageInfo",
    "comment" : "\n         * Gets the {@link PageInfo} with meta-data for the page.\n         *\n         * @return The page info.\n         *\n         * @see PdfDocument#finishPage(Page)\n         ",
    "links" : [ "PageInfo" ]
  }, {
    "name" : " boolean isFinished()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void finish()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPageInfo", "mCanvas" ],
  "methodNames" : [ "public Canvas getCanvas()", "public PageInfo getInfo()", " boolean isFinished()", "private void finish()" ]
}