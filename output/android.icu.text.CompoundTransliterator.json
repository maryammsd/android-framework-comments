{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CompoundTransliterator.java",
  "packageName" : "android.icu.text",
  "className" : "CompoundTransliterator",
  "comment" : "\n * A transliterator that is composed of two or more other\n * transliterator objects linked together.  For example, if one\n * transliterator transliterates from script A to script B, and\n * another transliterates from script B to script C, the two may be\n * combined to form a new transliterator from A to C.\n *\n * <p>Composed transliterators may not behave as expected.  For\n * example, inverses may not combine to form the identity\n * transliterator.  See the class documentation for {@link\n * Transliterator} for details.\n *\n * <p>Copyright &copy; IBM Corporation 1999.  All rights reserved.\n *\n * @author Alan Liu\n ",
  "links" : [ "android.icu.text.Transliterator" ],
  "variables" : [ {
    "name" : "trans",
    "type" : "Transliterator[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numAnonymousRBTs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void init(List<Transliterator> list, int direction, boolean fixReverseID)",
    "returnType" : "void",
    "comment" : "\n     * Finish constructing a transliterator: only to be called by\n     * constructors.  Before calling init(), set trans and filter to NULL.\n     * @param list a vector of transliterator objects to be adopted.  It\n     * should NOT be empty.  The list should be in declared order.  That\n     * is, it should be in the FORWARD order; if direction is REVERSE then\n     * the list order will be reversed.\n     * @param direction either FORWARD or REVERSE\n     * @param fixReverseID if true, then reconstruct the ID of reverse\n     * entries by calling getID() of component entries.  Some constructors\n     * do not require this because they apply a facade ID anyway.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of transliterators in this chain.\n     * @return number of transliterators in this chain.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transliterator getTransliterator(int index)",
    "returnType" : "Transliterator",
    "comment" : "\n     * Returns the transliterator at the given index in this chain.\n     * @param index index into chain, from 0 to <code>getCount() - 1</code>\n     * @return transliterator at the given index\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void _smartAppend(StringBuilder buf, char c)",
    "returnType" : "void",
    "comment" : "\n     * Append c to buf, unless buf is empty or buf already ends in c.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toRules(boolean escapeUnprintable)",
    "returnType" : "String",
    "comment" : "\n     * Override Transliterator:\n     * Create a rule string that can be passed to createFromRules()\n     * to recreate this transliterator.\n     * @param escapeUnprintable if true then convert unprintable\n     * character to their hex escape representations, \\\\uxxxx or\n     * \\\\Uxxxxxxxx.  Unprintable characters are those other than\n     * U+000A, U+0020..U+007E.\n     * @return the rule string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet)",
    "returnType" : "void",
    "comment" : "\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void handleTransliterate(Replaceable text, Position index, boolean incremental)",
    "returnType" : "void",
    "comment" : "\n     * Implements {@link Transliterator#handleTransliterate}.\n     ",
    "links" : [ "android.icu.text.Transliterator#handleTransliterate" ]
  }, {
    "name" : "private void computeMaximumContextLength()",
    "returnType" : "void",
    "comment" : "\n     * Compute and set the length of the longest context required by this transliterator.\n     * This is <em>preceding</em> context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Transliterator safeClone()",
    "returnType" : "Transliterator",
    "comment" : "\n     * Temporary hack for registry problem. Needs to be replaced by better architecture.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void init(List<Transliterator> list, int direction, boolean fixReverseID)", "public int getCount()", "public Transliterator getTransliterator(int index)", "private static void _smartAppend(StringBuilder buf, char c)", "public String toRules(boolean escapeUnprintable)", "public void addSourceTargetSet(UnicodeSet filter, UnicodeSet sourceSet, UnicodeSet targetSet)", "protected void handleTransliterate(Replaceable text, Position index, boolean incremental)", "private void computeMaximumContextLength()", "public Transliterator safeClone()" ],
  "variableNames" : [ "trans", "numAnonymousRBTs" ]
}