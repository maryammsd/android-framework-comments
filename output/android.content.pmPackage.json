{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageParser.java",
  "packageName" : "android.content.pm",
  "className" : "Package",
  "comment" : "\n     * Representation of a full package parsed from APK files on disk. A package\n     * consists of a single base APK, and zero or more split APKs.\n     *\n     * Deprecated internally. Use AndroidPackage instead.\n     ",
  "variables" : [ {
    "name" : "packageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "manifestPackageName",
    "type" : "String",
    "comment" : " renamed, for example static shared libs use synthetic package names.",
    "links" : [ ]
  }, {
    "name" : "splitNames",
    "type" : "String[]",
    "comment" : " Names of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "volumeUuid",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "codePath",
    "type" : "String",
    "comment" : "\n         * Path where this package was found on disk. For monolithic packages\n         * this is path to single base APK file; for cluster packages this is\n         * path to the cluster directory.\n         ",
    "links" : [ ]
  }, {
    "name" : "baseCodePath",
    "type" : "String",
    "comment" : " Path of base APK ",
    "links" : [ ]
  }, {
    "name" : "splitCodePaths",
    "type" : "String[]",
    "comment" : " Paths of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "baseRevisionCode",
    "type" : "int",
    "comment" : " Revision code of base APK ",
    "links" : [ ]
  }, {
    "name" : "splitRevisionCodes",
    "type" : "int[]",
    "comment" : " Revision codes of any split APKs, ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "splitFlags",
    "type" : "int[]",
    "comment" : " Flags of any split APKs; ordered by parsed splitName ",
    "links" : [ ]
  }, {
    "name" : "splitPrivateFlags",
    "type" : "int[]",
    "comment" : "\n         * Private flags of any split APKs; ordered by parsed splitName.\n         *\n         * {@hide}\n         ",
    "links" : [ ]
  }, {
    "name" : "baseHardwareAccelerated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "applicationInfo",
    "type" : "ApplicationInfo",
    "comment" : " For now we only support one application per package.",
    "links" : [ ]
  }, {
    "name" : "permissions",
    "type" : "ArrayList<Permission>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "permissionGroups",
    "type" : "ArrayList<PermissionGroup>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "activities",
    "type" : "ArrayList<Activity>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "receivers",
    "type" : "ArrayList<Activity>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "providers",
    "type" : "ArrayList<Provider>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "services",
    "type" : "ArrayList<Service>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "instrumentation",
    "type" : "ArrayList<Instrumentation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "requestedPermissions",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "implicitPermissions",
    "type" : "ArrayList<String>",
    "comment" : " Permissions requested but not in the manifest. ",
    "links" : [ ]
  }, {
    "name" : "protectedBroadcasts",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parentPackage",
    "type" : "Package",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "childPackages",
    "type" : "ArrayList<Package>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "staticSharedLibName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "staticSharedLibVersion",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "libraryNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesLibraries",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesStaticLibraries",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesStaticLibrariesVersions",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesStaticLibrariesCertDigests",
    "type" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesOptionalLibraries",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesLibraryFiles",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "usesLibraryInfos",
    "type" : "ArrayList<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "preferredActivityFilters",
    "type" : "ArrayList<ActivityIntentInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalPackages",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRealPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAdoptPermissions",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppMetaData",
    "type" : "Bundle",
    "comment" : " We store the application meta-data independently to avoid multiple unwanted references",
    "links" : [ ]
  }, {
    "name" : "mVersionCode",
    "type" : "int",
    "comment" : " The version code declared for this package.",
    "links" : [ ]
  }, {
    "name" : "mVersionCodeMajor",
    "type" : "int",
    "comment" : " The major version code declared for this package.",
    "links" : [ ]
  }, {
    "name" : "mVersionName",
    "type" : "String",
    "comment" : " The version name declared for this package.",
    "links" : [ ]
  }, {
    "name" : "mSharedUserId",
    "type" : "String",
    "comment" : " The shared user id that this package wants to use.",
    "links" : [ ]
  }, {
    "name" : "mSharedUserLabel",
    "type" : "int",
    "comment" : " The shared user label that this package wants to use.",
    "links" : [ ]
  }, {
    "name" : "mSigningDetails",
    "type" : "SigningDetails",
    "comment" : " Signatures that were read from the package.",
    "links" : [ ]
  }, {
    "name" : "mPreferredOrder",
    "type" : "int",
    "comment" : " preferred up order.",
    "links" : [ ]
  }, {
    "name" : "mLastPackageUsageTimeInMills",
    "type" : "long[]",
    "comment" : " For use by package manager to keep track of when a package was last used.",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Object",
    "comment" : " Additional data supplied by callers.",
    "links" : [ ]
  }, {
    "name" : "configPreferences",
    "type" : "ArrayList<ConfigurationInfo>",
    "comment" : " Applications hardware preferences",
    "links" : [ ]
  }, {
    "name" : "reqFeatures",
    "type" : "ArrayList<FeatureInfo>",
    "comment" : " Applications requested features",
    "links" : [ ]
  }, {
    "name" : "featureGroups",
    "type" : "ArrayList<FeatureGroupInfo>",
    "comment" : " Applications requested feature groups",
    "links" : [ ]
  }, {
    "name" : "installLocation",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "coreApp",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiredForAllUsers",
    "type" : "boolean",
    "comment" : " An app that's required for all users and cannot be uninstalled for a user ",
    "links" : [ ]
  }, {
    "name" : "mRestrictedAccountType",
    "type" : "String",
    "comment" : " The restricted account authenticator type that is used by this application ",
    "links" : [ ]
  }, {
    "name" : "mRequiredAccountType",
    "type" : "String",
    "comment" : " The required account type without which this application will not function ",
    "links" : [ ]
  }, {
    "name" : "mOverlayTarget",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayTargetName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayCategory",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOverlayIsStatic",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompileSdkVersion",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompileSdkVersionCodename",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUpgradeKeySets",
    "type" : "ArraySet<String>",
    "comment" : "\n         * Data used to feed the KeySetManagerService\n         ",
    "links" : [ ]
  }, {
    "name" : "mKeySetMapping",
    "type" : "ArrayMap<String, ArraySet<PublicKey>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cpuAbiOverride",
    "type" : "String",
    "comment" : "\n         * The install time abi override for this package, if any.\n         *\n         * TODO: This seems like a horrible place to put the abiOverride because\n         * this isn't something the packageParser parsers. However, this fits in with\n         * the rest of the PackageManager where package scanning randomly pushes\n         * and prods fields out of {@code this.applicationInfo}.\n         ",
    "links" : [ ]
  }, {
    "name" : "use32bitAbi",
    "type" : "boolean",
    "comment" : "\n         * The install time abi override to choose 32bit abi's when multiple abi's\n         * are present. This is only meaningfull for multiarch applications.\n         * The use32bitAbi attribute is ignored if cpuAbiOverride is also set.\n         ",
    "links" : [ ]
  }, {
    "name" : "restrictUpdateHash",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "visibleToInstantApps",
    "type" : "boolean",
    "comment" : " Set if the app or any of its components are visible to instant applications. ",
    "links" : [ ]
  }, {
    "name" : "isStub",
    "type" : "boolean",
    "comment" : " Whether or not the package is a stub and must be replaced by the full version. ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getLongVersionCode()",
    "returnType" : "long",
    "comment" : " Return long containing mVersionCode and mVersionCodeMajor.",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationVolumeUuid(String volumeUuid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoCodePath(String codePath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoResourcePath(String resourcePath)",
    "returnType" : "void",
    "comment" : " @deprecated Forward locked apps no longer supported. Resource path not needed. ",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoBaseResourcePath(String resourcePath)",
    "returnType" : "void",
    "comment" : " @deprecated Forward locked apps no longer supported. Resource path not needed. ",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoBaseCodePath(String baseCodePath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getChildPackageNames()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasChildPackage(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoSplitCodePaths(String[] splitCodePaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoSplitResourcePaths(String[] resroucePaths)",
    "returnType" : "void",
    "comment" : " @deprecated Forward locked apps no longer supported. Resource path not needed. ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitCodePaths(String[] codePaths)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCodePath(String codePath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setBaseCodePath(String baseCodePath)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSigningDetails(@NonNull SigningDetails signingDetails)",
    "returnType" : "void",
    "comment" : " Sets signing details on the package and any of its children. ",
    "links" : [ ]
  }, {
    "name" : "public void setVolumeUuid(String volumeUuid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationInfoFlags(int mask, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUse32bitAbi(boolean use32bitAbi)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isLibrary()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllCodePaths()",
    "returnType" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAllCodePathsExcludingResourceOnly()",
    "returnType" : "List<String>",
    "comment" : "\n         * Filtered set of {@link #getAllCodePaths()} that excludes\n         * resource-only APKs.\n         ",
    "links" : [ "#getAllCodePaths" ]
  }, {
    "name" : "public void setPackageName(String newName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasComponentClassName(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isExternal()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isForwardLocked()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOem()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVendor()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isProduct()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystemExt()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOdm()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPrivileged()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystem()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpdatedSystemApp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean canHaveOatDir()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMatch(int flags)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLatestPackageUseTimeInMills()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getLatestForegroundPackageUseTimeInMills()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void internStringArrayList(List<String> list)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void fixupOwner(List<? extends Component<?>> list)",
    "returnType" : "void",
    "comment" : "\n         * Sets the package owner and the the {@code applicationInfo} for every component\n         * owner by this package.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeKeySetMapping(Parcel dest, ArrayMap<String, ArraySet<PublicKey>> keySetMapping)",
    "returnType" : "void",
    "comment" : "\n         * Writes the keyset mapping to the provided package. {@code null} mappings are permitted.\n         ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayMap<String, ArraySet<PublicKey>> readKeySetMapping(Parcel in)",
    "returnType" : "ArrayMap<String, ArraySet<PublicKey>>",
    "comment" : "\n         * Reads a keyset mapping from the given parcel at the given data position. May return\n         * {@code null} if the serialized mapping was {@code null}.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "packageName", "manifestPackageName", "splitNames", "volumeUuid", "codePath", "baseCodePath", "splitCodePaths", "baseRevisionCode", "splitRevisionCodes", "splitFlags", "splitPrivateFlags", "baseHardwareAccelerated", "applicationInfo", "permissions", "permissionGroups", "activities", "receivers", "providers", "services", "instrumentation", "requestedPermissions", "implicitPermissions", "protectedBroadcasts", "parentPackage", "childPackages", "staticSharedLibName", "staticSharedLibVersion", "libraryNames", "usesLibraries", "usesStaticLibraries", "usesStaticLibrariesVersions", "usesStaticLibrariesCertDigests", "usesOptionalLibraries", "usesLibraryFiles", "usesLibraryInfos", "preferredActivityFilters", "mOriginalPackages", "mRealPackage", "mAdoptPermissions", "mAppMetaData", "mVersionCode", "mVersionCodeMajor", "mVersionName", "mSharedUserId", "mSharedUserLabel", "mSigningDetails", "mPreferredOrder", "mLastPackageUsageTimeInMills", "mExtras", "configPreferences", "reqFeatures", "featureGroups", "installLocation", "coreApp", "mRequiredForAllUsers", "mRestrictedAccountType", "mRequiredAccountType", "mOverlayTarget", "mOverlayTargetName", "mOverlayCategory", "mOverlayPriority", "mOverlayIsStatic", "mCompileSdkVersion", "mCompileSdkVersionCodename", "mUpgradeKeySets", "mKeySetMapping", "cpuAbiOverride", "use32bitAbi", "restrictUpdateHash", "visibleToInstantApps", "isStub", "CREATOR" ],
  "methodNames" : [ "public long getLongVersionCode()", "public void setApplicationVolumeUuid(String volumeUuid)", "public void setApplicationInfoCodePath(String codePath)", "public void setApplicationInfoResourcePath(String resourcePath)", "public void setApplicationInfoBaseResourcePath(String resourcePath)", "public void setApplicationInfoBaseCodePath(String baseCodePath)", "public List<String> getChildPackageNames()", "public boolean hasChildPackage(String packageName)", "public void setApplicationInfoSplitCodePaths(String[] splitCodePaths)", "public void setApplicationInfoSplitResourcePaths(String[] resroucePaths)", "public void setSplitCodePaths(String[] codePaths)", "public void setCodePath(String codePath)", "public void setBaseCodePath(String baseCodePath)", "public void setSigningDetails(@NonNull SigningDetails signingDetails)", "public void setVolumeUuid(String volumeUuid)", "public void setApplicationInfoFlags(int mask, int flags)", "public void setUse32bitAbi(boolean use32bitAbi)", "public boolean isLibrary()", "public List<String> getAllCodePaths()", "public List<String> getAllCodePathsExcludingResourceOnly()", "public void setPackageName(String newName)", "public boolean hasComponentClassName(String name)", "public boolean isExternal()", "public boolean isForwardLocked()", "public boolean isOem()", "public boolean isVendor()", "public boolean isProduct()", "public boolean isSystemExt()", "public boolean isOdm()", "public boolean isPrivileged()", "public boolean isSystem()", "public boolean isUpdatedSystemApp()", "public boolean canHaveOatDir()", "public boolean isMatch(int flags)", "public long getLatestPackageUseTimeInMills()", "public long getLatestForegroundPackageUseTimeInMills()", "public String toString()", "public int describeContents()", "private static void internStringArrayList(List<String> list)", "public void fixupOwner(List<? extends Component<?>> list)", "public void writeToParcel(Parcel dest, int flags)", "private static void writeKeySetMapping(Parcel dest, ArrayMap<String, ArraySet<PublicKey>> keySetMapping)", "private static ArrayMap<String, ArraySet<PublicKey>> readKeySetMapping(Parcel in)" ]
}