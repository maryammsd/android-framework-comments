{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/InputDeviceSensorManager.java",
  "packageName" : "android.hardware.input",
  "className" : "InputSensorEventListenerDelegate",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "mListener",
    "type" : "SensorEventListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensors",
    "type" : "List<Sensor>",
    "comment" : " List of sensors being listened to",
    "links" : [ ]
  }, {
    "name" : "mSensorEvents",
    "type" : "SparseArray<SensorEvent>",
    "comment" : " to avoid allocation and garbage collection for each listener callback.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<Sensor> getSensors()",
    "returnType" : "List<Sensor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSensor(@Nullable Sensor sensor)",
    "returnType" : "void",
    "comment" : "\n         * Remove sensor from sensor list for listener\n         ",
    "links" : [ ]
  }, {
    "name" : "public void addSensor(@NonNull Sensor sensor)",
    "returnType" : "void",
    "comment" : "\n         * Add a sensor to listener's sensor list\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSensorRegistered(int deviceId, int sensorType)",
    "returnType" : "boolean",
    "comment" : "\n         * Check if the listener has been registered to the sensor\n         * @param deviceId The input device ID of the sensor\n         * @param sensorType The sensor type of the sensor\n         * @return true if specified sensor is registered for the listener.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SensorEventListener getListener()",
    "returnType" : "SensorEventListener",
    "comment" : "\n         * Get listener handle for the delegate\n         ",
    "links" : [ ]
  }, {
    "name" : "private SensorEvent getSensorEvent(@NonNull Sensor sensor)",
    "returnType" : "SensorEvent",
    "comment" : "\n         * Get SensorEvent object for input device, with specified sensor.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendSensorChanged(SensorEvent event)",
    "returnType" : "void",
    "comment" : "\n         * Send sensor changed message\n         ",
    "links" : [ ]
  }, {
    "name" : "public void sendSensorAccuracyChanged(int deviceId, int sensorType, int accuracy)",
    "returnType" : "void",
    "comment" : "\n         * Send sensor accuracy changed message\n         ",
    "links" : [ ]
  }, {
    "name" : "public void handleMessage(Message msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<Sensor> getSensors()", "public boolean isEmpty()", "public void removeSensor(@Nullable Sensor sensor)", "public void addSensor(@NonNull Sensor sensor)", "public boolean hasSensorRegistered(int deviceId, int sensorType)", "public SensorEventListener getListener()", "private SensorEvent getSensorEvent(@NonNull Sensor sensor)", "public void sendSensorChanged(SensorEvent event)", "public void sendSensorAccuracyChanged(int deviceId, int sensorType, int accuracy)", "public void handleMessage(Message msg)" ],
  "variableNames" : [ "mListener", "mSensors", "mSensorEvents" ]
}