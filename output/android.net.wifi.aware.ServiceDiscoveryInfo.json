{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/aware/ServiceDiscoveryInfo.java",
  "packageName" : "android.net.wifi.aware",
  "className" : "ServiceDiscoveryInfo",
  "comment" : "\n * An object providing information about a Wi-Fi Aware discovery session with a specific peer.\n * @see DiscoverySessionCallback#onServiceDiscovered(ServiceDiscoveryInfo)\n * @see DiscoverySessionCallback#onServiceDiscoveredWithinRange(ServiceDiscoveryInfo, int)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mServiceSpecificInfo",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatchFilters",
    "type" : "List<byte[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeerCipherSuite",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mScid",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeerHandle",
    "type" : "PeerHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPairingAlias",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPairingConfig",
    "type" : "AwarePairingConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PeerHandle getPeerHandle()",
    "returnType" : "PeerHandle",
    "comment" : "\n     * Get the peer handle for the peer matching our discovery operation\n     * @return An opaque handle representing the discovered peer.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<byte[]> getMatchFilters()",
    "returnType" : "List<byte[]>",
    "comment" : "\n     * Get the filter which resulted in this service discovery. For\n     * {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's\n     * match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED},\n     * {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this is the subscriber's\n     * match filter.\n     * @return A list of byte arrays representing the match filter. An empty list if match filter\n     * is not set.\n     ",
    "links" : [ "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_UNSOLICITED", "android.net.wifi.aware.PublishConfig#PUBLISH_TYPE_SOLICITED", "android.net.wifi.aware.SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE" ]
  }, {
    "name" : "public byte[] getServiceSpecificInfo()",
    "returnType" : "byte[]",
    "comment" : "\n     * The service specific information (arbitrary byte array) provided by the peer as part of its\n     * discovery configuration.\n     * @see PublishConfig.Builder#setServiceSpecificInfo(byte[])\n     * @see SubscribeConfig.Builder#setServiceSpecificInfo(byte[])\n     * @return An arbitrary byte array represent the service specific information. {@code null} if\n     * service specific information is not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getScid()",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the Security context identifier is associate with PMK for data path security config. Only\n     * use for {@link Characteristics#WIFI_AWARE_CIPHER_SUITE_NCS_PK_128} and\n     * {@link Characteristics#WIFI_AWARE_CIPHER_SUITE_NCS_PK_256} to get the PMKID set by\n     * {@link WifiAwareDataPathSecurityConfig.Builder#setPmkId(byte[])} from publish session.\n     * This can help the Wi-Fi Aware data-path setup to select the correct PMK/PMKID\n     * @return An arbitrary byte array represent the security context identifier. {@code null} if\n     * Security context identifier is not set.\n     ",
    "links" : [ "android.net.wifi.aware.Characteristics#WIFI_AWARE_CIPHER_SUITE_NCS_PK_256", "WifiAwareDataPathSecurityConfig.Builder#setPmkId(byte", "android.net.wifi.aware.Characteristics#WIFI_AWARE_CIPHER_SUITE_NCS_PK_128" ]
  }, {
    "name" : "public int getPeerCipherSuite()",
    "returnType" : "int",
    "comment" : "\n     * Get the cipher suite type specified by the publish session to be used for data-path setup.\n     * @return peerCipherSuite An integer represent the cipher suite used to encrypt the data-path.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPairedAlias()",
    "returnType" : "String",
    "comment" : "\n     * Get the paired device alias if the discovered device has already paired. If not null device\n     * will automatically start the NAN pairing verification,\n     * {@link DiscoverySessionCallback#onPairingVerificationSucceed(PeerHandle, String)}\n     * will trigger when verification is finished\n     ",
    "links" : [ "android.net.wifi.aware.DiscoverySessionCallback#onPairingVerificationSucceed(PeerHandle" ]
  }, {
    "name" : "public AwarePairingConfig getPairingConfig()",
    "returnType" : "AwarePairingConfig",
    "comment" : "\n     * Get the discovered device's pairing config. Can be used for the following pairing setup or\n     * bootstrapping request.\n     * @see AwarePairingConfig\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Get the vendor-provided configuration data, if it exists.\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PeerHandle getPeerHandle()", "public List<byte[]> getMatchFilters()", "public byte[] getServiceSpecificInfo()", "public byte[] getScid()", "public int getPeerCipherSuite()", "public String getPairedAlias()", "public AwarePairingConfig getPairingConfig()", "public List<OuiKeyedData> getVendorData()" ],
  "variableNames" : [ "mServiceSpecificInfo", "mMatchFilters", "mPeerCipherSuite", "mScid", "mPeerHandle", "mPairingAlias", "mPairingConfig", "mVendorData" ]
}