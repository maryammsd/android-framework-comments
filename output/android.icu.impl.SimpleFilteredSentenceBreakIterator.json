{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/SimpleFilteredSentenceBreakIterator.java",
  "packageName" : "android.icu.impl",
  "className" : "SimpleFilteredSentenceBreakIterator",
  "comment" : "\n * @author tomzhang\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "delegate",
    "type" : "BreakIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "text",
    "type" : "UCharacterIterator",
    "comment" : " TODO(Tom): suffice to move into the local scope in next() ?",
    "links" : [ ]
  }, {
    "name" : "backwardsTrie",
    "type" : "CharsTrie",
    "comment" : " i.e. \".srM\" for Mrs.",
    "links" : [ ]
  }, {
    "name" : "forwardsPartialTrie",
    "type" : "CharsTrie",
    "comment" : " Has \".a\" for \"a.M.\"",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private final void resetState()",
    "returnType" : "void",
    "comment" : "\n     * Reset the filter from the delegate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final boolean breakExceptionAt(int n)",
    "returnType" : "boolean",
    "comment" : "\n     * Is there an exception at this point?\n     *\n     * @param n the location of the possible break\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int internalNext(int n)",
    "returnType" : "int",
    "comment" : "\n     * Given that the delegate has already given its \"initial\" answer,\n     * find the NEXT actual (non-suppressed) break.\n     * @param n initial position from delegate\n     * @return new break position or BreakIterator.DONE\n     ",
    "links" : [ ]
  }, {
    "name" : "private final int internalPrev(int n)",
    "returnType" : "int",
    "comment" : "\n     * Given that the delegate has already given its \"initial\" answer,\n     * find the PREV actual (non-suppressed) break.\n     * @param n initial position from delegate\n     * @return new break position or BreakIterator.DONE\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int first()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int preceding(int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int current()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isBoundary(int offset)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int next(int n)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int following(int offset)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int last()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharacterIterator getText()",
    "returnType" : "CharacterIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharacterIterator newText)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private final void resetState()", "private final boolean breakExceptionAt(int n)", "private final int internalNext(int n)", "private final int internalPrev(int n)", "public boolean equals(Object obj)", "public int hashCode()", "public Object clone()", "public int first()", "public int preceding(int offset)", "public int previous()", "public int current()", "public boolean isBoundary(int offset)", "public int next()", "public int next(int n)", "public int following(int offset)", "public int last()", "public CharacterIterator getText()", "public void setText(CharacterIterator newText)" ],
  "variableNames" : [ "delegate", "text", "backwardsTrie", "forwardsPartialTrie" ]
}