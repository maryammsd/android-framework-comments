{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Replaceable.java",
  "packageName" : "android.icu.text",
  "className" : "Replaceable",
  "comment" : "\n * <code>Replaceable</code> is an interface representing a\n * string of characters that supports the replacement of a range of\n * itself with a new string of characters.  It is used by APIs that\n * change a piece of text while retaining metadata.  Metadata is data\n * other than the Unicode characters returned by char32At().  One\n * example of metadata is style attributes; another is an edit\n * history, marking each character with an author and revision number.\n *\n * <p>An implicit aspect of the <code>Replaceable</code> API is that\n * during a replace operation, new characters take on the metadata of\n * the old characters.  For example, if the string \"the <b>bold</b>\n * font\" has range (4, 8) replaced with \"strong\", then it becomes \"the\n * <b>strong</b> font\".\n *\n * <p><code>Replaceable</code> specifies ranges using a start\n * offset and a limit offset.  The range of characters thus specified\n * includes the characters at offset start..limit-1.  That is, the\n * start offset is inclusive, and the limit offset is exclusive.\n *\n * <p><code>Replaceable</code> also includes API to access characters\n * in the string: <code>length()</code>, <code>charAt()</code>,\n * <code>char32At()</code>, and <code>extractBetween()</code>.\n *\n * <p>For a subclass to support metadata, typical behavior of\n * <code>replace()</code> is the following:\n * <ul>\n *   <li>Set the metadata of the new text to the metadata of the first\n *   character replaced</li>\n *   <li>If no characters are replaced, use the metadata of the\n *   previous character</li>\n *   <li>If there is no previous character (i.e. start == 0), use the\n *   following character</li>\n *   <li>If there is no following character (i.e. the replaceable was\n *   empty), use default metadata<br>\n *   <li>If the code point U+FFFF is seen, it should be interpreted as\n *   a special marker having no metadata<li>\n *   </li>\n * </ul>\n * If this is not the behavior, the subclass should document any differences.\n *\n * @author Alan Liu\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of 16-bit code units in the text.\n     * @return number of 16-bit code units in text\n     ",
    "links" : [ ]
  }, {
    "name" : " char charAt(int offset)",
    "returnType" : "char",
    "comment" : "\n     * Returns the 16-bit code unit at the given offset into the text.\n     * @param offset an integer between 0 and <code>length()</code>-1\n     * inclusive\n     * @return 16-bit code unit of text at given offset\n     ",
    "links" : [ ]
  }, {
    "name" : " int char32At(int offset)",
    "returnType" : "int",
    "comment" : "\n     * Returns the 32-bit code point at the given 16-bit offset into\n     * the text.  This assumes the text is stored as 16-bit code units\n     * with surrogate pairs intermixed.  If the offset of a leading or\n     * trailing code unit of a surrogate pair is given, return the\n     * code point of the surrogate pair.\n     *\n     * <p>Most subclasses can return\n     * <code>android.icu.text.UTF16.charAt(this, offset)</code>.\n     * @param offset an integer between 0 and <code>length()</code>-1\n     * inclusive\n     * @return 32-bit code point of text at given offset\n     ",
    "links" : [ ]
  }, {
    "name" : " void getChars(int srcStart, int srcLimit, char[] dst, int dstStart)",
    "returnType" : "void",
    "comment" : "\n     * Copies characters from this object into the destination\n     * character array.  The first character to be copied is at index\n     * <code>srcStart</code>; the last character to be copied is at\n     * index <code>srcLimit-1</code> (thus the total number of\n     * characters to be copied is <code>srcLimit-srcStart</code>). The\n     * characters are copied into the subarray of <code>dst</code>\n     * starting at index <code>dstStart</code> and ending at index\n     * <code>dstStart + (srcLimit-srcStart) - 1</code>.\n     *\n     * @param srcStart the beginning index to copy, inclusive; <code>0\n     * &lt;= start &lt;= limit</code>.\n     * @param srcLimit the ending index to copy, exclusive;\n     * <code>start &lt;= limit &lt;= length()</code>.\n     * @param dst the destination array.\n     * @param dstStart the start offset in the destination array.\n     ",
    "links" : [ ]
  }, {
    "name" : " void replace(int start, int limit, String text)",
    "returnType" : "void",
    "comment" : "\n     * Replaces a substring of this object with the given text.\n     *\n     * <p>Subclasses must ensure that if the text between start and\n     * limit is equal to the replacement text, that replace has no\n     * effect. That is, any metadata\n     * should be unaffected. In addition, subclasses are encouraged to\n     * check for initial and trailing identical characters, and make a\n     * smaller replacement if possible. This will preserve as much\n     * metadata as possible.\n     * @param start the beginning index, inclusive; <code>0 &lt;= start\n     * &lt;= limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit\n     * &lt;= length()</code>.\n     * @param text the text to replace characters <code>start</code>\n     * to <code>limit - 1</code>\n     ",
    "links" : [ ]
  }, {
    "name" : " void replace(int start, int limit, char[] chars, int charsStart, int charsLen)",
    "returnType" : "void",
    "comment" : "\n     * Replaces a substring of this object with the given text.\n     *\n     * <p>Subclasses must ensure that if the text between start and\n     * limit is equal to the replacement text, that replace has no\n     * effect. That is, any metadata\n     * should be unaffected. In addition, subclasses are encouraged to\n     * check for initial and trailing identical characters, and make a\n     * smaller replacement if possible. This will preserve as much\n     * metadata as possible.\n     * @param start the beginning index, inclusive; <code>0 &lt;= start\n     * &lt;= limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit\n     * &lt;= length()</code>.\n     * @param chars the text to replace characters <code>start</code>\n     * to <code>limit - 1</code>\n     * @param charsStart the beginning index into <code>chars</code>,\n     * inclusive; <code>0 &lt;= start &lt;= limit</code>.\n     * @param charsLen the number of characters of <code>chars</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : " void copy(int start, int limit, int dest)",
    "returnType" : "void",
    "comment" : "\n     * Copies a substring of this object, retaining metadata.\n     * This method is used to duplicate or reorder substrings.\n     * The destination index must not overlap the source range.\n     * If <code>hasMetaData()</code> returns false, subclasses\n     * may use the naive implementation:\n     *\n     * <pre> char[] text = new char[limit - start];\n     * getChars(start, limit, text, 0);\n     * replace(dest, dest, text, 0, limit - start);</pre>\n     *\n     * @param start the beginning index, inclusive; <code>0 &lt;= start &lt;=\n     * limit</code>.\n     * @param limit the ending index, exclusive; <code>start &lt;= limit &lt;=\n     * length()</code>.\n     * @param dest the destination index.  The characters from\n     * <code>start..limit-1</code> will be copied to <code>dest</code>.\n     * Implementations of this method may assume that <code>dest &lt;= start ||\n     * dest &gt;= limit</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasMetaData()",
    "returnType" : "boolean",
    "comment" : "R\n     * Returns true if this object contains metadata.  If a\n     * Replaceable object has metadata, calls to the Replaceable API\n     * must be made so as to preserve metadata.  If it does not, calls\n     * to the Replaceable API may be optimized to improve performance.\n     * @return true if this object contains metadata\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int length()", " char charAt(int offset)", " int char32At(int offset)", " void getChars(int srcStart, int srcLimit, char[] dst, int dstStart)", " void replace(int start, int limit, String text)", " void replace(int start, int limit, char[] chars, int charsStart, int charsLen)", " void copy(int start, int limit, int dest)", " boolean hasMetaData()" ],
  "variableNames" : [ ]
}