{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/face/FaceManager.java",
  "packageName" : "android.hardware.face",
  "className" : "FaceManager",
  "comment" : "\n * A class that coordinates access to the face authentication hardware.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IFaceService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProps",
    "type" : "List<FaceSensorPropertiesInternal>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "HandlerExecutor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void useHandler(Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Use the provided handler thread for events.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @Nullable Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #authenticate(CryptoObject, CancellationSignal, AuthenticationCallback, Handler, FaceAuthenticateOptions)}.\n     ",
    "links" : [ "#authenticate(CryptoObject" ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @Nullable Handler handler, @NonNull FaceAuthenticateOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Request authentication. This call operates the face recognition hardware and starts capturing images.\n     * It terminates when\n     * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n     * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param crypto   object associated with the call or null if none required\n     * @param cancel   an object that can be used to cancel authentication\n     * @param callback an object to receive authentication events\n     * @param handler  an optional handler to handle callback events\n     * @param options  additional options to customize this request\n     * @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n     *                                  by\n     *                                  <a href=\"{@docRoot}training/articles/keystore.html\">Android\n     *                                  Keystore facility</a>.\n     * @throws IllegalStateException    if the crypto primitive is not initialized.\n     * @hide\n     ",
    "links" : [ "#onAuthenticationError(int", "#onAuthenticationSucceeded(AuthenticationResult)" ]
  }, {
    "name" : "public void detectFace(@NonNull CancellationSignal cancel, @NonNull FaceDetectionCallback callback, @NonNull FaceAuthenticateOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Uses the face hardware to detect for the presence of a face, without giving details about\n     * accept/reject/lockout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enroll(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)",
    "returnType" : "void",
    "comment" : "\n     * Defaults to {@link FaceManager#enroll(int, byte[], CancellationSignal, EnrollmentCallback,\n     * int[], Surface)} with {@code previewSurface} set to null.\n     *\n     * @see FaceManager#enroll(int, byte[], CancellationSignal, EnrollmentCallback, int[], Surface)\n     * @hide\n     ",
    "links" : [ "android.hardware.face.FaceManager#enroll(int" ]
  }, {
    "name" : "public void enroll(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures, @Nullable Surface previewSurface, boolean debugConsent, FaceEnrollOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Request face authentication enrollment. This call operates the face authentication hardware\n     * and starts capturing images. Progress will be indicated by callbacks to the\n     * {@link EnrollmentCallback} object. It terminates when\n     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or\n     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param hardwareAuthToken a unique token provided by a recent creation or\n     *                          verification of device credentials (e.g. pin, pattern or password).\n     * @param cancel            an object that can be used to cancel enrollment\n     * @param userId            the user to whom this face will belong to\n     * @param callback          an object to receive enrollment events\n     * @param previewSurface    optional camera preview surface for a single-camera device.\n     *                          Must be null if not used.\n     * @param debugConsent      a feature flag that the user has consented to debug.\n     * @hide\n     ",
    "links" : [ "#onEnrollmentProgress(int)", "#onEnrollmentError(int", "EnrollmentCallback" ]
  }, {
    "name" : "public void enrollRemotely(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)",
    "returnType" : "void",
    "comment" : "\n     * Request face authentication enrollment for a remote client, for example Android Auto.\n     * This call operates the face authentication hardware and starts capturing images.\n     * Progress will be indicated by callbacks to the\n     * {@link EnrollmentCallback} object. It terminates when\n     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or\n     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param hardwareAuthToken    a unique token provided by a recent creation or verification of\n     *                 device credentials (e.g. pin, pattern or password).\n     * @param cancel   an object that can be used to cancel enrollment\n     * @param userId   the user to whom this face will belong to\n     * @param callback an object to receive enrollment events\n     * @hide\n     ",
    "links" : [ "#onEnrollmentProgress(int)", "#onEnrollmentError(int", "EnrollmentCallback" ]
  }, {
    "name" : "public void generateChallenge(int sensorId, int userId, GenerateChallengeCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Generates a unique random challenge in the TEE. A typical use case is to have it wrapped in a\n     * HardwareAuthenticationToken, minted by Gatekeeper upon PIN/Pattern/Password verification.\n     * The HardwareAuthenticationToken can then be sent to the biometric HAL together with a\n     * request to perform sensitive operation(s) (for example enroll or setFeature), represented\n     * by the challenge. Doing this ensures that a the sensitive operation cannot be performed\n     * unless the user has entered confirmed PIN/Pattern/Password.\n     *\n     * @see com.android.server.locksettings.LockSettingsService\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void generateChallenge(int userId, GenerateChallengeCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #generateChallenge(int, int, GenerateChallengeCallback)}, but assumes the\n     * first enumerated sensor.\n     *\n     * @hide\n     ",
    "links" : [ "#generateChallenge(int" ]
  }, {
    "name" : "public void revokeChallenge(int sensorId, int userId, long challenge)",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the current challenge.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLockout(int sensorId, int userId, @Nullable byte[] hardwareAuthToken)",
    "returnType" : "void",
    "comment" : "\n     * Reset the lockout when user authenticates with strong auth (e.g. PIN, pattern or password)\n     *\n     * @param sensorId Sensor ID that this operation takes effect for\n     * @param userId User ID that this operation takes effect for.\n     * @param hardwareAuthToken An opaque token returned by password confirmation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFeature(int userId, int feature, boolean enabled, byte[] hardwareAuthToken, SetFeatureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void getFeature(int userId, int feature, GetFeatureCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(Face face, int userId, RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove given face template from face hardware and/or protected storage.\n     *\n     * @param face     the face item to remove\n     * @param userId   the user who this face belongs to\n     * @param callback an optional callback to verify that face templates have been\n     *                 successfully removed. May be null if no callback is required.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAll(int userId, @NonNull RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes all face templates for the given user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Face> getEnrolledFaces(int userId)",
    "returnType" : "List<Face>",
    "comment" : "\n     * Obtain the enrolled face template.\n     *\n     * @return the current face item\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Face> getEnrolledFaces()",
    "returnType" : "List<Face>",
    "comment" : "\n     * Obtain the enrolled face template.\n     *\n     * @return the current face item\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if there is a face enrolled.\n     *\n     * @return true if a face is enrolled, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareDetected()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if face authentication sensor hardware is present and functional.\n     *\n     * @return true if hardware is present and functional, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<FaceSensorProperties> getSensorProperties()",
    "returnType" : "List<FaceSensorProperties>",
    "comment" : "\n     * Retrieves a list of properties for all face authentication sensors on the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<FaceSensorPropertiesInternal> getSensorPropertiesInternal()",
    "returnType" : "List<FaceSensorPropertiesInternal>",
    "comment" : "\n     * Get statically configured sensor properties.\n     * @deprecated Generally unsafe to use, use\n     * {@link FaceManager#addAuthenticatorsRegisteredCallback} API instead.\n     * In most cases this method will work as expected, but during early boot up, it will be\n     * null/empty and there is no way for the caller to know when it's actual value is ready.\n     * @hide\n     ",
    "links" : [ "android.hardware.face.FaceManager#addAuthenticatorsRegisteredCallback" ]
  }, {
    "name" : "public void registerBiometricStateListener(@NonNull BiometricStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Forwards BiometricStateListener to FaceService.\n     *\n     * @param listener new BiometricStateListener being added\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAuthenticatorsRegisteredCallback(IFaceAuthenticatorsRegisteredCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback that gets called when the service registers all of the face\n     * authenticators (HALs).\n     *\n     * If the face authenticators are already registered when the callback is added, the\n     * callback is invoked immediately.\n     *\n     * The callback is automatically removed after it's invoked.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLockoutModeForUser(int sensorId, int userId)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLockoutResetCallback(final LockoutResetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scheduleWatchdog()",
    "returnType" : "void",
    "comment" : "\n     * Schedules a watchdog.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void cancelEnrollment(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAuthentication(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelFaceDetect(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getErrorString(Context context, int errMsg, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getMappedAcquiredInfo(int acquireInfo, int vendorCode)",
    "returnType" : "int",
    "comment" : "\n     * Used so BiometricPrompt can map the face ones onto existing public constants.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getAuthHelpMessage(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getEnrollHelpMessage(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void useHandler(Handler handler)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @Nullable Handler handler, int userId)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @Nullable Handler handler, @NonNull FaceAuthenticateOptions options)", "public void detectFace(@NonNull CancellationSignal cancel, @NonNull FaceDetectionCallback callback, @NonNull FaceAuthenticateOptions options)", "public void enroll(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)", "public void enroll(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures, @Nullable Surface previewSurface, boolean debugConsent, FaceEnrollOptions options)", "public void enrollRemotely(int userId, byte[] hardwareAuthToken, CancellationSignal cancel, EnrollmentCallback callback, int[] disabledFeatures)", "public void generateChallenge(int sensorId, int userId, GenerateChallengeCallback callback)", "public void generateChallenge(int userId, GenerateChallengeCallback callback)", "public void revokeChallenge(int sensorId, int userId, long challenge)", "public void resetLockout(int sensorId, int userId, @Nullable byte[] hardwareAuthToken)", "public void setFeature(int userId, int feature, boolean enabled, byte[] hardwareAuthToken, SetFeatureCallback callback)", "public void getFeature(int userId, int feature, GetFeatureCallback callback)", "public void remove(Face face, int userId, RemovalCallback callback)", "public void removeAll(int userId, @NonNull RemovalCallback callback)", "public List<Face> getEnrolledFaces(int userId)", "public List<Face> getEnrolledFaces()", "public boolean hasEnrolledTemplates()", "public boolean hasEnrolledTemplates(int userId)", "public boolean isHardwareDetected()", "public List<FaceSensorProperties> getSensorProperties()", "public List<FaceSensorPropertiesInternal> getSensorPropertiesInternal()", "public void registerBiometricStateListener(@NonNull BiometricStateListener listener)", "public void addAuthenticatorsRegisteredCallback(IFaceAuthenticatorsRegisteredCallback callback)", "public int getLockoutModeForUser(int sensorId, int userId)", "public void addLockoutResetCallback(final LockoutResetCallback callback)", "public void scheduleWatchdog()", "private void cancelEnrollment(long requestId)", "private void cancelAuthentication(long requestId)", "private void cancelFaceDetect(long requestId)", "public static String getErrorString(Context context, int errMsg, int vendorCode)", "public static int getMappedAcquiredInfo(int acquireInfo, int vendorCode)", "public static String getAuthHelpMessage(Context context, int acquireInfo, int vendorCode)", "public static String getEnrollHelpMessage(Context context, int acquireInfo, int vendorCode)" ],
  "variableNames" : [ "TAG", "mService", "mContext", "mToken", "mHandler", "mProps", "mExecutor" ]
}