{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/InputMethodInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "InputMethodInfo",
  "comment" : "\n * This class is used to specify meta information of an input method.\n *\n * <p>It should be defined in an XML resource file with an {@code <input-method>} element.\n * For more information, see the guide to\n * <a href=\"{@docRoot}guide/topics/text/creating-input-method.html\">\n * Creating an Input Method</a>.</p>\n *\n * @see InputMethodSubtype\n *\n * @attr ref android.R.styleable#InputMethod_settingsActivity\n * @attr ref android.R.styleable#InputMethod_isDefault\n * @attr ref android.R.styleable#InputMethod_supportsSwitchingToNextInputMethod\n * @attr ref android.R.styleable#InputMethod_supportsInlineSuggestions\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "ResolveInfo",
    "comment" : "\n     * The Service that implements this input method component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsVrOnly",
    "type" : "boolean",
    "comment" : "\n     * IME only supports VR mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "\n     * The unique string Id to identify the input method.  This is generated\n     * from the input method component.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSettingsActivityName",
    "type" : "String",
    "comment" : "\n     * The input method setting activity's name, used by the system settings to\n     * launch the setting activity of this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsDefaultResId",
    "type" : "int",
    "comment" : "\n     * The resource in the input method's .apk that holds a boolean indicating\n     * whether it should be considered the default input method for this\n     * system.  This is a resource ID instead of the final value so that it\n     * can change based on the configuration (in particular locale).\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubtypes",
    "type" : "InputMethodSubtypeArray",
    "comment" : "\n     * An array-like container of the subtypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsAuxIme",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mForceDefault",
    "type" : "boolean",
    "comment" : "\n     * Caveat: mForceDefault must be false for production. This flag is only for test.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSupportsSwitchingToNextInputMethod",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports ways to switch to a next input method (e.g. globe key.)\n     ",
    "links" : [ ]
  }, {
    "name" : "mInlineSuggestionsEnabled",
    "type" : "boolean",
    "comment" : "\n     * The flag whether this IME supports inline suggestions.\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<InputMethodInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String computeId(@NonNull ResolveInfo service)",
    "returnType" : "String",
    "comment" : "\n     * @param service the {@link ResolveInfo} corresponds in which the IME is implemented.\n     * @return a unique ID to be returned by {@link #getId()}. We have used\n     *         {@link ComponentName#flattenToShortString()} for this purpose (and it is already\n     *         unrealistic to switch to a different scheme as it is already implicitly assumed in\n     *         many places).\n     * @hide\n     ",
    "links" : [ "ResolveInfo", "#getId", "ComponentName#flattenToShortString" ]
  }, {
    "name" : "private static ResolveInfo buildDummyResolveInfo(String packageName, String className, CharSequence label)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Return a unique ID for this input method.  The ID is generated from\n     * the package and class name implementing the method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Return the .apk package that implements this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of the service component that implements\n     * this input method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo()",
    "returnType" : "ServiceInfo",
    "comment" : "\n     * Return the raw information about the Service implementing this\n     * input method.  Do not modify the returned object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * Return the component of the service that implements this input\n     * method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Load the user-displayed label for this input method.\n     *\n     * @param pm Supply a PackageManager used to load the input method's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Load the user-displayed icon for this input method.\n     *\n     * @param pm Supply a PackageManager used to load the input method's\n     * resources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSettingsActivity()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of an activity that provides a settings UI for\n     * the input method.  You can launch this activity be starting it with\n     * an {@link android.content.Intent} whose action is MAIN and with an\n     * explicit {@link android.content.ComponentName}\n     * composed of {@link #getPackageName} and the class name returned here.\n     *\n     * <p>A null will be returned if there is no settings activity associated\n     * with the input method.</p>\n     ",
    "links" : [ "android.content.Intent", "android.content.ComponentName", "#getPackageName" ]
  }, {
    "name" : "public boolean isVrOnly()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if IME supports VR mode only.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSubtypeCount()",
    "returnType" : "int",
    "comment" : "\n     * Return the count of the subtypes of Input Method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InputMethodSubtype getSubtypeAt(int index)",
    "returnType" : "InputMethodSubtype",
    "comment" : "\n     * Return the Input Method's subtype at the specified index.\n     *\n     * @param index the index of the subtype to return.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIsDefaultResourceId()",
    "returnType" : "int",
    "comment" : "\n     * Return the resource identifier of a resource inside of this input\n     * method's .apk that determines whether it should be considered a\n     * default input method for the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefault(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether or not this ime is a default ime or not.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Used to test whether the given parameter object is an\n     * {@link InputMethodInfo} and its Id is the same to this one.\n     *\n     * @return true if the given parameter object is an\n     *         {@link InputMethodInfo} and its Id is the same to this one.\n     ",
    "links" : [ "InputMethodInfo", "InputMethodInfo" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSystem()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @return {@code true} if the IME is a trusted system component (e.g. pre-installed)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isAuxiliaryIme()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSwitchingToNextInputMethod()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this input method supports ways to switch to a next input method.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInlineSuggestionsEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this input method supports inline suggestions.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "Parcel", "Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "mService", "mIsVrOnly", "mId", "mSettingsActivityName", "mIsDefaultResId", "mSubtypes", "mIsAuxIme", "mForceDefault", "mSupportsSwitchingToNextInputMethod", "mInlineSuggestionsEnabled", "CREATOR" ],
  "methodNames" : [ "public static String computeId(@NonNull ResolveInfo service)", "private static ResolveInfo buildDummyResolveInfo(String packageName, String className, CharSequence label)", "public String getId()", "public String getPackageName()", "public String getServiceName()", "public ServiceInfo getServiceInfo()", "public ComponentName getComponent()", "public CharSequence loadLabel(PackageManager pm)", "public Drawable loadIcon(PackageManager pm)", "public String getSettingsActivity()", "public boolean isVrOnly()", "public int getSubtypeCount()", "public InputMethodSubtype getSubtypeAt(int index)", "public int getIsDefaultResourceId()", "public boolean isDefault(Context context)", "public void dump(Printer pw, String prefix)", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public boolean isSystem()", "public boolean isAuxiliaryIme()", "public boolean supportsSwitchingToNextInputMethod()", "public boolean isInlineSuggestionsEnabled()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}