{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/AudioFocusRequest.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n     * Builder class for {@link AudioFocusRequest} objects.\n     * <p>See {@link AudioFocusRequest} for an example of building an instance with this builder.\n     * <br>The default values for the instance to be built are:\n     * <table>\n     * <tr><td>focus listener and handler</td><td>none</td></tr>\n     * <tr><td>{@code AudioAttributes}</td><td>attributes with usage set to\n     *     {@link AudioAttributes#USAGE_MEDIA}</td></tr>\n     * <tr><td>pauses on duck</td><td>false</td></tr>\n     * <tr><td>supports delayed focus grant</td><td>false</td></tr>\n     * </table>\n     ",
  "links" : [ "android.media.AudioAttributes#USAGE_MEDIA", "android.media.AudioFocusRequest" ],
  "variables" : [ {
    "name" : "mFocusListener",
    "type" : "OnAudioFocusChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttr",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusGain",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPausesOnDuck",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelayedFocus",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusLocked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mA11yForceDucking",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setFocusGain(int focusGain)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the type of focus gain that will be requested.\n         * Use this method to replace the focus gain when building a request by modifying an\n         * existing {@code AudioFocusRequest} instance.\n         * @param focusGain the type of audio focus gain that will be requested.\n         * @return this {@code Builder} instance\n         * @throws IllegalArgumentException thrown when an invalid focus gain type is used\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOnAudioFocusChangeListener(@NonNull OnAudioFocusChangeListener listener)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the listener called when audio focus changes after being requested with\n         *   {@link AudioManager#requestAudioFocus(AudioFocusRequest)}, and until being abandoned\n         *   with {@link AudioManager#abandonAudioFocusRequest(AudioFocusRequest)}.\n         *   Note that only focus changes (gains and losses) affecting the focus owner are reported,\n         *   not gains and losses of other focus requesters in the system.<br>\n         *   Notifications are delivered on the {@link Looper} associated with the one of\n         *   the creation of the {@link AudioManager} used to request focus\n         *   (see {@link AudioManager#requestAudioFocus(AudioFocusRequest)}).\n         * @param listener the listener receiving the focus change notifications.\n         * @return this {@code Builder} instance.\n         * @throws NullPointerException thrown when a null focus listener is used.\n         ",
    "links" : [ "android.media.AudioManager#abandonAudioFocusRequest(AudioFocusRequest)", "android.os.Looper", "android.media.AudioManager#requestAudioFocus(AudioFocusRequest)", "android.media.AudioManager" ]
  }, {
    "name" : " Builder setOnAudioFocusChangeListenerInt(OnAudioFocusChangeListener listener, Handler handler)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Internal listener setter, no null checks on listener nor handler\n         * @param listener\n         * @param handler\n         * @return this {@code Builder} instance.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOnAudioFocusChangeListener(@NonNull OnAudioFocusChangeListener listener, @NonNull Handler handler)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the listener called when audio focus changes after being requested with\n         *   {@link AudioManager#requestAudioFocus(AudioFocusRequest)}, and until being abandoned\n         *   with {@link AudioManager#abandonAudioFocusRequest(AudioFocusRequest)}.\n         *   Note that only focus changes (gains and losses) affecting the focus owner are reported,\n         *   not gains and losses of other focus requesters in the system.\n         * @param listener the listener receiving the focus change notifications.\n         * @param handler the {@link Handler} for the thread on which to execute\n         *   the notifications.\n         * @return this {@code Builder} instance.\n         * @throws NullPointerException thrown when a null focus listener or handler is used.\n         ",
    "links" : [ "android.media.AudioManager#abandonAudioFocusRequest(AudioFocusRequest)", "android.os.Handler", "android.media.AudioManager#requestAudioFocus(AudioFocusRequest)" ]
  }, {
    "name" : "public Builder setAudioAttributes(@NonNull AudioAttributes attributes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the {@link AudioAttributes} to be associated with the focus request, and which\n         * describe the use case for which focus is requested.\n         * As the focus requests typically precede audio playback, this information is used on\n         * certain platforms to declare the subsequent playback use case. It is therefore good\n         * practice to use in this method the same {@code AudioAttributes} as used for\n         * playback, see for example {@link MediaPlayer#setAudioAttributes(AudioAttributes)} in\n         * {@code MediaPlayer} or {@link AudioTrack.Builder#setAudioAttributes(AudioAttributes)}\n         * in {@code AudioTrack}.\n         * @param attributes the {@link AudioAttributes} for the focus request.\n         * @return this {@code Builder} instance.\n         * @throws NullPointerException thrown when using null for the attributes.\n         ",
    "links" : [ "AudioTrack.Builder#setAudioAttributes(AudioAttributes)", "android.media.MediaPlayer#setAudioAttributes(AudioAttributes)", "android.media.AudioAttributes" ]
  }, {
    "name" : "public Builder setWillPauseWhenDucked(boolean pauseOnDuck)",
    "returnType" : "Builder",
    "comment" : "\n         * Declare the intended behavior of the application with regards to audio ducking.\n         * See more details in the {@link AudioFocusRequest} class documentation.\n         * @param pauseOnDuck use {@code true} if the application intends to pause audio playback\n         *    when losing focus with {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}.\n         *    If {@code true}, note that you must also set a focus listener to receive such an\n         *    event, with\n         *    {@link #setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}.\n         * @return this {@code Builder} instance.\n         ",
    "links" : [ "android.media.AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK", "android.media.AudioFocusRequest", "#setOnAudioFocusChangeListener(OnAudioFocusChangeListener" ]
  }, {
    "name" : "public Builder setAcceptsDelayedFocusGain(boolean acceptsDelayedFocusGain)",
    "returnType" : "Builder",
    "comment" : "\n         * Marks this focus request as compatible with delayed focus.\n         * See more details about delayed focus in the {@link AudioFocusRequest} class\n         * documentation.\n         * @param acceptsDelayedFocusGain use {@code true} if the application supports delayed\n         *    focus. If {@code true}, note that you must also set a focus listener to be notified\n         *    of delayed focus gain, with\n         *    {@link #setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}.\n         * @return this {@code Builder} instance\n         ",
    "links" : [ "android.media.AudioFocusRequest", "#setOnAudioFocusChangeListener(OnAudioFocusChangeListener" ]
  }, {
    "name" : "public Builder setLocksFocus(boolean focusLocked)",
    "returnType" : "Builder",
    "comment" : "\n         * @hide\n         * Marks this focus request as locking audio focus so granting is temporarily disabled.\n         * This feature can only be used by owners of a registered\n         * {@link android.media.audiopolicy.AudioPolicy} in\n         * {@link AudioManager#requestAudioFocus(AudioFocusRequest, android.media.audiopolicy.AudioPolicy)}.\n         * Setting to false is the same as the default behavior.\n         * @param focusLocked true when locking focus\n         * @return this {@code Builder} instance\n         ",
    "links" : [ "android.media.audiopolicy.AudioPolicy", "android.media.AudioManager#requestAudioFocus(AudioFocusRequest" ]
  }, {
    "name" : "public Builder setForceDucking(boolean forceDucking)",
    "returnType" : "Builder",
    "comment" : "\n         * Marks this focus request as forcing ducking, regardless of the conditions in which\n         * the system would or would not enforce ducking.\n         * Forcing ducking will only be honored when requesting AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK\n         * with an {@link AudioAttributes} usage of\n         * {@link AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY}, coming from an accessibility\n         * service, and will be ignored otherwise.\n         * @param forceDucking {@code true} to force ducking\n         * @return this {@code Builder} instance\n         ",
    "links" : [ "android.media.AudioAttributes", "android.media.AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY" ]
  }, {
    "name" : "public AudioFocusRequest build()",
    "returnType" : "AudioFocusRequest",
    "comment" : "\n         * Builds a new {@code AudioFocusRequest} instance combining all the information gathered\n         * by this {@code Builder}'s configuration methods.\n         * @return the {@code AudioFocusRequest} instance qualified by all the properties set\n         *   on this {@code Builder}.\n         * @throws IllegalStateException thrown when attempting to build a focus request that is set\n         *    to accept delayed focus, or to pause on duck, but no focus change listener was set.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder setFocusGain(int focusGain)", "public Builder setOnAudioFocusChangeListener(@NonNull OnAudioFocusChangeListener listener)", " Builder setOnAudioFocusChangeListenerInt(OnAudioFocusChangeListener listener, Handler handler)", "public Builder setOnAudioFocusChangeListener(@NonNull OnAudioFocusChangeListener listener, @NonNull Handler handler)", "public Builder setAudioAttributes(@NonNull AudioAttributes attributes)", "public Builder setWillPauseWhenDucked(boolean pauseOnDuck)", "public Builder setAcceptsDelayedFocusGain(boolean acceptsDelayedFocusGain)", "public Builder setLocksFocus(boolean focusLocked)", "public Builder setForceDucking(boolean forceDucking)", "public AudioFocusRequest build()" ],
  "variableNames" : [ "mFocusListener", "mListenerHandler", "mAttr", "mFocusGain", "mPausesOnDuck", "mDelayedFocus", "mFocusLocked", "mA11yForceDucking" ]
}