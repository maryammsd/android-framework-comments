{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/mock/MockContentProvider.java",
  "packageName" : "android.test.mock",
  "className" : "InversionIContentProvider",
  "comment" : "\n     * IContentProvider that directs all calls to this MockContentProvider.\n     ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public ContentProviderResult[] applyBatch(String callingPackage, @Nullable String featureId, String authority, ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException",
    "returnType" : "ContentProviderResult[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int bulkInsert(String callingPackage, @Nullable String featureId, Uri url, ContentValues[] initialValues) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int delete(String callingPackage, @Nullable String featureId, Uri url, Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getType(Uri url) throws RemoteException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTypeAsync(Uri uri, RemoteCallback callback) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri insert(String callingPackage, @Nullable String featureId, Uri url, ContentValues initialValues, Bundle extras) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openAssetFile(String callingPackage, @Nullable String featureId, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor openFile(String callingPackage, @Nullable String featureId, Uri url, String mode, ICancellationSignal signal, IBinder callerToken) throws RemoteException, FileNotFoundException",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(String callingPackage, @Nullable String featureId, Uri url, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int update(String callingPackage, @Nullable String featureId, Uri url, ContentValues values, Bundle extras) throws RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Bundle call(String callingPackage, @Nullable String featureId, String authority, String method, String request, Bundle args) throws RemoteException",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder asBinder()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getStreamTypes(Uri url, String mimeTypeFilter) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AssetFileDescriptor openTypedAssetFile(String callingPackage, @Nullable String featureId, Uri url, String mimeType, Bundle opts, ICancellationSignal signal) throws RemoteException, FileNotFoundException",
    "returnType" : "AssetFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ICancellationSignal createCancellationSignal() throws RemoteException",
    "returnType" : "ICancellationSignal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri canonicalize(String callingPkg, @Nullable String featureId, Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void canonicalizeAsync(String callingPkg, String featureId, Uri uri, RemoteCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri uncanonicalize(String callingPkg, @Nullable String featureId, Uri uri) throws RemoteException",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean refresh(String callingPkg, @Nullable String featureId, Uri url, Bundle args, ICancellationSignal cancellationSignal) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkUriPermission(String callingPkg, @Nullable String featureId, Uri uri, int uid, int modeFlags)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public ContentProviderResult[] applyBatch(String callingPackage, @Nullable String featureId, String authority, ArrayList<ContentProviderOperation> operations) throws RemoteException, OperationApplicationException", "public int bulkInsert(String callingPackage, @Nullable String featureId, Uri url, ContentValues[] initialValues) throws RemoteException", "public int delete(String callingPackage, @Nullable String featureId, Uri url, Bundle extras) throws RemoteException", "public String getType(Uri url) throws RemoteException", "public void getTypeAsync(Uri uri, RemoteCallback callback) throws RemoteException", "public Uri insert(String callingPackage, @Nullable String featureId, Uri url, ContentValues initialValues, Bundle extras) throws RemoteException", "public AssetFileDescriptor openAssetFile(String callingPackage, @Nullable String featureId, Uri url, String mode, ICancellationSignal signal) throws RemoteException, FileNotFoundException", "public ParcelFileDescriptor openFile(String callingPackage, @Nullable String featureId, Uri url, String mode, ICancellationSignal signal, IBinder callerToken) throws RemoteException, FileNotFoundException", "public Cursor query(String callingPackage, @Nullable String featureId, Uri url, @Nullable String[] projection, @Nullable Bundle queryArgs, @Nullable ICancellationSignal cancellationSignal) throws RemoteException", "public int update(String callingPackage, @Nullable String featureId, Uri url, ContentValues values, Bundle extras) throws RemoteException", "public Bundle call(String callingPackage, @Nullable String featureId, String authority, String method, String request, Bundle args) throws RemoteException", "public IBinder asBinder()", "public String[] getStreamTypes(Uri url, String mimeTypeFilter) throws RemoteException", "public AssetFileDescriptor openTypedAssetFile(String callingPackage, @Nullable String featureId, Uri url, String mimeType, Bundle opts, ICancellationSignal signal) throws RemoteException, FileNotFoundException", "public ICancellationSignal createCancellationSignal() throws RemoteException", "public Uri canonicalize(String callingPkg, @Nullable String featureId, Uri uri) throws RemoteException", "public void canonicalizeAsync(String callingPkg, String featureId, Uri uri, RemoteCallback callback)", "public Uri uncanonicalize(String callingPkg, @Nullable String featureId, Uri uri) throws RemoteException", "public boolean refresh(String callingPkg, @Nullable String featureId, Uri url, Bundle args, ICancellationSignal cancellationSignal) throws RemoteException", "public int checkUriPermission(String callingPkg, @Nullable String featureId, Uri uri, int uid, int modeFlags)" ]
}