{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkStats.java",
  "packageName" : "android.net",
  "className" : "NetworkStats",
  "comment" : " @NotThreadSafe",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFACE_ALL",
    "type" : "String",
    "comment" : "\n     * {@link #iface} value when interface details unavailable.\n     * @hide\n     ",
    "links" : [ "#iface" ]
  }, {
    "name" : "IFACE_VT",
    "type" : "String",
    "comment" : "\n     * Virtual network interface for video telephony. This is for VT data usage counting\n     * purpose.\n     ",
    "links" : [ ]
  }, {
    "name" : "UID_ALL",
    "type" : "int",
    "comment" : " {@link #uid} value when UID details unavailable. ",
    "links" : [ "#uid" ]
  }, {
    "name" : "UID_TETHERING",
    "type" : "int",
    "comment" : " Special UID value for data usage by tethering. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ALL",
    "type" : "int",
    "comment" : " TODO: Rename TAG_ALL to TAG_ANY.",
    "links" : [ ]
  }, {
    "name" : "SET_ALL",
    "type" : "int",
    "comment" : " {@link #set} value for all sets combined, not including debug sets. ",
    "links" : [ "#set" ]
  }, {
    "name" : "SET_DEFAULT",
    "type" : "int",
    "comment" : " {@link #set} value where background data is accounted. ",
    "links" : [ "#set" ]
  }, {
    "name" : "SET_FOREGROUND",
    "type" : "int",
    "comment" : " {@link #set} value where foreground data is accounted. ",
    "links" : [ "#set" ]
  }, {
    "name" : "SET_DEBUG_START",
    "type" : "int",
    "comment" : "\n     * All {@link #set} value greater than SET_DEBUG_START are debug {@link #set} values.\n     * @hide\n     ",
    "links" : [ "#set" ]
  }, {
    "name" : "SET_DBG_VPN_IN",
    "type" : "int",
    "comment" : "\n     * Debug {@link #set} value when the VPN stats are moved in.\n     * @hide\n     ",
    "links" : [ "#set" ]
  }, {
    "name" : "SET_DBG_VPN_OUT",
    "type" : "int",
    "comment" : "\n     * Debug {@link #set} value when the VPN stats are moved out of a vpn UID.\n     * @hide\n     ",
    "links" : [ "#set" ]
  }, {
    "name" : "INTERFACES_ALL",
    "type" : "String[]",
    "comment" : "\n     * Include all interfaces when filtering\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_NONE",
    "type" : "int",
    "comment" : " {@link #tag} value for total data across all tags. ",
    "links" : [ "#tag" ]
  }, {
    "name" : "METERED_ALL",
    "type" : "int",
    "comment" : " {@link #metered} value to account for all metered states. ",
    "links" : [ "#metered" ]
  }, {
    "name" : "METERED_NO",
    "type" : "int",
    "comment" : " {@link #metered} value where native, unmetered data is accounted. ",
    "links" : [ "#metered" ]
  }, {
    "name" : "METERED_YES",
    "type" : "int",
    "comment" : " {@link #metered} value where metered data is accounted. ",
    "links" : [ "#metered" ]
  }, {
    "name" : "ROAMING_ALL",
    "type" : "int",
    "comment" : " {@link #roaming} value to account for all roaming states. ",
    "links" : [ "#roaming" ]
  }, {
    "name" : "ROAMING_NO",
    "type" : "int",
    "comment" : " {@link #roaming} value where native, non-roaming data is accounted. ",
    "links" : [ "#roaming" ]
  }, {
    "name" : "ROAMING_YES",
    "type" : "int",
    "comment" : " {@link #roaming} value where roaming data is accounted. ",
    "links" : [ "#roaming" ]
  }, {
    "name" : "DEFAULT_NETWORK_ALL",
    "type" : "int",
    "comment" : " {@link #onDefaultNetwork} value to account for all default network states. ",
    "links" : [ "#onDefaultNetwork" ]
  }, {
    "name" : "DEFAULT_NETWORK_NO",
    "type" : "int",
    "comment" : " {@link #onDefaultNetwork} value to account for usage while not the default network. ",
    "links" : [ "#onDefaultNetwork" ]
  }, {
    "name" : "DEFAULT_NETWORK_YES",
    "type" : "int",
    "comment" : " {@link #onDefaultNetwork} value to account for usage while the default network. ",
    "links" : [ "#onDefaultNetwork" ]
  }, {
    "name" : "STATS_PER_IFACE",
    "type" : "int",
    "comment" : "\n     * Denotes a request for stats at the interface level.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "STATS_PER_UID",
    "type" : "int",
    "comment" : "\n     * Denotes a request for stats at the interface and UID level.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CLATD_INTERFACE_PREFIX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IPV4V6_HEADER_DELTA",
    "type" : "int",
    "comment" : " Used for correct stats accounting on clatd interfaces.",
    "links" : [ ]
  }, {
    "name" : "elapsedRealtime",
    "type" : "long",
    "comment" : "\n     * {@link SystemClock#elapsedRealtime()} timestamp in milliseconds when this data was\n     * generated.\n     * It's a timestamps delta when {@link #subtract()},\n     * {@code INetworkStatsSession#getSummaryForAllUid()} methods are used.\n     ",
    "links" : [ "#subtract()", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "size",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "capacity",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "iface",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "uid",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "set",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "tag",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "metered",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "roaming",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultNetwork",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rxBytes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "rxPackets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "txBytes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "txPackets",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "operations",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkStats>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats clone()",
    "returnType" : "NetworkStats",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear all data stored in this object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats insertEntry(String iface, long rxBytes, long rxPackets, long txBytes, long txPackets)",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats insertEntry(String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats insertEntry(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats insertEntry(Entry entry)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Add new stats entry, copying from given {@link Entry}. The {@link Entry}\n     * object can be recycled across multiple calls.\n     * @hide\n     ",
    "links" : [ "Entry" ]
  }, {
    "name" : "private void setValues(int i, Entry entry)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Iterator<Entry> iterator()",
    "returnType" : "Iterator<Entry>",
    "comment" : "\n     * Iterate over Entry objects.\n     *\n     * Return an iterator of this object that will iterate through all contained Entry objects.\n     *\n     * This iterator does not support concurrent modification and makes no guarantee of fail-fast\n     * behavior. If any method that can mutate the contents of this object is called while\n     * iteration is in progress, either inside the loop or in another thread, then behavior is\n     * undefined.\n     * The remove() method is not implemented and will throw UnsupportedOperationException.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Entry getValues(int i, @Nullable Entry recycle)",
    "returnType" : "Entry",
    "comment" : "\n     * Return specific stats entry.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void maybeCopyEntry(int dest, int src)",
    "returnType" : "void",
    "comment" : "\n     * If @{code dest} is not equal to @{code src}, copy entry from index @{code src} to index\n     * @{code dest}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getElapsedRealtime()",
    "returnType" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setElapsedRealtime(long time)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public long getElapsedRealtimeAge()",
    "returnType" : "long",
    "comment" : "\n     * Return age of this {@link NetworkStats} object with respect to\n     * {@link SystemClock#elapsedRealtime()}.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int internalSize()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats combineValues(String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats combineValues(String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)",
    "returnType" : "NetworkStats",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats combineValues(@NonNull Entry entry)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Combine given values with an existing row, or create a new row if\n     * {@link #findIndex(String, int, int, int, int, int, int)} is unable to find match. Can\n     * also be used to subtract values from existing rows. This method mutates the referencing\n     * {@link NetworkStats} object.\n     *\n     * @param entry the {@link Entry} to combine.\n     * @return a reference to this mutated {@link NetworkStats} object.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "Entry", "#findIndex(String" ]
  }, {
    "name" : "public NetworkStats addEntry(@NonNull Entry entry)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Add given values with an existing row, or create a new row if\n     * {@link #findIndex(String, int, int, int, int, int, int)} is unable to find match. Can\n     * also be used to subtract values from existing rows.\n     *\n     * @param entry the {@link Entry} to add.\n     * @return a new constructed {@link NetworkStats} object that contains the result.\n     ",
    "links" : [ "Entry", "android.net.NetworkStats", "#findIndex(String" ]
  }, {
    "name" : "public NetworkStats add(@NonNull NetworkStats another)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Add the given {@link NetworkStats} objects.\n     *\n     * @return the sum of two objects.\n     ",
    "links" : [ "android.net.NetworkStats" ]
  }, {
    "name" : "public void combineAllValues(@NonNull NetworkStats another)",
    "returnType" : "void",
    "comment" : "\n     * Combine all values from another {@link NetworkStats} into this object.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats" ]
  }, {
    "name" : "public int findIndex(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork)",
    "returnType" : "int",
    "comment" : "\n     * Find first stats index that matches the requested parameters.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int findIndexHinted(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, int hintIndex)",
    "returnType" : "int",
    "comment" : "\n     * Find first stats index that matches the requested parameters, starting\n     * search around the hinted index as an optimization.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void spliceOperationsFrom(NetworkStats stats)",
    "returnType" : "void",
    "comment" : "\n     * Splice in {@link #operations} from the given {@link NetworkStats} based\n     * on matching {@link #uid} and {@link #tag} rows. Ignores {@link #iface},\n     * since operation counts are at data layer.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "#iface", "#tag", "#operations", "#uid" ]
  }, {
    "name" : "public String[] getUniqueIfaces()",
    "returnType" : "String[]",
    "comment" : "\n     * Return list of unique interfaces known by this data structure.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getUniqueUids()",
    "returnType" : "int[]",
    "comment" : "\n     * Return list of unique UIDs known by this data structure.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalBytes()",
    "returnType" : "long",
    "comment" : "\n     * Return total bytes represented by this snapshot object, usually used when\n     * checking if a {@link #subtract(NetworkStats)} delta passes a threshold.\n     * @hide\n     ",
    "links" : [ "#subtract(NetworkStats)" ]
  }, {
    "name" : "public Entry getTotal(Entry recycle)",
    "returnType" : "Entry",
    "comment" : "\n     * Return total of all fields represented by this snapshot object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Entry getTotal(Entry recycle, int limitUid)",
    "returnType" : "Entry",
    "comment" : "\n     * Return total of all fields represented by this snapshot object matching\n     * the requested {@link #uid}.\n     * @hide\n     ",
    "links" : [ "#uid" ]
  }, {
    "name" : "public Entry getTotal(Entry recycle, HashSet<String> limitIface)",
    "returnType" : "Entry",
    "comment" : "\n     * Return total of all fields represented by this snapshot object matching\n     * the requested {@link #iface}.\n     * @hide\n     ",
    "links" : [ "#iface" ]
  }, {
    "name" : "public Entry getTotalIncludingTags(Entry recycle)",
    "returnType" : "Entry",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private Entry getTotal(Entry recycle, HashSet<String> limitIface, int limitUid, boolean includeTags)",
    "returnType" : "Entry",
    "comment" : "\n     * Return total of all fields represented by this snapshot object matching\n     * the requested {@link #iface} and {@link #uid}.\n     *\n     * @param limitIface Set of {@link #iface} to include in total; or {@code\n     *            null} to include all ifaces.\n     ",
    "links" : [ "#iface", "#uid" ]
  }, {
    "name" : "public long getTotalPackets()",
    "returnType" : "long",
    "comment" : "\n     * Fast path for battery stats.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats subtract(@NonNull NetworkStats right)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Subtract the given {@link NetworkStats}, effectively leaving the delta\n     * between two snapshots in time. Assumes that statistics rows collect over\n     * time, and that none of them have disappeared. This method does not mutate\n     * the referencing object.\n     *\n     * @return the delta between two objects.\n     ",
    "links" : [ "android.net.NetworkStats" ]
  }, {
    "name" : "public static NetworkStats subtract(NetworkStats left, NetworkStats right, NonMonotonicObserver<C> observer, C cookie)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Subtract the two given {@link NetworkStats} objects, returning the delta\n     * between two snapshots in time. Assumes that statistics rows collect over\n     * time, and that none of them have disappeared.\n     * <p>\n     * If counters have rolled backwards, they are clamped to {@code 0} and\n     * reported to the given {@link NonMonotonicObserver}.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "NonMonotonicObserver" ]
  }, {
    "name" : "public static NetworkStats subtract(NetworkStats left, NetworkStats right, NonMonotonicObserver<C> observer, C cookie, NetworkStats recycle)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Subtract the two given {@link NetworkStats} objects, returning the delta\n     * between two snapshots in time. Assumes that statistics rows collect over\n     * time, and that none of them have disappeared.\n     * <p>\n     * If counters have rolled backwards, they are clamped to {@code 0} and\n     * reported to the given {@link NonMonotonicObserver}.\n     * <p>\n     * If <var>recycle</var> is supplied, this NetworkStats object will be\n     * reused (and returned) as the result if it is large enough to contain\n     * the data.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats", "NonMonotonicObserver" ]
  }, {
    "name" : "public static void apply464xlatAdjustments(NetworkStats baseTraffic, NetworkStats stackedTraffic, Map<String, String> stackedIfaces)",
    "returnType" : "void",
    "comment" : "\n     * Calculate and apply adjustments to captured statistics for 464xlat traffic.\n     *\n     * <p>This mutates stacked traffic stats, to account for IPv4/IPv6 header size difference.\n     *\n     * <p>UID stats, which are only accounted on the stacked interface, need to be increased\n     * by 20 bytes/packet to account for translation overhead.\n     *\n     * <p>The potential additional overhead of 8 bytes/packet for ip fragments is ignored.\n     *\n     * <p>Interface stats need to sum traffic on both stacked and base interface because:\n     *   - eBPF offloaded packets appear only on the stacked interface\n     *   - Non-offloaded ingress packets appear only on the stacked interface\n     *     (due to iptables raw PREROUTING drop rules)\n     *   - Non-offloaded egress packets appear only on the stacked interface\n     *     (due to ignoring traffic from clat daemon by uid match)\n     * (and of course the 20 bytes/packet overhead needs to be applied to stacked interface stats)\n     *\n     * <p>This method will behave fine if {@code stackedIfaces} is an non-synchronized but add-only\n     * {@code ConcurrentHashMap}\n     * @param baseTraffic Traffic on the base interfaces. Will be mutated.\n     * @param stackedTraffic Stats with traffic stacked on top of our ifaces. Will also be mutated.\n     * @param stackedIfaces Mapping ipv6if -> ipv4if interface where traffic is counted on both.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void apply464xlatAdjustments(Map<String, String> stackedIfaces)",
    "returnType" : "void",
    "comment" : "\n     * Calculate and apply adjustments to captured statistics for 464xlat traffic counted twice.\n     *\n     * <p>This mutates the object this method is called on. Equivalent to calling\n     * {@link #apply464xlatAdjustments(NetworkStats, NetworkStats, Map)} with {@code this} as\n     * base and stacked traffic.\n     * @param stackedIfaces Mapping ipv6if -> ipv4if interface where traffic is counted on both.\n     * @hide\n     ",
    "links" : [ "#apply464xlatAdjustments(NetworkStats" ]
  }, {
    "name" : "public NetworkStats groupedByIface()",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Return total statistics grouped by {@link #iface}; doesn't mutate the\n     * original structure.\n     * @hide\n     * @deprecated Use {@link #mapKeysNotNull(Function)} instead.\n     ",
    "links" : [ "#iface", "#mapKeysNotNull(Function)" ]
  }, {
    "name" : "public NetworkStats groupedByUid()",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Return total statistics grouped by {@link #uid}; doesn't mutate the\n     * original structure.\n     * @hide\n     * @deprecated Use {@link #mapKeysNotNull(Function)} instead.\n     ",
    "links" : [ "#mapKeysNotNull(Function)", "#uid" ]
  }, {
    "name" : "public void removeUids(int[] uids)",
    "returnType" : "void",
    "comment" : "\n     * Remove all rows that match one of specified UIDs.\n     * This mutates the original structure in place.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats removeEmptyEntries()",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Remove all rows that match one of specified UIDs.\n     * @return the result object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkStats withoutInterfaces()",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Returns a copy of this NetworkStats, replacing iface with IFACE_ALL in all entries.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private NetworkStats mapKeysNotNull(@NonNull Function<Entry, Entry> f)",
    "returnType" : "NetworkStats",
    "comment" : "\n     * Returns a new NetworkStats object where entries are transformed.\n     *\n     * Note that because NetworkStats is more akin to a map than to a list,\n     * the entries will be grouped after they are mapped by the key fields,\n     * e.g. uid, set, tag, defaultNetwork.\n     * Only the key returned by the function is used ; values will be forcefully\n     * copied from the original entry. Entries that map to the same set of keys\n     * will be added together.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void filter(int limitUid, String[] limitIfaces, int limitTag)",
    "returnType" : "void",
    "comment" : "\n     * Only keep entries that match all specified filters.\n     *\n     * <p>This mutates the original structure in place. After this method is called,\n     * size is the number of matching entries, and capacity is the previous capacity.\n     * @param limitUid UID to filter for, or {@link #UID_ALL}.\n     * @param limitIfaces Interfaces to filter for, or {@link #INTERFACES_ALL}.\n     * @param limitTag Tag to filter for, or {@link #TAG_ALL}.\n     * @hide\n     ",
    "links" : [ "#INTERFACES_ALL", "#UID_ALL", "#TAG_ALL" ]
  }, {
    "name" : "public void filterDebugEntries()",
    "returnType" : "void",
    "comment" : "\n     * Only keep entries with {@link #set} value less than {@link #SET_DEBUG_START}.\n     *\n     * <p>This mutates the original structure in place.\n     * @hide\n     ",
    "links" : [ "#set", "#SET_DEBUG_START" ]
  }, {
    "name" : "private void filter(Predicate<Entry> predicate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static String setToString(int set)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #set} value.\n     * @hide\n     ",
    "links" : [ "#set" ]
  }, {
    "name" : "public static String setToCheckinString(int set)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #set} value.\n     * @hide\n     ",
    "links" : [ "#set" ]
  }, {
    "name" : "public static boolean setMatches(int querySet, int dataSet)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if the querySet matches the dataSet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String tagToString(int tag)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #tag} value.\n     * @hide\n     ",
    "links" : [ "#tag" ]
  }, {
    "name" : "public static String meteredToString(int metered)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #metered} value.\n     * @hide\n     ",
    "links" : [ "#metered" ]
  }, {
    "name" : "public static String roamingToString(int roaming)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #roaming} value.\n     * @hide\n     ",
    "links" : [ "#roaming" ]
  }, {
    "name" : "public static String defaultNetworkToString(int defaultNetwork)",
    "returnType" : "String",
    "comment" : "\n     * Return text description of {@link #defaultNetwork} value.\n     * @hide\n     ",
    "links" : [ "#defaultNetwork" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void migrateTun(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces)",
    "returnType" : "void",
    "comment" : "\n     * VPN accounting. Move some VPN's underlying traffic to other UIDs that use tun0 iface.\n     *\n     * <p>This method should only be called on delta NetworkStats. Do not call this method on a\n     * snapshot {@link NetworkStats} object because the tunUid and/or the underlyingIface may change\n     * over time.\n     *\n     * <p>This method performs adjustments for one active VPN package and one VPN iface at a time.\n     *\n     * @param tunUid uid of the VPN application\n     * @param tunIface iface of the vpn tunnel\n     * @param underlyingIfaces underlying network ifaces used by the VPN application\n     * @hide\n     ",
    "links" : [ "android.net.NetworkStats" ]
  }, {
    "name" : "private void tunAdjustmentInit(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces, @NonNull Entry tunIfaceTotal, @NonNull Entry[] perInterfaceTotal, @NonNull Entry underlyingIfacesTotal)",
    "returnType" : "void",
    "comment" : "\n     * Initializes the data used by the migrateTun() method.\n     *\n     * <p>This is the first pass iteration which does the following work:\n     *\n     * <ul>\n     *   <li>Adds up all the traffic through the tunUid's underlyingIfaces (both foreground and\n     *       background).\n     *   <li>Adds up all the traffic through tun0 excluding traffic from the vpn app itself.\n     * </ul>\n     *\n     * @param tunUid uid of the VPN application\n     * @param tunIface iface of the vpn tunnel\n     * @param underlyingIfaces underlying network ifaces used by the VPN application\n     * @param tunIfaceTotal output parameter; combined data usage by all apps using VPN\n     * @param perInterfaceTotal output parameter; data usage by VPN app, grouped by its {@code\n     *     underlyingIfaces}\n     * @param underlyingIfacesTotal output parameter; data usage by VPN, summed across all of its\n     *     {@code underlyingIfaces}\n     ",
    "links" : [ ]
  }, {
    "name" : "private Entry[] addTrafficToApplications(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces, @NonNull Entry tunIfaceTotal, @NonNull Entry[] perInterfaceTotal, @NonNull Entry underlyingIfacesTotal)",
    "returnType" : "Entry[]",
    "comment" : "\n     * Distributes traffic across apps that are using given {@code tunIface}, and returns the total\n     * traffic that should be moved off of {@code tunUid} grouped by {@code underlyingIfaces}.\n     *\n     * @param tunUid uid of the VPN application\n     * @param tunIface iface of the vpn tunnel\n     * @param underlyingIfaces underlying network ifaces used by the VPN application\n     * @param tunIfaceTotal combined data usage across all apps using {@code tunIface}\n     * @param perInterfaceTotal data usage by VPN app, grouped by its {@code underlyingIfaces}\n     * @param underlyingIfacesTotal data usage by VPN, summed across all of its {@code\n     *     underlyingIfaces}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void deductTrafficFromVpnApp(int tunUid, @NonNull List<String> underlyingIfaces, @NonNull Entry[] moved)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void tunSubtract(int i, @NonNull NetworkStats left, @NonNull Entry right)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(@NonNull Parcel dest, int flags)", "public NetworkStats clone()", "public void clear()", "public NetworkStats insertEntry(String iface, long rxBytes, long rxPackets, long txBytes, long txPackets)", "public NetworkStats insertEntry(String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)", "public NetworkStats insertEntry(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)", "public NetworkStats insertEntry(Entry entry)", "private void setValues(int i, Entry entry)", "public Iterator<Entry> iterator()", "public Entry getValues(int i, @Nullable Entry recycle)", "private void maybeCopyEntry(int dest, int src)", "public long getElapsedRealtime()", "public void setElapsedRealtime(long time)", "public long getElapsedRealtimeAge()", "public int size()", "public int internalSize()", "public NetworkStats combineValues(String iface, int uid, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)", "public NetworkStats combineValues(String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations)", "public NetworkStats combineValues(@NonNull Entry entry)", "public NetworkStats addEntry(@NonNull Entry entry)", "public NetworkStats add(@NonNull NetworkStats another)", "public void combineAllValues(@NonNull NetworkStats another)", "public int findIndex(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork)", "public int findIndexHinted(String iface, int uid, int set, int tag, int metered, int roaming, int defaultNetwork, int hintIndex)", "public void spliceOperationsFrom(NetworkStats stats)", "public String[] getUniqueIfaces()", "public int[] getUniqueUids()", "public long getTotalBytes()", "public Entry getTotal(Entry recycle)", "public Entry getTotal(Entry recycle, int limitUid)", "public Entry getTotal(Entry recycle, HashSet<String> limitIface)", "public Entry getTotalIncludingTags(Entry recycle)", "private Entry getTotal(Entry recycle, HashSet<String> limitIface, int limitUid, boolean includeTags)", "public long getTotalPackets()", "public NetworkStats subtract(@NonNull NetworkStats right)", "public static NetworkStats subtract(NetworkStats left, NetworkStats right, NonMonotonicObserver<C> observer, C cookie)", "public static NetworkStats subtract(NetworkStats left, NetworkStats right, NonMonotonicObserver<C> observer, C cookie, NetworkStats recycle)", "public static void apply464xlatAdjustments(NetworkStats baseTraffic, NetworkStats stackedTraffic, Map<String, String> stackedIfaces)", "public void apply464xlatAdjustments(Map<String, String> stackedIfaces)", "public NetworkStats groupedByIface()", "public NetworkStats groupedByUid()", "public void removeUids(int[] uids)", "public NetworkStats removeEmptyEntries()", "public NetworkStats withoutInterfaces()", "private NetworkStats mapKeysNotNull(@NonNull Function<Entry, Entry> f)", "public void filter(int limitUid, String[] limitIfaces, int limitTag)", "public void filterDebugEntries()", "private void filter(Predicate<Entry> predicate)", "public void dump(String prefix, PrintWriter pw)", "public static String setToString(int set)", "public static String setToCheckinString(int set)", "public static boolean setMatches(int querySet, int dataSet)", "public static String tagToString(int tag)", "public static String meteredToString(int metered)", "public static String roamingToString(int roaming)", "public static String defaultNetworkToString(int defaultNetwork)", "public String toString()", "public int describeContents()", "public void migrateTun(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces)", "private void tunAdjustmentInit(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces, @NonNull Entry tunIfaceTotal, @NonNull Entry[] perInterfaceTotal, @NonNull Entry underlyingIfacesTotal)", "private Entry[] addTrafficToApplications(int tunUid, @NonNull String tunIface, @NonNull List<String> underlyingIfaces, @NonNull Entry tunIfaceTotal, @NonNull Entry[] perInterfaceTotal, @NonNull Entry underlyingIfacesTotal)", "private void deductTrafficFromVpnApp(int tunUid, @NonNull List<String> underlyingIfaces, @NonNull Entry[] moved)", "private static void tunSubtract(int i, @NonNull NetworkStats left, @NonNull Entry right)" ],
  "variableNames" : [ "TAG", "IFACE_ALL", "IFACE_VT", "UID_ALL", "UID_TETHERING", "TAG_ALL", "SET_ALL", "SET_DEFAULT", "SET_FOREGROUND", "SET_DEBUG_START", "SET_DBG_VPN_IN", "SET_DBG_VPN_OUT", "INTERFACES_ALL", "TAG_NONE", "METERED_ALL", "METERED_NO", "METERED_YES", "ROAMING_ALL", "ROAMING_NO", "ROAMING_YES", "DEFAULT_NETWORK_ALL", "DEFAULT_NETWORK_NO", "DEFAULT_NETWORK_YES", "STATS_PER_IFACE", "STATS_PER_UID", "CLATD_INTERFACE_PREFIX", "IPV4V6_HEADER_DELTA", "elapsedRealtime", "size", "capacity", "iface", "uid", "set", "tag", "metered", "roaming", "defaultNetwork", "rxBytes", "rxPackets", "txBytes", "txPackets", "operations", "CREATOR" ]
}