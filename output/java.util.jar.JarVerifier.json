{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/jar/JarVerifier.java",
  "packageName" : "java.util.jar",
  "className" : "JarVerifier",
  "comment" : "\n *\n * @author      Roland Schemers\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "debug",
    "type" : "Debug",
    "comment" : " Are we debugging ? ",
    "links" : [ ]
  }, {
    "name" : "verifiedSigners",
    "type" : "Hashtable<String, CodeSigner[]>",
    "comment" : " a table mapping names to code signers, for jar entries that have\n       had their actual hashes verified ",
    "links" : [ ]
  }, {
    "name" : "sigFileSigners",
    "type" : "Hashtable<String, CodeSigner[]>",
    "comment" : " a table mapping names to code signers, for jar entries that have\n       passed the .SF/.DSA/.EC -> MANIFEST check ",
    "links" : [ ]
  }, {
    "name" : "sigFileData",
    "type" : "Hashtable<String, byte[]>",
    "comment" : " a hash table to hold .SF bytes ",
    "links" : [ ]
  }, {
    "name" : "pendingBlocks",
    "type" : "ArrayList<SignatureFileVerifier>",
    "comment" : " \"queue\" of pending PKCS7 blocks that we couldn't parse\n     *  until we parsed the .SF file ",
    "links" : [ ]
  }, {
    "name" : "signerCache",
    "type" : "ArrayList<CodeSigner[]>",
    "comment" : " cache of CodeSigner objects ",
    "links" : [ ]
  }, {
    "name" : "parsingBlockOrSF",
    "type" : "boolean",
    "comment" : " Are we parsing a block? ",
    "links" : [ ]
  }, {
    "name" : "parsingMeta",
    "type" : "boolean",
    "comment" : " Are we done parsing META-INF entries? ",
    "links" : [ ]
  }, {
    "name" : "anyToVerify",
    "type" : "boolean",
    "comment" : " Are there are files to verify? ",
    "links" : [ ]
  }, {
    "name" : "baos",
    "type" : "ByteArrayOutputStream",
    "comment" : " The output stream to use when keeping track of files we are interested\n       in ",
    "links" : [ ]
  }, {
    "name" : "manDig",
    "type" : "ManifestDigester",
    "comment" : " The ManifestDigester object ",
    "links" : [ ]
  }, {
    "name" : "manifestRawBytes",
    "type" : "byte[]",
    "comment" : " the bytes for the manDig object ",
    "links" : [ ]
  }, {
    "name" : "manifestName",
    "type" : "String",
    "comment" : " the manifest name this JarVerifier is created upon ",
    "links" : [ ]
  }, {
    "name" : "eagerValidation",
    "type" : "boolean",
    "comment" : " controls eager signature validation ",
    "links" : [ ]
  }, {
    "name" : "csdomain",
    "type" : "Object",
    "comment" : " makes code source singleton instances unique to us ",
    "links" : [ ]
  }, {
    "name" : "manifestDigests",
    "type" : "List<Object>",
    "comment" : " collect -DIGEST-MANIFEST values for blacklist ",
    "links" : [ ]
  }, {
    "name" : "urlToCodeSourceMap",
    "type" : "Map<URL, Map<CodeSigner[], CodeSource>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signerToCodeSource",
    "type" : "Map<CodeSigner[], CodeSource>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastURL",
    "type" : "URL",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lastURLMap",
    "type" : "Map<CodeSigner[], CodeSource>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "emptySigner",
    "type" : "CodeSigner[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signerMap",
    "type" : "Map<String, CodeSigner[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "emptyEnumeration",
    "type" : "Enumeration<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "jarCodeSigners",
    "type" : "List<CodeSigner[]>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void beginEntry(JarEntry je, ManifestEntryVerifier mev) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * This method scans to see which entry we're parsing and\n     * keeps various state information depending on what type of\n     * file is being parsed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void update(int b, ManifestEntryVerifier mev) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void update(int n, byte[] b, int off, int len, ManifestEntryVerifier mev) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processEntry(ManifestEntryVerifier mev) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * called when we reach the end of entry in one of the read() methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getCerts(String name)",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Return an array of java.security.cert.Certificate objects for\n     * the given file in the jar.\n     * @deprecated Deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getCerts(JarFile jar, JarEntry entry)",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CodeSigner[] getCodeSigners(String name)",
    "returnType" : "CodeSigner[]",
    "comment" : "\n     * return an array of CodeSigner objects for\n     * the given file in the jar. this array is not cloned.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodeSigner[] getCodeSigners(JarFile jar, JarEntry entry)",
    "returnType" : "CodeSigner[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static java.security.cert.Certificate[] mapSignersToCertArray(CodeSigner[] signers)",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Convert an array of signers into an array of concatenated certificate\n     * arrays.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean nothingToVerify()",
    "returnType" : "boolean",
    "comment" : "\n     * returns true if there no files to verify.\n     * should only be called after all the META-INF entries\n     * have been processed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void doneWithMeta()",
    "returnType" : "void",
    "comment" : "\n     * called to let us know we have processed all the\n     * META-INF entries, and if we re-read one of them, don't\n     * re-process it. Also gets rid of any data structures\n     * we needed when parsing META-INF entries.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized CodeSource mapSignersToCodeSource(URL url, CodeSigner[] signers)",
    "returnType" : "CodeSource",
    "comment" : "\n     * Create a unique mapping from codeSigner cache entries to CodeSource.\n     * In theory, multiple URLs origins could map to a single locally cached\n     * and shared JAR file although in practice there will be a single URL in use.\n     ",
    "links" : [ ]
  }, {
    "name" : "private CodeSource[] mapSignersToCodeSources(URL url, List<CodeSigner[]> signers, boolean unsigned)",
    "returnType" : "CodeSource[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CodeSigner[] findMatchingSigners(CodeSource cs)",
    "returnType" : "CodeSigner[]",
    "comment" : "\n     * Match CodeSource to a CodeSigner[] in the signer cache.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized Map<String, CodeSigner[]> signerMap()",
    "returnType" : "Map<String, CodeSigner[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized Enumeration<String> entryNames(JarFile jar, final CodeSource[] cs)",
    "returnType" : "Enumeration<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<JarEntry> entries2(final JarFile jar, Enumeration<? extends ZipEntry> e)",
    "returnType" : "Enumeration<JarEntry>",
    "comment" : "\n     * Like entries() but screens out internal JAR mechanism entries\n     * and includes signed entries with no ZIP data.\n     ",
    "links" : [ ]
  }, {
    "name" : " static boolean isSigningRelated(String name)",
    "returnType" : "boolean",
    "comment" : " true if file is part of the signature mechanism itself",
    "links" : [ ]
  }, {
    "name" : "private Enumeration<String> unsignedEntryNames(JarFile jar)",
    "returnType" : "Enumeration<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized List<CodeSigner[]> getJarCodeSigners()",
    "returnType" : "List<CodeSigner[]>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized CodeSource[] getCodeSources(JarFile jar, URL url)",
    "returnType" : "CodeSource[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CodeSource getCodeSource(URL url, String name)",
    "returnType" : "CodeSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CodeSource getCodeSource(URL url, JarFile jar, JarEntry je)",
    "returnType" : "CodeSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEagerValidation(boolean eager)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized List<Object> getManifestDigests()",
    "returnType" : "List<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static CodeSource getUnsignedCS(URL url)",
    "returnType" : "CodeSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isTrustedManifestEntry(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the name is trusted. Used by\n     * {@link Manifest#getTrustedAttributes(String)}.\n     ",
    "links" : [ "java.util.jar.Manifest#getTrustedAttributes(String)" ]
  } ],
  "methodNames" : [ "public void beginEntry(JarEntry je, ManifestEntryVerifier mev) throws IOException", "public void update(int b, ManifestEntryVerifier mev) throws IOException", "public void update(int n, byte[] b, int off, int len, ManifestEntryVerifier mev) throws IOException", "private void processEntry(ManifestEntryVerifier mev) throws IOException", "public java.security.cert.Certificate[] getCerts(String name)", "public java.security.cert.Certificate[] getCerts(JarFile jar, JarEntry entry)", "public CodeSigner[] getCodeSigners(String name)", "public CodeSigner[] getCodeSigners(JarFile jar, JarEntry entry)", "private static java.security.cert.Certificate[] mapSignersToCertArray(CodeSigner[] signers)", " boolean nothingToVerify()", " void doneWithMeta()", "private synchronized CodeSource mapSignersToCodeSource(URL url, CodeSigner[] signers)", "private CodeSource[] mapSignersToCodeSources(URL url, List<CodeSigner[]> signers, boolean unsigned)", "private CodeSigner[] findMatchingSigners(CodeSource cs)", "private synchronized Map<String, CodeSigner[]> signerMap()", "public synchronized Enumeration<String> entryNames(JarFile jar, final CodeSource[] cs)", "public Enumeration<JarEntry> entries2(final JarFile jar, Enumeration<? extends ZipEntry> e)", " static boolean isSigningRelated(String name)", "private Enumeration<String> unsignedEntryNames(JarFile jar)", "private synchronized List<CodeSigner[]> getJarCodeSigners()", "public synchronized CodeSource[] getCodeSources(JarFile jar, URL url)", "public CodeSource getCodeSource(URL url, String name)", "public CodeSource getCodeSource(URL url, JarFile jar, JarEntry je)", "public void setEagerValidation(boolean eager)", "public synchronized List<Object> getManifestDigests()", " static CodeSource getUnsignedCS(URL url)", " boolean isTrustedManifestEntry(String name)" ],
  "variableNames" : [ "debug", "verifiedSigners", "sigFileSigners", "sigFileData", "pendingBlocks", "signerCache", "parsingBlockOrSF", "parsingMeta", "anyToVerify", "baos", "manDig", "manifestRawBytes", "manifestName", "eagerValidation", "csdomain", "manifestDigests", "urlToCodeSourceMap", "signerToCodeSource", "lastURL", "lastURLMap", "emptySigner", "signerMap", "emptyEnumeration", "jarCodeSigners" ]
}