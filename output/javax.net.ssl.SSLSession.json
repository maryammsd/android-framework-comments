{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/net/ssl/SSLSession.java",
  "packageName" : "javax.net.ssl",
  "className" : "SSLSession",
  "comment" : "\n * In SSL, sessions are used to describe an ongoing relationship between\n * two entities.  Each SSL connection involves one session at a time, but\n * that session may be used on many connections between those entities,\n * simultaneously or sequentially.  The session used on a connection may\n * also be replaced by a different session.  Sessions are created, or\n * rejoined, as part of the SSL handshaking protocol. Sessions may be\n * invalidated due to policies affecting security or resource usage,\n * or by an application explicitly calling <code>invalidate</code>.\n * Session management policies are typically used to tune performance.\n *\n * <P> In addition to the standard session attributes, SSL sessions expose\n * these read-only attributes:  <UL>\n *\n *      <LI> <em>Peer Identity.</em>  Sessions are between a particular\n *      client and a particular server.  The identity of the peer may\n *      have been established as part of session setup.  Peers are\n *      generally identified by X.509 certificate chains.\n *\n *      <LI> <em>Cipher Suite Name.</em>  Cipher suites describe the\n *      kind of cryptographic protection that's used by connections\n *      in a particular session.\n *\n *      <LI> <em>Peer Host.</em>  All connections in a session are\n *      between the same two hosts.  The address of the host on the other\n *      side of the connection is available.\n *\n *      </UL>\n *\n * <P> Sessions may be explicitly invalidated.  Invalidation may also\n * be done implicitly, when faced with certain kinds of errors.\n *\n * @since 1.4\n * @author David Brownell\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public byte[] getId()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the identifier assigned to this Session.\n     *\n     * @return the Session identifier\n     ",
    "links" : [ ]
  }, {
    "name" : "public SSLSessionContext getSessionContext()",
    "returnType" : "SSLSessionContext",
    "comment" : "\n     * Returns the context in which this session is bound.\n     * <P>\n     * This context may be unavailable in some environments,\n     * in which case this method returns null.\n     * <P>\n     * If the context is available and there is a\n     * security manager installed, the caller may require\n     * permission to access it or a security exception may be thrown.\n     * In a Java environment, the security manager's\n     * <code>checkPermission</code> method is called with a\n     * <code>SSLPermission(\"getSSLSessionContext\")</code> permission.\n     *\n     * @throws SecurityException if the calling thread does not have\n     *         permission to get SSL session context.\n     * @return the session context used for this session, or null\n     * if the context is unavailable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCreationTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time at which this Session representation was created,\n     * in milliseconds since midnight, January 1, 1970 UTC.\n     *\n     * @return the time this Session was created\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessedTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns the last time this Session representation was accessed by the\n     * session level infrastructure, in milliseconds since\n     * midnight, January 1, 1970 UTC.\n     * <P>\n     * Access indicates a new connection being established using session data.\n     * Application level operations, such as getting or setting a value\n     * associated with the session, are not reflected in this access time.\n     *\n     * <P> This information is particularly useful in session management\n     * policies.  For example, a session manager thread could leave all\n     * sessions in a given context which haven't been used in a long time;\n     * or, the sessions might be sorted according to age to optimize some task.\n     *\n     * @return the last time this Session was accessed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void invalidate()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the session.\n     * <P>\n     * Future connections will not be able to\n     * resume or join this session.  However, any existing connection\n     * using this session can continue to use the session until the\n     * connection is closed.\n     *\n     * @see #isValid()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this session is valid and available for resuming or\n     * joining.\n     *\n     * @return true if this session may be rejoined.\n     * @see #invalidate()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public void putValue(String name, Object value)",
    "returnType" : "void",
    "comment" : "\n     *\n     * Binds the specified <code>value</code> object into the\n     * session's application layer data\n     * with the given <code>name</code>.\n     * <P>\n     * Any existing binding using the same <code>name</code> is\n     * replaced.  If the new (or existing) <code>value</code> implements the\n     * <code>SSLSessionBindingListener</code> interface, the object\n     * represented by <code>value</code> is notified appropriately.\n     * <p>\n     * For security reasons, the same named values may not be\n     * visible across different access control contexts.\n     *\n     * @param name the name to which the data object will be bound.\n     *          This may not be null.\n     * @param value the data object to be bound. This may not be null.\n     * @throws IllegalArgumentException if either argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getValue(String name)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the object bound to the given name in the session's\n     * application layer data.  Returns null if there is no such binding.\n     * <p>\n     * For security reasons, the same named values may not be\n     * visible across different access control contexts.\n     *\n     * @param name the name of the binding to find.\n     * @return the value bound to that name, or null if the binding does\n     *          not exist.\n     * @throws IllegalArgumentException if the argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeValue(String name)",
    "returnType" : "void",
    "comment" : "\n     * Removes the object bound to the given name in the session's\n     * application layer data.  Does nothing if there is no object\n     * bound to the given name.  If the bound existing object\n     * implements the <code>SessionBindingListener</code> interface,\n     * it is notified appropriately.\n     * <p>\n     * For security reasons, the same named values may not be\n     * visible across different access control contexts.\n     *\n     * @param name the name of the object to remove visible\n     *          across different access control contexts\n     * @throws IllegalArgumentException if the argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getValueNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns an array of the names of all the application layer\n     * data objects bound into the Session.\n     * <p>\n     * For security reasons, the same named values may not be\n     * visible across different access control contexts.\n     *\n     * @return a non-null (possibly empty) array of names of the objects\n     *  bound to this Session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the identity of the peer which was established as part\n     * of defining the session.\n     * <P>\n     * Note: This method can be used only when using certificate-based\n     * cipher suites; using it with non-certificate-based cipher suites,\n     * such as Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * @return an ordered array of peer certificates,\n     *          with the peer's own certificate first followed by any\n     *          certificate authorities.\n     * @exception SSLPeerUnverifiedException if the peer's identity has not\n     *          been verified\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public java.security.cert.Certificate[] getLocalCertificates()",
    "returnType" : "java.security.cert.Certificate[]",
    "comment" : "\n     * Returns the certificate(s) that were sent to the peer during\n     * handshaking.\n     * <P>\n     * Note: This method is useful only when using certificate-based\n     * cipher suites.\n     * <P>\n     * When multiple certificates are available for use in a\n     * handshake, the implementation chooses what it considers the\n     * \"best\" certificate chain available, and transmits that to\n     * the other side.  This method allows the caller to know\n     * which certificate chain was actually used.\n     *\n     * @return an ordered array of certificates,\n     * with the local certificate first followed by any\n     * certificate authorities.  If no certificates were sent,\n     * then null is returned.\n     *\n     * @see #getLocalPrincipal()\n     ",
    "links" : [ ]
  }, {
    "name" : "public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException",
    "returnType" : "javax.security.cert.X509Certificate[]",
    "comment" : "\n     * Returns the identity of the peer which was identified as part\n     * of defining the session.\n     * <P>\n     * Note: This method can be used only when using certificate-based\n     * cipher suites; using it with non-certificate-based cipher suites,\n     * such as Kerberos, will throw an SSLPeerUnverifiedException.\n     *\n     * <p><em>Note: this method exists for compatibility with previous\n     * releases. New applications should use\n     * {@link #getPeerCertificates} instead.</em></p>\n     *\n     * @return an ordered array of peer X.509 certificates,\n     *          with the peer's own certificate first followed by any\n     *          certificate authorities.  (The certificates are in\n     *          the original JSSE certificate\n     *          {@link javax.security.cert.X509Certificate} format.)\n     * @exception SSLPeerUnverifiedException if the peer's identity\n     *          has not been verified\n     * @see #getPeerPrincipal()\n     ",
    "links" : [ "#getPeerCertificates", "javax.security.cert.X509Certificate" ]
  }, {
    "name" : "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the identity of the peer which was established as part of\n     * defining the session.\n     *\n     * @return the peer's principal. Returns an X500Principal of the\n     * end-entity certiticate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites.\n     *\n     * @throws SSLPeerUnverifiedException if the peer's identity has not\n     *          been verified\n     *\n     * @see #getPeerCertificates()\n     * @see #getLocalPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Principal getLocalPrincipal()",
    "returnType" : "Principal",
    "comment" : "\n     * Returns the principal that was sent to the peer during handshaking.\n     *\n     * @return the principal sent to the peer. Returns an X500Principal\n     * of the end-entity certificate for X509-based cipher suites, and\n     * KerberosPrincipal for Kerberos cipher suites. If no principal was\n     * sent, then null is returned.\n     *\n     * @see #getLocalCertificates()\n     * @see #getPeerPrincipal()\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCipherSuite()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the SSL cipher suite which is used for all\n     * connections in the session.\n     *\n     * <P> This defines the level of protection\n     * provided to the data sent on the connection, including the kind\n     * of encryption used and most aspects of how authentication is done.\n     *\n     * @return the name of the session's cipher suite\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getProtocol()",
    "returnType" : "String",
    "comment" : "\n     * Returns the standard name of the protocol used for all\n     * connections in the session.\n     *\n     * <P> This defines the protocol used in the connection.\n     *\n     * @return the standard name of the protocol used for all\n     * connections in the session.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getPeerHost()",
    "returnType" : "String",
    "comment" : "\n     * Returns the host name of the peer in this session.\n     * <P>\n     * For the server, this is the client's host;  and for\n     * the client, it is the server's host. The name may not be\n     * a fully qualified host name or even a host name at all as\n     * it may represent a string encoding of the peer's network address.\n     * If such a name is desired, it might\n     * be resolved through a name service based on the value returned\n     * by this method.\n     * <P>\n     * This value is not authenticated and should not be relied upon.\n     * It is mainly used as a hint for <code>SSLSession</code> caching\n     * strategies.\n     *\n     * @return  the host name of the peer host, or null if no information\n     *          is available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPeerPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the port number of the peer in this session.\n     * <P>\n     * For the server, this is the client's port number;  and for\n     * the client, it is the server's port number.\n     * <P>\n     * This value is not authenticated and should not be relied upon.\n     * It is mainly used as a hint for <code>SSLSession</code> caching\n     * strategies.\n     *\n     * @return  the port number of the peer host, or -1 if no information\n     *          is available.\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPacketBufferSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current size of the largest SSL/TLS packet that is expected\n     * when using this session.\n     * <P>\n     * A <code>SSLEngine</code> using this session may generate SSL/TLS\n     * packets of any size up to and including the value returned by this\n     * method. All <code>SSLEngine</code> network buffers should be sized\n     * at least this large to avoid insufficient space problems when\n     * performing <code>wrap</code> and <code>unwrap</code> calls.\n     *\n     * @return  the current maximum expected network packet size\n     *\n     * @see SSLEngine#wrap(ByteBuffer, ByteBuffer)\n     * @see SSLEngine#unwrap(ByteBuffer, ByteBuffer)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getApplicationBufferSize()",
    "returnType" : "int",
    "comment" : "\n     * Gets the current size of the largest application data that is\n     * expected when using this session.\n     * <P>\n     * <code>SSLEngine</code> application data buffers must be large\n     * enough to hold the application data from any inbound network\n     * application data packet received.  Typically, outbound\n     * application data buffers can be of any size.\n     *\n     * @return  the current maximum expected application packet size\n     *\n     * @see SSLEngine#wrap(ByteBuffer, ByteBuffer)\n     * @see SSLEngine#unwrap(ByteBuffer, ByteBuffer)\n     *\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public byte[] getId()", "public SSLSessionContext getSessionContext()", "public long getCreationTime()", "public long getLastAccessedTime()", "public void invalidate()", "public boolean isValid()", "public void putValue(String name, Object value)", "public Object getValue(String name)", "public void removeValue(String name)", "public String[] getValueNames()", "public java.security.cert.Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException", "public java.security.cert.Certificate[] getLocalCertificates()", "public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException", "public Principal getPeerPrincipal() throws SSLPeerUnverifiedException", "public Principal getLocalPrincipal()", "public String getCipherSuite()", "public String getProtocol()", "public String getPeerHost()", "public int getPeerPort()", "public int getPacketBufferSize()", "public int getApplicationBufferSize()" ],
  "variableNames" : [ ]
}