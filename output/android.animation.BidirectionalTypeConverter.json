{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/animation/BidirectionalTypeConverter.java",
  "packageName" : "android.animation",
  "className" : "BidirectionalTypeConverter",
  "comment" : "\n * Abstract base class used convert type T to another type V and back again. This\n * is necessary when the value types of in animation are different from the property\n * type. BidirectionalTypeConverter is needed when only the final value for the\n * animation is supplied to animators.\n * @see PropertyValuesHolder#setConverter(TypeConverter)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mInvertedConverter",
    "type" : "BidirectionalTypeConverter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract T convertBack(V value)",
    "returnType" : "T",
    "comment" : "\n     * Does a conversion from the target type back to the source type. The subclass\n     * must implement this when a TypeConverter is used in animations and current\n     * values will need to be read for an animation.\n     * @param value The Object to convert.\n     * @return A value of type T, converted from <code>value</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BidirectionalTypeConverter<V, T> invert()",
    "returnType" : "BidirectionalTypeConverter<V, T>",
    "comment" : "\n     * Returns the inverse of this converter, where the from and to classes are reversed.\n     * The inverted converter uses this convert to call {@link #convertBack(Object)} for\n     * {@link #convert(Object)} calls and {@link #convert(Object)} for\n     * {@link #convertBack(Object)} calls.\n     * @return The inverse of this converter, where the from and to classes are reversed.\n     ",
    "links" : [ "#convert(Object)", "#convertBack(Object)" ]
  } ],
  "methodNames" : [ "public abstract T convertBack(V value)", "public BidirectionalTypeConverter<V, T> invert()" ],
  "variableNames" : [ "mInvertedConverter" ]
}