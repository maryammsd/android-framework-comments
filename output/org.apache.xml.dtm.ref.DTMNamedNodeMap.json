{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/DTMNamedNodeMap.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "DTMNamedNodeMap",
  "comment" : "\n * DTMNamedNodeMap is a quickie (as opposed to quick) implementation of the DOM's\n * NamedNodeMap interface, intended to support DTMProxy's getAttributes()\n * call.\n * <p>\n * ***** Note: this does _not_ current attempt to cache any of the data;\n * if you ask for attribute 27 and then 28, you'll have to rescan the first\n * 27. It should probably at least keep track of the last one retrieved,\n * and possibly buffer the whole array.\n * <p>\n * ***** Also note that there's no fastpath for the by-name query; we search\n * linearly until we find it or fail to find it. Again, that could be\n * optimized at some cost in object creation/storage.\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "dtm",
    "type" : "DTM",
    "comment" : " The DTM for this node. ",
    "links" : [ ]
  }, {
    "name" : "element",
    "type" : "int",
    "comment" : " The DTM element handle. ",
    "links" : [ ]
  }, {
    "name" : "m_count",
    "type" : "short",
    "comment" : " The number of nodes in this map. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   * Return the number of Attributes on this Element\n   *\n   * @return The number of nodes in this map.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNamedItem(String name)",
    "returnType" : "Node",
    "comment" : "\n   * Retrieves a node specified by name.\n   * @param name The <code>nodeName</code> of a node to retrieve.\n   * @return A <code>Node</code> (of any type) with the specified\n   *   <code>nodeName</code>, or <code>null</code> if it does not identify\n   *   any node in this map.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node item(int i)",
    "returnType" : "Node",
    "comment" : "\n   * Returns the <code>index</code>th item in the map. If <code>index</code>\n   * is greater than or equal to the number of nodes in this map, this\n   * returns <code>null</code>.\n   * @param i The index of the requested item.\n   * @return The node at the <code>index</code>th position in the map, or\n   *   <code>null</code> if that is not a valid index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItem(Node newNode)",
    "returnType" : "Node",
    "comment" : "\n   * Adds a node using its <code>nodeName</code> attribute. If a node with\n   * that name is already present in this map, it is replaced by the new\n   * one.\n   * <br>As the <code>nodeName</code> attribute is used to derive the name\n   * which the node must be stored under, multiple nodes of certain types\n   * (those that have a \"special\" string value) cannot be stored as the\n   * names would clash. This is seen as preferable to allowing nodes to be\n   * aliased.\n   * @param newNode node to store in this map. The node will later be\n   *   accessible using the value of its <code>nodeName</code> attribute.\n   *\n   * @return If the new <code>Node</code> replaces an existing node the\n   *   replaced <code>Node</code> is returned, otherwise <code>null</code>\n   *   is returned.\n   * @exception DOMException\n   *   WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a\n   *   different document than the one that created this map.\n   *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n   *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an\n   *   <code>Attr</code> that is already an attribute of another\n   *   <code>Element</code> object. The DOM user must explicitly clone\n   *   <code>Attr</code> nodes to re-use them in other elements.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItem(String name)",
    "returnType" : "Node",
    "comment" : "\n   * Removes a node specified by name. When this map contains the attributes\n   * attached to an element, if the removed attribute is known to have a\n   * default value, an attribute immediately appears containing the\n   * default value as well as the corresponding namespace URI, local name,\n   * and prefix when applicable.\n   * @param name The <code>nodeName</code> of the node to remove.\n   *\n   * @return The node removed from this map if a node with such a name\n   *   exists.\n   * @exception DOMException\n   *   NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in\n   *   this map.\n   *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node getNamedItemNS(String namespaceURI, String localName)",
    "returnType" : "Node",
    "comment" : "\n   * Retrieves a node specified by local name and namespace URI. HTML-only\n   * DOM implementations do not need to implement this method.\n   * @param namespaceURI The namespace URI of the node to retrieve.\n   * @param localName The local name of the node to retrieve.\n   *\n   * @return A <code>Node</code> (of any type) with the specified local\n   *   name and namespace URI, or <code>null</code> if they do not\n   *   identify any node in this map.\n   * @since DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node setNamedItemNS(Node arg) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Adds a node using its <code>namespaceURI</code> and\n   * <code>localName</code>. If a node with that namespace URI and that\n   * local name is already present in this map, it is replaced by the new\n   * one.\n   * <br>HTML-only DOM implementations do not need to implement this method.\n   * @param arg A node to store in this map. The node will later be\n   *   accessible using the value of its <code>namespaceURI</code> and\n   *   <code>localName</code> attributes.\n   *\n   * @return If the new <code>Node</code> replaces an existing node the\n   *   replaced <code>Node</code> is returned, otherwise <code>null</code>\n   *   is returned.\n   * @exception DOMException\n   *   WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a\n   *   different document than the one that created this map.\n   *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n   *   <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an\n   *   <code>Attr</code> that is already an attribute of another\n   *   <code>Element</code> object. The DOM user must explicitly clone\n   *   <code>Attr</code> nodes to re-use them in other elements.\n   * @since DOM Level 2\n   ",
    "links" : [ ]
  }, {
    "name" : "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException",
    "returnType" : "Node",
    "comment" : "\n   * Removes a node specified by local name and namespace URI. A removed\n   * attribute may be known to have a default value when this map contains\n   * the attributes attached to an element, as returned by the attributes\n   * attribute of the <code>Node</code> interface. If so, an attribute\n   * immediately appears containing the default value as well as the\n   * corresponding namespace URI, local name, and prefix when applicable.\n   * <br>HTML-only DOM implementations do not need to implement this method.\n   * \n   * @param namespaceURI The namespace URI of the node to remove.\n   * @param localName The local name of the node to remove.\n   *\n   * @return The node removed from this map if a node with such a local\n   *   name and namespace URI exists.\n   * @exception DOMException\n   *   NOT_FOUND_ERR: Raised if there is no node with the specified\n   *   <code>namespaceURI</code> and <code>localName</code> in this map.\n   *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.\n   * @since DOM Level 2\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getLength()", "public Node getNamedItem(String name)", "public Node item(int i)", "public Node setNamedItem(Node newNode)", "public Node removeNamedItem(String name)", "public Node getNamedItemNS(String namespaceURI, String localName)", "public Node setNamedItemNS(Node arg) throws DOMException", "public Node removeNamedItemNS(String namespaceURI, String localName) throws DOMException" ],
  "variableNames" : [ "dtm", "element", "m_count" ]
}