{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/DrawableContainer.java",
  "packageName" : "android.graphics.drawable",
  "className" : "DrawableContainer",
  "comment" : "\n * A helper class that contains several {@link Drawable}s and selects which one to use.\n *\n * You can subclass it to create your own DrawableContainers or directly use one its child classes.\n ",
  "links" : [ "android.graphics.drawable.Drawable" ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DITHER",
    "type" : "boolean",
    "comment" : "\n     * To be proper, we should have a getter for dither (and alpha, etc.)\n     * so that proxy classes like this can save/restore their delegates'\n     * values, but we don't have getters. Since we do have setters\n     * (e.g. setDither), which this proxy forwards on, we have to have some\n     * default/initial setting.\n     *\n     * The initial setting for dither is now true, since it almost always seems\n     * to improve the quality at negligible cost.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDrawableContainerState",
    "type" : "DrawableContainerState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotspotBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastDrawable",
    "type" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpha",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasAlpha",
    "type" : "boolean",
    "comment" : " Whether setAlpha() has been called at least once. ",
    "links" : [ ]
  }, {
    "name" : "mCurIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationRunnable",
    "type" : "Runnable",
    "comment" : " Animations.",
    "links" : [ ]
  }, {
    "name" : "mEnterAnimationEnd",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitAnimationEnd",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockInvalidateCallback",
    "type" : "BlockInvalidateCallback",
    "comment" : " Callback that blocks invalidation. Used for drawable initialization. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean needsMirroring()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getPadding(Rect padding)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets getOpticalInsets()",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDither(boolean dither)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEnterFadeDuration(int ms)",
    "returnType" : "void",
    "comment" : "\n     * Change the global fade duration when a new drawable is entering\n     * the scene.\n     *\n     * @param ms The amount of time to fade in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setExitFadeDuration(int ms)",
    "returnType" : "void",
    "comment" : "\n     * Change the global fade duration when a new drawable is leaving\n     * the scene.\n     *\n     * @param ms The amount of time to fade in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onBoundsChange(Rect bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void jumpToCurrentState()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspot(float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setHotspotBounds(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getHotspotBounds(Rect outRect)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] state)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onLevelChange(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void invalidateDrawable(@NonNull Drawable who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentIndex(int index)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentIndex()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean selectDrawable(int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the currently displayed drawable by index.\n     * <p>\n     * If an invalid index is specified, the current drawable will be set to\n     * {@code null} and the index will be set to {@code -1}.\n     *\n     * @param index the index of the drawable to display\n     * @return {@code true} if the drawable changed, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializeDrawableForDisplay(Drawable d)",
    "returnType" : "void",
    "comment" : "\n     * Initializes a drawable for display in this container.\n     *\n     * @param d The drawable to initialize.\n     ",
    "links" : [ ]
  }, {
    "name" : " void animate(boolean schedule)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getCurrent()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final void updateDensity(Resources res)",
    "returnType" : "void",
    "comment" : "\n     * Updates the source density based on the resources used to inflate\n     * density-dependent values. Implementing classes should call this method\n     * during inflation.\n     *\n     * @param res the resources used to inflate density-dependent values\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme theme)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " DrawableContainerState cloneConstantState()",
    "returnType" : "DrawableContainerState",
    "comment" : "\n     * Returns a shallow copy of the container's constant state to be used as\n     * the base state for {@link #mutate()}.\n     *\n     * @return a shallow copy of the constant state\n     ",
    "links" : [ "#mutate()" ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setConstantState(DrawableContainerState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void draw(Canvas canvas)", "public int getChangingConfigurations()", "private boolean needsMirroring()", "public boolean getPadding(Rect padding)", "public Insets getOpticalInsets()", "public void getOutline(@NonNull Outline outline)", "public void setAlpha(int alpha)", "public int getAlpha()", "public void setDither(boolean dither)", "public void setColorFilter(ColorFilter colorFilter)", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "public void setEnterFadeDuration(int ms)", "public void setExitFadeDuration(int ms)", "protected void onBoundsChange(Rect bounds)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public void setAutoMirrored(boolean mirrored)", "public boolean isAutoMirrored()", "public void jumpToCurrentState()", "public void setHotspot(float x, float y)", "public void setHotspotBounds(int left, int top, int right, int bottom)", "public void getHotspotBounds(Rect outRect)", "protected boolean onStateChange(int[] state)", "protected boolean onLevelChange(int level)", "public boolean onLayoutDirectionChanged(@View.ResolvedLayoutDir int layoutDirection)", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public int getMinimumWidth()", "public int getMinimumHeight()", "public void invalidateDrawable(@NonNull Drawable who)", "public void scheduleDrawable(@NonNull Drawable who, @NonNull Runnable what, long when)", "public void unscheduleDrawable(@NonNull Drawable who, @NonNull Runnable what)", "public boolean setVisible(boolean visible, boolean restart)", "public int getOpacity()", "public void setCurrentIndex(int index)", "public int getCurrentIndex()", "public boolean selectDrawable(int index)", "private void initializeDrawableForDisplay(Drawable d)", " void animate(boolean schedule)", "public Drawable getCurrent()", "protected final void updateDensity(Resources res)", "public void applyTheme(Theme theme)", "public boolean canApplyTheme()", "public ConstantState getConstantState()", "public Drawable mutate()", " DrawableContainerState cloneConstantState()", "public void clearMutated()", "protected void setConstantState(DrawableContainerState state)" ],
  "variableNames" : [ "DEBUG", "TAG", "DEFAULT_DITHER", "mDrawableContainerState", "mHotspotBounds", "mCurrDrawable", "mLastDrawable", "mAlpha", "mHasAlpha", "mCurIndex", "mLastIndex", "mMutated", "mAnimationRunnable", "mEnterAnimationEnd", "mExitAnimationEnd", "mBlockInvalidateCallback" ]
}