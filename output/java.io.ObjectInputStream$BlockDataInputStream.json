{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ObjectInputStream.java",
  "packageName" : "java.io",
  "className" : "BlockDataInputStream",
  "comment" : "\n     * Input stream with two modes: in default mode, inputs data written in the\n     * same format as DataOutputStream; in \"block data\" mode, inputs data\n     * bracketed by block data markers (see object serialization specification\n     * for details).  Buffering depends on block data mode: when in default\n     * mode, no data is buffered in advance; when in block data mode, all data\n     * for the current data block is read in at once (and buffered).\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "MAX_BLOCK_SIZE",
    "type" : "int",
    "comment" : " maximum data block length ",
    "links" : [ ]
  }, {
    "name" : "MAX_HEADER_SIZE",
    "type" : "int",
    "comment" : " maximum data block header length ",
    "links" : [ ]
  }, {
    "name" : "CHAR_BUF_SIZE",
    "type" : "int",
    "comment" : " (tunable) length of char buffer (for reading strings) ",
    "links" : [ ]
  }, {
    "name" : "HEADER_BLOCKED",
    "type" : "int",
    "comment" : " readBlockHeader() return value indicating header read may block ",
    "links" : [ ]
  }, {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : " buffer for reading general/block data ",
    "links" : [ ]
  }, {
    "name" : "hbuf",
    "type" : "byte[]",
    "comment" : " buffer for reading block data headers ",
    "links" : [ ]
  }, {
    "name" : "cbuf",
    "type" : "char[]",
    "comment" : " char buffer for fast string reads ",
    "links" : [ ]
  }, {
    "name" : "blkmode",
    "type" : "boolean",
    "comment" : " block data mode ",
    "links" : [ ]
  }, {
    "name" : "pos",
    "type" : "int",
    "comment" : " current offset into buf ",
    "links" : [ ]
  }, {
    "name" : "end",
    "type" : "int",
    "comment" : " end offset of valid data in buf, or -1 if no more block data ",
    "links" : [ ]
  }, {
    "name" : "unread",
    "type" : "int",
    "comment" : " number of bytes in current block yet to be read from stream ",
    "links" : [ ]
  }, {
    "name" : "in",
    "type" : "PeekInputStream",
    "comment" : " underlying stream (wrapped in peekable filter stream) ",
    "links" : [ ]
  }, {
    "name" : "din",
    "type" : "DataInputStream",
    "comment" : " loopback stream (for data reads that span data blocks) ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean setBlockDataMode(boolean newmode) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n         * Sets block data mode to the given mode (true == on, false == off)\n         * and returns the previous mode value.  If the new mode is the same as\n         * the old mode, no action is taken.  Throws IllegalStateException if\n         * block data mode is being switched from on to off while unconsumed\n         * block data is still present in the stream.\n         ",
    "links" : [ ]
  }, {
    "name" : " boolean getBlockDataMode()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the stream is currently in block data mode, false\n         * otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : " void skipBlockData() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * If in block data mode, skips to the end of the current group of data\n         * blocks (but does not unset block data mode).  If not in block data\n         * mode, throws an IllegalStateException.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int readBlockHeader(boolean canBlock) throws IOException",
    "returnType" : "int",
    "comment" : "\n         * Attempts to read in the next block data header (if any).  If\n         * canBlock is false and a full header cannot be read without possibly\n         * blocking, returns HEADER_BLOCKED, else if the next element in the\n         * stream is a block data header, returns the block data length\n         * specified by the header, else returns -1.\n         ",
    "links" : [ ]
  }, {
    "name" : "private void refill() throws IOException",
    "returnType" : "void",
    "comment" : "\n         * Refills internal buffer buf with block data.  Any data in buf at the\n         * time of the call is considered consumed.  Sets the pos, end, and\n         * unread fields to reflect the new amount of available block data; if\n         * the next element in the stream is not a data block, sets pos and\n         * unread to 0 and end to -1.\n         ",
    "links" : [ ]
  }, {
    "name" : " int currentBlockRemaining()",
    "returnType" : "int",
    "comment" : "\n         * If in block data mode, returns the number of unconsumed bytes\n         * remaining in the current data block.  If not in block data mode,\n         * throws an IllegalStateException.\n         ",
    "links" : [ ]
  }, {
    "name" : " int peek() throws IOException",
    "returnType" : "int",
    "comment" : "\n         * Peeks at (but does not consume) and returns the next byte value in\n         * the stream, or -1 if the end of the stream/block data (if in block\n         * data mode) has been reached.\n         ",
    "links" : [ ]
  }, {
    "name" : " byte peekByte() throws IOException",
    "returnType" : "byte",
    "comment" : "\n         * Peeks at (but does not consume) and returns the next byte value in\n         * the stream, or throws EOFException if end of stream/block data has\n         * been reached.\n         ",
    "links" : [ ]
  }, {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long skip(long len) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int read(byte[] b, int off, int len, boolean copy) throws IOException",
    "returnType" : "int",
    "comment" : "\n         * Attempts to read len bytes into byte array b at offset off.  Returns\n         * the number of bytes read, or -1 if the end of stream/block data has\n         * been reached.  If copy is true, reads values into an intermediate\n         * buffer before copying them to b (to avoid exposing a reference to\n         * b).\n         ",
    "links" : [ ]
  }, {
    "name" : "public void readFully(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFully(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void readFully(byte[] b, int off, int len, boolean copy) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int skipBytes(int n) throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean readBoolean() throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte readByte() throws IOException",
    "returnType" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int readUnsignedByte() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char readChar() throws IOException",
    "returnType" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public short readShort() throws IOException",
    "returnType" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int readUnsignedShort() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int readInt() throws IOException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float readFloat() throws IOException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long readLong() throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public double readDouble() throws IOException",
    "returnType" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String readUTF() throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String readLine() throws IOException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readBooleans(boolean[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readChars(char[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readShorts(short[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readInts(int[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readFloats(float[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readLongs(long[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void readDoubles(double[] v, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " String readLongUTF() throws IOException",
    "returnType" : "String",
    "comment" : "\n         * Reads in string written in \"long\" UTF format.  \"Long\" UTF format is\n         * identical to standard UTF, except that it uses an 8 byte header\n         * (instead of the standard 2 bytes) to convey the UTF encoding length.\n         ",
    "links" : [ ]
  }, {
    "name" : "private String readUTFBody(long utflen) throws IOException",
    "returnType" : "String",
    "comment" : "\n         * Reads in the \"body\" (i.e., the UTF representation minus the 2-byte\n         * or 8-byte length header) of a UTF encoding, which occupies the next\n         * utflen bytes.\n         ",
    "links" : [ ]
  }, {
    "name" : "private long readUTFSpan(StringBuilder sbuf, long utflen) throws IOException",
    "returnType" : "long",
    "comment" : "\n         * Reads span of UTF-encoded characters out of internal buffer\n         * (starting at offset pos and ending at or before offset end),\n         * consuming no more than utflen bytes.  Appends read characters to\n         * sbuf.  Returns the number of bytes consumed.\n         ",
    "links" : [ ]
  }, {
    "name" : "private int readUTFChar(StringBuilder sbuf, long utflen) throws IOException",
    "returnType" : "int",
    "comment" : "\n         * Reads in single UTF-encoded character one byte at a time, appends\n         * the character to sbuf, and returns the number of bytes consumed.\n         * This method is used when reading in UTF strings written in block\n         * data mode to handle UTF-encoded characters which (potentially)\n         * straddle block-data boundaries.\n         ",
    "links" : [ ]
  }, {
    "name" : " long getBytesRead()",
    "returnType" : "long",
    "comment" : "\n         * Returns the number of bytes read from the input stream.\n         * @return the number of bytes read from the input stream\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean setBlockDataMode(boolean newmode) throws IOException", " boolean getBlockDataMode()", " void skipBlockData() throws IOException", "private int readBlockHeader(boolean canBlock) throws IOException", "private void refill() throws IOException", " int currentBlockRemaining()", " int peek() throws IOException", " byte peekByte() throws IOException", "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long len) throws IOException", "public int available() throws IOException", "public void close() throws IOException", " int read(byte[] b, int off, int len, boolean copy) throws IOException", "public void readFully(byte[] b) throws IOException", "public void readFully(byte[] b, int off, int len) throws IOException", "public void readFully(byte[] b, int off, int len, boolean copy) throws IOException", "public int skipBytes(int n) throws IOException", "public boolean readBoolean() throws IOException", "public byte readByte() throws IOException", "public int readUnsignedByte() throws IOException", "public char readChar() throws IOException", "public short readShort() throws IOException", "public int readUnsignedShort() throws IOException", "public int readInt() throws IOException", "public float readFloat() throws IOException", "public long readLong() throws IOException", "public double readDouble() throws IOException", "public String readUTF() throws IOException", "public String readLine() throws IOException", " void readBooleans(boolean[] v, int off, int len) throws IOException", " void readChars(char[] v, int off, int len) throws IOException", " void readShorts(short[] v, int off, int len) throws IOException", " void readInts(int[] v, int off, int len) throws IOException", " void readFloats(float[] v, int off, int len) throws IOException", " void readLongs(long[] v, int off, int len) throws IOException", " void readDoubles(double[] v, int off, int len) throws IOException", " String readLongUTF() throws IOException", "private String readUTFBody(long utflen) throws IOException", "private long readUTFSpan(StringBuilder sbuf, long utflen) throws IOException", "private int readUTFChar(StringBuilder sbuf, long utflen) throws IOException", " long getBytesRead()" ],
  "variableNames" : [ "MAX_BLOCK_SIZE", "MAX_HEADER_SIZE", "CHAR_BUF_SIZE", "HEADER_BLOCKED", "buf", "hbuf", "cbuf", "blkmode", "pos", "end", "unread", "in", "din" ]
}