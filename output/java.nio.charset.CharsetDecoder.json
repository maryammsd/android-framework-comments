{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/charset/CharsetDecoder.java",
  "packageName" : "java.nio.charset",
  "className" : "CharsetDecoder",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "charset",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "averageCharsPerByte",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxCharsPerByte",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "replacement",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "malformedInputAction",
    "type" : "CodingErrorAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "unmappableCharacterAction",
    "type" : "CodingErrorAction",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_RESET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_CODING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_END",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ST_FLUSHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "state",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "stateNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Charset charset()",
    "returnType" : "Charset",
    "comment" : "\n     * Returns the charset that created this decoder.\n     *\n     * @return  This decoder's charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String replacement()",
    "returnType" : "String",
    "comment" : "\n     * Returns this decoder's replacement value.\n     *\n     * @return  This decoder's current replacement,\n     *          which is never {@code null} and is never empty\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetDecoder replaceWith(String newReplacement)",
    "returnType" : "CharsetDecoder",
    "comment" : "\n     * Changes this decoder's replacement value.\n     *\n     * <p> This method invokes the {@link #implReplaceWith implReplaceWith}\n     * method, passing the new replacement, after checking that the new\n     * replacement is acceptable.  </p>\n     *\n     * @param  newReplacement  The new replacement; must not be\n     *         {@code null}, must have non-zero length,\n\n     *         and must not be longer than the value returned by the\n     *         {@link #maxCharsPerByte() maxCharsPerByte} method\n\n\n\n\n\n\n     *\n     * @return  This decoder\n     *\n     * @throws  IllegalArgumentException\n     *          If the preconditions on the parameter do not hold\n     ",
    "links" : [ "#maxCharsPerByte()", "#implReplaceWith" ]
  }, {
    "name" : "protected void implReplaceWith(String newReplacement)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this decoder's replacement value.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by decoders that require notification of changes to\n     * the replacement.  </p>\n     *\n     * @param  newReplacement    The replacement value\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodingErrorAction malformedInputAction()",
    "returnType" : "CodingErrorAction",
    "comment" : "\n     * Returns this decoder's current action for malformed-input errors.\n     *\n     * @return The current malformed-input action, which is never {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetDecoder onMalformedInput(CodingErrorAction newAction)",
    "returnType" : "CharsetDecoder",
    "comment" : "\n     * Changes this decoder's action for malformed-input errors.\n     *\n     * <p> This method invokes the {@link #implOnMalformedInput\n     * implOnMalformedInput} method, passing the new action.  </p>\n     *\n     * @param  newAction  The new action; must not be {@code null}\n     *\n     * @return  This decoder\n     *\n     * @throws IllegalArgumentException\n     *         If the precondition on the parameter does not hold\n     ",
    "links" : [ "#implOnMalformedInputimplOnMalformedInput" ]
  }, {
    "name" : "protected void implOnMalformedInput(CodingErrorAction newAction)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this decoder's malformed-input action.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by decoders that require notification of changes to\n     * the malformed-input action.  </p>\n     *\n     * @param  newAction  The new action\n     ",
    "links" : [ ]
  }, {
    "name" : "public CodingErrorAction unmappableCharacterAction()",
    "returnType" : "CodingErrorAction",
    "comment" : "\n     * Returns this decoder's current action for unmappable-character errors.\n     *\n     * @return The current unmappable-character action, which is never\n     *         {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharsetDecoder onUnmappableCharacter(CodingErrorAction newAction)",
    "returnType" : "CharsetDecoder",
    "comment" : "\n     * Changes this decoder's action for unmappable-character errors.\n     *\n     * <p> This method invokes the {@link #implOnUnmappableCharacter\n     * implOnUnmappableCharacter} method, passing the new action.  </p>\n     *\n     * @param  newAction  The new action; must not be {@code null}\n     *\n     * @return  This decoder\n     *\n     * @throws IllegalArgumentException\n     *         If the precondition on the parameter does not hold\n     ",
    "links" : [ "#implOnUnmappableCharacterimplOnUnmappableCharacter" ]
  }, {
    "name" : "protected void implOnUnmappableCharacter(CodingErrorAction newAction)",
    "returnType" : "void",
    "comment" : "\n     * Reports a change to this decoder's unmappable-character action.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by decoders that require notification of changes to\n     * the unmappable-character action.  </p>\n     *\n     * @param  newAction  The new action\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float averageCharsPerByte()",
    "returnType" : "float",
    "comment" : "\n     * Returns the average number of characters that will be produced for each\n     * byte of input.  This heuristic value may be used to estimate the size\n     * of the output buffer required for a given input sequence.\n     *\n     * @return  The average number of characters produced\n     *          per byte of input\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float maxCharsPerByte()",
    "returnType" : "float",
    "comment" : "\n     * Returns the maximum number of characters that will be produced for each\n     * byte of input.  This value may be used to compute the worst-case size\n     * of the output buffer required for a given input sequence. This value\n     * accounts for any necessary content-independent prefix or suffix\n\n\n\n\n     * characters.\n\n     *\n     * @return  The maximum number of characters that will be produced per\n     *          byte of input\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CoderResult decode(ByteBuffer in, CharBuffer out, boolean endOfInput)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Decodes as many bytes as possible from the given input buffer,\n     * writing the results to the given output buffer.\n     *\n     * <p> The buffers are read from, and written to, starting at their current\n     * positions.  At most {@link Buffer#remaining in.remaining()} bytes\n     * will be read and at most {@link Buffer#remaining out.remaining()}\n     * characters will be written.  The buffers' positions will be advanced to\n     * reflect the bytes read and the characters written, but their marks and\n     * limits will not be modified.\n     *\n     * <p> In addition to reading bytes from the input buffer and writing\n     * characters to the output buffer, this method returns a {@link CoderResult}\n     * object to describe its reason for termination:\n     *\n     * <ul>\n     *\n     *   <li><p> {@link CoderResult#UNDERFLOW} indicates that as much of the\n     *   input buffer as possible has been decoded.  If there is no further\n     *   input then the invoker can proceed to the next step of the\n     *   <a href=\"#steps\">decoding operation</a>.  Otherwise this method\n     *   should be invoked again with further input.  </p></li>\n     *\n     *   <li><p> {@link CoderResult#OVERFLOW} indicates that there is\n     *   insufficient space in the output buffer to decode any more bytes.\n     *   This method should be invoked again with an output buffer that has\n     *   more {@linkplain Buffer#remaining remaining} characters. This is\n     *   typically done by draining any decoded characters from the output\n     *   buffer.  </p></li>\n     *\n     *   <li><p> A {@linkplain CoderResult#malformedForLength\n     *   malformed-input} result indicates that a malformed-input\n     *   error has been detected.  The malformed bytes begin at the input\n     *   buffer's (possibly incremented) position; the number of malformed\n     *   bytes may be determined by invoking the result object's {@link\n     *   CoderResult#length() length} method.  This case applies only if the\n     *   {@linkplain #onMalformedInput malformed action} of this decoder\n     *   is {@link CodingErrorAction#REPORT}; otherwise the malformed input\n     *   will be ignored or replaced, as requested.  </p></li>\n     *\n     *   <li><p> An {@linkplain CoderResult#unmappableForLength\n     *   unmappable-character} result indicates that an\n     *   unmappable-character error has been detected.  The bytes that\n     *   decode the unmappable character begin at the input buffer's (possibly\n     *   incremented) position; the number of such bytes may be determined\n     *   by invoking the result object's {@link CoderResult#length() length}\n     *   method.  This case applies only if the {@linkplain #onUnmappableCharacter\n     *   unmappable action} of this decoder is {@link\n     *   CodingErrorAction#REPORT}; otherwise the unmappable character will be\n     *   ignored or replaced, as requested.  </p></li>\n     *\n     * </ul>\n     *\n     * In any case, if this method is to be reinvoked in the same decoding\n     * operation then care should be taken to preserve any bytes remaining\n     * in the input buffer so that they are available to the next invocation.\n     *\n     * <p> The {@code endOfInput} parameter advises this method as to whether\n     * the invoker can provide further input beyond that contained in the given\n     * input buffer.  If there is a possibility of providing additional input\n     * then the invoker should pass {@code false} for this parameter; if there\n     * is no possibility of providing further input then the invoker should\n     * pass {@code true}.  It is not erroneous, and in fact it is quite\n     * common, to pass {@code false} in one invocation and later discover that\n     * no further input was actually available.  It is critical, however, that\n     * the final invocation of this method in a sequence of invocations always\n     * pass {@code true} so that any remaining undecoded input will be treated\n     * as being malformed.\n     *\n     * <p> This method works by invoking the {@link #decodeLoop decodeLoop}\n     * method, interpreting its results, handling error conditions, and\n     * reinvoking it as necessary.  </p>\n     *\n     *\n     * @param  in\n     *         The input byte buffer\n     *\n     * @param  out\n     *         The output character buffer\n     *\n     * @param  endOfInput\n     *         {@code true} if, and only if, the invoker can provide no\n     *         additional input bytes beyond those in the given buffer\n     *\n     * @return  A coder-result object describing the reason for termination\n     *\n     * @throws  IllegalStateException\n     *          If a decoding operation is already in progress and the previous\n     *          step was an invocation neither of the {@link #reset reset}\n     *          method, nor of this method with a value of {@code false} for\n     *          the {@code endOfInput} parameter, nor of this method with a\n     *          value of {@code true} for the {@code endOfInput} parameter\n     *          but a return value indicating an incomplete decoding operation\n     *\n     * @throws  CoderMalfunctionError\n     *          If an invocation of the decodeLoop method threw\n     *          an unexpected exception\n     *\n     * @throws  NullPointerException if input or output buffer is null\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "#decodeLoop", "java.nio.charset.CoderResult", "#reset", "java.nio.charset.CodingErrorAction#REPORT", "java.nio.charset.CoderResult#UNDERFLOW", "java.nio.Buffer#remaining", "java.nio.charset.CoderResult#length()" ]
  }, {
    "name" : "public final CoderResult flush(CharBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Flushes this decoder.\n     *\n     * <p> Some decoders maintain internal state and may need to write some\n     * final characters to the output buffer once the overall input sequence has\n     * been read.\n     *\n     * <p> Any additional output is written to the output buffer beginning at\n     * its current position.  At most {@link Buffer#remaining out.remaining()}\n     * characters will be written.  The buffer's position will be advanced\n     * appropriately, but its mark and limit will not be modified.\n     *\n     * <p> If this method completes successfully then it returns {@link\n     * CoderResult#UNDERFLOW}.  If there is insufficient room in the output\n     * buffer then it returns {@link CoderResult#OVERFLOW}.  If this happens\n     * then this method must be invoked again, with an output buffer that has\n     * more room, in order to complete the current <a href=\"#steps\">decoding\n     * operation</a>.\n     *\n     * <p> If this decoder has already been flushed then invoking this method\n     * has no effect.\n     *\n     * <p> This method invokes the {@link #implFlush implFlush} method to\n     * perform the actual flushing operation.  </p>\n     *\n     * @param  out\n     *         The output character buffer\n     *\n     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or\n     *          {@link CoderResult#OVERFLOW}\n     *\n     * @throws  IllegalStateException\n     *          If the previous step of the current decoding operation was an\n     *          invocation neither of the {@link #flush flush} method nor of\n     *          the three-argument {@link\n     *          #decode(ByteBuffer,CharBuffer,boolean) decode} method\n     *          with a value of {@code true} for the {@code endOfInput}\n     *          parameter\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "#flush", "java.nio.charset.CoderResult#UNDERFLOW", "#decode(ByteBuffer", "java.nio.Buffer#remaining", "#implFlush" ]
  }, {
    "name" : "protected CoderResult implFlush(CharBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Flushes this decoder.\n     *\n     * <p> The default implementation of this method does nothing, and always\n     * returns {@link CoderResult#UNDERFLOW}.  This method should be overridden\n     * by decoders that may need to write final characters to the output buffer\n     * once the entire input sequence has been read. </p>\n     *\n     * @param  out\n     *         The output character buffer\n     *\n     * @return  A coder-result object, either {@link CoderResult#UNDERFLOW} or\n     *          {@link CoderResult#OVERFLOW}\n     ",
    "links" : [ "java.nio.charset.CoderResult#OVERFLOW", "java.nio.charset.CoderResult#UNDERFLOW" ]
  }, {
    "name" : "public final CharsetDecoder reset()",
    "returnType" : "CharsetDecoder",
    "comment" : "\n     * Resets this decoder, clearing any internal state.\n     *\n     * <p> This method resets charset-independent state and also invokes the\n     * {@link #implReset() implReset} method in order to perform any\n     * charset-specific reset actions.  </p>\n     *\n     * @return  This decoder\n     *\n     ",
    "links" : [ "#implReset()" ]
  }, {
    "name" : "protected void implReset()",
    "returnType" : "void",
    "comment" : "\n     * Resets this decoder, clearing any charset-specific internal state.\n     *\n     * <p> The default implementation of this method does nothing.  This method\n     * should be overridden by decoders that maintain internal state.  </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract CoderResult decodeLoop(ByteBuffer in, CharBuffer out)",
    "returnType" : "CoderResult",
    "comment" : "\n     * Decodes one or more bytes into one or more characters.\n     *\n     * <p> This method encapsulates the basic decoding loop, decoding as many\n     * bytes as possible until it either runs out of input, runs out of room\n     * in the output buffer, or encounters a decoding error.  This method is\n     * invoked by the {@link #decode decode} method, which handles result\n     * interpretation and error recovery.\n     *\n     * <p> The buffers are read from, and written to, starting at their current\n     * positions.  At most {@link Buffer#remaining in.remaining()} bytes\n     * will be read, and at most {@link Buffer#remaining out.remaining()}\n     * characters will be written.  The buffers' positions will be advanced to\n     * reflect the bytes read and the characters written, but their marks and\n     * limits will not be modified.\n     *\n     * <p> This method returns a {@link CoderResult} object to describe its\n     * reason for termination, in the same manner as the {@link #decode decode}\n     * method.  Most implementations of this method will handle decoding errors\n     * by returning an appropriate result object for interpretation by the\n     * {@link #decode decode} method.  An optimized implementation may instead\n     * examine the relevant error action and implement that action itself.\n     *\n     * <p> An implementation of this method may perform arbitrary lookahead by\n     * returning {@link CoderResult#UNDERFLOW} until it receives sufficient\n     * input.  </p>\n     *\n     * @param  in\n     *         The input byte buffer\n     *\n     * @param  out\n     *         The output character buffer\n     *\n     * @return  A coder-result object describing the reason for termination\n     ",
    "links" : [ "java.nio.charset.CoderResult", "java.nio.charset.CoderResult#UNDERFLOW", "java.nio.Buffer#remaining", "#decode" ]
  }, {
    "name" : "public final CharBuffer decode(ByteBuffer in) throws CharacterCodingException",
    "returnType" : "CharBuffer",
    "comment" : "\n     * Convenience method that decodes the remaining content of a single input\n     * byte buffer into a newly-allocated character buffer.\n     *\n     * <p> This method implements an entire <a href=\"#steps\">decoding\n     * operation</a>; that is, it resets this decoder, then it decodes the\n     * bytes in the given byte buffer, and finally it flushes this\n     * decoder.  This method should therefore not be invoked if a decoding\n     * operation is already in progress.  </p>\n     *\n     * @param  in\n     *         The input byte buffer\n     *\n     * @return A newly-allocated character buffer containing the result of the\n     *         decoding operation.  The buffer's position will be zero and its\n     *         limit will follow the last character written.\n     *\n     * @throws  IllegalStateException\n     *          If a decoding operation is already in progress\n     *\n     * @throws  MalformedInputException\n     *          If the byte sequence starting at the input buffer's current\n     *          position is not legal for this charset and the current malformed-input action\n     *          is {@link CodingErrorAction#REPORT}\n     *\n     * @throws  UnmappableCharacterException\n     *          If the byte sequence starting at the input buffer's current\n     *          position cannot be mapped to an equivalent character sequence and\n     *          the current unmappable-character action is {@link\n     *          CodingErrorAction#REPORT}\n     *\n     * @throws  CoderMalfunctionError\n     *          If an invocation of the decodeLoop method threw\n     *          an unexpected exception\n     *\n     * @throws  NullPointerException if input buffer is null\n     ",
    "links" : [ "java.nio.charset.CodingErrorAction#REPORT" ]
  }, {
    "name" : "public boolean isAutoDetecting()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this decoder implements an auto-detecting charset.\n     *\n     * <p> The default implementation of this method always returns\n     * {@code false}; it should be overridden by auto-detecting decoders to\n     * return {@code true}.  </p>\n     *\n     * @return  {@code true} if, and only if, this decoder implements an\n     *          auto-detecting charset\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCharsetDetected()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this decoder has yet detected a\n     * charset&nbsp;&nbsp;<i>(optional operation)</i>.\n     *\n     * <p> If this decoder implements an auto-detecting charset then at a\n     * single point during a decoding operation this method may start returning\n     * {@code true} to indicate that a specific charset has been detected in\n     * the input byte sequence.  Once this occurs, the {@link #detectedCharset\n     * detectedCharset} method may be invoked to retrieve the detected charset.\n     *\n     * <p> That this method returns {@code false} does not imply that no bytes\n     * have yet been decoded.  Some auto-detecting decoders are capable of\n     * decoding some, or even all, of an input byte sequence without fixing on\n     * a particular charset.\n     *\n     * <p> The default implementation of this method always throws an {@link\n     * UnsupportedOperationException}; it should be overridden by\n     * auto-detecting decoders to return {@code true} once the input charset\n     * has been determined.  </p>\n     *\n     * @return  {@code true} if, and only if, this decoder has detected a\n     *          specific charset\n     *\n     * @throws  UnsupportedOperationException\n     *          If this decoder does not implement an auto-detecting charset\n     ",
    "links" : [ "#detectedCharsetdetectedCharset", "UnsupportedOperationException" ]
  }, {
    "name" : "public Charset detectedCharset()",
    "returnType" : "Charset",
    "comment" : "\n     * Retrieves the charset that was detected by this\n     * decoder&nbsp;&nbsp;<i>(optional operation)</i>.\n     *\n     * <p> If this decoder implements an auto-detecting charset then this\n     * method returns the actual charset once it has been detected.  After that\n     * point, this method returns the same value for the duration of the\n     * current decoding operation.  If not enough input bytes have yet been\n     * read to determine the actual charset then this method throws an {@link\n     * IllegalStateException}.\n     *\n     * <p> The default implementation of this method always throws an {@link\n     * UnsupportedOperationException}; it should be overridden by\n     * auto-detecting decoders to return the appropriate value.  </p>\n     *\n     * @return  The charset detected by this auto-detecting decoder,\n     *          or {@code null} if the charset has not yet been determined\n     *\n     * @throws  IllegalStateException\n     *          If insufficient bytes have been read to determine a charset\n     *\n     * @throws  UnsupportedOperationException\n     *          If this decoder does not implement an auto-detecting charset\n     ",
    "links" : [ "IllegalStateException", "UnsupportedOperationException" ]
  }, {
    "name" : "private void throwIllegalStateException(int from, int to)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final Charset charset()", "public final String replacement()", "public final CharsetDecoder replaceWith(String newReplacement)", "protected void implReplaceWith(String newReplacement)", "public CodingErrorAction malformedInputAction()", "public final CharsetDecoder onMalformedInput(CodingErrorAction newAction)", "protected void implOnMalformedInput(CodingErrorAction newAction)", "public CodingErrorAction unmappableCharacterAction()", "public final CharsetDecoder onUnmappableCharacter(CodingErrorAction newAction)", "protected void implOnUnmappableCharacter(CodingErrorAction newAction)", "public final float averageCharsPerByte()", "public final float maxCharsPerByte()", "public final CoderResult decode(ByteBuffer in, CharBuffer out, boolean endOfInput)", "public final CoderResult flush(CharBuffer out)", "protected CoderResult implFlush(CharBuffer out)", "public final CharsetDecoder reset()", "protected void implReset()", "protected abstract CoderResult decodeLoop(ByteBuffer in, CharBuffer out)", "public final CharBuffer decode(ByteBuffer in) throws CharacterCodingException", "public boolean isAutoDetecting()", "public boolean isCharsetDetected()", "public Charset detectedCharset()", "private void throwIllegalStateException(int from, int to)" ],
  "variableNames" : [ "charset", "averageCharsPerByte", "maxCharsPerByte", "replacement", "malformedInputAction", "unmappableCharacterAction", "ST_RESET", "ST_CODING", "ST_END", "ST_FLUSHED", "state", "stateNames" ]
}