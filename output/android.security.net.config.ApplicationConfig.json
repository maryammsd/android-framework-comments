{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/net/config/ApplicationConfig.java",
  "packageName" : "android.security.net.config",
  "className" : "ApplicationConfig",
  "comment" : "\n * An application's network security configuration.\n *\n * <p>{@link #getConfigForHostname(String)} provides a means to obtain network security\n * configuration to be used for communicating with a specific hostname.</p>\n *\n * @hide\n ",
  "links" : [ "#getConfigForHostname(String)" ],
  "variables" : [ {
    "name" : "sInstance",
    "type" : "ApplicationConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigs",
    "type" : "Set<Pair<Domain, NetworkSecurityConfig>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDefaultConfig",
    "type" : "NetworkSecurityConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustManager",
    "type" : "X509TrustManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConfigSource",
    "type" : "ConfigSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean hasPerDomainConfigs()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkSecurityConfig getConfigForHostname(String hostname)",
    "returnType" : "NetworkSecurityConfig",
    "comment" : "\n     * Get the {@link NetworkSecurityConfig} corresponding to the provided hostname.\n     * When matching the most specific matching domain rule will be used, if no match exists\n     * then the default configuration will be returned.\n     *\n     * {@code NetworkSecurityConfig} objects returned by this method can be safely cached for\n     * {@code hostname}. Subsequent calls with the same hostname will always return the same\n     * {@code NetworkSecurityConfig}.\n     *\n     * @return {@link NetworkSecurityConfig} to be used to determine\n     * the network security configuration for connections to {@code hostname}.\n     ",
    "links" : [ "android.security.net.config.NetworkSecurityConfig" ]
  }, {
    "name" : "public X509TrustManager getTrustManager()",
    "returnType" : "X509TrustManager",
    "comment" : "\n     * Returns the {@link X509TrustManager} that implements the checking of trust anchors and\n     * certificate pinning based on this configuration.\n     ",
    "links" : [ "javax.net.ssl.X509TrustManager" ]
  }, {
    "name" : "public boolean isCleartextTrafficPermitted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if cleartext traffic is permitted for this application, which is the\n     * case only if all configurations permit cleartext traffic. For finer-grained policy use\n     * {@link #isCleartextTrafficPermitted(String)}.\n     ",
    "links" : [ "#isCleartextTrafficPermitted(String)" ]
  }, {
    "name" : "public boolean isCleartextTrafficPermitted(String hostname)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if cleartext traffic is permitted for this application when connecting\n     * to {@code hostname}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isCertificateTransparencyVerificationRequired(@NonNull String hostname)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if Certificate Transparency information is required to be verified by\n     * the client in TLS connections to {@code hostname}.\n     *\n     * <p>See RFC6962 section 3.3 for more details.\n     *\n     * @param hostname hostname to check whether certificate transparency verification is required\n     * @return {@code true} if certificate transparency verification is required and {@code false}\n     *     otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void handleTrustStorageUpdate()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void ensureInitialized()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDefaultInstance(ApplicationConfig config)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ApplicationConfig getDefaultInstance()",
    "returnType" : "ApplicationConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean hasPerDomainConfigs()", "public NetworkSecurityConfig getConfigForHostname(String hostname)", "public X509TrustManager getTrustManager()", "public boolean isCleartextTrafficPermitted()", "public boolean isCleartextTrafficPermitted(String hostname)", "public boolean isCertificateTransparencyVerificationRequired(@NonNull String hostname)", "public void handleTrustStorageUpdate()", "private void ensureInitialized()", "public static void setDefaultInstance(ApplicationConfig config)", "public static ApplicationConfig getDefaultInstance()" ],
  "variableNames" : [ "sInstance", "sLock", "mConfigs", "mDefaultConfig", "mTrustManager", "mConfigSource", "mInitialized", "mLock" ]
}