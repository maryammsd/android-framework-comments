{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryUsageStats.java",
  "packageName" : "android.os",
  "className" : "BatteryUsageStats",
  "comment" : "\n * Contains a snapshot of battery attribution data, on a per-subsystem and per-UID basis.\n * <p>\n * The totals for the entire device are returned as AggregateBatteryConsumers, which can be\n * obtained by calling {@link #getAggregateBatteryConsumer(int)}.\n * <p>\n * Power attributed to individual apps is returned as UidBatteryConsumers, see\n * {@link #getUidBatteryConsumers()}.\n *\n * @hide\n ",
  "links" : [ "#getUidBatteryConsumers()", "#getAggregateBatteryConsumer(int)" ],
  "variables" : [ {
    "name" : "AGGREGATE_BATTERY_CONSUMER_SCOPE_DEVICE",
    "type" : "int",
    "comment" : "\n     * Power consumption by the entire device, since last charge.  The power usage in this\n     * scope includes both the power attributed to apps and the power unattributed to any\n     * apps.\n     ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATE_BATTERY_CONSUMER_SCOPE_ALL_APPS",
    "type" : "int",
    "comment" : "\n     * Aggregated power consumed by all applications, combined, since last charge. This is\n     * the sum of power reported in UidBatteryConsumers.\n     ",
    "links" : [ ]
  }, {
    "name" : "AGGREGATE_BATTERY_CONSUMER_SCOPE_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_BATTERY_USAGE_STATS",
    "type" : "String",
    "comment" : " XML tags and attributes for BatteryUsageStats persistence",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_AGGREGATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_UID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_USER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_POWER_COMPONENTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_CUSTOM_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_UID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_USER_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_SCOPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_PREFIX_CUSTOM_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_PREFIX_INCLUDES_PROC_STATE_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_START_TIMESTAMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_END_TIMESTAMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_PROCESS_STATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_POWER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DURATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_MODEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_BATTERY_CAPACITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DISCHARGE_PERCENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DISCHARGE_LOWER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DISCHARGE_UPPER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_DISCHARGE_DURATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_BATTERY_REMAINING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_CHARGE_REMAINING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_HIGHEST_DRAIN_PACKAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_TIME_IN_FOREGROUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_TIME_IN_BACKGROUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_ATTR_TIME_IN_FOREGROUND_SERVICE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BATTERY_CONSUMER_CURSOR_WINDOW_SIZE",
    "type" : "long",
    "comment" : " We need about 700 bytes per UID",
    "links" : [ ]
  }, {
    "name" : "STATSD_PULL_ATOM_MAX_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UID_USAGE_TIME_PROCESS_STATES",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargePercentage",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryCapacityMah",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsStartTimestampMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsEndTimestampMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsDurationMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargedPowerLowerBound",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargedPowerUpperBound",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDischargeDurationMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryTimeRemainingMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChargeTimeRemainingMs",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomPowerComponentNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludesPowerModels",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIncludesProcessStateData",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUidBatteryConsumers",
    "type" : "List<UidBatteryConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserBatteryConsumers",
    "type" : "List<UserBatteryConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAggregateBatteryConsumers",
    "type" : "AggregateBatteryConsumer[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryStatsHistory",
    "type" : "BatteryStatsHistory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBatteryConsumersCursorWindow",
    "type" : "CursorWindow",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<BatteryUsageStats>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_CONSUMED_POWER",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_FOREGROUND_STATE",
    "type" : "double",
    "comment" : " Weight one hour in foreground the same as 100 mAh of power drain",
    "links" : [ ]
  }, {
    "name" : "WEIGHT_BACKGROUND_STATE",
    "type" : "double",
    "comment" : " Weight one hour in background the same as 300 mAh of power drain",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getStatsStartTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Timestamp (as returned by System.currentTimeMillis()) of the latest battery stats reset, in\n     * milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStatsEndTimestamp()",
    "returnType" : "long",
    "comment" : "\n     * Timestamp (as returned by System.currentTimeMillis()) of when the stats snapshot was taken,\n     * in milliseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getStatsDuration()",
    "returnType" : "long",
    "comment" : "\n     * Returns the duration of the stats session captured by this BatteryUsageStats.\n     * In rare cases, statsDuration != statsEndTimestamp - statsStartTimestamp.  This may\n     * happen when BatteryUsageStats represents an accumulation of data across multiple\n     * non-contiguous sessions.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getConsumedPower()",
    "returnType" : "double",
    "comment" : "\n     * Total amount of battery charge drained since BatteryStats reset (e.g. due to being fully\n     * charged), in mAh\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getBatteryCapacity()",
    "returnType" : "double",
    "comment" : "\n     * Returns battery capacity in milli-amp-hours.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDischargePercentage()",
    "returnType" : "int",
    "comment" : "\n     * Portion of battery charge drained since BatteryStats reset (e.g. due to being fully\n     * charged), as percentage of the full charge in the range [0:100]. May exceed 100 if\n     * the device repeatedly charged and discharged prior to the reset.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Range<Double> getDischargedPowerRange()",
    "returnType" : "Range<Double>",
    "comment" : "\n     * Returns the discharged power since BatteryStats were last reset, in mAh as an estimated\n     * range.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDischargeDurationMs()",
    "returnType" : "long",
    "comment" : "\n     * Returns the total amount of time the battery was discharging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getBatteryTimeRemainingMs()",
    "returnType" : "long",
    "comment" : "\n     * Returns an approximation for how much run time (in milliseconds) is remaining on\n     * the battery.  Returns -1 if no time can be computed: either there is not\n     * enough current data to make a decision, or the battery is currently\n     * charging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getChargeTimeRemainingMs()",
    "returnType" : "long",
    "comment" : "\n     * Returns an approximation for how much time (in milliseconds) remains until the battery\n     * is fully charged.  Returns -1 if no time can be computed: either there is not\n     * enough current data to make a decision, or the battery is currently discharging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AggregateBatteryConsumer getAggregateBatteryConsumer(@AggregateBatteryConsumerScope int scope)",
    "returnType" : "AggregateBatteryConsumer",
    "comment" : "\n     * Returns a battery consumer for the specified battery consumer type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<UidBatteryConsumer> getUidBatteryConsumers()",
    "returnType" : "List<UidBatteryConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<UserBatteryConsumer> getUserBatteryConsumers()",
    "returnType" : "List<UserBatteryConsumer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getCustomPowerComponentNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Returns the names of custom power components in order, so the first name in the array\n     * corresponds to the custom componentId\n     * {@link BatteryConsumer#FIRST_CUSTOM_POWER_COMPONENT_ID}.\n     ",
    "links" : [ "android.os.BatteryConsumer#FIRST_CUSTOM_POWER_COMPONENT_ID" ]
  }, {
    "name" : "public boolean isProcessStateDataIncluded()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BatteryStatsHistoryIterator iterateBatteryStatsHistory()",
    "returnType" : "BatteryStatsHistoryIterator",
    "comment" : "\n     * Returns an iterator for {@link android.os.BatteryStats.HistoryItem}'s.\n     ",
    "links" : [ "android.os.BatteryStats.HistoryItem" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] getStatsProto()",
    "returnType" : "byte[]",
    "comment" : " Returns a proto (as used for atoms.proto) corresponding to this BatteryUsageStats. ",
    "links" : [ ]
  }, {
    "name" : "public void dumpToProto(FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "\n     * Writes contents in a binary protobuffer format, using\n     * the android.os.BatteryUsageStatsAtomsProto proto.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeStatsProto(ProtoOutputStream proto, int maxRawSize)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeUidBatteryConsumersProto(ProtoOutputStream proto, int maxRawSize)",
    "returnType" : "void",
    "comment" : "\n     * Writes the UidBatteryConsumers data, held by this BatteryUsageStats, to the proto (as used\n     * for atoms.proto).\n     ",
    "links" : [ ]
  }, {
    "name" : "private double getUidBatteryConsumerWeight(UidBatteryConsumer uidBatteryConsumer)",
    "returnType" : "double",
    "comment" : "\n     * Computes the weight associated with a UidBatteryConsumer, which is used for sorting.\n     * We want applications with the largest consumed power as well as applications\n     * with the highest usage time to be included in the statsd atom.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Prints the stats in a human-readable format.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void printPowerComponent(PrintWriter pw, String prefix, String label, double devicePowerMah, double appsPowerMah, int powerModel, long durationMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void dumpSortedBatteryConsumers(PrintWriter pw, String prefix, List<? extends BatteryConsumer> batteryConsumers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeXml(TypedXmlSerializer serializer) throws IOException",
    "returnType" : "void",
    "comment" : " Serializes this object to XML ",
    "links" : [ ]
  }, {
    "name" : "public static BatteryUsageStats createFromXml(TypedXmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "BatteryUsageStats",
    "comment" : " Parses an XML representation of BatteryUsageStats ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getStatsStartTimestamp()", "public long getStatsEndTimestamp()", "public long getStatsDuration()", "public double getConsumedPower()", "public double getBatteryCapacity()", "public int getDischargePercentage()", "public Range<Double> getDischargedPowerRange()", "public long getDischargeDurationMs()", "public long getBatteryTimeRemainingMs()", "public long getChargeTimeRemainingMs()", "public AggregateBatteryConsumer getAggregateBatteryConsumer(@AggregateBatteryConsumerScope int scope)", "public List<UidBatteryConsumer> getUidBatteryConsumers()", "public List<UserBatteryConsumer> getUserBatteryConsumers()", "public String[] getCustomPowerComponentNames()", "public boolean isProcessStateDataIncluded()", "public BatteryStatsHistoryIterator iterateBatteryStatsHistory()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public byte[] getStatsProto()", "public void dumpToProto(FileDescriptor fd)", "private void writeStatsProto(ProtoOutputStream proto, int maxRawSize)", "private void writeUidBatteryConsumersProto(ProtoOutputStream proto, int maxRawSize)", "private double getUidBatteryConsumerWeight(UidBatteryConsumer uidBatteryConsumer)", "public void dump(PrintWriter pw, String prefix)", "private void printPowerComponent(PrintWriter pw, String prefix, String label, double devicePowerMah, double appsPowerMah, int powerModel, long durationMs)", "private void dumpSortedBatteryConsumers(PrintWriter pw, String prefix, List<? extends BatteryConsumer> batteryConsumers)", "public void writeXml(TypedXmlSerializer serializer) throws IOException", "public static BatteryUsageStats createFromXml(TypedXmlPullParser parser) throws XmlPullParserException, IOException", "public void close() throws IOException", "protected void finalize() throws Throwable", "public String toString()" ],
  "variableNames" : [ "AGGREGATE_BATTERY_CONSUMER_SCOPE_DEVICE", "AGGREGATE_BATTERY_CONSUMER_SCOPE_ALL_APPS", "AGGREGATE_BATTERY_CONSUMER_SCOPE_COUNT", "XML_TAG_BATTERY_USAGE_STATS", "XML_TAG_AGGREGATE", "XML_TAG_UID", "XML_TAG_USER", "XML_TAG_POWER_COMPONENTS", "XML_TAG_COMPONENT", "XML_TAG_CUSTOM_COMPONENT", "XML_ATTR_ID", "XML_ATTR_UID", "XML_ATTR_USER_ID", "XML_ATTR_SCOPE", "XML_ATTR_PREFIX_CUSTOM_COMPONENT", "XML_ATTR_PREFIX_INCLUDES_PROC_STATE_DATA", "XML_ATTR_START_TIMESTAMP", "XML_ATTR_END_TIMESTAMP", "XML_ATTR_PROCESS_STATE", "XML_ATTR_POWER", "XML_ATTR_DURATION", "XML_ATTR_MODEL", "XML_ATTR_BATTERY_CAPACITY", "XML_ATTR_DISCHARGE_PERCENT", "XML_ATTR_DISCHARGE_LOWER", "XML_ATTR_DISCHARGE_UPPER", "XML_ATTR_DISCHARGE_DURATION", "XML_ATTR_BATTERY_REMAINING", "XML_ATTR_CHARGE_REMAINING", "XML_ATTR_HIGHEST_DRAIN_PACKAGE", "XML_ATTR_TIME_IN_FOREGROUND", "XML_ATTR_TIME_IN_BACKGROUND", "XML_ATTR_TIME_IN_FOREGROUND_SERVICE", "BATTERY_CONSUMER_CURSOR_WINDOW_SIZE", "STATSD_PULL_ATOM_MAX_BYTES", "UID_USAGE_TIME_PROCESS_STATES", "mDischargePercentage", "mBatteryCapacityMah", "mStatsStartTimestampMs", "mStatsEndTimestampMs", "mStatsDurationMs", "mDischargedPowerLowerBound", "mDischargedPowerUpperBound", "mDischargeDurationMs", "mBatteryTimeRemainingMs", "mChargeTimeRemainingMs", "mCustomPowerComponentNames", "mIncludesPowerModels", "mIncludesProcessStateData", "mUidBatteryConsumers", "mUserBatteryConsumers", "mAggregateBatteryConsumers", "mBatteryStatsHistory", "mBatteryConsumersCursorWindow", "CREATOR", "WEIGHT_CONSUMED_POWER", "WEIGHT_FOREGROUND_STATE", "WEIGHT_BACKGROUND_STATE" ]
}