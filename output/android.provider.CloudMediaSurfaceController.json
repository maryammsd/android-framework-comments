{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/CloudMediaProvider.java",
  "packageName" : "android.provider",
  "className" : "CloudMediaSurfaceController",
  "comment" : "\n     * Manages rendering the preview of media items on given instances of {@link Surface}.\n     *\n     * <p>The methods of this class are meant to be asynchronous, and should not block by performing\n     * any heavy operation.\n     * <p>Note that a single CloudMediaSurfaceController instance would be responsible for\n     * rendering multiple media items associated with multiple surfaces.\n     ",
  "links" : [ "android.view.Surface" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onPlayerCreate()",
    "returnType" : "void",
    "comment" : "\n         * Creates any player resource(s) needed for rendering.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onPlayerRelease()",
    "returnType" : "void",
    "comment" : "\n         * Releases any player resource(s) used for rendering.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSurfaceCreated(int surfaceId, @NonNull Surface surface, @NonNull String mediaId)",
    "returnType" : "void",
    "comment" : "\n         * Indicates creation of the given {@link Surface} with given {@code surfaceId} for\n         * rendering the preview of a media item with given {@code mediaId}.\n         *\n         * <p>This is called immediately after the surface is first created. Implementations of this\n         * should start up whatever rendering code they desire.\n         * <p>Note that the given media item remains associated with the given surface id till the\n         * {@link Surface} is destroyed.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         * @param surface instance of the {@link Surface} on which the media item should be rendered\n         * @param mediaId id which uniquely identifies the media to be rendered\n         *\n         * @see SurfaceHolder.Callback#surfaceCreated(SurfaceHolder)\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public abstract void onSurfaceChanged(int surfaceId, int format, int width, int height)",
    "returnType" : "void",
    "comment" : "\n         * Indicates structural changes (format or size) in the {@link Surface} for rendering.\n         *\n         * <p>This method is always called at least once, after {@link #onSurfaceCreated}.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         * @param format the new {@link PixelFormat} of the surface\n         * @param width the new width of the {@link Surface}\n         * @param height the new height of the {@link Surface}\n         *\n         * @see SurfaceHolder.Callback#surfaceChanged(SurfaceHolder, int, int, int)\n         ",
    "links" : [ "#onSurfaceCreated", "android.view.Surface", "android.graphics.PixelFormat" ]
  }, {
    "name" : "public abstract void onSurfaceDestroyed(int surfaceId)",
    "returnType" : "void",
    "comment" : "\n         * Indicates destruction of a {@link Surface} with given {@code surfaceId}.\n         *\n         * <p>This is called immediately before a surface is being destroyed. After returning from\n         * this call, you should no longer try to access this surface.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         *\n         * @see SurfaceHolder.Callback#surfaceDestroyed(SurfaceHolder)\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public abstract void onMediaPlay(int surfaceId)",
    "returnType" : "void",
    "comment" : "\n         * Start playing the preview of the media associated with the given surface id. If\n         * playback had previously been paused, playback will continue from where it was paused.\n         * If playback had been stopped, or never started before, playback will start at the\n         * beginning.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public abstract void onMediaPause(int surfaceId)",
    "returnType" : "void",
    "comment" : "\n         * Pauses the playback of the media associated with the given surface id.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public abstract void onMediaSeekTo(int surfaceId, @DurationMillisLong long timestampMillis)",
    "returnType" : "void",
    "comment" : "\n         * Seeks the media associated with the given surface id to specified timestamp.\n         *\n         * @param surfaceId id which uniquely identifies the {@link Surface} for rendering\n         * @param timestampMillis the timestamp in milliseconds from the start to seek to\n         ",
    "links" : [ "android.view.Surface" ]
  }, {
    "name" : "public abstract void onConfigChange(@NonNull Bundle config)",
    "returnType" : "void",
    "comment" : "\n         * Changes the configuration parameters for the CloudMediaSurfaceController.\n         *\n         * @param config the updated config to change to. This can include config changes for the\n         * following:\n         * <ul>\n         * <li> {@link CloudMediaProviderContract#EXTRA_LOOPING_PLAYBACK_ENABLED}\n         * <li> {@link CloudMediaProviderContract#EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED}\n         * </ul>\n         ",
    "links" : [ "android.provider.CloudMediaProviderContract#EXTRA_SURFACE_CONTROLLER_AUDIO_MUTE_ENABLED", "android.provider.CloudMediaProviderContract#EXTRA_LOOPING_PLAYBACK_ENABLED" ]
  }, {
    "name" : "public abstract void onDestroy()",
    "returnType" : "void",
    "comment" : "\n         * Indicates destruction of this CloudMediaSurfaceController object.\n         *\n         * <p>This CloudMediaSurfaceController object should no longer be in use after this method\n         * has been called.\n         *\n         * <p>Note that it is possible for this method to be called directly without\n         * {@link #onPlayerRelease} being called, hence you should release any resources associated\n         * with this CloudMediaSurfaceController object, or perform any cleanup required in this\n         * method.\n         ",
    "links" : [ "#onPlayerRelease" ]
  } ],
  "methodNames" : [ "public abstract void onPlayerCreate()", "public abstract void onPlayerRelease()", "public abstract void onSurfaceCreated(int surfaceId, @NonNull Surface surface, @NonNull String mediaId)", "public abstract void onSurfaceChanged(int surfaceId, int format, int width, int height)", "public abstract void onSurfaceDestroyed(int surfaceId)", "public abstract void onMediaPlay(int surfaceId)", "public abstract void onMediaPause(int surfaceId)", "public abstract void onMediaSeekTo(int surfaceId, @DurationMillisLong long timestampMillis)", "public abstract void onConfigChange(@NonNull Bundle config)", "public abstract void onDestroy()" ],
  "variableNames" : [ ]
}