{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/VpnManager.java",
  "packageName" : "android.net",
  "className" : "VpnManager",
  "comment" : "\n * This class provides an interface for apps to manage platform VPN profiles\n *\n * <p>Apps can use this API to provide profiles with which the platform can set up a VPN without\n * further app intermediation. When a VPN profile is present and the app is selected as an always-on\n * VPN, the platform will directly trigger the negotiation of the VPN without starting or waking the\n * app (unlike VpnService).\n *\n * <p>VPN apps using supported protocols should preferentially use this API over the {@link\n * VpnService} API for ease-of-development and reduced maintenance burden. This also give the user\n * the guarantee that VPN network traffic is not subjected to on-device packet interception.\n *\n * @see Ikev2VpnProfile\n ",
  "links" : [ "android.net.VpnService" ],
  "variables" : [ {
    "name" : "TYPE_VPN_NONE",
    "type" : "int",
    "comment" : " Type representing a lack of VPN @hide ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VPN_SERVICE",
    "type" : "int",
    "comment" : "\n     * A VPN created by an app using the {@link VpnService} API.\n     * @hide\n     ",
    "links" : [ "android.net.VpnService" ]
  }, {
    "name" : "TYPE_VPN_PLATFORM",
    "type" : "int",
    "comment" : "\n     * A VPN created using a {@link VpnManager} API such as {@link #startProvisionedVpnProfile}.\n     * @hide\n     ",
    "links" : [ "#startProvisionedVpnProfile", "android.net.VpnManager" ]
  }, {
    "name" : "TYPE_VPN_LEGACY",
    "type" : "int",
    "comment" : "\n     * An IPsec VPN created by the built-in LegacyVpnRunner.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VPN_OEM",
    "type" : "int",
    "comment" : "\n     * An VPN created by OEM code through other means than {@link VpnService} or {@link VpnManager}.\n     * @hide\n     ",
    "links" : [ "android.net.VpnService", "android.net.VpnManager" ]
  }, {
    "name" : "NOTIFICATION_CHANNEL_VPN",
    "type" : "String",
    "comment" : "\n     * Channel for VPN notifications.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VPN_MANAGER_EVENT",
    "type" : "String",
    "comment" : "\n     * Action sent in {@link android.content.Intent}s to VpnManager clients when an event occurred.\n     *\n     * <p>If the provisioning application declares a service handling this intent action, but is not\n     * already running, it will be started. Upon starting, the application is granted a short grace\n     * period to run in the background even while the device is idle to handle any potential\n     * failures. Applications requiring long-running actions triggered by one of these events should\n     * declare a foreground service to prevent being killed once the grace period expires.\n     *\n     * This action will have a category of either {@link #CATEGORY_EVENT_IKE_ERROR},\n     * {@link #CATEGORY_EVENT_NETWORK_ERROR}, or {@link #CATEGORY_EVENT_DEACTIVATED_BY_USER},\n     * that the app can use to filter events it's interested in reacting to.\n     *\n     * It will also contain the following extras :\n     * <ul>\n     *   <li>{@link #EXTRA_SESSION_KEY}, a {@code String} for the session key, as returned by\n     *       {@link #startProvisionedVpnProfileSession}.\n     *   <li>{@link #EXTRA_TIMESTAMP_MILLIS}, a long for the timestamp at which the error occurred,\n     *       in milliseconds since the epoch, as returned by\n     *       {@link java.lang.System#currentTimeMillis}.\n     *   <li>{@link #EXTRA_UNDERLYING_NETWORK}, a {@link Network} containing the underlying\n     *       network at the time the error occurred, or null if none. Note that this network\n     *       may have disconnected already.\n     *   <li>{@link #EXTRA_UNDERLYING_NETWORK_CAPABILITIES}, a {@link NetworkCapabilities} for\n     *       the underlying network at the time the error occurred.\n     *   <li>{@link #EXTRA_UNDERLYING_LINK_PROPERTIES}, a {@link LinkProperties} for the underlying\n     *       network at the time the error occurred.\n     * </ul>\n     * When this event is an error, either {@link #CATEGORY_EVENT_IKE_ERROR} or\n     * {@link #CATEGORY_EVENT_NETWORK_ERROR}, the following extras will be populatedÂ :\n     * <ul>\n     *   <li>{@link #EXTRA_ERROR_CLASS}, an {@code int} for the class of error, either\n     *       {@link #ERROR_CLASS_RECOVERABLE} or {@link #ERROR_CLASS_NOT_RECOVERABLE}.\n     *   <li>{@link #EXTRA_ERROR_CODE}, an {@code int} error code specific to the error. See\n     *       {@link #EXTRA_ERROR_CODE} for details.\n     * </ul>\n     ",
    "links" : [ "#EXTRA_UNDERLYING_NETWORK", "#EXTRA_UNDERLYING_LINK_PROPERTIES", "#ERROR_CLASS_NOT_RECOVERABLE", "#CATEGORY_EVENT_NETWORK_ERROR", "android.content.Intent", "android.net.NetworkCapabilities", "java.lang.System#currentTimeMillis", "#EXTRA_SESSION_KEY", "android.net.Network", "android.net.LinkProperties", "#EXTRA_ERROR_CODE", "#startProvisionedVpnProfileSession", "#EXTRA_ERROR_CLASS", "#EXTRA_TIMESTAMP_MILLIS", "#CATEGORY_EVENT_DEACTIVATED_BY_USER", "#CATEGORY_EVENT_IKE_ERROR", "#EXTRA_UNDERLYING_NETWORK_CAPABILITIES", "#ERROR_CLASS_RECOVERABLE" ]
  }, {
    "name" : "CATEGORY_EVENT_IKE_ERROR",
    "type" : "String",
    "comment" : "\n     * An IKE protocol error occurred.\n     *\n     * Codes (in {@link #EXTRA_ERROR_CODE}) are the codes from\n     * {@link android.net.ipsec.ike.exceptions.IkeProtocolException}, as defined by IANA in\n     * \"IKEv2 Notify Message Types - Error Types\".\n     ",
    "links" : [ "android.net.ipsec.ike.exceptions.IkeProtocolException", "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "CATEGORY_EVENT_NETWORK_ERROR",
    "type" : "String",
    "comment" : "\n     * A network error occurred.\n     *\n     * Error codes (in {@link #EXTRA_ERROR_CODE}) are ERROR_CODE_NETWORK_*.\n     ",
    "links" : [ "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "CATEGORY_EVENT_DEACTIVATED_BY_USER",
    "type" : "String",
    "comment" : "\n     * The user deactivated the VPN.\n     *\n     * This can happen either when the user turns the VPN off explicitly, or when they select\n     * a different VPN provider.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * The always-on state of this VPN was changed\n     *\n     * <p>This may be the result of a user changing VPN settings, or a Device Policy Manager app\n     * having changed the VPN policy.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VPN_PROFILE_STATE",
    "type" : "String",
    "comment" : "\n     * The VpnProfileState at the time that this event occurred.\n     *\n     * <p>This extra may be null if the VPN was revoked by the user, or the profile was deleted.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SESSION_KEY",
    "type" : "String",
    "comment" : "\n     * The key of the session that experienced this event, as a {@code String}.\n     *\n     * This is the same key that was returned by {@link #startProvisionedVpnProfileSession}.\n     ",
    "links" : [ "#startProvisionedVpnProfileSession" ]
  }, {
    "name" : "EXTRA_UNDERLYING_NETWORK",
    "type" : "String",
    "comment" : "\n     * The network that was underlying the VPN when the event occurred, as a {@link Network}.\n     *\n     * <p>This extra will be null if there was no underlying network at the time of the event, or\n     *    the underlying network has no bearing on the event, as in the case of:\n     * <ul>\n     *   <li>CATEGORY_EVENT_DEACTIVATED_BY_USER\n     *   <li>CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED\n     * </ul>\n     ",
    "links" : [ "android.net.Network" ]
  }, {
    "name" : "EXTRA_UNDERLYING_NETWORK_CAPABILITIES",
    "type" : "String",
    "comment" : "\n     * The {@link NetworkCapabilities} of the underlying network when the event occurred.\n     *\n     * <p>This extra will be null if there was no underlying network at the time of the event, or\n     *    the underlying network has no bearing on the event, as in the case of:\n     * <ul>\n     *   <li>CATEGORY_EVENT_DEACTIVATED_BY_USER\n     *   <li>CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED\n     * </ul>\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "EXTRA_UNDERLYING_LINK_PROPERTIES",
    "type" : "String",
    "comment" : "\n     * The {@link LinkProperties} of the underlying network when the event occurred.\n     *\n     * <p>This extra will be null if there was no underlying network at the time of the event, or\n     *    the underlying network has no bearing on the event, as in the case of:\n     * <ul>\n     *   <li>CATEGORY_EVENT_DEACTIVATED_BY_USER\n     *   <li>CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED\n     * </ul>\n     ",
    "links" : [ "android.net.LinkProperties" ]
  }, {
    "name" : "EXTRA_TIMESTAMP_MILLIS",
    "type" : "String",
    "comment" : "\n     * A {@code long} timestamp containing the time at which the event occurred.\n     *\n     * This is a number of milliseconds since the epoch, suitable to be compared with\n     * {@link java.lang.System#currentTimeMillis}.\n     ",
    "links" : [ "java.lang.System#currentTimeMillis" ]
  }, {
    "name" : "EXTRA_ERROR_CLASS",
    "type" : "String",
    "comment" : "\n     * Extra for the error class, as an {@code int}.\n     *\n     * This is always either {@link #ERROR_CLASS_NOT_RECOVERABLE} or\n     * {@link #ERROR_CLASS_RECOVERABLE}. This extra is only populated for error categories.\n     ",
    "links" : [ "#ERROR_CLASS_NOT_RECOVERABLE", "#ERROR_CLASS_RECOVERABLE" ]
  }, {
    "name" : "EXTRA_ERROR_CODE",
    "type" : "String",
    "comment" : "\n     * Extra for an error code, as an {@code int}.\n     *\n     * <ul>\n     *   <li>For {@link #CATEGORY_EVENT_NETWORK_ERROR}, this is one of the\n     *       {@code ERROR_CODE_NETWORK_*} constants.\n     *   <li>For {@link #CATEGORY_EVENT_IKE_ERROR}, this is one of values defined in\n     *       {@link android.net.ipsec.ike.exceptions.IkeProtocolException}.ERROR_TYPE_*.\n     * </ul>\n     * For non-error categories, this extra is not populated.\n     ",
    "links" : [ "android.net.ipsec.ike.exceptions.IkeProtocolException", "#CATEGORY_EVENT_IKE_ERROR", "#CATEGORY_EVENT_NETWORK_ERROR" ]
  }, {
    "name" : "ERROR_CLASS_NOT_RECOVERABLE",
    "type" : "int",
    "comment" : "\n     * {@link #EXTRA_ERROR_CLASS} coding for a non-recoverable error.\n     *\n     * This error is fatal, e.g. configuration error. The stack will not retry connection.\n     ",
    "links" : [ "#EXTRA_ERROR_CLASS" ]
  }, {
    "name" : "ERROR_CLASS_RECOVERABLE",
    "type" : "int",
    "comment" : "\n     * {@link #EXTRA_ERROR_CLASS} coding for a recoverable error.\n     *\n     * The stack experienced an error but will retry with exponential backoff, e.g. network timeout.\n     ",
    "links" : [ "#EXTRA_ERROR_CLASS" ]
  }, {
    "name" : "ERROR_CODE_NETWORK_UNKNOWN_HOST",
    "type" : "int",
    "comment" : "\n     * An {@link #EXTRA_ERROR_CODE} for {@link #CATEGORY_EVENT_NETWORK_ERROR} to indicate that the\n     * network host isn't known.\n     *\n     * This happens when domain name resolution could not resolve an IP address for the\n     * specified host. {@see java.net.UnknownHostException}\n     ",
    "links" : [ "#CATEGORY_EVENT_NETWORK_ERROR", "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT",
    "type" : "int",
    "comment" : "\n     * An {@link #EXTRA_ERROR_CODE} for {@link #CATEGORY_EVENT_NETWORK_ERROR} indicating a timeout.\n     *\n     * For Ikev2 VPNs, this happens typically after a retransmission failure.\n     * {@see android.net.ipsec.ike.exceptions.IkeTimeoutException}\n     ",
    "links" : [ "#CATEGORY_EVENT_NETWORK_ERROR", "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "ERROR_CODE_NETWORK_LOST",
    "type" : "int",
    "comment" : "\n     * An {@link #EXTRA_ERROR_CODE} for {@link #CATEGORY_EVENT_NETWORK_ERROR} indicating that\n     * network connectivity was lost.\n     *\n     * The most common reason for this error is that the underlying network was disconnected,\n     * {@see android.net.ipsec.ike.exceptions.IkeNetworkLostException}.\n     ",
    "links" : [ "#CATEGORY_EVENT_NETWORK_ERROR", "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "ERROR_CODE_NETWORK_IO",
    "type" : "int",
    "comment" : "\n     * An {@link #EXTRA_ERROR_CODE} for {@link #CATEGORY_EVENT_NETWORK_ERROR} indicating an\n     * input/output error.\n     *\n     * This code happens when reading or writing to sockets on the underlying networks was\n     * terminated by an I/O error. {@see IOException}.\n     ",
    "links" : [ "#CATEGORY_EVENT_NETWORK_ERROR", "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IVpnManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Intent getIntentForConfirmation()",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent provisionVpnProfile(@NonNull PlatformVpnProfile profile)",
    "returnType" : "Intent",
    "comment" : "\n     * Install a VpnProfile configuration keyed on the calling app's package name.\n     *\n     * <p>This method returns {@code null} if user consent has already been granted, or an {@link\n     * Intent} to a system activity. If an intent is returned, the application should launch the\n     * activity using {@link Activity#startActivityForResult} to request user consent. The activity\n     * may pop up a dialog to require user action, and the result will come back via its {@link\n     * Activity#onActivityResult}. If the result is {@link Activity#RESULT_OK}, the user has\n     * consented, and the VPN profile can be started.\n     *\n     * @param profile the VpnProfile provided by this package. Will override any previous VpnProfile\n     *     stored for this package.\n     * @return an Intent requesting user consent to start the VPN, or null if consent is not\n     *     required based on privileges or previous user consent.\n     ",
    "links" : [ "android.app.Activity#RESULT_OK", "android.app.Activity#startActivityForResult", "android.app.Activity#onActivityResult", "android.content.Intent" ]
  }, {
    "name" : "public void deleteProvisionedVpnProfile()",
    "returnType" : "void",
    "comment" : "\n     * Delete the VPN profile configuration that was provisioned by the calling app\n     *\n     * @throws SecurityException if this would violate user settings\n     ",
    "links" : [ ]
  }, {
    "name" : "public String startProvisionedVpnProfileSession()",
    "returnType" : "String",
    "comment" : "\n     * Request the startup of a previously provisioned VPN.\n     *\n     * @return A unique key corresponding to this session.\n     * @throws SecurityException exception if user or device settings prevent this VPN from being\n     *         setup, or if user consent has not been granted\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startProvisionedVpnProfile()",
    "returnType" : "void",
    "comment" : "\n     * Request the startup of a previously provisioned VPN.\n     *\n     * @throws SecurityException exception if user or device settings prevent this VPN from being\n     *         setup, or if user consent has not been granted\n     * @deprecated This method is replaced by startProvisionedVpnProfileSession which returns a\n     *             session key for the caller to diagnose the errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopProvisionedVpnProfile()",
    "returnType" : "void",
    "comment" : " Tear down the VPN provided by the calling app (if any) ",
    "links" : [ ]
  }, {
    "name" : "public VpnConfig getVpnConfig(@UserIdInt int userId)",
    "returnType" : "VpnConfig",
    "comment" : "\n     * Return the VPN configuration for the given user ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public VpnProfileState getProvisionedVpnProfileState()",
    "returnType" : "VpnProfileState",
    "comment" : "\n     * Retrieve the VpnProfileState for the profile provisioned by the calling package.\n     *\n     * @return the VpnProfileState with current information, or null if there was no profile\n     *         provisioned and started by the calling package.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void factoryReset()",
    "returnType" : "void",
    "comment" : "\n     * Resets all VPN settings back to factory defaults.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean prepareVpn(@Nullable String oldPackage, @Nullable String newPackage, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Prepare for a VPN application.\n     * VPN permissions are checked in the {@link Vpn} class. If the caller is not {@code userId},\n     * {@link android.Manifest.permission.INTERACT_ACROSS_USERS_FULL} permission is required.\n     *\n     * @param oldPackage Package name of the application which currently controls VPN, which will\n     *                   be replaced. If there is no such application, this should should either be\n     *                   {@code null} or {@link VpnConfig.LEGACY_VPN}.\n     * @param newPackage Package name of the application which should gain control of VPN, or\n     *                   {@code null} to disable.\n     * @param userId User for whom to prepare the new VPN.\n     *\n     * @hide\n     ",
    "links" : [ "Vpn", "VpnConfig.LEGACY_VPN", "android.Manifest.permission.INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "public void setVpnPackageAuthorization(String packageName, int userId, @VpnManager.VpnType int vpnType)",
    "returnType" : "void",
    "comment" : "\n     * Set whether the VPN package has the ability to launch VPNs without user intervention. This\n     * method is used by system-privileged apps. VPN permissions are checked in the {@link Vpn}\n     * class. If the caller is not {@code userId}, {@link\n     * android.Manifest.permission.INTERACT_ACROSS_USERS_FULL} permission is required.\n     *\n     * @param packageName The package for which authorization state should change.\n     * @param userId User for whom {@code packageName} is installed.\n     * @param vpnType The {@link VpnManager.VpnType} constant representing what class of VPN\n     *     permissions should be granted. When unauthorizing an app, {@link\n     *     VpnManager.TYPE_VPN_NONE} should be used.\n     * @hide\n     ",
    "links" : [ "Vpn", "VpnManager.VpnType", "android.Manifest.permission.INTERACT_ACROSS_USERS_FULL", "VpnManager.TYPE_VPN_NONE" ]
  }, {
    "name" : "public boolean isAlwaysOnVpnPackageSupportedForUser(int userId, @Nullable String vpnPackage)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a VPN app supports always-on mode.\n     *\n     * In order to support the always-on feature, an app has to\n     * <ul>\n     *     <li>target {@link VERSION_CODES#N API 24} or above, and\n     *     <li>not opt out through the {@link VpnService#SERVICE_META_DATA_SUPPORTS_ALWAYS_ON}\n     *         meta-data field.\n     * </ul>\n     *\n     * @param userId The identifier of the user for whom the VPN app is installed.\n     * @param vpnPackage The canonical package name of the VPN app.\n     * @return {@code true} if and only if the VPN app exists and supports always-on mode.\n     * @hide\n     ",
    "links" : [ "android.net.VpnService#SERVICE_META_DATA_SUPPORTS_ALWAYS_ON", "#N" ]
  }, {
    "name" : "public boolean setAlwaysOnVpnPackageForUser(int userId, @Nullable String vpnPackage, boolean lockdownEnabled, @Nullable List<String> lockdownAllowlist)",
    "returnType" : "boolean",
    "comment" : "\n     * Configures an always-on VPN connection through a specific application.\n     * This connection is automatically granted and persisted after a reboot.\n     *\n     * <p>The designated package should declare a {@link VpnService} in its\n     *    manifest guarded by {@link android.Manifest.permission.BIND_VPN_SERVICE},\n     *    otherwise the call will fail.\n     *\n     * @param userId The identifier of the user to set an always-on VPN for.\n     * @param vpnPackage The package name for an installed VPN app on the device, or {@code null}\n     *                   to remove an existing always-on VPN configuration.\n     * @param lockdownEnabled {@code true} to disallow networking when the VPN is not connected or\n     *        {@code false} otherwise.\n     * @param lockdownAllowlist The list of packages that are allowed to access network directly\n     *         when VPN is in lockdown mode but is not running. Non-existent packages are ignored so\n     *         this method must be called when a package that should be allowed is installed or\n     *         uninstalled.\n     * @return {@code true} if the package is set as always-on VPN controller;\n     *         {@code false} otherwise.\n     * @hide\n     ",
    "links" : [ "android.net.VpnService", "android.Manifest.permission.BIND_VPN_SERVICE" ]
  }, {
    "name" : "public String getAlwaysOnVpnPackageForUser(int userId)",
    "returnType" : "String",
    "comment" : "\n     * Returns the package name of the currently set always-on VPN application.\n     * If there is no always-on VPN set, or the VPN is provided by the system instead\n     * of by an app, {@code null} will be returned.\n     *\n     * @return Package name of VPN controller responsible for always-on VPN,\n     *         or {@code null} if none is set.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVpnLockdownEnabled(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether always-on VPN is in lockdown mode.\n     *\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "public boolean setAppExclusionList(int userId, @NonNull String vpnPackage, @NonNull List<String> excludedApps)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the application exclusion list for the specified VPN profile.\n     *\n     * <p>If an app in the set of excluded apps is not installed for the given user, it will be\n     * skipped in the list of app exclusions. If apps are installed or removed, any active VPN will\n     * have its UID set updated automatically. If the caller is not {@code userId},\n     * {@link android.Manifest.permission.INTERACT_ACROSS_USERS_FULL} permission is required.\n     *\n     * <p>This will ONLY affect VpnManager profiles. As such, the NETWORK_SETTINGS provider MUST NOT\n     * allow configuration of these options if the application has not provided a VPN profile.\n     *\n     * @param userId the identifier of the user to set app exclusion list\n     * @param vpnPackage The package name for an installed VPN app on the device\n     * @param excludedApps the app exclusion list\n     * @throws IllegalStateException exception if vpn for the @code userId} is not ready yet.\n     *\n     * @return whether setting the list is successful or not\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "public List<String> getAppExclusionList(int userId, @NonNull String vpnPackage)",
    "returnType" : "List<String>",
    "comment" : "\n     * Gets the application exclusion list for the specified VPN profile. If the caller is not\n     * {@code userId}, {@link android.Manifest.permission.INTERACT_ACROSS_USERS_FULL} permission\n     * is required.\n     *\n     * @param userId the identifier of the user to set app exclusion list\n     * @param vpnPackage The package name for an installed VPN app on the device\n     * @return the list of packages for the specified VPN profile or null if no corresponding VPN\n     *         profile configured.\n     *\n     * @hide\n     ",
    "links" : [ "android.Manifest.permission.INTERACT_ACROSS_USERS_FULL" ]
  }, {
    "name" : "public List<String> getVpnLockdownAllowlist(int userId)",
    "returnType" : "List<String>",
    "comment" : "\n     * @return the list of packages that are allowed to access network when always-on VPN is in\n     * lockdown mode but not connected. Returns {@code null} when VPN lockdown is not active.\n     *\n     * @hide\n     *",
    "links" : [ ]
  }, {
    "name" : "public LegacyVpnInfo getLegacyVpnInfo(@UserIdInt int userId)",
    "returnType" : "LegacyVpnInfo",
    "comment" : "\n     * Return the legacy VPN information for the specified user ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startLegacyVpn(VpnProfile profile)",
    "returnType" : "void",
    "comment" : "\n     * Starts a legacy VPN.\n     *\n     * Legacy VPN is deprecated starting from Android S. So this API shouldn't be called if the\n     * initial SDK version of device is Android S+. Otherwise, UnsupportedOperationException will be\n     * thrown.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateLockdownVpn()",
    "returnType" : "boolean",
    "comment" : "\n     * Informs the service that legacy lockdown VPN state should be updated (e.g., if its keystore\n     * entry has been updated). If the LockdownVpn mechanism is enabled, updates the vpn\n     * with a reload of its profile.\n     *\n     * <p>This method can only be called by the system UID\n     * @return a boolean indicating success\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getFromVpnProfileStore(@NonNull String name)",
    "returnType" : "byte[]",
    "comment" : "\n     * Get the vpn profile owned by the calling uid with the given name from the vpn database.\n     *\n     * <p>Note this method should not be used for platform VPN profiles. </p>\n     *\n     * @param name The name of the profile to retrieve.\n     * @return the unstructured blob for the matching vpn profile.\n     * Returns null if no profile with a matching name was found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean putIntoVpnProfileStore(@NonNull String name, @NonNull byte[] blob)",
    "returnType" : "boolean",
    "comment" : "\n     * Put the given vpn profile owned by the calling uid with the given name into the vpn database.\n     * Existing profiles with the same name will be replaced.\n     *\n     * <p>Note this method should not be used for platform VPN profiles.\n     * To update a platform VPN, use provisionVpnProfile() instead. </p>\n     *\n     * @param name The name of the profile to put.\n     * @param blob The profile.\n     * @return true if the profile was successfully added. False otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeFromVpnProfileStore(@NonNull String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the vpn profile owned by the calling uid with the given name from the vpn database.\n     *\n     * <p>Note this method should not be used for platform VPN profiles.\n     * To remove a platform VPN, use deleteVpnProfile() instead.</p>\n     *\n     * @param name The name of the profile to be removed.\n     * @return true if a profile was removed. False if no profile with a matching name was found.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] listFromVpnProfileStore(@NonNull String prefix)",
    "returnType" : "String[]",
    "comment" : "\n     * Returns a list of the name suffixes of the vpn profiles owned by the calling uid in the vpn\n     * database matching the given prefix, sorted in ascending order.\n     *\n     * <p>Note this method should not be used for platform VPN profiles. </p>\n     *\n     * @param prefix The prefix to match.\n     * @return an array of strings representing the name suffixes stored in the profile database\n     * matching the given prefix. The return value may be empty but never null.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Intent getIntentForConfirmation()", "public Intent provisionVpnProfile(@NonNull PlatformVpnProfile profile)", "public void deleteProvisionedVpnProfile()", "public String startProvisionedVpnProfileSession()", "public void startProvisionedVpnProfile()", "public void stopProvisionedVpnProfile()", "public VpnConfig getVpnConfig(@UserIdInt int userId)", "public VpnProfileState getProvisionedVpnProfileState()", "public void factoryReset()", "public boolean prepareVpn(@Nullable String oldPackage, @Nullable String newPackage, int userId)", "public void setVpnPackageAuthorization(String packageName, int userId, @VpnManager.VpnType int vpnType)", "public boolean isAlwaysOnVpnPackageSupportedForUser(int userId, @Nullable String vpnPackage)", "public boolean setAlwaysOnVpnPackageForUser(int userId, @Nullable String vpnPackage, boolean lockdownEnabled, @Nullable List<String> lockdownAllowlist)", "public String getAlwaysOnVpnPackageForUser(int userId)", "public boolean isVpnLockdownEnabled(int userId)", "public boolean setAppExclusionList(int userId, @NonNull String vpnPackage, @NonNull List<String> excludedApps)", "public List<String> getAppExclusionList(int userId, @NonNull String vpnPackage)", "public List<String> getVpnLockdownAllowlist(int userId)", "public LegacyVpnInfo getLegacyVpnInfo(@UserIdInt int userId)", "public void startLegacyVpn(VpnProfile profile)", "public boolean updateLockdownVpn()", "public byte[] getFromVpnProfileStore(@NonNull String name)", "public boolean putIntoVpnProfileStore(@NonNull String name, @NonNull byte[] blob)", "public boolean removeFromVpnProfileStore(@NonNull String name)", "public String[] listFromVpnProfileStore(@NonNull String prefix)" ],
  "variableNames" : [ "TYPE_VPN_NONE", "TYPE_VPN_SERVICE", "TYPE_VPN_PLATFORM", "TYPE_VPN_LEGACY", "TYPE_VPN_OEM", "NOTIFICATION_CHANNEL_VPN", "ACTION_VPN_MANAGER_EVENT", "CATEGORY_EVENT_IKE_ERROR", "CATEGORY_EVENT_NETWORK_ERROR", "CATEGORY_EVENT_DEACTIVATED_BY_USER", "CATEGORY_EVENT_ALWAYS_ON_STATE_CHANGED", "EXTRA_VPN_PROFILE_STATE", "EXTRA_SESSION_KEY", "EXTRA_UNDERLYING_NETWORK", "EXTRA_UNDERLYING_NETWORK_CAPABILITIES", "EXTRA_UNDERLYING_LINK_PROPERTIES", "EXTRA_TIMESTAMP_MILLIS", "EXTRA_ERROR_CLASS", "EXTRA_ERROR_CODE", "ERROR_CLASS_NOT_RECOVERABLE", "ERROR_CLASS_RECOVERABLE", "ERROR_CODE_NETWORK_UNKNOWN_HOST", "ERROR_CODE_NETWORK_PROTOCOL_TIMEOUT", "ERROR_CODE_NETWORK_LOST", "ERROR_CODE_NETWORK_IO", "mContext", "mService" ]
}