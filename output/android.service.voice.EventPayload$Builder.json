{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/voice/AlwaysOnHotwordDetector.java",
  "packageName" : "android.service.voice",
  "className" : "Builder",
  "comment" : "\n         * Builder class for {@link EventPayload} objects\n         *\n         * @hide\n         ",
  "links" : [ "EventPayload" ],
  "variables" : [ {
    "name" : "mCaptureAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCaptureSession",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDataFormat",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mData",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHotwordDetectedResult",
    "type" : "HotwordDetectedResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioStream",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyphraseExtras",
    "type" : "List<KeyphraseRecognitionExtra>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHalEventReceivedMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRecognitionStopped",
    "type" : "boolean",
    "comment" : " default to true to keep prior behavior",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setCaptureAvailable(boolean captureAvailable)",
    "returnType" : "Builder",
    "comment" : "\n             * Indicates if {@code captureSession} can be used to continue capturing more audio from\n             * the DSP hardware.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCaptureSession(int captureSession)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the session ID to start a capture from the DSP.\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCaptureAudioFormat(@NonNull AudioFormat audioFormat)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the format of the audio obtained using {@link #getTriggerAudio()}.\n             ",
    "links" : [ "#getTriggerAudio()" ]
  }, {
    "name" : "public Builder setDataFormat(@DataFormat int dataFormat)",
    "returnType" : "Builder",
    "comment" : "\n             * Conveys the format of the additional data that is triggered with the keyphrase event.\n             *\n             * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n             * @see DataFormat\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setData(@NonNull byte[] data)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets additional raw data that is triggered with the keyphrase event.\n             *\n             * <p>A {@link android.hardware.soundtrigger.SoundTriggerModule} may populate this\n             * field with opaque data for use by system applications who know about voice\n             * engine internals. Data may be null if the field is not populated by the\n             * {@link android.hardware.soundtrigger.SoundTriggerModule}.\n             *\n             * <p>If {@link #getDataFormat()} is {@link #DATA_FORMAT_TRIGGER_AUDIO}, then the\n             * entirety of this\n             * buffer is expected to be of the format from {@link #getCaptureAudioFormat()}.\n             *\n             * @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO\n             ",
    "links" : [ "#DATA_FORMAT_TRIGGER_AUDIO", "#getDataFormat()", "android.hardware.soundtrigger.SoundTriggerModule", "#getCaptureAudioFormat()" ]
  }, {
    "name" : "public Builder setHotwordDetectedResult(@NonNull HotwordDetectedResult hotwordDetectedResult)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets {@link HotwordDetectedResult} associated with the hotword event, passed from\n             * {@link HotwordDetectionService}.\n             ",
    "links" : [ "android.service.voice.HotwordDetectionService", "android.service.voice.HotwordDetectedResult" ]
  }, {
    "name" : "public Builder setAudioStream(@NonNull ParcelFileDescriptor audioStream)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets a stream with bytes corresponding to the open audio stream with hotword data.\n             *\n             * <p>This data represents an audio stream in the format returned by\n             * {@link #getCaptureAudioFormat}.\n             *\n             * <p>Clients are expected to start consuming the stream within 1 second of receiving\n             * the\n             * event.\n             ",
    "links" : [ "#getCaptureAudioFormat" ]
  }, {
    "name" : "public Builder setKeyphraseRecognitionExtras(@NonNull List<KeyphraseRecognitionExtra> keyphraseRecognitionExtras)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets the keyphrases recognized by the voice engine with additional confidence\n             * information\n             ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHalEventReceivedMillis(@ElapsedRealtimeLong long halEventReceivedMillis)",
    "returnType" : "Builder",
    "comment" : "\n             * Timestamp of when the trigger event from SoundTriggerHal was received by the\n             * framework.\n             *\n             * Clock monotonic including suspend time or its equivalent on the system,\n             * in the same units and timebase as {@link SystemClock#elapsedRealtime()}.\n             ",
    "links" : [ "android.os.SystemClock#elapsedRealtime()" ]
  }, {
    "name" : "public Builder setIsRecognitionStopped(boolean isRecognitionStopped)",
    "returnType" : "Builder",
    "comment" : "\n             * Sets whether the system has stopped hotword recognition because of this detection.\n             ",
    "links" : [ ]
  }, {
    "name" : "public EventPayload build()",
    "returnType" : "EventPayload",
    "comment" : "\n             * Builds an {@link EventPayload} instance\n             ",
    "links" : [ "EventPayload" ]
  } ],
  "methodNames" : [ "public Builder setCaptureAvailable(boolean captureAvailable)", "public Builder setCaptureSession(int captureSession)", "public Builder setCaptureAudioFormat(@NonNull AudioFormat audioFormat)", "public Builder setDataFormat(@DataFormat int dataFormat)", "public Builder setData(@NonNull byte[] data)", "public Builder setHotwordDetectedResult(@NonNull HotwordDetectedResult hotwordDetectedResult)", "public Builder setAudioStream(@NonNull ParcelFileDescriptor audioStream)", "public Builder setKeyphraseRecognitionExtras(@NonNull List<KeyphraseRecognitionExtra> keyphraseRecognitionExtras)", "public Builder setHalEventReceivedMillis(@ElapsedRealtimeLong long halEventReceivedMillis)", "public Builder setIsRecognitionStopped(boolean isRecognitionStopped)", "public EventPayload build()" ],
  "variableNames" : [ "mCaptureAvailable", "mCaptureSession", "mAudioFormat", "mDataFormat", "mData", "mHotwordDetectedResult", "mAudioStream", "mKeyphraseExtras", "mHalEventReceivedMillis", "mIsRecognitionStopped" ]
}