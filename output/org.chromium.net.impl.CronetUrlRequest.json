{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/impl/CronetUrlRequest.java",
  "packageName" : "org.chromium.net.impl",
  "className" : "CronetUrlRequest",
  "comment" : "\n * UrlRequest using Chromium HTTP stack implementation. Could be accessed from\n * any thread on Executor. Cancel can be called from any thread.\n * All @CallByNative methods are called on native network thread\n * and post tasks with listener calls onto Executor. Upon return from listener\n * callback native request adapter is called on executive thread and posts\n * native tasks to native network thread. Because Cancel could be called from\n * any thread it is protected by mUrlRequestAdapterLock.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mAllowDirectExecutor",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUrlRequestAdapter",
    "type" : "long",
    "comment" : " Native adapter object, owned by UrlRequest. ",
    "links" : [ ]
  }, {
    "name" : "mStarted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitingOnRedirect",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWaitingOnRead",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUrlRequestAdapterLock",
    "type" : "Object",
    "comment" : "\n     * Synchronize access to mUrlRequestAdapter, mStarted, mWaitingOnRedirect,\n     * and mWaitingOnRead.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRequestContext",
    "type" : "CronetUrlRequestContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "Executor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUrlChain",
    "type" : "List<String>",
    "comment" : "\n     * URL chain contains the URL currently being requested, and\n     * all URLs previously requested. New URLs are added before\n     * mCallback.onRedirectReceived is called.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "VersionSafeCallbacks.UrlRequestCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialUrl",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdempotency",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialMethod",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestHeaders",
    "type" : "HeadersList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestAnnotations",
    "type" : "Collection<Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableCache",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableConnectionMigration",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTagSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsTag",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUidSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrafficStatsUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequestFinishedListener",
    "type" : "VersionSafeCallbacks.RequestFinishedInfoListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCronetEngineId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLogger",
    "type" : "CronetLogger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUploadDataStream",
    "type" : "CronetUploadDataStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResponseInfo",
    "type" : "UrlResponseInfoImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFinishedReason",
    "type" : "int",
    "comment" : " UrlRequest.Callback's and RequestFinishedInfo.Listener's executors after the last update.",
    "links" : [ ]
  }, {
    "name" : "mException",
    "type" : "CronetException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetrics",
    "type" : "CronetMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuicConnectionMigrationAttempted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mQuicConnectionMigrationSuccessful",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOnReadCompletedTask",
    "type" : "OnReadCompletedRunnable",
    "comment" : "\n     * Listener callback is repeatedly invoked when each read is completed, so it\n     * is cached as a member variable.\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnDestroyedCallbackForTesting",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setHttpMethod(String method)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addHeader(String header, String value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUploadDataProvider(UploadDataProvider uploadDataProvider, Executor executor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getHttpMethod()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDirectExecutorAllowed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCacheDisabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTrafficStatsTag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTrafficStatsTag()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTrafficStatsUid()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getTrafficStatsUid()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPriority()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public HeaderBlock getHeaders()",
    "returnType" : "HeaderBlock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void startInternalLocked()",
    "returnType" : "void",
    "comment" : "\n     * Starts fully configured request. Could execute on UploadDataProvider executor.\n     * Caller is expected to ensure that request isn't canceled and mUrlRequestAdapter is valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void followRedirect()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void read(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDone()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDoneLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getStatus(UrlRequest.StatusListener unsafeListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOnDestroyedUploadCallbackForTesting(Runnable onDestroyedUploadCallbackForTesting)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getUrlRequestAdapterForTesting()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postTaskToExecutor(Runnable task)",
    "returnType" : "void",
    "comment" : "\n     * Posts task to application Executor. Used for Listener callbacks\n     * and other tasks that should not be executed on network thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int convertRequestPriority(int priority)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int convertIdempotency(int idempotency)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long estimateHeadersSizeInBytes(Map<String, List<String>> headers)",
    "returnType" : "long",
    "comment" : "\n     * Estimates the byte size of the headers in their on-wire format.\n     * We are not really interested in their specific size but something which is close enough.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long estimateHeadersSizeInBytes(HeadersList headers)",
    "returnType" : "long",
    "comment" : "\n     * Estimates the byte size of the headers in their on-wire format.\n     * We are not really interested in their specific size but something which is close enough.\n     ",
    "links" : [ ]
  }, {
    "name" : "private UrlResponseInfoImpl prepareResponseInfoOnNetworkThread(int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)",
    "returnType" : "UrlResponseInfoImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkNotStarted()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void destroyRequestAdapterLocked(@RequestFinishedInfoImpl.FinishedReason int finishedReason)",
    "returnType" : "void",
    "comment" : "\n     * Helper method to set final status of CronetUrlRequest and clean up the\n     * native request adapter.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onCallbackException(Exception e)",
    "returnType" : "void",
    "comment" : "\n     * If callback method throws an exception, request gets canceled\n     * and exception is reported via onFailed listener callback.\n     * Only called on the Executor.\n     ",
    "links" : [ ]
  }, {
    "name" : " void onUploadException(Throwable e)",
    "returnType" : "void",
    "comment" : " Called when UploadDataProvider encounters an error. ",
    "links" : [ ]
  }, {
    "name" : "private void failWithException(final CronetException exception)",
    "returnType" : "void",
    "comment" : " Fails the request with an exception on any thread. ",
    "links" : [ ]
  }, {
    "name" : "private void onRedirectReceived(final String newLocation, int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called before following redirects. The redirect will only be followed if\n     * {@link #followRedirect()} is called. If the redirect response has a body, it will be ignored.\n     * This will only be called between start and onResponseStarted.\n     *\n     * @param newLocation Location where request is redirected.\n     * @param httpStatusCode from redirect response\n     * @param receivedByteCount count of bytes received for redirect response\n     * @param headers an array of response headers with keys at the even indices\n     *         followed by the corresponding values at the odd indices.\n     ",
    "links" : [ "#followRedirect()" ]
  }, {
    "name" : "private void onResponseStarted(int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called when the final set of headers, after all redirects,\n     * is received. Can only be called once for each request.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onReadCompleted(final ByteBuffer byteBuffer, int bytesRead, int initialPosition, int initialLimit, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called whenever data is received. The ByteBuffer remains\n     * valid only until listener callback. Or if the callback\n     * pauses the request, it remains valid until the request is resumed.\n     * Cancelling the request also invalidates the buffer.\n     *\n     * @param byteBuffer ByteBuffer containing received data, starting at\n     *        initialPosition. Guaranteed to have at least one read byte. Its\n     *        limit has not yet been updated to reflect the bytes read.\n     * @param bytesRead Number of bytes read.\n     * @param initialPosition Original position of byteBuffer when passed to\n     *        read(). Used as a minimal check that the buffer hasn't been\n     *        modified while reading from the network.\n     * @param initialLimit Original limit of byteBuffer when passed to\n     *        read(). Used as a minimal check that the buffer hasn't been\n     *        modified while reading from the network.\n     * @param receivedByteCount number of bytes received.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onSucceeded(long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called when request is completed successfully, no callbacks will be\n     * called afterwards.\n     *\n     * @param receivedByteCount number of bytes received.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onError(int errorCode, int nativeError, int nativeQuicError, String errorString, long receivedByteCount)",
    "returnType" : "void",
    "comment" : "\n     * Called when error has occurred, no callbacks will be called afterwards.\n     *\n     * @param errorCode Error code represented by {@code UrlRequestError} that should be mapped\n     *                  to one of {@link NetworkException#ERROR_HOSTNAME_NOT_RESOLVED\n     *                  NetworkException.ERROR_*}.\n     * @param nativeError native net error code.\n     * @param errorString textual representation of the error code.\n     * @param receivedByteCount number of bytes received.\n     ",
    "links" : [ "org.chromium.net.NetworkException#ERROR_HOSTNAME_NOT_RESOLVEDNetworkException.ERROR_" ]
  }, {
    "name" : "private void onCanceled()",
    "returnType" : "void",
    "comment" : " Called when request is canceled, no callbacks will be called afterwards. ",
    "links" : [ ]
  }, {
    "name" : "private void onStatus(final VersionSafeCallbacks.UrlRequestStatusListener listener, final int loadState)",
    "returnType" : "void",
    "comment" : "\n     * Called by the native code when request status is fetched from the\n     * native stack.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onMetricsCollected(long requestStartMs, long dnsStartMs, long dnsEndMs, long connectStartMs, long connectEndMs, long sslStartMs, long sslEndMs, long sendingStartMs, long sendingEndMs, long pushStartMs, long pushEndMs, long responseStartMs, long requestEndMs, boolean socketReused, long sentByteCount, long receivedByteCount, boolean quicConnectionMigrationAttempted, boolean quicConnectionMigrationSuccessful)",
    "returnType" : "void",
    "comment" : "\n     * Called by the native code on the network thread to report metrics. Happens before\n     * onSucceeded, onError and onCanceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void onNativeAdapterDestroyed()",
    "returnType" : "void",
    "comment" : " Called when the native adapter is destroyed. ",
    "links" : [ ]
  }, {
    "name" : " void checkCallingThread()",
    "returnType" : "void",
    "comment" : " Enforces prohibition of direct execution. ",
    "links" : [ ]
  }, {
    "name" : "private int mapUrlRequestErrorToApiErrorCode(int errorCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private CronetTrafficInfo buildCronetTrafficInfo()",
    "returnType" : "CronetTrafficInfo",
    "comment" : "\n     * Builds the {@link CronetTrafficInfo} associated to this request internal state.\n     * This helper methods makes strong assumptions about the state of the request. For this reason\n     * it should only be called within {@link CronetUrlRequest#maybeReportMetrics} where these\n     * assumptions are guaranteed to be true.\n     * @return the {@link CronetTrafficInfo} associated to this request internal state\n     ",
    "links" : [ "org.chromium.net.impl.CronetLogger.CronetTrafficInfo", "org.chromium.net.impl.CronetUrlRequest#maybeReportMetrics" ]
  }, {
    "name" : "private void maybeReportMetrics()",
    "returnType" : "void",
    "comment" : " after Callback's onSucceeded, onFailed and onCanceled.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setHttpMethod(String method)", "public void addHeader(String header, String value)", "public void setUploadDataProvider(UploadDataProvider uploadDataProvider, Executor executor)", "public String getHttpMethod()", "public boolean isDirectExecutorAllowed()", "public boolean isCacheDisabled()", "public boolean hasTrafficStatsTag()", "public int getTrafficStatsTag()", "public boolean hasTrafficStatsUid()", "public int getTrafficStatsUid()", "public int getPriority()", "public HeaderBlock getHeaders()", "public void start()", "private void startInternalLocked()", "public void followRedirect()", "public void read(ByteBuffer buffer)", "public void cancel()", "public boolean isDone()", "private boolean isDoneLocked()", "public void getStatus(UrlRequest.StatusListener unsafeListener)", "public void setOnDestroyedCallbackForTesting(Runnable onDestroyedCallbackForTesting)", "public void setOnDestroyedUploadCallbackForTesting(Runnable onDestroyedUploadCallbackForTesting)", "public long getUrlRequestAdapterForTesting()", "private void postTaskToExecutor(Runnable task)", "private static int convertRequestPriority(int priority)", "private static int convertIdempotency(int idempotency)", "public static long estimateHeadersSizeInBytes(Map<String, List<String>> headers)", "public static long estimateHeadersSizeInBytes(HeadersList headers)", "private UrlResponseInfoImpl prepareResponseInfoOnNetworkThread(int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)", "private void checkNotStarted()", "private void destroyRequestAdapterLocked(@RequestFinishedInfoImpl.FinishedReason int finishedReason)", "private void onCallbackException(Exception e)", " void onUploadException(Throwable e)", "private void failWithException(final CronetException exception)", "private void onRedirectReceived(final String newLocation, int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)", "private void onResponseStarted(int httpStatusCode, String httpStatusText, String[] headers, boolean wasCached, String negotiatedProtocol, String proxyServer, long receivedByteCount)", "private void onReadCompleted(final ByteBuffer byteBuffer, int bytesRead, int initialPosition, int initialLimit, long receivedByteCount)", "private void onSucceeded(long receivedByteCount)", "private void onError(int errorCode, int nativeError, int nativeQuicError, String errorString, long receivedByteCount)", "private void onCanceled()", "private void onStatus(final VersionSafeCallbacks.UrlRequestStatusListener listener, final int loadState)", "private void onMetricsCollected(long requestStartMs, long dnsStartMs, long dnsEndMs, long connectStartMs, long connectEndMs, long sslStartMs, long sslEndMs, long sendingStartMs, long sendingEndMs, long pushStartMs, long pushEndMs, long responseStartMs, long requestEndMs, boolean socketReused, long sentByteCount, long receivedByteCount, boolean quicConnectionMigrationAttempted, boolean quicConnectionMigrationSuccessful)", "private void onNativeAdapterDestroyed()", " void checkCallingThread()", "private int mapUrlRequestErrorToApiErrorCode(int errorCode)", "private CronetTrafficInfo buildCronetTrafficInfo()", "private void maybeReportMetrics()" ],
  "variableNames" : [ "mAllowDirectExecutor", "mUrlRequestAdapter", "mStarted", "mWaitingOnRedirect", "mWaitingOnRead", "mUrlRequestAdapterLock", "mRequestContext", "mExecutor", "mUrlChain", "mCallback", "mInitialUrl", "mPriority", "mIdempotency", "mInitialMethod", "mRequestHeaders", "mRequestAnnotations", "mDisableCache", "mDisableConnectionMigration", "mTrafficStatsTagSet", "mTrafficStatsTag", "mTrafficStatsUidSet", "mTrafficStatsUid", "mRequestFinishedListener", "mNetworkHandle", "mCronetEngineId", "mLogger", "mUploadDataStream", "mResponseInfo", "mFinishedReason", "mException", "mMetrics", "mQuicConnectionMigrationAttempted", "mQuicConnectionMigrationSuccessful", "mOnReadCompletedTask", "mOnDestroyedCallbackForTesting" ]
}