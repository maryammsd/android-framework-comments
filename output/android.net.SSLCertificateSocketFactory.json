{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/SSLCertificateSocketFactory.java",
  "packageName" : "android.net",
  "className" : "SSLCertificateSocketFactory",
  "comment" : "\n * SSLSocketFactory implementation with several extra features:\n *\n * <ul>\n * <li>Timeout specification for SSL handshake operations\n * <li>Hostname verification in most cases (see WARNINGs below)\n * <li>Optional SSL session caching with {@link SSLSessionCache}\n * <li>Optionally bypass all SSL certificate checks\n * </ul>\n *\n * The handshake timeout does not apply to actual TCP socket connection.\n * If you want a connection timeout as well, use {@link #createSocket()}\n * and {@link Socket#connect(java.net.SocketAddress, int)}, after which you\n * must verify the identity of the server you are connected to.\n *\n * <p class=\"caution\"><b>Most {@link SSLSocketFactory} implementations do not\n * verify the server's identity, allowing man-in-the-middle attacks.</b>\n * This implementation does check the server's certificate hostname, but only\n * for createSocket variants that specify a hostname.  When using methods that\n * use {@link InetAddress} or which return an unconnected socket, you MUST\n * verify the server's identity yourself to ensure a secure connection.\n *\n * Refer to\n * <a href=\"https://developer.android.com/training/articles/security-gms-provider.html\">\n * Updating Your Security Provider to Protect Against SSL Exploits</a>\n * for further information.</p>\n *\n * <p>The recommended way to verify the server's identity is to use\n * {@link HttpsURLConnection#getDefaultHostnameVerifier()} to get a\n * {@link HostnameVerifier} to verify the certificate hostname.\n *\n * <p><b>Warning</b>: Some methods on this class return connected sockets and some return\n * unconnected sockets.  For the methods that return connected sockets, setting\n * connection- or handshake-related properties on those sockets will have no effect.\n *\n * <p>On development devices, \"setprop socket.relaxsslcheck yes\" bypasses all\n * SSL certificate and hostname checks for testing purposes.  This setting\n * requires root access.\n *\n * @deprecated This class has less error-prone replacements using standard APIs.  To create an\n * {@code SSLSocket}, obtain an {@link SSLSocketFactory} from {@link SSLSocketFactory#getDefault()}\n * or {@link javax.net.ssl.SSLContext#getSocketFactory()}.  To verify hostnames, pass\n * {@code \"HTTPS\"} to\n * {@link javax.net.ssl.SSLParameters#setEndpointIdentificationAlgorithm(String)}.  To enable ALPN,\n * use {@link javax.net.ssl.SSLParameters#setApplicationProtocols(String[])}.  To enable SNI,\n * use {@link javax.net.ssl.SSLParameters#setServerNames(java.util.List)}.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INSECURE_TRUST_MANAGER",
    "type" : "TrustManager[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInsecureFactory",
    "type" : "SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecureFactory",
    "type" : "SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustManagers",
    "type" : "TrustManager[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyManagers",
    "type" : "KeyManager[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNpnProtocols",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAlpnProtocols",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannelIdPrivateKey",
    "type" : "PrivateKey",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandshakeTimeoutMillis",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCache",
    "type" : "SSLClientSessionCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSecure",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SocketFactory getDefault(int handshakeTimeoutMillis)",
    "returnType" : "SocketFactory",
    "comment" : "\n     * Returns a new socket factory instance with an optional handshake timeout.\n     *\n     * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0\n     *         for none.  The socket timeout is reset to 0 after the handshake.\n     * @return a new SSLSocketFactory with the specified parameters\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SSLSocketFactory getDefault(int handshakeTimeoutMillis, SSLSessionCache cache)",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Returns a new socket factory instance with an optional handshake timeout\n     * and SSL session cache.\n     *\n     * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0\n     *         for none.  The socket timeout is reset to 0 after the handshake.\n     * @param cache The {@link SSLSessionCache} to use, or null for no cache.\n     * @return a new SSLSocketFactory with the specified parameters\n     ",
    "links" : [ "android.net.SSLSessionCache" ]
  }, {
    "name" : "public static SSLSocketFactory getInsecure(int handshakeTimeoutMillis, SSLSessionCache cache)",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Returns a new instance of a socket factory with all SSL security checks\n     * disabled, using an optional handshake timeout and SSL session cache.\n     *\n     * <p class=\"caution\"><b>Warning:</b> Sockets created using this factory\n     * are vulnerable to man-in-the-middle attacks!</p>\n     *\n     * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0\n     *         for none.  The socket timeout is reset to 0 after the handshake.\n     * @param cache The {@link SSLSessionCache} to use, or null for no cache.\n     * @return an insecure SSLSocketFactory with the specified parameters\n     ",
    "links" : [ "android.net.SSLSessionCache" ]
  }, {
    "name" : "public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int handshakeTimeoutMillis, SSLSessionCache cache)",
    "returnType" : "org.apache.http.conn.ssl.SSLSocketFactory",
    "comment" : "\n     * Returns a socket factory (also named SSLSocketFactory, but in a different\n     * namespace) for use with the Apache HTTP stack.\n     *\n     * @param handshakeTimeoutMillis to use for SSL connection handshake, or 0\n     *         for none.  The socket timeout is reset to 0 after the handshake.\n     * @param cache The {@link SSLSessionCache} to use, or null for no cache.\n     * @return a new SocketFactory with the specified parameters\n     *\n     * @deprecated Use {@link #getDefault()} along with a {@link javax.net.ssl.HttpsURLConnection}\n     *     instead. The Apache HTTP client is no longer maintained and may be removed in a future\n     *     release. Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n     *     for further details.\n     *\n     * @removed\n     ",
    "links" : [ "#getDefault()", "javax.net.ssl.HttpsURLConnection", "android.net.SSLSessionCache" ]
  }, {
    "name" : "public static void verifyHostname(Socket socket, String hostname) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Verify the hostname of the certificate used by the other end of a connected socket using the\n     * {@link HostnameVerifier} obtained from {@code\n     * HttpsURLConnection.getDefaultHostnameVerifier()}. You MUST call this if you did not supply a\n     * hostname to {@link #createSocket()}.  It is harmless to call this method redundantly if the\n     * hostname has already been verified.\n     *\n     * <p>Wildcard certificates are allowed to verify any matching hostname, so\n     * \"foo.bar.example.com\" is verified if the peer has a certificate for \"*.example.com\".\n     *\n     * @param socket An SSL socket which has been connected to a server\n     * @param hostname The expected hostname of the remote server\n     * @throws IOException if something goes wrong handshaking with the server\n     * @throws SSLPeerUnverifiedException if the server cannot prove its identity\n     *\n     * @hide\n     ",
    "links" : [ "#createSocket()", "javax.net.ssl.HostnameVerifier" ]
  }, {
    "name" : "private SSLSocketFactory makeSocketFactory(KeyManager[] keyManagers, TrustManager[] trustManagers)",
    "returnType" : "SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSslCheckRelaxed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private synchronized SSLSocketFactory getDelegate()",
    "returnType" : "SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTrustManagers(TrustManager[] trustManager)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link TrustManager}s to be used for connections made by this factory.\n     ",
    "links" : [ "javax.net.ssl.TrustManager" ]
  }, {
    "name" : "public void setNpnProtocols(byte[][] npnProtocols)",
    "returnType" : "void",
    "comment" : "\n     * Sets the\n     * <a class=\"external\" href=\"https://tools.ietf.org/id/draft-agl-tls-nextprotoneg-03.html\">Next\n     * Protocol Negotiation (NPN)</a> protocols that this peer is interested in.\n     *\n     * <p>For servers this is the sequence of protocols to advertise as\n     * supported, in order of preference. This list is sent unencrypted to\n     * all clients that support NPN.\n     *\n     * <p>For clients this is a list of supported protocols to match against the\n     * server's list. If there is no protocol supported by both client and\n     * server then the first protocol in the client's list will be selected.\n     * The order of the client's protocols is otherwise insignificant.\n     *\n     * @param npnProtocols a non-empty list of protocol byte arrays. All arrays\n     *     must be non-empty and of length less than 256.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAlpnProtocols(byte[][] protocols)",
    "returnType" : "void",
    "comment" : "\n     * Sets the\n     * <a href=\"http://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-01\">\n     * Application Layer Protocol Negotiation (ALPN)</a> protocols that this peer\n     * is interested in.\n     *\n     * <p>For servers this is the sequence of protocols to advertise as\n     * supported, in order of preference. This list is sent unencrypted to\n     * all clients that support ALPN.\n     *\n     * <p>For clients this is a list of supported protocols to match against the\n     * server's list. If there is no protocol supported by both client and\n     * server then the first protocol in the client's list will be selected.\n     * The order of the client's protocols is otherwise insignificant.\n     *\n     * @param protocols a non-empty list of protocol byte arrays. All arrays\n     *     must be non-empty and of length less than 256.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] toLengthPrefixedList(byte[]... items)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns an array containing the concatenation of length-prefixed byte\n     * strings.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getNpnSelectedProtocol(Socket socket)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the <a href=\"http://technotes.googlecode.com/git/nextprotoneg.html\">Next\n     * Protocol Negotiation (NPN)</a> protocol selected by client and server, or\n     * null if no protocol was negotiated.\n     *\n     * @param socket a socket created by this factory.\n     * @throws IllegalArgumentException if the socket was not created by this factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getAlpnSelectedProtocol(Socket socket)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the\n     * <a href=\"http://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-01\">Application\n     * Layer Protocol Negotiation (ALPN)</a> protocol selected by client and server, or null\n     * if no protocol was negotiated.\n     *\n     * @param socket a socket created by this factory.\n     * @throws IllegalArgumentException if the socket was not created by this factory.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setKeyManagers(KeyManager[] keyManagers)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link KeyManager}s to be used for connections made by this factory.\n     ",
    "links" : [ "javax.net.ssl.KeyManager" ]
  }, {
    "name" : "public void setChannelIdPrivateKey(PrivateKey privateKey)",
    "returnType" : "void",
    "comment" : "\n     * Sets the private key to be used for TLS Channel ID by connections made by this\n     * factory.\n     *\n     * @param privateKey private key (enables TLS Channel ID) or {@code null} for no key (disables\n     *        TLS Channel ID). The private key has to be an Elliptic Curve (EC) key based on the\n     *        NIST P-256 curve (aka SECG secp256r1 or ANSI X9.62 prime256v1).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUseSessionTickets(Socket socket, boolean useSessionTickets)",
    "returnType" : "void",
    "comment" : "\n     * Enables <a href=\"http://tools.ietf.org/html/rfc5077#section-3.2\">session ticket</a>\n     * support on the given socket.\n     *\n     * @param socket a socket created by this factory\n     * @param useSessionTickets {@code true} to enable session ticket support on this socket.\n     * @throws IllegalArgumentException if the socket was not created by this factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHostname(Socket socket, String hostName)",
    "returnType" : "void",
    "comment" : "\n     * Turns on <a href=\"http://tools.ietf.org/html/rfc6066#section-3\">Server\n     * Name Indication (SNI)</a> on a given socket.\n     *\n     * @param socket a socket created by this factory.\n     * @param hostName the desired SNI hostname, null to disable.\n     * @throws IllegalArgumentException if the socket was not created by this factory.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSoWriteTimeout(Socket socket, int writeTimeoutMilliseconds) throws SocketException",
    "returnType" : "void",
    "comment" : "\n     * Sets this socket's SO_SNDTIMEO write timeout in milliseconds.\n     * Use 0 for no timeout.\n     * To take effect, this option must be set before the blocking method was called.\n     *\n     * @param socket a socket created by this factory.\n     * @param timeout the desired write timeout in milliseconds.\n     * @throws IllegalArgumentException if the socket was not created by this factory.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static OpenSSLSocketImpl castToOpenSSLSocket(Socket socket)",
    "returnType" : "OpenSSLSocketImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket(Socket k, String host, int port, boolean close) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>By default, this method returns a <i>connected</i> socket and verifies the peer's\n     * certificate hostname after connecting using the {@link HostnameVerifier} obtained from\n     * {@code HttpsURLConnection.getDefaultHostnameVerifier()}; if this instance was created with\n     * {@link #getInsecure(int, SSLSessionCache)}, it returns a socket that is <i>not connected</i>\n     * instead.\n     ",
    "links" : [ "#getInsecure(int", "javax.net.ssl.HostnameVerifier" ]
  }, {
    "name" : "public Socket createSocket() throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * Creates a new socket which is <i>not connected</i> to any remote host.\n     * You must use {@link Socket#connect} to connect the socket.\n     *\n     * <p class=\"caution\"><b>Warning:</b> Hostname verification is not performed\n     * with this method.  You MUST verify the server's identity after connecting\n     * the socket to avoid man-in-the-middle attacks.</p>\n     ",
    "links" : [ "java.net.Socket#connect" ]
  }, {
    "name" : "public Socket createSocket(InetAddress addr, int port, InetAddress localAddr, int localPort) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This method returns a socket that is <i>not connected</i>.\n     *\n     * <p class=\"caution\"><b>Warning:</b> Hostname verification is not performed\n     * with this method.  You MUST verify the server's identity after connecting\n     * the socket to avoid man-in-the-middle attacks.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket(InetAddress addr, int port) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>This method returns a socket that is <i>not connected</i>.\n     *\n     * <p class=\"caution\"><b>Warning:</b> Hostname verification is not performed\n     * with this method.  You MUST verify the server's identity after connecting\n     * the socket to avoid man-in-the-middle attacks.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket(String host, int port, InetAddress localAddr, int localPort) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>By default, this method returns a <i>connected</i> socket and verifies the peer's\n     * certificate hostname after connecting using the {@link HostnameVerifier} obtained from\n     * {@code HttpsURLConnection.getDefaultHostnameVerifier()}; if this instance was created with\n     * {@link #getInsecure(int, SSLSessionCache)}, it returns a socket that is <i>not connected</i>\n     * instead.\n     ",
    "links" : [ "#getInsecure(int", "javax.net.ssl.HostnameVerifier" ]
  }, {
    "name" : "public Socket createSocket(String host, int port) throws IOException",
    "returnType" : "Socket",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>By default, this method returns a <i>connected</i> socket and verifies the peer's\n     * certificate hostname after connecting using the {@link HostnameVerifier} obtained from\n     * {@code HttpsURLConnection.getDefaultHostnameVerifier()}; if this instance was created with\n     * {@link #getInsecure(int, SSLSessionCache)}, it returns a socket that is <i>not connected</i>\n     * instead.\n     ",
    "links" : [ "#getInsecure(int", "javax.net.ssl.HostnameVerifier" ]
  }, {
    "name" : "public String[] getDefaultCipherSuites()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getSupportedCipherSuites()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "INSECURE_TRUST_MANAGER", "mInsecureFactory", "mSecureFactory", "mTrustManagers", "mKeyManagers", "mNpnProtocols", "mAlpnProtocols", "mChannelIdPrivateKey", "mHandshakeTimeoutMillis", "mSessionCache", "mSecure" ],
  "methodNames" : [ "public static SocketFactory getDefault(int handshakeTimeoutMillis)", "public static SSLSocketFactory getDefault(int handshakeTimeoutMillis, SSLSessionCache cache)", "public static SSLSocketFactory getInsecure(int handshakeTimeoutMillis, SSLSessionCache cache)", "public static org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int handshakeTimeoutMillis, SSLSessionCache cache)", "public static void verifyHostname(Socket socket, String hostname) throws IOException", "private SSLSocketFactory makeSocketFactory(KeyManager[] keyManagers, TrustManager[] trustManagers)", "private static boolean isSslCheckRelaxed()", "private synchronized SSLSocketFactory getDelegate()", "public void setTrustManagers(TrustManager[] trustManager)", "public void setNpnProtocols(byte[][] npnProtocols)", "public void setAlpnProtocols(byte[][] protocols)", "public static byte[] toLengthPrefixedList(byte[]... items)", "public byte[] getNpnSelectedProtocol(Socket socket)", "public byte[] getAlpnSelectedProtocol(Socket socket)", "public void setKeyManagers(KeyManager[] keyManagers)", "public void setChannelIdPrivateKey(PrivateKey privateKey)", "public void setUseSessionTickets(Socket socket, boolean useSessionTickets)", "public void setHostname(Socket socket, String hostName)", "public void setSoWriteTimeout(Socket socket, int writeTimeoutMilliseconds) throws SocketException", "private static OpenSSLSocketImpl castToOpenSSLSocket(Socket socket)", "public Socket createSocket(Socket k, String host, int port, boolean close) throws IOException", "public Socket createSocket() throws IOException", "public Socket createSocket(InetAddress addr, int port, InetAddress localAddr, int localPort) throws IOException", "public Socket createSocket(InetAddress addr, int port) throws IOException", "public Socket createSocket(String host, int port, InetAddress localAddr, int localPort) throws IOException", "public Socket createSocket(String host, int port) throws IOException", "public String[] getDefaultCipherSuites()", "public String[] getSupportedCipherSuites()" ]
}