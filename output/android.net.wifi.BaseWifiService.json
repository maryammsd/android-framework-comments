{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/BaseWifiService.java",
  "packageName" : "android.net.wifi",
  "className" : "BaseWifiService",
  "comment" : "\n * Empty concrete class implementing IWifiManager with stub methods throwing runtime exceptions.\n *\n * This class is meant to be extended by real implementations of IWifiManager in order to facilitate\n * cross-repo changes to WiFi internal APIs, including the introduction of new APIs, the removal of\n * deprecated APIs, or the migration of existing API signatures.\n *\n * When an existing API is scheduled for removal, it can be removed from IWifiManager.aidl\n * immediately and marked as @Deprecated first in this class. Children inheriting this class are\n * then given a short grace period to update themselves before the @Deprecated stub is removed for\n * good. If the API scheduled for removal has a replacement or an overload (signature change),\n * these should be introduced before the stub is removed to allow children to migrate.\n *\n * When a new API is added to IWifiManager.aidl, a stub should be added in BaseWifiService as\n * well otherwise compilation will fail.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getSupportedFeatures()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getWifiActivityEnergyInfoAsync(IOnWifiActivityEnergyInfoListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParceledListSlice getConfiguredNetworks(String packageName, String featureId, boolean callerNetworksOnly)",
    "returnType" : "ParceledListSlice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParceledListSlice getPrivilegedConfiguredNetworks(String packageName, String featureId, Bundle extras)",
    "returnType" : "ParceledListSlice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiConfiguration getPrivilegedConnectedNetwork(String packageName, String featureId, Bundle extras)",
    "returnType" : "WifiConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setNetworkSelectionConfig(WifiNetworkSelectionConfig nsConfig)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getNetworkSelectionConfig(@NonNull IWifiNetworkSelectionConfigListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setThirdPartyAppEnablingWifiConfirmationDialogEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isThirdPartyAppEnablingWifiConfirmationDialogEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScreenOnScanSchedule(int[] scanScheduleSeconds, int[] scanType)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOneShotScreenOnConnectivityScanDelayMillis(int delayMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Map<Integer, List<ScanResult>>> getAllMatchingFqdnsForScanResults(List<ScanResult> scanResults)",
    "returnType" : "Map<String, Map<Integer, List<ScanResult>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSsidsAllowlist(String packageName, List<WifiSsid> ssids)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<WifiSsid> getSsidsAllowlist(String packageName)",
    "returnType" : "List<WifiSsid>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<OsuProvider, List<ScanResult>> getMatchingOsuProviders(List<ScanResult> scanResults)",
    "returnType" : "Map<OsuProvider, List<ScanResult>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<OsuProvider, PasspointConfiguration> getMatchingPasspointConfigsForOsuProviders(List<OsuProvider> osuProviders)",
    "returnType" : "Map<OsuProvider, PasspointConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addOrUpdateNetwork(WifiConfiguration config, String packageName, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiManager.AddNetworkResult addOrUpdateNetworkPrivileged(WifiConfiguration config, String packageName)",
    "returnType" : "WifiManager.AddNetworkResult",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addOrUpdatePasspointConfiguration(PasspointConfiguration config, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removePasspointConfiguration(String fqdn, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PasspointConfiguration> getPasspointConfigurations(String packageName)",
    "returnType" : "List<PasspointConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<WifiConfiguration> getWifiConfigsForPasspointProfiles(List<String> fqdnList)",
    "returnType" : "List<WifiConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryPasspointIcon(long bssid, String fileName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int matchProviderWithCurrentNetwork(String fqdn)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeNetwork(int netId, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeNonCallerConfiguredNetworks(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean enableNetwork(int netId, boolean disableOthers, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean disableNetwork(int netId, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void allowAutojoinGlobal(boolean choice)",
    "returnType" : "void",
    "comment" : " TO BE REMOVED ",
    "links" : [ ]
  }, {
    "name" : "public void allowAutojoinGlobal(boolean choice, String packageName, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryAutojoinGlobal(@NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void allowAutojoin(int netId, boolean choice)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void allowAutojoinPasspoint(String fqdn, boolean enableAutoJoin)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMacRandomizationSettingPasspointEnabled(String fqdn, boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPasspointMeteredOverride(String fqdn, int meteredOverride)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startScan(String packageName, String featureId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParceledListSlice getScanResults(String callingPackage, String callingFeatureId)",
    "returnType" : "ParceledListSlice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getChannelData(@NonNull IListListener listener, String packageName, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean disconnect(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean reconnect(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean reassociate(String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiInfo getConnectionInfo(String callingPackage, String callingFeatureId)",
    "returnType" : "WifiInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWifiEnabled(String packageName, boolean enable)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSubsystemRestartCallback(ISubsystemRestartCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSubsystemRestartCallback(ISubsystemRestartCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWifiNetworkStateChangedListener(IWifiNetworkStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeWifiNetworkStateChangedListener(IWifiNetworkStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restartWifiSubsystem()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWifiEnabledState()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerDriverCountryCodeChangedListener(@NonNull IOnWifiDriverCountryCodeChangedListener listener, @Nullable String packageName, @Nullable String featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterDriverCountryCodeChangedListener(@NonNull IOnWifiDriverCountryCodeChangedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getCountryCode(String packageName, String featureId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setOverrideCountryCode(@NonNull String countryCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearOverrideCountryCode()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultCountryCode(@NonNull String countryCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is24GHzBandSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is5GHzBandSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GHzBandSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is60GHzBandSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWifiStandardSupported(int standard)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DhcpInfo getDhcpInfo(String packageName)",
    "returnType" : "DhcpInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScanAlwaysAvailable(boolean isAvailable, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isScanAlwaysAvailable()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean acquireWifiLock(IBinder lock, int lockType, String tag, WorkSource ws)",
    "returnType" : "boolean",
    "comment" : "\n     * Following method is deprecated with\n     * {@link BaseWifiService#acquireWifiLock(IBinder, int, String, WorkSource, String, Bundle)}\n     * @deprecated This is no longer supported.\n     ",
    "links" : [ "android.net.wifi.BaseWifiService#acquireWifiLock(IBinder" ]
  }, {
    "name" : "public boolean acquireWifiLock(IBinder lock, int lockType, String tag, WorkSource ws, String packageName, Bundle extras)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateWifiLockWorkSource(IBinder lock, WorkSource ws)",
    "returnType" : "void",
    "comment" : "\n     * Following method is deprecated with\n     * {@link BaseWifiService#updateWifiLockWorkSource(IBinder, WorkSource, String, Bundle)}\n     * @deprecated This is no longer supported.\n     ",
    "links" : [ "android.net.wifi.BaseWifiService#updateWifiLockWorkSource(IBinder" ]
  }, {
    "name" : "public void updateWifiLockWorkSource(IBinder lock, WorkSource ws, String packageName, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean releaseWifiLock(IBinder lock)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initializeMulticastFiltering()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isMulticastEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void acquireMulticastLock(IBinder binder, String tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void releaseMulticastLock(String tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateInterfaceIpState(String ifaceName, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultCoexAlgorithmEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCoexUnsafeChannels(List<CoexUnsafeChannel> unsafeChannels, int restrictions)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerCoexCallback(ICoexCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterCoexCallback(ICoexCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startSoftAp(WifiConfiguration wifiConfig, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean startTetheredHotspot(SoftApConfiguration softApConfig, String packageName)",
    "returnType" : "boolean",
    "comment" : "\n     * Following method is deprecated with\n     * {@link #startTetheredHotspotRequest(TetheringManager.TetheringRequest, String)}\n     * @deprecated This is no longer supported.\n     ",
    "links" : [ "#startTetheredHotspotRequest(TetheringManager.TetheringRequest" ]
  }, {
    "name" : "public void startTetheredHotspotRequest(TetheringManager.TetheringRequest request, ISoftApCallback callback, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean stopSoftAp()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validateSoftApConfiguration(SoftApConfiguration config)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int startLocalOnlyHotspot(ILocalOnlyHotspotCallback callback, String packageName, String featureId, SoftApConfiguration customConfig, Bundle extras)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopLocalOnlyHotspot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerLocalOnlyHotspotSoftApCallback(ISoftApCallback callback, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterLocalOnlyHotspotSoftApCallback(ISoftApCallback callback, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startWatchLocalOnlyHotspot(ILocalOnlyHotspotCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopWatchLocalOnlyHotspot()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getWifiApEnabledState()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public WifiConfiguration getWifiApConfiguration()",
    "returnType" : "WifiConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SoftApConfiguration getSoftApConfiguration()",
    "returnType" : "SoftApConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryLastConfiguredTetheredApPassphraseSinceBoot(IStringListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWifiApConfiguration(WifiConfiguration wifiConfig, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setSoftApConfiguration(SoftApConfiguration softApConfig, String packageName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyUserOfApBandConversion(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableTdls(String remoteIPAddress, boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableTdlsWithRemoteIpAddress(String remoteIPAddress, boolean enable, @NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableTdlsWithMacAddress(String remoteMacAddress, boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableTdlsWithRemoteMacAddress(String remoteMacAddress, boolean enable, @NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void isTdlsOperationCurrentlyAvailable(@NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getMaxSupportedConcurrentTdlsSessions(@NonNull IIntegerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getNumberOfEnabledTdlsSessions(@NonNull IIntegerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getCurrentNetworkWpsNfcConfigurationToken()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableVerboseLogging(int verbose)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getVerboseLoggingLevel()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disableEphemeralNetwork(String SSID, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void factoryReset(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Network getCurrentNetwork()",
    "returnType" : "Network",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void retrieveWifiBackupData(@NonNull IByteArrayListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restoreWifiBackupData(byte[] data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] retrieveBackupData()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restoreBackupData(byte[] data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public byte[] retrieveSoftApBackupData()",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SoftApConfiguration restoreSoftApBackupData(byte[] data)",
    "returnType" : "SoftApConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void restoreSupplicantBackupData(byte[] supplicantData, byte[] ipConfigData)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startSubscriptionProvisioning(OsuProvider provider, IProvisioningCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWifiVerboseLoggingStatusChangedListener(IWifiVerboseLoggingStatusChangedListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeWifiVerboseLoggingStatusChangedListener(IWifiVerboseLoggingStatusChangedListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSoftApCallback(ISoftApCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSoftApCallback(ISoftApCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerTrafficStateCallback(ITrafficStateCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterTrafficStateCallback(ITrafficStateCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerNetworkRequestMatchCallback(INetworkRequestMatchCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterNetworkRequestMatchCallback(INetworkRequestMatchCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addNetworkSuggestions(List<WifiNetworkSuggestion> networkSuggestions, String callingPackageName, String callingFeatureId)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int removeNetworkSuggestions(List<WifiNetworkSuggestion> networkSuggestions, String callingPackageName, int action)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<WifiNetworkSuggestion> getNetworkSuggestions(String packageName)",
    "returnType" : "List<WifiNetworkSuggestion>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setCarrierNetworkOffloadEnabled(int subId, boolean merged, boolean enabled) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isCarrierNetworkOffloadEnabled(int subId, boolean merged) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getFactoryMacAddresses()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDeviceMobilityState(int state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDppAsConfiguratorInitiator(IBinder binder, String packageName, String enrolleeUri, int selectedNetworkId, int netRole, IDppCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDppAsEnrolleeInitiator(IBinder binder, String configuratorUri, IDppCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startDppAsEnrolleeResponder(IBinder binder, String deviceInfo, int curve, IDppCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopDppSession() throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addOnWifiUsabilityStatsListener(IOnWifiUsabilityStatsListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeOnWifiUsabilityStatsListener(IOnWifiUsabilityStatsListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void updateWifiUsabilityScore(int seqNum, int score, int predictionHorizonSec)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void connect(WifiConfiguration config, int netId, IActionListener callback)",
    "returnType" : "void",
    "comment" : " TO BE REMOVED ",
    "links" : [ ]
  }, {
    "name" : "public void connect(WifiConfiguration config, int netId, IActionListener callback, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : " TO BE REMOVED ",
    "links" : [ ]
  }, {
    "name" : "public void connect(WifiConfiguration config, int netId, IActionListener callback, @NonNull String packageName, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startRestrictingAutoJoinToSubscriptionId(int subId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopRestrictingAutoJoinToSubscriptionId()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void save(WifiConfiguration config, IActionListener callback)",
    "returnType" : "void",
    "comment" : " TO BE REMOVED ",
    "links" : [ ]
  }, {
    "name" : "public void save(WifiConfiguration config, IActionListener callback, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void forget(int netId, IActionListener callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerScanResultsCallback(IScanResultsCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterScanResultsCallback(IScanResultsCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerSuggestionConnectionStatusListener(ISuggestionConnectionStatusListener listener, String packageName, String featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterSuggestionConnectionStatusListener(ISuggestionConnectionStatusListener listener, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int calculateSignalLevel(int rssi)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPnoScanEnabled(boolean enabled, boolean enablePnoScanAfterWifiToggle, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<WifiConfiguration> getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List<ScanResult> scanResults)",
    "returnType" : "List<WifiConfiguration>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExternalPnoScanRequest(@NonNull IBinder binder, @NonNull IPnoScanResultsCallback callback, @NonNull List<WifiSsid> ssids, @NonNull int[] frequencies, @NonNull String packageName, @NonNull String featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearExternalPnoScanRequest()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getLastCallerInfoForApi(int apiType, @NonNull ILastCallerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWifiConnectedNetworkScorer(IBinder binder, IWifiConnectedNetworkScorer scorer)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearWifiConnectedNetworkScorer()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<WifiNetworkSuggestion, List<ScanResult>> getMatchingScanResults(List<WifiNetworkSuggestion> networkSuggestions, List<ScanResult> scanResults, String callingPackage, String callingFeatureId)",
    "returnType" : "Map<WifiNetworkSuggestion, List<ScanResult>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setScanThrottleEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isScanThrottleEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Map<Integer, List<ScanResult>>> getAllMatchingPasspointProfilesForScanResults(List<ScanResult> scanResults)",
    "returnType" : "Map<String, Map<Integer, List<ScanResult>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoWakeupEnabled(boolean enable)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isAutoWakeupEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addSuggestionUserApprovalStatusListener(ISuggestionUserApprovalStatusListener listener, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSuggestionUserApprovalStatusListener(ISuggestionUserApprovalStatusListener listener, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setEmergencyScanRequestInProgress(boolean inProgress)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAppState(int targetAppUid, @NonNull String targetAppPackageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setWifiScoringEnabled(boolean enabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flushPasspointAnqpCache(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<WifiAvailableChannel> getUsableChannels(int band, int mode, int filter)",
    "returnType" : "List<WifiAvailableChannel>",
    "comment" : " TO BE REMOVED ",
    "links" : [ ]
  }, {
    "name" : "public List<WifiAvailableChannel> getUsableChannels(int band, int mode, int filter, String packageName, Bundle extras)",
    "returnType" : "List<WifiAvailableChannel>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isWifiPasspointEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWifiPasspointEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStaConcurrencyForMultiInternetMode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setStaConcurrencyForMultiInternetMode(@WifiManager.WifiMultiInternetMode int mode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyMinimumRequiredWifiSecurityLevelChanged(int level)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void notifyWifiSsidPolicyChanged(int policyType, @NonNull List<WifiSsid> ssids)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getOemPrivilegedWifiAdminPackages()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replyToP2pInvitationReceivedDialog(int dialogId, boolean accepted, @Nullable String optionalPin)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replyToSimpleDialog(int dialogId, int button)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addCustomDhcpOptions(WifiSsid ssid, byte[] oui, @NonNull List<DhcpOption> options)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeCustomDhcpOptions(WifiSsid ssid, byte[] oui)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void reportCreateInterfaceImpact(String packageName, int interfaceType, boolean requireNewInterface, IInterfaceCreationInfoCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxNumberOfChannelsPerRequest()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addQosPolicies(@NonNull List<QosPolicyParams> policyParamsList, @NonNull IBinder binder, @NonNull String packageName, @NonNull IListListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeQosPolicies(@NonNull int[] policyIdList, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeAllQosPolicies(@NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addLocalOnlyConnectionStatusListener(ILocalOnlyConnectionStatusListener listener, String packageName, String featureId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeLocalOnlyConnectionStatusListener(ILocalOnlyConnectionStatusListener listener, String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setLinkLayerStatsPollingInterval(int intervalMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getLinkLayerStatsPollingInterval(@NonNull IIntegerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setMloMode(@WifiManager.MloMode int mode, IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getMloMode(IIntegerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addWifiLowLatencyLockListener(IWifiLowLatencyLockListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeWifiLowLatencyLockListener(IWifiLowLatencyLockListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getMaxMloAssociationLinkCount(IIntegerListener listener, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getMaxMloStrLinkCount(IIntegerListener listener, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getSupportedSimultaneousBandCombinations(IWifiBandsListener listener, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setWepAllowed(boolean isAllowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryWepAllowed(@NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void enableMscs(@NonNull MscsParams mscsParams)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void disableMscs()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSendDhcpHostnameRestriction(@NonNull String packageName, @WifiManager.SendDhcpHostnameRestriction int restriction)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void querySendDhcpHostnameRestriction(@NonNull String packageName, @NonNull IIntegerListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setPerSsidRoamingMode(WifiSsid ssid, @WifiManager.RoamingMode int roamingMode, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePerSsidRoamingMode(WifiSsid ssid, @NonNull String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getPerSsidRoamingModes(@NonNull String packageName, IMapListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setupTwtSession(TwtRequest twtRequest, ITwtCallback iTwtCallback, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getTwtCapabilities(ITwtCapabilitiesListener listener, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getStatsTwtSession(int sessionId, ITwtStatsListener iTwtStatsListener, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void teardownTwtSession(int sessionId, Bundle extras)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setD2dAllowedWhenInfraStaDisabled(boolean isAllowed)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void queryD2dAllowedWhenInfraStaDisabled(@NonNull IBooleanListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPnoSupported()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getSupportedFeatures()", "public void getWifiActivityEnergyInfoAsync(IOnWifiActivityEnergyInfoListener listener)", "public ParceledListSlice getConfiguredNetworks(String packageName, String featureId, boolean callerNetworksOnly)", "public ParceledListSlice getPrivilegedConfiguredNetworks(String packageName, String featureId, Bundle extras)", "public WifiConfiguration getPrivilegedConnectedNetwork(String packageName, String featureId, Bundle extras)", "public void setNetworkSelectionConfig(WifiNetworkSelectionConfig nsConfig)", "public void getNetworkSelectionConfig(@NonNull IWifiNetworkSelectionConfigListener listener)", "public void setThirdPartyAppEnablingWifiConfirmationDialogEnabled(boolean enable)", "public boolean isThirdPartyAppEnablingWifiConfirmationDialogEnabled()", "public void setScreenOnScanSchedule(int[] scanScheduleSeconds, int[] scanType)", "public void setOneShotScreenOnConnectivityScanDelayMillis(int delayMs)", "public Map<String, Map<Integer, List<ScanResult>>> getAllMatchingFqdnsForScanResults(List<ScanResult> scanResults)", "public void setSsidsAllowlist(String packageName, List<WifiSsid> ssids)", "public List<WifiSsid> getSsidsAllowlist(String packageName)", "public Map<OsuProvider, List<ScanResult>> getMatchingOsuProviders(List<ScanResult> scanResults)", "public Map<OsuProvider, PasspointConfiguration> getMatchingPasspointConfigsForOsuProviders(List<OsuProvider> osuProviders)", "public int addOrUpdateNetwork(WifiConfiguration config, String packageName, Bundle extras)", "public WifiManager.AddNetworkResult addOrUpdateNetworkPrivileged(WifiConfiguration config, String packageName)", "public boolean addOrUpdatePasspointConfiguration(PasspointConfiguration config, String packageName)", "public boolean removePasspointConfiguration(String fqdn, String packageName)", "public List<PasspointConfiguration> getPasspointConfigurations(String packageName)", "public List<WifiConfiguration> getWifiConfigsForPasspointProfiles(List<String> fqdnList)", "public void queryPasspointIcon(long bssid, String fileName)", "public int matchProviderWithCurrentNetwork(String fqdn)", "public boolean removeNetwork(int netId, String packageName)", "public boolean removeNonCallerConfiguredNetworks(String packageName)", "public boolean enableNetwork(int netId, boolean disableOthers, String packageName)", "public boolean disableNetwork(int netId, String packageName)", "public void allowAutojoinGlobal(boolean choice)", "public void allowAutojoinGlobal(boolean choice, String packageName, Bundle extras)", "public void queryAutojoinGlobal(@NonNull IBooleanListener listener)", "public void allowAutojoin(int netId, boolean choice)", "public void allowAutojoinPasspoint(String fqdn, boolean enableAutoJoin)", "public void setMacRandomizationSettingPasspointEnabled(String fqdn, boolean enable)", "public void setPasspointMeteredOverride(String fqdn, int meteredOverride)", "public boolean startScan(String packageName, String featureId)", "public ParceledListSlice getScanResults(String callingPackage, String callingFeatureId)", "public void getChannelData(@NonNull IListListener listener, String packageName, Bundle extras)", "public boolean disconnect(String packageName)", "public boolean reconnect(String packageName)", "public boolean reassociate(String packageName)", "public WifiInfo getConnectionInfo(String callingPackage, String callingFeatureId)", "public boolean setWifiEnabled(String packageName, boolean enable)", "public void registerSubsystemRestartCallback(ISubsystemRestartCallback callback)", "public void unregisterSubsystemRestartCallback(ISubsystemRestartCallback callback)", "public void addWifiNetworkStateChangedListener(IWifiNetworkStateChangedListener listener)", "public void removeWifiNetworkStateChangedListener(IWifiNetworkStateChangedListener listener)", "public void restartWifiSubsystem()", "public int getWifiEnabledState()", "public void registerDriverCountryCodeChangedListener(@NonNull IOnWifiDriverCountryCodeChangedListener listener, @Nullable String packageName, @Nullable String featureId)", "public void unregisterDriverCountryCodeChangedListener(@NonNull IOnWifiDriverCountryCodeChangedListener listener)", "public String getCountryCode(String packageName, String featureId)", "public void setOverrideCountryCode(@NonNull String countryCode)", "public void clearOverrideCountryCode()", "public void setDefaultCountryCode(@NonNull String countryCode)", "public boolean is24GHzBandSupported()", "public boolean is5GHzBandSupported()", "public boolean is6GHzBandSupported()", "public boolean is60GHzBandSupported()", "public boolean isWifiStandardSupported(int standard)", "public DhcpInfo getDhcpInfo(String packageName)", "public void setScanAlwaysAvailable(boolean isAvailable, String packageName)", "public boolean isScanAlwaysAvailable()", "public boolean acquireWifiLock(IBinder lock, int lockType, String tag, WorkSource ws)", "public boolean acquireWifiLock(IBinder lock, int lockType, String tag, WorkSource ws, String packageName, Bundle extras)", "public void updateWifiLockWorkSource(IBinder lock, WorkSource ws)", "public void updateWifiLockWorkSource(IBinder lock, WorkSource ws, String packageName, Bundle extras)", "public boolean releaseWifiLock(IBinder lock)", "public void initializeMulticastFiltering()", "public boolean isMulticastEnabled()", "public void acquireMulticastLock(IBinder binder, String tag)", "public void releaseMulticastLock(String tag)", "public void updateInterfaceIpState(String ifaceName, int mode)", "public boolean isDefaultCoexAlgorithmEnabled()", "public void setCoexUnsafeChannels(List<CoexUnsafeChannel> unsafeChannels, int restrictions)", "public void registerCoexCallback(ICoexCallback callback)", "public void unregisterCoexCallback(ICoexCallback callback)", "public boolean startSoftAp(WifiConfiguration wifiConfig, String packageName)", "public boolean startTetheredHotspot(SoftApConfiguration softApConfig, String packageName)", "public void startTetheredHotspotRequest(TetheringManager.TetheringRequest request, ISoftApCallback callback, String packageName)", "public boolean stopSoftAp()", "public boolean validateSoftApConfiguration(SoftApConfiguration config)", "public int startLocalOnlyHotspot(ILocalOnlyHotspotCallback callback, String packageName, String featureId, SoftApConfiguration customConfig, Bundle extras)", "public void stopLocalOnlyHotspot()", "public void registerLocalOnlyHotspotSoftApCallback(ISoftApCallback callback, Bundle extras)", "public void unregisterLocalOnlyHotspotSoftApCallback(ISoftApCallback callback, Bundle extras)", "public void startWatchLocalOnlyHotspot(ILocalOnlyHotspotCallback callback)", "public void stopWatchLocalOnlyHotspot()", "public int getWifiApEnabledState()", "public WifiConfiguration getWifiApConfiguration()", "public SoftApConfiguration getSoftApConfiguration()", "public void queryLastConfiguredTetheredApPassphraseSinceBoot(IStringListener listener)", "public boolean setWifiApConfiguration(WifiConfiguration wifiConfig, String packageName)", "public boolean setSoftApConfiguration(SoftApConfiguration softApConfig, String packageName)", "public void notifyUserOfApBandConversion(String packageName)", "public void enableTdls(String remoteIPAddress, boolean enable)", "public void enableTdlsWithRemoteIpAddress(String remoteIPAddress, boolean enable, @NonNull IBooleanListener listener)", "public void enableTdlsWithMacAddress(String remoteMacAddress, boolean enable)", "public void enableTdlsWithRemoteMacAddress(String remoteMacAddress, boolean enable, @NonNull IBooleanListener listener)", "public void isTdlsOperationCurrentlyAvailable(@NonNull IBooleanListener listener)", "public void getMaxSupportedConcurrentTdlsSessions(@NonNull IIntegerListener listener)", "public void getNumberOfEnabledTdlsSessions(@NonNull IIntegerListener listener)", "public String getCurrentNetworkWpsNfcConfigurationToken()", "public void enableVerboseLogging(int verbose)", "public int getVerboseLoggingLevel()", "public void disableEphemeralNetwork(String SSID, String packageName)", "public void factoryReset(String packageName)", "public Network getCurrentNetwork()", "public void retrieveWifiBackupData(@NonNull IByteArrayListener listener)", "public void restoreWifiBackupData(byte[] data)", "public byte[] retrieveBackupData()", "public void restoreBackupData(byte[] data)", "public byte[] retrieveSoftApBackupData()", "public SoftApConfiguration restoreSoftApBackupData(byte[] data)", "public void restoreSupplicantBackupData(byte[] supplicantData, byte[] ipConfigData)", "public void startSubscriptionProvisioning(OsuProvider provider, IProvisioningCallback callback)", "public void addWifiVerboseLoggingStatusChangedListener(IWifiVerboseLoggingStatusChangedListener callback)", "public void removeWifiVerboseLoggingStatusChangedListener(IWifiVerboseLoggingStatusChangedListener callback)", "public void registerSoftApCallback(ISoftApCallback callback)", "public void unregisterSoftApCallback(ISoftApCallback callback)", "public void registerTrafficStateCallback(ITrafficStateCallback callback)", "public void unregisterTrafficStateCallback(ITrafficStateCallback callback)", "public void registerNetworkRequestMatchCallback(INetworkRequestMatchCallback callback)", "public void unregisterNetworkRequestMatchCallback(INetworkRequestMatchCallback callback)", "public int addNetworkSuggestions(List<WifiNetworkSuggestion> networkSuggestions, String callingPackageName, String callingFeatureId)", "public int removeNetworkSuggestions(List<WifiNetworkSuggestion> networkSuggestions, String callingPackageName, int action)", "public List<WifiNetworkSuggestion> getNetworkSuggestions(String packageName)", "public void setCarrierNetworkOffloadEnabled(int subId, boolean merged, boolean enabled) throws RemoteException", "public boolean isCarrierNetworkOffloadEnabled(int subId, boolean merged) throws RemoteException", "public String[] getFactoryMacAddresses()", "public void setDeviceMobilityState(int state)", "public void startDppAsConfiguratorInitiator(IBinder binder, String packageName, String enrolleeUri, int selectedNetworkId, int netRole, IDppCallback callback)", "public void startDppAsEnrolleeInitiator(IBinder binder, String configuratorUri, IDppCallback callback)", "public void startDppAsEnrolleeResponder(IBinder binder, String deviceInfo, int curve, IDppCallback callback)", "public void stopDppSession() throws RemoteException", "public void addOnWifiUsabilityStatsListener(IOnWifiUsabilityStatsListener listener)", "public void removeOnWifiUsabilityStatsListener(IOnWifiUsabilityStatsListener listener)", "public void updateWifiUsabilityScore(int seqNum, int score, int predictionHorizonSec)", "public void connect(WifiConfiguration config, int netId, IActionListener callback)", "public void connect(WifiConfiguration config, int netId, IActionListener callback, @NonNull String packageName)", "public void connect(WifiConfiguration config, int netId, IActionListener callback, @NonNull String packageName, Bundle extras)", "public void startRestrictingAutoJoinToSubscriptionId(int subId)", "public void stopRestrictingAutoJoinToSubscriptionId()", "public void save(WifiConfiguration config, IActionListener callback)", "public void save(WifiConfiguration config, IActionListener callback, @NonNull String packageName)", "public void forget(int netId, IActionListener callback)", "public void registerScanResultsCallback(IScanResultsCallback callback)", "public void unregisterScanResultsCallback(IScanResultsCallback callback)", "public void registerSuggestionConnectionStatusListener(ISuggestionConnectionStatusListener listener, String packageName, String featureId)", "public void unregisterSuggestionConnectionStatusListener(ISuggestionConnectionStatusListener listener, String packageName)", "public int calculateSignalLevel(int rssi)", "public void setPnoScanEnabled(boolean enabled, boolean enablePnoScanAfterWifiToggle, String packageName)", "public List<WifiConfiguration> getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(List<ScanResult> scanResults)", "public void setExternalPnoScanRequest(@NonNull IBinder binder, @NonNull IPnoScanResultsCallback callback, @NonNull List<WifiSsid> ssids, @NonNull int[] frequencies, @NonNull String packageName, @NonNull String featureId)", "public void clearExternalPnoScanRequest()", "public void getLastCallerInfoForApi(int apiType, @NonNull ILastCallerListener listener)", "public boolean setWifiConnectedNetworkScorer(IBinder binder, IWifiConnectedNetworkScorer scorer)", "public void clearWifiConnectedNetworkScorer()", "public Map<WifiNetworkSuggestion, List<ScanResult>> getMatchingScanResults(List<WifiNetworkSuggestion> networkSuggestions, List<ScanResult> scanResults, String callingPackage, String callingFeatureId)", "public void setScanThrottleEnabled(boolean enable)", "public boolean isScanThrottleEnabled()", "public Map<String, Map<Integer, List<ScanResult>>> getAllMatchingPasspointProfilesForScanResults(List<ScanResult> scanResults)", "public void setAutoWakeupEnabled(boolean enable)", "public boolean isAutoWakeupEnabled()", "public void addSuggestionUserApprovalStatusListener(ISuggestionUserApprovalStatusListener listener, String packageName)", "public void removeSuggestionUserApprovalStatusListener(ISuggestionUserApprovalStatusListener listener, String packageName)", "public void setEmergencyScanRequestInProgress(boolean inProgress)", "public void removeAppState(int targetAppUid, @NonNull String targetAppPackageName)", "public boolean setWifiScoringEnabled(boolean enabled)", "public void flushPasspointAnqpCache(@NonNull String packageName)", "public List<WifiAvailableChannel> getUsableChannels(int band, int mode, int filter)", "public List<WifiAvailableChannel> getUsableChannels(int band, int mode, int filter, String packageName, Bundle extras)", "public boolean isWifiPasspointEnabled()", "public void setWifiPasspointEnabled(boolean enabled)", "public int getStaConcurrencyForMultiInternetMode()", "public boolean setStaConcurrencyForMultiInternetMode(@WifiManager.WifiMultiInternetMode int mode)", "public void notifyMinimumRequiredWifiSecurityLevelChanged(int level)", "public void notifyWifiSsidPolicyChanged(int policyType, @NonNull List<WifiSsid> ssids)", "public String[] getOemPrivilegedWifiAdminPackages()", "public void replyToP2pInvitationReceivedDialog(int dialogId, boolean accepted, @Nullable String optionalPin)", "public void replyToSimpleDialog(int dialogId, int button)", "public void addCustomDhcpOptions(WifiSsid ssid, byte[] oui, @NonNull List<DhcpOption> options)", "public void removeCustomDhcpOptions(WifiSsid ssid, byte[] oui)", "public void reportCreateInterfaceImpact(String packageName, int interfaceType, boolean requireNewInterface, IInterfaceCreationInfoCallback callback)", "public int getMaxNumberOfChannelsPerRequest()", "public void addQosPolicies(@NonNull List<QosPolicyParams> policyParamsList, @NonNull IBinder binder, @NonNull String packageName, @NonNull IListListener listener)", "public void removeQosPolicies(@NonNull int[] policyIdList, @NonNull String packageName)", "public void removeAllQosPolicies(@NonNull String packageName)", "public void addLocalOnlyConnectionStatusListener(ILocalOnlyConnectionStatusListener listener, String packageName, String featureId)", "public void removeLocalOnlyConnectionStatusListener(ILocalOnlyConnectionStatusListener listener, String packageName)", "public void setLinkLayerStatsPollingInterval(int intervalMs)", "public void getLinkLayerStatsPollingInterval(@NonNull IIntegerListener listener)", "public void setMloMode(@WifiManager.MloMode int mode, IBooleanListener listener)", "public void getMloMode(IIntegerListener listener)", "public void addWifiLowLatencyLockListener(IWifiLowLatencyLockListener listener)", "public void removeWifiLowLatencyLockListener(IWifiLowLatencyLockListener listener)", "public void getMaxMloAssociationLinkCount(IIntegerListener listener, Bundle extras)", "public void getMaxMloStrLinkCount(IIntegerListener listener, Bundle extras)", "public void getSupportedSimultaneousBandCombinations(IWifiBandsListener listener, Bundle extras)", "public void setWepAllowed(boolean isAllowed)", "public void queryWepAllowed(@NonNull IBooleanListener listener)", "public void enableMscs(@NonNull MscsParams mscsParams)", "public void disableMscs()", "public void setSendDhcpHostnameRestriction(@NonNull String packageName, @WifiManager.SendDhcpHostnameRestriction int restriction)", "public void querySendDhcpHostnameRestriction(@NonNull String packageName, @NonNull IIntegerListener listener)", "public void setPerSsidRoamingMode(WifiSsid ssid, @WifiManager.RoamingMode int roamingMode, @NonNull String packageName)", "public void removePerSsidRoamingMode(WifiSsid ssid, @NonNull String packageName)", "public void getPerSsidRoamingModes(@NonNull String packageName, IMapListener listener)", "public void setupTwtSession(TwtRequest twtRequest, ITwtCallback iTwtCallback, Bundle extras)", "public void getTwtCapabilities(ITwtCapabilitiesListener listener, Bundle extras)", "public void getStatsTwtSession(int sessionId, ITwtStatsListener iTwtStatsListener, Bundle extras)", "public void teardownTwtSession(int sessionId, Bundle extras)", "public void setD2dAllowedWhenInfraStaDisabled(boolean isAllowed)", "public void queryD2dAllowedWhenInfraStaDisabled(@NonNull IBooleanListener listener)", "public boolean isPnoSupported()" ],
  "variableNames" : [ "TAG" ]
}