{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/URLStreamHandler.java",
  "packageName" : "java.net",
  "className" : "URLStreamHandler",
  "comment" : "\n * The abstract class {@code URLStreamHandler} is the common\n * superclass for all stream protocol handlers. A stream protocol\n * handler knows how to make a connection for a particular protocol\n * type, such as {@code http} or {@code https}.\n * <p>\n * In most cases, an instance of a {@code URLStreamHandler}\n * subclass is not created directly by an application. Rather, the\n * first time a protocol name is encountered when constructing a\n * {@code URL}, the appropriate stream protocol handler is\n * automatically loaded.\n *\n * @author  James Gosling\n * @see     java.net.URL#URL(java.lang.String, java.lang.String, int, java.lang.String)\n * @since   JDK1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "protected abstract URLConnection openConnection(URL u) throws IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Opens a connection to the object referenced by the\n     * {@code URL} argument.\n     * This method should be overridden by a subclass.\n     *\n     * <p>If for the handler's protocol (such as HTTP or JAR), there\n     * exists a public, specialized URLConnection subclass belonging\n     * to one of the following packages or one of their subpackages:\n     * java.lang, java.io, java.util, java.net, the connection\n     * returned will be of that subclass. For example, for HTTP an\n     * HttpURLConnection will be returned, and for JAR a\n     * JarURLConnection will be returned.\n     *\n     * @param      u   the URL that this connects to.\n     * @return     a {@code URLConnection} object for the {@code URL}.\n     * @exception  IOException  if an I/O error occurs while opening the\n     *               connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected URLConnection openConnection(URL u, Proxy p) throws IOException",
    "returnType" : "URLConnection",
    "comment" : "\n     * Same as openConnection(URL), except that the connection will be\n     * made through the specified proxy; Protocol handlers that do not\n     * support proxying will ignore the proxy parameter and make a\n     * normal connection.\n     *\n     * Calling this method preempts the system's default ProxySelector\n     * settings.\n     *\n     * @param      u   the URL that this connects to.\n     * @param      p   the proxy through which the connection will be made.\n     *                 If direct connection is desired, Proxy.NO_PROXY\n     *                 should be specified.\n     * @return     a {@code URLConnection} object for the {@code URL}.\n     * @exception  IOException  if an I/O error occurs while opening the\n     *               connection.\n     * @exception  IllegalArgumentException if either u or p is null,\n     *               or p has the wrong type.\n     * @exception  UnsupportedOperationException if the subclass that\n     *               implements the protocol doesn't support this method.\n     * @since      1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void parseURL(URL u, String spec, int start, int limit)",
    "returnType" : "void",
    "comment" : "\n     * Parses the string representation of a {@code URL} into a\n     * {@code URL} object.\n     * <p>\n     * If there is any inherited context, then it has already been\n     * copied into the {@code URL} argument.\n     * <p>\n     * The {@code parseURL} method of {@code URLStreamHandler}\n     * parses the string representation as if it were an\n     * {@code http} specification. Most URL protocol families have a\n     * similar parsing. A stream protocol handler for a protocol that has\n     * a different syntax must override this routine.\n     *\n     * @param   u       the {@code URL} to receive the result of parsing\n     *                  the spec.\n     * @param   spec    the {@code String} representing the URL that\n     *                  must be parsed.\n     * @param   start   the character index at which to begin parsing. This is\n     *                  just past the '{@code :}' (if there is one) that\n     *                  specifies the determination of the protocol name.\n     * @param   limit   the character position to stop parsing at. This is the\n     *                  end of the string or the position of the\n     *                  \"{@code #}\" character, if present. All information\n     *                  after the sharp sign indicates an anchor.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int getDefaultPort()",
    "returnType" : "int",
    "comment" : "\n     * Returns the default port for a URL parsed by this handler. This method\n     * is meant to be overidden by handlers with default port numbers.\n     * @return the default port for a {@code URL} parsed by this handler.\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean equals(URL u1, URL u2)",
    "returnType" : "boolean",
    "comment" : "\n     * Provides the default equals calculation. May be overidden by handlers\n     * for other protocols that have different requirements for equals().\n     * This method requires that none of its arguments is null. This is\n     * guaranteed by the fact that it is only called by java.net.URL class.\n     * @param u1 a URL object\n     * @param u2 a URL object\n     * @return {@code true} if the two urls are\n     * considered equal, ie. they refer to the same\n     * fragment in the same file.\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int hashCode(URL u)",
    "returnType" : "int",
    "comment" : "\n     * Provides the default hash calculation. May be overidden by handlers for\n     * other protocols that have different requirements for hashCode\n     * calculation.\n     * @param u a URL object\n     * @return an {@code int} suitable for hash table indexing\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean sameFile(URL u1, URL u2)",
    "returnType" : "boolean",
    "comment" : "\n     * Compare two urls to see whether they refer to the same file,\n     * i.e., having the same protocol, host, port, and path.\n     * This method requires that none of its arguments is null. This is\n     * guaranteed by the fact that it is only called indirectly\n     * by java.net.URL class.\n     * @param u1 a URL object\n     * @param u2 a URL object\n     * @return true if u1 and u2 refer to the same file\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected synchronized InetAddress getHostAddress(URL u)",
    "returnType" : "InetAddress",
    "comment" : "\n     * Get the IP address of our host. An empty host field or a DNS failure\n     * will result in a null return.\n     *\n     * @param u a URL object\n     * @return an {@code InetAddress} representing the host\n     * IP address.\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected boolean hostsEqual(URL u1, URL u2)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the host components of two URLs.\n     * @param u1 the URL of the first host to compare\n     * @param u2 the URL of the second host to compare\n     * @return  {@code true} if and only if they\n     * are equal, {@code false} otherwise.\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String toExternalForm(URL u)",
    "returnType" : "String",
    "comment" : "\n     * Converts a {@code URL} of a specific protocol to a\n     * {@code String}.\n     *\n     * @param   u   the URL.\n     * @return  a string representation of the {@code URL} argument.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields of the {@code URL} argument to the indicated values.\n     * Only classes derived from URLStreamHandler are able\n     * to use this method to set the values of the URL fields.\n     *\n     * @param   u         the URL to modify.\n     * @param   protocol  the protocol name.\n     * @param   host      the remote host value for the URL.\n     * @param   port      the port on the remote machine.\n     * @param   authority the authority part for the URL.\n     * @param   userInfo the userInfo part of the URL.\n     * @param   path      the path component of the URL.\n     * @param   query     the query part for the URL.\n     * @param   ref       the reference.\n     * @exception       SecurityException       if the protocol handler of the URL is\n     *                                  different from this one\n     * @since 1.3\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setURL(URL u, String protocol, String host, int port, String file, String ref)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fields of the {@code URL} argument to the indicated values.\n     * Only classes derived from URLStreamHandler are able\n     * to use this method to set the values of the URL fields.\n     *\n     * @param   u         the URL to modify.\n     * @param   protocol  the protocol name. This value is ignored since 1.2.\n     * @param   host      the remote host value for the URL.\n     * @param   port      the port on the remote machine.\n     * @param   file      the file.\n     * @param   ref       the reference.\n     * @exception       SecurityException       if the protocol handler of the URL is\n     *                                  different from this one\n     * @deprecated Use setURL(URL, String, String, int, String, String, String,\n     *             String);\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected abstract URLConnection openConnection(URL u) throws IOException", "protected URLConnection openConnection(URL u, Proxy p) throws IOException", "protected void parseURL(URL u, String spec, int start, int limit)", "protected int getDefaultPort()", "protected boolean equals(URL u1, URL u2)", "protected int hashCode(URL u)", "protected boolean sameFile(URL u1, URL u2)", "protected synchronized InetAddress getHostAddress(URL u)", "protected boolean hostsEqual(URL u1, URL u2)", "protected String toExternalForm(URL u)", "protected void setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)", "protected void setURL(URL u, String protocol, String host, int port, String file, String ref)" ],
  "variableNames" : [ ]
}