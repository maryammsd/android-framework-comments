{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/StringTokenizer.java",
  "packageName" : "java.util",
  "className" : "StringTokenizer",
  "comment" : "\n * The string tokenizer class allows an application to break a\n * string into tokens. The tokenization method is much simpler than\n * the one used by the {@code StreamTokenizer} class. The\n * {@code StringTokenizer} methods do not distinguish among\n * identifiers, numbers, and quoted strings, nor do they recognize\n * and skip comments.\n * <p>\n * The set of delimiters (the characters that separate tokens) may\n * be specified either at creation time or on a per-token basis.\n * <p>\n * An instance of {@code StringTokenizer} behaves in one of two\n * ways, depending on whether it was created with the\n * {@code returnDelims} flag having the value {@code true}\n * or {@code false}:\n * <ul>\n * <li>If the flag is {@code false}, delimiter characters serve to\n *     separate tokens. A token is a maximal sequence of consecutive\n *     characters that are not delimiters.\n * <li>If the flag is {@code true}, delimiter characters are themselves\n *     considered to be tokens. A token is thus either one delimiter\n *     character, or a maximal sequence of consecutive characters that are\n *     not delimiters.\n * </ul><p>\n * A {@code StringTokenizer} object internally maintains a current\n * position within the string to be tokenized. Some operations advance this\n * current position past the characters processed.<p>\n * A token is returned by taking a substring of the string that was used to\n * create the {@code StringTokenizer} object.\n * <p>\n * The following is one example of the use of the tokenizer. The code:\n * <blockquote><pre>\n *     StringTokenizer st = new StringTokenizer(\"this is a test\");\n *     while (st.hasMoreTokens()) {\n *         System.out.println(st.nextToken());\n *     }\n * </pre></blockquote>\n * <p>\n * prints the following output:\n * <blockquote><pre>\n *     this\n *     is\n *     a\n *     test\n * </pre></blockquote>\n *\n * <p>\n * {@code StringTokenizer} is a legacy class that is retained for\n * compatibility reasons although its use is discouraged in new code. It is\n * recommended that anyone seeking this functionality use the {@code split}\n * method of {@code String} or the java.util.regex package instead.\n * <p>\n * The following example illustrates how the {@code String.split}\n * method can be used to break up a string into its basic tokens:\n * <blockquote><pre>\n *     String[] result = \"this is a test\".split(\"\\\\s\");\n *     for (int x=0; x&lt;result.length; x++)\n *         System.out.println(result[x]);\n * </pre></blockquote>\n * <p>\n * prints the following output:\n * <blockquote><pre>\n *     this\n *     is\n *     a\n *     test\n * </pre></blockquote>\n *\n * @see     java.io.StreamTokenizer\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "currentPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "newPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxPosition",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "str",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delimiters",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "retDelims",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "delimsChanged",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxDelimCodePoint",
    "type" : "int",
    "comment" : "\n     * maxDelimCodePoint stores the value of the delimiter character with the\n     * highest value. It is used to optimize the detection of delimiter\n     * characters.\n     *\n     * It is unlikely to provide any optimization benefit in the\n     * hasSurrogates case because most string characters will be\n     * smaller than the limit, but we keep it so that the two code\n     * paths remain similar.\n     ",
    "links" : [ ]
  }, {
    "name" : "hasSurrogates",
    "type" : "boolean",
    "comment" : "\n     * If delimiters include any surrogates (including surrogate\n     * pairs), hasSurrogates is true and the tokenizer uses the\n     * different code path. This is because String.indexOf(int)\n     * doesn't handle unpaired surrogates as a single character.\n     ",
    "links" : [ ]
  }, {
    "name" : "delimiterCodePoints",
    "type" : "int[]",
    "comment" : "\n     * When hasSurrogates is true, delimiters are converted to code\n     * points and isDelimiter(int) is used to determine if the given\n     * codepoint is a delimiter.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void setMaxDelimCodePoint()",
    "returnType" : "void",
    "comment" : "\n     * Set maxDelimCodePoint to the highest char in the delimiter set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int skipDelimiters(int startPos)",
    "returnType" : "int",
    "comment" : "\n     * Skips delimiters starting from the specified position. If retDelims\n     * is false, returns the index of the first non-delimiter character at or\n     * after startPos. If retDelims is true, startPos is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "private int scanToken(int startPos)",
    "returnType" : "int",
    "comment" : "\n     * Skips ahead from startPos and returns the index of the next delimiter\n     * character encountered, or maxPosition if no such delimiter is found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isDelimiter(int codePoint)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMoreTokens()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if there are more tokens available from this tokenizer's string.\n     * If this method returns {@code true}, then a subsequent call to\n     * {@code nextToken} with no argument will successfully return a token.\n     *\n     * @return  {@code true} if and only if there is at least one token\n     *          in the string after the current position; {@code false}\n     *          otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextToken()",
    "returnType" : "String",
    "comment" : "\n     * Returns the next token from this string tokenizer.\n     *\n     * @return     the next token from this string tokenizer.\n     * @throws     NoSuchElementException  if there are no more tokens in this\n     *               tokenizer's string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String nextToken(String delim)",
    "returnType" : "String",
    "comment" : "\n     * Returns the next token in this string tokenizer's string. First,\n     * the set of characters considered to be delimiters by this\n     * {@code StringTokenizer} object is changed to be the characters in\n     * the string {@code delim}. Then the next token in the string\n     * after the current position is returned. The current position is\n     * advanced beyond the recognized token.  The new delimiter set\n     * remains the default after this call.\n     *\n     * @param      delim   the new delimiters.\n     * @return     the next token, after switching to the new delimiter set.\n     * @throws     NoSuchElementException  if there are no more tokens in this\n     *               tokenizer's string.\n     * @throws    NullPointerException if delim is {@code null}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasMoreElements()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the same value as the {@code hasMoreTokens}\n     * method. It exists so that this class can implement the\n     * {@code Enumeration} interface.\n     *\n     * @return  {@code true} if there are more tokens;\n     *          {@code false} otherwise.\n     * @see     java.util.Enumeration\n     * @see     java.util.StringTokenizer#hasMoreTokens()\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object nextElement()",
    "returnType" : "Object",
    "comment" : "\n     * Returns the same value as the {@code nextToken} method,\n     * except that its declared return value is {@code Object} rather than\n     * {@code String}. It exists so that this class can implement the\n     * {@code Enumeration} interface.\n     *\n     * @return     the next token in the string.\n     * @throws     NoSuchElementException  if there are no more tokens in this\n     *               tokenizer's string.\n     * @see        java.util.Enumeration\n     * @see        java.util.StringTokenizer#nextToken()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int countTokens()",
    "returnType" : "int",
    "comment" : "\n     * Calculates the number of times that this tokenizer's\n     * {@code nextToken} method can be called before it generates an\n     * exception. The current position is not advanced.\n     *\n     * @return  the number of tokens remaining in the string using the current\n     *          delimiter set.\n     * @see     java.util.StringTokenizer#nextToken()\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void setMaxDelimCodePoint()", "private int skipDelimiters(int startPos)", "private int scanToken(int startPos)", "private boolean isDelimiter(int codePoint)", "public boolean hasMoreTokens()", "public String nextToken()", "public String nextToken(String delim)", "public boolean hasMoreElements()", "public Object nextElement()", "public int countTokens()" ],
  "variableNames" : [ "currentPosition", "newPosition", "maxPosition", "str", "delimiters", "retDelims", "delimsChanged", "maxDelimCodePoint", "hasSurrogates", "delimiterCodePoints" ]
}