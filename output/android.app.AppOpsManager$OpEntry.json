{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/AppOpsManager.java",
  "packageName" : "android.app",
  "className" : "OpEntry",
  "comment" : "\n     * Last {@link #noteOp} and {@link #startOp} events performed for a single op for all uidModes\n     * and opFlags.\n     *\n     * @hide\n     ",
  "links" : [ "#startOp", "#noteOp" ],
  "variables" : [ {
    "name" : "mOp",
    "type" : "int",
    "comment" : " The code of the op ",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : " The mode of the op ",
    "links" : [ ]
  }, {
    "name" : "mAttributedOpEntries",
    "type" : "Map<String, AttributedOpEntry>",
    "comment" : " The attributed entries by attribution tag ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<OpEntry>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getOp()",
    "returnType" : "int",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getOpStr()",
    "returnType" : "String",
    "comment" : "\n         * @return This entry's op string name, such as {@link #OPSTR_COARSE_LOCATION}.\n         ",
    "links" : [ "#OPSTR_COARSE_LOCATION" ]
  }, {
    "name" : "public long getTime()",
    "returnType" : "long",
    "comment" : "\n         * @hide\n         *\n         * @deprecated Use {@link #getLastAccessTime(int)} instead\n         ",
    "links" : [ "#getLastAccessTime(int)" ]
  }, {
    "name" : "public long getLastAccessTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no access\n         *\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see AttributedOpEntry#getLastAccessTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessForegroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last foreground access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no foreground access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see AttributedOpEntry#getLastAccessForegroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessBackgroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last background access time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no background access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessTime(int, int, int)\n         * @see AttributedOpEntry#getLastAccessBackgroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "private NoteOpEvent getLastAccessEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "NoteOpEvent",
    "comment" : "\n         * Return the last access event.\n         *\n         * @param flags The op flags\n         *\n         * @return the last access event of {@code null} if there was no access\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastAccessTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last access time.\n         *\n         * @param fromUidState the lowest uid state to query\n         * @param toUidState the highest uid state to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the last access time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no access\n         *\n         * @see #getLastAccessTime(int)\n         * @see #getLastAccessForegroundTime(int)\n         * @see #getLastAccessBackgroundTime(int)\n         * @see AttributedOpEntry#getLastAccessTime(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getRejectTime()",
    "returnType" : "long",
    "comment" : "\n         * @hide\n         *\n         * @deprecated Use {@link #getLastRejectTime(int)} instead\n         ",
    "links" : [ "#getLastRejectTime(int)" ]
  }, {
    "name" : "public long getLastRejectTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no rejection\n         *\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see AttributedOpEntry#getLastRejectTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectForegroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last foreground rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no foreground rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see AttributedOpEntry#getLastRejectForegroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectBackgroundTime(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last background rejection time.\n         *\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no background rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see AttributedOpEntry#getLastRejectBackgroundTime(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "private NoteOpEvent getLastRejectEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "NoteOpEvent",
    "comment" : "\n         * Return the last rejection event.\n         *\n         * @param flags The op flags\n         *\n         * @return the last reject event of {@code null} if there was no rejection\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastRejectTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the last rejection time.\n         *\n         * @param fromUidState the lowest uid state to query\n         * @param toUidState the highest uid state to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the last rejection time (in milliseconds since epoch start (January 1, 1970\n         * 00:00:00.000 GMT - Gregorian)) or {@code -1} if there was no rejection\n         *\n         * @see #getLastRejectTime(int)\n         * @see #getLastRejectForegroundTime(int)\n         * @see #getLastRejectBackgroundTime(int)\n         * @see #getLastRejectTime(int, int, int)\n         * @see AttributedOpEntry#getLastRejectTime(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n         * @return Whether the operation is running.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getDuration()",
    "returnType" : "long",
    "comment" : "\n         * @deprecated Use {@link #getLastDuration(int)} instead\n         ",
    "links" : [ "#getLastDuration(int)" ]
  }, {
    "name" : "public long getLastDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last the access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no access\n         *\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see AttributedOpEntry#getLastDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastForegroundDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last foreground access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no foreground access\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see AttributedOpEntry#getLastForegroundDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastBackgroundDuration(@OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last background access.\n         *\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no background access\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastDuration(int, int, int)\n         * @see AttributedOpEntry#getLastBackgroundDuration(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getLastDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "long",
    "comment" : "\n         * Return the duration in milliseconds of the last access.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return the duration in milliseconds or {@code -1} if there was no access\n         *\n         * @see #getLastDuration(int)\n         * @see #getLastForegroundDuration(int)\n         * @see #getLastBackgroundDuration(int)\n         * @see AttributedOpEntry#getLastDuration(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getProxyUid()",
    "returnType" : "int",
    "comment" : "\n         * @deprecated Use {@link #getLastProxyInfo(int)} instead\n         ",
    "links" : [ "#getLastProxyInfo(int)" ]
  }, {
    "name" : "public int getProxyUid(@UidState int uidState, @OpFlags int flags)",
    "returnType" : "int",
    "comment" : "\n         * @deprecated Use {@link #getLastProxyInfo(int)} instead\n         ",
    "links" : [ "#getLastProxyInfo(int)" ]
  }, {
    "name" : "public String getProxyPackageName()",
    "returnType" : "String",
    "comment" : "\n         * @deprecated Use {@link #getLastProxyInfo(int)} instead\n         ",
    "links" : [ "#getLastProxyInfo(int)" ]
  }, {
    "name" : "public String getProxyPackageName(@UidState int uidState, @OpFlags int flags)",
    "returnType" : "String",
    "comment" : "\n         * @deprecated Use {@link #getLastProxyInfo(int)} instead\n         ",
    "links" : [ "#getLastProxyInfo(int)" ]
  }, {
    "name" : "public OpEventProxyInfo getLastProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last access on behalf of this app and\n         * as a result blamed the op on this app.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy access\n         *\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see AttributedOpEntry#getLastProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastForegroundProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last foreground access on behalf of\n         * this app and as a result blamed the op on this app.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no foreground proxy access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see AttributedOpEntry#getLastForegroundProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastBackgroundProxyInfo(@OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last background access on behalf of\n         * this app and as a result blamed the op on this app.\n         *\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no background proxy access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastProxyInfo(int, int, int)\n         * @see AttributedOpEntry#getLastBackgroundProxyInfo(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public OpEventProxyInfo getLastProxyInfo(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)",
    "returnType" : "OpEventProxyInfo",
    "comment" : "\n         * Gets the proxy info of the app that performed the last access on behalf of this app and\n         * as a result blamed the op on this app.\n         *\n         * @param fromUidState The lowest UID state for which to query\n         * @param toUidState The highest UID state for which to query (inclusive)\n         * @param flags The op flags\n         *\n         * @return The proxy info or {@code null} if there was no proxy access\n         *\n         * @see #getLastProxyInfo(int)\n         * @see #getLastForegroundProxyInfo(int)\n         * @see #getLastBackgroundProxyInfo(int)\n         * @see AttributedOpEntry#getLastProxyInfo(int, int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n         * The mode of the op\n         ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, AttributedOpEntry> getAttributedOpEntries()",
    "returnType" : "Map<String, AttributedOpEntry>",
    "comment" : "\n         * The attributed entries keyed by attribution tag.\n         *\n         * @see Context#createAttributionContext(String)\n         * @see #noteOp(String, int, String, String, String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getOp()", "public String getOpStr()", "public long getTime()", "public long getLastAccessTime(@OpFlags int flags)", "public long getLastAccessForegroundTime(@OpFlags int flags)", "public long getLastAccessBackgroundTime(@OpFlags int flags)", "private NoteOpEvent getLastAccessEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastAccessTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getRejectTime()", "public long getLastRejectTime(@OpFlags int flags)", "public long getLastRejectForegroundTime(@OpFlags int flags)", "public long getLastRejectBackgroundTime(@OpFlags int flags)", "private NoteOpEvent getLastRejectEvent(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public long getLastRejectTime(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public boolean isRunning()", "public long getDuration()", "public long getLastDuration(@OpFlags int flags)", "public long getLastForegroundDuration(@OpFlags int flags)", "public long getLastBackgroundDuration(@OpFlags int flags)", "public long getLastDuration(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public int getProxyUid()", "public int getProxyUid(@UidState int uidState, @OpFlags int flags)", "public String getProxyPackageName()", "public String getProxyPackageName(@UidState int uidState, @OpFlags int flags)", "public OpEventProxyInfo getLastProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastForegroundProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastBackgroundProxyInfo(@OpFlags int flags)", "public OpEventProxyInfo getLastProxyInfo(@UidState int fromUidState, @UidState int toUidState, @OpFlags int flags)", "public int getMode()", "public Map<String, AttributedOpEntry> getAttributedOpEntries()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ],
  "variableNames" : [ "mOp", "mMode", "mAttributedOpEntries", "CREATOR" ]
}