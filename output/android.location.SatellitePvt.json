{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/location/SatellitePvt.java",
  "packageName" : "android.location",
  "className" : "SatellitePvt",
  "comment" : "\n * A class that contains GNSS satellite position, velocity and time information at the\n * same signal transmission time {@link GnssMeasurement#getReceivedSvTimeNanos()}.\n *\n * <p>The position and velocity must be in ECEF coordinates.\n *\n * <p>If {@link GnssMeasurement#getSatellitePvt()} is derived from Broadcast ephemeris, then the\n * position is already w.r.t. the antenna phase center. However, if\n * {@link GnssMeasurement#getSatellitePvt()} is derived from other modeled orbits, such as\n * long-term orbits, or precise orbits, then the orbits may have been computed w.r.t.\n * the satellite center of mass, and then GNSS vendors are expected to correct for the effect\n * on different phase centers (can differ by meters) of different GNSS signals (e.g. L1, L5)\n * on the reported satellite position. Accordingly, we might observe a different satellite\n * position reported for L1 GnssMeasurement struct compared to L5 GnssMeasurement struct.\n *\n * <p>If {@link GnssMeasurement#getReceivedSvTimeNanos()} is not fully decoded,\n * {@link GnssMeasurement#getSatellitePvt()} could still be reported and\n * {@link GnssMeasurement#getReceivedSvTimeUncertaintyNanos()} would be used to provide confidence.\n * @hide\n ",
  "links" : [ "android.location.GnssMeasurement#getReceivedSvTimeNanos()", "android.location.GnssMeasurement#getReceivedSvTimeUncertaintyNanos()", "android.location.GnssMeasurement#getSatellitePvt()" ],
  "variables" : [ {
    "name" : "HAS_POSITION_VELOCITY_CLOCK_INFO",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating valid satellite position, velocity and clock info\n     * fields are stored in the SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_IONO",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid iono delay field is stored in the\n     * SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_TROPO",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid tropo delay field is stored in the\n     * SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_ISSUE_OF_DATA_CLOCK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid Issue of Data, Clock field is stored in the\n     * SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_ISSUE_OF_DATA_EPHEMERIS",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid Issue of Data, Ephemeris field is stored in\n     * the SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_TIME_OF_CLOCK",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid Time of Clock field is stored in the\n     * SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "HAS_TIME_OF_EPHEMERIS",
    "type" : "int",
    "comment" : "\n     * Bit mask for {@link #mFlags} indicating a valid Time of Ephemeris field is stored in\n     * the SatellitePvt.\n     ",
    "links" : [ "#mFlags" ]
  }, {
    "name" : "EPHEMERIS_SOURCE_DEMODULATED",
    "type" : "int",
    "comment" : " Ephemeris demodulated from broadcast signals ",
    "links" : [ ]
  }, {
    "name" : "EPHEMERIS_SOURCE_SERVER_NORMAL",
    "type" : "int",
    "comment" : "\n     * Server provided Normal type ephemeris data, which is similar to broadcast ephemeris in\n     * longevity (e.g. SUPL) - lasting for few hours and providing satellite orbit and clock\n     * with accuracy of 1 - 2 meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "EPHEMERIS_SOURCE_SERVER_LONG_TERM",
    "type" : "int",
    "comment" : "\n     * Server provided Long-Term type ephemeris data, which lasts for many hours to several days\n     * and often provides satellite orbit and clock accuracy of 2 - 20 meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "EPHEMERIS_SOURCE_OTHER",
    "type" : "int",
    "comment" : " Other ephemeris source ",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "\n     * A bitfield of flags indicating the validity of the fields in this SatellitePvt.\n     * The bit masks are defined in the constants with prefix HAS_*\n     *\n     * <p>Fields for which there is no corresponding flag must be filled in with a valid value.\n     * For convenience, these are marked as mandatory.\n     *\n     * <p>Others fields may have invalid information in them, if not marked as valid by the\n     * corresponding bit in flags.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPositionEcef",
    "type" : "PositionEcef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVelocityEcef",
    "type" : "VelocityEcef",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClockInfo",
    "type" : "ClockInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIonoDelayMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTropoDelayMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeOfClockSeconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeOfEphemerisSeconds",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIssueOfDataClock",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIssueOfDataEphemeris",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEphemerisSource",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SatellitePvt>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PositionEcef getPositionEcef()",
    "returnType" : "PositionEcef",
    "comment" : "\n     * Returns a {@link PositionEcef} object that contains estimates of the satellite\n     * position fields in ECEF coordinate frame.\n     ",
    "links" : [ "PositionEcef" ]
  }, {
    "name" : "public VelocityEcef getVelocityEcef()",
    "returnType" : "VelocityEcef",
    "comment" : "\n     * Returns a {@link VelocityEcef} object that contains estimates of the satellite\n     * velocity fields in the ECEF coordinate frame.\n     ",
    "links" : [ "VelocityEcef" ]
  }, {
    "name" : "public ClockInfo getClockInfo()",
    "returnType" : "ClockInfo",
    "comment" : "\n     * Returns a {@link ClockInfo} object that contains estimates of the satellite\n     * clock info.\n     ",
    "links" : [ "ClockInfo" ]
  }, {
    "name" : "public double getIonoDelayMeters()",
    "returnType" : "double",
    "comment" : "\n     * Returns the ionospheric delay in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getTropoDelayMeters()",
    "returnType" : "double",
    "comment" : "\n     * Returns the tropospheric delay in meters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIssueOfDataClock()",
    "returnType" : "int",
    "comment" : "\n     * Issue of Data, Clock.\n     *\n     * <p>This is defined in GPS ICD200 documentation (e.g.,\n     * <a href=\"https://www.gps.gov/technical/icwg/IS-GPS-200H.pdf\"></a>).\n     *\n     * <p>This field is valid if {@link #hasIssueOfDataClock()} is true.\n     ",
    "links" : [ "#hasIssueOfDataClock()" ]
  }, {
    "name" : "public int getIssueOfDataEphemeris()",
    "returnType" : "int",
    "comment" : "\n     * Issue of Data, Ephemeris.\n     *\n     * <p>This is defined in GPS ICD200 documentation (e.g.,\n     * <a href=\"https://www.gps.gov/technical/icwg/IS-GPS-200H.pdf\"></a>).\n     *\n     * <p>This field is valid if {@link #hasIssueOfDataEphemeris()} is true.\n     ",
    "links" : [ "#hasIssueOfDataEphemeris()" ]
  }, {
    "name" : "public long getTimeOfClockSeconds()",
    "returnType" : "long",
    "comment" : "\n     * Time of Clock in seconds.\n     *\n     * <p>The value is in seconds since GPS epoch, regardless of the constellation.\n     *\n     * <p>The value is not encoded as in GPS ICD200 documentation.\n     *\n     * <p>This field is valid if {@link #hasTimeOfClockSeconds()} is true.\n     ",
    "links" : [ "#hasTimeOfClockSeconds()" ]
  }, {
    "name" : "public long getTimeOfEphemerisSeconds()",
    "returnType" : "long",
    "comment" : "\n     * Time of ephemeris in seconds.\n     *\n     * <p>The value is in seconds since GPS epoch, regardless of the constellation.\n     *\n     * <p>The value is not encoded as in GPS ICD200 documentation.\n     *\n     * <p>This field is valid if {@link #hasTimeOfEphemerisSeconds()} is true.\n     ",
    "links" : [ "#hasTimeOfEphemerisSeconds()" ]
  }, {
    "name" : "public int getEphemerisSource()",
    "returnType" : "int",
    "comment" : "\n     * Satellite ephemeris source.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasPositionVelocityClockInfo()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getPositionEcef()}, {@link #getVelocityEcef()},\n     * and {@link #getClockInfo()} are valid.\n     ",
    "links" : [ "#getVelocityEcef()", "#getClockInfo()", "#getPositionEcef()" ]
  }, {
    "name" : "public boolean hasIono()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getIonoDelayMeters()} is valid. ",
    "links" : [ "#getIonoDelayMeters()" ]
  }, {
    "name" : "public boolean hasTropo()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getTropoDelayMeters()} is valid. ",
    "links" : [ "#getTropoDelayMeters()" ]
  }, {
    "name" : "public boolean hasIssueOfDataClock()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getIssueOfDataClock()} is valid. ",
    "links" : [ "#getIssueOfDataClock()" ]
  }, {
    "name" : "public boolean hasIssueOfDataEphemeris()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getIssueOfDataEphemeris()} is valid. ",
    "links" : [ "#getIssueOfDataEphemeris()" ]
  }, {
    "name" : "public boolean hasTimeOfClockSeconds()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getTimeOfClockSeconds()} ()} is valid. ",
    "links" : [ "#getTimeOfClockSeconds()" ]
  }, {
    "name" : "public boolean hasTimeOfEphemerisSeconds()",
    "returnType" : "boolean",
    "comment" : " Returns {@code true} if {@link #getTimeOfEphemerisSeconds()} is valid. ",
    "links" : [ "#getTimeOfEphemerisSeconds()" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public PositionEcef getPositionEcef()", "public VelocityEcef getVelocityEcef()", "public ClockInfo getClockInfo()", "public double getIonoDelayMeters()", "public double getTropoDelayMeters()", "public int getIssueOfDataClock()", "public int getIssueOfDataEphemeris()", "public long getTimeOfClockSeconds()", "public long getTimeOfEphemerisSeconds()", "public int getEphemerisSource()", "public boolean hasPositionVelocityClockInfo()", "public boolean hasIono()", "public boolean hasTropo()", "public boolean hasIssueOfDataClock()", "public boolean hasIssueOfDataEphemeris()", "public boolean hasTimeOfClockSeconds()", "public boolean hasTimeOfEphemerisSeconds()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel parcel, int flags)", "public String toString()" ],
  "variableNames" : [ "HAS_POSITION_VELOCITY_CLOCK_INFO", "HAS_IONO", "HAS_TROPO", "HAS_ISSUE_OF_DATA_CLOCK", "HAS_ISSUE_OF_DATA_EPHEMERIS", "HAS_TIME_OF_CLOCK", "HAS_TIME_OF_EPHEMERIS", "EPHEMERIS_SOURCE_DEMODULATED", "EPHEMERIS_SOURCE_SERVER_NORMAL", "EPHEMERIS_SOURCE_SERVER_LONG_TERM", "EPHEMERIS_SOURCE_OTHER", "mFlags", "mPositionEcef", "mVelocityEcef", "mClockInfo", "mIonoDelayMeters", "mTropoDelayMeters", "mTimeOfClockSeconds", "mTimeOfEphemerisSeconds", "mIssueOfDataClock", "mIssueOfDataEphemeris", "mEphemerisSource", "CREATOR" ]
}