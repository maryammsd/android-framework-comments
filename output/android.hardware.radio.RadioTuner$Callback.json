{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/radio/RadioTuner.java",
  "packageName" : "android.hardware.radio",
  "className" : "Callback",
  "comment" : "\n     * Callback provided by the client application when opening a {@link RadioTuner}\n     * to receive asynchronous operation results, updates and error notifications.\n     ",
  "links" : [ "android.hardware.radio.RadioTuner" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onError(int status)",
    "returnType" : "void",
    "comment" : "\n         * onError() is called when an error occured while performing an asynchronous\n         * operation of when the hardware or system service experiences a problem.\n         * status is one of {@link #ERROR_HARDWARE_FAILURE}, {@link #ERROR_SERVER_DIED},\n         * {@link #ERROR_CANCELLED}, {@link #ERROR_SCAN_TIMEOUT},\n         * {@link #ERROR_CONFIG}\n         *\n         * @deprecated Use {@link RadioTuner.Callback#onTuneFailed(int, ProgramSelector)} for\n         *             tune, scan and step; other use cases (configuration, background scan)\n         *             are already deprecated.\n         ",
    "links" : [ "#ERROR_SCAN_TIMEOUT", "#ERROR_HARDWARE_FAILURE", "#ERROR_CONFIG", "#ERROR_CANCELLED", "#ERROR_SERVER_DIED", "RadioTuner.Callback#onTuneFailed(int" ]
  }, {
    "name" : "public void onTuneFailed(@TunerResultType int result, @Nullable ProgramSelector selector)",
    "returnType" : "void",
    "comment" : "\n         * Called when tune, scan or step operation fails.\n         *\n         * @param result cause of the failure\n         * @param selector ProgramSelector argument of tune that failed;\n         *                 null for scan and step.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onConfigurationChanged(RadioManager.BandConfig config)",
    "returnType" : "void",
    "comment" : "\n         * onConfigurationChanged() is called upon successful completion of\n         * {@link RadioManager#openTuner(int, RadioManager.BandConfig, boolean, Callback, Handler)}\n         * or {@link RadioTuner#setConfiguration(RadioManager.BandConfig)}\n         *\n         * @deprecated Only applicable for HAL 1.x.\n         ",
    "links" : [ "android.hardware.radio.RadioTuner#setConfiguration(RadioManager.BandConfig)", "android.hardware.radio.RadioManager#openTuner(int" ]
  }, {
    "name" : "public void onProgramInfoChanged(RadioManager.ProgramInfo info)",
    "returnType" : "void",
    "comment" : "\n         * Called when program info (including metadata) for the current program has changed.\n         *\n         * <p>It happens either upon successful completion of {@link RadioTuner#step(int, boolean)},\n         * {@link RadioTuner#scan(int, boolean)}, {@link RadioTuner#tune(int, int)}; when\n         * a switching to alternate frequency occurs; or when metadata is updated.\n         ",
    "links" : [ "android.hardware.radio.RadioTuner#step(int", "android.hardware.radio.RadioTuner#scan(int", "android.hardware.radio.RadioTuner#tune(int" ]
  }, {
    "name" : "public void onMetadataChanged(RadioMetadata metadata)",
    "returnType" : "void",
    "comment" : "\n         * Called when metadata is updated for the current program.\n         *\n         * @deprecated Use {@link #onProgramInfoChanged(RadioManager.ProgramInfo)} instead.\n         ",
    "links" : [ "#onProgramInfoChanged(RadioManager.ProgramInfo)" ]
  }, {
    "name" : "public void onTrafficAnnouncement(boolean active)",
    "returnType" : "void",
    "comment" : "\n         * onTrafficAnnouncement() is called when a traffic announcement starts and stops.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onEmergencyAnnouncement(boolean active)",
    "returnType" : "void",
    "comment" : "\n         * onEmergencyAnnouncement() is called when an emergency annoucement starts and stops.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onAntennaState(boolean connected)",
    "returnType" : "void",
    "comment" : "\n         * onAntennaState() is called when the antenna is connected or disconnected.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onControlChanged(boolean control)",
    "returnType" : "void",
    "comment" : "\n         * onControlChanged() is called when the client loses or gains control of the radio tuner.\n         * The control is always granted after a successful call to\n         * {@link RadioManager#openTuner(int, RadioManager.BandConfig, boolean, Callback, Handler)}.\n         * If another client opens the same tuner, onControlChanged() will be called with\n         * control set to {@code false} to indicate loss of control.\n         * At this point, RadioTuner APIs other than getters will return\n         * {@link RadioManager#STATUS_INVALID_OPERATION}.\n         * When the other client releases the tuner, onControlChanged() will be called\n         * with control set to {@code true}.\n         ",
    "links" : [ "android.hardware.radio.RadioManager#STATUS_INVALID_OPERATION", "android.hardware.radio.RadioManager#openTuner(int" ]
  }, {
    "name" : "public void onBackgroundScanAvailabilityChange(boolean isAvailable)",
    "returnType" : "void",
    "comment" : "\n         * onBackgroundScanAvailabilityChange() is called when background scan\n         * feature becomes available or not.\n         *\n         * @param isAvailable true, if the tuner turned temporarily background-\n         *                    capable, false in the other case.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onBackgroundScanComplete()",
    "returnType" : "void",
    "comment" : "\n         * Called when a background scan completes successfully.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void onProgramListChanged()",
    "returnType" : "void",
    "comment" : "\n         * Called when available program list changed.\n         *\n         * Use {@link RadioTuner#getProgramList(Map)} to get an actual list.\n         ",
    "links" : [ "android.hardware.radio.RadioTuner#getProgramList(Map)" ]
  }, {
    "name" : "public void onConfigFlagUpdated(@RadioManager.ConfigFlag int flag, boolean value)",
    "returnType" : "void",
    "comment" : "\n         * Called when config flags are updated asynchronously due to internal events\n         * in broadcast radio HAL.\n         *\n         * {@link RadioTuner#setConfigFlag(int, boolean)} must not trigger this\n         * callback.\n         *\n         * @param flag Config flag updated\n         * @param value Value of the updated config flag\n         ",
    "links" : [ "android.hardware.radio.RadioTuner#setConfigFlag(int" ]
  }, {
    "name" : "public void onParametersUpdated(@NonNull Map<String, String> parameters)",
    "returnType" : "void",
    "comment" : "\n         * Generic callback for passing updates to vendor-specific parameter values.\n         *\n         * <p>The framework does not interpret the parameters, they are passed\n         * in an opaque manner between a vendor application and HAL.\n         *\n         * <p>It's up to the HAL implementation if and how to implement this callback,\n         * as long as it obeys the prefix rule. In particular, only selected keys\n         * may be notified this way. However, setParameters must not trigger\n         * this callback, while an internal event can change parameters\n         * asynchronously.\n         *\n         * @param parameters Vendor-specific key-value pairs.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onError(int status)", "public void onTuneFailed(@TunerResultType int result, @Nullable ProgramSelector selector)", "public void onConfigurationChanged(RadioManager.BandConfig config)", "public void onProgramInfoChanged(RadioManager.ProgramInfo info)", "public void onMetadataChanged(RadioMetadata metadata)", "public void onTrafficAnnouncement(boolean active)", "public void onEmergencyAnnouncement(boolean active)", "public void onAntennaState(boolean connected)", "public void onControlChanged(boolean control)", "public void onBackgroundScanAvailabilityChange(boolean isAvailable)", "public void onBackgroundScanComplete()", "public void onProgramListChanged()", "public void onConfigFlagUpdated(@RadioManager.ConfigFlag int flag, boolean value)", "public void onParametersUpdated(@NonNull Map<String, String> parameters)" ],
  "variableNames" : [ ]
}