{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/test/mock/MockPackageManager.java",
  "packageName" : "android.test.mock",
  "className" : "MockPackageManager",
  "comment" : "\n * A mock {@link android.content.pm.PackageManager} class.  All methods are non-functional and throw\n * {@link java.lang.UnsupportedOperationException}. Override it to provide the operations that you\n * need.\n *\n * @deprecated Use a mocking framework like <a href=\"https://github.com/mockito/mockito\">Mockito</a>.\n * New tests should be written using the\n * <a href=\"{@docRoot}tools/testing-support-library/index.html\">Android Testing Support Library</a>.\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException",
    "returnType" : "PackageInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String[] currentToCanonicalPackageNames(String[] names)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] canonicalToCurrentPackageNames(String[] names)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getLeanbackLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Intent getCarLaunchIntentForPackage(String packageName)",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(String packageName) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getPackageGids(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUid(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUidAsUser(String packageName, int flags, int userHandle) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPackageUidAsUser(String packageName, int userHandle) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PermissionInfo getPermissionInfo(String name, int flags) throws NameNotFoundException",
    "returnType" : "PermissionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PermissionInfo> queryPermissionsByGroup(String group, int flags) throws NameNotFoundException",
    "returnType" : "List<PermissionInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean arePermissionsIndividuallyControlled()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isWirelessConsentModeEnabled()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PermissionGroupInfo getPermissionGroupInfo(String name, int flags) throws NameNotFoundException",
    "returnType" : "PermissionGroupInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PermissionGroupInfo> getAllPermissionGroups(int flags)",
    "returnType" : "List<PermissionGroupInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfo(String packageName, int flags) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ApplicationInfo getApplicationInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException",
    "returnType" : "ApplicationInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getActivityInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ActivityInfo getReceiverInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ActivityInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ServiceInfo getServiceInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo getProviderInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getInstalledPackagesAsUser(int flags, int userId)",
    "returnType" : "List<PackageInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkPermission(String permName, String pkgName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean canRequestPackageInstalls()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPermissionRevokedByPolicy(String permName, String pkgName)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPermissionControllerPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean addPermission(PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean addPermissionAsync(PermissionInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePermission(String name)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void grantRuntimePermission(String packageName, String permissionName, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void revokeRuntimePermission(String packageName, String permissionName, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getPermissionFlags(String permissionName, String packageName, UserHandle user)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updatePermissionFlags(String permissionName, String packageName, int flagMask, int flagValues, UserHandle user)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int whitelistFlags)",
    "returnType" : "Set<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permission, @PermissionWhitelistFlags int whitelistFlags)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permission, @PermissionWhitelistFlags int whitelistFlags)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowRequestPermissionRationale(String permission)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int checkSignatures(String pkg1, String pkg2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int checkSignatures(int uid1, int uid2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getPackagesForUid(int uid)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNameForUid(int uid)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getNamesForUids(int[] uid)",
    "returnType" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getUidForSharedUser(String sharedUserName)",
    "returnType" : "int",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplications(int flags)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, int userId)",
    "returnType" : "List<ApplicationInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<InstantAppInfo> getInstantApps()",
    "returnType" : "List<InstantAppInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getInstantAppIcon(String packageName)",
    "returnType" : "Drawable",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getInstantAppCookie()",
    "returnType" : "byte[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInstantApp(String packageName)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getInstantAppCookieMaxBytes()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getInstantAppCookieMaxSize()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void clearInstantAppCookie()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void updateInstantAppCookie(@NonNull byte[] cookie)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean setInstantAppCookie(@NonNull byte[] cookie)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ChangedPackages getChangedPackages(int sequenceNumber)",
    "returnType" : "ChangedPackages",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivity(Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveActivityAsUser(Intent intent, int flags, int userId)",
    "returnType" : "ResolveInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivities(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveService(Intent intent, int flags)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ResolveInfo resolveServiceAsUser(Intent intent, int flags, int userId)",
    "returnType" : "ResolveInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServices(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId)",
    "returnType" : "List<ResolveInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags)",
    "returnType" : "List<ResolveInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProvider(String name, int flags)",
    "returnType" : "ProviderInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ProviderInfo resolveContentProviderAsUser(String name, int flags, int userId)",
    "returnType" : "ProviderInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags)",
    "returnType" : "List<ProviderInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) throws NameNotFoundException",
    "returnType" : "InstrumentationInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags)",
    "returnType" : "List<InstrumentationInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityIcon(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityIcon(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getDefaultActivityIcon()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityBanner(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityBanner(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationBanner(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationBanner(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationIcon(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationIcon(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityLogo(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getActivityLogo(Intent intent) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationLogo(ApplicationInfo info)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getApplicationLogo(String packageName) throws NameNotFoundException",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgedIcon(Drawable icon, UserHandle user)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgeForDensity(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getUserBadgeForDensityNoBackground(UserHandle user, int density)",
    "returnType" : "Drawable",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getText(String packageName, int resid, ApplicationInfo appInfo)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo)",
    "returnType" : "XmlResourceParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getApplicationLabel(ApplicationInfo info)",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForActivity(ComponentName activityName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(ApplicationInfo app)",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplication(String appPackageName) throws NameNotFoundException",
    "returnType" : "Resources",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Resources getResourcesForApplicationAsUser(String appPackageName, int userId)",
    "returnType" : "Resources",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags)",
    "returnType" : "PackageInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setInstallerPackageName(String targetPackage, String installerPackageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUpdateAvailable(String packageName, boolean updateAvailable)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getInstallerPackageName(String packageName)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMoveStatus(int moveId)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void registerMoveCallback(MoveCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterMoveCallback(MoveCallback callback)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int movePackage(String packageName, VolumeInfo vol)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public VolumeInfo getPackageCurrentVolume(ApplicationInfo app)",
    "returnType" : "VolumeInfo",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app)",
    "returnType" : "List<VolumeInfo>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public int movePrimaryStorage(VolumeInfo vol)",
    "returnType" : "int",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public VolumeInfo getPrimaryStorageCurrentVolume()",
    "returnType" : "VolumeInfo",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public List<VolumeInfo> getPrimaryStorageCandidateVolumes()",
    "returnType" : "List<VolumeInfo>",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void clearApplicationUserData(String packageName, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void freeStorageAndNotify(String volumeUuid, long idealStorageSize, IPackageDataObserver observer)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void freeStorage(String volumeUuid, long idealStorageSize, IntentSender pi)",
    "returnType" : "void",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void deletePackage(String packageName, IPackageDeleteObserver observer, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int flags, int userId)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addPackageToPreferred(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removePackageFromPreferred(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<PackageInfo> getPreferredPackages(int flags)",
    "returnType" : "List<PackageInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getComponentEnabledSetting(ComponentName componentName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationEnabledSetting(String packageName, int newState, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getApplicationEnabledSetting(String packageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void flushPackageRestrictionsAsUser(int userId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replacePreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearPackagePreferredActivities(String packageName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getPackageSizeInfoAsUser(String packageName, int userHandle, IPackageStatsObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide - to match hiding in superclass\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getHomeActivities(List<ResolveInfo> outActivities)",
    "returnType" : "ComponentName",
    "comment" : " @hide - hidden in superclass ",
    "links" : [ ]
  }, {
    "name" : "public String[] getSystemSharedLibraryNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibraries(int flags)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, int userId)",
    "returnType" : "List<SharedLibraryInfo>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getServicesSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getSharedSystemSharedLibraryPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public FeatureInfo[] getSystemAvailableFeatures()",
    "returnType" : "FeatureInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSystemFeature(String name)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSystemFeature(String name, int version)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isSafeMode()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public KeySet getKeySetByAlias(String packageName, String alias)",
    "returnType" : "KeySet",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public KeySet getSigningKeySet(String packageName)",
    "returnType" : "KeySet",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSignedBy(String packageName, KeySet ks)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSignedByExactly(String packageName, KeySet ks)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String[] setPackagesSuspended(String[] packageNames, boolean hidden, PersistableBundle appExtras, PersistableBundle launcherExtras, String dialogMessage)",
    "returnType" : "String[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageSuspendedForUser(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setApplicationCategoryHint(String packageName, int categoryHint)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getApplicationHiddenSettingAsUser(String packageName, UserHandle user)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackage(String packageName) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackage(String packageName, int installReason) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int installExistingPackageAsUser(String packageName, int userId) throws NameNotFoundException",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void verifyPendingInstall(int id, int verificationCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void verifyIntentFilter(int id, int verificationCode, List<String> outFailedDomains)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getIntentVerificationStatusAsUser(String packageName, int userId)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean updateIntentVerificationStatusAsUser(String packageName, int status, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName)",
    "returnType" : "List<IntentFilterVerificationInfo>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<IntentFilter> getAllIntentFilters(String packageName)",
    "returnType" : "List<IntentFilter>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultBrowserPackageName(int userId)",
    "returnType" : "String",
    "comment" : " {@removed} ",
    "links" : [ ]
  }, {
    "name" : "public String getDefaultBrowserPackageNameAsUser(int userId)",
    "returnType" : "String",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDefaultBrowserPackageName(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : " {@removed} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDefaultBrowserPackageNameAsUser(String packageName, int userId)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public VerifierDeviceIdentity getVerifierDeviceIdentity()",
    "returnType" : "VerifierDeviceIdentity",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUpgrade()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeviceUpgrading()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearCrossProfileIntentFilters(int sourceUserId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PackageInstaller getPackageInstaller()",
    "returnType" : "PackageInstaller",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPackageAvailable(String packageName)",
    "returnType" : "boolean",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadUnbadgedItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)",
    "returnType" : "Drawable",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInstallReason(String packageName, UserHandle user)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getInstantAppResolverSettingsComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName getInstantAppInstallerComponent()",
    "returnType" : "ComponentName",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getInstantAppAndroidId(String packageName, UserHandle user)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerDexModule(String dexModulePath, @Nullable DexModuleRegisterCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ArtManager getArtManager()",
    "returnType" : "ArtManager",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setHarmfulAppWarning(String packageName, CharSequence warning)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getHarmfulAppWarning(String packageName)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(String packageName, byte[] certificate, @PackageManager.CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSigningCertificate(int uid, byte[] certificate, @PackageManager.CertificateInputType int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public PackageInfo getPackageInfo(String packageName, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfo(VersionedPackage versionedPackage, int flags) throws NameNotFoundException", "public PackageInfo getPackageInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException", "public String[] currentToCanonicalPackageNames(String[] names)", "public String[] canonicalToCurrentPackageNames(String[] names)", "public Intent getLaunchIntentForPackage(String packageName)", "public Intent getLeanbackLaunchIntentForPackage(String packageName)", "public Intent getCarLaunchIntentForPackage(String packageName)", "public int[] getPackageGids(String packageName) throws NameNotFoundException", "public int[] getPackageGids(String packageName, int flags) throws NameNotFoundException", "public int getPackageUid(String packageName, int flags) throws NameNotFoundException", "public int getPackageUidAsUser(String packageName, int flags, int userHandle) throws NameNotFoundException", "public int getPackageUidAsUser(String packageName, int userHandle) throws NameNotFoundException", "public PermissionInfo getPermissionInfo(String name, int flags) throws NameNotFoundException", "public List<PermissionInfo> queryPermissionsByGroup(String group, int flags) throws NameNotFoundException", "public boolean arePermissionsIndividuallyControlled()", "public boolean isWirelessConsentModeEnabled()", "public PermissionGroupInfo getPermissionGroupInfo(String name, int flags) throws NameNotFoundException", "public List<PermissionGroupInfo> getAllPermissionGroups(int flags)", "public ApplicationInfo getApplicationInfo(String packageName, int flags) throws NameNotFoundException", "public ApplicationInfo getApplicationInfoAsUser(String packageName, int flags, int userId) throws NameNotFoundException", "public ActivityInfo getActivityInfo(ComponentName className, int flags) throws NameNotFoundException", "public ActivityInfo getReceiverInfo(ComponentName className, int flags) throws NameNotFoundException", "public ServiceInfo getServiceInfo(ComponentName className, int flags) throws NameNotFoundException", "public ProviderInfo getProviderInfo(ComponentName className, int flags) throws NameNotFoundException", "public List<PackageInfo> getInstalledPackages(int flags)", "public List<PackageInfo> getPackagesHoldingPermissions(String[] permissions, int flags)", "public List<PackageInfo> getInstalledPackagesAsUser(int flags, int userId)", "public int checkPermission(String permName, String pkgName)", "public boolean canRequestPackageInstalls()", "public boolean isPermissionRevokedByPolicy(String permName, String pkgName)", "public String getPermissionControllerPackageName()", "public boolean addPermission(PermissionInfo info)", "public boolean addPermissionAsync(PermissionInfo info)", "public void removePermission(String name)", "public void grantRuntimePermission(String packageName, String permissionName, UserHandle user)", "public void revokeRuntimePermission(String packageName, String permissionName, UserHandle user)", "public int getPermissionFlags(String permissionName, String packageName, UserHandle user)", "public void updatePermissionFlags(String permissionName, String packageName, int flagMask, int flagValues, UserHandle user)", "public Set<String> getWhitelistedRestrictedPermissions(@NonNull String packageName, @PermissionWhitelistFlags int whitelistFlags)", "public boolean addWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permission, @PermissionWhitelistFlags int whitelistFlags)", "public boolean removeWhitelistedRestrictedPermission(@NonNull String packageName, @NonNull String permission, @PermissionWhitelistFlags int whitelistFlags)", "public boolean shouldShowRequestPermissionRationale(String permission)", "public void addOnPermissionsChangeListener(OnPermissionsChangedListener listener)", "public void removeOnPermissionsChangeListener(OnPermissionsChangedListener listener)", "public int checkSignatures(String pkg1, String pkg2)", "public int checkSignatures(int uid1, int uid2)", "public String[] getPackagesForUid(int uid)", "public String getNameForUid(int uid)", "public String[] getNamesForUids(int[] uid)", "public int getUidForSharedUser(String sharedUserName)", "public List<ApplicationInfo> getInstalledApplications(int flags)", "public List<ApplicationInfo> getInstalledApplicationsAsUser(int flags, int userId)", "public List<InstantAppInfo> getInstantApps()", "public Drawable getInstantAppIcon(String packageName)", "public byte[] getInstantAppCookie()", "public boolean isInstantApp()", "public boolean isInstantApp(String packageName)", "public int getInstantAppCookieMaxBytes()", "public int getInstantAppCookieMaxSize()", "public void clearInstantAppCookie()", "public void updateInstantAppCookie(@NonNull byte[] cookie)", "public boolean setInstantAppCookie(@NonNull byte[] cookie)", "public ChangedPackages getChangedPackages(int sequenceNumber)", "public ResolveInfo resolveActivity(Intent intent, int flags)", "public ResolveInfo resolveActivityAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentActivities(Intent intent, int flags)", "public List<ResolveInfo> queryIntentActivitiesAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentActivityOptions(ComponentName caller, Intent[] specifics, Intent intent, int flags)", "public List<ResolveInfo> queryBroadcastReceivers(Intent intent, int flags)", "public List<ResolveInfo> queryBroadcastReceiversAsUser(Intent intent, int flags, int userId)", "public ResolveInfo resolveService(Intent intent, int flags)", "public ResolveInfo resolveServiceAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentServices(Intent intent, int flags)", "public List<ResolveInfo> queryIntentServicesAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentContentProvidersAsUser(Intent intent, int flags, int userId)", "public List<ResolveInfo> queryIntentContentProviders(Intent intent, int flags)", "public ProviderInfo resolveContentProvider(String name, int flags)", "public ProviderInfo resolveContentProviderAsUser(String name, int flags, int userId)", "public List<ProviderInfo> queryContentProviders(String processName, int uid, int flags)", "public InstrumentationInfo getInstrumentationInfo(ComponentName className, int flags) throws NameNotFoundException", "public List<InstrumentationInfo> queryInstrumentation(String targetPackage, int flags)", "public Drawable getDrawable(String packageName, int resid, ApplicationInfo appInfo)", "public Drawable getActivityIcon(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityIcon(Intent intent) throws NameNotFoundException", "public Drawable getDefaultActivityIcon()", "public Drawable getActivityBanner(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityBanner(Intent intent) throws NameNotFoundException", "public Drawable getApplicationBanner(ApplicationInfo info)", "public Drawable getApplicationBanner(String packageName) throws NameNotFoundException", "public Drawable getApplicationIcon(ApplicationInfo info)", "public Drawable getApplicationIcon(String packageName) throws NameNotFoundException", "public Drawable getActivityLogo(ComponentName activityName) throws NameNotFoundException", "public Drawable getActivityLogo(Intent intent) throws NameNotFoundException", "public Drawable getApplicationLogo(ApplicationInfo info)", "public Drawable getApplicationLogo(String packageName) throws NameNotFoundException", "public Drawable getUserBadgedIcon(Drawable icon, UserHandle user)", "public Drawable getUserBadgedDrawableForDensity(Drawable drawable, UserHandle user, Rect badgeLocation, int badgeDensity)", "public Drawable getUserBadgeForDensity(UserHandle user, int density)", "public Drawable getUserBadgeForDensityNoBackground(UserHandle user, int density)", "public CharSequence getUserBadgedLabel(CharSequence label, UserHandle user)", "public CharSequence getText(String packageName, int resid, ApplicationInfo appInfo)", "public XmlResourceParser getXml(String packageName, int resid, ApplicationInfo appInfo)", "public CharSequence getApplicationLabel(ApplicationInfo info)", "public Resources getResourcesForActivity(ComponentName activityName) throws NameNotFoundException", "public Resources getResourcesForApplication(ApplicationInfo app)", "public Resources getResourcesForApplication(String appPackageName) throws NameNotFoundException", "public Resources getResourcesForApplicationAsUser(String appPackageName, int userId)", "public PackageInfo getPackageArchiveInfo(String archiveFilePath, int flags)", "public void setInstallerPackageName(String targetPackage, String installerPackageName)", "public void setUpdateAvailable(String packageName, boolean updateAvailable)", "public String getInstallerPackageName(String packageName)", "public int getMoveStatus(int moveId)", "public void registerMoveCallback(MoveCallback callback, Handler handler)", "public void unregisterMoveCallback(MoveCallback callback)", "public int movePackage(String packageName, VolumeInfo vol)", "public VolumeInfo getPackageCurrentVolume(ApplicationInfo app)", "public List<VolumeInfo> getPackageCandidateVolumes(ApplicationInfo app)", "public int movePrimaryStorage(VolumeInfo vol)", "public VolumeInfo getPrimaryStorageCurrentVolume()", "public List<VolumeInfo> getPrimaryStorageCandidateVolumes()", "public void clearApplicationUserData(String packageName, IPackageDataObserver observer)", "public void deleteApplicationCacheFiles(String packageName, IPackageDataObserver observer)", "public void deleteApplicationCacheFilesAsUser(String packageName, int userId, IPackageDataObserver observer)", "public void freeStorageAndNotify(String volumeUuid, long idealStorageSize, IPackageDataObserver observer)", "public void freeStorage(String volumeUuid, long idealStorageSize, IntentSender pi)", "public void deletePackage(String packageName, IPackageDeleteObserver observer, int flags)", "public void deletePackageAsUser(String packageName, IPackageDeleteObserver observer, int flags, int userId)", "public void addPackageToPreferred(String packageName)", "public void removePackageFromPreferred(String packageName)", "public List<PackageInfo> getPreferredPackages(int flags)", "public void setComponentEnabledSetting(ComponentName componentName, int newState, int flags)", "public int getComponentEnabledSetting(ComponentName componentName)", "public void setApplicationEnabledSetting(String packageName, int newState, int flags)", "public int getApplicationEnabledSetting(String packageName)", "public void flushPackageRestrictionsAsUser(int userId)", "public void addPreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)", "public void replacePreferredActivity(IntentFilter filter, int match, ComponentName[] set, ComponentName activity)", "public void clearPackagePreferredActivities(String packageName)", "public void getPackageSizeInfoAsUser(String packageName, int userHandle, IPackageStatsObserver observer)", "public int getPreferredActivities(List<IntentFilter> outFilters, List<ComponentName> outActivities, String packageName)", "public ComponentName getHomeActivities(List<ResolveInfo> outActivities)", "public String[] getSystemSharedLibraryNames()", "public List<SharedLibraryInfo> getSharedLibraries(int flags)", "public List<SharedLibraryInfo> getSharedLibrariesAsUser(int flags, int userId)", "public String getServicesSystemSharedLibraryPackageName()", "public String getSharedSystemSharedLibraryPackageName()", "public FeatureInfo[] getSystemAvailableFeatures()", "public boolean hasSystemFeature(String name)", "public boolean hasSystemFeature(String name, int version)", "public boolean isSafeMode()", "public KeySet getKeySetByAlias(String packageName, String alias)", "public KeySet getSigningKeySet(String packageName)", "public boolean isSignedBy(String packageName, KeySet ks)", "public boolean isSignedByExactly(String packageName, KeySet ks)", "public String[] setPackagesSuspended(String[] packageNames, boolean hidden, PersistableBundle appExtras, PersistableBundle launcherExtras, String dialogMessage)", "public boolean isPackageSuspendedForUser(String packageName, int userId)", "public void setApplicationCategoryHint(String packageName, int categoryHint)", "public boolean setApplicationHiddenSettingAsUser(String packageName, boolean hidden, UserHandle user)", "public boolean getApplicationHiddenSettingAsUser(String packageName, UserHandle user)", "public int installExistingPackage(String packageName) throws NameNotFoundException", "public int installExistingPackage(String packageName, int installReason) throws NameNotFoundException", "public int installExistingPackageAsUser(String packageName, int userId) throws NameNotFoundException", "public void verifyPendingInstall(int id, int verificationCode)", "public void extendVerificationTimeout(int id, int verificationCodeAtTimeout, long millisecondsToDelay)", "public void verifyIntentFilter(int id, int verificationCode, List<String> outFailedDomains)", "public int getIntentVerificationStatusAsUser(String packageName, int userId)", "public boolean updateIntentVerificationStatusAsUser(String packageName, int status, int userId)", "public List<IntentFilterVerificationInfo> getIntentFilterVerifications(String packageName)", "public List<IntentFilter> getAllIntentFilters(String packageName)", "public String getDefaultBrowserPackageName(int userId)", "public String getDefaultBrowserPackageNameAsUser(int userId)", "public boolean setDefaultBrowserPackageName(String packageName, int userId)", "public boolean setDefaultBrowserPackageNameAsUser(String packageName, int userId)", "public VerifierDeviceIdentity getVerifierDeviceIdentity()", "public boolean isUpgrade()", "public boolean isDeviceUpgrading()", "public void addCrossProfileIntentFilter(IntentFilter filter, int sourceUserId, int targetUserId, int flags)", "public void clearCrossProfileIntentFilters(int sourceUserId)", "public PackageInstaller getPackageInstaller()", "public boolean isPackageAvailable(String packageName)", "public Drawable loadItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)", "public Drawable loadUnbadgedItemIcon(PackageItemInfo itemInfo, ApplicationInfo appInfo)", "public int getInstallReason(String packageName, UserHandle user)", "public ComponentName getInstantAppResolverSettingsComponent()", "public ComponentName getInstantAppInstallerComponent()", "public String getInstantAppAndroidId(String packageName, UserHandle user)", "public void registerDexModule(String dexModulePath, @Nullable DexModuleRegisterCallback callback)", "public ArtManager getArtManager()", "public void setHarmfulAppWarning(String packageName, CharSequence warning)", "public CharSequence getHarmfulAppWarning(String packageName)", "public boolean hasSigningCertificate(String packageName, byte[] certificate, @PackageManager.CertificateInputType int type)", "public boolean hasSigningCertificate(int uid, byte[] certificate, @PackageManager.CertificateInputType int type)" ]
}