{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/xslt/EnvironmentCheck.java",
  "packageName" : "org.apache.xalan.xslt",
  "className" : "EnvironmentCheck",
  "comment" : "\n * Utility class to report simple information about the environment.\n * Simplistic reporting about certain classes found in your JVM may \n * help answer some FAQs for simple problems.\n *\n * <p>Usage-command line:  \n * <code>\n * java org.apache.xalan.xslt.EnvironmentCheck [-out outFile]\n * </code></p>\n * \n * <p>Usage-from program:  \n * <code>\n * boolean environmentOK = \n * (new EnvironmentCheck()).checkEnvironment(yourPrintWriter);\n * </code></p>\n *\n * <p>Usage-from stylesheet:  \n * <code><pre>\n *    &lt;?xml version=\"1.0\"?&gt;\n *    &lt;xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\"\n *        xmlns:xalan=\"http://xml.apache.org/xalan\"\n *        exclude-result-prefixes=\"xalan\"&gt;\n *    &lt;xsl:output indent=\"yes\"/&gt;\n *    &lt;xsl:template match=\"/\"&gt;\n *      &lt;xsl:copy-of select=\"xalan:checkEnvironment()\"/&gt;\n *    &lt;/xsl:template&gt;\n *    &lt;/xsl:stylesheet&gt;\n * </pre></code></p>\n *  \n * <p>Xalan users reporting problems are encouraged to use this class \n * to see if there are potential problems with their actual \n * Java environment <b>before</b> reporting a bug.  Note that you \n * should both check from the JVM/JRE's command line as well as \n * temporarily calling checkEnvironment() directly from your code, \n * since the classpath may differ (especially for servlets, etc).</p>\n *\n * <p>Also see http://xml.apache.org/xalan-j/faq.html</p>\n *\n * <p>Note: This class is pretty simplistic: \n * results are not necessarily definitive nor will it find all \n * problems related to environment setup.  Also, you should avoid \n * calling this in deployed production code, both because it is \n * quite slow and because it forces classes to get loaded.</p>\n *\n * <p>Note: This class explicitly has very limited compile-time \n * dependencies to enable easy compilation and usage even when \n * Xalan, DOM/SAX/JAXP, etc. are not present.</p>\n * \n * <p>Note: for an improved version of this utility, please see \n * the xml-commons' project Which utility which does the same kind \n * of thing but in a much simpler manner.</p>\n *\n * @author Shane_Curcuru@us.ibm.com\n * @version $Id: EnvironmentCheck.java 468646 2006-10-28 06:57:58Z minchau $\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ERROR",
    "type" : "String",
    "comment" : " Prefixed to hash keys that signify serious problems.  ",
    "links" : [ ]
  }, {
    "name" : "WARNING",
    "type" : "String",
    "comment" : " Added to descriptions that signify potential problems.  ",
    "links" : [ ]
  }, {
    "name" : "ERROR_FOUND",
    "type" : "String",
    "comment" : " Value for any error found.  ",
    "links" : [ ]
  }, {
    "name" : "VERSION",
    "type" : "String",
    "comment" : " Prefixed to hash keys that signify version numbers.  ",
    "links" : [ ]
  }, {
    "name" : "FOUNDCLASSES",
    "type" : "String",
    "comment" : " Prefixed to hash keys that signify .jars found in classpath.  ",
    "links" : [ ]
  }, {
    "name" : "CLASS_PRESENT",
    "type" : "String",
    "comment" : " Marker that a class or .jar was found.  ",
    "links" : [ ]
  }, {
    "name" : "CLASS_NOTPRESENT",
    "type" : "String",
    "comment" : " Marker that a class or .jar was not found.  ",
    "links" : [ ]
  }, {
    "name" : "jarNames",
    "type" : "String[]",
    "comment" : " Listing of common .jar files that include Xalan-related classes.  ",
    "links" : [ ]
  }, {
    "name" : "jarVersions",
    "type" : "Hashtable",
    "comment" : " \n   * Manual table of known .jar sizes.  \n   * Only includes shipped versions of certain projects.\n   * key=jarsize, value=jarname ' from ' distro name\n   * Note assumption: two jars cannot have the same size!\n   *\n   * @see #getApparentVersion(String, long)\n   ",
    "links" : [ ]
  }, {
    "name" : "outWriter",
    "type" : "PrintWriter",
    "comment" : " Simple PrintWriter we send output to; defaults to System.out.  ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void main(String[] args)",
    "returnType" : "void",
    "comment" : "\n   * Command line runnability: checks for [-out outFilename] arg.\n   * <p>Command line entrypoint; Sets output and calls \n   * {@link #checkEnvironment(PrintWriter)}.</p>\n   * @param args command line args\n   ",
    "links" : [ "#checkEnvironment(PrintWriter)" ]
  }, {
    "name" : "public boolean checkEnvironment(PrintWriter pw)",
    "returnType" : "boolean",
    "comment" : "\n   * Programmatic entrypoint: Report on basic Java environment \n   * and CLASSPATH settings that affect Xalan.\n   *\n   * <p>Note that this class is not advanced enough to tell you \n   * everything about the environment that affects Xalan, and \n   * sometimes reports errors that will not actually affect \n   * Xalan's behavior.  Currently, it very simplistically \n   * checks the JVM's environment for some basic properties and \n   * logs them out; it will report a problem if it finds a setting \n   * or .jar file that is <i>likely</i> to cause problems.</p>\n   *\n   * <p>Advanced users can peruse the code herein to help them \n   * investigate potential environment problems found; other users \n   * may simply send the output from this tool along with any bugs \n   * they submit to help us in the debugging process.</p>\n   *\n   * @param pw PrintWriter to send output to; can be sent to a \n   * file that will look similar to a Properties file; defaults \n   * to System.out if null\n   * @return true if your environment appears to have no major \n   * problems; false if potential environment problems found\n   * @see #getEnvironmentHash()\n   ",
    "links" : [ ]
  }, {
    "name" : "public Hashtable getEnvironmentHash()",
    "returnType" : "Hashtable",
    "comment" : "\n   * Fill a hash with basic environment settings that affect Xalan.\n   *\n   * <p>Worker method called from various places.</p>\n   * <p>Various system and CLASSPATH, etc. properties are put into \n   * the hash as keys with a brief description of the current state \n   * of that item as the value.  Any serious problems will be put in \n   * with a key that is prefixed with {@link #ERROR 'ERROR.'} so it\n   * stands out in any resulting report; also a key with just that \n   * constant will be set as well for any error.</p>\n   * <p>Note that some legitimate cases are flaged as potential \n   * errors - namely when a developer recompiles xalan.jar on their \n   * own - and even a non-error state doesn't guaruntee that \n   * everything in the environment is correct.  But this will help \n   * point out the most common classpath and system property\n   * problems that we've seen.</p>   \n   *\n   * @return Hashtable full of useful environment info about Xalan \n   * and related system properties, etc.\n   ",
    "links" : [ "#ERROR" ]
  }, {
    "name" : "protected boolean writeEnvironmentReport(Hashtable h)",
    "returnType" : "boolean",
    "comment" : "\n   * Dump a basic Xalan environment report to outWriter.  \n   *\n   * <p>This dumps a simple header and then each of the entries in \n   * the Hashtable to our PrintWriter; it does special processing \n   * for entries that are .jars found in the classpath.</p>\n   *\n   * @param h Hashtable of items to report on; presumably\n   * filled in by our various check*() methods\n   * @return true if your environment appears to have no major \n   * problems; false if potential environment problems found\n   * @see #appendEnvironmentReport(Node, Document, Hashtable)\n   * for an equivalent that appends to a Node instead\n   ",
    "links" : [ ]
  }, {
    "name" : "protected boolean logFoundJars(Vector v, String desc)",
    "returnType" : "boolean",
    "comment" : "\n   * Print out report of .jars found in a classpath. \n   *\n   * Takes the information encoded from a checkPathForJars() \n   * call and dumps it out to our PrintWriter.\n   *\n   * @param v Vector of Hashtables of .jar file info\n   * @param desc description to print out in header\n   *\n   * @return false if OK, true if any .jars were reported \n   * as having errors\n   * @see #checkPathForJars(String, String[])\n   ",
    "links" : [ ]
  }, {
    "name" : "public void appendEnvironmentReport(Node container, Document factory, Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Stylesheet extension entrypoint: Dump a basic Xalan \n   * environment report from getEnvironmentHash() to a Node.  \n   * \n   * <p>Copy of writeEnvironmentReport that creates a Node suitable \n   * for other processing instead of a properties-like text output.\n   * </p>\n   * @param container Node to append our report to\n   * @param factory Document providing createElement, etc. services\n   * @param h Hash presumably from {@link #getEnvironmentHash()}\n   * @see #writeEnvironmentReport(Hashtable)\n   * for an equivalent that writes to a PrintWriter instead\n   ",
    "links" : [ "#getEnvironmentHash()" ]
  }, {
    "name" : "protected boolean appendFoundJars(Node container, Document factory, Vector v, String desc)",
    "returnType" : "boolean",
    "comment" : "\n   * Print out report of .jars found in a classpath. \n   *\n   * Takes the information encoded from a checkPathForJars() \n   * call and dumps it out to our PrintWriter.\n   *\n   * @param container Node to append our report to\n   * @param factory Document providing createElement, etc. services\n   * @param v Vector of Hashtables of .jar file info\n   * @param desc description to print out in header\n   *\n   * @return false if OK, true if any .jars were reported \n   * as having errors\n   * @see #checkPathForJars(String, String[])\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkSystemProperties(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Fillin hash with info about SystemProperties.  \n   *\n   * Logs java.class.path and other likely paths; then attempts \n   * to search those paths for .jar files with Xalan-related classes.\n   *\n   * //@todo NOTE: We don't actually search java.ext.dirs for \n   * //  *.jar files therein! This should be updated\n   *\n   * @param h Hashtable to put information in\n   * @see #jarNames\n   * @see #checkPathForJars(String, String[])\n   ",
    "links" : [ ]
  }, {
    "name" : "protected Vector checkPathForJars(String cp, String[] jars)",
    "returnType" : "Vector",
    "comment" : "\n   * Cheap-o listing of specified .jars found in the classpath. \n   *\n   * cp should be separated by the usual File.pathSeparator.  We \n   * then do a simplistic search of the path for any requested \n   * .jar filenames, and return a listing of their names and \n   * where (apparently) they came from.\n   *\n   * @param cp classpath to search\n   * @param jars array of .jar base filenames to look for\n   *\n   * @return Vector of Hashtables filled with info about found .jars\n   * @see #jarNames\n   * @see #logFoundJars(Vector, String)\n   * @see #appendFoundJars(Node, Document, Vector, String )\n   * @see #getApparentVersion(String, long)\n   ",
    "links" : [ ]
  }, {
    "name" : "protected String getApparentVersion(String jarName, long jarSize)",
    "returnType" : "String",
    "comment" : "\n   * Cheap-o method to determine the product version of a .jar.   \n   *\n   * Currently does a lookup into a local table of some recent \n   * shipped Xalan builds to determine where the .jar probably \n   * came from.  Note that if you recompile Xalan or Xerces \n   * yourself this will likely report a potential error, since \n   * we can't certify builds other than the ones we ship.\n   * Only reports against selected posted Xalan-J builds.\n   *\n   * //@todo actually look up version info in manifests\n   *\n   * @param jarName base filename of the .jarfile\n   * @param jarSize size of the .jarfile\n   *\n   * @return String describing where the .jar file probably \n   * came from\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkJAXPVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report version information about JAXP interfaces.\n   *\n   * Currently distinguishes between JAXP 1.0.1 and JAXP 1.1, \n   * and not found; only tests the interfaces, and does not \n   * check for reference implementation versions.\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkProcessorVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report product version information from Xalan-J.\n   *\n   * Looks for version info in xalan.jar from Xalan-J products.\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkParserVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report product version information from common parsers.\n   *\n   * Looks for version info in xerces.jar/xercesImpl.jar/crimson.jar.\n   *\n   * //@todo actually look up version info in crimson manifest\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkAntVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report product version information from Ant.\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkDOMVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report version info from DOM interfaces. \n   *\n   * Currently distinguishes between pre-DOM level 2, the DOM \n   * level 2 working draft, the DOM level 2 final draft, \n   * and not found.\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void checkSAXVersion(Hashtable h)",
    "returnType" : "void",
    "comment" : "\n   * Report version info from SAX interfaces. \n   *\n   * Currently distinguishes between SAX 2, SAX 2.0beta2, \n   * SAX1, and not found.\n   *\n   * @param h Hashtable to put information in\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void logMsg(String s)",
    "returnType" : "void",
    "comment" : "\n   * Bottleneck output: calls outWriter.println(s).  \n   * @param s String to print\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void main(String[] args)", "public boolean checkEnvironment(PrintWriter pw)", "public Hashtable getEnvironmentHash()", "protected boolean writeEnvironmentReport(Hashtable h)", "protected boolean logFoundJars(Vector v, String desc)", "public void appendEnvironmentReport(Node container, Document factory, Hashtable h)", "protected boolean appendFoundJars(Node container, Document factory, Vector v, String desc)", "protected void checkSystemProperties(Hashtable h)", "protected Vector checkPathForJars(String cp, String[] jars)", "protected String getApparentVersion(String jarName, long jarSize)", "protected void checkJAXPVersion(Hashtable h)", "protected void checkProcessorVersion(Hashtable h)", "protected void checkParserVersion(Hashtable h)", "protected void checkAntVersion(Hashtable h)", "protected void checkDOMVersion(Hashtable h)", "protected void checkSAXVersion(Hashtable h)", "protected void logMsg(String s)" ],
  "variableNames" : [ "ERROR", "WARNING", "ERROR_FOUND", "VERSION", "FOUNDCLASSES", "CLASS_PRESENT", "CLASS_NOTPRESENT", "jarNames", "jarVersions", "outWriter" ]
}