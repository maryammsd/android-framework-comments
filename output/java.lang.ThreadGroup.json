{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/ThreadGroup.java",
  "packageName" : "java.lang",
  "className" : "ThreadGroup",
  "comment" : " The locking strategy for this code is to try to lock only one level of the\n * tree wherever possible, but otherwise to lock from the bottom up.\n * That is, from child thread groups to parents.\n * This has the advantage of limiting the number of locks that need to be held\n * and in particular avoids having to grab the lock for the root thread group,\n * (or a global lock) which would be a source of contention on a\n * multi-processor system with many thread groups.\n * This policy often leads to taking a snapshot of the state of a thread group\n * and working off of that snapshot, rather than holding the thread group locked\n * while we work on the children.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "systemThreadGroup",
    "type" : "ThreadGroup",
    "comment" : " the runtime uses these directly; do not rename ",
    "links" : [ ]
  }, {
    "name" : "mainThreadGroup",
    "type" : "ThreadGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parent",
    "type" : "ThreadGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maxPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "destroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "daemon",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nUnstartedThreads",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nthreads",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "threads",
    "type" : "Thread[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ngroups",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groups",
    "type" : "ThreadGroup[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Void checkParentAccess(ThreadGroup parent)",
    "returnType" : "Void",
    "comment" : "\n     * @throws  NullPointerException  if the parent argument is {@code null}\n     * @throws  SecurityException     if the current thread cannot create a\n     *                                thread in the specified thread group.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this thread group.\n     *\n     * @return  the name of this thread group.\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ThreadGroup getParent()",
    "returnType" : "ThreadGroup",
    "comment" : "\n     * Returns the parent of this thread group.\n     * <p>\n     * First, if the parent is not {@code null}, the\n     * {@code checkAccess} method of the parent thread group is\n     * called with no arguments; this may result in a security exception.\n     *\n     * @return  the parent of this thread group. The top-level thread group\n     *          is the only thread group whose parent is {@code null}.\n     * @throws  SecurityException  if the current thread cannot modify\n     *               this thread group.\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @see        java.lang.SecurityException\n     * @see        java.lang.RuntimePermission\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getMaxPriority()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum priority of this thread group. Threads that are\n     * part of this group cannot have a higher priority than the maximum\n     * priority.\n     *\n     * @return  the maximum priority that a thread in this thread group\n     *          can have.\n     * @see     #setMaxPriority\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isDaemon()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this thread group is a daemon thread group. A\n     * daemon thread group is automatically destroyed when its last\n     * thread is stopped or its last thread group is destroyed.\n     *\n     * @return  {@code true} if this thread group is a daemon thread group;\n     *          {@code false} otherwise.\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this thread group has been destroyed.\n     *\n     * @return  true if this object is destroyed\n     * @since   1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setDaemon(boolean daemon)",
    "returnType" : "void",
    "comment" : "\n     * Changes the daemon status of this thread group.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * A daemon thread group is automatically destroyed when its last\n     * thread is stopped or its last thread group is destroyed.\n     *\n     * @param      daemon   if {@code true}, marks this thread group as\n     *                      a daemon thread group; otherwise, marks this\n     *                      thread group as normal.\n     * @throws     SecurityException  if the current thread cannot modify\n     *               this thread group.\n     * @see        java.lang.SecurityException\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setMaxPriority(int pri)",
    "returnType" : "void",
    "comment" : "\n     * Sets the maximum priority of the group. Threads in the thread\n     * group that already have a higher priority are not affected.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * If the {@code pri} argument is less than\n     * {@link Thread#MIN_PRIORITY} or greater than\n     * {@link Thread#MAX_PRIORITY}, it is clamped to those values.\n     * <p>\n     * Otherwise, the priority of this ThreadGroup object is set to the\n     * smaller of the specified {@code pri} and the maximum permitted\n     * priority of the parent of this thread group. (If this thread group\n     * is the system thread group, which has no parent, then its maximum\n     * priority is simply set to {@code pri}.) Then this method is\n     * called recursively, with {@code pri} as its argument, for\n     * every thread group that belongs to this thread group.\n     *\n     * @param      pri   the new priority of the thread group.\n     * @throws     SecurityException  if the current thread cannot modify\n     *               this thread group.\n     * @see        #getMaxPriority\n     * @see        java.lang.SecurityException\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     ",
    "links" : [ "java.lang.Thread#MAX_PRIORITY", "java.lang.Thread#MIN_PRIORITY" ]
  }, {
    "name" : "public final boolean parentOf(ThreadGroup g)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this thread group is either the thread group\n     * argument or one of its ancestor thread groups.\n     *\n     * @param   g   a thread group.\n     * @return  {@code true} if this thread group is the thread group\n     *          argument or one of its ancestor thread groups;\n     *          {@code false} otherwise.\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void checkAccess()",
    "returnType" : "void",
    "comment" : "\n     * Determines if the currently running thread has permission to\n     * modify this thread group.\n     * <p>\n     * If there is a security manager, its {@code checkAccess} method\n     * is called with this thread group as its argument. This may result\n     * in throwing a {@code SecurityException}.\n     *\n     * @throws     SecurityException  if the current thread is not allowed to\n     *               access this thread group.\n     * @see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)\n     * @since      1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int activeCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of active threads in this thread\n     * group and its subgroups. Recursively iterates over all subgroups in\n     * this thread group.\n     *\n     * <p> The value returned is only an estimate because the number of\n     * threads may change dynamically while this method traverses internal\n     * data structures, and might be affected by the presence of certain\n     * system threads. This method is intended primarily for debugging\n     * and monitoring purposes.\n     *\n     * @return  an estimate of the number of active threads in this thread\n     *          group and in any other thread group that has this thread\n     *          group as an ancestor\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int enumerate(Thread[] list)",
    "returnType" : "int",
    "comment" : "\n     * Copies into the specified array every active thread in this\n     * thread group and its subgroups.\n     *\n     * <p> An invocation of this method behaves in exactly the same\n     * way as the invocation\n     *\n     * <blockquote>\n     * {@linkplain #enumerate(Thread[], boolean) enumerate}{@code (list, true)}\n     * </blockquote>\n     *\n     * @param  list\n     *         an array into which to put the list of threads\n     *\n     * @return  the number of threads put into the array\n     *\n     * @throws  SecurityException\n     *          if {@linkplain #checkAccess checkAccess} determines that\n     *          the current thread cannot access this thread group\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int enumerate(Thread[] list, boolean recurse)",
    "returnType" : "int",
    "comment" : "\n     * Copies into the specified array every active thread in this\n     * thread group. If {@code recurse} is {@code true},\n     * this method recursively enumerates all subgroups of this\n     * thread group and references to every active thread in these\n     * subgroups are also included. If the array is too short to\n     * hold all the threads, the extra threads are silently ignored.\n     *\n     * <p> An application might use the {@linkplain #activeCount activeCount}\n     * method to get an estimate of how big the array should be, however\n     * <i>if the array is too short to hold all the threads, the extra threads\n     * are silently ignored.</i>  If it is critical to obtain every active\n     * thread in this thread group, the caller should verify that the returned\n     * int value is strictly less than the length of {@code list}.\n     *\n     * <p> Due to the inherent race condition in this method, it is recommended\n     * that the method only be used for debugging and monitoring purposes.\n     *\n     * @param  list\n     *         an array into which to put the list of threads\n     *\n     * @param  recurse\n     *         if {@code true}, recursively enumerate all subgroups of this\n     *         thread group\n     *\n     * @return  the number of threads put into the array\n     *\n     * @throws  SecurityException\n     *          if {@linkplain #checkAccess checkAccess} determines that\n     *          the current thread cannot access this thread group\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "private int enumerate(Thread[] list, int n, boolean recurse)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int activeGroupCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns an estimate of the number of active groups in this\n     * thread group and its subgroups. Recursively iterates over\n     * all subgroups in this thread group.\n     *\n     * <p> The value returned is only an estimate because the number of\n     * thread groups may change dynamically while this method traverses\n     * internal data structures. This method is intended primarily for\n     * debugging and monitoring purposes.\n     *\n     * @return  the number of active thread groups with this thread group as\n     *          an ancestor\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int enumerate(ThreadGroup[] list)",
    "returnType" : "int",
    "comment" : "\n     * Copies into the specified array references to every active\n     * subgroup in this thread group and its subgroups.\n     *\n     * <p> An invocation of this method behaves in exactly the same\n     * way as the invocation\n     *\n     * <blockquote>\n     * {@linkplain #enumerate(ThreadGroup[], boolean) enumerate}{@code (list, true)}\n     * </blockquote>\n     *\n     * @param  list\n     *         an array into which to put the list of thread groups\n     *\n     * @return  the number of thread groups put into the array\n     *\n     * @throws  SecurityException\n     *          if {@linkplain #checkAccess checkAccess} determines that\n     *          the current thread cannot access this thread group\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "public int enumerate(ThreadGroup[] list, boolean recurse)",
    "returnType" : "int",
    "comment" : "\n     * Copies into the specified array references to every active\n     * subgroup in this thread group. If {@code recurse} is\n     * {@code true}, this method recursively enumerates all subgroups of this\n     * thread group and references to every active thread group in these\n     * subgroups are also included.\n     *\n     * <p> An application might use the\n     * {@linkplain #activeGroupCount activeGroupCount} method to\n     * get an estimate of how big the array should be, however <i>if the\n     * array is too short to hold all the thread groups, the extra thread\n     * groups are silently ignored.</i>  If it is critical to obtain every\n     * active subgroup in this thread group, the caller should verify that\n     * the returned int value is strictly less than the length of\n     * {@code list}.\n     *\n     * <p> Due to the inherent race condition in this method, it is recommended\n     * that the method only be used for debugging and monitoring purposes.\n     *\n     * @param  list\n     *         an array into which to put the list of thread groups\n     *\n     * @param  recurse\n     *         if {@code true}, recursively enumerate all subgroups\n     *\n     * @return  the number of thread groups put into the array\n     *\n     * @throws  SecurityException\n     *          if {@linkplain #checkAccess checkAccess} determines that\n     *          the current thread cannot access this thread group\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "private int enumerate(ThreadGroup[] list, int n, boolean recurse)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops all threads in this thread group.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * This method then calls the {@code stop} method on all the\n     * threads in this thread group and in all of its subgroups.\n     *\n     * @throws     SecurityException  if the current thread is not allowed\n     *               to access this thread group or any of the threads in\n     *               the thread group.\n     * @see        java.lang.SecurityException\n     * @see        java.lang.Thread#stop()\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     * @deprecated    This method is inherently unsafe.  See\n     *     {@link Thread#stop} for details.\n     ",
    "links" : [ "java.lang.Thread#stop" ]
  }, {
    "name" : "public final void interrupt()",
    "returnType" : "void",
    "comment" : "\n     * Interrupts all threads in this thread group.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * This method then calls the {@code interrupt} method on all the\n     * threads in this thread group and in all of its subgroups.\n     *\n     * @throws     SecurityException  if the current thread is not allowed\n     *               to access this thread group or any of the threads in\n     *               the thread group.\n     * @see        java.lang.Thread#interrupt()\n     * @see        java.lang.SecurityException\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void suspend()",
    "returnType" : "void",
    "comment" : "\n     * Suspends all threads in this thread group.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * This method then calls the {@code suspend} method on all the\n     * threads in this thread group and in all of its subgroups.\n     *\n     * @throws     SecurityException  if the current thread is not allowed\n     *               to access this thread group or any of the threads in\n     *               the thread group.\n     * @see        java.lang.Thread#suspend()\n     * @see        java.lang.SecurityException\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     * @deprecated    This method is inherently deadlock-prone.  See\n     *     {@link Thread#suspend} for details.\n     ",
    "links" : [ "java.lang.Thread#suspend" ]
  }, {
    "name" : "private boolean stopOrSuspend(boolean suspend)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper method: recursively stops or suspends (as directed by the\n     * boolean argument) all of the threads in this thread group and its\n     * subgroups, except the current thread.  This method returns true\n     * if (and only if) the current thread is found to be in this thread\n     * group or one of its subgroups.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void resume()",
    "returnType" : "void",
    "comment" : "\n     * Resumes all threads in this thread group.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     * <p>\n     * This method then calls the {@code resume} method on all the\n     * threads in this thread group and in all of its sub groups.\n     *\n     * @throws     SecurityException  if the current thread is not allowed to\n     *               access this thread group or any of the threads in the\n     *               thread group.\n     * @see        java.lang.SecurityException\n     * @see        java.lang.Thread#resume()\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     * @deprecated    This method is used solely in conjunction with\n     *       {@code Thread.suspend} and {@code ThreadGroup.suspend},\n     *       both of which have been deprecated, as they are inherently\n     *       deadlock-prone.  See {@link Thread#suspend} for details.\n     ",
    "links" : [ "java.lang.Thread#suspend" ]
  }, {
    "name" : "public final void destroy()",
    "returnType" : "void",
    "comment" : "\n     * Destroys this thread group and all of its subgroups. This thread\n     * group must be empty, indicating that all threads that had been in\n     * this thread group have since stopped.\n     * <p>\n     * First, the {@code checkAccess} method of this thread group is\n     * called with no arguments; this may result in a security exception.\n     *\n     * @throws     IllegalThreadStateException  if the thread group is not\n     *               empty or if the thread group has already been destroyed.\n     * @throws     SecurityException  if the current thread cannot modify this\n     *               thread group.\n     * @see        java.lang.ThreadGroup#checkAccess()\n     * @since      1.0\n     ",
    "links" : [ ]
  }, {
    "name" : "private final void add(ThreadGroup g)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified Thread group to this group.\n     * @param g the specified Thread group to be added\n     * @throws  IllegalThreadStateException If the Thread group has been destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void remove(ThreadGroup g)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified Thread group from this group.\n     * @param g the Thread group to be removed\n     * @return if this Thread has already been destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void addUnstarted()",
    "returnType" : "void",
    "comment" : "\n     * Increments the count of unstarted threads in the thread group.\n     * Unstarted threads are not added to the thread group so that they\n     * can be collected if they are never started, but they must be\n     * counted so that daemon thread groups with unstarted threads in\n     * them are not destroyed.\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(Thread t)",
    "returnType" : "void",
    "comment" : "\n     * Adds the specified thread to this thread group.\n     *\n     * <p> Note: This method is called from both library code\n     * and the Virtual Machine. It is called from VM to add\n     * certain system threads to the system thread group.\n     *\n     * @param  t\n     *         the Thread to be added\n     *\n     * @throws IllegalThreadStateException\n     *          if the Thread group has been destroyed\n     ",
    "links" : [ ]
  }, {
    "name" : " void threadStartFailed(Thread t)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the group that the thread {@code t} has failed\n     * an attempt to start.\n     *\n     * <p> The state of this thread group is rolled back as if the\n     * attempt to start the thread has never occurred. The thread is again\n     * considered an unstarted member of the thread group, and a subsequent\n     * attempt to start the thread is permitted.\n     *\n     * @param  t\n     *         the Thread whose start method was invoked\n     ",
    "links" : [ ]
  }, {
    "name" : " void threadTerminated(Thread t)",
    "returnType" : "void",
    "comment" : "\n     * Notifies the group that the thread {@code t} has terminated.\n     *\n     * <p> Destroy the group if all of the following conditions are\n     * true: this is a daemon thread group; there are no more alive\n     * or unstarted threads in the group; there are no subgroups in\n     * this thread group.\n     *\n     * @param  t\n     *         the Thread that has terminated\n     ",
    "links" : [ ]
  }, {
    "name" : "private void remove(Thread t)",
    "returnType" : "void",
    "comment" : "\n     * Removes the specified Thread from this group. Invoking this method\n     * on a thread group that has been destroyed has no effect.\n     *\n     * @param  t\n     *         the Thread to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public void list()",
    "returnType" : "void",
    "comment" : "\n     * Prints information about this thread group to the standard\n     * output. This method is useful only for debugging.\n     *\n     * @since   1.0\n     ",
    "links" : [ ]
  }, {
    "name" : " void list(PrintStream out, int indent)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void uncaughtException(Thread t, Throwable e)",
    "returnType" : "void",
    "comment" : "\n     * Called by the Java Virtual Machine when a thread in this\n     * thread group stops because of an uncaught exception, and the thread\n     * does not have a specific {@link Thread.UncaughtExceptionHandler}\n     * installed.\n     * <p>\n     * The {@code uncaughtException} method of\n     * {@code ThreadGroup} does the following:\n     * <ul>\n     * <li>If this thread group has a parent thread group, the\n     *     {@code uncaughtException} method of that parent is called\n     *     with the same two arguments.\n     * <li>Otherwise, this method checks to see if there is a\n     *     {@linkplain Thread#getDefaultUncaughtExceptionHandler default\n     *     uncaught exception handler} installed, and if so, its\n     *     {@code uncaughtException} method is called with the same\n     *     two arguments.\n     * <li>Otherwise, this method determines if the {@code Throwable}\n     *     argument is an instance of {@link ThreadDeath}. If so, nothing\n     *     special is done. Otherwise, a message containing the\n     *     thread's name, as returned from the thread's {@link\n     *     Thread#getName getName} method, and a stack backtrace,\n     *     using the {@code Throwable}'s {@link\n     *     Throwable#printStackTrace printStackTrace} method, is\n     *     printed to the {@linkplain System#err standard error stream}.\n     * </ul>\n     * <p>\n     * Applications can override this method in subclasses of\n     * {@code ThreadGroup} to provide alternative handling of\n     * uncaught exceptions.\n     *\n     * @param   t   the thread that is about to exit.\n     * @param   e   the uncaught exception.\n     * @since   1.0\n     ",
    "links" : [ "java.lang.Throwable#printStackTrace", "Thread.UncaughtExceptionHandler", "java.lang.Thread#getName", "java.lang.ThreadDeath" ]
  }, {
    "name" : "public boolean allowThreadSuspension(boolean b)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by VM to control lowmem implicit suspension.\n     *\n     * @param b boolean to allow or disallow suspension\n     * @return true on success\n     * @since   1.1\n     * @deprecated The definition of this call depends on {@link #suspend},\n     *             which is deprecated.  Further, the behavior of this call\n     *             was never specified.\n     ",
    "links" : [ "#suspend" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this Thread group.\n     *\n     * @return  a string representation of this thread group.\n     * @since   1.0\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Void checkParentAccess(ThreadGroup parent)", "public final String getName()", "public final ThreadGroup getParent()", "public final int getMaxPriority()", "public final boolean isDaemon()", "public synchronized boolean isDestroyed()", "public final void setDaemon(boolean daemon)", "public final void setMaxPriority(int pri)", "public final boolean parentOf(ThreadGroup g)", "public final void checkAccess()", "public int activeCount()", "public int enumerate(Thread[] list)", "public int enumerate(Thread[] list, boolean recurse)", "private int enumerate(Thread[] list, int n, boolean recurse)", "public int activeGroupCount()", "public int enumerate(ThreadGroup[] list)", "public int enumerate(ThreadGroup[] list, boolean recurse)", "private int enumerate(ThreadGroup[] list, int n, boolean recurse)", "public final void stop()", "public final void interrupt()", "public final void suspend()", "private boolean stopOrSuspend(boolean suspend)", "public final void resume()", "public final void destroy()", "private final void add(ThreadGroup g)", "private void remove(ThreadGroup g)", " void addUnstarted()", " void add(Thread t)", " void threadStartFailed(Thread t)", " void threadTerminated(Thread t)", "private void remove(Thread t)", "public void list()", " void list(PrintStream out, int indent)", "public void uncaughtException(Thread t, Throwable e)", "public boolean allowThreadSuspension(boolean b)", "public String toString()" ],
  "variableNames" : [ "systemThreadGroup", "mainThreadGroup", "parent", "name", "maxPriority", "destroyed", "daemon", "nUnstartedThreads", "nthreads", "threads", "ngroups", "groups" ]
}