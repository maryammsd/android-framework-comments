{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/MacAddress.java",
  "packageName" : "android.net",
  "className" : "MacAddress",
  "comment" : "\n * Representation of a MAC address.\n *\n * This class only supports 48 bits long addresses and does not support 64 bits long addresses.\n * Instances of this class are immutable. This class provides implementations of hashCode()\n * and equals() that make it suitable for use as keys in standard implementations of\n * {@link java.util.Map}.\n ",
  "links" : [ "java.util.Map" ],
  "variables" : [ {
    "name" : "ETHER_ADDR_LEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ETHER_ADDR_BROADCAST",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BROADCAST_ADDRESS",
    "type" : "MacAddress",
    "comment" : "\n     * The MacAddress representing the unique broadcast MAC address.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALL_ZEROS_ADDRESS",
    "type" : "MacAddress",
    "comment" : "\n     * The MacAddress zero MAC address.\n     *\n     * <p>Not publicly exposed or treated specially since the OUI 00:00:00 is registered.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " @hide Indicates a MAC address of unknown type. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_UNICAST",
    "type" : "int",
    "comment" : " Indicates a MAC address is a unicast address. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MULTICAST",
    "type" : "int",
    "comment" : " Indicates a MAC address is a multicast address. ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BROADCAST",
    "type" : "int",
    "comment" : " Indicates a MAC address is the broadcast address. ",
    "links" : [ ]
  }, {
    "name" : "VALID_LONG_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCALLY_ASSIGNED_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MULTICAST_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "OUI_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NIC_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BASE_GOOGLE_MAC",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAC_ADDRESS",
    "type" : "MacAddress",
    "comment" : " Default wifi MAC address used for a special purpose *",
    "links" : [ ]
  }, {
    "name" : "mAddr",
    "type" : "long",
    "comment" : " byte of the array is mapped to the 4th highest logical byte of the long, and so on.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<MacAddress>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAddressType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of this address.\n     *\n     * @return the int constant representing the MAC address type of this MacAddress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocallyAssigned()",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if this MacAddress is a locally assigned address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Convert this MacAddress to a byte array.\n     *\n     * The returned array is in network order. For example, if this MacAddress is 01:02:03:04:05:06,\n     * the returned array is [1, 2, 3, 4, 5, 6].\n     *\n     * @return a byte array representation of this MacAddress.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a human-readable representation of this MacAddress.\n     * The exact format is implementation-dependent and should not be assumed to have any\n     * particular format.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toOuiString()",
    "returnType" : "String",
    "comment" : "\n     * @return a String representation of the OUI part of this MacAddress made of 3 hexadecimal\n     * numbers in [0,ff] joined by ':' characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMacAddress(byte[] addr)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the given byte array is an valid MAC address.\n     * A valid byte array representation for a MacAddress is a non-null array of length 6.\n     *\n     * @param addr a byte array.\n     * @return true if the given byte array is not null and has the length of a MAC address.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int macAddressType(byte[] addr)",
    "returnType" : "int",
    "comment" : "\n     * Returns the MAC address type of the MAC address represented by the given byte array,\n     * or null if the given byte array does not represent a MAC address.\n     * A valid byte array representation for a MacAddress is a non-null array of length 6.\n     *\n     * @param addr a byte array representing a MAC address.\n     * @return the int constant representing the MAC address type of the MAC address represented\n     * by the given byte array, or type UNKNOWN if the byte array is not a valid MAC address.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static byte[] byteAddrFromStringAddr(String addr)",
    "returnType" : "byte[]",
    "comment" : "\n     * Converts a String representation of a MAC address to a byte array representation.\n     * A valid String representation for a MacAddress is a series of 6 values in the\n     * range [0,ff] printed in hexadecimal and joined by ':' characters.\n     *\n     * @param addr a String representation of a MAC address.\n     * @return the byte representation of the MAC address.\n     * @throws IllegalArgumentException if the given String is not a valid representation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String stringAddrFromByteAddr(byte[] addr)",
    "returnType" : "String",
    "comment" : "\n     * Converts a byte array representation of a MAC address to a String representation made\n     * of 6 hexadecimal numbers in [0,ff] joined by ':' characters.\n     * A valid byte array representation for a MacAddress is a non-null array of length 6.\n     *\n     * @param addr a byte array representation of a MAC address.\n     * @return the String representation of the MAC address.\n     * @throws IllegalArgumentException if the given byte array is not a valid representation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] byteAddrFromLongAddr(long addr)",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long longAddrFromByteAddr(byte[] addr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long longAddrFromStringAddr(String addr)",
    "returnType" : "long",
    "comment" : " that avoids the allocation of an intermediary byte[].",
    "links" : [ ]
  }, {
    "name" : "private static String stringAddrFromLongAddr(long addr)",
    "returnType" : "String",
    "comment" : " that avoids the allocation of an intermediary byte[].",
    "links" : [ ]
  }, {
    "name" : "public static MacAddress fromString(@NonNull String addr)",
    "returnType" : "MacAddress",
    "comment" : "\n     * Creates a MacAddress from the given String representation. A valid String representation\n     * for a MacAddress is a series of 6 values in the range [0,ff] printed in hexadecimal\n     * and joined by ':' characters.\n     *\n     * @param addr a String representation of a MAC address.\n     * @return the MacAddress corresponding to the given String representation.\n     * @throws IllegalArgumentException if the given String is not a valid representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MacAddress fromBytes(@NonNull byte[] addr)",
    "returnType" : "MacAddress",
    "comment" : "\n     * Creates a MacAddress from the given byte array representation.\n     * A valid byte array representation for a MacAddress is a non-null array of length 6.\n     *\n     * @param addr a byte array representation of a MAC address.\n     * @return the MacAddress corresponding to the given byte array representation.\n     * @throws IllegalArgumentException if the given byte array is not a valid representation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static MacAddress createRandomUnicastAddressWithGoogleBase()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns a generated MAC address whose 24 least significant bits constituting the\n     * NIC part of the address are randomly selected and has Google OUI base.\n     *\n     * The locally assigned bit is always set to 1. The multicast bit is always set to 0.\n     *\n     * @return a random locally assigned, unicast MacAddress with Google OUI.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[] addr(int... in)",
    "returnType" : "byte[]",
    "comment" : " Convenience function for working around the lack of byte literals.",
    "links" : [ ]
  }, {
    "name" : "public boolean matches(@NonNull MacAddress baseAddress, @NonNull MacAddress mask)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this MAC Address matches the provided range.\n     *\n     * @param baseAddress MacAddress representing the base address to compare with.\n     * @param mask MacAddress representing the mask to use during comparison.\n     * @return true if this MAC Address matches the given range.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public Inet6Address getLinkLocalIpv6FromEui48Mac()",
    "returnType" : "Inet6Address",
    "comment" : "\n     * Create a link-local Inet6Address from the MAC address. The EUI-48 MAC address is converted\n     * to an EUI-64 MAC address per RFC 4291. The resulting EUI-64 is used to construct a link-local\n     * IPv6 address per RFC 4862.\n     *\n     * @return A link-local Inet6Address constructed from the MAC address.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAddressType()", "public boolean isLocallyAssigned()", "public byte[] toByteArray()", "public String toString()", "public String toOuiString()", "public int hashCode()", "public boolean equals(@Nullable Object o)", "public void writeToParcel(Parcel out, int flags)", "public int describeContents()", "public static boolean isMacAddress(byte[] addr)", "public static int macAddressType(byte[] addr)", "public static byte[] byteAddrFromStringAddr(String addr)", "public static String stringAddrFromByteAddr(byte[] addr)", "private static byte[] byteAddrFromLongAddr(long addr)", "private static long longAddrFromByteAddr(byte[] addr)", "private static long longAddrFromStringAddr(String addr)", "private static String stringAddrFromLongAddr(long addr)", "public static MacAddress fromString(@NonNull String addr)", "public static MacAddress fromBytes(@NonNull byte[] addr)", "public static MacAddress createRandomUnicastAddressWithGoogleBase()", "private static byte[] addr(int... in)", "public boolean matches(@NonNull MacAddress baseAddress, @NonNull MacAddress mask)", "public Inet6Address getLinkLocalIpv6FromEui48Mac()" ],
  "variableNames" : [ "ETHER_ADDR_LEN", "ETHER_ADDR_BROADCAST", "BROADCAST_ADDRESS", "ALL_ZEROS_ADDRESS", "TYPE_UNKNOWN", "TYPE_UNICAST", "TYPE_MULTICAST", "TYPE_BROADCAST", "VALID_LONG_MASK", "LOCALLY_ASSIGNED_MASK", "MULTICAST_MASK", "OUI_MASK", "NIC_MASK", "BASE_GOOGLE_MAC", "DEFAULT_MAC_ADDRESS", "mAddr", "CREATOR" ]
}