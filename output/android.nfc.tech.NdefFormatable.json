{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/tech/NdefFormatable.java",
  "packageName" : "android.nfc.tech",
  "className" : "NdefFormatable",
  "comment" : "\n * Provide access to NDEF format operations on a {@link Tag}.\n *\n * <p>Acquire a {@link NdefFormatable} object using {@link #get}.\n *\n * <p>Android devices with NFC must only enumerate and implement this\n * class for tags for which it can format to NDEF.\n *\n * <p>Unfortunately the procedures to convert unformated tags to NDEF formatted\n * tags are not specified by NFC Forum, and are not generally well-known. So\n * there is no mandatory set of tags for which all Android devices with NFC\n * must support {@link NdefFormatable}.\n *\n * <p class=\"note\"><strong>Note:</strong> Methods that perform I/O operations\n * require the {@link android.Manifest.permission#NFC} permission.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NdefFormatable get(Tag tag)",
    "returnType" : "NdefFormatable",
    "comment" : "\n     * Get an instance of {@link NdefFormatable} for the given tag.\n     * <p>Does not cause any RF activity and does not block.\n     * <p>Returns null if {@link NdefFormatable} was not enumerated in {@link Tag#getTechList}.\n     * This indicates the tag is not NDEF formatable by this Android device.\n     *\n     * @param tag an NDEF formatable tag\n     * @return NDEF formatable object\n     ",
    "links" : [ "android.nfc.INfcTag#getTechList", "android.nfc.tech.NdefFormatable" ]
  }, {
    "name" : "public void format(NdefMessage firstMessage) throws IOException, FormatException",
    "returnType" : "void",
    "comment" : "\n     * Format a tag as NDEF, and write a {@link NdefMessage}.\n     *\n     * <p>This is a multi-step process, an IOException is thrown\n     * if any one step fails.\n     * <p>The card is left in a read-write state after this operation.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param firstMessage the NDEF message to write after formatting, can be null\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     * @throws FormatException if the NDEF Message to write is malformed\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close", "android.nfc.NdefMessage" ]
  }, {
    "name" : "public void formatReadOnly(NdefMessage firstMessage) throws IOException, FormatException",
    "returnType" : "void",
    "comment" : "\n     * Formats a tag as NDEF, write a {@link NdefMessage}, and make read-only.\n     *\n     * <p>This is a multi-step process, an IOException is thrown\n     * if any one step fails.\n     * <p>The card is left in a read-only state if this method returns successfully.\n     *\n     * <p>This is an I/O operation and will block until complete. It must\n     * not be called from the main application thread. A blocked call will be canceled with\n     * {@link IOException} if {@link #close} is called from another thread.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     *\n     * @param firstMessage the NDEF message to write after formatting\n     * @throws TagLostException if the tag leaves the field\n     * @throws IOException if there is an I/O failure, or the operation is canceled\n     * @throws FormatException if the NDEF Message to write is malformed\n     ",
    "links" : [ "android.Manifest.permission#NFC", "java.io.IOException", "#close", "android.nfc.NdefMessage" ]
  }, {
    "name" : " void format(NdefMessage firstMessage, boolean makeReadOnly) throws IOException, FormatException",
    "returnType" : "void",
    "comment" : "package",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG" ],
  "methodNames" : [ "public static NdefFormatable get(Tag tag)", "public void format(NdefMessage firstMessage) throws IOException, FormatException", "public void formatReadOnly(NdefMessage firstMessage) throws IOException, FormatException", " void format(NdefMessage firstMessage, boolean makeReadOnly) throws IOException, FormatException" ]
}