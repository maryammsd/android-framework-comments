{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/ReverseAxesWalker.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "ReverseAxesWalker",
  "comment" : "\n * Walker for a reverse axes.\n * @see <a href=\"http://www.w3.org/TR/xpath#predicates\">XPath 2.4 Predicates</a>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_iterator",
    "type" : "DTMAxisIterator",
    "comment" : " The DTM inner traversal class, that corresponds to the super axis. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRoot(int root)",
    "returnType" : "void",
    "comment" : "\n   * Set the root node of the TreeWalker.\n   * (Not part of the DOM2 TreeWalker interface).\n   *\n   * @param root The context node of this step.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   * Detaches the walker from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getNextNode()",
    "returnType" : "int",
    "comment" : "\n   * Get the next node in document order on the axes.\n   *\n   * @return the next node in document order on the axes, or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReverseAxes()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this is a reverse axes.  Overrides AxesWalker#isReverseAxes.\n   *\n   * @return true for this class.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int getProximityPosition(int predicateIndex)",
    "returnType" : "int",
    "comment" : "\n   * Get the current sub-context position.  In order to do the\n   * reverse axes count, for the moment this re-searches the axes\n   * up to the predicate.  An optimization on this is to cache\n   * the nodes searched, but, for the moment, this case is probably\n   * rare enough that the added complexity isn't worth it.\n   *\n   * @param predicateIndex The predicate index of the proximity position.\n   *\n   * @return The pridicate index, or -1.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void countProximityPosition(int i)",
    "returnType" : "void",
    "comment" : "\n   * Count backwards one proximity position.\n   *\n   * @param i The predicate index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * Get the number of nodes in this node list.  The function is probably ill\n   * named?\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   *\n   * @return the number of nodes in this node list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * Warning: This can only be called after setRoot has been called!\n   * \n   * @return false.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setRoot(int root)", "public void detach()", "protected int getNextNode()", "public boolean isReverseAxes()", "protected int getProximityPosition(int predicateIndex)", "protected void countProximityPosition(int i)", "public int getLastPos(XPathContext xctxt)", "public boolean isDocOrdered()" ],
  "variableNames" : [ "serialVersionUID", "m_iterator" ]
}