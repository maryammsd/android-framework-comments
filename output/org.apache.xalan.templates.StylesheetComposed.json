{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/StylesheetComposed.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "StylesheetComposed",
  "comment" : "\n * Represents a stylesheet that has methods that resolve includes and\n * imports.  It has methods on it that\n * return \"composed\" properties, which mean that:\n * <ol>\n * <li>Properties that are aggregates, like OutputProperties, will\n * be composed of properties declared in this stylsheet and all\n * included stylesheets.</li>\n * <li>Properties that aren't found, will be searched for first in\n * the includes, and, if none are located, will be searched for in\n * the imports.</li>\n * <li>Properties in that are not atomic on a stylesheet will\n * have the form getXXXComposed. Some properties, like version and id,\n * are not inherited, and so won't have getXXXComposed methods.</li>\n * </ol>\n * <p>In some cases getXXXComposed methods may calculate the composed\n * values dynamically, while in other cases they may store the composed\n * values.</p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_importNumber",
    "type" : "int",
    "comment" : " Order in import chain.\n   *  @serial         ",
    "links" : [ ]
  }, {
    "name" : "m_importCountComposed",
    "type" : "int",
    "comment" : " The precedence of this stylesheet in the global import list.\n   *  The lowest precedence stylesheet is 0.  A higher\n   *  number has a higher precedence.\n   *  @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_endImportCountComposed",
    "type" : "int",
    "comment" : " The count of imports composed for this stylesheet ",
    "links" : [ ]
  }, {
    "name" : "m_includesComposed",
    "type" : "Vector",
    "comment" : "\n   * The combined list of includes.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isAggregatedType()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if this can be cast to a StylesheetComposed, meaning, you\n   * can ask questions from getXXXComposed functions.\n   *\n   * @return True since this is a StylesheetComposed \n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(Vector recomposableElements) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Adds all recomposable values for this precedence level into the recomposableElements Vector\n   * that was passed in as the first parameter.  All elements added to the\n   * recomposableElements vector should extend ElemTemplateElement.\n   * @param recomposableElements a Vector of ElemTemplateElement objects that we will add all of\n   *        our recomposable objects to.\n   ",
    "links" : [ ]
  }, {
    "name" : " void recomposeImports()",
    "returnType" : "void",
    "comment" : "\n   * Recalculate the precedence of this stylesheet in the global\n   * import list.  The lowest precedence stylesheet is 0.  A higher\n   * number has a higher precedence.\n   ",
    "links" : [ ]
  }, {
    "name" : "public StylesheetComposed getImportComposed(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "StylesheetComposed",
    "comment" : "\n   * Get a stylesheet from the \"import\" list.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @param i Index of stylesheet in import list \n   *\n   * @return The stylesheet at the given index\n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getImportCountComposed()",
    "returnType" : "int",
    "comment" : "\n   * Get the precedence of this stylesheet in the global import list.\n   * The lowest precedence is 0.  A higher number has a higher precedence.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @return the precedence of this stylesheet in the global import list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getEndImportCountComposed()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of import in this stylesheet's composed list.\n   *\n   * @return the number of imports in this stylesheet's composed list.\n   ",
    "links" : [ ]
  }, {
    "name" : " void recomposeIncludes(Stylesheet including)",
    "returnType" : "void",
    "comment" : "\n   * Recompose the value of the composed include list.  Builds a composite\n   * list of all stylesheets included by this stylesheet to any depth.\n   *\n   * @param including Stylesheet to recompose\n   ",
    "links" : [ ]
  }, {
    "name" : "public Stylesheet getIncludeComposed(int i) throws ArrayIndexOutOfBoundsException",
    "returnType" : "Stylesheet",
    "comment" : "\n   * Get an \"xsl:include\" property.\n   * @see <a href=\"http://www.w3.org/TR/xslt#include\">include in XSLT Specification</a>\n   *\n   * @param i Index of stylesheet in \"include\" list \n   *\n   * @return The stylesheet at the given index in the \"include\" list \n   *\n   * @throws ArrayIndexOutOfBoundsException\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getIncludeCountComposed()",
    "returnType" : "int",
    "comment" : "\n   * Get the number of included stylesheets.\n   * @see <a href=\"http://www.w3.org/TR/xslt#import\">import in XSLT Specification</a>\n   *\n   * @return the number of included stylesheets.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recomposeTemplates(boolean flushFirst) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * For compilation support, we need the option of overwriting\n   * (rather than appending to) previous composition.\n   * We could phase out the old API in favor of this one, but I'm\n   * holding off until we've made up our minds about compilation.\n   * ADDED 9/5/2000 to support compilation experiment.\n   * NOTE: GLP 29-Nov-00 I've left this method in so that CompilingStylesheetHandler will compile.  However,\n   *                     I'm not sure why it's needed or what it does and I've commented out the body.\n   *\n   * @see <a href=\"http://www.w3.org/TR/xslt#section-Defining-Template-Rules\">section-Defining-Template-Rules in XSLT Specification</a>\n   * @param flushFirst Flag indicating the option of overwriting\n   * (rather than appending to) previous composition.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isAggregatedType()", "public void recompose(Vector recomposableElements) throws TransformerException", " void recomposeImports()", "public StylesheetComposed getImportComposed(int i) throws ArrayIndexOutOfBoundsException", "public int getImportCountComposed()", "public int getEndImportCountComposed()", " void recomposeIncludes(Stylesheet including)", "public Stylesheet getIncludeComposed(int i) throws ArrayIndexOutOfBoundsException", "public int getIncludeCountComposed()", "public void recomposeTemplates(boolean flushFirst) throws TransformerException" ],
  "variableNames" : [ "serialVersionUID", "m_importNumber", "m_importCountComposed", "m_endImportCountComposed", "m_includesComposed" ]
}