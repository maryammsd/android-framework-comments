{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/accessibility/AccessibilityInteractionClient.java",
  "packageName" : "android.view.accessibility",
  "className" : "AccessibilityInteractionClient",
  "comment" : "\n * This class is a singleton that performs accessibility interaction\n * which is it queries remote view hierarchies about snapshots of their\n * views as well requests from these hierarchies to perform certain\n * actions on their views.\n *\n * Rationale: The content retrieval APIs are synchronous from a client's\n *     perspective but internally they are asynchronous. The client thread\n *     calls into the system requesting an action and providing a callback\n *     to receive the result after which it waits up to a timeout for that\n *     result. The system enforces security and the delegates the request\n *     to a given view hierarchy where a message is posted (from a binder\n *     thread) describing what to be performed by the main UI thread the\n *     result of which it delivered via the mentioned callback. However,\n *     the blocked client thread and the main UI thread of the target view\n *     hierarchy can be the same thread, for example an accessibility service\n *     and an activity run in the same process, thus they are executed on the\n *     same main thread. In such a case the retrieval will fail since the UI\n *     thread that has to process the message describing the work to be done\n *     is blocked waiting for a result is has to compute! To avoid this scenario\n *     when making a call the client also passes its process and thread ids so\n *     the accessed view hierarchy can detect if the client making the request\n *     is running in its main UI thread. In such a case the view hierarchy,\n *     specifically the binder thread performing the IPC to it, does not post a\n *     message to be run on the UI thread but passes it to the singleton\n *     interaction client through which all interactions occur and the latter is\n *     responsible to execute the message before starting to wait for the\n *     asynchronous result delivered via the callback. In this case the expected\n *     result is already received so no waiting is performed.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "NO_ID",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECK_INTEGRITY",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEOUT_INTERACTION_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISABLE_PREFETCHING_FOR_SCROLLING_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStaticLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sClients",
    "type" : "LongSparseArray<AccessibilityInteractionClient>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sConnectionCache",
    "type" : "SparseArray<IAccessibilityServiceConnection>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sScrollingWindows",
    "type" : "SparseLongArray",
    "comment" : " List of timestamps which indicate the latest time an a11y service receives a scroll event\n        from a window, mapping from windowId -> timestamp. ",
    "links" : [ ]
  }, {
    "name" : "sAccessibilityCache",
    "type" : "AccessibilityCache",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractionIdCounter",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstanceLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInteractionId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFindAccessibilityNodeInfoResult",
    "type" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFindAccessibilityNodeInfosResult",
    "type" : "List<AccessibilityNodeInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPerformAccessibilityActionResult",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSameThreadMessage",
    "type" : "Message",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static AccessibilityInteractionClient getInstance()",
    "returnType" : "AccessibilityInteractionClient",
    "comment" : "\n     * @return The client for the current thread.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static AccessibilityInteractionClient getInstanceForThread(long threadId)",
    "returnType" : "AccessibilityInteractionClient",
    "comment" : "\n     * <strong>Note:</strong> We keep one instance per interrogating thread since\n     * the instance contains state which can lead to undesired thread interleavings.\n     * We do not have a thread local variable since other threads should be able to\n     * look up the correct client knowing a thread id. See ViewRootImpl for details.\n     *\n     * @return The client for a given <code>threadId</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IAccessibilityServiceConnection getConnection(int connectionId)",
    "returnType" : "IAccessibilityServiceConnection",
    "comment" : "\n     * Gets a cached accessibility service connection.\n     *\n     * @param connectionId The connection id.\n     * @return The cached connection if such.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addConnection(int connectionId, IAccessibilityServiceConnection connection)",
    "returnType" : "void",
    "comment" : "\n     * Adds a cached accessibility service connection.\n     *\n     * @param connectionId The connection id.\n     * @param connection The connection.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void removeConnection(int connectionId)",
    "returnType" : "void",
    "comment" : "\n     * Removes a cached accessibility service connection.\n     *\n     * @param connectionId The connection id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setCache(AccessibilityCache cache)",
    "returnType" : "void",
    "comment" : "\n     * This method is only for testing. Replacing the cache is a generally terrible idea, but\n     * tests need to be able to verify this class's interactions with the cache\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSameThreadMessage(Message message)",
    "returnType" : "void",
    "comment" : "\n     * Sets the message to be processed if the interacted view hierarchy\n     * and the interacting client are running in the same thread.\n     *\n     * @param message The message.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityNodeInfo getRootInActiveWindow(int connectionId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the root {@link AccessibilityNodeInfo} in the currently active window.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @return The root {@link AccessibilityNodeInfo} if found, null otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public AccessibilityWindowInfo getWindow(int connectionId, int accessibilityWindowId)",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets the info for a window.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @return The {@link AccessibilityWindowInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID", "android.view.accessibility.AccessibilityWindowInfo" ]
  }, {
    "name" : "public AccessibilityWindowInfo getWindow(int connectionId, int accessibilityWindowId, boolean bypassCache)",
    "returnType" : "AccessibilityWindowInfo",
    "comment" : "\n     * Gets the info for a window.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param bypassCache Whether to bypass the cache.\n     * @return The {@link AccessibilityWindowInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID", "android.view.accessibility.AccessibilityWindowInfo" ]
  }, {
    "name" : "public List<AccessibilityWindowInfo> getWindows(int connectionId)",
    "returnType" : "List<AccessibilityWindowInfo>",
    "comment" : "\n     * Gets the info for all windows of the default display.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @return The {@link AccessibilityWindowInfo} list.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo" ]
  }, {
    "name" : "public SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays(int connectionId)",
    "returnType" : "SparseArray<List<AccessibilityWindowInfo>>",
    "comment" : "\n     * Gets the info for all windows of all displays.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @return The SparseArray of {@link AccessibilityWindowInfo} list.\n     *         The key of SparseArray is display ID.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityWindowInfo" ]
  }, {
    "name" : "public AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int connectionId, @NonNull IBinder leashToken, long accessibilityNodeId, boolean bypassCache, int prefetchFlags, Bundle arguments)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Finds an {@link AccessibilityNodeInfo} by accessibility id and given leash token instead of\n     * window id. This method is used to find the leashed node on the embedded view hierarchy.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param leashToken The token of the embedded hierarchy.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param bypassCache Whether to bypass the cache while looking for the node.\n     * @param prefetchFlags flags to guide prefetching.\n     * @param arguments Optional action arguments.\n     * @return An {@link AccessibilityNodeInfo} if found, null otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int connectionId, int accessibilityWindowId, long accessibilityNodeId, boolean bypassCache, int prefetchFlags, Bundle arguments)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Finds an {@link AccessibilityNodeInfo} by accessibility id.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param bypassCache Whether to bypass the cache while looking for the node.\n     * @param prefetchFlags flags to guide prefetching.\n     * @return An {@link AccessibilityNodeInfo} if found, null otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "private static String idToString(int accessibilityWindowId, long accessibilityNodeId)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(int connectionId, int accessibilityWindowId, long accessibilityNodeId, String viewId)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Finds an {@link AccessibilityNodeInfo} by View id. The search is performed in\n     * the window whose id is specified and starts from the node whose accessibility\n     * id is specified.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param viewId The fully qualified resource name of the view id to find.\n     * @return An list of {@link AccessibilityNodeInfo} if found, empty list otherwise.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(int connectionId, int accessibilityWindowId, long accessibilityNodeId, String text)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Finds {@link AccessibilityNodeInfo}s by View text. The match is case\n     * insensitive containment. The search is performed in the window whose\n     * id is specified and starts from the node whose accessibility id is\n     * specified.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param text The searched text.\n     * @return A list of found {@link AccessibilityNodeInfo}s.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo findFocus(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int focusType)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Finds the {@link android.view.accessibility.AccessibilityNodeInfo} that has the\n     * specified focus type. The search is performed in the window whose id is specified\n     * and starts from the node whose accessibility id is specified.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param focusType The focus type.\n     * @return The accessibility focused {@link AccessibilityNodeInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "public AccessibilityNodeInfo focusSearch(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int direction)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Finds the accessibility focused {@link android.view.accessibility.AccessibilityNodeInfo}.\n     * The search is performed in the window whose id is specified and starts from the\n     * node whose accessibility id is specified.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param direction The direction in which to search for focusable.\n     * @return The accessibility focused {@link AccessibilityNodeInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "public boolean performAccessibilityAction(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int action, Bundle arguments)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs an accessibility action on an {@link AccessibilityNodeInfo}.\n     *\n     * @param connectionId The id of a connection for interacting with the system.\n     * @param accessibilityWindowId A unique window id. Use\n     *     {@link android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID}\n     *     to query the currently active window.\n     * @param accessibilityNodeId A unique view id or virtual descendant id from\n     *     where to start the search. Use\n     *     {@link android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID}\n     *     to start from the root.\n     * @param action The action to perform.\n     * @param arguments Optional action arguments.\n     * @return Whether the action was performed.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo", "android.view.accessibility.AccessibilityNodeInfo#ROOT_NODE_ID", "android.view.accessibility.AccessibilityWindowInfo#ACTIVE_WINDOW_ID" ]
  }, {
    "name" : "public void clearCache()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onAccessibilityEvent(AccessibilityEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AccessibilityNodeInfo getFindAccessibilityNodeInfoResultAndClear(int interactionId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "\n     * Gets the the result of an async request that returns an {@link AccessibilityNodeInfo}.\n     *\n     * @param interactionId The interaction id to match the result with the request.\n     * @return The result {@link AccessibilityNodeInfo}.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public void setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo info, int interactionId)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private List<AccessibilityNodeInfo> getFindAccessibilityNodeInfosResultAndClear(int interactionId)",
    "returnType" : "List<AccessibilityNodeInfo>",
    "comment" : "\n     * Gets the the result of an async request that returns {@link AccessibilityNodeInfo}s.\n     *\n     * @param interactionId The interaction id to match the result with the request.\n     * @return The result {@link AccessibilityNodeInfo}s.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "public void setFindAccessibilityNodeInfosResult(List<AccessibilityNodeInfo> infos, int interactionId)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean getPerformAccessibilityActionResultAndClear(int interactionId)",
    "returnType" : "boolean",
    "comment" : "\n     * Gets the result of a request to perform an accessibility action.\n     *\n     * @param interactionId The interaction id to match the result with the request.\n     * @return Whether the action was performed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPerformAccessibilityActionResult(boolean succeeded, int interactionId)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private void clearResultLocked()",
    "returnType" : "void",
    "comment" : "\n     * Clears the result state.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean waitForResultTimedLocked(int interactionId)",
    "returnType" : "boolean",
    "comment" : "\n     * Waits up to a given bound for a result of a request and returns it.\n     *\n     * @param interactionId The interaction id to match the result with the request.\n     * @return Whether the result was received.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void finalizeAndCacheAccessibilityNodeInfo(AccessibilityNodeInfo info, int connectionId, boolean bypassCache, String[] packageNames)",
    "returnType" : "void",
    "comment" : "\n     * Finalize an {@link AccessibilityNodeInfo} before passing it to the client.\n     *\n     * @param info The info.\n     * @param connectionId The id of the connection to the system.\n     * @param bypassCache Whether or not to bypass the cache. The node is added to the cache if\n     *                    this value is {@code false}\n     * @param packageNames The valid package names a node can come from.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "private void finalizeAndCacheAccessibilityNodeInfos(List<AccessibilityNodeInfo> infos, int connectionId, boolean bypassCache, String[] packageNames)",
    "returnType" : "void",
    "comment" : "\n     * Finalize {@link AccessibilityNodeInfo}s before passing them to the client.\n     *\n     * @param infos The {@link AccessibilityNodeInfo}s.\n     * @param connectionId The id of the connection to the system.\n     * @param bypassCache Whether or not to bypass the cache. The nodes are added to the cache if\n     *                    this value is {@code false}\n     * @param packageNames The valid package names a node can come from.\n     ",
    "links" : [ "android.view.accessibility.AccessibilityNodeInfo" ]
  }, {
    "name" : "private Message getSameProcessMessageAndClear()",
    "returnType" : "Message",
    "comment" : "\n     * Gets the message stored if the interacted and interacting\n     * threads are the same.\n     *\n     * @return The message.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkFindAccessibilityNodeInfoResultIntegrity(List<AccessibilityNodeInfo> infos)",
    "returnType" : "void",
    "comment" : "\n     * Checks whether the infos are a fully connected tree with no duplicates.\n     *\n     * @param infos The result list to check.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void updateScrollingWindow(int windowId, long uptimeMillis)",
    "returnType" : "void",
    "comment" : "\n     * Update scroll event timestamp of a given window.\n     *\n     * @param windowId The window id.\n     * @param uptimeMillis Device uptime millis.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void deleteScrollingWindow(int windowId)",
    "returnType" : "void",
    "comment" : "\n     * Remove a window from the scrolling windows list.\n     *\n     * @param windowId The window id.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWindowScrolling(int windowId)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not the window is scrolling.\n     *\n     * @param windowId\n     * @return true if it's scrolling.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NO_ID", "LOG_TAG", "DEBUG", "CHECK_INTEGRITY", "TIMEOUT_INTERACTION_MILLIS", "DISABLE_PREFETCHING_FOR_SCROLLING_MILLIS", "sStaticLock", "sClients", "sConnectionCache", "sScrollingWindows", "sAccessibilityCache", "mInteractionIdCounter", "mInstanceLock", "mInteractionId", "mFindAccessibilityNodeInfoResult", "mFindAccessibilityNodeInfosResult", "mPerformAccessibilityActionResult", "mSameThreadMessage" ],
  "methodNames" : [ "public static AccessibilityInteractionClient getInstance()", "public static AccessibilityInteractionClient getInstanceForThread(long threadId)", "public static IAccessibilityServiceConnection getConnection(int connectionId)", "public static void addConnection(int connectionId, IAccessibilityServiceConnection connection)", "public static void removeConnection(int connectionId)", "public static void setCache(AccessibilityCache cache)", "public void setSameThreadMessage(Message message)", "public AccessibilityNodeInfo getRootInActiveWindow(int connectionId)", "public AccessibilityWindowInfo getWindow(int connectionId, int accessibilityWindowId)", "public AccessibilityWindowInfo getWindow(int connectionId, int accessibilityWindowId, boolean bypassCache)", "public List<AccessibilityWindowInfo> getWindows(int connectionId)", "public SparseArray<List<AccessibilityWindowInfo>> getWindowsOnAllDisplays(int connectionId)", "public AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int connectionId, @NonNull IBinder leashToken, long accessibilityNodeId, boolean bypassCache, int prefetchFlags, Bundle arguments)", "public AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int connectionId, int accessibilityWindowId, long accessibilityNodeId, boolean bypassCache, int prefetchFlags, Bundle arguments)", "private static String idToString(int accessibilityWindowId, long accessibilityNodeId)", "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId(int connectionId, int accessibilityWindowId, long accessibilityNodeId, String viewId)", "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(int connectionId, int accessibilityWindowId, long accessibilityNodeId, String text)", "public AccessibilityNodeInfo findFocus(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int focusType)", "public AccessibilityNodeInfo focusSearch(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int direction)", "public boolean performAccessibilityAction(int connectionId, int accessibilityWindowId, long accessibilityNodeId, int action, Bundle arguments)", "public void clearCache()", "public void onAccessibilityEvent(AccessibilityEvent event)", "private AccessibilityNodeInfo getFindAccessibilityNodeInfoResultAndClear(int interactionId)", "public void setFindAccessibilityNodeInfoResult(AccessibilityNodeInfo info, int interactionId)", "private List<AccessibilityNodeInfo> getFindAccessibilityNodeInfosResultAndClear(int interactionId)", "public void setFindAccessibilityNodeInfosResult(List<AccessibilityNodeInfo> infos, int interactionId)", "private boolean getPerformAccessibilityActionResultAndClear(int interactionId)", "public void setPerformAccessibilityActionResult(boolean succeeded, int interactionId)", "private void clearResultLocked()", "private boolean waitForResultTimedLocked(int interactionId)", "private void finalizeAndCacheAccessibilityNodeInfo(AccessibilityNodeInfo info, int connectionId, boolean bypassCache, String[] packageNames)", "private void finalizeAndCacheAccessibilityNodeInfos(List<AccessibilityNodeInfo> infos, int connectionId, boolean bypassCache, String[] packageNames)", "private Message getSameProcessMessageAndClear()", "private void checkFindAccessibilityNodeInfoResultIntegrity(List<AccessibilityNodeInfo> infos)", "private void updateScrollingWindow(int windowId, long uptimeMillis)", "private void deleteScrollingWindow(int windowId)", "private boolean isWindowScrolling(int windowId)" ]
}