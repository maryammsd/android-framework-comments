{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/autofill/FillContext.java",
  "packageName" : "android.service.autofill",
  "className" : "FillContext",
  "comment" : "\n * This class represents a context for each fill request made via {@link\n * AutofillService#onFillRequest(FillRequest, CancellationSignal, FillCallback)}.\n * It contains a snapshot of the UI state, the view ids that were returned by\n * the {@link AutofillService autofill service} as both required to trigger a save\n * and optional that can be saved, and the id of the corresponding {@link\n * FillRequest}.\n * <p>\n * This context allows you to inspect the values for the interesting views\n * in the context they appeared. Also a reference to the corresponding fill\n * request is useful to store meta-data in the client state bundle passed\n * to {@link FillResponse.Builder#setClientState(Bundle)} to avoid interpreting\n * the UI state again while saving.\n ",
  "links" : [ "FillResponse.Builder#setClientState(Bundle)", "android.service.autofill.AutofillService#onFillRequest(FillRequest", "android.service.autofill.FillRequest", "android.service.autofill.AutofillService" ],
  "variables" : [ {
    "name" : "mRequestId",
    "type" : "int",
    "comment" : "\n     * The id of the {@link FillRequest fill request} this context\n     * corresponds to. This is useful to associate your custom client\n     * state with every request to avoid reinterpreting the UI when saving\n     * user data.\n     ",
    "links" : [ "android.service.autofill.FillRequest" ]
  }, {
    "name" : "mStructure",
    "type" : "AssistStructure",
    "comment" : "\n     * The screen content.\n     ",
    "links" : [ ]
  }, {
    "name" : "mFocusedId",
    "type" : "AutofillId",
    "comment" : "\n     * The AutofillId of the view that triggered autofill.\n     ",
    "links" : [ ]
  }, {
    "name" : "mViewNodeLookupTable",
    "type" : "ArrayMap<AutofillId, AssistStructure.ViewNode>",
    "comment" : "\n     * Lookup table AutofillId->ViewNode to speed up {@link #findViewNodesByAutofillIds}\n     * This is purely a cache and can be deleted at any time\n     ",
    "links" : [ "#findViewNodesByAutofillIds" ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<FillContext>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ViewNode[] findViewNodesByAutofillIds(@NonNull AutofillId[] ids)",
    "returnType" : "ViewNode[]",
    "comment" : "\n     * Finds {@link ViewNode ViewNodes} that have the requested ids.\n     *\n     * @param ids The ids of the node to find.\n     *\n     * @return The nodes indexed in the same way as the ids.\n     *\n     * @hide\n     ",
    "links" : [ "android.app.assist.AssistStructure.ViewNode" ]
  }, {
    "name" : "public int getRequestId()",
    "returnType" : "int",
    "comment" : "\n     * The id of the {@link FillRequest fill request} this context\n     * corresponds to. This is useful to associate your custom client\n     * state with every request to avoid reinterpreting the UI when saving\n     * user data.\n     ",
    "links" : [ "android.service.autofill.FillRequest" ]
  }, {
    "name" : "public AssistStructure getStructure()",
    "returnType" : "AssistStructure",
    "comment" : "\n     * The screen content.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AutofillId getFocusedId()",
    "returnType" : "AutofillId",
    "comment" : "\n     * The AutofillId of the view that triggered autofill.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void __metadata()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String toString()", "public ViewNode[] findViewNodesByAutofillIds(@NonNull AutofillId[] ids)", "public int getRequestId()", "public AssistStructure getStructure()", "public AutofillId getFocusedId()", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()", "private void __metadata()" ],
  "variableNames" : [ "mRequestId", "mStructure", "mFocusedId", "mViewNodeLookupTable", "CREATOR" ]
}