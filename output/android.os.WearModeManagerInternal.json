{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/WearModeManagerInternal.java",
  "packageName" : "android.os",
  "className" : "WearModeManagerInternal",
  "comment" : "\n * Mode Manager local service interface.\n * Example usage: LocalServices.get(WearModeManagerInternal.class).\n *\n * TODO(b/288115060): consolidate with {@link com.android.server.policy.WearModeServiceInternal}\n *\n * @hide\n ",
  "links" : [ "com.android.server.policy.WearModeServiceInternal" ],
  "variables" : [ {
    "name" : "QUICK_DOZE_REQUEST_IDENTIFIER",
    "type" : "String",
    "comment" : "\n     * Mode manager quick doze request identifier.\n     *\n     * <p>Unique identifier that can be used as identifier parameter in\n     * registerInternalStateObserver\n     * to listen to changes in quick doze request state from mode manager.\n     *\n     * TODO(b/288276510): convert to int constant\n     ",
    "links" : [ ]
  }, {
    "name" : "OFFBODY_STATE_ID",
    "type" : "String",
    "comment" : "\n     * Mode manager off body state identifier.\n     *\n     * <p>Unique identifier that can be used as identifier parameter in\n     * registerInternalStateObserver\n     * to listen to changes in quick doze request state from mode manager.\n     *\n     * TODO(b/288276510): convert to int constant\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void addActiveStateChangeListener(@NonNull @Identifier String identifier, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<T> callback)",
    "returnType" : "void",
    "comment" : "\n     * Method to register a callback in Mode manager.\n     *\n     * <p>Callback is executed when there is a change of active state for the\n     * provided identifier.\n     *\n     * <p>Mode manager has active states and configured states where active state is the state of a\n     * mode/feature as reflected on the device,\n     * configured state refers to the configured value of the state of the mode / feature.\n     * For e.g.: Quick doze might be configured to be disabled by default but in certain modes, it\n     * can be overridden to be enabled. At that point active=enabled, configured=disabled.\n     *\n     * <p>\n     *\n     * @param identifier Observer listens for changes to this {@link Identifier}\n     * @param executor   Executor used to execute the callback.\n     * @param callback   Boolean consumer callback.\n     ",
    "links" : [ "Identifier" ]
  } ],
  "methodNames" : [ " void addActiveStateChangeListener(@NonNull @Identifier String identifier, @NonNull @CallbackExecutor Executor executor, @NonNull Consumer<T> callback)" ],
  "variableNames" : [ "QUICK_DOZE_REQUEST_IDENTIFIER", "OFFBODY_STATE_ID" ]
}