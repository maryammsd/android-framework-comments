{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/Ikev2VpnProfile.java",
  "packageName" : "android.net",
  "className" : "Builder",
  "comment" : " A incremental builder for IKEv2 VPN profiles ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServerAddr",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserIdentity",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPresharedKey",
    "type" : "byte[]",
    "comment" : " PSK authentication",
    "links" : [ ]
  }, {
    "name" : "mServerRootCaCert",
    "type" : "X509Certificate",
    "comment" : " Username/Password, RSA authentication",
    "links" : [ ]
  }, {
    "name" : "mUsername",
    "type" : "String",
    "comment" : " Username/Password authentication",
    "links" : [ ]
  }, {
    "name" : "mPassword",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRsaPrivateKey",
    "type" : "PrivateKey",
    "comment" : " RSA Certificate authentication",
    "links" : [ ]
  }, {
    "name" : "mUserCert",
    "type" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxyInfo",
    "type" : "ProxyInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowedAlgorithms",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRequiresInternetValidation",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsBypassable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsMetered",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxMtu",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRestrictedToTestNetworks",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExcludeLocalRoutes",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutomaticNattKeepaliveTimerEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutomaticIpVersionSelectionEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIkeTunConnParams",
    "type" : "IkeTunnelConnectionParams",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void resetAuthParams()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder setAuthUsernamePassword(@NonNull String user, @NonNull String pass, @Nullable X509Certificate serverRootCa)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the IKEv2 authentication to use the provided username/password.\n         *\n         * <p>Setting this will configure IKEv2 authentication using EAP-MSCHAPv2. Only one\n         * authentication method may be set. This method will overwrite any previously set\n         * authentication method.\n         *\n         * <p>If this {@link Builder} is constructed with an {@link IkeTunnelConnectionParams},\n         * authentication details should be configured there, and calling this method will result\n         * in an exception being thrown.\n         *\n         * @param user the username to be used for EAP-MSCHAPv2 authentication\n         * @param pass the password to be used for EAP-MSCHAPv2 authentication\n         * @param serverRootCa the root certificate to be used for verifying the identity of the\n         *     server\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         * @throws IllegalArgumentException if any of the certificates were invalid or of an\n         *     unrecognized format\n         ",
    "links" : [ "Builder", "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public Builder setAuthDigitalSignature(@NonNull X509Certificate userCert, @NonNull PrivateKey key, @Nullable X509Certificate serverRootCa)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the IKEv2 authentication to use Digital Signature Authentication with the given key.\n         *\n         * <p>Setting this will configure IKEv2 authentication using a Digital Signature scheme.\n         * Only one authentication method may be set. This method will overwrite any previously set\n         * authentication method.\n         *\n         * <p>If this {@link Builder} is constructed with an {@link IkeTunnelConnectionParams},\n         * authentication details should be configured there, and calling this method will result in\n         * an exception being thrown.\n         *\n         * @param userCert the username to be used for RSA Digital signiture authentication\n         * @param key the PrivateKey instance associated with the user ceritificate, used for\n         *     constructing the signature\n         * @param serverRootCa the root certificate to be used for verifying the identity of the\n         *     server\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         * @throws IllegalArgumentException if any of the certificates were invalid or of an\n         *     unrecognized format\n         ",
    "links" : [ "Builder", "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public Builder setAuthPsk(@NonNull byte[] psk)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the IKEv2 authentication to use Preshared keys.\n         *\n         * <p>Setting this will configure IKEv2 authentication using a Preshared Key. Only one\n         * authentication method may be set. This method will overwrite any previously set\n         * authentication method.\n         *\n         * <p>If this {@link Builder} is constructed with an {@link IkeTunnelConnectionParams},\n         * authentication details should be configured there, and calling this method will result in\n         * an exception being thrown.\n         *\n         * @param psk the key to be used for Pre-Shared Key authentication\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         ",
    "links" : [ "Builder", "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public Builder setBypassable(boolean isBypassable)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether apps can bypass this VPN connection.\n         *\n         * <p>By default, all traffic from apps are forwarded through the VPN interface and it is\n         * not possible for unprivileged apps to side-step the VPN. If a VPN is set to bypassable,\n         * apps may use methods such as {@link Network#getSocketFactory} or {@link\n         * Network#openConnection} to instead send/receive directly over the underlying network or\n         * any other network they have permissions for.\n         *\n         * @param isBypassable Whether or not the VPN should be considered bypassable. Defaults to\n         *     {@code false}.\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         ",
    "links" : [ "android.net.Network#getSocketFactory", "Builder", "android.net.Network#openConnection" ]
  }, {
    "name" : "public Builder setProxy(@Nullable ProxyInfo proxy)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a proxy for the VPN network.\n         *\n         * <p>Note that this proxy is only a recommendation and it may be ignored by apps.\n         *\n         * @param proxy the ProxyInfo to be set for the VPN network\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMaxMtu(int mtu)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the upper bound of the maximum transmission unit (MTU) of the VPN interface.\n         *\n         * <p>If it is not set, a safe value will be used. Additionally, the actual link MTU will be\n         * dynamically calculated/updated based on the underlying link's mtu.\n         *\n         * @param mtu the MTU (in bytes) of the VPN interface\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         * @throws IllegalArgumentException if the value is not at least the minimum IPv6 MTU (1280)\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setRequiresInternetValidation(boolean requiresInternetValidation)",
    "returnType" : "Builder",
    "comment" : "\n         * Request that this VPN undergoes Internet validation.\n         *\n         * If this is true, the platform will perform basic validation checks for Internet\n         * connectivity over this VPN. If and when they succeed, the VPN network capabilities will\n         * reflect this by gaining the {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED}\n         * capability.\n         *\n         * If this is false, the platform assumes the VPN either is always capable of reaching the\n         * Internet or intends not to. In this case, the VPN network capabilities will\n         * always gain the {@link NetworkCapabilities#NET_CAPABILITY_VALIDATED} capability\n         * immediately after it connects, whether it can reach public Internet destinations or not.\n         *\n         * @param requiresInternetValidation {@code true} if the framework should attempt to\n         *                                   validate this VPN for Internet connectivity. Defaults\n         *                                   to {@code false}.\n         ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_VALIDATED" ]
  }, {
    "name" : "public Builder setMetered(boolean isMetered)",
    "returnType" : "Builder",
    "comment" : "\n         * Marks the VPN network as metered.\n         *\n         * <p>A VPN network is classified as metered when the user is sensitive to heavy data usage\n         * due to monetary costs and/or data limitations. In such cases, you should set this to\n         * {@code true} so that apps on the system can avoid doing large data transfers. Otherwise,\n         * set this to {@code false}. Doing so would cause VPN network to inherit its meteredness\n         * from the underlying network.\n         *\n         * @param isMetered {@code true} if the VPN network should be treated as metered regardless\n         *     of underlying network meteredness. Defaults to {@code true}.\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         * @see NetworkCapabilities#NET_CAPABILITY_NOT_METERED\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setAllowedAlgorithms(@NonNull List<String> algorithmNames)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the allowable set of IPsec algorithms\n         *\n         * <p>If set, this will constrain the set of algorithms that the IPsec tunnel will use for\n         * integrity verification and encryption to the provided list.\n         *\n         * <p>The set of allowed IPsec algorithms is defined in {@link IpSecAlgorithm}. Adding of\n         * algorithms that are considered insecure (such as AUTH_HMAC_MD5 and AUTH_HMAC_SHA1) is not\n         * permitted, and will result in an IllegalArgumentException being thrown.\n         *\n         * <p>The provided algorithm list must contain at least one algorithm that provides\n         * Authentication, and one that provides Encryption. Authenticated Encryption with\n         * Associated Data (AEAD) algorithms provide both Authentication and Encryption.\n         *\n         * <p>If this {@link Builder} is constructed with an {@link IkeTunnelConnectionParams},\n         * authentication details should be configured there, and calling this method will result in\n         * an exception being thrown.\n         *\n         * <p>By default, this profile will use any algorithm defined in {@link IpSecAlgorithm},\n         * with the exception of those considered insecure (as described above).\n         *\n         * @param algorithmNames the list of supported IPsec algorithms\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         * @see IpSecAlgorithm\n         ",
    "links" : [ "android.net.IpSecAlgorithm", "Builder", "android.net.ipsec.ike.IkeTunnelConnectionParams" ]
  }, {
    "name" : "public Builder restrictToTestNetworks()",
    "returnType" : "Builder",
    "comment" : "\n         * Restricts this profile to use test networks (only).\n         *\n         * <p>This method is for testing only, and must not be used by apps. Calling\n         * provisionVpnProfile() with a profile where test-network usage is enabled will require the\n         * MANAGE_TEST_NETWORKS permission.\n         *\n         * @hide\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAutomaticNattKeepaliveTimerEnabled(boolean isEnabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the enabled state of the automatic NAT-T keepalive timers\n         *\n         * Note that if this builder was constructed with a {@link IkeTunnelConnectionParams},\n         * but this is called with {@code true}, the framework will automatically choose the\n         * appropriate keepalive timer and ignore the settings in the session params embedded\n         * in the connection params.\n         *\n         * @param isEnabled {@code true} to enable automatic keepalive timers, based on internal\n         *     platform signals. Defaults to {@code false}.\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         ",
    "links" : [ "android.net.ipsec.ike.IkeTunnelConnectionParams", "Builder" ]
  }, {
    "name" : "public Builder setAutomaticIpVersionSelectionEnabled(boolean isEnabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the enabled state of the automatic IP version selection\n         *\n         * @param isEnabled {@code true} to enable automatic IP version selection, based on internal\n         *     platform signals. Defaults to {@code false}.\n         * @return this {@link Builder} object to facilitate chaining of method calls\n         ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setLocalRoutesExcluded(boolean excludeLocalRoutes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets whether the local traffic is exempted from the VPN.\n         *\n         * When this is set, the system will not use the VPN network when an app\n         * tries to send traffic for an IP address that is on a local network.\n         *\n         * Note that there are important security implications. In particular, the\n         * networks that the device connects to typically decides what IP addresses\n         * are part of the local network. This means that for VPNs setting this\n         * flag, it is possible for anybody to set up a public network in such a\n         * way that traffic to arbitrary IP addresses will bypass the VPN, including\n         * traffic to services like DNS. When using this API, please consider the\n         * security implications for your particular case.\n         *\n         * Note that because the local traffic will always bypass the VPN,\n         * it is not possible to set this flag on a non-bypassable VPN.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Ikev2VpnProfile build()",
    "returnType" : "Ikev2VpnProfile",
    "comment" : "\n         * Validates, builds and provisions the VpnProfile.\n         *\n         * @throws IllegalArgumentException if any of the required keys or values were invalid\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void resetAuthParams()", "public Builder setAuthUsernamePassword(@NonNull String user, @NonNull String pass, @Nullable X509Certificate serverRootCa)", "public Builder setAuthDigitalSignature(@NonNull X509Certificate userCert, @NonNull PrivateKey key, @Nullable X509Certificate serverRootCa)", "public Builder setAuthPsk(@NonNull byte[] psk)", "public Builder setBypassable(boolean isBypassable)", "public Builder setProxy(@Nullable ProxyInfo proxy)", "public Builder setMaxMtu(int mtu)", "public Builder setRequiresInternetValidation(boolean requiresInternetValidation)", "public Builder setMetered(boolean isMetered)", "public Builder setAllowedAlgorithms(@NonNull List<String> algorithmNames)", "public Builder restrictToTestNetworks()", "public Builder setAutomaticNattKeepaliveTimerEnabled(boolean isEnabled)", "public Builder setAutomaticIpVersionSelectionEnabled(boolean isEnabled)", "public Builder setLocalRoutesExcluded(boolean excludeLocalRoutes)", "public Ikev2VpnProfile build()" ],
  "variableNames" : [ "mType", "mServerAddr", "mUserIdentity", "mPresharedKey", "mServerRootCaCert", "mUsername", "mPassword", "mRsaPrivateKey", "mUserCert", "mProxyInfo", "mAllowedAlgorithms", "mRequiresInternetValidation", "mIsBypassable", "mIsMetered", "mMaxMtu", "mIsRestrictedToTestNetworks", "mExcludeLocalRoutes", "mAutomaticNattKeepaliveTimerEnabled", "mAutomaticIpVersionSelectionEnabled", "mIkeTunConnParams" ]
}