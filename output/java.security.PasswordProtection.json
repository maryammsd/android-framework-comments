{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/KeyStore.java",
  "packageName" : "java.security",
  "className" : "PasswordProtection",
  "comment" : "\n     * A password-based implementation of {@code ProtectionParameter}.\n     *\n     * @since 1.5\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "password",
    "type" : "char[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protectionAlgorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protectionParameters",
    "type" : "AlgorithmParameterSpec",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "destroyed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getProtectionAlgorithm()",
    "returnType" : "String",
    "comment" : "\n         * Gets the name of the protection algorithm.\n         * If none was set then the keystore provider will use its default\n         * protection algorithm. The name of the default protection algorithm\n         * for a given keystore type is set using the\n         * {@code 'keystore.<type>.keyProtectionAlgorithm'} security property.\n         * For example, the\n         * {@code keystore.PKCS12.keyProtectionAlgorithm} property stores the\n         * name of the default key protection algorithm used for PKCS12\n         * keystores. If the security property is not set, an\n         * implementation-specific algorithm will be used.\n         *\n         * @return the algorithm name, or {@code null} if none was set\n         *\n         * @since 1.8\n         ",
    "links" : [ ]
  }, {
    "name" : "public AlgorithmParameterSpec getProtectionParameters()",
    "returnType" : "AlgorithmParameterSpec",
    "comment" : "\n         * Gets the parameters supplied for the protection algorithm.\n         *\n         * @return the algorithm parameter specification, or {@code  null},\n         *     if none was set\n         *\n         * @since 1.8\n         ",
    "links" : [ ]
  }, {
    "name" : "public synchronized char[] getPassword()",
    "returnType" : "char[]",
    "comment" : "\n         * Gets the password.\n         *\n         * <p>Note that this method returns a reference to the password.\n         * If a clone of the array is created it is the caller's\n         * responsibility to zero out the password information\n         * after it is no longer needed.\n         *\n         * @see #destroy()\n         * @return the password, which may be {@code null}\n         * @exception IllegalStateException if the password has\n         *              been cleared (destroyed)\n         ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void destroy() throws DestroyFailedException",
    "returnType" : "void",
    "comment" : "\n         * Clears the password.\n         *\n         * @exception DestroyFailedException if this method was unable\n         *      to clear the password\n         ",
    "links" : [ ]
  }, {
    "name" : "public synchronized boolean isDestroyed()",
    "returnType" : "boolean",
    "comment" : "\n         * Determines if password has been cleared.\n         *\n         * @return true if the password has been cleared, false otherwise\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getProtectionAlgorithm()", "public AlgorithmParameterSpec getProtectionParameters()", "public synchronized char[] getPassword()", "public synchronized void destroy() throws DestroyFailedException", "public synchronized boolean isDestroyed()" ],
  "variableNames" : [ "password", "protectionAlgorithm", "protectionParameters", "destroyed" ]
}