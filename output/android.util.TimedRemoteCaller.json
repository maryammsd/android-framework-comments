{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/TimedRemoteCaller.java",
  "packageName" : "android.util",
  "className" : "TimedRemoteCaller",
  "comment" : "\n * This is a helper class for making an async one way call and\n * its async one way response response in a sync fashion within\n * a timeout. The key idea is to call the remote method with a\n * sequence number and a callback and then starting to wait for\n * the response. The remote method calls back with the result and\n * the sequence number. If the response comes within the timeout\n * and its sequence number is the one sent in the method invocation,\n * then the call succeeded. If the response does not come within\n * the timeout then the call failed.\n * <p>\n * Typical usage is:\n * </p>\n * <p><pre><code>\n * public class MyMethodCaller extends TimeoutRemoteCallHelper<Object> {\n *     // The one way remote method to call.\n *     private final IRemoteInterface mTarget;\n *\n *     // One way callback invoked when the remote method is done.\n *     private final IRemoteCallback mCallback = new IRemoteCallback.Stub() {\n *         public void onCompleted(Object result, int sequence) {\n *             onRemoteMethodResult(result, sequence);\n *         }\n *     };\n *\n *     public MyMethodCaller(IRemoteInterface target) {\n *         mTarget = target;\n *     }\n *\n *     public Object onCallMyMethod(Object arg) throws RemoteException {\n *         final int sequence = onBeforeRemoteCall();\n *         mTarget.myMethod(arg, sequence);\n *         return getResultTimed(sequence);\n *     }\n * }\n * </code></pre></p>\n *\n * @param <T> The type of the expected result.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_CALL_TIMEOUT_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallTimeoutMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAwaitedCalls",
    "type" : "SparseIntArray",
    "comment" : " The callbacks we are waiting for, key == sequence id, value == 1 ",
    "links" : [ ]
  }, {
    "name" : "mReceivedCalls",
    "type" : "SparseArray<T>",
    "comment" : " The callbacks we received but for which the result has not yet been reported ",
    "links" : [ ]
  }, {
    "name" : "mSequenceCounter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected final int onBeforeRemoteCall()",
    "returnType" : "int",
    "comment" : "\n     * Indicate that a timed call will be made.\n     *\n     * @return The sequence id for the call\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void onRemoteMethodResult(T result, int sequence)",
    "returnType" : "void",
    "comment" : "\n     * Indicate that the timed call has returned.\n     *\n     * @param result The result of the timed call\n     * @param sequence The sequence id of the call (from {@link #onBeforeRemoteCall()})\n     ",
    "links" : [ "#onBeforeRemoteCall()" ]
  }, {
    "name" : "protected final T getResultTimed(int sequence) throws TimeoutException",
    "returnType" : "T",
    "comment" : "\n     * Wait until the timed call has returned.\n     *\n     * @param sequence The sequence id of the call (from {@link #onBeforeRemoteCall()})\n     *\n     * @return The result of the timed call (set in {@link #onRemoteMethodResult(Object, int)})\n     ",
    "links" : [ "#onBeforeRemoteCall()", "#onRemoteMethodResult(Object" ]
  } ],
  "methodNames" : [ "protected final int onBeforeRemoteCall()", "protected final void onRemoteMethodResult(T result, int sequence)", "protected final T getResultTimed(int sequence) throws TimeoutException" ],
  "variableNames" : [ "DEFAULT_CALL_TIMEOUT_MILLIS", "mLock", "mCallTimeoutMillis", "mAwaitedCalls", "mReceivedCalls", "mSequenceCounter" ]
}