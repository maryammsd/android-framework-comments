{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/ImageDecoder.java",
  "packageName" : "android.graphics",
  "className" : "ImageDecoder",
  "comment" : "\n *  Class for decoding images as {@link Bitmap}s or {@link Drawable}s.\n ",
  "variables" : [ {
    "name" : "ERROR_SOURCE_EXCEPTION",
    "type" : "int",
    "comment" : "\n     *  An Exception was thrown reading the {@link Source}.\n     ",
    "links" : [ "Source" ]
  }, {
    "name" : "ERROR_SOURCE_INCOMPLETE",
    "type" : "int",
    "comment" : "\n     *  The encoded data was incomplete.\n     ",
    "links" : [ ]
  }, {
    "name" : "ERROR_SOURCE_ERROR",
    "type" : "int",
    "comment" : "\n     *  The encoded data contained an error.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAnimated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutPaddingRect",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOCATOR_DEFAULT",
    "type" : "int",
    "comment" : "\n     *  Use the default allocation for the pixel memory.\n     *\n     *  Will typically result in a {@link Bitmap.Config#HARDWARE}\n     *  allocation, but may be software for small images. In addition, this will\n     *  switch to software when HARDWARE is incompatible, e.g.\n     *  {@link #setMutable}, {@link #setAsAlphaMask}.\n     ",
    "links" : [ "Bitmap.Config#HARDWARE", "#setMutable", "#setAsAlphaMask" ]
  }, {
    "name" : "ALLOCATOR_SOFTWARE",
    "type" : "int",
    "comment" : "\n     *  Use a software allocation for the pixel memory.\n     *\n     *  Useful for drawing to a software {@link Canvas} or for\n     *  accessing the pixels on the final output.\n     ",
    "links" : [ "Canvas" ]
  }, {
    "name" : "ALLOCATOR_SHARED_MEMORY",
    "type" : "int",
    "comment" : "\n     *  Use shared memory for the pixel memory.\n     *\n     *  Useful for sharing across processes.\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOCATOR_HARDWARE",
    "type" : "int",
    "comment" : "\n     *  Require a {@link Bitmap.Config#HARDWARE} {@link Bitmap}.\n     *\n     *  When this is combined with incompatible options, like\n     *  {@link #setMutable} or {@link #setAsAlphaMask}, {@link #decodeDrawable}\n     *  / {@link #decodeBitmap} will throw an\n     *  {@link java.lang.IllegalStateException}.\n     ",
    "links" : [ "Bitmap.Config#HARDWARE", "Bitmap", "#setMutable", "#setAsAlphaMask", "#decodeDrawable", "#decodeBitmap", "java.lang.IllegalStateException" ]
  } ],
  "methods" : [ {
    "name" : "public static Source createSource(@NonNull Resources res, int resId)",
    "returnType" : "Source",
    "comment" : "\n     * Create a new {@link Source} from an asset.\n     * @hide\n     *\n     * @param res the {@link Resources} object containing the image data.\n     * @param resId resource ID of the image data.\n     *      // FIXME: Can be an @DrawableRes?\n     * @return a new Source object, which can be passed to\n     *      {@link #decodeDrawable} or {@link #decodeBitmap}.\n     ",
    "links" : [ "Source", "Resources", "#decodeDrawable", "#decodeBitmap" ]
  }, {
    "name" : "public static Source createSource(@NonNull ContentResolver cr, @NonNull Uri uri)",
    "returnType" : "Source",
    "comment" : "\n     * Create a new {@link Source} from a {@link android.net.Uri}.\n     *\n     * @param cr to retrieve from.\n     * @param uri of the image file.\n     * @return a new Source object, which can be passed to\n     *      {@link #decodeDrawable} or {@link #decodeBitmap}.\n     ",
    "links" : [ "Source", "android.net.Uri", "#decodeDrawable", "#decodeBitmap" ]
  }, {
    "name" : "public static Source createSource(@NonNull byte[] data, int offset, int length) throws ArrayIndexOutOfBoundsException",
    "returnType" : "Source",
    "comment" : "\n     * Create a new {@link Source} from a byte array.\n     *\n     * @param data byte array of compressed image data.\n     * @param offset offset into data for where the decoder should begin\n     *      parsing.\n     * @param length number of bytes, beginning at offset, to parse.\n     * @throws NullPointerException if data is null.\n     * @throws ArrayIndexOutOfBoundsException if offset and length are\n     *      not within data.\n     * @hide\n     ",
    "links" : [ "Source" ]
  }, {
    "name" : "public static Source createSource(@NonNull byte[] data)",
    "returnType" : "Source",
    "comment" : "\n     * See {@link #createSource(byte[], int, int).\n     * @hide\n     ",
    "links" : [ "#createSource" ]
  }, {
    "name" : "public static Source createSource(@NonNull ByteBuffer buffer)",
    "returnType" : "Source",
    "comment" : "\n     * Create a new {@link Source} from a {@link java.nio.ByteBuffer}.\n     *\n     * <p>The returned {@link Source} effectively takes ownership of the\n     * {@link java.nio.ByteBuffer}; i.e. no other code should modify it after\n     * this call.</p>\n     *\n     * Decoding will start from {@link java.nio.ByteBuffer#position()}. The\n     * position after decoding is undefined.\n     ",
    "links" : [ "Source", "java.nio.ByteBuffer", "Source", "java.nio.ByteBuffer", "java.nio.ByteBuffer#position" ]
  }, {
    "name" : "public static Source createSource(Resources res, InputStream is)",
    "returnType" : "Source",
    "comment" : "\n     * Internal API used to generate bitmaps for use by Drawables (i.e. BitmapDrawable)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Source createSource(Resources res, InputStream is, int density)",
    "returnType" : "Source",
    "comment" : "\n     * Internal API used to generate bitmaps for use by Drawables (i.e. BitmapDrawable)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Source createSource(@NonNull File file)",
    "returnType" : "Source",
    "comment" : "\n     * Create a new {@link Source} from a {@link java.io.File}.\n     ",
    "links" : [ "Source", "java.io.File" ]
  }, {
    "name" : "public Size getSampledSize(int sampleSize)",
    "returnType" : "Size",
    "comment" : "\n     *  Return the width and height of a given sample size.\n     *\n     *  <p>This takes an input that functions like\n     *  {@link BitmapFactory.Options#inSampleSize}. It returns a width and\n     *  height that can be acheived by sampling the encoded image. Other widths\n     *  and heights may be supported, but will require an additional (internal)\n     *  scaling step. Such internal scaling is *not* supported with\n     *  {@link #setRequireUnpremultiplied} set to {@code true}.</p>\n     *\n     *  @param sampleSize Sampling rate of the encoded image.\n     *  @return {@link android.util.Size} of the width and height after\n     *      sampling.\n     ",
    "links" : [ "BitmapFactory.Options#inSampleSize", "#setRequireUnpremultiplied", "android.util.Size" ]
  }, {
    "name" : "public void setResize(int width, int height)",
    "returnType" : "void",
    "comment" : "\n     *  Resize the output to have the following size.\n     *\n     *  @param width must be greater than 0.\n     *  @param height must be greater than 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResize(int sampleSize)",
    "returnType" : "void",
    "comment" : "\n     *  Resize based on a sample size.\n     *\n     *  <p>This has the same effect as passing the result of\n     *  {@link #getSampledSize} to {@link #setResize(int, int)}.</p>\n     *\n     *  @param sampleSize Sampling rate of the encoded image.\n     ",
    "links" : [ "#getSampledSize", "#setResize" ]
  }, {
    "name" : "public void setAllocator(@Allocator int allocator)",
    "returnType" : "void",
    "comment" : "\n     *  Choose the backing for the pixel memory.\n     *\n     *  This is ignored for animated drawables.\n     *\n     *  @param allocator Type of allocator to use.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImageDecoder setRequireUnpremultiplied(boolean requireUnpremultiplied)",
    "returnType" : "ImageDecoder",
    "comment" : "\n     *  Specify whether the {@link Bitmap} should have unpremultiplied pixels.\n     *\n     *  By default, ImageDecoder will create a {@link Bitmap} with\n     *  premultiplied pixels, which is required for drawing with the\n     *  {@link android.view.View} system (i.e. to a {@link Canvas}). Calling\n     *  this method with a value of {@code true} will result in\n     *  {@link #decodeBitmap} returning a {@link Bitmap} with unpremultiplied\n     *  pixels. See {@link Bitmap#isPremultiplied}. This is incompatible with\n     *  {@link #decodeDrawable}; attempting to decode an unpremultiplied\n     *  {@link Drawable} will throw an {@link java.lang.IllegalStateException}.\n     ",
    "links" : [ "Bitmap", "Bitmap", "android.view.View", "Canvas", "#decodeBitmap", "Bitmap", "Bitmap#isPremultiplied", "#decodeDrawable", "Drawable", "java.lang.IllegalStateException" ]
  }, {
    "name" : "public void setPostProcessor(@Nullable PostProcessor p)",
    "returnType" : "void",
    "comment" : "\n     *  Modify the image after decoding and scaling.\n     *\n     *  <p>This allows adding effects prior to returning a {@link Drawable} or\n     *  {@link Bitmap}. For a {@code Drawable} or an immutable {@code Bitmap},\n     *  this is the only way to process the image after decoding.</p>\n     *\n     *  <p>If set on a nine-patch image, the nine-patch data is ignored.</p>\n     *\n     *  <p>For an animated image, the drawing commands drawn on the\n     *  {@link Canvas} will be recorded immediately and then applied to each\n     *  frame.</p>\n     ",
    "links" : [ "Drawable", "Bitmap", "Canvas" ]
  }, {
    "name" : "public void setOnPartialImageListener(@Nullable OnPartialImageListener l)",
    "returnType" : "void",
    "comment" : "\n     *  Set (replace) the {@link OnPartialImageListener} on this object.\n     *\n     *  Will be called if there is an error in the input. Without one, a\n     *  partial {@link Bitmap} will be created.\n     ",
    "links" : [ "OnPartialImageListener", "Bitmap" ]
  }, {
    "name" : "public void setCrop(@Nullable Rect subset)",
    "returnType" : "void",
    "comment" : "\n     *  Crop the output to {@code subset} of the (possibly) scaled image.\n     *\n     *  <p>{@code subset} must be contained within the size set by\n     *  {@link #setResize} or the bounds of the image if setResize was not\n     *  called. Otherwise an {@link IllegalStateException} will be thrown by\n     *  {@link #decodeDrawable}/{@link #decodeBitmap}.</p>\n     *\n     *  <p>NOT intended as a replacement for\n     *  {@link BitmapRegionDecoder#decodeRegion}. This supports all formats,\n     *  but merely crops the output.</p>\n     ",
    "links" : [ "#setResize", "IllegalStateException", "#decodeDrawable", "#decodeBitmap", "BitmapRegionDecoder#decodeRegion" ]
  }, {
    "name" : "public void setOutPaddingRect(@NonNull Rect outPadding)",
    "returnType" : "void",
    "comment" : "\n     *  Set a Rect for retrieving nine patch padding.\n     *\n     *  If the image is a nine patch, this Rect will be set to the padding\n     *  rectangle during decode. Otherwise it will not be modified.\n     *\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ImageDecoder setMutable(boolean mutable)",
    "returnType" : "ImageDecoder",
    "comment" : "\n     *  Specify whether the {@link Bitmap} should be mutable.\n     *\n     *  <p>By default, a {@link Bitmap} created will be immutable, but that can\n     *  be changed with this call.</p>\n     *\n     *  <p>Mutable Bitmaps are incompatible with {@link #ALLOCATOR_HARDWARE},\n     *  because {@link Bitmap.Config#HARDWARE} Bitmaps cannot be mutable.\n     *  Attempting to combine them will throw an\n     *  {@link java.lang.IllegalStateException}.</p>\n     *\n     *  <p>Mutable Bitmaps are also incompatible with {@link #decodeDrawable},\n     *  which would require retrieving the Bitmap from the returned Drawable in\n     *  order to modify. Attempting to decode a mutable {@link Drawable} will\n     *  throw an {@link java.lang.IllegalStateException}.</p>\n     ",
    "links" : [ "Bitmap", "Bitmap", "#ALLOCATOR_HARDWARE", "Bitmap.Config#HARDWARE", "java.lang.IllegalStateException", "#decodeDrawable", "Drawable", "java.lang.IllegalStateException" ]
  }, {
    "name" : "public ImageDecoder setPreferRamOverQuality(boolean preferRamOverQuality)",
    "returnType" : "ImageDecoder",
    "comment" : "\n     *  Specify whether to potentially save RAM at the expense of quality.\n     *\n     *  Setting this to {@code true} may result in a {@link Bitmap} with a\n     *  denser {@link Bitmap.Config}, depending on the image. For example, for\n     *  an opaque {@link Bitmap}, this may result in a {@link Bitmap.Config}\n     *  with no alpha information.\n     ",
    "links" : [ "Bitmap", "Bitmap.Config", "Bitmap", "Bitmap.Config" ]
  }, {
    "name" : "public ImageDecoder setAsAlphaMask(boolean asAlphaMask)",
    "returnType" : "ImageDecoder",
    "comment" : "\n     *  Specify whether to potentially treat the output as an alpha mask.\n     *\n     *  <p>If this is set to {@code true} and the image is encoded in a format\n     *  with only one channel, treat that channel as alpha. Otherwise this call has\n     *  no effect.</p>\n     *\n     *  <p>setAsAlphaMask is incompatible with {@link #ALLOCATOR_HARDWARE}. Trying to\n     *  combine them will result in {@link #decodeDrawable}/\n     *  {@link #decodeBitmap} throwing an\n     *  {@link java.lang.IllegalStateException}.</p>\n     ",
    "links" : [ "#ALLOCATOR_HARDWARE", "#decodeDrawable", "#decodeBitmap", "java.lang.IllegalStateException" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Drawable decodeDrawable(@NonNull Source src, @Nullable OnHeaderDecodedListener listener) throws IOException",
    "returnType" : "Drawable",
    "comment" : "\n     *  Create a {@link Drawable} from a {@code Source}.\n     *\n     *  @param src representing the encoded image.\n     *  @param listener for learning the {@link ImageInfo} and changing any\n     *      default settings on the {@code ImageDecoder}. If not {@code null},\n     *      this will be called on the same thread as {@code decodeDrawable}\n     *      before that method returns.\n     *  @return Drawable for displaying the image.\n     *  @throws IOException if {@code src} is not found, is an unsupported\n     *      format, or cannot be decoded for any reason.\n     ",
    "links" : [ "Drawable", "ImageInfo" ]
  }, {
    "name" : "public static Drawable decodeDrawable(@NonNull Source src) throws IOException",
    "returnType" : "Drawable",
    "comment" : "\n     * See {@link #decodeDrawable(Source, OnHeaderDecodedListener)}.\n     ",
    "links" : [ "#decodeDrawable" ]
  }, {
    "name" : "public static Bitmap decodeBitmap(@NonNull Source src, @Nullable OnHeaderDecodedListener listener) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     *  Create a {@link Bitmap} from a {@code Source}.\n     *\n     *  @param src representing the encoded image.\n     *  @param listener for learning the {@link ImageInfo} and changing any\n     *      default settings on the {@code ImageDecoder}. If not {@code null},\n     *      this will be called on the same thread as {@code decodeBitmap}\n     *      before that method returns.\n     *  @return Bitmap containing the image.\n     *  @throws IOException if {@code src} is not found, is an unsupported\n     *      format, or cannot be decoded for any reason.\n     ",
    "links" : [ "Bitmap", "ImageInfo" ]
  }, {
    "name" : "public static Bitmap decodeBitmap(@NonNull Source src) throws IOException",
    "returnType" : "Bitmap",
    "comment" : "\n     *  See {@link #decodeBitmap(Source, OnHeaderDecodedListener)}.\n     ",
    "links" : [ "#decodeBitmap" ]
  } ],
  "variableNames" : [ "ERROR_SOURCE_EXCEPTION", "ERROR_SOURCE_INCOMPLETE", "ERROR_SOURCE_ERROR", "mAnimated", "mOutPaddingRect", "ALLOCATOR_DEFAULT", "ALLOCATOR_SOFTWARE", "ALLOCATOR_SHARED_MEMORY", "ALLOCATOR_HARDWARE" ],
  "methodNames" : [ "public static Source createSource(@NonNull Resources res, int resId)", "public static Source createSource(@NonNull ContentResolver cr, @NonNull Uri uri)", "public static Source createSource(@NonNull byte[] data, int offset, int length) throws ArrayIndexOutOfBoundsException", "public static Source createSource(@NonNull byte[] data)", "public static Source createSource(@NonNull ByteBuffer buffer)", "public static Source createSource(Resources res, InputStream is)", "public static Source createSource(Resources res, InputStream is, int density)", "public static Source createSource(@NonNull File file)", "public Size getSampledSize(int sampleSize)", "public void setResize(int width, int height)", "public void setResize(int sampleSize)", "public void setAllocator(@Allocator int allocator)", "public ImageDecoder setRequireUnpremultiplied(boolean requireUnpremultiplied)", "public void setPostProcessor(@Nullable PostProcessor p)", "public void setOnPartialImageListener(@Nullable OnPartialImageListener l)", "public void setCrop(@Nullable Rect subset)", "public void setOutPaddingRect(@NonNull Rect outPadding)", "public ImageDecoder setMutable(boolean mutable)", "public ImageDecoder setPreferRamOverQuality(boolean preferRamOverQuality)", "public ImageDecoder setAsAlphaMask(boolean asAlphaMask)", "public void close()", "public static Drawable decodeDrawable(@NonNull Source src, @Nullable OnHeaderDecodedListener listener) throws IOException", "public static Drawable decodeDrawable(@NonNull Source src) throws IOException", "public static Bitmap decodeBitmap(@NonNull Source src, @Nullable OnHeaderDecodedListener listener) throws IOException", "public static Bitmap decodeBitmap(@NonNull Source src) throws IOException" ]
}