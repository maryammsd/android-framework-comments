{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/random/RandomGenerator.java",
  "packageName" : "java.util.random",
  "className" : "StreamableGenerator",
  "comment" : "\n     * The {@link StreamableGenerator} interface augments the\n     * {@link RandomGenerator} interface to provide methods that return streams\n     * of {@link RandomGenerator} objects. Ideally, such a stream of objects\n     * would have the property that the behavior of each object is statistically\n     * independent of all the others. In practice, one may have to settle for\n     * some approximation to this property.\n     *\n     * <p> A generator that implements interface {@link SplittableGenerator} may\n     * choose to use its {@link SplittableGenerator#splits splits}() method to\n     * implement the {@link StreamableGenerator#rngs rngs}() method required by this\n     * interface.\n     *\n     * <p> A generator that implements interface {@link JumpableGenerator} may\n     * choose to use its {@link JumpableGenerator#jumps() jumps}() method to implement the\n     * {@link StreamableGenerator#rngs() rngs}() method required by this interface.\n     *\n     * <p> A generator that implements interface {@link LeapableGenerator} may\n     * choose to use its {@link LeapableGenerator#leaps() leaps}() method to\n     * implement the {@link StreamableGenerator#rngs() rngs}() method required by this\n     * interface.\n     *\n     * <p> Objects that implement {@link StreamableGenerator} are typically not\n     * cryptographically secure. Consider instead using {@link SecureRandom} to\n     * get a cryptographically secure pseudo-random number generator for use by\n     * security-sensitive applications.\n     ",
  "links" : [ "java.util.random.RandomGenerator", "java.security.SecureRandom", "#leaps()", "#splits", "#rngs", "JumpableGenerator", "#jumps()", "StreamableGenerator", "SplittableGenerator", "#rngs()", "LeapableGenerator" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " static StreamableGenerator of(String name)",
    "returnType" : "StreamableGenerator",
    "comment" : "\n         * Returns an instance of {@link StreamableGenerator} that utilizes the\n         * {@code name} <a href=\"package-summary.html#algorithms\">algorithm</a>.\n         *\n         * @param name  Name of random number generator\n         *              <a href=\"package-summary.html#algorithms\">algorithm</a>\n         *\n         * @return An instance of {@link StreamableGenerator}\n         *\n         * @throws NullPointerException if name is null\n         * @throws IllegalArgumentException if the named algorithm is not found\n         ",
    "links" : [ "StreamableGenerator" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs()",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of objects, each of which\n         * implements the {@link RandomGenerator} interface. Ideally the\n         * generators in the stream will appear to be statistically independent.\n         * The new generators are of the same\n         * <a href=\"package-summary.html#algorithms\">algorithm</a> as this generator.\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @implNote It is permitted to implement this method in a manner\n         *           equivalent to {@link StreamableGenerator#rngs(long) rngs}\n         *           ({@link Long#MAX_VALUE Long.MAX_VALUE}).\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#MAX_VALUE", "#rngs(long)" ]
  }, {
    "name" : " Stream<RandomGenerator> rngs(long streamSize)",
    "returnType" : "Stream<RandomGenerator>",
    "comment" : "\n         * Returns an effectively unlimited stream of objects, each of which\n         * implements the {@link RandomGenerator} interface. Ideally the\n         * generators in the stream will appear to be statistically independent.\n         * The new generators are of the same\n         * <a href=\"package-summary.html#algorithms\">algorithm</a> as this generator.\n         *\n         * @param streamSize the number of generators to generate\n         *\n         * @return a stream of objects that implement the {@link RandomGenerator} interface\n         *\n         * @throws IllegalArgumentException if {@code streamSize} is\n         *         less than zero\n         *\n         * @implSpec The default implementation calls {@link StreamableGenerator#rngs() rngs}() and\n         * then limits its length to {@code streamSize}.\n         ",
    "links" : [ "java.util.random.RandomGenerator", "#rngs()" ]
  } ],
  "methodNames" : [ " static StreamableGenerator of(String name)", " Stream<RandomGenerator> rngs()", " Stream<RandomGenerator> rngs(long streamSize)" ],
  "variableNames" : [ ]
}