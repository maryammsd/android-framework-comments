{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/speech/RecognitionService.java",
  "packageName" : "android.speech",
  "className" : "Callback",
  "comment" : "\n     * This class receives callbacks from the speech recognition service and forwards them to the\n     * user. An instance of this class is passed to the\n     * {@link RecognitionService#onStartListening(Intent, Callback)} method. Recognizers may call\n     * these methods on any thread.\n     ",
  "variables" : [ {
    "name" : "mListener",
    "type" : "IRecognitionListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallingUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void beginningOfSpeech() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the user has started to speak.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void bufferReceived(byte[] buffer) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when sound has been received. The purpose of this\n         * function is to allow giving feedback to the user regarding the captured audio.\n         * \n         * @param buffer a buffer containing a sequence of big-endian 16-bit integers representing a\n         *        single channel audio stream. The sample rate is implementation dependent.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void endOfSpeech() throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method after the user stops speaking.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void error(int error) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when a network or recognition error occurred.\n         * \n         * @param error code is defined in {@link SpeechRecognizer}\n         ",
    "links" : [ "SpeechRecognizer" ]
  }, {
    "name" : "public void partialResults(Bundle partialResults) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when partial recognition results are available. This\n         * method can be called at any time between {@link #beginningOfSpeech()} and\n         * {@link #results(Bundle)} when partial results are ready. This method may be called zero,\n         * one or multiple times for each call to {@link SpeechRecognizer#startListening(Intent)},\n         * depending on the speech recognition service implementation.\n         * \n         * @param partialResults the returned results. To retrieve the results in\n         *        ArrayList&lt;String&gt; format use {@link Bundle#getStringArrayList(String)} with\n         *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n         ",
    "links" : [ "#beginningOfSpeech", "#results", "SpeechRecognizer#startListening", "Bundle#getStringArrayList", "SpeechRecognizer#RESULTS_RECOGNITION" ]
  }, {
    "name" : "public void readyForSpeech(Bundle params) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the endpointer is ready for the user to start\n         * speaking.\n         * \n         * @param params parameters set by the recognition service. Reserved for future use.\n         ",
    "links" : [ ]
  }, {
    "name" : "public void results(Bundle results) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when recognition results are ready.\n         * \n         * @param results the recognition results. To retrieve the results in {@code\n         *        ArrayList<String>} format use {@link Bundle#getStringArrayList(String)} with\n         *        {@link SpeechRecognizer#RESULTS_RECOGNITION} as a parameter\n         ",
    "links" : [ "Bundle#getStringArrayList", "SpeechRecognizer#RESULTS_RECOGNITION" ]
  }, {
    "name" : "public void rmsChanged(float rmsdB) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n         * The service should call this method when the sound level in the audio stream has changed.\n         * There is no guarantee that this method will be called.\n         * \n         * @param rmsdB the new RMS dB value\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getCallingUid()",
    "returnType" : "int",
    "comment" : "\n         * Return the Linux uid assigned to the process that sent you the current transaction that\n         * is being processed. This is obtained from {@link Binder#getCallingUid()}.\n         ",
    "links" : [ "Binder#getCallingUid" ]
  } ],
  "variableNames" : [ "mListener", "mCallingUid" ],
  "methodNames" : [ "public void beginningOfSpeech() throws RemoteException", "public void bufferReceived(byte[] buffer) throws RemoteException", "public void endOfSpeech() throws RemoteException", "public void error(int error) throws RemoteException", "public void partialResults(Bundle partialResults) throws RemoteException", "public void readyForSpeech(Bundle params) throws RemoteException", "public void results(Bundle results) throws RemoteException", "public void rmsChanged(float rmsdB) throws RemoteException", "public int getCallingUid()" ]
}