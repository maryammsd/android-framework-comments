{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothClass.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothClass",
  "comment" : "\n * Represents a Bluetooth class, which describes general characteristics\n * and capabilities of a device. For example, a Bluetooth class will\n * specify the general device type such as a phone, a computer, or\n * headset, and whether it's capable of services such as audio or telephony.\n *\n * <p>Every Bluetooth class is composed of zero or more service classes, and\n * exactly one device class. The device class is further broken down into major\n * and minor device class components.\n *\n * <p>{@link BluetoothClass} is useful as a hint to roughly describe a device\n * (for example to show an icon in the UI), but does not reliably describe which\n * Bluetooth profiles or services are actually supported by a device. Accurate\n * service discovery is done through SDP requests, which are automatically\n * performed when creating an RFCOMM socket with {@link\n * BluetoothDevice#createRfcommSocketToServiceRecord} and {@link\n * BluetoothAdapter#listenUsingRfcommWithServiceRecord}</p>\n *\n * <p>Use {@link BluetoothDevice#getBluetoothClass} to retrieve the class for\n * a remote device.\n *\n * <!--\n * The Bluetooth class is a 32 bit field. The format of these bits is defined at\n * http://www.bluetooth.org/Technical/AssignedNumbers/baseband.htm\n * (login required). This class contains that 32 bit field, and provides\n * constants and methods to determine which Service Class(es) and Device Class\n * are encoded in that field.\n * -->\n ",
  "variables" : [ {
    "name" : "ERROR",
    "type" : "int",
    "comment" : "\n     * Legacy error value. Applications should use null instead.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BluetoothClass>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROFILE_HEADSET",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_A2DP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_OPP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_HID",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_PANU",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_NAP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "PROFILE_A2DP_SINK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasService(int service)",
    "returnType" : "boolean",
    "comment" : "\n     * Return true if the specified service class is supported by this\n     * {@link BluetoothClass}.\n     * <p>Valid service classes are the public constants in\n     * {@link BluetoothClass.Service}. For example, {@link\n     * BluetoothClass.Service#AUDIO}.\n     *\n     * @param service valid service class\n     * @return true if the service class is supported\n     ",
    "links" : [ "BluetoothClass.Service#AUDIO", "BluetoothClass.Service", "android.bluetooth.BluetoothClass" ]
  }, {
    "name" : "public int getMajorDeviceClass()",
    "returnType" : "int",
    "comment" : "\n     * Return the major device class component of this {@link BluetoothClass}.\n     * <p>Values returned from this function can be compared with the\n     * public constants in {@link BluetoothClass.Device.Major} to determine\n     * which major class is encoded in this Bluetooth class.\n     *\n     * @return major device class component\n     ",
    "links" : [ "BluetoothClass.Device.Major", "android.bluetooth.BluetoothClass" ]
  }, {
    "name" : "public int getDeviceClass()",
    "returnType" : "int",
    "comment" : "\n     * Return the (major and minor) device class component of this\n     * {@link BluetoothClass}.\n     * <p>Values returned from this function can be compared with the\n     * public constants in {@link BluetoothClass.Device} to determine which\n     * device class is encoded in this Bluetooth class.\n     *\n     * @return device class component\n     ",
    "links" : [ "BluetoothClass.Device", "android.bluetooth.BluetoothClass" ]
  }, {
    "name" : "public int getClassOfDevice()",
    "returnType" : "int",
    "comment" : "\n     * Return the Bluetooth Class of Device (CoD) value including the\n     * {@link BluetoothClass.Service}, {@link BluetoothClass.Device.Major} and\n     * minor device fields.\n     *\n     * <p>This value is an integer representation of Bluetooth CoD as in\n     * Bluetooth specification.\n     *\n     * @see <a href=\"Bluetooth CoD\">https://www.bluetooth.com/specifications/assigned-numbers/baseband</a>\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothClass.Service", "BluetoothClass.Device.Major" ]
  }, {
    "name" : "public byte[] getClassOfDeviceBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the Bluetooth Class of Device (CoD) value including the\n     * {@link BluetoothClass.Service}, {@link BluetoothClass.Device.Major} and\n     * minor device fields.\n     *\n     * <p>This value is a byte array representation of Bluetooth CoD as in\n     * Bluetooth specification.\n     *\n     * <p>Bluetooth COD information is 3 bytes, but stored as an int. Hence the\n     * MSB is useless and needs to be thrown away. The lower 3 bytes are\n     * converted into a byte array MSB to LSB. Hence, using BIG_ENDIAN.\n     *\n     * @see <a href=\"Bluetooth CoD\">https://www.bluetooth.com/specifications/assigned-numbers/baseband</a>\n     *\n     * @hide\n     ",
    "links" : [ "BluetoothClass.Service", "BluetoothClass.Device.Major" ]
  }, {
    "name" : "public boolean doesClassMatch(int profile)",
    "returnType" : "boolean",
    "comment" : "\n     * Check class bits for possible bluetooth profile support.\n     * This is a simple heuristic that tries to guess if a device with the\n     * given class bits might support specified profile. It is not accurate for all\n     * devices. It tries to err on the side of false positives.\n     *\n     * @param profile The profile to be checked\n     * @return True if this device might support specified profile.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "ERROR", "mClass", "CREATOR", "PROFILE_HEADSET", "PROFILE_A2DP", "PROFILE_OPP", "PROFILE_HID", "PROFILE_PANU", "PROFILE_NAP", "PROFILE_A2DP_SINK" ],
  "methodNames" : [ "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public boolean hasService(int service)", "public int getMajorDeviceClass()", "public int getDeviceClass()", "public int getClassOfDevice()", "public byte[] getClassOfDeviceBytes()", "public boolean doesClassMatch(int profile)" ]
}