{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/json/JSONObject.java",
  "packageName" : "org.json",
  "className" : "JSONObject",
  "comment" : "\n * A modifiable set of name/value mappings. Names are unique, non-null strings.\n * Values may be any mix of {@link JSONObject JSONObjects}, {@link JSONArray\n * JSONArrays}, Strings, Booleans, Integers, Longs, Doubles or {@link #NULL}.\n * Values may not be {@code null}, {@link Double#isNaN() NaNs}, {@link\n * Double#isInfinite() infinities}, or of any type not listed here.\n *\n * <p>This class can coerce values to another type when requested.\n * <ul>\n *   <li>When the requested type is a boolean, strings will be coerced using a\n *       case-insensitive comparison to \"true\" and \"false\".\n *   <li>When the requested type is a double, other {@link Number} types will\n *       be coerced using {@link Number#doubleValue() doubleValue}. Strings\n *       that can be coerced using {@link Double#valueOf(String)} will be.\n *   <li>When the requested type is an int, other {@link Number} types will\n *       be coerced using {@link Number#intValue() intValue}. Strings\n *       that can be coerced using {@link Double#valueOf(String)} will be,\n *       and then cast to int.\n *   <li><a name=\"lossy\">When the requested type is a long, other {@link Number} types will\n *       be coerced using {@link Number#longValue() longValue}. Strings\n *       that can be coerced using {@link Double#valueOf(String)} will be,\n *       and then cast to long. This two-step conversion is lossy for very\n *       large values. For example, the string \"9223372036854775806\" yields the\n *       long 9223372036854775807.</a>\n *   <li>When the requested type is a String, other non-null values will be\n *       coerced using {@link String#valueOf(Object)}. Although null cannot be\n *       coerced, the sentinel value {@link JSONObject#NULL} is coerced to the\n *       string \"null\".\n * </ul>\n *\n * <p>This class can look up both mandatory and optional values:\n * <ul>\n *   <li>Use <code>get<i>Type</i>()</code> to retrieve a mandatory value. This\n *       fails with a {@code JSONException} if the requested name has no value\n *       or if the value cannot be coerced to the requested type.\n *   <li>Use <code>opt<i>Type</i>()</code> to retrieve an optional value. This\n *       returns a system- or user-supplied default if the requested name has no\n *       value or if the value cannot be coerced to the requested type.\n * </ul>\n *\n * <p><strong>Warning:</strong> this class represents null in two incompatible\n * ways: the standard Java {@code null} reference, and the sentinel value {@link\n * JSONObject#NULL}. In particular, calling {@code put(name, null)} removes the\n * named entry from the object but {@code put(name, JSONObject.NULL)} stores an\n * entry whose value is {@code JSONObject.NULL}.\n *\n * <p>Instances of this class are not thread safe. Although this class is\n * nonfinal, it was not designed for inheritance and should not be subclassed.\n * In particular, self-use by overrideable methods is not specified. See\n * <i>Effective Java, 3rd edition</i> Item 19, \"Design and Document for\n * inheritance or else prohibit it\" for further information.\n ",
  "links" : [ "#isNaN()", "org.json.JSONObject", "Number", "#isInfinite()", "#longValue()", "#doubleValue()", "org.json.JSONObject#NULL", "JSONArrayJSONArrays", "#NULL", "#intValue()", "#valueOf(String)", "#valueOf(Object)" ],
  "variables" : [ {
    "name" : "NEGATIVE_ZERO",
    "type" : "Double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NULL",
    "type" : "Object",
    "comment" : "\n     * A sentinel value used to explicitly define a name with no value. Unlike\n     * {@code null}, names with this value:\n     * <ul>\n     *   <li>show up in the {@link #names} array\n     *   <li>show up in the {@link #keys} iterator\n     *   <li>return {@code true} for {@link #has(String)}\n     *   <li>do not throw on {@link #get(String)}\n     *   <li>are included in the encoded JSON string.\n     * </ul>\n     *\n     * <p>This value violates the general contract of {@link Object#equals} by\n     * returning true when compared to {@code null}. Its {@link #toString}\n     * method returns \"null\".\n     ",
    "links" : [ "#names", "#equals", "#get(String)", "#has(String)", "#keys", "#toString" ]
  }, {
    "name" : "nameValuePairs",
    "type" : "LinkedHashMap<String, Object>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int length()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of name/value mappings in this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject put(@NonNull String name, boolean value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Maps {@code name} to {@code value}, clobbering any existing name/value\n     * mapping with the same name.\n     *\n     * @return this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject put(@NonNull String name, double value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Maps {@code name} to {@code value}, clobbering any existing name/value\n     * mapping with the same name.\n     *\n     * @param value a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities}.\n     * @return this object.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public JSONObject put(@NonNull String name, int value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Maps {@code name} to {@code value}, clobbering any existing name/value\n     * mapping with the same name.\n     *\n     * @return this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject put(@NonNull String name, long value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Maps {@code name} to {@code value}, clobbering any existing name/value\n     * mapping with the same name.\n     *\n     * @return this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject put(@NonNull String name, @Nullable Object value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Maps {@code name} to {@code value}, clobbering any existing name/value\n     * mapping with the same name. If the value is {@code null}, any existing\n     * mapping for {@code name} is removed.\n     *\n     * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double, {@link #NULL}, or {@code null}. May not be\n     *     {@link Double#isNaN() NaNs} or {@link Double#isInfinite()\n     *     infinities}.\n     * @return this object.\n     ",
    "links" : [ "#isNaN()", "org.json.JSONObject", "#isInfinite()", "#NULL", "org.json.JSONArray" ]
  }, {
    "name" : "public JSONObject putOpt(@Nullable String name, @Nullable Object value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Equivalent to {@code put(name, value)} when both parameters are non-null;\n     * does nothing otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject accumulate(@NonNull String name, @Nullable Object value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Appends {@code value} to the array already mapped to {@code name}. If\n     * this object has no mapping for {@code name}, this inserts a new mapping.\n     * If the mapping exists but its value is not an array, the existing\n     * and new values are inserted in order into a new array which is itself\n     * mapped to {@code name}. In aggregate, this allows values to be added to a\n     * mapping one at a time.\n     *\n     * <p> Note that {@link #append(String, Object)} provides better semantics.\n     * In particular, the mapping for {@code name} will <b>always</b> be a\n     * {@link JSONArray}. Using {@code accumulate} will result in either a\n     * {@link JSONArray} or a mapping whose type is the type of {@code value}\n     * depending on the number of calls to it.\n     *\n     * @param value a {@link JSONObject}, {@link JSONArray}, String, Boolean,\n     *     Integer, Long, Double, {@link #NULL} or null. May not be {@link\n     *     Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}.\n     ",
    "links" : [ "#isNaN()", "org.json.JSONObject", "#append(String", "#isInfinite()", "#NULL", "org.json.JSONArray" ]
  }, {
    "name" : "public JSONObject append(@NonNull String name, @Nullable Object value) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Appends values to the array mapped to {@code name}. A new {@link JSONArray}\n     * mapping for {@code name} will be inserted if no mapping exists. If the existing\n     * mapping for {@code name} is not a {@link JSONArray}, a {@link JSONException}\n     * will be thrown.\n     *\n     * @throws JSONException if {@code name} is {@code null} or if the mapping for\n     *         {@code name} is non-null and is not a {@link JSONArray}.\n     ",
    "links" : [ "org.json.JSONException", "org.json.JSONArray" ]
  }, {
    "name" : " String checkName(String name) throws JSONException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Object remove(@Nullable String name)",
    "returnType" : "Object",
    "comment" : "\n     * Removes the named mapping if it exists; does nothing otherwise.\n     *\n     * @return the value previously mapped by {@code name}, or null if there was\n     *     no such mapping.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNull(@Nullable String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object has no mapping for {@code name} or if it has\n     * a mapping whose value is {@link #NULL}.\n     ",
    "links" : [ "#NULL" ]
  }, {
    "name" : "public boolean has(@Nullable String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object has a mapping for {@code name}. The mapping\n     * may be {@link #NULL}.\n     ",
    "links" : [ "#NULL" ]
  }, {
    "name" : "public Object get(@NonNull String name) throws JSONException",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value mapped by {@code name}, or throws if no such mapping exists.\n     *\n     * @throws JSONException if no such mapping exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object opt(@Nullable String name)",
    "returnType" : "Object",
    "comment" : "\n     * Returns the value mapped by {@code name}, or null if no such mapping\n     * exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getBoolean(@NonNull String name) throws JSONException",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a boolean or\n     * can be coerced to a boolean, or throws otherwise.\n     *\n     * @throws JSONException if the mapping doesn't exist or cannot be coerced\n     *     to a boolean.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean optBoolean(@Nullable String name)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a boolean or\n     * can be coerced to a boolean, or false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean optBoolean(@Nullable String name, boolean fallback)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a boolean or\n     * can be coerced to a boolean, or {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getDouble(@NonNull String name) throws JSONException",
    "returnType" : "double",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a double or\n     * can be coerced to a double, or throws otherwise.\n     *\n     * @throws JSONException if the mapping doesn't exist or cannot be coerced\n     *     to a double.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double optDouble(@Nullable String name)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a double or\n     * can be coerced to a double, or {@code NaN} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double optDouble(@Nullable String name, double fallback)",
    "returnType" : "double",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a double or\n     * can be coerced to a double, or {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInt(@NonNull String name) throws JSONException",
    "returnType" : "int",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is an int or\n     * can be coerced to an int, or throws otherwise.\n     *\n     * @throws JSONException if the mapping doesn't exist or cannot be coerced\n     *     to an int.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int optInt(@Nullable String name)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is an int or\n     * can be coerced to an int, or 0 otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int optInt(@Nullable String name, int fallback)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is an int or\n     * can be coerced to an int, or {@code fallback} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLong(@NonNull String name) throws JSONException",
    "returnType" : "long",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a long or\n     * can be coerced to a long, or throws otherwise.\n     * Note that JSON represents numbers as doubles,\n     * so this is <a href=\"#lossy\">lossy</a>; use strings to transfer numbers via JSON.\n     *\n     * @throws JSONException if the mapping doesn't exist or cannot be coerced\n     *     to a long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long optLong(@Nullable String name)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a long or\n     * can be coerced to a long, or 0 otherwise. Note that JSON represents numbers as doubles,\n     * so this is <a href=\"#lossy\">lossy</a>; use strings to transfer numbers via JSON.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long optLong(@Nullable String name, long fallback)",
    "returnType" : "long",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a long or\n     * can be coerced to a long, or {@code fallback} otherwise. Note that JSON represents\n     * numbers as doubles, so this is <a href=\"#lossy\">lossy</a>; use strings to transfer\n     * numbers via JSON.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getString(@NonNull String name) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists, coercing it if\n     * necessary, or throws if no such mapping exists.\n     *\n     * @throws JSONException if no such mapping exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String optString(@Nullable String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists, coercing it if\n     * necessary, or the empty string if no such mapping exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String optString(@Nullable String name, @NonNull String fallback)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists, coercing it if\n     * necessary, or {@code fallback} if no such mapping exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray getJSONArray(@NonNull String name) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a {@code\n     * JSONArray}, or throws otherwise.\n     *\n     * @throws JSONException if the mapping doesn't exist or is not a {@code\n     *     JSONArray}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray optJSONArray(@Nullable String name)",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a {@code\n     * JSONArray}, or null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject getJSONObject(@NonNull String name) throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a {@code\n     * JSONObject}, or throws otherwise.\n     *\n     * @throws JSONException if the mapping doesn't exist or is not a {@code\n     *     JSONObject}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject optJSONObject(@Nullable String name)",
    "returnType" : "JSONObject",
    "comment" : "\n     * Returns the value mapped by {@code name} if it exists and is a {@code\n     * JSONObject}, or null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONArray toJSONArray(@Nullable JSONArray names) throws JSONException",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns an array with the values corresponding to {@code names}. The\n     * array contains null for names that aren't mapped. This method returns\n     * null if {@code names} is either null or empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<@NonNull String> keys()",
    "returnType" : "Iterator<@NonNull String>",
    "comment" : "\n     * Returns an iterator of the {@code String} names in this object. The\n     * returned iterator supports {@link Iterator#remove() remove}, which will\n     * remove the corresponding mapping from this object. If this object is\n     * modified after the iterator is returned, the iterator's behavior is\n     * undefined. The order of the keys is undefined.\n     ",
    "links" : [ "java.util.Iterator#remove()" ]
  }, {
    "name" : "public Set<@NonNull String> keySet()",
    "returnType" : "Set<@NonNull String>",
    "comment" : "\n     * Returns the set of {@code String} names in this object. The returned set\n     * is a view of the keys in this object. {@link Set#remove(Object)} will remove\n     * the corresponding mapping from this object and set iterator behaviour\n     * is undefined if this object is modified after it is returned.\n     *\n     * See {@link #keys()}.\n     *\n     * @return set of keys in this object\n     *\n     * @hide\n     ",
    "links" : [ "#keys()", "java.util.Set#remove(Object)" ]
  }, {
    "name" : "public JSONArray names()",
    "returnType" : "JSONArray",
    "comment" : "\n     * Returns an array containing the string names in this object. This method\n     * returns null if this object contains no mappings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Encodes this object as a compact JSON string, such as:\n     * <pre>{\"query\":\"Pizza\",\"locations\":[94043,90210]}</pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString(int indentSpaces) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Encodes this object as a human readable JSON string for debugging, such\n     * as:\n     * <pre>\n     * {\n     *     \"query\": \"Pizza\",\n     *     \"locations\": [\n     *         94043,\n     *         90210\n     *     ]\n     * }</pre>\n     *\n     * @param indentSpaces the number of spaces to indent for each level of\n     *     nesting.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeTo(JSONStringer stringer) throws JSONException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String numberToString(@NonNull Number number) throws JSONException",
    "returnType" : "String",
    "comment" : "\n     * Encodes the number as a JSON string.\n     *\n     * @param number a finite value. May not be {@link Double#isNaN() NaNs} or\n     *     {@link Double#isInfinite() infinities}.\n     ",
    "links" : [ "#isNaN()", "#isInfinite()" ]
  }, {
    "name" : "public static String quote(@Nullable String data)",
    "returnType" : "String",
    "comment" : "\n     * Encodes {@code data} as a JSON string. This applies quotes and any\n     * necessary character escaping.\n     *\n     * @param data the string to encode. Null will be interpreted as an empty\n     *     string.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object wrap(@Nullable Object o)",
    "returnType" : "Object",
    "comment" : "\n     * Wraps the given object if necessary.\n     *\n     * <p>If the object is null or , returns {@link #NULL}.\n     * If the object is a {@code JSONArray} or {@code JSONObject}, no wrapping is necessary.\n     * If the object is {@code NULL}, no wrapping is necessary.\n     * If the object is an array or {@code Collection}, returns an equivalent {@code JSONArray}.\n     * If the object is a {@code Map}, returns an equivalent {@code JSONObject}.\n     * If the object is a primitive wrapper type or {@code String}, returns the object.\n     * Otherwise if the object is from a {@code java} package, returns the result of {@code toString}.\n     * If wrapping fails, returns null.\n     ",
    "links" : [ "#NULL" ]
  } ],
  "methodNames" : [ "public int length()", "public JSONObject put(@NonNull String name, boolean value) throws JSONException", "public JSONObject put(@NonNull String name, double value) throws JSONException", "public JSONObject put(@NonNull String name, int value) throws JSONException", "public JSONObject put(@NonNull String name, long value) throws JSONException", "public JSONObject put(@NonNull String name, @Nullable Object value) throws JSONException", "public JSONObject putOpt(@Nullable String name, @Nullable Object value) throws JSONException", "public JSONObject accumulate(@NonNull String name, @Nullable Object value) throws JSONException", "public JSONObject append(@NonNull String name, @Nullable Object value) throws JSONException", " String checkName(String name) throws JSONException", "public Object remove(@Nullable String name)", "public boolean isNull(@Nullable String name)", "public boolean has(@Nullable String name)", "public Object get(@NonNull String name) throws JSONException", "public Object opt(@Nullable String name)", "public boolean getBoolean(@NonNull String name) throws JSONException", "public boolean optBoolean(@Nullable String name)", "public boolean optBoolean(@Nullable String name, boolean fallback)", "public double getDouble(@NonNull String name) throws JSONException", "public double optDouble(@Nullable String name)", "public double optDouble(@Nullable String name, double fallback)", "public int getInt(@NonNull String name) throws JSONException", "public int optInt(@Nullable String name)", "public int optInt(@Nullable String name, int fallback)", "public long getLong(@NonNull String name) throws JSONException", "public long optLong(@Nullable String name)", "public long optLong(@Nullable String name, long fallback)", "public String getString(@NonNull String name) throws JSONException", "public String optString(@Nullable String name)", "public String optString(@Nullable String name, @NonNull String fallback)", "public JSONArray getJSONArray(@NonNull String name) throws JSONException", "public JSONArray optJSONArray(@Nullable String name)", "public JSONObject getJSONObject(@NonNull String name) throws JSONException", "public JSONObject optJSONObject(@Nullable String name)", "public JSONArray toJSONArray(@Nullable JSONArray names) throws JSONException", "public Iterator<@NonNull String> keys()", "public Set<@NonNull String> keySet()", "public JSONArray names()", "public String toString()", "public String toString(int indentSpaces) throws JSONException", " void writeTo(JSONStringer stringer) throws JSONException", "public static String numberToString(@NonNull Number number) throws JSONException", "public static String quote(@Nullable String data)", "public static Object wrap(@Nullable Object o)" ],
  "variableNames" : [ "NEGATIVE_ZERO", "NULL", "nameValuePairs" ]
}