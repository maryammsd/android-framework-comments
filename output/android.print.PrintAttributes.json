{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/print/PrintAttributes.java",
  "packageName" : "android.print",
  "className" : "PrintAttributes",
  "comment" : "\n * This class represents the attributes of a print job. These attributes\n * describe how the printed content should be laid out. For example, the\n * print attributes may state that the content should be laid out on a\n * letter size with 300 DPI (dots per inch) resolution, have a margin of\n * 10 mills (thousand of an inch) on all sides, and be black and white.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "COLOR_MODE_MONOCHROME",
    "type" : "int",
    "comment" : " Color mode: Monochrome color scheme, for example one color is used. ",
    "links" : [ ]
  }, {
    "name" : "COLOR_MODE_COLOR",
    "type" : "int",
    "comment" : " Color mode: Color color scheme, for example many colors are used. ",
    "links" : [ ]
  }, {
    "name" : "VALID_COLOR_MODES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_NONE",
    "type" : "int",
    "comment" : " Duplex mode: No duplexing. ",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_LONG_EDGE",
    "type" : "int",
    "comment" : " Duplex mode: Pages are turned sideways along the long edge - like a book. ",
    "links" : [ ]
  }, {
    "name" : "DUPLEX_MODE_SHORT_EDGE",
    "type" : "int",
    "comment" : " Duplex mode: Pages are turned upwards along the short edge - like a notpad. ",
    "links" : [ ]
  }, {
    "name" : "VALID_DUPLEX_MODES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMediaSize",
    "type" : "MediaSize",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResolution",
    "type" : "Resolution",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinMargins",
    "type" : "Margins",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDuplexMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PrintAttributes>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public MediaSize getMediaSize()",
    "returnType" : "MediaSize",
    "comment" : "\n     * Gets the media size.\n     *\n     * @return The media size or <code>null</code> if not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMediaSize(MediaSize mediaSize)",
    "returnType" : "void",
    "comment" : "\n     * Sets the media size.\n     *\n     * @param mediaSize The media size.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Resolution getResolution()",
    "returnType" : "Resolution",
    "comment" : "\n     * Gets the resolution.\n     *\n     * @return The resolution or <code>null</code> if not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResolution(Resolution resolution)",
    "returnType" : "void",
    "comment" : "\n     * Sets the resolution.\n     *\n     * @param resolution The resolution.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Margins getMinMargins()",
    "returnType" : "Margins",
    "comment" : "\n     * Gets the minimal margins. If the content does not fit\n     * these margins it will be clipped.\n     * <p>\n     * <strong>These margins are physically imposed by the printer and they\n     * are <em>not</em> rotated, i.e. they are the same for both portrait and\n     * landscape. For example, a printer may not be able to print in a stripe\n     * on both left and right sides of the page.\n     * </strong>\n     * </p>\n     *\n     * @return The margins or <code>null</code> if not set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinMargins(Margins margins)",
    "returnType" : "void",
    "comment" : "\n     * Sets the minimal margins. If the content does not fit\n     * these margins it will be clipped.\n     * <p>\n     * <strong>These margins are physically imposed by the printer and they\n     * are <em>not</em> rotated, i.e. they are the same for both portrait and\n     * landscape. For example, a printer may not be able to print in a stripe\n     * on both left and right sides of the page.\n     * </strong>\n     * </p>\n     *\n     * @param margins The margins.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getColorMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the color mode.\n     *\n     * @return The color mode or zero if not set.\n     *\n     * @see #COLOR_MODE_COLOR\n     * @see #COLOR_MODE_MONOCHROME\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorMode(int colorMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color mode.\n     *\n     * @param colorMode The color mode.\n     *\n     * @see #COLOR_MODE_MONOCHROME\n     * @see #COLOR_MODE_COLOR\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPortrait()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether this print attributes are in portrait orientation,\n     * which is the media size is in portrait and all orientation dependent\n     * attributes such as resolution and margins are properly adjusted.\n     *\n     * @return Whether this print attributes are in portrait.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDuplexMode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the duplex mode.\n     *\n     * @return The duplex mode or zero if not set.\n     *\n     * @see #DUPLEX_MODE_NONE\n     * @see #DUPLEX_MODE_LONG_EDGE\n     * @see #DUPLEX_MODE_SHORT_EDGE\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDuplexMode(int duplexMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the duplex mode.\n     *\n     * @param duplexMode The duplex mode.\n     *\n     * @see #DUPLEX_MODE_NONE\n     * @see #DUPLEX_MODE_LONG_EDGE\n     * @see #DUPLEX_MODE_SHORT_EDGE\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintAttributes asPortrait()",
    "returnType" : "PrintAttributes",
    "comment" : "\n     * Gets a new print attributes instance which is in portrait orientation,\n     * which is the media size is in portrait and all orientation dependent\n     * attributes such as resolution and margins are properly adjusted.\n     *\n     * @return New instance in portrait orientation if this one is in\n     * landscape, otherwise this instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public PrintAttributes asLandscape()",
    "returnType" : "PrintAttributes",
    "comment" : "\n     * Gets a new print attributes instance which is in landscape orientation,\n     * which is the media size is in landscape and all orientation dependent\n     * attributes such as resolution and margins are properly adjusted.\n     *\n     * @return New instance in landscape orientation if this one is in\n     * portrait, otherwise this instance.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(PrintAttributes other)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static String colorModeToString(int colorMode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String duplexModeToString(int duplexMode)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void enforceValidColorMode(int colorMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void enforceValidDuplexMode(int duplexMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public MediaSize getMediaSize()", "public void setMediaSize(MediaSize mediaSize)", "public Resolution getResolution()", "public void setResolution(Resolution resolution)", "public Margins getMinMargins()", "public void setMinMargins(Margins margins)", "public int getColorMode()", "public void setColorMode(int colorMode)", "public boolean isPortrait()", "public int getDuplexMode()", "public void setDuplexMode(int duplexMode)", "public PrintAttributes asPortrait()", "public PrintAttributes asLandscape()", "public void writeToParcel(Parcel parcel, int flags)", "public int describeContents()", "public int hashCode()", "public boolean equals(@Nullable Object obj)", "public String toString()", "public void clear()", "public void copyFrom(PrintAttributes other)", " static String colorModeToString(int colorMode)", " static String duplexModeToString(int duplexMode)", " static void enforceValidColorMode(int colorMode)", " static void enforceValidDuplexMode(int duplexMode)" ],
  "variableNames" : [ "COLOR_MODE_MONOCHROME", "COLOR_MODE_COLOR", "VALID_COLOR_MODES", "DUPLEX_MODE_NONE", "DUPLEX_MODE_LONG_EDGE", "DUPLEX_MODE_SHORT_EDGE", "VALID_DUPLEX_MODES", "mMediaSize", "mResolution", "mMinMargins", "mColorMode", "mDuplexMode", "CREATOR" ]
}