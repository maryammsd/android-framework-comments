{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/notification/ZenModeConfig.java",
  "packageName" : "android.service.notification",
  "className" : "ZenModeConfig",
  "comment" : "\n * Persisted configuration for zen mode.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "UPDATE_ORIGIN_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The {@link ZenModeConfig} is being updated because of an unknown reason.\n     ",
    "links" : [ "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_INIT",
    "type" : "int",
    "comment" : "\n     * The {@link ZenModeConfig} is being updated because of system initialization (i.e. load from\n     * storage, on device boot).\n     ",
    "links" : [ "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_INIT_USER",
    "type" : "int",
    "comment" : " The {@link ZenModeConfig} is being updated (replaced) because of a user switch or unlock. ",
    "links" : [ "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_USER",
    "type" : "int",
    "comment" : " The {@link ZenModeConfig} is being updated because of a user action, for example:\n     * <ul>\n     *     <li>{@link NotificationManager#setAutomaticZenRuleState} with a\n     *     {@link Condition#source} equal to {@link Condition#SOURCE_USER_ACTION}.</li>\n     *     <li>Adding, updating, or removing a rule from Settings.</li>\n     *     <li>Directly activating or deactivating/snoozing a rule through some UI affordance (e.g.\n     *     Quick Settings).</li>\n     * </ul>\n     ",
    "links" : [ "android.service.notification.Condition#source", "android.app.NotificationManager#setAutomaticZenRuleState", "android.service.notification.Condition#SOURCE_USER_ACTION", "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_APP",
    "type" : "int",
    "comment" : "\n     * The {@link ZenModeConfig} is being \"independently\" updated by an app, and not as a result of\n     * a user's action inside that app (for example, activating an {@link AutomaticZenRule} based on\n     * a previously set schedule).\n     ",
    "links" : [ "android.app.AutomaticZenRule", "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_SYSTEM_OR_SYSTEMUI",
    "type" : "int",
    "comment" : "\n     * The {@link ZenModeConfig} is being updated by the System or SystemUI. Note that this only\n     * includes cases where the call is coming from the System/SystemUI but the change is not due to\n     * a user action (e.g. automatically activating a schedule-based rule). If the change is a\n     * result of a user action (e.g. activating a rule by tapping on its QS tile) then\n     * {@link #UPDATE_ORIGIN_USER} is used instead.\n     ",
    "links" : [ "#UPDATE_ORIGIN_USER", "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "UPDATE_ORIGIN_RESTORE_BACKUP",
    "type" : "int",
    "comment" : "\n     * The {@link ZenModeConfig} is being updated (replaced) because the user's DND configuration\n     * is being restored from a backup.\n     ",
    "links" : [ "android.service.notification.ZenModeConfig" ]
  }, {
    "name" : "SOURCE_ANYONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_CONTACT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SOURCE_STAR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_SOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CALLS_SOURCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MANUAL_RULE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENTS_DEFAULT_RULE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVERY_NIGHT_DEFAULT_RULE_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_RULE_IDS",
    "type" : "List<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALL_DAYS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTE_BUCKETS",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECONDS_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTES_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAY_MINUTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZERO_VALUE_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_ALARMS",
    "type" : "boolean",
    "comment" : " fallback/upgrade values:",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_MEDIA",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_SYSTEM",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_CALLS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_MESSAGES",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_REMINDERS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_EVENTS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_REPEAT_CALLERS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_CONV",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_CONV_FROM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_PRIORITY_CHANNELS",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CHANNELS_BYPASSING_DND",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SUPPRESSED_VISUAL_EFFECTS",
    "type" : "int",
    "comment" : " Default setting here is 010011101 = 157",
    "links" : [ ]
  }, {
    "name" : "XML_VERSION_ZEN_UPGRADE",
    "type" : "int",
    "comment" : " ZenModeConfig XML versions distinguishing key changes.",
    "links" : [ ]
  }, {
    "name" : "XML_VERSION_MODES_API",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_VERSION",
    "type" : "int",
    "comment" : "       modes_api is inlined.",
    "links" : [ ]
  }, {
    "name" : "ZEN_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZEN_ATT_VERSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZEN_ATT_USER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_ALARMS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_MEDIA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_SYSTEM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_CALLS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_REPEAT_CALLERS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_MESSAGES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_FROM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_CALLS_FROM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_MESSAGES_FROM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_REMINDERS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_EVENTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_SCREEN_OFF",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_SCREEN_ON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_CONV",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_CONV_FROM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ATT_CHANNELS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "POLICY_USER_MODIFIED_FIELDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISALLOW_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISALLOW_ATT_VISUAL_EFFECTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_ATT_CHANNELS_BYPASSING_DND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_FULL_SCREEN_INTENT",
    "type" : "String",
    "comment" : " zen policy visual effects attributes",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_LIGHTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_PEEK",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_STATUS_BAR_ICONS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_BADGES",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_AMBIENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHOW_ATT_NOTIFICATION_LIST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_SUMMARY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_LINE1",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_LINE2",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_ICON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_STATE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_SOURCE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONDITION_ATT_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ZEN_POLICY_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MANUAL_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTOMATIC_DELETED_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_SNOOZING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_PKG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_COMPONENT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_CONFIG_ACTIVITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ZEN",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_CONDITION_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_CREATION_TIME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ENABLER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_MODIFIED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ALLOW_MANUAL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_USER_MODIFIED_FIELDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_ICON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_TRIGGER_DESC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RULE_ATT_DELETION_INSTANT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DISPLAY_GRAYSCALE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_SUPPRESS_AMBIENT_DISPLAY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DIM_WALLPAPER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_USE_NIGHT_MODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DISABLE_AUTO_BRIGHTNESS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DISABLE_TAP_TO_WAKE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DISABLE_TILT_TO_WAKE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_DISABLE_TOUCH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_MINIMIZE_RADIO_USAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_MAXIMIZE_DOZE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_EXTRAS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEVICE_EFFECT_USER_MODIFIED_FIELDS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEM_SEPARATOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEM_SEPARATOR_ESCAPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ITEM_SPLITTER_REGEX",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowAlarms",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowMedia",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowSystem",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowCalls",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowRepeatCallers",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowMessages",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowReminders",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowEvents",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowCallsFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowMessagesFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowConversations",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowConversationsFrom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "user",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "suppressedVisualEffects",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "areChannelsBypassingDnd",
    "type" : "boolean",
    "comment" : " TODO: b/310620812 - Rename to be more accurate when modes_api flag is inlined.",
    "links" : [ ]
  }, {
    "name" : "allowPriorityChannels",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "version",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "manualRule",
    "type" : "ZenRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "automaticRules",
    "type" : "ArrayMap<String, ZenRule>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "deletedRules",
    "type" : "ArrayMap<String, ZenRule>",
    "comment" : " unlike automaticRules (which is id -> rule).",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ZenModeConfig>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_AUTHORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COUNTDOWN_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IS_ALARM_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SCHEDULE_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_PATH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void readRulesFromParcel(ArrayMap<String, ZenRule> ruleMap, Parcel source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeRulesToParcel(ArrayMap<String, ZenRule> ruleMap, Parcel dest)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String rulesToString(ArrayMap<String, ZenRule> ruleList)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidManualRule(ZenRule rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidAutomaticRule(ZenRule rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean sameCondition(ZenRule rule)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] generateMinuteBuckets()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String sourceToString(int source)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String toDayList(int[] days)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] tryParseDayList(String dayList, String sep)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int tryParseInt(String value, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long tryParseLong(String value, long defValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Long tryParseLong(String value, Long defValue)",
    "returnType" : "Long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getCurrentXmlVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ZenModeConfig readXml(TypedXmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "ZenModeConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String deletedRuleKey(ZenRule rule)",
    "returnType" : "String",
    "comment" : " Generates the map key used for a {@link ZenRule} in {@link #deletedRules}. ",
    "links" : [ "#deletedRules", "android.app.AutomaticZenRule" ]
  }, {
    "name" : "public void writeXml(TypedXmlSerializer out, Integer version, boolean forBackup) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ZenRule readRuleXml(TypedXmlPullParser parser)",
    "returnType" : "ZenRule",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeRuleXml(ZenRule rule, TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Condition readConditionXml(TypedXmlPullParser parser)",
    "returnType" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeConditionXml(Condition c, TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ZenPolicy readZenPolicyXml(TypedXmlPullParser parser)",
    "returnType" : "ZenPolicy",
    "comment" : "\n     * Read the zen policy from xml\n     * Returns null if no zen policy exists\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void writeZenPolicyXml(ZenPolicy policy, TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes zen policy to xml\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void writeZenPolicyState(String attr, int val, TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ZenDeviceEffects readZenDeviceEffectsXml(TypedXmlPullParser parser)",
    "returnType" : "ZenDeviceEffects",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeZenDeviceEffectsXml(ZenDeviceEffects deviceEffects, TypedXmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeBooleanIfTrue(TypedXmlSerializer out, String att, boolean value) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeStringSet(TypedXmlSerializer out, String att, Set<String> values) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidHour(int val)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidMinute(int val)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidSource(int source)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Boolean unsafeBoolean(TypedXmlPullParser parser, String att)",
    "returnType" : "Boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean safeBoolean(TypedXmlPullParser parser, String att, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean safeBoolean(String val, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int safeInt(TypedXmlPullParser parser, String att, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static ComponentName safeComponentName(TypedXmlPullParser parser, String att)",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Uri safeUri(TypedXmlPullParser parser, String att)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long safeLong(TypedXmlPullParser parser, String att, long defValue)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Set<String> safeStringSet(TypedXmlPullParser parser, String att)",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ZenModeConfig copy()",
    "returnType" : "ZenModeConfig",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ZenPolicy toZenPolicy()",
    "returnType" : "ZenPolicy",
    "comment" : "\n     * Converts a ZenModeConfig to a ZenPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "public Policy toNotificationPolicy(ZenPolicy zenPolicy)",
    "returnType" : "Policy",
    "comment" : "\n     * Converts a zenPolicy to a notificationPolicy using this ZenModeConfig's values as its\n     * defaults for all unset values in zenPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPriorityCategoryEnabled(int categoryType, Policy policy)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isVisualEffectAllowed(int visualEffect, Policy policy)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Policy toNotificationPolicy()",
    "returnType" : "Policy",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ScheduleCalendar toScheduleCalendar(Uri conditionId)",
    "returnType" : "ScheduleCalendar",
    "comment" : "\n     * Creates scheduleCalendar from a condition id\n     * @param conditionId\n     * @return ScheduleCalendar with info populated with conditionId\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int sourceToPrioritySenders(int source, int def)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int normalizePrioritySenders(int prioritySenders, int def)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int normalizeConversationSenders(boolean allowed, int senders, int def)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyNotificationPolicy(Policy policy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Condition toTimeCondition(Context context, int minutesFromNow, int userHandle)",
    "returnType" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Condition toTimeCondition(Context context, int minutesFromNow, int userHandle, boolean shortVersion)",
    "returnType" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Condition toTimeCondition(Context context, long time, int minutes, int userHandle, boolean shortVersion)",
    "returnType" : "Condition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Condition toNextAlarmCondition(Context context, long alarm, int userHandle)",
    "returnType" : "Condition",
    "comment" : "\n     * Converts countdown to alarm parameters into a condition with user facing summary\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence getFormattedTime(Context context, long time, boolean isSameDay, int userHandle)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Creates readable time from time in milliseconds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isToday(long time)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether a time in milliseconds is today or not\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri toCountdownConditionId(long time, boolean alarm)",
    "returnType" : "Uri",
    "comment" : "\n     * Converts countdown condition parameters into a condition id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long tryParseCountdownConditionId(Uri conditionId)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidCountdownConditionId(Uri conditionId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this condition is a countdown condition.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidCountdownToAlarmConditionId(Uri conditionId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this condition is a countdown to an alarm.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Uri toScheduleConditionId(ScheduleInfo schedule)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidScheduleConditionId(Uri conditionId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidScheduleConditionId(Uri conditionId, boolean allowNever)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the conditionId is a valid ScheduleCondition.\n     * If allowNever is true, this will return true even if the ScheduleCondition never occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ScheduleInfo tryParseScheduleConditionId(Uri conditionId)",
    "returnType" : "ScheduleInfo",
    "comment" : "\n     * Returns the {@link ScheduleInfo} encoded in the condition id, or {@code null} if it could not\n     * be decoded.\n     ",
    "links" : [ "ScheduleInfo" ]
  }, {
    "name" : "public static ComponentName getScheduleConditionProvider()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Uri toEventConditionId(EventInfo event)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidEventConditionId(Uri conditionId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static EventInfo tryParseEventConditionId(Uri conditionId)",
    "returnType" : "EventInfo",
    "comment" : "\n     * Returns the {@link EventInfo} encoded in the condition id, or {@code null} if it could not be\n     * decoded.\n     ",
    "links" : [ "EventInfo" ]
  }, {
    "name" : "public static ComponentName getEventConditionProvider()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int[] tryParseHourAndMinute(String value)",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int tryParseZenMode(String value, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String newRuleId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getOwnerCaption(Context context, String owner)",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the app associated with owner\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getConditionSummary(Context context, ZenModeConfig config, int userHandle, boolean shortVersion)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getConditionLine(Context context, ZenModeConfig config, int userHandle, boolean useLine1, boolean shortVersion)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAllPriorityOnlyRingerSoundsMuted(NotificationManager.Policy policy)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether dnd behavior should mute all ringer-controlled sounds\n     * This includes notification, ringer and system sounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAllZenBehaviorSoundsMuted(NotificationManager.Policy policy)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether dnd behavior should mute all sounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isZenOverridingRinger(int zen, Policy consolidatedPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if DND is currently overriding the ringer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAllPriorityOnlyRingerSoundsMuted(ZenModeConfig config)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether dnd behavior should mute all ringer-controlled sounds\n     * This includes notification, ringer and system sounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean areAllZenBehaviorSoundsMuted(ZenModeConfig config)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether dnd mutes all sounds\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDescription(Context context, boolean zenOn, ZenModeConfig config, boolean describeForeverCondition)",
    "returnType" : "String",
    "comment" : "\n     * Returns a description of the current do not disturb settings from config.\n     * - If turned on manually and end time is known, returns end time.\n     * - If turned on manually and end time is on forever until turned off, return null if\n     * describeForeverCondition is false, else return String describing indefinite behavior\n     * - If turned on by an automatic rule, returns the automatic rule name.\n     * - If on due to an app, returns the app name.\n     * - If there's a combination of rules/apps that trigger, then shows the one that will\n     *  last the longest if applicable.\n     * @return null if DND is off or describeForeverCondition is false and\n     * DND is on forever (until turned off)\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parseAutomaticRuleEndTime(Context context, Uri id)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getNextAlarm(Context context)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static void readRulesFromParcel(ArrayMap<String, ZenRule> ruleMap, Parcel source)", "public void writeToParcel(Parcel dest, int flags)", "private static void writeRulesToParcel(ArrayMap<String, ZenRule> ruleMap, Parcel dest)", "public String toString()", "private static String rulesToString(ArrayMap<String, ZenRule> ruleList)", "public boolean isValid()", "private static boolean isValidManualRule(ZenRule rule)", "private static boolean isValidAutomaticRule(ZenRule rule)", "private static boolean sameCondition(ZenRule rule)", "private static int[] generateMinuteBuckets()", "public static String sourceToString(int source)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "private static String toDayList(int[] days)", "private static int[] tryParseDayList(String dayList, String sep)", "private static int tryParseInt(String value, int defValue)", "private static long tryParseLong(String value, long defValue)", "private static Long tryParseLong(String value, Long defValue)", "public static int getCurrentXmlVersion()", "public static ZenModeConfig readXml(TypedXmlPullParser parser) throws XmlPullParserException, IOException", "public static String deletedRuleKey(ZenRule rule)", "public void writeXml(TypedXmlSerializer out, Integer version, boolean forBackup) throws IOException", "public static ZenRule readRuleXml(TypedXmlPullParser parser)", "public static void writeRuleXml(ZenRule rule, TypedXmlSerializer out) throws IOException", "public static Condition readConditionXml(TypedXmlPullParser parser)", "public static void writeConditionXml(Condition c, TypedXmlSerializer out) throws IOException", "public static ZenPolicy readZenPolicyXml(TypedXmlPullParser parser)", "public static void writeZenPolicyXml(ZenPolicy policy, TypedXmlSerializer out) throws IOException", "private static void writeZenPolicyState(String attr, int val, TypedXmlSerializer out) throws IOException", "private static ZenDeviceEffects readZenDeviceEffectsXml(TypedXmlPullParser parser)", "private static void writeZenDeviceEffectsXml(ZenDeviceEffects deviceEffects, TypedXmlSerializer out) throws IOException", "private static void writeBooleanIfTrue(TypedXmlSerializer out, String att, boolean value) throws IOException", "private static void writeStringSet(TypedXmlSerializer out, String att, Set<String> values) throws IOException", "public static boolean isValidHour(int val)", "public static boolean isValidMinute(int val)", "private static boolean isValidSource(int source)", "private static Boolean unsafeBoolean(TypedXmlPullParser parser, String att)", "private static boolean safeBoolean(TypedXmlPullParser parser, String att, boolean defValue)", "private static boolean safeBoolean(String val, boolean defValue)", "private static int safeInt(TypedXmlPullParser parser, String att, int defValue)", "private static ComponentName safeComponentName(TypedXmlPullParser parser, String att)", "private static Uri safeUri(TypedXmlPullParser parser, String att)", "private static long safeLong(TypedXmlPullParser parser, String att, long defValue)", "private static Set<String> safeStringSet(TypedXmlPullParser parser, String att)", "public int describeContents()", "public ZenModeConfig copy()", "public ZenPolicy toZenPolicy()", "public Policy toNotificationPolicy(ZenPolicy zenPolicy)", "private boolean isPriorityCategoryEnabled(int categoryType, Policy policy)", "private boolean isVisualEffectAllowed(int visualEffect, Policy policy)", "public Policy toNotificationPolicy()", "public static ScheduleCalendar toScheduleCalendar(Uri conditionId)", "private static int sourceToPrioritySenders(int source, int def)", "private static int normalizePrioritySenders(int prioritySenders, int def)", "private static int normalizeConversationSenders(boolean allowed, int senders, int def)", "public void applyNotificationPolicy(Policy policy)", "public static Condition toTimeCondition(Context context, int minutesFromNow, int userHandle)", "public static Condition toTimeCondition(Context context, int minutesFromNow, int userHandle, boolean shortVersion)", "public static Condition toTimeCondition(Context context, long time, int minutes, int userHandle, boolean shortVersion)", "public static Condition toNextAlarmCondition(Context context, long alarm, int userHandle)", "public static CharSequence getFormattedTime(Context context, long time, boolean isSameDay, int userHandle)", "public static boolean isToday(long time)", "public static Uri toCountdownConditionId(long time, boolean alarm)", "public static long tryParseCountdownConditionId(Uri conditionId)", "public static boolean isValidCountdownConditionId(Uri conditionId)", "public static boolean isValidCountdownToAlarmConditionId(Uri conditionId)", "public static Uri toScheduleConditionId(ScheduleInfo schedule)", "public static boolean isValidScheduleConditionId(Uri conditionId)", "public static boolean isValidScheduleConditionId(Uri conditionId, boolean allowNever)", "public static ScheduleInfo tryParseScheduleConditionId(Uri conditionId)", "public static ComponentName getScheduleConditionProvider()", "public static Uri toEventConditionId(EventInfo event)", "public static boolean isValidEventConditionId(Uri conditionId)", "public static EventInfo tryParseEventConditionId(Uri conditionId)", "public static ComponentName getEventConditionProvider()", "private static int[] tryParseHourAndMinute(String value)", "private static int tryParseZenMode(String value, int defValue)", "public static String newRuleId()", "public static String getOwnerCaption(Context context, String owner)", "public static String getConditionSummary(Context context, ZenModeConfig config, int userHandle, boolean shortVersion)", "private static String getConditionLine(Context context, ZenModeConfig config, int userHandle, boolean useLine1, boolean shortVersion)", "public static boolean areAllPriorityOnlyRingerSoundsMuted(NotificationManager.Policy policy)", "public static boolean areAllZenBehaviorSoundsMuted(NotificationManager.Policy policy)", "public static boolean isZenOverridingRinger(int zen, Policy consolidatedPolicy)", "public static boolean areAllPriorityOnlyRingerSoundsMuted(ZenModeConfig config)", "public static boolean areAllZenBehaviorSoundsMuted(ZenModeConfig config)", "public static String getDescription(Context context, boolean zenOn, ZenModeConfig config, boolean describeForeverCondition)", "private static long parseAutomaticRuleEndTime(Context context, Uri id)", "private static long getNextAlarm(Context context)" ],
  "variableNames" : [ "TAG", "UPDATE_ORIGIN_UNKNOWN", "UPDATE_ORIGIN_INIT", "UPDATE_ORIGIN_INIT_USER", "UPDATE_ORIGIN_USER", "UPDATE_ORIGIN_APP", "UPDATE_ORIGIN_SYSTEM_OR_SYSTEMUI", "UPDATE_ORIGIN_RESTORE_BACKUP", "SOURCE_ANYONE", "SOURCE_CONTACT", "SOURCE_STAR", "MAX_SOURCE", "DEFAULT_SOURCE", "DEFAULT_CALLS_SOURCE", "MANUAL_RULE_ID", "EVENTS_DEFAULT_RULE_ID", "EVERY_NIGHT_DEFAULT_RULE_ID", "DEFAULT_RULE_IDS", "ALL_DAYS", "MINUTE_BUCKETS", "SECONDS_MS", "MINUTES_MS", "DAY_MINUTES", "ZERO_VALUE_MS", "DEFAULT_ALLOW_ALARMS", "DEFAULT_ALLOW_MEDIA", "DEFAULT_ALLOW_SYSTEM", "DEFAULT_ALLOW_CALLS", "DEFAULT_ALLOW_MESSAGES", "DEFAULT_ALLOW_REMINDERS", "DEFAULT_ALLOW_EVENTS", "DEFAULT_ALLOW_REPEAT_CALLERS", "DEFAULT_ALLOW_CONV", "DEFAULT_ALLOW_CONV_FROM", "DEFAULT_ALLOW_PRIORITY_CHANNELS", "DEFAULT_CHANNELS_BYPASSING_DND", "DEFAULT_SUPPRESSED_VISUAL_EFFECTS", "XML_VERSION_ZEN_UPGRADE", "XML_VERSION_MODES_API", "XML_VERSION", "ZEN_TAG", "ZEN_ATT_VERSION", "ZEN_ATT_USER", "ALLOW_TAG", "ALLOW_ATT_ALARMS", "ALLOW_ATT_MEDIA", "ALLOW_ATT_SYSTEM", "ALLOW_ATT_CALLS", "ALLOW_ATT_REPEAT_CALLERS", "ALLOW_ATT_MESSAGES", "ALLOW_ATT_FROM", "ALLOW_ATT_CALLS_FROM", "ALLOW_ATT_MESSAGES_FROM", "ALLOW_ATT_REMINDERS", "ALLOW_ATT_EVENTS", "ALLOW_ATT_SCREEN_OFF", "ALLOW_ATT_SCREEN_ON", "ALLOW_ATT_CONV", "ALLOW_ATT_CONV_FROM", "ALLOW_ATT_CHANNELS", "POLICY_USER_MODIFIED_FIELDS", "DISALLOW_TAG", "DISALLOW_ATT_VISUAL_EFFECTS", "STATE_TAG", "STATE_ATT_CHANNELS_BYPASSING_DND", "SHOW_ATT_FULL_SCREEN_INTENT", "SHOW_ATT_LIGHTS", "SHOW_ATT_PEEK", "SHOW_ATT_STATUS_BAR_ICONS", "SHOW_ATT_BADGES", "SHOW_ATT_AMBIENT", "SHOW_ATT_NOTIFICATION_LIST", "CONDITION_ATT_ID", "CONDITION_ATT_SUMMARY", "CONDITION_ATT_LINE1", "CONDITION_ATT_LINE2", "CONDITION_ATT_ICON", "CONDITION_ATT_STATE", "CONDITION_ATT_SOURCE", "CONDITION_ATT_FLAGS", "ZEN_POLICY_TAG", "MANUAL_TAG", "AUTOMATIC_TAG", "AUTOMATIC_DELETED_TAG", "RULE_ATT_ID", "RULE_ATT_ENABLED", "RULE_ATT_SNOOZING", "RULE_ATT_NAME", "RULE_ATT_PKG", "RULE_ATT_COMPONENT", "RULE_ATT_CONFIG_ACTIVITY", "RULE_ATT_ZEN", "RULE_ATT_CONDITION_ID", "RULE_ATT_CREATION_TIME", "RULE_ATT_ENABLER", "RULE_ATT_MODIFIED", "RULE_ATT_ALLOW_MANUAL", "RULE_ATT_TYPE", "RULE_ATT_USER_MODIFIED_FIELDS", "RULE_ATT_ICON", "RULE_ATT_TRIGGER_DESC", "RULE_ATT_DELETION_INSTANT", "DEVICE_EFFECT_DISPLAY_GRAYSCALE", "DEVICE_EFFECT_SUPPRESS_AMBIENT_DISPLAY", "DEVICE_EFFECT_DIM_WALLPAPER", "DEVICE_EFFECT_USE_NIGHT_MODE", "DEVICE_EFFECT_DISABLE_AUTO_BRIGHTNESS", "DEVICE_EFFECT_DISABLE_TAP_TO_WAKE", "DEVICE_EFFECT_DISABLE_TILT_TO_WAKE", "DEVICE_EFFECT_DISABLE_TOUCH", "DEVICE_EFFECT_MINIMIZE_RADIO_USAGE", "DEVICE_EFFECT_MAXIMIZE_DOZE", "DEVICE_EFFECT_EXTRAS", "DEVICE_EFFECT_USER_MODIFIED_FIELDS", "ITEM_SEPARATOR", "ITEM_SEPARATOR_ESCAPE", "ITEM_SPLITTER_REGEX", "allowAlarms", "allowMedia", "allowSystem", "allowCalls", "allowRepeatCallers", "allowMessages", "allowReminders", "allowEvents", "allowCallsFrom", "allowMessagesFrom", "allowConversations", "allowConversationsFrom", "user", "suppressedVisualEffects", "areChannelsBypassingDnd", "allowPriorityChannels", "version", "manualRule", "automaticRules", "deletedRules", "CREATOR", "SYSTEM_AUTHORITY", "COUNTDOWN_PATH", "IS_ALARM_PATH", "SCHEDULE_PATH", "EVENT_PATH" ]
}