{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/BatteryStats.java",
  "packageName" : "android.os",
  "className" : "Timer",
  "comment" : "\n     * State for keeping track of timing information.\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int getCountLocked(int which)",
    "returnType" : "int",
    "comment" : "\n         * Returns the count associated with this Timer for the\n         * selected type of statistics.\n         *\n         * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getTotalTimeLocked(long elapsedRealtimeUs, int which)",
    "returnType" : "long",
    "comment" : "\n         * Returns the total time in microseconds associated with this Timer for the\n         * selected type of statistics.\n         *\n         * @param elapsedRealtimeUs current elapsed realtime of system in microseconds\n         * @param which one of STATS_SINCE_CHARGED, STATS_SINCE_UNPLUGGED, or STATS_CURRENT\n         * @return a time in microseconds\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract long getTimeSinceMarkLocked(long elapsedRealtimeUs)",
    "returnType" : "long",
    "comment" : "\n         * Returns the total time in microseconds associated with this Timer since the\n         * 'mark' was last set.\n         *\n         * @param elapsedRealtimeUs current elapsed realtime of system in microseconds\n         * @return a time in microseconds\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getMaxDurationMsLocked(long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n         * Returns the max duration if it is being tracked.\n         * Not all Timer subclasses track the max, total, and current durations.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getCurrentDurationMsLocked(long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n         * Returns the current time the timer has been active, if it is being tracked.\n         * Not all Timer subclasses track the max, total, and current durations.\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDurationMsLocked(long elapsedRealtimeMs)",
    "returnType" : "long",
    "comment" : "\n         * Returns the total time the timer has been active, if it is being tracked.\n         *\n         * Returns the total cumulative duration (i.e. sum of past durations) that this timer has\n         * been on since reset.\n         * This may differ from getTotalTimeLocked(elapsedRealtimeUs, STATS_SINCE_CHARGED)/1000 since,\n         * depending on the Timer, getTotalTimeLocked may represent the total 'blamed' or 'pooled'\n         * time, rather than the actual time. By contrast, getTotalDurationMsLocked always gives\n         * the actual total time.\n         * Not all Timer subclasses track the max, total, and current durations.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Timer getSubTimer()",
    "returnType" : "Timer",
    "comment" : "\n         * Returns the secondary Timer held by the Timer, if one exists. This secondary timer may be\n         * used, for example, for tracking background usage. Secondary timers are never pooled.\n         *\n         * Not all Timer subclasses have a secondary timer; those that don't return null.\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunningLocked()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns whether the timer is currently running.  Some types of timers\n         * (e.g. BatchTimers) don't know whether the event is currently active,\n         * and report false.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract void logState(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n         * Temporary for debugging.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int getCountLocked(int which)", "public abstract long getTotalTimeLocked(long elapsedRealtimeUs, int which)", "public abstract long getTimeSinceMarkLocked(long elapsedRealtimeUs)", "public long getMaxDurationMsLocked(long elapsedRealtimeMs)", "public long getCurrentDurationMsLocked(long elapsedRealtimeMs)", "public long getTotalDurationMsLocked(long elapsedRealtimeMs)", "public Timer getSubTimer()", "public boolean isRunningLocked()", "public abstract void logState(Printer pw, String prefix)" ],
  "variableNames" : [ ]
}