{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/legacy/CameraDeviceState.java",
  "packageName" : "android.hardware.camera2.legacy",
  "className" : "CameraDeviceState",
  "comment" : "\n * Emulates a the state of a single Camera2 device.\n *\n * <p>\n * This class acts as the state machine for a camera device.  Valid state transitions are given\n * in the table below:\n * </p>\n *\n * <ul>\n *      <li>{@code UNCONFIGURED -> CONFIGURING}</li>\n *      <li>{@code CONFIGURING -> IDLE}</li>\n *      <li>{@code IDLE -> CONFIGURING}</li>\n *      <li>{@code IDLE -> CAPTURING}</li>\n *      <li>{@code IDLE -> IDLE}</li>\n *      <li>{@code CAPTURING -> IDLE}</li>\n *      <li>{@code ANY -> ERROR}</li>\n * </ul>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_ERROR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_UNCONFIGURED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_CONFIGURING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_IDLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATE_CAPTURING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sStateNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentError",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentRequest",
    "type" : "RequestHolder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentListener",
    "type" : "CameraDeviceStateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NO_CAPTURE_ERROR",
    "type" : "int",
    "comment" : "\n     * Error code used by {@link #setCaptureStart} and {@link #setCaptureResult} to indicate that no\n     * error has occurred.\n     ",
    "links" : [ "#setCaptureStart", "#setCaptureResult" ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void setError(int error)",
    "returnType" : "void",
    "comment" : "\n     * Transition to the {@code ERROR} state.\n     *\n     * <p>\n     * The device cannot exit the {@code ERROR} state.  If the device was not already in the\n     * {@code ERROR} state, {@link CameraDeviceStateListener#onError(int, RequestHolder)} will be\n     * called.\n     * </p>\n     *\n     * @param error the error to set.  Should be one of the error codes defined in\n     *      {@link CameraDeviceImpl.CameraDeviceCallbacks}.\n     ",
    "links" : [ "CameraDeviceStateListener#onError", "CameraDeviceImpl.CameraDeviceCallbacks" ]
  }, {
    "name" : "public synchronized boolean setConfiguring()",
    "returnType" : "boolean",
    "comment" : "\n     * Transition to the {@code CONFIGURING} state, or {@code ERROR} if in an invalid state.\n     *\n     * <p>\n     * If the device was not already in the {@code CONFIGURING} state,\n     * {@link CameraDeviceStateListener#onConfiguring()} will be called.\n     * </p>\n     *\n     * @return {@code false} if an error has occurred.\n     ",
    "links" : [ "CameraDeviceStateListener#onConfiguring" ]
  }, {
    "name" : "public synchronized boolean setIdle()",
    "returnType" : "boolean",
    "comment" : "\n     * Transition to the {@code IDLE} state, or {@code ERROR} if in an invalid state.\n     *\n     * <p>\n     * If the device was not already in the {@code IDLE} state,\n     * {@link CameraDeviceStateListener#onIdle()} will be called.\n     * </p>\n     *\n     * @return {@code false} if an error has occurred.\n     ",
    "links" : [ "CameraDeviceStateListener#onIdle" ]
  }, {
    "name" : "public synchronized boolean setCaptureStart(final RequestHolder request, long timestamp, int captureError)",
    "returnType" : "boolean",
    "comment" : "\n     * Transition to the {@code CAPTURING} state, or {@code ERROR} if in an invalid state.\n     *\n     * <p>\n     * If the device was not already in the {@code CAPTURING} state,\n     * {@link CameraDeviceStateListener#onCaptureStarted(RequestHolder)} will be called.\n     * </p>\n     *\n     * @param request A {@link RequestHolder} containing the request for the current capture.\n     * @param timestamp The timestamp of the capture start in nanoseconds.\n     * @param captureError Report a recoverable error for a single request using a valid\n     *                     error code for {@code ICameraDeviceCallbacks}, or\n     *                     {@link #NO_CAPTURE_ERROR}\n     * @return {@code false} if an error has occurred.\n     ",
    "links" : [ "CameraDeviceStateListener#onCaptureStarted", "RequestHolder", "#NO_CAPTURE_ERROR" ]
  }, {
    "name" : "public synchronized boolean setCaptureResult(final RequestHolder request, final CameraMetadataNative result, final int captureError, final Object captureErrorArg)",
    "returnType" : "boolean",
    "comment" : "\n     * Set the result for a capture.\n     *\n     * <p>\n     * If the device was in the {@code CAPTURING} state,\n     * {@link CameraDeviceStateListener#onCaptureResult(CameraMetadataNative, RequestHolder)} will\n     * be called with the given result, otherwise this will result in the device transitioning to\n     * the {@code ERROR} state,\n     * </p>\n     *\n     * @param request The {@link RequestHolder} request that created this result.\n     * @param result The {@link CameraMetadataNative} result to set.\n     * @param captureError Report a recoverable error for a single buffer or result using a valid\n     *                     error code for {@code ICameraDeviceCallbacks}, or\n     *                     {@link #NO_CAPTURE_ERROR}.\n     * @param captureErrorArg An argument for some error captureError codes.\n     * @return {@code false} if an error has occurred.\n     ",
    "links" : [ "CameraDeviceStateListener#onCaptureResult", "RequestHolder", "CameraMetadataNative", "#NO_CAPTURE_ERROR" ]
  }, {
    "name" : "public synchronized boolean setCaptureResult(final RequestHolder request, final CameraMetadataNative result)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setRepeatingRequestError(final long lastFrameNumber, final int repeatingRequestId)",
    "returnType" : "void",
    "comment" : "\n     * Set repeating request error.\n     *\n     * <p>Repeating request has been stopped due to an error such as abandoned output surfaces.</p>\n     *\n     * @param lastFrameNumber Frame number of the last repeating request before it is stopped.\n     * @param repeatingRequestId The ID of the repeating request being stopped\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setRequestQueueEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Indicate that request queue (non-repeating) becomes empty.\n     *\n     * <p> Send notification that all non-repeating requests have been sent to camera device. </p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void setCameraDeviceCallbacks(Handler handler, CameraDeviceStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set the listener for state transition callbacks.\n     *\n     * @param handler handler on which to call the callbacks.\n     * @param listener the {@link CameraDeviceStateListener} callbacks to call.\n     ",
    "links" : [ "CameraDeviceStateListener" ]
  }, {
    "name" : "private void doStateTransition(int newState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void doStateTransition(int newState, final long timestamp, final int error)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "STATE_ERROR", "STATE_UNCONFIGURED", "STATE_CONFIGURING", "STATE_IDLE", "STATE_CAPTURING", "sStateNames", "mCurrentState", "mCurrentError", "mCurrentRequest", "mCurrentHandler", "mCurrentListener", "NO_CAPTURE_ERROR" ],
  "methodNames" : [ "public synchronized void setError(int error)", "public synchronized boolean setConfiguring()", "public synchronized boolean setIdle()", "public synchronized boolean setCaptureStart(final RequestHolder request, long timestamp, int captureError)", "public synchronized boolean setCaptureResult(final RequestHolder request, final CameraMetadataNative result, final int captureError, final Object captureErrorArg)", "public synchronized boolean setCaptureResult(final RequestHolder request, final CameraMetadataNative result)", "public synchronized void setRepeatingRequestError(final long lastFrameNumber, final int repeatingRequestId)", "public synchronized void setRequestQueueEmpty()", "public synchronized void setCameraDeviceCallbacks(Handler handler, CameraDeviceStateListener listener)", "private void doStateTransition(int newState)", "private void doStateTransition(int newState, final long timestamp, final int error)" ]
}