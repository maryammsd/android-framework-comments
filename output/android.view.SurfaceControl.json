{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/SurfaceControl.java",
  "packageName" : "android.view",
  "className" : "SurfaceControl",
  "comment" : "\n * Handle to an on-screen Surface managed by the system compositor. The SurfaceControl is\n * a combination of a buffer source, and metadata about how to display the buffers.\n * By constructing a {@link Surface} from this SurfaceControl you can submit buffers to be\n * composited. Using {@link SurfaceControl.Transaction} you can manipulate various\n * properties of how the buffer will be displayed on-screen. SurfaceControl's are\n * arranged into a scene-graph like hierarchy, and as such any SurfaceControl may have\n * a parent. Geometric properties like transform, crop, and Z-ordering will be inherited\n * from the parent, as if the child were content in the parents buffer stream.\n ",
  "links" : [ "android.view.Surface", "SurfaceControl.Transaction" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BUFFER_TRANSFORM_IDENTITY",
    "type" : "int",
    "comment" : "\n     * Identity transform.\n     *\n     * These transforms that can be applied to buffers as they are displayed to a window.\n     * @see HardwareBuffer\n     *\n     * Supported transforms are any combination of horizontal mirror, vertical mirror, and\n     * clock-wise 90 degree rotation, in that order. Rotations of 180 and 270 degrees are\n     * made up of those basic transforms.\n     ",
    "links" : [ ]
  }, {
    "name" : "BUFFER_TRANSFORM_MIRROR_HORIZONTAL",
    "type" : "int",
    "comment" : "\n     * Mirror horizontally. Can be combined with {@link #BUFFER_TRANSFORM_MIRROR_VERTICAL}\n     * and {@link #BUFFER_TRANSFORM_ROTATE_90}.\n     ",
    "links" : [ "#BUFFER_TRANSFORM_ROTATE_90", "#BUFFER_TRANSFORM_MIRROR_VERTICAL" ]
  }, {
    "name" : "BUFFER_TRANSFORM_MIRROR_VERTICAL",
    "type" : "int",
    "comment" : "\n     * Mirror vertically. Can be combined with {@link #BUFFER_TRANSFORM_MIRROR_HORIZONTAL}\n     * and {@link #BUFFER_TRANSFORM_ROTATE_90}.\n     ",
    "links" : [ "#BUFFER_TRANSFORM_ROTATE_90", "#BUFFER_TRANSFORM_MIRROR_HORIZONTAL" ]
  }, {
    "name" : "BUFFER_TRANSFORM_ROTATE_90",
    "type" : "int",
    "comment" : "\n     * Rotate 90 degrees clock-wise. Can be combined with {@link\n     * #BUFFER_TRANSFORM_MIRROR_HORIZONTAL} and {@link #BUFFER_TRANSFORM_MIRROR_VERTICAL}.\n     ",
    "links" : [ "#BUFFER_TRANSFORM_MIRROR_VERTICAL", "#BUFFER_TRANSFORM_MIRROR_HORIZONTAL" ]
  }, {
    "name" : "BUFFER_TRANSFORM_ROTATE_180",
    "type" : "int",
    "comment" : "\n     * Rotate 180 degrees clock-wise. Cannot be combined with other transforms.\n     ",
    "links" : [ ]
  }, {
    "name" : "BUFFER_TRANSFORM_ROTATE_270",
    "type" : "int",
    "comment" : "\n     * Rotate 270 degrees clock-wise. Cannot be combined with other transforms.\n     ",
    "links" : [ ]
  }, {
    "name" : "mReparentListeners",
    "type" : "ArrayList<OnReparentListener>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallsite",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeObject",
    "type" : "long",
    "comment" : "\n     * Note: do not rename, this field is used by native code.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mNativeHandle",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChoreographerLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChoreographer",
    "type" : "Choreographer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " TODO: Move width/height to native and fix locking through out.",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTrustedPresentationCallback",
    "type" : "TrustedPresentationCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalOwnerView",
    "type" : "WeakReference<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReleaseStack",
    "type" : "Throwable",
    "comment" : " sDebugUsageAfterRelease) is enabled",
    "links" : [ ]
  }, {
    "name" : "sDebugUsageAfterRelease",
    "type" : "boolean",
    "comment" : " be dumped as additional context",
    "links" : [ ]
  }, {
    "name" : "sRegistry",
    "type" : "NativeAllocationRegistry",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreeNativeResources",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HIDDEN",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Surface is created hidden\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SKIP_SCREENSHOT",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Skip this layer and its children when taking a screenshot. This\n     * also includes mirroring and screen recording, so the layers with flag SKIP_SCREENSHOT\n     * will not be included on non primary displays.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SECURE",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Special measures will be taken to disallow the surface's content to\n     * be copied. In particular, screenshots and secondary, non-secure displays will render black\n     * content instead of the surface content.\n     *\n     * @see com.android.server.display.DisplayControl#createDisplay(String, boolean)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENABLE_BACKPRESSURE",
    "type" : "int",
    "comment" : "\n     * Queue up BufferStateLayer buffers instead of dropping the oldest buffer when this flag is\n     * set. This blocks the client until all the buffers have been presented. If the buffers\n     * have presentation timestamps, then we may drop buffers.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_DECORATION",
    "type" : "int",
    "comment" : "\n     * Buffers from this SurfaceControl should be considered display decorations.\n     *\n     * If the hardware has optimizations for display decorations (e.g. rounded corners, camera\n     * cutouts, etc), it should use them for this layer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "IGNORE_DESTINATION_FRAME",
    "type" : "int",
    "comment" : "\n     * Ignore any destination frame set on the layer. This is used when the buffer scaling mode\n     * is freeze and the destination frame is applied asynchronously with the buffer submission.\n     * This is needed to maintain compatibility for SurfaceView scaling behavior.\n     * See SurfaceView scaling behavior for more details.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LAYER_IS_REFRESH_RATE_INDICATOR",
    "type" : "int",
    "comment" : "\n     * Special casing for layer that is a refresh rate indicator\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CAN_OCCLUDE_PRESENTATION",
    "type" : "int",
    "comment" : "\n     * Sets a property on this layer indicating that its visible region should be considered when\n     * computing TrustedPresentation Thresholds\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NON_PREMULTIPLIED",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a surface where color components are interpreted\n     * as \"non pre-multiplied\" by their alpha channel. Of course this flag is\n     * meaningless for surfaces without an alpha channel. By default\n     * surfaces are pre-multiplied, which means that each color component is\n     * already multiplied by its alpha value. In this case the blending\n     * equation used is:\n     * <p>\n     *    <code>DEST = SRC + DEST * (1-SRC_ALPHA)</code>\n     * <p>\n     * By contrast, non pre-multiplied surfaces use the following equation:\n     * <p>\n     *    <code>DEST = SRC * SRC_ALPHA * DEST * (1-SRC_ALPHA)</code>\n     * <p>\n     * pre-multiplied surfaces must always be used if transparent pixels are\n     * composited on top of each-other into the surface. A pre-multiplied\n     * surface can never lower the value of the alpha component of a given\n     * pixel.\n     * <p>\n     * In some rare situations, a non pre-multiplied surface is preferable.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "OPAQUE",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Indicates that the surface must be considered opaque,\n     * even if its pixel format contains an alpha channel. This can be useful if an\n     * application needs full RGBA 8888 support for instance but will\n     * still draw every pixel opaque.\n     * <p>\n     * This flag is ignored if setAlpha() is used to make the surface non-opaque.\n     * Combined effects are (assuming a buffer format with an alpha channel):\n     * <ul>\n     * <li>OPAQUE + alpha(1.0) == opaque composition\n     * <li>OPAQUE + alpha(0.x) == blended composition\n     * <li>!OPAQUE + alpha(1.0) == blended composition\n     * <li>!OPAQUE + alpha(0.x) == blended composition\n     * </ul>\n     * If the underlying buffer lacks an alpha channel, the OPAQUE flag is effectively\n     * set automatically.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTECTED_APP",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Application requires a hardware-protected path to an\n     * external display sink. If a hardware-protected path is not available,\n     * then this surface will not be displayed on the external sink.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CURSOR_WINDOW",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Window represents a cursor glyph.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_COLOR_FILL",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Indicates the effect layer will not have a color fill on\n     * creation.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a normal surface.\n     * This is the default.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_EFFECT",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a effect surface which\n     * represents a solid color and or shadows.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_CONTAINER",
    "type" : "int",
    "comment" : "\n     * Surface creation flag: Creates a container surface.\n     * This surface will have no buffers and will only be used\n     * as a container for other surfaces, or for its InputInfo.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_BLAST",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FX_SURFACE_MASK",
    "type" : "int",
    "comment" : "\n     * Mask used for FX values above.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SURFACE_HIDDEN",
    "type" : "int",
    "comment" : "\n     * Surface flag: Hide the surface.\n     * Equivalent to calling hide().\n     * Updates the value set during Surface creation (see {@link #HIDDEN}).\n     ",
    "links" : [ "#HIDDEN" ]
  }, {
    "name" : "SURFACE_OPAQUE",
    "type" : "int",
    "comment" : "\n     * Surface flag: composite without blending when possible.\n     * Updates the value set during Surface creation (see {@link #OPAQUE}).\n     ",
    "links" : [ "#OPAQUE" ]
  }, {
    "name" : "DISPLAY_RECEIVES_INPUT",
    "type" : "int",
    "comment" : "\n     * DisplayDevice flag: This display's transform is sent to inputflinger and used for input\n     * dispatch. This flag is used to disambiguate displays which share a layerstack.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "POWER_MODE_OFF",
    "type" : "int",
    "comment" : "\n     * Display power mode off: used while blanking the screen.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_DOZE",
    "type" : "int",
    "comment" : "\n     * Display power mode doze: used while putting the screen into low power mode.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Display power mode normal: used while unblanking the screen.\n     * Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_DOZE_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Display power mode doze: used while putting the screen into a suspended\n     * low power mode.  Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "POWER_MODE_ON_SUSPEND",
    "type" : "int",
    "comment" : "\n     * Display power mode on: used while putting the screen into a suspended\n     * full power mode.  Use only with {@link SurfaceControl#setDisplayPowerMode}.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl#setDisplayPowerMode" ]
  }, {
    "name" : "CACHING_DISABLED",
    "type" : "int",
    "comment" : "\n     * Hint that this SurfaceControl should not participate in layer caching within SurfaceFlinger.\n     *\n     * A system layer may request that a layer does not participate in caching when there are known\n     * quality limitations when caching via the compositor's GPU path.\n     * Use only with {@link SurfaceControl.Transaction#setCachingHint}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl.Transaction#setCachingHint" ]
  }, {
    "name" : "CACHING_ENABLED",
    "type" : "int",
    "comment" : "\n     * Hint that this SurfaceControl should participate in layer caching within SurfaceFlinger.\n     *\n     * Use only with {@link SurfaceControl.Transaction#setCachingHint}.\n     * @hide\n     ",
    "links" : [ "SurfaceControl.Transaction#setCachingHint" ]
  }, {
    "name" : "METADATA_OWNER_UID",
    "type" : "int",
    "comment" : "\n     * owner UID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_WINDOW_TYPE",
    "type" : "int",
    "comment" : "\n     * Window type as per {@link WindowManager.LayoutParams}.\n     * @hide\n     ",
    "links" : [ "WindowManager.LayoutParams" ]
  }, {
    "name" : "METADATA_TASK_ID",
    "type" : "int",
    "comment" : "\n     * Task id to allow association between surfaces and task.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_MOUSE_CURSOR",
    "type" : "int",
    "comment" : "\n     * The style of mouse cursor and hotspot.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_ACCESSIBILITY_ID",
    "type" : "int",
    "comment" : "\n     * Accessibility ID to allow association between surfaces and accessibility tree.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_OWNER_PID",
    "type" : "int",
    "comment" : "\n     * owner PID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "METADATA_GAME_MODE",
    "type" : "int",
    "comment" : "\n     * game mode for the layer - used for metrics\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FRAME_RATE_SELECTION_STRATEGY_PROPAGATE",
    "type" : "int",
    "comment" : "\n     * Default value. The layer uses its own frame rate specifications, assuming it has any\n     * specifications, instead of its parent's. If it does not have its own frame rate\n     * specifications, it will try to use its parent's. It will propagate its specifications to any\n     * descendants that do not have their own.\n     *\n     * However, {@link #FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN} on an ancestor layer\n     * supersedes this behavior, meaning that this layer will inherit frame rate specifications\n     * regardless of whether it has its own.\n     * @hide\n     ",
    "links" : [ "#FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN" ]
  }, {
    "name" : "FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN",
    "type" : "int",
    "comment" : "\n     * The layer's frame rate specifications will propagate to and override those of its descendant\n     * layers.\n     *\n     * The layer itself has the {@link #FRAME_RATE_SELECTION_STRATEGY_PROPAGATE} behavior.\n     * Thus, ancestor layer that also has the strategy\n     * {@link #FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN} will override this layer's\n     * frame rate specifications.\n     * @hide\n     ",
    "links" : [ "#FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN", "#FRAME_RATE_SELECTION_STRATEGY_PROPAGATE" ]
  }, {
    "name" : "FRAME_RATE_SELECTION_STRATEGY_SELF",
    "type" : "int",
    "comment" : "\n     * The layer's frame rate specifications will not propagate to its descendant\n     * layers, even if the descendant layer has no frame rate specifications.\n     * However, {@link #FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN} on an ancestor\n     * layer supersedes this behavior.\n     * @hide\n     ",
    "links" : [ "#FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SurfaceControl>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native long nativeCreate(SurfaceSession session, String name, int w, int h, int format, int flags, long parentObject, Parcel metadata) throws OutOfResourcesException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCopyFromSurfaceControl(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteToParcel(long nativeObject, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNativeSurfaceControlFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDisconnect(long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUpdateDefaultBufferSize(long nativeObject, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeMirrorSurface(long mirrorOfObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateTransaction()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetNativeTransactionFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeApplyTransaction(long transactionObj, boolean sync, boolean oneWay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeMergeTransaction(long transactionObj, long otherTransactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClearTransaction(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAnimationTransaction(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEarlyWakeupStart(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetEarlyWakeupEnd(long transactionObj)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetTransactionId(long transactionObj)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetLayer(long transactionObj, long nativeObject, int zorder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetRelativeLayer(long transactionObj, long nativeObject, long relativeToObject, int zorder)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetPosition(long transactionObj, long nativeObject, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetScale(long transactionObj, long nativeObject, float x, float y)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTransparentRegionHint(long transactionObj, long nativeObject, Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAlpha(long transactionObj, long nativeObject, float alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetMatrix(long transactionObj, long nativeObject, float dsdx, float dtdx, float dtdy, float dsdy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColorTransform(long transactionObj, long nativeObject, float[] matrix, float[] translation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColorSpaceAgnostic(long transactionObj, long nativeObject, boolean agnostic)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGeometry(long transactionObj, long nativeObject, Rect sourceCrop, Rect dest, long orientation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetColor(long transactionObj, long nativeObject, float[] color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFlags(long transactionObj, long nativeObject, int flags, int mask)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRateSelectionPriority(long transactionObj, long nativeObject, int priority)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetWindowCrop(long transactionObj, long nativeObject, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCornerRadius(long transactionObj, long nativeObject, float cornerRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBackgroundBlurRadius(long transactionObj, long nativeObject, int blurRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetLayerStack(long transactionObj, long nativeObject, int layerStack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBlurRegions(long transactionObj, long nativeObj, float[][] regions, int length)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetStretchEffect(long transactionObj, long nativeObj, float width, float height, float vecX, float vecY, float maxStretchAmountX, float maxStretchAmountY, float childRelativeLeft, float childRelativeTop, float childRelativeRight, float childRelativeBottom)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTrustedOverlay(long transactionObj, long nativeObject, boolean isTrustedOverlay)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDropInputMode(long transactionObj, long nativeObject, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCanOccludePresentation(long transactionObj, long nativeObject, boolean canOccludePresentation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSurfaceFlushJankData(long nativeSurfaceObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeClearContentFrameStats(long nativeObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetContentFrameStats(long nativeObject, WindowContentFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeClearAnimationFrameStats()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetAnimationFrameStats(WindowAnimationFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplaySurface(long transactionObj, IBinder displayToken, long nativeSurfaceObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayLayerStack(long transactionObj, IBinder displayToken, int layerStack)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayFlags(long transactionObj, IBinder displayToken, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayProjection(long transactionObj, IBinder displayToken, int orientation, int l, int t, int r, int b, int L, int T, int R, int B)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplaySize(long transactionObj, IBinder displayToken, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native StaticDisplayInfo nativeGetStaticDisplayInfo(long displayId)",
    "returnType" : "StaticDisplayInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DynamicDisplayInfo nativeGetDynamicDisplayInfo(long displayId)",
    "returnType" : "DynamicDisplayInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(IBinder displayToken)",
    "returnType" : "DisplayedContentSamplingAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayedContentSample nativeGetDisplayedContentSample(IBinder displayToken, long numFrames, long timestamp)",
    "returnType" : "DisplayedContentSample",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDesiredDisplayModeSpecs(IBinder displayToken, DesiredDisplayModeSpecs desiredDisplayModeSpecs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DesiredDisplayModeSpecs nativeGetDesiredDisplayModeSpecs(IBinder displayToken)",
    "returnType" : "DesiredDisplayModeSpecs",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayPrimaries nativeGetDisplayNativePrimaries(IBinder displayToken)",
    "returnType" : "DisplayPrimaries",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int[] nativeGetCompositionDataspaces()",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native OverlayProperties nativeGetOverlaySupport()",
    "returnType" : "OverlayProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetActiveColorMode(IBinder displayToken, int colorMode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetBootDisplayModeSupport()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBootDisplayMode(IBinder displayToken, int displayMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClearBootDisplayMode(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetAutoLowLatencyMode(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGameContentType(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDisplayPowerMode(IBinder displayToken, int mode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeReparent(long transactionObj, long nativeObject, long newParentNativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBuffer(long transactionObj, long nativeObject, HardwareBuffer buffer, long fencePtr, Consumer<SyncFence> releaseCallback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeUnsetBuffer(long transactionObj, long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetBufferTransform(long transactionObj, long nativeObject, int transform)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDataSpace(long transactionObj, long nativeObject, @DataSpace.NamedDataSpace int dataSpace)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetExtendedRangeBrightness(long transactionObj, long nativeObject, float currentBufferRatio, float desiredRatio)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDesiredHdrHeadroom(long transactionObj, long nativeObject, float desiredRatio)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCachingHint(long transactionObj, long nativeObject, int cachingHint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDamageRegion(long transactionObj, long nativeObject, Region region)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDimmingEnabled(long transactionObj, long nativeObject, boolean dimmingEnabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetInputWindowInfo(long transactionObj, long nativeObject, InputWindowHandle handle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetProtectedContentSupport()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetMetadata(long transactionObj, long nativeObject, int key, Parcel data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddWindowInfosReportedListener(long transactionObj, Runnable listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetDisplayBrightnessSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeSetDisplayBrightness(IBinder displayToken, float sdrBrightness, float sdrBrightnessNits, float displayBrightness, float displayBrightnessNits)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeReadTransactionFromParcel(Parcel in)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeWriteTransactionToParcel(long nativeObject, Parcel out)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetShadowRadius(long transactionObj, long nativeObject, float shadowRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native DisplayDecorationSupport nativeGetDisplayDecorationSupport(IBinder displayToken)",
    "returnType" : "DisplayDecorationSupport",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRate(long transactionObj, long nativeObject, float frameRate, int compatibility, int changeFrameRateStrategy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDefaultFrameRateCompatibility(long transactionObj, long nativeObject, int compatibility)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRateCategory(long transactionObj, long nativeObject, int category, boolean smoothSwitchOnly)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameRateSelectionStrategy(long transactionObj, long nativeObject, int strategy)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeGetHandle(long nativeObject)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFixedTransformHint(long transactionObj, long nativeObject, int transformHint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRemoveCurrentInputFocus(long nativeObject, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFocusedWindow(long transactionObj, IBinder toToken, String windowName, int displayId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameTimelineVsync(long transactionObj, long frameTimelineVsyncId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddJankDataListener(long nativeListener, long nativeSurfaceControl)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRemoveJankDataListener(long nativeListener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateJankDataListenerWrapper(OnJankDataListener listener)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetGPUContextPriority()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTransformHint(long nativeObject, @SurfaceControl.BufferTransform int transformHint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetTransformHint(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeGetLayerId(long nativeObject)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddTransactionCommittedListener(long nativeObject, TransactionCommittedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeAddTransactionCompletedListener(long nativeObject, Consumer<TransactionStats> listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSanitize(long transactionObject, int pid, int uid)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDestinationFrame(long transactionObj, long nativeObject, int l, int t, int r, int b)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDefaultApplyToken(IBinder token)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native IBinder nativeGetDefaultApplyToken()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeBootFinished()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreateTpc(TrustedPresentationCallback callback)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long getNativeTrustedPresentationCallbackFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetTrustedPresentationCallback(long transactionObj, long nativeObject, long nativeTpc, TrustedPresentationThresholds thresholds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClearTrustedPresentationCallback(long transactionObj, long nativeObject)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native StalledTransactionInfo nativeGetStalledTransactionInfo(int pid)",
    "returnType" : "StalledTransactionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetDesiredPresentTimeNanos(long transactionObj, long desiredPresentTimeNanos)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetFrameTimeline(long transactionObj, long vsyncId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int rotationToBufferTransform(@Surface.Rotation int rotation)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addOnReparentListener(@NonNull OnReparentListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds a reparenting listener.\n     *\n     * @param listener The listener.\n     * @return Whether listener was added.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeOnReparentListener(@NonNull OnReparentListener listener)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a reparenting listener.\n     *\n     * @param listener The listener.\n     * @return Whether listener was removed.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void assignNativeObject(long nativeObject, String callsite)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void copyFrom(@NonNull SurfaceControl other, String callsite)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(Parcel in)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDebugUsageAfterRelease(boolean debug)",
    "returnType" : "void",
    "comment" : "\n     * Enables additional debug logs to track usage-after-release of all SurfaceControls in this\n     * process.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUnreleasedWarningCallSite(@NonNull String callsite)",
    "returnType" : "void",
    "comment" : "\n     * Provides more information to show about the source of this SurfaceControl if it is finalized\n     * without being released. This is primarily intended for callers to update the call site after\n     * receiving a SurfaceControl from another process, which would otherwise get a generic default\n     * call site.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " String getCallsite()",
    "returnType" : "String",
    "comment" : "\n     * Returns the last provided call site when this SurfaceControl was created.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of this SurfaceControl, mainly for debugging purposes.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSameSurface(@NonNull SurfaceControl other)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether two {@link SurfaceControl} objects represent the same surface.\n     *\n     * @param other The other object to check\n     * @return {@code true} if these two {@link SurfaceControl} objects represent the same surface.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "public Choreographer getChoreographer()",
    "returnType" : "Choreographer",
    "comment" : "\n     * When called for the first time a new instance of the {@link Choreographer} is created\n     * with a {@link android.os.Looper} of the current thread. Every subsequent call will return\n     * the same instance of the Choreographer.\n     *\n     * @see #getChoreographer(Looper) to create Choreographer with a different\n     * looper than current thread looper.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Looper", "android.view.Choreographer" ]
  }, {
    "name" : "public Choreographer getChoreographer(@NonNull Looper looper)",
    "returnType" : "Choreographer",
    "comment" : "\n     * When called for the first time a new instance of the {@link Choreographer} is created with\n     * the sourced {@link android.os.Looper}. Every subsequent call will return the same\n     * instance of the Choreographer.\n     *\n     * @see #getChoreographer()\n     *\n     * @throws IllegalStateException when a {@link Choreographer} instance exists with a different\n     * looper than sourced.\n     * @param looper the choreographer is attached on this looper.\n     *\n     * @hide\n     ",
    "links" : [ "android.os.Looper", "android.view.Choreographer" ]
  }, {
    "name" : "public boolean hasChoreographer()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if {@link Choreographer} is present otherwise false.\n     * To check the validity use {@link #isValid} on the SurfaceControl, a valid SurfaceControl with\n     * choreographer will have the valid Choreographer.\n     *\n     * @hide\n     ",
    "links" : [ "#isValid", "android.view.Choreographer" ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream. Protocol buffer message definition is at {@link\n     * android.view.SurfaceControlProto}.\n     *\n     * @param proto Stream to write the SurfaceControl object to.\n     * @param fieldId Field Id of the SurfaceControl as defined in the parent message.\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControlProto" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n     * Release the local reference to the server-side surface. The surface\n     * may continue to exist on-screen as long as its parent continues\n     * to exist. To explicitly remove a surface from the screen use\n     * {@link Transaction#reparent} with a null-parent. After release,\n     * {@link #isValid} will return false and other methods will throw\n     * an exception.\n     *\n     * Always call release() when you're done with a SurfaceControl.\n     ",
    "links" : [ "#reparent", "#isValid" ]
  }, {
    "name" : "public void disconnect()",
    "returnType" : "void",
    "comment" : "\n     * Disconnect any client still connected to the surface.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void checkNotReleased()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isValid()",
    "returnType" : "boolean",
    "comment" : "\n     * Check whether this instance points to a valid layer with the system-compositor. For\n     * example this may be false if construction failed, or the layer was released\n     * ({@link #release}).\n     *\n     * @return Whether this SurfaceControl is valid.\n     ",
    "links" : [ "#release" ]
  }, {
    "name" : "public static void openTransaction()",
    "returnType" : "void",
    "comment" : " start a transaction\n     * @hide\n     * @deprecated Use regular Transaction instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void closeTransaction()",
    "returnType" : "void",
    "comment" : " end a transaction\n     * @hide\n     * @deprecated Use regular Transaction instead.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearContentFrameStats()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getContentFrameStats(WindowContentFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean clearAnimationFrameStats()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getAnimationFrameStats(WindowAnimationFrameStats outStats)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public View getLocalOwnerView()",
    "returnType" : "View",
    "comment" : "\n     * Gets the local view that owns this surface.\n     *\n     * @return The owner view.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setDisplayPowerMode(IBinder displayToken, int mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StaticDisplayInfo getStaticDisplayInfo(long displayId)",
    "returnType" : "StaticDisplayInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DynamicDisplayInfo getDynamicDisplayInfo(long displayId)",
    "returnType" : "DynamicDisplayInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(IBinder displayToken)",
    "returnType" : "DisplayedContentSamplingAttributes",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayedContentSample getDisplayedContentSample(IBinder displayToken, long maxFrames, long timestamp)",
    "returnType" : "DisplayedContentSample",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDesiredDisplayModeSpecs(IBinder displayToken, DesiredDisplayModeSpecs desiredDisplayModeSpecs)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DesiredDisplayModeSpecs getDesiredDisplayModeSpecs(IBinder displayToken)",
    "returnType" : "DesiredDisplayModeSpecs",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayPrimaries getDisplayNativePrimaries(IBinder displayToken)",
    "returnType" : "DisplayPrimaries",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setActiveColorMode(IBinder displayToken, int colorMode)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ColorSpace[] getCompositionColorSpaces()",
    "returnType" : "ColorSpace[]",
    "comment" : "\n     * Returns an array of color spaces with 2 elements. The first color space is the\n     * default color space and second one is wide color gamut color space.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static OverlayProperties getOverlaySupport()",
    "returnType" : "OverlayProperties",
    "comment" : "\n     * @return the overlay properties of the device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getBootDisplayModeSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setBootDisplayMode(IBinder displayToken, int displayModeId)",
    "returnType" : "void",
    "comment" : " There is no associated getter for this method.  When this is set, the display is expected\n     * to start up in this mode next time the device reboots.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void clearBootDisplayMode(IBinder displayToken)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setAutoLowLatencyMode(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void setGameContentType(IBinder displayToken, boolean on)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getProtectedContentSupport()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether protected content is supported in GPU composition.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean getDisplayBrightnessSupport(IBinder displayToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether brightness operations are supported on a display.\n     *\n     * @param displayToken\n     *      The token for the display.\n     *\n     * @return Whether brightness operations are supported on the display.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDisplayBrightness(IBinder displayToken, float brightness)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the brightness of a display.\n     *\n     * @param displayToken\n     *      The token for the display whose brightness is set.\n     * @param brightness\n     *      A number between 0.0f (minimum brightness) and 1.0f (maximum brightness), or -1.0f to\n     *      turn the backlight off.\n     *\n     * @return Whether the method succeeded or not.\n     *\n     * @throws IllegalArgumentException if:\n     *      - displayToken is null;\n     *      - brightness is NaN or greater than 1.0f.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean setDisplayBrightness(IBinder displayToken, float sdrBrightness, float sdrBrightnessNits, float displayBrightness, float displayBrightnessNits)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the brightness of a display.\n     *\n     * @param displayToken\n     *      The token for the display whose brightness is set.\n     * @param sdrBrightness\n     *      A number between 0.0f (minimum brightness) and 1.0f (maximum brightness), or -1.0f to\n     *      turn the backlight off. Specifies the desired brightness of SDR content.\n     * @param sdrBrightnessNits\n     *      The value of sdrBrightness converted to calibrated nits. -1 if this isn't available.\n     * @param displayBrightness\n     *     A number between 0.0f (minimum brightness) and 1.0f (maximum brightness), or\n     *     -1.0f to turn the backlight off. Specifies the desired brightness of the display itself,\n     *     used directly for HDR content.\n     * @param displayBrightnessNits\n     *      The value of displayBrightness converted to calibrated nits. -1 if this isn't\n     *      available.\n     *\n     * @return Whether the method succeeded or not.\n     *\n     * @throws IllegalArgumentException if:\n     *      - displayToken is null;\n     *      - brightness is NaN or greater than 1.0f.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static SurfaceControl mirrorSurface(SurfaceControl mirrorOf)",
    "returnType" : "SurfaceControl",
    "comment" : "\n     * Creates a mirrored hierarchy for the mirrorOf {@link SurfaceControl}\n     *\n     * Real Hierarchy    Mirror\n     *                     SC (value that's returned)\n     *                      |\n     *      A               A'\n     *      |               |\n     *      B               B'\n     *\n     * @param mirrorOf The root of the hierarchy that should be mirrored.\n     * @return A SurfaceControl that's the parent of the root of the mirrored hierarchy.\n     *\n     * @hide\n     ",
    "links" : [ "android.view.SurfaceControl" ]
  }, {
    "name" : "private static void validateColorArg(@Size(4) float[] color)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)",
    "returnType" : "void",
    "comment" : "\n     * Sets the global configuration for all the shadows drawn by SurfaceFlinger. Shadow follows\n     * material design guidelines.\n     *\n     * @param ambientColor Color applied to the ambient shadow. The alpha is premultiplied. A\n     *                     float array with four values to represent r, g, b, a in range [0..1]\n     * @param spotColor Color applied to the spot shadow. The alpha is premultiplied. The position\n     *                  of the spot shadow depends on the light position. A float array with\n     *                  four values to represent r, g, b, a in range [0..1]\n     * @param lightPosY Y axis position of the light used to cast the spot shadow in pixels.\n     * @param lightPosZ Z axis position of the light used to cast the spot shadow in pixels. The X\n     *                  axis position is set to the display width / 2.\n     * @param lightRadius Radius of the light casting the shadow in pixels.\n     *[\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DisplayDecorationSupport getDisplayDecorationSupport(IBinder displayToken)",
    "returnType" : "DisplayDecorationSupport",
    "comment" : "\n     * Returns whether/how a display supports DISPLAY_DECORATION.\n     *\n     * @param displayToken\n     *      The token for the display.\n     *\n     * @return A class describing how the display supports DISPLAY_DECORATION or null if it does\n     * not.\n     *\n     * TODO (b/218524164): Move this out of SurfaceControl.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addJankDataListener(OnJankDataListener listener, SurfaceControl surface)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback to be informed about SF's jank classification for a specific surface.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void removeJankDataListener(OnJankDataListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes a jank callback previously added with {@link #addJankDataListener}\n     * @hide\n     ",
    "links" : [ "#addJankDataListener" ]
  }, {
    "name" : "public static int getGPUContextPriority()",
    "returnType" : "int",
    "comment" : "\n     * Return GPU Context priority that is set in SurfaceFlinger's Render Engine.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean bootFinished()",
    "returnType" : "boolean",
    "comment" : "\n     * Lets surfaceFlinger know the boot procedure is completed.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resize(int w, int h)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTransformHint()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTransformHint(@SurfaceControl.BufferTransform int transformHint)",
    "returnType" : "void",
    "comment" : "\n     * Update the transform hint of current SurfaceControl. Only affect if type is\n     * {@link #FX_SURFACE_BLAST}\n     *\n     * The transform hint is used to prevent allocating a buffer of different size when a\n     * layer is rotated. The producer can choose to consume the hint and allocate the buffer\n     * with the same size.\n     * @hide\n     ",
    "links" : [ "#FX_SURFACE_BLAST" ]
  }, {
    "name" : "public int getLayerId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void invokeReleaseCallback(Consumer<SyncFence> callback, long nativeFencePtr)",
    "returnType" : "void",
    "comment" : " Called by native",
    "links" : [ ]
  }, {
    "name" : "public static StalledTransactionInfo getStalledTransactionInfo(int pid)",
    "returnType" : "StalledTransactionInfo",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native long nativeCreate(SurfaceSession session, String name, int w, int h, int format, int flags, long parentObject, Parcel metadata) throws OutOfResourcesException", "private static native long nativeReadFromParcel(Parcel in)", "private static native long nativeCopyFromSurfaceControl(long nativeObject)", "private static native void nativeWriteToParcel(long nativeObject, Parcel out)", "private static native long nativeGetNativeSurfaceControlFinalizer()", "private static native void nativeDisconnect(long nativeObject)", "private static native void nativeUpdateDefaultBufferSize(long nativeObject, int width, int height)", "private static native long nativeMirrorSurface(long mirrorOfObject)", "private static native long nativeCreateTransaction()", "private static native long nativeGetNativeTransactionFinalizer()", "private static native void nativeApplyTransaction(long transactionObj, boolean sync, boolean oneWay)", "private static native void nativeMergeTransaction(long transactionObj, long otherTransactionObj)", "private static native void nativeClearTransaction(long transactionObj)", "private static native void nativeSetAnimationTransaction(long transactionObj)", "private static native void nativeSetEarlyWakeupStart(long transactionObj)", "private static native void nativeSetEarlyWakeupEnd(long transactionObj)", "private static native long nativeGetTransactionId(long transactionObj)", "private static native void nativeSetLayer(long transactionObj, long nativeObject, int zorder)", "private static native void nativeSetRelativeLayer(long transactionObj, long nativeObject, long relativeToObject, int zorder)", "private static native void nativeSetPosition(long transactionObj, long nativeObject, float x, float y)", "private static native void nativeSetScale(long transactionObj, long nativeObject, float x, float y)", "private static native void nativeSetTransparentRegionHint(long transactionObj, long nativeObject, Region region)", "private static native void nativeSetAlpha(long transactionObj, long nativeObject, float alpha)", "private static native void nativeSetMatrix(long transactionObj, long nativeObject, float dsdx, float dtdx, float dtdy, float dsdy)", "private static native void nativeSetColorTransform(long transactionObj, long nativeObject, float[] matrix, float[] translation)", "private static native void nativeSetColorSpaceAgnostic(long transactionObj, long nativeObject, boolean agnostic)", "private static native void nativeSetGeometry(long transactionObj, long nativeObject, Rect sourceCrop, Rect dest, long orientation)", "private static native void nativeSetColor(long transactionObj, long nativeObject, float[] color)", "private static native void nativeSetFlags(long transactionObj, long nativeObject, int flags, int mask)", "private static native void nativeSetFrameRateSelectionPriority(long transactionObj, long nativeObject, int priority)", "private static native void nativeSetWindowCrop(long transactionObj, long nativeObject, int l, int t, int r, int b)", "private static native void nativeSetCornerRadius(long transactionObj, long nativeObject, float cornerRadius)", "private static native void nativeSetBackgroundBlurRadius(long transactionObj, long nativeObject, int blurRadius)", "private static native void nativeSetLayerStack(long transactionObj, long nativeObject, int layerStack)", "private static native void nativeSetBlurRegions(long transactionObj, long nativeObj, float[][] regions, int length)", "private static native void nativeSetStretchEffect(long transactionObj, long nativeObj, float width, float height, float vecX, float vecY, float maxStretchAmountX, float maxStretchAmountY, float childRelativeLeft, float childRelativeTop, float childRelativeRight, float childRelativeBottom)", "private static native void nativeSetTrustedOverlay(long transactionObj, long nativeObject, boolean isTrustedOverlay)", "private static native void nativeSetDropInputMode(long transactionObj, long nativeObject, int flags)", "private static native void nativeSetCanOccludePresentation(long transactionObj, long nativeObject, boolean canOccludePresentation)", "private static native void nativeSurfaceFlushJankData(long nativeSurfaceObject)", "private static native boolean nativeClearContentFrameStats(long nativeObject)", "private static native boolean nativeGetContentFrameStats(long nativeObject, WindowContentFrameStats outStats)", "private static native boolean nativeClearAnimationFrameStats()", "private static native boolean nativeGetAnimationFrameStats(WindowAnimationFrameStats outStats)", "private static native void nativeSetDisplaySurface(long transactionObj, IBinder displayToken, long nativeSurfaceObject)", "private static native void nativeSetDisplayLayerStack(long transactionObj, IBinder displayToken, int layerStack)", "private static native void nativeSetDisplayFlags(long transactionObj, IBinder displayToken, int flags)", "private static native void nativeSetDisplayProjection(long transactionObj, IBinder displayToken, int orientation, int l, int t, int r, int b, int L, int T, int R, int B)", "private static native void nativeSetDisplaySize(long transactionObj, IBinder displayToken, int width, int height)", "private static native StaticDisplayInfo nativeGetStaticDisplayInfo(long displayId)", "private static native DynamicDisplayInfo nativeGetDynamicDisplayInfo(long displayId)", "private static native DisplayedContentSamplingAttributes nativeGetDisplayedContentSamplingAttributes(IBinder displayToken)", "private static native boolean nativeSetDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)", "private static native DisplayedContentSample nativeGetDisplayedContentSample(IBinder displayToken, long numFrames, long timestamp)", "private static native boolean nativeSetDesiredDisplayModeSpecs(IBinder displayToken, DesiredDisplayModeSpecs desiredDisplayModeSpecs)", "private static native DesiredDisplayModeSpecs nativeGetDesiredDisplayModeSpecs(IBinder displayToken)", "private static native DisplayPrimaries nativeGetDisplayNativePrimaries(IBinder displayToken)", "private static native int[] nativeGetCompositionDataspaces()", "private static native OverlayProperties nativeGetOverlaySupport()", "private static native boolean nativeSetActiveColorMode(IBinder displayToken, int colorMode)", "private static native boolean nativeGetBootDisplayModeSupport()", "private static native void nativeSetBootDisplayMode(IBinder displayToken, int displayMode)", "private static native void nativeClearBootDisplayMode(IBinder displayToken)", "private static native void nativeSetAutoLowLatencyMode(IBinder displayToken, boolean on)", "private static native void nativeSetGameContentType(IBinder displayToken, boolean on)", "private static native void nativeSetDisplayPowerMode(IBinder displayToken, int mode)", "private static native void nativeReparent(long transactionObj, long nativeObject, long newParentNativeObject)", "private static native void nativeSetBuffer(long transactionObj, long nativeObject, HardwareBuffer buffer, long fencePtr, Consumer<SyncFence> releaseCallback)", "private static native void nativeUnsetBuffer(long transactionObj, long nativeObject)", "private static native void nativeSetBufferTransform(long transactionObj, long nativeObject, int transform)", "private static native void nativeSetDataSpace(long transactionObj, long nativeObject, @DataSpace.NamedDataSpace int dataSpace)", "private static native void nativeSetExtendedRangeBrightness(long transactionObj, long nativeObject, float currentBufferRatio, float desiredRatio)", "private static native void nativeSetDesiredHdrHeadroom(long transactionObj, long nativeObject, float desiredRatio)", "private static native void nativeSetCachingHint(long transactionObj, long nativeObject, int cachingHint)", "private static native void nativeSetDamageRegion(long transactionObj, long nativeObject, Region region)", "private static native void nativeSetDimmingEnabled(long transactionObj, long nativeObject, boolean dimmingEnabled)", "private static native void nativeSetInputWindowInfo(long transactionObj, long nativeObject, InputWindowHandle handle)", "private static native boolean nativeGetProtectedContentSupport()", "private static native void nativeSetMetadata(long transactionObj, long nativeObject, int key, Parcel data)", "private static native void nativeAddWindowInfosReportedListener(long transactionObj, Runnable listener)", "private static native boolean nativeGetDisplayBrightnessSupport(IBinder displayToken)", "private static native boolean nativeSetDisplayBrightness(IBinder displayToken, float sdrBrightness, float sdrBrightnessNits, float displayBrightness, float displayBrightnessNits)", "private static native long nativeReadTransactionFromParcel(Parcel in)", "private static native void nativeWriteTransactionToParcel(long nativeObject, Parcel out)", "private static native void nativeSetShadowRadius(long transactionObj, long nativeObject, float shadowRadius)", "private static native void nativeSetGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)", "private static native DisplayDecorationSupport nativeGetDisplayDecorationSupport(IBinder displayToken)", "private static native void nativeSetFrameRate(long transactionObj, long nativeObject, float frameRate, int compatibility, int changeFrameRateStrategy)", "private static native void nativeSetDefaultFrameRateCompatibility(long transactionObj, long nativeObject, int compatibility)", "private static native void nativeSetFrameRateCategory(long transactionObj, long nativeObject, int category, boolean smoothSwitchOnly)", "private static native void nativeSetFrameRateSelectionStrategy(long transactionObj, long nativeObject, int strategy)", "private static native long nativeGetHandle(long nativeObject)", "private static native void nativeSetFixedTransformHint(long transactionObj, long nativeObject, int transformHint)", "private static native void nativeRemoveCurrentInputFocus(long nativeObject, int displayId)", "private static native void nativeSetFocusedWindow(long transactionObj, IBinder toToken, String windowName, int displayId)", "private static native void nativeSetFrameTimelineVsync(long transactionObj, long frameTimelineVsyncId)", "private static native void nativeAddJankDataListener(long nativeListener, long nativeSurfaceControl)", "private static native void nativeRemoveJankDataListener(long nativeListener)", "private static native long nativeCreateJankDataListenerWrapper(OnJankDataListener listener)", "private static native int nativeGetGPUContextPriority()", "private static native void nativeSetTransformHint(long nativeObject, @SurfaceControl.BufferTransform int transformHint)", "private static native int nativeGetTransformHint(long nativeObject)", "private static native int nativeGetLayerId(long nativeObject)", "private static native void nativeAddTransactionCommittedListener(long nativeObject, TransactionCommittedListener listener)", "private static native void nativeAddTransactionCompletedListener(long nativeObject, Consumer<TransactionStats> listener)", "private static native void nativeSanitize(long transactionObject, int pid, int uid)", "private static native void nativeSetDestinationFrame(long transactionObj, long nativeObject, int l, int t, int r, int b)", "private static native void nativeSetDefaultApplyToken(IBinder token)", "private static native IBinder nativeGetDefaultApplyToken()", "private static native boolean nativeBootFinished()", "private static native long nativeCreateTpc(TrustedPresentationCallback callback)", "private static native long getNativeTrustedPresentationCallbackFinalizer()", "private static native void nativeSetTrustedPresentationCallback(long transactionObj, long nativeObject, long nativeTpc, TrustedPresentationThresholds thresholds)", "private static native void nativeClearTrustedPresentationCallback(long transactionObj, long nativeObject)", "private static native StalledTransactionInfo nativeGetStalledTransactionInfo(int pid)", "private static native void nativeSetDesiredPresentTimeNanos(long transactionObj, long desiredPresentTimeNanos)", "private static native void nativeSetFrameTimeline(long transactionObj, long vsyncId)", "public static int rotationToBufferTransform(@Surface.Rotation int rotation)", "public boolean addOnReparentListener(@NonNull OnReparentListener listener)", "public boolean removeOnReparentListener(@NonNull OnReparentListener listener)", "private void assignNativeObject(long nativeObject, String callsite)", "public void copyFrom(@NonNull SurfaceControl other, String callsite)", "public void readFromParcel(Parcel in)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static void setDebugUsageAfterRelease(boolean debug)", "public void setUnreleasedWarningCallSite(@NonNull String callsite)", " String getCallsite()", " String getName()", "public boolean isSameSurface(@NonNull SurfaceControl other)", "public Choreographer getChoreographer()", "public Choreographer getChoreographer(@NonNull Looper looper)", "public boolean hasChoreographer()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "protected void finalize() throws Throwable", "public void release()", "public void disconnect()", "private void checkNotReleased()", "public boolean isValid()", "public static void openTransaction()", "public static void closeTransaction()", "public boolean clearContentFrameStats()", "public boolean getContentFrameStats(WindowContentFrameStats outStats)", "public static boolean clearAnimationFrameStats()", "public static boolean getAnimationFrameStats(WindowAnimationFrameStats outStats)", "public int getWidth()", "public int getHeight()", "public View getLocalOwnerView()", "public String toString()", "public static void setDisplayPowerMode(IBinder displayToken, int mode)", "public static StaticDisplayInfo getStaticDisplayInfo(long displayId)", "public static DynamicDisplayInfo getDynamicDisplayInfo(long displayId)", "public static DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(IBinder displayToken)", "public static boolean setDisplayedContentSamplingEnabled(IBinder displayToken, boolean enable, int componentMask, int maxFrames)", "public static DisplayedContentSample getDisplayedContentSample(IBinder displayToken, long maxFrames, long timestamp)", "public static boolean setDesiredDisplayModeSpecs(IBinder displayToken, DesiredDisplayModeSpecs desiredDisplayModeSpecs)", "public static DesiredDisplayModeSpecs getDesiredDisplayModeSpecs(IBinder displayToken)", "public static DisplayPrimaries getDisplayNativePrimaries(IBinder displayToken)", "public static boolean setActiveColorMode(IBinder displayToken, int colorMode)", "public static ColorSpace[] getCompositionColorSpaces()", "public static OverlayProperties getOverlaySupport()", "public static boolean getBootDisplayModeSupport()", "public static void setBootDisplayMode(IBinder displayToken, int displayModeId)", "public static void clearBootDisplayMode(IBinder displayToken)", "public static void setAutoLowLatencyMode(IBinder displayToken, boolean on)", "public static void setGameContentType(IBinder displayToken, boolean on)", "public static boolean getProtectedContentSupport()", "public static boolean getDisplayBrightnessSupport(IBinder displayToken)", "public static boolean setDisplayBrightness(IBinder displayToken, float brightness)", "public static boolean setDisplayBrightness(IBinder displayToken, float sdrBrightness, float sdrBrightnessNits, float displayBrightness, float displayBrightnessNits)", "public static SurfaceControl mirrorSurface(SurfaceControl mirrorOf)", "private static void validateColorArg(@Size(4) float[] color)", "public static void setGlobalShadowSettings(@Size(4) float[] ambientColor, @Size(4) float[] spotColor, float lightPosY, float lightPosZ, float lightRadius)", "public static DisplayDecorationSupport getDisplayDecorationSupport(IBinder displayToken)", "public static void addJankDataListener(OnJankDataListener listener, SurfaceControl surface)", "public static void removeJankDataListener(OnJankDataListener listener)", "public static int getGPUContextPriority()", "public static boolean bootFinished()", "public void resize(int w, int h)", "public int getTransformHint()", "public void setTransformHint(@SurfaceControl.BufferTransform int transformHint)", "public int getLayerId()", "private static void invokeReleaseCallback(Consumer<SyncFence> callback, long nativeFencePtr)", "public static StalledTransactionInfo getStalledTransactionInfo(int pid)" ],
  "variableNames" : [ "TAG", "BUFFER_TRANSFORM_IDENTITY", "BUFFER_TRANSFORM_MIRROR_HORIZONTAL", "BUFFER_TRANSFORM_MIRROR_VERTICAL", "BUFFER_TRANSFORM_ROTATE_90", "BUFFER_TRANSFORM_ROTATE_180", "BUFFER_TRANSFORM_ROTATE_270", "mReparentListeners", "mCloseGuard", "mName", "mCallsite", "mNativeObject", "mNativeHandle", "mChoreographerLock", "mChoreographer", "mLock", "mWidth", "mHeight", "mTrustedPresentationCallback", "mLocalOwnerView", "mReleaseStack", "sDebugUsageAfterRelease", "sRegistry", "mFreeNativeResources", "HIDDEN", "SKIP_SCREENSHOT", "SECURE", "ENABLE_BACKPRESSURE", "DISPLAY_DECORATION", "IGNORE_DESTINATION_FRAME", "LAYER_IS_REFRESH_RATE_INDICATOR", "CAN_OCCLUDE_PRESENTATION", "NON_PREMULTIPLIED", "OPAQUE", "PROTECTED_APP", "CURSOR_WINDOW", "NO_COLOR_FILL", "FX_SURFACE_NORMAL", "FX_SURFACE_EFFECT", "FX_SURFACE_CONTAINER", "FX_SURFACE_BLAST", "FX_SURFACE_MASK", "SURFACE_HIDDEN", "SURFACE_OPAQUE", "DISPLAY_RECEIVES_INPUT", "POWER_MODE_OFF", "POWER_MODE_DOZE", "POWER_MODE_NORMAL", "POWER_MODE_DOZE_SUSPEND", "POWER_MODE_ON_SUSPEND", "CACHING_DISABLED", "CACHING_ENABLED", "METADATA_OWNER_UID", "METADATA_WINDOW_TYPE", "METADATA_TASK_ID", "METADATA_MOUSE_CURSOR", "METADATA_ACCESSIBILITY_ID", "METADATA_OWNER_PID", "METADATA_GAME_MODE", "FRAME_RATE_SELECTION_STRATEGY_PROPAGATE", "FRAME_RATE_SELECTION_STRATEGY_OVERRIDE_CHILDREN", "FRAME_RATE_SELECTION_STRATEGY_SELF", "CREATOR" ]
}