{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/message2/MFDataModelValidator.java",
  "packageName" : "android.icu.message2",
  "className" : "MFDataModelValidator",
  "comment" : " I can merge all this in the MFDataModel class and make it private",
  "links" : [ ],
  "variables" : [ {
    "name" : "message",
    "type" : "MFDataModel.Message",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "declaredVars",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean validate() throws MFParseException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean validateVariants(List<Variant> variants, int selectorCount) throws MFParseException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean validateSelectors(List<Expression> selectors) throws MFParseException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean validateDeclarations(List<Declaration> declarations) throws MFParseException",
    "returnType" : "boolean",
    "comment" : "\n     * .input {$foo :number} .input {$foo} => ERROR\n     * .input {$foo :number} .local $foo={$bar} => ERROR, local foo overrides an input\n     * .local $foo={...} .local $foo={...} => ERROR, foo declared twice\n     * .local $a={$foo} .local $b={$foo} => NOT AN ERROR (foo is used, not declared)\n     * .local $a={:f opt=$foo} .local $foo={$foo} => ERROR, foo declared after beeing used in opt\n     ",
    "links" : [ ]
  }, {
    "name" : "private void validateExpression(Expression expression, boolean fromInput) throws MFParseException",
    "returnType" : "void",
    "comment" : "\n     * One might also consider checking if the same variable is used with more than one type:\n     *   .local $a = {$foo :number}\n     *   .local $b = {$foo :string}\n     *   .local $c = {$foo :datetime}\n     *\n     * But this is not necesarily an error.\n     * If $foo is a number, then it might be formatter as a number, or as date (epoch time),\n     * or something else.\n     *\n     * So it is not safe to complain. Especially with custom functions:\n     *   # get the first name from a `Person` object\n     *   .local $b = {$person :getField fieldName=firstName}\n     *   # get formats a `Person` object\n     *   .local $b = {$person :person}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean addVariableDeclaration(String varName) throws MFParseException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void error(String text) throws MFParseException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean validate() throws MFParseException", "private boolean validateVariants(List<Variant> variants, int selectorCount) throws MFParseException", "private boolean validateSelectors(List<Expression> selectors) throws MFParseException", "private boolean validateDeclarations(List<Declaration> declarations) throws MFParseException", "private void validateExpression(Expression expression, boolean fromInput) throws MFParseException", "private boolean addVariableDeclaration(String varName) throws MFParseException", "private void error(String text) throws MFParseException" ],
  "variableNames" : [ "message", "declaredVars" ]
}