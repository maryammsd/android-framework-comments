{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/ConnectionRequest.java",
  "packageName" : "android.telecom",
  "className" : "ConnectionRequest",
  "comment" : "\n * Simple data container encapsulating a request to some entity to\n * create a new {@link Connection}.\n ",
  "variables" : [ {
    "name" : "mAccountHandle",
    "type" : "PhoneAccountHandle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAddress",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTelecomCallId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShouldShowIncomingCallUi",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRttPipeToInCall",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRttPipeFromInCall",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRttTextStream",
    "type" : "Connection.RttTextStream",
    "comment" : " Cached return value of getRttTextStream -- we don't want to wrap it more than once.",
    "links" : [ ]
  }, {
    "name" : "mParticipants",
    "type" : "List<Uri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAdhocConference",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ConnectionRequest>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public PhoneAccountHandle getAccountHandle()",
    "returnType" : "PhoneAccountHandle",
    "comment" : "\n     * The account which should be used to place the call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Uri getAddress()",
    "returnType" : "Uri",
    "comment" : "\n     * The handle (e.g., phone number) to which the {@link Connection} is to connect.\n     ",
    "links" : [ "Connection" ]
  }, {
    "name" : "public List<Uri> getParticipants()",
    "returnType" : "List<Uri>",
    "comment" : "\n     * The participants to which the {@link Connection} is to connect.\n     ",
    "links" : [ "Connection" ]
  }, {
    "name" : "public Bundle getExtras()",
    "returnType" : "Bundle",
    "comment" : "\n     * Application-specific extra data. Used for passing back information from an incoming\n     * call {@code Intent}, and for any proprietary extensions arranged between a client\n     * and servant {@code ConnectionService} which agree on a vocabulary for such data.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVideoState()",
    "returnType" : "int",
    "comment" : "\n     * Describes the video states supported by the client requesting the connection.\n     * Valid values: {@link VideoProfile#STATE_AUDIO_ONLY},\n     * {@link VideoProfile#STATE_BIDIRECTIONAL},\n     * {@link VideoProfile#STATE_TX_ENABLED},\n     * {@link VideoProfile#STATE_RX_ENABLED}.\n     *\n     * @return The video state for the connection.\n     ",
    "links" : [ "VideoProfile#STATE_AUDIO_ONLY", "VideoProfile#STATE_BIDIRECTIONAL", "VideoProfile#STATE_TX_ENABLED", "VideoProfile#STATE_RX_ENABLED" ]
  }, {
    "name" : "public String getTelecomCallId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the internal Telecom ID associated with the connection request.\n     *\n     * @return The Telecom ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowIncomingCallUi()",
    "returnType" : "boolean",
    "comment" : "\n     * For a self-managed {@link ConnectionService}, indicates for an incoming call whether the\n     * {@link ConnectionService} should show its own incoming call UI for an incoming call.\n     *\n     * @return {@code true} if the {@link ConnectionService} should show its own incoming call UI.\n     * When {@code false}, Telecom shows the incoming call UI for the call.\n     * @hide\n     ",
    "links" : [ "ConnectionService", "ConnectionService", "ConnectionService" ]
  }, {
    "name" : "public boolean isAdhocConferenceCall()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if the call is a adhoc conference call else @return {@code false}\n     ",
    "links" : [ ]
  }, {
    "name" : "public ParcelFileDescriptor getRttPipeToInCall()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Gets the {@link ParcelFileDescriptor} that is used to send RTT text from the connection\n     * service to the in-call UI. In order to obtain an\n     * {@link java.io.InputStream} from this {@link ParcelFileDescriptor}, use\n     * {@link android.os.ParcelFileDescriptor.AutoCloseInputStream}.\n     * Only text data encoded using UTF-8 should be written into this {@link ParcelFileDescriptor}.\n     * @return The {@link ParcelFileDescriptor} that should be used for communication.\n     * Do not un-hide -- only for use by Telephony\n     * @hide\n     ",
    "links" : [ "ParcelFileDescriptor", "java.io.InputStream", "ParcelFileDescriptor", "android.os.ParcelFileDescriptor.AutoCloseInputStream", "ParcelFileDescriptor", "ParcelFileDescriptor" ]
  }, {
    "name" : "public ParcelFileDescriptor getRttPipeFromInCall()",
    "returnType" : "ParcelFileDescriptor",
    "comment" : "\n     * Gets the {@link ParcelFileDescriptor} that is used to send RTT text from the in-call UI to\n     * the connection service. In order to obtain an\n     * {@link java.io.OutputStream} from this {@link ParcelFileDescriptor}, use\n     * {@link android.os.ParcelFileDescriptor.AutoCloseOutputStream}.\n     * The contents of this {@link ParcelFileDescriptor} will consist solely of text encoded in\n     * UTF-8.\n     * @return The {@link ParcelFileDescriptor} that should be used for communication\n     * Do not un-hide -- only for use by Telephony\n     * @hide\n     ",
    "links" : [ "ParcelFileDescriptor", "java.io.OutputStream", "ParcelFileDescriptor", "android.os.ParcelFileDescriptor.AutoCloseOutputStream", "ParcelFileDescriptor", "ParcelFileDescriptor" ]
  }, {
    "name" : "public Connection.RttTextStream getRttTextStream()",
    "returnType" : "Connection.RttTextStream",
    "comment" : "\n     * Gets the {@link android.telecom.Connection.RttTextStream} object that should be used to\n     * send and receive RTT text to/from the in-call app.\n     * @return An instance of {@link android.telecom.Connection.RttTextStream}, or {@code null}\n     * if this connection request is not requesting an RTT session upon connection establishment.\n     ",
    "links" : [ "android.telecom.Connection.RttTextStream", "android.telecom.Connection.RttTextStream" ]
  }, {
    "name" : "public boolean isRequestingRtt()",
    "returnType" : "boolean",
    "comment" : "\n     * Convenience method for determining whether the ConnectionRequest is requesting an RTT session\n     * @return {@code true} if RTT is requested, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String bundleToString(Bundle extras)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel destination, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mAccountHandle", "mAddress", "mExtras", "mVideoState", "mTelecomCallId", "mShouldShowIncomingCallUi", "mRttPipeToInCall", "mRttPipeFromInCall", "mRttTextStream", "mParticipants", "mIsAdhocConference", "CREATOR" ],
  "methodNames" : [ "public PhoneAccountHandle getAccountHandle()", "public Uri getAddress()", "public List<Uri> getParticipants()", "public Bundle getExtras()", "public int getVideoState()", "public String getTelecomCallId()", "public boolean shouldShowIncomingCallUi()", "public boolean isAdhocConferenceCall()", "public ParcelFileDescriptor getRttPipeToInCall()", "public ParcelFileDescriptor getRttPipeFromInCall()", "public Connection.RttTextStream getRttTextStream()", "public boolean isRequestingRtt()", "public String toString()", "private static String bundleToString(Bundle extras)", "public int describeContents()", "public void writeToParcel(Parcel destination, int flags)" ]
}