{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/PipedWriter.java",
  "packageName" : "java.io",
  "className" : "PipedWriter",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "sink",
    "type" : "PipedReader",
    "comment" : " REMIND: identification of the read and write sides needs to be\n       more sophisticated.  Either using thread groups (but what about\n       pipes within a thread?) or using finalization (but it may be a\n       long time until the next GC). ",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : " This flag records the open status of this particular writer. It\n     * is independent of the status flags defined in PipedReader. It is\n     * used to do a sanity check on connect.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public synchronized void connect(PipedReader snk) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Connects this piped writer to a receiver. If this object\n     * is already connected to some other piped reader, an\n     * <code>IOException</code> is thrown.\n     * <p>\n     * If <code>snk</code> is an unconnected piped reader and\n     * <code>src</code> is an unconnected piped writer, they may\n     * be connected by either the call:\n     * <blockquote><pre>\n     * src.connect(snk)</pre></blockquote>\n     * or the call:\n     * <blockquote><pre>\n     * snk.connect(src)</pre></blockquote>\n     * The two calls have the same effect.\n     *\n     * @param      snk   the piped reader to connect to.\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(int c) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified <code>char</code> to the piped output stream.\n     * If a thread was reading data characters from the connected piped input\n     * stream, but the thread is no longer alive, then an\n     * <code>IOException</code> is thrown.\n     * <p>\n     * Implements the <code>write</code> method of <code>Writer</code>.\n     *\n     * @param      c   the <code>char</code> to be written.\n     * @exception  IOException  if the pipe is\n     *          <a href=PipedOutputStream.html#BROKEN> <code>broken</code></a>,\n     *          {@link #connect(java.io.PipedReader) unconnected}, closed\n     *          or an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedReader)" ]
  }, {
    "name" : "public void write(char[] cbuf, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} characters from the specified character array\n     * starting at offset {@code off} to this piped output stream.\n     * This method blocks until all the characters are written to the output\n     * stream.\n     * If a thread was reading data characters from the connected piped input\n     * stream, but the thread is no longer alive, then an\n     * {@code IOException} is thrown.\n     *\n     * @param      cbuf  the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of characters to write.\n     *\n     * @throws  IndexOutOfBoundsException\n     *          If {@code off} is negative, or {@code len} is negative,\n     *          or {@code off + len} is negative or greater than the length\n     *          of the given array\n     *\n     * @throws  IOException  if the pipe is\n     *          <a href=PipedOutputStream.html#BROKEN><code>broken</code></a>,\n     *          {@link #connect(java.io.PipedReader) unconnected}, closed\n     *          or an I/O error occurs.\n     ",
    "links" : [ "#connect(java.io.PipedReader)" ]
  }, {
    "name" : "public synchronized void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream and forces any buffered output characters\n     * to be written out.\n     * This will notify any readers that characters are waiting in the pipe.\n     *\n     * @exception  IOException  if the pipe is closed, or an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this piped output stream and releases any system resources\n     * associated with this stream. This stream may no longer be used for\n     * writing characters.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public synchronized void connect(PipedReader snk) throws IOException", "public void write(int c) throws IOException", "public void write(char[] cbuf, int off, int len) throws IOException", "public synchronized void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "sink", "closed" ]
}