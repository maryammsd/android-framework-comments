{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/compiler/OpCodes.java",
  "packageName" : "org.apache.xpath.compiler",
  "className" : "OpCodes",
  "comment" : "\n * Operations codes for XPath.\n *\n * Code for the descriptions of the operations codes:\n * [UPPER CASE] indicates a literal value,\n * [lower case] is a description of a value,\n *      ([length] always indicates the length of the operation,\n *       including the operations code and the length integer.)\n * {UPPER CASE} indicates the given production,\n * {description} is the description of a new production,\n *      (For instance, {boolean expression} means some expression\n *       that should be resolved to a boolean.)\n *  * means that it occurs zero or more times,\n *  + means that it occurs one or more times,\n *  ? means that it is optional.\n *\n * returns: indicates what the production should return.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ENDOP",
    "type" : "int",
    "comment" : "\n   * [ENDOP]\n   * Some operators may like to have a terminator.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "EMPTY",
    "type" : "int",
    "comment" : "\n   * [EMPTY]\n   * Empty slot to indicate NULL.\n   ",
    "links" : [ ]
  }, {
    "name" : "ELEMWILDCARD",
    "type" : "int",
    "comment" : "\n   * [ELEMWILDCARD]\n   * Means ELEMWILDCARD (\"*\"), used instead\n   * of string index in some places.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_XPATH",
    "type" : "int",
    "comment" : "\n   * [OP_XPATH]\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XNodeSet\n   *  XNumber\n   *  XString\n   *  XBoolean\n   *  XRTree\n   *  XObject\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_OR",
    "type" : "int",
    "comment" : "\n   * [OP_OR]\n   * [length]\n   *  {boolean expression}\n   *  {boolean expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_AND",
    "type" : "int",
    "comment" : "\n   * [OP_AND]\n   * [length]\n   *  {boolean expression}\n   *  {boolean expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_NOTEQUALS",
    "type" : "int",
    "comment" : "\n   * [OP_NOTEQUALS]\n   * [length]\n   *  {expression}\n   *  {expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_EQUALS",
    "type" : "int",
    "comment" : "\n   * [OP_EQUALS]\n   * [length]\n   *  {expression}\n   *  {expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_LTE",
    "type" : "int",
    "comment" : "\n   * [OP_LTE] (less-than-or-equals)\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_LT",
    "type" : "int",
    "comment" : "\n   * [OP_LT] (less-than)\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_GTE",
    "type" : "int",
    "comment" : "\n   * [OP_GTE] (greater-than-or-equals)\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_GT",
    "type" : "int",
    "comment" : "\n   * [OP_GT] (greater-than)\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_PLUS",
    "type" : "int",
    "comment" : "\n   * [OP_PLUS]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_MINUS",
    "type" : "int",
    "comment" : "\n   * [OP_MINUS]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_MULT",
    "type" : "int",
    "comment" : "\n   * [OP_MULT]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_DIV",
    "type" : "int",
    "comment" : "\n   * [OP_DIV]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_MOD",
    "type" : "int",
    "comment" : "\n   * [OP_MOD]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_QUO",
    "type" : "int",
    "comment" : "\n   * [OP_QUO]\n   * [length]\n   *  {number expression}\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_NEG",
    "type" : "int",
    "comment" : "\n   * [OP_NEG]\n   * [length]\n   *  {number expression}\n   *\n   * returns:\n   *  XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_STRING",
    "type" : "int",
    "comment" : "\n   * [OP_STRING] (cast operation)\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XString\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_BOOL",
    "type" : "int",
    "comment" : "\n   * [OP_BOOL] (cast operation)\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_NUMBER",
    "type" : "int",
    "comment" : "\n   * [OP_NUMBER] (cast operation)\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_UNION",
    "type" : "int",
    "comment" : "\n   * [OP_UNION]\n   * [length]\n   *  {PathExpr}+\n   *\n   * returns:\n   *  XNodeSet\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_LITERAL",
    "type" : "int",
    "comment" : "\n   * [OP_LITERAL]\n   * [3]\n   * [index to token]\n   *\n   * returns:\n   *  XString\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "FIRST_NODESET_OP",
    "type" : "int",
    "comment" : " The low opcode for nodesets, needed by getFirstPredicateOpPos and \n   *  getNextStepPos.          ",
    "links" : [ ]
  }, {
    "name" : "OP_VARIABLE",
    "type" : "int",
    "comment" : "\n   * [OP_VARIABLE]\n   * [4]\n   * [index to namespace token, or EMPTY]\n   * [index to function name token]\n   *\n   * returns:\n   *  XString\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_GROUP",
    "type" : "int",
    "comment" : "\n   * [OP_GROUP]\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XNodeSet\n   *  XNumber\n   *  XString\n   *  XBoolean\n   *  XRTree\n   *  XObject\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_EXTFUNCTION",
    "type" : "int",
    "comment" : "\n   * [OP_EXTFUNCTION] (Extension function.)\n   * [length]\n   * [index to namespace token]\n   * [index to function name token]\n   *  {OP_ARGUMENT}\n   *\n   * returns:\n   *  XNodeSet\n   *  XNumber\n   *  XString\n   *  XBoolean\n   *  XRTree\n   *  XObject\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_FUNCTION",
    "type" : "int",
    "comment" : "\n   * [OP_FUNCTION]\n   * [length]\n   * [FUNC_name]\n   *  {OP_ARGUMENT}\n   * [ENDOP]\n   *\n   * returns:\n   *  XNodeSet\n   *  XNumber\n   *  XString\n   *  XBoolean\n   *  XRTree\n   *  XObject\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "LAST_NODESET_OP",
    "type" : "int",
    "comment" : " The last opcode for stuff that can be a nodeset.         ",
    "links" : [ ]
  }, {
    "name" : "OP_ARGUMENT",
    "type" : "int",
    "comment" : "\n   * [OP_ARGUMENT] (Function argument.)\n   * [length]\n   *  {expression}\n   *\n   * returns:\n   *  XNodeSet\n   *  XNumber\n   *  XString\n   *  XBoolean\n   *  XRTree\n   *  XObject\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_NUMBERLIT",
    "type" : "int",
    "comment" : "\n   * [OP_NUMBERLIT] (Number literal.)\n   * [3]\n   * [index to token]\n   *\n   * returns:\n   *  XString\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_LOCATIONPATH",
    "type" : "int",
    "comment" : "\n   * [OP_LOCATIONPATH]\n   * [length]\n   *   {FROM_stepType}\n   * | {function}\n   * {predicate}\n   * [ENDOP]\n   *\n   * (Note that element and attribute namespaces and\n   * names can be wildcarded '*'.)\n   *\n   * returns:\n   *  XNodeSet\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_PREDICATE",
    "type" : "int",
    "comment" : "\n   * [OP_PREDICATE]\n   * [length]\n   *  {expression}\n   * [ENDOP] (For safety)\n   *\n   * returns:\n   *  XBoolean or XNumber\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_MATCHPATTERN",
    "type" : "int",
    "comment" : "\n   * [OP_MATCHPATTERN]\n   * [length]\n   *  {PathExpr}+\n   *\n   * returns:\n   *  XNodeSet\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "OP_LOCATIONPATHPATTERN",
    "type" : "int",
    "comment" : "\n   * [OP_LOCATIONPATHPATTERN]\n   * [length]\n   *   {FROM_stepType}\n   * | {function}{predicate}\n   * [ENDOP]\n   * returns:\n   *  XNodeSet\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_COMMENT",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_COMMENT]\n   * No size or arguments.\n   * Note: must not overlap function OP number!\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_TEXT",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_TEXT]\n   * No size or arguments.\n   * Note: must not overlap function OP number!\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_PI",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_PI]\n   * [index to token]\n   * Note: must not overlap function OP number!\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_NODE",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_NODE]\n   * No size or arguments.\n   * Note: must not overlap function OP number!\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODENAME",
    "type" : "int",
    "comment" : "\n   * [NODENAME]\n   * [index to ns token or EMPTY]\n   * [index to name token]\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_ROOT",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_ROOT]\n   * No size or arguments.\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_ANYELEMENT",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_ANY]\n   * No size or arguments.\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "NODETYPE_FUNCTEST",
    "type" : "int",
    "comment" : "\n   * [NODETYPE_ANY]\n   * No size or arguments.\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "AXES_START_TYPES",
    "type" : "int",
    "comment" : "\n   * [FROM_stepType]\n   * [length, including predicates]\n   * [length of just the step, without the predicates]\n   * {node test}\n   * {predicates}?\n   *\n   * returns:\n   *  XBoolean\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "FROM_ANCESTORS",
    "type" : "int",
    "comment" : " ancestor axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_ANCESTORS_OR_SELF",
    "type" : "int",
    "comment" : " ancestor-or-self axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_ATTRIBUTES",
    "type" : "int",
    "comment" : " attribute axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_CHILDREN",
    "type" : "int",
    "comment" : " children axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_DESCENDANTS",
    "type" : "int",
    "comment" : " descendants axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_DESCENDANTS_OR_SELF",
    "type" : "int",
    "comment" : " descendants-of-self axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_FOLLOWING",
    "type" : "int",
    "comment" : " following axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_FOLLOWING_SIBLINGS",
    "type" : "int",
    "comment" : " following-siblings axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_PARENT",
    "type" : "int",
    "comment" : " parent axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_PRECEDING",
    "type" : "int",
    "comment" : " preceding axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_PRECEDING_SIBLINGS",
    "type" : "int",
    "comment" : " preceding-sibling axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_SELF",
    "type" : "int",
    "comment" : " self axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_NAMESPACE",
    "type" : "int",
    "comment" : " namespace axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "FROM_ROOT",
    "type" : "int",
    "comment" : " '/' axes opcode.         ",
    "links" : [ ]
  }, {
    "name" : "MATCH_ATTRIBUTE",
    "type" : "int",
    "comment" : "\n   * For match patterns.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_ANY_ANCESTOR",
    "type" : "int",
    "comment" : "\n   * For match patterns.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "MATCH_IMMEDIATE_ANCESTOR",
    "type" : "int",
    "comment" : "\n   * For match patterns.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "AXES_END_TYPES",
    "type" : "int",
    "comment" : " The end of the axes types.    ",
    "links" : [ ]
  }, {
    "name" : "NEXT_FREE_ID",
    "type" : "int",
    "comment" : " The next free ID.  Please keep this up to date.  ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "ENDOP", "EMPTY", "ELEMWILDCARD", "OP_XPATH", "OP_OR", "OP_AND", "OP_NOTEQUALS", "OP_EQUALS", "OP_LTE", "OP_LT", "OP_GTE", "OP_GT", "OP_PLUS", "OP_MINUS", "OP_MULT", "OP_DIV", "OP_MOD", "OP_QUO", "OP_NEG", "OP_STRING", "OP_BOOL", "OP_NUMBER", "OP_UNION", "OP_LITERAL", "FIRST_NODESET_OP", "OP_VARIABLE", "OP_GROUP", "OP_EXTFUNCTION", "OP_FUNCTION", "LAST_NODESET_OP", "OP_ARGUMENT", "OP_NUMBERLIT", "OP_LOCATIONPATH", "OP_PREDICATE", "OP_MATCHPATTERN", "OP_LOCATIONPATHPATTERN", "NODETYPE_COMMENT", "NODETYPE_TEXT", "NODETYPE_PI", "NODETYPE_NODE", "NODENAME", "NODETYPE_ROOT", "NODETYPE_ANYELEMENT", "NODETYPE_FUNCTEST", "AXES_START_TYPES", "FROM_ANCESTORS", "FROM_ANCESTORS_OR_SELF", "FROM_ATTRIBUTES", "FROM_CHILDREN", "FROM_DESCENDANTS", "FROM_DESCENDANTS_OR_SELF", "FROM_FOLLOWING", "FROM_FOLLOWING_SIBLINGS", "FROM_PARENT", "FROM_PRECEDING", "FROM_PRECEDING_SIBLINGS", "FROM_SELF", "FROM_NAMESPACE", "FROM_ROOT", "MATCH_ATTRIBUTE", "MATCH_ANY_ANCESTOR", "MATCH_IMMEDIATE_ANCESTOR", "AXES_END_TYPES", "NEXT_FREE_ID" ]
}