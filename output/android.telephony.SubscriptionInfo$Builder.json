{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/telephony/SubscriptionInfo.java",
  "packageName" : "android.telephony",
  "className" : "Builder",
  "comment" : "\n     * The builder class of {@link SubscriptionInfo}.\n     *\n     * @hide\n     ",
  "links" : [ "android.telephony.SubscriptionInfo" ],
  "variables" : [ {
    "name" : "mId",
    "type" : "int",
    "comment" : "\n         * The subscription id.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIccId",
    "type" : "String",
    "comment" : "\n         * The ICCID of the SIM that is associated with this subscription, empty if unknown.\n         ",
    "links" : [ ]
  }, {
    "name" : "mSimSlotIndex",
    "type" : "int",
    "comment" : "\n         * The index of the SIM slot that currently contains the subscription and not necessarily\n         * unique and maybe {@link SubscriptionManager#INVALID_SIM_SLOT_INDEX} if unknown or the\n         * subscription is inactive.\n         ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX" ]
  }, {
    "name" : "mDisplayName",
    "type" : "CharSequence",
    "comment" : "\n         * The name displayed to the user that identifies this subscription. This name is used\n         * in Settings page and can be renamed by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCarrierName",
    "type" : "CharSequence",
    "comment" : "\n         * The name displayed to the user that identifies subscription provider name. This name\n         * is the SPN displayed in status bar and many other places. Can't be renamed by the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDisplayNameSource",
    "type" : "int",
    "comment" : "\n         * The source of the display name.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIconTint",
    "type" : "int",
    "comment" : "\n         * The color to be used for tinting the icon when displaying to the user.\n         ",
    "links" : [ ]
  }, {
    "name" : "mNumber",
    "type" : "String",
    "comment" : "\n         * The number presented to the user identify this subscription.\n         ",
    "links" : [ ]
  }, {
    "name" : "mDataRoaming",
    "type" : "int",
    "comment" : "\n         * Whether user enables data roaming for this subscription or not. Either\n         * {@link SubscriptionManager#DATA_ROAMING_ENABLE} or\n         * {@link SubscriptionManager#DATA_ROAMING_DISABLE}.\n         ",
    "links" : [ "android.telephony.SubscriptionManager#DATA_ROAMING_ENABLE", "android.telephony.SubscriptionManager#DATA_ROAMING_DISABLE" ]
  }, {
    "name" : "mIconBitmap",
    "type" : "Bitmap",
    "comment" : "\n         * SIM icon bitmap cache.\n         ",
    "links" : [ ]
  }, {
    "name" : "mMcc",
    "type" : "String",
    "comment" : "\n         * The mobile country code.\n         ",
    "links" : [ ]
  }, {
    "name" : "mMnc",
    "type" : "String",
    "comment" : "\n         * The mobile network code.\n         ",
    "links" : [ ]
  }, {
    "name" : "mEhplmns",
    "type" : "String[]",
    "comment" : "\n         * EHPLMNs associated with the subscription.\n         ",
    "links" : [ ]
  }, {
    "name" : "mHplmns",
    "type" : "String[]",
    "comment" : "\n         * HPLMNs associated with the subscription.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCountryIso",
    "type" : "String",
    "comment" : "\n         * The ISO Country code for the subscription's provider.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsEmbedded",
    "type" : "boolean",
    "comment" : "\n         * Whether the subscription is from eSIM.\n         ",
    "links" : [ ]
  }, {
    "name" : "mNativeAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n         * The native access rules for this subscription, if it is embedded and defines any. This\n         * does not include access rules for non-embedded subscriptions.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCardString",
    "type" : "String",
    "comment" : "\n         * The card string of the SIM card.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCardId",
    "type" : "int",
    "comment" : "\n         * The card ID of the SIM card which contains the subscription.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsOpportunistic",
    "type" : "boolean",
    "comment" : "\n         * Whether the subscription is opportunistic or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mGroupUuid",
    "type" : "ParcelUuid",
    "comment" : "\n         * The group UUID of the subscription group.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsGroupDisabled",
    "type" : "boolean",
    "comment" : "\n         * Whether group of the subscription is disabled. This is only useful if it's a grouped\n         * opportunistic subscription. In this case, if all primary (non-opportunistic)\n         * subscriptions in the group are deactivated (unplugged pSIM or deactivated eSIM profile),\n         * we should disable this opportunistic subscription.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "\n         * The carrier id.\n         *\n         * @see TelephonyManager#getSimCarrierId()\n         ",
    "links" : [ ]
  }, {
    "name" : "mProfileClass",
    "type" : "int",
    "comment" : "\n         * The profile class populated from the profile metadata if present. Otherwise, the profile\n         * class defaults to {@link SubscriptionManager#PROFILE_CLASS_UNSET} if there is no profile\n         * metadata or the subscription is not on an eUICC ({@link #isEmbedded} returns\n         * {@code false}).\n         ",
    "links" : [ "#isEmbedded", "android.telephony.SubscriptionManager#PROFILE_CLASS_UNSET" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "\n         * The subscription type.\n         ",
    "links" : [ ]
  }, {
    "name" : "mGroupOwner",
    "type" : "String",
    "comment" : "\n         * The owner package of group the subscription belongs to.\n         ",
    "links" : [ ]
  }, {
    "name" : "mCarrierConfigAccessRules",
    "type" : "UiccAccessRule[]",
    "comment" : "\n         * The carrier certificates for this subscription that are saved in carrier configs.\n         * This does not include access rules from the Uicc, whether embedded or non-embedded.\n         ",
    "links" : [ ]
  }, {
    "name" : "mAreUiccApplicationsEnabled",
    "type" : "boolean",
    "comment" : "\n         * Whether Uicc applications are configured to enable or not.\n         ",
    "links" : [ ]
  }, {
    "name" : "mPortIndex",
    "type" : "int",
    "comment" : "\n         * the port index of the Uicc card.\n         ",
    "links" : [ ]
  }, {
    "name" : "mUsageSetting",
    "type" : "int",
    "comment" : "\n         * Subscription's preferred usage setting.\n         ",
    "links" : [ ]
  }, {
    "name" : "mIsOnlyNonTerrestrialNetwork",
    "type" : "boolean",
    "comment" : "\n         * {@code true} if it is a non-terrestrial network subscription, {@code false} otherwise.\n         ",
    "links" : [ ]
  }, {
    "name" : "mTransferStatus",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mServiceCapabilities",
    "type" : "int",
    "comment" : "\n         * Service capabilities bitmasks the subscription supports.\n         ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setId(int id)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the subscription id.\n         *\n         * @param id The subscription id.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIccId(@Nullable String iccId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ICCID of the SIM that is associated with this subscription.\n         *\n         * @param iccId The ICCID of the SIM that is associated with this subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setSimSlotIndex(int simSlotIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the SIM index of the slot that currently contains the subscription. Set to\n         * {@link SubscriptionManager#INVALID_SIM_SLOT_INDEX} if the subscription is inactive.\n         *\n         * @param simSlotIndex The SIM slot index.\n         * @return The builder.\n         ",
    "links" : [ "android.telephony.SubscriptionManager#INVALID_SIM_SLOT_INDEX" ]
  }, {
    "name" : "public Builder setDisplayName(@Nullable CharSequence displayName)",
    "returnType" : "Builder",
    "comment" : "\n         * The name displayed to the user that identifies this subscription. This name is used\n         * in Settings page and can be renamed by the user.\n         *\n         * @param displayName The display name.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCarrierName(@Nullable CharSequence carrierName)",
    "returnType" : "Builder",
    "comment" : "\n         * The name displayed to the user that identifies subscription provider name. This name\n         * is the SPN displayed in status bar and many other places. Can't be renamed by the user.\n         *\n         * @param carrierName The carrier name.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDisplayNameSource(@SimDisplayNameSource int displayNameSource)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the source of the display name.\n         *\n         * @param displayNameSource The source of the display name.\n         * @return The builder.\n         *\n         * @see SubscriptionInfo#getDisplayName()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setIconTint(int iconTint)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the color to be used for tinting the icon when displaying to the user.\n         *\n         * @param iconTint The color to be used for tinting the icon when displaying to the user.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNumber(@Nullable String number)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the number presented to the user identify this subscription.\n         *\n         * @param number the number presented to the user identify this subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setDataRoaming(int dataRoaming)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether user enables data roaming for this subscription or not.\n         *\n         * @param dataRoaming Data roaming mode. Either\n         * {@link SubscriptionManager#DATA_ROAMING_ENABLE} or\n         * {@link SubscriptionManager#DATA_ROAMING_DISABLE}\n         * @return The builder.\n         ",
    "links" : [ "android.telephony.SubscriptionManager#DATA_ROAMING_ENABLE", "android.telephony.SubscriptionManager#DATA_ROAMING_DISABLE" ]
  }, {
    "name" : "public Builder setIcon(@Nullable Bitmap iconBitmap)",
    "returnType" : "Builder",
    "comment" : "\n         * Set SIM icon bitmap cache.\n         *\n         * @param iconBitmap SIM icon bitmap cache.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMcc(@Nullable String mcc)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the mobile country code.\n         *\n         * @param mcc The mobile country code.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setMnc(@Nullable String mnc)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the mobile network code.\n         *\n         * @param mnc Mobile network code.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEhplmns(@Nullable String[] ehplmns)",
    "returnType" : "Builder",
    "comment" : "\n         * Set EHPLMNs associated with the subscription.\n         *\n         * @param ehplmns EHPLMNs associated with the subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHplmns(@Nullable String[] hplmns)",
    "returnType" : "Builder",
    "comment" : "\n         * Set HPLMNs associated with the subscription.\n         *\n         * @param hplmns HPLMNs associated with the subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCountryIso(@Nullable String countryIso)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the ISO country code for the subscription's provider.\n         *\n         * @param countryIso The ISO country code for the subscription's provider.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setEmbedded(boolean isEmbedded)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the subscription is from eSIM or not.\n         *\n         * @param isEmbedded {@code true} if the subscription is from eSIM.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setNativeAccessRules(@Nullable UiccAccessRule[] nativeAccessRules)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the native access rules for this subscription, if it is embedded and defines any.\n         * This does not include access rules for non-embedded subscriptions.\n         *\n         * @param nativeAccessRules The native access rules for this subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCardString(@Nullable String cardString)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the card string of the SIM card.\n         *\n         * @param cardString The card string of the SIM card.\n         * @return The builder.\n         *\n         * @see #getCardString()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCardId(int cardId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the card ID of the SIM card which contains the subscription.\n         *\n         * @param cardId The card ID of the SIM card which contains the subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOpportunistic(boolean isOpportunistic)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the subscription is opportunistic or not.\n         *\n         * @param isOpportunistic {@code true} if the subscription is opportunistic.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setGroupUuid(@Nullable String groupUuid)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the group UUID of the subscription group.\n         *\n         * @param groupUuid The group UUID.\n         * @return The builder.\n         *\n         * @see #getGroupUuid()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setGroupDisabled(boolean isGroupDisabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Whether group of the subscription is disabled. This is only useful if it's a grouped\n         * opportunistic subscription. In this case, if all primary (non-opportunistic)\n         * subscriptions in the group are deactivated (unplugged pSIM or deactivated eSIM profile),\n         * we should disable this opportunistic subscription.\n         *\n         * @param isGroupDisabled {@code true} if group of the subscription is disabled.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCarrierId(int carrierId)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the subscription carrier id.\n         *\n         * @param carrierId The carrier id.\n         * @return The builder\n         *\n         * @see TelephonyManager#getSimCarrierId()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setProfileClass(@ProfileClass int profileClass)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the profile class populated from the profile metadata if present.\n         *\n         * @param profileClass the profile class populated from the profile metadata if present.\n         * @return The builder\n         *\n         * @see #getProfileClass()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setType(@SubscriptionType int type)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the subscription type.\n         *\n         * @param type Subscription type.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setGroupOwner(@Nullable String groupOwner)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the owner package of group the subscription belongs to.\n         *\n         * @param groupOwner Owner package of group the subscription belongs to.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCarrierConfigAccessRules(@Nullable UiccAccessRule[] carrierConfigAccessRules)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the carrier certificates for this subscription that are saved in carrier configs.\n         * This does not include access rules from the Uicc, whether embedded or non-embedded.\n         *\n         * @param carrierConfigAccessRules The carrier certificates for this subscription.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUiccApplicationsEnabled(boolean uiccApplicationsEnabled)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether Uicc applications are configured to enable or not.\n         *\n         * @param uiccApplicationsEnabled {@code true} if Uicc applications are configured to\n         * enable.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPortIndex(int portIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the port index of the Uicc card.\n         *\n         * @param portIndex The port index of the Uicc card.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setUsageSetting(@UsageSetting int usageSetting)",
    "returnType" : "Builder",
    "comment" : "\n         * Set subscription's preferred usage setting.\n         *\n         * @param usageSetting Subscription's preferred usage setting.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setOnlyNonTerrestrialNetwork(boolean isOnlyNonTerrestrialNetwork)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the subscription is exclusively used for non-terrestrial networks or not.\n         *\n         * @param isOnlyNonTerrestrialNetwork {@code true} if the subscription is for NTN,\n         * {@code false} otherwise.\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setServiceCapabilities(@NonNull @SubscriptionManager.ServiceCapability Set<Integer> capabilities)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the service capabilities that the subscription supports.\n         *\n         * @param capabilities Bitmask combination of SubscriptionManager\n         *                     .SERVICE_CAPABILITY_XXX.\n         * @return The builder.\n         *\n         * @throws IllegalArgumentException when any capability is not supported.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransferStatus(@TransferStatus int status)",
    "returnType" : "Builder",
    "comment" : "\n         * Set subscription's transfer status\n         *\n         * @param status Subscription's transfer status\n         * @return The builder.\n         ",
    "links" : [ ]
  }, {
    "name" : "public SubscriptionInfo build()",
    "returnType" : "SubscriptionInfo",
    "comment" : "\n         * Build the {@link SubscriptionInfo}.\n         *\n         * @return The {@link SubscriptionInfo} instance.\n         ",
    "links" : [ "android.telephony.SubscriptionInfo" ]
  } ],
  "methodNames" : [ "public Builder setId(int id)", "public Builder setIccId(@Nullable String iccId)", "public Builder setSimSlotIndex(int simSlotIndex)", "public Builder setDisplayName(@Nullable CharSequence displayName)", "public Builder setCarrierName(@Nullable CharSequence carrierName)", "public Builder setDisplayNameSource(@SimDisplayNameSource int displayNameSource)", "public Builder setIconTint(int iconTint)", "public Builder setNumber(@Nullable String number)", "public Builder setDataRoaming(int dataRoaming)", "public Builder setIcon(@Nullable Bitmap iconBitmap)", "public Builder setMcc(@Nullable String mcc)", "public Builder setMnc(@Nullable String mnc)", "public Builder setEhplmns(@Nullable String[] ehplmns)", "public Builder setHplmns(@Nullable String[] hplmns)", "public Builder setCountryIso(@Nullable String countryIso)", "public Builder setEmbedded(boolean isEmbedded)", "public Builder setNativeAccessRules(@Nullable UiccAccessRule[] nativeAccessRules)", "public Builder setCardString(@Nullable String cardString)", "public Builder setCardId(int cardId)", "public Builder setOpportunistic(boolean isOpportunistic)", "public Builder setGroupUuid(@Nullable String groupUuid)", "public Builder setGroupDisabled(boolean isGroupDisabled)", "public Builder setCarrierId(int carrierId)", "public Builder setProfileClass(@ProfileClass int profileClass)", "public Builder setType(@SubscriptionType int type)", "public Builder setGroupOwner(@Nullable String groupOwner)", "public Builder setCarrierConfigAccessRules(@Nullable UiccAccessRule[] carrierConfigAccessRules)", "public Builder setUiccApplicationsEnabled(boolean uiccApplicationsEnabled)", "public Builder setPortIndex(int portIndex)", "public Builder setUsageSetting(@UsageSetting int usageSetting)", "public Builder setOnlyNonTerrestrialNetwork(boolean isOnlyNonTerrestrialNetwork)", "public Builder setServiceCapabilities(@NonNull @SubscriptionManager.ServiceCapability Set<Integer> capabilities)", "public Builder setTransferStatus(@TransferStatus int status)", "public SubscriptionInfo build()" ],
  "variableNames" : [ "mId", "mIccId", "mSimSlotIndex", "mDisplayName", "mCarrierName", "mDisplayNameSource", "mIconTint", "mNumber", "mDataRoaming", "mIconBitmap", "mMcc", "mMnc", "mEhplmns", "mHplmns", "mCountryIso", "mIsEmbedded", "mNativeAccessRules", "mCardString", "mCardId", "mIsOpportunistic", "mGroupUuid", "mIsGroupDisabled", "mCarrierId", "mProfileClass", "mType", "mGroupOwner", "mCarrierConfigAccessRules", "mAreUiccApplicationsEnabled", "mPortIndex", "mUsageSetting", "mIsOnlyNonTerrestrialNetwork", "mTransferStatus", "mServiceCapabilities" ]
}