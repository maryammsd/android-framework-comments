{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telecom/Log.java",
  "packageName" : "android.telecom",
  "className" : "Log",
  "comment" : "\n * Manages logging for the entire module.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "EXTENDED_LOGGING_DURATION_MILLIS",
    "type" : "long",
    "comment" : " 30 minutes",
    "links" : [ ]
  }, {
    "name" : "EVENTS_TO_CACHE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENTS_TO_CACHE_DEBUG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUM_DIALABLE_DIGITS_TO_LOG",
    "type" : "int",
    "comment" : "\n     * When generating a bug report, include the last X dialable digits when logging phone numbers.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : " Generic tag for all Telecom logging",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "INFO",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VERBOSE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WARN",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ERROR",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORCE_LOGGING",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_BUILD",
    "type" : "boolean",
    "comment" : " STOP SHIP if true ",
    "links" : [ ]
  }, {
    "name" : "sSingletonSync",
    "type" : "Object",
    "comment" : " Used to synchronize singleton logging lazy initialization",
    "links" : [ ]
  }, {
    "name" : "sEventManager",
    "type" : "EventManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSessionManager",
    "type" : "SessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIsUserExtendedLoggingEnabled",
    "type" : "boolean",
    "comment" : "\n     * Tracks whether user-activated extended logging is enabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "sUserExtendedLoggingStopTime",
    "type" : "long",
    "comment" : "\n     * The time when user-activated extended logging should be ended.  Used to determine when\n     * extended logging should automatically be disabled.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void d(String prefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void d(Object objectPrefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void i(String prefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void i(Object objectPrefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void v(String prefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void v(Object objectPrefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void w(String prefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void w(Object objectPrefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void e(String prefix, Throwable tr, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void e(Object objectPrefix, Throwable tr, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void wtf(String prefix, Throwable tr, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void wtf(Object objectPrefix, Throwable tr, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void wtf(String prefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void wtf(Object objectPrefix, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setSessionContext(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void startSession(String shortMethodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void startSession(Session.Info info, String shortMethodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void startSession(String shortMethodName, String callerIdentification)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void startSession(Session.Info info, String shortMethodName, String callerIdentification)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Session createSubsession()",
    "returnType" : "Session",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Session.Info getExternalSession()",
    "returnType" : "Session.Info",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static Session.Info getExternalSession(@NonNull String ownerInfo)",
    "returnType" : "Session.Info",
    "comment" : "\n     * Retrieves external session information, providing a context for the recipient of the session\n     * info where the external session came from.\n     * @param ownerInfo The external owner info.\n     * @return New {@link Session.Info} instance with owner info set.\n     ",
    "links" : [ "Session.Info" ]
  }, {
    "name" : "public static void cancelSubsession(Session subsession)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void continueSession(Session subsession, String shortMethodName)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void endSession()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void registerSessionListener(SessionManager.ISessionListener l)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getSessionId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addEvent(EventManager.Loggable recordEntry, String event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addEvent(EventManager.Loggable recordEntry, String event, Object data)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addEvent(EventManager.Loggable recordEntry, String event, String format, Object... args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void registerEventListener(EventManager.EventListener e)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void addRequestResponsePair(EventManager.TimedEventPair p)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpEvents(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void dumpEventsTimeline(IndentingPrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Dumps the events in a timeline format.\n     * @param pw The {@link IndentingPrintWriter} to write to.\n     * @hide\n     ",
    "links" : [ "com.android.internal.util.IndentingPrintWriter" ]
  }, {
    "name" : "public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Enable or disable extended telecom logging.\n     *\n     * @param isExtendedLoggingEnabled {@code true} if extended logging should be enabled,\n     *          {@code false} if it should be disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static EventManager getEventManager()",
    "returnType" : "EventManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static SessionManager getSessionManager()",
    "returnType" : "SessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setTag(String tag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void maybeDisableLogging()",
    "returnType" : "void",
    "comment" : "\n     * If user enabled extended logging is enabled and the time limit has passed, disables the\n     * extended logging.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLoggable(int level)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String piiHandle(Object pii)",
    "returnType" : "String",
    "comment" : "\n     * Generates an obfuscated string for a calling handle in {@link Uri} format, or a raw phone\n     * phone number in {@link String} format.\n     * @param pii The information to obfuscate.\n     * @return The obfuscated string.\n     ",
    "links" : [ "android.net.Uri", "String" ]
  }, {
    "name" : "private static void obfuscatePhoneNumber(StringBuilder sb, String phoneNumber)",
    "returnType" : "void",
    "comment" : "\n     * Obfuscates a phone number, allowing NUM_DIALABLE_DIGITS_TO_LOG digits to be exposed for the\n     * phone number.\n     * @param sb String buffer to write obfuscated number to.\n     * @param phoneNumber The number to obfuscate.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getDialableCount(String toCount)",
    "returnType" : "int",
    "comment" : "\n     * Determines the number of dialable characters in a string.\n     * @param toCount The string to count dialable characters in.\n     * @return The count of dialable characters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String pii(Object pii)",
    "returnType" : "String",
    "comment" : "\n     * Redact personally identifiable information for production users.\n     * If we are running in verbose mode, return the original string,\n     * and return \"***\" otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getPrefixFromObject(Object obj)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String buildMessage(String prefix, String format, Object... args)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getPackageAbbreviation(ComponentName componentName)",
    "returnType" : "String",
    "comment" : "\n     * Generates an abbreviated version of the package name from a component.\n     * E.g. com.android.phone becomes cap\n     * @param componentName The component name to abbreviate.\n     * @return Abbreviation of empty string if component is null.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getPackageAbbreviation(String packageName)",
    "returnType" : "String",
    "comment" : "\n     * Generates an abbreviated version of the package name.\n     * E.g. com.android.phone becomes cap\n     * @param packageName The packageName name to abbreviate.\n     * @return Abbreviation of empty string if package is null.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "EXTENDED_LOGGING_DURATION_MILLIS", "EVENTS_TO_CACHE", "EVENTS_TO_CACHE_DEBUG", "NUM_DIALABLE_DIGITS_TO_LOG", "TAG", "DEBUG", "INFO", "VERBOSE", "WARN", "ERROR", "FORCE_LOGGING", "USER_BUILD", "sSingletonSync", "sEventManager", "sSessionManager", "sIsUserExtendedLoggingEnabled", "sUserExtendedLoggingStopTime" ],
  "methodNames" : [ "public static void d(String prefix, String format, Object... args)", "public static void d(Object objectPrefix, String format, Object... args)", "public static void i(String prefix, String format, Object... args)", "public static void i(Object objectPrefix, String format, Object... args)", "public static void v(String prefix, String format, Object... args)", "public static void v(Object objectPrefix, String format, Object... args)", "public static void w(String prefix, String format, Object... args)", "public static void w(Object objectPrefix, String format, Object... args)", "public static void e(String prefix, Throwable tr, String format, Object... args)", "public static void e(Object objectPrefix, Throwable tr, String format, Object... args)", "public static void wtf(String prefix, Throwable tr, String format, Object... args)", "public static void wtf(Object objectPrefix, Throwable tr, String format, Object... args)", "public static void wtf(String prefix, String format, Object... args)", "public static void wtf(Object objectPrefix, String format, Object... args)", "public static void setSessionContext(Context context)", "public static void startSession(String shortMethodName)", "public static void startSession(Session.Info info, String shortMethodName)", "public static void startSession(String shortMethodName, String callerIdentification)", "public static void startSession(Session.Info info, String shortMethodName, String callerIdentification)", "public static Session createSubsession()", "public static Session.Info getExternalSession()", "public static Session.Info getExternalSession(@NonNull String ownerInfo)", "public static void cancelSubsession(Session subsession)", "public static void continueSession(Session subsession, String shortMethodName)", "public static void endSession()", "public static void registerSessionListener(SessionManager.ISessionListener l)", "public static String getSessionId()", "public static void addEvent(EventManager.Loggable recordEntry, String event)", "public static void addEvent(EventManager.Loggable recordEntry, String event, Object data)", "public static void addEvent(EventManager.Loggable recordEntry, String event, String format, Object... args)", "public static void registerEventListener(EventManager.EventListener e)", "public static void addRequestResponsePair(EventManager.TimedEventPair p)", "public static void dumpEvents(IndentingPrintWriter pw)", "public static void dumpEventsTimeline(IndentingPrintWriter pw)", "public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled)", "private static EventManager getEventManager()", "public static SessionManager getSessionManager()", "public static void setTag(String tag)", "private static void maybeDisableLogging()", "public static boolean isLoggable(int level)", "public static String piiHandle(Object pii)", "private static void obfuscatePhoneNumber(StringBuilder sb, String phoneNumber)", "private static int getDialableCount(String toCount)", "public static String pii(Object pii)", "private static String getPrefixFromObject(Object obj)", "private static String buildMessage(String prefix, String format, Object... args)", "public static String getPackageAbbreviation(ComponentName componentName)", "public static String getPackageAbbreviation(String packageName)" ]
}