{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaTranscodeManager.java",
  "packageName" : "android.media",
  "className" : "MediaTranscodeManager",
  "comment" : "\n * MediaTranscodeManager provides an interface to the system's media transcode service.\n * Transcode requests are put in a queue and processed in order. When a transcode operation is\n * completed the caller is notified via its OnTranscodingFinishedListener. In the meantime the\n * caller may use the returned TranscodingJob object to cancel or check the status of a specific\n * transcode operation.\n * The currently supported media types are video and still images.\n *\n * TODO(lnilsson): Add sample code when API is settled.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ID_INVALID",
    "type" : "long",
    "comment" : " Invalid ID passed from native means the request was never enqueued.",
    "links" : [ ]
  }, {
    "name" : "EVENT_JOB_STARTED",
    "type" : "int",
    "comment" : " Events passed from native.",
    "links" : [ ]
  }, {
    "name" : "EVENT_JOB_PROGRESSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EVENT_JOB_FINISHED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sMediaTranscodeManager",
    "type" : "MediaTranscodeManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingTranscodingJobs",
    "type" : "ConcurrentMap<Long, TranscodingJob>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native void native_init()",
    "returnType" : "void",
    "comment" : " Initializes the native library.",
    "links" : [ ]
  }, {
    "name" : "private native long native_requestUniqueJobID()",
    "returnType" : "long",
    "comment" : " Requests a new job ID from the native service.",
    "links" : [ ]
  }, {
    "name" : "private native boolean native_enqueueTranscodingRequest(long id, @NonNull TranscodingRequest transcodingRequest, @NonNull Context context)",
    "returnType" : "boolean",
    "comment" : " Enqueues a transcoding request to the native service.",
    "links" : [ ]
  }, {
    "name" : "private native void native_cancelTranscodingRequest(long id)",
    "returnType" : "void",
    "comment" : " Cancels an enqueued transcoding request.",
    "links" : [ ]
  }, {
    "name" : "private void postEventFromNative(@Event int event, long id, int arg)",
    "returnType" : "void",
    "comment" : " Events posted from the native service.",
    "links" : [ ]
  }, {
    "name" : "public static MediaTranscodeManager getInstance(@NonNull Context context)",
    "returnType" : "MediaTranscodeManager",
    "comment" : "\n     * Gets the MediaTranscodeManager singleton instance.\n     * @param context The application context.\n     * @return the {@link MediaTranscodeManager} singleton instance.\n     ",
    "links" : [ "android.media.MediaTranscodeManager" ]
  }, {
    "name" : "public TranscodingJob enqueueTranscodingRequest(@NonNull TranscodingRequest transcodingRequest, @NonNull @CallbackExecutor Executor listenerExecutor, @NonNull OnTranscodingFinishedListener listener)",
    "returnType" : "TranscodingJob",
    "comment" : "\n     * Enqueues a TranscodingRequest for execution.\n     * @param transcodingRequest The TranscodingRequest to enqueue.\n     * @param listenerExecutor Executor on which the listener is notified.\n     * @param listener Listener to get notified when the transcoding job is finished.\n     * @return A TranscodingJob for this operation.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "ID_INVALID", "EVENT_JOB_STARTED", "EVENT_JOB_PROGRESSED", "EVENT_JOB_FINISHED", "sMediaTranscodeManager", "mPendingTranscodingJobs", "mContext" ],
  "methodNames" : [ "private static native void native_init()", "private native long native_requestUniqueJobID()", "private native boolean native_enqueueTranscodingRequest(long id, @NonNull TranscodingRequest transcodingRequest, @NonNull Context context)", "private native void native_cancelTranscodingRequest(long id)", "private void postEventFromNative(@Event int event, long id, int arg)", "public static MediaTranscodeManager getInstance(@NonNull Context context)", "public TranscodingJob enqueueTranscodingRequest(@NonNull TranscodingRequest transcodingRequest, @NonNull @CallbackExecutor Executor listenerExecutor, @NonNull OnTranscodingFinishedListener listener)" ]
}