{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/method/MetaKeyKeyListener.java",
  "packageName" : "android.text.method",
  "className" : "MetaKeyKeyListener",
  "comment" : "\n * This base class encapsulates the behavior for tracking the state of\n * meta keys such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text.\n * <p>\n * Key listeners that care about meta state should inherit from this class;\n * you should not instantiate this class directly in a client.\n * </p><p>\n * This class provides two mechanisms for tracking meta state that can be used\n * together or independently.\n * </p>\n * <ul>\n * <li>Methods such as {@link #handleKeyDown(long, int, KeyEvent)} and\n * {@link #getMetaState(long)} operate on a meta key state bit mask.</li>\n * <li>Methods such as {@link #onKeyDown(View, Editable, int, KeyEvent)} and\n * {@link #getMetaState(CharSequence, int)} operate on meta key state flags stored\n * as spans in an {@link Editable} text buffer.  The spans only describe the current\n * meta key state of the text editor; they do not carry any positional information.</li>\n * </ul>\n * <p>\n * The behavior of this class varies according to the keyboard capabilities\n * described by the {@link KeyCharacterMap} of the keyboard device such as\n * the {@link KeyCharacterMap#getModifierBehavior() key modifier behavior}.\n * </p><p>\n * {@link MetaKeyKeyListener} implements chorded and toggled key modifiers.\n * When key modifiers are toggled into a latched or locked state, the state\n * of the modifier is stored in the {@link Editable} text buffer or in a\n * meta state integer managed by the client.  These latched or locked modifiers\n * should be considered to be held <b>in addition to</b> those that the\n * keyboard already reported as being pressed in {@link KeyEvent#getMetaState()}.\n * In other words, the {@link MetaKeyKeyListener} augments the meta state\n * provided by the keyboard; it does not replace it.  This distinction is important\n * to ensure that meta keys not handled by {@link MetaKeyKeyListener} such as\n * {@link KeyEvent#KEYCODE_CAPS_LOCK} or {@link KeyEvent#KEYCODE_NUM_LOCK} are\n * taken into consideration.\n * </p><p>\n * To ensure correct meta key behavior, the following pattern should be used\n * when mapping key codes to characters:\n * </p>\n * <code>\n * private char getUnicodeChar(TextKeyListener listener, KeyEvent event, Editable textBuffer) {\n *     // Use the combined meta states from the event and the key listener.\n *     int metaState = event.getMetaState() | listener.getMetaState(textBuffer);\n *     return event.getUnicodeChar(metaState);\n * }\n * </code>\n ",
  "links" : [ "android.view.KeyCharacterMap#getModifierBehavior()", "#handleKeyDown(long", "#onKeyDown(View", "android.view.KeyEvent#KEYCODE_CAPS_LOCK", "#getMetaState(long)", "#getMetaState(CharSequence", "android.view.KeyCharacterMap", "android.view.KeyEvent#getMetaState()", "android.view.KeyEvent#KEYCODE_NUM_LOCK", "android.text.method.MetaKeyKeyListener", "android.text.Editable" ],
  "variables" : [ {
    "name" : "META_SHIFT_ON",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the SHIFT key is on.\n     * Value equals {@link KeyEvent#META_SHIFT_ON}.\n     ",
    "links" : [ "android.view.KeyEvent#META_SHIFT_ON" ]
  }, {
    "name" : "META_ALT_ON",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the ALT key is on.\n     * Value equals {@link KeyEvent#META_ALT_ON}.\n     ",
    "links" : [ "android.view.KeyEvent#META_ALT_ON" ]
  }, {
    "name" : "META_SYM_ON",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the SYM key is on.\n     * Value equals {@link KeyEvent#META_SYM_ON}.\n     ",
    "links" : [ "android.view.KeyEvent#META_SYM_ON" ]
  }, {
    "name" : "META_CAP_LOCKED",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the SHIFT key is locked in CAPS mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "META_ALT_LOCKED",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the ALT key is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SYM_LOCKED",
    "type" : "int",
    "comment" : "\n     * Flag that indicates that the SYM key is locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "META_SELECTING",
    "type" : "int",
    "comment" : "\n     * @hide pending API review\n     ",
    "links" : [ ]
  }, {
    "name" : "META_CAP_USED",
    "type" : "long",
    "comment" : " so as not to conflict with any meta key states publicly defined by KeyEvent.",
    "links" : [ ]
  }, {
    "name" : "META_ALT_USED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_SYM_USED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_CAP_PRESSED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_ALT_PRESSED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_SYM_PRESSED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_CAP_RELEASED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_ALT_RELEASED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_SYM_RELEASED",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_SHIFT_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_ALT_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "META_SYM_MASK",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAP",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALT",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYM",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SELECTING",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRESSED_RETURN_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCKED_RETURN_VALUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PRESSED",
    "type" : "int",
    "comment" : "\n     * The meta key has been pressed but has not yet been used.\n     ",
    "links" : [ ]
  }, {
    "name" : "RELEASED",
    "type" : "int",
    "comment" : "\n     * The meta key has been pressed and released but has still\n     * not yet been used.\n     ",
    "links" : [ ]
  }, {
    "name" : "USED",
    "type" : "int",
    "comment" : "\n     * The meta key has been pressed and used but has not yet been released.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCKED",
    "type" : "int",
    "comment" : "\n     * The meta key has been pressed and released without use, and then\n     * pressed again; it may also have been released again.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void resetMetaState(Spannable text)",
    "returnType" : "void",
    "comment" : "\n     * Resets all meta state to inactive.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(CharSequence text)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the meta keys.\n     *\n     * @param text the buffer in which the meta key would have been pressed.\n     *\n     * @return an integer in which each bit set to one represents a pressed\n     *         or locked meta key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(final CharSequence text, final KeyEvent event)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the meta keys for a specific key event.\n     *\n     * For input devices that use toggled key modifiers, the `toggled' state\n     * is stored into the text buffer. This method retrieves the meta state\n     * for this event, accounting for the stored state. If the event has been\n     * created by a device that does not support toggled key modifiers, like\n     * a virtual device for example, the stored state is ignored.\n     *\n     * @param text the buffer in which the meta key would have been pressed.\n     * @param event the event for which to evaluate the meta state.\n     * @return an integer in which each bit set to one represents a pressed\n     *         or locked meta key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(CharSequence text, int meta)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of a particular meta key.\n     *\n     * @param meta META_SHIFT_ON, META_ALT_ON, META_SYM_ON\n     * @param text the buffer in which the meta key would have been pressed.\n     *\n     * @return 0 if inactive, 1 if active, 2 if locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(final CharSequence text, final int meta, final KeyEvent event)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of a particular meta key to use with a particular key event.\n     *\n     * If the key event has been created by a device that does not support toggled\n     * key modifiers, like a virtual keyboard for example, only the meta state in\n     * the key event is considered.\n     *\n     * @param meta META_SHIFT_ON, META_ALT_ON, META_SYM_ON\n     * @param text the buffer in which the meta key would have been pressed.\n     * @param event the event for which to evaluate the meta state.\n     * @return 0 if inactive, 1 if active, 2 if locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getActive(CharSequence text, Object meta, int on, int lock)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void adjustMetaAfterKeypress(Spannable content)",
    "returnType" : "void",
    "comment" : "\n     * Call this method after you handle a keypress so that the meta\n     * state will be reset to unshifted (if it is not still down)\n     * or primed to be reset to unshifted (once it is released).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMetaTracker(CharSequence text, Object what)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object is one that this class would use to\n     * keep track of any meta state in the specified text.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSelectingMetaTracker(CharSequence text, Object what)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this object is one that this class would use to\n     * keep track of the selecting meta state in the specified text.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void adjust(Spannable content, Object what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected static void resetLockedMeta(Spannable content)",
    "returnType" : "void",
    "comment" : "\n     * Call this if you are a method that ignores the locked meta state\n     * (arrow keys, for example) and you handle a key.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void resetLock(Spannable content, Object what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles presses of the meta keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void press(Editable content, Object what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void startSelecting(View view, Spannable content)",
    "returnType" : "void",
    "comment" : "\n     * Start selecting text.\n     * @hide pending API review\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stopSelecting(View view, Spannable content)",
    "returnType" : "void",
    "comment" : "\n     * Stop selecting text.  This does not actually collapse the selection;\n     * call {@link android.text.Selection#setSelection} too.\n     * @hide pending API review\n     ",
    "links" : [ "android.text.Selection#setSelection" ]
  }, {
    "name" : "public boolean onKeyUp(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "\n     * Handles release of the meta keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void release(Editable content, Object what, KeyEvent event)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMetaKeyState(View view, Editable content, int states)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clearMetaKeyState(Editable content, int states)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long resetLockedMeta(long state)",
    "returnType" : "long",
    "comment" : "\n     * Call this if you are a method that ignores the locked meta state\n     * (arrow keys, for example) and you handle a key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(long state)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the meta keys.\n     *\n     * @param state the current meta state bits.\n     *\n     * @return an integer in which each bit set to one represents a pressed\n     *         or locked meta key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int getMetaState(long state, int meta)",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of a particular meta key.\n     *\n     * @param state the current state bits.\n     * @param meta META_SHIFT_ON, META_ALT_ON, or META_SYM_ON\n     *\n     * @return 0 if inactive, 1 if active, 2 if locked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long adjustMetaAfterKeypress(long state)",
    "returnType" : "long",
    "comment" : "\n     * Call this method after you handle a keypress so that the meta\n     * state will be reset to unshifted (if it is not still down)\n     * or primed to be reset to unshifted (once it is released).  Takes\n     * the current state, returns the new state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long handleKeyDown(long state, int keyCode, KeyEvent event)",
    "returnType" : "long",
    "comment" : "\n     * Handles presses of the meta keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long press(long state, int what, long mask, long locked, long pressed, long released, long used)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static long handleKeyUp(long state, int keyCode, KeyEvent event)",
    "returnType" : "long",
    "comment" : "\n     * Handles release of the meta keys.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long release(long state, int what, long mask, long pressed, long released, long used, KeyEvent event)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long clearMetaKeyState(long state, int which)",
    "returnType" : "long",
    "comment" : "\n     * Clears the state of the specified meta key if it is locked.\n     * @param state the meta key state\n     * @param which meta keys to clear, may be a combination of {@link #META_SHIFT_ON},\n     * {@link #META_ALT_ON} or {@link #META_SYM_ON}.\n     ",
    "links" : [ "#META_SYM_ON", "#META_SHIFT_ON", "#META_ALT_ON" ]
  } ],
  "methodNames" : [ "public static void resetMetaState(Spannable text)", "public static final int getMetaState(CharSequence text)", "public static final int getMetaState(final CharSequence text, final KeyEvent event)", "public static final int getMetaState(CharSequence text, int meta)", "public static final int getMetaState(final CharSequence text, final int meta, final KeyEvent event)", "private static int getActive(CharSequence text, Object meta, int on, int lock)", "public static void adjustMetaAfterKeypress(Spannable content)", "public static boolean isMetaTracker(CharSequence text, Object what)", "public static boolean isSelectingMetaTracker(CharSequence text, Object what)", "private static void adjust(Spannable content, Object what)", "protected static void resetLockedMeta(Spannable content)", "private static void resetLock(Spannable content, Object what)", "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)", "private void press(Editable content, Object what)", "public static void startSelecting(View view, Spannable content)", "public static void stopSelecting(View view, Spannable content)", "public boolean onKeyUp(View view, Editable content, int keyCode, KeyEvent event)", "private void release(Editable content, Object what, KeyEvent event)", "public void clearMetaKeyState(View view, Editable content, int states)", "public static void clearMetaKeyState(Editable content, int states)", "public static long resetLockedMeta(long state)", "public static final int getMetaState(long state)", "public static final int getMetaState(long state, int meta)", "public static long adjustMetaAfterKeypress(long state)", "public static long handleKeyDown(long state, int keyCode, KeyEvent event)", "private static long press(long state, int what, long mask, long locked, long pressed, long released, long used)", "public static long handleKeyUp(long state, int keyCode, KeyEvent event)", "private static long release(long state, int what, long mask, long pressed, long released, long used, KeyEvent event)", "public long clearMetaKeyState(long state, int which)" ],
  "variableNames" : [ "META_SHIFT_ON", "META_ALT_ON", "META_SYM_ON", "META_CAP_LOCKED", "META_ALT_LOCKED", "META_SYM_LOCKED", "META_SELECTING", "META_CAP_USED", "META_ALT_USED", "META_SYM_USED", "META_CAP_PRESSED", "META_ALT_PRESSED", "META_SYM_PRESSED", "META_CAP_RELEASED", "META_ALT_RELEASED", "META_SYM_RELEASED", "META_SHIFT_MASK", "META_ALT_MASK", "META_SYM_MASK", "CAP", "ALT", "SYM", "SELECTING", "PRESSED_RETURN_VALUE", "LOCKED_RETURN_VALUE", "PRESSED", "RELEASED", "USED", "LOCKED" ]
}