{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/base/supplier/LazyOneshotSupplier.java",
  "packageName" : "org.chromium.base.supplier",
  "className" : "LazyOneshotSupplier",
  "comment" : "\n * Wraps a lazy-loaded nullable object, notifying observers a single time when the dependency\n * becomes available. This intentionally doesn't extend {@link OneshotSupplier} to support the\n * supplied value being null.\n *\n * @param <T> The type of the wrapped object.\n ",
  "links" : [ "org.chromium.base.supplier.OneshotSupplier" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " void onAvailable(Callback<T> callback)",
    "returnType" : "void",
    "comment" : "\n     * Add a callback that's called when the object owned by this supplier is available. If the\n     * object is already available, the callback will be called at the end of the current message\n     * loop.\n     *\n     * @param callback The callback to be called.\n     ",
    "links" : [ ]
  }, {
    "name" : " T get()",
    "returnType" : "T",
    "comment" : "\n     * Returns the value currently held or <code>null</code> when none is held. Use {@link\n     * #hasValue} to tell if the value is intentionally null.\n     ",
    "links" : [ "#hasValue" ]
  }, {
    "name" : " boolean hasValue()",
    "returnType" : "boolean",
    "comment" : " Returns whether the supplier holds a value currently. ",
    "links" : [ ]
  }, {
    "name" : " static LazyOneshotSupplier<T> fromValue(T value)",
    "returnType" : "LazyOneshotSupplier<T>",
    "comment" : "\n     * Creates a supplier using a lambda closure to hold onto the given value. Should only be used\n     * when the value already exists or in tests, as otherwise it defeats the purpose of the lazy\n     * part of this supplier.\n     ",
    "links" : [ ]
  }, {
    "name" : " static LazyOneshotSupplier<T> fromSupplier(Supplier<T> supplier)",
    "returnType" : "LazyOneshotSupplier<T>",
    "comment" : "\n     * Allows callers to inline a lambda to satisfy the implementation of this object. The supplier\n     * must be able to run and complete synchronously at any point.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " void onAvailable(Callback<T> callback)", " T get()", " boolean hasValue()", " static LazyOneshotSupplier<T> fromValue(T value)", " static LazyOneshotSupplier<T> fromSupplier(Supplier<T> supplier)" ],
  "variableNames" : [ ]
}