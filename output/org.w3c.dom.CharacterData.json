{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/w3c/dom/CharacterData.java",
  "packageName" : "org.w3c.dom",
  "className" : "CharacterData",
  "comment" : "\n * The <code>CharacterData</code> interface extends Node with a set of\n * attributes and methods for accessing character data in the DOM. For\n * clarity this set is defined here rather than on each object that uses\n * these attributes and methods. No DOM objects correspond directly to\n * <code>CharacterData</code>, though <code>Text</code> and others do\n * inherit the interface from it. All <code>offsets</code> in this interface\n * start from <code>0</code>.\n * <p>As explained in the <code>DOMString</code> interface, text strings in\n * the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In\n * the following, the term 16-bit units is used whenever necessary to\n * indicate that indexing on CharacterData is done in 16-bit units.\n * <p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getData() throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * The character data of the node that implements this interface. The DOM\n     * implementation may not put arbitrary limits on the amount of data\n     * that may be stored in a <code>CharacterData</code> node. However,\n     * implementation limits may mean that the entirety of a node's data may\n     * not fit into a single <code>DOMString</code>. In such cases, the user\n     * may call <code>substringData</code> to retrieve the data in\n     * appropriately sized pieces.\n     * @exception DOMException\n     *   DOMSTRING_SIZE_ERR: Raised when it would return more characters than\n     *   fit in a <code>DOMString</code> variable on the implementation\n     *   platform.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setData(String data) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * The character data of the node that implements this interface. The DOM\n     * implementation may not put arbitrary limits on the amount of data\n     * that may be stored in a <code>CharacterData</code> node. However,\n     * implementation limits may mean that the entirety of a node's data may\n     * not fit into a single <code>DOMString</code>. In such cases, the user\n     * may call <code>substringData</code> to retrieve the data in\n     * appropriately sized pieces.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n     * The number of 16-bit units that are available through <code>data</code>\n     * and the <code>substringData</code> method below. This may have the\n     * value zero, i.e., <code>CharacterData</code> nodes may be empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String substringData(int offset, int count) throws DOMException",
    "returnType" : "String",
    "comment" : "\n     * Extracts a range of data from the node.\n     * @param offset Start offset of substring to extract.\n     * @param count The number of 16-bit units to extract.\n     * @return The specified substring. If the sum of <code>offset</code> and\n     *   <code>count</code> exceeds the <code>length</code>, then all 16-bit\n     *   units to the end of the data are returned.\n     * @exception DOMException\n     *   INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is\n     *   negative or greater than the number of 16-bit units in\n     *   <code>data</code>, or if the specified <code>count</code> is\n     *   negative.\n     *   <br>DOMSTRING_SIZE_ERR: Raised if the specified range of text does\n     *   not fit into a <code>DOMString</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void appendData(String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Append the string to the end of the character data of the node. Upon\n     * success, <code>data</code> provides access to the concatenation of\n     * <code>data</code> and the <code>DOMString</code> specified.\n     * @param arg The <code>DOMString</code> to append.\n     * @exception DOMException\n     *   NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void insertData(int offset, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Insert a string at the specified 16-bit unit offset.\n     * @param offset The character offset at which to insert.\n     * @param arg The <code>DOMString</code> to insert.\n     * @exception DOMException\n     *   INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is\n     *   negative or greater than the number of 16-bit units in\n     *   <code>data</code>.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void deleteData(int offset, int count) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Remove a range of 16-bit units from the node. Upon success,\n     * <code>data</code> and <code>length</code> reflect the change.\n     * @param offset The offset from which to start removing.\n     * @param count The number of 16-bit units to delete. If the sum of\n     *   <code>offset</code> and <code>count</code> exceeds\n     *   <code>length</code> then all 16-bit units from <code>offset</code>\n     *   to the end of the data are deleted.\n     * @exception DOMException\n     *   INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is\n     *   negative or greater than the number of 16-bit units in\n     *   <code>data</code>, or if the specified <code>count</code> is\n     *   negative.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void replaceData(int offset, int count, String arg) throws DOMException",
    "returnType" : "void",
    "comment" : "\n     * Replace the characters starting at the specified 16-bit unit offset\n     * with the specified string.\n     * @param offset The offset from which to start replacing.\n     * @param count The number of 16-bit units to replace. If the sum of\n     *   <code>offset</code> and <code>count</code> exceeds\n     *   <code>length</code>, then all 16-bit units to the end of the data\n     *   are replaced; (i.e., the effect is the same as a <code>remove</code>\n     *    method call with the same range, followed by an <code>append</code>\n     *    method invocation).\n     * @param arg The <code>DOMString</code> with which the range must be\n     *   replaced.\n     * @exception DOMException\n     *   INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is\n     *   negative or greater than the number of 16-bit units in\n     *   <code>data</code>, or if the specified <code>count</code> is\n     *   negative.\n     *   <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getData() throws DOMException", "public void setData(String data) throws DOMException", "public int getLength()", "public String substringData(int offset, int count) throws DOMException", "public void appendData(String arg) throws DOMException", "public void insertData(int offset, String arg) throws DOMException", "public void deleteData(int offset, int count) throws DOMException", "public void replaceData(int offset, int count, String arg) throws DOMException" ],
  "variableNames" : [ ]
}