{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/rtt/WifiRttManager.java",
  "packageName" : "android.net.wifi.rtt",
  "className" : "WifiRttManager",
  "comment" : "\n * This class provides the primary API for measuring distance (range) to other devices using the\n * IEEE 802.11mc Wi-Fi Round Trip Time (RTT) technology.\n * <p>\n * The devices which can be ranged include:\n * <li>Access Points (APs)\n * <li>Wi-Fi Aware peers\n * <p>\n * Ranging requests are triggered using\n * {@link #startRanging(RangingRequest, Executor, RangingResultCallback)}. Results (in case of\n * successful operation) are returned in the {@link RangingResultCallback#onRangingResults(List)}\n * callback.\n * <p>\n *     Wi-Fi RTT may not be usable at some points, e.g. when Wi-Fi is disabled. To validate that\n *     the functionality is available use the {@link #isAvailable()} function. To track\n *     changes in RTT usability register for the {@link #ACTION_WIFI_RTT_STATE_CHANGED}\n *     broadcast. Note that this broadcast is not sticky - you should register for it and then\n *     check the above API to avoid a race condition.\n ",
  "links" : [ "#isAvailable()", "#ACTION_WIFI_RTT_STATE_CHANGED", "#startRanging(RangingRequest", "android.net.wifi.rtt.RangingResultCallback#onRangingResults(List)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IWifiRttManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_WIFI_RTT_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Broadcast intent action to indicate that the state of Wi-Fi RTT availability has changed.\n     * Use the {@link #isAvailable()} to query the current status.\n     * This broadcast is <b>not</b> sticky, use the {@link #isAvailable()} API after registering\n     * the broadcast to check the current state of Wi-Fi RTT.\n     * <p>Note: The broadcast is only delivered to registered receivers - no manifest registered\n     * components will be launched.\n     ",
    "links" : [ "#isAvailable()" ]
  }, {
    "name" : "CHARACTERISTICS_KEY_BOOLEAN_ONE_SIDED_RTT",
    "type" : "String",
    "comment" : "\n     * Bundle key to access if one-sided Wi-Fi RTT is supported. When it is not supported, only\n     * two-sided RTT can be performed, which requires responder supports IEEE 802.11mc and this can\n     * be determined by the method {@link ScanResult#is80211mcResponder()}\n     ",
    "links" : [ "android.net.wifi.ScanResult#is80211mcResponder()" ]
  }, {
    "name" : "CHARACTERISTICS_KEY_BOOLEAN_LCI",
    "type" : "String",
    "comment" : "\n     * Bundle key to access if getting the Location Configuration Information(LCI) from responder is\n      * supported.\n     * @see ResponderLocation\n     ",
    "links" : [ ]
  }, {
    "name" : "CHARACTERISTICS_KEY_BOOLEAN_LCR",
    "type" : "String",
    "comment" : "\n     * Bundle key to access if getting the Location Civic Report(LCR) from responder is supported.\n     * @see ResponderLocation\n     ",
    "links" : [ ]
  }, {
    "name" : "CHARACTERISTICS_KEY_BOOLEAN_STA_RESPONDER",
    "type" : "String",
    "comment" : "\n     * Bundle key to access if device supports to be a responder in station mode\n     ",
    "links" : [ ]
  }, {
    "name" : "CHARACTERISTICS_KEY_BOOLEAN_NTB_INITIATOR",
    "type" : "String",
    "comment" : "\n     * Bundle key to access if device supports to be a IEEE 802.11az non-trigger based initiator\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current status of RTT API: whether or not RTT is available. To track\n     * changes in the state of RTT API register for the\n     * {@link #ACTION_WIFI_RTT_STATE_CHANGED} broadcast.\n     * <p>Note: availability of RTT does not mean that the app can use the API. The app's\n     * permissions and platform Location Mode are validated at run-time.\n     *\n     * @return A boolean indicating whether the app can use the RTT API at this time (true) or\n     * not (false).\n     ",
    "links" : [ "#ACTION_WIFI_RTT_STATE_CHANGED" ]
  }, {
    "name" : "public void startRanging(@NonNull RangingRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull RangingResultCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Initiate a request to range to a set of devices specified in the {@link RangingRequest}.\n     * Results will be returned in the {@link RangingResultCallback} set of callbacks.\n     * <p>\n     * Ranging request with only Wifi Aware peers can be performed with either\n     * {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} with\n     * android:usesPermissionFlags=\"neverForLocation\", or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}. All other types of ranging requests\n     * require {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * @param request  A request specifying a set of devices whose distance measurements are\n     *                 requested.\n     * @param executor The Executor on which to run the callback.\n     * @param callback A callback for the result of the ranging request.\n     ",
    "links" : [ "android.net.wifi.rtt.RangingRequest", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.net.wifi.rtt.RangingResultCallback", "android.Manifest.permission#NEARBY_WIFI_DEVICES" ]
  }, {
    "name" : "public void startRanging(@Nullable WorkSource workSource, @NonNull RangingRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull RangingResultCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Initiate a request to range to a set of devices specified in the {@link RangingRequest}.\n     * Results will be returned in the {@link RangingResultCallback} set of callbacks.\n     * <p>\n     * Ranging request with only Wifi Aware peers can be performed with either\n     * {@link android.Manifest.permission#NEARBY_WIFI_DEVICES} with\n     * android:usesPermissionFlags=\"neverForLocation\", or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION}. All other types of ranging requests\n     * require {@link android.Manifest.permission#ACCESS_FINE_LOCATION}.\n     *\n     * @param workSource A mechanism to specify an alternative work-source for the request.\n     * @param request  A request specifying a set of devices whose distance measurements are\n     *                 requested.\n     * @param executor The Executor on which to run the callback.\n     * @param callback A callback for the result of the ranging request.\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.rtt.RangingRequest", "android.Manifest.permission#ACCESS_FINE_LOCATION", "android.net.wifi.rtt.RangingResultCallback", "android.Manifest.permission#NEARBY_WIFI_DEVICES" ]
  }, {
    "name" : "public void cancelRanging(@Nullable WorkSource workSource)",
    "returnType" : "void",
    "comment" : "\n     * Cancel all ranging requests for the specified work sources. The requests have been requested\n     * using {@link #startRanging(WorkSource, RangingRequest, Executor, RangingResultCallback)}.\n     *\n     * @param workSource The work-sources of the requesters.\n     *\n     * @hide\n     ",
    "links" : [ "#startRanging(WorkSource" ]
  }, {
    "name" : "public Bundle getRttCharacteristics()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns a Bundle which represents the characteristics of the Wi-Fi RTT interface: a set of\n     * parameters which specify feature support. Each parameter can be accessed by the specified\n     * Bundle key, one of the {@code CHARACTERISTICS_KEY_*} value.\n     * <p>\n     * May return an empty Bundle if the Wi-Fi RTT service is not initialized.\n     *\n     * @return A Bundle specifying feature support of RTT.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean isAvailable()", "public void startRanging(@NonNull RangingRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull RangingResultCallback callback)", "public void startRanging(@Nullable WorkSource workSource, @NonNull RangingRequest request, @NonNull @CallbackExecutor Executor executor, @NonNull RangingResultCallback callback)", "public void cancelRanging(@Nullable WorkSource workSource)", "public Bundle getRttCharacteristics()" ],
  "variableNames" : [ "TAG", "VDBG", "mContext", "mService", "ACTION_WIFI_RTT_STATE_CHANGED", "CHARACTERISTICS_KEY_BOOLEAN_ONE_SIDED_RTT", "CHARACTERISTICS_KEY_BOOLEAN_LCI", "CHARACTERISTICS_KEY_BOOLEAN_LCR", "CHARACTERISTICS_KEY_BOOLEAN_STA_RESPONDER", "CHARACTERISTICS_KEY_BOOLEAN_NTB_INITIATOR" ]
}