{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothHapClient.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHapClient",
  "comment" : "\n * This class provides a public APIs to control the Bluetooth Hearing Access Profile client service.\n *\n * <p>BluetoothHapClient is a proxy object for controlling the Bluetooth HAP Service client via IPC.\n * Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothHapClient proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackExecutorMap",
    "type" : "Map<Callback, Executor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallback",
    "type" : "IBluetoothHapClientCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_HAP_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the Hearing Access Profile Client\n     * service. Please note that in the binaural case, there will be two different LE devices for\n     * the left and right side and each device will have their own connection state changes.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_HAP_DEVICE_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the device availability change and the availability of its presets.\n     * Please note that in the binaural case, there will be two different LE devices for the left\n     * and right side and each device will have their own availability event.\n     *\n     * <p>This intent will have 2 extras:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     *   <li>{@link #EXTRA_HAP_FEATURES} - Supported features map.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#EXTRA_HAP_FEATURES" ]
  }, {
    "name" : "EXTRA_HAP_FEATURES",
    "type" : "String",
    "comment" : "\n     * Contains a list of all available presets\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_INDEX_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Represents an invalid index value. This is usually value returned in a currently active\n     * preset request for a device which is not connected. This value shouldn't be used in the API\n     * calls.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BINAURAL",
    "type" : "int",
    "comment" : "\n     * Hearing aid type value. Indicates this Bluetooth device is belongs to a binaural hearing aid\n     * set. A binaural hearing aid set is two hearing aids that form a Coordinated Set, one for the\n     * right ear and one for the left ear of the user. Typically used by a user with bilateral\n     * hearing loss.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_MONAURAL",
    "type" : "int",
    "comment" : "\n     * Hearing aid type value. Indicates this Bluetooth device is a single hearing aid for the left\n     * or the right ear. Typically used by a user with unilateral hearing loss.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_BANDED",
    "type" : "int",
    "comment" : "\n     * Hearing aid type value. Indicates this Bluetooth device is two hearing aids with a connection\n     * to one another that expose a single Bluetooth radio interface.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_RFU",
    "type" : "int",
    "comment" : "\n     * Hearing aid type value. This value is reserved for future use.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_HEARING_AID_TYPE_MASK",
    "type" : "int",
    "comment" : "\n     * Feature mask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_SYNCHRONIZATED_PRESETS_MASK",
    "type" : "int",
    "comment" : "\n     * Feature mask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_INDEPENDENT_PRESETS_MASK",
    "type" : "int",
    "comment" : "\n     * Feature mask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_DYNAMIC_PRESETS_MASK",
    "type" : "int",
    "comment" : "\n     * Feature mask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "FEATURE_WRITABLE_PRESETS_MASK",
    "type" : "int",
    "comment" : "\n     * Feature mask value.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothHapClient",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHapClient getService()",
    "returnType" : "IBluetoothHapClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register a {@link Callback} that will be invoked during the operation of this profile.\n     *\n     * <p>Repeated registration of the same <var>callback</var> object after the first call to this\n     * method will result with IllegalArgumentException being thrown, even when the\n     * <var>executor</var> is different. API caller would have to call {@link\n     * #unregisterCallback(Callback)} with the same callback object before registering it again.\n     *\n     * @param executor an {@link Executor} to execute given callback\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException if a null executor, or callback is given, or\n     *     IllegalArgumentException if the same <var>callback</var> is already registered.\n     * @hide\n     ",
    "links" : [ "#unregisterCallback(Callback)", "Callback", "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void unregisterCallback(@NonNull Callback callback)",
    "returnType" : "void",
    "comment" : "\n     * Unregister the specified {@link Callback}.\n     *\n     * <p>The same {@link Callback} object used when calling {@link #registerCallback(Executor,\n     * Callback)} must be used.\n     *\n     * <p>Callbacks are automatically unregistered when application process goes away\n     *\n     * @param callback user implementation of the {@link Callback}\n     * @throws NullPointerException when callback is null or IllegalArgumentException when no\n     *     callback is registered\n     * @hide\n     ",
    "links" : [ "Callback", "#registerCallback(Executor" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return {@code true} if connectionPolicy is set, {@code false} on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@Nullable BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device or {@link #CONNECTION_POLICY_FORBIDDEN} if device is\n     *     null\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHapGroup(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Gets the group identifier, which can be used in the group related part of the API.\n     *\n     * <p>Users are expected to get group identifier for each of the connected device to discover\n     * the device grouping. This allows them to make an informed decision which devices can be\n     * controlled by single group API call and which require individual device calls.\n     *\n     * <p>Note that some binaural HA devices may not support group operations, therefore are not\n     * considered a valid HAP group. In such case -1 is returned even if such device is a valid Le\n     * Audio Coordinated Set member.\n     *\n     * @return valid group identifier or -1\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getActivePresetIndex(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Gets the currently active preset for a HA device.\n     *\n     * @param device is the device for which we want to set the active preset\n     * @return active preset index\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothHapPresetInfo getActivePresetInfo(@NonNull BluetoothDevice device)",
    "returnType" : "BluetoothHapPresetInfo",
    "comment" : "\n     * Get the currently active preset info for a remote device.\n     *\n     * @param device is the device for which we want to get the preset name\n     * @return currently active preset info if selected, null if preset info is not available for\n     *     the remote device\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void selectPreset(@NonNull BluetoothDevice device, int presetIndex)",
    "returnType" : "void",
    "comment" : "\n     * Selects the currently active preset for a HA device\n     *\n     * <p>On success, {@link Callback#onPresetSelected(BluetoothDevice, int, int)} will be called\n     * with reason code {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} On failure, {@link\n     * Callback#onPresetSelectionFailed(BluetoothDevice, int)} will be called.\n     *\n     * @param device is the device for which we want to set the active preset\n     * @param presetIndex is an index of one of the available presets\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onPresetSelected(BluetoothDevice", "#onPresetSelectionFailed(BluetoothDevice" ]
  }, {
    "name" : "public void selectPresetForGroup(int groupId, int presetIndex)",
    "returnType" : "void",
    "comment" : "\n     * Selects the currently active preset for a Hearing Aid device group.\n     *\n     * <p>This group call may replace multiple device calls if those are part of the valid HAS\n     * group. Note that binaural HA devices may or may not support group.\n     *\n     * <p>On success, {@link Callback#onPresetSelected(BluetoothDevice, int, int)} will be called\n     * for each device within the group with reason code {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} On failure, {@link\n     * Callback#onPresetSelectionForGroupFailed(int, int)} will be called for the group.\n     *\n     * @param groupId is the device group identifier for which want to set the active preset\n     * @param presetIndex is an index of one of the available presets\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onPresetSelectionForGroupFailed(int", "#onPresetSelected(BluetoothDevice" ]
  }, {
    "name" : "public void switchToNextPreset(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Sets the next preset as a currently active preset for a HA device\n     *\n     * <p>Note that the meaning of 'next' is HA device implementation specific and does not\n     * necessarily mean a higher preset index.\n     *\n     * @param device is the device for which we want to set the active preset\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchToNextPresetForGroup(int groupId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the next preset as a currently active preset for a HA device group\n     *\n     * <p>Note that the meaning of 'next' is HA device implementation specific and does not\n     * necessarily mean a higher preset index.\n     *\n     * <p>This group call may replace multiple device calls if those are part of the valid HAS\n     * group. Note that binaural HA devices may or may not support group.\n     *\n     * @param groupId is the device group identifier for which want to set the active preset\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchToPreviousPreset(@NonNull BluetoothDevice device)",
    "returnType" : "void",
    "comment" : "\n     * Sets the previous preset as a currently active preset for a HA device.\n     *\n     * <p>Note that the meaning of 'previous' is HA device implementation specific and does not\n     * necessarily mean a lower preset index.\n     *\n     * @param device is the device for which we want to set the active preset\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchToPreviousPresetForGroup(int groupId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the previous preset as a currently active preset for a HA device group\n     *\n     * <p>Note the meaning of 'previous' is HA device implementation specific and does not\n     * necessarily mean a lower preset index.\n     *\n     * <p>This group call may replace multiple device calls if those are part of the valid HAS\n     * group. Note that binaural HA devices may or may not support group.\n     *\n     * @param groupId is the device group identifier for which want to set the active preset\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothHapPresetInfo getPresetInfo(@NonNull BluetoothDevice device, int presetIndex)",
    "returnType" : "BluetoothHapPresetInfo",
    "comment" : "\n     * Requests the preset info\n     *\n     * @param device is the device for which we want to get the preset name\n     * @param presetIndex is an index of one of the available presets\n     * @return preset info\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothHapPresetInfo> getAllPresetInfo(@NonNull BluetoothDevice device)",
    "returnType" : "List<BluetoothHapPresetInfo>",
    "comment" : "\n     * Get all preset info for a particular device\n     *\n     * @param device is the device for which we want to get all presets info\n     * @return a list of all known preset info\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getFeatures(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Requests HAP features\n     *\n     * @param device is the device for which we want to get features for\n     * @return features value with feature bits set\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHearingAidType(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Retrieves hearing aid type from feature value.\n     *\n     * @param device is the device for which we want to get the hearing aid type\n     * @return hearing aid type\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsSynchronizedPresets(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves if this device supports synchronized presets or not from feature value.\n     *\n     * @param device is the device for which we want to know if it supports synchronized presets\n     * @return {@code true} if the device supports synchronized presets, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsIndependentPresets(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves if this device supports independent presets or not from feature value.\n     *\n     * @param device is the device for which we want to know if it supports independent presets\n     * @return {@code true} if the device supports independent presets, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsDynamicPresets(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves if this device supports dynamic presets or not from feature value.\n     *\n     * @param device is the device for which we want to know if it supports dynamic presets\n     * @return {@code true} if the device supports dynamic presets, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean supportsWritablePresets(@NonNull BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Retrieves if this device supports writable presets or not from feature value.\n     *\n     * @param device is the device for which we want to know if it supports writable presets\n     * @return {@code true} if the device supports writable presets, {@code false} otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPresetName(@NonNull BluetoothDevice device, int presetIndex, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Sets the preset name for a particular device\n     *\n     * <p>Note that the name length is restricted to 40 characters.\n     *\n     * <p>On success, {@link Callback#onPresetInfoChanged(BluetoothDevice, List, int)} with a new\n     * name will be called and reason code {@link BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} On\n     * failure, {@link Callback#onSetPresetNameFailed(BluetoothDevice, int)} will be called.\n     *\n     * @param device is the device for which we want to get the preset name\n     * @param presetIndex is an index of one of the available presets\n     * @param name is a new name for a preset, maximum length is 40 characters\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSetPresetNameFailed(BluetoothDevice", "#onPresetInfoChanged(BluetoothDevice" ]
  }, {
    "name" : "public void setPresetNameForGroup(int groupId, int presetIndex, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name for a hearing aid preset.\n     *\n     * <p>Note that the name length is restricted to 40 characters.\n     *\n     * <p>On success, {@link Callback#onPresetInfoChanged(BluetoothDevice, List, int)} with a new\n     * name will be called for each device within the group with reason code {@link\n     * BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST} On failure, {@link\n     * Callback#onSetPresetNameForGroupFailed(int, int)} will be invoked\n     *\n     * @param groupId is the device group identifier\n     * @param presetIndex is an index of one of the available presets\n     * @param name is a new name for a preset, maximum length is 40 characters\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothStatusCodes#REASON_LOCAL_APP_REQUEST", "#onSetPresetNameForGroupFailed(int", "#onPresetInfoChanged(BluetoothDevice" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothHapClient getService()", "public BluetoothAdapter getAdapter()", "public void registerCallback(@NonNull @CallbackExecutor Executor executor, @NonNull Callback callback)", "public void unregisterCallback(@NonNull Callback callback)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@Nullable BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public int getHapGroup(@NonNull BluetoothDevice device)", "public int getActivePresetIndex(@NonNull BluetoothDevice device)", "public BluetoothHapPresetInfo getActivePresetInfo(@NonNull BluetoothDevice device)", "public void selectPreset(@NonNull BluetoothDevice device, int presetIndex)", "public void selectPresetForGroup(int groupId, int presetIndex)", "public void switchToNextPreset(@NonNull BluetoothDevice device)", "public void switchToNextPresetForGroup(int groupId)", "public void switchToPreviousPreset(@NonNull BluetoothDevice device)", "public void switchToPreviousPresetForGroup(int groupId)", "public BluetoothHapPresetInfo getPresetInfo(@NonNull BluetoothDevice device, int presetIndex)", "public List<BluetoothHapPresetInfo> getAllPresetInfo(@NonNull BluetoothDevice device)", "public int getFeatures(@NonNull BluetoothDevice device)", "public int getHearingAidType(@NonNull BluetoothDevice device)", "public boolean supportsSynchronizedPresets(@NonNull BluetoothDevice device)", "public boolean supportsIndependentPresets(@NonNull BluetoothDevice device)", "public boolean supportsDynamicPresets(@NonNull BluetoothDevice device)", "public boolean supportsWritablePresets(@NonNull BluetoothDevice device)", "public void setPresetName(@NonNull BluetoothDevice device, int presetIndex, @NonNull String name)", "public void setPresetNameForGroup(int groupId, int presetIndex, @NonNull String name)", "private boolean isEnabled()", "private boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCallbackExecutorMap", "mCloseGuard", "mCallback", "ACTION_HAP_CONNECTION_STATE_CHANGED", "ACTION_HAP_DEVICE_AVAILABLE", "EXTRA_HAP_FEATURES", "PRESET_INDEX_UNAVAILABLE", "TYPE_BINAURAL", "TYPE_MONAURAL", "TYPE_BANDED", "TYPE_RFU", "FEATURE_HEARING_AID_TYPE_MASK", "FEATURE_SYNCHRONIZATED_PRESETS_MASK", "FEATURE_INDEPENDENT_PRESETS_MASK", "FEATURE_DYNAMIC_PRESETS_MASK", "FEATURE_WRITABLE_PRESETS_MASK", "mAdapter", "mAttributionSource", "mService" ]
}