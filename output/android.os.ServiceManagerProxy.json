{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/ServiceManagerNative.java",
  "packageName" : "android.os",
  "className" : "ServiceManagerProxy",
  "comment" : " mRemote is no longer used",
  "links" : [ ],
  "variables" : [ {
    "name" : "mRemote",
    "type" : "IBinder",
    "comment" : "\n     * Same as mServiceManager but used by apps.\n     *\n     * Once this can be removed, ServiceManagerProxy should be removed entirely.\n     ",
    "links" : [ ]
  }, {
    "name" : "mServiceManager",
    "type" : "IServiceManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public IBinder asBinder()",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder getService(String name) throws RemoteException",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IBinder checkService(String name) throws RemoteException",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addService(String name, IBinder service, boolean allowIsolated, int dumpPriority) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] listServices(int dumpPriority) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerForNotifications(String name, IServiceCallback cb) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void unregisterForNotifications(String name, IServiceCallback cb) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isDeclared(String name) throws RemoteException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getDeclaredInstances(String iface) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String updatableViaApex(String name) throws RemoteException",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String[] getUpdatableNames(String apexName) throws RemoteException",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConnectionInfo getConnectionInfo(String name) throws RemoteException",
    "returnType" : "ConnectionInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void registerClientCallback(String name, IBinder service, IClientCallback cb) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tryUnregisterService(String name, IBinder service) throws RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ServiceDebugInfo[] getServiceDebugInfo() throws RemoteException",
    "returnType" : "ServiceDebugInfo[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public IBinder asBinder()", "public IBinder getService(String name) throws RemoteException", "public IBinder checkService(String name) throws RemoteException", "public void addService(String name, IBinder service, boolean allowIsolated, int dumpPriority) throws RemoteException", "public String[] listServices(int dumpPriority) throws RemoteException", "public void registerForNotifications(String name, IServiceCallback cb) throws RemoteException", "public void unregisterForNotifications(String name, IServiceCallback cb) throws RemoteException", "public boolean isDeclared(String name) throws RemoteException", "public String[] getDeclaredInstances(String iface) throws RemoteException", "public String updatableViaApex(String name) throws RemoteException", "public String[] getUpdatableNames(String apexName) throws RemoteException", "public ConnectionInfo getConnectionInfo(String name) throws RemoteException", "public void registerClientCallback(String name, IBinder service, IClientCallback cb) throws RemoteException", "public void tryUnregisterService(String name, IBinder service) throws RemoteException", "public ServiceDebugInfo[] getServiceDebugInfo() throws RemoteException" ],
  "variableNames" : [ "mRemote", "mServiceManager" ]
}