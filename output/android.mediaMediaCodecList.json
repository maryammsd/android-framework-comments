{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaCodecList.java",
  "packageName" : "android.media",
  "className" : "MediaCodecList",
  "comment" : "\n * Allows you to enumerate available codecs, each specified as a {@link MediaCodecInfo} object,\n * find a codec supporting a given format and query the capabilities\n * of a given codec.\n * <p>See {@link MediaCodecInfo} for sample usage.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInitLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllCodecInfos",
    "type" : "MediaCodecInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sRegularCodecInfos",
    "type" : "MediaCodecInfo[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sGlobalSettings",
    "type" : "Map<String, Object>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REGULAR_CODECS",
    "type" : "int",
    "comment" : "\n     * Use in {@link #MediaCodecList} to enumerate only codecs that are suitable\n     * for regular (buffer-to-buffer) decoding or encoding.\n     *\n     * <em>NOTE:</em> These are the codecs that are returned prior to API 21,\n     * using the now deprecated static methods.\n     ",
    "links" : [ "#MediaCodecList" ]
  }, {
    "name" : "ALL_CODECS",
    "type" : "int",
    "comment" : "\n     * Use in {@link #MediaCodecList} to enumerate all codecs, even ones that are\n     * not suitable for regular (buffer-to-buffer) decoding or encoding.  These\n     * include codecs, for example, that only work with special input or output\n     * surfaces, such as secure-only or tunneled-only codecs.\n     *\n     * @see MediaCodecInfo.CodecCapabilities#isFormatSupported\n     * @see MediaCodecInfo.CodecCapabilities#FEATURE_SecurePlayback\n     * @see MediaCodecInfo.CodecCapabilities#FEATURE_TunneledPlayback\n     ",
    "links" : [ "#MediaCodecList" ]
  }, {
    "name" : "mCodecInfos",
    "type" : "MediaCodecInfo[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final int getCodecCount()",
    "returnType" : "int",
    "comment" : "\n     * Count the number of available (regular) codecs.\n     *\n     * @deprecated Use {@link #getCodecInfos} instead.\n     *\n     * @see #REGULAR_CODECS\n     ",
    "links" : [ "#getCodecInfos" ]
  }, {
    "name" : "private static final native int native_getCodecCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final MediaCodecInfo getCodecInfoAt(int index)",
    "returnType" : "MediaCodecInfo",
    "comment" : "\n     * Return the {@link MediaCodecInfo} object for the codec at\n     * the given {@code index} in the regular list.\n     *\n     * @deprecated Use {@link #getCodecInfos} instead.\n     *\n     * @see #REGULAR_CODECS\n     ",
    "links" : [ "MediaCodecInfo", "#getCodecInfos" ]
  }, {
    "name" : " static final Map<String, Object> getGlobalSettings()",
    "returnType" : "Map<String, Object>",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : "private static final void initCodecList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static MediaCodecInfo getNewCodecInfoAt(int index)",
    "returnType" : "MediaCodecInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final native String getCodecName(int index)",
    "returnType" : "String",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native String getCanonicalName(int index)",
    "returnType" : "String",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native int getAttributes(int index)",
    "returnType" : "int",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native String[] getSupportedTypes(int index)",
    "returnType" : "String[]",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native MediaCodecInfo.CodecCapabilities getCodecCapabilities(int index, String type)",
    "returnType" : "MediaCodecInfo.CodecCapabilities",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native Map<String, Object> native_getGlobalSettings()",
    "returnType" : "Map<String, Object>",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : " static final native int findCodecByName(String codec)",
    "returnType" : "int",
    "comment" : " package private ",
    "links" : [ ]
  }, {
    "name" : "public static MediaCodecInfo getInfoFor(String codec)",
    "returnType" : "MediaCodecInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static final native void native_init()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final MediaCodecInfo[] getCodecInfos()",
    "returnType" : "MediaCodecInfo[]",
    "comment" : "\n     * Returns the list of {@link MediaCodecInfo} objects for the list\n     * of media-codecs.\n     ",
    "links" : [ "MediaCodecInfo" ]
  }, {
    "name" : "public final String findDecoderForFormat(MediaFormat format)",
    "returnType" : "String",
    "comment" : "\n     * Find a decoder supporting a given {@link MediaFormat} in the list\n     * of media-codecs.\n     *\n     * <p class=note>\n     * <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP},\n     * {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE\n     * frame rate}. Use\n     * <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code>\n     * to clear any existing frame rate setting in the format.\n     *\n     * @see MediaCodecInfo.CodecCapabilities#isFormatSupported(MediaFormat) for format keys\n     * considered per android versions when evaluating suitable codecs.\n     *\n     * @param format A decoder media format with optional feature directives.\n     * @throws IllegalArgumentException if format is not a valid media format.\n     * @throws NullPointerException if format is null.\n     * @return the name of a decoder that supports the given format and feature\n     *         requests, or {@code null} if no such codec has been found.\n     ",
    "links" : [ "MediaFormat", "android.os.Build.VERSION_CODES#LOLLIPOP" ]
  }, {
    "name" : "public final String findEncoderForFormat(MediaFormat format)",
    "returnType" : "String",
    "comment" : "\n     * Find an encoder supporting a given {@link MediaFormat} in the list\n     * of media-codecs.\n     *\n     * <p class=note>\n     * <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP},\n     * {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE\n     * frame rate}. Use\n     * <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code>\n     * to clear any existing frame rate setting in the format.\n     *\n     * @see MediaCodecInfo.CodecCapabilities#isFormatSupported(MediaFormat) for format keys\n     * considered per android versions when evaluating suitable codecs.\n     *\n     * @param format An encoder media format with optional feature directives.\n     * @throws IllegalArgumentException if format is not a valid media format.\n     * @throws NullPointerException if format is null.\n     * @return the name of an encoder that supports the given format and feature\n     *         requests, or {@code null} if no such codec has been found.\n     ",
    "links" : [ "MediaFormat", "android.os.Build.VERSION_CODES#LOLLIPOP" ]
  }, {
    "name" : "private String findCodecForFormat(boolean encoder, MediaFormat format)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sInitLock", "sAllCodecInfos", "sRegularCodecInfos", "sGlobalSettings", "REGULAR_CODECS", "ALL_CODECS", "mCodecInfos" ],
  "methodNames" : [ "public static final int getCodecCount()", "private static final native int native_getCodecCount()", "public static final MediaCodecInfo getCodecInfoAt(int index)", " static final Map<String, Object> getGlobalSettings()", "private static final void initCodecList()", "private static MediaCodecInfo getNewCodecInfoAt(int index)", " static final native String getCodecName(int index)", " static final native String getCanonicalName(int index)", " static final native int getAttributes(int index)", " static final native String[] getSupportedTypes(int index)", " static final native MediaCodecInfo.CodecCapabilities getCodecCapabilities(int index, String type)", " static final native Map<String, Object> native_getGlobalSettings()", " static final native int findCodecByName(String codec)", "public static MediaCodecInfo getInfoFor(String codec)", "private static final native void native_init()", "public final MediaCodecInfo[] getCodecInfos()", "public final String findDecoderForFormat(MediaFormat format)", "public final String findEncoderForFormat(MediaFormat format)", "private String findCodecForFormat(boolean encoder, MediaFormat format)" ]
}