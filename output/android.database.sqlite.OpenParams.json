{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/database/sqlite/SQLiteDatabase.java",
  "packageName" : "android.database.sqlite",
  "className" : "OpenParams",
  "comment" : "\n     * Wrapper for configuration parameters that are used for opening {@link SQLiteDatabase}\n     ",
  "variables" : [ {
    "name" : "mOpenFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCursorFactory",
    "type" : "CursorFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorHandler",
    "type" : "DatabaseErrorHandler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLookasideSlotSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLookasideSlotCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIdleConnectionTimeout",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJournalMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSyncMode",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getLookasideSlotSize()",
    "returnType" : "int",
    "comment" : "\n         * Returns size in bytes of each lookaside slot or -1 if not set.\n         *\n         * @see Builder#setLookasideConfig(int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getLookasideSlotCount()",
    "returnType" : "int",
    "comment" : "\n         * Returns total number of lookaside memory slots per database connection or -1 if not\n         * set.\n         *\n         * @see Builder#setLookasideConfig(int, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public int getOpenFlags()",
    "returnType" : "int",
    "comment" : "\n         * Returns flags to control database access mode. Default value is 0.\n         *\n         * @see Builder#setOpenFlags(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public CursorFactory getCursorFactory()",
    "returnType" : "CursorFactory",
    "comment" : "\n         * Returns an optional factory class that is called to instantiate a cursor when query\n         * is called\n         *\n         * @see Builder#setCursorFactory(CursorFactory)\n         ",
    "links" : [ ]
  }, {
    "name" : "public DatabaseErrorHandler getErrorHandler()",
    "returnType" : "DatabaseErrorHandler",
    "comment" : "\n         * Returns handler for database corruption errors\n         *\n         * @see Builder#setErrorHandler(DatabaseErrorHandler)\n         ",
    "links" : [ ]
  }, {
    "name" : "public long getIdleConnectionTimeout()",
    "returnType" : "long",
    "comment" : "\n         * Returns maximum number of milliseconds that SQLite connection is allowed to be idle\n         * before it is closed and removed from the pool.\n         * <p>If the value isn't set, the timeout defaults to the system wide timeout\n         *\n         * @return timeout in milliseconds or -1 if the value wasn't set.\n         ",
    "links" : [ ]
  }, {
    "name" : "public String getJournalMode()",
    "returnType" : "String",
    "comment" : "\n         * Returns <a href=\"https://sqlite.org/pragma.html#pragma_journal_mode\">journal mode</a>.\n         * This journal mode will only be used if {@link SQLiteDatabase#ENABLE_WRITE_AHEAD_LOGGING}\n         * flag is not set, otherwise a platform will use \"WAL\" journal mode.\n         * @see Builder#setJournalMode(String)\n         ",
    "links" : [ "android.database.sqlite.SQLiteDatabase#ENABLE_WRITE_AHEAD_LOGGING" ]
  }, {
    "name" : "public String getSynchronousMode()",
    "returnType" : "String",
    "comment" : "\n         * Returns <a href=\"https://sqlite.org/pragma.html#pragma_synchronous\">synchronous mode</a>.\n         * If not set, a system wide default will be used.\n         * @see Builder#setSynchronousMode(String)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder toBuilder()",
    "returnType" : "Builder",
    "comment" : "\n         * Creates a new instance of builder {@link Builder#Builder(OpenParams) initialized} with\n         * {@code this} parameters.\n         * @hide\n         ",
    "links" : [ "#Builder(OpenParams)" ]
  } ],
  "variableNames" : [ "mOpenFlags", "mCursorFactory", "mErrorHandler", "mLookasideSlotSize", "mLookasideSlotCount", "mIdleConnectionTimeout", "mJournalMode", "mSyncMode" ],
  "methodNames" : [ "public int getLookasideSlotSize()", "public int getLookasideSlotCount()", "public int getOpenFlags()", "public CursorFactory getCursorFactory()", "public DatabaseErrorHandler getErrorHandler()", "public long getIdleConnectionTimeout()", "public String getJournalMode()", "public String getSynchronousMode()", "public Builder toBuilder()" ]
}