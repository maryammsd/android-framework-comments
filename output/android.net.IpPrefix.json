{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/IpPrefix.java",
  "packageName" : "android.net",
  "className" : "IpPrefix",
  "comment" : "\n * This class represents an IP prefix, i.e., a contiguous block of IP addresses aligned on a\n * power of two boundary (also known as an \"IP subnet\"). A prefix is specified by two pieces of\n * information:\n *\n * <ul>\n * <li>A starting IP address (IPv4 or IPv6). This is the first IP address of the prefix.\n * <li>A prefix length. This specifies the length of the prefix by specifing the number of bits\n *     in the IP address, starting from the most significant bit in network byte order, that\n *     are constant for all addresses in the prefix.\n * </ul>\n *\n * For example, the prefix <code>192.0.2.0/24</code> covers the 256 IPv4 addresses from\n * <code>192.0.2.0</code> to <code>192.0.2.255</code>, inclusive, and the prefix\n * <code>2001:db8:1:2</code>  covers the 2^64 IPv6 addresses from <code>2001:db8:1:2::</code> to\n * <code>2001:db8:1:2:ffff:ffff:ffff:ffff</code>, inclusive.\n *\n * Objects of this class are immutable.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "address",
    "type" : "byte[]",
    "comment" : " network byte order",
    "links" : [ ]
  }, {
    "name" : "prefixLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<IpPrefix>",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void checkAndMaskAddressAndPrefixLength()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code IpPrefix} object against the specified object in {@code obj}. Two\n     * objects are equal if they have the same startAddress and prefixLength.\n     *\n     * @param obj the object to be tested for equality.\n     * @return {@code true} if both objects are equal, {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Gets the hashcode of the represented IP prefix.\n     *\n     * @return the appropriate hashcode value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n     * Returns a copy of the first IP address in the prefix. Modifying the returned object does not\n     * change this object's contents.\n     *\n     * @return the address in the form of a byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getRawAddress()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns a copy of the IP address bytes in network order (the highest order byte is the zeroth\n     * element). Modifying the returned array does not change this object's contents.\n     *\n     * @return the address in the form of a byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPrefixLength()",
    "returnType" : "int",
    "comment" : "\n     * Returns the prefix length of this {@code IpPrefix}.\n     *\n     * @return the prefix length.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(@NonNull InetAddress address)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the prefix contains the specified address.\n     *\n     * @param address An {@link InetAddress} to test.\n     * @return {@code true} if the prefix covers the given address. {@code false} otherwise.\n     ",
    "links" : [ "java.net.InetAddress" ]
  }, {
    "name" : "public boolean containsPrefix(@NonNull IpPrefix otherPrefix)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the specified prefix is entirely contained in this prefix.\n     *\n     * Note this is mathematical inclusion, so a prefix is always contained within itself.\n     * @param otherPrefix the prefix to test\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv6()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isIPv4()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this {@code IpPrefix}.\n     *\n     * @return a string such as {@code \"192.0.2.0/24\"} or {@code \"2001:db8:1:2::/64\"}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Implement the Parcelable interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Comparator<IpPrefix> lengthComparator()",
    "returnType" : "Comparator<IpPrefix>",
    "comment" : "\n     * Returns a comparator ordering IpPrefixes by length, shorter to longer.\n     * Contents of the address will break ties.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void checkAndMaskAddressAndPrefixLength()", "public boolean equals(@Nullable Object obj)", "public int hashCode()", "public InetAddress getAddress()", "public byte[] getRawAddress()", "public int getPrefixLength()", "public boolean contains(@NonNull InetAddress address)", "public boolean containsPrefix(@NonNull IpPrefix otherPrefix)", "public boolean isIPv6()", "public boolean isIPv4()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static Comparator<IpPrefix> lengthComparator()" ],
  "variableNames" : [ "address", "prefixLength", "CREATOR" ]
}