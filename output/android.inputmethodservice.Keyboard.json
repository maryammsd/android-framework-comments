{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/inputmethodservice/Keyboard.java",
  "packageName" : "android.inputmethodservice",
  "className" : "Keyboard",
  "comment" : "\n * Loads an XML description of a keyboard and stores the attributes of the keys. A keyboard\n * consists of rows of keys.\n * <p>The layout file for a keyboard contains XML that looks like the following snippet:</p>\n * <pre>\n * &lt;Keyboard\n *         android:keyWidth=\"%10p\"\n *         android:keyHeight=\"50px\"\n *         android:horizontalGap=\"2px\"\n *         android:verticalGap=\"2px\" &gt;\n *     &lt;Row android:keyWidth=\"32px\" &gt;\n *         &lt;Key android:keyLabel=\"A\" /&gt;\n *         ...\n *     &lt;/Row&gt;\n *     ...\n * &lt;/Keyboard&gt;\n * </pre>\n * @attr ref android.R.styleable#Keyboard_keyWidth\n * @attr ref android.R.styleable#Keyboard_keyHeight\n * @attr ref android.R.styleable#Keyboard_horizontalGap\n * @attr ref android.R.styleable#Keyboard_verticalGap\n * @deprecated This class is deprecated because this is just a convenient UI widget class that\n *             application developers can re-implement on top of existing public APIs.  If you have\n *             already depended on this class, consider copying the implementation from AOSP into\n *             your project or re-implementing a similar widget by yourselves\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_KEYBOARD",
    "type" : "String",
    "comment" : " Keyboard XML Tags",
    "links" : [ ]
  }, {
    "name" : "TAG_ROW",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_KEY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EDGE_LEFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EDGE_RIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EDGE_TOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EDGE_BOTTOM",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_MODE_CHANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_CANCEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_DELETE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYCODE_ALT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLabel",
    "type" : "CharSequence",
    "comment" : " Keyboard label *",
    "links" : [ ]
  }, {
    "name" : "mDefaultHorizontalGap",
    "type" : "int",
    "comment" : " Horizontal gap default for all rows ",
    "links" : [ ]
  }, {
    "name" : "mDefaultWidth",
    "type" : "int",
    "comment" : " Default key width ",
    "links" : [ ]
  }, {
    "name" : "mDefaultHeight",
    "type" : "int",
    "comment" : " Default key height ",
    "links" : [ ]
  }, {
    "name" : "mDefaultVerticalGap",
    "type" : "int",
    "comment" : " Default gap between rows ",
    "links" : [ ]
  }, {
    "name" : "mShifted",
    "type" : "boolean",
    "comment" : " Is the keyboard in the shifted state ",
    "links" : [ ]
  }, {
    "name" : "mShiftKeys",
    "type" : "Key[]",
    "comment" : " Key instance for the shift key, if present ",
    "links" : [ ]
  }, {
    "name" : "mShiftKeyIndices",
    "type" : "int[]",
    "comment" : " Key index for the shift key, if present ",
    "links" : [ ]
  }, {
    "name" : "mKeyWidth",
    "type" : "int",
    "comment" : " Current key width, while loading the keyboard ",
    "links" : [ ]
  }, {
    "name" : "mKeyHeight",
    "type" : "int",
    "comment" : " Current key height, while loading the keyboard ",
    "links" : [ ]
  }, {
    "name" : "mTotalHeight",
    "type" : "int",
    "comment" : " Total height of the keyboard, including the padding and keys ",
    "links" : [ ]
  }, {
    "name" : "mTotalWidth",
    "type" : "int",
    "comment" : " \n     * Total width of the keyboard, including left side gaps and keys, but not any gaps on the\n     * right side.\n     ",
    "links" : [ ]
  }, {
    "name" : "mKeys",
    "type" : "List<Key>",
    "comment" : " List of keys in this keyboard ",
    "links" : [ ]
  }, {
    "name" : "mModifierKeys",
    "type" : "List<Key>",
    "comment" : " List of modifier keys such as Shift & Alt, if any ",
    "links" : [ ]
  }, {
    "name" : "mDisplayWidth",
    "type" : "int",
    "comment" : " Width of the screen available to fit the keyboard ",
    "links" : [ ]
  }, {
    "name" : "mDisplayHeight",
    "type" : "int",
    "comment" : " Height of the screen ",
    "links" : [ ]
  }, {
    "name" : "mKeyboardMode",
    "type" : "int",
    "comment" : " Keyboard mode, or zero, if none.  ",
    "links" : [ ]
  }, {
    "name" : "GRID_WIDTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRID_HEIGHT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRID_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCellHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGridNeighbors",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProximityThreshold",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SEARCH_DISTANCE",
    "type" : "float",
    "comment" : " Number of key widths from current touch point to search for nearest keys. ",
    "links" : [ ]
  }, {
    "name" : "rows",
    "type" : "ArrayList<Row>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final void resize(int newWidth, int newHeight)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Key> getKeys()",
    "returnType" : "List<Key>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Key> getModifierKeys()",
    "returnType" : "List<Key>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getHorizontalGap()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setHorizontalGap(int gap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getVerticalGap()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setVerticalGap(int gap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getKeyHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setKeyHeight(int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected int getKeyWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void setKeyWidth(int width)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the total height of the keyboard\n     * @return the total height of the keyboard\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean setShifted(boolean shiftState)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isShifted()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getShiftKeyIndices()",
    "returnType" : "int[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getShiftKeyIndex()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void computeNearestNeighbors()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getNearestKeys(int x, int y)",
    "returnType" : "int[]",
    "comment" : "\n     * Returns the indices of the keys that are closest to the given point.\n     * @param x the x-coordinate of the point\n     * @param y the y-coordinate of the point\n     * @return the array of integer indices for the nearest keys to the given point. If the given\n     * point is out of range, then an array of size zero is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Row createRowFromXml(Resources res, XmlResourceParser parser)",
    "returnType" : "Row",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected Key createKeyFromXml(Resources res, Row parent, int x, int y, XmlResourceParser parser)",
    "returnType" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loadKeyboard(Context context, XmlResourceParser parser)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void skipToEndOfRow(XmlResourceParser parser) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseKeyboardAttributes(Resources res, XmlResourceParser parser)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getDimensionOrFraction(TypedArray a, int index, int base, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " final void resize(int newWidth, int newHeight)", "public List<Key> getKeys()", "public List<Key> getModifierKeys()", "protected int getHorizontalGap()", "protected void setHorizontalGap(int gap)", "protected int getVerticalGap()", "protected void setVerticalGap(int gap)", "protected int getKeyHeight()", "protected void setKeyHeight(int height)", "protected int getKeyWidth()", "protected void setKeyWidth(int width)", "public int getHeight()", "public int getMinWidth()", "public boolean setShifted(boolean shiftState)", "public boolean isShifted()", "public int[] getShiftKeyIndices()", "public int getShiftKeyIndex()", "private void computeNearestNeighbors()", "public int[] getNearestKeys(int x, int y)", "protected Row createRowFromXml(Resources res, XmlResourceParser parser)", "protected Key createKeyFromXml(Resources res, Row parent, int x, int y, XmlResourceParser parser)", "private void loadKeyboard(Context context, XmlResourceParser parser)", "private void skipToEndOfRow(XmlResourceParser parser) throws XmlPullParserException, IOException", "private void parseKeyboardAttributes(Resources res, XmlResourceParser parser)", " static int getDimensionOrFraction(TypedArray a, int index, int base, int defValue)" ],
  "variableNames" : [ "TAG", "TAG_KEYBOARD", "TAG_ROW", "TAG_KEY", "EDGE_LEFT", "EDGE_RIGHT", "EDGE_TOP", "EDGE_BOTTOM", "KEYCODE_SHIFT", "KEYCODE_MODE_CHANGE", "KEYCODE_CANCEL", "KEYCODE_DONE", "KEYCODE_DELETE", "KEYCODE_ALT", "mLabel", "mDefaultHorizontalGap", "mDefaultWidth", "mDefaultHeight", "mDefaultVerticalGap", "mShifted", "mShiftKeys", "mShiftKeyIndices", "mKeyWidth", "mKeyHeight", "mTotalHeight", "mTotalWidth", "mKeys", "mModifierKeys", "mDisplayWidth", "mDisplayHeight", "mKeyboardMode", "GRID_WIDTH", "GRID_HEIGHT", "GRID_SIZE", "mCellWidth", "mCellHeight", "mGridNeighbors", "mProximityThreshold", "SEARCH_DISTANCE", "rows" ]
}