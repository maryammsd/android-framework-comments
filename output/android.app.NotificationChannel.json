{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/NotificationChannel.java",
  "packageName" : "android.app",
  "className" : "NotificationChannel",
  "comment" : "\n * A representation of settings that apply to a collection of similarly themed notifications.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_CHANNEL_ID",
    "type" : "String",
    "comment" : "\n     * The id of the default channel for an app. This id is reserved by the system. All\n     * notifications posted from apps targeting {@link android.os.Build.VERSION_CODES#N_MR1} or\n     * earlier without a notification channel specified are posted to this channel.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#N_MR1" ]
  }, {
    "name" : "CONVERSATION_CHANNEL_ID_FORMAT",
    "type" : "String",
    "comment" : "\n     * The formatter used by the system to create an id for notification\n     * channels when it automatically creates conversation channels on behalf of an app. The format\n     * string takes two arguments, in this order: the\n     * {@link #getId()} of the original notification channel, and the\n     * {@link ShortcutInfo#getId() id} of the conversation.\n     * @hide\n     ",
    "links" : [ "#getId()", "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "PLACEHOLDER_CONVERSATION_ID",
    "type" : "String",
    "comment" : "\n     * TODO: STOPSHIP  remove\n     * Conversation id to use for apps that aren't providing them yet.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EDIT_SOUND",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing sound, like a tone picker\n     * ({@link #setSound(Uri, AudioAttributes)}).\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST", "#setSound(Uri" ]
  }, {
    "name" : "EDIT_VIBRATION",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing vibration ({@link #enableVibration(boolean)},\n     * {@link #setVibrationPattern(long[])}).\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST", "#setVibrationPattern(long", "#enableVibration(boolean)" ]
  }, {
    "name" : "EDIT_IMPORTANCE",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing importance ({@link #setImportance(int)}) and/or conversation\n     * priority.\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST", "#setImportance(int)" ]
  }, {
    "name" : "EDIT_LOCKED_DEVICE",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing behavior on devices that are locked or have a turned off\n     * display ({@link #setLockscreenVisibility(int)}, {@link #enableLights(boolean)},\n     * {@link #setLightColor(int)}).\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST", "#setLightColor(int)", "#setLockscreenVisibility(int)", "#enableLights(boolean)" ]
  }, {
    "name" : "EDIT_ZEN",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing do not disturb bypass {(@link #setBypassDnd(boolean)}) .\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST", "#setBypassDnd(boolean)" ]
  }, {
    "name" : "EDIT_CONVERSATION",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing conversation settings (demoting or restoring a channel to\n     * be a Conversation, changing bubble behavior, or setting the priority of a conversation).\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST" ]
  }, {
    "name" : "EDIT_LAUNCHER",
    "type" : "String",
    "comment" : "\n     * Extra value for {@link Settings#EXTRA_CHANNEL_FILTER_LIST}. Include to show fields\n     * that have to do with editing launcher behavior (showing badges)}.\n     ",
    "links" : [ "android.provider.Settings#EXTRA_CHANNEL_FILTER_LIST" ]
  }, {
    "name" : "MAX_TEXT_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum length for text fields in a NotificationChannel. Fields will be truncated at this\n     * limit.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_VIBRATION_LENGTH",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_CHANNEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_DESC",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_DELETED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_PRIORITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_VISIBILITY",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_IMPORTANCE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_LIGHTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_LIGHT_COLOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_VIBRATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_VIBRATION_EFFECT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_VIBRATION_ENABLED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_SOUND",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_USAGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_FLAGS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_CONTENT_TYPE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_SHOW_BADGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_USER_LOCKED",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_FG_SERVICE_SHOWN",
    "type" : "String",
    "comment" : "\n     * This attribute represents both foreground services and user initiated jobs in U+.\n     * It was not renamed in U on purpose, in order to avoid creating an unnecessary migration path.\n     ",
    "links" : [ ]
  }, {
    "name" : "ATT_GROUP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_BLOCKABLE_SYSTEM",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_ALLOW_BUBBLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_ORIG_IMP",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_PARENT_CHANNEL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_CONVERSATION_ID",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_IMP_CONVERSATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_DEMOTE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATT_DELETED_TIME_MS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELIMITER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_PRIORITY",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_VISIBILITY",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_IMPORTANCE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_LIGHTS",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_VIBRATION",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_SOUND",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_SHOW_BADGE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "USER_LOCKED_ALLOW_BUBBLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCKABLE_FIELDS",
    "type" : "int[]",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_ALLOW_BUBBLE",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_BUBBLE_ON",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ALLOW_BUBBLE_OFF",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_LIGHT_COLOR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_VISIBILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_IMPORTANCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DELETED",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_SHOW_BADGE",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_DELETION_TIME_MS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDesc",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOriginalImportance",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBypassDnd",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLockscreenVisibility",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSound",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSoundRestored",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLights",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLightColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibrationPattern",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibrationEffect",
    "type" : "VibrationEffect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUserLockedFields",
    "type" : "int",
    "comment" : " making changes to these fields.",
    "links" : [ ]
  }, {
    "name" : "mUserVisibleTaskShown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVibrationEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShowBadge",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeleted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGroup",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioAttributes",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlockableSystem",
    "type" : "boolean",
    "comment" : " If this is a blockable system notification channel.",
    "links" : [ ]
  }, {
    "name" : "mAllowBubbles",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportanceLockedDefaultApp",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mParentId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConversationId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDemoted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mImportantConvo",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeletedTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastNotificationUpdateTimeMs",
    "type" : "long",
    "comment" : " Do not (de)serialize this value: it only affects logic in system_server and that logic\n     * is reset on each boot {@link NotificationAttentionHelper#buzzBeepBlinkLocked}.\n     ",
    "links" : [ "#buzzBeepBlinkLocked" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NotificationChannel>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public NotificationChannel copy()",
    "returnType" : "NotificationChannel",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void lockFields(int field)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unlockFields(int field)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUserVisibleTaskShown(boolean shown)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeleted(boolean deleted)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDeletedTimeMs(long time)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportantConversation(boolean importantConvo)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBlockable(boolean blockable)",
    "returnType" : "void",
    "comment" : "\n     * Allows users to block notifications sent through this channel, if this channel belongs to\n     * a package that otherwise would have notifications \"fixed\" as enabled.\n     *\n     * If the channel does not belong to a package that has a fixed notification permission, this\n     * method does nothing, since such channels are blockable by default and cannot be set to be\n     * unblockable.\n     * @param blockable if {@code true}, allows users to block notifications on this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setName(CharSequence name)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user visible name of this channel.\n     *\n     * <p>The recommended maximum length is 40 characters; the value may be truncated if it is too\n     * long.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDescription(String description)",
    "returnType" : "void",
    "comment" : "\n     * Sets the user visible description of this channel.\n     *\n     * <p>The recommended maximum length is 300 characters; the value may be truncated if it is too\n     * long.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getTrimmedString(String input)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setId(String id)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setGroup(String groupId)",
    "returnType" : "void",
    "comment" : "\n     * Sets what group this channel belongs to.\n     *\n     * Group information is only used for presentation, not for behavior.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}, unless the\n     * channel is not currently part of a group.\n     *\n     * @param groupId the id of a group created by\n     * {@link NotificationManager#createNotificationChannelGroup(NotificationChannelGroup)}.\n     ",
    "links" : [ "android.app.NotificationManager#createNotificationChannelGroup(NotificationChannelGroup)", "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setShowBadge(boolean showBadge)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether notifications posted to this channel can appear as application icon badges\n     * in a Launcher.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     *\n     * @param showBadge true if badges should be allowed to be shown.\n     ",
    "links" : [ "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setSound(Uri sound, AudioAttributes audioAttributes)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sound that should be played for notifications posted to this channel and its\n     * audio attributes. Notification channels with an {@link #getImportance() importance} of at\n     * least {@link NotificationManager#IMPORTANCE_DEFAULT} should have a sound.\n     *\n     * Note: An app-specific sound can be provided in the Uri parameter, but because channels are\n     * persistent for the duration of the app install, and are backed up and restored, the Uri\n     * should be stable. For this reason it is not recommended to use a\n     * {@link ContentResolver#SCHEME_ANDROID_RESOURCE} uri, as resource ids can change on app\n     * upgrade.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     ",
    "links" : [ "#getImportance()", "android.app.NotificationManager#createNotificationChannel(NotificationChannel)", "android.content.ContentResolver#SCHEME_ANDROID_RESOURCE", "android.app.NotificationManager#IMPORTANCE_DEFAULT" ]
  }, {
    "name" : "public void enableLights(boolean lights)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether notifications posted to this channel should display notification lights,\n     * on devices that support that feature.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     ",
    "links" : [ "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setLightColor(int argb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the notification light color for notifications posted to this channel, if lights are\n     * {@link #enableLights(boolean) enabled} on this channel and the device supports that feature.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     ",
    "links" : [ "android.app.NotificationManager#createNotificationChannel(NotificationChannel)", "#enableLights(boolean)" ]
  }, {
    "name" : "public void enableVibration(boolean vibration)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether notification posted to this channel should vibrate. The vibration pattern can\n     * be set with {@link #setVibrationPattern(long[])}.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     ",
    "links" : [ "#setVibrationPattern(long", "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setVibrationPattern(long[] vibrationPattern)",
    "returnType" : "void",
    "comment" : "\n     * Sets the vibration pattern for notifications posted to this channel. If the provided\n     * pattern is valid (non-null, non-empty with at least 1 non-zero value), will enable vibration\n     * on this channel (equivalent to calling {@link #enableVibration(boolean)} with {@code true}).\n     * Otherwise, vibration will be disabled unless {@link #enableVibration(boolean)} is\n     * used with {@code true}, in which case the default vibration will be used.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     ",
    "links" : [ "#enableVibration(boolean)", "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setVibrationEffect(@Nullable VibrationEffect effect)",
    "returnType" : "void",
    "comment" : "\n     * Sets a {@link VibrationEffect} for notifications posted to this channel. If the\n     * provided effect is non-null, will enable vibration on this channel (equivalent\n     * to calling {@link #enableVibration(boolean)} with {@code true}). Otherwise\n     * vibration will be disabled unless {@link #enableVibration(boolean)} is used with\n     * {@code true}, in which case the default vibration will be used.\n     *\n     * <p>The effect passed here will be returned from {@link #getVibrationEffect()}.\n     * If the provided {@link VibrationEffect} is an equivalent to a wave-form\n     * vibration pattern, the equivalent wave-form pattern will be returned from\n     * {@link #getVibrationPattern()}.\n     *\n     * <p>Note that some {@link VibrationEffect}s may not be playable on some devices.\n     * In cases where such an effect is passed here, vibration will still be enabled\n     * for the channel, but the default vibration will be used. Nonetheless, the\n     * provided effect will be stored and be returned from {@link #getVibrationEffect}\n     * calls, and could be used by the same channel on a different device, for example,\n     * in cases the user backs up and restores to a device that does have the ability\n     * to play the effect, where that effect will be used instead of the default. To\n     * avoid such issues that could make the vibration behavior of your notification\n     * channel differ among different devices, it's recommended that you avoid\n     * vibration effect primitives, as the support for them differs widely among\n     * devices (read {@link VibrationEffect.Composition} for more on vibration\n     * primitives).\n     *\n     * <p>Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     *\n     * @see #getVibrationEffect()\n     * @see Vibrator#areEffectsSupported(int...)\n     * @see Vibrator#arePrimitivesSupported(int...)\n     ",
    "links" : [ "android.os.VibrationEffect", "#getVibrationPattern()", "#enableVibration(boolean)", "VibrationEffect.Composition", "#getVibrationEffect", "#getVibrationEffect()", "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setImportance(@Importance int importance)",
    "returnType" : "void",
    "comment" : "\n     * Sets the level of interruption of this notification channel.\n     *\n     * Only modifiable before the channel is submitted to\n     * {@link NotificationManager#createNotificationChannel(NotificationChannel)}.\n     *\n     * @param importance the amount the user should be interrupted by\n     *            notifications from this channel.\n     ",
    "links" : [ "android.app.NotificationManager#createNotificationChannel(NotificationChannel)" ]
  }, {
    "name" : "public void setBypassDnd(boolean bypassDnd)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether or not notifications posted to this channel can interrupt the user in\n     * {@link android.app.NotificationManager.Policy#INTERRUPTION_FILTER_PRIORITY} mode.\n     *\n     * Only modifiable by the system and notification ranker.\n     ",
    "links" : [ "android.app.NotificationManager.Policy#INTERRUPTION_FILTER_PRIORITY" ]
  }, {
    "name" : "public void setLockscreenVisibility(int lockscreenVisibility)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether notifications posted to this channel appear on the lockscreen or not, and if so,\n     * whether they appear in a redacted form. See e.g. {@link Notification#VISIBILITY_SECRET}.\n     *\n     * Only modifiable by the system and notification ranker.\n     ",
    "links" : [ "android.app.Notification#VISIBILITY_SECRET" ]
  }, {
    "name" : "public void setAllowBubbles(boolean allowBubbles)",
    "returnType" : "void",
    "comment" : "\n     * As of Android 11 this value is no longer respected.\n     * @see #canBubble()\n     * @see Notification#getBubbleMetadata()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowBubbles(int allowed)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setConversationId(@NonNull String parentChannelId, @NonNull String conversationId)",
    "returnType" : "void",
    "comment" : "\n     * Sets this channel as being converastion-centric. Different settings and functionality may be\n     * exposed for conversation-centric channels.\n     *\n     * @param parentChannelId The {@link #getId()} id} of the generic channel that notifications of\n     *                        this type would be posted to in absence of a specific conversation id.\n     *                        For example, if this channel represents 'Messages from Person A', the\n     *                        parent channel would be 'Messages.'\n     * @param conversationId The {@link ShortcutInfo#getId()} of the shortcut representing this\n     *                       channel's conversation.\n     ",
    "links" : [ "#getId()", "android.content.pm.ShortcutInfo#getId()" ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the id of this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getName()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the user visible name of this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDescription()",
    "returnType" : "String",
    "comment" : "\n     * Returns the user visible description of this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getImportance()",
    "returnType" : "int",
    "comment" : "\n     * Returns the user specified importance e.g. {@link NotificationManager#IMPORTANCE_LOW} for\n     * notifications posted to this channel. Note: This value might be >\n     * {@link NotificationManager#IMPORTANCE_NONE}, but notifications posted to this channel will\n     * not be shown to the user if the parent {@link NotificationChannelGroup} or app is blocked.\n     * See {@link NotificationChannelGroup#isBlocked()} and\n     * {@link NotificationManager#areNotificationsEnabled()}.\n     ",
    "links" : [ "android.app.NotificationManager#IMPORTANCE_LOW", "android.app.NotificationManager#IMPORTANCE_NONE", "android.app.NotificationManager#areNotificationsEnabled()", "android.app.NotificationChannelGroup", "android.app.NotificationChannelGroup#isBlocked()" ]
  }, {
    "name" : "public boolean canBypassDnd()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not notifications posted to this channel can bypass the Do Not Disturb\n     * {@link NotificationManager#INTERRUPTION_FILTER_PRIORITY} mode when the active policy allows\n     * priority channels to bypass notification filtering.\n     ",
    "links" : [ "android.app.NotificationManager#INTERRUPTION_FILTER_PRIORITY" ]
  }, {
    "name" : "public boolean isConversation()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not this channel represents a conversation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImportantConversation()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether or not notifications in this conversation are considered important.\n     *\n     * <p>Important conversations may get special visual treatment, and might be able to bypass DND.\n     *\n     * <p>This is only valid for channels that represent conversations, that is,\n     * where {@link #isConversation()} is true.\n     ",
    "links" : [ "#isConversation()" ]
  }, {
    "name" : "public Uri getSound()",
    "returnType" : "Uri",
    "comment" : "\n     * Returns the notification sound for this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public AudioAttributes getAudioAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * Returns the audio attributes for sound played by notifications posted to this channel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldShowLights()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether notifications posted to this channel trigger notification lights.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLightColor()",
    "returnType" : "int",
    "comment" : "\n     * Returns the notification light color for notifications posted to this channel. Irrelevant\n     * unless {@link #shouldShowLights()}.\n     ",
    "links" : [ "#shouldShowLights()" ]
  }, {
    "name" : "public boolean shouldVibrate()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether notifications posted to this channel always vibrate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getVibrationPattern()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the vibration pattern for notifications posted to this channel. Will be ignored if\n     * vibration is not enabled ({@link #shouldVibrate()}).\n     ",
    "links" : [ "#shouldVibrate()" ]
  }, {
    "name" : "public VibrationEffect getVibrationEffect()",
    "returnType" : "VibrationEffect",
    "comment" : "\n     * Returns the {@link VibrationEffect} for notifications posted to this channel.\n     * The returned effect is derived from either the effect provided in the\n     * {@link #setVibrationEffect(VibrationEffect)} method, or the equivalent vibration effect\n     * of the pattern set via the {@link #setVibrationPattern(long[])} method, based on setter\n     * method that was called last.\n     *\n     * The returned effect will be ignored in one of the following cases:\n     * <ul>\n     *   <li> vibration is not enabled for the channel (i.e. {@link #shouldVibrate()}\n     *        returns {@code false}).\n     *   <li> the effect is not supported/playable by the device. In this case, if\n     *        vibration is enabled for the channel, the default channel vibration will\n     *        be used instead.\n     * </ul>\n     *\n     * @return the {@link VibrationEffect} set via {@link\n     *         #setVibrationEffect(VibrationEffect)}, or the equivalent of the\n     *         vibration set via {@link #setVibrationPattern(long[])}.\n     *\n     *  @see VibrationEffect#createWaveform(long[], int)\n     ",
    "links" : [ "#shouldVibrate()", "#setVibrationEffect(VibrationEffect)", "#setVibrationPattern(long", "android.os.VibrationEffect" ]
  }, {
    "name" : "public int getLockscreenVisibility()",
    "returnType" : "int",
    "comment" : "\n     * Returns whether or not notifications posted to this channel are shown on the lockscreen in\n     * full or redacted form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canShowBadge()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether notifications posted to this channel can appear as badges in a Launcher\n     * application.\n     *\n     * Note that badging may be disabled for other reasons.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getGroup()",
    "returnType" : "String",
    "comment" : "\n     * Returns what group this channel belongs to.\n     *\n     * This is used only for visually grouping channels in the UI.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canBubble()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether notifications posted to this channel are allowed to display outside of the\n     * notification shade, in a floating window on top of other apps.\n     *\n     * @see Notification#getBubbleMetadata()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAllowBubbles()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getParentChannelId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link #getId() id} of the parent notification channel to this channel, if it's\n     * a conversation related channel. See {@link #setConversationId(String, String)}.\n     ",
    "links" : [ "#getId()", "#setConversationId(String" ]
  }, {
    "name" : "public String getConversationId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the {@link ShortcutInfo#getId() id} of the conversation backing this channel, if it's\n     * associated with a conversation. See {@link #setConversationId(String, String)}.\n     ",
    "links" : [ "android.content.pm.ShortcutInfo#getId()", "#setConversationId(String" ]
  }, {
    "name" : "public boolean isDeleted()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDeletedTimeMs()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUserLockedFields()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isUserVisibleTaskShown()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBlockable()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this channel is always blockable, even if the app is 'fixed' as\n     * non-blockable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setImportanceLockedByCriticalDeviceFunction(boolean locked)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isImportanceLockedByCriticalDeviceFunction()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOriginalImportance()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOriginalImportance(int importance)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDemoted(boolean demoted)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDemoted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the user has decided that this channel does not represent a conversation. The\n     * value will always be false for channels that never claimed to be conversations - that is,\n     * for channels where {@link #getConversationId()} and {@link #getParentChannelId()} are empty.\n     ",
    "links" : [ "#getConversationId()", "#getParentChannelId()" ]
  }, {
    "name" : "public boolean hasUserSetImportance()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the user has chosen the importance of this channel, either to affirm the\n     * initial selection from the app, or changed it to be higher or lower.\n     * @see #getImportance()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasUserSetSound()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the user has chosen the sound of this channel.\n     * @see #getSound()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getLastNotificationUpdateTimeMs()",
    "returnType" : "long",
    "comment" : "\n     * Returns the time of the notification post or last update for this channel.\n     * @return time of post / last update\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLastNotificationUpdateTimeMs(long updateTimeMs)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time of the notification post or last update for this channel.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void populateFromXmlForRestore(XmlPullParser parser, boolean pkgInstalled, Context context)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void populateFromXml(XmlPullParser parser)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void populateFromXml(TypedXmlPullParser parser, boolean forRestore, boolean pkgInstalled, @Nullable Context context)",
    "returnType" : "void",
    "comment" : "\n     * If {@param forRestore} is true, {@param Context} MUST be non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSoundRestored()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the sound for this channel was successfully restored\n     *  from backup.\n     * @return false if the sound was not restored successfully. true otherwise (default value)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Uri getCanonicalizedSoundUri(ContentResolver contentResolver, @NonNull Uri uri)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Uri getUncanonicalizedSoundUri(ContentResolver contentResolver, @NonNull Uri uri, int usage)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Uri restoreSoundUri(Context context, @Nullable Uri uri, boolean pkgInstalled, int usage)",
    "returnType" : "Uri",
    "comment" : "\n     * Restore/validate sound Uri from backup\n     * @param context The Context\n     * @param uri The sound Uri to restore\n     * @param pkgInstalled If the parent package is installed\n     * @return restored and validated Uri\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeXml(XmlSerializer out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeXmlForBackup(XmlSerializer out, Context context) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private Uri getSoundForBackup(Context context)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeXml(TypedXmlSerializer out, boolean forBackup, @Nullable Context context) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * If {@param forBackup} is true, {@param Context} MUST be non-null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public JSONObject toJson() throws JSONException",
    "returnType" : "JSONObject",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static AudioAttributes safeAudioAttributes(TypedXmlPullParser parser)",
    "returnType" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Uri safeUri(TypedXmlPullParser parser, String att)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String vibrationToString(VibrationEffect effect)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static VibrationEffect safeVibrationEffect(TypedXmlPullParser parser, String att)",
    "returnType" : "VibrationEffect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int safeInt(TypedXmlPullParser parser, String att, int defValue)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean safeBool(TypedXmlPullParser parser, String att, boolean defValue)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long[] safeLongArray(TypedXmlPullParser parser, String att, long[] defValue)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String longArrayToString(long[] values)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(PrintWriter pw, String prefix, boolean redacted)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getFieldsString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void writeToParcel(Parcel dest, int flags)", "public NotificationChannel copy()", "public void lockFields(int field)", "public void unlockFields(int field)", "public void setUserVisibleTaskShown(boolean shown)", "public void setDeleted(boolean deleted)", "public void setDeletedTimeMs(long time)", "public void setImportantConversation(boolean importantConvo)", "public void setBlockable(boolean blockable)", "public void setName(CharSequence name)", "public void setDescription(String description)", "private String getTrimmedString(String input)", "public void setId(String id)", "public void setGroup(String groupId)", "public void setShowBadge(boolean showBadge)", "public void setSound(Uri sound, AudioAttributes audioAttributes)", "public void enableLights(boolean lights)", "public void setLightColor(int argb)", "public void enableVibration(boolean vibration)", "public void setVibrationPattern(long[] vibrationPattern)", "public void setVibrationEffect(@Nullable VibrationEffect effect)", "public void setImportance(@Importance int importance)", "public void setBypassDnd(boolean bypassDnd)", "public void setLockscreenVisibility(int lockscreenVisibility)", "public void setAllowBubbles(boolean allowBubbles)", "public void setAllowBubbles(int allowed)", "public void setConversationId(@NonNull String parentChannelId, @NonNull String conversationId)", "public String getId()", "public CharSequence getName()", "public String getDescription()", "public int getImportance()", "public boolean canBypassDnd()", "public boolean isConversation()", "public boolean isImportantConversation()", "public Uri getSound()", "public AudioAttributes getAudioAttributes()", "public boolean shouldShowLights()", "public int getLightColor()", "public boolean shouldVibrate()", "public long[] getVibrationPattern()", "public VibrationEffect getVibrationEffect()", "public int getLockscreenVisibility()", "public boolean canShowBadge()", "public String getGroup()", "public boolean canBubble()", "public int getAllowBubbles()", "public String getParentChannelId()", "public String getConversationId()", "public boolean isDeleted()", "public long getDeletedTimeMs()", "public int getUserLockedFields()", "public boolean isUserVisibleTaskShown()", "public boolean isBlockable()", "public void setImportanceLockedByCriticalDeviceFunction(boolean locked)", "public boolean isImportanceLockedByCriticalDeviceFunction()", "public int getOriginalImportance()", "public void setOriginalImportance(int importance)", "public void setDemoted(boolean demoted)", "public boolean isDemoted()", "public boolean hasUserSetImportance()", "public boolean hasUserSetSound()", "public long getLastNotificationUpdateTimeMs()", "public void setLastNotificationUpdateTimeMs(long updateTimeMs)", "public void populateFromXmlForRestore(XmlPullParser parser, boolean pkgInstalled, Context context)", "public void populateFromXml(XmlPullParser parser)", "private void populateFromXml(TypedXmlPullParser parser, boolean forRestore, boolean pkgInstalled, @Nullable Context context)", "public boolean isSoundRestored()", "private Uri getCanonicalizedSoundUri(ContentResolver contentResolver, @NonNull Uri uri)", "private Uri getUncanonicalizedSoundUri(ContentResolver contentResolver, @NonNull Uri uri, int usage)", "public Uri restoreSoundUri(Context context, @Nullable Uri uri, boolean pkgInstalled, int usage)", "public void writeXml(XmlSerializer out) throws IOException", "public void writeXmlForBackup(XmlSerializer out, Context context) throws IOException", "private Uri getSoundForBackup(Context context)", "private void writeXml(TypedXmlSerializer out, boolean forBackup, @Nullable Context context) throws IOException", "public JSONObject toJson() throws JSONException", "private static AudioAttributes safeAudioAttributes(TypedXmlPullParser parser)", "private static Uri safeUri(TypedXmlPullParser parser, String att)", "private static String vibrationToString(VibrationEffect effect)", "private static VibrationEffect safeVibrationEffect(TypedXmlPullParser parser, String att)", "private static int safeInt(TypedXmlPullParser parser, String att, int defValue)", "private static boolean safeBool(TypedXmlPullParser parser, String att, boolean defValue)", "private static long[] safeLongArray(TypedXmlPullParser parser, String att, long[] defValue)", "private static String longArrayToString(long[] values)", "public int describeContents()", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public void dump(PrintWriter pw, String prefix, boolean redacted)", "public String toString()", "private String getFieldsString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)" ],
  "variableNames" : [ "TAG", "DEFAULT_CHANNEL_ID", "CONVERSATION_CHANNEL_ID_FORMAT", "PLACEHOLDER_CONVERSATION_ID", "EDIT_SOUND", "EDIT_VIBRATION", "EDIT_IMPORTANCE", "EDIT_LOCKED_DEVICE", "EDIT_ZEN", "EDIT_CONVERSATION", "EDIT_LAUNCHER", "MAX_TEXT_LENGTH", "MAX_VIBRATION_LENGTH", "TAG_CHANNEL", "ATT_NAME", "ATT_DESC", "ATT_ID", "ATT_DELETED", "ATT_PRIORITY", "ATT_VISIBILITY", "ATT_IMPORTANCE", "ATT_LIGHTS", "ATT_LIGHT_COLOR", "ATT_VIBRATION", "ATT_VIBRATION_EFFECT", "ATT_VIBRATION_ENABLED", "ATT_SOUND", "ATT_USAGE", "ATT_FLAGS", "ATT_CONTENT_TYPE", "ATT_SHOW_BADGE", "ATT_USER_LOCKED", "ATT_FG_SERVICE_SHOWN", "ATT_GROUP", "ATT_BLOCKABLE_SYSTEM", "ATT_ALLOW_BUBBLE", "ATT_ORIG_IMP", "ATT_PARENT_CHANNEL", "ATT_CONVERSATION_ID", "ATT_IMP_CONVERSATION", "ATT_DEMOTE", "ATT_DELETED_TIME_MS", "DELIMITER", "USER_LOCKED_PRIORITY", "USER_LOCKED_VISIBILITY", "USER_LOCKED_IMPORTANCE", "USER_LOCKED_LIGHTS", "USER_LOCKED_VIBRATION", "USER_LOCKED_SOUND", "USER_LOCKED_SHOW_BADGE", "USER_LOCKED_ALLOW_BUBBLE", "LOCKABLE_FIELDS", "DEFAULT_ALLOW_BUBBLE", "ALLOW_BUBBLE_ON", "ALLOW_BUBBLE_OFF", "DEFAULT_LIGHT_COLOR", "DEFAULT_VISIBILITY", "DEFAULT_IMPORTANCE", "DEFAULT_DELETED", "DEFAULT_SHOW_BADGE", "DEFAULT_DELETION_TIME_MS", "mId", "mName", "mDesc", "mImportance", "mOriginalImportance", "mBypassDnd", "mLockscreenVisibility", "mSound", "mSoundRestored", "mLights", "mLightColor", "mVibrationPattern", "mVibrationEffect", "mUserLockedFields", "mUserVisibleTaskShown", "mVibrationEnabled", "mShowBadge", "mDeleted", "mGroup", "mAudioAttributes", "mBlockableSystem", "mAllowBubbles", "mImportanceLockedDefaultApp", "mParentId", "mConversationId", "mDemoted", "mImportantConvo", "mDeletedTime", "mLastNotificationUpdateTimeMs", "CREATOR" ]
}