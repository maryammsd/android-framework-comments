{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/AnimationDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "AnimationDrawable",
  "comment" : "\n * An object used to create frame-by-frame animations, defined by a series of\n * Drawable objects, which can be used as a View object's background.\n * <p>\n * The simplest way to create a frame-by-frame animation is to define the\n * animation in an XML file, placed in the res/drawable/ folder, and set it as\n * the background to a View object. Then, call {@link #start()} to run the\n * animation.\n * <p>\n * An AnimationDrawable defined in XML consists of a single\n * {@code <animation-list>} element and a series of nested\n * {@code <item>} tags. Each item defines a frame of the animation. See\n * the example below.\n * <p>\n * spin_animation.xml file in res/drawable/ folder:\n * <pre>\n * &lt;!-- Animation frames are wheel0.png through wheel5.png\n *     files inside the res/drawable/ folder --&gt;\n * &lt;animation-list android:id=&quot;@+id/selected&quot; android:oneshot=&quot;false&quot;&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel0&quot; android:duration=&quot;50&quot; /&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel1&quot; android:duration=&quot;50&quot; /&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel2&quot; android:duration=&quot;50&quot; /&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel3&quot; android:duration=&quot;50&quot; /&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel4&quot; android:duration=&quot;50&quot; /&gt;\n *    &lt;item android:drawable=&quot;@drawable/wheel5&quot; android:duration=&quot;50&quot; /&gt;\n * &lt;/animation-list&gt;</pre>\n * <p>\n * Here is the code to load and play this animation.\n * <pre>\n * // Load the ImageView that will host the animation and\n * // set its background to our AnimationDrawable XML resource.\n * ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image);\n * img.setBackgroundResource(R.drawable.spin_animation);\n *\n * // Get the background, which has been compiled to an AnimationDrawable object.\n * AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground();\n *\n * // Start the animation (looped playback by default).\n * frameAnimation.start();\n * </pre>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about animating with {@code AnimationDrawable}, read the\n * <a href=\"{@docRoot}guide/topics/graphics/drawable-animation.html\">Drawable Animation</a>\n * developer guide.</p>\n * </div>\n *\n * @attr ref android.R.styleable#AnimationDrawable_visible\n * @attr ref android.R.styleable#AnimationDrawable_variablePadding\n * @attr ref android.R.styleable#AnimationDrawable_oneshot\n * @attr ref android.R.styleable#AnimationDrawableItem_duration\n * @attr ref android.R.styleable#AnimationDrawableItem_drawable\n ",
  "links" : [ "#start()" ],
  "variables" : [ {
    "name" : "mAnimationState",
    "type" : "AnimationState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurFrame",
    "type" : "int",
    "comment" : " The current frame, ranging from 0 to {@link #mAnimationState#getChildCount() - 1} ",
    "links" : [ "#mAnimationState" ]
  }, {
    "name" : "mRunning",
    "type" : "boolean",
    "comment" : " Whether the drawable has an animation callback posted. ",
    "links" : [ ]
  }, {
    "name" : "mAnimating",
    "type" : "boolean",
    "comment" : " Whether the drawable should animate when visible. ",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean setVisible(boolean visible, boolean restart)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets whether this AnimationDrawable is visible.\n     * <p>\n     * When the drawable becomes invisible, it will pause its animation. A subsequent change to\n     * visible with <code>restart</code> set to true will restart the animation from the\n     * first frame. If <code>restart</code> is false, the drawable will resume from the most recent\n     * frame. If the drawable has already reached the last frame, it will then loop back to the\n     * first frame, unless it's a one shot drawable (set through {@link #setOneShot(boolean)}),\n     * in which case, it will stay on the last frame.\n     *\n     * @param visible true if visible, false otherwise\n     * @param restart when visible, true to force the animation to restart\n     *                from the first frame\n     * @return true if the new visibility is different than its previous state\n     ",
    "links" : [ "#setOneShot(boolean)" ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the animation from the first frame, looping if necessary. This method has no effect\n     * if the animation is running.\n     * <p>\n     * <strong>Note:</strong> Do not call this in the\n     * {@link android.app.Activity#onCreate} method of your activity, because\n     * the {@link AnimationDrawable} is not yet fully attached to the window.\n     * If you want to play the animation immediately without requiring\n     * interaction, then you might want to call it from the\n     * {@link android.app.Activity#onWindowFocusChanged} method in your\n     * activity, which will get called when Android brings your window into\n     * focus.\n     *\n     * @see #isRunning()\n     * @see #stop()\n     ",
    "links" : [ "android.app.Activity#onCreate", "android.graphics.drawable.AnimationDrawable", "android.app.Activity#onWindowFocusChanged" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stops the animation at the current frame. This method has no effect if the animation is not\n     * running.\n     *\n     * @see #isRunning()\n     * @see #start()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the animation is currently running or not.\n     *\n     * @return true if the animation is running, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void run()",
    "returnType" : "void",
    "comment" : "\n     * This method exists for implementation purpose only and should not be\n     * called directly. Invoke {@link #start()} instead.\n     *\n     * @see #start()\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public void unscheduleSelf(Runnable what)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getNumberOfFrames()",
    "returnType" : "int",
    "comment" : "\n     * @return The number of frames in the animation\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable getFrame(int index)",
    "returnType" : "Drawable",
    "comment" : "\n     * @return The Drawable at the specified frame index\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getDuration(int i)",
    "returnType" : "int",
    "comment" : "\n     * @return The duration in milliseconds of the frame at the\n     *         specified index\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOneShot()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True of the animation will play once, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOneShot(boolean oneShot)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the animation should play once or repeat.\n     *\n     * @param oneShot Pass true if the animation should only play once\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFrame(@NonNull Drawable frame, int duration)",
    "returnType" : "void",
    "comment" : "\n     * Adds a frame to the animation\n     *\n     * @param frame The frame to add\n     * @param duration How long in milliseconds the frame should appear\n     ",
    "links" : [ ]
  }, {
    "name" : "private void nextFrame(boolean unschedule)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFrame(int frame, boolean unschedule, boolean animate)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AnimationState cloneConstantState()",
    "returnType" : "AnimationState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void setConstantState(@NonNull DrawableContainerState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getTotalDuration()",
    "returnType" : "long",
    "comment" : "\n     * Gets the total duration of the animation\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean setVisible(boolean visible, boolean restart)", "public void start()", "public void stop()", "public boolean isRunning()", "public void run()", "public void unscheduleSelf(Runnable what)", "public int getNumberOfFrames()", "public Drawable getFrame(int index)", "public int getDuration(int i)", "public boolean isOneShot()", "public void setOneShot(boolean oneShot)", "public void addFrame(@NonNull Drawable frame, int duration)", "private void nextFrame(boolean unschedule)", "private void setFrame(int frame, boolean unschedule, boolean animate)", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void inflateChildElements(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(TypedArray a)", "public Drawable mutate()", " AnimationState cloneConstantState()", "public void clearMutated()", "protected void setConstantState(@NonNull DrawableContainerState state)", "public long getTotalDuration()" ],
  "variableNames" : [ "mAnimationState", "mCurFrame", "mRunning", "mAnimating", "mMutated" ]
}