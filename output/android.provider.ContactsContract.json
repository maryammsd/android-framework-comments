{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "ContactsContract",
  "comment" : "\n * <p>\n * The contract between the contacts provider and applications. Contains\n * definitions for the supported URIs and columns. These APIs supersede\n * {@link Contacts}.\n * </p>\n * <h3>Overview</h3>\n * <p>\n * ContactsContract defines an extensible database of contact-related\n * information. Contact information is stored in a three-tier data model:\n * </p>\n * <ul>\n * <li>\n * A row in the {@link Data} table can store any kind of personal data, such\n * as a phone number or email addresses.  The set of data kinds that can be\n * stored in this table is open-ended. There is a predefined set of common\n * kinds, but any application can add its own data kinds.\n * </li>\n * <li>\n * A row in the {@link RawContacts} table represents a set of data describing a\n * person and associated with a single account (for example, one of the user's\n * Gmail accounts).\n * </li>\n * <li>\n * A row in the {@link Contacts} table represents an aggregate of one or more\n * RawContacts presumably describing the same person.  When data in or associated with\n * the RawContacts table is changed, the affected aggregate contacts are updated as\n * necessary.\n * </li>\n * </ul>\n * <p>\n * Other tables include:\n * </p>\n * <ul>\n * <li>\n * {@link Groups}, which contains information about raw contact groups\n * such as Gmail contact groups.  The\n * current API does not support the notion of groups spanning multiple accounts.\n * </li>\n * <li>\n * {@link StatusUpdates}, which contains social status updates including IM\n * availability.\n * </li>\n * <li>\n * {@link AggregationExceptions}, which is used for manual aggregation and\n * disaggregation of raw contacts\n * </li>\n * <li>\n * {@link Settings}, which contains visibility and sync settings for accounts\n * and groups.\n * </li>\n * <li>\n * {@link SyncState}, which contains free-form data maintained on behalf of sync\n * adapters\n * </li>\n * <li>\n * {@link PhoneLookup}, which is used for quick caller-ID lookup</li>\n * </ul>\n ",
  "links" : [ "AggregationExceptions", "SyncState", "Groups", "android.provider.Contacts", "RawContacts", "PhoneLookup", "Data", "android.provider.Settings", "StatusUpdates" ],
  "variables" : [ {
    "name" : "AUTHORITY",
    "type" : "String",
    "comment" : " The authority for the contacts provider ",
    "links" : [ ]
  }, {
    "name" : "AUTHORITY_URI",
    "type" : "Uri",
    "comment" : " A content:// style uri to the authority for the contacts provider ",
    "links" : [ ]
  }, {
    "name" : "HIDDEN_COLUMN_PREFIX",
    "type" : "String",
    "comment" : "\n     * Prefix for column names that are not visible to client apps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CALLER_IS_SYNCADAPTER",
    "type" : "String",
    "comment" : "\n     * An optional URI parameter for insert, update, or delete queries\n     * that allows the caller\n     * to specify that it is a sync adapter. The default value is false. If true\n     * {@link RawContacts#DIRTY} is not automatically set and the\n     * \"syncToNetwork\" parameter is set to false when calling\n     * {@link\n     * ContentResolver#notifyChange(android.net.Uri, android.database.ContentObserver, boolean)}.\n     * This prevents an unnecessary extra synchronization, see the discussion of\n     * the delete operation in {@link RawContacts}.\n     ",
    "links" : [ "android.content.ContentResolver#notifyChange(android.net.Uri", "#DIRTY", "RawContacts" ]
  }, {
    "name" : "DIRECTORY_PARAM_KEY",
    "type" : "String",
    "comment" : "\n     * Query parameter that should be used by the client to access a specific\n     * {@link Directory}. The parameter value should be the _ID of the corresponding\n     * directory, e.g.\n     * {@code content://com.android.contacts/data/emails/filter/acme?directory=3}\n     ",
    "links" : [ "Directory" ]
  }, {
    "name" : "LIMIT_PARAM_KEY",
    "type" : "String",
    "comment" : "\n     * A query parameter that limits the number of results returned for supported URIs. The\n     * parameter value should be an integer.\n     *\n     * <p>This parameter is not supported by all URIs.  Supported URIs include, but not limited to,\n     * {@link Contacts#CONTENT_URI},\n     * {@link RawContacts#CONTENT_URI},\n     * {@link Data#CONTENT_URI},\n     * {@link CommonDataKinds.Phone#CONTENT_URI},\n     * {@link CommonDataKinds.Callable#CONTENT_URI},\n     * {@link CommonDataKinds.Email#CONTENT_URI},\n     * {@link CommonDataKinds.Contactables#CONTENT_URI},\n     *\n     * <p>In order to limit the number of rows returned by a non-supported URI, you can implement a\n     * {@link CursorWrapper} and override the {@link CursorWrapper#getCount()} methods.\n     ",
    "links" : [ "CommonDataKinds.Phone#CONTENT_URI", "CommonDataKinds.Contactables#CONTENT_URI", "CommonDataKinds.Email#CONTENT_URI", "android.database.CursorWrapper#getCount()", "CommonDataKinds.Callable#CONTENT_URI", "#CONTENT_URI", "android.provider.Contacts#CONTENT_URI", "android.database.CursorWrapper" ]
  }, {
    "name" : "PRIMARY_ACCOUNT_NAME",
    "type" : "String",
    "comment" : "\n     * A query parameter specifing a primary account. This parameter should be used with\n     * {@link #PRIMARY_ACCOUNT_TYPE}. The contacts provider handling a query may rely on\n     * this information to optimize its query results.\n     *\n     * For example, in an email composition screen, its implementation can specify an account when\n     * obtaining possible recipients, letting the provider know which account is selected during\n     * the composition. The provider may use the \"primary account\" information to optimize\n     * the search result.\n     ",
    "links" : [ "#PRIMARY_ACCOUNT_TYPE" ]
  }, {
    "name" : "PRIMARY_ACCOUNT_TYPE",
    "type" : "String",
    "comment" : "\n     * A query parameter specifing a primary account. This parameter should be used with\n     * {@link #PRIMARY_ACCOUNT_NAME}. See the doc in {@link #PRIMARY_ACCOUNT_NAME}.\n     ",
    "links" : [ "#PRIMARY_ACCOUNT_NAME" ]
  }, {
    "name" : "STREQUENT_PHONE_ONLY",
    "type" : "String",
    "comment" : "\n     * A boolean parameter for {@link Contacts#CONTENT_STREQUENT_URI} and\n     * {@link Contacts#CONTENT_STREQUENT_FILTER_URI}, which requires the ContactsProvider to\n     * return only phone-related results.\n     ",
    "links" : [ "android.provider.Contacts#CONTENT_STREQUENT_URI", "android.provider.Contacts#CONTENT_STREQUENT_FILTER_URI" ]
  }, {
    "name" : "DEFERRED_SNIPPETING",
    "type" : "String",
    "comment" : "\n     * A key to a boolean in the \"extras\" bundle of the cursor.\n     * The boolean indicates that the provider did not create a snippet and that the client asking\n     * for the snippet should do it (true means the snippeting was deferred to the client).\n     *\n     * @see SearchSnippets\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFERRED_SNIPPETING_QUERY",
    "type" : "String",
    "comment" : "\n     * Key to retrieve the original deferred snippeting from the cursor on the client side.\n     *\n     * @see SearchSnippets\n     * @see #DEFERRED_SNIPPETING\n     ",
    "links" : [ ]
  }, {
    "name" : "REMOVE_DUPLICATE_ENTRIES",
    "type" : "String",
    "comment" : "\n     * A boolean parameter for {@link CommonDataKinds.Phone#CONTENT_URI Phone.CONTENT_URI},\n     * {@link CommonDataKinds.Email#CONTENT_URI Email.CONTENT_URI}, and\n     * {@link CommonDataKinds.StructuredPostal#CONTENT_URI StructuredPostal.CONTENT_URI}.\n     * This enables a content provider to remove duplicate entries in results.\n     ",
    "links" : [ "CommonDataKinds.Phone#CONTENT_URI", "CommonDataKinds.Email#CONTENT_URI", "CommonDataKinds.StructuredPostal#CONTENT_URI" ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isProfileId(long id)",
    "returnType" : "boolean",
    "comment" : "\n     * This method can be used to identify whether the given ID is associated with profile\n     * data.  It does not necessarily indicate that the ID is tied to valid data, merely\n     * that accessing data using this ID will result in profile access checks and will only\n     * return data from the profile.\n     *\n     * @param id The ID to check.\n     * @return Whether the ID is associated with profile data.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Bundle nullSafeCall(@NonNull ContentResolver resolver, @NonNull Uri uri, @NonNull String method, @Nullable String arg, @Nullable Bundle extras)",
    "returnType" : "Bundle",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isProfileId(long id)", "private static Bundle nullSafeCall(@NonNull ContentResolver resolver, @NonNull Uri uri, @NonNull String method, @Nullable String arg, @Nullable Bundle extras)" ],
  "variableNames" : [ "AUTHORITY", "AUTHORITY_URI", "HIDDEN_COLUMN_PREFIX", "CALLER_IS_SYNCADAPTER", "DIRECTORY_PARAM_KEY", "LIMIT_PARAM_KEY", "PRIMARY_ACCOUNT_NAME", "PRIMARY_ACCOUNT_TYPE", "STREQUENT_PHONE_ONLY", "DEFERRED_SNIPPETING", "DEFERRED_SNIPPETING_QUERY", "REMOVE_DUPLICATE_ENTRIES" ]
}