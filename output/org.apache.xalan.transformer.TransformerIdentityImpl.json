{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/transformer/TransformerIdentityImpl.java",
  "packageName" : "org.apache.xalan.transformer",
  "className" : "TransformerIdentityImpl",
  "comment" : "\n * This class implements an identity transformer for\n * {@link javax.xml.transform.sax.SAXTransformerFactory#newTransformerHandler()}\n * and {@link javax.xml.transform.TransformerFactory#newTransformer()}.  It\n * simply feeds SAX events directly to a serializer ContentHandler, if the\n * result is a stream.  If the result is a DOM, it will send the events to\n * {@link org.apache.xml.utils.DOMBuilder}.  If the result is another\n * content handler, it will simply pass the events on.\n ",
  "links" : [ "javax.xml.transform.TransformerFactory#newTransformer()", "javax.xml.transform.sax.SAXTransformerFactory#newTransformerHandler()", "org.apache.xml.utils.DOMBuilder" ],
  "variables" : [ {
    "name" : "m_flushedStartDoc",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_outputStream",
    "type" : "java.io.FileOutputStream",
    "comment" : "\n   * This is null unless we own the stream.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_resultContentHandler",
    "type" : "ContentHandler",
    "comment" : " The content handler where result events will be sent. ",
    "links" : [ ]
  }, {
    "name" : "m_resultLexicalHandler",
    "type" : "LexicalHandler",
    "comment" : " The lexical handler where result events will be sent. ",
    "links" : [ ]
  }, {
    "name" : "m_resultDTDHandler",
    "type" : "DTDHandler",
    "comment" : " The DTD handler where result events will be sent. ",
    "links" : [ ]
  }, {
    "name" : "m_resultDeclHandler",
    "type" : "DeclHandler",
    "comment" : " The Decl handler where result events will be sent. ",
    "links" : [ ]
  }, {
    "name" : "m_serializer",
    "type" : "Serializer",
    "comment" : " The Serializer, which may or may not be null. ",
    "links" : [ ]
  }, {
    "name" : "m_result",
    "type" : "Result",
    "comment" : " The Result object. ",
    "links" : [ ]
  }, {
    "name" : "m_systemID",
    "type" : "String",
    "comment" : "\n   * The system ID, which is unused, but must be returned to fullfill the\n   *  TransformerHandler interface.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_params",
    "type" : "Hashtable",
    "comment" : "\n   * The parameters, which is unused, but must be returned to fullfill the\n   *  Transformer interface.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_errorListener",
    "type" : "ErrorListener",
    "comment" : " The error listener for TrAX errors and warnings. ",
    "links" : [ ]
  }, {
    "name" : "m_URIResolver",
    "type" : "URIResolver",
    "comment" : "\n   * The URIResolver, which is unused, but must be returned to fullfill the\n   *  TransformerHandler interface.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_outputFormat",
    "type" : "OutputProperties",
    "comment" : " The output properties. ",
    "links" : [ ]
  }, {
    "name" : "m_foundFirstElement",
    "type" : "boolean",
    "comment" : " Flag to set if we've found the first element, so we can tell if we have \n   *  to check to see if we should create an HTML serializer.      ",
    "links" : [ ]
  }, {
    "name" : "m_isSecureProcessing",
    "type" : "boolean",
    "comment" : "\n   * State of the secure processing feature.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setResult(Result result) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Enables the user of the TransformerHandler to set the\n   * to set the Result for the transformation.\n   *\n   * @param result A Result instance, should not be null.\n   *\n   * @throws IllegalArgumentException if result is invalid for some reason.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setSystemId(String systemID)",
    "returnType" : "void",
    "comment" : "\n   * Set the base ID (URI or system ID) from where relative\n   * URLs will be resolved.\n   * @param systemID Base URI for the source tree.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getSystemId()",
    "returnType" : "String",
    "comment" : "\n   * Get the base ID (URI or system ID) from where relative\n   * URLs will be resolved.\n   * @return The systemID that was set with {@link #setSystemId}.\n   ",
    "links" : [ "#setSystemId" ]
  }, {
    "name" : "public Transformer getTransformer()",
    "returnType" : "Transformer",
    "comment" : "\n   * Get the Transformer associated with this handler, which\n   * is needed in order to set parameters and output properties.\n   *\n   * @return non-null reference to the transformer.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the status of the transformer.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void createResultContentHandler(Result outputTarget) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Create a result ContentHandler from a Result object, based\n   * on the current OutputProperties.\n   *\n   * @param outputTarget Where the transform result should go,\n   * should not be null.\n   *\n   * @return A valid ContentHandler that will create the\n   * result tree when it is fed SAX events.\n   *\n   * @throws TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void transform(Source source, Result outputTarget) throws TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Process the source tree to the output result.\n   * @param source  The input for the source tree.\n   *\n   * @param outputTarget The output target.\n   *\n   * @throws TransformerException If an unrecoverable error occurs\n   * during the course of the transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setParameter(String name, Object value)",
    "returnType" : "void",
    "comment" : "\n   * Add a parameter for the transformation.\n   *\n   * <p>Pass a qualified name as a two-part string, the namespace URI\n   * enclosed in curly braces ({}), followed by the local name. If the\n   * name has a null URL, the String only contain the local name. An\n   * application can safely check for a non-null URI by testing to see if the first\n   * character of the name is a '{' character.</p>\n   * <p>For example, if a URI and local name were obtained from an element\n   * defined with &lt;xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n   * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that\n   * no prefix is used.</p>\n   *\n   * @param name The name of the parameter, which may begin with a namespace URI\n   * in curly braces ({}).\n   * @param value The value object.  This can be any valid Java object. It is\n   * up to the processor to provide the proper object coersion or to simply\n   * pass the object on for use in an extension.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Object getParameter(String name)",
    "returnType" : "Object",
    "comment" : "\n   * Get a parameter that was explicitly set with setParameter\n   * or setParameters.\n   *\n   * <p>This method does not return a default parameter value, which\n   * cannot be determined until the node context is evaluated during\n   * the transformation process.\n   *\n   *\n   * @param name Name of the parameter.\n   * @return A parameter that has been set with setParameter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void clearParameters()",
    "returnType" : "void",
    "comment" : "\n   * Clear all parameters set with setParameter.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setURIResolver(URIResolver resolver)",
    "returnType" : "void",
    "comment" : "\n   * Set an object that will be used to resolve URIs used in\n   * document().\n   *\n   * <p>If the resolver argument is null, the URIResolver value will\n   * be cleared, and the default behavior will be used.</p>\n   *\n   * @param resolver An object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public URIResolver getURIResolver()",
    "returnType" : "URIResolver",
    "comment" : "\n   * Get an object that will be used to resolve URIs used in\n   * document(), etc.\n   *\n   * @return An object that implements the URIResolver interface,\n   * or null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setOutputProperties(Properties oformat) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Set the output properties for the transformation.  These\n   * properties will override properties set in the Templates\n   * with xsl:output.\n   *\n   * <p>If argument to this function is null, any properties\n   * previously set are removed, and the value will revert to the value\n   * defined in the templates object.</p>\n   *\n   * <p>Pass a qualified property key name as a two-part string, the namespace URI\n   * enclosed in curly braces ({}), followed by the local name. If the\n   * name has a null URL, the String only contain the local name. An\n   * application can safely check for a non-null URI by testing to see if the first\n   * character of the name is a '{' character.</p>\n   * <p>For example, if a URI and local name were obtained from an element\n   * defined with &lt;xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n   * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that\n   * no prefix is used.</p>\n   *\n   * @param oformat A set of output properties that will be\n   * used to override any of the same properties in affect\n   * for the transformation.\n   *\n   * @see javax.xml.transform.OutputKeys\n   * @see java.util.Properties\n   *\n   * @throws IllegalArgumentException if any of the argument keys are not\n   * recognized and are not namespace qualified.\n   ",
    "links" : [ ]
  }, {
    "name" : "public Properties getOutputProperties()",
    "returnType" : "Properties",
    "comment" : "\n   * Get a copy of the output properties for the transformation.\n   *\n   * <p>The properties returned should contain properties set by the user,\n   * and properties set by the stylesheet, and these properties\n   * are \"defaulted\" by default properties specified by <a href=\"http://www.w3.org/TR/xslt#output\">section 16 of the\n   * XSL Transformations (XSLT) W3C Recommendation</a>.  The properties that\n   * were specifically set by the user or the stylesheet should be in the base\n   * Properties list, while the XSLT default properties that were not\n   * specifically set should be the default Properties list.  Thus,\n   * getOutputProperties().getProperty(String key) will obtain any\n   * property in that was set by {@link #setOutputProperty},\n   * {@link #setOutputProperties}, in the stylesheet, <em>or</em> the default\n   * properties, while\n   * getOutputProperties().get(String key) will only retrieve properties\n   * that were explicitly set by {@link #setOutputProperty},\n   * {@link #setOutputProperties}, or in the stylesheet.</p>\n   *\n   * <p>Note that mutation of the Properties object returned will not\n   * effect the properties that the transformation contains.</p>\n   *\n   * <p>If any of the argument keys are not recognized and are not\n   * namespace qualified, the property will be ignored.  In other words the\n   * behaviour is not orthogonal with setOutputProperties.</p>\n   *\n   * @return A copy of the set of output properties in effect\n   * for the next transformation.\n   *\n   * @see javax.xml.transform.OutputKeys\n   * @see java.util.Properties\n   ",
    "links" : [ "#setOutputProperty", "#setOutputProperties" ]
  }, {
    "name" : "public void setOutputProperty(String name, String value) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Set an output property that will be in effect for the\n   * transformation.\n   *\n   * <p>Pass a qualified property name as a two-part string, the namespace URI\n   * enclosed in curly braces ({}), followed by the local name. If the\n   * name has a null URL, the String only contain the local name. An\n   * application can safely check for a non-null URI by testing to see if the first\n   * character of the name is a '{' character.</p>\n   * <p>For example, if a URI and local name were obtained from an element\n   * defined with &lt;xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/&gt;,\n   * then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that\n   * no prefix is used.</p>\n   *\n   * <p>The Properties object that was passed to {@link #setOutputProperties} won't\n   * be effected by calling this method.</p>\n   *\n   * @param name A non-null String that specifies an output\n   * property name, which may be namespace qualified.\n   * @param value The non-null string value of the output property.\n   *\n   * @throws IllegalArgumentException If the property is not supported, and is\n   * not qualified with a namespace.\n   *\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ "#setOutputProperties" ]
  }, {
    "name" : "public String getOutputProperty(String name) throws IllegalArgumentException",
    "returnType" : "String",
    "comment" : "\n   * Get an output property that is in effect for the\n   * transformation.  The property specified may be a property\n   * that was set with setOutputProperty, or it may be a\n   * property specified in the stylesheet.\n   *\n   * @param name A non-null String that specifies an output\n   * property name, which may be namespace qualified.\n   *\n   * @return The string value of the output property, or null\n   * if no property was found.\n   *\n   * @throws IllegalArgumentException If the property is not supported.\n   *\n   * @see javax.xml.transform.OutputKeys\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n   * Set the error event listener in effect for the transformation.\n   *\n   * @param listener The new error listener.\n   * @throws IllegalArgumentException if listener is null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public ErrorListener getErrorListener()",
    "returnType" : "ErrorListener",
    "comment" : "\n   * Get the error event handler in effect for the transformation.\n   *\n   * @return The current error handler, which should never be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void notationDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a notation declaration.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass if they wish to keep track of the notations\n   * declared in a document.</p>\n   *\n   * @param name The notation name.\n   * @param publicId The notation public identifier, or null if not\n   *                 available.\n   * @param systemId The notation system identifier.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.DTDHandler#notationDecl\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of an unparsed entity declaration.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to keep track of the unparsed entities\n   * declared in a document.</p>\n   *\n   * @param name The entity name.\n   * @param publicId The entity public identifier, or null if not\n   *                 available.\n   * @param systemId The entity system identifier.\n   * @param notationName The name of the associated notation.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setDocumentLocator(Locator locator)",
    "returnType" : "void",
    "comment" : "\n   * Receive a Locator object for document events.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass if they wish to store the locator for use\n   * with other document events.</p>\n   *\n   * @param locator A locator for all SAX document events.\n   * @see org.xml.sax.ContentHandler#setDocumentLocator\n   * @see org.xml.sax.Locator\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the beginning of the document.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the beginning\n   * of a document (such as allocating the root node of a tree or\n   * creating an output file).</p>\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#startDocument\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "protected final void flushStartDoc() throws SAXException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void endDocument() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of the document.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the end\n   * of a document (such as finalising a tree or closing an output\n   * file).</p>\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#endDocument\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startPrefixMapping(String prefix, String uri) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the start of a Namespace mapping.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the start of\n   * each Namespace prefix scope (such as storing the prefix mapping).</p>\n   *\n   * @param prefix The Namespace prefix being declared.\n   * @param uri The Namespace URI mapped to the prefix.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#startPrefixMapping\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endPrefixMapping(String prefix) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of a Namespace mapping.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the end of\n   * each prefix mapping.</p>\n   *\n   * @param prefix The Namespace prefix being declared.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#endPrefixMapping\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the start of an element.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the start of\n   * each element (such as allocating a new tree node or writing\n   * output to a file).</p>\n   *\n   * @param uri The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param qName The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   * @param attributes The specified or defaulted attributes.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#startElement\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void endElement(String uri, String localName, String qName) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of the end of an element.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions at the end of\n   * each element (such as finalising a tree node or writing\n   * output to a file).</p>\n   *\n   * @param uri The Namespace URI, or the empty string if the\n   *        element has no Namespace URI or if Namespace\n   *        processing is not being performed.\n   * @param localName The local name (without prefix), or the\n   *        empty string if Namespace processing is not being\n   *        performed.\n   * @param qName The qualified name (with prefix), or the\n   *        empty string if qualified names are not available.\n   *\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#endElement\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void characters(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of character data inside an element.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method to take specific actions for each chunk of character data\n   * (such as adding the data to a node or buffer, or printing it to\n   * a file).</p>\n   *\n   * @param ch The characters.\n   * @param start The start position in the character array.\n   * @param length The number of characters to use from the\n   *               character array.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#characters\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of ignorable whitespace in element content.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method to take specific actions for each chunk of ignorable\n   * whitespace (such as adding data to a node or buffer, or printing\n   * it to a file).</p>\n   *\n   * @param ch The whitespace characters.\n   * @param start The start position in the character array.\n   * @param length The number of characters to use from the\n   *               character array.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#ignorableWhitespace\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void processingInstruction(String target, String data) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a processing instruction.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions for each\n   * processing instruction, such as setting status variables or\n   * invoking other methods.</p>\n   *\n   * @param target The processing instruction target.\n   * @param data The processing instruction data, or null if\n   *             none is supplied.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#processingInstruction\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void skippedEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Receive notification of a skipped entity.\n   *\n   * <p>By default, do nothing.  Application writers may override this\n   * method in a subclass to take specific actions for each\n   * processing instruction, such as setting status variables or\n   * invoking other methods.</p>\n   *\n   * @param name The name of the skipped entity.\n   * @throws org.xml.sax.SAXException Any SAX exception, possibly\n   *            wrapping another exception.\n   * @see org.xml.sax.ContentHandler#processingInstruction\n   *\n   * @throws SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startDTD(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of DTD declarations, if any.\n   *\n   * <p>Any declarations are assumed to be in the internal subset\n   * unless otherwise indicated by a {@link #startEntity startEntity}\n   * event.</p>\n   *\n   * <p>Note that the start/endDTD events will appear within\n   * the start/endDocument events from ContentHandler and\n   * before the first startElement event.</p>\n   *\n   * @param name The document type name.\n   * @param publicId The declared public identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @param systemId The declared system identifier for the\n   *        external DTD subset, or null if none was declared.\n   * @throws SAXException The application may raise an\n   *            exception.\n   * @see #endDTD\n   * @see #startEntity\n   ",
    "links" : [ "#startEntity" ]
  }, {
    "name" : "public void endDTD() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of DTD declarations.\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #startDTD\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the beginning of an entity in content.\n   *\n   * <p><strong>NOTE:</entity> entity references in attribute\n   * values -- and the start and end of the document entity --\n   * are never reported.</p>\n   *\n   * <p>The start and end of the external DTD subset are reported\n   * using the pseudo-name \"[dtd]\".  All other events must be\n   * properly nested within start/end entity events.</p>\n   *\n   * <p>Note that skipped entities will be reported through the\n   * {@link org.xml.sax.ContentHandler#skippedEntity skippedEntity}\n   * event, which is part of the ContentHandler interface.</p>\n   *\n   * @param name The name of the entity.  If it is a parameter\n   *        entity, the name will begin with '%'.\n   * @throws SAXException The application may raise an exception.\n   * @see #endEntity\n   * @see org.xml.sax.ext.DeclHandler#internalEntityDecl\n   * @see org.xml.sax.ext.DeclHandler#externalEntityDecl\n   ",
    "links" : [ "org.xml.sax.ContentHandler#skippedEntity" ]
  }, {
    "name" : "public void endEntity(String name) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of an entity.\n   *\n   * @param name The name of the entity that is ending.\n   * @throws SAXException The application may raise an exception.\n   * @see #startEntity\n   ",
    "links" : [ ]
  }, {
    "name" : "public void startCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the start of a CDATA section.\n   *\n   * <p>The contents of the CDATA section will be reported through\n   * the regular {@link org.xml.sax.ContentHandler#characters\n   * characters} event.</p>\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #endCDATA\n   ",
    "links" : [ "org.xml.sax.ContentHandler#characterscharacters" ]
  }, {
    "name" : "public void endCDATA() throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report the end of a CDATA section.\n   *\n   * @throws SAXException The application may raise an exception.\n   * @see #startCDATA\n   ",
    "links" : [ ]
  }, {
    "name" : "public void comment(char[] ch, int start, int length) throws SAXException",
    "returnType" : "void",
    "comment" : "\n   * Report an XML comment anywhere in the document.\n   *\n   * <p>This callback will be used for comments inside or outside the\n   * document element, including comments in the external DTD\n   * subset (if read).</p>\n   *\n   * @param ch An array holding the characters in the comment.\n   * @param start The starting position in the array.\n   * @param length The number of characters to use from the array.\n   * @throws SAXException The application may raise an exception.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void elementDecl(String name, String model) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an element type declaration.\n     *\n     * <p>The content model will consist of the string \"EMPTY\", the\n     * string \"ANY\", or a parenthesised group, optionally followed\n     * by an occurrence indicator.  The model will be normalized so\n     * that all whitespace is removed,and will include the enclosing\n     * parentheses.</p>\n     *\n     * @param name The element type name.\n     * @param model The content model as a normalized string.\n     * @exception SAXException The application may raise an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an attribute type declaration.\n     *\n     * <p>Only the effective (first) declaration for an attribute will\n     * be reported.  The type will be one of the strings \"CDATA\",\n     * \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\",\n     * \"ENTITIES\", or \"NOTATION\", or a parenthesized token group with \n     * the separator \"|\" and all whitespace removed.</p>\n     *\n     * @param eName The name of the associated element.\n     * @param aName The name of the attribute.\n     * @param type A string representing the attribute type.\n     * @param valueDefault A string representing the attribute default\n     *        (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if\n     *        none of these applies.\n     * @param value A string representing the attribute's default value,\n     *        or null if there is none.\n     * @exception SAXException The application may raise an exception.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void internalEntityDecl(String name, String value) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report an internal entity declaration.\n     *\n     * <p>Only the effective (first) declaration for each entity\n     * will be reported.</p>\n     *\n     * @param name The name of the entity.  If it is a parameter\n     *        entity, the name will begin with '%'.\n     * @param value The replacement text of the entity.\n     * @exception SAXException The application may raise an exception.\n     * @see #externalEntityDecl\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n     ",
    "links" : [ ]
  }, {
    "name" : "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException",
    "returnType" : "void",
    "comment" : "\n     * Report a parsed external entity declaration.\n     *\n     * <p>Only the effective (first) declaration for each entity\n     * will be reported.</p>\n     *\n     * @param name The name of the entity.  If it is a parameter\n     *        entity, the name will begin with '%'.\n     * @param publicId The declared public identifier of the entity, or\n     *        null if none was declared.\n     * @param systemId The declared system identifier of the entity.\n     * @exception SAXException The application may raise an exception.\n     * @see #internalEntityDecl\n     * @see org.xml.sax.DTDHandler#unparsedEntityDecl\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setResult(Result result) throws IllegalArgumentException", "public void setSystemId(String systemID)", "public String getSystemId()", "public Transformer getTransformer()", "public void reset()", "private void createResultContentHandler(Result outputTarget) throws TransformerException", "public void transform(Source source, Result outputTarget) throws TransformerException", "public void setParameter(String name, Object value)", "public Object getParameter(String name)", "public void clearParameters()", "public void setURIResolver(URIResolver resolver)", "public URIResolver getURIResolver()", "public void setOutputProperties(Properties oformat) throws IllegalArgumentException", "public Properties getOutputProperties()", "public void setOutputProperty(String name, String value) throws IllegalArgumentException", "public String getOutputProperty(String name) throws IllegalArgumentException", "public void setErrorListener(ErrorListener listener) throws IllegalArgumentException", "public ErrorListener getErrorListener()", "public void notationDecl(String name, String publicId, String systemId) throws SAXException", "public void unparsedEntityDecl(String name, String publicId, String systemId, String notationName) throws SAXException", "public void setDocumentLocator(Locator locator)", "public void startDocument() throws SAXException", "protected final void flushStartDoc() throws SAXException", "public void endDocument() throws SAXException", "public void startPrefixMapping(String prefix, String uri) throws SAXException", "public void endPrefixMapping(String prefix) throws SAXException", "public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException", "public void endElement(String uri, String localName, String qName) throws SAXException", "public void characters(char[] ch, int start, int length) throws SAXException", "public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException", "public void processingInstruction(String target, String data) throws SAXException", "public void skippedEntity(String name) throws SAXException", "public void startDTD(String name, String publicId, String systemId) throws SAXException", "public void endDTD() throws SAXException", "public void startEntity(String name) throws SAXException", "public void endEntity(String name) throws SAXException", "public void startCDATA() throws SAXException", "public void endCDATA() throws SAXException", "public void comment(char[] ch, int start, int length) throws SAXException", "public void elementDecl(String name, String model) throws SAXException", "public void attributeDecl(String eName, String aName, String type, String valueDefault, String value) throws SAXException", "public void internalEntityDecl(String name, String value) throws SAXException", "public void externalEntityDecl(String name, String publicId, String systemId) throws SAXException" ],
  "variableNames" : [ "m_flushedStartDoc", "m_outputStream", "m_resultContentHandler", "m_resultLexicalHandler", "m_resultDTDHandler", "m_resultDeclHandler", "m_serializer", "m_result", "m_systemID", "m_params", "m_errorListener", "m_URIResolver", "m_outputFormat", "m_foundFirstElement", "m_isSecureProcessing" ]
}