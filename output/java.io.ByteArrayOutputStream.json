{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/ByteArrayOutputStream.java",
  "packageName" : "java.io",
  "className" : "ByteArrayOutputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "buf",
    "type" : "byte[]",
    "comment" : "\n     * The buffer where data is stored.\n     ",
    "links" : [ ]
  }, {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * The number of valid bytes in the buffer.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ARRAY_SIZE",
    "type" : "int",
    "comment" : "\n     * The maximum size of array to allocate.\n     * Some VMs reserve some header words in an array.\n     * Attempts to allocate larger arrays may result in\n     * OutOfMemoryError: Requested array size exceeds VM limit\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void ensureCapacity(int minCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Increases the capacity if necessary to ensure that it can hold\n     * at least the number of elements specified by the minimum\n     * capacity argument.\n     *\n     * @param  minCapacity the desired minimum capacity\n     * @throws OutOfMemoryError if {@code minCapacity < 0}.  This is\n     * interpreted as a request for the unsatisfiably large capacity\n     * {@code (long) Integer.MAX_VALUE + (minCapacity - Integer.MAX_VALUE)}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void grow(int minCapacity)",
    "returnType" : "void",
    "comment" : "\n     * Increases the capacity to ensure that it can hold at least the\n     * number of elements specified by the minimum capacity argument.\n     *\n     * @param minCapacity the desired minimum capacity\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int hugeCapacity(int minCapacity)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(int b)",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this {@code ByteArrayOutputStream}.\n     *\n     * @param   b   the byte to be written.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void write(byte[] b, int off, int len)",
    "returnType" : "void",
    "comment" : "\n     * Writes {@code len} bytes from the specified byte array\n     * starting at offset {@code off} to this {@code ByteArrayOutputStream}.\n     *\n     * @param   b     the data.\n     * @param   off   the start offset in the data.\n     * @param   len   the number of bytes to write.\n     * @throws  NullPointerException if {@code b} is {@code null}.\n     * @throws  IndexOutOfBoundsException if {@code off} is negative,\n     * {@code len} is negative, or {@code len} is greater than\n     * {@code b.length - off}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeBytes(byte[] b)",
    "returnType" : "void",
    "comment" : "\n     * Writes the complete contents of the specified byte array\n     * to this {@code ByteArrayOutputStream}.\n     *\n     * @apiNote\n     * This method is equivalent to {@link #write(byte[],int,int)\n     * write(b, 0, b.length)}.\n     *\n     * @param   b     the data.\n     * @throws  NullPointerException if {@code b} is {@code null}.\n     * @since   11\n     ",
    "links" : [ "#write(byte" ]
  }, {
    "name" : "public synchronized void writeTo(OutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the complete contents of this {@code ByteArrayOutputStream} to\n     * the specified output stream argument, as if by calling the output\n     * stream's write method using {@code out.write(buf, 0, count)}.\n     *\n     * @param   out   the output stream to which to write the data.\n     * @throws  NullPointerException if {@code out} is {@code null}.\n     * @throws  IOException if an I/O error occurs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the {@code count} field of this {@code ByteArrayOutputStream}\n     * to zero, so that all currently accumulated output in the\n     * output stream is discarded. The output stream can be used again,\n     * reusing the already allocated buffer space.\n     *\n     * @see     java.io.ByteArrayInputStream#count\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Creates a newly allocated byte array. Its size is the current\n     * size of this output stream and the valid contents of the buffer\n     * have been copied into it.\n     *\n     * @return  the current contents of this output stream, as a byte array.\n     * @see     java.io.ByteArrayOutputStream#size()\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current size of the buffer.\n     *\n     * @return  the value of the {@code count} field, which is the number\n     *          of valid bytes in this output stream.\n     * @see     java.io.ByteArrayOutputStream#count\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString()",
    "returnType" : "String",
    "comment" : "\n     * Converts the buffer's contents into a string decoding bytes using the\n     * platform's default character set. The length of the new {@code String}\n     * is a function of the character set, and hence may not be equal to the\n     * size of the buffer.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with the default replacement string for the platform's\n     * default character set. The {@linkplain java.nio.charset.CharsetDecoder}\n     * class should be used when more control over the decoding process is\n     * required.\n     *\n     * @return String decoded from the buffer's contents.\n     * @since  1.1\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized String toString(String charsetName) throws UnsupportedEncodingException",
    "returnType" : "String",
    "comment" : "\n     * Converts the buffer's contents into a string by decoding the bytes using\n     * the named {@link java.nio.charset.Charset charset}.\n     *\n     * <p> This method is equivalent to {@code #toString(charset)} that takes a\n     * {@link java.nio.charset.Charset charset}.\n     *\n     * <p> An invocation of this method of the form\n     *\n     * <pre> {@code\n     *      ByteArrayOutputStream b = ...\n     *      b.toString(\"UTF-8\")\n     *      }\n     * </pre>\n     *\n     * behaves in exactly the same way as the expression\n     *\n     * <pre> {@code\n     *      ByteArrayOutputStream b = ...\n     *      b.toString(StandardCharsets.UTF_8)\n     *      }\n     * </pre>\n     *\n     *\n     * @param  charsetName  the name of a supported\n     *         {@link java.nio.charset.Charset charset}\n     * @return String decoded from the buffer's contents.\n     * @throws UnsupportedEncodingException\n     *         If the named charset is not supported\n     * @since  1.1\n     ",
    "links" : [ "java.nio.charset.Charset" ]
  }, {
    "name" : "public synchronized String toString(Charset charset)",
    "returnType" : "String",
    "comment" : "\n     * Converts the buffer's contents into a string by decoding the bytes using\n     * the specified {@link java.nio.charset.Charset charset}. The length of the new\n     * {@code String} is a function of the charset, and hence may not be equal\n     * to the length of the byte array.\n     *\n     * <p> This method always replaces malformed-input and unmappable-character\n     * sequences with the charset's default replacement string. The {@link\n     * java.nio.charset.CharsetDecoder} class should be used when more control\n     * over the decoding process is required.\n     *\n     * @param      charset  the {@linkplain java.nio.charset.Charset charset}\n     *             to be used to decode the {@code bytes}\n     * @return     String decoded from the buffer's contents.\n     * @since      10\n     ",
    "links" : [ "java.nio.charset.Charset", "java.nio.charset.CharsetDecoder" ]
  }, {
    "name" : "public synchronized String toString(int hibyte)",
    "returnType" : "String",
    "comment" : "\n     * Creates a newly allocated string. Its size is the current size of\n     * the output stream and the valid contents of the buffer have been\n     * copied into it. Each character <i>c</i> in the resulting string is\n     * constructed from the corresponding element <i>b</i> in the byte\n     * array such that:\n     * <blockquote><pre>{@code\n     *     c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))\n     * }</pre></blockquote>\n     *\n     * @deprecated This method does not properly convert bytes into characters.\n     * As of JDK&nbsp;1.1, the preferred way to do this is via the\n     * {@link #toString(String charsetName)} or {@link #toString(Charset charset)}\n     * method, which takes an encoding-name or charset argument,\n     * or the {@code toString()} method, which uses the platform's default\n     * character encoding.\n     *\n     * @param      hibyte    the high byte of each resulting Unicode character.\n     * @return     the current contents of the output stream, as a string.\n     * @see        java.io.ByteArrayOutputStream#size()\n     * @see        java.io.ByteArrayOutputStream#toString(String)\n     * @see        java.io.ByteArrayOutputStream#toString()\n     ",
    "links" : [ "#toString(Charset", "#toString(String" ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closing a {@code ByteArrayOutputStream} has no effect. The methods in\n     * this class can be called after the stream has been closed without\n     * generating an {@code IOException}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void ensureCapacity(int minCapacity)", "private void grow(int minCapacity)", "private static int hugeCapacity(int minCapacity)", "public synchronized void write(int b)", "public synchronized void write(byte[] b, int off, int len)", "public void writeBytes(byte[] b)", "public synchronized void writeTo(OutputStream out) throws IOException", "public synchronized void reset()", "public synchronized byte[] toByteArray()", "public synchronized int size()", "public synchronized String toString()", "public synchronized String toString(String charsetName) throws UnsupportedEncodingException", "public synchronized String toString(Charset charset)", "public synchronized String toString(int hibyte)", "public void close() throws IOException" ],
  "variableNames" : [ "buf", "count", "MAX_ARRAY_SIZE" ]
}