{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ActionProvider.java",
  "packageName" : "android.view",
  "className" : "ActionProvider",
  "comment" : "\n * An ActionProvider defines rich menu interaction in a single component.\n * ActionProvider can generate action views for use in the action bar,\n * dynamically populate submenus of a MenuItem, and handle default menu\n * item invocations.\n *\n * <p>An ActionProvider can be optionally specified for a {@link MenuItem} and will be\n * responsible for creating the action view that appears in the {@link android.app.ActionBar}\n * in place of a simple button in the bar. When the menu item is presented in a way that\n * does not allow custom action views, (e.g. in an overflow menu,) the ActionProvider\n * can perform a default action.</p>\n *\n * <p>There are two ways to use an action provider:\n * <ul>\n * <li>\n * Set the action provider on a {@link MenuItem} directly by calling\n * {@link MenuItem#setActionProvider(ActionProvider)}.\n * </li>\n * <li>\n * Declare the action provider in an XML menu resource. For example:\n * <pre>\n * <code>\n *   &lt;item android:id=\"@+id/my_menu_item\"\n *     android:title=\"Title\"\n *     android:icon=\"@drawable/my_menu_item_icon\"\n *     android:showAsAction=\"ifRoom\"\n *     android:actionProviderClass=\"foo.bar.SomeActionProvider\" /&gt;\n * </code>\n * </pre>\n * </li>\n * </ul>\n * </p>\n *\n * @see MenuItem#setActionProvider(ActionProvider)\n * @see MenuItem#getActionProvider()\n ",
  "links" : [ "android.app.ActionBar", "android.view.MenuItem#setActionProvider(ActionProvider)", "android.view.MenuItem" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubUiVisibilityListener",
    "type" : "SubUiVisibilityListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVisibilityListener",
    "type" : "VisibilityListener",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract View onCreateActionView()",
    "returnType" : "View",
    "comment" : "\n     * Factory method called by the Android framework to create new action views.\n     *\n     * <p>This method has been deprecated in favor of {@link #onCreateActionView(MenuItem)}.\n     * Newer apps that wish to support platform versions prior to API 16 should also\n     * implement this method to return a valid action view.</p>\n     *\n     * @return A new action view.\n     *\n     * @deprecated use {@link #onCreateActionView(MenuItem)}\n     ",
    "links" : [ "#onCreateActionView(MenuItem)" ]
  }, {
    "name" : "public View onCreateActionView(@NonNull MenuItem forItem)",
    "returnType" : "View",
    "comment" : "\n     * Factory method called by the Android framework to create new action views.\n     * This method returns a new action view for the given MenuItem.\n     *\n     * <p>If your ActionProvider implementation overrides the deprecated no-argument overload\n     * {@link #onCreateActionView()}, overriding this method for devices running API 16 or later\n     * is recommended but optional. The default implementation calls {@link #onCreateActionView()}\n     * for compatibility with applications written for older platform versions.</p>\n     *\n     * @param forItem MenuItem to create the action view for\n     * @return the new action view\n     ",
    "links" : [ "#onCreateActionView()" ]
  }, {
    "name" : "public boolean overridesItemVisibility()",
    "returnType" : "boolean",
    "comment" : "\n     * The result of this method determines whether or not {@link #isVisible()} will be used\n     * by the {@link MenuItem} this ActionProvider is bound to help determine its visibility.\n     *\n     * @return true if this ActionProvider overrides the visibility of the MenuItem\n     *         it is bound to, false otherwise. The default implementation returns false.\n     * @see #isVisible()\n     ",
    "links" : [ "#isVisible()", "android.view.MenuItem" ]
  }, {
    "name" : "public boolean isVisible()",
    "returnType" : "boolean",
    "comment" : "\n     * If {@link #overridesItemVisibility()} returns true, the return value of this method\n     * will help determine the visibility of the {@link MenuItem} this ActionProvider is bound to.\n     *\n     * <p>If the MenuItem's visibility is explicitly set to false by the application,\n     * the MenuItem will not be shown, even if this method returns true.</p>\n     *\n     * @return true if the MenuItem this ActionProvider is bound to is visible, false if\n     *         it is invisible. The default implementation returns true.\n     ",
    "links" : [ "#overridesItemVisibility()", "android.view.MenuItem" ]
  }, {
    "name" : "public void refreshVisibility()",
    "returnType" : "void",
    "comment" : "\n     * If this ActionProvider is associated with an item in a menu,\n     * refresh the visibility of the item based on {@link #overridesItemVisibility()} and\n     * {@link #isVisible()}. If {@link #overridesItemVisibility()} returns false, this call\n     * will have no effect.\n     ",
    "links" : [ "#overridesItemVisibility()", "#isVisible()" ]
  }, {
    "name" : "public boolean onPerformDefaultAction()",
    "returnType" : "boolean",
    "comment" : "\n     * Performs an optional default action.\n     * <p>\n     * For the case of an action provider placed in a menu item not shown as an action this\n     * method is invoked if previous callbacks for processing menu selection has handled\n     * the event.\n     * </p>\n     * <p>\n     * A menu item selection is processed in the following order:\n     * <ul>\n     * <li>\n     * Receiving a call to {@link MenuItem.OnMenuItemClickListener#onMenuItemClick\n     *  MenuItem.OnMenuItemClickListener.onMenuItemClick}.\n     * </li>\n     * <li>\n     * Receiving a call to {@link android.app.Activity#onOptionsItemSelected(MenuItem)\n     *  Activity.onOptionsItemSelected(MenuItem)}\n     * </li>\n     * <li>\n     * Receiving a call to {@link android.app.Fragment#onOptionsItemSelected(MenuItem)\n     *  Fragment.onOptionsItemSelected(MenuItem)}\n     * </li>\n     * <li>\n     * Launching the {@link android.content.Intent} set via\n     * {@link MenuItem#setIntent(android.content.Intent) MenuItem.setIntent(android.content.Intent)}\n     * </li>\n     * <li>\n     * Invoking this method.\n     * </li>\n     * </ul>\n     * </p>\n     * <p>\n     * The default implementation does not perform any action and returns false.\n     * </p>\n     ",
    "links" : [ "android.view.MenuItem#setIntent(android.content.Intent)", "MenuItem.OnMenuItemClickListener#onMenuItemClickMenuItem.OnMenuItemClickListener.onMenuItemClick", "android.content.Intent", "android.app.Activity#onOptionsItemSelected(MenuItem)", "android.app.Fragment#onOptionsItemSelected(MenuItem)" ]
  }, {
    "name" : "public boolean hasSubMenu()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines if this ActionProvider has a submenu associated with it.\n     *\n     * <p>Associated submenus will be shown when an action view is not. This\n     * provider instance will receive a call to {@link #onPrepareSubMenu(SubMenu)}\n     * after the call to {@link #onPerformDefaultAction()} and before a submenu is\n     * displayed to the user.\n     *\n     * @return true if the item backed by this provider should have an associated submenu\n     ",
    "links" : [ "#onPrepareSubMenu(SubMenu)", "#onPerformDefaultAction()" ]
  }, {
    "name" : "public void onPrepareSubMenu(@NonNull SubMenu subMenu)",
    "returnType" : "void",
    "comment" : "\n     * Called to prepare an associated submenu for the menu item backed by this ActionProvider.\n     *\n     * <p>if {@link #hasSubMenu()} returns true, this method will be called when the\n     * menu item is selected to prepare the submenu for presentation to the user. Apps\n     * may use this to create or alter submenu content right before display.\n     *\n     * @param subMenu Submenu that will be displayed\n     ",
    "links" : [ "#hasSubMenu()" ]
  }, {
    "name" : "public void subUiVisibilityChanged(boolean isVisible)",
    "returnType" : "void",
    "comment" : "\n     * Notify the system that the visibility of an action view's sub-UI such as\n     * an anchored popup has changed. This will affect how other system\n     * visibility notifications occur.\n     *\n     * @hide Pending future API approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubUiVisibilityListener(@Nullable SubUiVisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide Internal use only\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVisibilityListener(@Nullable VisibilityListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Set a listener to be notified when this ActionProvider's overridden visibility changes.\n     * This should only be used by MenuItem implementations.\n     *\n     * @param listener listener to set\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract View onCreateActionView()", "public View onCreateActionView(@NonNull MenuItem forItem)", "public boolean overridesItemVisibility()", "public boolean isVisible()", "public void refreshVisibility()", "public boolean onPerformDefaultAction()", "public boolean hasSubMenu()", "public void onPrepareSubMenu(@NonNull SubMenu subMenu)", "public void subUiVisibilityChanged(boolean isVisible)", "public void setSubUiVisibilityListener(@Nullable SubUiVisibilityListener listener)", "public void setVisibilityListener(@Nullable VisibilityListener listener)", "public void reset()" ],
  "variableNames" : [ "TAG", "mSubUiVisibilityListener", "mVisibilityListener" ]
}