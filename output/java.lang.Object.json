{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/Object.java",
  "packageName" : "java.lang",
  "className" : "Object",
  "comment" : "\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @see     java.lang.Class\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "shadow$_klass_",
    "type" : "Class<?>",
    "comment" : " Android-added: Use Android specific fields for Class and monitor.",
    "links" : [ ]
  }, {
    "name" : "shadow$_monitor_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final Class<?> getClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns the runtime class of this {@code Object}. The returned\n     * {@code Class} object is the object that is locked by {@code\n     * static synchronized} methods of the represented class.\n     *\n     * <p><b>The actual result type is {@code Class<? extends |X|>}\n     * where {@code |X|} is the erasure of the static type of the\n     * expression on which {@code getClass} is called.</b> For\n     * example, no cast is required in this code fragment:</p>\n     *\n     * <p>\n     * {@code Number n = 0;                             }<br>\n     * {@code Class<? extends Number> c = n.getClass(); }\n     * </p>\n     *\n     * @return The {@code Class} object that represents the runtime\n     *         class of this object.\n     * @jls 15.8.2 Class Literals\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hash code value for the object. This method is\n     * supported for the benefit of hash tables such as those provided by\n     * {@link java.util.HashMap}.\n     * <p>\n     * The general contract of {@code hashCode} is:\n     * <ul>\n     * <li>Whenever it is invoked on the same object more than once during\n     *     an execution of a Java application, the {@code hashCode} method\n     *     must consistently return the same integer, provided no information\n     *     used in {@code equals} comparisons on the object is modified.\n     *     This integer need not remain consistent from one execution of an\n     *     application to another execution of the same application.\n     * <li>If two objects are equal according to the {@link\n     *     #equals(Object) equals} method, then calling the {@code\n     *     hashCode} method on each of the two objects must produce the\n     *     same integer result.\n     * <li>It is <em>not</em> required that if two objects are unequal\n     *     according to the {@link #equals(Object) equals} method, then\n     *     calling the {@code hashCode} method on each of the two objects\n     *     must produce distinct integer results.  However, the programmer\n     *     should be aware that producing distinct integer results for\n     *     unequal objects may improve the performance of hash tables.\n     * </ul>\n     *\n     * @implSpec\n     * As far as is reasonably practical, the {@code hashCode} method defined\n     * by class {@code Object} returns distinct integers for distinct objects.\n     *\n     * @return  a hash code value for this object.\n     * @see     java.lang.Object#equals(java.lang.Object)\n     * @see     java.lang.System#identityHashCode\n     ",
    "links" : [ "#equals(Object)", "java.util.HashMap" ]
  }, {
    "name" : " static int identityHashCode(Object obj)",
    "returnType" : "int",
    "comment" : " package-private ",
    "links" : [ ]
  }, {
    "name" : "private static native int identityHashCodeNative(Object obj)",
    "returnType" : "int",
    "comment" : "\n     * Return the identity hash code when the information in the monitor field\n     * is not sufficient.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether some other object is \"equal to\" this one.\n     * <p>\n     * The {@code equals} method implements an equivalence relation\n     * on non-null object references:\n     * <ul>\n     * <li>It is <i>reflexive</i>: for any non-null reference value\n     *     {@code x}, {@code x.equals(x)} should return\n     *     {@code true}.\n     * <li>It is <i>symmetric</i>: for any non-null reference values\n     *     {@code x} and {@code y}, {@code x.equals(y)}\n     *     should return {@code true} if and only if\n     *     {@code y.equals(x)} returns {@code true}.\n     * <li>It is <i>transitive</i>: for any non-null reference values\n     *     {@code x}, {@code y}, and {@code z}, if\n     *     {@code x.equals(y)} returns {@code true} and\n     *     {@code y.equals(z)} returns {@code true}, then\n     *     {@code x.equals(z)} should return {@code true}.\n     * <li>It is <i>consistent</i>: for any non-null reference values\n     *     {@code x} and {@code y}, multiple invocations of\n     *     {@code x.equals(y)} consistently return {@code true}\n     *     or consistently return {@code false}, provided no\n     *     information used in {@code equals} comparisons on the\n     *     objects is modified.\n     * <li>For any non-null reference value {@code x},\n     *     {@code x.equals(null)} should return {@code false}.\n     * </ul>\n     *\n     * <p>\n     * An equivalence relation partitions the elements it operates on\n     * into <i>equivalence classes</i>; all the members of an\n     * equivalence class are equal to each other. Members of an\n     * equivalence class are substitutable for each other, at least\n     * for some purposes.\n     *\n     * @implSpec\n     * The {@code equals} method for class {@code Object} implements\n     * the most discriminating possible equivalence relation on objects;\n     * that is, for any non-null reference values {@code x} and\n     * {@code y}, this method returns {@code true} if and only\n     * if {@code x} and {@code y} refer to the same object\n     * ({@code x == y} has the value {@code true}).\n     *\n     * In other words, under the reference equality equivalence\n     * relation, each equivalence class only has a single element.\n     *\n     * @apiNote\n     * It is generally necessary to override the {@link #hashCode hashCode}\n     * method whenever this method is overridden, so as to maintain the\n     * general contract for the {@code hashCode} method, which states\n     * that equal objects must have equal hash codes.\n     *\n     * @param   obj   the reference object with which to compare.\n     * @return  {@code true} if this object is the same as the obj\n     *          argument; {@code false} otherwise.\n     * @see     #hashCode()\n     * @see     java.util.HashMap\n     ",
    "links" : [ "#hashCode" ]
  }, {
    "name" : "protected Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Creates and returns a copy of this object.  The precise meaning\n     * of \"copy\" may depend on the class of the object. The general\n     * intent is that, for any object {@code x}, the expression:\n     * <blockquote>\n     * <pre>\n     * x.clone() != x</pre></blockquote>\n     * will be true, and that the expression:\n     * <blockquote>\n     * <pre>\n     * x.clone().getClass() == x.getClass()</pre></blockquote>\n     * will be {@code true}, but these are not absolute requirements.\n     * While it is typically the case that:\n     * <blockquote>\n     * <pre>\n     * x.clone().equals(x)</pre></blockquote>\n     * will be {@code true}, this is not an absolute requirement.\n     * <p>\n     * By convention, the returned object should be obtained by calling\n     * {@code super.clone}.  If a class and all of its superclasses (except\n     * {@code Object}) obey this convention, it will be the case that\n     * {@code x.clone().getClass() == x.getClass()}.\n     * <p>\n     * By convention, the object returned by this method should be independent\n     * of this object (which is being cloned).  To achieve this independence,\n     * it may be necessary to modify one or more fields of the object returned\n     * by {@code super.clone} before returning it.  Typically, this means\n     * copying any mutable objects that comprise the internal \"deep structure\"\n     * of the object being cloned and replacing the references to these\n     * objects with references to the copies.  If a class contains only\n     * primitive fields or references to immutable objects, then it is usually\n     * the case that no fields in the object returned by {@code super.clone}\n     * need to be modified.\n     *\n     * @implSpec\n     * The method {@code clone} for class {@code Object} performs a\n     * specific cloning operation. First, if the class of this object does\n     * not implement the interface {@code Cloneable}, then a\n     * {@code CloneNotSupportedException} is thrown. Note that all arrays\n     * are considered to implement the interface {@code Cloneable} and that\n     * the return type of the {@code clone} method of an array type {@code T[]}\n     * is {@code T[]} where T is any reference or primitive type.\n     * Otherwise, this method creates a new instance of the class of this\n     * object and initializes all its fields with exactly the contents of\n     * the corresponding fields of this object, as if by assignment; the\n     * contents of the fields are not themselves cloned. Thus, this method\n     * performs a \"shallow copy\" of this object, not a \"deep copy\" operation.\n     * <p>\n     * The class {@code Object} does not itself implement the interface\n     * {@code Cloneable}, so calling the {@code clone} method on an object\n     * whose class is {@code Object} will result in throwing an\n     * exception at run time.\n     *\n     * @return     a clone of this instance.\n     * @throws  CloneNotSupportedException  if the object's class does not\n     *               support the {@code Cloneable} interface. Subclasses\n     *               that override the {@code clone} method can also\n     *               throw this exception to indicate that an instance cannot\n     *               be cloned.\n     * @see java.lang.Cloneable\n     ",
    "links" : [ ]
  }, {
    "name" : "private native Object internalClone()",
    "returnType" : "Object",
    "comment" : "\n     * Native helper method for cloning.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of the object.\n     * @apiNote\n     * In general, the\n     * {@code toString} method returns a string that\n     * \"textually represents\" this object. The result should\n     * be a concise but informative representation that is easy for a\n     * person to read.\n     * It is recommended that all subclasses override this method.\n     * The string output is not necessarily stable over time or across\n     * JVM invocations.\n     * @implSpec\n     * The {@code toString} method for class {@code Object}\n     * returns a string consisting of the name of the class of which the\n     * object is an instance, the at-sign character `{@code @}', and\n     * the unsigned hexadecimal representation of the hash code of the\n     * object. In other words, this method returns a string equal to the\n     * value of:\n     * <blockquote>\n     * <pre>\n     * getClass().getName() + '@' + Integer.toHexString(hashCode())\n     * </pre></blockquote>\n     *\n     * @return  a string representation of the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void notify()",
    "returnType" : "void",
    "comment" : "\n     * Wakes up a single thread that is waiting on this object's\n     * monitor. If any threads are waiting on this object, one of them\n     * is chosen to be awakened. The choice is arbitrary and occurs at\n     * the discretion of the implementation. A thread waits on an object's\n     * monitor by calling one of the {@code wait} methods.\n     * <p>\n     * The awakened thread will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened thread will\n     * compete in the usual manner with any other threads that might be\n     * actively competing to synchronize on this object; for example, the\n     * awakened thread enjoys no reliable privilege or disadvantage in being\n     * the next thread to lock this object.\n     * <p>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. A thread becomes the owner of the\n     * object's monitor in one of three ways:\n     * <ul>\n     * <li>By executing a synchronized instance method of that object.\n     * <li>By executing the body of a {@code synchronized} statement\n     *     that synchronizes on the object.\n     * <li>For objects of type {@code Class,} by executing a\n     *     synchronized static method of that class.\n     * </ul>\n     * <p>\n     * Only one thread at a time can own an object's monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @see        java.lang.Object#notifyAll()\n     * @see        java.lang.Object#wait()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final native void notifyAll()",
    "returnType" : "void",
    "comment" : "\n     * Wakes up all threads that are waiting on this object's monitor. A\n     * thread waits on an object's monitor by calling one of the\n     * {@code wait} methods.\n     * <p>\n     * The awakened threads will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened threads\n     * will compete in the usual manner with any other threads that might\n     * be actively competing to synchronize on this object; for example,\n     * the awakened threads enjoy no reliable privilege or disadvantage in\n     * being the next thread to lock this object.\n     * <p>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @see        java.lang.Object#notify()\n     * @see        java.lang.Object#wait()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void wait(long timeoutMillis) throws InterruptedException",
    "returnType" : "void",
    "comment" : " public final native void wait(long timeoutMillis) throws InterruptedException;",
    "links" : [ ]
  }, {
    "name" : "public final native void wait(long timeoutMillis, int nanos) throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n    public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis < 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0 && timeoutMillis < Long.MAX_VALUE) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }\n    ",
    "links" : [ ]
  }, {
    "name" : "public final void wait() throws InterruptedException",
    "returnType" : "void",
    "comment" : "\n     * Causes the current thread to wait until it is awakened, typically\n     * by being <em>notified</em> or <em>interrupted</em>.\n     * <p>\n     * In all respects, this method behaves as if {@code wait(0L, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object's monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The <em>interrupted status</em> of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait(long)\n     * @see    #wait(long, int)\n     ",
    "links" : [ "#wait(long" ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : " @Deprecated(since=\"9\")",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final Class<?> getClass()", "public int hashCode()", " static int identityHashCode(Object obj)", "private static native int identityHashCodeNative(Object obj)", "public boolean equals(Object obj)", "protected Object clone() throws CloneNotSupportedException", "private native Object internalClone()", "public String toString()", "public final native void notify()", "public final native void notifyAll()", "public final void wait(long timeoutMillis) throws InterruptedException", "public final native void wait(long timeoutMillis, int nanos) throws InterruptedException", "public final void wait() throws InterruptedException", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "shadow$_klass_", "shadow$_monitor_" ]
}