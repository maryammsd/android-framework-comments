{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/WifiManager.java",
  "packageName" : "android.net.wifi",
  "className" : "MulticastLock",
  "comment" : "\n     * Allows an application to receive Wifi Multicast packets.\n     * Normally the Wifi stack filters out packets not explicitly\n     * addressed to this device.  Acquring a MulticastLock will\n     * cause the stack to receive packets addressed to multicast\n     * addresses.  Processing these extra packets can cause a noticeable\n     * battery drain and should be disabled when not needed.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBinder",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRefCounted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeld",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void acquire()",
    "returnType" : "void",
    "comment" : "\n         * Locks Wifi Multicast on until {@link #release} is called.\n         *\n         * If this MulticastLock is reference-counted each call to\n         * {@code acquire} will increment the reference count, and the\n         * wifi interface will receive multicast packets as long as the\n         * reference count is above zero.\n         *\n         * If this MulticastLock is not reference-counted, the first call to\n         * {@code acquire} will turn on the multicast packets, but subsequent\n         * calls will be ignored.  Only one call to {@link #release} will\n         * be required, regardless of the number of times that {@code acquire}\n         * is called.\n         *\n         * Note that other applications may also lock Wifi Multicast on.\n         * Only they can relinquish their lock.\n         *\n         * Also note that applications cannot leave Multicast locked on.\n         * When an app exits or crashes, any Multicast locks will be released.\n         ",
    "links" : [ "#release" ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "\n         * Unlocks Wifi Multicast, restoring the filter of packets\n         * not addressed specifically to this device and saving power.\n         *\n         * If this MulticastLock is reference-counted, each call to\n         * {@code release} will decrement the reference count, and the\n         * multicast packets will only stop being received when the reference\n         * count reaches zero.  If the reference count goes below zero (that\n         * is, if {@code release} is called a greater number of times than\n         * {@link #acquire}), an exception is thrown.\n         *\n         * If this MulticastLock is not reference-counted, the first call to\n         * {@code release} (after the radio was multicast locked using\n         * {@link #acquire}) will unlock the multicast, and subsequent calls\n         * will be ignored.\n         *\n         * Note that if any other Wifi Multicast Locks are still outstanding\n         * this {@code release} call will not have an immediate effect.  Only\n         * when all applications have released all their Multicast Locks will\n         * the Multicast filter be turned back on.\n         *\n         * Also note that when an app exits or crashes all of its Multicast\n         * Locks will be automatically released.\n         ",
    "links" : [ "#acquire" ]
  }, {
    "name" : "public void setReferenceCounted(boolean refCounted)",
    "returnType" : "void",
    "comment" : "\n         * Controls whether this is a reference-counted or non-reference-\n         * counted MulticastLock.\n         *\n         * Reference-counted MulticastLocks keep track of the number of calls\n         * to {@link #acquire} and {@link #release}, and only stop the\n         * reception of multicast packets when every call to {@link #acquire}\n         * has been balanced with a call to {@link #release}.  Non-reference-\n         * counted MulticastLocks allow the reception of multicast packets\n         * whenever {@link #acquire} is called and stop accepting multicast\n         * packets whenever {@link #release} is called.\n         *\n         * @param refCounted true if this MulticastLock should keep a reference\n         * count\n         ",
    "links" : [ "#acquire", "#release" ]
  }, {
    "name" : "public boolean isHeld()",
    "returnType" : "boolean",
    "comment" : "\n         * Checks whether this MulticastLock is currently held.\n         *\n         * @return true if this MulticastLock is held, false otherwise\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void acquire()", "public void release()", "public void setReferenceCounted(boolean refCounted)", "public boolean isHeld()", "public String toString()", "protected void finalize() throws Throwable" ],
  "variableNames" : [ "mTag", "mBinder", "mRefCount", "mRefCounted", "mHeld" ]
}