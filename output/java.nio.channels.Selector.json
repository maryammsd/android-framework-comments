{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/Selector.java",
  "packageName" : "java.nio.channels",
  "className" : "Selector",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static Selector open() throws IOException",
    "returnType" : "Selector",
    "comment" : "\n     * Opens a selector.\n     *\n     * <p> The new selector is created by invoking the {@link\n     * java.nio.channels.spi.SelectorProvider#openSelector openSelector} method\n     * of the system-wide default {@link\n     * java.nio.channels.spi.SelectorProvider} object.  </p>\n     *\n     * @return  A new selector\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "java.nio.channels.spi.SelectorProvider", "java.nio.channels.spi.SelectorProvider#openSelector" ]
  }, {
    "name" : "public abstract boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "\n     * Tells whether or not this selector is open.\n     *\n     * @return {@code true} if, and only if, this selector is open\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract SelectorProvider provider()",
    "returnType" : "SelectorProvider",
    "comment" : "\n     * Returns the provider that created this channel.\n     *\n     * @return  The provider that created this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Set<SelectionKey> keys()",
    "returnType" : "Set<SelectionKey>",
    "comment" : "\n     * Returns this selector's key set.\n     *\n     * <p> The key set is not directly modifiable.  A key is removed only after\n     * it has been cancelled and its channel has been deregistered.  Any\n     * attempt to modify the key set will cause an {@link\n     * UnsupportedOperationException} to be thrown.\n     *\n     * <p> The set is <a href=\"#ksc\">safe</a> for use by multiple concurrent\n     * threads.  </p>\n     *\n     * @return  This selector's key set\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract Set<SelectionKey> selectedKeys()",
    "returnType" : "Set<SelectionKey>",
    "comment" : "\n     * Returns this selector's selected-key set.\n     *\n     * <p> Keys may be removed from, but not directly added to, the\n     * selected-key set.  Any attempt to add an object to the key set will\n     * cause an {@link UnsupportedOperationException} to be thrown.\n     *\n     * <p> The selected-key set is <a href=\"#sksc\">not thread-safe</a>.  </p>\n     *\n     * @return  This selector's selected-key set\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed\n     ",
    "links" : [ "UnsupportedOperationException" ]
  }, {
    "name" : "public abstract int selectNow() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects a set of keys whose corresponding channels are ready for I/O\n     * operations.\n     *\n     * <p> This method performs a non-blocking <a href=\"#selop\">selection\n     * operation</a>.  If no channels have become selectable since the previous\n     * selection operation then this method immediately returns zero.\n     *\n     * <p> Invoking this method clears the effect of any previous invocations\n     * of the {@link #wakeup wakeup} method.  </p>\n     *\n     * @return  The number of keys, possibly zero, whose ready-operation sets\n     *          were updated by the selection operation\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed\n     ",
    "links" : [ "#wakeup" ]
  }, {
    "name" : "public abstract int select(long timeout) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects a set of keys whose corresponding channels are ready for I/O\n     * operations.\n     *\n     * <p> This method performs a blocking <a href=\"#selop\">selection\n     * operation</a>.  It returns only after at least one channel is selected,\n     * this selector's {@link #wakeup wakeup} method is invoked, the current\n     * thread is interrupted, or the given timeout period expires, whichever\n     * comes first.\n     *\n     * <p> This method does not offer real-time guarantees: It schedules the\n     * timeout as if by invoking the {@link Object#wait(long)} method. </p>\n     *\n     * @param  timeout  If positive, block for up to {@code timeout}\n     *                  milliseconds, more or less, while waiting for a\n     *                  channel to become ready; if zero, block indefinitely;\n     *                  must not be negative\n     *\n     * @return  The number of keys, possibly zero,\n     *          whose ready-operation sets were updated\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed\n     *\n     * @throws  IllegalArgumentException\n     *          If the value of the timeout argument is negative\n     ",
    "links" : [ "#wakeup", "#wait(long)" ]
  }, {
    "name" : "public abstract int select() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects a set of keys whose corresponding channels are ready for I/O\n     * operations.\n     *\n     * <p> This method performs a blocking <a href=\"#selop\">selection\n     * operation</a>.  It returns only after at least one channel is selected,\n     * this selector's {@link #wakeup wakeup} method is invoked, or the current\n     * thread is interrupted, whichever comes first.  </p>\n     *\n     * @return  The number of keys, possibly zero,\n     *          whose ready-operation sets were updated\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed\n     ",
    "links" : [ "#wakeup" ]
  }, {
    "name" : "public int select(Consumer<SelectionKey> action, long timeout) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects and performs an action on the keys whose corresponding channels\n     * are ready for I/O operations.\n     *\n     * <p> This method performs a blocking <a href=\"#selop\">selection\n     * operation</a>.  It wakes up from querying the operating system only when\n     * at least one channel is selected, this selector's {@link #wakeup wakeup}\n     * method is invoked, the current thread is interrupted, or the given\n     * timeout period expires, whichever comes first.\n     *\n     * <p> The specified <i>action</i>'s {@link Consumer#accept(Object) accept}\n     * method is invoked with the key for each channel that is ready to perform\n     * an operation identified by its key's interest set.  The {@code accept}\n     * method may be invoked more than once for the same key but with the\n     * ready-operation set containing a subset of the operations for which the\n     * channel is ready (as described above).  The {@code accept} method is\n     * invoked while synchronized on the selector and its selected-key set.\n     * Great care must be taken to avoid deadlocking with other threads that\n     * also synchronize on these objects.  Selection operations are not reentrant\n     * in general and consequently the <i>action</i> should take great care not\n     * to attempt a selection operation on the same selector.  The behavior when\n     * attempting a reentrant selection operation is implementation specific and\n     * therefore not specified.  If the <i>action</i> closes the selector then\n     * {@code ClosedSelectorException} is thrown when the action completes.\n     * The <i>action</i> is not prohibited from closing channels registered with\n     * the selector, nor prohibited from cancelling keys or changing a key's\n     * interest set.  If a channel is selected but its key is cancelled or its\n     * interest set changed before the <i>action</i> is performed on the key\n     * then it is implementation specific as to whether the <i>action</i> is\n     * invoked (it may be invoked with an {@link SelectionKey#isValid() invalid}\n     * key).  Exceptions thrown by the action are relayed to the caller.\n     *\n     * <p> This method does not offer real-time guarantees: It schedules the\n     * timeout as if by invoking the {@link Object#wait(long)} method.\n     *\n     * @implSpec The default implementation removes all keys from the\n     * selected-key set, invokes {@link #select(long) select(long)} with the\n     * given timeout and then performs the action for each key added to the\n     * selected-key set.  The default implementation does not detect the action\n     * performing a reentrant selection operation.  The selected-key set may\n     * or may not be empty on completion of the default implementation.\n     *\n     * @param  action   The action to perform\n     *\n     * @param  timeout  If positive, block for up to {@code timeout}\n     *                  milliseconds, more or less, while waiting for a\n     *                  channel to become ready; if zero, block indefinitely;\n     *                  must not be negative\n     *\n     * @return  The number of unique keys consumed, possibly zero\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed or is closed by the action\n     *\n     * @throws  IllegalArgumentException\n     *          If the value of the timeout argument is negative\n     *\n     * @since 11\n     ",
    "links" : [ "#wakeup", "#wait(long)", "java.nio.channels.SelectionKey#isValid()", "#select(long)", "java.util.function.Consumer#accept(Object)" ]
  }, {
    "name" : "public int select(Consumer<SelectionKey> action) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects and performs an action on the keys whose corresponding channels\n     * are ready for I/O operations.\n     *\n     * <p> This method performs a blocking <a href=\"#selop\">selection\n     * operation</a>.  It wakes up from querying the operating system only when\n     * at least one channel is selected, this selector's {@link #wakeup wakeup}\n     * method is invoked, or the current thread is interrupted, whichever comes\n     * first.\n     *\n     * <p> This method is equivalent to invoking the 2-arg\n     * {@link #select(Consumer, long) select} method with a timeout of {@code 0}\n     * to block indefinitely.  </p>\n     *\n     * @implSpec The default implementation invokes the 2-arg {@code select}\n     * method with a timeout of {@code 0}.\n     *\n     * @param  action   The action to perform\n     *\n     * @return  The number of unique keys consumed, possibly zero\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed or is closed by the action\n     *\n     * @since 11\n     ",
    "links" : [ "#wakeup", "#select(Consumer" ]
  }, {
    "name" : "public int selectNow(Consumer<SelectionKey> action) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Selects and performs an action on the keys whose corresponding channels\n     * are ready for I/O operations.\n     *\n     * <p> This method performs a non-blocking <a href=\"#selop\">selection\n     * operation</a>.\n     *\n     * <p> Invoking this method clears the effect of any previous invocations\n     * of the {@link #wakeup wakeup} method.  </p>\n     *\n     * @implSpec The default implementation removes all keys from the\n     * selected-key set, invokes {@link #selectNow() selectNow()} and then\n     * performs the action for each key added to the selected-key set.  The\n     * default implementation does not detect the action performing a reentrant\n     * selection operation.  The selected-key set may or may not be empty on\n     * completion of the default implementation.\n     *\n     * @param  action   The action to perform\n     *\n     * @return  The number of unique keys consumed, possibly zero\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     *\n     * @throws  ClosedSelectorException\n     *          If this selector is closed or is closed by the action\n     *\n     * @since 11\n     ",
    "links" : [ "#wakeup", "#selectNow()" ]
  }, {
    "name" : "private int doSelect(Consumer<SelectionKey> action, long timeout) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Default implementation of select(Consumer) and selectNow(Consumer).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Selector wakeup()",
    "returnType" : "Selector",
    "comment" : "\n     * Causes the first selection operation that has not yet returned to return\n     * immediately.\n     *\n     * <p> If another thread is currently blocked in a selection operation then\n     * that invocation will return immediately.  If no selection operation is\n     * currently in progress then the next invocation of a selection operation\n     * will return immediately unless {@link #selectNow()} or {@link\n     * #selectNow(Consumer)} is invoked in the meantime.  In any case the value\n     * returned by that invocation may be non-zero.  Subsequent selection\n     * operations will block as usual unless this method is invoked again in the\n     * meantime.\n     *\n     * <p> Invoking this method more than once between two successive selection\n     * operations has the same effect as invoking it just once.  </p>\n     *\n     * @return  This selector\n     ",
    "links" : [ "#selectNow()", "#selectNow(Consumer)" ]
  }, {
    "name" : "public abstract void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this selector.\n     *\n     * <p> If a thread is currently blocked in one of this selector's selection\n     * methods then it is interrupted as if by invoking the selector's {@link\n     * #wakeup wakeup} method.\n     *\n     * <p> Any uncancelled keys still associated with this selector are\n     * invalidated, their channels are deregistered, and any other resources\n     * associated with this selector are released.\n     *\n     * <p> If this selector is already closed then invoking this method has no\n     * effect.\n     *\n     * <p> After a selector is closed, any further attempt to use it, except by\n     * invoking this method or the {@link #wakeup wakeup} method, will cause a\n     * {@link ClosedSelectorException} to be thrown. </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "#wakeup", "java.nio.channels.ClosedSelectorException" ]
  } ],
  "methodNames" : [ "public static Selector open() throws IOException", "public abstract boolean isOpen()", "public abstract SelectorProvider provider()", "public abstract Set<SelectionKey> keys()", "public abstract Set<SelectionKey> selectedKeys()", "public abstract int selectNow() throws IOException", "public abstract int select(long timeout) throws IOException", "public abstract int select() throws IOException", "public int select(Consumer<SelectionKey> action, long timeout) throws IOException", "public int select(Consumer<SelectionKey> action) throws IOException", "public int selectNow(Consumer<SelectionKey> action) throws IOException", "private int doSelect(Consumer<SelectionKey> action, long timeout) throws IOException", "public abstract Selector wakeup()", "public abstract void close() throws IOException" ],
  "variableNames" : [ ]
}