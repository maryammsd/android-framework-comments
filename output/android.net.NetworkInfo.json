{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkInfo.java",
  "packageName" : "android.net",
  "className" : "NetworkInfo",
  "comment" : "\n * Describes the status of a network interface.\n * <p>Use {@link ConnectivityManager#getActiveNetworkInfo()} to get an instance that represents\n * the current network connection.\n *\n * @deprecated Callers should instead use the {@link ConnectivityManager.NetworkCallback} API to\n *             learn about connectivity changes, or switch to use\n *             {@link ConnectivityManager#getNetworkCapabilities} or\n *             {@link ConnectivityManager#getLinkProperties} to get information synchronously. Keep\n *             in mind that while callbacks are guaranteed to be called for every event in order,\n *             synchronous calls have no such constraints, and as such it is unadvisable to use the\n *             synchronous methods inside the callbacks as they will often not offer a view of\n *             networking that is consistent (that is: they may return a past or a future state with\n *             respect to the event being processed by the callback). Instead, callers are advised\n *             to only use the arguments of the callbacks, possibly memorizing the specific bits of\n *             information they need to keep from one callback to another.\n ",
  "links" : [ "android.net.ConnectivityManager#getNetworkCapabilities", "android.net.ConnectivityManager#getLinkProperties", "ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#getActiveNetworkInfo()" ],
  "variables" : [ {
    "name" : "stateMap",
    "type" : "EnumMap<DetailedState, State>",
    "comment" : "\n     * This is the map described in the Javadoc comment above. The positions\n     * of the elements of the array must correspond to the ordinal values\n     * of <code>DetailedState</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "mNetworkType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtype",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTypeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSubtypeName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDetailedState",
    "type" : "DetailedState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReason",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtraInfo",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsFailover",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsAvailable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRoaming",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<NetworkInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Reports the type of network to which the\n     * info in this {@code NetworkInfo} pertains.\n     * @return one of {@link ConnectivityManager#TYPE_MOBILE}, {@link\n     * ConnectivityManager#TYPE_WIFI}, {@link ConnectivityManager#TYPE_WIMAX}, {@link\n     * ConnectivityManager#TYPE_ETHERNET},  {@link ConnectivityManager#TYPE_BLUETOOTH}, or other\n     * types defined by {@link ConnectivityManager}.\n     * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}\n     *             instead with one of the NetworkCapabilities#TRANSPORT_* constants :\n     *             {@link #getType} and {@link #getTypeName} cannot account for networks using\n     *             multiple transports. Note that generally apps should not care about transport;\n     *             {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and\n     *             {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that\n     *             apps concerned with meteredness or bandwidth should be looking at, as they\n     *             offer this information with much better accuracy.\n     ",
    "links" : [ "android.net.ConnectivityManager", "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_METERED", "android.net.ConnectivityManager#TYPE_WIFI", "#getType", "android.net.NetworkCapabilities#hasTransport", "android.net.ConnectivityManager#TYPE_ETHERNET", "android.net.NetworkCapabilities#getLinkDownstreamBandwidthKbps", "android.net.ConnectivityManager#TYPE_WIMAX", "#getTypeName", "android.net.ConnectivityManager#TYPE_MOBILE", "android.net.ConnectivityManager#TYPE_BLUETOOTH" ]
  }, {
    "name" : "public void setType(int type)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link NetworkCapabilities} instead\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public int getSubtype()",
    "returnType" : "int",
    "comment" : "\n     * Return a network-type-specific integer describing the subtype\n     * of the network.\n     * @return the network subtype\n     * @deprecated Use {@link android.telephony.TelephonyManager#getDataNetworkType} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#getDataNetworkType" ]
  }, {
    "name" : "public void setSubtype(int subtype, String subtypeName)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getTypeName()",
    "returnType" : "String",
    "comment" : "\n     * Return a human-readable name describe the type of the network,\n     * for example \"WIFI\" or \"MOBILE\".\n     * @return the name of the network type\n     * @deprecated Callers should switch to checking {@link NetworkCapabilities#hasTransport}\n     *             instead with one of the NetworkCapabilities#TRANSPORT_* constants :\n     *             {@link #getType} and {@link #getTypeName} cannot account for networks using\n     *             multiple transports. Note that generally apps should not care about transport;\n     *             {@link NetworkCapabilities#NET_CAPABILITY_NOT_METERED} and\n     *             {@link NetworkCapabilities#getLinkDownstreamBandwidthKbps} are calls that\n     *             apps concerned with meteredness or bandwidth should be looking at, as they\n     *             offer this information with much better accuracy.\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_METERED", "#getType", "android.net.NetworkCapabilities#hasTransport", "android.net.NetworkCapabilities#getLinkDownstreamBandwidthKbps", "#getTypeName" ]
  }, {
    "name" : "public String getSubtypeName()",
    "returnType" : "String",
    "comment" : "\n     * Return a human-readable name describing the subtype of the network.\n     * @return the name of the network subtype\n     * @deprecated Use {@link android.telephony.TelephonyManager#getDataNetworkType} instead.\n     ",
    "links" : [ "android.telephony.TelephonyManager#getDataNetworkType" ]
  }, {
    "name" : "public boolean isConnectedOrConnecting()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether network connectivity exists or is in the process\n     * of being established. This is good for applications that need to\n     * do anything related to the network other than read or write data.\n     * For the latter, call {@link #isConnected()} instead, which guarantees\n     * that the network is fully usable.\n     * @return {@code true} if network connectivity exists or is in the process\n     * of being established, {@code false} otherwise.\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes.\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "#isConnected()", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public boolean isConnected()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether network connectivity exists and it is possible to establish\n     * connections and pass data.\n     * <p>Always call this before attempting to perform data transactions.\n     * @return {@code true} if network connectivity exists, {@code false} otherwise.\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes. See\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public boolean isSuspended()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this network is suspended.\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes. See\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     * @hide\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public boolean isAvailable()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether network connectivity is possible. A network is unavailable\n     * when a persistent or semi-persistent condition prevents the possibility\n     * of connecting to that network. Examples include\n     * <ul>\n     * <li>The device is out of the coverage area for any network of this type.</li>\n     * <li>The device is on a network other than the home network (i.e., roaming), and\n     * data roaming has been disabled.</li>\n     * <li>The device's radio is turned off, e.g., because airplane mode is enabled.</li>\n     * </ul>\n     * Since Android L, this always returns {@code true}, because the system only\n     * returns info for available networks.\n     * @return {@code true} if the network is available, {@code false} otherwise\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes.\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public void setIsAvailable(boolean isAvailable)",
    "returnType" : "void",
    "comment" : "\n     * Sets if the network is available, ie, if the connectivity is possible.\n     * @param isAvailable the new availability value.\n     * @deprecated Use {@link NetworkCapabilities} instead\n     *\n     * @hide\n     ",
    "links" : [ "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public boolean isFailover()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the current attempt to connect to the network\n     * resulted from the ConnectivityManager trying to fail over to this\n     * network following a disconnect from another network.\n     * @return {@code true} if this is a failover attempt, {@code false}\n     * otherwise.\n     * @deprecated This field is not populated in recent Android releases,\n     *             and does not make a lot of sense in a multi-network world.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFailover(boolean isFailover)",
    "returnType" : "void",
    "comment" : "\n     * Set the failover boolean.\n     * @param isFailover {@code true} to mark the current connection attempt\n     * as a failover.\n     * @deprecated This hasn't been set in any recent Android release.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isRoaming()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the device is currently roaming on this network. When\n     * {@code true}, it suggests that use of data on this network may incur\n     * extra costs.\n     *\n     * @return {@code true} if roaming is in effect, {@code false} otherwise.\n     * @deprecated Callers should switch to checking\n     *             {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING}\n     *             instead, since that handles more complex situations, such as\n     *             VPNs.\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING" ]
  }, {
    "name" : "public void setRoaming(boolean isRoaming)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated Use {@link NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING} instead.\n     * {@hide}\n     ",
    "links" : [ "android.net.NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING" ]
  }, {
    "name" : "public State getState()",
    "returnType" : "State",
    "comment" : "\n     * Reports the current coarse-grained state of the network.\n     * @return the coarse-grained state\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes.\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public DetailedState getDetailedState()",
    "returnType" : "DetailedState",
    "comment" : "\n     * Reports the current fine-grained state of the network.\n     * @return the fine-grained state\n     * @deprecated Apps should instead use the\n     *             {@link android.net.ConnectivityManager.NetworkCallback} API to\n     *             learn about connectivity changes. See\n     *             {@link ConnectivityManager#registerDefaultNetworkCallback} and\n     *             {@link ConnectivityManager#registerNetworkCallback}. These will\n     *             give a more accurate picture of the connectivity state of\n     *             the device and let apps react more easily and quickly to changes.\n     ",
    "links" : [ "android.net.ConnectivityManager.NetworkCallback", "android.net.ConnectivityManager#registerDefaultNetworkCallback", "android.net.ConnectivityManager#registerNetworkCallback" ]
  }, {
    "name" : "public void setDetailedState(@NonNull DetailedState detailedState, @Nullable String reason, @Nullable String extraInfo)",
    "returnType" : "void",
    "comment" : "\n     * Sets the fine-grained state of the network.\n     *\n     * This is only useful for testing.\n     *\n     * @param detailedState the {@link DetailedState}.\n     * @param reason a {@code String} indicating the reason for the state change,\n     * if one was supplied. May be {@code null}.\n     * @param extraInfo an optional {@code String} providing additional network state\n     * information passed up from the lower networking layers.\n     * @deprecated Use {@link NetworkCapabilities} instead.\n     ",
    "links" : [ "DetailedState", "android.net.NetworkCapabilities" ]
  }, {
    "name" : "public void setExtraInfo(String extraInfo)",
    "returnType" : "void",
    "comment" : "\n     * Set the extraInfo field.\n     * @param extraInfo an optional {@code String} providing addditional network state\n     * information passed up from the lower networking layers.\n     * @deprecated See {@link NetworkInfo#getExtraInfo}.\n     * @hide\n     ",
    "links" : [ "android.net.NetworkInfo#getExtraInfo" ]
  }, {
    "name" : "public String getReason()",
    "returnType" : "String",
    "comment" : "\n     * Report the reason an attempt to establish connectivity failed,\n     * if one is available.\n     * @return the reason for failure, or null if not available\n     * @deprecated This method does not have a consistent contract that could make it useful\n     *             to callers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getExtraInfo()",
    "returnType" : "String",
    "comment" : "\n     * Report the extra information about the network state, if any was\n     * provided by the lower networking layers.\n     * @return the extra information, or null if not available\n     * @deprecated Use other services e.g. WifiManager to get additional information passed up from\n     *             the lower networking layers.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a brief summary string suitable for debugging.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getType()", "public void setType(int type)", "public int getSubtype()", "public void setSubtype(int subtype, String subtypeName)", "public String getTypeName()", "public String getSubtypeName()", "public boolean isConnectedOrConnecting()", "public boolean isConnected()", "public boolean isSuspended()", "public boolean isAvailable()", "public void setIsAvailable(boolean isAvailable)", "public boolean isFailover()", "public void setFailover(boolean isFailover)", "public boolean isRoaming()", "public void setRoaming(boolean isRoaming)", "public State getState()", "public DetailedState getDetailedState()", "public void setDetailedState(@NonNull DetailedState detailedState, @Nullable String reason, @Nullable String extraInfo)", "public void setExtraInfo(String extraInfo)", "public String getReason()", "public String getExtraInfo()", "public String toString()", "public String toShortString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "stateMap", "mNetworkType", "mSubtype", "mTypeName", "mSubtypeName", "mState", "mDetailedState", "mReason", "mExtraInfo", "mIsFailover", "mIsAvailable", "mIsRoaming", "CREATOR" ]
}