{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/WildcardType.java",
  "packageName" : "java.lang.reflect",
  "className" : "WildcardType",
  "comment" : "\n * WildcardType represents a wildcard type expression, such as\n * {@code ?}, {@code ? extends Number}, or {@code ? super Integer}.\n *\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Type[] getUpperBounds()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects representing the  upper\n     * bound(s) of this type variable.  If no upper bound is\n     * explicitly declared, the upper bound is {@code Object}.\n     *\n     * <p>For each upper bound B :\n     * <ul>\n     *  <li>if B is a parameterized type or a type variable, it is created,\n     *  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}\n     *  for the details of the creation process for parameterized types).\n     *  <li>Otherwise, B is resolved.\n     * </ul>\n     *\n     * @return an array of Types representing the upper bound(s) of this\n     *     type variable\n     * @throws TypeNotPresentException if any of the\n     *     bounds refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if any of the\n     *     bounds refer to a parameterized type that cannot be instantiated\n     *     for any reason\n     ",
    "links" : [ "java.lang.reflect.ParameterizedType" ]
  }, {
    "name" : " Type[] getLowerBounds()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects representing the\n     * lower bound(s) of this type variable.  If no lower bound is\n     * explicitly declared, the lower bound is the type of {@code null}.\n     * In this case, a zero length array is returned.\n     *\n     * <p>For each lower bound B :\n     * <ul>\n     *   <li>if B is a parameterized type or a type variable, it is created,\n     *  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}\n     *  for the details of the creation process for parameterized types).\n     *   <li>Otherwise, B is resolved.\n     * </ul>\n     *\n     * @return an array of Types representing the lower bound(s) of this\n     *     type variable\n     * @throws TypeNotPresentException if any of the\n     *     bounds refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if any of the\n     *     bounds refer to a parameterized type that cannot be instantiated\n     *     for any reason\n     ",
    "links" : [ "java.lang.reflect.ParameterizedType" ]
  } ],
  "methodNames" : [ " Type[] getUpperBounds()", " Type[] getLowerBounds()" ],
  "variableNames" : [ ]
}