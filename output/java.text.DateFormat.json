{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/DateFormat.java",
  "packageName" : "java.text",
  "className" : "DateFormat",
  "comment" : "\n * {@code DateFormat} is an abstract class for date/time formatting subclasses which\n * formats and parses dates or time in a language-independent manner.\n * The date/time formatting subclass, such as {@link SimpleDateFormat}, allows for\n * formatting (i.e., date &rarr; text), parsing (text &rarr; date), and\n * normalization.  The date is represented as a {@code Date} object or\n * as the milliseconds since January 1, 1970, 00:00:00 GMT.\n * <p>{@code DateFormat} provides many class methods for obtaining default date/time\n * formatters based on the default or a given locale and a number of formatting\n * styles. The formatting styles include {@link #FULL}, {@link #LONG}, {@link #MEDIUM}, and {@link #SHORT}. More\n * detail and examples of using these styles are provided in the method\n * descriptions.\n *\n * <p>{@code DateFormat} helps you to format and parse dates for any locale.\n * Your code can be completely independent of the locale conventions for\n * months, days of the week, or even the calendar format: lunar vs. solar.\n *\n * <p>To format a date for the current Locale, use one of the\n * static factory methods:\n * <blockquote>\n * <pre>{@code\n * myString = DateFormat.getDateInstance().format(myDate);\n * }</pre>\n * </blockquote>\n * <p>If you are formatting multiple dates, it is\n * more efficient to get the format and use it multiple times so that\n * the system doesn't have to fetch the information about the local\n * language and country conventions multiple times.\n * <blockquote>\n * <pre>{@code\n * DateFormat df = DateFormat.getDateInstance();\n * for (int i = 0; i < myDate.length; ++i) {\n *     output.println(df.format(myDate[i]) + \"; \");\n * }\n * }</pre>\n * </blockquote>\n * <p>To format a date for a different Locale, specify it in the\n * call to {@link #getDateInstance(int, Locale) getDateInstance()}.\n * <blockquote>\n * <pre>{@code\n * DateFormat df = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE);\n * }</pre>\n * </blockquote>\n *\n * <p>You can use a DateFormat to parse also.\n * <blockquote>\n * <pre>{@code\n * myDate = df.parse(myString);\n * }</pre>\n * </blockquote>\n * <p>Use {@code getDateInstance} to get the normal date format for that country.\n * There are other static factory methods available.\n * Use {@code getTimeInstance} to get the time format for that country.\n * Use {@code getDateTimeInstance} to get a date and time format. You can pass in\n * different options to these factory methods to control the length of the\n * result; from {@link #SHORT} to {@link #MEDIUM} to {@link #LONG} to {@link #FULL}. The exact result depends\n * on the locale, but generally:\n * <ul><li>{@link #SHORT} is completely numeric, such as {@code 12.13.52} or {@code 3:30pm}\n * <li>{@link #MEDIUM} is longer, such as {@code Jan 12, 1952}\n * <li>{@link #LONG} is longer, such as {@code January 12, 1952} or {@code 3:30:32pm}\n * <li>{@link #FULL} is pretty completely specified, such as\n * {@code Tuesday, April 12, 1952 AD or 3:30:42pm PST}.\n * </ul>\n *\n * <p>You can also set the time zone on the format if you wish.\n * If you want even more control over the format or parsing,\n * (or want to give your users more control),\n * you can try casting the {@code DateFormat} you get from the factory methods\n * to a {@link SimpleDateFormat}. This will work for the majority\n * of countries; just remember to put it in a {@code try} block in case you\n * encounter an unusual one.\n *\n * <p>You can also use forms of the parse and format methods with\n * {@link ParsePosition} and {@link FieldPosition} to\n * allow you to\n * <ul><li>progressively parse through pieces of a string.\n * <li>align any particular field, or find out where it is for selection\n * on the screen.\n * </ul>\n *\n * <h2><a id=\"synchronization\">Synchronization</a></h2>\n *\n * <p>\n * Date formats are not synchronized.\n * It is recommended to create separate format instances for each thread.\n * If multiple threads access a format concurrently, it must be synchronized\n * externally.\n * @apiNote Consider using {@link java.time.format.DateTimeFormatter} as an\n * immutable and thread-safe alternative.\n *\n * @implSpec\n * <ul><li>The {@link #format(Date, StringBuffer, FieldPosition)} and\n * {@link #parse(String, ParsePosition)} methods may throw\n * {@code NullPointerException}, if any of their parameter is {@code null}.\n * The subclass may provide its own implementation and specification about\n * {@code NullPointerException}.</li>\n * <li>The {@link #setCalendar(Calendar)}, {@link\n * #setNumberFormat(NumberFormat)} and {@link #setTimeZone(TimeZone)} methods\n * do not throw {@code NullPointerException} when their parameter is\n * {@code null}, but any subsequent operations on the same instance may throw\n * {@code NullPointerException}.</li>\n * <li>The {@link #getCalendar()}, {@link #getNumberFormat()} and\n * {@link #getTimeZone()} methods may return {@code null}, if the respective\n * values of this instance is set to {@code null} through the corresponding\n * setter methods. For Example: {@link #getTimeZone()} may return {@code null},\n * if the {@code TimeZone} value of this instance is set as\n * {@link #setTimeZone(java.util.TimeZone) setTimeZone(null)}.</li>\n * </ul>\n *\n * @see          Format\n * @see          NumberFormat\n * @see          SimpleDateFormat\n * @see          java.util.Calendar\n * @see          java.util.GregorianCalendar\n * @see          java.util.TimeZone\n * @see          java.time.format.DateTimeFormatter\n * @author       Mark Davis, Chen-Lieh Huang, Alan Liu\n * @since 1.1\n ",
  "links" : [ "#format(Date", "#setCalendar(Calendar)", "#setTimeZone(java.util.TimeZone)", "#getNumberFormat()", "java.text.ParsePosition", "#getTimeZone()", "java.text.SimpleDateFormat", "#setTimeZone(TimeZone)", "#LONG", "#parse(String", "#getCalendar()", "#MEDIUM", "#SHORT", "java.text.FieldPosition", "java.time.format.DateTimeFormatter", "#getDateInstance(int", "#FULL", "#setNumberFormat(NumberFormat)" ],
  "variables" : [ {
    "name" : "calendar",
    "type" : "Calendar",
    "comment" : "\n     * The {@link Calendar} instance used for calculating the date-time fields\n     * and the instant of time. This field is used for both formatting and\n     * parsing.\n     *\n     * <p>Subclasses should initialize this field to a {@link Calendar}\n     * appropriate for the {@link Locale} associated with this\n     * {@code DateFormat}.\n     * @serial\n     ",
    "links" : [ "java.util.Calendar", "java.util.Locale" ]
  }, {
    "name" : "numberFormat",
    "type" : "NumberFormat",
    "comment" : "\n     * The number formatter that {@code DateFormat} uses to format numbers\n     * in dates and times.  Subclasses should initialize this to a number format\n     * appropriate for the locale associated with this {@code DateFormat}.\n     * @serial\n     ",
    "links" : [ ]
  }, {
    "name" : "ERA_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for ERA field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "YEAR_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for YEAR field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for MONTH field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "DATE_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for DATE field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR_OF_DAY1_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for one-based HOUR_OF_DAY field alignment.\n     * Used in FieldPosition of date/time formatting.\n     * HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock.\n     * For example, 23:59 + 01:00 results in 24:59.\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR_OF_DAY0_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for zero-based HOUR_OF_DAY field alignment.\n     * Used in FieldPosition of date/time formatting.\n     * HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock.\n     * For example, 23:59 + 01:00 results in 00:59.\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTE_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for MINUTE field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "SECOND_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for SECOND field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "MILLISECOND_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for MILLISECOND field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_OF_WEEK_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for DAY_OF_WEEK field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_OF_YEAR_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for DAY_OF_YEAR field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_OF_WEEK_IN_MONTH_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for DAY_OF_WEEK_IN_MONTH field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_OF_YEAR_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for WEEK_OF_YEAR field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_OF_MONTH_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for WEEK_OF_MONTH field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "AM_PM_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for AM_PM field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR1_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for one-based HOUR field alignment.\n     * Used in FieldPosition of date/time formatting.\n     * HOUR1_FIELD is used for the one-based 12-hour clock.\n     * For example, 11:30 PM + 1 hour results in 12:30 AM.\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR0_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for zero-based HOUR field alignment.\n     * Used in FieldPosition of date/time formatting.\n     * HOUR0_FIELD is used for the zero-based 12-hour clock.\n     * For example, 11:30 PM + 1 hour results in 00:30 AM.\n     ",
    "links" : [ ]
  }, {
    "name" : "TIMEZONE_FIELD",
    "type" : "int",
    "comment" : "\n     * Useful constant for TIMEZONE field alignment.\n     * Used in FieldPosition of date/time formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Proclaim serial compatibility with 1.1 FCS",
    "links" : [ ]
  }, {
    "name" : "FULL",
    "type" : "int",
    "comment" : "\n     * Constant for full style pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "LONG",
    "type" : "int",
    "comment" : "\n     * Constant for long style pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "MEDIUM",
    "type" : "int",
    "comment" : "\n     * Constant for medium style pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "SHORT",
    "type" : "int",
    "comment" : "\n     * Constant for short style pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT",
    "type" : "int",
    "comment" : "\n     * Constant for default style pattern.  Its value is MEDIUM.\n     ",
    "links" : [ ]
  }, {
    "name" : "is24Hour",
    "type" : "Boolean",
    "comment" : "\n     * {@code null}: use Locale default. {@code true}: force 24-hour format.\n     * {@code false} force 12-hour format.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats the given {@code Object} into a date-time string. The formatted\n     * string is appended to the given {@code StringBuffer}.\n     *\n     * @param obj Must be a {@code Date} or a {@code Number} representing a\n     * millisecond offset from the <a href=\"../util/Calendar.html#Epoch\">Epoch</a>.\n     * @param toAppendTo The string buffer for the returning date-time string.\n     * @param fieldPosition keeps track on the position of the field within\n     * the returned string. For example, given a date-time text\n     * {@code \"1996.07.10 AD at 15:08:56 PDT\"}, if the given {@code fieldPosition}\n     * is {@link DateFormat#YEAR_FIELD}, the begin index and end index of\n     * {@code fieldPosition} will be set to 0 and 4, respectively.\n     * Notice that if the same date-time field appears more than once in a\n     * pattern, the {@code fieldPosition} will be set for the first occurrence\n     * of that date-time field. For instance, formatting a {@code Date} to the\n     * date-time string {@code \"1 PM PDT (Pacific Daylight Time)\"} using the\n     * pattern {@code \"h a z (zzzz)\"} and the alignment field\n     * {@link DateFormat#TIMEZONE_FIELD}, the begin index and end index of\n     * {@code fieldPosition} will be set to 5 and 8, respectively, for the\n     * first occurrence of the timezone pattern character {@code 'z'}.\n     * @return the string buffer passed in as {@code toAppendTo},\n     *         with formatted text appended.\n     * @throws    IllegalArgumentException if the {@code Format} cannot format\n     *            the given {@code obj}.\n     * @see java.text.Format\n     ",
    "links" : [ "java.text.DateFormat#TIMEZONE_FIELD", "java.text.DateFormat#YEAR_FIELD" ]
  }, {
    "name" : "public abstract StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Formats a {@link Date} into a date-time string. The formatted\n     * string is appended to the given {@code StringBuffer}.\n     *\n     * @param date a Date to be formatted into a date-time string.\n     * @param toAppendTo the string buffer for the returning date-time string.\n     * @param fieldPosition keeps track on the position of the field within\n     * the returned string. For example, given a date-time text\n     * {@code \"1996.07.10 AD at 15:08:56 PDT\"}, if the given {@code fieldPosition}\n     * is {@link DateFormat#YEAR_FIELD}, the begin index and end index of\n     * {@code fieldPosition} will be set to 0 and 4, respectively.\n     * Notice that if the same date-time field appears more than once in a\n     * pattern, the {@code fieldPosition} will be set for the first occurrence\n     * of that date-time field. For instance, formatting a {@code Date} to the\n     * date-time string {@code \"1 PM PDT (Pacific Daylight Time)\"} using the\n     * pattern {@code \"h a z (zzzz)\"} and the alignment field\n     * {@link DateFormat#TIMEZONE_FIELD}, the begin index and end index of\n     * {@code fieldPosition} will be set to 5 and 8, respectively, for the\n     * first occurrence of the timezone pattern character {@code 'z'}.\n     * @return the string buffer passed in as {@code toAppendTo}, with formatted\n     * text appended.\n     ",
    "links" : [ "java.text.DateFormat#TIMEZONE_FIELD", "java.util.Date", "java.text.DateFormat#YEAR_FIELD" ]
  }, {
    "name" : "public final String format(Date date)",
    "returnType" : "String",
    "comment" : "\n     * Formats a {@link Date} into a date-time string.\n     *\n     * @param date the time value to be formatted into a date-time string.\n     * @return the formatted date-time string.\n     ",
    "links" : [ "java.util.Date" ]
  }, {
    "name" : "public Date parse(String source) throws ParseException",
    "returnType" : "Date",
    "comment" : "\n     * Parses text from the beginning of the given string to produce a date.\n     * The method may not use the entire text of the given string.\n     * <p>\n     * See the {@link #parse(String, ParsePosition)} method for more information\n     * on date parsing.\n     *\n     * @param source A {@code String} whose beginning should be parsed.\n     * @return A {@code Date} parsed from the string.\n     * @throws    ParseException if the beginning of the specified string\n     *            cannot be parsed.\n     ",
    "links" : [ "#parse(String" ]
  }, {
    "name" : "public abstract Date parse(String source, ParsePosition pos)",
    "returnType" : "Date",
    "comment" : "\n     * Parse a date/time string according to the given parse position.  For\n     * example, a time text {@code \"07/10/96 4:5 PM, PDT\"} will be parsed into a {@code Date}\n     * that is equivalent to {@code Date(837039900000L)}.\n     *\n     * <p> By default, parsing is lenient: If the input is not in the form used\n     * by this object's format method but can still be parsed as a date, then\n     * the parse succeeds.  Clients may insist on strict adherence to the\n     * format by calling {@link #setLenient(boolean) setLenient(false)}.\n     *\n     * <p>This parsing operation uses the {@link #calendar} to produce\n     * a {@code Date}. As a result, the {@code calendar}'s date-time\n     * fields and the {@code TimeZone} value may have been\n     * overwritten, depending on subclass implementations. Any {@code\n     * TimeZone} value that has previously been set by a call to\n     * {@link #setTimeZone(java.util.TimeZone) setTimeZone} may need\n     * to be restored for further operations.\n     *\n     * @param source  The date/time string to be parsed\n     *\n     * @param pos   On input, the position at which to start parsing; on\n     *              output, the position at which parsing terminated, or the\n     *              start position if the parse failed.\n     *\n     * @return      A {@code Date}, or {@code null} if the input could not be parsed\n     ",
    "links" : [ "#setTimeZone(java.util.TimeZone)", "#calendar", "#setLenient(boolean)" ]
  }, {
    "name" : "public Object parseObject(String source, ParsePosition pos)",
    "returnType" : "Object",
    "comment" : "\n     * Parses text from a string to produce a {@code Date}.\n     * <p>\n     * The method attempts to parse text starting at the index given by\n     * {@code pos}.\n     * If parsing succeeds, then the index of {@code pos} is updated\n     * to the index after the last character used (parsing does not necessarily\n     * use all characters up to the end of the string), and the parsed\n     * date is returned. The updated {@code pos} can be used to\n     * indicate the starting point for the next call to this method.\n     * If an error occurs, then the index of {@code pos} is not\n     * changed, the error index of {@code pos} is set to the index of\n     * the character where the error occurred, and null is returned.\n     * <p>\n     * See the {@link #parse(String, ParsePosition)} method for more information\n     * on date parsing.\n     *\n     * @param source A {@code String}, part of which should be parsed.\n     * @param pos A {@code ParsePosition} object with index and error\n     *            index information as described above.\n     * @return A {@code Date} parsed from the string. In case of\n     *         error, returns null.\n     * @throws NullPointerException if {@code source} or {@code pos} is null.\n     ",
    "links" : [ "#parse(String" ]
  }, {
    "name" : "public static final DateFormat getTimeInstance()",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the time formatter with the default formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getTimeInstance(int, Locale) getTimeInstance(DEFAULT,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @return a time formatter.\n     ",
    "links" : [ "#getTimeInstance(int", "java.util.Locale.Category#FORMAT" ]
  }, {
    "name" : "public static final DateFormat getTimeInstance(int style)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the time formatter with the given formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getTimeInstance(int, Locale) getTimeInstance(style,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param style the given formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @return a time formatter.\n     ",
    "links" : [ "#getTimeInstance(int", "java.util.Locale.Category#FORMAT" ]
  }, {
    "name" : "public static final DateFormat getTimeInstance(int style, Locale aLocale)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the time formatter with the given formatting style\n     * for the given locale.\n     * @param style the given formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @param aLocale the given locale.\n     * @return a time formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateFormat getDateInstance()",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date formatter with the default formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateInstance(int, Locale) getDateInstance(DEFAULT,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @return a date formatter.\n     ",
    "links" : [ "java.util.Locale.Category#FORMAT", "#getDateInstance(int" ]
  }, {
    "name" : "public static final DateFormat getDateInstance(int style)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date formatter with the given formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateInstance(int, Locale) getDateInstance(style,\n     *     Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param style the given formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @return a date formatter.\n     ",
    "links" : [ "java.util.Locale.Category#FORMAT", "#getDateInstance(int" ]
  }, {
    "name" : "public static final DateFormat getDateInstance(int style, Locale aLocale)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date formatter with the given formatting style\n     * for the given locale.\n     * @param style the given formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @param aLocale the given locale.\n     * @return a date formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateFormat getDateTimeInstance()",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date/time formatter with the default formatting style\n     * for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(DEFAULT,\n     *     DEFAULT, Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @return a date/time formatter.\n     ",
    "links" : [ "java.util.Locale.Category#FORMAT", "#getDateTimeInstance(int" ]
  }, {
    "name" : "public static final DateFormat getDateTimeInstance(int dateStyle, int timeStyle)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date/time formatter with the given date and time\n     * formatting styles for the default {@link java.util.Locale.Category#FORMAT FORMAT} locale.\n     * <p>This is equivalent to calling\n     * {@link #getDateTimeInstance(int, int, Locale) getDateTimeInstance(dateStyle,\n     *     timeStyle, Locale.getDefault(Locale.Category.FORMAT))}.\n     * @see java.util.Locale#getDefault(java.util.Locale.Category)\n     * @see java.util.Locale.Category#FORMAT\n     * @param dateStyle the given date formatting style. For example,\n     * SHORT for \"M/d/yy\" in the US locale.\n     * @param timeStyle the given time formatting style. For example,\n     * SHORT for \"h:mm a\" in the US locale.\n     * @return a date/time formatter.\n     ",
    "links" : [ "java.util.Locale.Category#FORMAT", "#getDateTimeInstance(int" ]
  }, {
    "name" : "public static final DateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date/time formatter with the given formatting styles\n     * for the given locale.\n     * @param dateStyle the given date formatting style.\n     * @param timeStyle the given time formatting style.\n     * @param aLocale the given locale.\n     * @return a date/time formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateFormat getInstance()",
    "returnType" : "DateFormat",
    "comment" : "\n     * Get a default date/time formatter that uses the SHORT style for both the\n     * date and the time.\n     *\n     * @return a date/time formatter\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void set24HourTimePref(Boolean is24Hour)",
    "returnType" : "void",
    "comment" : " END Android-changed: Improve javadoc for stable SystemApi.",
    "links" : [ ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns an array of all locales for which the\n     * {@code get*Instance} methods of this class can return\n     * localized instances.\n     * It must contain at least a {@code Locale} instance equal to\n     * {@link java.util.Locale#US Locale.US}.\n     *\n     * @return An array of locales for which localized\n     *         {@code DateFormat} instances are available.\n     ",
    "links" : [ "java.util.Locale#US" ]
  }, {
    "name" : "public void setCalendar(Calendar newCalendar)",
    "returnType" : "void",
    "comment" : "\n     * Set the calendar to be used by this date format.  Initially, the default\n     * calendar for the specified or default locale is used.\n     *\n     * <p>Any {@link java.util.TimeZone TimeZone} and {@linkplain\n     * #isLenient() leniency} values that have previously been set are\n     * overwritten by {@code newCalendar}'s values.\n     *\n     * @param newCalendar the new {@code Calendar} to be used by the date format\n     ",
    "links" : [ "java.util.TimeZone" ]
  }, {
    "name" : "public Calendar getCalendar()",
    "returnType" : "Calendar",
    "comment" : "\n     * Gets the calendar associated with this date/time formatter.\n     *\n     * @return the calendar associated with this date/time formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNumberFormat(NumberFormat newNumberFormat)",
    "returnType" : "void",
    "comment" : "\n     * Allows you to set the number formatter.\n     * @param newNumberFormat the given new NumberFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public NumberFormat getNumberFormat()",
    "returnType" : "NumberFormat",
    "comment" : "\n     * Gets the number formatter which this date/time formatter uses to\n     * format and parse a time.\n     * @return the number formatter which this date/time formatter uses.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeZone(TimeZone zone)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time zone for the calendar of this {@code DateFormat} object.\n     * This method is equivalent to the following call.\n     * <blockquote><pre>{@code\n     * getCalendar().setTimeZone(zone)\n     * }</pre></blockquote>\n     *\n     * <p>The {@code TimeZone} set by this method is overwritten by a\n     * {@link #setCalendar(java.util.Calendar) setCalendar} call.\n     *\n     * <p>The {@code TimeZone} set by this method may be overwritten as\n     * a result of a call to the parse method.\n     *\n     * @param zone the given new time zone.\n     ",
    "links" : [ "#setCalendar(java.util.Calendar)" ]
  }, {
    "name" : "public TimeZone getTimeZone()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Gets the time zone.\n     * This method is equivalent to the following call.\n     * <blockquote><pre>{@code\n     * getCalendar().getTimeZone()\n     * }</pre></blockquote>\n     *\n     * @return the time zone associated with the calendar of DateFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLenient(boolean lenient)",
    "returnType" : "void",
    "comment" : "\n     * Specify whether or not date/time parsing is to be lenient.  With\n     * lenient parsing, the parser may use heuristics to interpret inputs that\n     * do not precisely match this object's format.  With strict parsing,\n     * inputs must match this object's format.\n     *\n     * <p>This method is equivalent to the following call.\n     * <blockquote><pre>{@code\n     * getCalendar().setLenient(lenient)\n     * }</pre></blockquote>\n     *\n     * <p>This leniency value is overwritten by a call to {@link\n     * #setCalendar(java.util.Calendar) setCalendar()}.\n     *\n     * @param lenient when {@code true}, parsing is lenient\n     * @see java.util.Calendar#setLenient(boolean)\n     ",
    "links" : [ "#setCalendar(java.util.Calendar)" ]
  }, {
    "name" : "public boolean isLenient()",
    "returnType" : "boolean",
    "comment" : "\n     * Tell whether date/time parsing is to be lenient.\n     * This method is equivalent to the following call.\n     * <blockquote><pre>{@code\n     * getCalendar().isLenient()\n     * }</pre></blockquote>\n     *\n     * @return {@code true} if the {@link #calendar} is lenient;\n     *         {@code false} otherwise.\n     * @see java.util.Calendar#isLenient()\n     ",
    "links" : [ "#calendar" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Overrides hashCode\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Overrides equals\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Overrides Cloneable\n     ",
    "links" : [ ]
  }, {
    "name" : "private static DateFormat get(int timeStyle, int dateStyle, int flags, Locale loc)",
    "returnType" : "DateFormat",
    "comment" : "\n     * Creates a DateFormat with the given time and/or date style in the given\n     * locale.\n     * @param timeStyle a value from 0 to 3 indicating the time format,\n     * ignored if flags is 2\n     * @param dateStyle a value from 0 to 3 indicating the time format,\n     * ignored if flags is 1\n     * @param flags either 1 for a time format, 2 for a date format,\n     * or 3 for a date/time format\n     * @param loc the locale for the format\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)", "public abstract StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)", "public final String format(Date date)", "public Date parse(String source) throws ParseException", "public abstract Date parse(String source, ParsePosition pos)", "public Object parseObject(String source, ParsePosition pos)", "public static final DateFormat getTimeInstance()", "public static final DateFormat getTimeInstance(int style)", "public static final DateFormat getTimeInstance(int style, Locale aLocale)", "public static final DateFormat getDateInstance()", "public static final DateFormat getDateInstance(int style)", "public static final DateFormat getDateInstance(int style, Locale aLocale)", "public static final DateFormat getDateTimeInstance()", "public static final DateFormat getDateTimeInstance(int dateStyle, int timeStyle)", "public static final DateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)", "public static final DateFormat getInstance()", "public static final void set24HourTimePref(Boolean is24Hour)", "public static Locale[] getAvailableLocales()", "public void setCalendar(Calendar newCalendar)", "public Calendar getCalendar()", "public void setNumberFormat(NumberFormat newNumberFormat)", "public NumberFormat getNumberFormat()", "public void setTimeZone(TimeZone zone)", "public TimeZone getTimeZone()", "public void setLenient(boolean lenient)", "public boolean isLenient()", "public int hashCode()", "public boolean equals(Object obj)", "public Object clone()", "private static DateFormat get(int timeStyle, int dateStyle, int flags, Locale loc)" ],
  "variableNames" : [ "calendar", "numberFormat", "ERA_FIELD", "YEAR_FIELD", "MONTH_FIELD", "DATE_FIELD", "HOUR_OF_DAY1_FIELD", "HOUR_OF_DAY0_FIELD", "MINUTE_FIELD", "SECOND_FIELD", "MILLISECOND_FIELD", "DAY_OF_WEEK_FIELD", "DAY_OF_YEAR_FIELD", "DAY_OF_WEEK_IN_MONTH_FIELD", "WEEK_OF_YEAR_FIELD", "WEEK_OF_MONTH_FIELD", "AM_PM_FIELD", "HOUR1_FIELD", "HOUR0_FIELD", "TIMEZONE_FIELD", "serialVersionUID", "FULL", "LONG", "MEDIUM", "SHORT", "DEFAULT", "is24Hour" ]
}