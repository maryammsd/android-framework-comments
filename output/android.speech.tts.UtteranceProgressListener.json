{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/speech/tts/UtteranceProgressListener.java",
  "packageName" : "android.speech.tts",
  "className" : "UtteranceProgressListener",
  "comment" : "\n * Listener for events relating to the progress of an utterance through\n * the synthesis queue. Each utterance is associated with a call to\n * {@link TextToSpeech#speak} or {@link TextToSpeech#synthesizeToFile} with an\n * associated utterance identifier, as per {@link TextToSpeech.Engine#KEY_PARAM_UTTERANCE_ID}.\n *\n * The callbacks specified in this method can be called from multiple threads.\n ",
  "links" : [ "android.speech.tts.TextToSpeech#speak", "TextToSpeech.Engine#KEY_PARAM_UTTERANCE_ID", "android.speech.tts.TextToSpeech#synthesizeToFile" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void onStart(String utteranceId)",
    "returnType" : "void",
    "comment" : "\n     * Called when an utterance \"starts\" as perceived by the caller. This will\n     * be soon before audio is played back in the case of a {@link TextToSpeech#speak}\n     * or before the first bytes of a file are written to the file system in the case\n     * of {@link TextToSpeech#synthesizeToFile}.\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     ",
    "links" : [ "android.speech.tts.TextToSpeech#speak", "android.speech.tts.TextToSpeech#synthesizeToFile" ]
  }, {
    "name" : "public abstract void onDone(String utteranceId)",
    "returnType" : "void",
    "comment" : "\n     * Called when an utterance has successfully completed processing.\n     * All audio will have been played back by this point for audible output, and all\n     * output will have been written to disk for file synthesis requests.\n     *\n     * This request is guaranteed to be called after {@link #onStart(String)}.\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     ",
    "links" : [ "#onStart(String)" ]
  }, {
    "name" : "public abstract void onError(String utteranceId)",
    "returnType" : "void",
    "comment" : "\n     * Called when an error has occurred during processing. This can be called\n     * at any point in the synthesis process. Note that there might be calls\n     * to {@link #onStart(String)} for specified utteranceId but there will never\n     * be a call to both {@link #onDone(String)} and {@link #onError(String)} for\n     * the same utterance.\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     * @deprecated Use {@link #onError(String,int)} instead\n     ",
    "links" : [ "#onError(String)", "#onStart(String)", "#onDone(String)", "#onError(String" ]
  }, {
    "name" : "public void onError(String utteranceId, int errorCode)",
    "returnType" : "void",
    "comment" : "\n     * Called when an error has occurred during processing. This can be called\n     * at any point in the synthesis process. Note that there might be calls\n     * to {@link #onStart(String)} for specified utteranceId but there will never\n     * be a call to both {@link #onDone(String)} and {@link #onError(String,int)} for\n     * the same utterance. The default implementation calls {@link #onError(String)}.\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     * @param errorCode one of the ERROR_* codes from {@link TextToSpeech}\n     ",
    "links" : [ "#onError(String)", "android.speech.tts.TextToSpeech", "#onStart(String)", "#onDone(String)", "#onError(String" ]
  }, {
    "name" : "public void onStop(String utteranceId, boolean interrupted)",
    "returnType" : "void",
    "comment" : "\n     * Called when an utterance has been stopped while in progress or flushed from the\n     * synthesis queue. This can happen if a client calls {@link TextToSpeech#stop()}\n     * or uses {@link TextToSpeech#QUEUE_FLUSH} as an argument with the\n     * {@link TextToSpeech#speak} or {@link TextToSpeech#synthesizeToFile} methods.\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     * @param interrupted If true, then the utterance was interrupted while being synthesized\n     *        and its output is incomplete. If false, then the utterance was flushed\n     *        before the synthesis started.\n     ",
    "links" : [ "android.speech.tts.TextToSpeech#speak", "android.speech.tts.TextToSpeech#QUEUE_FLUSH", "android.speech.tts.TextToSpeech#stop()", "android.speech.tts.TextToSpeech#synthesizeToFile" ]
  }, {
    "name" : "public void onBeginSynthesis(String utteranceId, int sampleRateInHz, int audioFormat, int channelCount)",
    "returnType" : "void",
    "comment" : "\n     * Called when the TTS engine begins to synthesize the audio for a request.\n     *\n     * <p>\n     * It provides information about the format of the byte array for subsequent\n     * {@link #onAudioAvailable} calls.\n     * </p>\n     *\n     * <p>\n     * This is called when the TTS engine starts synthesizing audio for the request. If an\n     * application wishes to know when the audio is about to start playing, {#onStart(String)}\n     * should be used instead.\n     * </p>\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     * @param sampleRateInHz Sample rate in hertz of the generated audio.\n     * @param audioFormat Audio format of the generated audio. Should be one of\n     *        {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT} or\n     *        {@link AudioFormat#ENCODING_PCM_FLOAT}.\n     * @param channelCount The number of channels.\n     ",
    "links" : [ "#onAudioAvailable", "android.media.AudioFormat#ENCODING_PCM_8BIT", "android.media.AudioFormat#ENCODING_PCM_FLOAT", "android.media.AudioFormat#ENCODING_PCM_16BIT" ]
  }, {
    "name" : "public void onAudioAvailable(String utteranceId, byte[] audio)",
    "returnType" : "void",
    "comment" : "\n     * This is called when a chunk of audio is ready for consumption.\n     *\n     * <p>\n     * The audio parameter is a copy of what will be synthesized to the speakers (when synthesis was\n     * initiated with a {@link TextToSpeech#speak} call) or written to the file system (for\n     * {@link TextToSpeech#synthesizeToFile}). The audio bytes are delivered in one or more chunks;\n     * if {@link #onDone} or {@link #onError} is called all chunks have been received.\n     * </p>\n     *\n     * <p>\n     * The audio received here may not be played for some time depending on buffer sizes and the\n     * amount of items on the synthesis queue.\n     * </p>\n     *\n     * @param utteranceId The utterance ID of the utterance.\n     * @param audio A chunk of audio; the format can be known by listening to\n     *        {@link #onBeginSynthesis(String, int, int, int)}.\n     ",
    "links" : [ "android.speech.tts.TextToSpeech#speak", "#onError", "#onDone", "android.speech.tts.TextToSpeech#synthesizeToFile", "#onBeginSynthesis(String" ]
  }, {
    "name" : "public void onRangeStart(String utteranceId, int start, int end, int frame)",
    "returnType" : "void",
    "comment" : "\n     * This is called when the TTS service is about to speak the specified range of the utterance\n     * with the given utteranceId.\n     *\n     * <p>This method is called when the audio is expected to start playing on the speaker. Note\n     * that this is different from {@link #onAudioAvailable} which is called as soon as the audio is\n     * generated.\n\n     * <p>This information can be used, for example, to highlight ranges of the text while it is\n     * spoken.\n     *\n     * <p>Only called if the engine supplies timing information by calling {@link\n     * SynthesisCallback#rangeStart(int, int, int)}.\n     *\n     * @param utteranceId Unique id identifying the synthesis request.\n     * @param start The start index of the range in the utterance text.\n     * @param end The end index of the range (exclusive) in the utterance text.\n     * @param frame The position in frames in the audio of the request where this range is spoken.\n     ",
    "links" : [ "android.speech.tts.SynthesisCallback#rangeStart(int", "#onAudioAvailable" ]
  }, {
    "name" : "public void onUtteranceRangeStart(String utteranceId, int start, int end)",
    "returnType" : "void",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : " static UtteranceProgressListener from(final TextToSpeech.OnUtteranceCompletedListener listener)",
    "returnType" : "UtteranceProgressListener",
    "comment" : "\n     * Wraps an old deprecated OnUtteranceCompletedListener with a shiny new progress listener.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onStart(String utteranceId)", "public abstract void onDone(String utteranceId)", "public abstract void onError(String utteranceId)", "public void onError(String utteranceId, int errorCode)", "public void onStop(String utteranceId, boolean interrupted)", "public void onBeginSynthesis(String utteranceId, int sampleRateInHz, int audioFormat, int channelCount)", "public void onAudioAvailable(String utteranceId, byte[] audio)", "public void onRangeStart(String utteranceId, int start, int end, int frame)", "public void onUtteranceRangeStart(String utteranceId, int start, int end)", " static UtteranceProgressListener from(final TextToSpeech.OnUtteranceCompletedListener listener)" ],
  "variableNames" : [ ]
}