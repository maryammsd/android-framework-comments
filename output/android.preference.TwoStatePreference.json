{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/preference/TwoStatePreference.java",
  "packageName" : "android.preference",
  "className" : "TwoStatePreference",
  "comment" : "\n * Common base class for preferences that have two selectable states, persist a\n * boolean value in SharedPreferences, and may have dependent preferences that are\n * enabled/disabled based on the current state.\n *\n * @deprecated Use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n *      <a href=\"{@docRoot}reference/androidx/preference/package-summary.html\">\n *      Preference Library</a> for consistent behavior across all devices. For more information on\n *      using the AndroidX Preference Library see\n *      <a href=\"{@docRoot}guide/topics/ui/settings.html\">Settings</a>.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSummaryOn",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSummaryOff",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChecked",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCheckedSet",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisableDependentsState",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void onClick()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setChecked(boolean checked)",
    "returnType" : "void",
    "comment" : "\n     * Sets the checked state and saves it to the {@link SharedPreferences}.\n     *\n     * @param checked The checked state.\n     ",
    "links" : [ "android.content.SharedPreferences" ]
  }, {
    "name" : "public boolean isChecked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the checked state.\n     *\n     * @return The checked state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean shouldDisableDependents()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setSummaryOn(CharSequence summary)",
    "returnType" : "void",
    "comment" : "\n     * Sets the summary to be shown when checked.\n     *\n     * @param summary The summary to be shown when checked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSummaryOn(@StringRes int summaryResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setSummaryOn(CharSequence)\n     * @param summaryResId The summary as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSummaryOn()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the summary to be shown when checked.\n     * @return The summary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSummaryOff(CharSequence summary)",
    "returnType" : "void",
    "comment" : "\n     * Sets the summary to be shown when unchecked.\n     *\n     * @param summary The summary to be shown when unchecked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSummaryOff(@StringRes int summaryResId)",
    "returnType" : "void",
    "comment" : "\n     * @see #setSummaryOff(CharSequence)\n     * @param summaryResId The summary as a resource.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getSummaryOff()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns the summary to be shown when unchecked.\n     * @return The summary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisableDependentsState()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether dependents are disabled when this preference is on ({@code true})\n     * or when this preference is off ({@code false}).\n     *\n     * @return Whether dependents are disabled when this preference is on ({@code true})\n     *         or when this preference is off ({@code false}).\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDisableDependentsState(boolean disableDependentsState)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether dependents are disabled when this preference is on ({@code true})\n     * or when this preference is off ({@code false}).\n     *\n     * @param disableDependentsState The preference state that should disable dependents.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Object onGetDefaultValue(TypedArray a, int index)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onSetInitialValue(boolean restoreValue, Object defaultValue)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void syncSummaryView(View view)",
    "returnType" : "void",
    "comment" : "\n     * Sync a summary view contained within view's subhierarchy with the correct summary text.\n     * @param view View where a summary should be located\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void onClick()", "public void setChecked(boolean checked)", "public boolean isChecked()", "public boolean shouldDisableDependents()", "public void setSummaryOn(CharSequence summary)", "public void setSummaryOn(@StringRes int summaryResId)", "public CharSequence getSummaryOn()", "public void setSummaryOff(CharSequence summary)", "public void setSummaryOff(@StringRes int summaryResId)", "public CharSequence getSummaryOff()", "public boolean getDisableDependentsState()", "public void setDisableDependentsState(boolean disableDependentsState)", "protected Object onGetDefaultValue(TypedArray a, int index)", "protected void onSetInitialValue(boolean restoreValue, Object defaultValue)", " void syncSummaryView(View view)", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)" ],
  "variableNames" : [ "mSummaryOn", "mSummaryOff", "mChecked", "mCheckedSet", "mDisableDependentsState" ]
}