{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/text/method/TextKeyListener.java",
  "packageName" : "android.text.method",
  "className" : "TextKeyListener",
  "comment" : "\n * This is the key listener for typing normal text.  It delegates to\n * other key listeners appropriate to the current keyboard and language.\n * <p></p>\n * As for all implementations of {@link KeyListener}, this class is only concerned\n * with hardware keyboards.  Software input methods have no obligation to trigger\n * the methods in this class.\n ",
  "variables" : [ {
    "name" : "sInstance",
    "type" : "TextKeyListener[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTIVE",
    "type" : "Object",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "CAPPED",
    "type" : "Object",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "INHIBIT_REPLACEMENT",
    "type" : "Object",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "LAST_TYPED",
    "type" : "Object",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mAutoCap",
    "type" : "Capitalize",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoText",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrefs",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrefsInited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "AUTO_CAP",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "AUTO_TEXT",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "AUTO_PERIOD",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "SHOW_PASSWORD",
    "type" : "int",
    "comment" : " package ",
    "links" : [ ]
  }, {
    "name" : "mResolver",
    "type" : "WeakReference<ContentResolver>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mObserver",
    "type" : "TextKeyListener.SettingsObserver",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TextKeyListener getInstance(boolean autotext, Capitalize cap)",
    "returnType" : "TextKeyListener",
    "comment" : "\n     * Returns a new or existing instance with the specified capitalization\n     * and correction properties.\n     *\n     * @param cap when, if ever, to automatically capitalize.\n     * @param autotext whether to automatically do spelling corrections.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TextKeyListener getInstance()",
    "returnType" : "TextKeyListener",
    "comment" : "\n     * Returns a new or existing instance with no automatic capitalization\n     * or correction.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean shouldCap(Capitalize cap, CharSequence cs, int off)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether it makes sense to automatically capitalize at the\n     * specified position in the specified text, with the specified rules.\n     *\n     * @param cap the capitalization rules to consider.\n     * @param cs the text in which an insertion is being made.\n     * @param off the offset into that text where the insertion is being made.\n     *\n     * @return whether the character being inserted should be capitalized.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getInputType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyUp(View view, Editable content, int keyCode, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onKeyOther(View view, Editable content, KeyEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void clear(Editable e)",
    "returnType" : "void",
    "comment" : "\n     * Clear all the input state (autotext, autocap, multitap, undo)\n     * from the specified Editable, going beyond Editable.clear(), which\n     * just clears the text but not the input state.\n     *\n     * @param e the buffer whose text and state are to be cleared.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onSpanAdded(Spannable s, Object what, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSpanRemoved(Spannable s, Object what, int start, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onSpanChanged(Spannable s, Object what, int start, int end, int st, int en)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyListener getKeyListener(KeyEvent event)",
    "returnType" : "KeyListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void release()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initPrefs(Context context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updatePrefs(ContentResolver resolver)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " int getPrefs(Context context)",
    "returnType" : "int",
    "comment" : " package ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sInstance", "ACTIVE", "CAPPED", "INHIBIT_REPLACEMENT", "LAST_TYPED", "mAutoCap", "mAutoText", "mPrefs", "mPrefsInited", "AUTO_CAP", "AUTO_TEXT", "AUTO_PERIOD", "SHOW_PASSWORD", "mResolver", "mObserver" ],
  "methodNames" : [ "public static TextKeyListener getInstance(boolean autotext, Capitalize cap)", "public static TextKeyListener getInstance()", "public static boolean shouldCap(Capitalize cap, CharSequence cs, int off)", "public int getInputType()", "public boolean onKeyDown(View view, Editable content, int keyCode, KeyEvent event)", "public boolean onKeyUp(View view, Editable content, int keyCode, KeyEvent event)", "public boolean onKeyOther(View view, Editable content, KeyEvent event)", "public static void clear(Editable e)", "public void onSpanAdded(Spannable s, Object what, int start, int end)", "public void onSpanRemoved(Spannable s, Object what, int start, int end)", "public void onSpanChanged(Spannable s, Object what, int start, int end, int st, int en)", "private KeyListener getKeyListener(KeyEvent event)", "public void release()", "private void initPrefs(Context context)", "private void updatePrefs(ContentResolver resolver)", " int getPrefs(Context context)" ]
}