{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/pm/PackageItemInfo.java",
  "packageName" : "android.content.pm",
  "className" : "PackageItemInfo",
  "comment" : "\n * Base class containing information common to all package items held by\n * the package manager.  This provides a very common basic set of attributes:\n * a label, icon, and meta-data.  This class is not intended\n * to be used by itself; it is simply here to share common definitions\n * between all items returned by the package manager.  As such, it does not\n * itself implement Parcelable, but does provide convenience methods to assist\n * in the implementation of Parcelable in subclasses.\n ",
  "variables" : [ {
    "name" : "MAX_SAFE_LABEL_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum length of a safe label, in characters\n     *\n     * TODO(b/157997155): It may make sense to expose this publicly so that apps can check for the\n     *  value and truncate the strings/use a different label, without having to hardcode and make\n     *  assumptions about the value.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_MAX_LABEL_SIZE_PX",
    "type" : "float",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SAFE_LABEL_FLAG_TRIM",
    "type" : "int",
    "comment" : "\n     * Remove {@link Character#isWhitespace(int) whitespace} and non-breaking spaces from the edges\n     * of the label.\n     *\n     * @see #loadSafeLabel(PackageManager, float, int)\n     *\n     * @deprecated Use {@link TextUtils#SAFE_STRING_FLAG_TRIM} instead\n     * @hide\n     * @removed\n     ",
    "links" : [ "android.text.TextUtils#SAFE_STRING_FLAG_TRIM", "#isWhitespace(int)" ]
  }, {
    "name" : "SAFE_LABEL_FLAG_SINGLE_LINE",
    "type" : "int",
    "comment" : "\n     * Force entire string into single line of text (no newlines). Cannot be set at the same time as\n     * {@link #SAFE_LABEL_FLAG_FIRST_LINE}.\n     *\n     * @see #loadSafeLabel(PackageManager, float, int)\n     *\n     * @deprecated Use {@link TextUtils#SAFE_STRING_FLAG_SINGLE_LINE} instead\n     * @hide\n     * @removed\n     ",
    "links" : [ "android.text.TextUtils#SAFE_STRING_FLAG_SINGLE_LINE", "#SAFE_LABEL_FLAG_FIRST_LINE" ]
  }, {
    "name" : "SAFE_LABEL_FLAG_FIRST_LINE",
    "type" : "int",
    "comment" : "\n     * Return only first line of text (truncate at first newline). Cannot be set at the same time as\n     * {@link #SAFE_LABEL_FLAG_SINGLE_LINE}.\n     *\n     * @see #loadSafeLabel(PackageManager, float, int)\n     *\n     * @deprecated Use {@link TextUtils#SAFE_STRING_FLAG_FIRST_LINE} instead\n     * @hide\n     * @removed\n     ",
    "links" : [ "android.text.TextUtils#SAFE_STRING_FLAG_FIRST_LINE", "#SAFE_LABEL_FLAG_SINGLE_LINE" ]
  }, {
    "name" : "sForceSafeLabels",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "name",
    "type" : "String",
    "comment" : "\n     * Public name of this item. From the \"android:name\" attribute.\n     ",
    "links" : [ ]
  }, {
    "name" : "packageName",
    "type" : "String",
    "comment" : "\n     * Name of the package that this item is in.\n     ",
    "links" : [ ]
  }, {
    "name" : "labelRes",
    "type" : "int",
    "comment" : "\n     * A string resource identifier (in the package's resources) of this\n     * component's label.  From the \"label\" attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "nonLocalizedLabel",
    "type" : "CharSequence",
    "comment" : "\n     * The string provided in the AndroidManifest file, if any.  You\n     * probably don't want to use this.  You probably want\n     * {@link PackageManager#getApplicationLabel}\n     ",
    "links" : [ "android.content.pm.PackageManager#getApplicationLabel" ]
  }, {
    "name" : "icon",
    "type" : "int",
    "comment" : "\n     * A drawable resource identifier (in the package's resources) of this\n     * component's icon.  From the \"icon\" attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "banner",
    "type" : "int",
    "comment" : "\n     * A drawable resource identifier (in the package's resources) of this\n     * component's banner.  From the \"banner\" attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "logo",
    "type" : "int",
    "comment" : "\n     * A drawable resource identifier (in the package's resources) of this\n     * component's logo. Logos may be larger/wider than icons and are\n     * displayed by certain UI elements in place of a name or name/icon\n     * combination. From the \"logo\" attribute or, if not set, 0.\n     ",
    "links" : [ ]
  }, {
    "name" : "metaData",
    "type" : "Bundle",
    "comment" : "\n     * Additional meta-data associated with this component.  This field\n     * will only be filled in if you set the\n     * {@link PackageManager#GET_META_DATA} flag when requesting the info.\n     ",
    "links" : [ "android.content.pm.PackageManager#GET_META_DATA" ]
  }, {
    "name" : "showUserIcon",
    "type" : "int",
    "comment" : "\n     * If different of UserHandle.USER_NULL, The icon of this item will represent that user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "DUMP_FLAG_DETAILS",
    "type" : "int",
    "comment" : "\n     * @hide Flag for dumping: include all details.\n     ",
    "links" : [ ]
  }, {
    "name" : "DUMP_FLAG_APPLICATION",
    "type" : "int",
    "comment" : "\n     * @hide Flag for dumping: include nested ApplicationInfo.\n     ",
    "links" : [ ]
  }, {
    "name" : "DUMP_FLAG_ALL",
    "type" : "int",
    "comment" : "\n     * @hide Flag for dumping: all flags to dump everything.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void forceSafeLabels()",
    "returnType" : "void",
    "comment" : "\n     * Always use {@link #loadSafeLabel safe labels} when calling {@link #loadLabel}.\n     *\n     * @hide\n     ",
    "links" : [ "#loadLabel", "#loadSafeLabel" ]
  }, {
    "name" : "public CharSequence loadLabel(@NonNull PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Retrieve the current textual label associated with this item.  This\n     * will call back on the given PackageManager to load the label from\n     * the application.\n     *\n     * @param pm A PackageManager from which the label can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a CharSequence containing the item's label.  If the\n     * item does not have a label, its name is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadUnsafeLabel(PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadSafeLabel(@NonNull PackageManager pm)",
    "returnType" : "CharSequence",
    "comment" : "\n     * @hide\n     * @deprecated use loadSafeLabel(PackageManager, float, int) instead\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence loadSafeLabel(@NonNull PackageManager pm, @FloatRange(from = 0) float ellipsizeDip, @TextUtils.SafeStringFlags int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Calls {@link TextUtils#makeSafeForPresentation} for the label of this item.\n     *\n     * <p>For parameters see {@link TextUtils#makeSafeForPresentation}.\n     *\n     * @hide\n    ",
    "links" : [ "android.text.TextUtils#makeSafeForPresentation" ]
  }, {
    "name" : "public Drawable loadIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current graphical icon associated with this item.  This\n     * will call back on the given PackageManager to load the icon from\n     * the application.\n     *\n     * @param pm A PackageManager from which the icon can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's icon.  If the\n     * item does not have an icon, the item's default icon is returned\n     * such as the default activity icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadUnbadgedIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current graphical icon associated with this item without\n     * the addition of a work badge if applicable.\n     * This will call back on the given PackageManager to load the icon from\n     * the application.\n     *\n     * @param pm A PackageManager from which the icon can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's icon.  If the\n     * item does not have an icon, the item's default icon is returned\n     * such as the default activity icon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadBanner(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current graphical banner associated with this item.  This\n     * will call back on the given PackageManager to load the banner from\n     * the application.\n     *\n     * @param pm A PackageManager from which the banner can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's banner.  If the item\n     * does not have a banner, this method will return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadDefaultIcon(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the default graphical icon associated with this item.\n     *\n     * @param pm A PackageManager from which the icon can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's default icon\n     * such as the default activity icon.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Drawable loadDefaultBanner(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the default graphical banner associated with this item.\n     *\n     * @param pm A PackageManager from which the banner can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's default banner\n     * or null if no default logo is available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Drawable loadLogo(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the current graphical logo associated with this item. This\n     * will call back on the given PackageManager to load the logo from\n     * the application.\n     *\n     * @param pm A PackageManager from which the logo can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's logo. If the item\n     * does not have a logo, this method will return null.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Drawable loadDefaultLogo(PackageManager pm)",
    "returnType" : "Drawable",
    "comment" : "\n     * Retrieve the default graphical logo associated with this item.\n     *\n     * @param pm A PackageManager from which the logo can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     *\n     * @return Returns a Drawable containing the item's default logo\n     * or null if no default logo is available.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public XmlResourceParser loadXmlMetaData(PackageManager pm, String name)",
    "returnType" : "XmlResourceParser",
    "comment" : "\n     * Load an XML resource attached to the meta-data of this item.  This will\n     * retrieved the name meta-data entry, and if defined call back on the\n     * given PackageManager to load its XML file from the application.\n     *\n     * @param pm A PackageManager from which the XML can be loaded; usually\n     * the PackageManager from which you originally retrieved this item.\n     * @param name Name of the meta-date you would like to load.\n     *\n     * @return Returns an XmlPullParser you can use to parse the XML file\n     * assigned as the given meta-data.  If the meta-data name is not defined\n     * or the XML resource could not be found, null is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void dumpFront(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void dumpBack(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int parcelableFlags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId, int dumpFlags)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "protected ApplicationInfo getApplicationInfo()",
    "returnType" : "ApplicationInfo",
    "comment" : "\n     * Get the ApplicationInfo for the application to which this item belongs,\n     * if available, otherwise returns null.\n     *\n     * @return Returns the ApplicationInfo of this item, or null if not known.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_SAFE_LABEL_LENGTH", "DEFAULT_MAX_LABEL_SIZE_PX", "SAFE_LABEL_FLAG_TRIM", "SAFE_LABEL_FLAG_SINGLE_LINE", "SAFE_LABEL_FLAG_FIRST_LINE", "sForceSafeLabels", "name", "packageName", "labelRes", "nonLocalizedLabel", "icon", "banner", "logo", "metaData", "showUserIcon", "DUMP_FLAG_DETAILS", "DUMP_FLAG_APPLICATION", "DUMP_FLAG_ALL" ],
  "methodNames" : [ "public static void forceSafeLabels()", "public CharSequence loadLabel(@NonNull PackageManager pm)", "public CharSequence loadUnsafeLabel(PackageManager pm)", "public CharSequence loadSafeLabel(@NonNull PackageManager pm)", "public CharSequence loadSafeLabel(@NonNull PackageManager pm, @FloatRange(from = 0) float ellipsizeDip, @TextUtils.SafeStringFlags int flags)", "public Drawable loadIcon(PackageManager pm)", "public Drawable loadUnbadgedIcon(PackageManager pm)", "public Drawable loadBanner(PackageManager pm)", "public Drawable loadDefaultIcon(PackageManager pm)", "protected Drawable loadDefaultBanner(PackageManager pm)", "public Drawable loadLogo(PackageManager pm)", "protected Drawable loadDefaultLogo(PackageManager pm)", "public XmlResourceParser loadXmlMetaData(PackageManager pm, String name)", "protected void dumpFront(Printer pw, String prefix)", "protected void dumpBack(Printer pw, String prefix)", "public void writeToParcel(Parcel dest, int parcelableFlags)", "public void dumpDebug(ProtoOutputStream proto, long fieldId, int dumpFlags)", "protected ApplicationInfo getApplicationInfo()" ]
}