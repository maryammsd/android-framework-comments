{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/nfc/cardemulation/CardEmulation.java",
  "packageName" : "android.nfc.cardemulation",
  "className" : "CardEmulation",
  "comment" : "\n * This class can be used to query the state of\n * NFC card emulation services.\n *\n * For a general introduction into NFC card emulation,\n * please read the <a href=\"{@docRoot}guide/topics/connectivity/nfc/hce.html\">\n * NFC card emulation developer guide</a>.</p>\n *\n * <p class=\"note\">Use of this class requires the\n * {@link PackageManager#FEATURE_NFC_HOST_CARD_EMULATION} to be present\n * on the device.\n ",
  "links" : [ "android.content.pm.PackageManager#FEATURE_NFC_HOST_CARD_EMULATION" ],
  "variables" : [ {
    "name" : "AID_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PLPF_PATTERN",
    "type" : "Pattern",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CHANGE_DEFAULT",
    "type" : "String",
    "comment" : "\n     * Activity action: ask the user to change the default\n     * card emulation service for a certain category. This will\n     * show a dialog that asks the user whether they want to\n     * replace the current default service with the service\n     * identified with the ComponentName specified in\n     * {@link #EXTRA_SERVICE_COMPONENT}, for the category\n     * specified in {@link #EXTRA_CATEGORY}. There is an optional\n     * extra field using {@link Intent#EXTRA_USER} to specify\n     * the {@link UserHandle} of the user that owns the app.\n     *\n     * @deprecated Please use {@link android.app.role.RoleManager#createRequestRoleIntent(String)}\n     * with {@link android.app.role.RoleManager#ROLE_WALLET} parameter\n     * and {@link Activity#startActivityForResult(Intent, int)} instead.\n     ",
    "links" : [ "#EXTRA_CATEGORY", "android.app.Activity#startActivityForResult(Intent", "android.os.UserHandle", "android.app.role.RoleManager#createRequestRoleIntent(String)", "android.content.Intent#EXTRA_USER", "android.app.role.RoleManager#ROLE_WALLET", "#EXTRA_SERVICE_COMPONENT" ]
  }, {
    "name" : "EXTRA_CATEGORY",
    "type" : "String",
    "comment" : "\n     * The category extra for {@link #ACTION_CHANGE_DEFAULT}.\n     *\n     * @see #ACTION_CHANGE_DEFAULT\n     ",
    "links" : [ "#ACTION_CHANGE_DEFAULT" ]
  }, {
    "name" : "EXTRA_SERVICE_COMPONENT",
    "type" : "String",
    "comment" : "\n     * The service {@link ComponentName} object passed in as an\n     * extra for {@link #ACTION_CHANGE_DEFAULT}.\n     *\n     * @see #ACTION_CHANGE_DEFAULT\n     ",
    "links" : [ "android.content.ComponentName", "#ACTION_CHANGE_DEFAULT" ]
  }, {
    "name" : "CATEGORY_PAYMENT",
    "type" : "String",
    "comment" : "\n     * Category used for NFC payment services.\n     ",
    "links" : [ ]
  }, {
    "name" : "CATEGORY_OTHER",
    "type" : "String",
    "comment" : "\n     * Category that can be used for all other card emulation\n     * services.\n     ",
    "links" : [ ]
  }, {
    "name" : "SELECTION_MODE_PREFER_DEFAULT",
    "type" : "int",
    "comment" : "\n     * Return value for {@link #getSelectionModeForCategory(String)}.\n     *\n     * <p>In this mode, the user has set a default service for this\n     *    category.\n     *\n     * <p>When using ISO-DEP card emulation with {@link HostApduService}\n     *    or {@link OffHostApduService}, if a remote NFC device selects\n     *    any of the Application IDs (AIDs)\n     *    that the default service has registered in this category,\n     *    that service will automatically be bound to to handle\n     *    the transaction.\n     ",
    "links" : [ "#getSelectionModeForCategory(String)", "android.nfc.cardemulation.OffHostApduService", "android.nfc.cardemulation.HostApduService" ]
  }, {
    "name" : "SELECTION_MODE_ALWAYS_ASK",
    "type" : "int",
    "comment" : "\n     * Return value for {@link #getSelectionModeForCategory(String)}.\n     *\n     * <p>In this mode, when using ISO-DEP card emulation with {@link HostApduService}\n     *    or {@link OffHostApduService}, whenever an Application ID (AID) of this category\n     *    is selected, the user is asked which service they want to use to handle\n     *    the transaction, even if there is only one matching service.\n     ",
    "links" : [ "#getSelectionModeForCategory(String)", "android.nfc.cardemulation.OffHostApduService", "android.nfc.cardemulation.HostApduService" ]
  }, {
    "name" : "SELECTION_MODE_ASK_IF_CONFLICT",
    "type" : "int",
    "comment" : "\n     * Return value for {@link #getSelectionModeForCategory(String)}.\n     *\n     * <p>In this mode, when using ISO-DEP card emulation with {@link HostApduService}\n     *    or {@link OffHostApduService}, the user will only be asked to select a service\n     *    if the Application ID (AID) selected by the reader has been registered by multiple\n     *    services. If there is only one service that has registered for the AID,\n     *    that service will be invoked directly.\n     ",
    "links" : [ "#getSelectionModeForCategory(String)", "android.nfc.cardemulation.OffHostApduService", "android.nfc.cardemulation.HostApduService" ]
  }, {
    "name" : "sIsInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sCardEmus",
    "type" : "HashMap<Context, CardEmulation>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "INfcCardEmulation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static synchronized CardEmulation getInstance(NfcAdapter adapter)",
    "returnType" : "CardEmulation",
    "comment" : "\n     * Helper to get an instance of this class.\n     *\n     * @param adapter A reference to an NfcAdapter object.\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefaultServiceForCategory(ComponentName service, String category)",
    "returnType" : "boolean",
    "comment" : "\n     * Allows an application to query whether a service is currently\n     * the default service to handle a card emulation category.\n     *\n     * <p>Note that if {@link #getSelectionModeForCategory(String)}\n     * returns {@link #SELECTION_MODE_ALWAYS_ASK} or {@link #SELECTION_MODE_ASK_IF_CONFLICT},\n     * this method will always return false. That is because in these\n     * selection modes a default can't be set at the category level. For categories where\n     * the selection mode is {@link #SELECTION_MODE_ALWAYS_ASK} or\n     * {@link #SELECTION_MODE_ASK_IF_CONFLICT}, use\n     * {@link #isDefaultServiceForAid(ComponentName, String)} to determine whether a service\n     * is the default for a specific AID.\n     *\n     * @param service The ComponentName of the service\n     * @param category The category\n     * @return whether service is currently the default service for the category.\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     ",
    "links" : [ "android.Manifest.permission#NFC", "#getSelectionModeForCategory(String)", "#SELECTION_MODE_ASK_IF_CONFLICT", "#SELECTION_MODE_ALWAYS_ASK", "#isDefaultServiceForAid(ComponentName" ]
  }, {
    "name" : "public boolean isDefaultServiceForAid(ComponentName service, String aid)",
    "returnType" : "boolean",
    "comment" : "\n     *\n     * Allows an application to query whether a service is currently\n     * the default handler for a specified ISO7816-4 Application ID.\n     *\n     * @param service The ComponentName of the service\n     * @param aid The ISO7816-4 Application ID\n     * @return whether the service is the default handler for the specified AID\n     *\n     * <p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.\n     ",
    "links" : [ "android.Manifest.permission#NFC" ]
  }, {
    "name" : "public boolean categoryAllowsForegroundPreference(String category)",
    "returnType" : "boolean",
    "comment" : "\n     * <p>\n     * Returns whether the user has allowed AIDs registered in the\n     * specified category to be handled by a service that is preferred\n     * by the foreground application, instead of by a pre-configured default.\n     *\n     * Foreground applications can set such preferences using the\n     * {@link #setPreferredService(Activity, ComponentName)} method.\n     * <p class=\"note\">\n     * Starting with {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, this method will always\n     * return true.\n     *\n     * @param category The category, e.g. {@link #CATEGORY_PAYMENT}\n     * @return whether AIDs in the category can be handled by a service\n     *         specified by the foreground app.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "#setPreferredService(Activity", "#CATEGORY_PAYMENT" ]
  }, {
    "name" : "public int getSelectionModeForCategory(String category)",
    "returnType" : "int",
    "comment" : "\n     * Returns the service selection mode for the passed in category.\n     * Valid return values are:\n     * <p>{@link #SELECTION_MODE_PREFER_DEFAULT} the user has requested a default\n     *    service for this category, which will be preferred.\n     * <p>{@link #SELECTION_MODE_ALWAYS_ASK} the user has requested to be asked\n     *    every time what service they would like to use in this category.\n     * <p>{@link #SELECTION_MODE_ASK_IF_CONFLICT} the user will only be asked\n     *    to pick a service if there is a conflict.\n     *\n     * <p class=\"note\">\n     * Starting with {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, the default service defined\n     * by the holder of {@link android.app.role.RoleManager#ROLE_WALLET} and is category agnostic.\n     *\n     * @param category The category, for example {@link #CATEGORY_PAYMENT}\n     * @return the selection mode for the passed in category\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "#SELECTION_MODE_ASK_IF_CONFLICT", "#SELECTION_MODE_ALWAYS_ASK", "#SELECTION_MODE_PREFER_DEFAULT", "#CATEGORY_PAYMENT", "android.app.role.RoleManager#ROLE_WALLET" ]
  }, {
    "name" : "public boolean setShouldDefaultToObserveModeForService(@NonNull ComponentName service, boolean enable)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets whether when this service becomes the preferred service, if the NFC stack\n     * should enable observe mode or disable observe mode. The default is to not enable observe\n     * mode when a service either the foreground default service or the default payment service so\n     * not calling this method will preserve that behavior.\n     *\n     * @param service The component name of the service\n     * @param enable Whether the service should default to observe mode or not\n     * @return whether the change was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean registerPollingLoopFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopFilter, boolean autoTransact)",
    "returnType" : "boolean",
    "comment" : "\n     * Register a polling loop filter (PLF) for a HostApduService and indicate whether it should\n     * auto-transact or not.  The PLF can be sequence of an\n     * even number of at least 2 hexadecimal numbers (0-9, A-F or a-f), representing a series of\n     * bytes. When non-standard polling loop frame matches this sequence exactly, it may be\n     * delivered to {@link HostApduService#processPollingFrames(List)}.  If auto-transact\n     * is set to true and this service is currently preferred or there are no other services\n     * registered for this filter then observe mode will also be disabled.\n     * @param service The HostApduService to register the filter for\n     * @param pollingLoopFilter The filter to register\n     * @param autoTransact true to have the NFC stack automatically disable observe mode and allow\n     *         transactions to proceed when this filter matches, false otherwise\n     * @return true if the filter was registered, false otherwise\n     * @throws IllegalArgumentException if the passed in string doesn't parse to at least one byte\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)" ]
  }, {
    "name" : "public boolean removePollingLoopFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister a polling loop filter (PLF) for a HostApduService. If the PLF had previously been\n     * registered via {@link #registerPollingLoopFilterForService(ComponentName, String, boolean)}\n     * for this service it will be removed.\n     * @param service The HostApduService to unregister the filter for\n     * @param pollingLoopFilter The filter to unregister\n     * @return true if the filter was removed, false otherwise\n     * @throws IllegalArgumentException if the passed in string doesn't parse to at least one byte\n     ",
    "links" : [ "#registerPollingLoopFilterForService(ComponentName" ]
  }, {
    "name" : "public boolean registerPollingLoopPatternFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopPatternFilter, boolean autoTransact)",
    "returnType" : "boolean",
    "comment" : "\n     * Register a polling loop pattern filter (PLPF) for a HostApduService and indicate whether it\n     * should auto-transact or not. The pattern may include the characters 0-9 and A-F as well as\n     * the regular expression operators `.`, `?` and `*`. When the beginning of anon-standard\n     * polling loop frame matches this sequence exactly, it may be delivered to\n     * {@link HostApduService#processPollingFrames(List)}. If auto-transact is set to true and this\n     * service is currently preferred or there are no other services registered for this filter\n     * then observe mode will also be disabled.\n     * @param service The HostApduService to register the filter for\n     * @param pollingLoopPatternFilter The pattern filter to register, must to be compatible with\n     *         {@link java.util.regex.Pattern#compile(String)} and only contain hexadecimal numbers\n     *         and `.`, `?` and `*` operators\n     * @param autoTransact true to have the NFC stack automatically disable observe mode and allow\n     *         transactions to proceed when this filter matches, false otherwise\n     * @return true if the filter was registered, false otherwise\n     * @throws IllegalArgumentException if the filter containst elements other than hexadecimal\n     *         numbers and `.`, `?` and `*` operators\n     * @throws java.util.regex.PatternSyntaxException if the regex syntax is invalid\n     ",
    "links" : [ "android.nfc.cardemulation.HostApduService#processPollingFrames(List)", "java.util.regex.Pattern#compile(String)" ]
  }, {
    "name" : "public boolean removePollingLoopPatternFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopPatternFilter)",
    "returnType" : "boolean",
    "comment" : "\n     * Unregister a polling loop pattern filter (PLPF) for a HostApduService. If the PLF had\n     * previously been registered via\n     * {@link #registerPollingLoopFilterForService(ComponentName, String, boolean)} for this\n     * service it will be removed.\n     * @param service The HostApduService to unregister the filter for\n     * @param pollingLoopPatternFilter The filter to unregister, must to be compatible with\n     *         {@link java.util.regex.Pattern#compile(String)} and only contain hexadecimal numbers\n     *         and`.`, `?` and `*` operators\n     * @return true if the filter was removed, false otherwise\n     * @throws IllegalArgumentException if the filter containst elements other than hexadecimal\n     *         numbers and `.`, `?` and `*` operators\n     * @throws java.util.regex.PatternSyntaxException if the regex syntax is invalid\n     ",
    "links" : [ "java.util.regex.Pattern#compile(String)", "#registerPollingLoopFilterForService(ComponentName" ]
  }, {
    "name" : "public boolean registerAidsForService(ComponentName service, String category, List<String> aids)",
    "returnType" : "boolean",
    "comment" : "\n     * Registers a list of AIDs for a specific category for the\n     * specified service.\n     *\n     * <p>If a list of AIDs for that category was previously\n     * registered for this service (either statically\n     * through the manifest, or dynamically by using this API),\n     * that list of AIDs will be replaced with this one.\n     *\n     * <p>Note that you can only register AIDs for a service that\n     * is running under the same UID as the caller of this API. Typically\n     * this means you need to call this from the same\n     * package as the service itself, though UIDs can also\n     * be shared between packages using shared UIDs.\n     *\n     * @param service The component name of the service\n     * @param category The category of AIDs to be registered\n     * @param aids A list containing the AIDs to be registered\n     * @return whether the registration was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unsetOffHostForService(@NonNull ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * Unsets the off-host Secure Element for the given service.\n     *\n     * <p>Note that this will only remove Secure Element that was dynamically\n     * set using the {@link #setOffHostForService(ComponentName, String)}\n     * and resets it to a value that was statically assigned using manifest.\n     *\n     * <p>Note that you can only unset off-host SE for a service that\n     * is running under the same UID as the caller of this API. Typically\n     * this means you need to call this from the same\n     * package as the service itself, though UIDs can also\n     * be shared between packages using shared UIDs.\n     *\n     * @param service The component name of the service\n     * @return whether the registration was successful.\n     ",
    "links" : [ "#setOffHostForService(ComponentName" ]
  }, {
    "name" : "public boolean setOffHostForService(@NonNull ComponentName service, @NonNull String offHostSecureElement)",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the off-host Secure Element for the given service.\n     *\n     * <p>If off-host SE was initially set (either statically\n     * through the manifest, or dynamically by using this API),\n     * it will be replaced with this one. All AIDs registered by\n     * this service will be re-routed to this Secure Element if\n     * successful. AIDs that was statically assigned using manifest\n     * will re-route to off-host SE that stated in manifest after NFC\n     * toggle.\n     *\n     * <p>Note that you can only set off-host SE for a service that\n     * is running under the same UID as the caller of this API. Typically\n     * this means you need to call this from the same\n     * package as the service itself, though UIDs can also\n     * be shared between packages using shared UIDs.\n     *\n     * <p>Registeration will be successful only if the Secure Element\n     * exists on the device.\n     *\n     * @param service The component name of the service\n     * @param offHostSecureElement Secure Element to register the AID to. Only accept strings with\n     *                             prefix SIM or prefix eSE.\n     *                             Ref: GSMA TS.26 - NFC Handset Requirements\n     *                             TS26_NFC_REQ_069: For UICC, Secure Element Name SHALL be\n     *                                               SIM[smartcard slot]\n     *                                               (e.g. SIM/SIM1, SIM2… SIMn).\n     *                             TS26_NFC_REQ_070: For embedded SE, Secure Element Name SHALL be\n     *                                               eSE[number]\n     *                                               (e.g. eSE/eSE1, eSE2, etc.).\n     * @return whether the registration was successful.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAidsForService(ComponentName service, String category)",
    "returnType" : "List<String>",
    "comment" : "\n     * Retrieves the currently registered AIDs for the specified\n     * category for a service.\n     *\n     * <p>Note that this will only return AIDs that were dynamically\n     * registered using {@link #registerAidsForService(ComponentName, String, List)}\n     * method. It will *not* return AIDs that were statically registered\n     * in the manifest.\n     *\n     * @param service The component name of the service\n     * @param category The category for which the AIDs were registered,\n     *                 e.g. {@link #CATEGORY_PAYMENT}\n     * @return The list of AIDs registered for this category, or null if it couldn't be found.\n     ",
    "links" : [ "#registerAidsForService(ComponentName", "#CATEGORY_PAYMENT" ]
  }, {
    "name" : "public boolean removeAidsForService(ComponentName service, String category)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a previously registered list of AIDs for the specified category for the\n     * service provided.\n     *\n     * <p>Note that this will only remove AIDs that were dynamically\n     * registered using the {@link #registerAidsForService(ComponentName, String, List)}\n     * method. It will *not* remove AIDs that were statically registered in\n     * the manifest. If dynamically registered AIDs are removed using\n     * this method, and a statically registered AID group for the same category\n     * exists in the manifest, the static AID group will become active again.\n     *\n     * @param service The component name of the service\n     * @param category The category of the AIDs to be removed, e.g. {@link #CATEGORY_PAYMENT}\n     * @return whether the group was successfully removed.\n     ",
    "links" : [ "#registerAidsForService(ComponentName", "#CATEGORY_PAYMENT" ]
  }, {
    "name" : "public boolean setPreferredService(Activity activity, ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * Allows a foreground application to specify which card emulation service\n     * should be preferred while a specific Activity is in the foreground.\n     *\n     * <p>The specified Activity must currently be in resumed state. A good\n     * paradigm is to call this method in your {@link Activity#onResume}, and to call\n     * {@link #unsetPreferredService(Activity)} in your {@link Activity#onPause}.\n     *\n     * <p>This method call will fail in two specific scenarios:\n     * <ul>\n     * <li> If the service registers one or more AIDs in the {@link #CATEGORY_PAYMENT}\n     * category, but the user has indicated that foreground apps are not allowed\n     * to override the default payment service.\n     * <li> If the service registers one or more AIDs in the {@link #CATEGORY_OTHER}\n     * category that are also handled by the default payment service, and the\n     * user has indicated that foreground apps are not allowed to override the\n     * default payment service.\n     * </ul>\n     *\n     * <p> Use {@link #categoryAllowsForegroundPreference(String)} to determine\n     * whether foreground apps can override the default payment service.\n     *\n     * <p>Note that this preference is not persisted by the OS, and hence must be\n     * called every time the Activity is resumed.\n     *\n     * @param activity The activity which prefers this service to be invoked\n     * @param service The service to be preferred while this activity is in the foreground\n     * @return whether the registration was successful\n     ",
    "links" : [ "#CATEGORY_OTHER", "#categoryAllowsForegroundPreference(String)", "android.app.Activity#onPause", "android.app.Activity#onResume", "#CATEGORY_PAYMENT", "#unsetPreferredService(Activity)" ]
  }, {
    "name" : "public boolean unsetPreferredService(Activity activity)",
    "returnType" : "boolean",
    "comment" : "\n     * Unsets the preferred service for the specified Activity.\n     *\n     * <p>Note that the specified Activity must still be in resumed\n     * state at the time of this call. A good place to call this method\n     * is in your {@link Activity#onPause} implementation.\n     *\n     * @param activity The activity which the service was registered for\n     * @return true when successful\n     ",
    "links" : [ "android.app.Activity#onPause" ]
  }, {
    "name" : "public boolean supportsAidPrefixRegistration()",
    "returnType" : "boolean",
    "comment" : "\n     * Some devices may allow an application to register all\n     * AIDs that starts with a certain prefix, e.g.\n     * \"A000000004*\" to register all MasterCard AIDs.\n     *\n     * Use this method to determine whether this device\n     * supports registering AID prefixes.\n     *\n     * @return whether AID prefix registering is supported on this device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<String> getAidsForPreferredPaymentService()",
    "returnType" : "List<String>",
    "comment" : "\n     * Retrieves the registered AIDs for the preferred payment service.\n     *\n     * @return The list of AIDs registered for this category, or null if it couldn't be found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getRouteDestinationForPreferredPaymentService()",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the route destination for the preferred payment service.\n     *\n     * <p class=\"note\">\n     * Starting with {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, the preferred payment service\n     * no longer exists and is replaced by {@link android.app.role.RoleManager#ROLE_WALLET}. This\n     * will return the route for one of the services registered by the role holder (if any). If\n     * there are multiple services registered, it is unspecified which of those will be used to\n     * determine the route.\n     *\n     * @return The route destination secure element name of the preferred payment service.\n     *         HCE payment: \"Host\"\n     *         OffHost payment: 1. String with prefix SIM or prefix eSE string.\n     *                             Ref: GSMA TS.26 - NFC Handset Requirements\n     *                             TS26_NFC_REQ_069: For UICC, Secure Element Name SHALL be\n     *                                               SIM[smartcard slot]\n     *                                               (e.g. SIM/SIM1, SIM2… SIMn).\n     *                             TS26_NFC_REQ_070: For embedded SE, Secure Element Name SHALL be\n     *                                               eSE[number]\n     *                                               (e.g. eSE/eSE1, eSE2, etc.).\n     *                          2. \"OffHost\" if the payment service does not specify secure element\n     *                             name.\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.app.role.RoleManager#ROLE_WALLET" ]
  }, {
    "name" : "public CharSequence getDescriptionForPreferredPaymentService()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a user-visible description of the preferred payment service.\n     *\n     * <p class=\"note\">\n     * Starting with {@link Build.VERSION_CODES#VANILLA_ICE_CREAM}, the preferred payment service\n     * no longer exists and is replaced by {@link android.app.role.RoleManager#ROLE_WALLET}. This\n     * will return the description for one of the services registered by the role holder (if any).\n     * If there are multiple services registered, it is unspecified which of those will be used\n     * to obtain the service description here.\n     *\n     * @return the preferred payment service description\n     ",
    "links" : [ "Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.app.role.RoleManager#ROLE_WALLET" ]
  }, {
    "name" : "public boolean setDefaultServiceForCategory(ComponentName service, String category)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDefaultForNextTap(ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setDefaultForNextTap(int userId, ComponentName service)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ApduServiceInfo> getServices(String category)",
    "returnType" : "List<ApduServiceInfo>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ApduServiceInfo> getServices(@NonNull String category, @UserIdInt int userId)",
    "returnType" : "List<ApduServiceInfo>",
    "comment" : "\n     * Retrieves list of services registered of the provided category for the provided user.\n     *\n     * @param category Category string, one of {@link #CATEGORY_PAYMENT} or {@link #CATEGORY_OTHER}\n     * @param userId the user handle of the user whose information is being requested.\n     * @hide\n     ",
    "links" : [ "#CATEGORY_OTHER", "#CATEGORY_PAYMENT" ]
  }, {
    "name" : "public static String validatePollingLoopFilter(@NonNull String pollingLoopFilter)",
    "returnType" : "String",
    "comment" : "\n     * Tests the validity of the polling loop filter.\n     * @param pollingLoopFilter The polling loop filter to test.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String validatePollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter)",
    "returnType" : "String",
    "comment" : "\n     * Tests the validity of the polling loop pattern filter.\n     * @param pollingLoopPatternFilter The polling loop filter to test.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidAid(String aid)",
    "returnType" : "boolean",
    "comment" : "\n     * A valid AID according to ISO/IEC 7816-4:\n     * <ul>\n     * <li>Has >= 5 bytes and <=16 bytes (>=10 hex chars and <= 32 hex chars)\n     * <li>Consist of only hex characters\n     * <li>Additionally, we allow an asterisk at the end, to indicate\n     *     a prefix\n     * <li>Additinally we allow an (#) at symbol at the end, to indicate\n     *     a subset\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setServiceEnabledForCategoryOther(ComponentName service, boolean status, int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Allows to set or unset preferred service (category other) to avoid  AID Collision.\n     *\n     * @param service The ComponentName of the service\n     * @param status  true to enable, false to disable\n     * @param userId the user handle of the user whose information is being requested.\n     * @return set service for the category and true if service is already set return false.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean overrideRoutingTable(Activity activity, String protocol, String technology)",
    "returnType" : "boolean",
    "comment" : "\n      * Setting NFC controller routing table, which includes Protocol Route and Technology Route,\n      * while this Activity is in the foreground.\n      *\n      * The parameter set to null can be used to keep current values for that entry.\n      * <p>\n      * Example usage in an Activity that requires to set proto route to \"ESE\" and keep tech route:\n      * <pre>\n      * protected void onResume() {\n      *     mNfcAdapter.overrideRoutingTable(this , \"ESE\" , null);\n      * }</pre>\n      * </p>\n      * Also activities must call this method when it goes to the background,\n      * with all parameters set to null.\n      * @param activity The Activity that requests NFC controller routing table to be changed.\n      * @param protocol ISO-DEP route destination, which can be \"DH\" or \"UICC\" or \"ESE\".\n      * @param technology Tech-A, Tech-B route destination, which can be \"DH\" or \"UICC\" or \"ESE\".\n      * @return true if operation is successful and false otherwise\n      *\n      * This is a high risk API and only included to support mainline effort\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "public boolean recoverRoutingTable(Activity activity)",
    "returnType" : "boolean",
    "comment" : "\n     * Restore the NFC controller routing table,\n     * which was changed by {@link #overrideRoutingTable(Activity, String, String)}\n     *\n     * @param activity The Activity that requested NFC controller routing table to be changed.\n     * @return true if operation is successful and false otherwise\n     *\n     * @hide\n     ",
    "links" : [ "#overrideRoutingTable(Activity" ]
  }, {
    "name" : " void recoverService()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName getPreferredPaymentService(@NonNull Context context)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Returns the value of {@link Settings.Secure#NFC_PAYMENT_DEFAULT_COMPONENT}.\n     *\n     * @param context A context\n     * @return A ComponentName for the setting value, or null.\n     *\n     * @hide\n     ",
    "links" : [ "Settings.Secure#NFC_PAYMENT_DEFAULT_COMPONENT" ]
  } ],
  "methodNames" : [ "public static synchronized CardEmulation getInstance(NfcAdapter adapter)", "public boolean isDefaultServiceForCategory(ComponentName service, String category)", "public boolean isDefaultServiceForAid(ComponentName service, String aid)", "public boolean categoryAllowsForegroundPreference(String category)", "public int getSelectionModeForCategory(String category)", "public boolean setShouldDefaultToObserveModeForService(@NonNull ComponentName service, boolean enable)", "public boolean registerPollingLoopFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopFilter, boolean autoTransact)", "public boolean removePollingLoopFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopFilter)", "public boolean registerPollingLoopPatternFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopPatternFilter, boolean autoTransact)", "public boolean removePollingLoopPatternFilterForService(@NonNull ComponentName service, @NonNull String pollingLoopPatternFilter)", "public boolean registerAidsForService(ComponentName service, String category, List<String> aids)", "public boolean unsetOffHostForService(@NonNull ComponentName service)", "public boolean setOffHostForService(@NonNull ComponentName service, @NonNull String offHostSecureElement)", "public List<String> getAidsForService(ComponentName service, String category)", "public boolean removeAidsForService(ComponentName service, String category)", "public boolean setPreferredService(Activity activity, ComponentName service)", "public boolean unsetPreferredService(Activity activity)", "public boolean supportsAidPrefixRegistration()", "public List<String> getAidsForPreferredPaymentService()", "public String getRouteDestinationForPreferredPaymentService()", "public CharSequence getDescriptionForPreferredPaymentService()", "public boolean setDefaultServiceForCategory(ComponentName service, String category)", "public boolean setDefaultForNextTap(ComponentName service)", "public boolean setDefaultForNextTap(int userId, ComponentName service)", "public List<ApduServiceInfo> getServices(String category)", "public List<ApduServiceInfo> getServices(@NonNull String category, @UserIdInt int userId)", "public static String validatePollingLoopFilter(@NonNull String pollingLoopFilter)", "public static String validatePollingLoopPatternFilter(@NonNull String pollingLoopPatternFilter)", "public static boolean isValidAid(String aid)", "public boolean setServiceEnabledForCategoryOther(ComponentName service, boolean status, int userId)", "public boolean overrideRoutingTable(Activity activity, String protocol, String technology)", "public boolean recoverRoutingTable(Activity activity)", " void recoverService()", "public static ComponentName getPreferredPaymentService(@NonNull Context context)" ],
  "variableNames" : [ "AID_PATTERN", "PLPF_PATTERN", "TAG", "ACTION_CHANGE_DEFAULT", "EXTRA_CATEGORY", "EXTRA_SERVICE_COMPONENT", "CATEGORY_PAYMENT", "CATEGORY_OTHER", "SELECTION_MODE_PREFER_DEFAULT", "SELECTION_MODE_ALWAYS_ASK", "SELECTION_MODE_ASK_IF_CONFLICT", "sIsInitialized", "sCardEmus", "sService", "mContext" ]
}