{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Set.java",
  "packageName" : "java.util",
  "className" : "Set",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this set (its cardinality).  If this\n     * set contains more than {@code Integer.MAX_VALUE} elements, returns\n     * {@code Integer.MAX_VALUE}.\n     *\n     * @return the number of elements in this set (its cardinality)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains no elements.\n     *\n     * @return {@code true} if this set contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains the specified element.\n     * More formally, returns {@code true} if and only if this set\n     * contains an element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this set is to be tested\n     * @return {@code true} if this set contains the specified element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this set\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         set does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set.  The elements are\n     * returned in no particular order (unless this set is an instance of some\n     * class that provides a guarantee).\n     *\n     * @return an iterator over the elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : " Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this set.\n     * If this set makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the\n     * elements in the same order.\n     *\n     * <p>The returned array will be \"safe\" in that no references to it\n     * are maintained by this set.  (In other words, this method must\n     * allocate a new array even if this set is backed by an array).\n     * The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all the elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : " T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this set; the\n     * runtime type of the returned array is that of the specified array.\n     * If the set fits in the specified array, it is returned therein.\n     * Otherwise, a new array is allocated with the runtime type of the\n     * specified array and the size of this set.\n     *\n     * <p>If this set fits in the specified array with room to spare\n     * (i.e., the array has more elements than this set), the element in\n     * the array immediately following the end of the set is set to\n     * {@code null}.  (This is useful in determining the length of this\n     * set <i>only</i> if the caller knows that this set does not contain\n     * any null elements.)\n     *\n     * <p>If this set makes any guarantees as to what order its elements\n     * are returned by its iterator, this method must return the elements\n     * in the same order.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a set known to contain only strings.\n     * The following code can be used to dump the set into a newly allocated\n     * array of {@code String}:\n     *\n     * <pre>\n     *     String[] y = x.toArray(new String[0]);</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of this set are to be\n     *        stored, if it is big enough; otherwise, a new array of the same\n     *        runtime type is allocated for this purpose.\n     * @return an array containing all the elements in this set\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in this\n     *         set\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified element to this set if it is not already present\n     * (optional operation).  More formally, adds the specified element\n     * {@code e} to this set if the set contains no element {@code e2}\n     * such that\n     * {@code Objects.equals(e, e2)}.\n     * If this set already contains the element, the call leaves the set\n     * unchanged and returns {@code false}.  In combination with the\n     * restriction on constructors, this ensures that sets never contain\n     * duplicate elements.\n     *\n     * <p>The stipulation above does not imply that sets must accept all\n     * elements; sets may refuse to add any particular element, including\n     * {@code null}, and throw an exception, as described in the\n     * specification for {@link Collection#add Collection.add}.\n     * Individual set implementations should clearly document any\n     * restrictions on the elements that they may contain.\n     *\n     * @param e element to be added to this set\n     * @return {@code true} if this set did not already contain the specified\n     *         element\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this set\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this set\n     * @throws NullPointerException if the specified element is null and this\n     *         set does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified element\n     *         prevents it from being added to this set\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified element from this set if it is present\n     * (optional operation).  More formally, removes an element {@code e}\n     * such that\n     * {@code Objects.equals(o, e)}, if\n     * this set contains such an element.  Returns {@code true} if this set\n     * contained the element (or equivalently, if this set changed as a\n     * result of the call).  (This set will not contain the element once the\n     * call returns.)\n     *\n     * @param o object to be removed from this set, if present\n     * @return {@code true} if this set contained the specified element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this set\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         set does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws UnsupportedOperationException if the {@code remove} operation\n     *         is not supported by this set\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains all of the elements of the\n     * specified collection.  If the specified collection is also a set, this\n     * method returns {@code true} if it is a <i>subset</i> of this set.\n     *\n     * @param  c collection to be checked for containment in this set\n     * @return {@code true} if this set contains all of the elements of the\n     *         specified collection\n     * @throws ClassCastException if the types of one or more elements\n     *         in the specified collection are incompatible with this\n     *         set\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this set does not permit null\n     *         elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see    #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection to this set if\n     * they're not already present (optional operation).  If the specified\n     * collection is also a set, the {@code addAll} operation effectively\n     * modifies this set so that its value is the <i>union</i> of the two\n     * sets.  The behavior of this operation is undefined if the specified\n     * collection is modified while the operation is in progress.\n     *\n     * @param  c collection containing elements to be added to this set\n     * @return {@code true} if this set changed as a result of the call\n     *\n     * @throws UnsupportedOperationException if the {@code addAll} operation\n     *         is not supported by this set\n     * @throws ClassCastException if the class of an element of the\n     *         specified collection prevents it from being added to this set\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this set does not permit null\n     *         elements, or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this set\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this set that are contained in the\n     * specified collection (optional operation).  In other words, removes\n     * from this set all of its elements that are not contained in the\n     * specified collection.  If the specified collection is also a set, this\n     * operation effectively modifies this set so that its value is the\n     * <i>intersection</i> of the two sets.\n     *\n     * @param  c collection containing elements to be retained in this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code retainAll} operation\n     *         is not supported by this set\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this set contains a null element and the\n     *         specified collection does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this set all of its elements that are contained in the\n     * specified collection (optional operation).  If the specified\n     * collection is also a set, this operation effectively modifies this\n     * set so that its value is the <i>asymmetric set difference</i> of\n     * the two sets.\n     *\n     * @param  c collection containing elements to be removed from this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code removeAll} operation\n     *         is not supported by this set\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this set contains a null element and the\n     *         specified collection does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this set (optional operation).\n     * The set will be empty after this call returns.\n     *\n     * @throws UnsupportedOperationException if the {@code clear} method\n     *         is not supported by this set\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this set for equality.  Returns\n     * {@code true} if the specified object is also a set, the two sets\n     * have the same size, and every member of the specified set is\n     * contained in this set (or equivalently, every member of this set is\n     * contained in the specified set).  This definition ensures that the\n     * equals method works properly across different implementations of the\n     * set interface.\n     *\n     * @param o object to be compared for equality with this set\n     * @return {@code true} if the specified object is equal to this set\n     ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this set.  The hash code of a set is\n     * defined to be the sum of the hash codes of the elements in the set,\n     * where the hash code of a {@code null} element is defined to be zero.\n     * This ensures that {@code s1.equals(s2)} implies that\n     * {@code s1.hashCode()==s2.hashCode()} for any two sets {@code s1}\n     * and {@code s2}, as required by the general contract of\n     * {@link Object#hashCode}.\n     *\n     * @return the hash code value for this set\n     * @see Object#equals(Object)\n     * @see Set#equals(Object)\n     ",
    "links" : [ "#hashCode" ]
  }, {
    "name" : " Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a {@code Spliterator} over the elements in this set.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#DISTINCT}.\n     * Implementations should document the reporting of additional\n     * characteristic values.\n     *\n     * @implSpec\n     * The default implementation creates a\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em> spliterator\n     * from the set's {@code Iterator}.  The spliterator inherits the\n     * <em>fail-fast</em> properties of the set's iterator.\n     * <p>\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SIZED}.\n     *\n     * @implNote\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * @return a {@code Spliterator} over the elements in this set\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#DISTINCT", "java.util.Spliterator#SUBSIZED" ]
  }, {
    "name" : " static Set<E> of()",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing zero elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @return an empty {@code Set}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing one element.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the single element\n     * @return a {@code Set} containing the specified element\n     * @throws NullPointerException if the element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing two elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if the elements are duplicates\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing three elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing four elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing five elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing six elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing seven elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing eight elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing nine elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @param e9 the ninth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing ten elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @param e9 the ninth element\n     * @param e10 the tenth element\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static Set<E> of(E... elements)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an unmodifiable set containing an arbitrary number of elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Sets</a> for details.\n     *\n     * @apiNote\n     * This method also accepts a single array as an argument. The element type of\n     * the resulting set will be the component type of the array, and the size of\n     * the set will be equal to the length of the array. To create a set with\n     * a single element that is an array, do the following:\n     *\n     * <pre>{@code\n     *     String[] array = ... ;\n     *     Set<String[]> list = Set.<String[]>of(array);\n     * }</pre>\n     *\n     * This will cause the {@link Set#of(Object) Set.of(E)} method\n     * to be invoked instead.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param elements the elements to be contained in the set\n     * @return a {@code Set} containing the specified elements\n     * @throws IllegalArgumentException if there are any duplicate elements\n     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ "java.util.Set#of(Object)" ]
  }, {
    "name" : " static Set<E> copyOf(Collection<? extends E> coll)",
    "returnType" : "Set<E>",
    "comment" : "\n     * Returns an <a href=\"#unmodifiable\">unmodifiable Set</a> containing the elements\n     * of the given Collection. The given Collection must not be null, and it must not\n     * contain any null elements. If the given Collection contains duplicate elements,\n     * an arbitrary element of the duplicates is preserved. If the given Collection is\n     * subsequently modified, the returned Set will not reflect such modifications.\n     *\n     * @implNote\n     * If the given Collection is an <a href=\"#unmodifiable\">unmodifiable Set</a>,\n     * calling copyOf will generally not create a copy.\n     *\n     * @param <E> the {@code Set}'s element type\n     * @param coll a {@code Collection} from which elements are drawn, must be non-null\n     * @return a {@code Set} containing the elements of the given {@code Collection}\n     * @throws NullPointerException if coll is null, or if it contains any nulls\n     * @since 10\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int size()", " boolean isEmpty()", " boolean contains(Object o)", " Iterator<E> iterator()", " Object[] toArray()", " T[] toArray(T[] a)", " boolean add(E e)", " boolean remove(Object o)", " boolean containsAll(Collection<?> c)", " boolean addAll(Collection<? extends E> c)", " boolean retainAll(Collection<?> c)", " boolean removeAll(Collection<?> c)", " void clear()", " boolean equals(Object o)", " int hashCode()", " Spliterator<E> spliterator()", " static Set<E> of()", " static Set<E> of(E e1)", " static Set<E> of(E e1, E e2)", " static Set<E> of(E e1, E e2, E e3)", " static Set<E> of(E e1, E e2, E e3, E e4)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)", " static Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)", " static Set<E> of(E... elements)", " static Set<E> copyOf(Collection<? extends E> coll)" ],
  "variableNames" : [ ]
}