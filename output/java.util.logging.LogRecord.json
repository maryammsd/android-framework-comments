{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/logging/LogRecord.java",
  "packageName" : "java.util.logging",
  "className" : "LogRecord",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "globalSequenceNumber",
    "type" : "AtomicLong",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MIN_SEQUENTIAL_THREAD_ID",
    "type" : "int",
    "comment" : "\n     * The default value of threadID will be the current thread's\n     * thread id, for ease of correlation, unless it is greater than\n     * MIN_SEQUENTIAL_THREAD_ID, in which case we try harder to keep\n     * our promise to keep threadIDs unique by avoiding collisions due\n     * to 32-bit wraparound.  Unfortunately, LogRecord.getThreadID()\n     * returns int, while Thread.getId() returns long.\n     ",
    "links" : [ ]
  }, {
    "name" : "nextThreadId",
    "type" : "AtomicInteger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "threadIds",
    "type" : "ThreadLocal<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "level",
    "type" : "Level",
    "comment" : "\n     * @serial Logging message level\n     ",
    "links" : [ ]
  }, {
    "name" : "sequenceNumber",
    "type" : "long",
    "comment" : "\n     * @serial Sequence number\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceClassName",
    "type" : "String",
    "comment" : "\n     * @serial Class that issued logging call\n     ",
    "links" : [ ]
  }, {
    "name" : "sourceMethodName",
    "type" : "String",
    "comment" : "\n     * @serial Method that issued logging call\n     ",
    "links" : [ ]
  }, {
    "name" : "message",
    "type" : "String",
    "comment" : "\n     * @serial Non-localized raw message text\n     ",
    "links" : [ ]
  }, {
    "name" : "threadID",
    "type" : "int",
    "comment" : "\n     * @serial Thread ID for thread that issued logging call.\n     ",
    "links" : [ ]
  }, {
    "name" : "millis",
    "type" : "long",
    "comment" : "\n     * @serial Event time in milliseconds since 1970\n     ",
    "links" : [ ]
  }, {
    "name" : "thrown",
    "type" : "Throwable",
    "comment" : "\n     * @serial The Throwable (if any) associated with log message\n     ",
    "links" : [ ]
  }, {
    "name" : "loggerName",
    "type" : "String",
    "comment" : "\n     * @serial Name of the source Logger.\n     ",
    "links" : [ ]
  }, {
    "name" : "resourceBundleName",
    "type" : "String",
    "comment" : "\n     * @serial Resource bundle name to localized log message.\n     ",
    "links" : [ ]
  }, {
    "name" : "needToInferCaller",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parameters",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "resourceBundle",
    "type" : "ResourceBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private int defaultThreadID()",
    "returnType" : "int",
    "comment" : "\n     * Returns the default value for a new LogRecord's threadID.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getLoggerName()",
    "returnType" : "String",
    "comment" : "\n     * Get the source Logger's name.\n     *\n     * @return source logger name (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLoggerName(String name)",
    "returnType" : "void",
    "comment" : "\n     * Set the source Logger's name.\n     *\n     * @param name   the source logger name (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ResourceBundle getResourceBundle()",
    "returnType" : "ResourceBundle",
    "comment" : "\n     * Get the localization resource bundle\n     * <p>\n     * This is the ResourceBundle that should be used to localize\n     * the message string before formatting it.  The result may\n     * be null if the message is not localizable, or if no suitable\n     * ResourceBundle is available.\n     * @return the localization resource bundle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResourceBundle(ResourceBundle bundle)",
    "returnType" : "void",
    "comment" : "\n     * Set the localization resource bundle.\n     *\n     * @param bundle  localization bundle (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getResourceBundleName()",
    "returnType" : "String",
    "comment" : "\n     * Get the localization resource bundle name\n     * <p>\n     * This is the name for the ResourceBundle that should be\n     * used to localize the message string before formatting it.\n     * The result may be null if the message is not localizable.\n     * @return the localization resource bundle name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setResourceBundleName(String name)",
    "returnType" : "void",
    "comment" : "\n     * Set the localization resource bundle name.\n     *\n     * @param name  localization bundle name (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Level getLevel()",
    "returnType" : "Level",
    "comment" : "\n     * Get the logging message level, for example Level.SEVERE.\n     * @return the logging message level\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLevel(Level level)",
    "returnType" : "void",
    "comment" : "\n     * Set the logging message level, for example Level.SEVERE.\n     * @param level the logging message level\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSequenceNumber()",
    "returnType" : "long",
    "comment" : "\n     * Get the sequence number.\n     * <p>\n     * Sequence numbers are normally assigned in the LogRecord\n     * constructor, which assigns unique sequence numbers to\n     * each new LogRecord in increasing order.\n     * @return the sequence number\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSequenceNumber(long seq)",
    "returnType" : "void",
    "comment" : "\n     * Set the sequence number.\n     * <p>\n     * Sequence numbers are normally assigned in the LogRecord constructor,\n     * so it should not normally be necessary to use this method.\n     * @param seq the sequence number\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSourceClassName()",
    "returnType" : "String",
    "comment" : "\n     * Get the  name of the class that (allegedly) issued the logging request.\n     * <p>\n     * Note that this sourceClassName is not verified and may be spoofed.\n     * This information may either have been provided as part of the\n     * logging call, or it may have been inferred automatically by the\n     * logging framework.  In the latter case, the information may only\n     * be approximate and may in fact describe an earlier call on the\n     * stack frame.\n     * <p>\n     * May be null if no information could be obtained.\n     *\n     * @return the source class name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceClassName(String sourceClassName)",
    "returnType" : "void",
    "comment" : "\n     * Set the name of the class that (allegedly) issued the logging request.\n     *\n     * @param sourceClassName the source class name (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSourceMethodName()",
    "returnType" : "String",
    "comment" : "\n     * Get the  name of the method that (allegedly) issued the logging request.\n     * <p>\n     * Note that this sourceMethodName is not verified and may be spoofed.\n     * This information may either have been provided as part of the\n     * logging call, or it may have been inferred automatically by the\n     * logging framework.  In the latter case, the information may only\n     * be approximate and may in fact describe an earlier call on the\n     * stack frame.\n     * <p>\n     * May be null if no information could be obtained.\n     *\n     * @return the source method name\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceMethodName(String sourceMethodName)",
    "returnType" : "void",
    "comment" : "\n     * Set the name of the method that (allegedly) issued the logging request.\n     *\n     * @param sourceMethodName the source method name (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getMessage()",
    "returnType" : "String",
    "comment" : "\n     * Get the \"raw\" log message, before localization or formatting.\n     * <p>\n     * May be null, which is equivalent to the empty string \"\".\n     * <p>\n     * This message may be either the final text or a localization key.\n     * <p>\n     * During formatting, if the source logger has a localization\n     * ResourceBundle and if that ResourceBundle has an entry for\n     * this message string, then the message string is replaced\n     * with the localized value.\n     *\n     * @return the raw message string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMessage(String message)",
    "returnType" : "void",
    "comment" : "\n     * Set the \"raw\" log message, before localization or formatting.\n     *\n     * @param message the raw message string (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] getParameters()",
    "returnType" : "Object[]",
    "comment" : "\n     * Get the parameters to the log message.\n     *\n     * @return the log message parameters.  May be null if\n     *                  there are no parameters.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameters(Object[] parameters)",
    "returnType" : "void",
    "comment" : "\n     * Set the parameters to the log message.\n     *\n     * @param parameters the log message parameters. (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getThreadID()",
    "returnType" : "int",
    "comment" : "\n     * Get an identifier for the thread where the message originated.\n     * <p>\n     * This is a thread identifier within the Java VM and may or\n     * may not map to any operating system ID.\n     *\n     * @return thread ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThreadID(int threadID)",
    "returnType" : "void",
    "comment" : "\n     * Set an identifier for the thread where the message originated.\n     * @param threadID  the thread ID\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMillis()",
    "returnType" : "long",
    "comment" : "\n     * Get event time in milliseconds since 1970.\n     *\n     * @return event time in millis since 1970\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMillis(long millis)",
    "returnType" : "void",
    "comment" : "\n     * Set event time.\n     *\n     * @param millis event time in millis since 1970\n     ",
    "links" : [ ]
  }, {
    "name" : "public Throwable getThrown()",
    "returnType" : "Throwable",
    "comment" : "\n     * Get any throwable associated with the log record.\n     * <p>\n     * If the event involved an exception, this will be the\n     * exception object. Otherwise null.\n     *\n     * @return a throwable\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setThrown(Throwable thrown)",
    "returnType" : "void",
    "comment" : "\n     * Set a throwable associated with the log event.\n     *\n     * @param thrown  a throwable (may be null)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream out) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * @serialData Default fields, followed by a two byte version number\n     * (major byte, followed by minor byte), followed by information on\n     * the log record parameter array.  If there is no parameter array,\n     * then -1 is written.  If there is a parameter array (possible of zero\n     * length) then the array length is written as an integer, followed\n     * by String values for each parameter.  If a parameter is null, then\n     * a null String is written.  Otherwise the output of Object.toString()\n     * is written.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void inferCaller()",
    "returnType" : "void",
    "comment" : " Private method to infer the caller's class and method names",
    "links" : [ ]
  }, {
    "name" : "private boolean isLoggerImplFrame(String cname)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private int defaultThreadID()", "public String getLoggerName()", "public void setLoggerName(String name)", "public ResourceBundle getResourceBundle()", "public void setResourceBundle(ResourceBundle bundle)", "public String getResourceBundleName()", "public void setResourceBundleName(String name)", "public Level getLevel()", "public void setLevel(Level level)", "public long getSequenceNumber()", "public void setSequenceNumber(long seq)", "public String getSourceClassName()", "public void setSourceClassName(String sourceClassName)", "public String getSourceMethodName()", "public void setSourceMethodName(String sourceMethodName)", "public String getMessage()", "public void setMessage(String message)", "public Object[] getParameters()", "public void setParameters(Object[] parameters)", "public int getThreadID()", "public void setThreadID(int threadID)", "public long getMillis()", "public void setMillis(long millis)", "public Throwable getThrown()", "public void setThrown(Throwable thrown)", "private void writeObject(ObjectOutputStream out) throws IOException", "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException", "private void inferCaller()", "private boolean isLoggerImplFrame(String cname)" ],
  "variableNames" : [ "globalSequenceNumber", "MIN_SEQUENTIAL_THREAD_ID", "nextThreadId", "threadIds", "level", "sequenceNumber", "sourceClassName", "sourceMethodName", "message", "threadID", "millis", "thrown", "loggerName", "resourceBundleName", "needToInferCaller", "parameters", "resourceBundle", "serialVersionUID" ]
}