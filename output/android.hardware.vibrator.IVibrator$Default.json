{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/vibrator/IVibrator.java",
  "packageName" : "android.hardware.vibrator",
  "className" : "Default",
  "comment" : " Default implementation for IVibrator. ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int getCapabilities() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void off() throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void on(int timeoutMs, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int perform(int effect, byte strength, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedEffects() throws android.os.RemoteException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAmplitude(float amplitude) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setExternalControl(boolean enabled) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompositionDelayMax() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getCompositionSizeMax() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedPrimitives() throws android.os.RemoteException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPrimitiveDuration(int primitive) throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void compose(android.hardware.vibrator.CompositeEffect[] composite, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedAlwaysOnEffects() throws android.os.RemoteException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void alwaysOnEnable(int id, int effect, byte strength) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void alwaysOnDisable(int id) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getResonantFrequency() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getQFactor() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getFrequencyResolution() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float getFrequencyMinimum() throws android.os.RemoteException",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public float[] getBandwidthAmplitudeMap() throws android.os.RemoteException",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPwlePrimitiveDurationMax() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getPwleCompositionSizeMax() throws android.os.RemoteException",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int[] getSupportedBraking() throws android.os.RemoteException",
    "returnType" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void composePwle(android.hardware.vibrator.PrimitivePwle[] composite, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getInterfaceVersion()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getInterfaceHash()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public android.os.IBinder asBinder()",
    "returnType" : "android.os.IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getCapabilities() throws android.os.RemoteException", "public void off() throws android.os.RemoteException", "public void on(int timeoutMs, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException", "public int perform(int effect, byte strength, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException", "public int[] getSupportedEffects() throws android.os.RemoteException", "public void setAmplitude(float amplitude) throws android.os.RemoteException", "public void setExternalControl(boolean enabled) throws android.os.RemoteException", "public int getCompositionDelayMax() throws android.os.RemoteException", "public int getCompositionSizeMax() throws android.os.RemoteException", "public int[] getSupportedPrimitives() throws android.os.RemoteException", "public int getPrimitiveDuration(int primitive) throws android.os.RemoteException", "public void compose(android.hardware.vibrator.CompositeEffect[] composite, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException", "public int[] getSupportedAlwaysOnEffects() throws android.os.RemoteException", "public void alwaysOnEnable(int id, int effect, byte strength) throws android.os.RemoteException", "public void alwaysOnDisable(int id) throws android.os.RemoteException", "public float getResonantFrequency() throws android.os.RemoteException", "public float getQFactor() throws android.os.RemoteException", "public float getFrequencyResolution() throws android.os.RemoteException", "public float getFrequencyMinimum() throws android.os.RemoteException", "public float[] getBandwidthAmplitudeMap() throws android.os.RemoteException", "public int getPwlePrimitiveDurationMax() throws android.os.RemoteException", "public int getPwleCompositionSizeMax() throws android.os.RemoteException", "public int[] getSupportedBraking() throws android.os.RemoteException", "public void composePwle(android.hardware.vibrator.PrimitivePwle[] composite, android.hardware.vibrator.IVibratorCallback callback) throws android.os.RemoteException", "public int getInterfaceVersion()", "public String getInterfaceHash()", "public android.os.IBinder asBinder()" ],
  "variableNames" : [ ]
}