{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/channels/spi/AbstractSelector.java",
  "packageName" : "java.nio.channels.spi",
  "className" : "AbstractSelector",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "selectorOpen",
    "type" : "AtomicBoolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "SelectorProvider",
    "comment" : " The provider that created this selector",
    "links" : [ ]
  }, {
    "name" : "cancelledKeys",
    "type" : "Set<SelectionKey>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "interruptor",
    "type" : "Interruptible",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void cancel(SelectionKey k)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this selector.\n     *\n     * <p> If the selector has already been closed then this method returns\n     * immediately.  Otherwise it marks the selector as closed and then invokes\n     * the {@link #implCloseSelector implCloseSelector} method in order to\n     * complete the close operation.  </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs\n     ",
    "links" : [ "#implCloseSelector" ]
  }, {
    "name" : "protected abstract void implCloseSelector() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this selector.\n     *\n     * <p> This method is invoked by the {@link #close close} method in order\n     * to perform the actual work of closing the selector.  This method is only\n     * invoked if the selector has not yet been closed, and it is never invoked\n     * more than once.\n     *\n     * <p> An implementation of this method must arrange for any other thread\n     * that is blocked in a selection operation upon this selector to return\n     * immediately as if by invoking the {@link\n     * java.nio.channels.Selector#wakeup wakeup} method. </p>\n     *\n     * @throws  IOException\n     *          If an I/O error occurs while closing the selector\n     ",
    "links" : [ "java.nio.channels.Selector#wakeup", "#close" ]
  }, {
    "name" : "public final boolean isOpen()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final SelectorProvider provider()",
    "returnType" : "SelectorProvider",
    "comment" : "\n     * Returns the provider that created this channel.\n     *\n     * @return  The provider that created this channel\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final Set<SelectionKey> cancelledKeys()",
    "returnType" : "Set<SelectionKey>",
    "comment" : "\n     * Retrieves this selector's cancelled-key set.\n     *\n     * <p> This set should only be used while synchronized upon it.  </p>\n     *\n     * @return  The cancelled-key set\n     ",
    "links" : [ ]
  }, {
    "name" : "protected abstract SelectionKey register(AbstractSelectableChannel ch, int ops, Object att)",
    "returnType" : "SelectionKey",
    "comment" : "\n     * Registers the given channel with this selector.\n     *\n     * <p> This method is invoked by a channel's {@link\n     * AbstractSelectableChannel#register register} method in order to perform\n     * the actual work of registering the channel with this selector.  </p>\n     *\n     * @param  ch\n     *         The channel to be registered\n     *\n     * @param  ops\n     *         The initial interest set, which must be valid\n     *\n     * @param  att\n     *         The initial attachment for the resulting key\n     *\n     * @return  A new key representing the registration of the given channel\n     *          with this selector\n     ",
    "links" : [ "java.nio.channels.spi.AbstractSelectableChannel#register" ]
  }, {
    "name" : "protected final void deregister(AbstractSelectionKey key)",
    "returnType" : "void",
    "comment" : "\n     * Removes the given key from its channel's key set.\n     *\n     * <p> This method must be invoked by the selector for each channel that it\n     * deregisters.  </p>\n     *\n     * @param  key\n     *         The selection key to be removed\n     ",
    "links" : [ ]
  }, {
    "name" : "protected final void begin()",
    "returnType" : "void",
    "comment" : "\n     * Marks the beginning of an I/O operation that might block indefinitely.\n     *\n     * <p> This method should be invoked in tandem with the {@link #end end}\n     * method, using a {@code try}&nbsp;...&nbsp;{@code finally} block as\n     * shown <a href=\"#be\">above</a>, in order to implement interruption for\n     * this selector.\n     *\n     * <p> Invoking this method arranges for the selector's {@link\n     * Selector#wakeup wakeup} method to be invoked if a thread's {@link\n     * Thread#interrupt interrupt} method is invoked while the thread is\n     * blocked in an I/O operation upon the selector.  </p>\n     ",
    "links" : [ "#interrupt", "#end", "java.nio.channels.Selector#wakeup" ]
  }, {
    "name" : "protected final void end()",
    "returnType" : "void",
    "comment" : "\n     * Marks the end of an I/O operation that might block indefinitely.\n     *\n     * <p> This method should be invoked in tandem with the {@link #begin begin}\n     * method, using a {@code try}&nbsp;...&nbsp;{@code finally} block as\n     * shown <a href=\"#be\">above</a>, in order to implement interruption for\n     * this selector.  </p>\n     ",
    "links" : [ "#begin" ]
  } ],
  "methodNames" : [ " void cancel(SelectionKey k)", "public final void close() throws IOException", "protected abstract void implCloseSelector() throws IOException", "public final boolean isOpen()", "public final SelectorProvider provider()", "protected final Set<SelectionKey> cancelledKeys()", "protected abstract SelectionKey register(AbstractSelectableChannel ch, int ops, Object att)", "protected final void deregister(AbstractSelectionKey key)", "protected final void begin()", "protected final void end()" ],
  "variableNames" : [ "selectorOpen", "provider", "cancelledKeys", "interruptor" ]
}