{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/xml/validation/Validator.java",
  "packageName" : "javax.xml.validation",
  "className" : "Validator",
  "comment" : "\n * <p>A processor that checks an XML document against {@link Schema}.</p>\n *\n * <p>\n * A validator is a thread-unsafe and non-reentrant object.\n * In other words, it is the application's responsibility to make\n * sure that one {@link Validator} object is not used from\n * more than one thread at any given time, and while the <tt>validate</tt>\n * method is invoked, applications may not recursively call\n * the <tt>validate</tt> method.\n * <p>\n *\n * Note that while the {@link #validate(javax.xml.transform.Source)} and {@link #validate(javax.xml.transform.Source, javax.xml.transform.Result)}\n * methods take a {@link Source} instance, the <code>Source</code>\n * instance must be a <code>SAXSource</code>, <code>DOMSource</code>, <code>StAXSource</code> or <code>StreamSource</code>.\n *\n * @author  <a href=\"mailto:Kohsuke.Kawaguchi@Sun.com\">Kohsuke Kawaguchi</a>\n * @version $Revision: 888884 $, $Date: 2009-12-09 09:36:46 -0800 (Wed, 09 Dec 2009) $\n * @since 1.5\n ",
  "links" : [ "#validate(javax.xml.transform.Source)", "#validate(javax.xml.transform.Source", "javax.xml.validation.Validator", "javax.xml.transform.Source", "javax.xml.validation.Schema" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract void reset()",
    "returnType" : "void",
    "comment" : "\n     * <p>Reset this <code>Validator</code> to its original configuration.</p>\n     *\n     * <p><code>Validator</code> is reset to the same state as when it was created with\n     * {@link Schema#newValidator()}.\n     * <code>reset()</code> is designed to allow the reuse of existing <code>Validator</code>s\n     * thus saving resources associated with the creation of new <code>Validator</code>s.</p>\n     *\n     * <p>The reset <code>Validator</code> is not guaranteed to have the same {@link LSResourceResolver} or {@link ErrorHandler}\n     * <code>Object</code>s, e.g. {@link Object#equals(Object obj)}.  It is guaranteed to have a functionally equal\n     * <code>LSResourceResolver</code> and <code>ErrorHandler</code>.</p>\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "org.w3c.dom.ls.LSResourceResolver", "#equals(Object", "javax.xml.validation.Schema#newValidator()" ]
  }, {
    "name" : "public void validate(Source source) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Validates the specified input.\n     *\n     * <p>\n     * This is just a convenience method of:\n     * <pre>\n     * validate(source,null);\n     * </pre>\n     *\n     * @see #setErrorHandler(ErrorHandler)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void validate(Source source, Result result) throws SAXException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Validates the specified input and send the augmented validation\n     * result to the specified output.\n     *\n     * <p>\n     * This method places the following restrictions on the types of\n     * the {@link Source}/{@link Result} accepted.\n     *\n     * <h4>{@link Source}/{@link Result} accepted:</h4>\n     * <table border=1>\n     * <thead>\n     *  <tr>\n     *   <td></td>\n     *   <td>{@link javax.xml.transform.sax.SAXSource}</td>\n     *   <td>{@link javax.xml.transform.dom.DOMSource}</td>\n     *   <td>{@link javax.xml.transform.stream.StreamSource}</td>\n     *  </tr>\n     * </thead>\n     * <tbody>\n     *  <tr>\n     *   <td><tt>null</tt></td>\n     *   <td>OK</td>\n     *   <td>OK</td>\n     *   <td>OK</td>\n     *   <td>OK</td>\n     *  </tr>\n     *  <tr>\n     *   <td>{@link javax.xml.transform.sax.SAXResult}</td>\n     *   <td>OK</td>\n     *   <td>Err</td>\n     *   <td>Err</td>\n     *   <td>Err</td>\n     *  </tr>\n     *  <tr>\n     *   <td>{@link javax.xml.transform.dom.DOMResult}</td>\n     *   <td>Err</td>\n     *   <td>OK</td>\n     *   <td>Err</td>\n     *   <td>Err</td>\n     *  </tr>\n     *  <tr>\n     *   <td>{@link javax.xml.transform.stream.StreamResult}</td>\n     *   <td>Err</td>\n     *   <td>Err</td>\n     *   <td>Err</td>\n     *   <td>OK</td>\n     *  </tr>\n     * </tbody>\n     * </table>\n     *\n     * <p>\n     * To validate one {@link Source} into another kind of {@link Result}, use the identity transformer\n     * (see {@link javax.xml.transform.TransformerFactory#newTransformer()}).\n     *\n     * <p>\n     * Errors found during the validation is sent to the specified\n     * {@link ErrorHandler}.\n     *\n     * <p>\n     * If a document is valid, or if a document contains some errors\n     * but none of them were fatal and the {@link ErrorHandler} didn't\n     * throw any exception, then the method returns normally.\n     *\n     * @param source\n     *      XML to be validated. Must not be null.\n     *\n     * @param result\n     *      The {@link Result} object that receives (possibly augmented)\n     *      XML. This parameter can be null if the caller is not interested\n     *      in it.\n     *\n     *      Note that when a {@link javax.xml.transform.dom.DOMResult} is used,\n     *      a validator might just pass the same DOM node from\n     *      {@link javax.xml.transform.dom.DOMSource} to\n     *      {@link javax.xml.transform.dom.DOMResult}\n     *      (in which case <tt>source.getNode()==result.getNode()</tt>),\n     *      it might copy the entire DOM tree, or it might alter the\n     *      node given by the source.\n     *\n     * @throws IllegalArgumentException\n     *      If the {@link Result} type doesn't match the {@link Source} type,\n     *      or if the specified source is not a\n     *      {@link javax.xml.transform.sax.SAXSource},\n     *      {@link javax.xml.transform.dom.DOMSource} or\n     *      {@link javax.xml.transform.stream.StreamSource}.\n     *\n     * @throws SAXException\n     *      If the {@link ErrorHandler} throws a {@link SAXException} or\n     *      if a fatal error is found and the {@link ErrorHandler} returns\n     *      normally.\n     *\n     * @throws IOException\n     *      If the validator is processing a\n     *      {@link javax.xml.transform.sax.SAXSource} and the\n     *      underlying {@link org.xml.sax.XMLReader} throws an\n     *      {@link IOException}.\n     *\n     * @throws NullPointerException\n     *      If the <tt>source</tt> parameter is null.\n     *\n     * @see #validate(Source)\n     ",
    "links" : [ "javax.xml.transform.TransformerFactory#newTransformer()", "javax.xml.transform.dom.DOMSource", "javax.xml.transform.stream.StreamSource", "javax.xml.transform.stream.StreamResult", "javax.xml.transform.Result", "java.io.IOException", "javax.xml.transform.Source", "javax.xml.transform.sax.SAXResult", "org.xml.sax.XMLReader", "javax.xml.transform.sax.SAXSource", "org.xml.sax.ErrorHandler", "org.xml.sax.SAXException", "javax.xml.transform.dom.DOMResult" ]
  }, {
    "name" : "public abstract void setErrorHandler(ErrorHandler errorHandler)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link ErrorHandler} to receive errors encountered\n     * during the <code>validate</code> method invocation.\n     *\n     * <p>\n     * Error handler can be used to customize the error handling process\n     * during a validation. When an {@link ErrorHandler} is set,\n     * errors found during the validation will be first sent\n     * to the {@link ErrorHandler}.\n     *\n     * <p>\n     * The error handler can abort further validation immediately\n     * by throwing {@link SAXException} from the handler. Or for example\n     * it can print an error to the screen and try to continue the\n     * validation by returning normally from the {@link ErrorHandler}\n     *\n     * <p>\n     * If any {@link Throwable} is thrown from an {@link ErrorHandler},\n     * the caller of the <code>validate</code> method will be thrown\n     * the same {@link Throwable} object.\n     *\n     * <p>\n     * {@link Validator} is not allowed to\n     * throw {@link SAXException} without first reporting it to\n     * {@link ErrorHandler}.\n     *\n     * <p>\n     * When the {@link ErrorHandler} is null, the implementation will\n     * behave as if the following {@link ErrorHandler} is set:\n     * <pre>\n     * class DraconianErrorHandler implements {@link ErrorHandler} {\n     *     public void fatalError( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {\n     *         throw e;\n     *     }\n     *     public void error( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {\n     *         throw e;\n     *     }\n     *     public void warning( {@link org.xml.sax.SAXParseException} e ) throws {@link SAXException} {\n     *         // noop\n     *     }\n     * }\n     * </pre>\n     *\n     * <p>\n     * When a new {@link Validator} object is created, initially\n     * this field is set to null.\n     *\n     * @param   errorHandler\n     *      A new error handler to be set. This parameter can be null.\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "org.xml.sax.SAXParseException", "org.xml.sax.SAXException", "Throwable", "javax.xml.validation.Validator" ]
  }, {
    "name" : "public abstract ErrorHandler getErrorHandler()",
    "returnType" : "ErrorHandler",
    "comment" : "\n     * Gets the current {@link ErrorHandler} set to this {@link Validator}.\n     *\n     * @return\n     *      This method returns the object that was last set through\n     *      the {@link #setErrorHandler(ErrorHandler)} method, or null\n     *      if that method has never been called since this {@link Validator}\n     *      has created.\n     *\n     * @see #setErrorHandler(ErrorHandler)\n     ",
    "links" : [ "org.xml.sax.ErrorHandler", "#setErrorHandler(ErrorHandler)", "javax.xml.validation.Validator" ]
  }, {
    "name" : "public abstract void setResourceResolver(LSResourceResolver resourceResolver)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link LSResourceResolver} to customize\n     * resource resolution while in a validation episode.\n     *\n     * <p>\n     * {@link Validator} uses a {@link LSResourceResolver}\n     * when it needs to locate external resources while a validation,\n     * although exactly what constitutes \"locating external resources\" is\n     * up to each schema language.\n     *\n     * <p>\n     * When the {@link LSResourceResolver} is null, the implementation will\n     * behave as if the following {@link LSResourceResolver} is set:\n     * <pre>\n     * class DumbLSResourceResolver implements {@link LSResourceResolver} {\n     *     public {@link org.w3c.dom.ls.LSInput} resolveResource(\n     *         String publicId, String systemId, String baseURI) {\n     *\n     *         return null; // always return null\n     *     }\n     * }\n     * </pre>\n     *\n     * <p>\n     * If a {@link LSResourceResolver} throws a {@link RuntimeException}\n     *  (or instances of its derived classes),\n     * then the {@link Validator} will abort the parsing and\n     * the caller of the <code>validate</code> method will receive\n     * the same {@link RuntimeException}.\n     *\n     * <p>\n     * When a new {@link Validator} object is created, initially\n     * this field is set to null.\n     *\n     * @param   resourceResolver\n     *      A new resource resolver to be set. This parameter can be null.\n     ",
    "links" : [ "RuntimeException", "org.w3c.dom.ls.LSResourceResolver", "javax.xml.validation.Validator", "org.w3c.dom.ls.LSInput" ]
  }, {
    "name" : "public abstract LSResourceResolver getResourceResolver()",
    "returnType" : "LSResourceResolver",
    "comment" : "\n     * Gets the current {@link LSResourceResolver} set to this {@link Validator}.\n     *\n     * @return\n     *      This method returns the object that was last set through\n     *      the {@link #setResourceResolver(LSResourceResolver)} method, or null\n     *      if that method has never been called since this {@link Validator}\n     *      has created.\n     *\n     * @see #setErrorHandler(ErrorHandler)\n     ",
    "links" : [ "#setResourceResolver(LSResourceResolver)", "org.w3c.dom.ls.LSResourceResolver", "javax.xml.validation.Validator" ]
  }, {
    "name" : "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "boolean",
    "comment" : "\n     * Look up the value of a feature flag.\n     *\n     * <p>The feature name is any fully-qualified URI.  It is\n     * possible for a {@link Validator} to recognize a feature name but\n     * temporarily be unable to return its value.\n     * Some feature values may be available only in specific\n     * contexts, such as before, during, or after a validation.\n     *\n     * <p>Implementors are free (and encouraged) to invent their own features,\n     * using names built on their own URIs.</p>\n     *\n     * @param name The feature name, which is a non-null fully-qualified URI.\n     * @return The current value of the feature (true or false).\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link Validator} recognizes the feature name but\n     *            cannot determine its value at this time.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     * @see #setFeature(String, boolean)\n     ",
    "links" : [ "javax.xml.validation.Validator" ]
  }, {
    "name" : "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a feature flag.\n     *\n     * <p>\n     * Feature can be used to control the way a {@link Validator}\n     * parses schemas, although {@link Validator}s are not required\n     * to recognize any specific property names.</p>\n     *\n     * <p>The feature name is any fully-qualified URI.  It is\n     * possible for a {@link Validator} to expose a feature value but\n     * to be unable to change the current value.\n     * Some feature values may be immutable or mutable only\n     * in specific contexts, such as before, during, or after\n     * a validation.</p>\n     *\n     * @param name The feature name, which is a non-null fully-qualified URI.\n     * @param value The requested value of the feature (true or false).\n     *\n     * @exception org.xml.sax.SAXNotRecognizedException If the feature\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link Validator} recognizes the feature name but\n     *            cannot set the requested value.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     *\n     * @see #getFeature(String)\n     ",
    "links" : [ "javax.xml.validation.Validator" ]
  }, {
    "name" : "public void setProperty(String name, Object object) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "void",
    "comment" : "\n     * Set the value of a property.\n     *\n     * <p>The property name is any fully-qualified URI.  It is\n     * possible for a {@link Validator} to recognize a property name but\n     * to be unable to change the current value.\n     * Some property values may be immutable or mutable only\n     * in specific contexts, such as before, during, or after\n     * a validation.</p>\n     *\n     * <p>{@link Validator}s are not required to recognize setting\n     * any specific property names.</p>\n     *\n     * @param name The property name, which is a non-null fully-qualified URI.\n     * @param object The requested value for the property.\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            {@link Validator} recognizes the property name but\n     *            cannot set the requested value.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     ",
    "links" : [ "javax.xml.validation.Validator" ]
  }, {
    "name" : "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Look up the value of a property.\n     *\n     * <p>The property name is any fully-qualified URI.  It is\n     * possible for a {@link Validator} to recognize a property name but\n     * temporarily be unable to return its value.\n     * Some property values may be available only in specific\n     * contexts, such as before, during, or after a validation.</p>\n     *\n     * <p>{@link Validator}s are not required to recognize any specific\n     * property names.</p>\n     *\n     * <p>Implementors are free (and encouraged) to invent their own properties,\n     * using names built on their own URIs.</p>\n     *\n     * @param name The property name, which is a non-null fully-qualified URI.\n     * @return The current value of the property.\n     * @exception org.xml.sax.SAXNotRecognizedException If the property\n     *            value can't be assigned or retrieved.\n     * @exception org.xml.sax.SAXNotSupportedException When the\n     *            XMLReader recognizes the property name but\n     *            cannot determine its value at this time.\n     * @throws NullPointerException\n     *          When the name parameter is null.\n     * @see #setProperty(String, Object)\n     ",
    "links" : [ "javax.xml.validation.Validator" ]
  } ],
  "methodNames" : [ "public abstract void reset()", "public void validate(Source source) throws SAXException, IOException", "public abstract void validate(Source source, Result result) throws SAXException, IOException", "public abstract void setErrorHandler(ErrorHandler errorHandler)", "public abstract ErrorHandler getErrorHandler()", "public abstract void setResourceResolver(LSResourceResolver resourceResolver)", "public abstract LSResourceResolver getResourceResolver()", "public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException", "public void setProperty(String name, Object object) throws SAXNotRecognizedException, SAXNotSupportedException", "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException" ],
  "variableNames" : [ ]
}