{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/widget/Adapter.java",
  "packageName" : "android.widget",
  "className" : "Adapter",
  "comment" : "\n * An Adapter object acts as a bridge between an {@link AdapterView} and the\n * underlying data for that view. The Adapter provides access to the data items.\n * The Adapter is also responsible for making a {@link android.view.View} for\n * each item in the data set.\n * \n * @see android.widget.ArrayAdapter\n * @see android.widget.CursorAdapter\n * @see android.widget.SimpleCursorAdapter\n ",
  "links" : [ "android.view.View", "android.widget.AdapterView" ],
  "variables" : [ {
    "name" : "IGNORE_ITEM_VIEW_TYPE",
    "type" : "int",
    "comment" : "\n     * An item view type that causes the {@link AdapterView} to ignore the item\n     * view. For example, this can be used if the client does not want a\n     * particular view to be given for conversion in\n     * {@link #getView(int, View, ViewGroup)}.\n     * \n     * @see #getItemViewType(int)\n     * @see #getViewTypeCount()\n     ",
    "links" : [ "#getView(int", "android.widget.AdapterView" ]
  }, {
    "name" : "NO_SELECTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void registerDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Register an observer that is called when changes happen to the data used by this adapter.\n     *\n     * @param observer the object that gets notified when the data set changes.\n     ",
    "links" : [ ]
  }, {
    "name" : " void unregisterDataSetObserver(DataSetObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an observer that has previously been registered with this\n     * adapter via {@link #registerDataSetObserver}.\n     *\n     * @param observer the object to unregister.\n     ",
    "links" : [ "#registerDataSetObserver" ]
  }, {
    "name" : " int getCount()",
    "returnType" : "int",
    "comment" : "\n     * How many items are in the data set represented by this Adapter.\n     * \n     * @return Count of items.\n     ",
    "links" : [ ]
  }, {
    "name" : " Object getItem(int position)",
    "returnType" : "Object",
    "comment" : "\n     * Get the data item associated with the specified position in the data set.\n     * \n     * @param position Position of the item whose data we want within the adapter's \n     * data set.\n     * @return The data at the specified position.\n     ",
    "links" : [ ]
  }, {
    "name" : " long getItemId(int position)",
    "returnType" : "long",
    "comment" : "\n     * Get the row id associated with the specified position in the list.\n     * \n     * @param position The position of the item within the adapter's data set whose row id we want.\n     * @return The id of the item at the specified position.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean hasStableIds()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the item ids are stable across changes to the\n     * underlying data.\n     * \n     * @return True if the same id always refers to the same object.\n     ",
    "links" : [ ]
  }, {
    "name" : " View getView(int position, View convertView, ViewGroup parent)",
    "returnType" : "View",
    "comment" : "\n     * Get a View that displays the data at the specified position in the data set. You can either\n     * create a View manually or inflate it from an XML layout file. When the View is inflated, the\n     * parent View (GridView, ListView...) will apply default layout parameters unless you use\n     * {@link android.view.LayoutInflater#inflate(int, android.view.ViewGroup, boolean)}\n     * to specify a root view and to prevent attachment to the root.\n     * \n     * @param position The position of the item within the adapter's data set of the item whose view\n     *        we want.\n     * @param convertView The old view to reuse, if possible. Note: You should check that this view\n     *        is non-null and of an appropriate type before using. If it is not possible to convert\n     *        this view to display the correct data, this method can create a new view.\n     *        Heterogeneous lists can specify their number of view types, so that this View is\n     *        always of the right type (see {@link #getViewTypeCount()} and\n     *        {@link #getItemViewType(int)}).\n     * @param parent The parent that this view will eventually be attached to\n     * @return A View corresponding to the data at the specified position.\n     ",
    "links" : [ "#getItemViewType(int)", "android.view.LayoutInflater#inflate(int", "#getViewTypeCount()" ]
  }, {
    "name" : " int getItemViewType(int position)",
    "returnType" : "int",
    "comment" : "\n     * Get the type of View that will be created by {@link #getView} for the specified item.\n     * \n     * @param position The position of the item within the adapter's data set whose view type we\n     *        want.\n     * @return An integer representing the type of View. Two views should share the same type if one\n     *         can be converted to the other in {@link #getView}. Note: Integers must be in the\n     *         range 0 to {@link #getViewTypeCount} - 1. {@link #IGNORE_ITEM_VIEW_TYPE} can\n     *         also be returned.\n     * @see #IGNORE_ITEM_VIEW_TYPE\n     ",
    "links" : [ "#getView", "#IGNORE_ITEM_VIEW_TYPE", "#getViewTypeCount" ]
  }, {
    "name" : " int getViewTypeCount()",
    "returnType" : "int",
    "comment" : "\n     * <p>\n     * Returns the number of types of Views that will be created by\n     * {@link #getView}. Each type represents a set of views that can be\n     * converted in {@link #getView}. If the adapter always returns the same\n     * type of View for all items, this method should return 1.\n     * </p>\n     * <p>\n     * This method will only be called when the adapter is set on the {@link AdapterView}.\n     * </p>\n     * \n     * @return The number of types of Views that will be created by this adapter\n     ",
    "links" : [ "#getView", "android.widget.AdapterView" ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n      * @return true if this adapter doesn't contain any data.  This is used to determine\n      * whether the empty view should be displayed.  A typical implementation will return\n      * getCount() == 0 but since getCount() includes the headers and footers, specialized\n      * adapters might want a different behavior.\n      ",
    "links" : [ ]
  }, {
    "name" : " CharSequence[] getAutofillOptions()",
    "returnType" : "CharSequence[]",
    "comment" : "\n     * Gets a string representation of the adapter data that can help\n     * {@link android.service.autofill.AutofillService} autofill the view backed by the adapter.\n     *\n     * <p>\n     * It should only be set (i.e., non-{@code null} if the values do not represent PII\n     * (Personally Identifiable Information - sensitive data such as email addresses,\n     * credit card numbers, passwords, etc...). For\n     * example, it's ok to return a list of month names, but not a list of usernames. A good rule of\n     * thumb is that if the adapter data comes from static resources, such data is not PII - see\n     * {@link android.view.ViewStructure#setDataIsSensitive(boolean)} for more info.\n     *\n     * @return {@code null} by default, unless implementations override it.\n     ",
    "links" : [ "android.view.ViewStructure#setDataIsSensitive(boolean)", "android.service.autofill.AutofillService" ]
  } ],
  "methodNames" : [ " void registerDataSetObserver(DataSetObserver observer)", " void unregisterDataSetObserver(DataSetObserver observer)", " int getCount()", " Object getItem(int position)", " long getItemId(int position)", " boolean hasStableIds()", " View getView(int position, View convertView, ViewGroup parent)", " int getItemViewType(int position)", " int getViewTypeCount()", " boolean isEmpty()", " CharSequence[] getAutofillOptions()" ],
  "variableNames" : [ "IGNORE_ITEM_VIEW_TYPE", "NO_SELECTION" ]
}