{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/dtm/ref/ExpandedNameTable.java",
  "packageName" : "org.apache.xml.dtm.ref",
  "className" : "ExpandedNameTable",
  "comment" : "\n * This is a default implementation of a table that manages mappings from\n * expanded names to expandedNameIDs.\n *\n * %OPT% The performance of the getExpandedTypeID() method is very important \n * to DTM building. To get the best performance out of this class, we implement\n * a simple hash algorithm directly into this class, instead of using the\n * inefficient java.util.Hashtable. The code for the get and put operations\n * are combined in getExpandedTypeID() method to share the same hash calculation\n * code. We only need to implement the rehash() interface which is used to\n * expand the hash table.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "m_extendedTypes",
    "type" : "ExtendedType[]",
    "comment" : " Array of extended types for this document   ",
    "links" : [ ]
  }, {
    "name" : "m_initialSize",
    "type" : "int",
    "comment" : " The initial size of the m_extendedTypes array ",
    "links" : [ ]
  }, {
    "name" : "m_nextType",
    "type" : "int",
    "comment" : " to the length of m_extendedTypes, do we need this? ",
    "links" : [ ]
  }, {
    "name" : "ELEMENT",
    "type" : "int",
    "comment" : " These are all the types prerotated, for caller convenience.",
    "links" : [ ]
  }, {
    "name" : "ATTRIBUTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TEXT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CDATA_SECTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENTITY_REFERENCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENTITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PROCESSING_INSTRUCTION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "COMMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DOCUMENT_FRAGMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NOTATION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAMESPACE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hashET",
    "type" : "ExtendedType",
    "comment" : " Workspace for lookup. NOT THREAD SAFE!\n   * ",
    "links" : [ ]
  }, {
    "name" : "m_defaultExtendedTypes",
    "type" : "ExtendedType[]",
    "comment" : " The array to store the default extended types. ",
    "links" : [ ]
  }, {
    "name" : "m_loadFactor",
    "type" : "float",
    "comment" : "\n   * The default load factor of the Hashtable.\n   * This is used to calcualte the threshold.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_initialCapacity",
    "type" : "int",
    "comment" : "\n   * The initial capacity of the hash table. Use a bigger number\n   * to avoid the cost of expanding the table.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_capacity",
    "type" : "int",
    "comment" : "\n   * The capacity of the hash table, i.e. the size of the\n   * internal HashEntry array.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_threshold",
    "type" : "int",
    "comment" : " \n   * The threshold of the hash table, which is equal to capacity * loadFactor.\n   * If the number of entries in the hash table is bigger than the threshold,\n   * the hash table needs to be expanded.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_table",
    "type" : "HashEntry[]",
    "comment" : "\n   * The internal array to store the hash entries.\n   * Each array member is a slot for a hash bucket.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initExtendedTypes()",
    "returnType" : "void",
    "comment" : "\n   *  Initialize the vector of extended types with the\n   *  basic DOM node types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExpandedTypeID(String namespace, String localName, int type)",
    "returnType" : "int",
    "comment" : "\n   * Given an expanded name represented by namespace, local name and node type,\n   * return an ID.  If the expanded-name does not exist in the internal tables,\n   * the entry will be created, and the ID will be returned.  Any additional \n   * nodes that are created that have this expanded name will use this ID.\n   *\n   * @param namespace The namespace\n   * @param localName The local name\n   * @param type The node type\n   *\n   * @return the expanded-name id of the node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExpandedTypeID(String namespace, String localName, int type, boolean searchOnly)",
    "returnType" : "int",
    "comment" : "\n   * Given an expanded name represented by namespace, local name and node type,\n   * return an ID.  If the expanded-name does not exist in the internal tables,\n   * the entry will be created, and the ID will be returned.  Any additional \n   * nodes that are created that have this expanded name will use this ID.\n   * <p>\n   * If searchOnly is true, we will return -1 if the name is not found in the \n   * table, otherwise the name is added to the table and the expanded name id\n   * of the new entry is returned.\n   *\n   * @param namespace The namespace\n   * @param localName The local name\n   * @param type The node type\n   * @param searchOnly If it is true, we will only search for the expanded name.\n   * -1 is return is the name is not found.\n   *\n   * @return the expanded-name id of the node.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void rehash()",
    "returnType" : "void",
    "comment" : "\n   * Increases the capacity of and internally reorganizes the hashtable, \n   * in order to accommodate and access its entries more efficiently. \n   * This method is called when the number of keys in the hashtable exceeds\n   * this hashtable's capacity and load factor.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getExpandedTypeID(int type)",
    "returnType" : "int",
    "comment" : "\n   * Given a type, return an expanded name ID.Any additional nodes that are\n   * created that have this expanded name will use this ID.\n   *\n   * @return the expanded-name id of the node.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getLocalName(int ExpandedNameID)",
    "returnType" : "String",
    "comment" : "\n   * Given an expanded-name ID, return the local name part.\n   *\n   * @param ExpandedNameID an ID that represents an expanded-name.\n   * @return String Local name of this node, or null if the node has no name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getLocalNameID(int ExpandedNameID)",
    "returnType" : "int",
    "comment" : "\n   * Given an expanded-name ID, return the local name ID.\n   *\n   * @param ExpandedNameID an ID that represents an expanded-name.\n   * @return The id of this local name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNamespace(int ExpandedNameID)",
    "returnType" : "String",
    "comment" : "\n   * Given an expanded-name ID, return the namespace URI part.\n   *\n   * @param ExpandedNameID an ID that represents an expanded-name.\n   * @return String URI value of this node's namespace, or null if no\n   * namespace was resolved.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getNamespaceID(int ExpandedNameID)",
    "returnType" : "int",
    "comment" : "\n   * Given an expanded-name ID, return the namespace URI ID.\n   *\n   * @param ExpandedNameID an ID that represents an expanded-name.\n   * @return The id of this namespace.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final short getType(int ExpandedNameID)",
    "returnType" : "short",
    "comment" : "\n   * Given an expanded-name ID, return the local name ID.\n   *\n   * @param ExpandedNameID an ID that represents an expanded-name.\n   * @return The id of this local name.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getSize()",
    "returnType" : "int",
    "comment" : "\n   * Return the size of the ExpandedNameTable\n   *\n   * @return The size of the ExpandedNameTable\n   ",
    "links" : [ ]
  }, {
    "name" : "public ExtendedType[] getExtendedTypes()",
    "returnType" : "ExtendedType[]",
    "comment" : "\n   * Return the array of extended types\n   *\n   * @return The array of extended types\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initExtendedTypes()", "public int getExpandedTypeID(String namespace, String localName, int type)", "public int getExpandedTypeID(String namespace, String localName, int type, boolean searchOnly)", "private void rehash()", "public int getExpandedTypeID(int type)", "public String getLocalName(int ExpandedNameID)", "public final int getLocalNameID(int ExpandedNameID)", "public String getNamespace(int ExpandedNameID)", "public final int getNamespaceID(int ExpandedNameID)", "public final short getType(int ExpandedNameID)", "public int getSize()", "public ExtendedType[] getExtendedTypes()" ],
  "variableNames" : [ "m_extendedTypes", "m_initialSize", "m_nextType", "ELEMENT", "ATTRIBUTE", "TEXT", "CDATA_SECTION", "ENTITY_REFERENCE", "ENTITY", "PROCESSING_INSTRUCTION", "COMMENT", "DOCUMENT", "DOCUMENT_TYPE", "DOCUMENT_FRAGMENT", "NOTATION", "NAMESPACE", "hashET", "m_defaultExtendedTypes", "m_loadFactor", "m_initialCapacity", "m_capacity", "m_threshold", "m_table" ]
}