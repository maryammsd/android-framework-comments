{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/le/BluetoothLeScanner.java",
  "packageName" : "android.bluetooth.le",
  "className" : "BluetoothLeScanner",
  "comment" : "\n * This class provides methods to perform scan related operations for Bluetooth LE devices. An\n * application can scan for a particular type of Bluetooth LE devices using {@link ScanFilter}. It\n * can also request different types of callbacks for delivering the result.\n * <p>\n * Use {@link BluetoothAdapter#getBluetoothLeScanner()} to get an instance of\n * {@link BluetoothLeScanner}.\n * <p>\n * <b>Note:</b> Most of the scan methods here require\n * {@link android.Manifest.permission#BLUETOOTH_ADMIN} permission.\n *\n * @see ScanFilter\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LIST_SCAN_RESULT",
    "type" : "String",
    "comment" : "\n     * Extra containing a list of ScanResults. It can have one or more results if there was no\n     * error. In case of error, {@link #EXTRA_ERROR_CODE} will contain the error code and this\n     * extra will not be available.\n     ",
    "links" : [ "#EXTRA_ERROR_CODE" ]
  }, {
    "name" : "EXTRA_ERROR_CODE",
    "type" : "String",
    "comment" : "\n     * Optional extra indicating the error code, if any. The error code will be one of the\n     * SCAN_FAILED_* codes in {@link ScanCallback}.\n     ",
    "links" : [ "ScanCallback" ]
  }, {
    "name" : "EXTRA_CALLBACK_TYPE",
    "type" : "String",
    "comment" : "\n     * Optional extra indicating the callback type, which will be one of\n     * CALLBACK_TYPE_* constants in {@link ScanSettings}.\n     *\n     * @see ScanCallback#onScanResult(int, ScanResult)\n     ",
    "links" : [ "ScanSettings" ]
  }, {
    "name" : "mBluetoothManager",
    "type" : "IBluetoothManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBluetoothAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeScanClients",
    "type" : "Map<ScanCallback, BleScanCallbackWrapper>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOpPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFeatureId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void startScan(final ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE scan with default parameters and no filters. The scan results will be\n     * delivered through {@code callback}. For unfiltered scans, scanning is stopped on screen\n     * off to save power. Scanning is resumed when screen is turned on again. To avoid this, use\n     * {@link #startScan(List, ScanSettings, ScanCallback)} with desired {@link ScanFilter}.\n     * <p>\n     * An app must hold\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission\n     * in order to get results.\n     *\n     * @param callback Callback used to deliver scan results.\n     * @throws IllegalArgumentException If {@code callback} is null.\n     ",
    "links" : [ "#startScan", "ScanFilter", "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION" ]
  }, {
    "name" : "public void startScan(List<ScanFilter> filters, ScanSettings settings, final ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE scan. The scan results will be delivered through {@code callback}.\n     * For unfiltered scans, scanning is stopped on screen off to save power. Scanning is\n     * resumed when screen is turned on again. To avoid this, do filetered scanning by\n     * using proper {@link ScanFilter}.\n     * <p>\n     * An app must hold\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission\n     * in order to get results.\n     *\n     * @param filters {@link ScanFilter}s for finding exact BLE devices.\n     * @param settings Settings for the scan.\n     * @param callback Callback used to deliver scan results.\n     * @throws IllegalArgumentException If {@code settings} or {@code callback} is null.\n     ",
    "links" : [ "ScanFilter", "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION", "ScanFilter" ]
  }, {
    "name" : "public int startScan(@Nullable List<ScanFilter> filters, @Nullable ScanSettings settings, @NonNull PendingIntent callbackIntent)",
    "returnType" : "int",
    "comment" : "\n     * Start Bluetooth LE scan using a {@link PendingIntent}. The scan results will be delivered via\n     * the PendingIntent. Use this method of scanning if your process is not always running and it\n     * should be started when scan results are available.\n     * <p>\n     * An app must hold\n     * {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or\n     * {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission\n     * in order to get results.\n     * <p>\n     * When the PendingIntent is delivered, the Intent passed to the receiver or activity\n     * will contain one or more of the extras {@link #EXTRA_CALLBACK_TYPE},\n     * {@link #EXTRA_ERROR_CODE} and {@link #EXTRA_LIST_SCAN_RESULT} to indicate the result of\n     * the scan.\n     *\n     * @param filters Optional list of ScanFilters for finding exact BLE devices.\n     * @param settings Optional settings for the scan.\n     * @param callbackIntent The PendingIntent to deliver the result to.\n     * @return Returns 0 for success or an error code from {@link ScanCallback} if the scan request\n     * could not be sent.\n     * @see #stopScan(PendingIntent)\n     ",
    "links" : [ "PendingIntent", "android.Manifest.permission#ACCESS_COARSE_LOCATION", "android.Manifest.permission#ACCESS_FINE_LOCATION", "#EXTRA_CALLBACK_TYPE", "#EXTRA_ERROR_CODE", "#EXTRA_LIST_SCAN_RESULT", "ScanCallback" ]
  }, {
    "name" : "public void startScanFromSource(final WorkSource workSource, final ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE scan. Same as {@link #startScan(ScanCallback)} but allows the caller to\n     * specify on behalf of which application(s) the work is being done.\n     *\n     * @param workSource {@link WorkSource} identifying the application(s) for which to blame for\n     * the scan.\n     * @param callback Callback used to deliver scan results.\n     * @hide\n     ",
    "links" : [ "#startScan", "WorkSource" ]
  }, {
    "name" : "public void startScanFromSource(List<ScanFilter> filters, ScanSettings settings, final WorkSource workSource, final ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start Bluetooth LE scan. Same as {@link #startScan(List, ScanSettings, ScanCallback)} but\n     * allows the caller to specify on behalf of which application(s) the work is being done.\n     *\n     * @param filters {@link ScanFilter}s for finding exact BLE devices.\n     * @param settings Settings for the scan.\n     * @param workSource {@link WorkSource} identifying the application(s) for which to blame for\n     * the scan.\n     * @param callback Callback used to deliver scan results.\n     * @hide\n     ",
    "links" : [ "#startScan", "ScanFilter", "WorkSource" ]
  }, {
    "name" : "private int startScan(List<ScanFilter> filters, ScanSettings settings, final WorkSource workSource, final ScanCallback callback, final PendingIntent callbackIntent, List<List<ResultStorageDescriptor>> resultStorages)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void stopScan(ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Stops an ongoing Bluetooth LE scan.\n     *\n     * @param callback\n     ",
    "links" : [ ]
  }, {
    "name" : "public void stopScan(PendingIntent callbackIntent)",
    "returnType" : "void",
    "comment" : "\n     * Stops an ongoing Bluetooth LE scan started using a PendingIntent. When creating the\n     * PendingIntent parameter, please do not use the FLAG_CANCEL_CURRENT flag. Otherwise, the stop\n     * scan may have no effect.\n     *\n     * @param callbackIntent The PendingIntent that was used to start the scan.\n     * @see #startScan(List, ScanSettings, PendingIntent)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flushPendingScanResults(ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Flush pending batch scan results stored in Bluetooth controller. This will return Bluetooth\n     * LE scan results batched on bluetooth controller. Returns immediately, batch scan results data\n     * will be delivered through the {@code callback}.\n     *\n     * @param callback Callback of the Bluetooth LE Scan, it has to be the same instance as the one\n     * used to start scan.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startTruncatedScan(List<TruncatedFilter> truncatedFilters, ScanSettings settings, final ScanCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Start truncated scan.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cleanup()",
    "returnType" : "void",
    "comment" : "\n     * Cleans up scan clients. Should be called when bluetooth is down.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private int postCallbackErrorOrReturn(final ScanCallback callback, final int errorCode)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postCallbackError(final ScanCallback callback, final int errorCode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSettingsConfigAllowedForScan(ScanSettings settings)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSettingsAndFilterComboAllowed(ScanSettings settings, List<ScanFilter> filterList)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isHardwareResourcesAvailableForScan(ScanSettings settings)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "EXTRA_LIST_SCAN_RESULT", "EXTRA_ERROR_CODE", "EXTRA_CALLBACK_TYPE", "mBluetoothManager", "mHandler", "mBluetoothAdapter", "mLeScanClients", "mOpPackageName", "mFeatureId" ],
  "methodNames" : [ "public void startScan(final ScanCallback callback)", "public void startScan(List<ScanFilter> filters, ScanSettings settings, final ScanCallback callback)", "public int startScan(@Nullable List<ScanFilter> filters, @Nullable ScanSettings settings, @NonNull PendingIntent callbackIntent)", "public void startScanFromSource(final WorkSource workSource, final ScanCallback callback)", "public void startScanFromSource(List<ScanFilter> filters, ScanSettings settings, final WorkSource workSource, final ScanCallback callback)", "private int startScan(List<ScanFilter> filters, ScanSettings settings, final WorkSource workSource, final ScanCallback callback, final PendingIntent callbackIntent, List<List<ResultStorageDescriptor>> resultStorages)", "public void stopScan(ScanCallback callback)", "public void stopScan(PendingIntent callbackIntent)", "public void flushPendingScanResults(ScanCallback callback)", "public void startTruncatedScan(List<TruncatedFilter> truncatedFilters, ScanSettings settings, final ScanCallback callback)", "public void cleanup()", "private int postCallbackErrorOrReturn(final ScanCallback callback, final int errorCode)", "private void postCallbackError(final ScanCallback callback, final int errorCode)", "private boolean isSettingsConfigAllowedForScan(ScanSettings settings)", "private boolean isSettingsAndFilterComboAllowed(ScanSettings settings, List<ScanFilter> filterList)", "private boolean isHardwareResourcesAvailableForScan(ScanSettings settings)" ]
}