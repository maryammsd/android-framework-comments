{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/UnionChildIterator.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "UnionChildIterator",
  "comment" : "\n * This class defines a simplified type of union iterator that only \n * tests along the child axes.  If the conditions are right, it is \n * much faster than using a UnionPathIterator.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_nodeTests",
    "type" : "PredicatedNodeTest[]",
    "comment" : "\n   * Even though these may hold full LocPathIterators, this array does \n   * not have to be cloned, since only the node test and predicate \n   * portion are used, and these only need static information.  However, \n   * also note that index predicates can not be used!\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void addNodeTest(PredicatedNodeTest test)",
    "returnType" : "void",
    "comment" : "\n   * Add a node test to the union list.\n   *\n   * @param test reference to a NodeTest, which will be added \n   * directly to the list of node tests (in other words, it will \n   * not be cloned).  The parent of this test will be set to \n   * this object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void fixupVariables(java.util.Vector vars, int globalsSize)",
    "returnType" : "void",
    "comment" : "\n   * This function is used to fixup variables from QNames to stack frame \n   * indexes at stylesheet build time.\n   * @param vars List of QNames that correspond to variables.  This list \n   * should be searched backwards for the first qualified name that \n   * corresponds to the variable reference qname.  The position of the \n   * QName in the vector from the start of the vector will be its position \n   * in the stack frame (but variables above the globalsTop value will need \n   * to be offset to the current stack frame).\n   ",
    "links" : [ ]
  }, {
    "name" : "public short acceptNode(int n)",
    "returnType" : "short",
    "comment" : "\n   * Test whether a specified node is visible in the logical view of a\n   * TreeWalker or NodeIterator. This function will be called by the\n   * implementation of TreeWalker and NodeIterator; it is not intended to\n   * be called directly from user code.\n   * @param n  The node to check to see if it passes the filter or not.\n   * @return  a constant to determine whether the node is accepted,\n   *   rejected, or skipped, as defined  above .\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void addNodeTest(PredicatedNodeTest test)", "public void fixupVariables(java.util.Vector vars, int globalsSize)", "public short acceptNode(int n)" ],
  "variableNames" : [ "serialVersionUID", "m_nodeTests" ]
}