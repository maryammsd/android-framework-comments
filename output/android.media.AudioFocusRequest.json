{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioFocusRequest.java",
  "packageName" : "android.media",
  "className" : "AudioFocusRequest",
  "comment" : "",
  "variables" : [ {
    "name" : "FOCUS_DEFAULT_ATTR",
    "type" : "AudioAttributes",
    "comment" : " default attributes for the request when not specified",
    "links" : [ ]
  }, {
    "name" : "KEY_ACCESSIBILITY_FORCE_FOCUS_DUCKING",
    "type" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mFocusListener",
    "type" : "OnAudioFocusChangeListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListenerHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttr",
    "type" : "AudioAttributes",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusGain",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static final boolean isValidFocusGain(int focusGain)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Checks whether a focus gain constant is a valid value for an audio focus request.\n     * @param focusGain value to check\n     * @return true if focusGain is a valid value for an audio focus request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public OnAudioFocusChangeListener getOnAudioFocusChangeListener()",
    "returnType" : "OnAudioFocusChangeListener",
    "comment" : "\n     * @hide\n     * Returns the focus change listener set for this {@code AudioFocusRequest}.\n     * @return null if no {@link AudioManager.OnAudioFocusChangeListener} was set.\n     ",
    "links" : [ "AudioManager.OnAudioFocusChangeListener" ]
  }, {
    "name" : "public Handler getOnAudioFocusChangeListenerHandler()",
    "returnType" : "Handler",
    "comment" : "\n     * @hide\n     * Returns the {@link Handler} to be used for the focus change listener.\n     * @return the same {@code Handler} set in.\n     *   {@link Builder#setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}, or null\n     *   if no listener was set.\n     ",
    "links" : [ "android.os.Handler", "#setOnAudioFocusChangeListener(OnAudioFocusChangeListener" ]
  }, {
    "name" : "public AudioAttributes getAudioAttributes()",
    "returnType" : "AudioAttributes",
    "comment" : "\n     * Returns the {@link AudioAttributes} set for this {@code AudioFocusRequest}, or the default\n     * attributes if none were set.\n     * @return non-null {@link AudioAttributes}.\n     ",
    "links" : [ "android.media.AudioAttributes" ]
  }, {
    "name" : "public int getFocusGain()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of audio focus request configured for this {@code AudioFocusRequest}.\n     * @return one of {@link AudioManager#AUDIOFOCUS_GAIN},\n     * {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT},\n     * {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, and\n     * {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}.\n     ",
    "links" : [ "android.media.AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK", "android.media.AudioManager#AUDIOFOCUS_GAIN_TRANSIENT", "android.media.AudioManager#AUDIOFOCUS_GAIN", "android.media.AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE" ]
  }, {
    "name" : "public boolean willPauseWhenDucked()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the application that would use this {@code AudioFocusRequest} would pause\n     * when it is requested to duck.\n     * @return the duck/pause behavior.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean acceptsDelayedFocusGain()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the application that would use this {@code AudioFocusRequest} supports\n     * a focus gain granted after a temporary request failure.\n     * @return whether delayed focus gain is supported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean locksFocus()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * Returns whether audio focus will be locked (i.e. focus cannot change) as a result of this\n     * focus request being successful.\n     * @return whether this request will lock focus.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getFlags()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "FOCUS_DEFAULT_ATTR", "KEY_ACCESSIBILITY_FORCE_FOCUS_DUCKING", "mFocusListener", "mListenerHandler", "mAttr", "mFocusGain", "mFlags" ],
  "methodNames" : [ " static final boolean isValidFocusGain(int focusGain)", "public OnAudioFocusChangeListener getOnAudioFocusChangeListener()", "public Handler getOnAudioFocusChangeListenerHandler()", "public AudioAttributes getAudioAttributes()", "public int getFocusGain()", "public boolean willPauseWhenDucked()", "public boolean acceptsDelayedFocusGain()", "public boolean locksFocus()", " int getFlags()" ]
}