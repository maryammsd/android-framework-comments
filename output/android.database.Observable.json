{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/Observable.java",
  "packageName" : "android.database",
  "className" : "Observable",
  "comment" : "\n * Provides methods for registering or unregistering arbitrary observers in an {@link ArrayList}.\n *\n * This abstract class is intended to be subclassed and specialized to maintain\n * a registry of observers of specific types and dispatch notifications to them.\n *\n * @param T The observer type.\n ",
  "links" : [ "java.util.ArrayList" ],
  "variables" : [ {
    "name" : "mObservers",
    "type" : "ArrayList<T>",
    "comment" : "\n     * The list of observers.  An observer can be in the list at most\n     * once and will never be null.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerObserver(T observer)",
    "returnType" : "void",
    "comment" : "\n     * Adds an observer to the list. The observer cannot be null and it must not already\n     * be registered.\n     * @param observer the observer to register\n     * @throws IllegalArgumentException the observer is null\n     * @throws IllegalStateException the observer is already registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterObserver(T observer)",
    "returnType" : "void",
    "comment" : "\n     * Removes a previously registered observer. The observer must not be null and it\n     * must already have been registered.\n     * @param observer the observer to unregister\n     * @throws IllegalArgumentException the observer is null\n     * @throws IllegalStateException the observer is not yet registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterAll()",
    "returnType" : "void",
    "comment" : "\n     * Remove all registered observers.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void registerObserver(T observer)", "public void unregisterObserver(T observer)", "public void unregisterAll()" ],
  "variableNames" : [ "mObservers" ]
}