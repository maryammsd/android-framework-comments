{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/Dictionary.java",
  "packageName" : "java.util",
  "className" : "Dictionary",
  "comment" : "\n * The {@code Dictionary} class is the abstract parent of any\n * class, such as {@code Hashtable}, which maps keys to values.\n * Every key and every value is an object. In any one {@code Dictionary}\n * object, every key is associated with at most one value. Given a\n * {@code Dictionary} and a key, the associated element can be looked up.\n * Any non-{@code null} object can be used as a key and as a value.\n * <p>\n * As a rule, the {@code equals} method should be used by\n * implementations of this class to decide if two keys are the same.\n * <p>\n * <strong>NOTE: This class is obsolete.  New implementations should\n * implement the Map interface, rather than extending this class.</strong>\n *\n * @see     java.util.Map\n * @see     java.lang.Object#equals(java.lang.Object)\n * @see     java.lang.Object#hashCode()\n * @see     java.util.Hashtable\n * @since   1.0\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of entries (distinct keys) in this dictionary.\n     *\n     * @return  the number of keys in this dictionary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Tests if this dictionary maps no keys to value. The general contract\n     * for the {@code isEmpty} method is that the result is true if and only\n     * if this dictionary contains no entries.\n     *\n     * @return  {@code true} if this dictionary maps no keys to values;\n     *          {@code false} otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Enumeration<K> keys()",
    "returnType" : "Enumeration<K>",
    "comment" : "\n     * Returns an enumeration of the keys in this dictionary. The general\n     * contract for the keys method is that an {@code Enumeration} object\n     * is returned that will generate all the keys for which this dictionary\n     * contains entries.\n     *\n     * @return  an enumeration of the keys in this dictionary.\n     * @see     java.util.Dictionary#elements()\n     * @see     java.util.Enumeration\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract Enumeration<V> elements()",
    "returnType" : "Enumeration<V>",
    "comment" : "\n     * Returns an enumeration of the values in this dictionary. The general\n     * contract for the {@code elements} method is that an\n     * {@code Enumeration} is returned that will generate all the elements\n     * contained in entries in this dictionary.\n     *\n     * @return  an enumeration of the values in this dictionary.\n     * @see     java.util.Dictionary#keys()\n     * @see     java.util.Enumeration\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V get(Object key)",
    "returnType" : "V",
    "comment" : "\n     * Returns the value to which the key is mapped in this dictionary.\n     * The general contract for the {@code isEmpty} method is that if this\n     * dictionary contains an entry for the specified key, the associated\n     * value is returned; otherwise, {@code null} is returned.\n     *\n     * @return  the value to which the key is mapped in this dictionary;\n     * @param   key   a key in this dictionary.\n     *          {@code null} if the key is not mapped to any value in\n     *          this dictionary.\n     * @throws    NullPointerException if the {@code key} is {@code null}.\n     * @see     java.util.Dictionary#put(java.lang.Object, java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V put(K key, V value)",
    "returnType" : "V",
    "comment" : "\n     * Maps the specified {@code key} to the specified\n     * {@code value} in this dictionary. Neither the key nor the\n     * value can be {@code null}.\n     * <p>\n     * If this dictionary already contains an entry for the specified\n     * {@code key}, the value already in this dictionary for that\n     * {@code key} is returned, after modifying the entry to contain the\n     *  new element. <p>If this dictionary does not already have an entry\n     *  for the specified {@code key}, an entry is created for the\n     *  specified {@code key} and {@code value}, and {@code null} is\n     *  returned.\n     * <p>\n     * The {@code value} can be retrieved by calling the\n     * {@code get} method with a {@code key} that is equal to\n     * the original {@code key}.\n     *\n     * @param      key     the hashtable key.\n     * @param      value   the value.\n     * @return     the previous value to which the {@code key} was mapped\n     *             in this dictionary, or {@code null} if the key did not\n     *             have a previous mapping.\n     * @throws     NullPointerException  if the {@code key} or\n     *               {@code value} is {@code null}.\n     * @see        java.lang.Object#equals(java.lang.Object)\n     * @see        java.util.Dictionary#get(java.lang.Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract V remove(Object key)",
    "returnType" : "V",
    "comment" : "\n     * Removes the {@code key} (and its corresponding\n     * {@code value}) from this dictionary. This method does nothing\n     * if the {@code key} is not in this dictionary.\n     *\n     * @param   key   the key that needs to be removed.\n     * @return  the value to which the {@code key} had been mapped in this\n     *          dictionary, or {@code null} if the key did not have a\n     *          mapping.\n     * @throws    NullPointerException if {@code key} is {@code null}.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract int size()", "public abstract boolean isEmpty()", "public abstract Enumeration<K> keys()", "public abstract Enumeration<V> elements()", "public abstract V get(Object key)", "public abstract V put(K key, V value)", "public abstract V remove(Object key)" ],
  "variableNames" : [ ]
}