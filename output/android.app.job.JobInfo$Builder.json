{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/job/JobInfo.java",
  "packageName" : "android.app.job",
  "className" : "Builder",
  "comment" : " Builder class for constructing {@link JobInfo} objects. ",
  "links" : [ "android.app.job.JobInfo" ],
  "variables" : [ {
    "name" : "mJobId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mJobService",
    "type" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtras",
    "type" : "PersistableBundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransientExtras",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipData",
    "type" : "ClipData",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipGrantFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBias",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstraintFlags",
    "type" : "int",
    "comment" : " Requirements.",
    "links" : [ ]
  }, {
    "name" : "mNetworkRequest",
    "type" : "NetworkRequest",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkDownloadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNetworkUploadBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinimumNetworkChunkBytes",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentUris",
    "type" : "ArrayList<TriggerContentUri>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentUpdateDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTriggerContentMaxDelay",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPersisted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMinLatencyMillis",
    "type" : "long",
    "comment" : " One-off parameters.",
    "links" : [ ]
  }, {
    "name" : "mMaxExecutionDelayMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPeriodic",
    "type" : "boolean",
    "comment" : " Periodic parameters.",
    "links" : [ ]
  }, {
    "name" : "mHasEarlyConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasLateConstraint",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntervalMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFlexMillis",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInitialBackoffMillis",
    "type" : "long",
    "comment" : " Back-off parameters.",
    "links" : [ ]
  }, {
    "name" : "mBackoffPolicy",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBackoffPolicySet",
    "type" : "boolean",
    "comment" : " Easy way to track whether the client has tried to set a back-off policy. ",
    "links" : [ ]
  }, {
    "name" : "mDebugTags",
    "type" : "ArraySet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTraceTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder addDebugTag(@NonNull String tag)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a debug tag to help track what this job is for. The tags may show in debug dumps\n         * or app metrics. Do not put personally identifiable information (PII) in the tag.\n         * <p>\n         * Tags have the following requirements:\n         * <ul>\n         *   <li>Tags cannot be more than 127 characters.</li>\n         *   <li>\n         *       Since leading and trailing whitespace can lead to hard-to-debug issues,\n         *       tags should not include leading or trailing whitespace.\n         *       All tags will be {@link String#trim() trimmed}.\n         *   </li>\n         *   <li>An empty String (after trimming) is not allowed.</li>\n         *   <li>Should not have personally identifiable information (PII).</li>\n         *   <li>A job cannot have more than 32 tags.</li>\n         * </ul>\n         *\n         * @param tag A debug tag that helps describe what the job is for.\n         * @return This object for method chaining\n         ",
    "links" : [ "#trim()" ]
  }, {
    "name" : "public void addDebugTags(@NonNull Set<String> tags)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder removeDebugTag(@NonNull String tag)",
    "returnType" : "Builder",
    "comment" : "\n         * Remove a tag set via {@link #addDebugTag(String)}.\n         * @param tag The tag to remove\n         * @return This object for method chaining\n         ",
    "links" : [ "#addDebugTag(String)" ]
  }, {
    "name" : "public Builder setBias(int bias)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPriority(@Priority int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicate the priority for this job. The priority set here will be used to sort jobs\n         * for the calling app and apply slightly different policies based on the priority.\n         * The priority will <b>NOT</b> be used as a global sorting value to sort between\n         * different app's jobs. Use this to inform the system about which jobs it should try\n         * to run before other jobs. Giving the same priority to all of your jobs will result\n         * in them all being treated the same. The priorities each have slightly different\n         * behaviors, as noted in their relevant javadoc.\n         *\n         * Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n         * the priority will only affect sorting order within the job's namespace.\n         *\n         * <b>NOTE:</b> Setting all of your jobs to high priority will not be\n         * beneficial to your app and in fact may hurt its performance in the\n         * long run.\n         *\n         * In order to prevent starvation, repeatedly retried jobs (because of failures) will slowly\n         * have their priorities lowered.\n         *\n         * @see JobInfo#getPriority()\n         ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE" ]
  }, {
    "name" : "public Builder setFlags(int flags)",
    "returnType" : "Builder",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Builder setExtras(@NonNull PersistableBundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Set optional extras. This is persisted, so we only allow primitive types.\n         * @param extras Bundle containing extras you want the scheduler to hold on to for you.\n         * @see JobInfo#getExtras()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTransientExtras(@NonNull Bundle extras)",
    "returnType" : "Builder",
    "comment" : "\n         * Set optional transient extras.\n         *\n         * <p>Because setting this property is not compatible with persisted\n         * jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * @param extras Bundle containing extras you want the scheduler to hold on to for you.\n         * @see JobInfo#getTransientExtras()\n         ",
    "links" : [ "android.app.job.JobInfo.Builder#build()", "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public Builder setClipData(@Nullable ClipData clip, int grantFlags)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a {@link ClipData} associated with this Job.\n         *\n         * <p>The main purpose of providing a ClipData is to allow granting of\n         * URI permissions for data associated with the clip.  The exact kind\n         * of permission grant to perform is specified through <var>grantFlags</var>.\n         *\n         * <p>If the ClipData contains items that are Intents, any\n         * grant flags in those Intents will be ignored.  Only flags provided as an argument\n         * to this method are respected, and will be applied to all Uri or\n         * Intent items in the clip (or sub-items of the clip).\n         *\n         * <p>Because setting this property is not compatible with persisted\n         * jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * @param clip The new clip to set.  May be null to clear the current clip.\n         * @param grantFlags The desired permissions to grant for any URIs.  This should be\n         * a combination of {@link android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION},\n         * {@link android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION}, and\n         * {@link android.content.Intent#FLAG_GRANT_PREFIX_URI_PERMISSION}.\n         * @see JobInfo#getClipData()\n         * @see JobInfo#getClipGrantFlags()\n         ",
    "links" : [ "android.content.ClipData", "android.app.job.JobInfo.Builder#build()", "android.content.Intent#FLAG_GRANT_PREFIX_URI_PERMISSION", "android.content.Intent#FLAG_GRANT_READ_URI_PERMISSION", "java.lang.IllegalArgumentException", "android.content.Intent#FLAG_GRANT_WRITE_URI_PERMISSION" ]
  }, {
    "name" : "public Builder setRequiredNetworkType(@NetworkType int networkType)",
    "returnType" : "Builder",
    "comment" : "\n         * Set basic description of the kind of network your job requires. If\n         * you need more precise control over network capabilities, see\n         * {@link #setRequiredNetwork(NetworkRequest)}.\n         * <p>\n         * If your job doesn't need a network connection, you don't need to call\n         * this method, as the default value is {@link #NETWORK_TYPE_NONE}.\n         * <p>\n         * Calling this method defines network as a strict requirement for your\n         * job. If the network requested is not available your job will never\n         * run. See {@link #setOverrideDeadline(long)} to change this behavior.\n         * Calling this method will override any requirements previously defined\n         * by {@link #setRequiredNetwork(NetworkRequest)}; you typically only\n         * want to call one of these methods.\n         *\n         * Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n         * an app must hold the\n         * {@link android.Manifest.permission#ACCESS_NETWORK_STATE} permission to\n         * schedule a job that requires a network.\n         *\n         * <p> Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n         * {@link JobScheduler} may try to shift the execution of jobs requiring\n         * {@link #NETWORK_TYPE_ANY} to when there is access to an un-metered network.\n         *\n         * <p class=\"note\">\n         * When your job executes in\n         * {@link JobService#onStartJob(JobParameters)}, be sure to use the\n         * specific network returned by {@link JobParameters#getNetwork()},\n         * otherwise you'll use the default network which may not meet this\n         * constraint.\n         *\n         * @see #setRequiredNetwork(NetworkRequest)\n         * @see JobInfo#getNetworkType()\n         * @see JobParameters#getNetwork()\n         ",
    "links" : [ "#setOverrideDeadline(long)", "android.Manifest.permission#ACCESS_NETWORK_STATE", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.job.JobScheduler", "android.app.job.JobParameters#getNetwork()", "#setRequiredNetwork(NetworkRequest)", "#NETWORK_TYPE_ANY", "android.app.job.JobService#onStartJob(JobParameters)", "#NETWORK_TYPE_NONE" ]
  }, {
    "name" : "public Builder setRequiredNetwork(@Nullable NetworkRequest networkRequest)",
    "returnType" : "Builder",
    "comment" : "\n         * Set detailed description of the kind of network your job requires.\n         * <p>\n         * If your job doesn't need a network connection, you don't need to call\n         * this method, as the default is {@code null}.\n         * <p>\n         * Calling this method defines network as a strict requirement for your\n         * job. If the network requested is not available your job will never\n         * run. See {@link #setOverrideDeadline(long)} to change this behavior.\n         * Calling this method will override any requirements previously defined\n         * by {@link #setRequiredNetworkType(int)}; you typically only want to\n         * call one of these methods.\n         * <p class=\"note\">\n         * When your job executes in\n         * {@link JobService#onStartJob(JobParameters)}, be sure to use the\n         * specific network returned by {@link JobParameters#getNetwork()},\n         * otherwise you'll use the default network which may not meet this\n         * constraint.\n         *\n         * Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n         * an app must hold the\n         * {@link android.Manifest.permission#ACCESS_NETWORK_STATE} permission to\n         * schedule a job that requires a network.\n         *\n         * @param networkRequest The detailed description of the kind of network\n         *            this job requires, or {@code null} if no specific kind of\n         *            network is required. Defining a {@link NetworkSpecifier}\n         *            is only supported for jobs that aren't persisted.\n         * @see #setRequiredNetworkType(int)\n         * @see JobInfo#getRequiredNetwork()\n         * @see JobParameters#getNetwork()\n         ",
    "links" : [ "#setOverrideDeadline(long)", "android.Manifest.permission#ACCESS_NETWORK_STATE", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#setRequiredNetworkType(int)", "android.app.job.JobParameters#getNetwork()", "android.net.NetworkSpecifier", "android.app.job.JobService#onStartJob(JobParameters)" ]
  }, {
    "name" : "public Builder setEstimatedNetworkBytes(@BytesLong long downloadBytes, @BytesLong long uploadBytes)",
    "returnType" : "Builder",
    "comment" : " TODO(b/255371817): update documentation to reflect how this data will be used",
    "links" : [ ]
  }, {
    "name" : "public Builder setMinimumNetworkChunkBytes(@BytesLong long chunkSizeBytes)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the minimum size of non-resumable network traffic this job requires, in bytes. When\n         * the upload or download can be easily paused and resumed, use this to set the smallest\n         * size that must be transmitted between start and stop events to be considered successful.\n         * If the transfer cannot be paused and resumed, then this should be the sum of the values\n         * provided to {@link JobInfo.Builder#setEstimatedNetworkBytes(long, long)}.\n         *\n         * <p>\n         * Apps are encouraged to provide values that are as accurate as possible since JobScheduler\n         * will try to run the job at a time when at least the minimum chunk can be transmitted to\n         * reduce the amount of repetitive data that's transferred. Jobs that cannot provide\n         * reasonable estimates should use the sentinel value {@link JobInfo#NETWORK_BYTES_UNKNOWN}.\n         *\n         * <p>\n         * The values provided here only reflect the minimum non-resumable traffic that will be\n         * performed by the base job; if you're using {@link JobWorkItem} then\n         * you also need to define the network traffic used by each work item\n         * when constructing them.\n         *\n         * @param chunkSizeBytes The smallest piece of data that cannot be easily paused and\n         *                       resumed, in bytes.\n         * @see JobInfo#getMinimumNetworkChunkBytes()\n         * @see JobWorkItem#JobWorkItem(android.content.Intent, long, long, long)\n         ",
    "links" : [ "JobInfo.Builder#setEstimatedNetworkBytes(long", "android.app.job.JobInfo#NETWORK_BYTES_UNKNOWN", "android.app.job.JobWorkItem" ]
  }, {
    "name" : "public Builder setRequiresCharging(boolean requiresCharging)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device must be charging (or be a\n         * non-battery-powered device connected to permanent power, such as Android TV\n         * devices). This defaults to {@code false}. Setting this to {@code false} <b>DOES NOT</b>\n         * mean the job will only run when the device is not charging.\n         *\n         * <p class=\"note\">For purposes of running jobs, a battery-powered device\n         * \"charging\" is not quite the same as simply being connected to power.  If the\n         * device is so busy that the battery is draining despite a power connection, jobs\n         * with this constraint will <em>not</em> run.  This can happen during some\n         * common use cases such as video chat, particularly if the device is plugged in\n         * to USB rather than to wall power.\n         *\n         * @param requiresCharging Pass {@code true} to require that the device be\n         *     charging in order to run the job.\n         * @see JobInfo#isRequireCharging()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresBatteryNotLow(boolean batteryNotLow)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device's battery level must not be low.\n         * This defaults to false.  If true, the job will only run when the battery level\n         * is not low, which is generally the point where the user is given a \"low battery\"\n         * warning. Setting this to {@code false} <b>DOES NOT</b> mean the job will only run\n         * when the battery is low.\n         *\n         * @param batteryNotLow Whether or not the device's battery level must not be low.\n         * @see JobInfo#isRequireBatteryNotLow()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle)",
    "returnType" : "Builder",
    "comment" : "\n         * When set {@code true}, ensure that this job will not run if the device is in active use.\n         * The default state is {@code false}: that is, the for the job to be runnable even when\n         * someone is interacting with the device. Setting this to {@code false} <b>DOES NOT</b>\n         * mean the job will only run when the device is not idle.\n         *\n         * <p>This state is a loose definition provided by the system. In general, it means that\n         * the device is not currently being used interactively, and has not been in use for some\n         * time. As such, it is a good time to perform resource heavy jobs. Bear in mind that\n         * battery usage will still be attributed to your application, and surfaced to the user in\n         * battery stats.</p>\n         *\n         * <p class=\"note\">Despite the similar naming, this job constraint is <em>not</em>\n         * related to the system's \"device idle\" or \"doze\" states.  This constraint only\n         * determines whether a job is allowed to run while the device is directly in use.\n         *\n         * @param requiresDeviceIdle Pass {@code true} to prevent the job from running\n         *     while the device is being used interactively.\n         * @see JobInfo#isRequireDeviceIdle()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setRequiresStorageNotLow(boolean storageNotLow)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that to run this job, the device's available storage must not be low.\n         * This defaults to false.  If true, the job will only run when the device is not\n         * in a low storage state, which is generally the point where the user is given a\n         * \"low storage\" warning.\n         * @param storageNotLow Whether or not the device's available storage must not be low.\n         * @see JobInfo#isRequireStorageNotLow()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addTriggerContentUri(@NonNull TriggerContentUri uri)",
    "returnType" : "Builder",
    "comment" : "\n         * Add a new content: URI that will be monitored with a\n         * {@link android.database.ContentObserver}, and will cause the job to execute if changed.\n         * If you have any trigger content URIs associated with a job, it will not execute until\n         * there has been a change report for one or more of them.\n         *\n         * <p>Note that trigger URIs can not be used in combination with\n         * {@link #setPeriodic(long)} or {@link #setPersisted(boolean)}.  To continually monitor\n         * for content changes, you need to schedule a new JobInfo using the same job ID and\n         * observing the same URIs in place of calling\n         * {@link JobService#jobFinished(JobParameters, boolean)}. Remember that\n         * {@link JobScheduler#schedule(JobInfo)} stops a running job if it uses the same job ID,\n         * so only call it after you've finished processing the most recent changes (in other words,\n         * call {@link JobScheduler#schedule(JobInfo)} where you would have normally called\n         * {@link JobService#jobFinished(JobParameters, boolean)}.\n         * Following this pattern will ensure you do not lose any content changes: while your\n         * job is running, the system will continue monitoring for content changes, and propagate\n         * any changes it sees over to the next job you schedule, so you do not have to worry\n         * about missing new changes. <b>Scheduling the new job\n         * before or during processing will cause the current job to be stopped (as described in\n         * {@link JobScheduler#schedule(JobInfo)}), meaning the wakelock will be released for the\n         * current job and your app process may be killed since it will no longer be in a valid\n         * component lifecycle.</b>\n         * Since {@link JobScheduler#schedule(JobInfo)} stops the current job, you do not\n         * need to call {@link JobService#jobFinished(JobParameters, boolean)} if you call\n         * {@link JobScheduler#schedule(JobInfo)} using the same job ID as the\n         * currently running job.</p>\n         *\n         * <p>Because setting this property is not compatible with periodic or\n         * persisted jobs, doing so will throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.</p>\n         *\n         * <p>The following example shows how this feature can be used to monitor for changes\n         * in the photos on a device.</p>\n         *\n         * {@sample development/samples/ApiDemos/src/com/example/android/apis/content/PhotosContentJob.java\n         *      job}\n         *\n         * @param uri The content: URI to monitor.\n         * @see JobInfo#getTriggerContentUris()\n         ",
    "links" : [ "android.app.job.JobInfo.Builder#build()", "android.app.job.JobScheduler#schedule(JobInfo)", "android.app.job.JobService#jobFinished(JobParameters", "#setPersisted(boolean)", "java.lang.IllegalArgumentException", "#setPeriodic(long)", "android.database.ContentObserver" ]
  }, {
    "name" : "public Builder setTriggerContentUpdateDelay(long durationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the delay (in milliseconds) from when a content change is detected until\n         * the job is scheduled.  If there are more changes during that time, the delay\n         * will be reset to start at the time of the most recent change.\n         * @param durationMs Delay after most recent content change, in milliseconds.\n         * @see JobInfo#getTriggerContentUpdateDelay()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTriggerContentMaxDelay(long durationMs)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the maximum total delay (in milliseconds) that is allowed from the first\n         * time a content change is detected until the job is scheduled.\n         * @param durationMs Delay after initial content change, in milliseconds.\n         * @see JobInfo#getTriggerContentMaxDelay()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setPeriodic(long intervalMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should recur with the provided interval, not more than once per\n         * period. You have no control over when within this interval this job will be executed,\n         * only the guarantee that it will be executed at most once within this interval, as long\n         * as the constraints are satisfied. If the constraints are not satisfied within this\n         * interval, the job will wait until the constraints are satisfied.\n         * Setting this function on the builder with {@link #setMinimumLatency(long)} or\n         * {@link #setOverrideDeadline(long)} will result in an error.\n         * @param intervalMillis Millisecond interval for which this job will repeat.\n         * @see JobInfo#getIntervalMillis()\n         * @see JobInfo#getFlexMillis()\n         ",
    "links" : [ "#setOverrideDeadline(long)", "#setMinimumLatency(long)" ]
  }, {
    "name" : "public Builder setPeriodic(long intervalMillis, long flexMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should recur with the provided interval and flex. The job can\n         * execute at any time in a window of flex length at the end of the period.\n         * If the constraints are not satisfied within the window,\n         * the job will wait until the constraints are satisfied.\n         * @param intervalMillis Millisecond interval for which this job will repeat. A minimum\n         *                       value of {@link #getMinPeriodMillis()} is enforced.\n         * @param flexMillis Millisecond flex for this job. Flex is clamped to be at least\n         *                   {@link #getMinFlexMillis()} or 5 percent of the period, whichever is\n         *                   higher.\n         * @see JobInfo#getIntervalMillis()\n         * @see JobInfo#getFlexMillis()\n         ",
    "links" : [ "#getMinPeriodMillis()", "#getMinFlexMillis()" ]
  }, {
    "name" : "public Builder setMinimumLatency(long minLatencyMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Specify that this job should be delayed by the provided amount of time. The job may not\n         * run the instant the delay has elapsed. JobScheduler will start the job at an\n         * indeterminate time after the delay has elapsed.\n         * <p>\n         * Because it doesn't make sense setting this property on a periodic job, doing so will\n         * throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.\n         *\n         * Negative latencies also don't make sense for a job and are indicative of an error,\n         * so starting in Android version {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM},\n         * setting a negative deadline will result in\n         * {@link android.app.job.JobInfo.Builder#build()} throwing an\n         * {@link java.lang.IllegalArgumentException}.\n         *\n         * @param minLatencyMillis Milliseconds before which this job will not be considered for\n         *                         execution.\n         * @see JobInfo#getMinLatencyMillis()\n         ",
    "links" : [ "android.app.job.JobInfo.Builder#build()", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "java.lang.IllegalArgumentException" ]
  }, {
    "name" : "public Builder setOverrideDeadline(long maxExecutionDelayMillis)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a deadline after which all other functional requested constraints will be ignored.\n         * After the deadline has passed, the job can run even if other requirements (including\n         * a delay set through {@link #setMinimumLatency(long)}) are not met.\n         * {@link JobParameters#isOverrideDeadlineExpired()} will return {@code true} if the job's\n         * deadline has passed. The job's execution may be delayed beyond the set deadline by\n         * other factors such as Doze mode and system health signals.\n         *\n         * <p>\n         * Because it doesn't make sense setting this property on a periodic job, doing so will\n         * throw an {@link java.lang.IllegalArgumentException} when\n         * {@link android.app.job.JobInfo.Builder#build()} is called.\n         *\n         * <p>\n         * Negative deadlines also don't make sense for a job and are indicative of an error,\n         * so starting in Android version {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM},\n         * setting a negative deadline will result in\n         * {@link android.app.job.JobInfo.Builder#build()} throwing an\n         * {@link java.lang.IllegalArgumentException}.\n         *\n         * <p class=\"note\">\n         * Since a job will run once the deadline has passed regardless of the status of other\n         * constraints, setting a deadline of 0 (or a {@link #setMinimumLatency(long) delay} equal\n         * to the deadline) with other constraints makes those constraints\n         * meaningless when it comes to execution decisions. Since doing so is indicative of an\n         * error in the logic, starting in Android version\n         * {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM}, jobs with extremely short\n         * time windows will fail to build. Time windows are\n         * defined as the time between a job's {@link #setMinimumLatency(long) minimum latency}\n         * and its deadline. If the minimum latency is not set, it is assumed to be 0.\n         *\n         * Work that must happen immediately should use {@link #setExpedited(boolean)} or\n         * {@link #setUserInitiated(boolean)} in the appropriate manner.\n         *\n         * <p>\n         * This API aimed to guarantee execution of the job by the deadline only on Android version\n         * {@link android.os.Build.VERSION_CODES#LOLLIPOP}. That aim and guarantee has not existed\n         * since {@link android.os.Build.VERSION_CODES#M}.\n         *\n         * @see JobInfo#getMaxExecutionDelayMillis()\n         ",
    "links" : [ "android.app.job.JobInfo.Builder#build()", "android.os.Build.VERSION_CODES#LOLLIPOP", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "#setMinimumLatency(long)", "android.app.job.JobParameters#isOverrideDeadlineExpired()", "java.lang.IllegalArgumentException", "#setExpedited(boolean)", "#setUserInitiated(boolean)", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "public Builder setBackoffCriteria(long initialBackoffMillis, @BackoffPolicy int backoffPolicy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set up the back-off/retry policy.\n         * This defaults to some respectable values: {30 seconds, Exponential}. We cap back-off at\n         * 5hrs.\n         * <p>\n         * Note that trying to set a backoff criteria for a job with\n         * {@link #setRequiresDeviceIdle(boolean)} will throw an exception when you call build().\n         * This is because back-off typically does not make sense for these types of jobs. See\n         * {@link android.app.job.JobService#jobFinished(android.app.job.JobParameters, boolean)}\n         * for more description of the return value for the case of a job executing while in idle\n         * mode.\n         * @param initialBackoffMillis Millisecond time interval to wait initially when job has\n         *                             failed.\n         * @see JobInfo#getInitialBackoffMillis()\n         * @see JobInfo#getBackoffPolicy()\n         ",
    "links" : [ "android.app.job.JobService#jobFinished(android.app.job.JobParameters", "#setRequiresDeviceIdle(boolean)" ]
  }, {
    "name" : "public Builder setExpedited(boolean expedited)",
    "returnType" : "Builder",
    "comment" : "\n         * Setting this to true indicates that this job is important and needs to run as soon as\n         * possible with stronger guarantees than regular jobs. These \"expedited\" jobs will:\n         * <ol>\n         *     <li>Run as soon as possible</li>\n         *     <li>Be less restricted during Doze and battery saver</li>\n         *     <li>\n         *         Bypass Doze, app standby, and battery saver network restrictions (if the job\n         *         has a {@link #setRequiredNetwork(NetworkRequest) connectivity constraint})\n         *     </li>\n         *     <li>Be less likely to be killed than regular jobs</li>\n         *     <li>Be subject to background location throttling</li>\n         *     <li>Be exempt from delay to optimize job execution</li>\n         * </ol>\n         *\n         * <p>\n         * Expedited jobs are given {@link #PRIORITY_MAX} by default.\n         *\n         * <p>\n         * Since these jobs have stronger guarantees than regular jobs, they will be subject to\n         * stricter quotas. As long as an app has available expedited quota, jobs scheduled with\n         * this set to true will run with these guarantees. If an app has run out of available\n         * expedited quota, any pending expedited jobs will run as regular jobs.\n         * {@link JobParameters#isExpeditedJob()} can be used to know whether the executing job\n         * has expedited guarantees or not. In addition, {@link JobScheduler#schedule(JobInfo)}\n         * will immediately return {@link JobScheduler#RESULT_FAILURE} if the app does not have\n         * available quota (and the job will not be successfully scheduled).\n         *\n         * <p>\n         * Expedited job quota will replenish over time and as the user interacts with the app,\n         * so you should not have to worry about running out of quota because of processing from\n         * frequent user engagement.\n         *\n         * <p>\n         * Expedited jobs may only set network, storage-not-low, and persistence constraints.\n         * No other constraints are allowed.\n         *\n         * <p>\n         * Assuming all constraints remain satisfied (including ideal system load conditions),\n         * expedited jobs can have an execution time of at least 1 minute. If your\n         * app has remaining expedited job quota, then the expedited job <i>may</i> potentially run\n         * longer until remaining quota is used up. Just like with regular jobs, quota is not\n         * consumed while the app is on top and visible to the user.\n         *\n         * <p class=\"note\">\n         * Note: Even though expedited jobs are meant to run as soon as possible, they may be\n         * deferred if the system is under heavy load or requested constraints are not satisfied.\n         * This delay may be true for expedited jobs of the foreground app on Android version\n         * {@link Build.VERSION_CODES#S}, but starting from Android version\n         * {@link Build.VERSION_CODES#TIRAMISU}, expedited jobs for the foreground app are\n         * guaranteed to be started before {@link JobScheduler#schedule(JobInfo)} returns (assuming\n         * all requested constraints are satisfied), similar to foreground services.\n         *\n         * @see JobInfo#isExpedited()\n         ",
    "links" : [ "android.app.job.JobParameters#isExpeditedJob()", "#PRIORITY_MAX", "android.app.job.JobScheduler#schedule(JobInfo)", "Build.VERSION_CODES#S", "Build.VERSION_CODES#TIRAMISU", "#setRequiredNetwork(NetworkRequest)", "android.app.job.JobScheduler#RESULT_FAILURE" ]
  }, {
    "name" : "public Builder setUserInitiated(boolean userInitiated)",
    "returnType" : "Builder",
    "comment" : "\n         * Indicates that this job is being scheduled to fulfill an explicit user request.\n         * As such, user-initiated jobs can only be scheduled when the app is in the foreground\n         * or in a state where launching an activity is allowed, as defined\n         * <a href=\n         * \"https://developer.android.com/guide/components/activities/background-starts#exceptions\">\n         * here</a>. Attempting to schedule one outside of these conditions will return a\n         * {@link JobScheduler#RESULT_FAILURE}.\n         *\n         * <p>\n         * This should <b>NOT</b> be used for automatic features.\n         *\n         * <p>\n         * All user-initiated jobs must have an associated notification, set via\n         * {@link JobService#setNotification(JobParameters, int, Notification, int)}, and will be\n         * shown in the Task Manager when running. These jobs cannot be rescheduled by the app\n         * if the user stops the job via system provided affordance (such as the Task Manager).\n         * Thus, it is best practice and recommended to provide action buttons in the\n         * associated notification to allow the user to stop the job gracefully\n         * and allow for rescheduling.\n         *\n         * <p>\n         * If the app doesn't hold the {@link android.Manifest.permission#RUN_USER_INITIATED_JOBS}\n         * permission when scheduling a user-initiated job, JobScheduler will throw a\n         * {@link SecurityException}.\n         *\n         * <p>\n         * In {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, user-initiated jobs can only\n         * be used for network data transfers. As such, they must specify a required network via\n         * {@link #setRequiredNetwork(NetworkRequest)} or {@link #setRequiredNetworkType(int)}.\n         *\n         * <p>\n         * These jobs will not be subject to quotas and will be started immediately once scheduled\n         * if all constraints are met and the device system health allows for additional tasks.\n         * They are also given {@link #PRIORITY_MAX} by default, and the priority cannot be changed.\n         *\n         * @see JobInfo#isUserInitiated()\n         ",
    "links" : [ "#PRIORITY_MAX", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#setRequiredNetworkType(int)", "#setRequiredNetwork(NetworkRequest)", "SecurityException", "android.app.job.JobScheduler#RESULT_FAILURE", "android.app.job.JobService#setNotification(JobParameters", "android.Manifest.permission#RUN_USER_INITIATED_JOBS" ]
  }, {
    "name" : "public Builder setImportantWhileForeground(boolean importantWhileForeground)",
    "returnType" : "Builder",
    "comment" : "\n         * Setting this to true indicates that this job is important while the scheduling app\n         * is in the foreground or on the temporary allowlist for background restrictions.\n         * This means that the system will relax doze restrictions on this job during this time.\n         *\n         * Apps should use this flag only for short jobs that are essential for the app to function\n         * properly in the foreground.\n         *\n         * Note that once the scheduling app is no longer allowlisted from background restrictions\n         * and in the background, or the job failed due to unsatisfied constraints,\n         * this job should be expected to behave like other jobs without this flag.\n         *\n         * <p>\n         * Jobs marked as important-while-foreground are given {@link #PRIORITY_HIGH} by default.\n         *\n         * @param importantWhileForeground whether to relax doze restrictions for this job when the\n         *                                 app is in the foreground. False by default.\n         * @see JobInfo#isImportantWhileForeground()\n         * @deprecated Use {@link #setExpedited(boolean)} instead.\n         ",
    "links" : [ "#setExpedited(boolean)", "#PRIORITY_HIGH" ]
  }, {
    "name" : "public Builder setPrefetch(boolean prefetch)",
    "returnType" : "Builder",
    "comment" : "\n         * Setting this to true indicates that this job is designed to prefetch\n         * content that will make a material improvement to the experience of\n         * the specific user of this device. For example, fetching top headlines\n         * of interest to the current user.\n         * <p>\n         * Apps targeting Android version {@link Build.VERSION_CODES#TIRAMISU} or later are\n         * not allowed to have deadlines (set via {@link #setOverrideDeadline(long)} on their\n         * prefetch jobs.\n         * <p>\n         * The system may use this signal to relax the network constraints you\n         * originally requested, such as allowing a\n         * {@link JobInfo#NETWORK_TYPE_UNMETERED} job to run over a metered\n         * network when there is a surplus of metered data available. The system\n         * may also use this signal in combination with end user usage patterns\n         * to ensure data is prefetched before the user launches your app.\n         * @see JobInfo#isPrefetch()\n         ",
    "links" : [ "#setOverrideDeadline(long)", "Build.VERSION_CODES#TIRAMISU", "android.app.job.JobInfo#NETWORK_TYPE_UNMETERED" ]
  }, {
    "name" : "public Builder setPersisted(boolean isPersisted)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether or not to persist this job across device reboots.\n         *\n         * @param isPersisted True to indicate that the job will be written to\n         *            disk and loaded at boot.\n         * @see JobInfo#isPersisted()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTraceTag(@Nullable String traceTag)",
    "returnType" : "Builder",
    "comment" : "\n         * Set a tag that will be used in {@link android.os.Trace traces}.\n         * Since this is a trace tag, it must follow the rules set in\n         * {@link android.os.Trace#beginSection(String)}, such as it cannot be more\n         * than 127 Unicode code units.\n         * Additionally, since leading and trailing whitespace can lead to hard-to-debug issues,\n         * they will be {@link String#trim() trimmed}.\n         * An empty String (after trimming) is not allowed.\n         * @param traceTag The tag to use in traces.\n         * @return This object for method chaining\n         ",
    "links" : [ "android.os.Trace", "#trim()", "android.os.Trace#beginSection(String)" ]
  }, {
    "name" : "public JobInfo build()",
    "returnType" : "JobInfo",
    "comment" : "\n         * @return The job object to hand to the JobScheduler. This object is immutable.\n         ",
    "links" : [ ]
  }, {
    "name" : "public JobInfo build(boolean disallowPrefetchDeadlines, boolean rejectNegativeNetworkEstimates, boolean enforceMinimumTimeWindows, boolean rejectNegativeDelaysAndDeadlines)",
    "returnType" : "JobInfo",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String summarize()",
    "returnType" : "String",
    "comment" : "\n         * @hide\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Builder addDebugTag(@NonNull String tag)", "public void addDebugTags(@NonNull Set<String> tags)", "public Builder removeDebugTag(@NonNull String tag)", "public Builder setBias(int bias)", "public Builder setPriority(@Priority int priority)", "public Builder setFlags(int flags)", "public Builder setExtras(@NonNull PersistableBundle extras)", "public Builder setTransientExtras(@NonNull Bundle extras)", "public Builder setClipData(@Nullable ClipData clip, int grantFlags)", "public Builder setRequiredNetworkType(@NetworkType int networkType)", "public Builder setRequiredNetwork(@Nullable NetworkRequest networkRequest)", "public Builder setEstimatedNetworkBytes(@BytesLong long downloadBytes, @BytesLong long uploadBytes)", "public Builder setMinimumNetworkChunkBytes(@BytesLong long chunkSizeBytes)", "public Builder setRequiresCharging(boolean requiresCharging)", "public Builder setRequiresBatteryNotLow(boolean batteryNotLow)", "public Builder setRequiresDeviceIdle(boolean requiresDeviceIdle)", "public Builder setRequiresStorageNotLow(boolean storageNotLow)", "public Builder addTriggerContentUri(@NonNull TriggerContentUri uri)", "public Builder setTriggerContentUpdateDelay(long durationMs)", "public Builder setTriggerContentMaxDelay(long durationMs)", "public Builder setPeriodic(long intervalMillis)", "public Builder setPeriodic(long intervalMillis, long flexMillis)", "public Builder setMinimumLatency(long minLatencyMillis)", "public Builder setOverrideDeadline(long maxExecutionDelayMillis)", "public Builder setBackoffCriteria(long initialBackoffMillis, @BackoffPolicy int backoffPolicy)", "public Builder setExpedited(boolean expedited)", "public Builder setUserInitiated(boolean userInitiated)", "public Builder setImportantWhileForeground(boolean importantWhileForeground)", "public Builder setPrefetch(boolean prefetch)", "public Builder setPersisted(boolean isPersisted)", "public Builder setTraceTag(@Nullable String traceTag)", "public JobInfo build()", "public JobInfo build(boolean disallowPrefetchDeadlines, boolean rejectNegativeNetworkEstimates, boolean enforceMinimumTimeWindows, boolean rejectNegativeDelaysAndDeadlines)", "public String summarize()" ],
  "variableNames" : [ "mJobId", "mJobService", "mExtras", "mTransientExtras", "mClipData", "mClipGrantFlags", "mBias", "mPriority", "mFlags", "mConstraintFlags", "mNetworkRequest", "mNetworkDownloadBytes", "mNetworkUploadBytes", "mMinimumNetworkChunkBytes", "mTriggerContentUris", "mTriggerContentUpdateDelay", "mTriggerContentMaxDelay", "mIsPersisted", "mMinLatencyMillis", "mMaxExecutionDelayMillis", "mIsPeriodic", "mHasEarlyConstraint", "mHasLateConstraint", "mIntervalMillis", "mFlexMillis", "mInitialBackoffMillis", "mBackoffPolicy", "mBackoffPolicySet", "mDebugTags", "mTraceTag" ]
}