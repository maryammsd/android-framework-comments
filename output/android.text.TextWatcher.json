{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/TextWatcher.java",
  "packageName" : "android.text",
  "className" : "TextWatcher",
  "comment" : "\n * When an object of this type is attached to an Editable, its methods will\n * be called when the text is changed.\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void beforeTextChanged(CharSequence s, int start, int count, int after)",
    "returnType" : "void",
    "comment" : "\n     * This method is called to notify you that, within <code>s</code>,\n     * the <code>count</code> characters beginning at <code>start</code>\n     * are about to be replaced by new text with length <code>after</code>.\n     * It is an error to attempt to make changes to <code>s</code> from\n     * this callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onTextChanged(CharSequence s, int start, int before, int count)",
    "returnType" : "void",
    "comment" : "\n     * This method is called to notify you that, within <code>s</code>,\n     * the <code>count</code> characters beginning at <code>start</code>\n     * have just replaced old text that had length <code>before</code>.\n     * It is an error to attempt to make changes to <code>s</code> from\n     * this callback.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void afterTextChanged(Editable s)",
    "returnType" : "void",
    "comment" : "\n     * This method is called to notify you that, somewhere within\n     * <code>s</code>, the text has been changed.\n     * It is legitimate to make further changes to <code>s</code> from\n     * this callback, but be careful not to get yourself into an infinite\n     * loop, because any changes you make will cause this method to be\n     * called again recursively.\n     * (You are not told where the change took place because other\n     * afterTextChanged() methods may already have made other changes\n     * and invalidated the offsets.  But if you need to know here,\n     * you can use {@link Spannable#setSpan} in {@link #onTextChanged}\n     * to mark your place and then look up from here where the span\n     * ended up.\n     ",
    "links" : [ "#onTextChanged", "android.text.Spannable#setSpan" ]
  } ],
  "methodNames" : [ "public void beforeTextChanged(CharSequence s, int start, int count, int after)", "public void onTextChanged(CharSequence s, int start, int before, int count)", "public void afterTextChanged(Editable s)" ],
  "variableNames" : [ ]
}