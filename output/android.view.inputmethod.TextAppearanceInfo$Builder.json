{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/TextAppearanceInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "Builder",
  "comment" : "\n     * Builder for {@link TextAppearanceInfo}.\n     ",
  "links" : [ "android.view.inputmethod.TextAppearanceInfo" ],
  "variables" : [ {
    "name" : "mTextSize",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextLocales",
    "type" : "LocaleList",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSystemFontFamilyName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextFontWeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllCaps",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowDx",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowDy",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowRadius",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mShadowColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mElegantTextHeight",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackLineSpacing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLetterSpacing",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontFeatureSettings",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontVariationSettings",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineBreakStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineBreakWordStyle",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextScaleX",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHighlightTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHintTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLinkTextColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setTextSize(@Px float textSize)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text size (in pixels) obtained from the current editor.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextLocales(@NonNull LocaleList textLocales)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link LocaleList} of the text.\n         ",
    "links" : [ "android.os.LocaleList" ]
  }, {
    "name" : "public Builder setSystemFontFamilyName(@Nullable String systemFontFamilyName)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the system font family name if the {@link Typeface} of the text is created from a\n         * system font family.\n         *\n         * @see Typeface#getSystemFontFamilyName()\n         ",
    "links" : [ "android.graphics.Typeface" ]
  }, {
    "name" : "public Builder setTextFontWeight(@IntRange(from = FontStyle.FONT_WEIGHT_UNSPECIFIED, to = FontStyle.FONT_WEIGHT_MAX) int textFontWeight)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the weight of the text.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextStyle(@Typeface.Style int textStyle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the style (normal, bold, italic, bold|italic) of the text.\n         *\n         * @see Typeface\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setAllCaps(boolean allCaps)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether the transformation method applied to the current editor  is set to all caps.\n         *\n         * @see TextView#setAllCaps(boolean)\n         * @see TextView#setTransformationMethod(TransformationMethod)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShadowDx(@Px float shadowDx)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the horizontal offset (in pixels) of the text shadow.\n         *\n         * @see Paint#setShadowLayer(float, float, float, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShadowDy(@Px float shadowDy)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the vertical offset (in pixels) of the text shadow.\n         *\n         * @see Paint#setShadowLayer(float, float, float, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShadowRadius(@Px float shadowRadius)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the blur radius (in pixels) of the text shadow.\n         *\n         * @see Paint#setShadowLayer(float, float, float, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setShadowColor(@ColorInt int shadowColor)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the color of the text shadow.\n         *\n         * @see Paint#setShadowLayer(float, float, float, int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setElegantTextHeight(boolean elegantTextHeight)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the elegant height metrics flag. This setting selects font variants that\n         * have not been compacted to fit Latin-based vertical metrics, and also increases\n         * top and bottom bounds to provide more space.\n         *\n         * @see Paint#isElegantTextHeight()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFallbackLineSpacing(boolean fallbackLineSpacing)",
    "returnType" : "Builder",
    "comment" : "\n         * Set whether to expand linespacing based on fallback fonts.\n         *\n         * @see TextView#setFallbackLineSpacing(boolean)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLetterSpacing(float letterSpacing)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text letter-spacing, which determines the spacing between characters.\n         * The value is in 'EM' units. Normally, this value is 0.0.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFontFeatureSettings(@Nullable String fontFeatureSettings)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the font feature settings.\n         *\n         * @see Paint#getFontFeatureSettings()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFontVariationSettings(@Nullable String fontVariationSettings)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the font variation settings. Set {@code null} if no variation is specified.\n         *\n         * @see Paint#getFontVariationSettings()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLineBreakStyle(@LineBreakConfig.LineBreakStyle int lineBreakStyle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line-break strategies for text wrapping.\n         *\n         * @see TextView#setLineBreakStyle(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLineBreakWordStyle(@LineBreakConfig.LineBreakWordStyle int lineBreakWordStyle)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the line-break word strategies for text wrapping.\n         *\n         * @see TextView#setLineBreakWordStyle(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextScaleX(float textScaleX)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the extent by which text should be stretched horizontally.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHighlightTextColor(@ColorInt int highlightTextColor)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the color of the text selection highlight.\n         *\n         * @see TextView#getHighlightColor()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTextColor(@ColorInt int textColor)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current text color of the editor.\n         *\n         * @see TextView#getCurrentTextColor()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setHintTextColor(@ColorInt int hintTextColor)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the current color of the hint text.\n         *\n         * @see TextView#getCurrentHintTextColor()\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setLinkTextColor(@ColorInt int linkTextColor)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the text color used to paint the links in the editor.\n         *\n         * @see TextView#getLinkTextColors()\n         ",
    "links" : [ ]
  }, {
    "name" : "public TextAppearanceInfo build()",
    "returnType" : "TextAppearanceInfo",
    "comment" : "\n         * Returns {@link TextAppearanceInfo} using parameters in this\n         * {@link TextAppearanceInfo.Builder}.\n         ",
    "links" : [ "android.view.inputmethod.TextAppearanceInfo", "TextAppearanceInfo.Builder" ]
  } ],
  "methodNames" : [ "public Builder setTextSize(@Px float textSize)", "public Builder setTextLocales(@NonNull LocaleList textLocales)", "public Builder setSystemFontFamilyName(@Nullable String systemFontFamilyName)", "public Builder setTextFontWeight(@IntRange(from = FontStyle.FONT_WEIGHT_UNSPECIFIED, to = FontStyle.FONT_WEIGHT_MAX) int textFontWeight)", "public Builder setTextStyle(@Typeface.Style int textStyle)", "public Builder setAllCaps(boolean allCaps)", "public Builder setShadowDx(@Px float shadowDx)", "public Builder setShadowDy(@Px float shadowDy)", "public Builder setShadowRadius(@Px float shadowRadius)", "public Builder setShadowColor(@ColorInt int shadowColor)", "public Builder setElegantTextHeight(boolean elegantTextHeight)", "public Builder setFallbackLineSpacing(boolean fallbackLineSpacing)", "public Builder setLetterSpacing(float letterSpacing)", "public Builder setFontFeatureSettings(@Nullable String fontFeatureSettings)", "public Builder setFontVariationSettings(@Nullable String fontVariationSettings)", "public Builder setLineBreakStyle(@LineBreakConfig.LineBreakStyle int lineBreakStyle)", "public Builder setLineBreakWordStyle(@LineBreakConfig.LineBreakWordStyle int lineBreakWordStyle)", "public Builder setTextScaleX(float textScaleX)", "public Builder setHighlightTextColor(@ColorInt int highlightTextColor)", "public Builder setTextColor(@ColorInt int textColor)", "public Builder setHintTextColor(@ColorInt int hintTextColor)", "public Builder setLinkTextColor(@ColorInt int linkTextColor)", "public TextAppearanceInfo build()" ],
  "variableNames" : [ "mTextSize", "mTextLocales", "mSystemFontFamilyName", "mTextFontWeight", "mTextStyle", "mAllCaps", "mShadowDx", "mShadowDy", "mShadowRadius", "mShadowColor", "mElegantTextHeight", "mFallbackLineSpacing", "mLetterSpacing", "mFontFeatureSettings", "mFontVariationSettings", "mLineBreakStyle", "mLineBreakWordStyle", "mTextScaleX", "mHighlightTextColor", "mTextColor", "mHintTextColor", "mLinkTextColor" ]
}