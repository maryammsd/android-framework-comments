{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/CopyOnWriteArrayList.java",
  "packageName" : "java.util.concurrent",
  "className" : "CopyOnWriteArrayList",
  "comment" : "\n * A thread-safe variant of {@link java.util.ArrayList} in which all mutative\n * operations ({@code add}, {@code set}, and so on) are implemented by\n * making a fresh copy of the underlying array.\n *\n * <p>This is ordinarily too costly, but may be <em>more</em> efficient\n * than alternatives when traversal operations vastly outnumber\n * mutations, and is useful when you cannot or don't want to\n * synchronize traversals, yet need to preclude interference among\n * concurrent threads.  The \"snapshot\" style iterator method uses a\n * reference to the state of the array at the point that the iterator\n * was created. This array never changes during the lifetime of the\n * iterator, so interference is impossible and the iterator is\n * guaranteed not to throw {@code ConcurrentModificationException}.\n * The iterator will not reflect additions, removals, or changes to\n * the list since the iterator was created.  Element-changing\n * operations on iterators themselves ({@code remove}, {@code set}, and\n * {@code add}) are not supported. These methods throw\n * {@code UnsupportedOperationException}.\n *\n * <p>All elements are permitted, including {@code null}.\n *\n * <p>Memory consistency effects: As with other concurrent\n * collections, actions in a thread prior to placing an object into a\n * {@code CopyOnWriteArrayList}\n * <a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>\n * actions subsequent to the access or removal of that element from\n * the {@code CopyOnWriteArrayList} in another thread.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @since 1.5\n * @author Doug Lea\n * @param <E> the type of elements held in this list\n ",
  "links" : [ "java.util.ArrayList" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "Object",
    "comment" : "\n     * The lock protecting all mutators.  (We have a mild preference\n     * for builtin monitors over ReentrantLock when either will do.)\n     ",
    "links" : [ ]
  }, {
    "name" : "array",
    "type" : "Object[]",
    "comment" : " The array, accessed only via getArray/setArray. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final Object[] getArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Gets the array.  Non-private so as to also be accessible\n     * from CopyOnWriteArraySet class.\n     ",
    "links" : [ ]
  }, {
    "name" : " final void setArray(Object[] a)",
    "returnType" : "void",
    "comment" : "\n     * Sets the array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this list.\n     *\n     * @return the number of elements in this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains no elements.\n     *\n     * @return {@code true} if this list contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int indexOfRange(Object o, Object[] es, int from, int to)",
    "returnType" : "int",
    "comment" : "\n     * static version of indexOf, to allow repeated calls without\n     * needing to re-acquire array each time.\n     * @param o element to search for\n     * @param es the array\n     * @param from first index to search\n     * @param to one past last index to search\n     * @return index of element, or -1 if absent\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int lastIndexOfRange(Object o, Object[] es, int from, int to)",
    "returnType" : "int",
    "comment" : "\n     * static version of lastIndexOf.\n     * @param o element to search for\n     * @param es the array\n     * @param from index of first element of range, last element to search\n     * @param to one past last element of range, first element to search\n     * @return index of element, or -1 if absent\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains the specified element.\n     * More formally, returns {@code true} if and only if this list contains\n     * at least one element {@code e} such that {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this list is to be tested\n     * @return {@code true} if this list contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(E e, int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified element in\n     * this list, searching forwards from {@code index}, or returns -1 if\n     * the element is not found.\n     * More formally, returns the lowest index {@code i} such that\n     * {@code i >= index && Objects.equals(get(i), e)},\n     * or -1 if there is no such index.\n     *\n     * @param e element to search for\n     * @param index index to start searching from\n     * @return the index of the first occurrence of the element in\n     *         this list at position {@code index} or later in the list;\n     *         {@code -1} if the element is not found.\n     * @throws IndexOutOfBoundsException if the specified index is negative\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int lastIndexOf(E e, int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last occurrence of the specified element in\n     * this list, searching backwards from {@code index}, or returns -1 if\n     * the element is not found.\n     * More formally, returns the highest index {@code i} such that\n     * {@code i <= index && Objects.equals(get(i), e)},\n     * or -1 if there is no such index.\n     *\n     * @param e element to search for\n     * @param index index to start searching backwards from\n     * @return the index of the last occurrence of the element at position\n     *         less than or equal to {@code index} in this list;\n     *         -1 if the element is not found.\n     * @throws IndexOutOfBoundsException if the specified index is greater\n     *         than or equal to the current size of this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a shallow copy of this list.  (The elements themselves\n     * are not copied.)\n     *\n     * @return a clone of this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this list.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all the elements in this list\n     ",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list in\n     * proper sequence (from first to last element); the runtime type of\n     * the returned array is that of the specified array.  If the list fits\n     * in the specified array, it is returned therein.  Otherwise, a new\n     * array is allocated with the runtime type of the specified array and\n     * the size of this list.\n     *\n     * <p>If this list fits in the specified array with room to spare\n     * (i.e., the array has more elements than this list), the element in\n     * the array immediately following the end of the list is set to\n     * {@code null}.  (This is useful in determining the length of this\n     * list <i>only</i> if the caller knows that this list does not contain\n     * any null elements.)\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a list known to contain only strings.\n     * The following code can be used to dump the list into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the list are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose.\n     * @return an array containing all the elements in this list\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this list\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : " static E elementAt(Object[] a, int index)",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String outOfBounds(int index, int size)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * Replaces the element at the specified position in this list with the\n     * specified element.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the specified element to the end of this list.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : "public void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the specified position in this\n     * list. Shifts the element currently at that position (if any) and\n     * any subsequent elements to the right (adds one to their indices).\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * Removes the element at the specified position in this list.\n     * Shifts any subsequent elements to the left (subtracts one from their\n     * indices).  Returns the element that was removed from the list.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this list,\n     * if it is present.  If this list does not contain the element, it is\n     * unchanged.  More formally, removes the element with the lowest index\n     * {@code i} such that {@code Objects.equals(o, get(i))}\n     * (if such an element exists).  Returns {@code true} if this list\n     * contained the specified element (or equivalently, if this list\n     * changed as a result of the call).\n     *\n     * @param o element to be removed from this list, if present\n     * @return {@code true} if this list contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean remove(Object o, Object[] snapshot, int index)",
    "returnType" : "boolean",
    "comment" : "\n     * A version of remove(Object) using the strong hint that given\n     * recent snapshot contains o at the given index.\n     ",
    "links" : [ ]
  }, {
    "name" : " void removeRange(int fromIndex, int toIndex)",
    "returnType" : "void",
    "comment" : "\n     * Removes from this list all of the elements whose index is between\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n     * Shifts any succeeding elements to the left (reduces their index).\n     * This call shortens the list by {@code (toIndex - fromIndex)} elements.\n     * (If {@code toIndex==fromIndex}, this operation has no effect.)\n     *\n     * @param fromIndex index of first element to be removed\n     * @param toIndex index after last element to be removed\n     * @throws IndexOutOfBoundsException if fromIndex or toIndex out of range\n     *         ({@code fromIndex < 0 || toIndex > size() || toIndex < fromIndex})\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addIfAbsent(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the element, if not present.\n     *\n     * @param e element to be added to this list, if absent\n     * @return {@code true} if the element was added\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean addIfAbsent(E e, Object[] snapshot)",
    "returnType" : "boolean",
    "comment" : "\n     * A version of addIfAbsent using the strong hint that given\n     * recent snapshot does not contain e.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains all of the elements of the\n     * specified collection.\n     *\n     * @param c collection to be checked for containment in this list\n     * @return {@code true} if this list contains all of the elements of the\n     *         specified collection\n     * @throws NullPointerException if the specified collection is null\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this list all of its elements that are contained in\n     * the specified collection. This is a particularly expensive operation\n     * in this class because of the need for an internal temporary array.\n     *\n     * @param c collection containing elements to be removed from this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this list that are contained in the\n     * specified collection.  In other words, removes from this list all of\n     * its elements that are not contained in the specified collection.\n     *\n     * @param c collection containing elements to be retained in this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public int addAllAbsent(Collection<? extends E> c)",
    "returnType" : "int",
    "comment" : "\n     * Appends all of the elements in the specified collection that\n     * are not already contained in this list, to the end of\n     * this list, in the order that they are returned by the\n     * specified collection's iterator.\n     *\n     * @param c collection containing elements to be added to this list\n     * @return the number of elements added\n     * @throws NullPointerException if the specified collection is null\n     * @see #addIfAbsent(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this list.\n     * The list will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified collection to the end\n     * of this list, in the order that they are returned by the specified\n     * collection's iterator.\n     *\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws NullPointerException if the specified collection is null\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts all of the elements in the specified collection into this\n     * list, starting at the specified position.  Shifts the element\n     * currently at that position (if any) and any subsequent elements to\n     * the right (increases their indices).  The new elements will appear\n     * in this list in the order that they are returned by the\n     * specified collection's iterator.\n     *\n     * @param index index at which to insert the first element\n     *        from the specified collection\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     * @throws NullPointerException if the specified collection is null\n     * @see #add(int,Object)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean bulkRemove(Predicate<? super E> filter, int i, int end)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void replaceAll(UnaryOperator<E> operator)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void replaceAllRange(UnaryOperator<E> operator, int i, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sort(Comparator<? super E> c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void sortRange(Comparator<? super E> c, int i, int end)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this list to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData The length of the array backing the list is emitted\n     *               (int), followed by all of its elements (each an Object)\n     *               in the proper order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this list from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this list.  The string\n     * representation consists of the string representations of the list's\n     * elements in the order they are returned by its iterator, enclosed in\n     * square brackets ({@code \"[]\"}).  Adjacent elements are separated by\n     * the characters {@code \", \"} (comma and space).  Elements are\n     * converted to strings as by {@link String#valueOf(Object)}.\n     *\n     * @return a string representation of this list\n     ",
    "links" : [ "#valueOf(Object)" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this list for equality.\n     * Returns {@code true} if the specified object is the same object\n     * as this object, or if it is also a {@link List} and the sequence\n     * of elements returned by an {@linkplain List#iterator() iterator}\n     * over the specified list is the same as the sequence returned by\n     * an iterator over this list.  The two sequences are considered to\n     * be the same if they have the same length and corresponding\n     * elements at the same position in the sequence are <em>equal</em>.\n     * Two elements {@code e1} and {@code e2} are considered\n     * <em>equal</em> if {@code Objects.equals(e1, e2)}.\n     *\n     * @param o the object to be compared for equality with this list\n     * @return {@code true} if the specified object is equal to this list\n     ",
    "links" : [ "java.util.ArrayList" ]
  }, {
    "name" : "private static int hashCodeOfRange(Object[] es, int from, int to)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this list.\n     *\n     * <p>This implementation uses the definition in {@link List#hashCode}.\n     *\n     * @return the hash code value for this list\n     ",
    "links" : [ "java.util.ArrayList#hashCode" ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this list in proper sequence.\n     *\n     * <p>The returned iterator provides a snapshot of the state of the list\n     * when the iterator was constructed. No synchronization is needed while\n     * traversing the iterator. The iterator does <em>NOT</em> support the\n     * {@code remove} method.\n     *\n     * @return an iterator over the elements in this list in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListIterator<E> listIterator()",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>The returned iterator provides a snapshot of the state of the list\n     * when the iterator was constructed. No synchronization is needed while\n     * traversing the iterator. The iterator does <em>NOT</em> support the\n     * {@code remove}, {@code set} or {@code add} methods.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ListIterator<E> listIterator(int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>The returned iterator provides a snapshot of the state of the list\n     * when the iterator was constructed. No synchronization is needed while\n     * traversing the iterator. The iterator does <em>NOT</em> support the\n     * {@code remove}, {@code set} or {@code add} methods.\n     *\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this list.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#IMMUTABLE},\n     * {@link Spliterator#ORDERED}, {@link Spliterator#SIZED}, and\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * <p>The spliterator provides a snapshot of the state of the list\n     * when the spliterator was constructed. No synchronization is needed while\n     * operating on the spliterator.\n     *\n     * @return a {@code Spliterator} over the elements in this list\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#IMMUTABLE", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public List<E> subList(int fromIndex, int toIndex)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns a view of the portion of this list between\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.\n     * The returned list is backed by this list, so changes in the\n     * returned list are reflected in this list.\n     *\n     * <p>The semantics of the list returned by this method become\n     * undefined if the backing list (i.e., this list) is modified in\n     * any way other than via the returned list.\n     *\n     * @param fromIndex low endpoint (inclusive) of the subList\n     * @param toIndex high endpoint (exclusive) of the subList\n     * @return a view of the specified range within this list\n     * @throws IndexOutOfBoundsException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<E> reversed()",
    "returnType" : "List<E>",
    "comment" : "\n     * {@inheritDoc}\n     * <p>\n     * Modifications to the reversed view are permitted and will be propagated\n     * to this list. In addition, modifications to this list will be visible\n     * in the reversed view. Sublists and iterators of the reversed view have\n     * the same restrictions as those of this list.\n     *\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "private void resetLock()",
    "returnType" : "void",
    "comment" : " Initializes the lock; for use when deserializing or cloning. ",
    "links" : [ ]
  } ],
  "methodNames" : [ " final Object[] getArray()", " final void setArray(Object[] a)", "public int size()", "public boolean isEmpty()", "private static int indexOfRange(Object o, Object[] es, int from, int to)", "private static int lastIndexOfRange(Object o, Object[] es, int from, int to)", "public boolean contains(Object o)", "public int indexOf(Object o)", "public int indexOf(E e, int index)", "public int lastIndexOf(Object o)", "public int lastIndexOf(E e, int index)", "public Object clone()", "public Object[] toArray()", "public T[] toArray(T[] a)", " static E elementAt(Object[] a, int index)", " static String outOfBounds(int index, int size)", "public E get(int index)", "public E getFirst()", "public E getLast()", "public E set(int index, E element)", "public boolean add(E e)", "public void add(int index, E element)", "public void addFirst(E e)", "public void addLast(E e)", "public E remove(int index)", "public E removeFirst()", "public E removeLast()", "public boolean remove(Object o)", "private boolean remove(Object o, Object[] snapshot, int index)", " void removeRange(int fromIndex, int toIndex)", "public boolean addIfAbsent(E e)", "private boolean addIfAbsent(E e, Object[] snapshot)", "public boolean containsAll(Collection<?> c)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "public int addAllAbsent(Collection<? extends E> c)", "public void clear()", "public boolean addAll(Collection<? extends E> c)", "public boolean addAll(int index, Collection<? extends E> c)", "public void forEach(Consumer<? super E> action)", "public boolean removeIf(Predicate<? super E> filter)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private boolean bulkRemove(Predicate<? super E> filter)", " boolean bulkRemove(Predicate<? super E> filter, int i, int end)", "public void replaceAll(UnaryOperator<E> operator)", " void replaceAllRange(UnaryOperator<E> operator, int i, int end)", "public void sort(Comparator<? super E> c)", " void sortRange(Comparator<? super E> c, int i, int end)", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", "public String toString()", "public boolean equals(Object o)", "private static int hashCodeOfRange(Object[] es, int from, int to)", "public int hashCode()", "public Iterator<E> iterator()", "public ListIterator<E> listIterator()", "public ListIterator<E> listIterator(int index)", "public Spliterator<E> spliterator()", "public List<E> subList(int fromIndex, int toIndex)", "public List<E> reversed()", "private void resetLock()" ],
  "variableNames" : [ "serialVersionUID", "lock", "array" ]
}