{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Color.java",
  "packageName" : "android.graphics",
  "className" : "Color",
  "comment" : "\n * {@usesMathJax}\n *\n * <p>The <code>Color</code> class provides methods for creating, converting and\n * manipulating colors. Colors have three different representations:</p>\n * <ul>\n *     <li>Color ints, the most common representation</li>\n *     <li>Color longs</li>\n *     <li><code>Color</code> instances</li>\n * </ul>\n * <p>The section below describe each representation in detail.</p>\n *\n * <h3>Color ints</h3>\n * <p>Color ints are the most common representation of colors on Android and\n * have been used since {@link android.os.Build.VERSION_CODES#BASE API level 1}.</p>\n *\n * <p>A color int always defines a color in the {@link ColorSpace.Named#SRGB sRGB}\n * color space using 4 components packed in a single 32 bit integer value:</p>\n *\n * <table summary=\"Color int definition\">\n *     <tr>\n *         <th>Component</th><th>Name</th><th>Size</th><th>Range</th>\n *     </tr>\n *     <tr><td>A</td><td>Alpha</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>R</td><td>Red</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>G</td><td>Green</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>B</td><td>Blue</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n * </table>\n *\n * <p>The components in this table are listed in encoding order (see below),\n * which is why color ints are called ARGB colors.</p>\n *\n * <h4>Usage in code</h4>\n * <p>To avoid confusing color ints with arbitrary integer values, it is a\n * good practice to annotate them with the <code>@ColorInt</code> annotation\n * found in the Android Support Library.</p>\n *\n * <h4>Encoding</h4>\n * <p>The four components of a color int are encoded in the following way:</p>\n * <pre class=\"prettyprint\">\n * int color = (A & 0xff) << 24 | (R & 0xff) << 16 | (G & 0xff) << 8 | (B & 0xff);\n * </pre>\n *\n * <p>Because of this encoding, color ints can easily be described as an integer\n * constant in source. For instance, opaque blue is <code>0xff0000ff</code>\n * and yellow is <code>0xffffff00</code>.</p>\n *\n * <p>To easily encode color ints, it is recommended to use the static methods\n * {@link #argb(int, int, int, int)} and {@link #rgb(int, int, int)}. The second\n * method omits the alpha component and assumes the color is opaque (alpha is 255).\n * As a convenience this class also offers methods to encode color ints from components\n * defined in the \\([0..1]\\) range: {@link #argb(float, float, float, float)} and\n * {@link #rgb(float, float, float)}.</p>\n *\n * <p>Color longs (defined below) can be easily converted to color ints by invoking\n * the {@link #toArgb(long)} method. This method performs a color space conversion\n * if needed.</p>\n *\n * <p>It is also possible to create a color int by invoking the method {@link #toArgb()}\n * on a color instance.</p>\n *\n * <h4>Decoding</h4>\n * <p>The four ARGB components can be individually extracted from a color int\n * using the following expressions:</p>\n * <pre class=\"prettyprint\">\n * int A = (color >> 24) & 0xff; // or color >>> 24\n * int R = (color >> 16) & 0xff;\n * int G = (color >>  8) & 0xff;\n * int B = (color      ) & 0xff;\n * </pre>\n *\n * <p>This class offers convenience methods to easily extract these components:</p>\n * <ul>\n *     <li>{@link #alpha(int)} to extract the alpha component</li>\n *     <li>{@link #red(int)} to extract the red component</li>\n *     <li>{@link #green(int)} to extract the green component</li>\n *     <li>{@link #blue(int)} to extract the blue component</li>\n * </ul>\n *\n * <h3>Color longs</h3>\n * <p>Color longs are a representation introduced in\n * {@link android.os.Build.VERSION_CODES#O Android O} to store colors in different\n * {@link ColorSpace color spaces}, with more precision than color ints.</p>\n *\n * <p>A color long always defines a color using 4 components packed in a single\n * 64 bit long value. One of these components is always alpha while the other\n * three components depend on the color space's {@link ColorSpace.Model color model}.\n * The most common color model is the {@link ColorSpace.Model#RGB RGB} model in\n * which the components represent red, green and blue values.</p>\n *\n * <p class=\"note\"><b>Component ranges:</b> the ranges defined in the tables\n * below indicate the ranges that can be encoded in a color long. They do not\n * represent the actual ranges as they may differ per color space. For instance,\n * the RGB components of a color in the {@link ColorSpace.Named#DISPLAY_P3 Display P3}\n * color space use the \\([0..1]\\) range. Please refer to the documentation of the\n * various {@link ColorSpace.Named color spaces} to find their respective ranges.</p>\n *\n * <p class=\"note\"><b>Alpha range:</b> while alpha is encoded in a color long using\n * a 10 bit integer (thus using a range of \\([0..1023]\\)), it is converted to and\n * from \\([0..1]\\) float values when decoding and encoding color longs.</p>\n *\n * <p class=\"note\"><b>sRGB color space:</b> for compatibility reasons and ease of\n * use, color longs encoding {@link ColorSpace.Named#SRGB sRGB} colors do not\n * use the same encoding as other color longs.</p>\n *\n * <table summary=\"Color long definition\">\n *     <tr>\n *         <th>Component</th><th>Name</th><th>Size</th><th>Range</th>\n *     </tr>\n *     <tr><td colspan=\"4\">{@link ColorSpace.Model#RGB RGB} color model</td></tr>\n *     <tr><td>R</td><td>Red</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>G</td><td>Green</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>B</td><td>Blue</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>A</td><td>Alpha</td><td>10 bits</td><td>\\([0..1023]\\)</td></tr>\n *     <tr><td></td><td>Color space</td><td>6 bits</td><td>\\([0..63]\\)</td></tr>\n *     <tr><td colspan=\"4\">{@link ColorSpace.Named#SRGB sRGB} color space</td></tr>\n *     <tr><td>A</td><td>Alpha</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>R</td><td>Red</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>G</td><td>Green</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>B</td><td>Blue</td><td>8 bits</td><td>\\([0..255]\\)</td></tr>\n *     <tr><td>X</td><td>Unused</td><td>32 bits</td><td>\\(0\\)</td></tr>\n *     <tr><td colspan=\"4\">{@link ColorSpace.Model#XYZ XYZ} color model</td></tr>\n *     <tr><td>X</td><td>X</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>Y</td><td>Y</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>Z</td><td>Z</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>A</td><td>Alpha</td><td>10 bits</td><td>\\([0..1023]\\)</td></tr>\n *     <tr><td></td><td>Color space</td><td>6 bits</td><td>\\([0..63]\\)</td></tr>\n *     <tr><td colspan=\"4\">{@link ColorSpace.Model#XYZ Lab} color model</td></tr>\n *     <tr><td>L</td><td>L</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>a</td><td>a</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>b</td><td>b</td><td>16 bits</td><td>\\([-65504.0, 65504.0]\\)</td></tr>\n *     <tr><td>A</td><td>Alpha</td><td>10 bits</td><td>\\([0..1023]\\)</td></tr>\n *     <tr><td></td><td>Color space</td><td>6 bits</td><td>\\([0..63]\\)</td></tr>\n *     <tr><td colspan=\"4\">{@link ColorSpace.Model#CMYK CMYK} color model</td></tr>\n *     <tr><td colspan=\"4\">Unsupported</td></tr>\n * </table>\n *\n * <p>The components in this table are listed in encoding order (see below),\n * which is why color longs in the RGB model are called RGBA colors (even if\n * this doesn't quite hold for the special case of sRGB colors).</p>\n *\n * <p>The color long encoding relies on half-precision float values (fp16). If you\n * wish to know more about the limitations of half-precision float values, please\n * refer to the documentation of the {@link Half} class.</p>\n *\n * <h4>Usage in code</h4>\n * <p>To avoid confusing color longs with arbitrary long values, it is a\n * good practice to annotate them with the <code>@ColorLong</code> annotation\n * found in the Android Support Library.</p>\n *\n * <h4>Encoding</h4>\n *\n * <p>Given the complex nature of color longs, it is strongly encouraged to use\n * the various methods provided by this class to encode them.</p>\n *\n * <p>The most flexible way to encode a color long is to use the method\n * {@link #pack(float, float, float, float, ColorSpace)}. This method allows you\n * to specify three color components (typically RGB), an alpha component and a\n * color space. To encode sRGB colors, use {@link #pack(float, float, float)}\n * and {@link #pack(float, float, float, float)} which are the\n * equivalent of {@link #rgb(int, int, int)} and {@link #argb(int, int, int, int)}\n * for color ints. If you simply need to convert a color int into a color long,\n * use {@link #pack(int)}.</p>\n *\n * <p>It is also possible to create a color long value by invoking the method\n * {@link #pack()} on a color instance.</p>\n *\n * <h4>Decoding</h4>\n *\n * <p>This class offers convenience methods to easily extract the components\n * of a color long:</p>\n * <ul>\n *     <li>{@link #alpha(long)} to extract the alpha component</li>\n *     <li>{@link #red(long)} to extract the red/X/L component</li>\n *     <li>{@link #green(long)} to extract the green/Y/a component</li>\n *     <li>{@link #blue(long)} to extract the blue/Z/b component</li>\n * </ul>\n *\n * <p>The values returned by these methods depend on the color space encoded\n * in the color long. The values are however typically in the \\([0..1]\\) range\n * for RGB colors. Please refer to the documentation of the various\n * {@link ColorSpace.Named color spaces} for the exact ranges.</p>\n *\n * <h3>Color instances</h3>\n * <p>Color instances are a representation introduced in\n * {@link android.os.Build.VERSION_CODES#O Android O} to store colors in different\n * {@link ColorSpace color spaces}, with more precision than both color ints and\n * color longs. Color instances also offer the ability to store more than 4\n * components if necessary.</p>\n *\n * <p>Colors instances are immutable and can be created using one of the various\n * <code>valueOf</code> methods. For instance:</p>\n * <pre class=\"prettyprint\">\n * // sRGB\n * Color opaqueRed = Color.valueOf(0xffff0000); // from a color int\n * Color translucentRed = Color.valueOf(1.0f, 0.0f, 0.0f, 0.5f);\n *\n * // Wide gamut color\n * {@literal @}ColorLong long p3 = pack(1.0f, 1.0f, 0.0f, 1.0f, colorSpaceP3);\n * Color opaqueYellow = Color.valueOf(p3); // from a color long\n *\n * // CIE L*a*b* color space\n * ColorSpace lab = ColorSpace.get(ColorSpace.Named.LAB);\n * Color green = Color.valueOf(100.0f, -128.0f, 128.0f, 1.0f, lab);\n * </pre>\n *\n * <p>Color instances can be converted to color ints ({@link #toArgb()}) or\n * color longs ({@link #pack()}). They also offer easy access to their various\n * components using the following methods:</p>\n * <ul>\n *     <li>{@link #alpha()}, returns the alpha component value</li>\n *     <li>{@link #red()}, returns the red component value (or first\n *     component value in non-RGB models)</li>\n *     <li>{@link #green()}, returns the green component value (or second\n *     component value in non-RGB models)</li>\n *     <li>{@link #blue()}, returns the blue component value (or third\n *     component value in non-RGB models)</li>\n *     <li>{@link #getComponent(int)}, returns a specific component value</li>\n *     <li>{@link #getComponents()}, returns all component values as an array</li>\n * </ul>\n *\n * <h3>Color space conversions</h3>\n * <p>You can convert colors from one color space to another using\n * {@link ColorSpace#connect(ColorSpace, ColorSpace)} and its variants. However,\n * the <code>Color</code> class provides a few convenience methods to simplify\n * the process. Here is a brief description of some of them:</p>\n * <ul>\n *     <li>{@link #convert(ColorSpace)} to convert a color instance in a color\n *     space to a new color instance in a different color space</li>\n *     <li>{@link #convert(float, float, float, float, ColorSpace, ColorSpace)} to\n *     convert a color from a source color space to a destination color space</li>\n *     <li>{@link #convert(long, ColorSpace)} to convert a color long from its\n *     built-in color space to a destination color space</li>\n *     <li>{@link #convert(int, ColorSpace)} to convert a color int from sRGB\n *     to a destination color space</li>\n * </ul>\n *\n * <p>Please refere to the {@link ColorSpace} documentation for more\n * information.</p>\n *\n * <h3>Alpha and transparency</h3>\n * <p>The alpha component of a color defines the level of transparency of a\n * color. When the alpha component is 0, the color is completely transparent.\n * When the alpha is component is 1 (in the \\([0..1]\\) range) or 255 (in the\n * \\([0..255]\\) range), the color is completely opaque.</p>\n *\n * <p>The color representations described above do not use pre-multiplied\n * color components (a pre-multiplied color component is a color component\n * that has been multiplied by the value of the alpha component).\n * For instance, the color int representation of opaque red is\n * <code>0xffff0000</code>. For semi-transparent (50%) red, the\n * representation becomes <code>0x80ff0000</code>. The equivalent color\n * instance representations would be <code>(1.0, 0.0, 0.0, 1.0)</code>\n * and <code>(1.0, 0.0, 0.0, 0.5)</code>.</p>\n ",
  "variables" : [ {
    "name" : "BLACK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DKGRAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GRAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LTGRAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WHITE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GREEN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BLUE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YELLOW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CYAN",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAGENTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TRANSPARENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mComponents",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorSpace",
    "type" : "ColorSpace",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sColorNameMap",
    "type" : "HashMap<String, Integer>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ColorSpace getColorSpace()",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Returns this color's color space.\n     *\n     * @return A non-null instance of {@link ColorSpace}\n     ",
    "links" : [ "ColorSpace" ]
  }, {
    "name" : "public ColorSpace.Model getModel()",
    "returnType" : "ColorSpace.Model",
    "comment" : "\n     * Returns the color model of this color.\n     *\n     * @return A non-null {@link ColorSpace.Model}\n     ",
    "links" : [ "ColorSpace.Model" ]
  }, {
    "name" : "public boolean isWideGamut()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this color color is in a wide-gamut color space.\n     * See {@link ColorSpace#isWideGamut()} for a definition of a wide-gamut\n     * color space.\n     *\n     * @return True if this color is in a wide-gamut color space, false otherwise\n     *\n     * @see #isSrgb()\n     * @see ColorSpace#isWideGamut()\n     ",
    "links" : [ "ColorSpace#isWideGamut" ]
  }, {
    "name" : "public boolean isSrgb()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether this color is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @return True if this color is in the sRGB color space, false otherwise\n     *\n     * @see #isWideGamut()\n     ",
    "links" : [ "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public int getComponentCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of components that form a color value according\n     * to this color space's color model, plus one extra component for\n     * alpha.\n     *\n     * @return The integer 4 or 5\n     ",
    "links" : [ ]
  }, {
    "name" : "public long pack()",
    "returnType" : "long",
    "comment" : "\n     * Packs this color into a color long. See the documentation of this class\n     * for a description of the color long format.\n     *\n     * @return A color long\n     *\n     * @throws IllegalArgumentException If this color's color space has the id\n     * {@link ColorSpace#MIN_ID} or if this color has more than 4 components\n     ",
    "links" : [ "ColorSpace#MIN_ID" ]
  }, {
    "name" : "public Color convert(@NonNull ColorSpace colorSpace)",
    "returnType" : "Color",
    "comment" : "\n     * Converts this color from its color space to the specified color space.\n     * The conversion is done using the default rendering intent as specified\n     * by {@link ColorSpace#connect(ColorSpace, ColorSpace)}.\n     *\n     * @param colorSpace The destination color space, cannot be null\n     *\n     * @return A non-null color instance in the specified color space\n     ",
    "links" : [ "ColorSpace#connect" ]
  }, {
    "name" : "public int toArgb()",
    "returnType" : "int",
    "comment" : "\n     * Converts this color to an ARGB color int. A color int is always in\n     * the {@link ColorSpace.Named#SRGB sRGB} color space. This implies\n     * a color space conversion is applied if needed.\n     *\n     * @return An ARGB color in the sRGB color space\n     ",
    "links" : [ "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public float red()",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the value of the red component in the range defined by this\n     * color's color space (see {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}).</p>\n     *\n     * <p>If this color's color model is not {@link ColorSpace.Model#RGB RGB},\n     * calling this method is equivalent to <code>getComponent(0)</code>.</p>\n     *\n     * @see #alpha()\n     * @see #red()\n     * @see #green\n     * @see #getComponents()\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public float green()",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the value of the green component in the range defined by this\n     * color's color space (see {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}).</p>\n     *\n     * <p>If this color's color model is not {@link ColorSpace.Model#RGB RGB},\n     * calling this method is equivalent to <code>getComponent(1)</code>.</p>\n     *\n     * @see #alpha()\n     * @see #red()\n     * @see #green\n     * @see #getComponents()\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public float blue()",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the value of the blue component in the range defined by this\n     * color's color space (see {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}).</p>\n     *\n     * <p>If this color's color model is not {@link ColorSpace.Model#RGB RGB},\n     * calling this method is equivalent to <code>getComponent(2)</code>.</p>\n     *\n     * @see #alpha()\n     * @see #red()\n     * @see #green\n     * @see #getComponents()\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public float alpha()",
    "returnType" : "float",
    "comment" : "\n     * Returns the value of the alpha component in the range \\([0..1]\\).\n     * Calling this method is equivalent to\n     * <code>getComponent(getComponentCount() - 1)</code>.\n     *\n     * @see #red()\n     * @see #green()\n     * @see #blue()\n     * @see #getComponents()\n     * @see #getComponent(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public float[] getComponents()",
    "returnType" : "float[]",
    "comment" : "\n     * Returns this color's components as a new array. The last element of the\n     * array is always the alpha component.\n     *\n     * @return A new, non-null array whose size is equal to {@link #getComponentCount()}\n     *\n     * @see #getComponent(int)\n     ",
    "links" : [ "#getComponentCount" ]
  }, {
    "name" : "public float[] getComponents(@Nullable @Size(min = 4) float[] components)",
    "returnType" : "float[]",
    "comment" : "\n     * Copies this color's components in the supplied array. The last element of the\n     * array is always the alpha component.\n     *\n     * @param components An array of floats whose size must be at least\n     *                  {@link #getComponentCount()}, can be null\n     * @return The array passed as a parameter if not null, or a new array of length\n     *         {@link #getComponentCount()}\n     *\n     * @see #getComponent(int)\n     *\n     * @throws IllegalArgumentException If the specified array's length is less than\n     * {@link #getComponentCount()}\n     ",
    "links" : [ "#getComponentCount", "#getComponentCount", "#getComponentCount" ]
  }, {
    "name" : "public float getComponent(@IntRange(from = 0, to = 4) int component)",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the value of the specified component in the range defined by\n     * this color's color space (see {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}).</p>\n     *\n     * <p>If the requested component index is {@link #getComponentCount()},\n     * this method returns the alpha component, always in the range\n     * \\([0..1]\\).</p>\n     *\n     * @see #getComponents()\n     *\n     * @throws ArrayIndexOutOfBoundsException If the specified component index\n     * is < 0 or >= {@link #getComponentCount()}\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "#getComponentCount", "#getComponentCount" ]
  }, {
    "name" : "public float luminance()",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the relative luminance of this color.</p>\n     *\n     * <p>Based on the formula for relative luminance defined in WCAG 2.0,\n     * W3C Recommendation 11 December 2008.</p>\n     *\n     * @return A value between 0 (darkest black) and 1 (lightest white)\n     *\n     * @throws IllegalArgumentException If the this color's color space\n     * does not use the {@link ColorSpace.Model#RGB RGB} color model\n     ",
    "links" : [ "ColorSpace.Model#RGB" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * <p>Returns a string representation of the object. This method returns\n     * a string equal to the value of:</p>\n     *\n     * <pre class=\"prettyprint\">\n     * \"Color(\" + r + \", \" + g + \", \" + b + \", \" + a +\n     *         \", \" + getColorSpace().getName + ')'\n     * </pre>\n     *\n     * <p>For instance, the string representation of opaque black in the sRGB\n     * color space is equal to the following value:</p>\n     *\n     * <pre>\n     * Color(0.0, 0.0, 0.0, 1.0, sRGB IEC61966-2.1)\n     * </pre>\n     *\n     * @return A non-null string representation of the object\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ColorSpace colorSpace(@ColorLong long color)",
    "returnType" : "ColorSpace",
    "comment" : "\n     * Returns the color space encoded in the specified color long.\n     *\n     * @param color The color long whose color space to extract\n     * @return A non-null color space instance\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     *\n     * @see #red(long)\n     * @see #green(long)\n     * @see #blue(long)\n     * @see #alpha(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float red(@ColorLong long color)",
    "returnType" : "float",
    "comment" : "\n     * Returns the red component encoded in the specified color long.\n     * The range of the returned value depends on the color space\n     * associated with the specified color. The color space can be\n     * queried by calling {@link #colorSpace(long)}.\n     *\n     * @param color The color long whose red channel to extract\n     * @return A float value with a range defined by the specified color's\n     * color space\n     *\n     * @see #colorSpace(long)\n     * @see #green(long)\n     * @see #blue(long)\n     * @see #alpha(long)\n     ",
    "links" : [ "#colorSpace" ]
  }, {
    "name" : "public static float green(@ColorLong long color)",
    "returnType" : "float",
    "comment" : "\n     * Returns the green component encoded in the specified color long.\n     * The range of the returned value depends on the color space\n     * associated with the specified color. The color space can be\n     * queried by calling {@link #colorSpace(long)}.\n     *\n     * @param color The color long whose green channel to extract\n     * @return A float value with a range defined by the specified color's\n     * color space\n     *\n     * @see #colorSpace(long)\n     * @see #red(long)\n     * @see #blue(long)\n     * @see #alpha(long)\n     ",
    "links" : [ "#colorSpace" ]
  }, {
    "name" : "public static float blue(@ColorLong long color)",
    "returnType" : "float",
    "comment" : "\n     * Returns the blue component encoded in the specified color long.\n     * The range of the returned value depends on the color space\n     * associated with the specified color. The color space can be\n     * queried by calling {@link #colorSpace(long)}.\n     *\n     * @param color The color long whose blue channel to extract\n     * @return A float value with a range defined by the specified color's\n     * color space\n     *\n     * @see #colorSpace(long)\n     * @see #red(long)\n     * @see #green(long)\n     * @see #alpha(long)\n     ",
    "links" : [ "#colorSpace" ]
  }, {
    "name" : "public static float alpha(@ColorLong long color)",
    "returnType" : "float",
    "comment" : "\n     * Returns the alpha component encoded in the specified color long.\n     * The returned value is always in the range \\([0..1]\\).\n     *\n     * @param color The color long whose blue channel to extract\n     * @return A float value in the range \\([0..1]\\)\n     *\n     * @see #colorSpace(long)\n     * @see #red(long)\n     * @see #green(long)\n     * @see #blue(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSrgb(@ColorLong long color)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the specified color is in the\n     * {@link ColorSpace.Named#SRGB sRGB} color space.\n     *\n     * @param color The color to test\n     * @return True if the color is in the sRGB color space, false otherwise\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     *\n     * @see #isInColorSpace(long, ColorSpace)\n     * @see #isWideGamut(long)\n     ",
    "links" : [ "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static boolean isWideGamut(@ColorLong long color)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the specified color is in a wide-gamut color space.\n     * See {@link ColorSpace#isWideGamut()} for a definition of a wide-gamut\n     * color space.\n     *\n     * @param color The color to test\n     * @return True if the color is in a wide-gamut color space, false otherwise\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     *\n     * @see #isInColorSpace(long, ColorSpace)\n     * @see #isSrgb(long)\n     * @see ColorSpace#isWideGamut()\n     ",
    "links" : [ "ColorSpace#isWideGamut" ]
  }, {
    "name" : "public static boolean isInColorSpace(@ColorLong long color, @NonNull ColorSpace colorSpace)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the specified color is in the specified color space.\n     *\n     * @param color The color to test\n     * @param colorSpace The color space to test against\n     * @return True if the color is in the specified color space, false otherwise\n     *\n     * @see #isSrgb(long)\n     * @see #isWideGamut(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int toArgb(@ColorLong long color)",
    "returnType" : "int",
    "comment" : "\n     * Converts the specified color long to an ARGB color int. A color int is\n     * always in the {@link ColorSpace.Named#SRGB sRGB} color space. This implies\n     * a color space conversion is applied if needed.\n     *\n     * @return An ARGB color in the sRGB color space\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     ",
    "links" : [ "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static Color valueOf(@ColorInt int color)",
    "returnType" : "Color",
    "comment" : "\n     * Creates a new <code>Color</code> instance from an ARGB color int.\n     * The resulting color is in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space.\n     *\n     * @param color The ARGB color int to create a <code>Color</code> from\n     * @return A non-null instance of {@link Color}\n     ",
    "links" : [ "ColorSpace.Named#SRGB", "Color" ]
  }, {
    "name" : "public static Color valueOf(@ColorLong long color)",
    "returnType" : "Color",
    "comment" : "\n     * Creates a new <code>Color</code> instance from a color long.\n     * The resulting color is in the same color space as the specified color long.\n     *\n     * @param color The color long to create a <code>Color</code> from\n     * @return A non-null instance of {@link Color}\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     ",
    "links" : [ "Color" ]
  }, {
    "name" : "public static Color valueOf(float r, float g, float b)",
    "returnType" : "Color",
    "comment" : "\n     * Creates a new opaque <code>Color</code> in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space with the specified red, green and blue component values. The component\n     * values must be in the range \\([0..1]\\).\n     *\n     * @param r The red component of the opaque sRGB color to create, in \\([0..1]\\)\n     * @param g The green component of the opaque sRGB color to create, in \\([0..1]\\)\n     * @param b The blue component of the opaque sRGB color to create, in \\([0..1]\\)\n     * @return A non-null instance of {@link Color}\n     ",
    "links" : [ "ColorSpace.Named#SRGB", "Color" ]
  }, {
    "name" : "public static Color valueOf(float r, float g, float b, float a)",
    "returnType" : "Color",
    "comment" : "\n     * Creates a new <code>Color</code> in the {@link ColorSpace.Named#SRGB sRGB}\n     * color space with the specified red, green, blue and alpha component values.\n     * The component values must be in the range \\([0..1]\\).\n     *\n     * @param r The red component of the sRGB color to create, in \\([0..1]\\)\n     * @param g The green component of the sRGB color to create, in \\([0..1]\\)\n     * @param b The blue component of the sRGB color to create, in \\([0..1]\\)\n     * @param a The alpha component of the sRGB color to create, in \\([0..1]\\)\n     * @return A non-null instance of {@link Color}\n     ",
    "links" : [ "ColorSpace.Named#SRGB", "Color" ]
  }, {
    "name" : "public static Color valueOf(float r, float g, float b, float a, @NonNull ColorSpace colorSpace)",
    "returnType" : "Color",
    "comment" : "\n     * Creates a new <code>Color</code> in the specified color space with the\n     * specified red, green, blue and alpha component values. The range of the\n     * components is defined by {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}. The values passed to this method\n     * must be in the proper range.\n     *\n     * @param r The red component of the color to create\n     * @param g The green component of the color to create\n     * @param b The blue component of the color to create\n     * @param a The alpha component of the color to create, in \\([0..1]\\)\n     * @param colorSpace The color space of the color to create\n     * @return A non-null instance of {@link Color}\n     *\n     * @throws IllegalArgumentException If the specified color space uses a\n     * color model with more than 3 components\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "Color" ]
  }, {
    "name" : "public static Color valueOf(@NonNull @Size(min = 4, max = 5) float[] components, @NonNull ColorSpace colorSpace)",
    "returnType" : "Color",
    "comment" : "\n     * <p>Creates a new <code>Color</code> in the specified color space with the\n     * specified component values. The range of the components is defined by\n     * {@link ColorSpace#getMinValue(int)} and {@link ColorSpace#getMaxValue(int)}.\n     * The values passed to this method must be in the proper range. The alpha\n     * component is always in the range \\([0..1]\\).</p>\n     *\n     * <p>The length of the array of components must be at least\n     * <code>{@link ColorSpace#getComponentCount()} + 1</code>. The component at index\n     * {@link ColorSpace#getComponentCount()} is always alpha.</p>\n     *\n     * @param components The components of the color to create, with alpha as the last component\n     * @param colorSpace The color space of the color to create\n     * @return A non-null instance of {@link Color}\n     *\n     * @throws IllegalArgumentException If the array of components is smaller than\n     * required by the color space\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "ColorSpace#getComponentCount", "ColorSpace#getComponentCount", "Color" ]
  }, {
    "name" : "public static long pack(@ColorInt int color)",
    "returnType" : "long",
    "comment" : "\n     * Converts the specified ARGB color int to an RGBA color long in the sRGB\n     * color space. See the documentation of this class for a description of\n     * the color long format.\n     *\n     * @param color The ARGB color int to convert to an RGBA color long in sRGB\n     *\n     * @return A color long\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long pack(float red, float green, float blue)",
    "returnType" : "long",
    "comment" : "\n     * Packs the sRGB color defined by the specified red, green and blue component\n     * values into an RGBA color long in the sRGB color space. The alpha component\n     * is set to 1.0. See the documentation of this class for a description of the\n     * color long format.\n     *\n     * @param red The red component of the sRGB color to create, in \\([0..1]\\)\n     * @param green The green component of the sRGB color to create, in \\([0..1]\\)\n     * @param blue The blue component of the sRGB color to create, in \\([0..1]\\)\n     *\n     * @return A color long\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long pack(float red, float green, float blue, float alpha)",
    "returnType" : "long",
    "comment" : "\n     * Packs the sRGB color defined by the specified red, green, blue and alpha\n     * component values into an RGBA color long in the sRGB color space. See the\n     * documentation of this class for a description of the color long format.\n     *\n     * @param red The red component of the sRGB color to create, in \\([0..1]\\)\n     * @param green The green component of the sRGB color to create, in \\([0..1]\\)\n     * @param blue The blue component of the sRGB color to create, in \\([0..1]\\)\n     * @param alpha The alpha component of the sRGB color to create, in \\([0..1]\\)\n     *\n     * @return A color long\n     ",
    "links" : [ ]
  }, {
    "name" : "public static long pack(float red, float green, float blue, float alpha, @NonNull ColorSpace colorSpace)",
    "returnType" : "long",
    "comment" : "\n     * <p>Packs the 3 component color defined by the specified red, green, blue and\n     * alpha component values into a color long in the specified color space. See the\n     * documentation of this class for a description of the color long format.</p>\n     *\n     * <p>The red, green and blue components must be in the range defined by the\n     * specified color space. See {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}.</p>\n     *\n     * @param red The red component of the color to create\n     * @param green The green component of the color to create\n     * @param blue The blue component of the color to create\n     * @param alpha The alpha component of the color to create, in \\([0..1]\\)\n     *\n     * @return A color long\n     *\n     * @throws IllegalArgumentException If the color space's id is {@link ColorSpace#MIN_ID}\n     * or if the color space's color model has more than 3 components\n     ",
    "links" : [ "ColorSpace#getMinValue", "ColorSpace#getMaxValue", "ColorSpace#MIN_ID" ]
  }, {
    "name" : "public static long convert(@ColorInt int color, @NonNull ColorSpace colorSpace)",
    "returnType" : "long",
    "comment" : "\n     * Converts the specified ARGB color int from the {@link ColorSpace.Named#SRGB sRGB}\n     * color space into the specified destination color space. The resulting color is\n     * returned as a color long. See the documentation of this class for a description\n     * of the color long format.\n     *\n     * @param color The sRGB color int to convert\n     * @param colorSpace The destination color space\n     * @return A color long in the destination color space\n     ",
    "links" : [ "ColorSpace.Named#SRGB" ]
  }, {
    "name" : "public static long convert(@ColorLong long color, @NonNull ColorSpace colorSpace)",
    "returnType" : "long",
    "comment" : "\n     * <p>Converts the specified color long from its color space into the specified\n     * destination color space. The resulting color is returned as a color long. See\n     * the documentation of this class for a description of the color long format.</p>\n     *\n     * <p>When converting several colors in a row, it is recommended to use\n     * {@link #convert(long, ColorSpace.Connector)} instead to\n     * avoid the creation of a {@link ColorSpace.Connector} on every invocation.</p>\n     *\n     * @param color The color long to convert\n     * @param colorSpace The destination color space\n     * @return A color long in the destination color space\n     * @throws IllegalArgumentException If the encoded color space is invalid or unknown\n     ",
    "links" : [ "#convert", "ColorSpace.Connector" ]
  }, {
    "name" : "public static long convert(float r, float g, float b, float a, @NonNull ColorSpace source, @NonNull ColorSpace destination)",
    "returnType" : "long",
    "comment" : "\n     * <p>Converts the specified 3 component color from the source color space to the\n     * destination color space. The resulting color is returned as a color long. See\n     * the documentation of this class for a description of the color long format.</p>\n     *\n     * <p>When converting multiple colors in a row, it is recommended to use\n     * {@link #convert(float, float, float, float, ColorSpace.Connector)} instead to\n     * avoid the creation of a {@link ColorSpace.Connector} on every invocation.</p>\n     *\n     * <p>The red, green and blue components must be in the range defined by the\n     * specified color space. See {@link ColorSpace#getMinValue(int)} and\n     * {@link ColorSpace#getMaxValue(int)}.</p>\n     *\n     * @param r The red component of the color to convert\n     * @param g The green component of the color to convert\n     * @param b The blue component of the color to convert\n     * @param a The alpha component of the color to convert, in \\([0..1]\\)\n     * @param source The source color space, cannot be null\n     * @param destination The destination color space, cannot be null\n     * @return A color long in the destination color space\n     *\n     * @see #convert(float, float, float, float, ColorSpace.Connector)\n     ",
    "links" : [ "#convert", "ColorSpace.Connector", "ColorSpace#getMinValue", "ColorSpace#getMaxValue" ]
  }, {
    "name" : "public static long convert(@ColorLong long color, @NonNull ColorSpace.Connector connector)",
    "returnType" : "long",
    "comment" : "\n     * <p>Converts the specified color long from a color space to another using the\n     * specified color space {@link ColorSpace.Connector connector}. The resulting\n     * color is returned as a color long. See the documentation of this class for a\n     * description of the color long format.</p>\n     *\n     * <p>When converting several colors in a row, this method is preferable to\n     * {@link #convert(long, ColorSpace)} as it prevents a new connector from being\n     * created on every invocation.</p>\n     *\n     * <p class=\"note\">The connector's source color space should match the color long's\n     * color space.</p>\n     *\n     * @param color The color long to convert\n     * @param connector A color space connector, cannot be null\n     * @return A color long in the destination color space of the connector\n     ",
    "links" : [ "ColorSpace.Connector", "#convert" ]
  }, {
    "name" : "public static long convert(float r, float g, float b, float a, @NonNull ColorSpace.Connector connector)",
    "returnType" : "long",
    "comment" : "\n     * <p>Converts the specified 3 component color from a color space to another using\n     * the specified color space {@link ColorSpace.Connector connector}. The resulting\n     * color is returned as a color long. See the documentation of this class for a\n     * description of the color long format.</p>\n     *\n     * <p>When converting several colors in a row, this method is preferable to\n     * {@link #convert(float, float, float, float, ColorSpace, ColorSpace)} as\n     * it prevents a new connector from being created on every invocation.</p>\n     *\n     * <p>The red, green and blue components must be in the range defined by the\n     * source color space of the connector. See {@link ColorSpace#getMinValue(int)}\n     * and {@link ColorSpace#getMaxValue(int)}.</p>\n     *\n     * @param r The red component of the color to convert\n     * @param g The green component of the color to convert\n     * @param b The blue component of the color to convert\n     * @param a The alpha component of the color to convert, in \\([0..1]\\)\n     * @param connector A color space connector, cannot be null\n     * @return A color long in the destination color space of the connector\n     *\n     * @see #convert(float, float, float, float, ColorSpace, ColorSpace)\n     ",
    "links" : [ "ColorSpace.Connector", "#convert", "ColorSpace#getMinValue", "ColorSpace#getMaxValue" ]
  }, {
    "name" : "public static float luminance(@ColorLong long color)",
    "returnType" : "float",
    "comment" : "\n     * <p>Returns the relative luminance of a color.</p>\n     *\n     * <p>Based on the formula for relative luminance defined in WCAG 2.0,\n     * W3C Recommendation 11 December 2008.</p>\n     *\n     * @return A value between 0 (darkest black) and 1 (lightest white)\n     *\n     * @throws IllegalArgumentException If the specified color's color space\n     * is unknown or does not use the {@link ColorSpace.Model#RGB RGB} color model\n     ",
    "links" : [ "ColorSpace.Model#RGB" ]
  }, {
    "name" : "private static float saturate(float v)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int alpha(int color)",
    "returnType" : "int",
    "comment" : "\n     * Return the alpha component of a color int. This is the same as saying\n     * color >>> 24\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int red(int color)",
    "returnType" : "int",
    "comment" : "\n     * Return the red component of a color int. This is the same as saying\n     * (color >> 16) & 0xFF\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int green(int color)",
    "returnType" : "int",
    "comment" : "\n     * Return the green component of a color int. This is the same as saying\n     * (color >> 8) & 0xFF\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int blue(int color)",
    "returnType" : "int",
    "comment" : "\n     * Return the blue component of a color int. This is the same as saying\n     * color & 0xFF\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int rgb(@IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue)",
    "returnType" : "int",
    "comment" : "\n     * Return a color-int from red, green, blue components.\n     * The alpha component is implicitly 255 (fully opaque).\n     * These component values should be \\([0..255]\\), but there is no\n     * range check performed, so if they are out of range, the\n     * returned color is undefined.\n     *\n     * @param red  Red component \\([0..255]\\) of the color\n     * @param green Green component \\([0..255]\\) of the color\n     * @param blue  Blue component \\([0..255]\\) of the color\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int rgb(float red, float green, float blue)",
    "returnType" : "int",
    "comment" : "\n     * Return a color-int from red, green, blue float components\n     * in the range \\([0..1]\\). The alpha component is implicitly\n     * 1.0 (fully opaque). If the components are out of range, the\n     * returned color is undefined.\n     *\n     * @param red Red component \\([0..1]\\) of the color\n     * @param green Green component \\([0..1]\\) of the color\n     * @param blue Blue component \\([0..1]\\) of the color\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int argb(@IntRange(from = 0, to = 255) int alpha, @IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue)",
    "returnType" : "int",
    "comment" : "\n     * Return a color-int from alpha, red, green, blue components.\n     * These component values should be \\([0..255]\\), but there is no\n     * range check performed, so if they are out of range, the\n     * returned color is undefined.\n     * @param alpha Alpha component \\([0..255]\\) of the color\n     * @param red Red component \\([0..255]\\) of the color\n     * @param green Green component \\([0..255]\\) of the color\n     * @param blue Blue component \\([0..255]\\) of the color\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int argb(float alpha, float red, float green, float blue)",
    "returnType" : "int",
    "comment" : "\n     * Return a color-int from alpha, red, green, blue float components\n     * in the range \\([0..1]\\). If the components are out of range, the\n     * returned color is undefined.\n     *\n     * @param alpha Alpha component \\([0..1]\\) of the color\n     * @param red Red component \\([0..1]\\) of the color\n     * @param green Green component \\([0..1]\\) of the color\n     * @param blue Blue component \\([0..1]\\) of the color\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float luminance(@ColorInt int color)",
    "returnType" : "float",
    "comment" : "\n     * Returns the relative luminance of a color.\n     * <p>\n     * Assumes sRGB encoding. Based on the formula for relative luminance\n     * defined in WCAG 2.0, W3C Recommendation 11 December 2008.\n     *\n     * @return a value between 0 (darkest black) and 1 (lightest white)\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int parseColor(@Size(min = 1) String colorString)",
    "returnType" : "int",
    "comment" : "\n     * </p>Parse the color string, and return the corresponding color-int.\n     * If the string cannot be parsed, throws an IllegalArgumentException\n     * exception. Supported formats are:</p>\n     *\n     * <ul>\n     *   <li><code>#RRGGBB</code></li>\n     *   <li><code>#AARRGGBB</code></li>\n     * </ul>\n     *\n     * <p>The following names are also accepted: <code>red</code>, <code>blue</code>,\n     * <code>green</code>, <code>black</code>, <code>white</code>, <code>gray</code>,\n     * <code>cyan</code>, <code>magenta</code>, <code>yellow</code>, <code>lightgray</code>,\n     * <code>darkgray</code>, <code>grey</code>, <code>lightgrey</code>, <code>darkgrey</code>,\n     * <code>aqua</code>, <code>fuchsia</code>, <code>lime</code>, <code>maroon</code>,\n     * <code>navy</code>, <code>olive</code>, <code>purple</code>, <code>silver</code>,\n     * and <code>teal</code>.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void RGBToHSV(@IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue, @Size(3) float[] hsv)",
    "returnType" : "void",
    "comment" : "\n     * Convert RGB components to HSV.\n     * <ul>\n     *   <li><code>hsv[0]</code> is Hue \\([0..360[\\)</li>\n     *   <li><code>hsv[1]</code> is Saturation \\([0...1]\\)</li>\n     *   <li><code>hsv[2]</code> is Value \\([0...1]\\)</li>\n     * </ul>\n     * @param red  red component value \\([0..255]\\)\n     * @param green  green component value \\([0..255]\\)\n     * @param blue  blue component value \\([0..255]\\)\n     * @param hsv  3 element array which holds the resulting HSV components.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void colorToHSV(@ColorInt int color, @Size(3) float[] hsv)",
    "returnType" : "void",
    "comment" : "\n     * Convert the ARGB color to its HSV components.\n     * <ul>\n     *   <li><code>hsv[0]</code> is Hue \\([0..360[\\)</li>\n     *   <li><code>hsv[1]</code> is Saturation \\([0...1]\\)</li>\n     *   <li><code>hsv[2]</code> is Value \\([0...1]\\)</li>\n     * </ul>\n     * @param color the argb color to convert. The alpha component is ignored.\n     * @param hsv  3 element array which holds the resulting HSV components.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int HSVToColor(@Size(3) float[] hsv)",
    "returnType" : "int",
    "comment" : "\n     * Convert HSV components to an ARGB color. Alpha set to 0xFF.\n     * <ul>\n     *   <li><code>hsv[0]</code> is Hue \\([0..360[\\)</li>\n     *   <li><code>hsv[1]</code> is Saturation \\([0...1]\\)</li>\n     *   <li><code>hsv[2]</code> is Value \\([0...1]\\)</li>\n     * </ul>\n     * If hsv values are out of range, they are pinned.\n     * @param hsv  3 element array which holds the input HSV components.\n     * @return the resulting argb color\n    ",
    "links" : [ ]
  }, {
    "name" : "public static int HSVToColor(@IntRange(from = 0, to = 255) int alpha, @Size(3) float[] hsv)",
    "returnType" : "int",
    "comment" : "\n     * Convert HSV components to an ARGB color. The alpha component is passed\n     * through unchanged.\n     * <ul>\n     *   <li><code>hsv[0]</code> is Hue \\([0..360[\\)</li>\n     *   <li><code>hsv[1]</code> is Saturation \\([0...1]\\)</li>\n     *   <li><code>hsv[2]</code> is Value \\([0...1]\\)</li>\n     * </ul>\n     * If hsv values are out of range, they are pinned.\n     * @param alpha the alpha component of the returned argb color.\n     * @param hsv  3 element array which holds the input HSV components.\n     * @return the resulting argb color\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeRGBToHSV(int red, int greed, int blue, float[] hsv)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeHSVToColor(int alpha, float[] hsv)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getHtmlColor(@NonNull String color)",
    "returnType" : "int",
    "comment" : "\n     * Converts an HTML color (named or numeric) to an integer RGB value.\n     *\n     * @param color Non-null color string.\n     *\n     * @return A color value, or {@code -1} if the color string could not be interpreted.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "BLACK", "DKGRAY", "GRAY", "LTGRAY", "WHITE", "RED", "GREEN", "BLUE", "YELLOW", "CYAN", "MAGENTA", "TRANSPARENT", "mComponents", "mColorSpace", "sColorNameMap" ],
  "methodNames" : [ "public ColorSpace getColorSpace()", "public ColorSpace.Model getModel()", "public boolean isWideGamut()", "public boolean isSrgb()", "public int getComponentCount()", "public long pack()", "public Color convert(@NonNull ColorSpace colorSpace)", "public int toArgb()", "public float red()", "public float green()", "public float blue()", "public float alpha()", "public float[] getComponents()", "public float[] getComponents(@Nullable @Size(min = 4) float[] components)", "public float getComponent(@IntRange(from = 0, to = 4) int component)", "public float luminance()", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public static ColorSpace colorSpace(@ColorLong long color)", "public static float red(@ColorLong long color)", "public static float green(@ColorLong long color)", "public static float blue(@ColorLong long color)", "public static float alpha(@ColorLong long color)", "public static boolean isSrgb(@ColorLong long color)", "public static boolean isWideGamut(@ColorLong long color)", "public static boolean isInColorSpace(@ColorLong long color, @NonNull ColorSpace colorSpace)", "public static int toArgb(@ColorLong long color)", "public static Color valueOf(@ColorInt int color)", "public static Color valueOf(@ColorLong long color)", "public static Color valueOf(float r, float g, float b)", "public static Color valueOf(float r, float g, float b, float a)", "public static Color valueOf(float r, float g, float b, float a, @NonNull ColorSpace colorSpace)", "public static Color valueOf(@NonNull @Size(min = 4, max = 5) float[] components, @NonNull ColorSpace colorSpace)", "public static long pack(@ColorInt int color)", "public static long pack(float red, float green, float blue)", "public static long pack(float red, float green, float blue, float alpha)", "public static long pack(float red, float green, float blue, float alpha, @NonNull ColorSpace colorSpace)", "public static long convert(@ColorInt int color, @NonNull ColorSpace colorSpace)", "public static long convert(@ColorLong long color, @NonNull ColorSpace colorSpace)", "public static long convert(float r, float g, float b, float a, @NonNull ColorSpace source, @NonNull ColorSpace destination)", "public static long convert(@ColorLong long color, @NonNull ColorSpace.Connector connector)", "public static long convert(float r, float g, float b, float a, @NonNull ColorSpace.Connector connector)", "public static float luminance(@ColorLong long color)", "private static float saturate(float v)", "public static int alpha(int color)", "public static int red(int color)", "public static int green(int color)", "public static int blue(int color)", "public static int rgb(@IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue)", "public static int rgb(float red, float green, float blue)", "public static int argb(@IntRange(from = 0, to = 255) int alpha, @IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue)", "public static int argb(float alpha, float red, float green, float blue)", "public static float luminance(@ColorInt int color)", "public static int parseColor(@Size(min = 1) String colorString)", "public static void RGBToHSV(@IntRange(from = 0, to = 255) int red, @IntRange(from = 0, to = 255) int green, @IntRange(from = 0, to = 255) int blue, @Size(3) float[] hsv)", "public static void colorToHSV(@ColorInt int color, @Size(3) float[] hsv)", "public static int HSVToColor(@Size(3) float[] hsv)", "public static int HSVToColor(@IntRange(from = 0, to = 255) int alpha, @Size(3) float[] hsv)", "private static native void nativeRGBToHSV(int red, int greed, int blue, float[] hsv)", "private static native int nativeHSVToColor(int alpha, float[] hsv)", "public static int getHtmlColor(@NonNull String color)" ]
}