{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/renderscript/Matrix4f.java",
  "packageName" : "android.renderscript",
  "className" : "Matrix4f",
  "comment" : "\n * Class for exposing the native RenderScript rs_matrix4x4 type back to the Android system.\n *\n *",
  "variables" : [ {
    "name" : "mMat",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public float[] getArray()",
    "returnType" : "float[]",
    "comment" : "\n    * Return a reference to the internal array representing matrix\n    * values. Modifying this array will also change the matrix\n    *\n    * @return internal array representing the matrix\n    ",
    "links" : [ ]
  }, {
    "name" : "public float get(int x, int y)",
    "returnType" : "float",
    "comment" : "\n    * Returns the value for a given row and column\n    *\n    * @param x column of the value to return\n    * @param y row of the value to return\n    *\n    * @return value in the yth row and xth column\n    ",
    "links" : [ ]
  }, {
    "name" : "public void set(int x, int y, float v)",
    "returnType" : "void",
    "comment" : "\n    * Sets the value for a given row and column\n    *\n    * @param x column of the value to set\n    * @param y row of the value to set\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadIdentity()",
    "returnType" : "void",
    "comment" : "\n    * Sets the matrix values to identity\n    ",
    "links" : [ ]
  }, {
    "name" : "public void load(Matrix4f src)",
    "returnType" : "void",
    "comment" : "\n    * Sets the values of the matrix to those of the parameter\n    *\n    * @param src matrix to load the values from\n    ",
    "links" : [ ]
  }, {
    "name" : "public void load(Matrix3f src)",
    "returnType" : "void",
    "comment" : "\n    * Sets the values of the matrix to those of the parameter\n    *\n    * @param src matrix to load the values from\n    * @hide\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadRotate(float rot, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be a rotation matrix of certain angle\n    * about a given axis\n    *\n    * @param rot angle of rotation\n    * @param x rotation axis x\n    * @param y rotation axis y\n    * @param z rotation axis z\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadScale(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be a scale matrix of given dimensions\n    *\n    * @param x scale component x\n    * @param y scale component y\n    * @param z scale component z\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadTranslate(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be a translation matrix of given\n    * dimensions\n    *\n    * @param x translation component x\n    * @param y translation component y\n    * @param z translation component z\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadMultiply(Matrix4f lhs, Matrix4f rhs)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be the result of multiplying two given\n    * matrices\n    *\n    * @param lhs left hand side matrix\n    * @param rhs right hand side matrix\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadOrtho(float l, float r, float b, float t, float n, float f)",
    "returnType" : "void",
    "comment" : "\n    * Set current values to be an orthographic projection matrix\n    *\n    * @param l location of the left vertical clipping plane\n    * @param r location of the right vertical clipping plane\n    * @param b location of the bottom horizontal clipping plane\n    * @param t location of the top horizontal clipping plane\n    * @param n location of the near clipping plane\n    * @param f location of the far clipping plane\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadOrthoWindow(int w, int h)",
    "returnType" : "void",
    "comment" : "\n    * Set current values to be an orthographic projection matrix\n    * with the right and bottom clipping planes set to the given\n    * values. Left and top clipping planes are set to 0. Near and\n    * far are set to -1, 1 respectively\n    *\n    * @param w location of the right vertical clipping plane\n    * @param h location of the bottom horizontal clipping plane\n    *\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadFrustum(float l, float r, float b, float t, float n, float f)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be a perspective projection matrix\n    *\n    * @param l location of the left vertical clipping plane\n    * @param r location of the right vertical clipping plane\n    * @param b location of the bottom horizontal clipping plane\n    * @param t location of the top horizontal clipping plane\n    * @param n location of the near clipping plane, must be positive\n    * @param f location of the far clipping plane, must be positive\n    *\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadPerspective(float fovy, float aspect, float near, float far)",
    "returnType" : "void",
    "comment" : "\n    * Sets current values to be a perspective projection matrix\n    *\n    * @param fovy vertical field of view angle in degrees\n    * @param aspect aspect ratio of the screen\n    * @param near near cliping plane, must be positive\n    * @param far far clipping plane, must be positive\n    ",
    "links" : [ ]
  }, {
    "name" : "public void loadProjectionNormalized(int w, int h)",
    "returnType" : "void",
    "comment" : "\n    * Helper function to set the current values to a perspective\n    * projection matrix with aspect ratio defined by the parameters\n    * and (near, far), (bottom, top) mapping to (-1, 1) at z = 0\n    *\n    * @param w screen width\n    * @param h screen height\n    ",
    "links" : [ ]
  }, {
    "name" : "public void multiply(Matrix4f rhs)",
    "returnType" : "void",
    "comment" : "\n    * Post-multiplies the current matrix by a given parameter\n    *\n    * @param rhs right hand side to multiply by\n    ",
    "links" : [ ]
  }, {
    "name" : "public void rotate(float rot, float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Modifies the current matrix by post-multiplying it with a\n    * rotation matrix of certain angle about a given axis\n    *\n    * @param rot angle of rotation\n    * @param x rotation axis x\n    * @param y rotation axis y\n    * @param z rotation axis z\n    ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Modifies the current matrix by post-multiplying it with a\n    * scale matrix of given dimensions\n    *\n    * @param x scale component x\n    * @param y scale component y\n    * @param z scale component z\n    ",
    "links" : [ ]
  }, {
    "name" : "public void translate(float x, float y, float z)",
    "returnType" : "void",
    "comment" : "\n    * Modifies the current matrix by post-multiplying it with a\n    * translation matrix of given dimensions\n    *\n    * @param x translation component x\n    * @param y translation component y\n    * @param z translation component z\n    ",
    "links" : [ ]
  }, {
    "name" : "private float computeCofactor(int i, int j)",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean inverse()",
    "returnType" : "boolean",
    "comment" : "\n    * Sets the current matrix to its inverse\n    ",
    "links" : [ ]
  }, {
    "name" : "public boolean inverseTranspose()",
    "returnType" : "boolean",
    "comment" : "\n    * Sets the current matrix to its inverse transpose\n    ",
    "links" : [ ]
  }, {
    "name" : "public void transpose()",
    "returnType" : "void",
    "comment" : "\n    * Sets the current matrix to its transpose\n    ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mMat" ],
  "methodNames" : [ "public float[] getArray()", "public float get(int x, int y)", "public void set(int x, int y, float v)", "public void loadIdentity()", "public void load(Matrix4f src)", "public void load(Matrix3f src)", "public void loadRotate(float rot, float x, float y, float z)", "public void loadScale(float x, float y, float z)", "public void loadTranslate(float x, float y, float z)", "public void loadMultiply(Matrix4f lhs, Matrix4f rhs)", "public void loadOrtho(float l, float r, float b, float t, float n, float f)", "public void loadOrthoWindow(int w, int h)", "public void loadFrustum(float l, float r, float b, float t, float n, float f)", "public void loadPerspective(float fovy, float aspect, float near, float far)", "public void loadProjectionNormalized(int w, int h)", "public void multiply(Matrix4f rhs)", "public void rotate(float rot, float x, float y, float z)", "public void scale(float x, float y, float z)", "public void translate(float x, float y, float z)", "private float computeCofactor(int i, int j)", "public boolean inverse()", "public boolean inverseTranspose()", "public void transpose()" ]
}