{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/util/IntArray.java",
  "packageName" : "android.util",
  "className" : "IntArray",
  "comment" : "\n * Implements a growing array of int primitives.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "MIN_CAPACITY_INCREMENT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mValues",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static IntArray wrap(int[] array)",
    "returnType" : "IntArray",
    "comment" : "\n     * Creates an IntArray wrapping the given primitive int array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static IntArray fromArray(int[] array, int size)",
    "returnType" : "IntArray",
    "comment" : "\n     * Creates an IntArray from the given primitive int array, copying it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resize(int newSize)",
    "returnType" : "void",
    "comment" : "\n     * Changes the size of this IntArray. If this IntArray is shrinked, the backing array capacity\n     * is unchanged. If the new size is larger than backing array capacity, a new backing array is\n     * created from the current content of this IntArray padded with 0s.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int value)",
    "returnType" : "void",
    "comment" : "\n     * Appends the specified value to the end of this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Inserts a value at the specified position in this array. If the specified index is equal to\n     * the length of the array, the value is added at the end.\n     *\n     * @throws IndexOutOfBoundsException when index &lt; 0 || index &gt; size()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int binarySearch(int value)",
    "returnType" : "int",
    "comment" : "\n     * Searches the array for the specified value using the binary search algorithm. The array must\n     * be sorted (as by the {@link Arrays#sort(int[], int, int)} method) prior to making this call.\n     * If it is not sorted, the results are undefined. If the range contains multiple elements with\n     * the specified value, there is no guarantee which one will be found.\n     *\n     * @param value The value to search for.\n     * @return index of the search key, if it is contained in the array; otherwise, <i>(-(insertion\n     *         point) - 1)</i>. The insertion point is defined as the point at which the key would\n     *         be inserted into the array: the index of the first element greater than the key, or\n     *         {@link #size()} if all elements in the array are less than the specified key.\n     *         Note that this guarantees that the return value will be >= 0 if and only if the key\n     *         is found.\n     ",
    "links" : [ "Arrays#sort", "#size" ]
  }, {
    "name" : "public void addAll(IntArray values)",
    "returnType" : "void",
    "comment" : "\n     * Adds the values in the specified array to this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void ensureCapacity(int count)",
    "returnType" : "void",
    "comment" : "\n     * Ensures capacity to append at least <code>count</code> values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all values from this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IntArray clone() throws CloneNotSupportedException",
    "returnType" : "IntArray",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int get(int index)",
    "returnType" : "int",
    "comment" : "\n     * Returns the value at the specified position in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(int index, int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the value at the specified position in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int indexOf(int value)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified value in this\n     * array, or -1 if this array does not contain the value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the value at the specified index from this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of values in this array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] toArray()",
    "returnType" : "int[]",
    "comment" : "\n     * Returns a new array with the contents of this IntArray.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MIN_CAPACITY_INCREMENT", "mValues", "mSize" ],
  "methodNames" : [ "public static IntArray wrap(int[] array)", "public static IntArray fromArray(int[] array, int size)", "public void resize(int newSize)", "public void add(int value)", "public void add(int index, int value)", "public int binarySearch(int value)", "public void addAll(IntArray values)", "private void ensureCapacity(int count)", "public void clear()", "public IntArray clone() throws CloneNotSupportedException", "public int get(int index)", "public void set(int index, int value)", "public int indexOf(int value)", "public void remove(int index)", "public int size()", "public int[] toArray()" ]
}