{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/SoftApInfo.java",
  "packageName" : "android.net.wifi",
  "className" : "SoftApInfo",
  "comment" : "\n * A class representing information about a specific SoftAP instance. A SoftAP instance may be a\n * single band AP or a bridged AP (across multiple bands). To get the state of the AP interface\n * itself, use {@link android.net.wifi.WifiManager.SoftApCallback#onStateChanged(SoftApState)}.\n * {@see WifiManager}\n *\n * @hide\n ",
  "links" : [ "android.net.wifi.WifiManager.SoftApCallback#onStateChanged(SoftApState)" ],
  "variables" : [ {
    "name" : "CHANNEL_WIDTH_AUTO",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is automatically selected by the chip.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_INVALID",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is invalid.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ_NOHT",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 20 MHZ but no HT.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 20 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_40MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 40 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 80 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ_PLUS_MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_160MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 160 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_2160MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 2160 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_4320MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 4320 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_6480MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 6480 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_8640MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 8640 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_320MHZ",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth is 320 MHZ.\n     *\n     * @see #getBandwidth()\n     ",
    "links" : [ ]
  }, {
    "name" : "mFrequency",
    "type" : "int",
    "comment" : " The frequency which AP resides on.  ",
    "links" : [ ]
  }, {
    "name" : "mBandwidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBssid",
    "type" : "MacAddress",
    "comment" : " The MAC Address which AP resides on. ",
    "links" : [ ]
  }, {
    "name" : "mApInstanceIdentifier",
    "type" : "String",
    "comment" : " The identifier of the AP instance which AP resides on with current info. ",
    "links" : [ ]
  }, {
    "name" : "mWifiStandard",
    "type" : "int",
    "comment" : "\n     * The operational mode of the AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIdleShutdownTimeoutMillis",
    "type" : "long",
    "comment" : "\n     * The current shutdown timeout millis which applied on Soft AP.\n     ",
    "links" : [ ]
  }, {
    "name" : "mVendorData",
    "type" : "List<OuiKeyedData>",
    "comment" : " List of {@link OuiKeyedData} containing vendor-specific configuration data. ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<SoftApInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getFrequency()",
    "returnType" : "int",
    "comment" : "\n     * Get the frequency which AP resides on.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFrequency(int freq)",
    "returnType" : "void",
    "comment" : "\n     * Set the frequency which AP resides on.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBandwidth()",
    "returnType" : "int",
    "comment" : "\n     * Get AP Channel bandwidth.\n     *\n     * @return One of {@link #CHANNEL_WIDTH_20MHZ}, {@link #CHANNEL_WIDTH_40MHZ},\n     * {@link #CHANNEL_WIDTH_80MHZ}, {@link #CHANNEL_WIDTH_160MHZ},\n     * {@link #CHANNEL_WIDTH_80MHZ_PLUS_MHZ}, {@link #CHANNEL_WIDTH_320MHZ},\n     * {@link #CHANNEL_WIDTH_2160MHZ}, {@link #CHANNEL_WIDTH_4320MHZ},\n     * {@link #CHANNEL_WIDTH_6480MHZ}, {@link #CHANNEL_WIDTH_8640MHZ},\n     * {@link #CHANNEL_WIDTH_AUTO} ,or {@link #CHANNEL_WIDTH_INVALID}.\n     ",
    "links" : [ "#CHANNEL_WIDTH_4320MHZ", "#CHANNEL_WIDTH_2160MHZ", "#CHANNEL_WIDTH_80MHZ", "#CHANNEL_WIDTH_8640MHZ", "#CHANNEL_WIDTH_AUTO", "#CHANNEL_WIDTH_40MHZ", "#CHANNEL_WIDTH_160MHZ", "#CHANNEL_WIDTH_20MHZ", "#CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "#CHANNEL_WIDTH_320MHZ", "#CHANNEL_WIDTH_6480MHZ", "#CHANNEL_WIDTH_INVALID" ]
  }, {
    "name" : "public void setBandwidth(@WifiAnnotations.Bandwidth int bandwidth)",
    "returnType" : "void",
    "comment" : "\n     * Set AP Channel bandwidth.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getBssid()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Get the MAC address (BSSID) of the AP. Null when AP disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getBssidInternal()",
    "returnType" : "MacAddress",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBssid(@Nullable MacAddress bssid)",
    "returnType" : "void",
    "comment" : "\n      * Set the MAC address which AP resides on.\n      * <p>\n      * <li>If not set, defaults to null.</li>\n      * @param bssid BSSID, The caller is responsible for avoiding collisions.\n      * @throws IllegalArgumentException when the given BSSID is the all-zero or broadcast MAC\n      *                                  address.\n      *\n      * @hide\n      ",
    "links" : [ ]
  }, {
    "name" : "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)",
    "returnType" : "void",
    "comment" : "\n     * Set the operational mode of the AP.\n     *\n     * @param wifiStandard values from {@link ScanResult}'s {@code WIFI_STANDARD_}\n     * @hide\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public int getWifiStandard()",
    "returnType" : "int",
    "comment" : "\n     * Get the operational mode of the AP.\n     * @return valid values from {@link ScanResult}'s {@code WIFI_STANDARD_}\n     ",
    "links" : [ "android.net.wifi.ScanResult" ]
  }, {
    "name" : "public int getWifiStandardInternal()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApInstanceIdentifier(@NonNull String apInstanceIdentifier)",
    "returnType" : "void",
    "comment" : "\n     * Set the AP instance identifier.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getApInstanceIdentifier()",
    "returnType" : "String",
    "comment" : "\n     * Get the AP instance identifier.\n     *\n     * The AP instance identifier is a unique identity which can be used to\n     * associate the {@link SoftApInfo} to a specific {@link WifiClient}\n     * - see {@link WifiClient#getApInstanceIdentifier()}\n     *\n     * @hide\n     ",
    "links" : [ "android.net.wifi.WifiClient#getApInstanceIdentifier()", "android.net.wifi.WifiClient", "android.net.wifi.SoftApInfo" ]
  }, {
    "name" : "public void setAutoShutdownTimeoutMillis(long idleShutdownTimeoutMillis)",
    "returnType" : "void",
    "comment" : "\n     * Set current shutdown timeout millis which applied on Soft AP.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getAutoShutdownTimeoutMillis()",
    "returnType" : "long",
    "comment" : "\n     * Get auto shutdown timeout in millis.\n     *\n     * The shutdown timeout value is configured by\n     * {@link SoftApConfiguration.Builder#setAutoShutdownEnabled(int)} or\n     * the default timeout setting defined in device overlays.\n     *\n     * A value of 0 means that auto shutdown is disabled.\n     * {@see SoftApConfiguration#isAutoShutdownEnabled()}\n     ",
    "links" : [ "SoftApConfiguration.Builder#setAutoShutdownEnabled(int)" ]
  }, {
    "name" : "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)",
    "returnType" : "void",
    "comment" : "\n     * Set additional vendor-provided configuration data.\n     *\n     * @param vendorData List of {@link android.net.wifi.OuiKeyedData} containing the\n     *                   vendor-provided configuration data. Note that multiple elements with\n     *                   the same OUI are allowed.\n     * @hide\n     ",
    "links" : [ "android.net.wifi.OuiKeyedData" ]
  }, {
    "name" : "public List<OuiKeyedData> getVendorData()",
    "returnType" : "List<OuiKeyedData>",
    "comment" : "\n     * Get the vendor-provided configuration data, if it exists.\n     *\n     * @return Vendor configuration data, or empty list if it does not exist.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getFrequency()", "public void setFrequency(int freq)", "public int getBandwidth()", "public void setBandwidth(@WifiAnnotations.Bandwidth int bandwidth)", "public MacAddress getBssid()", "public MacAddress getBssidInternal()", "public void setBssid(@Nullable MacAddress bssid)", "public void setWifiStandard(@WifiAnnotations.WifiStandard int wifiStandard)", "public int getWifiStandard()", "public int getWifiStandardInternal()", "public void setApInstanceIdentifier(@NonNull String apInstanceIdentifier)", "public String getApInstanceIdentifier()", "public void setAutoShutdownTimeoutMillis(long idleShutdownTimeoutMillis)", "public long getAutoShutdownTimeoutMillis()", "public void setVendorData(@NonNull List<OuiKeyedData> vendorData)", "public List<OuiKeyedData> getVendorData()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public String toString()", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "CHANNEL_WIDTH_AUTO", "CHANNEL_WIDTH_INVALID", "CHANNEL_WIDTH_20MHZ_NOHT", "CHANNEL_WIDTH_20MHZ", "CHANNEL_WIDTH_40MHZ", "CHANNEL_WIDTH_80MHZ", "CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "CHANNEL_WIDTH_160MHZ", "CHANNEL_WIDTH_2160MHZ", "CHANNEL_WIDTH_4320MHZ", "CHANNEL_WIDTH_6480MHZ", "CHANNEL_WIDTH_8640MHZ", "CHANNEL_WIDTH_320MHZ", "mFrequency", "mBandwidth", "mBssid", "mApInstanceIdentifier", "mWifiStandard", "mIdleShutdownTimeoutMillis", "mVendorData", "CREATOR" ]
}