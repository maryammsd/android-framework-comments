{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Typeface.java",
  "packageName" : "android.graphics",
  "className" : "Builder",
  "comment" : "\n     * A builder class for creating new Typeface instance.\n     *\n     * <p>\n     * Examples,\n     * 1) Create Typeface from ttf file.\n     * <pre>\n     * <code>\n     * Typeface.Builder buidler = new Typeface.Builder(\"your_font_file.ttf\");\n     * Typeface typeface = builder.build();\n     * </code>\n     * </pre>\n     *\n     * 2) Create Typeface from ttc file in assets directory.\n     * <pre>\n     * <code>\n     * Typeface.Builder buidler = new Typeface.Builder(getAssets(), \"your_font_file.ttc\");\n     * builder.setTtcIndex(2);  // Set index of font collection.\n     * Typeface typeface = builder.build();\n     * </code>\n     * </pre>\n     *\n     * 3) Create Typeface with variation settings.\n     * <pre>\n     * <code>\n     * Typeface.Builder buidler = new Typeface.Builder(\"your_font_file.ttf\");\n     * builder.setFontVariationSettings(\"'wght' 700, 'slnt' 20, 'ital' 1\");\n     * builder.setWeight(700);  // Tell the system that this is a bold font.\n     * builder.setItalic(true);  // Tell the system that this is an italic style font.\n     * Typeface typeface = builder.build();\n     * </code>\n     * </pre>\n     * </p>\n     ",
  "variables" : [ {
    "name" : "NORMAL_WEIGHT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "BOLD_WEIGHT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mAssetManager",
    "type" : "AssetManager",
    "comment" : " Kept for generating asset cache key.",
    "links" : [ ]
  }, {
    "name" : "mPath",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFontBuilder",
    "type" : "Font.Builder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFallbackFamilyName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mItalic",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder setWeight(@IntRange(from = 1, to = 1000) int weight)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets weight of the font.\n         *\n         * Tells the system the weight of the given font. If not provided, the system will resolve\n         * the weight value by reading font tables.\n         * @param weight a weight value.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setItalic(boolean italic)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets italic information of the font.\n         *\n         * Tells the system the style of the given font. If not provided, the system will resolve\n         * the style by reading font tables.\n         * @param italic {@code true} if the font is italic. Otherwise {@code false}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setTtcIndex(@IntRange(from = 0) int ttcIndex)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets an index of the font collection. See {@link android.R.attr#ttcIndex}.\n         *\n         * Can not be used for Typeface source. build() method will return null for invalid index.\n         * @param ttcIndex An index of the font collection. If the font source is not font\n         *                 collection, do not call this method or specify 0.\n         ",
    "links" : [ "android.R.attr#ttcIndex" ]
  }, {
    "name" : "public Builder setFontVariationSettings(@Nullable String variationSettings)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a font variation settings.\n         *\n         * @param variationSettings See {@link android.widget.TextView#setFontVariationSettings}.\n         * @throws IllegalArgumentException If given string is not a valid font variation settings\n         *                                  format.\n         ",
    "links" : [ "android.widget.TextView#setFontVariationSettings" ]
  }, {
    "name" : "public Builder setFontVariationSettings(@Nullable FontVariationAxis[] axes)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a font variation settings.\n         *\n         * @param axes An array of font variation axis tag-value pairs.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setFallback(@Nullable String familyName)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets a fallback family name.\n         *\n         * By specifying a fallback family name, a fallback Typeface will be returned if the\n         * {@link #build} method fails to create a Typeface from the provided font. The fallback\n         * family will be resolved with the provided weight and italic information specified by\n         * {@link #setWeight} and {@link #setItalic}.\n         *\n         * If {@link #setWeight} is not called, the fallback family keeps the default weight.\n         * Similary, if {@link #setItalic} is not called, the fallback family keeps the default\n         * italic information. For example, calling {@code builder.setFallback(\"sans-serif-light\")}\n         * is equivalent to calling {@code builder.setFallback(\"sans-serif\").setWeight(300)} in\n         * terms of fallback. The default weight and italic information are overridden by calling\n         * {@link #setWeight} and {@link #setItalic}. For example, if a Typeface is constructed\n         * using {@code builder.setFallback(\"sans-serif-light\").setWeight(700)}, the fallback text\n         * will render as sans serif bold.\n         *\n         * @param familyName A family name to be used for fallback if the provided font can not be\n         *                   used. By passing {@code null}, build() returns {@code null}.\n         *                   If {@link #setFallback} is not called on the builder, {@code null}\n         *                   is assumed.\n         ",
    "links" : [ "#build", "#setWeight", "#setItalic", "#setWeight", "#setItalic", "#setWeight", "#setItalic", "#setFallback" ]
  }, {
    "name" : "private static String createAssetUid(final AssetManager mgr, String path, int ttcIndex, @Nullable FontVariationAxis[] axes, int weight, int italic, String fallback)",
    "returnType" : "String",
    "comment" : "\n         * Creates a unique id for a given AssetManager and asset path.\n         *\n         * @param mgr  AssetManager instance\n         * @param path The path for the asset.\n         * @param ttcIndex The TTC index for the font.\n         * @param axes The font variation settings.\n         * @return Unique id for a given AssetManager and asset path.\n         ",
    "links" : [ ]
  }, {
    "name" : "private Typeface resolveFallbackTypeface()",
    "returnType" : "Typeface",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Typeface build()",
    "returnType" : "Typeface",
    "comment" : "\n         * Generates new Typeface from specified configuration.\n         *\n         * @return Newly created Typeface. May return null if some parameters are invalid.\n         ",
    "links" : [ ]
  } ],
  "variableNames" : [ "NORMAL_WEIGHT", "BOLD_WEIGHT", "mAssetManager", "mPath", "mFontBuilder", "mFallbackFamilyName", "mWeight", "mItalic" ],
  "methodNames" : [ "public Builder setWeight(@IntRange(from = 1, to = 1000) int weight)", "public Builder setItalic(boolean italic)", "public Builder setTtcIndex(@IntRange(from = 0) int ttcIndex)", "public Builder setFontVariationSettings(@Nullable String variationSettings)", "public Builder setFontVariationSettings(@Nullable FontVariationAxis[] axes)", "public Builder setFallback(@Nullable String familyName)", "private static String createAssetUid(final AssetManager mgr, String path, int ttcIndex, @Nullable FontVariationAxis[] axes, int weight, int italic, String fallback)", "private Typeface resolveFallbackTypeface()", "public Typeface build()" ]
}