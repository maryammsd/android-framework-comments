{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/TimePicker.java",
  "packageName" : "android.widget",
  "className" : "TimePicker",
  "comment" : "\n * A widget for selecting the time of day, in either 24-hour or AM/PM mode.\n * <p>\n * For a dialog using this view, see {@link android.app.TimePickerDialog}. See\n * the <a href=\"{@docRoot}guide/topics/ui/controls/pickers.html\">Pickers</a>\n * guide for more information.\n *\n * @attr ref android.R.styleable#TimePicker_timePickerMode\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MODE_SPINNER",
    "type" : "int",
    "comment" : "\n     * Presentation mode for the Holo-style time picker that uses a set of\n     * {@link android.widget.NumberPicker}s.\n     *\n     * @see #getMode()\n     * @hide Visible for testing only.\n     ",
    "links" : [ "android.widget.NumberPicker" ]
  }, {
    "name" : "MODE_CLOCK",
    "type" : "int",
    "comment" : "\n     * Presentation mode for the Material-style time picker that uses a clock\n     * face.\n     *\n     * @see #getMode()\n     * @hide Visible for testing only.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDelegate",
    "type" : "TimePickerDelegate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getMode()",
    "returnType" : "int",
    "comment" : "\n     * @return the picker's presentation mode, one of {@link #MODE_CLOCK} or\n     *         {@link #MODE_SPINNER}\n     * @attr ref android.R.styleable#TimePicker_timePickerMode\n     * @hide Visible for testing only.\n     ",
    "links" : [ "#MODE_SPINNER", "#MODE_CLOCK" ]
  }, {
    "name" : "public void setHour(@IntRange(from = 0, to = 23) int hour)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected hour using 24-hour time.\n     *\n     * @param hour the hour to set, in the range (0-23)\n     * @see #getHour()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getHour()",
    "returnType" : "int",
    "comment" : "\n     * Returns the currently selected hour using 24-hour time.\n     *\n     * @return the currently selected hour, in the range (0-23)\n     * @see #setHour(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMinute(@IntRange(from = 0, to = 59) int minute)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected minute.\n     *\n     * @param minute the minute to set, in the range (0-59)\n     * @see #getMinute()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMinute()",
    "returnType" : "int",
    "comment" : "\n     * Returns the currently selected minute.\n     *\n     * @return the currently selected minute, in the range (0-59)\n     * @see #setMinute(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentHour(@NonNull Integer currentHour)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected hour using 24-hour time.\n     *\n     * @param currentHour the hour to set, in the range (0-23)\n     * @deprecated Use {@link #setHour(int)}\n     ",
    "links" : [ "#setHour(int)" ]
  }, {
    "name" : "public Integer getCurrentHour()",
    "returnType" : "Integer",
    "comment" : "\n     * @return the currently selected hour, in the range (0-23)\n     * @deprecated Use {@link #getHour()}\n     ",
    "links" : [ "#getHour()" ]
  }, {
    "name" : "public void setCurrentMinute(@NonNull Integer currentMinute)",
    "returnType" : "void",
    "comment" : "\n     * Sets the currently selected minute.\n     *\n     * @param currentMinute the minute to set, in the range (0-59)\n     * @deprecated Use {@link #setMinute(int)}\n     ",
    "links" : [ "#setMinute(int)" ]
  }, {
    "name" : "public Integer getCurrentMinute()",
    "returnType" : "Integer",
    "comment" : "\n     * @return the currently selected minute, in the range (0-59)\n     * @deprecated Use {@link #getMinute()}\n     ",
    "links" : [ "#getMinute()" ]
  }, {
    "name" : "public void setIs24HourView(@NonNull Boolean is24HourView)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether this widget displays time in 24-hour mode or 12-hour mode\n     * with an AM/PM picker.\n     *\n     * @param is24HourView {@code true} to display in 24-hour mode,\n     *                     {@code false} for 12-hour mode with AM/PM\n     * @see #is24HourView()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24HourView()",
    "returnType" : "boolean",
    "comment" : "\n     * @return {@code true} if this widget displays time in 24-hour mode,\n     *         {@code false} otherwise}\n     * @see #setIs24HourView(Boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOnTimeChangedListener(OnTimeChangedListener onTimeChangedListener)",
    "returnType" : "void",
    "comment" : "\n     * Set the callback that indicates the time has been adjusted by the user.\n     *\n     * @param onTimeChangedListener the callback, should not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getBaseline()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validateInput()",
    "returnType" : "boolean",
    "comment" : "\n     * Validates whether current input by the user is a valid time based on the locale. TimePicker\n     * will show an error message to the user if the time is not valid.\n     *\n     * @return {@code true} if the input is valid, {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "protected Parcelable onSaveInstanceState()",
    "returnType" : "Parcelable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onRestoreInstanceState(Parcelable state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getAccessibilityClassName()",
    "returnType" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getHourView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getMinuteView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getAmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public View getPmView()",
    "returnType" : "View",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " static String[] getAmPmStrings(Context context)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dispatchProvideAutofillStructure(ViewStructure structure, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void autofill(AutofillValue value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAutofillType()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AutofillValue getAutofillValue()",
    "returnType" : "AutofillValue",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "MODE_SPINNER", "MODE_CLOCK", "mDelegate", "mMode" ],
  "methodNames" : [ "public int getMode()", "public void setHour(@IntRange(from = 0, to = 23) int hour)", "public int getHour()", "public void setMinute(@IntRange(from = 0, to = 59) int minute)", "public int getMinute()", "public void setCurrentHour(@NonNull Integer currentHour)", "public Integer getCurrentHour()", "public void setCurrentMinute(@NonNull Integer currentMinute)", "public Integer getCurrentMinute()", "public void setIs24HourView(@NonNull Boolean is24HourView)", "public boolean is24HourView()", "public void setOnTimeChangedListener(OnTimeChangedListener onTimeChangedListener)", "public void setEnabled(boolean enabled)", "public boolean isEnabled()", "public int getBaseline()", "public boolean validateInput()", "protected Parcelable onSaveInstanceState()", "protected void onRestoreInstanceState(Parcelable state)", "public CharSequence getAccessibilityClassName()", "public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event)", "public View getHourView()", "public View getMinuteView()", "public View getAmView()", "public View getPmView()", " static String[] getAmPmStrings(Context context)", "public void dispatchProvideAutofillStructure(ViewStructure structure, int flags)", "public void autofill(AutofillValue value)", "public int getAutofillType()", "public AutofillValue getAutofillValue()" ]
}