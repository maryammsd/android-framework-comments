{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/ZoneRegion.java",
  "packageName" : "java.time",
  "className" : "ZoneRegion",
  "comment" : "\n * A geographical region where the same time-zone rules apply.\n * <p>\n * Time-zone information is categorized as a set of rules defining when and\n * how the offset from UTC/Greenwich changes. These rules are accessed using\n * identifiers based on geographical regions, such as countries or states.\n * The most common region classification is the Time Zone Database (TZDB),\n * which defines regions such as 'Europe/Paris' and 'Asia/Tokyo'.\n * <p>\n * The region identifier, modeled by this class, is distinct from the\n * underlying rules, modeled by {@link ZoneRules}.\n * The rules are defined by governments and change frequently.\n * By contrast, the region identifier is well-defined and long-lived.\n * This separation also allows rules to be shared between regions if appropriate.\n *\n * @implSpec\n * This class is immutable and thread-safe.\n *\n * @since 1.8\n ",
  "links" : [ "java.time.zone.ZoneRules" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "\n     * Serialization version.\n     ",
    "links" : [ ]
  }, {
    "name" : "id",
    "type" : "String",
    "comment" : "\n     * The time-zone ID, not null.\n     ",
    "links" : [ ]
  }, {
    "name" : "rules",
    "type" : "ZoneRules",
    "comment" : "\n     * The time-zone rules, null if zone ID was loaded leniently.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static ZoneRegion ofId(String zoneId, boolean checkAvailable)",
    "returnType" : "ZoneRegion",
    "comment" : "\n     * Obtains an instance of {@code ZoneId} from an identifier.\n     *\n     * @param zoneId  the time-zone ID, not null\n     * @param checkAvailable  whether to check if the zone ID is available\n     * @return the zone ID, not null\n     * @throws DateTimeException if the ID format is invalid\n     * @throws ZoneRulesException if checking availability and the ID cannot be found\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void checkName(String zoneId)",
    "returnType" : "void",
    "comment" : "\n     * Checks that the given string is a legal ZondId name.\n     *\n     * @param zoneId  the time-zone ID, not null\n     * @throws DateTimeException if the ID format is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "-----------------------------------------------------------------------",
    "links" : [ ]
  }, {
    "name" : "public ZoneRules getRules()",
    "returnType" : "ZoneRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Writes the object using a\n     * <a href=\"{@docRoot}/serialized-form.html#java.time.Ser\">dedicated serialized form</a>.\n     * @serialData\n     * <pre>\n     *  out.writeByte(7);  // identifies a ZoneId (not ZoneOffset)\n     *  out.writeUTF(zoneId);\n     * </pre>\n     *\n     * @return the instance of {@code Ser}, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream s) throws InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * Defend against malicious streams.\n     *\n     * @param s the stream to read\n     * @throws InvalidObjectException always\n     ",
    "links" : [ ]
  }, {
    "name" : " void write(DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void writeExternal(DataOutput out) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ZoneId readExternal(DataInput in) throws IOException",
    "returnType" : "ZoneId",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static ZoneRegion ofId(String zoneId, boolean checkAvailable)", "private static void checkName(String zoneId)", "public String getId()", "public ZoneRules getRules()", "private Object writeReplace()", "private void readObject(ObjectInputStream s) throws InvalidObjectException", " void write(DataOutput out) throws IOException", " void writeExternal(DataOutput out) throws IOException", " static ZoneId readExternal(DataInput in) throws IOException" ],
  "variableNames" : [ "serialVersionUID", "id", "rules" ]
}