{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/FileVisitor.java",
  "packageName" : "java.nio.file",
  "className" : "FileVisitor",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException",
    "returnType" : "FileVisitResult",
    "comment" : "\n     * Invoked for a directory before entries in the directory are visited.\n     *\n     * <p> If this method returns {@link FileVisitResult#CONTINUE CONTINUE},\n     * then entries in the directory are visited. If this method returns {@link\n     * FileVisitResult#SKIP_SUBTREE SKIP_SUBTREE} or {@link\n     * FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS} then entries in the\n     * directory (and any descendants) will not be visited.\n     *\n     * @param   dir\n     *          a reference to the directory\n     * @param   attrs\n     *          the directory's basic attributes\n     *\n     * @return  the visit result\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ "java.nio.file.FileVisitResult#CONTINUE", "java.nio.file.FileVisitResult#SKIP_SIBLINGS", "java.nio.file.FileVisitResult#SKIP_SUBTREE" ]
  }, {
    "name" : " FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException",
    "returnType" : "FileVisitResult",
    "comment" : "\n     * Invoked for a file in a directory.\n     *\n     * @param   file\n     *          a reference to the file\n     * @param   attrs\n     *          the file's basic attributes\n     *\n     * @return  the visit result\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " FileVisitResult visitFileFailed(T file, IOException exc) throws IOException",
    "returnType" : "FileVisitResult",
    "comment" : "\n     * Invoked for a file that could not be visited. This method is invoked\n     * if the file's attributes could not be read, the file is a directory\n     * that could not be opened, and other reasons.\n     *\n     * @param   file\n     *          a reference to the file\n     * @param   exc\n     *          the I/O exception that prevented the file from being visited\n     *\n     * @return  the visit result\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException",
    "returnType" : "FileVisitResult",
    "comment" : "\n     * Invoked for a directory after entries in the directory, and all of their\n     * descendants, have been visited. This method is also invoked when iteration\n     * of the directory completes prematurely (by a {@link #visitFile visitFile}\n     * method returning {@link FileVisitResult#SKIP_SIBLINGS SKIP_SIBLINGS},\n     * or an I/O error when iterating over the directory).\n     *\n     * @param   dir\n     *          a reference to the directory\n     * @param   exc\n     *          {@code null} if the iteration of the directory completes without\n     *          an error; otherwise the I/O exception that caused the iteration\n     *          of the directory to complete prematurely\n     *\n     * @return  the visit result\n     *\n     * @throws  IOException\n     *          if an I/O error occurs\n     ",
    "links" : [ "java.nio.file.FileVisitResult#SKIP_SIBLINGS", "#visitFile" ]
  } ],
  "methodNames" : [ " FileVisitResult preVisitDirectory(T dir, BasicFileAttributes attrs) throws IOException", " FileVisitResult visitFile(T file, BasicFileAttributes attrs) throws IOException", " FileVisitResult visitFileFailed(T file, IOException exc) throws IOException", " FileVisitResult postVisitDirectory(T dir, IOException exc) throws IOException" ],
  "variableNames" : [ ]
}