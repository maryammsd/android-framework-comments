{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/format/RelativeDateTimeFormatter.java",
  "packageName" : "android.text.format",
  "className" : "RelativeDateTimeFormatter",
  "comment" : "\n * Exposes icu4j's RelativeDateTimeFormatter.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "SECOND_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MINUTE_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HOUR_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DAY_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEEK_IN_MILLIS",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "YEAR_IN_MILLIS",
    "type" : "long",
    "comment" : " constant comes from public API in DateUtils, it cannot be fixed here.",
    "links" : [ ]
  }, {
    "name" : "DAY_IN_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EPOCH_JULIAN_DAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CACHED_FORMATTERS",
    "type" : "FormatterCache",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static String getRelativeTimeSpanString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, int flags)",
    "returnType" : "String",
    "comment" : "\n     * This is the internal API that implements the functionality of DateUtils\n     * .getRelativeTimeSpanString(long,\n     * long, long, int), which is to return a string describing 'time' as a time relative to 'now'\n     * such as '5 minutes ago', or 'In 2 days'. More examples can be found in DateUtils' doc.\n     * <p>\n     * In the implementation below, it selects the appropriate time unit based on the elapsed time\n     * between time' and 'now', e.g. minutes, days and etc. Callers may also specify the desired\n     * minimum resolution to show in the result. For example, '45 minutes ago' will become '0 hours\n     * ago' when minResolution is HOUR_IN_MILLIS. Once getting the quantity and unit to display, it\n     * calls icu4j's RelativeDateTimeFormatter to format the actual string according to the given\n     * locale.\n     * <p>\n     * Note that when minResolution is set to DAY_IN_MILLIS, it returns the result depending on the\n     * actual date difference. For example, it will return 'Yesterday' even if 'time' was less than\n     * 24 hours ago but falling onto a different calendar day.\n     * <p>\n     * It takes two additional parameters of Locale and TimeZone than the DateUtils' API. Caller\n     * must specify the locale and timezone. FORMAT_ABBREV_RELATIVE or FORMAT_ABBREV_ALL can be set\n     * in 'flags' to get the abbreviated forms when available. When 'time' equals to 'now', it\n     * always // returns a string like '0 seconds/minutes/... ago' according to minResolution.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getRelativeTimeSpanString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, int flags, DisplayContext displayContext)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getRelativeTimeSpanString(ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long time, long now, long minResolution, int flags, DisplayContext displayContext)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getRelativeDateTimeString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, long transitionResolution, int flags)",
    "returnType" : "String",
    "comment" : "\n     * This is the internal API that implements DateUtils.getRelativeDateTimeString(long, long,\n     * long, long, int), which is to return a string describing 'time' as a time relative to 'now',\n     * formatted like '[relative time/date], [time]'. More examples can be found in DateUtils' doc.\n     * <p>\n     * The function is similar to getRelativeTimeSpanString, but it always appends the absolute time\n     * to the relative time string to return '[relative time/date clause], [absolute time clause]'.\n     * It also takes an extra parameter transitionResolution to determine the format of the date\n     * clause. When the elapsed time is less than the transition resolution, it displays the\n     * relative time string. Otherwise, it gives the absolute numeric date string as the date\n     * clause. With the date and time clauses, it relies on icu4j's\n     * RelativeDateTimeFormatter::combineDateAndTime()\n     * to concatenate the two.\n     * <p>\n     * It takes two additional parameters of Locale and TimeZone than the DateUtils' API. Caller\n     * must specify the locale and timezone. FORMAT_ABBREV_RELATIVE or FORMAT_ABBREV_ALL can be set\n     * in 'flags' to get the abbreviated forms when they are available.\n     * <p>\n     * Bug 5252772: Since the absolute time will always be part of the result, minResolution will be\n     * set to at least DAY_IN_MILLIS to correctly indicate the date difference. For example, when\n     * it's 1:30 AM, it will return 'Yesterday, 11:30 PM' for getRelativeDateTimeString(null, null,\n     * now - 2 hours, now, HOUR_IN_MILLIS, DAY_IN_MILLIS, 0), instead of '2 hours ago, 11:30 PM'\n     * even with minResolution being HOUR_IN_MILLIS.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static android.icu.text.RelativeDateTimeFormatter getFormatter(ULocale locale, android.icu.text.RelativeDateTimeFormatter.Style style, DisplayContext displayContext)",
    "returnType" : "android.icu.text.RelativeDateTimeFormatter",
    "comment" : "\n     * getFormatter() caches the RelativeDateTimeFormatter instances based on the combination of\n     * localeName, sytle and capitalizationContext. It should always be used along with the action\n     * of the formatter in a synchronized block, because otherwise the formatter returned by\n     * getFormatter() may have been evicted by the time of the call to formatter->action().\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int dayDistance(android.icu.util.TimeZone icuTimeZone, long startTime, long endTime)",
    "returnType" : "int",
    "comment" : " Return the date difference for the two times in a given timezone.",
    "links" : [ ]
  }, {
    "name" : "private static int julianDay(android.icu.util.TimeZone icuTimeZone, long time)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static String getRelativeTimeSpanString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, int flags)", "public static String getRelativeTimeSpanString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, int flags, DisplayContext displayContext)", "private static String getRelativeTimeSpanString(ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long time, long now, long minResolution, int flags, DisplayContext displayContext)", "public static String getRelativeDateTimeString(Locale locale, java.util.TimeZone tz, long time, long now, long minResolution, long transitionResolution, int flags)", "private static android.icu.text.RelativeDateTimeFormatter getFormatter(ULocale locale, android.icu.text.RelativeDateTimeFormatter.Style style, DisplayContext displayContext)", "private static int dayDistance(android.icu.util.TimeZone icuTimeZone, long startTime, long endTime)", "private static int julianDay(android.icu.util.TimeZone icuTimeZone, long time)" ],
  "variableNames" : [ "SECOND_IN_MILLIS", "MINUTE_IN_MILLIS", "HOUR_IN_MILLIS", "DAY_IN_MILLIS", "WEEK_IN_MILLIS", "YEAR_IN_MILLIS", "DAY_IN_MS", "EPOCH_JULIAN_DAY", "CACHED_FORMATTERS" ]
}