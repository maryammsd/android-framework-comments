{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/LayoutInflater.java",
  "packageName" : "android.view",
  "className" : "LayoutInflater",
  "comment" : "\n * Instantiates a layout XML file into its corresponding {@link android.view.View}\n * objects. It is never used directly. Instead, use\n * {@link android.app.Activity#getLayoutInflater()} or\n * {@link Context#getSystemService} to retrieve a standard LayoutInflater instance\n * that is already hooked up to the current context and correctly configured\n * for the device you are running on.\n * <p>\n * To create a new LayoutInflater with an additional {@link Factory} for your\n * own views, you can use {@link #cloneInContext} to clone an existing\n * ViewFactory, and then call {@link #setFactory} on it to include your\n * Factory.\n * <p>\n * For performance reasons, view inflation relies heavily on pre-processing of\n * XML files that is done at build time. Therefore, it is not currently possible\n * to use LayoutInflater with an XmlPullParser over a plain XML file at runtime;\n * it only works with an XmlPullParser returned from a compiled resource\n * (R.<em>something</em> file.)\n * <p>\n * <strong>Note:</strong> This class is <strong>not</strong> thread-safe and a given\n * instance should only be accessed by a single thread.\n ",
  "links" : [ "android.app.Activity#getLayoutInflater()", "#cloneInContext", "#setFactory", "android.annotation.UiContext#getSystemService", "android.view.View", "Factory" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EMPTY_STACK_TRACE",
    "type" : "StackTraceElement[]",
    "comment" : " Empty stack trace used to avoid log spam in re-throw exceptions. ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : " TODO(b/182007470): Use @ConfigurationContext instead",
    "links" : [ ]
  }, {
    "name" : "mFactorySet",
    "type" : "boolean",
    "comment" : "\n     * If any developer has desire to change this value, they should instead use\n     * {@link #cloneInContext(Context)} and set the new factory in thew newly-created\n     * LayoutInflater.\n     ",
    "links" : [ "#cloneInContext(Context)" ]
  }, {
    "name" : "mFactory",
    "type" : "Factory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFactory2",
    "type" : "Factory2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPrivateFactory",
    "type" : "Factory2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilter",
    "type" : "Filter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstructorArgs",
    "type" : "Object[]",
    "comment" : "\n     * This is not a public API. Two APIs are now available to alleviate the need to access\n     * this directly: {@link #createView(Context, String, String, AttributeSet)} and\n     * {@link #onCreateView(Context, View, String, AttributeSet)}.\n     ",
    "links" : [ "#createView(Context", "#onCreateView(Context" ]
  }, {
    "name" : "mConstructorSignature",
    "type" : "Class<?>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sConstructorMap",
    "type" : "HashMap<String, Constructor<? extends View>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilterMap",
    "type" : "HashMap<String, Boolean>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempValue",
    "type" : "TypedValue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_MERGE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_INCLUDE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_1995",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_REQUEST_FOCUS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTR_LAYOUT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ATTRS_THEME",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOT_CLASS_LOADER",
    "type" : "ClassLoader",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static LayoutInflater from(@UiContext Context context)",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Obtains the LayoutInflater from the given context.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract LayoutInflater cloneInContext(Context newContext)",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Create a copy of the existing LayoutInflater object, with the copy\n     * pointing to a different Context than the original.  This is used by\n     * {@link ContextThemeWrapper} to create a new LayoutInflater to go along\n     * with the new Context theme.\n     *\n     * @param newContext The new Context to associate with the new LayoutInflater.\n     * May be the same as the original Context if desired.\n     *\n     * @return Returns a brand spanking new LayoutInflater object associated with\n     * the given Context.\n     ",
    "links" : [ "android.view.ContextThemeWrapper" ]
  }, {
    "name" : "public Context getContext()",
    "returnType" : "Context",
    "comment" : "\n     * Return the context we are running in, for access to resources, class\n     * loader, etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Factory getFactory()",
    "returnType" : "Factory",
    "comment" : "\n     * Return the current {@link Factory} (or null). This is called on each element\n     * name. If the factory returns a View, add that to the hierarchy. If it\n     * returns null, proceed to call onCreateView(name).\n     ",
    "links" : [ "Factory" ]
  }, {
    "name" : "public final Factory2 getFactory2()",
    "returnType" : "Factory2",
    "comment" : "\n     * Return the current {@link Factory2}.  Returns null if no factory is set\n     * or the set factory does not implement the {@link Factory2} interface.\n     * This is called on each element\n     * name. If the factory returns a View, add that to the hierarchy. If it\n     * returns null, proceed to call onCreateView(name).\n     ",
    "links" : [ "Factory2" ]
  }, {
    "name" : "public void setFactory(Factory factory)",
    "returnType" : "void",
    "comment" : "\n     * Attach a custom Factory interface for creating views while using\n     * this LayoutInflater.  This must not be null, and can only be set once;\n     * after setting, you can not change the factory.  This is\n     * called on each element name as the xml is parsed. If the factory returns\n     * a View, that is added to the hierarchy. If it returns null, the next\n     * factory default {@link #onCreateView} method is called.\n     *\n     * <p>If you have an existing\n     * LayoutInflater and want to add your own factory to it, use\n     * {@link #cloneInContext} to clone the existing instance and then you\n     * can use this function (once) on the returned new instance.  This will\n     * merge your own factory with whatever factory the original instance is\n     * using.\n     ",
    "links" : [ "#cloneInContext", "#onCreateView" ]
  }, {
    "name" : "public void setFactory2(Factory2 factory)",
    "returnType" : "void",
    "comment" : "\n     * Like {@link #setFactory}, but allows you to set a {@link Factory2}\n     * interface.\n     ",
    "links" : [ "#setFactory", "Factory2" ]
  }, {
    "name" : "public void setPrivateFactory(Factory2 factory)",
    "returnType" : "void",
    "comment" : "\n     * @hide for use by framework\n     ",
    "links" : [ ]
  }, {
    "name" : "public Filter getFilter()",
    "returnType" : "Filter",
    "comment" : "\n     * @return The {@link Filter} currently used by this LayoutInflater to restrict the set of Views\n     * that are allowed to be inflated.\n     ",
    "links" : [ "Filter" ]
  }, {
    "name" : "public void setFilter(Filter filter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link Filter} to by this LayoutInflater. If a view is attempted to be inflated\n     * which is not allowed by the {@link Filter}, the {@link #inflate(int, ViewGroup)} call will\n     * throw an {@link InflateException}. This filter will replace any previous filter set on this\n     * LayoutInflater.\n     *\n     * @param filter The Filter which restricts the set of Views that are allowed to be inflated.\n     *        This filter will replace any previous filter set on this LayoutInflater.\n     ",
    "links" : [ "#inflate(int", "android.view.InflateException", "Filter" ]
  }, {
    "name" : "public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)",
    "returnType" : "View",
    "comment" : "\n     * Inflate a new view hierarchy from the specified xml resource. Throws\n     * {@link InflateException} if there is an error.\n     *\n     * @param resource ID for an XML layout resource to load (e.g.,\n     *        <code>R.layout.main_page</code>)\n     * @param root Optional view to be the parent of the generated hierarchy.\n     * @return The root View of the inflated hierarchy. If root was supplied,\n     *         this is the root View; otherwise it is the root of the inflated\n     *         XML file.\n     ",
    "links" : [ "android.view.InflateException" ]
  }, {
    "name" : "public View inflate(XmlPullParser parser, @Nullable ViewGroup root)",
    "returnType" : "View",
    "comment" : "\n     * Inflate a new view hierarchy from the specified xml node. Throws\n     * {@link InflateException} if there is an error. *\n     * <p>\n     * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n     * reasons, view inflation relies heavily on pre-processing of XML files\n     * that is done at build time. Therefore, it is not currently possible to\n     * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.\n     *\n     * @param parser XML dom node containing the description of the view\n     *        hierarchy.\n     * @param root Optional view to be the parent of the generated hierarchy.\n     * @return The root View of the inflated hierarchy. If root was supplied,\n     *         this is the root View; otherwise it is the root of the inflated\n     *         XML file.\n     ",
    "links" : [ "android.view.InflateException" ]
  }, {
    "name" : "public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)",
    "returnType" : "View",
    "comment" : "\n     * Inflate a new view hierarchy from the specified xml resource. Throws\n     * {@link InflateException} if there is an error.\n     *\n     * @param resource ID for an XML layout resource to load (e.g.,\n     *        <code>R.layout.main_page</code>)\n     * @param root Optional view to be the parent of the generated hierarchy (if\n     *        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of LayoutParams values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter? If false, root is only used to create the\n     *        correct subclass of LayoutParams for the root view in the XML.\n     * @return The root View of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     ",
    "links" : [ "android.view.InflateException" ]
  }, {
    "name" : "private void advanceToRootNode(XmlPullParser parser) throws InflateException, IOException, XmlPullParserException",
    "returnType" : "void",
    "comment" : "\n     * Advances the given parser to the first START_TAG. Throws InflateException if no start tag is\n     * found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)",
    "returnType" : "View",
    "comment" : "\n     * Inflate a new view hierarchy from the specified XML node. Throws\n     * {@link InflateException} if there is an error.\n     * <p>\n     * <em><strong>Important</strong></em>&nbsp;&nbsp;&nbsp;For performance\n     * reasons, view inflation relies heavily on pre-processing of XML files\n     * that is done at build time. Therefore, it is not currently possible to\n     * use LayoutInflater with an XmlPullParser over a plain XML file at runtime.\n     *\n     * @param parser XML dom node containing the description of the view\n     *        hierarchy.\n     * @param root Optional view to be the parent of the generated hierarchy (if\n     *        <em>attachToRoot</em> is true), or else simply an object that\n     *        provides a set of LayoutParams values for root of the returned\n     *        hierarchy (if <em>attachToRoot</em> is false.)\n     * @param attachToRoot Whether the inflated hierarchy should be attached to\n     *        the root parameter? If false, root is only used to create the\n     *        correct subclass of LayoutParams for the root view in the XML.\n     * @return The root View of the inflated hierarchy. If root was supplied and\n     *         attachToRoot is true, this is root; otherwise it is the root of\n     *         the inflated XML file.\n     ",
    "links" : [ "android.view.InflateException" ]
  }, {
    "name" : "private static String getParserStateDescription(Context context, AttributeSet attrs)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final boolean verifyClassLoader(Constructor<? extends View> constructor)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final View createView(String name, String prefix, AttributeSet attrs) throws ClassNotFoundException, InflateException",
    "returnType" : "View",
    "comment" : "\n     * Low-level function for instantiating a view by name. This attempts to\n     * instantiate a view class of the given <var>name</var> found in this\n     * LayoutInflater's ClassLoader. To use an explicit Context in the View\n     * constructor, use {@link #createView(Context, String, String, AttributeSet)} instead.\n     *\n     * <p>\n     * There are two things that can happen in an error case: either the\n     * exception describing the error will be thrown, or a null will be\n     * returned. You must deal with both possibilities -- the former will happen\n     * the first time createView() is called for a class of a particular name,\n     * the latter every time there-after for that class name.\n     *\n     * @param name The full name of the class to be instantiated.\n     * @param attrs The XML attributes supplied for this instance.\n     *\n     * @return View The newly instantiated view, or null.\n     ",
    "links" : [ "#createView(Context" ]
  }, {
    "name" : "public final View createView(@NonNull Context viewContext, @NonNull String name, @Nullable String prefix, @Nullable AttributeSet attrs) throws ClassNotFoundException, InflateException",
    "returnType" : "View",
    "comment" : "\n     * Low-level function for instantiating a view by name. This attempts to\n     * instantiate a view class of the given <var>name</var> found in this\n     * LayoutInflater's ClassLoader.\n     *\n     * <p>\n     * There are two things that can happen in an error case: either the\n     * exception describing the error will be thrown, or a null will be\n     * returned. You must deal with both possibilities -- the former will happen\n     * the first time createView() is called for a class of a particular name,\n     * the latter every time there-after for that class name.\n     *\n     * @param viewContext The context used as the context parameter of the View constructor\n     * @param name The full name of the class to be instantiated.\n     * @param attrs The XML attributes supplied for this instance.\n     *\n     * @return View The newly instantiated view, or null.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void failNotAllowed(String name, String prefix, Context context, AttributeSet attrs)",
    "returnType" : "void",
    "comment" : "\n     * Throw an exception because the specified class is not allowed to be inflated.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException",
    "returnType" : "View",
    "comment" : "\n     * This routine is responsible for creating the correct subclass of View\n     * given the xml element name. Override it to handle custom view objects. If\n     * you override this in your subclass be sure to call through to\n     * super.onCreateView(name) for names you do not recognize.\n     *\n     * @param name The fully qualified class name of the View to be create.\n     * @param attrs An AttributeSet of attributes to apply to the View.\n     *\n     * @return View The View created.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException",
    "returnType" : "View",
    "comment" : "\n     * Version of {@link #onCreateView(String, AttributeSet)} that also\n     * takes the future parent of the view being constructed.  The default\n     * implementation simply calls {@link #onCreateView(String, AttributeSet)}.\n     *\n     * @param parent The future parent of the returned view.  <em>Note that\n     * this may be null.</em>\n     * @param name The fully qualified class name of the View to be create.\n     * @param attrs An AttributeSet of attributes to apply to the View.\n     *\n     * @return View The View created.\n     ",
    "links" : [ "#onCreateView(String" ]
  }, {
    "name" : "public View onCreateView(@NonNull Context viewContext, @Nullable View parent, @NonNull String name, @Nullable AttributeSet attrs) throws ClassNotFoundException",
    "returnType" : "View",
    "comment" : "\n     * Version of {@link #onCreateView(View, String, AttributeSet)} that also\n     * takes the inflation context.  The default\n     * implementation simply calls {@link #onCreateView(View, String, AttributeSet)}.\n     *\n     * @param viewContext The Context to be used as a constructor parameter for the View\n     * @param parent The future parent of the returned view.  <em>Note that\n     * this may be null.</em>\n     * @param name The fully qualified class name of the View to be create.\n     * @param attrs An AttributeSet of attributes to apply to the View.\n     *\n     * @return View The View created.\n     ",
    "links" : [ "#onCreateView(View" ]
  }, {
    "name" : "private View createViewFromTag(View parent, String name, Context context, AttributeSet attrs)",
    "returnType" : "View",
    "comment" : "\n     * Convenience method for calling through to the five-arg createViewFromTag\n     * method. This method passes {@code false} for the {@code ignoreThemeAttr}\n     * argument and should be used for everything except {@code &gt;include>}\n     * tag parsing.\n     ",
    "links" : [ ]
  }, {
    "name" : " View createViewFromTag(View parent, String name, Context context, AttributeSet attrs, boolean ignoreThemeAttr)",
    "returnType" : "View",
    "comment" : "\n     * Creates a view from a tag name using the supplied attribute set.\n     * <p>\n     * <strong>Note:</strong> Default visibility so the BridgeInflater can\n     * override it.\n     *\n     * @param parent the parent view, used to inflate layout params\n     * @param name the name of the XML tag used to define the view\n     * @param context the inflation context for the view, typically the\n     *                {@code parent} or base layout inflater context\n     * @param attrs the attribute set for the XML tag used to define the view\n     * @param ignoreThemeAttr {@code true} to ignore the {@code android:theme}\n     *                        attribute (if set) for the view being inflated,\n     *                        {@code false} otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public final View tryCreateView(@Nullable View parent, @NonNull String name, @NonNull Context context, @NonNull AttributeSet attrs)",
    "returnType" : "View",
    "comment" : "\n     * Tries to create a view from a tag name using the supplied attribute set.\n     *\n     * This method gives the factory provided by {@link LayoutInflater#setFactory} and\n     * {@link LayoutInflater#setFactory2} a chance to create a view. However, it does not apply all\n     * of the general view creation logic, and thus may return {@code null} for some tags. This\n     * method is used by {@link LayoutInflater#inflate} in creating {@code View} objects.\n     *\n     * @hide originally for internal use by precompiled layouts, which have since been removed.\n     *\n     * @param parent the parent view, used to inflate layout params\n     * @param name the name of the XML tag used to define the view\n     * @param context the inflation context for the view, typically the\n     *                {@code parent} or base layout inflater context\n     * @param attrs the attribute set for the XML tag used to define the view\n     ",
    "links" : [ "android.view.LayoutInflater#inflate", "android.view.LayoutInflater#setFactory2", "android.view.LayoutInflater#setFactory" ]
  }, {
    "name" : " final void rInflateChildren(XmlPullParser parser, View parent, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Recursive method used to inflate internal (non-root) children. This\n     * method calls through to {@link #rInflate} using the parent context as\n     * the inflation context.\n     * <strong>Note:</strong> Default visibility so the BridgeInflater can\n     * call it.\n     ",
    "links" : [ "#rInflate" ]
  }, {
    "name" : " void rInflate(XmlPullParser parser, View parent, Context context, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Recursive method used to descend down the xml hierarchy and instantiate\n     * views, instantiate their children, and then call onFinishInflate().\n     * <p>\n     * <strong>Note:</strong> Default visibility so the BridgeInflater can\n     * override it.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseViewTag(XmlPullParser parser, View view, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * Parses a <code>&lt;tag&gt;</code> element and sets a keyed tag on the\n     * containing View.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void parseInclude(XmlPullParser parser, Context context, View parent, AttributeSet attrs) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static final void consumeChildElements(XmlPullParser parser) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "\n     * <strong>Note:</strong> default visibility so that\n     * LayoutInflater_Delegate can call it.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static LayoutInflater from(@UiContext Context context)", "public abstract LayoutInflater cloneInContext(Context newContext)", "public Context getContext()", "public final Factory getFactory()", "public final Factory2 getFactory2()", "public void setFactory(Factory factory)", "public void setFactory2(Factory2 factory)", "public void setPrivateFactory(Factory2 factory)", "public Filter getFilter()", "public void setFilter(Filter filter)", "public View inflate(@LayoutRes int resource, @Nullable ViewGroup root)", "public View inflate(XmlPullParser parser, @Nullable ViewGroup root)", "public View inflate(@LayoutRes int resource, @Nullable ViewGroup root, boolean attachToRoot)", "private void advanceToRootNode(XmlPullParser parser) throws InflateException, IOException, XmlPullParserException", "public View inflate(XmlPullParser parser, @Nullable ViewGroup root, boolean attachToRoot)", "private static String getParserStateDescription(Context context, AttributeSet attrs)", "private final boolean verifyClassLoader(Constructor<? extends View> constructor)", "public final View createView(String name, String prefix, AttributeSet attrs) throws ClassNotFoundException, InflateException", "public final View createView(@NonNull Context viewContext, @NonNull String name, @Nullable String prefix, @Nullable AttributeSet attrs) throws ClassNotFoundException, InflateException", "private void failNotAllowed(String name, String prefix, Context context, AttributeSet attrs)", "protected View onCreateView(String name, AttributeSet attrs) throws ClassNotFoundException", "protected View onCreateView(View parent, String name, AttributeSet attrs) throws ClassNotFoundException", "public View onCreateView(@NonNull Context viewContext, @Nullable View parent, @NonNull String name, @Nullable AttributeSet attrs) throws ClassNotFoundException", "private View createViewFromTag(View parent, String name, Context context, AttributeSet attrs)", " View createViewFromTag(View parent, String name, Context context, AttributeSet attrs, boolean ignoreThemeAttr)", "public final View tryCreateView(@Nullable View parent, @NonNull String name, @NonNull Context context, @NonNull AttributeSet attrs)", " final void rInflateChildren(XmlPullParser parser, View parent, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException", " void rInflate(XmlPullParser parser, View parent, Context context, AttributeSet attrs, boolean finishInflate) throws XmlPullParserException, IOException", "private void parseViewTag(XmlPullParser parser, View view, AttributeSet attrs) throws XmlPullParserException, IOException", "private void parseInclude(XmlPullParser parser, Context context, View parent, AttributeSet attrs) throws XmlPullParserException, IOException", " static final void consumeChildElements(XmlPullParser parser) throws XmlPullParserException, IOException" ],
  "variableNames" : [ "TAG", "DEBUG", "EMPTY_STACK_TRACE", "mContext", "mFactorySet", "mFactory", "mFactory2", "mPrivateFactory", "mFilter", "mConstructorArgs", "mConstructorSignature", "sConstructorMap", "mFilterMap", "mTempValue", "TAG_MERGE", "TAG_INCLUDE", "TAG_1995", "TAG_REQUEST_FOCUS", "TAG_TAG", "ATTR_LAYOUT", "ATTRS_THEME", "BOOT_CLASS_LOADER" ]
}