{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/MloLink.java",
  "packageName" : "android.net.wifi",
  "className" : "MloLink",
  "comment" : "\n * Data structure class representing a Wi-Fi Multi-Link Operation (MLO) link\n * This is only used by 802.11be capable devices\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INVALID_MLO_LINK_ID",
    "type" : "int",
    "comment" : "\n     * Invalid link id. Used in {link #getLinkId()}\n     ",
    "links" : [ ]
  }, {
    "name" : "MIN_MLO_LINK_ID",
    "type" : "int",
    "comment" : "\n     * Lower limit for MLO link id\n     * As described in IEEE 802.11be Specification, section 9.4.2.295b.2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_MLO_LINK_ID",
    "type" : "int",
    "comment" : "\n     * Upper limit for MLO link id\n     * As described in IEEE 802.11be Specification, section 9.4.2.295b.2.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "MLO_LINK_STATE_INVALID",
    "type" : "int",
    "comment" : "\n     * MLO link state: Invalid link state. Used in {link #getState()}\n     ",
    "links" : [ ]
  }, {
    "name" : "MLO_LINK_STATE_UNASSOCIATED",
    "type" : "int",
    "comment" : "\n     * MLO link state: Link is not associated with the access point. Used in {link #getState()}\n     ",
    "links" : [ ]
  }, {
    "name" : "MLO_LINK_STATE_IDLE",
    "type" : "int",
    "comment" : "\n     * MLO link state: Link is associated to the access point but not mapped to any traffic stream.\n     * Used in {link #getState()}\n     ",
    "links" : [ ]
  }, {
    "name" : "MLO_LINK_STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * MLO link state: Link is associated to the access point and mapped to at least one traffic\n     * stream. {link #getState()}\n     * Note that an MLO link could be in that state but in power save mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "mLinkId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApMacAddress",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStaMacAddress",
    "type" : "MacAddress",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBand",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mChannel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRssi",
    "type" : "int",
    "comment" : "\n     * Received Signal Strength Indicator\n     ",
    "links" : [ ]
  }, {
    "name" : "mRxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Rx(receive) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "mTxLinkSpeed",
    "type" : "int",
    "comment" : "\n     * Tx(transmit) Link speed in Mbps\n     ",
    "links" : [ ]
  }, {
    "name" : "txBad",
    "type" : "long",
    "comment" : "\n     * Running total count of lost (not ACKed) transmitted unicast data packets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txRetries",
    "type" : "long",
    "comment" : "\n     * Running total count of transmitted unicast data retry packets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "txSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of successfully transmitted (ACKed) unicast data packets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "rxSuccess",
    "type" : "long",
    "comment" : "\n     * Running total count of received unicast data packets.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "lastPacketCountUpdateTimeStamp",
    "type" : "long",
    "comment" : "\n     * Time stamp when packet counts are last updated.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mLostTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTxRetriedTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulTxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSuccessfulRxPacketsPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<MloLink>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getBand()",
    "returnType" : "int",
    "comment" : " Returns the Wi-Fi band of this link. ",
    "links" : [ ]
  }, {
    "name" : "public int getChannel()",
    "returnType" : "int",
    "comment" : "\n     * Returns the channel number of this link.\n     * A valid value is based on the 802.11 specification in sections 19.3.15 and 27.3.23\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLinkId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the link id of this link.\n     * Valid values are 0-15, as described in IEEE 802.11be Specification, section 9.4.2.295b.2.\n     *\n     * @return {@link #INVALID_MLO_LINK_ID} or a valid value (0-15).\n     ",
    "links" : [ "#INVALID_MLO_LINK_ID" ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : " Returns the state of this link as one of:\n     *     {@link #MLO_LINK_STATE_INVALID}\n     *     {@link #MLO_LINK_STATE_UNASSOCIATED}\n     *     {@link #MLO_LINK_STATE_IDLE}\n     *     {@link #MLO_LINK_STATE_ACTIVE}\n     ",
    "links" : [ "#MLO_LINK_STATE_INVALID", "#MLO_LINK_STATE_UNASSOCIATED", "#MLO_LINK_STATE_IDLE", "#MLO_LINK_STATE_ACTIVE" ]
  }, {
    "name" : "public MacAddress getApMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns the AP MAC address of this link.\n     *\n     * @return AP MAC address for this link or null when the caller has insufficient\n     * permissions to access the access point MAC Address.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getStaMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Returns the STA MAC address of this link.\n     *\n     * @return STA MAC address assigned for this link, or null in the following cases:\n     * <ul>\n     *     <li> The caller has insufficient permissions to access the STA MAC Address </li>\n     *     <li> Link is not associated, hence no MAC address is assigned to it by STA </li>\n     * </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setChannel(int channel)",
    "returnType" : "void",
    "comment" : "\n     * Sets the channel number of this link.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setBand(@WifiAnnotations.WifiBandBasic int band)",
    "returnType" : "void",
    "comment" : "\n     * Sets the band for this link\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLinkId(int linkId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the linkId of this link\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setState(@MloLinkState int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets the state of this link\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setApMacAddress(MacAddress address)",
    "returnType" : "void",
    "comment" : "\n     * set the AP MAC Address for this link\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStaMacAddress(MacAddress address)",
    "returnType" : "void",
    "comment" : "\n     * set the STA MAC Address for this link\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRxLinkSpeedMbps(int rxLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last received packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current receive link speed in Mbps.\n     * @return the Rx link speed or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see WifiInfo#LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setTxLinkSpeedMbps(int txLinkSpeed)",
    "returnType" : "void",
    "comment" : "\n     * Update the last transmitted packet bit rate in Mbps.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTxLinkSpeedMbps()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current transmit link speed in Mbps.\n     * @return the Tx link speed or {@link WifiInfo#LINK_SPEED_UNKNOWN} if link speed is unknown.\n     * @see WifiInfo#LINK_SPEED_UNKNOWN\n     ",
    "links" : [ "android.net.wifi.WifiInfo#LINK_SPEED_UNKNOWN" ]
  }, {
    "name" : "public void setRssi(int rssi)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RSSI of the link.\n     *\n     * @param rssi RSSI in dBM.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRssi()",
    "returnType" : "int",
    "comment" : "\n     * Returns the RSSI of the link.\n     *\n     * <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into\n     * an absolute signal level which can be displayed to a user.\n     *\n     * @return RSSI in dBM.\n     ",
    "links" : [ "android.net.wifi.WifiManager#calculateSignalLevel" ]
  }, {
    "name" : "public double getLostTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of lost transmitted packets, in units of packets per second.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getRetriedTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of transmitted retry packets, in units of packets per second.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulTxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of successfully transmitted unicast packets, in units of packets per second.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public double getSuccessfulRxPacketsPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Average rate of received unicast data packets, in units of packets per second.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getStateString(@MloLinkState int state)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidState(@MloLinkState int state)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getBand()", "public int getChannel()", "public int getLinkId()", "public int getState()", "public MacAddress getApMacAddress()", "public MacAddress getStaMacAddress()", "public void setChannel(int channel)", "public void setBand(@WifiAnnotations.WifiBandBasic int band)", "public void setLinkId(int linkId)", "public void setState(@MloLinkState int state)", "public void setApMacAddress(MacAddress address)", "public void setStaMacAddress(MacAddress address)", "public void setRxLinkSpeedMbps(int rxLinkSpeed)", "public int getRxLinkSpeedMbps()", "public void setTxLinkSpeedMbps(int txLinkSpeed)", "public int getTxLinkSpeedMbps()", "public void setRssi(int rssi)", "public int getRssi()", "public double getLostTxPacketsPerSecond()", "public void setLostTxPacketsPerSecond(double lostTxPacketsPerSecond)", "public double getRetriedTxPacketsPerSecond()", "public void setRetriedTxPacketsRate(double txRetriedTxPacketsPerSecond)", "public double getSuccessfulTxPacketsPerSecond()", "public void setSuccessfulTxPacketsPerSecond(double successfulTxPacketsPerSecond)", "public double getSuccessfulRxPacketsPerSecond()", "public void setSuccessfulRxPacketsPerSecond(double successfulRxPacketsPerSecond)", "public boolean equals(@Nullable Object o)", "public int hashCode()", "public static String getStateString(@MloLinkState int state)", "public static boolean isValidState(@MloLinkState int state)", "public String toString()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)" ],
  "variableNames" : [ "INVALID_MLO_LINK_ID", "MIN_MLO_LINK_ID", "MAX_MLO_LINK_ID", "MLO_LINK_STATE_INVALID", "MLO_LINK_STATE_UNASSOCIATED", "MLO_LINK_STATE_IDLE", "MLO_LINK_STATE_ACTIVE", "mLinkId", "mApMacAddress", "mStaMacAddress", "mState", "mBand", "mChannel", "mRssi", "mRxLinkSpeed", "mTxLinkSpeed", "txBad", "txRetries", "txSuccess", "rxSuccess", "lastPacketCountUpdateTimeStamp", "mLostTxPacketsPerSecond", "mTxRetriedTxPacketsPerSecond", "mSuccessfulTxPacketsPerSecond", "mSuccessfulRxPacketsPerSecond", "CREATOR" ]
}