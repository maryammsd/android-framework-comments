{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaFrameworkPlatformInitializer.java",
  "packageName" : "android.media",
  "className" : "MediaFrameworkPlatformInitializer",
  "comment" : "\n * Class for performing registration for all media services\n *\n * TODO (b/160513103): This class is still needed on platform side until\n * MEDIA_SESSION_SERVICE is moved onto com.android.media apex.\n * Once that's done, we can move the code that registers the service onto the\n * MediaFrameworkInitializer class on the apex.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "sMediaServiceManager",
    "type" : "MediaServiceManager",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void setMediaServiceManager(@NonNull MediaServiceManager mediaServiceManager)",
    "returnType" : "void",
    "comment" : "\n     * Sets an instance of {@link MediaServiceManager} that allows\n     * the media mainline module to register/obtain media binder services. This is called\n     * by the platform during the system initialization.\n     *\n     * @param mediaServiceManager instance of {@link MediaServiceManager} that allows\n     * the media mainline module to register/obtain media binder services.\n     ",
    "links" : [ "android.media.MediaServiceManager" ]
  }, {
    "name" : "public static MediaServiceManager getMediaServiceManager()",
    "returnType" : "MediaServiceManager",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void registerServiceWrappers()",
    "returnType" : "void",
    "comment" : "\n     * Called by {@link SystemServiceRegistry}'s static initializer and registers all media\n     * services to {@link Context}, so that {@link Context#getSystemService} can return them.\n     *\n     * @throws IllegalStateException if this is called from anywhere besides\n     * {@link SystemServiceRegistry}\n     ",
    "links" : [ "android.content.Context", "android.content.Context#getSystemService", "android.app.SystemServiceRegistry" ]
  } ],
  "methodNames" : [ "public static void setMediaServiceManager(@NonNull MediaServiceManager mediaServiceManager)", "public static MediaServiceManager getMediaServiceManager()", "public static void registerServiceWrappers()" ],
  "variableNames" : [ "sMediaServiceManager" ]
}