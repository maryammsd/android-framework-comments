{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/time/temporal/TemporalQueries.java",
  "packageName" : "java.time.temporal",
  "className" : "TemporalQueries",
  "comment" : "\n * Common implementations of {@code TemporalQuery}.\n * <p>\n * This class provides common implementations of {@link TemporalQuery}.\n * These are defined here as they must be constants, and the definition\n * of lambdas does not guarantee that. By assigning them once here,\n * they become 'normal' Java constants.\n * <p>\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n * <p>\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a {@code long}.\n * By contrast, queries can return any type.\n * <p>\n * There are two equivalent ways of using a {@code TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query(TemporalQuery)}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@code query(TemporalQuery)},\n * as it is a lot clearer to read in code.\n * <p>\n * The most common implementations are method references, such as\n * {@code LocalDate::from} and {@code ZoneId::from}.\n * Additional common queries are provided to return:\n * <ul>\n * <li> a Chronology,\n * <li> a LocalDate,\n * <li> a LocalTime,\n * <li> a ZoneOffset,\n * <li> a precision,\n * <li> a zone, or\n * <li> a zoneId.\n * </ul>\n *\n * @since 1.8\n ",
  "links" : [ "java.time.temporal.TemporalField", "java.time.temporal.TemporalQuery", "java.time.temporal.TemporalAccessor#query(TemporalQuery)" ],
  "variables" : [ {
    "name" : "ZONE_ID",
    "type" : "TemporalQuery<ZoneId>",
    "comment" : "\n     * A strict query for the {@code ZoneId}.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHRONO",
    "type" : "TemporalQuery<Chronology>",
    "comment" : "\n     * A query for the {@code Chronology}.\n     ",
    "links" : [ ]
  }, {
    "name" : "PRECISION",
    "type" : "TemporalQuery<TemporalUnit>",
    "comment" : "\n     * A query for the smallest supported unit.\n     ",
    "links" : [ ]
  }, {
    "name" : "OFFSET",
    "type" : "TemporalQuery<ZoneOffset>",
    "comment" : "\n     * A query for {@code ZoneOffset} returning null if not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "ZONE",
    "type" : "TemporalQuery<ZoneId>",
    "comment" : "\n     * A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_DATE",
    "type" : "TemporalQuery<LocalDate>",
    "comment" : "\n     * A query for {@code LocalDate} returning null if not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "LOCAL_TIME",
    "type" : "TemporalQuery<LocalTime>",
    "comment" : "\n     * A query for {@code LocalTime} returning null if not found.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static TemporalQuery<ZoneId> zoneId()",
    "returnType" : "TemporalQuery<ZoneId>",
    "comment" : "\n     * A strict query for the {@code ZoneId}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the zone.\n     * The zone is only returned if the date-time conceptually contains a {@code ZoneId}.\n     * It will not be returned if the date-time only conceptually has an {@code ZoneOffset}.\n     * Thus a {@link java.time.ZonedDateTime} will return the result of {@code getZone()},\n     * but an {@link java.time.OffsetDateTime} will return null.\n     * <p>\n     * In most cases, applications should use {@link #zone()} as this query is too strict.\n     * <p>\n     * The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns null<br>\n     * {@code LocalTime} returns null<br>\n     * {@code LocalDateTime} returns null<br>\n     * {@code ZonedDateTime} returns the associated zone<br>\n     * {@code OffsetTime} returns null<br>\n     * {@code OffsetDateTime} returns null<br>\n     * {@code ChronoLocalDate} returns null<br>\n     * {@code ChronoLocalDateTime} returns null<br>\n     * {@code ChronoZonedDateTime} returns the associated zone<br>\n     * {@code Era} returns null<br>\n     * {@code DayOfWeek} returns null<br>\n     * {@code Month} returns null<br>\n     * {@code Year} returns null<br>\n     * {@code YearMonth} returns null<br>\n     * {@code MonthDay} returns null<br>\n     * {@code ZoneOffset} returns null<br>\n     * {@code Instant} returns null<br>\n     *\n     * @return a query that can obtain the zone ID of a temporal, not null\n     ",
    "links" : [ "java.time.OffsetDateTime", "java.time.ZonedDateTime", "#zone()" ]
  }, {
    "name" : "public static TemporalQuery<Chronology> chronology()",
    "returnType" : "TemporalQuery<Chronology>",
    "comment" : "\n     * A query for the {@code Chronology}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the chronology.\n     * If the target {@code TemporalAccessor} represents a date, or part of a date,\n     * then it should return the chronology that the date is expressed in.\n     * As a result of this definition, objects only representing time, such as\n     * {@code LocalTime}, will return null.\n     * <p>\n     * The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code LocalTime} returns null (does not represent a date)<br>\n     * {@code LocalDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code ZonedDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code OffsetTime} returns null (does not represent a date)<br>\n     * {@code OffsetDateTime} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code ChronoLocalDate} returns the associated chronology<br>\n     * {@code ChronoLocalDateTime} returns the associated chronology<br>\n     * {@code ChronoZonedDateTime} returns the associated chronology<br>\n     * {@code Era} returns the associated chronology<br>\n     * {@code DayOfWeek} returns null (shared across chronologies)<br>\n     * {@code Month} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code Year} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code YearMonth} returns {@code IsoChronology.INSTANCE}<br>\n     * {@code MonthDay} returns null {@code IsoChronology.INSTANCE}<br>\n     * {@code ZoneOffset} returns null (does not represent a date)<br>\n     * {@code Instant} returns null (does not represent a date)<br>\n     * <p>\n     * The method {@link java.time.chrono.Chronology#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code Chronology::from}.\n     * That method is equivalent to this query, except that it throws an\n     * exception if a chronology cannot be obtained.\n     *\n     * @return a query that can obtain the chronology of a temporal, not null\n     ",
    "links" : [ "java.time.chrono.Chronology#from(TemporalAccessor)" ]
  }, {
    "name" : "public static TemporalQuery<TemporalUnit> precision()",
    "returnType" : "TemporalQuery<TemporalUnit>",
    "comment" : "\n     * A query for the smallest supported unit.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the time precision.\n     * If the target {@code TemporalAccessor} represents a consistent or complete date-time,\n     * date or time then this must return the smallest precision actually supported.\n     * Note that fields such as {@code NANO_OF_DAY} and {@code NANO_OF_SECOND}\n     * are defined to always return ignoring the precision, thus this is the only\n     * way to find the actual smallest supported unit.\n     * For example, were {@code GregorianCalendar} to implement {@code TemporalAccessor}\n     * it would return a precision of {@code MILLIS}.\n     * <p>\n     * The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>\n     * {@code LocalDate} returns {@code DAYS}<br>\n     * {@code LocalTime} returns {@code NANOS}<br>\n     * {@code LocalDateTime} returns {@code NANOS}<br>\n     * {@code ZonedDateTime} returns {@code NANOS}<br>\n     * {@code OffsetTime} returns {@code NANOS}<br>\n     * {@code OffsetDateTime} returns {@code NANOS}<br>\n     * {@code ChronoLocalDate} returns {@code DAYS}<br>\n     * {@code ChronoLocalDateTime} returns {@code NANOS}<br>\n     * {@code ChronoZonedDateTime} returns {@code NANOS}<br>\n     * {@code Era} returns {@code ERAS}<br>\n     * {@code DayOfWeek} returns {@code DAYS}<br>\n     * {@code Month} returns {@code MONTHS}<br>\n     * {@code Year} returns {@code YEARS}<br>\n     * {@code YearMonth} returns {@code MONTHS}<br>\n     * {@code MonthDay} returns null (does not represent a complete date or time)<br>\n     * {@code ZoneOffset} returns null (does not represent a date or time)<br>\n     * {@code Instant} returns {@code NANOS}<br>\n     *\n     * @return a query that can obtain the precision of a temporal, not null\n     ",
    "links" : [ ]
  }, {
    "name" : "public static TemporalQuery<ZoneId> zone()",
    "returnType" : "TemporalQuery<ZoneId>",
    "comment" : "\n     * A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.\n     * <p>\n     * This queries a {@code TemporalAccessor} for the zone.\n     * It first tries to obtain the zone, using {@link #zoneId()}.\n     * If that is not found it tries to obtain the {@link #offset()}.\n     * Thus a {@link java.time.ZonedDateTime} will return the result of {@code getZone()},\n     * while an {@link java.time.OffsetDateTime} will return the result of {@code getOffset()}.\n     * <p>\n     * In most cases, applications should use this query rather than {@code #zoneId()}.\n     * <p>\n     * The method {@link ZoneId#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code ZoneId::from}.\n     * That method is equivalent to this query, except that it throws an\n     * exception if a zone cannot be obtained.\n     *\n     * @return a query that can obtain the zone ID or offset of a temporal, not null\n     ",
    "links" : [ "java.time.OffsetDateTime", "java.time.ZoneId#from(TemporalAccessor)", "java.time.ZonedDateTime", "#offset()", "#zoneId()" ]
  }, {
    "name" : "public static TemporalQuery<ZoneOffset> offset()",
    "returnType" : "TemporalQuery<ZoneOffset>",
    "comment" : "\n     * A query for {@code ZoneOffset} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the offset. The query will return null if the temporal\n     * object cannot supply an offset.\n     * <p>\n     * The query implementation examines the {@link ChronoField#OFFSET_SECONDS OFFSET_SECONDS}\n     * field and uses it to create a {@code ZoneOffset}.\n     * <p>\n     * The method {@link java.time.ZoneOffset#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code ZoneOffset::from}.\n     * This query and {@code ZoneOffset::from} will return the same result if the\n     * temporal object contains an offset. If the temporal object does not contain\n     * an offset, then the method reference will throw an exception, whereas this\n     * query will return null.\n     *\n     * @return a query that can obtain the offset of a temporal, not null\n     ",
    "links" : [ "java.time.ZoneOffset#from(TemporalAccessor)", "java.time.temporal.ChronoField#OFFSET_SECONDS" ]
  }, {
    "name" : "public static TemporalQuery<LocalDate> localDate()",
    "returnType" : "TemporalQuery<LocalDate>",
    "comment" : "\n     * A query for {@code LocalDate} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the local date. The query will return null if the temporal\n     * object cannot supply a local date.\n     * <p>\n     * The query implementation examines the {@link ChronoField#EPOCH_DAY EPOCH_DAY}\n     * field and uses it to create a {@code LocalDate}.\n     * <p>\n     * The method {@link ZoneOffset#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code LocalDate::from}.\n     * This query and {@code LocalDate::from} will return the same result if the\n     * temporal object contains a date. If the temporal object does not contain\n     * a date, then the method reference will throw an exception, whereas this\n     * query will return null.\n     *\n     * @return a query that can obtain the date of a temporal, not null\n     ",
    "links" : [ "java.time.temporal.ChronoField#EPOCH_DAY", "java.time.ZoneOffset#from(TemporalAccessor)" ]
  }, {
    "name" : "public static TemporalQuery<LocalTime> localTime()",
    "returnType" : "TemporalQuery<LocalTime>",
    "comment" : "\n     * A query for {@code LocalTime} returning null if not found.\n     * <p>\n     * This returns a {@code TemporalQuery} that can be used to query a temporal\n     * object for the local time. The query will return null if the temporal\n     * object cannot supply a local time.\n     * <p>\n     * The query implementation examines the {@link ChronoField#NANO_OF_DAY NANO_OF_DAY}\n     * field and uses it to create a {@code LocalTime}.\n     * <p>\n     * The method {@link ZoneOffset#from(TemporalAccessor)} can be used as a\n     * {@code TemporalQuery} via a method reference, {@code LocalTime::from}.\n     * This query and {@code LocalTime::from} will return the same result if the\n     * temporal object contains a time. If the temporal object does not contain\n     * a time, then the method reference will throw an exception, whereas this\n     * query will return null.\n     *\n     * @return a query that can obtain the time of a temporal, not null\n     ",
    "links" : [ "java.time.temporal.ChronoField#NANO_OF_DAY", "java.time.ZoneOffset#from(TemporalAccessor)" ]
  } ],
  "methodNames" : [ "public static TemporalQuery<ZoneId> zoneId()", "public static TemporalQuery<Chronology> chronology()", "public static TemporalQuery<TemporalUnit> precision()", "public static TemporalQuery<ZoneId> zone()", "public static TemporalQuery<ZoneOffset> offset()", "public static TemporalQuery<LocalDate> localDate()", "public static TemporalQuery<LocalTime> localTime()" ],
  "variableNames" : [ "ZONE_ID", "CHRONO", "PRECISION", "OFFSET", "ZONE", "LOCAL_DATE", "LOCAL_TIME" ]
}