{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/audiofx/PresetReverb.java",
  "packageName" : "android.media.audiofx",
  "className" : "PresetReverb",
  "comment" : "",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_PRESET",
    "type" : "int",
    "comment" : "\n     * Preset. Parameter ID for\n     * {@link android.media.audiofx.PresetReverb.OnParameterChangeListener}\n     ",
    "links" : [ "android.media.audiofx.PresetReverb.OnParameterChangeListener" ]
  }, {
    "name" : "PRESET_NONE",
    "type" : "short",
    "comment" : "\n     * No reverb or reflections\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_SMALLROOM",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a small room less than five meters in length\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_MEDIUMROOM",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a medium room with a length of ten meters or less\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_LARGEROOM",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a large-sized room suitable for live performances\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_MEDIUMHALL",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a medium-sized hall\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_LARGEHALL",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a large-sized hall suitable for a full orchestra\n     ",
    "links" : [ ]
  }, {
    "name" : "PRESET_PLATE",
    "type" : "short",
    "comment" : "\n     * Reverb preset representing a synthesis of the traditional plate reverb\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change event from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPreset(short preset) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     *  Enables a preset on the reverb.\n     *  <p>The reverb PRESET_NONE disables any reverb from the current output but does not free the\n     *  resources associated with the reverb. For an application to signal to the implementation\n     *  to free the resources, it must call the release() method.\n     * @param preset this must be one of the the preset constants defined in this class.\n     * e.g. {@link #PRESET_SMALLROOM}\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ "#PRESET_SMALLROOM" ]
  }, {
    "name" : "public short getPreset() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "short",
    "comment" : "\n     * Gets current reverb preset.\n     * @return the preset that is set at the moment.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public PresetReverb.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "PresetReverb.Settings",
    "comment" : "\n     * Gets the preset reverb properties. This method is useful when a snapshot of current\n     * preset reverb settings must be saved by the application.\n     * @return a PresetReverb.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(PresetReverb.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Sets the preset reverb properties. This method is useful when preset reverb settings have to\n     * be applied from a previous backup.\n     * @param settings a PresetReverb.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "PARAM_PRESET", "PRESET_NONE", "PRESET_SMALLROOM", "PRESET_MEDIUMROOM", "PRESET_LARGEROOM", "PRESET_MEDIUMHALL", "PRESET_LARGEHALL", "PRESET_PLATE", "mParamListener", "mBaseParamListener", "mParamListenerLock" ],
  "methodNames" : [ "public void setPreset(short preset) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public short getPreset() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setParameterListener(OnParameterChangeListener listener)", "public PresetReverb.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(PresetReverb.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ]
}