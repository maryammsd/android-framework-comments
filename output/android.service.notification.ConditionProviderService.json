{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/notification/ConditionProviderService.java",
  "packageName" : "android.service.notification",
  "className" : "ConditionProviderService",
  "comment" : "\n * A service that provides conditions about boolean state.\n * <p>To extend this class, you must declare the service in your manifest file with\n * the {@link android.Manifest.permission#BIND_CONDITION_PROVIDER_SERVICE} permission\n * and include an intent filter with the {@link #SERVICE_INTERFACE} action. If you want users to be\n * able to create and update conditions for this service to monitor, include the\n * {@link #META_DATA_RULE_TYPE} and {@link #META_DATA_CONFIGURATION_ACTIVITY} tags and request the\n * {@link android.Manifest.permission#ACCESS_NOTIFICATION_POLICY} permission. For example:</p>\n * <pre>\n * &lt;service android:name=\".MyConditionProvider\"\n *          android:label=\"&#64;string/service_name\"\n *          android:permission=\"android.permission.BIND_CONDITION_PROVIDER_SERVICE\">\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.service.notification.ConditionProviderService\" />\n *     &lt;/intent-filter>\n *     &lt;meta-data\n *               android:name=\"android.service.zen.automatic.ruleType\"\n *               android:value=\"@string/my_condition_rule\">\n *           &lt;/meta-data>\n *           &lt;meta-data\n *               android:name=\"android.service.zen.automatic.configurationActivity\"\n *               android:value=\"com.my.package/.MyConditionConfigurationActivity\">\n *           &lt;/meta-data>\n * &lt;/service></pre>\n *\n *  <p> Condition providers cannot be bound by the system on\n * {@link ActivityManager#isLowRamDevice() low ram} devices running Android Q (and below)</p>\n *\n * @deprecated Instead of using an automatically bound service, use\n * {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)} to tell the\n * system about the state of your rule. In order to maintain a link from\n * Settings to your rule configuration screens, provide a configuration activity that handles\n * {@link android.app.NotificationManager#ACTION_AUTOMATIC_ZEN_RULE} on your\n * {@link android.app.AutomaticZenRule} via\n * {@link android.app.AutomaticZenRule#setConfigurationActivity(ComponentName)}.\n ",
  "links" : [ "android.Manifest.permission#ACCESS_NOTIFICATION_POLICY", "#SERVICE_INTERFACE", "#META_DATA_CONFIGURATION_ACTIVITY", "android.Manifest.permission#BIND_CONDITION_PROVIDER_SERVICE", "#META_DATA_RULE_TYPE", "android.app.NotificationManager#setAutomaticZenRuleState(String", "android.app.AutomaticZenRule", "android.app.ActivityManager#isLowRamDevice()", "android.app.AutomaticZenRule#setConfigurationActivity(ComponentName)", "android.app.NotificationManager#ACTION_AUTOMATIC_ZEN_RULE" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "H",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProvider",
    "type" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNoMan",
    "type" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsConnected",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "META_DATA_RULE_TYPE",
    "type" : "String",
    "comment" : "\n     * The name of the {@code meta-data} tag containing a localized name of the type of zen rules\n     * provided by this service.\n     *\n     * @deprecated see {@link android.app.NotificationManager#META_DATA_AUTOMATIC_RULE_TYPE}.\n     ",
    "links" : [ "android.app.NotificationManager#META_DATA_AUTOMATIC_RULE_TYPE" ]
  }, {
    "name" : "META_DATA_CONFIGURATION_ACTIVITY",
    "type" : "String",
    "comment" : "\n     * The name of the {@code meta-data} tag containing the {@link ComponentName} of an activity\n     * that allows users to configure the conditions provided by this service.\n     *\n     * @deprecated see {@link android.app.NotificationManager#ACTION_AUTOMATIC_ZEN_RULE}.\n     ",
    "links" : [ "android.content.ComponentName", "android.app.NotificationManager#ACTION_AUTOMATIC_ZEN_RULE" ]
  }, {
    "name" : "META_DATA_RULE_INSTANCE_LIMIT",
    "type" : "String",
    "comment" : "\n     * The name of the {@code meta-data} tag containing the maximum number of rule instances that\n     * can be created for this rule type. Omit or enter a value <= 0 to allow unlimited instances.\n     *\n     * @deprecated see {@link android.app.NotificationManager#META_DATA_RULE_INSTANCE_LIMIT}.\n     ",
    "links" : [ "android.app.NotificationManager#META_DATA_RULE_INSTANCE_LIMIT" ]
  }, {
    "name" : "EXTRA_RULE_ID",
    "type" : "String",
    "comment" : "\n     * A String rule id extra passed to {@link #META_DATA_CONFIGURATION_ACTIVITY}.\n     *\n     * @deprecated see {@link android.app.NotificationManager#EXTRA_AUTOMATIC_RULE_ID}.\n     ",
    "links" : [ "#META_DATA_CONFIGURATION_ACTIVITY", "android.app.NotificationManager#EXTRA_AUTOMATIC_RULE_ID" ]
  } ],
  "methods" : [ {
    "name" : "public abstract void onConnected()",
    "returnType" : "void",
    "comment" : "\n     * Called when this service is connected.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onRequestConditions(int relevance)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract void onSubscribe(Uri conditionId)",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when there is a new {@link Condition} to be managed by this provider.\n     * @param conditionId the Uri describing the criteria of the condition.\n     ",
    "links" : [ "android.service.notification.Condition" ]
  }, {
    "name" : "public abstract void onUnsubscribe(Uri conditionId)",
    "returnType" : "void",
    "comment" : "\n     * Called by the system when a {@link Condition} has been deleted.\n     * @param conditionId the Uri describing the criteria of the deleted condition.\n     ",
    "links" : [ "android.service.notification.Condition" ]
  }, {
    "name" : "private final INotificationManager getNotificationInterface()",
    "returnType" : "INotificationManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void requestRebind(ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * Request that the provider be rebound, after a previous call to (@link #requestUnbind).\n     *\n     * <p>This method will fail for providers that have not been granted the permission by the user.\n     ",
    "links" : [ "#requestUnbind)." ]
  }, {
    "name" : "public final void requestUnbind()",
    "returnType" : "void",
    "comment" : "\n     * Request that the provider service be unbound.\n     *\n     * <p>This will no longer receive subscription updates and will not be able to update the\n     * state of conditions until {@link #requestRebind(ComponentName)} is called.\n     * The service will likely be killed by the system after this call.\n     *\n     * <p>The service should wait for the {@link #onConnected()} event before performing this\n     * operation.\n     ",
    "links" : [ "#onConnected()", "#requestRebind(ComponentName)" ]
  }, {
    "name" : "public final void notifyCondition(Condition condition)",
    "returnType" : "void",
    "comment" : "\n     * Informs the notification manager that the state of a Condition has changed. Use this method\n     * to put the system into Do Not Disturb mode or request that it exits Do Not Disturb mode. This\n     * call will be ignored unless there is an enabled {@link android.app.AutomaticZenRule} owned by\n     * service that has an {@link android.app.AutomaticZenRule#getConditionId()} equal to this\n     * {@link Condition#id}.\n     * @param condition the condition that has changed.\n     *\n     * @deprecated see\n     * {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)}.\n     ",
    "links" : [ "android.app.NotificationManager#setAutomaticZenRuleState(String", "android.app.AutomaticZenRule", "android.service.notification.Condition#id", "android.app.AutomaticZenRule#getConditionId()" ]
  }, {
    "name" : "public final void notifyConditions(Condition... conditions)",
    "returnType" : "void",
    "comment" : "\n     * Informs the notification manager that the state of one or more Conditions has changed. See\n     * {@link #notifyCondition(Condition)} for restrictions.\n     * @param conditions the changed conditions.\n     *\n     * @deprecated see\n     *       {@link android.app.NotificationManager#setAutomaticZenRuleState(String, Condition)}.\n     ",
    "links" : [ "#notifyCondition(Condition)", "android.app.NotificationManager#setAutomaticZenRuleState(String" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isBound()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract void onConnected()", "public void onRequestConditions(int relevance)", "public abstract void onSubscribe(Uri conditionId)", "public abstract void onUnsubscribe(Uri conditionId)", "private final INotificationManager getNotificationInterface()", "public static final void requestRebind(ComponentName componentName)", "public final void requestUnbind()", "public final void notifyCondition(Condition condition)", "public final void notifyConditions(Condition... conditions)", "public IBinder onBind(Intent intent)", "public boolean isBound()" ],
  "variableNames" : [ "TAG", "mHandler", "mProvider", "mNoMan", "mIsConnected", "SERVICE_INTERFACE", "META_DATA_RULE_TYPE", "META_DATA_CONFIGURATION_ACTIVITY", "META_DATA_RULE_INSTANCE_LIMIT", "EXTRA_RULE_ID" ]
}