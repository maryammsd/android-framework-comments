{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/SmartSelectSprite.java",
  "packageName" : "android.widget",
  "className" : "RoundedRectangleShape",
  "comment" : "\n     * A rounded rectangle with a configurable corner radius and the ability to expand outside of\n     * its bounding rectangle and clip against it.\n     ",
  "variables" : [ {
    "name" : "PROPERTY_ROUND_RATIO",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBoundingRectangle",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRoundRatio",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExpansionDirection",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDrawRect",
    "type" : "RectF",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClipPath",
    "type" : "Path",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLeftBoundary",
    "type" : "float",
    "comment" : " How offset the left edge of the rectangle is from the left side of the bounding box. ",
    "links" : [ ]
  }, {
    "name" : "mRightBoundary",
    "type" : "float",
    "comment" : " How offset the right edge of the rectangle is from the left side of the bounding box. ",
    "links" : [ ]
  }, {
    "name" : "mInverted",
    "type" : "boolean",
    "comment" : " Whether the horizontal bounds are inverted (for RTL scenarios). ",
    "links" : [ ]
  }, {
    "name" : "mBoundingWidth",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static int invert(@ExpansionDirection int expansionDirection)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas, Paint paint)",
    "returnType" : "void",
    "comment" : "\n         * In order to achieve the \"rounded rectangle hits the wall\" effect, we draw an expanding\n         * rounded rectangle that is clipped by the bounding box of the selected text.\n         ",
    "links" : [ ]
  }, {
    "name" : " void setRoundRatio(@FloatRange(from = 0.0, to = 1.0) final float roundRatio)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " float getRoundRatio()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setStartBoundary(final float startBoundary)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setEndBoundary(final float endBoundary)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getCornerRadius()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getAdjustedCornerRadius()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private float getBoundingWidth()",
    "returnType" : "float",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PROPERTY_ROUND_RATIO", "mBoundingRectangle", "mRoundRatio", "mExpansionDirection", "mDrawRect", "mClipPath", "mLeftBoundary", "mRightBoundary", "mInverted", "mBoundingWidth" ],
  "methodNames" : [ "private static int invert(@ExpansionDirection int expansionDirection)", "public void draw(Canvas canvas, Paint paint)", " void setRoundRatio(@FloatRange(from = 0.0, to = 1.0) final float roundRatio)", " float getRoundRatio()", "private void setStartBoundary(final float startBoundary)", "private void setEndBoundary(final float endBoundary)", "private float getCornerRadius()", "private float getAdjustedCornerRadius()", "private float getBoundingWidth()" ]
}