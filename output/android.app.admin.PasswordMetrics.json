{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/admin/PasswordMetrics.java",
  "packageName" : "android.app.admin",
  "className" : "PasswordMetrics",
  "comment" : "\n * A class that represents the metrics of a credential that are used to decide whether or not a\n * credential meets the requirements.\n *\n * {@hide}\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_ALLOWED_SEQUENCE",
    "type" : "int",
    "comment" : " consider it a complex PIN/password.",
    "links" : [ ]
  }, {
    "name" : "credType",
    "type" : "int",
    "comment" : " CREDENTIAL_TYPE_PASSWORD.",
    "links" : [ ]
  }, {
    "name" : "length",
    "type" : "int",
    "comment" : " Fields below only make sense when credType is PASSWORD.",
    "links" : [ ]
  }, {
    "name" : "letters",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "upperCase",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lowerCase",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "numeric",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "symbols",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nonLetter",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nonNumeric",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "seqLength",
    "type" : "int",
    "comment" : " MAX_VALUE is the most relaxed value, any sequence is ok, e.g. 123456789. 4 would forbid it.",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<PasswordMetrics>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_LOWER_CASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_UPPER_CASE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_DIGIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHAR_SYMBOL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static int sanitizeComplexityLevel(@PasswordComplexity int complexityLevel)",
    "returnType" : "int",
    "comment" : "\n     * Returns {@code complexityLevel} or {@link DevicePolicyManager#PASSWORD_COMPLEXITY_NONE}\n     * if {@code complexityLevel} is not valid.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ "android.app.admin.DevicePolicyManager#PASSWORD_COMPLEXITY_NONE" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PasswordMetrics computeForCredential(LockscreenCredential credential)",
    "returnType" : "PasswordMetrics",
    "comment" : "\n     * Returns the {@code PasswordMetrics} for the given credential.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PasswordMetrics computeForPasswordOrPin(byte[] credential, boolean isPin)",
    "returnType" : "PasswordMetrics",
    "comment" : "\n     * Returns the {@code PasswordMetrics} for the given password or pin.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int maxLengthSequence(@NonNull byte[] bytes)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum length of a sequential characters. A sequence is defined as\n     * monotonically increasing characters with a constant interval or the same character repeated.\n     *\n     * For example:\n     * maxLengthSequence(\"1234\") == 4\n     * maxLengthSequence(\"13579\") == 5\n     * maxLengthSequence(\"1234abc\") == 4\n     * maxLengthSequence(\"aabc\") == 3\n     * maxLengthSequence(\"qwertyuio\") == 1\n     * maxLengthSequence(\"@ABC\") == 3\n     * maxLengthSequence(\";;;;\") == 4 (anything that repeats)\n     * maxLengthSequence(\":;<=>\") == 1  (ordered, but not composed of alphas or digits)\n     *\n     * @param bytes the pass\n     * @return the number of sequential letters or digits\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int categoryChar(char c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int maxDiffCategory(@CharacterCatagory int category)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static PasswordMetrics merge(List<PasswordMetrics> metrics)",
    "returnType" : "PasswordMetrics",
    "comment" : "\n     * Returns the weakest metrics that is stricter or equal to all given metrics.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "public void maxWith(PasswordMetrics other)",
    "returnType" : "void",
    "comment" : "\n     * Makes current metric at least as strong as {@code other} in every criterion.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int complexityLevelToMinQuality(int complexity)",
    "returnType" : "int",
    "comment" : "\n     * Returns minimum password quality for a given complexity level.\n     *\n     * TODO: this function is used for determining allowed credential types, so it should return\n     * credential type rather than 'quality'.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean satisfiesBucket(ComplexityBucket bucket)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether current metrics satisfies a given complexity bucket.\n     *\n     * TODO: move inside ComplexityBucket.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int determineComplexity()",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum complexity level satisfied by password with this metrics.\n     *\n     * TODO: move inside ComplexityBucket.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<PasswordValidationError> validateCredential(PasswordMetrics adminMetrics, int minComplexity, LockscreenCredential credential)",
    "returnType" : "List<PasswordValidationError>",
    "comment" : "\n     * Validates a proposed lockscreen credential against minimum metrics and complexity.\n     *\n     * @param adminMetrics minimum metrics to satisfy admin requirements\n     * @param minComplexity minimum complexity imposed by the requester\n     * @param credential the proposed lockscreen credential\n     *\n     * @return a list of validation errors. An empty list means the credential is OK.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "public static List<PasswordValidationError> validatePasswordMetrics(PasswordMetrics adminMetrics, int minComplexity, PasswordMetrics actualMetrics)",
    "returnType" : "List<PasswordValidationError>",
    "comment" : "\n     * Validates password metrics against minimum metrics and complexity\n     *\n     * @param adminMetrics - minimum metrics to satisfy admin requirements.\n     * @param minComplexity - minimum complexity imposed by the requester.\n     * @param actualMetrics - metrics for password to validate.\n     * @return a list of password validation errors. An empty list means the password is OK.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void comparePasswordMetrics(PasswordMetrics minMetrics, ComplexityBucket bucket, PasswordMetrics actualMetrics, ArrayList<PasswordValidationError> result)",
    "returnType" : "void",
    "comment" : "\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "private void removeOverlapping()",
    "returnType" : "void",
    "comment" : "\n     * Drop requirements that are superseded by others, e.g. if it is required to have 5 upper case\n     * letters and 5 lower case letters, there is no need to require minimum number of letters to\n     * be 10 since it will be fulfilled once upper and lower case requirements are fulfilled.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PasswordMetrics applyComplexity(PasswordMetrics adminMetrics, boolean isPin, int complexity)",
    "returnType" : "PasswordMetrics",
    "comment" : "\n     * Combine minimum metrics, set by admin, complexity set by the requester and actual entered\n     * password metrics to get resulting minimum metrics that the password has to satisfy. Always\n     * returns a new PasswordMetrics object.\n     *\n     * TODO: move to PasswordPolicy\n     ",
    "links" : [ ]
  }, {
    "name" : "private static PasswordMetrics applyComplexity(PasswordMetrics adminMetrics, boolean isPin, ComplexityBucket bucket)",
    "returnType" : "PasswordMetrics",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNumericOnly(@NonNull String password)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if password is non-empty and contains digits only.\n     * @param password\n     * @return\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int sanitizeComplexityLevel(@PasswordComplexity int complexityLevel)", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public static PasswordMetrics computeForCredential(LockscreenCredential credential)", "private static PasswordMetrics computeForPasswordOrPin(byte[] credential, boolean isPin)", "public static int maxLengthSequence(@NonNull byte[] bytes)", "private static int categoryChar(char c)", "private static int maxDiffCategory(@CharacterCatagory int category)", "public static PasswordMetrics merge(List<PasswordMetrics> metrics)", "public void maxWith(PasswordMetrics other)", "public static int complexityLevelToMinQuality(int complexity)", "private boolean satisfiesBucket(ComplexityBucket bucket)", "public int determineComplexity()", "public static List<PasswordValidationError> validateCredential(PasswordMetrics adminMetrics, int minComplexity, LockscreenCredential credential)", "public static List<PasswordValidationError> validatePasswordMetrics(PasswordMetrics adminMetrics, int minComplexity, PasswordMetrics actualMetrics)", "private static void comparePasswordMetrics(PasswordMetrics minMetrics, ComplexityBucket bucket, PasswordMetrics actualMetrics, ArrayList<PasswordValidationError> result)", "private void removeOverlapping()", "public static PasswordMetrics applyComplexity(PasswordMetrics adminMetrics, boolean isPin, int complexity)", "private static PasswordMetrics applyComplexity(PasswordMetrics adminMetrics, boolean isPin, ComplexityBucket bucket)", "public static boolean isNumericOnly(@NonNull String password)", "public boolean equals(@Nullable Object o)", "public int hashCode()" ],
  "variableNames" : [ "TAG", "MAX_ALLOWED_SEQUENCE", "credType", "length", "letters", "upperCase", "lowerCase", "numeric", "symbols", "nonLetter", "nonNumeric", "seqLength", "CREATOR", "CHAR_LOWER_CASE", "CHAR_UPPER_CASE", "CHAR_DIGIT", "CHAR_SYMBOL" ]
}