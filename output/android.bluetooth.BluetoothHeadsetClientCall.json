{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/bluetooth/BluetoothHeadsetClientCall.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHeadsetClientCall",
  "comment" : "\n * This class represents a single call, its state and properties.\n * It implements {@link Parcelable} for inter-process message passing.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "CALL_STATE_ACTIVE",
    "type" : "int",
    "comment" : "\n     * Call is active.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_HELD",
    "type" : "int",
    "comment" : "\n     * Call is in held state.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_DIALING",
    "type" : "int",
    "comment" : "\n     * Outgoing call that is being dialed right now.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_ALERTING",
    "type" : "int",
    "comment" : "\n     * Outgoing call that remote party has already been alerted about.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_INCOMING",
    "type" : "int",
    "comment" : "\n     * Incoming call that can be accepted or rejected.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_WAITING",
    "type" : "int",
    "comment" : "\n     * Waiting call state when there is already an active call.\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_HELD_BY_RESPONSE_AND_HOLD",
    "type" : "int",
    "comment" : "\n     * Call that has been held by response and hold\n     * (see Bluetooth specification for further references).\n     ",
    "links" : [ ]
  }, {
    "name" : "CALL_STATE_TERMINATED",
    "type" : "int",
    "comment" : "\n     * Call that has been already terminated and should not be referenced as a valid call.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDevice",
    "type" : "BluetoothDevice",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumber",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMultiParty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOutgoing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUUID",
    "type" : "UUID",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCreationElapsedMilli",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInBandRing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<BluetoothHeadsetClientCall>",
    "comment" : "\n     * {@link Parcelable.Creator} interface implementation.\n     ",
    "links" : [ "Parcelable.Creator" ]
  } ],
  "methods" : [ {
    "name" : "public void setState(int state)",
    "returnType" : "void",
    "comment" : "\n     * Sets call's state.\n     *\n     * <p>Note: This is an internal function and shouldn't be exposed</p>\n     *\n     * @param state new call state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNumber(String number)",
    "returnType" : "void",
    "comment" : "\n     * Sets call's number.\n     *\n     * <p>Note: This is an internal function and shouldn't be exposed</p>\n     *\n     * @param number String representing phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMultiParty(boolean multiParty)",
    "returnType" : "void",
    "comment" : "\n     * Sets this call as multi party call.\n     *\n     * <p>Note: This is an internal function and shouldn't be exposed</p>\n     *\n     * @param multiParty if <code>true</code> sets this call as a part of multi party conference.\n     ",
    "links" : [ ]
  }, {
    "name" : "public BluetoothDevice getDevice()",
    "returnType" : "BluetoothDevice",
    "comment" : "\n     * Gets call's device.\n     *\n     * @return call device.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getId()",
    "returnType" : "int",
    "comment" : "\n     * Gets call's Id.\n     *\n     * @return call id.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UUID getUUID()",
    "returnType" : "UUID",
    "comment" : "\n     * Gets call's UUID.\n     *\n     * @return call uuid\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets call's current state.\n     *\n     * @return state of this particular phone call.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNumber()",
    "returnType" : "String",
    "comment" : "\n     * Gets call's number.\n     *\n     * @return string representing phone number.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getCreationElapsedMilli()",
    "returnType" : "long",
    "comment" : "\n     * Gets call's creation time in millis since epoch.\n     *\n     * @return long representing the creation time.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMultiParty()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if call is an active call in a conference mode (aka multi party).\n     *\n     * @return <code>true</code> if call is a multi party call, <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOutgoing()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if this call is an outgoing call.\n     *\n     * @return <code>true</code> if its outgoing call, <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isInBandRing()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the ringtone will be generated by the connected phone\n     *\n     * @return <code>true</code> if in band ring is enabled, <code>false</code> otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString(boolean loggable)",
    "returnType" : "String",
    "comment" : "\n     * Generate a log string for this call\n     * @param loggable whether device address should be logged\n     * @return log string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "CALL_STATE_ACTIVE", "CALL_STATE_HELD", "CALL_STATE_DIALING", "CALL_STATE_ALERTING", "CALL_STATE_INCOMING", "CALL_STATE_WAITING", "CALL_STATE_HELD_BY_RESPONSE_AND_HOLD", "CALL_STATE_TERMINATED", "mDevice", "mId", "mState", "mNumber", "mMultiParty", "mOutgoing", "mUUID", "mCreationElapsedMilli", "mInBandRing", "CREATOR" ],
  "methodNames" : [ "public void setState(int state)", "public void setNumber(String number)", "public void setMultiParty(boolean multiParty)", "public BluetoothDevice getDevice()", "public int getId()", "public UUID getUUID()", "public int getState()", "public String getNumber()", "public long getCreationElapsedMilli()", "public boolean isMultiParty()", "public boolean isOutgoing()", "public boolean isInBandRing()", "public String toString()", "public String toString(boolean loggable)", "public void writeToParcel(Parcel out, int flags)", "public int describeContents()" ]
}