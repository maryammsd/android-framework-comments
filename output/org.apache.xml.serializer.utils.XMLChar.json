{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/utils/XMLChar.java",
  "packageName" : "org.apache.xml.serializer.utils",
  "className" : "XMLChar",
  "comment" : "\r\n * THIS IS A COPY OF THE XERCES-2J CLASS org.apache.xerces.utls.XMLChar\r\n * \r\n * This class defines the basic XML character properties. The data\r\n * in this class can be used to verify that a character is a valid\r\n * XML character or if the character is a space, name start, or name\r\n * character.\r\n * <p>\r\n * A series of convenience methods are supplied to ease the burden\r\n * of the developer. Because inlining the checks can improve per\r\n * character performance, the tables of character properties are\r\n * public. Using the character as an index into the <code>CHARS</code>\r\n * array and applying the appropriate mask flag (e.g.\r\n * <code>MASK_VALID</code>), yields the same results as calling the\r\n * convenience methods. There is one exception: check the comments\r\n * for the <code>isValid</code> method for details.\r\n *\r\n * @author Glenn Marcy, IBM\r\n * @author Andy Clark, IBM\r\n * @author Eric Ye, IBM\r\n * @author Arnaud  Le Hors, IBM\r\n * @author Michael Glavassevich, IBM\r\n * @author Rahul Srivastava, Sun Microsystems Inc.\r\n *\r\n * @version $Id: $\r\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CHARS",
    "type" : "byte[]",
    "comment" : " Character flags. ",
    "links" : [ ]
  }, {
    "name" : "MASK_VALID",
    "type" : "int",
    "comment" : " Valid character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_SPACE",
    "type" : "int",
    "comment" : " Space character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_NAME_START",
    "type" : "int",
    "comment" : " Name start character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_NAME",
    "type" : "int",
    "comment" : " Name character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_PUBID",
    "type" : "int",
    "comment" : " Pubid character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_CONTENT",
    "type" : "int",
    "comment" : " \r\n     * Content character mask. Special characters are those that can\r\n     * be considered the start of markup, such as '&lt;' and '&amp;'. \r\n     * The various newline characters are considered special as well.\r\n     * All other valid XML characters can be considered content.\r\n     * <p>\r\n     * This is an optimization for the inner loop of character scanning.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "MASK_NCNAME_START",
    "type" : "int",
    "comment" : " NCName start character mask. ",
    "links" : [ ]
  }, {
    "name" : "MASK_NCNAME",
    "type" : "int",
    "comment" : " NCName character mask. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSupplemental(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a supplemental character.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int supplemental(char h, char l)",
    "returnType" : "int",
    "comment" : "\r\n     * Returns true the supplemental character corresponding to the given\r\n     * surrogates.\r\n     *\r\n     * @param h The high surrogate.\r\n     * @param l The low surrogate.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char highSurrogate(int c)",
    "returnType" : "char",
    "comment" : "\r\n     * Returns the high surrogate of a supplemental character\r\n     *\r\n     * @param c The supplemental character to \"split\".\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char lowSurrogate(int c)",
    "returnType" : "char",
    "comment" : "\r\n     * Returns the low surrogate of a supplemental character\r\n     *\r\n     * @param c The supplemental character to \"split\".\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isHighSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns whether the given character is a high surrogate\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isLowSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns whether the given character is a low surrogate\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValid(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is valid. This method\r\n     * also checks the surrogate character range from 0x10000 to 0x10FFFF.\r\n     * <p>\r\n     * If the program chooses to apply the mask directly to the\r\n     * <code>CHARS</code> array, then they are responsible for checking\r\n     * the surrogate character range.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isInvalid(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is invalid.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isContent(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character can be considered content.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isMarkup(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character can be considered markup.\r\n     * Markup characters include '&lt;', '&amp;', and '%'.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSpace(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a space character\r\n     * as defined by production [3] in the XML 1.0 specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNameStart(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid name start\r\n     * character as defined by production [5] in the XML 1.0\r\n     * specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isName(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid name\r\n     * character as defined by production [4] in the XML 1.0\r\n     * specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNCNameStart(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid NCName start\r\n     * character as defined by production [4] in Namespaces in XML\r\n     * recommendation.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isNCName(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid NCName\r\n     * character as defined by production [5] in Namespaces in XML\r\n     * recommendation.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isPubid(int c)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the specified character is a valid Pubid\r\n     * character as defined by production [13] in the XML 1.0\r\n     * specification.\r\n     *\r\n     * @param c The character to check.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidName(String name)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid Name according to [5]\r\n     * in the XML 1.0 Recommendation\r\n     *\r\n     * @param name string to check\r\n     * @return true if name is a valid Name\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidNCName(String ncName)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid NCName according to [4]\r\n     * from the XML Namespaces 1.0 Recommendation\r\n     *\r\n     * @param ncName string to check\r\n     * @return true if name is a valid NCName\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidNmtoken(String nmtoken)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Check to see if a string is a valid Nmtoken according to [7]\r\n     * in the XML 1.0 Recommendation\r\n     *\r\n     * @param nmtoken string to check\r\n     * @return true if nmtoken is a valid Nmtoken \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidIANAEncoding(String ianaEncoding)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the encoding name is a valid IANA encoding.\r\n     * This method does not verify that there is a decoder available\r\n     * for this encoding, only that the characters are valid for an\r\n     * IANA encoding name.\r\n     *\r\n     * @param ianaEncoding The IANA encoding name.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidJavaEncoding(String javaEncoding)",
    "returnType" : "boolean",
    "comment" : "\r\n     * Returns true if the encoding name is a valid Java encoding.\r\n     * This method does not verify that there is a decoder available\r\n     * for this encoding, only that the characters are valid for an\r\n     * Java encoding name.\r\n     *\r\n     * @param javaEncoding The Java encoding name.\r\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isSupplemental(int c)", "public static int supplemental(char h, char l)", "public static char highSurrogate(int c)", "public static char lowSurrogate(int c)", "public static boolean isHighSurrogate(int c)", "public static boolean isLowSurrogate(int c)", "public static boolean isValid(int c)", "public static boolean isInvalid(int c)", "public static boolean isContent(int c)", "public static boolean isMarkup(int c)", "public static boolean isSpace(int c)", "public static boolean isNameStart(int c)", "public static boolean isName(int c)", "public static boolean isNCNameStart(int c)", "public static boolean isNCName(int c)", "public static boolean isPubid(int c)", "public static boolean isValidName(String name)", "public static boolean isValidNCName(String ncName)", "public static boolean isValidNmtoken(String nmtoken)", "public static boolean isValidIANAEncoding(String ianaEncoding)", "public static boolean isValidJavaEncoding(String javaEncoding)" ],
  "variableNames" : [ "CHARS", "MASK_VALID", "MASK_SPACE", "MASK_NAME_START", "MASK_NAME", "MASK_PUBID", "MASK_CONTENT", "MASK_NCNAME_START", "MASK_NCNAME" ]
}