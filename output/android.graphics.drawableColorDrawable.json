{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/ColorDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ColorDrawable",
  "comment" : "\n * A specialized Drawable that fills the Canvas with a specified color.\n * Note that a ColorDrawable ignores the ColorFilter.\n *\n * <p>It can be defined in an XML file with the <code>&lt;color></code> element.</p>\n *\n * @attr ref android.R.styleable#ColorDrawable_color\n ",
  "variables" : [ {
    "name" : "mPaint",
    "type" : "Paint",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorState",
    "type" : "ColorState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBlendModeColorFilter",
    "type" : "BlendModeColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMutated",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Drawable mutate()",
    "returnType" : "Drawable",
    "comment" : "\n     * A mutable BitmapDrawable still shares its Bitmap with any other Drawable\n     * that comes from the same resource.\n     *\n     * @return This drawable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clearMutated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void draw(Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getColor()",
    "returnType" : "int",
    "comment" : "\n     * Gets the drawable's color value.\n     *\n     * @return int The color to draw.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColor(@ColorInt int color)",
    "returnType" : "void",
    "comment" : "\n     * Sets the drawable's color value. This action will clobber the results of\n     * prior calls to {@link #setAlpha(int)} on this object, which side-affected\n     * the underlying color.\n     *\n     * @param color The color to draw.\n     ",
    "links" : [ "#setAlpha" ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "\n     * Returns the alpha value of this drawable's color. Note this may not be the same alpha value\n     * provided in {@link Drawable#setAlpha(int)}. Instead this will return the alpha of the color\n     * combined with the alpha provided by setAlpha\n     *\n     * @return A value between 0 and 255.\n     *\n     * @see ColorDrawable#setAlpha(int)\n     ",
    "links" : [ "Drawable#setAlpha" ]
  }, {
    "name" : "public void setAlpha(int alpha)",
    "returnType" : "void",
    "comment" : "\n     * Applies the given alpha to the underlying color. Note if the color already has\n     * an alpha applied to it, this will apply this alpha to the existing value instead of\n     * overwriting it.\n     *\n     * @param alpha The alpha value to set, between 0 and 255.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "\n     * Sets the color filter applied to this color.\n     * <p>\n     * Only supported on version {@link android.os.Build.VERSION_CODES#LOLLIPOP} and\n     * above. Calling this method has no effect on earlier versions.\n     *\n     * @see android.graphics.drawable.Drawable#setColorFilter(ColorFilter)\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP" ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "\n     * Returns the color filter applied to this color configured by\n     * {@link #setColorFilter(ColorFilter)}\n     *\n     * @see android.graphics.drawable.Drawable#getColorFilter()\n     ",
    "links" : [ "#setColorFilter" ]
  }, {
    "name" : "public void setTintList(ColorStateList tint)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setTintBlendMode(@NonNull BlendMode blendMode)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean onStateChange(int[] stateSet)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isStateful()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFocusStateSpecified()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setXfermode(@Nullable Xfermode mode)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * @param mode new transfer mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public Xfermode getXfermode()",
    "returnType" : "Xfermode",
    "comment" : "\n     * @hide\n     * @return current transfer mode\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getOutline(@NonNull Outline outline)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a)",
    "returnType" : "void",
    "comment" : "\n     * Updates the constant state from the values in the typed array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void applyTheme(Theme t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ConstantState getConstantState()",
    "returnType" : "ConstantState",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateLocalState(Resources r)",
    "returnType" : "void",
    "comment" : "\n     * Initializes local dynamic properties from state. This should be called\n     * after significant state changes, e.g. from the One True Constructor and\n     * after inflating or applying a theme.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mPaint", "mColorState", "mBlendModeColorFilter", "mMutated" ],
  "methodNames" : [ "public int getChangingConfigurations()", "public Drawable mutate()", "public void clearMutated()", "public void draw(Canvas canvas)", "public int getColor()", "public void setColor(@ColorInt int color)", "public int getAlpha()", "public void setAlpha(int alpha)", "public void setColorFilter(ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public void setTintList(ColorStateList tint)", "public void setTintBlendMode(@NonNull BlendMode blendMode)", "protected boolean onStateChange(int[] stateSet)", "public boolean isStateful()", "public boolean hasFocusStateSpecified()", "public void setXfermode(@Nullable Xfermode mode)", "public Xfermode getXfermode()", "public int getOpacity()", "public void getOutline(@NonNull Outline outline)", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(TypedArray a)", "public boolean canApplyTheme()", "public void applyTheme(Theme t)", "public ConstantState getConstantState()", "private void updateLocalState(Resources r)" ]
}