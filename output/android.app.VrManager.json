{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/VrManager.java",
  "packageName" : "android.app",
  "className" : "VrManager",
  "comment" : "\n * Used to control aspects of a devices Virtual Reality (VR) capabilities.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mService",
    "type" : "IVrManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallbackMap",
    "type" : "Map<VrStateCallback, CallbackEntry>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerVrStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VrStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Registers a callback to be notified of changes to the VR Mode state.\n     *\n     * @param callback The callback to register.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterVrStateCallback(@NonNull VrStateCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Deregisters VR State callbacks.\n     *\n     * @param callback The callback to deregister.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVrModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current VrMode state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPersistentVrModeEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns the current VrMode state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPersistentVrModeEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Sets the persistent VR mode state of a device. When a device is in persistent VR mode it will\n     * remain in VR mode even if the foreground does not specify Vr mode being enabled. Mainly used\n     * by VR viewers to indicate that a device is placed in a VR viewer.\n     *\n     * @see Activity#setVrModeEnabled(boolean, ComponentName)\n     * @param enabled true if the device should be placed in persistent VR mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVr2dDisplayProperties(@NonNull Vr2dDisplayProperties vr2dDisplayProp)",
    "returnType" : "void",
    "comment" : "\n     * Sets the resolution and DPI of the vr2d virtual display used to display 2D\n     * applications in VR mode.\n     *\n     * @param vr2dDisplayProp properties to be set to the virtual display for\n     * 2D applications in VR mode.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAndBindVrCompositor(ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * Set the component name of the compositor service to bind.\n     *\n     * @param componentName ComponentName of a Service in the application's compositor process to\n     * bind to, or null to clear the current binding.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setStandbyEnabled(boolean standby)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current standby status of the VR device. Standby mode is only used on standalone vr\n     * devices. Standby mode is a deep sleep state where it's appropriate to turn off vr mode.\n     *\n     * @param standby True if the device is entering standby, false if it's exiting standby.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setVrInputMethod(@Nullable ComponentName componentName)",
    "returnType" : "void",
    "comment" : "\n     * This method is not implemented.\n     *\n     * @param componentName not used\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getVr2dDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the display id of VR's {@link VirtualDisplay}.\n     *\n     * @see DisplayManager#getDisplay(int)\n     ",
    "links" : [ "VirtualDisplay" ]
  } ],
  "methodNames" : [ "public void registerVrStateCallback(@NonNull @CallbackExecutor Executor executor, @NonNull VrStateCallback callback)", "public void unregisterVrStateCallback(@NonNull VrStateCallback callback)", "public boolean isVrModeEnabled()", "public boolean isPersistentVrModeEnabled()", "public void setPersistentVrModeEnabled(boolean enabled)", "public void setVr2dDisplayProperties(@NonNull Vr2dDisplayProperties vr2dDisplayProp)", "public void setAndBindVrCompositor(ComponentName componentName)", "public void setStandbyEnabled(boolean standby)", "public void setVrInputMethod(@Nullable ComponentName componentName)", "public int getVr2dDisplayId()" ],
  "variableNames" : [ "mService", "mCallbackMap" ]
}