{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/nfc/NdefRecord.java",
  "packageName" : "android.nfc",
  "className" : "NdefRecord",
  "comment" : "\n * Represents an immutable NDEF Record.\n * <p>\n * NDEF (NFC Data Exchange Format) is a light-weight binary format,\n * used to encapsulate typed data. It is specified by the NFC Forum,\n * for transmission and storage with NFC, however it is transport agnostic.\n * <p>\n * NDEF defines messages and records. An NDEF Record contains\n * typed data, such as MIME-type media, a URI, or a custom\n * application payload. An NDEF Message is a container for\n * one or more NDEF Records.\n * <p>\n * This class represents logical (complete) NDEF Records, and can not be\n * used to represent chunked (partial) NDEF Records. However\n * {@link NdefMessage#NdefMessage(byte[])} can be used to parse a message\n * containing chunked records, and will return a message with unchunked\n * (complete) records.\n * <p>\n * A logical NDEF Record always contains a 3-bit TNF (Type Name Field)\n * that provides high level typing for the rest of the record. The\n * remaining fields are variable length and not always present:\n * <ul>\n * <li><em>type</em>: detailed typing for the payload</li>\n * <li><em>id</em>: identifier meta-data, not commonly used</li>\n * <li><em>payload</em>: the actual payload</li>\n * </ul>\n * <p>\n * Helpers such as {@link NdefRecord#createUri}, {@link NdefRecord#createMime}\n * and {@link NdefRecord#createExternal} are included to create well-formatted\n * NDEF Records with correctly set tnf, type, id and payload fields, please\n * use these helpers whenever possible.\n * <p>\n * Use the constructor {@link #NdefRecord(short, byte[], byte[], byte[])}\n * if you know what you are doing and what to set the fields individually.\n * Only basic validation is performed with this constructor, so it is possible\n * to create records that do not confirm to the strict NFC Forum\n * specifications.\n * <p>\n * The binary representation of an NDEF Record includes additional flags to\n * indicate location with an NDEF message, provide support for chunking of\n * NDEF records, and to pack optional fields. This class does not expose\n * those details. To write an NDEF Record as binary you must first put it\n * into an {@link NdefMessage}, then call {@link NdefMessage#toByteArray()}.\n * <p class=\"note\">\n * {@link NdefMessage} and {@link NdefRecord} implementations are\n * always available, even on Android devices that do not have NFC hardware.\n * <p class=\"note\">\n * {@link NdefRecord}s are intended to be immutable (and thread-safe),\n * however they may contain mutable fields. So take care not to modify\n * mutable fields passed into constructors, or modify mutable fields\n * obtained by getter methods, unless such modification is explicitly\n * marked as safe.\n *\n * @see NfcAdapter#ACTION_NDEF_DISCOVERED\n * @see NdefMessage\n ",
  "variables" : [ {
    "name" : "TNF_EMPTY",
    "type" : "short",
    "comment" : "\n     * Indicates the record is empty.<p>\n     * Type, id and payload fields are empty in a {@literal TNF_EMPTY} record.\n     ",
    "links" : [ ]
  }, {
    "name" : "TNF_WELL_KNOWN",
    "type" : "short",
    "comment" : "\n     * Indicates the type field contains a well-known RTD type name.<p>\n     * Use this tnf with RTD types such as {@link #RTD_TEXT}, {@link #RTD_URI}.\n     * <p>\n     * The RTD type name format is specified in NFCForum-TS-RTD_1.0.\n     *\n     * @see #RTD_URI\n     * @see #RTD_TEXT\n     * @see #RTD_SMART_POSTER\n     * @see #createUri\n     ",
    "links" : [ "#RTD_URI", "#RTD_TEXT" ]
  }, {
    "name" : "TNF_MIME_MEDIA",
    "type" : "short",
    "comment" : "\n     * Indicates the type field contains a media-type BNF\n     * construct, defined by RFC 2046.<p>\n     * Use this with MIME type names such as {@literal \"image/jpeg\"}, or\n     * using the helper {@link #createMime}.\n     *\n     * @see #createMime\n     ",
    "links" : [ "#createMime" ]
  }, {
    "name" : "TNF_ABSOLUTE_URI",
    "type" : "short",
    "comment" : "\n     * Indicates the type field contains an absolute-URI\n     * BNF construct defined by RFC 3986.<p>\n     * When creating new records prefer {@link #createUri},\n     * since it offers more compact URI encoding\n     * ({@literal #RTD_URI} allows compression of common URI prefixes).\n     *\n     * @see #createUri\n     ",
    "links" : [ "#createUri" ]
  }, {
    "name" : "TNF_EXTERNAL_TYPE",
    "type" : "short",
    "comment" : "\n     * Indicates the type field contains an external type name.<p>\n     * Used to encode custom payloads. When creating new records\n     * use the helper {@link #createExternal}.<p>\n     * The external-type RTD format is specified in NFCForum-TS-RTD_1.0.<p>\n     * <p>\n     * Note this TNF should not be used with RTD_TEXT or RTD_URI constants.\n     * Those are well known RTD constants, not external RTD constants.\n     *\n     * @see #createExternal\n     ",
    "links" : [ "#createExternal" ]
  }, {
    "name" : "TNF_UNKNOWN",
    "type" : "short",
    "comment" : "\n     * Indicates the payload type is unknown.<p>\n     * NFC Forum explains this should be treated similarly to the\n     * \"application/octet-stream\" MIME type. The payload\n     * type is not explicitly encoded within the record.\n     * <p>\n     * The type field is empty in an {@literal TNF_UNKNOWN} record.\n     ",
    "links" : [ ]
  }, {
    "name" : "TNF_UNCHANGED",
    "type" : "short",
    "comment" : "\n     * Indicates the payload is an intermediate or final chunk of a chunked\n     * NDEF Record.<p>\n     * {@literal TNF_UNCHANGED} can not be used with this class\n     * since all {@link NdefRecord}s are already unchunked, however they\n     * may appear in the binary format.\n     ",
    "links" : [ "android.nfc.NdefRecord" ]
  }, {
    "name" : "TNF_RESERVED",
    "type" : "short",
    "comment" : "\n     * Reserved TNF type.\n     * <p>\n     * The NFC Forum NDEF Specification v1.0 suggests for NDEF parsers to treat this\n     * value like TNF_UNKNOWN.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RTD_TEXT",
    "type" : "byte[]",
    "comment" : " \"T\"",
    "links" : [ ]
  }, {
    "name" : "RTD_URI",
    "type" : "byte[]",
    "comment" : " \"U\"",
    "links" : [ ]
  }, {
    "name" : "RTD_SMART_POSTER",
    "type" : "byte[]",
    "comment" : " \"Sp\"",
    "links" : [ ]
  }, {
    "name" : "RTD_ALTERNATIVE_CARRIER",
    "type" : "byte[]",
    "comment" : " \"ac\"",
    "links" : [ ]
  }, {
    "name" : "RTD_HANDOVER_CARRIER",
    "type" : "byte[]",
    "comment" : " \"Hc\"",
    "links" : [ ]
  }, {
    "name" : "RTD_HANDOVER_REQUEST",
    "type" : "byte[]",
    "comment" : " \"Hr\"",
    "links" : [ ]
  }, {
    "name" : "RTD_HANDOVER_SELECT",
    "type" : "byte[]",
    "comment" : " \"Hs\"",
    "links" : [ ]
  }, {
    "name" : "RTD_ANDROID_APP",
    "type" : "byte[]",
    "comment" : "\n     * RTD Android app type. For use with {@literal TNF_EXTERNAL}.\n     * <p>\n     * The payload of a record with type RTD_ANDROID_APP\n     * should be the package name identifying an application.\n     * Multiple RTD_ANDROID_APP records may be included\n     * in a single {@link NdefMessage}.\n     * <p>\n     * Use {@link #createApplicationRecord(String)} to create\n     * RTD_ANDROID_APP records.\n     * @hide\n     ",
    "links" : [ "#createApplicationRecord(String)", "android.nfc.NdefMessage" ]
  }, {
    "name" : "FLAG_MB",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_ME",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_CF",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_SR",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FLAG_IL",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "URI_PREFIX_MAP",
    "type" : "String[]",
    "comment" : "\n     * NFC Forum \"URI Record Type Definition\"<p>\n     * This is a mapping of \"URI Identifier Codes\" to URI string prefixes,\n     * per section 3.2.2 of the NFC Forum URI Record Type Definition document.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_PAYLOAD_SIZE",
    "type" : "int",
    "comment" : " 10 MB payload limit",
    "links" : [ ]
  }, {
    "name" : "EMPTY_BYTE_ARRAY",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTnf",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPayload",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<NdefRecord>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static NdefRecord createApplicationRecord(String packageName)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new Android Application Record (AAR).\n     * <p>\n     * This record indicates to other Android devices the package\n     * that should be used to handle the entire NDEF message.\n     * You can embed this record anywhere into your message\n     * to ensure that the intended package receives the message.\n     * <p>\n     * When an Android device dispatches an {@link NdefMessage}\n     * containing one or more Android application records,\n     * the applications contained in those records will be the\n     * preferred target for the {@link NfcAdapter#ACTION_NDEF_DISCOVERED}\n     * intent, in the order in which they appear in the message.\n     * This dispatch behavior was first added to Android in\n     * Ice Cream Sandwich.\n     * <p>\n     * If none of the applications have a are installed on the device,\n     * a Market link will be opened to the first application.\n     * <p>\n     * Note that Android application records do not overrule\n     * applications that have called\n     * {@link NfcAdapter#enableForegroundDispatch}.\n     *\n     * @param packageName Android package name\n     * @return Android application NDEF record\n     ",
    "links" : [ "android.nfc.NfcAdapter#enableForegroundDispatch", "android.nfc.NdefMessage", "android.nfc.NfcAdapter#ACTION_NDEF_DISCOVERED" ]
  }, {
    "name" : "public static NdefRecord createUri(Uri uri)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new NDEF Record containing a URI.<p>\n     * Use this method to encode a URI (or URL) into an NDEF Record.<p>\n     * Uses the well known URI type representation: {@link #TNF_WELL_KNOWN}\n     * and {@link #RTD_URI}. This is the most efficient encoding\n     * of a URI into NDEF.<p>\n     * The uri parameter will be normalized with\n     * {@link Uri#normalizeScheme} to set the scheme to lower case to\n     * follow Android best practices for intent filtering.\n     * However the unchecked exception\n     * {@link IllegalArgumentException} may be thrown if the uri\n     * parameter has serious problems, for example if it is empty, so always\n     * catch this exception if you are passing user-generated data into this\n     * method.<p>\n     *\n     * Reference specification: NFCForum-TS-RTD_URI_1.0\n     *\n     * @param uri URI to encode.\n     * @return an NDEF Record containing the URI\n     * @throws IllegalArugmentException if the uri is empty or invalid\n     ",
    "links" : [ "android.net.Uri#normalizeScheme", "#RTD_URI", "#TNF_WELL_KNOWN", "IllegalArgumentException" ]
  }, {
    "name" : "public static NdefRecord createUri(String uriString)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new NDEF Record containing a URI.<p>\n     * Use this method to encode a URI (or URL) into an NDEF Record.<p>\n     * Uses the well known URI type representation: {@link #TNF_WELL_KNOWN}\n     * and {@link #RTD_URI}. This is the most efficient encoding\n     * of a URI into NDEF.<p>\n      * The uriString parameter will be normalized with\n     * {@link Uri#normalizeScheme} to set the scheme to lower case to\n     * follow Android best practices for intent filtering.\n     * However the unchecked exception\n     * {@link IllegalArgumentException} may be thrown if the uriString\n     * parameter has serious problems, for example if it is empty, so always\n     * catch this exception if you are passing user-generated data into this\n     * method.<p>\n     *\n     * Reference specification: NFCForum-TS-RTD_URI_1.0\n     *\n     * @param uriString string URI to encode.\n     * @return an NDEF Record containing the URI\n     * @throws IllegalArugmentException if the uriString is empty or invalid\n     ",
    "links" : [ "android.net.Uri#normalizeScheme", "#RTD_URI", "#TNF_WELL_KNOWN", "IllegalArgumentException" ]
  }, {
    "name" : "public static NdefRecord createMime(String mimeType, byte[] mimeData)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new NDEF Record containing MIME data.<p>\n     * Use this method to encode MIME-typed data into an NDEF Record,\n     * such as \"text/plain\", or \"image/jpeg\".<p>\n     * The mimeType parameter will be normalized with\n     * {@link Intent#normalizeMimeType} to follow Android best\n     * practices for intent filtering, for example to force lower-case.\n     * However the unchecked exception\n     * {@link IllegalArgumentException} may be thrown\n     * if the mimeType parameter has serious problems,\n     * for example if it is empty, so always catch this\n     * exception if you are passing user-generated data into this method.\n     * <p>\n     * For efficiency, This method might not make an internal copy of the\n     * mimeData byte array, so take care not\n     * to modify the mimeData byte array while still using the returned\n     * NdefRecord.\n     *\n     * @param mimeType a valid MIME type\n     * @param mimeData MIME data as bytes\n     * @return an NDEF Record containing the MIME-typed data\n     * @throws IllegalArugmentException if the mimeType is empty or invalid\n     *\n     ",
    "links" : [ "android.content.Intent#normalizeMimeType", "IllegalArgumentException" ]
  }, {
    "name" : "public static NdefRecord createExternal(String domain, String type, byte[] data)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new NDEF Record containing external (application-specific) data.<p>\n     * Use this method to encode application specific data into an NDEF Record.\n     * The data is typed by a domain name (usually your Android package name) and\n     * a domain-specific type. This data is packaged into a \"NFC Forum External\n     * Type\" NDEF Record.<p>\n     * NFC Forum requires that the domain and type used in an external record\n     * are treated as case insensitive, however Android intent filtering is\n     * always case sensitive. So this method will force the domain and type to\n     * lower-case before creating the NDEF Record.<p>\n     * The unchecked exception {@link IllegalArgumentException} will be thrown\n     * if the domain and type have serious problems, for example if either field\n     * is empty, so always catch this\n     * exception if you are passing user-generated data into this method.<p>\n     * There are no such restrictions on the payload data.<p>\n     * For efficiency, This method might not make an internal copy of the\n     * data byte array, so take care not\n     * to modify the data byte array while still using the returned\n     * NdefRecord.\n     *\n     * Reference specification: NFCForum-TS-RTD_1.0\n     * @param domain domain-name of issuing organization\n     * @param type domain-specific type of data\n     * @param data payload as bytes\n     * @throws IllegalArugmentException if either domain or type are empty or invalid\n     ",
    "links" : [ "IllegalArgumentException" ]
  }, {
    "name" : "public static NdefRecord createTextRecord(String languageCode, String text)",
    "returnType" : "NdefRecord",
    "comment" : "\n     * Create a new NDEF record containing UTF-8 text data.<p>\n     *\n     * The caller can either specify the language code for the provided text,\n     * or otherwise the language code corresponding to the current default\n     * locale will be used.\n     *\n     * Reference specification: NFCForum-TS-RTD_Text_1.0\n     * @param languageCode The languageCode for the record. If locale is empty or null,\n     *                     the language code of the current default locale will be used.\n     * @param text   The text to be encoded in the record. Will be represented in UTF-8 format.\n     * @throws IllegalArgumentException if text is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public short getTnf()",
    "returnType" : "short",
    "comment" : "\n     * Returns the 3-bit TNF.\n     * <p>\n     * TNF is the top-level type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getType()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the variable length Type field.\n     * <p>\n     * This should be used in conjunction with the TNF field to determine the\n     * payload format.\n     * <p>\n     * Returns an empty byte array if this record\n     * does not have a type field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getId()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the variable length ID.\n     * <p>\n     * Returns an empty byte array if this record\n     * does not have an id field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getPayload()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the variable length payload.\n     * <p>\n     * Returns an empty byte array if this record\n     * does not have a payload field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] toByteArray()",
    "returnType" : "byte[]",
    "comment" : "\n     * Return this NDEF Record as a byte array.<p>\n     * This method is deprecated, use {@link NdefMessage#toByteArray}\n     * instead. This is because the NDEF binary format is not defined for\n     * a record outside of the context of a message: the MB and ME flags\n     * cannot be set without knowing the location inside a message.<p>\n     * This implementation will attempt to serialize a single record by\n     * always setting the MB and ME flags (in other words, assume this\n     * is a single-record NDEF Message).<p>\n     *\n     * @deprecated use {@link NdefMessage#toByteArray()} instead\n     ",
    "links" : [ "android.nfc.NdefMessage#toByteArray()", "android.nfc.NdefMessage#toByteArray" ]
  }, {
    "name" : "public String toMimeType()",
    "returnType" : "String",
    "comment" : "\n     * Map this record to a MIME type, or return null if it cannot be mapped.<p>\n     * Currently this method considers all {@link #TNF_MIME_MEDIA} records to\n     * be MIME records, as well as some {@link #TNF_WELL_KNOWN} records such as\n     * {@link #RTD_TEXT}. If this is a MIME record then the MIME type as string\n     * is returned, otherwise null is returned.<p>\n     * This method does not perform validation that the MIME type is\n     * actually valid. It always attempts to\n     * return a string containing the type if this is a MIME record.<p>\n     * The returned MIME type will by normalized to lower-case using\n     * {@link Intent#normalizeMimeType}.<p>\n     * The MIME payload can be obtained using {@link #getPayload}.\n     *\n     * @return MIME type as a string, or null if this is not a MIME record\n     ",
    "links" : [ "android.content.Intent#normalizeMimeType", "#getPayload", "#TNF_WELL_KNOWN", "#TNF_MIME_MEDIA", "#RTD_TEXT" ]
  }, {
    "name" : "public Uri toUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Map this record to a URI, or return null if it cannot be mapped.<p>\n     * Currently this method considers the following to be URI records:\n     * <ul>\n     * <li>{@link #TNF_ABSOLUTE_URI} records.</li>\n     * <li>{@link #TNF_WELL_KNOWN} with a type of {@link #RTD_URI}.</li>\n     * <li>{@link #TNF_WELL_KNOWN} with a type of {@link #RTD_SMART_POSTER}\n     * and containing a URI record in the NDEF message nested in the payload.\n     * </li>\n     * <li>{@link #TNF_EXTERNAL_TYPE} records.</li>\n     * </ul>\n     * If this is not a URI record by the above rules, then null is returned.<p>\n     * This method does not perform validation that the URI is\n     * actually valid: it always attempts to create and return a URI if\n     * this record appears to be a URI record by the above rules.<p>\n     * The returned URI will be normalized to have a lower case scheme\n     * using {@link Uri#normalizeScheme}.<p>\n     *\n     * @return URI, or null if this is not a URI record\n     ",
    "links" : [ "android.net.Uri#normalizeScheme", "#TNF_ABSOLUTE_URI", "#RTD_URI", "#TNF_WELL_KNOWN", "#RTD_SMART_POSTER", "#TNF_EXTERNAL_TYPE" ]
  }, {
    "name" : "private Uri toUri(boolean inSmartPoster)",
    "returnType" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Uri parseWktUri()",
    "returnType" : "Uri",
    "comment" : "\n     * Return complete URI of {@link #TNF_WELL_KNOWN}, {@link #RTD_URI} records.\n     * @return complete URI, or null if invalid\n     ",
    "links" : [ "#RTD_URI", "#TNF_WELL_KNOWN" ]
  }, {
    "name" : " static NdefRecord[] parse(ByteBuffer buffer, boolean ignoreMbMe) throws FormatException",
    "returnType" : "NdefRecord[]",
    "comment" : "\n     * Main record parsing method.<p>\n     * Expects NdefMessage to begin immediately, allows trailing data.<p>\n     * Currently has strict validation of all fields as per NDEF 1.0\n     * specification section 2.5. We will attempt to keep this as strict as\n     * possible to encourage well-formatted NDEF.<p>\n     * Always returns 1 or more NdefRecord's, or throws FormatException.\n     *\n     * @param buffer ByteBuffer to read from\n     * @param ignoreMbMe ignore MB and ME flags, and read only 1 complete record\n     * @return one or more records\n     * @throws FormatException on any parsing error\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void ensureSanePayloadSize(long size) throws FormatException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String validateTnf(short tnf, byte[] type, byte[] id, byte[] payload)",
    "returnType" : "String",
    "comment" : "\n     * Perform simple validation that the tnf is valid.<p>\n     * Validates the requirements of NFCForum-TS-NDEF_1.0 section\n     * 3.2.6 (Type Name Format). This just validates that the tnf\n     * is valid, and that the relevant type, id and payload\n     * fields are present (or empty) for this tnf. It does not\n     * perform any deep inspection of the type, id and payload fields.<p>\n     * Also does not allow TNF_UNCHANGED since this class is only used\n     * to present logical (unchunked) records.\n     *\n     * @return null if valid, or a string error if invalid.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeToByteBuffer(ByteBuffer buffer, boolean mb, boolean me)",
    "returnType" : "void",
    "comment" : "\n     * Serialize record for network transmission.<p>\n     * Uses specified MB and ME flags.<p>\n     * Does not chunk records.\n     ",
    "links" : [ ]
  }, {
    "name" : " int getByteLength()",
    "returnType" : "int",
    "comment" : "\n     * Get byte length of serialized record.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified NDEF Record contains\n     * identical tnf, type, id and payload fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto)",
    "returnType" : "void",
    "comment" : "\n     * Dump debugging information as a NdefRecordProto\n     * @hide\n     *\n     * Note:\n     * See proto definition in frameworks/base/core/proto/android/nfc/ndef.proto\n     * When writing a nested message, must call {@link ProtoOutputStream#start(long)} before and\n     * {@link ProtoOutputStream#end(long)} after.\n     * Never reuse a proto field number. When removing a field, mark it as reserved.\n     ",
    "links" : [ "android.util.proto.ProtoOutputStream#end(long)", "android.util.proto.ProtoOutputStream#start(long)" ]
  }, {
    "name" : "private static StringBuilder bytesToString(byte[] bs)",
    "returnType" : "StringBuilder",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TNF_EMPTY", "TNF_WELL_KNOWN", "TNF_MIME_MEDIA", "TNF_ABSOLUTE_URI", "TNF_EXTERNAL_TYPE", "TNF_UNKNOWN", "TNF_UNCHANGED", "TNF_RESERVED", "RTD_TEXT", "RTD_URI", "RTD_SMART_POSTER", "RTD_ALTERNATIVE_CARRIER", "RTD_HANDOVER_CARRIER", "RTD_HANDOVER_REQUEST", "RTD_HANDOVER_SELECT", "RTD_ANDROID_APP", "FLAG_MB", "FLAG_ME", "FLAG_CF", "FLAG_SR", "FLAG_IL", "URI_PREFIX_MAP", "MAX_PAYLOAD_SIZE", "EMPTY_BYTE_ARRAY", "mTnf", "mType", "mId", "mPayload", "CREATOR" ],
  "methodNames" : [ "public static NdefRecord createApplicationRecord(String packageName)", "public static NdefRecord createUri(Uri uri)", "public static NdefRecord createUri(String uriString)", "public static NdefRecord createMime(String mimeType, byte[] mimeData)", "public static NdefRecord createExternal(String domain, String type, byte[] data)", "public static NdefRecord createTextRecord(String languageCode, String text)", "public short getTnf()", "public byte[] getType()", "public byte[] getId()", "public byte[] getPayload()", "public byte[] toByteArray()", "public String toMimeType()", "public Uri toUri()", "private Uri toUri(boolean inSmartPoster)", "private Uri parseWktUri()", " static NdefRecord[] parse(ByteBuffer buffer, boolean ignoreMbMe) throws FormatException", "private static void ensureSanePayloadSize(long size) throws FormatException", " static String validateTnf(short tnf, byte[] type, byte[] id, byte[] payload)", " void writeToByteBuffer(ByteBuffer buffer, boolean mb, boolean me)", " int getByteLength()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public void dumpDebug(ProtoOutputStream proto)", "private static StringBuilder bytesToString(byte[] bs)" ]
}