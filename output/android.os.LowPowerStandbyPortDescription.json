{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/PowerManager.java",
  "packageName" : "android.os",
  "className" : "LowPowerStandbyPortDescription",
  "comment" : "\n     * Describes ports that may be requested to remain open during Low Power Standby.\n     *\n     * @hide\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PROTOCOL_TCP",
    "type" : "int",
    "comment" : "\n         * Constant to indicate the {@link LowPowerStandbyPortDescription} refers to a TCP port.\n         ",
    "links" : [ "LowPowerStandbyPortDescription" ]
  }, {
    "name" : "PROTOCOL_UDP",
    "type" : "int",
    "comment" : "\n         * Constant to indicate the {@link LowPowerStandbyPortDescription} refers to a UDP port.\n         ",
    "links" : [ "LowPowerStandbyPortDescription" ]
  }, {
    "name" : "MATCH_PORT_LOCAL",
    "type" : "int",
    "comment" : "\n         * Constant to indicate the {@link LowPowerStandbyPortDescription}'s port number is to be\n         * matched against the socket's local port number (the destination port number of an\n         * incoming packet).\n         ",
    "links" : [ "LowPowerStandbyPortDescription" ]
  }, {
    "name" : "MATCH_PORT_REMOTE",
    "type" : "int",
    "comment" : "\n         * Constant to indicate the {@link LowPowerStandbyPortDescription}'s port number is to be\n         * matched against the socket's remote port number (the source port number of an\n         * incoming packet).\n         ",
    "links" : [ "LowPowerStandbyPortDescription" ]
  }, {
    "name" : "mProtocol",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPortMatcher",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPortNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalAddress",
    "type" : "InetAddress",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private String protocolToString(int protocol)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String portMatcherToString(int portMatcher)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getProtocol()",
    "returnType" : "int",
    "comment" : "\n         * Returns the described port's protocol,\n         * either {@link #PROTOCOL_TCP} or {@link #PROTOCOL_UDP}.\n         *\n         * @see #PROTOCOL_TCP\n         * @see #PROTOCOL_UDP\n         * @see #getPortNumber()\n         * @see #getPortMatcher()\n         ",
    "links" : [ "#PROTOCOL_TCP", "#PROTOCOL_UDP" ]
  }, {
    "name" : "public int getPortMatcher()",
    "returnType" : "int",
    "comment" : "\n         * Returns how the port number ({@link #getPortNumber()}) should be matched against\n         * incoming packets.\n         * Either {@link #PROTOCOL_TCP} or {@link #PROTOCOL_UDP}.\n         *\n         * @see #PROTOCOL_TCP\n         * @see #PROTOCOL_UDP\n         * @see #getPortNumber()\n         * @see #getProtocol()\n         ",
    "links" : [ "#getPortNumber()", "#PROTOCOL_TCP", "#PROTOCOL_UDP" ]
  }, {
    "name" : "public int getPortNumber()",
    "returnType" : "int",
    "comment" : "\n         * Returns how the port number that incoming packets should be matched against.\n         *\n         * @see #getPortMatcher()\n         * @see #getProtocol()\n         ",
    "links" : [ ]
  }, {
    "name" : "public InetAddress getLocalAddress()",
    "returnType" : "InetAddress",
    "comment" : "\n         * Returns the bind address to match against, or {@code null} if matching against any\n         * bind address.\n         *\n         * @see #getPortMatcher()\n         * @see #getProtocol()\n         ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static IPowerManager.LowPowerStandbyPortDescription toParcelable(LowPowerStandbyPortDescription portDescription)",
    "returnType" : "IPowerManager.LowPowerStandbyPortDescription",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static List<IPowerManager.LowPowerStandbyPortDescription> toParcelable(List<LowPowerStandbyPortDescription> portDescriptions)",
    "returnType" : "List<IPowerManager.LowPowerStandbyPortDescription>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static LowPowerStandbyPortDescription fromParcelable(IPowerManager.LowPowerStandbyPortDescription parcelablePortDescription)",
    "returnType" : "LowPowerStandbyPortDescription",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static List<LowPowerStandbyPortDescription> fromParcelable(List<IPowerManager.LowPowerStandbyPortDescription> portDescriptions)",
    "returnType" : "List<LowPowerStandbyPortDescription>",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private String protocolToString(int protocol)", "private String portMatcherToString(int portMatcher)", "public int getProtocol()", "public int getPortMatcher()", "public int getPortNumber()", "public InetAddress getLocalAddress()", "public String toString()", "public boolean equals(Object o)", "public int hashCode()", "public static IPowerManager.LowPowerStandbyPortDescription toParcelable(LowPowerStandbyPortDescription portDescription)", "public static List<IPowerManager.LowPowerStandbyPortDescription> toParcelable(List<LowPowerStandbyPortDescription> portDescriptions)", "public static LowPowerStandbyPortDescription fromParcelable(IPowerManager.LowPowerStandbyPortDescription parcelablePortDescription)", "public static List<LowPowerStandbyPortDescription> fromParcelable(List<IPowerManager.LowPowerStandbyPortDescription> portDescriptions)" ],
  "variableNames" : [ "PROTOCOL_TCP", "PROTOCOL_UDP", "MATCH_PORT_LOCAL", "MATCH_PORT_REMOTE", "mProtocol", "mPortMatcher", "mPortNumber", "mLocalAddress" ]
}