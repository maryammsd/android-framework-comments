{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/service/quicksettings/TileService.java",
  "packageName" : "android.service.quicksettings",
  "className" : "TileService",
  "comment" : "\n * A TileService provides the user a tile that can be added to Quick Settings.\n * Quick Settings is a space provided that allows the user to change settings and\n * take quick actions without leaving the context of their current app.\n *\n * <p>The lifecycle of a TileService is different from some other services in\n * that it may be unbound during parts of its lifecycle.  Any of the following\n * lifecycle events can happen indepently in a separate binding/creation of the\n * service.</p>\n *\n * <ul>\n * <li>When a tile is added by the user its TileService will be bound to and\n * {@link #onTileAdded()} will be called.</li>\n *\n * <li>When a tile should be up to date and listing will be indicated by\n * {@link #onStartListening()} and {@link #onStopListening()}.</li>\n *\n * <li>When the user removes a tile from Quick Settings {@link #onTileRemoved()}\n * will be called.</li>\n * </ul>\n * <p>TileService will be detected by tiles that match the {@value #ACTION_QS_TILE}\n * and require the permission \"android.permission.BIND_QUICK_SETTINGS_TILE\".\n * The label and icon for the service will be used as the default label and\n * icon for the tile. Here is an example TileService declaration.</p>\n * <pre class=\"prettyprint\">\n * {@literal\n * <service\n *     android:name=\".MyQSTileService\"\n *     android:label=\"@string/my_default_tile_label\"\n *     android:icon=\"@drawable/my_default_icon_label\"\n *     android:permission=\"android.permission.BIND_QUICK_SETTINGS_TILE\">\n *     <intent-filter>\n *         <action android:name=\"android.service.quicksettings.action.QS_TILE\" />\n *     </intent-filter>\n * </service>}\n * </pre>\n *\n * @see Tile Tile for details about the UI of a Quick Settings Tile.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_QS_TILE_PREFERENCES",
    "type" : "String",
    "comment" : "\n     * An activity that provides a user interface for adjusting TileService\n     * preferences. Optional but recommended for apps that implement a\n     * TileService.\n     * <p>\n     * This intent may also define a {@link Intent#EXTRA_COMPONENT_NAME} value\n     * to indicate the {@link ComponentName} that caused the preferences to be\n     * opened.\n     * <p>\n     * To ensure that the activity can only be launched through quick settings\n     * UI provided by this service, apps can protect it with the\n     * BIND_QUICK_SETTINGS_TILE permission.\n     ",
    "links" : [ "android.content.Intent#EXTRA_COMPONENT_NAME", "android.content.ComponentName" ]
  }, {
    "name" : "ACTION_QS_TILE",
    "type" : "String",
    "comment" : "\n     * Action that identifies a Service as being a TileService.\n     ",
    "links" : [ ]
  }, {
    "name" : "META_DATA_ACTIVE_TILE",
    "type" : "String",
    "comment" : "\n     * Meta-data for tile definition to set a tile into active mode.\n     * <p>\n     * Active mode is for tiles which already listen and keep track of their state in their\n     * own process.  These tiles may request to send an update to the System while their process\n     * is alive using {@link #requestListeningState}.  The System will only bind these tiles\n     * on its own when a click needs to occur.\n     *\n     * To make a TileService an active tile, set this meta-data to true on the TileService's\n     * manifest declaration.\n     * <pre class=\"prettyprint\">\n     * {@literal\n     * <meta-data android:name=\"android.service.quicksettings.ACTIVE_TILE\"\n     *      android:value=\"true\" />\n     * }\n     * </pre>\n     ",
    "links" : [ "#requestListeningState" ]
  }, {
    "name" : "META_DATA_TOGGLEABLE_TILE",
    "type" : "String",
    "comment" : "\n     * Meta-data for a tile to mark is toggleable.\n     * <p>\n     * Toggleable tiles support switch tile behavior in accessibility. This is\n     * the behavior of most of the framework tiles.\n     *\n     * To indicate that a TileService is toggleable, set this meta-data to true on the\n     * TileService's manifest declaration.\n     * <pre class=\"prettyprint\">\n     * {@literal\n     * <meta-data android:name=\"android.service.quicksettings.TOGGLEABLE_TILE\"\n     *      android:value=\"true\" />\n     * }\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_REQUEST_LISTENING",
    "type" : "String",
    "comment" : "\n     * Used to notify SysUI that Listening has be requested.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SERVICE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_TOKEN",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_STATE",
    "type" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "H",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListening",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTile",
    "type" : "Tile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IQSService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnlockRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTileToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onTileAdded()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user adds this tile to Quick Settings.\n     * <p/>\n     * Note that this is not guaranteed to be called between {@link #onCreate()}\n     * and {@link #onStartListening()}, it will only be called when the tile is added\n     * and not on subsequent binds.\n     ",
    "links" : [ "#onCreate()", "#onStartListening()" ]
  }, {
    "name" : "public void onTileRemoved()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user removes this tile from Quick Settings.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onStartListening()",
    "returnType" : "void",
    "comment" : "\n     * Called when this tile moves into a listening state.\n     * <p/>\n     * When this tile is in a listening state it is expected to keep the\n     * UI up to date.  Any listeners or callbacks needed to keep this tile\n     * up to date should be registered here and unregistered in {@link #onStopListening()}.\n     *\n     * @see #getQsTile()\n     * @see Tile#updateTile()\n     ",
    "links" : [ "#onStopListening()" ]
  }, {
    "name" : "public void onStopListening()",
    "returnType" : "void",
    "comment" : "\n     * Called when this tile moves out of the listening state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onClick()",
    "returnType" : "void",
    "comment" : "\n     * Called when the user clicks on this tile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void setStatusIcon(Icon icon, String contentDescription)",
    "returnType" : "void",
    "comment" : "\n     * Sets an icon to be shown in the status bar.\n     * <p>\n     * The icon will be displayed before all other icons.  Can only be called between\n     * {@link #onStartListening} and {@link #onStopListening}.  Can only be called by system apps.\n     *\n     * @param icon The icon to be displayed, null to hide\n     * @param contentDescription Content description of the icon to be displayed\n     * @hide\n     ",
    "links" : [ "#onStopListening", "#onStartListening" ]
  }, {
    "name" : "public final void showDialog(Dialog dialog)",
    "returnType" : "void",
    "comment" : "\n     * Used to show a dialog.\n     *\n     * This will collapse the Quick Settings panel and show the dialog.\n     *\n     * @param dialog Dialog to show.\n     *\n     * @see #isLocked()\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void unlockAndRun(Runnable runnable)",
    "returnType" : "void",
    "comment" : "\n     * Prompts the user to unlock the device before executing the Runnable.\n     * <p>\n     * The user will be prompted for their current security method if applicable\n     * and if successful, runnable will be executed.  The Runnable will not be\n     * executed if the user fails to unlock the device or cancels the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isSecure()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the device is in a secure state.\n     *\n     * TileServices should detect when the device is secure and change their behavior\n     * accordingly.\n     *\n     * @return true if the device is secure.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean isLocked()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the lock screen is showing.\n     *\n     * When a device is locked, then {@link #showDialog} will not present a dialog, as it will\n     * be under the lock screen. If the behavior of the Tile is safe to do while locked,\n     * then the user should use {@link #startActivity} to launch an activity on top of the lock\n     * screen, otherwise the tile should use {@link #unlockAndRun(Runnable)} to give the\n     * user their security challenge.\n     *\n     * @return true if the device is locked.\n     ",
    "links" : [ "#unlockAndRun(Runnable)", "#startActivity", "#showDialog" ]
  }, {
    "name" : "public final void startActivityAndCollapse(Intent intent)",
    "returnType" : "void",
    "comment" : "\n     * Start an activity while collapsing the panel.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Tile getQsTile()",
    "returnType" : "Tile",
    "comment" : "\n     * Gets the {@link Tile} for this service.\n     * <p/>\n     * This tile may be used to get or set the current state for this\n     * tile. This tile is only valid for updates between {@link #onStartListening()}\n     * and {@link #onStopListening()}.\n     ",
    "links" : [ "android.service.quicksettings.Tile", "#onStopListening()", "#onStartListening()" ]
  }, {
    "name" : "public IBinder onBind(Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean isQuickSettingsSupported()",
    "returnType" : "boolean",
    "comment" : "\n     * @return True if the device supports quick settings and its assocated APIs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void requestListeningState(Context context, ComponentName component)",
    "returnType" : "void",
    "comment" : "\n     * Requests that a tile be put in the listening state so it can send an update.\n     *\n     * This method is only applicable to tiles that have {@link #META_DATA_ACTIVE_TILE} defined\n     * as true on their TileService Manifest declaration, and will do nothing otherwise.\n     ",
    "links" : [ "#META_DATA_ACTIVE_TILE" ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "ACTION_QS_TILE_PREFERENCES", "ACTION_QS_TILE", "META_DATA_ACTIVE_TILE", "META_DATA_TOGGLEABLE_TILE", "ACTION_REQUEST_LISTENING", "EXTRA_SERVICE", "EXTRA_TOKEN", "EXTRA_STATE", "mHandler", "mListening", "mTile", "mToken", "mService", "mUnlockRunnable", "mTileToken" ],
  "methodNames" : [ "public void onDestroy()", "public void onTileAdded()", "public void onTileRemoved()", "public void onStartListening()", "public void onStopListening()", "public void onClick()", "public final void setStatusIcon(Icon icon, String contentDescription)", "public final void showDialog(Dialog dialog)", "public final void unlockAndRun(Runnable runnable)", "public final boolean isSecure()", "public final boolean isLocked()", "public final void startActivityAndCollapse(Intent intent)", "public final Tile getQsTile()", "public IBinder onBind(Intent intent)", "public static boolean isQuickSettingsSupported()", "public static final void requestListeningState(Context context, ComponentName component)" ]
}