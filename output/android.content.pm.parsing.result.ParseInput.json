{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/content/pm/parsing/result/ParseInput.java",
  "packageName" : "android.content.pm.parsing.result",
  "className" : "ParseInput",
  "comment" : "\n * Used as a method parameter which is then transformed into a {@link ParseResult}. This is\n * generalized as it doesn't matter what type this input is for. It's simply to hide the\n * methods of {@link ParseResult}.\n *\n * @hide\n ",
  "links" : [ "android.content.pm.parsing.result.ParseResult" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " ParseResult<ResultType> success(ResultType result)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ParseResult<?> deferError(@NonNull String parseError, long deferredError)",
    "returnType" : "ParseResult<?>",
    "comment" : "\n     * Used for errors gated by {@link DeferredError}. Will return an error result if the\n     * targetSdkVersion is already known and this must be returned as a real error. The result\n     * contains null and should not be unwrapped.\n     *\n     * @see #error(String)\n     ",
    "links" : [ "DeferredError" ]
  }, {
    "name" : " ParseResult<?> enableDeferredError(String packageName, int targetSdkVersion)",
    "returnType" : "ParseResult<?>",
    "comment" : "\n     * Called after targetSdkVersion is known. Returns an error result if a previously deferred\n     * error was registered. The result contains null and should not be unwrapped.\n     ",
    "links" : [ ]
  }, {
    "name" : " ParseResult<ResultType> skip(@NonNull String parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "\n     * This will assign errorCode to {@link PackageManager#INSTALL_PARSE_FAILED_SKIPPED, used for\n     * packages which should be ignored by the caller.\n     *\n     * @see #error(int, String, Exception)\n     ",
    "links" : [ "android.content.pm.PackageManager#INSTALL_PARSE_FAILED_SKIPPED" ]
  }, {
    "name" : " ParseResult<ResultType> error(int parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : " @see #error(int, String, Exception) ",
    "links" : [ ]
  }, {
    "name" : " ParseResult<ResultType> error(@NonNull String parseError)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "\n     * This will assign errorCode to {@link PackageManager#INSTALL_PARSE_FAILED_MANIFEST_MALFORMED}.\n     * @see #error(int, String, Exception)\n     ",
    "links" : [ "android.content.pm.PackageManager#INSTALL_PARSE_FAILED_MANIFEST_MALFORMED" ]
  }, {
    "name" : " ParseResult<ResultType> error(int parseError, @Nullable String errorMessage)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : " @see #error(int, String, Exception) ",
    "links" : [ ]
  }, {
    "name" : " ParseResult<ResultType> error(int parseError, @Nullable String errorMessage, @Nullable Exception exception)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "\n     * Marks this as an error result. When this method is called, the return value <b>must</b>\n     * be returned to the exit of the parent method that took in this {@link ParseInput} as a\n     * parameter.\n     *\n     * The calling site of that method is then expected to check the result for error, and\n     * continue to bubble up if it is an error.\n     *\n     * If the result {@link ParseResult#isSuccess()}, then it can be used as-is, as\n     * overlapping/consecutive successes are allowed.\n     ",
    "links" : [ "android.content.pm.parsing.result.ParseInput", "android.content.pm.parsing.result.ParseResult#isSuccess()" ]
  }, {
    "name" : " ParseResult<ResultType> error(ParseResult<?> result)",
    "returnType" : "ParseResult<ResultType>",
    "comment" : "\n     * Moves the error in {@param result} to this input's type. In practice this does nothing\n     * but cast the type of the {@link ParseResult} for type safety, since the parameter\n     * and the receiver should be the same object.\n     ",
    "links" : [ "android.content.pm.parsing.result.ParseResult" ]
  } ],
  "methodNames" : [ " ParseResult<ResultType> success(ResultType result)", " ParseResult<?> deferError(@NonNull String parseError, long deferredError)", " ParseResult<?> enableDeferredError(String packageName, int targetSdkVersion)", " ParseResult<ResultType> skip(@NonNull String parseError)", " ParseResult<ResultType> error(int parseError)", " ParseResult<ResultType> error(@NonNull String parseError)", " ParseResult<ResultType> error(int parseError, @Nullable String errorMessage)", " ParseResult<ResultType> error(int parseError, @Nullable String errorMessage, @Nullable Exception exception)", " ParseResult<ResultType> error(ParseResult<?> result)" ],
  "variableNames" : [ ]
}