{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/UrlRequest.java",
  "packageName" : "org.chromium.net",
  "className" : "UrlRequest",
  "comment" : "\n * Controls an HTTP request (GET, PUT, POST etc). Created by {@link UrlRequest.Builder}, which can\n * be obtained by calling {@link CronetEngine#newUrlRequestBuilder}. Note: All methods must be\n * called on the {@link Executor} passed to {@link CronetEngine#newUrlRequestBuilder}.\n ",
  "links" : [ "org.chromium.net.CronetEngine#newUrlRequestBuilder", "java.util.concurrent.Executor", "UrlRequest.Builder" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String getHttpMethod()",
    "returnType" : "String",
    "comment" : "\n     * See {@link UrlRequest.Builder#setHttpMethod(String)}.\n     ",
    "links" : [ "UrlRequest.Builder#setHttpMethod(String)" ]
  }, {
    "name" : "public abstract UrlResponseInfo.HeaderBlock getHeaders()",
    "returnType" : "UrlResponseInfo.HeaderBlock",
    "comment" : "\n     * See {@link UrlRequest.Builder#addHeader(String, String)}\n     ",
    "links" : [ "UrlRequest.Builder#addHeader(String" ]
  }, {
    "name" : "public abstract boolean isCacheDisabled()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link Builder#setCacheDisabled(boolean)}\n     ",
    "links" : [ "#setCacheDisabled(boolean)" ]
  }, {
    "name" : "public abstract boolean isDirectExecutorAllowed()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link UrlRequest.Builder#setDirectExecutorAllowed(boolean)}\n     ",
    "links" : [ "UrlRequest.Builder#setDirectExecutorAllowed(boolean)" ]
  }, {
    "name" : "public abstract int getPriority()",
    "returnType" : "int",
    "comment" : "\n     * See {@link Builder#setPriority(int)}\n     ",
    "links" : [ "#setPriority(int)" ]
  }, {
    "name" : "public abstract boolean hasTrafficStatsTag()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link Builder#setTrafficStatsTag(int)}\n     ",
    "links" : [ "#setTrafficStatsTag(int)" ]
  }, {
    "name" : "public abstract int getTrafficStatsTag()",
    "returnType" : "int",
    "comment" : "\n     * See {@link Builder#setTrafficStatsTag(int)}\n     ",
    "links" : [ "#setTrafficStatsTag(int)" ]
  }, {
    "name" : "public abstract boolean hasTrafficStatsUid()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link Builder#setTrafficStatsUid(int)}\n     ",
    "links" : [ "#setTrafficStatsUid(int)" ]
  }, {
    "name" : "public abstract int getTrafficStatsUid()",
    "returnType" : "int",
    "comment" : "\n     * See {@link Builder#setTrafficStatsUid(int)}\n     ",
    "links" : [ "#setTrafficStatsUid(int)" ]
  }, {
    "name" : "public abstract void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the request, all callbacks go to {@link Callback}. May only be called once. May not be\n     * called if {@link #cancel} has been called.\n     ",
    "links" : [ "Callback", "#cancel" ]
  }, {
    "name" : "public abstract void followRedirect()",
    "returnType" : "void",
    "comment" : "\n     * Follows a pending redirect. Must only be called at most once for each invocation of {@link\n     * Callback#onRedirectReceived onRedirectReceived()}.\n     ",
    "links" : [ "#onRedirectReceived" ]
  }, {
    "name" : "public abstract void read(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to read part of the response body into the provided buffer. Must only be called at\n     * most once in response to each invocation of the {@link Callback#onResponseStarted\n     * onResponseStarted()} and {@link Callback#onReadCompleted onReadCompleted()} methods of the\n     * {@link Callback}. Each call will result in an asynchronous call to either the {@link Callback\n     * Callback's} {@link Callback#onReadCompleted onReadCompleted()} method if data is read, its\n     * {@link Callback#onSucceeded onSucceeded()} method if there's no more data to read, or its\n     * {@link Callback#onFailed onFailed()} method if there's an error.\n     *\n     * @param buffer {@link ByteBuffer} to write response body to. Must be a direct ByteBuffer. The\n     * embedder must not read or modify buffer's position, limit, or data between its position and\n     * limit until the request calls back into the {@link Callback}.\n     ",
    "links" : [ "CallbackCallback", "Callback", "#onReadCompleted", "#onFailed", "#onResponseStartedonResponseStarted()", "#onSucceeded", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the request. Can be called at any time. {@link Callback#onCanceled onCanceled()} will\n     * be invoked when cancellation is complete and no further callback methods will be invoked. If\n     * the request has completed or has not started, calling {@code cancel()} has no effect and\n     * {@code onCanceled()} will not be invoked. If the {@link Executor} passed in during {@code\n     * UrlRequest} construction runs tasks on a single thread, and {@code cancel()} is called on\n     * that thread, no callback methods (besides {@code onCanceled()}) will be invoked after {@code\n     * cancel()} is called. Otherwise, at most one callback method may be invoked after {@code\n     * cancel()} has completed.\n     ",
    "links" : [ "java.util.concurrent.Executor", "#onCanceled" ]
  }, {
    "name" : "public abstract boolean isDone()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the request was successfully started and is now finished (completed,\n     * canceled, or failed).\n     *\n     * @return {@code true} if the request was successfully started and is now finished (completed,\n     * canceled, or failed).\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void getStatus(final StatusListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Queries the status of the request.\n     *\n     * @param listener a {@link StatusListener} that will be invoked with the request's current\n     * status. {@code listener} will be invoked back on the {@link Executor} passed in when the\n     * request was created.\n     ",
    "links" : [ "java.util.concurrent.Executor", "StatusListener" ]
  } ],
  "methodNames" : [ "public abstract String getHttpMethod()", "public abstract UrlResponseInfo.HeaderBlock getHeaders()", "public abstract boolean isCacheDisabled()", "public abstract boolean isDirectExecutorAllowed()", "public abstract int getPriority()", "public abstract boolean hasTrafficStatsTag()", "public abstract int getTrafficStatsTag()", "public abstract boolean hasTrafficStatsUid()", "public abstract int getTrafficStatsUid()", "public abstract void start()", "public abstract void followRedirect()", "public abstract void read(ByteBuffer buffer)", "public abstract void cancel()", "public abstract boolean isDone()", "public abstract void getStatus(final StatusListener listener)" ],
  "variableNames" : [ ]
}