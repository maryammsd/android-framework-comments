{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/chromium/net/BidirectionalStream.java",
  "packageName" : "org.chromium.net",
  "className" : "BidirectionalStream",
  "comment" : "\n * Class for bidirectional sending and receiving of data over HTTP/2 or QUIC connections. Created by\n * {@link Builder}.\n *\n * <p>Note: There are ordering restrictions on methods of {@link BidirectionalStream}; please see\n * individual methods for description of restrictions.\n *\n * {@hide crbug/1394772: needs review before we expose to aosp}\n ",
  "links" : [ "Builder", "org.chromium.net.BidirectionalStream" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract String getHttpMethod()",
    "returnType" : "String",
    "comment" : "\n     * See {@link BidirectionalStream.Builder#setHttpMethod(String)}.\n     ",
    "links" : [ "BidirectionalStream.Builder#setHttpMethod(String)" ]
  }, {
    "name" : "public abstract boolean hasTrafficStatsTag()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link BidirectionalStream.Builder#setTrafficStatsTag(int)}\n     ",
    "links" : [ "BidirectionalStream.Builder#setTrafficStatsTag(int)" ]
  }, {
    "name" : "public abstract int getTrafficStatsTag()",
    "returnType" : "int",
    "comment" : "\n     * See {@link BidirectionalStream.Builder#setTrafficStatsTag(int)}\n     ",
    "links" : [ "BidirectionalStream.Builder#setTrafficStatsTag(int)" ]
  }, {
    "name" : "public abstract boolean hasTrafficStatsUid()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link BidirectionalStream.Builder#setTrafficStatsUid(int)}\n     ",
    "links" : [ "BidirectionalStream.Builder#setTrafficStatsUid(int)" ]
  }, {
    "name" : "public abstract int getTrafficStatsUid()",
    "returnType" : "int",
    "comment" : "\n     * See {@link BidirectionalStream.Builder#setTrafficStatsUid(int)}\n     ",
    "links" : [ "BidirectionalStream.Builder#setTrafficStatsUid(int)" ]
  }, {
    "name" : "public abstract UrlResponseInfo.HeaderBlock getHeaders()",
    "returnType" : "UrlResponseInfo.HeaderBlock",
    "comment" : "\n     * See {@link Builder#addHeader(String, String)}\n     ",
    "links" : [ "#addHeader(String" ]
  }, {
    "name" : "public abstract int getPriority()",
    "returnType" : "int",
    "comment" : "\n     * See {@link Builder#setPriority(int)}\n     ",
    "links" : [ "#setPriority(int)" ]
  }, {
    "name" : "public abstract boolean isDelayRequestHeadersUntilFirstFlushEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * See {@link Builder#setDelayRequestHeadersUntilFirstFlushEnabled(boolean)}\n     ",
    "links" : [ "#setDelayRequestHeadersUntilFirstFlushEnabled(boolean)" ]
  }, {
    "name" : "public abstract void start()",
    "returnType" : "void",
    "comment" : "\n     * Starts the stream, all callbacks go to the {@code callback} argument passed to {@link\n     * BidirectionalStream.Builder}'s constructor. Should only be called once.\n     ",
    "links" : [ "BidirectionalStream.Builder" ]
  }, {
    "name" : "public abstract void read(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "\n     * Reads data from the stream into the provided buffer. Can only be called at most once in\n     * response to each invocation of the {@link Callback#onStreamReady onStreamReady()}/ {@link\n     * Callback#onResponseHeadersReceived onResponseHeadersReceived()} and {@link\n     * Callback#onReadCompleted onReadCompleted()} methods of the {@link Callback}. Each call will\n     * result in an invocation of one of the {@link Callback Callback}'s {@link\n     * Callback#onReadCompleted onReadCompleted()} method if data is read, or its {@link\n     * Callback#onFailed onFailed()} method if there's an error.\n     *\n     * An attempt to read data into {@code buffer} starting at {@code buffer.position()} is begun.\n     * At most {@code buffer.remaining()} bytes are read. {@code buffer.position()} is updated upon\n     * invocation of {@link Callback#onReadCompleted onReadCompleted()} to indicate how much data\n     * was read.\n     *\n     * @param buffer the {@link ByteBuffer} to read data into. Must be a direct ByteBuffer. The\n     * embedder must not read or modify buffer's position, limit, or data between its position and\n     * limit until {@link Callback#onReadCompleted onReadCompleted()}, {@link Callback#onCanceled\n     * onCanceled()}, or {@link Callback#onFailed onFailed()} are invoked.\n     ",
    "links" : [ "Callback", "#onStreamReady", "#onReadCompleted", "#onFailed", "java.nio.ByteBuffer", "#onResponseHeadersReceived", "#onCanceledonCanceled()" ]
  }, {
    "name" : "public abstract void write(ByteBuffer buffer, boolean endOfStream)",
    "returnType" : "void",
    "comment" : "\n     * Attempts to write data from the provided buffer into the stream. If auto flush is disabled,\n     * data will be sent only after {@link #flush flush()} is called. Each call will result in an\n     * invocation of one of the {@link Callback Callback}'s {@link Callback#onWriteCompleted\n     * onWriteCompleted()} method if data is sent, or its {@link Callback#onFailed onFailed()}\n     * method if there's an error.\n     *\n     * An attempt to write data from {@code buffer} starting at {@code buffer.position()} is begun.\n     * {@code buffer.remaining()} bytes will be written. {@link Callback#onWriteCompleted\n     * onWriteCompleted()} will be invoked only when the full ByteBuffer is written.\n     *\n     * @param buffer the {@link ByteBuffer} to write data from. Must be a direct ByteBuffer. The\n     * embedder must not read or modify buffer's position, limit, or data between its position and\n     * limit until {@link Callback#onWriteCompleted onWriteCompleted()}, {@link Callback#onCanceled\n     * onCanceled()}, or {@link Callback#onFailed onFailed()} are invoked. Can be empty when {@code\n     * endOfStream} is {@code true}.\n     * @param endOfStream if {@code true}, then {@code buffer} is the last buffer to be written, and\n     * once written, stream is closed from the client side, resulting in half-closed stream or a\n     * fully closed stream if the remote side has already closed.\n     ",
    "links" : [ "Callback", "#onWriteCompletedonWriteCompleted()", "#flush", "#onFailed", "#onWriteCompleted", "java.nio.ByteBuffer", "#onCanceledonCanceled()" ]
  }, {
    "name" : "public abstract void flush()",
    "returnType" : "void",
    "comment" : "\n     * Flushes pending writes. This method should not be invoked before {@link\n     * Callback#onStreamReady onStreamReady()}. For previously delayed {@link #write write()}s, a\n     * corresponding {@link Callback#onWriteCompleted onWriteCompleted()} will be invoked when the\n     * buffer is sent.\n     ",
    "links" : [ "#onStreamReady", "#write", "#onWriteCompleted" ]
  }, {
    "name" : "public abstract void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancels the stream. Can be called at any time after {@link #start}. {@link\n     * Callback#onCanceled onCanceled()} will be invoked when cancelation is complete and no further\n     * callback methods will be invoked. If the stream has completed or has not started, calling\n     * {@code cancel()} has no effect and {@code onCanceled()} will not be invoked. If the {@link\n     * Executor} passed in during\n     * {@code BidirectionalStream} construction runs tasks on a single thread, and {@code cancel()}\n     * is called on that thread, no listener methods (besides {@code onCanceled()}) will be invoked\n     * after\n     * {@code cancel()} is called. Otherwise, at most one callback method may be invoked after\n     * {@code cancel()} has completed.\n     ",
    "links" : [ "java.util.concurrent.Executor", "#start", "#onCanceled" ]
  }, {
    "name" : "public abstract boolean isDone()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the stream was successfully started and is now done (succeeded,\n     * canceled, or failed).\n     *\n     * @return {@code true} if the stream was successfully started and is now done (completed,\n     * canceled, or failed), otherwise returns {@code false} to indicate stream is not yet started\n     * or is in progress.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract String getHttpMethod()", "public abstract boolean hasTrafficStatsTag()", "public abstract int getTrafficStatsTag()", "public abstract boolean hasTrafficStatsUid()", "public abstract int getTrafficStatsUid()", "public abstract UrlResponseInfo.HeaderBlock getHeaders()", "public abstract int getPriority()", "public abstract boolean isDelayRequestHeadersUntilFirstFlushEnabled()", "public abstract void start()", "public abstract void read(ByteBuffer buffer)", "public abstract void write(ByteBuffer buffer, boolean endOfStream)", "public abstract void flush()", "public abstract void cancel()", "public abstract boolean isDone()" ],
  "variableNames" : [ ]
}