{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/NamespaceMappings.java",
  "packageName" : "org.apache.xml.serializer",
  "className" : "NamespaceMappings",
  "comment" : "\n * This class keeps track of the currently defined namespaces. Conceptually the\n * prefix/uri/depth triplets are pushed on a stack pushed on a stack. The depth\n * indicates the nesting depth of the element for which the mapping was made.\n * \n * <p>For example:\n * <pre>\n * <chapter xmlns:p1=\"def\">\n *   <paragraph xmlns:p2=\"ghi\">\n *      <sentance xmlns:p3=\"jkl\">\n *      </sentance>\n *    </paragraph>\n *    <paragraph xlmns:p4=\"mno\">\n *    </paragraph>\n * </chapter>\n * </pre>\n * \n * When the <chapter> element is encounted the prefix \"p1\" associated with uri\n * \"def\" is pushed on the stack with depth 1.\n * When the first <paragraph> is encountered \"p2\" and \"ghi\" are pushed with\n * depth 2.\n * When the <sentance> is encountered \"p3\" and \"jkl\" are pushed with depth 3.\n * When </sentance> occurs the popNamespaces(3) will pop \"p3\"/\"jkl\" off the\n * stack.  Of course popNamespaces(2) would pop anything with depth 2 or\n * greater.\n * \n * So prefix/uri pairs are pushed and poped off the stack as elements are\n * processed.  At any given moment of processing the currently visible prefixes\n * are on the stack and a prefix can be found given a uri, or a uri can be found\n * given a prefix.\n *\n * This class is intended for internal use only.  However, it is made public because\n * other packages require it. \n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "count",
    "type" : "int",
    "comment" : "\n     * This member is continually incremented when new prefixes need to be\n     * generated. (\"ns0\"  \"ns1\" ...)\n     ",
    "links" : [ ]
  }, {
    "name" : "m_namespaces",
    "type" : "Hashtable",
    "comment" : "\n     * Each entry (prefix) in this hashtable points to a Stack of URIs\n     * This table maps a prefix (String) to a Stack of NamespaceNodes.\n     * All Namespace nodes in that retrieved stack have the same prefix,\n     * though possibly different URI's or depths. Such a stack must have\n     * mappings at deeper depths push later on such a stack.  Mappings pushed\n     * earlier on the stack will have smaller values for MappingRecord.m_declarationDepth.\n     ",
    "links" : [ ]
  }, {
    "name" : "m_nodeStack",
    "type" : "Stack",
    "comment" : " \n     * This stack is used as a convenience.\n     * It contains the pushed NamespaceNodes (shallowest\n     * to deepest) and is used to delete NamespaceNodes \n     * when leaving the current element depth \n     * to returning to the parent. The mappings of the deepest\n     * depth can be popped of the top and the same node\n     * can be removed from the appropriate prefix stack.\n     * \n     * All prefixes pushed at the current depth can be \n     * removed at the same time by using this stack to\n     * ensure prefix/uri map scopes are closed correctly.\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTYSTRING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "XML_PREFIX",
    "type" : "String",
    "comment" : " was \"xmlns\"",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void initNamespaces()",
    "returnType" : "void",
    "comment" : "\n     * This method initializes the namespace object with appropriate stacks\n     * and predefines a few prefix/uri pairs which always exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String lookupNamespace(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * Use a namespace prefix to lookup a namespace URI.\n     * \n     * @param prefix String the prefix of the namespace\n     * @return the URI corresponding to the prefix, returns \"\"\n     * if there is no visible mapping.\n     ",
    "links" : [ ]
  }, {
    "name" : " MappingRecord getMappingFromPrefix(String prefix)",
    "returnType" : "MappingRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String lookupPrefix(String uri)",
    "returnType" : "String",
    "comment" : "\n     * Given a namespace uri, and the namespaces mappings for the \n     * current element, return the current prefix for that uri.\n     * \n     * @param uri the namespace URI to be search for\n     * @return an existing prefix that maps to the given URI, null if no prefix\n     * maps to the given namespace URI.\n     ",
    "links" : [ ]
  }, {
    "name" : " MappingRecord getMappingFromURI(String uri)",
    "returnType" : "MappingRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean popNamespace(String prefix)",
    "returnType" : "boolean",
    "comment" : "\n     * Undeclare the namespace that is currently pointed to by a given prefix\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean pushNamespace(String prefix, String uri, int elemDepth)",
    "returnType" : "boolean",
    "comment" : "\n     * Declare a mapping of a prefix to namespace URI at the given element depth.\n     * @param prefix a String with the prefix for a qualified name\n     * @param uri a String with the uri to which the prefix is to map\n     * @param elemDepth the depth of current declaration\n     ",
    "links" : [ ]
  }, {
    "name" : " void popNamespaces(int elemDepth, ContentHandler saxHandler)",
    "returnType" : "void",
    "comment" : "\n     * Pop, or undeclare all namespace definitions that are currently\n     * declared at the given element depth, or deepter.\n     * @param elemDepth the element depth for which mappings declared at this\n     * depth or deeper will no longer be valid\n     * @param saxHandler The ContentHandler to notify of any endPrefixMapping()\n     * calls.  This parameter can be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String generateNextPrefix()",
    "returnType" : "String",
    "comment" : "\n     * Generate a new namespace prefix ( ns0, ns1 ...) not used before\n     * @return String a new namespace prefix ( ns0, ns1, ns2 ...)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * This method makes a clone of this object.\n     *\n     ",
    "links" : [ ]
  }, {
    "name" : " final void reset()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Stack getPrefixStack(String prefix)",
    "returnType" : "Stack",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Stack createPrefixStack(String prefix)",
    "returnType" : "Stack",
    "comment" : "\n     * A more type-safe way of saving stacks under the\n     * m_namespaces Hashtable.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] lookupAllPrefixes(String uri)",
    "returnType" : "String[]",
    "comment" : "\n     * Given a namespace uri, get all prefixes bound to the Namespace URI in the current scope. \n     * \n     * @param uri the namespace URI to be search for\n     * @return An array of Strings which are\n     * all prefixes bound to the namespace URI in the current scope.\n     * An array of zero elements is returned if no prefixes map to the given\n     * namespace URI.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void initNamespaces()", "public String lookupNamespace(String prefix)", " MappingRecord getMappingFromPrefix(String prefix)", "public String lookupPrefix(String uri)", " MappingRecord getMappingFromURI(String uri)", " boolean popNamespace(String prefix)", "public boolean pushNamespace(String prefix, String uri, int elemDepth)", " void popNamespaces(int elemDepth, ContentHandler saxHandler)", "public String generateNextPrefix()", "public Object clone() throws CloneNotSupportedException", " final void reset()", "private Stack getPrefixStack(String prefix)", "private Stack createPrefixStack(String prefix)", "public String[] lookupAllPrefixes(String uri)" ],
  "variableNames" : [ "count", "m_namespaces", "m_nodeStack", "EMPTYSTRING", "XML_PREFIX" ]
}