{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/renderscript/ScriptGroup.java",
  "packageName" : "android.renderscript",
  "className" : "Builder",
  "comment" : "\n     * Helper class to build a ScriptGroup. A ScriptGroup is\n     * created in two steps.\n     * <p>\n     * First, all kernels to be used by the ScriptGroup should be added.\n     * <p>\n     * Second, add connections between kernels. There are two types\n     * of connections: kernel to kernel and kernel to field.\n     * Kernel to kernel allows a kernel's output to be passed to\n     * another kernel as input. Kernel to field allows the output of\n     * one kernel to be bound as a script global. Kernel to kernel is\n     * higher performance and should be used where possible.\n     * <p>\n     * A ScriptGroup must contain a single directed acyclic graph (DAG); it\n     * cannot contain cycles. Currently, all kernels used in a ScriptGroup\n     * must come from different Script objects. Additionally, all kernels\n     * in a ScriptGroup must have at least one input, output, or internal\n     * connection.\n     * <p>\n     * Once all connections are made, a call to {@link #create} will\n     * return the ScriptGroup object.\n     *\n     * @deprecated Use {@link Builder2} instead.\n     *\n     ",
  "links" : [ "#create", "Builder2" ],
  "variables" : [ {
    "name" : "mRS",
    "type" : "RenderScript",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNodes",
    "type" : "ArrayList<Node>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLines",
    "type" : "ArrayList<ConnectLine>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKernelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void validateCycle(Node target, Node original)",
    "returnType" : "void",
    "comment" : " any cycle that could be created must contain original node",
    "links" : [ ]
  }, {
    "name" : "private void mergeDAGs(int valueUsed, int valueKilled)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateDAGRecurse(Node n, int dagNumber)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void validateDAG()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node findNode(Script s)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Node findNode(Script.KernelID k)",
    "returnType" : "Node",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Builder addKernel(Script.KernelID k)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a Kernel to the group.\n         *\n         *\n         * @param k The kernel to add.\n         *\n         * @return Builder Returns this.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addConnection(Type t, Script.KernelID from, Script.FieldID to)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a connection to the group.\n         *\n         *\n         * @param t The type of the connection. This is used to\n         *          determine the kernel launch sizes on the source side\n         *          of this connection.\n         * @param from The source for the connection.\n         * @param to The destination of the connection.\n         *\n         * @return Builder Returns this\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder addConnection(Type t, Script.KernelID from, Script.KernelID to)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a connection to the group.\n         *\n         *\n         * @param t The type of the connection. This is used to\n         *          determine the kernel launch sizes for both sides of\n         *          this connection.\n         * @param from The source for the connection.\n         * @param to The destination of the connection.\n         *\n         * @return Builder Returns this\n         ",
    "links" : [ ]
  }, {
    "name" : "public ScriptGroup create()",
    "returnType" : "ScriptGroup",
    "comment" : "\n         * Creates the Script group.\n         *\n         *\n         * @return ScriptGroup The new ScriptGroup\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void validateCycle(Node target, Node original)", "private void mergeDAGs(int valueUsed, int valueKilled)", "private void validateDAGRecurse(Node n, int dagNumber)", "private void validateDAG()", "private Node findNode(Script s)", "private Node findNode(Script.KernelID k)", "public Builder addKernel(Script.KernelID k)", "public Builder addConnection(Type t, Script.KernelID from, Script.FieldID to)", "public Builder addConnection(Type t, Script.KernelID from, Script.KernelID to)", "public ScriptGroup create()" ],
  "variableNames" : [ "mRS", "mNodes", "mLines", "mKernelCount" ]
}