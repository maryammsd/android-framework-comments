{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/xml/sax/helpers/NamespaceSupport.java",
  "packageName" : "org.xml.sax.helpers",
  "className" : "NamespaceSupport",
  "comment" : "\n * Encapsulate Namespace logic for use by applications using SAX,\n * or internally by SAX drivers.\n *\n * <blockquote>\n * <em>This module, both source code and documentation, is in the\n * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>\n * See <a href='http://www.saxproject.org'>http://www.saxproject.org</a>\n * for further information.\n * </blockquote>\n *\n * <p>This class encapsulates the logic of Namespace processing: it\n * tracks the declarations currently in force for each context and\n * automatically processes qualified XML names into their Namespace\n * parts; it can also be used in reverse for generating XML qnames\n * from Namespaces.</p>\n *\n * <p>Namespace support objects are reusable, but the reset method\n * must be invoked between each session.</p>\n *\n * <p>Here is a simple session:</p>\n *\n * <pre>\n * String parts[] = new String[3];\n * NamespaceSupport support = new NamespaceSupport();\n *\n * support.pushContext();\n * support.declarePrefix(\"\", \"http://www.w3.org/1999/xhtml\");\n * support.declarePrefix(\"dc\", \"http://www.purl.org/dc#\");\n *\n * parts = support.processName(\"p\", parts, false);\n * System.out.println(\"Namespace URI: \" + parts[0]);\n * System.out.println(\"Local name: \" + parts[1]);\n * System.out.println(\"Raw name: \" + parts[2]);\n *\n * parts = support.processName(\"dc:title\", parts, false);\n * System.out.println(\"Namespace URI: \" + parts[0]);\n * System.out.println(\"Local name: \" + parts[1]);\n * System.out.println(\"Raw name: \" + parts[2]);\n *\n * support.popContext();\n * </pre>\n *\n * <p>Note that this class is optimized for the use case where most\n * elements do not contain Namespace declarations: if the same\n * prefix/URI mapping is repeated for each context (for example), this\n * class will be somewhat less efficient.</p>\n *\n * <p>Although SAX drivers (parsers) may choose to use this class to\n * implement namespace handling, they are not required to do so.\n * Applications must track namespace information themselves if they\n * want to use namespace information.\n *\n * @since SAX 2.0\n * @author David Megginson\n * @version 2.0.1 (sax2r2)\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "XMLNS",
    "type" : "String",
    "comment" : "\n     * The XML Namespace URI as a constant.\n     * The value is <code>http://www.w3.org/XML/1998/namespace</code>\n     * as defined in the \"Namespaces in XML\" * recommendation.\n     *\n     * <p>This is the Namespace URI that is automatically mapped\n     * to the \"xml\" prefix.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "NSDECL",
    "type" : "String",
    "comment" : "\n     * The namespace declaration URI as a constant.\n     * The value is <code>http://www.w3.org/xmlns/2000/</code>, as defined\n     * in a backwards-incompatible erratum to the \"Namespaces in XML\"\n     * recommendation.  Because that erratum postdated SAX2, SAX2 defaults\n     * to the original recommendation, and does not normally use this URI.\n     *\n     *\n     * <p>This is the Namespace URI that is optionally applied to\n     * <em>xmlns</em> and <em>xmlns:*</em> attributes, which are used to\n     * declare namespaces.  </p>\n     *\n     * @since SAX 2.1alpha\n     * @see #setNamespaceDeclUris\n     * @see #isNamespaceDeclUris\n     ",
    "links" : [ ]
  }, {
    "name" : "EMPTY_ENUMERATION",
    "type" : "Enumeration",
    "comment" : "\n     * An empty enumeration.\n     ",
    "links" : [ ]
  }, {
    "name" : "contexts",
    "type" : "Context[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currentContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "contextPos",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "namespaceDeclUris",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Reset this Namespace support object for reuse.\n     *\n     * <p>It is necessary to invoke this method before reusing the\n     * Namespace support object for a new session.  If namespace\n     * declaration URIs are to be supported, that flag must also\n     * be set to a non-default value.\n     * </p>\n     *\n     * @see #setNamespaceDeclUris\n     ",
    "links" : [ ]
  }, {
    "name" : "public void pushContext()",
    "returnType" : "void",
    "comment" : "\n     * Start a new Namespace context.\n     * The new context will automatically inherit\n     * the declarations of its parent context, but it will also keep\n     * track of which declarations were made within this context.\n     *\n     * <p>Event callback code should start a new context once per element.\n     * This means being ready to call this in either of two places.\n     * For elements that don't include namespace declarations, the\n     * <em>ContentHandler.startElement()</em> callback is the right place.\n     * For elements with such a declaration, it'd done in the first\n     * <em>ContentHandler.startPrefixMapping()</em> callback.\n     * A boolean flag can be used to\n     * track whether a context has been started yet.  When either of\n     * those methods is called, it checks the flag to see if a new context\n     * needs to be started.  If so, it starts the context and sets the\n     * flag.  After <em>ContentHandler.startElement()</em>\n     * does that, it always clears the flag.\n     *\n     * <p>Normally, SAX drivers would push a new context at the beginning\n     * of each XML element.  Then they perform a first pass over the\n     * attributes to process all namespace declarations, making\n     * <em>ContentHandler.startPrefixMapping()</em> callbacks.\n     * Then a second pass is made, to determine the namespace-qualified\n     * names for all attributes and for the element name.\n     * Finally all the information for the\n     * <em>ContentHandler.startElement()</em> callback is available,\n     * so it can then be made.\n     *\n     * <p>The Namespace support object always starts with a base context\n     * already in force: in this context, only the \"xml\" prefix is\n     * declared.</p>\n     *\n     * @see org.xml.sax.ContentHandler\n     * @see #popContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public void popContext()",
    "returnType" : "void",
    "comment" : "\n     * Revert to the previous Namespace context.\n     *\n     * <p>Normally, you should pop the context at the end of each\n     * XML element.  After popping the context, all Namespace prefix\n     * mappings that were previously in force are restored.</p>\n     *\n     * <p>You must not attempt to declare additional Namespace\n     * prefixes after popping a context, unless you push another\n     * context first.</p>\n     *\n     * @see #pushContext\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean declarePrefix(String prefix, String uri)",
    "returnType" : "boolean",
    "comment" : "\n     * Declare a Namespace prefix.  All prefixes must be declared\n     * before they are referenced.  For example, a SAX driver (parser)\n     * would scan an element's attributes\n     * in two passes:  first for namespace declarations,\n     * then a second pass using {@link #processName processName()} to\n     * interpret prefixes against (potentially redefined) prefixes.\n     *\n     * <p>This method declares a prefix in the current Namespace\n     * context; the prefix will remain in force until this context\n     * is popped, unless it is shadowed in a descendant context.</p>\n     *\n     * <p>To declare the default element Namespace, use the empty string as\n     * the prefix.</p>\n     *\n     * <p>Note that you must <em>not</em> declare a prefix after\n     * you've pushed and popped another Namespace context, or\n     * treated the declarations phase as complete by processing\n     * a prefixed name.</p>\n     *\n     * <p>Note that there is an asymmetry in this library: {@link\n     * #getPrefix getPrefix} will not return the \"\" prefix,\n     * even if you have declared a default element namespace.\n     * To check for a default namespace,\n     * you have to look it up explicitly using {@link #getURI getURI}.\n     * This asymmetry exists to make it easier to look up prefixes\n     * for attribute names, where the default prefix is not allowed.</p>\n     *\n     * @param prefix The prefix to declare, or the empty string to\n     *    indicate the default element namespace.  This may never have\n     *    the value \"xml\" or \"xmlns\".\n     * @param uri The Namespace URI to associate with the prefix.\n     * @return true if the prefix was legal, false otherwise\n     *\n     * @see #processName\n     * @see #getURI\n     * @see #getPrefix\n     ",
    "links" : [ "#getPrefix", "#getURI", "#processName" ]
  }, {
    "name" : "public String[] processName(String qName, String[] parts, boolean isAttribute)",
    "returnType" : "String[]",
    "comment" : "\n     * Process a raw XML qualified name, after all declarations in the\n     * current context have been handled by {@link #declarePrefix\n     * declarePrefix()}.\n     *\n     * <p>This method processes a raw XML qualified name in the\n     * current context by removing the prefix and looking it up among\n     * the prefixes currently declared.  The return value will be the\n     * array supplied by the caller, filled in as follows:</p>\n     *\n     * <dl>\n     * <dt>parts[0]</dt>\n     * <dd>The Namespace URI, or an empty string if none is\n     *  in use.</dd>\n     * <dt>parts[1]</dt>\n     * <dd>The local name (without prefix).</dd>\n     * <dt>parts[2]</dt>\n     * <dd>The original raw name.</dd>\n     * </dl>\n     *\n     * <p>All of the strings in the array will be internalized.  If\n     * the raw name has a prefix that has not been declared, then\n     * the return value will be null.</p>\n     *\n     * <p>Note that attribute names are processed differently than\n     * element names: an unprefixed element name will receive the\n     * default Namespace (if any), while an unprefixed attribute name\n     * will not.</p>\n     *\n     * @param qName The XML qualified name to be processed.\n     * @param parts An array supplied by the caller, capable of\n     *        holding at least three members.\n     * @param isAttribute A flag indicating whether this is an\n     *        attribute name (true) or an element name (false).\n     * @return The supplied array holding three internalized strings\n     *        representing the Namespace URI (or empty string), the\n     *        local name, and the XML qualified name; or null if there\n     *        is an undeclared prefix.\n     * @see #declarePrefix\n     * @see java.lang.String#intern ",
    "links" : [ "#declarePrefixdeclarePrefix()" ]
  }, {
    "name" : "public String getURI(String prefix)",
    "returnType" : "String",
    "comment" : "\n     * Look up a prefix and get the currently-mapped Namespace URI.\n     *\n     * <p>This method looks up the prefix in the current context.\n     * Use the empty string (\"\") for the default Namespace.</p>\n     *\n     * @param prefix The prefix to look up.\n     * @return The associated Namespace URI, or null if the prefix\n     *         is undeclared in this context.\n     * @see #getPrefix\n     * @see #getPrefixes\n     ",
    "links" : [ ]
  }, {
    "name" : "public Enumeration getPrefixes()",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes whose declarations are\n     * active in the current context.\n     * This includes declarations from parent contexts that have\n     * not been overridden.\n     *\n     * <p><strong>Note:</strong> if there is a default prefix, it will not be\n     * returned in this enumeration; check for the default prefix\n     * using the {@link #getURI getURI} with an argument of \"\".</p>\n     *\n     * @return An enumeration of prefixes (never empty).\n     * @see #getDeclaredPrefixes\n     * @see #getURI\n     ",
    "links" : [ "#getURI" ]
  }, {
    "name" : "public String getPrefix(String uri)",
    "returnType" : "String",
    "comment" : "\n     * Return one of the prefixes mapped to a Namespace URI.\n     *\n     * <p>If more than one prefix is currently mapped to the same\n     * URI, this method will make an arbitrary selection; if you\n     * want all of the prefixes, use the {@link #getPrefixes}\n     * method instead.</p>\n     *\n     * <p><strong>Note:</strong> this will never return the empty (default) prefix;\n     * to check for a default prefix, use the {@link #getURI getURI}\n     * method with an argument of \"\".</p>\n     *\n     * @param uri the namespace URI\n     * @return one of the prefixes currently mapped to the URI supplied,\n     *         or null if none is mapped or if the URI is assigned to\n     *         the default namespace\n     * @see #getPrefixes(java.lang.String)\n     * @see #getURI\n     ",
    "links" : [ "#getPrefixes", "#getURI" ]
  }, {
    "name" : "public Enumeration getPrefixes(String uri)",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes for a given URI whose\n     * declarations are active in the current context.\n     * This includes declarations from parent contexts that have\n     * not been overridden.\n     *\n     * <p>This method returns prefixes mapped to a specific Namespace\n     * URI.  The xml: prefix will be included.  If you want only one\n     * prefix that's mapped to the Namespace URI, and you don't care\n     * which one you get, use the {@link #getPrefix getPrefix}\n     *  method instead.</p>\n     *\n     * <p><strong>Note:</strong> the empty (default) prefix is <em>never</em> included\n     * in this enumeration; to check for the presence of a default\n     * Namespace, use the {@link #getURI getURI} method with an\n     * argument of \"\".</p>\n     *\n     * @param uri The Namespace URI.\n     * @return An enumeration of prefixes (never empty).\n     * @see #getPrefix\n     * @see #getDeclaredPrefixes\n     * @see #getURI\n     ",
    "links" : [ "#getPrefix", "#getURI" ]
  }, {
    "name" : "public Enumeration getDeclaredPrefixes()",
    "returnType" : "Enumeration",
    "comment" : "\n     * Return an enumeration of all prefixes declared in this context.\n     *\n     * <p>The empty (default) prefix will be included in this\n     * enumeration; note that this behaviour differs from that of\n     * {@link #getPrefix} and {@link #getPrefixes}.</p>\n     *\n     * @return An enumeration of all prefixes declared in this\n     *         context.\n     * @see #getPrefixes\n     * @see #getURI\n     ",
    "links" : [ "#getPrefix", "#getPrefixes" ]
  }, {
    "name" : "public void setNamespaceDeclUris(boolean value)",
    "returnType" : "void",
    "comment" : "\n     * Controls whether namespace declaration attributes are placed\n     * into the {@link #NSDECL NSDECL} namespace\n     * by {@link #processName processName()}.  This may only be\n     * changed before any contexts have been pushed.\n     *\n     * @param value the namespace declaration attribute state. A value of true\n     *              enables this feature, a value of false disables it.\n     *\n     * @since SAX 2.1alpha\n     *\n     * @exception IllegalStateException when attempting to set this\n     *    after any context has been pushed.\n     ",
    "links" : [ "#NSDECL", "#processName" ]
  }, {
    "name" : "public boolean isNamespaceDeclUris()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if namespace declaration attributes are placed into\n     * a namespace.  This behavior is not the default.\n     *\n     * @return true if namespace declaration attributes are enabled, false\n     *         otherwise.\n     * @since SAX 2.1alpha\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void reset()", "public void pushContext()", "public void popContext()", "public boolean declarePrefix(String prefix, String uri)", "public String[] processName(String qName, String[] parts, boolean isAttribute)", "public String getURI(String prefix)", "public Enumeration getPrefixes()", "public String getPrefix(String uri)", "public Enumeration getPrefixes(String uri)", "public Enumeration getDeclaredPrefixes()", "public void setNamespaceDeclUris(boolean value)", "public boolean isNamespaceDeclUris()" ],
  "variableNames" : [ "XMLNS", "NSDECL", "EMPTY_ENUMERATION", "contexts", "currentContext", "contextPos", "namespaceDeclUris" ]
}