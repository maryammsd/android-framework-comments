{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/camera2/CameraDevice.java",
  "packageName" : "android.hardware.camera2",
  "className" : "CameraDevice",
  "comment" : "\n * <p>The CameraDevice class is a representation of a single camera connected to an\n * Android device, allowing for fine-grain control of image capture and\n * post-processing at high frame rates.</p>\n *\n * <p>Your application must declare the\n * {@link android.Manifest.permission#CAMERA Camera} permission in its manifest\n * in order to access camera devices.</p>\n *\n * <p>A given camera device may provide support at one of several levels defined\n * in {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}.\n * If a device supports {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY} level,\n * the camera device is running in backward compatibility mode and has minimum camera2 API support.\n * If a device supports the {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED}\n * level, then Camera2 exposes a feature set that is roughly equivalent to the older\n * {@link android.hardware.Camera Camera} API, although with a cleaner and more\n * efficient interface.\n * If a device supports the {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL EXTERNAL}\n * level, then the device is a removable camera that provides similar but slightly less features\n * as the {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} level.\n * Devices that implement the {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL} or\n * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3 LEVEL3} level of support\n * provide substantially improved capabilities over the older camera\n * API. If your application requires a full-level device for\n * proper operation, declare the \"android.hardware.camera.level.full\" feature in your\n * manifest.</p>\n *\n * @see CameraManager#openCamera\n * @see android.Manifest.permission#CAMERA\n * @see CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL\n ",
  "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.Manifest.permission#CAMERA", "android.hardware.Camera" ],
  "variables" : [ {
    "name" : "TEMPLATE_PREVIEW",
    "type" : "int",
    "comment" : "\n     * Create a request suitable for a camera preview window. Specifically, this\n     * means that high frame rate is given priority over the highest-quality\n     * post-processing. These requests would normally be used with the\n     * {@link CameraCaptureSession#setRepeatingRequest} method.\n     * This template is guaranteed to be supported on all camera devices.\n     *\n     * @see #createCaptureRequest\n     ",
    "links" : [ "android.hardware.camera2.CameraCaptureSession#setRepeatingRequest" ]
  }, {
    "name" : "TEMPLATE_STILL_CAPTURE",
    "type" : "int",
    "comment" : "\n     * Create a request suitable for still image capture. Specifically, this\n     * means prioritizing image quality over frame rate. These requests would\n     * commonly be used with the {@link CameraCaptureSession#capture} method.\n     * This template is guaranteed to be supported on all camera devices except\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT DEPTH_OUTPUT} devices\n     * that are not {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE\n     * BACKWARD_COMPATIBLE}.\n     * @see #createCaptureRequest\n     ",
    "links" : [ "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT", "android.hardware.camera2.CameraCaptureSession#capture", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEBACKWARD_COMPATIBLE" ]
  }, {
    "name" : "TEMPLATE_RECORD",
    "type" : "int",
    "comment" : "\n     * Create a request suitable for video recording. Specifically, this means\n     * that a stable frame rate is used, and post-processing is set for\n     * recording quality. These requests would commonly be used with the\n     * {@link CameraCaptureSession#setRepeatingRequest} method.\n     * This template is guaranteed to be supported on all camera devices except\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT DEPTH_OUTPUT} devices\n     * that are not {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE\n     * BACKWARD_COMPATIBLE}.\n     *\n     * @see #createCaptureRequest\n     ",
    "links" : [ "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEBACKWARD_COMPATIBLE", "android.hardware.camera2.CameraCaptureSession#setRepeatingRequest" ]
  }, {
    "name" : "TEMPLATE_VIDEO_SNAPSHOT",
    "type" : "int",
    "comment" : "\n     * Create a request suitable for still image capture while recording\n     * video. Specifically, this means maximizing image quality without\n     * disrupting the ongoing recording. These requests would commonly be used\n     * with the {@link CameraCaptureSession#capture} method while a request based on\n     * {@link #TEMPLATE_RECORD} is is in use with {@link CameraCaptureSession#setRepeatingRequest}.\n     * This template is guaranteed to be supported on all camera devices except\n     * legacy devices ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY}) and\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT DEPTH_OUTPUT} devices\n     * that are not {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLE\n     * BACKWARD_COMPATIBLE}.\n     *\n     * @see #createCaptureRequest\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DEPTH_OUTPUT", "android.hardware.camera2.CameraCaptureSession#capture", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BACKWARD_COMPATIBLEBACKWARD_COMPATIBLE", "android.hardware.camera2.CameraCaptureSession#setRepeatingRequest", "#TEMPLATE_RECORD" ]
  }, {
    "name" : "TEMPLATE_ZERO_SHUTTER_LAG",
    "type" : "int",
    "comment" : "\n     * Create a request suitable for zero shutter lag still capture. This means\n     * means maximizing image quality without compromising preview frame rate.\n     * AE/AWB/AF should be on auto mode. This is intended for application-operated ZSL. For\n     * device-operated ZSL, use {@link CaptureRequest#CONTROL_ENABLE_ZSL} if available.\n     * This template is guaranteed to be supported on camera devices that support the\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING PRIVATE_REPROCESSING}\n     * capability or the\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING YUV_REPROCESSING}\n     * capability.\n     *\n     * @see #createCaptureRequest\n     * @see CaptureRequest#CONTROL_ENABLE_ZSL\n     ",
    "links" : [ "android.hardware.camera2.CaptureRequest#CONTROL_ENABLE_ZSL", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING" ]
  }, {
    "name" : "TEMPLATE_MANUAL",
    "type" : "int",
    "comment" : "\n     * A basic template for direct application control of capture\n     * parameters. All automatic control is disabled (auto-exposure, auto-white\n     * balance, auto-focus), and post-processing parameters are set to preview\n     * quality. The manual capture parameters (exposure, sensitivity, and so on)\n     * are set to reasonable defaults, but should be overridden by the\n     * application depending on the intended use case.\n     * This template is guaranteed to be supported on camera devices that support the\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR MANUAL_SENSOR}\n     * capability.\n     *\n     * @see #createCaptureRequest\n     ",
    "links" : [ "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR" ]
  }, {
    "name" : "AUDIO_RESTRICTION_NONE",
    "type" : "int",
    "comment" : "\n      * No vibration or sound muting for this camera device. This is the default\n      * mode for all camera devices.\n      *\n      * @see #setCameraAudioRestriction\n      ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_RESTRICTION_VIBRATION",
    "type" : "int",
    "comment" : "\n      * Mute vibration from ringtones, alarms or notifications while this camera device is in use.\n      *\n      * @see #setCameraAudioRestriction\n      ",
    "links" : [ ]
  }, {
    "name" : "AUDIO_RESTRICTION_VIBRATION_SOUND",
    "type" : "int",
    "comment" : "\n      * Mute vibration and sound from ringtones, alarms or notifications while this camera device is\n      * in use.\n      *\n      * @see #setCameraAudioRestriction\n      ",
    "links" : [ ]
  }, {
    "name" : "SESSION_OPERATION_MODE_NORMAL",
    "type" : "int",
    "comment" : "\n     * Standard camera operation mode.\n     *\n     * @see #createCustomCaptureSession\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SESSION_OPERATION_MODE_CONSTRAINED_HIGH_SPEED",
    "type" : "int",
    "comment" : "\n     * Constrained high-speed operation mode.\n     *\n     * @see #createCustomCaptureSession\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SESSION_OPERATION_MODE_VENDOR_START",
    "type" : "int",
    "comment" : "\n     * First vendor-specific operating mode\n     *\n     * @see #createCustomCaptureSession\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public abstract String getId()",
    "returnType" : "String",
    "comment" : "\n     * Get the ID of this camera device.\n     *\n     * <p>This matches the ID given to {@link CameraManager#openCamera} to instantiate this\n     * this camera device.</p>\n     *\n     * <p>This ID can be used to query the camera device's {@link\n     * CameraCharacteristics fixed properties} with {@link\n     * CameraManager#getCameraCharacteristics}.</p>\n     *\n     * <p>This method can be called even if the device has been closed or has encountered\n     * a serious error.</p>\n     *\n     * @return the ID for this camera device\n     *\n     * @see CameraManager#getCameraCharacteristics\n     * @see CameraManager#getCameraIdList\n     ",
    "links" : [ "android.hardware.camera2.CameraManager#openCamera", "android.hardware.camera2.CameraManager#getCameraCharacteristics", "android.hardware.camera2.CameraCharacteristics" ]
  }, {
    "name" : "public abstract void createCaptureSession(@NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * <p>Create a new camera capture session by providing the target output set of Surfaces to the\n     * camera device.</p>\n     *\n     * @param outputs The new set of Surfaces that should be made available as\n     *                targets for captured image data.\n     * @param callback The callback to notify about the status of the new capture session.\n     * @param handler The handler on which the callback should be invoked, or {@code null} to use\n     *                the current thread's {@link android.os.Looper looper}.\n     *\n     * @throws IllegalArgumentException if the set of output Surfaces do not meet the requirements,\n     *                                  the callback is null, or the handler is null but the current\n     *                                  thread has no looper.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see CameraCaptureSession\n     * @see StreamConfigurationMap#getOutputFormats()\n     * @see StreamConfigurationMap#getOutputSizes(int)\n     * @see StreamConfigurationMap#getOutputSizes(Class)\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     ",
    "links" : [ "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)", "android.os.Looper" ]
  }, {
    "name" : "public abstract void createCaptureSessionByOutputConfigurations(List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * <p>Create a new camera capture session by providing the target output set of Surfaces and\n     * its corresponding surface configuration to the camera device.</p>\n     *\n     * @see #createCaptureSession\n     * @see OutputConfiguration\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     ",
    "links" : [ "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)" ]
  }, {
    "name" : "public abstract void createReprocessableCaptureSession(@NonNull InputConfiguration inputConfig, @NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Create a new reprocessable camera capture session by providing the desired reprocessing\n     * input Surface configuration and the target output set of Surfaces to the camera device.\n     *\n     * @param inputConfig The configuration for the input {@link Surface}\n     * @param outputs The new set of Surfaces that should be made available as\n     *                targets for captured image data.\n     * @param callback The callback to notify about the status of the new capture session.\n     * @param handler The handler on which the callback should be invoked, or {@code null} to use\n     *                the current thread's {@link android.os.Looper looper}.\n     *\n     * @throws IllegalArgumentException if the input configuration is null or not supported, the set\n     *                                  of output Surfaces do not meet the requirements, the\n     *                                  callback is null, or the handler is null but the current\n     *                                  thread has no looper.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #createCaptureSession\n     * @see CameraCaptureSession\n     * @see StreamConfigurationMap#getInputFormats\n     * @see StreamConfigurationMap#getInputSizes\n     * @see StreamConfigurationMap#getValidOutputFormatsForInput\n     * @see StreamConfigurationMap#getOutputSizes(int)\n     * @see StreamConfigurationMap#getOutputSizes(Class)\n     * @see android.media.ImageWriter\n     * @see android.media.ImageReader\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     ",
    "links" : [ "android.view.Surface", "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)", "android.os.Looper" ]
  }, {
    "name" : "public abstract void createReprocessableCaptureSessionByConfigurations(@NonNull InputConfiguration inputConfig, @NonNull List<OutputConfiguration> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Create a new reprocessable camera capture session by providing the desired reprocessing\n     * input configuration and output {@link OutputConfiguration}\n     * to the camera device.\n     *\n     * @see #createReprocessableCaptureSession\n     * @see OutputConfiguration\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     ",
    "links" : [ "android.hardware.camera2.params.OutputConfiguration", "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)" ]
  }, {
    "name" : "public abstract void createConstrainedHighSpeedCaptureSession(@NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * <p>Create a new constrained high speed capture session.</p>\n     *\n     * @param outputs The new set of Surfaces that should be made available as\n     *                targets for captured high speed image data.\n     * @param callback The callback to notify about the status of the new capture session.\n     * @param handler The handler on which the callback should be invoked, or {@code null} to use\n     *                the current thread's {@link android.os.Looper looper}.\n     *\n     * @throws IllegalArgumentException if the set of output Surfaces do not meet the requirements,\n     *                                  the callback is null, or the handler is null but the current\n     *                                  thread has no looper, or the camera device doesn't support\n     *                                  high speed video capability.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #createCaptureSession\n     * @see CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE\n     * @see StreamConfigurationMap#getHighSpeedVideoSizes\n     * @see StreamConfigurationMap#getHighSpeedVideoFpsRangesFor\n     * @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES\n     * @see CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO\n     * @see CameraCaptureSession#captureBurst\n     * @see CameraCaptureSession#setRepeatingBurst\n     * @see CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     ",
    "links" : [ "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)", "android.os.Looper" ]
  }, {
    "name" : "public void createExtensionSession(@NonNull ExtensionSessionConfiguration extensionConfiguration) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Initialize a specific device-specific extension augmented camera capture\n     * session.\n     *\n     * <p>Extension sessions can be used to enable device-specific operation modes like\n     * {@link CameraExtensionCharacteristics#EXTENSION_NIGHT} or\n     * {@link CameraExtensionCharacteristics#EXTENSION_HDR}. These modes are less flexible than the\n     * full camera API, but enable access to more sophisticated processing algorithms that can\n     * capture multi-frame bursts to generate single output images. To query for available\n     * extensions on this device call\n     * {@link CameraExtensionCharacteristics#getSupportedExtensions()}.</p>\n     *\n     * <p>This method will also trigger the setup of the internal\n     * processing pipeline for extension augmented preview and multi-frame\n     * still capture.</p>\n     *\n     * <p>If a prior CameraCaptureSession already exists when this method is called, the previous\n     * session will no longer be able to accept new capture requests and will be closed. Any\n     * in-progress capture requests made on the prior session will be completed before it's closed.\n     * </p>\n     *\n     * <p>The CameraExtensionSession will be active until the client\n     * either calls CameraExtensionSession.close() or creates a new camera\n     * capture session. In both cases all internal resources will be\n     * released, continuous repeating requests stopped and any pending\n     * multi-frame capture requests flushed.</p>\n     *\n     * <p>Note that the CameraExtensionSession currently supports at most wo\n     * multi frame capture surface formats: ImageFormat.JPEG will be supported\n     * by all extensions and ImageFormat.YUV_420_888 may or may not be supported.\n     * Clients must query the multi-frame capture format support using\n     * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, int)}.\n     * For repeating requests CameraExtensionSession supports only\n     * {@link android.graphics.SurfaceTexture} as output. Clients can query the supported resolution\n     * for the repeating request output using\n     * {@link CameraExtensionCharacteristics#getExtensionSupportedSizes(int, Class)\n     * getExtensionSupportedSizes(..., Class)}.</p>\n     *\n     * <p>At the very minimum the initialization expects either one valid output\n     * surface for repeating or one valid output for high-quality single requests registered in the\n     * outputs argument of the extension configuration argument. At the maximum the initialization\n     * will accept two valid output surfaces, one for repeating and the other for single requests.\n     * Additional unsupported surfaces passed to ExtensionSessionConfiguration will cause an\n     * {@link IllegalArgumentException} to be thrown.</p>\n     *\n     * @param extensionConfiguration extension configuration\n     * @throws IllegalArgumentException If both the preview and still\n     *                                  capture surfaces are not set or invalid, or if any of the\n     *                                  registered surfaces do not meet the device-specific\n     *                                  extension requirements such as dimensions and/or\n     *                                  (output format)/(surface type), or if the extension is not\n     *                                  supported, or if any of the output configurations select\n     *                                  a dynamic range different from\n     *                                  {@link android.hardware.camera2.params.DynamicRangeProfiles#STANDARD},\n     *                                  or if any of the output configurations sets a stream use\n     *                                  case different from {@link\n     *                                  android.hardware.camera2.CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT}.\n     * @see CameraExtensionCharacteristics#getSupportedExtensions\n     * @see CameraExtensionCharacteristics#getExtensionSupportedSizes\n     ",
    "links" : [ "android.hardware.camera2.CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES_DEFAULT", "android.graphics.SurfaceTexture", "android.hardware.camera2.CameraExtensionCharacteristics#getSupportedExtensions()", "android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_HDR", "android.hardware.camera2.params.DynamicRangeProfiles#STANDARD", "android.hardware.camera2.CameraExtensionCharacteristics#EXTENSION_NIGHT", "IllegalArgumentException", "android.hardware.camera2.CameraExtensionCharacteristics#getExtensionSupportedSizes(int" ]
  }, {
    "name" : "public abstract void createCustomCaptureSession(InputConfiguration inputConfig, @NonNull List<OutputConfiguration> outputs, @SessionOperatingMode int operatingMode, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Create a new camera capture session with a custom operating mode.\n     *\n     * @param inputConfig The configuration for the input {@link Surface} if a reprocessing session\n     *                is desired, or {@code null} otherwise.\n     * @param outputs The new set of {@link OutputConfiguration OutputConfigurations} that should be\n     *                made available as targets for captured image data.\n     * @param operatingMode The custom operating mode to use; a nonnegative value, either a custom\n     *                vendor value or one of the SESSION_OPERATION_MODE_* values.\n     * @param callback The callback to notify about the status of the new capture session.\n     * @param handler The handler on which the callback should be invoked, or {@code null} to use\n     *                the current thread's {@link android.os.Looper looper}.\n     *\n     * @throws IllegalArgumentException if the input configuration is null or not supported, the set\n     *                                  of output Surfaces do not meet the requirements, the\n     *                                  callback is null, or the handler is null but the current\n     *                                  thread has no looper.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #createCaptureSession\n     * @see #createReprocessableCaptureSession\n     * @see CameraCaptureSession\n     * @see OutputConfiguration\n     * @deprecated Please use {@link\n     *      #createCaptureSession(android.hardware.camera2.params.SessionConfiguration)} for the\n     *      full set of configuration options available.\n     * @hide\n     ",
    "links" : [ "android.hardware.camera2.params.OutputConfiguration", "android.view.Surface", "#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)", "android.os.Looper" ]
  }, {
    "name" : "public void createCaptureSession(SessionConfiguration config) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * <p>Create a new {@link CameraCaptureSession} using a {@link SessionConfiguration} helper\n     * object that aggregates all supported parameters.</p>\n     * <p>The active capture session determines the set of potential output Surfaces for\n     * the camera device for each capture request. A given request may use all\n     * or only some of the outputs. Once the CameraCaptureSession is created, requests can be\n     * submitted with {@link CameraCaptureSession#capture capture},\n     * {@link CameraCaptureSession#captureBurst captureBurst},\n     * {@link CameraCaptureSession#setRepeatingRequest setRepeatingRequest}, or\n     * {@link CameraCaptureSession#setRepeatingBurst setRepeatingBurst}.</p>\n     *\n     * <p>Surfaces suitable for inclusion as a camera output can be created for\n     * various use cases and targets:</p>\n     *\n     * <ul>\n     *\n     * <li>For drawing to a {@link android.view.SurfaceView SurfaceView}: Once the SurfaceView's\n     *   Surface is {@link android.view.SurfaceHolder.Callback#surfaceCreated created}, set the size\n     *   of the Surface with {@link android.view.SurfaceHolder#setFixedSize} to be one of the sizes\n     *   returned by {@link StreamConfigurationMap#getOutputSizes(Class)\n     *   getOutputSizes(SurfaceHolder.class)} and then obtain the Surface by calling {@link\n     *   android.view.SurfaceHolder#getSurface}. If the size is not set by the application, it will\n     *   be rounded to the nearest supported size less than 1080p, by the camera device.</li>\n     *\n     * <li>For accessing through an OpenGL texture via a {@link android.graphics.SurfaceTexture\n     *   SurfaceTexture}: Set the size of the SurfaceTexture with {@link\n     *   android.graphics.SurfaceTexture#setDefaultBufferSize} to be one of the sizes returned by\n     *   {@link StreamConfigurationMap#getOutputSizes(Class) getOutputSizes(SurfaceTexture.class)}\n     *   before creating a Surface from the SurfaceTexture with\n     *   {@link Surface#Surface(SurfaceTexture)}. If the size is not set by the application,\n     *   it will be set to be the smallest supported size less than 1080p, by the camera\n     *   device.</li>\n     *\n     * <li>For recording with {@link android.media.MediaCodec}: Call\n     *   {@link android.media.MediaCodec#createInputSurface} after configuring\n     *   the media codec to use one of the sizes returned by\n     *   {@link StreamConfigurationMap#getOutputSizes(Class) getOutputSizes(MediaCodec.class)}\n     *   </li>\n     *\n     * <li>For recording with {@link android.media.MediaRecorder}: Call\n     *   {@link android.media.MediaRecorder#getSurface} after configuring the media recorder to use\n     *   one of the sizes returned by\n     *   {@link StreamConfigurationMap#getOutputSizes(Class) getOutputSizes(MediaRecorder.class)},\n     *   or configuring it to use one of the supported\n     *   {@link android.media.CamcorderProfile CamcorderProfiles}.</li>\n     *\n     * <li>For access to RAW, uncompressed YUV, or compressed JPEG data in the application: Create an\n     *   {@link android.media.ImageReader} object with one of the supported output formats given by\n     *   {@link StreamConfigurationMap#getOutputFormats()}, setting its size to one of the\n     *   corresponding supported sizes by passing the chosen output format into\n     *   {@link StreamConfigurationMap#getOutputSizes(int)}. Then obtain a\n     *   {@link android.view.Surface} from it with {@link android.media.ImageReader#getSurface()}.\n     *   If the ImageReader size is not set to a supported size, it will be rounded to a supported\n     *   size less than 1080p by the camera device.\n     *   </li>\n     *\n     * </ul>\n     *\n     * <p>The camera device will query each Surface's size and formats upon this\n     * call, so they must be set to a valid setting at this time.</p>\n     *\n     * <p>It can take several hundred milliseconds for the session's configuration to complete,\n     * since camera hardware may need to be powered on or reconfigured. Once the configuration is\n     * complete and the session is ready to actually capture data, the provided\n     * {@link CameraCaptureSession.StateCallback}'s\n     * {@link CameraCaptureSession.StateCallback#onConfigured} callback will be called.</p>\n     *\n     * <p>If a prior CameraCaptureSession already exists when this method is called, the previous\n     * session will no longer be able to accept new capture requests and will be closed. Any\n     * in-progress capture requests made on the prior session will be completed before it's closed.\n     * {@link CameraCaptureSession.StateCallback#onConfigured} for the new session may be invoked\n     * before {@link CameraCaptureSession.StateCallback#onClosed} is invoked for the prior\n     * session. Once the new session is {@link CameraCaptureSession.StateCallback#onConfigured\n     * configured}, it is able to start capturing its own requests. To minimize the transition time,\n     * the {@link CameraCaptureSession#abortCaptures} call can be used to discard the remaining\n     * requests for the prior capture session before a new one is created. Note that once the new\n     * session is created, the old one can no longer have its captures aborted.</p>\n     *\n     * <p>Using larger resolution outputs, or more outputs, can result in slower\n     * output rate from the device.</p>\n     *\n     * <p>Configuring a session with an empty or null list will close the current session, if\n     * any. This can be used to release the current session's target surfaces for another use.</p>\n     *\n     * <p>This function throws an {@code IllegalArgumentException} if called with a\n     * SessionConfiguration lacking state callbacks or valid output surfaces. The only exceptions\n     * are deferred SurfaceView or SurfaceTexture outputs. See {@link\n     * OutputConfiguration#OutputConfiguration(Size, Class)} for details.</p>\n     *\n     * <h3>Regular capture</h3>\n     *\n     * <p>While any of the sizes from {@link StreamConfigurationMap#getOutputSizes} can be used when\n     * a single output stream is configured, a given camera device may not be able to support all\n     * combination of sizes, formats, and targets when multiple outputs are configured at once.  The\n     * tables below list the maximum guaranteed resolutions for combinations of streams and targets,\n     * given the capabilities of the camera device. These are valid for when the\n     * {@link android.hardware.camera2.params.SessionConfiguration#setInputConfiguration\n     * input configuration} is not set and therefore no reprocessing is active.</p>\n     *\n     * <p>If an application tries to create a session using a set of targets that exceed the limits\n     * described in the below tables, one of three possibilities may occur. First, the session may\n     * be successfully created and work normally. Second, the session may be successfully created,\n     * but the camera device won't meet the frame rate guarantees as described in\n     * {@link StreamConfigurationMap#getOutputMinFrameDuration}. Or third, if the output set\n     * cannot be used at all, session creation will fail entirely, with\n     * {@link CameraCaptureSession.StateCallback#onConfigureFailed} being invoked.</p>\n     *\n     * <p>For the type column, {@code PRIV} refers to any target whose available sizes are found\n     * using {@link StreamConfigurationMap#getOutputSizes(Class)} with no direct application-visible\n     * format, {@code YUV} refers to a target Surface using the\n     * {@link android.graphics.ImageFormat#YUV_420_888} format, {@code JPEG} refers to the\n     * {@link android.graphics.ImageFormat#JPEG} format, and {@code RAW} refers to the\n     * {@link android.graphics.ImageFormat#RAW_SENSOR} format.</p>\n     *\n     * <p>For the maximum size column, {@code PREVIEW} refers to the best size match to the\n     * device's screen resolution, or to 1080p ({@code 1920x1080}), whichever is\n     * smaller. {@code RECORD} refers to the camera device's maximum supported recording resolution,\n     * as determined by {@link android.media.CamcorderProfile}. And {@code MAXIMUM} refers to the\n     * camera device's maximum output resolution for that format or target from\n     * {@link StreamConfigurationMap#getOutputSizes}.</p>\n     *\n     * <p>To use these tables, determine the number and the formats/targets of outputs needed, and\n     * find the row(s) of the table with those targets. The sizes indicate the maximum set of sizes\n     * that can be used; it is guaranteed that for those targets, the listed sizes and anything\n     * smaller from the list given by {@link StreamConfigurationMap#getOutputSizes} can be\n     * successfully used to create a session.  For example, if a row indicates that a 8 megapixel\n     * (MP) YUV_420_888 output can be used together with a 2 MP {@code PRIV} output, then a session\n     * can be created with targets {@code [8 MP YUV, 2 MP PRIV]} or targets {@code [2 MP YUV, 2 MP\n     * PRIV]}; but a session with targets {@code [8 MP YUV, 4 MP PRIV]}, targets {@code [4 MP YUV, 4\n     * MP PRIV]}, or targets {@code [8 MP PRIV, 2 MP YUV]} would not be guaranteed to work, unless\n     * some other row of the table lists such a combination.</p>\n     *\n     * <style scoped>\n     *  #rb { border-right-width: thick; }\n     * </style>\n     *\n     * <h5>LEGACY-level guaranteed configurations</h5>\n     *\n     * <p>Legacy devices ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY}) support at\n     * least the following stream combinations:\n     *\n     * <table>\n     * <tr> <th colspan=\"2\" id=\"rb\">Target 1</th> <th colspan=\"2\" id=\"rb\">Target 2</th>  <th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr> <th>Type</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>Simple preview, GPU video processing, or no-preview video recording.</td> </tr>\n     * <tr> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>No-viewfinder still image capture.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>In-application video/image processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Standard still imaging.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>In-app processing plus still capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Standard recording.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Preview plus in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Still capture plus in-app processing.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>LIMITED-level additional guaranteed configurations</h5>\n     *\n     * <p>Limited-level ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED}) devices\n     * support at least the following stream combinations in addition to those for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY LEGACY} devices:\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code RECORD }</td> <td colspan=\"2\" id=\"rb\"></td> <td>High-resolution video recording with preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code RECORD }</td> <td colspan=\"2\" id=\"rb\"></td> <td>High-resolution in-app video processing with preview.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code RECORD }</td> <td colspan=\"2\" id=\"rb\"></td> <td>Two-input in-app video processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code RECORD }</td> <td>{@code JPEG}</td><td id=\"rb\">{@code RECORD }</td> <td>High-resolution recording with video snapshot.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code RECORD }</td> <td>{@code JPEG}</td><td id=\"rb\">{@code RECORD }</td> <td>High-resolution in-app processing with video snapshot.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Two-input in-app processing with still capture.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>FULL-level additional guaranteed configurations</h5>\n     *\n     * <p>FULL-level ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL}) devices\n     * support at least the following stream combinations in addition to those for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices:\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Maximum-resolution GPU processing with preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Maximum-resolution in-app processing with preview.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Maximum-resolution two-input in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Video recording with maximum-size video snapshot</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code 640x480}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Standard video recording plus maximum-resolution in-app processing.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code 640x480}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Preview plus two-input maximum-resolution in-app processing.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>RAW-capability additional guaranteed configurations</h5>\n     *\n     * <p>RAW-capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} includes\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW RAW}) devices additionally support\n     * at least the following stream combinations on both\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL} and\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices:\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th> </tr>\n     * <tr> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>No-preview DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Standard DNG capture.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td colspan=\"2\" id=\"rb\"></td> <td>In-app processing plus DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Video recording with DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Preview with in-app processing and DNG capture.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Two-input in-app processing plus DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Still capture with simultaneous JPEG and DNG.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>In-app processing with simultaneous JPEG and DNG.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>BURST-capability additional guaranteed configurations</h5>\n     *\n     * <p>BURST-capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} includes\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE BURST_CAPTURE}) devices\n     * support at least the below stream combinations in addition to those for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices. Note that all\n     * FULL-level devices support the BURST capability, and the below list is a strict subset of the\n     * list for FULL-level devices, so this table is only relevant for LIMITED-level devices that\n     * support the BURST_CAPTURE capability.\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Maximum-resolution GPU processing with preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Maximum-resolution in-app processing with preview.</td> </tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Maximum-resolution two-input in-app processing.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>LEVEL-3 additional guaranteed configurations</h5>\n     *\n     * <p>LEVEL-3 ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3 LEVEL_3})\n     * support at least the following stream combinations in addition to the combinations for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL} and for\n     * RAW capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} includes\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW RAW}):\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code 640x480}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>In-app viewfinder analysis with dynamic selection of output format.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code 640x480}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>In-app viewfinder analysis with dynamic selection of output format.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>Concurrent stream guaranteed configurations</h5>\n     *\n     * <p>BACKWARD_COMPATIBLE devices capable of streaming concurrently with other devices as\n     * described by {@link android.hardware.camera2.CameraManager#getConcurrentCameraIds} have the\n     * following guaranteed streams (when streaming concurrently with other devices)</p>\n     *\n     * <p> Note: The sizes mentioned for these concurrent streams are the maximum sizes guaranteed\n     * to be supported. Sizes smaller than these, obtained by {@link StreamConfigurationMap#getOutputSizes} for a particular format, are supported as well. </p>\n     *\n     * <p>\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th> </tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code s1440p}</td>  <td colspan=\"2\" id=\"rb\"></td> <td>In-app video / image processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code s1440p}</td>  <td colspan=\"2\" id=\"rb\"></td> <td>In-app viewfinder analysis.</td> </tr>\n     * <tr> <td>{@code JPEG}</td><td id=\"rb\">{@code s1440p}</td>  <td colspan=\"2\" id=\"rb\"></td> <td>No viewfinder still image capture.</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s720p}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code s1440p}</td> <td> Standard still imaging.</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s720p}</td> <td>{@code YUV / PRIV }</td><td id=\"rb\">{@code s1440p}</td> <td>In-app video / processing with preview.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p> Devices which are not backwards-compatible, support a mandatory single stream of size sVGA with image format {@code DEPTH16} during concurrent operation. </p>\n     *\n     * <p> For guaranteed concurrent stream configurations:</p>\n     * <p> sVGA refers to the camera device's maximum resolution for that format from {@link StreamConfigurationMap#getOutputSizes} or\n     * VGA resolution (640X480) whichever is lower. </p>\n     * <p> s720p refers to the camera device's maximum resolution for that format from {@link StreamConfigurationMap#getOutputSizes} or\n     * 720p(1280X720) whichever is lower. </p>\n     * <p> s1440p refers to the camera device's maximum resolution for that format from {@link StreamConfigurationMap#getOutputSizes} or\n     * 1440p(1920X1440) whichever is lower. </p>\n     * <p>MONOCHROME-capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES}\n     * includes {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME MONOCHROME}) devices\n     * supporting {@link android.graphics.ImageFormat#Y8 Y8} support substituting {@code YUV}\n     * streams with {@code Y8} in all guaranteed stream combinations for the device's hardware level\n     * and capabilities.</p>\n     *\n     * <p>Clients can access the above mandatory stream combination tables via\n     * {@link android.hardware.camera2.params.MandatoryStreamCombination}.</p>\n     *\n     * <p>Devices capable of outputting HEIC formats ({@link StreamConfigurationMap#getOutputFormats}\n     * contains {@link android.graphics.ImageFormat#HEIC}) will support substituting {@code JPEG}\n     * streams with {@code HEIC} in all guaranteed stream combinations for the device's hardware\n     * level and capabilities. Calling createCaptureSession with both JPEG and HEIC outputs is not\n     * supported.</p>\n     *\n     * <h5>LEGACY-level additional guaranteed combinations with multi-resolution outputs</h5>\n     *\n     * <p>Devices capable of multi-resolution output for a particular format (\n     * {@link android.hardware.camera2.params.MultiResolutionStreamConfigurationMap#getOutputInfo}\n     * returns a non-empty list) support using {@link MultiResolutionImageReader} for MAXIMUM\n     * resolution streams of that format for all mandatory stream combinations. For example,\n     * if a LIMITED camera device supports multi-resolution output streams for both {@code JPEG} and\n     * {@code PRIVATE}, in addition to the stream configurations\n     * in the LIMITED and Legacy table above, the camera device supports the following guaranteed\n     * stream combinations ({@code MULTI_RES} in the Max size column refers to a {@link\n     * MultiResolutionImageReader} created based on the variable max resolutions supported):\n     *\n     * <table>\n     * <tr> <th colspan=\"2\" id=\"rb\">Target 1</th> <th colspan=\"2\" id=\"rb\">Target 2</th>  <th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr> <th>Type</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>Simple preview, GPU video processing, or no-preview video recording.</td> </tr>\n     * <tr> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td colspan=\"2\" id=\"rb\"></td> <td colspan=\"2\" id=\"rb\"></td> <td>No-viewfinder still image capture.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td colspan=\"2\" id=\"rb\"></td> <td>Standard still imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Still capture plus in-app processing.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>LIMITED-level additional guaranteed configurations with multi-resolution outputs</h5>\n     *\n     * <p>\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Two-input in-app processing with still capture.</td> </tr>\n     * </table><br>\n     * The same logic applies to other hardware levels and capabilities.\n     * </p>\n     *\n     * <h5>Additional guaranteed combinations for ULTRA_HIGH_RESOLUTION sensors</h5>\n     *\n     * <p> Devices with the ULTRA_HIGH_RESOLUTION_SENSOR capability have some additional guarantees\n     * which clients can take advantage of:\n     *\n     * <table>\n     * <tr> <th colspan=\"3\" id=\"rb\">Target 1</th> <th colspan=\"3\" id=\"rb\">Target 2</th>  <th colspan=\"3\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code YUV / JPEG / RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code PRIV / YUV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td colspan=\"3\" id=\"rb\"></td> <td>Ultra high res still image capture with preview</td> </tr>\n     * <tr> <td>{@code YUV / JPEG / RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code PRIV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PRIV / YUV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code RECORD}</td> <td>Ultra high res still capture with preview + app based RECORD size analysis</td> </tr>\n     * <tr> <td>{@code YUV / JPEG / RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code PRIV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code JPEG / YUV / RAW}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code MAX}</td> <td>Ultra high res still image capture with preview + default sensor pixel mode analysis stream</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p> Here, SC Map, refers to the {@link StreamConfigurationMap}, the target stream sizes must\n     * be chosen from. {@code DEFAULT} refers to the default sensor pixel mode {@link\n     * StreamConfigurationMap} and {@code MAX_RES} refers to the maximum resolution {@link\n     * StreamConfigurationMap}. For {@code MAX_RES} streams, {@code MAX} in the {@code Max size} column refers to the maximum size from\n     * {@link StreamConfigurationMap#getOutputSizes} and {@link StreamConfigurationMap#getHighResolutionOutputSizes}.\n     * Note: The same capture request must not mix targets from\n     * {@link StreamConfigurationMap}s corresponding to different sensor pixel modes. </p>\n     *\n     * <h5>10-bit output additional guaranteed configurations</h5>\n     *\n     * <p>10-bit output capable\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT}\n     * devices support at least the following stream combinations:\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> </td> <td colspan=\"4\" id=\"rb\"></td> <td>Simple preview, GPU video processing, or no-preview video recording.</td> </tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> </td> <td colspan=\"4\" id=\"rb\"></td> <td>In-application video/image processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM }</td> <td colspan=\"2\" id=\"rb\"></td> <td>Standard still imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV }</td><td id=\"rb\">{@code MAXIMUM }</td> <td colspan=\"2\" id=\"rb\"></td> <td>Maximum-resolution in-app processing with preview.</td> </tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM }</td> <td colspan=\"2\" id=\"rb\"></td> <td>Maximum-resolution two-input in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code RECORD }</td> <td colspan=\"2\" id=\"rb\"></td> <td>High-resolution video recording with preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code RECORD }</td> <td>{@code YUV}</td><td id=\"rb\">{@code RECORD }</td> <td>High-resolution recording with in-app snapshot.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV }</td><td id=\"rb\">{@code RECORD }</td> <td>{@code JPEG}</td><td id=\"rb\">{@code RECORD }</td> <td>High-resolution recording with video snapshot.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>Here PRIV can be either 8 or 10-bit {@link android.graphics.ImageFormat#PRIVATE} pixel\n     * format. YUV can be either {@link android.graphics.ImageFormat#YUV_420_888} or\n     * {@link android.graphics.ImageFormat#YCBCR_P010}.\n     * For the maximum size column, PREVIEW refers to the best size match to the device's screen\n     * resolution, or to 1080p (1920x1080), whichever is smaller. RECORD refers to the camera\n     * device's maximum supported recording resolution, as determined by\n     * {@link android.media.CamcorderProfile}. MAXIMUM refers to the camera device's maximum output\n     * resolution for that format or target from {@link StreamConfigurationMap#getOutputSizes(int)}.\n     * Do note that invalid combinations such as having a camera surface configured to use pixel\n     * format {@link android.graphics.ImageFormat#YUV_420_888} with a 10-bit profile\n     * will cause a capture session initialization failure.\n     * </p>\n     * <p>{@link android.graphics.ImageFormat#JPEG_R} may also be supported if advertised by\n     * {@link android.hardware.camera2.params.StreamConfigurationMap}. When initializing a capture\n     * session that includes a Jpeg/R camera output clients must consider the following items w.r.t.\n     * the 10-bit mandatory stream combination table:\n     *\n     * <ul>\n     *     <li>To generate the compressed Jpeg/R image a single\n     *     {@link android.graphics.ImageFormat#YCBCR_P010} output will be used internally by\n     *     the camera device.</li>\n     *     <li>On camera devices that are able to support concurrent 10 and 8-bit capture requests\n     *     see {@link android.hardware.camera2.params.DynamicRangeProfiles#getProfileCaptureRequestConstraints}\n     *     an extra {@link android.graphics.ImageFormat#JPEG} will also\n     *     be configured internally to help speed up the encoding process.</li>\n     * </ul>\n     *\n     * Jpeg/R camera outputs will typically be able to support the MAXIMUM device resolution.\n     * Clients can also call {@link StreamConfigurationMap#getOutputSizes(int)} for a complete list\n     * supported sizes.\n     * Camera clients that register a Jpeg/R output within a stream combination that doesn't fit\n     * in the mandatory stream table above can call\n     * {@link #isSessionConfigurationSupported} to ensure that this particular\n     * configuration is supported.</p>\n     *\n     * <h5>STREAM_USE_CASE capability additional guaranteed configurations</h5>\n     *\n     * <p>Devices with the STREAM_USE_CASE capability ({@link\n     * CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} includes {@link\n     * CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE}) support below additional\n     * stream combinations:\n     *\n     * <table>\n     * <tr><th colspan=\"3\" id=\"rb\">Target 1</th><th colspan=\"3\" id=\"rb\">Target 2</th><th colspan=\"3\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Simple preview or in-app image processing</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code RECORD}</td><td id=\"rb\">{@code VIDEO_RECORD}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Simple video recording or in-app video processing</td> </tr>\n     * <tr> <td>{@code YUV / JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Simple JPEG or YUV still image capture</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s1440p}</td><td id=\"rb\">{@code PREVIEW_VIDEO_STILL}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Multi-purpose stream for preview, video and still image capture</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s1440p}</td><td id=\"rb\">{@code VIDEO_CALL}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Simple video call</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV / JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td colspan=\"3\" id=\"rb\"></td> <td>Preview with JPEG or YUV still image capture</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code RECORD}</td><td id=\"rb\">{@code VIDEO_RECORD}</td> <td colspan=\"3\" id=\"rb\"></td> <td>Preview with video recording or in-app video processing</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td colspan=\"3\" id=\"rb\"></td> <td>Preview with in-application image processing</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s1440p}</td><td id=\"rb\">{@code VIDEO_CALL}</td> <td colspan=\"3\" id=\"rb\"></td> <td>Preview with video call</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code s1440p}</td><td id=\"rb\">{@code PREVIEW_VIDEO_STILL}</td> <td>{@code YUV / JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td colspan=\"3\" id=\"rb\"></td> <td>MultI-purpose stream with JPEG or YUV still capture</td> </tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td colspan=\"3\" id=\"rb\"></td> <td>YUV and JPEG concurrent still image capture (for testing)</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code RECORD}</td><td id=\"rb\">{@code VIDEO_RECORD}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code RECORD}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td>Preview, video record and JPEG video snapshot</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td>Preview, in-application image processing, and JPEG still image capture</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>STREAM_USE_CASE_CROPPED_RAW capability additional guaranteed configurations</h5>\n     *\n     * <p>Devices that include the {@link CameraMetadata#SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW}\n     * stream use-case in {@link CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES},\n     * support the additional stream combinations below:\n     *\n     * <table>\n     * <tr><th colspan=\"3\" id=\"rb\">Target 1</th><th colspan=\"3\" id=\"rb\">Target 2</th><th colspan=\"3\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th><th>Type</th><th id=\"rb\">Max size</th><th>Usecase</th> </tr>\n     * <tr> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code CROPPED_RAW}</td> <td colspan=\"3\" id=\"rb\"></td> <td colspan=\"3\" id=\"rb\"></td> <td>Cropped RAW still capture without preview</td> </tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code CROPPED_RAW}</td> <td colspan=\"3\" id=\"rb\"></td> <td>Preview with cropped RAW still capture</td> </tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV / JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code STILL_CAPTURE}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code CROPPED_RAW}</td> <td>Preview with YUV / JPEG and cropped RAW still capture</td> </tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code VIDEO_RECORD / PREVIEW}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td><td id=\"rb\">{@code CROPPED_RAW}</td> <td>Video recording with preview and cropped RAW still capture</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <h5>Preview stabilization guaranteed stream configurations</h5>\n     *\n     * <p>For devices where\n     * {@link CameraCharacteristics#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES} includes\n     * {@link CameraMetadata#CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION},\n     * the following stream combinations are guaranteed,\n     * for CaptureRequests where {@link CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE} is set to\n     * {@link CameraMetadata#CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION}\n     *\n     * <table>\n     * <tr><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code s1440p}</td><td colspan=\"2\" id=\"rb\"></td> <td>Stabilized preview, GPU video processing, or no-preview stabilized video recording.</td> </tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code s1440p}</td> <td>{@code JPEG / YUV}</td><td id=\"rb\">{@code MAXIMUM }</td><td>Standard still imaging with stabilized preview.</td> </tr>\n     * <tr> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV / YUV}</td><td id=\"rb\">{@code s1440p }</td><td>High-resolution recording with stabilized preview and recording stream.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>\n     * For the maximum size column, PREVIEW refers to the best size match to the device's screen\n     * resolution, or to 1080p (1920x1080), whichever is smaller. RECORD refers to the camera\n     * device's maximum supported recording resolution, as determined by\n     * {@link android.media.CamcorderProfile}. MAXIMUM refers to the camera device's maximum output\n     * resolution for that format or target from {@link StreamConfigurationMap#getOutputSizes(int)}.\n     * </p>\n     *\n     * <p>Since the capabilities of camera devices vary greatly, a given camera device may support\n     * target combinations with sizes outside of these guarantees, but this can only be tested for\n     * by calling {@link #isSessionConfigurationSupported} or attempting\n     * to create a session with such targets.</p>\n     *\n     * <p>Exception on 176x144 (QCIF) resolution:\n     * Camera devices usually have a fixed capability for downscaling from larger resolution to\n     * smaller, and the QCIF resolution sometimes is not fully supported due to this\n     * limitation on devices with high-resolution image sensors. Therefore, trying to configure a\n     * QCIF resolution stream together with any other stream larger than 1920x1080 resolution\n     * (either width or height) might not be supported, and capture session creation will fail if it\n     * is not.</p>\n     *\n     * <h3>Reprocessing</h3>\n     *\n     * <p>If a camera device supports YUV reprocessing\n     * ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING}) or PRIVATE\n     * reprocessing\n     * ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING}), the\n     * application can also create a reprocessable capture session to submit reprocess capture\n     * requests in addition to regular capture requests, by setting an\n     * {@link android.hardware.camera2.params.SessionConfiguration#setInputConfiguration\n     * input configuration} for the session. A reprocess capture request takes the next available\n     * buffer from the\n     * session's input Surface, and sends it through the camera device's processing pipeline again,\n     * to produce buffers for the request's target output Surfaces. No new image data is captured\n     * for a reprocess request. However the input buffer provided by the application must be\n     * captured previously by the same camera device in the same session directly (e.g. for\n     * Zero-Shutter-Lag use case) or indirectly (e.g. combining multiple output images).</p>\n     *\n     * <p>The active reprocessable capture session determines an input {@link Surface} and the set\n     * of potential output Surfaces for the camera devices for each capture request. The application\n     * can use {@link #createCaptureRequest createCaptureRequest} to create regular capture requests\n     * to capture new images from the camera device, and use {@link #createReprocessCaptureRequest\n     * createReprocessCaptureRequest} to create reprocess capture requests to process buffers from\n     * the input {@link Surface}. Some combinations of output Surfaces in a session may not be used\n     * in a request simultaneously. The guaranteed combinations of output Surfaces that can be used\n     * in a request simultaneously are listed in the tables under {@link #createCaptureSession\n     * createCaptureSession}. All the output Surfaces in one capture request will come from the\n     * same source, either from a new capture by the camera device, or from the input Surface\n     * depending on if the request is a reprocess capture request.</p>\n     *\n     * <p>Input formats and sizes supported by the camera device can be queried via\n     * {@link StreamConfigurationMap#getInputFormats} and\n     * {@link StreamConfigurationMap#getInputSizes}. For each supported input format, the camera\n     * device supports a set of output formats and sizes for reprocessing that can be queried via\n     * {@link StreamConfigurationMap#getValidOutputFormatsForInput} and\n     * {@link StreamConfigurationMap#getOutputSizes}. While output Surfaces with formats that\n     * aren't valid reprocess output targets for the input configuration can be part of a session,\n     * they cannot be used as targets for a reprocessing request.</p>\n     *\n     * <p>Since the application cannot access {@link android.graphics.ImageFormat#PRIVATE} images\n     * directly, an output Surface created by {@link android.media.ImageReader#newInstance} with\n     * {@link android.graphics.ImageFormat#PRIVATE} as the format will be considered as intended to\n     * be used for reprocessing input and thus the {@link android.media.ImageReader} size must\n     * match one of the supported input sizes for {@link android.graphics.ImageFormat#PRIVATE}\n     * format. Otherwise, creating a reprocessable capture session will fail.</p>\n     *\n     * <p>Starting from API level 30, recreating a reprocessable capture session will flush all the\n     * queued but not yet processed buffers from the input surface.</p>\n     *\n     * <p>The configurations in the tables below are guaranteed for creating a reprocessable\n     * capture session if the camera device supports YUV reprocessing or PRIVATE reprocessing.\n     * However, not all output targets used to create a reprocessable session may be used in a\n     * {@link CaptureRequest} simultaneously. For devices that support only 1 output target in a\n     * reprocess {@link CaptureRequest}, submitting a reprocess {@link CaptureRequest} with multiple\n     * output targets will result in a {@link CaptureFailure}. For devices that support multiple\n     * output targets in a reprocess {@link CaptureRequest}, the guaranteed output targets that can\n     * be included in a {@link CaptureRequest} simultaneously are listed in the tables under\n     * {@link #createCaptureSession createCaptureSession}. For example, with a FULL-capability\n     * ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL} {@code == }\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL}) device that supports PRIVATE\n     * reprocessing, an application can create a reprocessable capture session with 1 input,\n     * ({@code PRIV}, {@code MAXIMUM}), and 3 outputs, ({@code PRIV}, {@code MAXIMUM}),\n     * ({@code PRIV}, {@code PREVIEW}), and ({@code YUV}, {@code MAXIMUM}). However, it's not\n     * guaranteed that an application can submit a regular or reprocess capture with ({@code PRIV},\n     * {@code MAXIMUM}) and ({@code YUV}, {@code MAXIMUM}) outputs based on the table listed under\n     * {@link #createCaptureSession createCaptureSession}. In other words, use the tables below to\n     * determine the guaranteed stream configurations for creating a reprocessable capture session,\n     * and use the tables under {@link #createCaptureSession createCaptureSession} to determine the\n     * guaranteed output targets that can be submitted in a regular or reprocess\n     * {@link CaptureRequest} simultaneously.</p>\n     *\n     * <p>Reprocessing with 10-bit output targets on 10-bit capable\n     * {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT} devices is\n     * not supported. Trying to initialize a repreocessable capture session with one ore more\n     * output configurations set {@link OutputConfiguration#setDynamicRangeProfile} to use\n     * a 10-bit dynamic range profile {@link android.hardware.camera2.params.DynamicRangeProfiles}\n     * will trigger {@link IllegalArgumentException}.</p>\n     *\n     * <style scoped>\n     *  #rb { border-right-width: thick; }\n     * </style>\n     *\n     * <p>LIMITED-level ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED}) devices\n     * support at least the following stream combinations for creating a reprocessable capture\n     * session in addition to those listed earlier for regular captures for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices:\n     *\n     * <table>\n     * <tr><th colspan=\"11\">LIMITED-level additional guaranteed configurations for creating a reprocessable capture session<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is guaranteed only if YUV reprocessing is supported)</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td></td><td id=\"rb\"></td> <td>No-viewfinder still image reprocessing.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>ZSL(Zero-Shutter-Lag) still imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>ZSL still and in-app processing imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>ZSL in-app processing with still capture.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>FULL-level ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL}) devices\n     * support at least the following stream combinations for creating a reprocessable capture\n     * session in addition to those for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices:\n     *\n     * <table>\n     * <tr><th colspan=\"11\">FULL-level additional guaranteed configurations for creating a reprocessable capture session<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is guaranteed only if YUV reprocessing is supported)</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td></td><td id=\"rb\"></td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution multi-frame image fusion in-app processing with regular preview.</td> </tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td></td><td id=\"rb\"></td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution multi-frame image fusion two-input in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code RECORD}</td> <td></td><td id=\"rb\"></td> <td>High-resolution ZSL in-app video processing with regular preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution ZSL in-app processing with regular preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution two-input ZSL in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>ZSL still capture and in-app processing.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>RAW-capability ({@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES} includes\n     * {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW RAW}) devices additionally support\n     * at least the following stream combinations for creating a reprocessable capture session\n     * on both {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL} and\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED LIMITED} devices\n     *\n     * <table>\n     * <tr><th colspan=\"11\">RAW-capability additional guaranteed configurations for creating a reprocessable capture session<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is guaranteed only if YUV reprocessing is supported)</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>Mutually exclusive ZSL in-app processing and DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Mutually exclusive ZSL in-app processing and preview with DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Mutually exclusive ZSL two-input in-app processing and DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Mutually exclusive ZSL still capture and preview with DNG capture.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Mutually exclusive ZSL in-app processing with still capture and DNG capture.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>LEVEL-3 ({@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}\n     * {@code == }{@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3 LEVEL_3}) devices\n     * support at least the following stream combinations for creating a reprocessable capture\n     * session in addition to those for\n     * {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL FULL} devices. Note that while\n     * the second configuration allows for configuring {@code MAXIMUM} {@code YUV} and {@code JPEG}\n     * outputs at the same time, that configuration is not listed for regular capture sessions, and\n     * therefore simultaneous output to both targets is not allowed.\n     *\n     * <table>\n     * <tr><th colspan=\"13\">LEVEL-3 additional guaranteed configurations for creating a reprocessable capture session<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is always guaranteed.</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th colspan=\"2\" id=\"rb\">Target 5</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code 640x480}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td></td><td id=\"rb\"></td> <td>In-app viewfinder analysis with ZSL and RAW.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>Same as input</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code 640x480}</td> <td>{@code RAW}</td><td id=\"rb\">{@code MAXIMUM}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MAXIMUM}</td><td>In-app viewfinder analysis with ZSL, RAW, and JPEG reprocessing output.</td> </tr>\n     * </table><br>\n     * </p>\n     *\n     * <p>If a camera device supports multi-resolution {@code YUV} input and multi-resolution\n     * {@code YUV} output or supports multi-resolution {@code PRIVATE} input and multi-resolution\n     * {@code PRIVATE} output, the additional mandatory stream combinations for LIMITED and FULL devices are listed\n     * below ({@code MULTI_RES} in the Max size column refers to a\n     * {@link MultiResolutionImageReader} for output, and a multi-resolution\n     * {@link InputConfiguration} for input):\n     * <table>\n     * <tr><th colspan=\"11\">LIMITED-level additional guaranteed configurations for creating a reprocessable capture session with multi-resolution input and multi-resolution outputs<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is guaranteed only if YUV reprocessing is supported)</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Same as input</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td></td><td id=\"rb\"></td> <td></td><td id=\"rb\"></td> <td>No-viewfinder still image reprocessing.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Same as input</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td></td><td id=\"rb\"></td> <td>ZSL(Zero-Shutter-Lag) still imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Same as input</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td></td><td id=\"rb\"></td> <td>ZSL still and in-app processing imaging.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Same as input</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>ZSL in-app processing with still capture.</td> </tr>\n     * </table><br>\n     * <table>\n     * <tr><th colspan=\"11\">FULL-level additional guaranteed configurations for creating a reprocessable capture session with multi-resolution input and multi-resolution outputs<br>({@code PRIV} input is guaranteed only if PRIVATE reprocessing is supported. {@code YUV} input is guaranteed only if YUV reprocessing is supported)</th></tr>\n     * <tr><th colspan=\"2\" id=\"rb\">Input</th><th colspan=\"2\" id=\"rb\">Target 1</th><th colspan=\"2\" id=\"rb\">Target 2</th><th colspan=\"2\" id=\"rb\">Target 3</th><th colspan=\"2\" id=\"rb\">Target 4</th><th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution ZSL in-app processing with regular preview.</td> </tr>\n     * <tr> <td>{@code PRIV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td></td><td id=\"rb\"></td> <td>Maximum-resolution two-input ZSL in-app processing.</td> </tr>\n     * <tr> <td>{@code PRIV}/{@code YUV}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>Same as input</td><td id=\"rb\">{@code MULTI_RES}</td> <td>{@code PRIV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code YUV}</td><td id=\"rb\">{@code PREVIEW}</td> <td>{@code JPEG}</td><td id=\"rb\">{@code MULTI_RES}</td> <td>ZSL still capture and in-app processing.</td> </tr>\n     * </table><br>\n     * <p> Devices with the ULTRA_HIGH_RESOLUTION_SENSOR capability have some additional guarantees\n     * which clients can take advantage of : </p>\n     * <table>\n     * <tr><th colspan=\"13\">Additional guaranteed combinations for ULTRA_HIGH_RESOLUTION sensors (YUV / PRIV inputs are guaranteed only if YUV / PRIVATE reprocessing are supported)</th></tr>\n     * <tr> <th colspan=\"3\" id=\"rb\">Input</th> <th colspan=\"3\" id=\"rb\">Target 1</th> <th colspan=\"3\" id=\"rb\">Target 2</th>  <th colspan=\"3\" id=\"rb\">Target 3</th> <th rowspan=\"2\">Sample use case(s)</th> </tr>\n     * <tr> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th><th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th> <th>Type</th><th id=\"rb\"> SC Map</th><th id=\"rb\">Max size</th></tr>\n     * <tr> <td>{@code RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td>{@code RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code PRIV / YUV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td colspan=\"3\" id=\"rb\"></td> <td>RAW remosaic reprocessing with separate preview</td> </tr>\n     * <tr> <td>{@code RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td>{@code RAW}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code PRIV / YUV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code JPEG / YUV}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td> <td>Ultra high res RAW -> JPEG / YUV with seperate preview</td> </tr>\n     * <tr> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td> <td>{@code YUV / PRIV}</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td><td id=\"rb\">{@code YUV / PRIV}</td><td id=\"rb\">{@code DEFAULT}</td><td id=\"rb\">{@code PREVIEW}</td><td id=\"rb\">{@code JPEG }</td><td id=\"rb\">{@code MAX_RES}</td><td id=\"rb\">{@code MAX}</td> <td> Ultra high res PRIV / YUV -> YUV / JPEG reprocessing with seperate preview</td> </tr>\n     * </table><br>\n     * No additional mandatory stream combinations for RAW capability and LEVEL-3 hardware level.\n     * </p>\n     *\n     * <h3>Constrained high-speed recording</h3>\n     *\n     * <p>The application can use a\n     * {@link android.hardware.camera2.params.SessionConfiguration#SESSION_REGULAR\n     * normal capture session}\n     * for high speed capture if the desired high speed FPS ranges are advertised by\n     * {@link CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES}, in which case all API\n     * semantics associated with normal capture sessions applies.</p>\n     *\n     * <p>A\n     * {@link android.hardware.camera2.params.SessionConfiguration#SESSION_HIGH_SPEED\n     * high-speed capture session}\n     * can be use for high speed video recording (>=120fps) when the camera device supports high\n     * speed video capability (i.e., {@link CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES}\n     * contains {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO}).\n     * A constrained high-speed capture session has special limitations compared with a normal\n     * capture session:</p>\n     *\n     * <ul>\n     *\n     * <li>In addition to the output target Surface requirements specified above for regular\n     *   captures, a high speed capture session will only support up to 2 output Surfaces, though\n     *   the application might choose to configure just one Surface (e.g., preview only). All\n     *   Surfaces must be either video encoder surfaces (acquired by\n     *   {@link android.media.MediaRecorder#getSurface} or\n     *   {@link android.media.MediaCodec#createInputSurface}) or preview surfaces (obtained from\n     *   {@link android.view.SurfaceView}, {@link android.graphics.SurfaceTexture} via\n     *   {@link android.view.Surface#Surface(android.graphics.SurfaceTexture)}). The Surface sizes\n     *   must be one of the sizes reported by {@link StreamConfigurationMap#getHighSpeedVideoSizes}.\n     *   When multiple Surfaces are configured, their size must be same.</li>\n     *\n     * <li>An active high speed capture session only accepts request lists created via\n     *   {@link CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList}, and the\n     *   request list can only be submitted to this session via\n     *   {@link CameraCaptureSession#captureBurst captureBurst}, or\n     *   {@link CameraCaptureSession#setRepeatingBurst setRepeatingBurst}.</li>\n     *\n     * <li>The FPS ranges being requested to this session must be selected from\n     *   {@link StreamConfigurationMap#getHighSpeedVideoFpsRangesFor}. The application can still use\n     *   {@link CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE} to control the desired FPS range.\n     *   Switching to an FPS range that has different\n     *   {@link android.util.Range#getUpper() maximum FPS} may trigger some camera device\n     *   reconfigurations, which may introduce extra latency. It is recommended that the\n     *   application avoids unnecessary maximum target FPS changes as much as possible during high\n     *   speed streaming.</li>\n     *\n     * <li>For the request lists submitted to this session, the camera device will override the\n     *   {@link CaptureRequest#CONTROL_MODE control mode}, auto-exposure (AE), auto-white balance\n     *   (AWB) and auto-focus (AF) to {@link CameraMetadata#CONTROL_MODE_AUTO},\n     *   {@link CameraMetadata#CONTROL_AE_MODE_ON}, {@link CameraMetadata#CONTROL_AWB_MODE_AUTO}\n     *   and {@link CameraMetadata#CONTROL_AF_MODE_CONTINUOUS_VIDEO}, respectively. All\n     *   post-processing block mode controls will be overridden to be FAST. Therefore, no manual\n     *   control of capture and post-processing parameters is possible. Beside these, only a subset\n     *   of controls will work, see\n     *   {@link CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO} for\n     *   more details.</li>\n     *\n     * </ul>\n     *\n     *\n     * @param config A session configuration (see {@link SessionConfiguration}).\n     *\n     * @throws IllegalArgumentException In case the session configuration is invalid; or the output\n     *                                  configurations are empty; or the session configuration\n     *                                  executor is invalid;\n     *                                  or the output dynamic range combination is\n     *                                  invalid/unsupported.\n     * @throws CameraAccessException In case the camera device is no longer connected or has\n     *                               encountered a fatal error.\n     * @see #createCaptureSession(List, CameraCaptureSession.StateCallback, Handler)\n     * @see #createCaptureSessionByOutputConfigurations\n     * @see #createReprocessableCaptureSession\n     * @see #createConstrainedHighSpeedCaptureSession\n     * @see OutputConfiguration#setDynamicRangeProfile\n     * @see android.hardware.camera2.params.DynamicRangeProfiles\n     ",
    "links" : [ "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY", "android.graphics.ImageFormat#JPEG_R", "android.media.MediaCodec#createInputSurface", "android.hardware.camera2.CameraMetadata#CONTROL_VIDEO_STABILIZATION_MODE_PREVIEW_STABILIZATION", "android.hardware.camera2.CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES", "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3", "android.media.ImageReader#newInstance", "android.hardware.camera2.CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE", "android.hardware.camera2.CameraCaptureSession", "android.hardware.camera2.CaptureFailure", "android.hardware.camera2.params.StreamConfigurationMap#getOutputMinFrameDuration", "android.hardware.camera2.params.ExtensionSessionConfiguration", "IllegalArgumentException", "CameraCaptureSession.StateCallback", "android.view.Surface", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL", "android.hardware.camera2.params.StreamConfigurationMap#getOutputFormats()", "CameraCaptureSession.StateCallback#onConfiguredconfigured", "android.hardware.camera2.CameraMetadata#CONTROL_AF_MODE_CONTINUOUS_VIDEO", "android.media.MediaRecorder", "android.util.Range#getUpper()", "android.hardware.camera2.CameraMetadata#CONTROL_AWB_MODE_AUTO", "android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_STREAM_USE_CASE", "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoFpsRangesFor", "android.hardware.camera2.params.StreamConfigurationMap#getHighResolutionOutputSizes", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes", "#createCaptureSession", "#createCaptureRequest", "android.hardware.camera2.MultiResolutionImageReader", "android.hardware.camera2.params.StreamConfigurationMap#getInputSizes", "android.graphics.SurfaceTexture#setDefaultBufferSize", "android.graphics.ImageFormat#JPEG", "android.hardware.camera2.params.DynamicRangeProfiles", "CameraCaptureSession.StateCallback#onClosed", "android.media.ImageReader#getSurface()", "CameraCaptureSession.StateCallback#onConfigured", "#isSessionConfigurationSupported", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW", "android.hardware.camera2.CameraCharacteristics#SCALER_AVAILABLE_STREAM_USE_CASES", "android.hardware.camera2.CaptureRequest#CONTROL_VIDEO_STABILIZATION_MODE", "android.hardware.camera2.params.StreamConfigurationMap#getValidOutputFormatsForInput", "android.hardware.camera2.params.OutputConfiguration#OutputConfiguration(Size", "android.hardware.camera2.params.InputConfiguration", "android.hardware.camera2.CameraMetadata#CONTROL_AE_MODE_ON", "android.hardware.camera2.params.SessionConfiguration#SESSION_REGULARnormal", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(int)", "CameraCaptureSession.StateCallback#onConfigureFailed", "android.hardware.camera2.CameraManager#getConcurrentCameraIds", "android.hardware.camera2.CameraCharacteristics#CONTROL_AVAILABLE_VIDEO_STABILIZATION_MODES", "android.hardware.camera2.CaptureRequest", "android.hardware.camera2.CameraCaptureSession#setRepeatingRequest", "android.media.CamcorderProfile", "android.hardware.camera2.params.SessionConfiguration#SESSION_HIGH_SPEEDhigh", "android.graphics.ImageFormat#Y8", "android.view.SurfaceView", "android.hardware.camera2.params.DynamicRangeProfiles#getProfileCaptureRequestConstraints", "android.graphics.ImageFormat#YCBCR_P010", "android.view.SurfaceHolder#setFixedSize", "android.graphics.ImageFormat#YUV_420_888", "android.hardware.camera2.CameraMetadata#SCALER_AVAILABLE_STREAM_USE_CASES_CROPPED_RAW", "android.media.MediaRecorder#getSurface", "android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES", "android.hardware.camera2.CameraCaptureSession#capture", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING", "android.view.SurfaceHolder#getSurface", "android.hardware.camera2.CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED", "android.graphics.ImageFormat#RAW_SENSOR", "android.hardware.camera2.params.StreamConfigurationMap", "android.hardware.camera2.params.MultiResolutionStreamConfigurationMap#getOutputInfo", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE", "android.hardware.camera2.params.StreamConfigurationMap#getHighSpeedVideoSizes", "android.hardware.camera2.CameraCaptureSession#captureBurst", "android.media.MediaCodec", "android.hardware.camera2.CaptureRequest#CONTROL_MODE", "android.view.SurfaceHolder.Callback#surfaceCreated", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME", "android.hardware.camera2.params.StreamConfigurationMap#getInputFormats", "android.hardware.camera2.params.MandatoryStreamCombination", "android.hardware.camera2.params.StreamConfigurationMap#getOutputFormats", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT", "android.graphics.SurfaceTexture", "android.hardware.camera2.CameraCaptureSession#setRepeatingBurst", "android.view.Surface#Surface(SurfaceTexture)", "#createCaptureSessioncreateCaptureSession", "android.media.ImageReader", "android.hardware.camera2.params.OutputConfiguration#setDynamicRangeProfile", "android.hardware.camera2.params.SessionConfiguration#setInputConfigurationinput", "android.graphics.SurfaceTextureSurfaceTexture", "android.hardware.camera2.CameraCaptureSession#abortCaptures", "android.graphics.ImageFormat#PRIVATE", "android.graphics.ImageFormat#HEIC", "android.view.Surface#Surface(android.graphics.SurfaceTexture)", "android.hardware.camera2.CameraMetadata#CONTROL_MODE_AUTO", "#createReprocessCaptureRequestcreateReprocessCaptureRequest", "android.hardware.camera2.CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_DYNAMIC_RANGE_TEN_BIT", "android.hardware.camera2.CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING" ]
  }, {
    "name" : "public abstract CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "\n     * <p>Create a {@link CaptureRequest.Builder} for new capture requests,\n     * initialized with template for a target use case. The settings are chosen\n     * to be the best options for the specific camera device, so it is not\n     * recommended to reuse the same request for a different camera device;\n     * create a builder specific for that device and template and override the\n     * settings as desired, instead.</p>\n     *\n     * @param templateType An enumeration selecting the use case for this request. Not all template\n     * types are supported on every device. See the documentation for each template type for\n     * details.\n     * @return a builder for a capture request, initialized with default\n     * settings for that template, and no output streams\n     *\n     * @throws IllegalArgumentException if the templateType is not supported by\n     * this device.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     ",
    "links" : [ "CaptureRequest.Builder" ]
  }, {
    "name" : "public CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType, Set<String> physicalCameraIdSet) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "\n     * <p>Create a {@link CaptureRequest.Builder} for new capture requests,\n     * initialized with template for a target use case. This methods allows\n     * clients to pass physical camera ids which can be used to customize the\n     * request for a specific physical camera. The settings are chosen\n     * to be the best options for the specific logical camera device. If\n     * additional physical camera ids are passed, then they will also use the\n     * same settings template. Clients can further modify individual camera\n     * settings by calling {@link CaptureRequest.Builder#setPhysicalCameraKey}.</p>\n     *\n     * <p>Individual physical camera settings will only be honored for camera session\n     * that was initialized with corresponding physical camera id output configuration\n     * {@link OutputConfiguration#setPhysicalCameraId} and the same output targets are\n     * also attached in the request by {@link CaptureRequest.Builder#addTarget}.</p>\n     *\n     * <p>The output is undefined for any logical camera streams in case valid physical camera\n     * settings are attached.</p>\n     *\n     * @param templateType An enumeration selecting the use case for this request. Not all template\n     * types are supported on every device. See the documentation for each template type for\n     * details.\n     * @param physicalCameraIdSet A set of physical camera ids that can be used to customize\n     *                            the request for a specific physical camera.\n     * @return a builder for a capture request, initialized with default\n     * settings for that template, and no output streams\n     *\n     * @throws IllegalArgumentException if the templateType is not supported by\n     * this device, or one of the physical id arguments matches with logical camera id.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #TEMPLATE_PREVIEW\n     * @see #TEMPLATE_RECORD\n     * @see #TEMPLATE_STILL_CAPTURE\n     * @see #TEMPLATE_VIDEO_SNAPSHOT\n     * @see #TEMPLATE_MANUAL\n     * @see CaptureRequest.Builder#setPhysicalCameraKey\n     * @see CaptureRequest.Builder#getPhysicalCameraKey\n     ",
    "links" : [ "CaptureRequest.Builder#addTarget", "CaptureRequest.Builder", "CaptureRequest.Builder#setPhysicalCameraKey", "android.hardware.camera2.params.OutputConfiguration#setPhysicalCameraId" ]
  }, {
    "name" : "public abstract CaptureRequest.Builder createReprocessCaptureRequest(@NonNull TotalCaptureResult inputResult) throws CameraAccessException",
    "returnType" : "CaptureRequest.Builder",
    "comment" : "\n     * <p>Create a {@link CaptureRequest.Builder} for a new reprocess {@link CaptureRequest} from a\n     * {@link TotalCaptureResult}.\n     *\n     * <p>Each reprocess {@link CaptureRequest} processes one buffer from\n     * {@link CameraCaptureSession}'s input {@link Surface} to all output {@link Surface Surfaces}\n     * included in the reprocess capture request. The reprocess input images must be generated from\n     * one or multiple output images captured from the same camera device. The application can\n     * provide input images to camera device via {@link android.media.ImageWriter#queueInputImage}.\n     * The application must use the capture result of one of those output images to create a\n     * reprocess capture request so that the camera device can use the information to achieve\n     * optimal reprocess image quality. For camera devices that support only 1 output\n     * {@link Surface}, submitting a reprocess {@link CaptureRequest} with multiple\n     * output targets will result in a {@link CaptureFailure}.\n     *\n     * From Android 14 onward, {@link CaptureRequest#CONTROL_CAPTURE_INTENT} will be set to\n     * {@link CameraMetadata#CONTROL_CAPTURE_INTENT_STILL_CAPTURE} by default. Prior to Android 14,\n     * apps will need to explicitly set this key themselves.\n     *\n     * @param inputResult The capture result of the output image or one of the output images used\n     *                       to generate the reprocess input image for this capture request.\n     *\n     * @throws IllegalArgumentException if inputResult is null.\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see CaptureRequest.Builder\n     * @see TotalCaptureResult\n     * @see CameraDevice#createCaptureSession(android.hardware.camera2.params.SessionConfiguration)\n     * @see android.media.ImageWriter\n     ",
    "links" : [ "android.media.ImageWriter#queueInputImage", "android.hardware.camera2.CameraMetadata#CONTROL_CAPTURE_INTENT_STILL_CAPTURE", "android.view.Surface", "CaptureRequest.Builder", "android.hardware.camera2.CameraCaptureSession", "android.hardware.camera2.CaptureFailure", "android.hardware.camera2.TotalCaptureResult", "android.hardware.camera2.CaptureRequest", "android.hardware.camera2.CaptureRequest#CONTROL_CAPTURE_INTENT" ]
  }, {
    "name" : "public abstract void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to this camera device as quickly as possible.\n     *\n     * <p>Immediately after this call, all calls to the camera device or active session interface\n     * will throw a {@link IllegalStateException}, except for calls to close(). Once the device has\n     * fully shut down, the {@link StateCallback#onClosed} callback will be called, and the camera\n     * is free to be re-opened.</p>\n     *\n     * <p>Immediately after this call, besides the final {@link StateCallback#onClosed} calls, no\n     * further callbacks from the device or the active session will occur, and any remaining\n     * submitted capture requests will be discarded, as if\n     * {@link CameraCaptureSession#abortCaptures} had been called, except that no success or failure\n     * callbacks will be invoked.</p>\n     *\n     ",
    "links" : [ "IllegalStateException", "android.hardware.camera2.CameraCaptureSession#abortCaptures", "#onClosed" ]
  }, {
    "name" : "public boolean isSessionConfigurationSupported(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a particular {@link SessionConfiguration} is supported by the camera device.\n     *\n     * <p>This method performs a runtime check of a given {@link SessionConfiguration}. The result\n     * confirms whether or not the passed session configuration can be successfully used to\n     * create a camera capture session using\n     * {@link CameraDevice#createCaptureSession(\n     * android.hardware.camera2.params.SessionConfiguration)}.\n     * </p>\n     *\n     * <p>The method can be called at any point before, during and after active capture session.\n     * It must not impact normal camera behavior in any way and must complete significantly\n     * faster than creating a regular or constrained capture session.</p>\n     *\n     * <p>Although this method is faster than creating a new capture session, it is not intended\n     * to be used for exploring the entire space of supported stream combinations. The available\n     * mandatory stream combinations\n     * {@link android.hardware.camera2.params.MandatoryStreamCombination} are better suited for this\n     * purpose.</p>\n     *\n     * <p><b>NOTE:</b>\n     * For apps targeting {@link android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM} and above,\n     * this method will automatically delegate to\n     * {@link CameraDeviceSetup#isSessionConfigurationSupported} whenever possible. This\n     * means that the output of this method will consider parameters set through\n     * {@link SessionConfiguration#setSessionParameters} as well.\n     * </p>\n     *\n     * <p>Session Parameters will be ignored for apps targeting <=\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, or if\n     * {@link CameraManager#isCameraDeviceSetupSupported} returns false for the camera id\n     * associated with this {@code CameraDevice}.</p>\n     *\n     * @return {@code true} if the given session configuration is supported by the camera device\n     *         {@code false} otherwise.\n     * @throws UnsupportedOperationException if the query operation is not supported by the camera\n     *                                       device\n     * @throws IllegalArgumentException if the session configuration is invalid\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see CameraManager#isCameraDeviceSetupSupported(String)\n     * @see CameraDeviceSetup#isSessionConfigurationSupported(SessionConfiguration)\n     ",
    "links" : [ "android.hardware.camera2.params.ExtensionSessionConfiguration#setSessionParameters", "android.os.Build.VERSION_CODES#VANILLA_ICE_CREAM", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.hardware.camera2.CameraDevice#createCaptureSession(", "android.hardware.camera2.params.MandatoryStreamCombination", "#isSessionConfigurationSupported", "android.hardware.camera2.params.ExtensionSessionConfiguration", "android.hardware.camera2.CameraManager#isCameraDeviceSetupSupported" ]
  }, {
    "name" : "public void setCameraAudioRestriction(@CAMERA_AUDIO_RESTRICTION int mode) throws CameraAccessException",
    "returnType" : "void",
    "comment" : "\n     * Set audio restriction mode when this CameraDevice is being used.\n     *\n     * <p>Some camera hardware (e.g. devices with optical image stabilization support)\n     * are sensitive to device vibration and video recordings can be ruined by unexpected sounds.\n     * Applications can use this method to suppress vibration or sounds coming from\n     * ringtones, alarms or notifications.\n     * Other vibration or sounds (e.g. media playback or accessibility) will not be muted.</p>\n     *\n     * <p>The mute mode is a system-wide setting. When multiple CameraDevice objects\n     * are setting different modes, the system will pick a the mode that's union of\n     * all modes set by CameraDevice. Applications can also use\n     * {@link #getCameraAudioRestriction} to query current system-wide camera\n     * mute mode in effect.</p>\n     *\n     * <p>The mute settings from this CameraDevice will be automatically removed when the\n     * CameraDevice is closed or the application is disconnected from the camera.</p>\n     *\n     * @param mode An enumeration selecting the audio restriction mode for this camera device.\n     *\n     * @throws IllegalArgumentException if the mode is not supported\n     *\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #getCameraAudioRestriction\n     ",
    "links" : [ "#getCameraAudioRestriction" ]
  }, {
    "name" : "public int getCameraAudioRestriction() throws CameraAccessException",
    "returnType" : "int",
    "comment" : "\n     * Get currently applied global camera audio restriction mode.\n     *\n     * <p>Application can use this method to retrieve the system-wide camera audio restriction\n     * settings described in {@link #setCameraAudioRestriction}.</p>\n     *\n     * @return The current system-wide mute mode setting in effect\n     *\n     * @throws CameraAccessException if the camera device is no longer connected or has\n     *                               encountered a fatal error\n     * @throws IllegalStateException if the camera device has been closed\n     *\n     * @see #setCameraAudioRestriction\n     ",
    "links" : [ "#setCameraAudioRestriction" ]
  } ],
  "methodNames" : [ "public abstract String getId()", "public abstract void createCaptureSession(@NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public abstract void createCaptureSessionByOutputConfigurations(List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public abstract void createReprocessableCaptureSession(@NonNull InputConfiguration inputConfig, @NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public abstract void createReprocessableCaptureSessionByConfigurations(@NonNull InputConfiguration inputConfig, @NonNull List<OutputConfiguration> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public abstract void createConstrainedHighSpeedCaptureSession(@NonNull List<Surface> outputs, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public void createExtensionSession(@NonNull ExtensionSessionConfiguration extensionConfiguration) throws CameraAccessException", "public abstract void createCustomCaptureSession(InputConfiguration inputConfig, @NonNull List<OutputConfiguration> outputs, @SessionOperatingMode int operatingMode, @NonNull CameraCaptureSession.StateCallback callback, @Nullable Handler handler) throws CameraAccessException", "public void createCaptureSession(SessionConfiguration config) throws CameraAccessException", "public abstract CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType) throws CameraAccessException", "public CaptureRequest.Builder createCaptureRequest(@RequestTemplate int templateType, Set<String> physicalCameraIdSet) throws CameraAccessException", "public abstract CaptureRequest.Builder createReprocessCaptureRequest(@NonNull TotalCaptureResult inputResult) throws CameraAccessException", "public abstract void close()", "public boolean isSessionConfigurationSupported(@NonNull SessionConfiguration sessionConfig) throws CameraAccessException", "public void setCameraAudioRestriction(@CAMERA_AUDIO_RESTRICTION int mode) throws CameraAccessException", "public int getCameraAudioRestriction() throws CameraAccessException" ],
  "variableNames" : [ "TEMPLATE_PREVIEW", "TEMPLATE_STILL_CAPTURE", "TEMPLATE_RECORD", "TEMPLATE_VIDEO_SNAPSHOT", "TEMPLATE_ZERO_SHUTTER_LAG", "TEMPLATE_MANUAL", "AUDIO_RESTRICTION_NONE", "AUDIO_RESTRICTION_VIBRATION", "AUDIO_RESTRICTION_VIBRATION_SOUND", "SESSION_OPERATION_MODE_NORMAL", "SESSION_OPERATION_MODE_CONSTRAINED_HIGH_SPEED", "SESSION_OPERATION_MODE_VENDOR_START" ]
}