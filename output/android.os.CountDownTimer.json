{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/os/CountDownTimer.java",
  "packageName" : "android.os",
  "className" : "CountDownTimer",
  "comment" : "\n * Schedule a countdown until a time in the future, with\n * regular notifications on intervals along the way.\n *\n * Example of showing a 30 second countdown in a text field:\n *\n * <div>\n * <div class=\"ds-selector-tabs\"><section><h3 id=\"kotlin\">Kotlin</h3>\n * <pre class=\"prettyprint lang-kotlin\">\n * object : CountDownTimer(30000, 1000) {\n *\n *     override fun onTick(millisUntilFinished: Long) {\n *         mTextField.setText(\"seconds remaining: \" + millisUntilFinished / 1000)\n *     }\n *\n *     override fun onFinish() {\n *         mTextField.setText(\"done!\")\n *     }\n * }.start()\n * </pre>\n * </section><section><h3 id=\"java\">Java</h3>\n * <pre class=\"prettyprint lang-java\">\n * new CountDownTimer(30000, 1000) {\n *\n *     public void onTick(long millisUntilFinished) {\n *         mTextField.setText(\"seconds remaining: \" + millisUntilFinished / 1000);\n *     }\n *\n *     public void onFinish() {\n *         mTextField.setText(\"done!\");\n *     }\n * }.start();\n * </pre></section></div></div>\n *\n * The calls to {@link #onTick(long)} are synchronized to this object so that\n * one call to {@link #onTick(long)} won't ever occur before the previous\n * callback is complete.  This is only relevant when the implementation of\n * {@link #onTick(long)} takes an amount of time to execute that is significant\n * compared to the countdown interval.\n ",
  "links" : [ "#onTick(long)" ],
  "variables" : [ {
    "name" : "mMillisInFuture",
    "type" : "long",
    "comment" : "\n     * Millis since epoch when alarm should stop.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCountdownInterval",
    "type" : "long",
    "comment" : "\n     * The interval in millis that the user receives callbacks\n     ",
    "links" : [ ]
  }, {
    "name" : "mStopTimeInFuture",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCancelled",
    "type" : "boolean",
    "comment" : "\n    * boolean representing if the timer was cancelled\n    ",
    "links" : [ ]
  }, {
    "name" : "MSG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : " handles counting down",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final synchronized void cancel()",
    "returnType" : "void",
    "comment" : "\n     * Cancel the countdown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final synchronized CountDownTimer start()",
    "returnType" : "CountDownTimer",
    "comment" : "\n     * Start the countdown.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onTick(long millisUntilFinished)",
    "returnType" : "void",
    "comment" : "\n     * Callback fired on regular interval.\n     * @param millisUntilFinished The amount of time until finished.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void onFinish()",
    "returnType" : "void",
    "comment" : "\n     * Callback fired when the time is up.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final synchronized void cancel()", "public final synchronized CountDownTimer start()", "public abstract void onTick(long millisUntilFinished)", "public abstract void onFinish()" ],
  "variableNames" : [ "mMillisInFuture", "mCountdownInterval", "mStopTimeInFuture", "mCancelled", "MSG", "mHandler" ]
}