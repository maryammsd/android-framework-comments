{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/service/carrier/CarrierMessagingService.java",
  "packageName" : "android.service.carrier",
  "className" : "CarrierMessagingService",
  "comment" : "\n * A service that receives calls from the system when new SMS and MMS are\n * sent or received.\n * <p>To extend this class, you must declare the service in your manifest file with\n * the {@link android.Manifest.permission#BIND_CARRIER_SERVICES} permission\n * and include an intent filter with the {@link #SERVICE_INTERFACE} action. For example:</p>\n * <pre>\n * &lt;service android:name=\".MyMessagingService\"\n *          android:label=\"&#64;string/service_name\"\n *          android:permission=\"android.permission.BIND_CARRIER_SERVICES\">\n *     &lt;intent-filter>\n *         &lt;action android:name=\"android.service.carrier.CarrierMessagingService\" />\n *     &lt;/intent-filter>\n * &lt;/service></pre>\n ",
  "links" : [ "android.Manifest.permission#BIND_CARRIER_SERVICES", "#SERVICE_INTERFACE" ],
  "variables" : [ {
    "name" : "SERVICE_INTERFACE",
    "type" : "String",
    "comment" : "\n     * The {@link android.content.Intent} that must be declared as handled by the service.\n     ",
    "links" : [ "android.content.Intent" ]
  }, {
    "name" : "RECEIVE_OPTIONS_DEFAULT",
    "type" : "int",
    "comment" : "\n     * The default bitmask value passed to the callback of {@link #onReceiveTextSms} with all\n     * {@code RECEIVE_OPTIONS_x} flags cleared to indicate that the message should be kept and a\n     * new message notification should be shown.\n     *\n     * @see #RECEIVE_OPTIONS_DROP\n     * @see #RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE\n     ",
    "links" : [ "#onReceiveTextSms" ]
  }, {
    "name" : "RECEIVE_OPTIONS_DROP",
    "type" : "int",
    "comment" : "\n     * Used to set the flag in the bitmask passed to the callback of {@link #onReceiveTextSms} to\n     * indicate that the inbound SMS should be dropped.\n     ",
    "links" : [ "#onReceiveTextSms" ]
  }, {
    "name" : "RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE",
    "type" : "int",
    "comment" : "\n     * Used to set the flag in the bitmask passed to the callback of {@link #onReceiveTextSms} to\n     * indicate that a new message notification should not be shown to the user when the\n     * credential-encrypted storage of the device is not available before the user unlocks the\n     * phone. It is only applicable to devices that support file-based encryption.\n     ",
    "links" : [ "#onReceiveTextSms" ]
  }, {
    "name" : "SEND_STATUS_OK",
    "type" : "int",
    "comment" : "\n     * Indicates that an SMS or MMS message was successfully sent.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_STATUS_RETRY_ON_CARRIER_NETWORK",
    "type" : "int",
    "comment" : "\n     * SMS/MMS sending failed. We should retry via the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_STATUS_ERROR",
    "type" : "int",
    "comment" : "\n     * SMS/MMS sending failed. We should not retry via the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOWNLOAD_STATUS_OK",
    "type" : "int",
    "comment" : "\n     * Successfully downloaded an MMS message.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK",
    "type" : "int",
    "comment" : "\n     * MMS downloading failed. We should retry via the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "DOWNLOAD_STATUS_ERROR",
    "type" : "int",
    "comment" : "\n     * MMS downloading failed. We should not retry via the carrier network.\n     ",
    "links" : [ ]
  }, {
    "name" : "SEND_FLAG_REQUEST_DELIVERY_STATUS",
    "type" : "int",
    "comment" : "\n     * Flag to request SMS delivery status report.\n     ",
    "links" : [ ]
  }, {
    "name" : "mWrapper",
    "type" : "ICarrierMessagingWrapper",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void onFilterSms(@NonNull MessagePdu pdu, @NonNull String format, int destPort, int subId, @NonNull ResultCallback<Boolean> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to filter inbound SMS messages.\n     *\n     * @param pdu the PDUs of the message\n     * @param format the format of the PDUs, typically \"3gpp\" or \"3gpp2\"\n     * @param destPort the destination port of a binary SMS, this will be -1 for text SMS\n     * @param subId SMS subscription ID of the SIM\n     * @param callback result callback. Call with {@code true} to keep an inbound SMS message and\n     *        deliver to SMS apps, and {@code false} to drop the message.\n     * @deprecated Use {@link #onReceiveTextSms} instead.\n     ",
    "links" : [ "#onReceiveTextSms" ]
  }, {
    "name" : "public void onReceiveTextSms(@NonNull MessagePdu pdu, @NonNull String format, int destPort, int subId, @NonNull final ResultCallback<Integer> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to filter inbound SMS messages.\n     *\n     * <p>This method will be called once for every incoming text SMS. You can invoke the callback\n     * with a bitmask to tell the platform how to handle the SMS. For a SMS received on a\n     * file-based encryption capable device while the credential-encrypted storage is not available,\n     * this method will be called for the second time when the credential-encrypted storage becomes\n     * available after the user unlocks the phone, if the bit {@link #RECEIVE_OPTIONS_DROP} is not\n     * set when invoking the callback.\n     *\n     * @param pdu the PDUs of the message\n     * @param format the format of the PDUs, typically \"3gpp\" or \"3gpp2\"\n     * @param destPort the destination port of a binary SMS, this will be -1 for text SMS\n     * @param subId SMS subscription ID of the SIM\n     * @param callback result callback. Call with a bitmask integer to indicate how the incoming\n     *        text SMS should be handled by the platform. Use {@link #RECEIVE_OPTIONS_DROP} and\n     *        {@link #RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE}\n     *        to set the flags in the bitmask.\n     ",
    "links" : [ "#RECEIVE_OPTIONS_DROP", "#RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE" ]
  }, {
    "name" : "public void onSendTextSms(@NonNull String text, int subId, @NonNull String destAddress, @NonNull ResultCallback<SendSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept text SMSs sent from the device.\n     * @deprecated Override {@link #onSendTextSms} below instead.\n     *\n     * @param text the text to send\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param callback result callback. Call with a {@link SendSmsResult}.\n     ",
    "links" : [ "#onSendTextSms", "SendSmsResult" ]
  }, {
    "name" : "public void onSendTextSms(@NonNull String text, int subId, @NonNull String destAddress, int sendSmsFlag, @NonNull ResultCallback<SendSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept text SMSs sent from the device.\n     *\n     * @param text the text to send\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link #SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param callback result callback. Call with a {@link SendSmsResult}.\n     ",
    "links" : [ "#SEND_FLAG_REQUEST_DELIVERY_STATUS", "SendSmsResult" ]
  }, {
    "name" : "public void onSendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, @NonNull ResultCallback<SendSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept binary SMSs sent from the device.\n     * @deprecated Override {@link #onSendDataSms} below instead.\n     *\n     * @param data the binary content\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param destPort the destination port\n     * @param callback result callback. Call with a {@link SendSmsResult}.\n     ",
    "links" : [ "#onSendDataSms", "SendSmsResult" ]
  }, {
    "name" : "public void onSendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, int sendSmsFlag, @NonNull ResultCallback<SendSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept binary SMSs sent from the device.\n     *\n     * @param data the binary content\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param destPort the destination port\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link #SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param callback result callback. Call with a {@link SendSmsResult}.\n     ",
    "links" : [ "#SEND_FLAG_REQUEST_DELIVERY_STATUS", "SendSmsResult" ]
  }, {
    "name" : "public void onSendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, @NonNull ResultCallback<SendMultipartSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept long SMSs sent from the device.\n     * @deprecated Override {@link #onSendMultipartTextSms} below instead.\n     *\n     * @param parts a {@link List} of the message parts\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param callback result callback. Call with a {@link SendMultipartSmsResult}.\n     ",
    "links" : [ "java.util.List", "#onSendMultipartTextSms", "SendMultipartSmsResult" ]
  }, {
    "name" : "public void onSendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, int sendSmsFlag, @NonNull ResultCallback<SendMultipartSmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept long SMSs sent from the device.\n     *\n     * @param parts a {@link List} of the message parts\n     * @param subId SMS subscription ID of the SIM\n     * @param destAddress phone number of the recipient of the message\n     * @param sendSmsFlag Flag for sending SMS. Acceptable values are 0 and\n     *        {@link #SEND_FLAG_REQUEST_DELIVERY_STATUS}.\n     * @param callback result callback. Call with a {@link SendMultipartSmsResult}.\n     ",
    "links" : [ "java.util.List", "#SEND_FLAG_REQUEST_DELIVERY_STATUS", "SendMultipartSmsResult" ]
  }, {
    "name" : "public void onSendMms(@NonNull Uri pduUri, int subId, @Nullable Uri location, @NonNull ResultCallback<SendMmsResult> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to intercept MMSs sent from the device.\n     *\n     * @param pduUri the content provider URI of the PDU to send\n     * @param subId SMS subscription ID of the SIM\n     * @param location the optional URI to send this MMS PDU. If this is {code null},\n     *        the PDU should be sent to the default MMSC URL.\n     * @param callback result callback. Call with a {@link SendMmsResult}.\n     ",
    "links" : [ "SendMmsResult" ]
  }, {
    "name" : "public void onDownloadMms(@NonNull Uri contentUri, int subId, @NonNull Uri location, @NonNull ResultCallback<Integer> callback)",
    "returnType" : "void",
    "comment" : "\n     * Override this method to download MMSs received.\n     *\n     * @param contentUri the content provider URI of the PDU to be downloaded.\n     * @param subId SMS subscription ID of the SIM\n     * @param location the URI of the message to be downloaded.\n     * @param callback result callback. Call with a status code which is one of\n     *        {@link #DOWNLOAD_STATUS_OK},\n     *        {@link #DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK}, or {@link #DOWNLOAD_STATUS_ERROR}.\n     ",
    "links" : [ "#DOWNLOAD_STATUS_ERROR", "#DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK", "#DOWNLOAD_STATUS_OK" ]
  }, {
    "name" : "public IBinder onBind(@NonNull Intent intent)",
    "returnType" : "IBinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void onFilterSms(@NonNull MessagePdu pdu, @NonNull String format, int destPort, int subId, @NonNull ResultCallback<Boolean> callback)", "public void onReceiveTextSms(@NonNull MessagePdu pdu, @NonNull String format, int destPort, int subId, @NonNull final ResultCallback<Integer> callback)", "public void onSendTextSms(@NonNull String text, int subId, @NonNull String destAddress, @NonNull ResultCallback<SendSmsResult> callback)", "public void onSendTextSms(@NonNull String text, int subId, @NonNull String destAddress, int sendSmsFlag, @NonNull ResultCallback<SendSmsResult> callback)", "public void onSendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, @NonNull ResultCallback<SendSmsResult> callback)", "public void onSendDataSms(@NonNull byte[] data, int subId, @NonNull String destAddress, int destPort, int sendSmsFlag, @NonNull ResultCallback<SendSmsResult> callback)", "public void onSendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, @NonNull ResultCallback<SendMultipartSmsResult> callback)", "public void onSendMultipartTextSms(@NonNull List<String> parts, int subId, @NonNull String destAddress, int sendSmsFlag, @NonNull ResultCallback<SendMultipartSmsResult> callback)", "public void onSendMms(@NonNull Uri pduUri, int subId, @Nullable Uri location, @NonNull ResultCallback<SendMmsResult> callback)", "public void onDownloadMms(@NonNull Uri contentUri, int subId, @NonNull Uri location, @NonNull ResultCallback<Integer> callback)", "public IBinder onBind(@NonNull Intent intent)" ],
  "variableNames" : [ "SERVICE_INTERFACE", "RECEIVE_OPTIONS_DEFAULT", "RECEIVE_OPTIONS_DROP", "RECEIVE_OPTIONS_SKIP_NOTIFY_WHEN_CREDENTIAL_PROTECTED_STORAGE_UNAVAILABLE", "SEND_STATUS_OK", "SEND_STATUS_RETRY_ON_CARRIER_NETWORK", "SEND_STATUS_ERROR", "DOWNLOAD_STATUS_OK", "DOWNLOAD_STATUS_RETRY_ON_CARRIER_NETWORK", "DOWNLOAD_STATUS_ERROR", "SEND_FLAG_REQUEST_DELIVERY_STATUS", "mWrapper" ]
}