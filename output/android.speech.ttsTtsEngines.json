{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/speech/tts/TtsEngines.java",
  "packageName" : "android.speech.tts",
  "className" : "TtsEngines",
  "comment" : "\n * Support class for querying the list of available engines\n * on the device and deciding which one to use etc.\n *\n * Comments in this class the use the shorthand \"system engines\" for engines that\n * are a part of the system image.\n *\n * This class is thread-safe/\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCALE_DELIMITER_OLD",
    "type" : "String",
    "comment" : " Locale delimiter used by the old-style 3 char locale string format (like \"eng-usa\") ",
    "links" : [ ]
  }, {
    "name" : "LOCALE_DELIMITER_NEW",
    "type" : "String",
    "comment" : " Locale delimiter used by the new-style locale string format (Locale.toString() results,\n     * like \"en_US\") ",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNormalizeLanguage",
    "type" : "Map<String, String>",
    "comment" : " Mapping of various language strings to the normalized Locale form ",
    "links" : [ ]
  }, {
    "name" : "sNormalizeCountry",
    "type" : "Map<String, String>",
    "comment" : " Mapping of various country strings to the normalized Locale form ",
    "links" : [ ]
  }, {
    "name" : "XML_TAG_NAME",
    "type" : "String",
    "comment" : "\n     * The name of the XML tag that text to speech engines must use to\n     * declare their meta data.\n     *\n     * {@link com.android.internal.R.styleable#TextToSpeechEngine}\n     ",
    "links" : [ "com.android.internal.R.styleable#TextToSpeechEngine" ]
  } ],
  "methods" : [ {
    "name" : "public String getDefaultEngine()",
    "returnType" : "String",
    "comment" : "\n     * @return the default TTS engine. If the user has set a default, and the engine\n     *         is available on the device, the default is returned. Otherwise,\n     *         the highest ranked engine is returned as per {@link EngineInfoComparator}.\n     ",
    "links" : [ "EngineInfoComparator" ]
  }, {
    "name" : "public String getHighestRankedEngineName()",
    "returnType" : "String",
    "comment" : "\n     * @return the package name of the highest ranked system engine, {@code null}\n     *         if no TTS engines were present in the system image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public EngineInfo getEngineInfo(String packageName)",
    "returnType" : "EngineInfo",
    "comment" : "\n     * Returns the engine info for a given engine name. Note that engines are\n     * identified by their package name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<EngineInfo> getEngines()",
    "returnType" : "List<EngineInfo>",
    "comment" : "\n     * Gets a list of all installed TTS engines.\n     *\n     * @return A list of engine info objects. The list can be empty, but never {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isSystemEngine(ServiceInfo info)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEngineInstalled(String engine)",
    "returnType" : "boolean",
    "comment" : "\n     * @return true if a given engine is installed on the system.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Intent getSettingsIntent(String engine)",
    "returnType" : "Intent",
    "comment" : "\n     * @return an intent that can launch the settings activity for a given tts engine.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String settingsActivityFromServiceInfo(ServiceInfo si, PackageManager pm)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private EngineInfo getEngineInfo(ResolveInfo resolve, PackageManager pm)",
    "returnType" : "EngineInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Locale getLocalePrefForEngine(String engineName)",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the default locale for a given TTS engine. Attempts to read the\n     * value from {@link Settings.Secure#TTS_DEFAULT_LOCALE}, failing which the\n     * default phone locale is returned.\n     *\n     * @param engineName the engine to return the locale for.\n     * @return the locale preference for this engine. Will be non null.\n     ",
    "links" : [ "Settings.Secure#TTS_DEFAULT_LOCALE" ]
  }, {
    "name" : "public Locale getLocalePrefForEngine(String engineName, String prefValue)",
    "returnType" : "Locale",
    "comment" : "\n     * Returns the default locale for a given TTS engine from given settings string. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isLocaleSetToDefaultForEngine(String engineName)",
    "returnType" : "boolean",
    "comment" : "\n     * True if a given TTS engine uses the default phone locale as a default locale. Attempts to\n     * read the value from {@link Settings.Secure#TTS_DEFAULT_LOCALE}. If\n     * its  value is empty, this methods returns true.\n     *\n     * @param engineName the engine to return the locale for.\n     ",
    "links" : [ "Settings.Secure#TTS_DEFAULT_LOCALE" ]
  }, {
    "name" : "public Locale parseLocaleString(String localeString)",
    "returnType" : "Locale",
    "comment" : "\n     * Parses a locale encoded as a string, and tries its best to return a valid {@link Locale}\n     * object, even if the input string is encoded using the old-style 3 character format e.g.\n     * \"deu-deu\". At the end, we test if the resulting locale can return ISO3 language and\n     * country codes ({@link Locale#getISO3Language()} and {@link Locale#getISO3Country()}),\n     * if it fails to do so, we return null.\n     ",
    "links" : [ "Locale", "Locale#getISO3Language", "Locale#getISO3Country" ]
  }, {
    "name" : "public static Locale normalizeTTSLocale(Locale ttsLocale)",
    "returnType" : "Locale",
    "comment" : "\n     * This method tries its best to return a valid {@link Locale} object from the TTS-specific\n     * Locale input (returned by {@link TextToSpeech#getLanguage}\n     * and {@link TextToSpeech#getDefaultLanguage}). A TTS Locale language field contains\n     * a three-letter ISO 639-2/T code (where a proper Locale would use a two-letter ISO 639-1\n     * code), and the country field contains a three-letter ISO 3166 country code (where a proper\n     * Locale would use a two-letter ISO 3166-1 code).\n     *\n     * This method tries to convert three-letter language and country codes into their two-letter\n     * equivalents. If it fails to do so, it keeps the value from the TTS locale.\n     ",
    "links" : [ "Locale", "TextToSpeech#getLanguage", "TextToSpeech#getDefaultLanguage" ]
  }, {
    "name" : "public static String[] toOldLocaleStringFormat(Locale locale)",
    "returnType" : "String[]",
    "comment" : "\n     * Return the old-style string form of the locale. It consists of 3 letter codes:\n     * <ul>\n     *   <li>\"ISO 639-2/T language code\" if the locale has no country entry</li>\n     *   <li> \"ISO 639-2/T language code{@link #LOCALE_DELIMITER}ISO 3166 country code\"\n     *     if the locale has no variant entry</li>\n     *   <li> \"ISO 639-2/T language code{@link #LOCALE_DELIMITER}ISO 3166 country\n     *     code{@link #LOCALE_DELIMITER}variant\" if the locale has a variant entry</li>\n     * </ul>\n     * If we fail to generate those codes using {@link Locale#getISO3Country()} and\n     * {@link Locale#getISO3Language()}, then we return new String[]{\"eng\",\"USA\",\"\"};\n     ",
    "links" : [ "#LOCALE_DELIMITER", "#LOCALE_DELIMITER", "#LOCALE_DELIMITER", "Locale#getISO3Country", "Locale#getISO3Language" ]
  }, {
    "name" : "private static String parseEnginePrefFromList(String prefValue, String engineName)",
    "returnType" : "String",
    "comment" : "\n     * Parses a comma separated list of engine locale preferences. The list is of the\n     * form {@code \"engine_name_1:locale_1,engine_name_2:locale2\"} and so on and\n     * so forth. Returns null if the list is empty, malformed or if there is no engine\n     * specific preference in the list.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized void updateLocalePrefForEngine(@NonNull String engineName, Locale newLocale)",
    "returnType" : "void",
    "comment" : "\n     * Serialize the locale to a string and store it as a default locale for the given engine. If\n     * the passed locale is null, an empty string will be serialized; that empty string, when\n     * read back, will evaluate to {@link Locale#getDefault()}.\n     ",
    "links" : [ "Locale#getDefault" ]
  }, {
    "name" : "private String updateValueInCommaSeparatedList(String list, String key, String newValue)",
    "returnType" : "String",
    "comment" : "\n     * Updates the value for a given key in a comma separated list of key value pairs,\n     * each of which are delimited by a colon. If no value exists for the given key,\n     * the kay value pair are appended to the end of the list.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DBG", "LOCALE_DELIMITER_OLD", "LOCALE_DELIMITER_NEW", "mContext", "sNormalizeLanguage", "sNormalizeCountry", "XML_TAG_NAME" ],
  "methodNames" : [ "public String getDefaultEngine()", "public String getHighestRankedEngineName()", "public EngineInfo getEngineInfo(String packageName)", "public List<EngineInfo> getEngines()", "private boolean isSystemEngine(ServiceInfo info)", "public boolean isEngineInstalled(String engine)", "public Intent getSettingsIntent(String engine)", "private String settingsActivityFromServiceInfo(ServiceInfo si, PackageManager pm)", "private EngineInfo getEngineInfo(ResolveInfo resolve, PackageManager pm)", "public Locale getLocalePrefForEngine(String engineName)", "public Locale getLocalePrefForEngine(String engineName, String prefValue)", "public boolean isLocaleSetToDefaultForEngine(String engineName)", "public Locale parseLocaleString(String localeString)", "public static Locale normalizeTTSLocale(Locale ttsLocale)", "public static String[] toOldLocaleStringFormat(Locale locale)", "private static String parseEnginePrefFromList(String prefValue, String engineName)", "public synchronized void updateLocalePrefForEngine(@NonNull String engineName, Locale newLocale)", "private String updateValueInCommaSeparatedList(String list, String key, String newValue)" ]
}