{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DateTimePatternGenerator.java",
  "packageName" : "android.icu.text",
  "className" : "DateTimePatternGenerator",
  "comment" : "\n * This class provides flexible generation of date format patterns, like\n * \"yy-MM-dd\". The user can build up the generator by adding successive\n * patterns. Once that is done, a query can be made using a \"skeleton\", which is\n * a pattern which just includes the desired fields and lengths. The generator\n * will return the \"best fit\" pattern corresponding to that skeleton.\n * <p>\n * The main method people will use is getBestPattern(String skeleton), since\n * normally this class is pre-built with data from a particular locale. However,\n * generators can be built directly from other data as well.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LAST_RESORT_ALLOWED_HOUR_FORMAT",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCALE_TO_ALLOWED_HOUR",
    "type" : "Map<String, String[]>",
    "comment" : " Get the data for dayperiod C.",
    "links" : [ ]
  }, {
    "name" : "ERA",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "YEAR",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "QUARTER",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_OF_YEAR",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEK_OF_MONTH",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "WEEKDAY",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_OF_YEAR",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY_OF_WEEK_IN_MONTH",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "DAYPERIOD",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "MINUTE",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "SECOND",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "FRACTIONAL_SECOND",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "ZONE",
    "type" : "int",
    "comment" : "\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_LIMIT",
    "type" : "int",
    "comment" : "\n     * One more than the highest normal field number.\n     * @deprecated ICU 58 The numeric value may change over time, see ICU ticket #12420.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "APPENDITEM_WIDTH",
    "type" : "DisplayWidth",
    "comment" : "\n     * The field name width for use in appendItems\n     ",
    "links" : [ ]
  }, {
    "name" : "APPENDITEM_WIDTH_INT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CLDR_FIELD_WIDTH",
    "type" : "DisplayWidth[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_NO_OPTIONS",
    "type" : "int",
    "comment" : "\n     * Default option mask used for {@link #getBestPattern(String, int)}\n     * and {@link #replaceFieldTypes(String, String, int)}.\n     * @see #getBestPattern(String, int)\n     * @see #replaceFieldTypes(String, String, int)\n     ",
    "links" : [ "#getBestPattern(String", "#replaceFieldTypes(String" ]
  }, {
    "name" : "MATCH_HOUR_FIELD_LENGTH",
    "type" : "int",
    "comment" : "\n     * Option mask for forcing the width of hour field.\n     * @see #getBestPattern(String, int)\n     * @see #replaceFieldTypes(String, String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_MINUTE_FIELD_LENGTH",
    "type" : "int",
    "comment" : "\n     * Option mask for forcing  the width of minute field.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_SECOND_FIELD_LENGTH",
    "type" : "int",
    "comment" : "\n     * Option mask for forcing  the width of second field.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "MATCH_ALL_FIELDS_LENGTH",
    "type" : "int",
    "comment" : "\n     * Option mask for forcing the width of all date and time fields.\n     * @see #getBestPattern(String, int)\n     * @see #replaceFieldTypes(String, String, int)\n     ",
    "links" : [ ]
  }, {
    "name" : "skeleton2pattern",
    "type" : "TreeMap<DateTimeMatcher, PatternWithSkeletonFlag>",
    "comment" : " items are in priority order",
    "links" : [ ]
  }, {
    "name" : "basePattern_pattern",
    "type" : "TreeMap<String, PatternWithSkeletonFlag>",
    "comment" : " items are in priority order",
    "links" : [ ]
  }, {
    "name" : "decimal",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dateTimeFormats",
    "type" : "String[]",
    "comment" : " of DateTimePatterngenerator is used for formatting.",
    "links" : [ ]
  }, {
    "name" : "appendItemFormats",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fieldDisplayNames",
    "type" : "String[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "defaultHourFormatChar",
    "type" : "char",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "frozen",
    "type" : "boolean",
    "comment" : "private boolean isComplete = false;",
    "links" : [ ]
  }, {
    "name" : "current",
    "type" : "DateTimeMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fp",
    "type" : "FormatParser",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "_distanceInfo",
    "type" : "DistanceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "allowedHourFormats",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FRACTIONAL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SECOND_AND_FRACTIONAL_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DTPNG_CACHE",
    "type" : "ICUCache<String, DateTimePatternGenerator>",
    "comment" : " Cache for DateTimePatternGenerator",
    "links" : [ ]
  }, {
    "name" : "CLDR_FIELD_APPEND",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CLDR_FIELD_NAME",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FIELD_NAME",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_ITEMS",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_SET",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "cldrAvailableFormatKeys",
    "type" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIME_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DELTA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NUMERIC",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NONE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NARROW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORTER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_FIELD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MISSING_FIELD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "types",
    "type" : "int[][]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static DateTimePatternGenerator getEmptyInstance()",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Create empty generator, to be constructed with addPattern(...) etc.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateTimePatternGenerator getInstance()",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Construct a flexible generator according to data for the default <code>FORMAT</code> locale.\n     * @see Category#FORMAT\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateTimePatternGenerator getInstance(ULocale uLocale)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Construct a flexible generator according to data for a given locale.\n     * @param uLocale The locale to pass.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateTimePatternGenerator getInstance(Locale locale)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Construct a flexible generator according to data for a given locale.\n     * @param locale The {@link java.util.Locale} to pass.\n     ",
    "links" : [ "java.util.Locale" ]
  }, {
    "name" : "public static DateTimePatternGenerator getFrozenInstance(ULocale uLocale)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Construct a frozen instance of DateTimePatternGenerator for a\n     * given locale.  This method returns a cached frozen instance of\n     * DateTimePatternGenerator, so less expensive than the regular\n     * factory method.\n     * @param uLocale The locale to pass.\n     * @return A frozen DateTimePatternGenerator.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static DateTimePatternGenerator getInstanceNoStdPat(ULocale uLocale)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Construct a non-frozen instance of DateTimePatternGenerator for a\n     * given locale that skips using the standard date and time patterns.\n     * Because this is different than the normal instance for the locale,\n     * it does not set or use the cache.\n     * @param uLocale The locale to pass.\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initData(ULocale uLocale, boolean skipStdPatterns)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addICUPatterns(PatternInfo returnInfo, ULocale uLocale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getCalendarTypeToUse(ULocale uLocale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void consumeShortTimePattern(String shortTimePattern, PatternInfo returnInfo)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void fillInMissing()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void addCLDRData(PatternInfo returnInfo, ULocale uLocale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDateTimeFromCalendar(ULocale uLocale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setDecimalSymbols(ULocale uLocale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String[] getAllowedHourFormatsLangCountry(String language, String country)",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getAllowedHourFormats(ULocale uLocale)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public char getDefaultHourFormatChar()",
    "returnType" : "char",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDefaultHourFormatChar(char defaultHourFormatChar)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void hackTimes(PatternInfo returnInfo, String shortTimePattern)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getFilteredPattern(FormatParser fp, BitSet nuke)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int getAppendFormatNumber(UResource.Key key)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int getAppendFormatNumber(String string)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int getCLDRFieldAndWidthNumber(UResource.Key key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getBestPattern(String skeleton)",
    "returnType" : "String",
    "comment" : "\n     * Return the best pattern matching the input skeleton. It is guaranteed to\n     * have all of the fields in the skeleton.\n     * <p>Example code:{@sample external/icu/android_icu4j/src/samples/java/android/icu/samples/text/datetimepatterngenerator/DateTimePatternGeneratorSample.java getBestPatternExample}\n     * @param skeleton The skeleton is a pattern containing only the variable fields.\n     *            For example, \"MMMdd\" and \"mmhh\" are skeletons.\n     * @return Best pattern matching the input skeleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBestPattern(String skeleton, int options)",
    "returnType" : "String",
    "comment" : "\n     * Return the best pattern matching the input skeleton. It is guaranteed to\n     * have all of the fields in the skeleton.\n     *\n     * @param skeleton The skeleton is a pattern containing only the variable fields.\n     *            For example, \"MMMdd\" and \"mmhh\" are skeletons.\n     * @param options MATCH_xxx options for forcing the length of specified fields in\n     *            the returned pattern to match those in the skeleton (when this would\n     *            not happen otherwise). For default behavior, use MATCH_NO_OPTIONS.\n     * @return Best pattern matching the input skeleton (and options).\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBestPattern(String skeleton, int options, boolean allowDuplicateFields)",
    "returnType" : "String",
    "comment" : "\n     * Return the best pattern matching the input skeleton. It is guaranteed to\n     * have all of the fields in the skeleton.\n     *\n     * @param skeleton The skeleton is a pattern containing only the variable fields.\n     *            For example, \"MMMdd\" and \"mmhh\" are skeletons.\n     * @param options MATCH_xxx options for forcing the length of specified fields in\n     *            the returned pattern to match those in the skeleton (when this would\n     *            not happen otherwise). For default behavior, use MATCH_NO_OPTIONS.\n     * @param allowDuplicateFields allows duplicated field in the skeleton\n     * @return Best pattern matching the input skeleton (and options).\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getBestPattern(String skeleton, DateTimeMatcher skipMatcher, int options)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getBestPattern(String skeleton, DateTimeMatcher skipMatcher, int options, boolean allowDuplicateFields)",
    "returnType" : "String",
    "comment" : " private String getBestPattern(String skeleton, DateTimeMatcher skipMatcher, int options) {",
    "links" : [ ]
  }, {
    "name" : "private String mapSkeletonMetacharacters(String skeleton, EnumSet<DTPGflags> flags)",
    "returnType" : "String",
    "comment" : "\n     * Map a skeleton that may have metacharacters jJC to one without, by replacing\n     * the metacharacters with locale-appropriate fields of of h/H/k/K and of a/b/B\n     * (depends on defaultHourFormatChar and allowedHourFormats being set, which in\n     * turn depends on initData having been run). This method also updates the flags\n     * as necessary. Returns the updated skeleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateTimePatternGenerator addPattern(String pattern, boolean override, PatternInfo returnInfo)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * Adds a pattern to the generator. If the pattern has the same skeleton as\n     * an existing pattern, and the override parameter is set, then the previous\n     * value is overridden. Otherwise, the previous value is retained. In either\n     * case, the conflicting information is returned in PatternInfo.\n     * <p>\n     * Note that single-field patterns (like \"MMM\") are automatically added, and\n     * don't need to be added explicitly!\n     * * <p>Example code:{@sample external/icu/android_icu4j/src/samples/java/android/icu/samples/text/datetimepatterngenerator/DateTimePatternGeneratorSample.java addPatternExample}\n     * @param pattern Pattern to add.\n     * @param override When existing values are to be overridden use true, otherwise\n     *            use false.\n     * @param returnInfo Returned information.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateTimePatternGenerator addPatternWithSkeleton(String pattern, String skeletonToUse, boolean override, PatternInfo returnInfo)",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * addPatternWithSkeleton:\n     * If skeletonToUse is specified, then an availableFormats entry is being added. In this case:\n     * 1. We pass that skeleton to DateTimeMatcher().set instead of having it derive a skeleton from the pattern.\n     * 2. If the new entry's skeleton or basePattern does match an existing entry but that entry also had a skeleton specified\n     * (i.e. it was also from availableFormats), then the new entry does not override it regardless of the value of the override\n     * parameter. This prevents later availableFormats entries from a parent locale overriding earlier ones from the actual\n     * specified locale. However, availableFormats entries *should* override entries with matching skeleton whose skeleton was\n     * derived (i.e. entries derived from the standard date/time patters for the specified locale).\n     * 3. When adding the pattern (skeleton2pattern.put, basePattern_pattern.put), we set a field to indicate that the added\n     * entry had a specified skeleton.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSkeleton(String pattern)",
    "returnType" : "String",
    "comment" : "\n     * Utility to return a unique skeleton from a given pattern. For example,\n     * both \"MMM-dd\" and \"dd/MMM\" produce the skeleton \"MMMdd\".\n     *\n     * @param pattern Input pattern, such as \"dd/MMM\"\n     * @return skeleton, such as \"MMMdd\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSkeletonAllowingDuplicates(String pattern)",
    "returnType" : "String",
    "comment" : "\n     * Same as getSkeleton, but allows duplicates\n     *\n     * @param pattern Input pattern, such as \"dd/MMM\"\n     * @return skeleton, such as \"MMMdd\"\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getCanonicalSkeletonAllowingDuplicates(String pattern)",
    "returnType" : "String",
    "comment" : "\n     * Same as getSkeleton, but allows duplicates\n     * and returns a string using canonical pattern chars\n     *\n     * @param pattern Input pattern, such as \"ccc, d LLL\"\n     * @return skeleton, such as \"MMMEd\"\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getBaseSkeleton(String pattern)",
    "returnType" : "String",
    "comment" : "\n     * Utility to return a unique base skeleton from a given pattern. This is\n     * the same as the skeleton, except that differences in length are minimized\n     * so as to only preserve the difference between string and numeric form. So\n     * for example, both \"MMM-dd\" and \"d/MMM\" produce the skeleton \"MMMd\"\n     * (notice the single d).\n     *\n     * @param pattern Input pattern, such as \"dd/MMM\"\n     * @return skeleton, such as \"MMMdd\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getSkeletons(Map<String, String> result)",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * Return a list of all the skeletons (in canonical form) from this class,\n     * and the patterns that they map to.\n     *\n     * @param result an output Map in which to place the mapping from skeleton to\n     *            pattern. If you want to see the internal order being used,\n     *            supply a LinkedHashMap. If the input value is null, then a\n     *            LinkedHashMap is allocated.\n     *            <p>\n     *            <i>Issue: an alternate API would be to just return a list of\n     *            the skeletons, and then have a separate routine to get from\n     *            skeleton to pattern.</i>\n     * @return the input Map containing the values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getBaseSkeletons(Set<String> result)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Return a list of all the base skeletons (in canonical form) from this class\n     ",
    "links" : [ ]
  }, {
    "name" : "public String replaceFieldTypes(String pattern, String skeleton)",
    "returnType" : "String",
    "comment" : "\n     * Adjusts the field types (width and subtype) of a pattern to match what is\n     * in a skeleton. That is, if you supply a pattern like \"d-M H:m\", and a\n     * skeleton of \"MMMMddhhmm\", then the input pattern is adjusted to be\n     * \"dd-MMMM hh:mm\". This is used internally to get the best match for the\n     * input skeleton, but can also be used externally.\n     * <p>Example code:{@sample external/icu/android_icu4j/src/samples/java/android/icu/samples/text/datetimepatterngenerator/DateTimePatternGeneratorSample.java replaceFieldTypesExample}\n     * @param pattern input pattern\n     * @param skeleton For the pattern to match to.\n     * @return pattern adjusted to match the skeleton fields widths and subtypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String replaceFieldTypes(String pattern, String skeleton, int options)",
    "returnType" : "String",
    "comment" : "\n     * Adjusts the field types (width and subtype) of a pattern to match what is\n     * in a skeleton. That is, if you supply a pattern like \"d-M H:m\", and a\n     * skeleton of \"MMMMddhhmm\", then the input pattern is adjusted to be\n     * \"dd-MMMM hh:mm\". This is used internally to get the best match for the\n     * input skeleton, but can also be used externally.\n     *\n     * @param pattern input pattern\n     * @param skeleton For the pattern to match to.\n     * @param options MATCH_xxx options for forcing the length of specified fields in\n     *            the returned pattern to match those in the skeleton (when this would\n     *            not happen otherwise). For default behavior, use MATCH_NO_OPTIONS.\n     * @return pattern adjusted to match the skeleton fields widths and subtypes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDateTimeFormat(String dateTimeFormat)",
    "returnType" : "void",
    "comment" : "\n     * The date time format is a message format pattern used to compose date and\n     * time patterns. The default value is \"{1} {0}\", where {1} will be replaced\n     * by the date pattern and {0} will be replaced by the time pattern.\n     * <p>\n     * This is used when the input skeleton contains both date and time fields,\n     * but there is not a close match among the added patterns. For example,\n     * suppose that this object was created by adding \"dd-MMM\" and \"hh:mm\", and\n     * its datetimeFormat is the default \"{1} {0}\". Then if the input skeleton\n     * is \"MMMdhmm\", there is not an exact match, so the input skeleton is\n     * broken up into two components \"MMMd\" and \"hmm\". There are close matches\n     * for those two skeletons, so the result is put together with this pattern,\n     * resulting in \"d-MMM h:mm\".\n     *\n     * There are four DateTimeFormats in a DateTimePatternGenerator object,\n     * corresponding to date styles DateFormat.FULL..DateFormat.SHORT. This method sets\n     * all of them to the specified pattern. To set them individually, see\n     * setDateTimeFormat(int style, ...).\n     *\n     * @param dateTimeFormat message format pattern, where {1} will be replaced by the date\n     *            pattern and {0} will be replaced by the time pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDateTimeFormat()",
    "returnType" : "String",
    "comment" : "\n     * Getter corresponding to setDateTimeFormat.\n     *\n     * There are four DateTimeFormats in a DateTimePatternGenerator object,\n     * corresponding to date styles DateFormat.FULL..DateFormat.SHORT. This method gets\n     * the style for DateFormat.MEDIUM (the default). To get them individually, see\n     * getDateTimeFormat(int style).\n     *\n     * @return pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDateTimeFormat(int style, String dateTimeFormat)",
    "returnType" : "void",
    "comment" : "\n     * dateTimeFormats are message patterns used to compose combinations of date\n     * and time patterns. There are four length styles, corresponding to the\n     * inferred style of the date pattern:\n     *  - DateFormat.FULL (for date pattern with weekday and long month), else\n     *  - DateFormat.LONG (for a date pattern with long month), else\n     *  - DateFormat.MEDIUM (for a date pattern with abbreviated month), else\n     *  - DateFormat.SHORT (for any other date pattern).\n     * For details on dateTimeFormats, see\n     * https://www.unicode.org/reports/tr35/tr35-dates.html#dateTimeFormats.\n     * The default pattern in the root locale for all styles is \"{1} {0}\".\n     *\n     * @param style\n     *              one of DateFormat.FULL..DateFormat.SHORT. An exception will\n     *              be thrown if out of range.\n     * @param dateTimeFormat\n     *              the new dateTimeFormat to set for the specified style\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDateTimeFormat(int style)",
    "returnType" : "String",
    "comment" : "\n     * Getter corresponding to setDateTimeFormat.\n     *\n     * @param style\n     *              one of DateFormat.FULL..DateFormat.SHORT. An exception will\n     *              be thrown if out of range.\n     * @return\n     *              the current dateTimeFormat for the specified style.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecimal(String decimal)",
    "returnType" : "void",
    "comment" : "\n     * The decimal value is used in formatting fractions of seconds. If the\n     * skeleton contains fractional seconds, then this is used with the\n     * fractional seconds. For example, suppose that the input pattern is\n     * \"hhmmssSSSS\", and the best matching pattern internally is \"H:mm:ss\", and\n     * the decimal string is \",\". Then the resulting pattern is modified to be\n     * \"H:mm:ss,SSSS\"\n     *\n     * @param decimal The decimal to set to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getDecimal()",
    "returnType" : "String",
    "comment" : "\n     * Getter corresponding to setDecimal.\n     * @return string corresponding to the decimal point\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collection<String> getRedundants(Collection<String> output)",
    "returnType" : "Collection<String>",
    "comment" : "\n     * Redundant patterns are those which if removed, make no difference in the\n     * resulting getBestPattern values. This method returns a list of them, to\n     * help check the consistency of the patterns used to build this generator.\n     *\n     * @param output stores the redundant patterns that are removed. To get these\n     *            in internal order, supply a LinkedHashSet. If null, a\n     *            collection is allocated.\n     * @return the collection with added elements.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppendItemFormat(int field, String value)",
    "returnType" : "void",
    "comment" : "\n     * An AppendItem format is a pattern used to append a field if there is no\n     * good match. For example, suppose that the input skeleton is \"GyyyyMMMd\",\n     * and there is no matching pattern internally, but there is a pattern\n     * matching \"yyyyMMMd\", say \"d-MM-yyyy\". Then that pattern is used, plus the\n     * G. The way these two are conjoined is by using the AppendItemFormat for G\n     * (era). So if that value is, say \"{0}, {1}\" then the final resulting\n     * pattern is \"d-MM-yyyy, G\".\n     * <p>\n     * There are actually three available variables: {0} is the pattern so far,\n     * {1} is the element we are adding, and {2} is the name of the element.\n     * <p>\n     * This reflects the way that the CLDR data is organized.\n     *\n     * @param field such as ERA\n     * @param value pattern, such as \"{0}, {1}\"\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAppendItemFormat(int field)",
    "returnType" : "String",
    "comment" : "\n     * Getter corresponding to setAppendItemFormats. Values below 0 or at or\n     * above TYPE_LIMIT are illegal arguments.\n     *\n     * @param field The index to retrieve the append item formats.\n     * @return append pattern for field\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAppendItemName(int field, String value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the names of fields, eg \"era\" in English for ERA. These are only\n     * used if the corresponding AppendItemFormat is used, and if it contains a\n     * {2} variable.\n     * <p>\n     * This reflects the way that the CLDR data is organized.\n     *\n     * @param field Index of the append item names.\n     * @param value The value to set the item to.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAppendItemName(int field)",
    "returnType" : "String",
    "comment" : "\n     * Getter corresponding to setAppendItemName. Values below 0 or at or above\n     * TYPE_LIMIT are illegal arguments. Note: The more general method\n     * for getting date/time field display names is getFieldDisplayName.\n     *\n     * @param field The index to get the append item name.\n     * @return name for field\n     * @see #getFieldDisplayName(int, DisplayWidth)\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateFormat.HourCycle getDefaultHourCycle()",
    "returnType" : "DateFormat.HourCycle",
    "comment" : "\n     * Return the default hour cycle.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setFieldDisplayName(int field, DisplayWidth width, String value)",
    "returnType" : "void",
    "comment" : "\n     * The private interface to set a display name for a particular date/time field,\n     * in one of several possible display widths.\n     *\n     * @param field The field type, such as ERA.\n     * @param width The desired DisplayWidth, such as DisplayWidth.ABBREVIATED.\n     * @param value The display name to set\n     * @deprecated This API is ICU internal only.\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getFieldDisplayName(int field, DisplayWidth width)",
    "returnType" : "String",
    "comment" : "\n     * The general interface to get a display name for a particular date/time field,\n     * in one of several possible display widths.\n     *\n     * @param field The field type, such as ERA.\n     * @param width The desired DisplayWidth, such as DisplayWidth.ABBREVIATED.\n     * @return      The display name for the field\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSingleField(String skeleton)",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether a skeleton contains a single field\n     *\n     * @param skeleton The skeleton to determine if it contains a single field.\n     * @return true or not\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setAvailableFormat(String key)",
    "returnType" : "void",
    "comment" : "\n     * Add key to HashSet cldrAvailableFormatKeys.\n     *\n     * @param key of the availableFormats in CLDR\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isAvailableFormatSet(String key)",
    "returnType" : "boolean",
    "comment" : "\n     * This function checks the corresponding slot of CLDR_AVAIL_FORMAT_KEY[]\n     * has been added to DateTimePatternGenerator.\n     * The function is to avoid the duplicate availableFomats added to\n     * the pattern map from parent locales.\n     *\n     * @param key of the availableFormatMask in CLDR\n     * @return true if the corresponding slot of CLDR_AVAIL_FORMAT_KEY[]\n     * has been added to DateTimePatternGenerator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateTimePatternGenerator freeze()",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateTimePatternGenerator cloneAsThawed()",
    "returnType" : "DateTimePatternGenerator",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a copy of this <code>DateTimePatternGenerator</code> object.\n     * @return A copy of this <code>DateTimePatternGenerator</code> object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean skeletonsAreSimilar(String id, String skeleton)",
    "returnType" : "boolean",
    "comment" : "\n     * Used by CLDR tooling; not in ICU4C.\n     * Note, this will not work correctly with normal skeletons, since fields\n     * that should be related in the two skeletons being compared - like EEE and\n     * ccc, or y and U - will not be sorted in the same relative place as each\n     * other when iterating over both TreeSets being compare, using TreeSet's\n     * \"natural\" code point ordering (this could be addressed by initializing\n     * the TreeSet with a comparator that compares fields first by their index\n     * from getCanonicalIndex()). However if comparing canonical skeletons from\n     * getCanonicalSkeletonAllowingDuplicates it will be OK regardless, since\n     * in these skeletons all fields are normalized to the canonical pattern\n     * char for those fields - M or L to M, E or c to E, y or U to y, etc. -\n     * so corresponding fields will sort in the same way for both TreeMaps.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private TreeSet<String> getSet(String id)",
    "returnType" : "TreeSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void checkFrozen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getBestAppending(DateTimeMatcher source, int missingFields, DistanceInfo distInfo, DateTimeMatcher skipMatcher, EnumSet<DTPGflags> flags, int options)",
    "returnType" : "String",
    "comment" : "\n     * We only get called here if we failed to find an exact skeleton. We have broken it into date + time, and look for the pieces.\n     * If we fail to find a complete skeleton, we compose in a loop until we have all the fields.\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAppendName(int foundMask)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getAppendFormat(int foundMask)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getTopBitNumber(int foundMask)",
    "returnType" : "int",
    "comment" : "\n     * @param foundMask\n     ",
    "links" : [ ]
  }, {
    "name" : "private void addCanonicalItems()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PatternWithMatcher getBestRaw(DateTimeMatcher source, int includeMask, DistanceInfo missingFields, DateTimeMatcher skipMatcher)",
    "returnType" : "PatternWithMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String adjustFieldTypes(PatternWithMatcher patternWithMatcher, DateTimeMatcher inputRequest, EnumSet<DTPGflags> flags, int options)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getFields(String pattern)",
    "returnType" : "String",
    "comment" : "\n     * internal routine\n     * @param pattern The pattern that is passed.\n     * @return field value\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String showMask(int mask)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getName(String s)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getCanonicalIndex(String s, boolean strict)",
    "returnType" : "int",
    "comment" : "\n     * Get the canonical index, or return -1 if illegal.\n     * @param s\n     * @param strict TODO\n     ",
    "links" : [ ]
  }, {
    "name" : "private static char getCanonicalChar(int field, char reference)",
    "returnType" : "char",
    "comment" : "\n     * Gets the canonical character associated with the specified field (ERA, YEAR, etc).\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static DateTimePatternGenerator getEmptyInstance()", "public static DateTimePatternGenerator getInstance()", "public static DateTimePatternGenerator getInstance(ULocale uLocale)", "public static DateTimePatternGenerator getInstance(Locale locale)", "public static DateTimePatternGenerator getFrozenInstance(ULocale uLocale)", "public static DateTimePatternGenerator getInstanceNoStdPat(ULocale uLocale)", "private void initData(ULocale uLocale, boolean skipStdPatterns)", "private void addICUPatterns(PatternInfo returnInfo, ULocale uLocale)", "private String getCalendarTypeToUse(ULocale uLocale)", "private void consumeShortTimePattern(String shortTimePattern, PatternInfo returnInfo)", "private void fillInMissing()", "private void addCLDRData(PatternInfo returnInfo, ULocale uLocale)", "private void setDateTimeFromCalendar(ULocale uLocale)", "private void setDecimalSymbols(ULocale uLocale)", "private String[] getAllowedHourFormatsLangCountry(String language, String country)", "private void getAllowedHourFormats(ULocale uLocale)", "public char getDefaultHourFormatChar()", "public void setDefaultHourFormatChar(char defaultHourFormatChar)", "private void hackTimes(PatternInfo returnInfo, String shortTimePattern)", "private static String getFilteredPattern(FormatParser fp, BitSet nuke)", "public static int getAppendFormatNumber(UResource.Key key)", "public static int getAppendFormatNumber(String string)", "private static int getCLDRFieldAndWidthNumber(UResource.Key key)", "public String getBestPattern(String skeleton)", "public String getBestPattern(String skeleton, int options)", "public String getBestPattern(String skeleton, int options, boolean allowDuplicateFields)", "private String getBestPattern(String skeleton, DateTimeMatcher skipMatcher, int options)", "private String getBestPattern(String skeleton, DateTimeMatcher skipMatcher, int options, boolean allowDuplicateFields)", "private String mapSkeletonMetacharacters(String skeleton, EnumSet<DTPGflags> flags)", "public DateTimePatternGenerator addPattern(String pattern, boolean override, PatternInfo returnInfo)", "public DateTimePatternGenerator addPatternWithSkeleton(String pattern, String skeletonToUse, boolean override, PatternInfo returnInfo)", "public String getSkeleton(String pattern)", "public String getSkeletonAllowingDuplicates(String pattern)", "public String getCanonicalSkeletonAllowingDuplicates(String pattern)", "public String getBaseSkeleton(String pattern)", "public Map<String, String> getSkeletons(Map<String, String> result)", "public Set<String> getBaseSkeletons(Set<String> result)", "public String replaceFieldTypes(String pattern, String skeleton)", "public String replaceFieldTypes(String pattern, String skeleton, int options)", "public void setDateTimeFormat(String dateTimeFormat)", "public String getDateTimeFormat()", "public void setDateTimeFormat(int style, String dateTimeFormat)", "public String getDateTimeFormat(int style)", "public void setDecimal(String decimal)", "public String getDecimal()", "public Collection<String> getRedundants(Collection<String> output)", "public void setAppendItemFormat(int field, String value)", "public String getAppendItemFormat(int field)", "public void setAppendItemName(int field, String value)", "public String getAppendItemName(int field)", "public DateFormat.HourCycle getDefaultHourCycle()", "private void setFieldDisplayName(int field, DisplayWidth width, String value)", "public String getFieldDisplayName(int field, DisplayWidth width)", "public static boolean isSingleField(String skeleton)", "private void setAvailableFormat(String key)", "private boolean isAvailableFormatSet(String key)", "public boolean isFrozen()", "public DateTimePatternGenerator freeze()", "public DateTimePatternGenerator cloneAsThawed()", "public Object clone()", "public boolean skeletonsAreSimilar(String id, String skeleton)", "private TreeSet<String> getSet(String id)", "private void checkFrozen()", "private String getBestAppending(DateTimeMatcher source, int missingFields, DistanceInfo distInfo, DateTimeMatcher skipMatcher, EnumSet<DTPGflags> flags, int options)", "private String getAppendName(int foundMask)", "private String getAppendFormat(int foundMask)", "private int getTopBitNumber(int foundMask)", "private void addCanonicalItems()", "private PatternWithMatcher getBestRaw(DateTimeMatcher source, int includeMask, DistanceInfo missingFields, DateTimeMatcher skipMatcher)", "private String adjustFieldTypes(PatternWithMatcher patternWithMatcher, DateTimeMatcher inputRequest, EnumSet<DTPGflags> flags, int options)", "public String getFields(String pattern)", "private static String showMask(int mask)", "private static String getName(String s)", "private static int getCanonicalIndex(String s, boolean strict)", "private static char getCanonicalChar(int field, char reference)" ],
  "variableNames" : [ "DEBUG", "LAST_RESORT_ALLOWED_HOUR_FORMAT", "LOCALE_TO_ALLOWED_HOUR", "ERA", "YEAR", "QUARTER", "MONTH", "WEEK_OF_YEAR", "WEEK_OF_MONTH", "WEEKDAY", "DAY", "DAY_OF_YEAR", "DAY_OF_WEEK_IN_MONTH", "DAYPERIOD", "HOUR", "MINUTE", "SECOND", "FRACTIONAL_SECOND", "ZONE", "TYPE_LIMIT", "APPENDITEM_WIDTH", "APPENDITEM_WIDTH_INT", "CLDR_FIELD_WIDTH", "MATCH_NO_OPTIONS", "MATCH_HOUR_FIELD_LENGTH", "MATCH_MINUTE_FIELD_LENGTH", "MATCH_SECOND_FIELD_LENGTH", "MATCH_ALL_FIELDS_LENGTH", "skeleton2pattern", "basePattern_pattern", "decimal", "dateTimeFormats", "appendItemFormats", "fieldDisplayNames", "defaultHourFormatChar", "frozen", "current", "fp", "_distanceInfo", "allowedHourFormats", "FRACTIONAL_MASK", "SECOND_AND_FRACTIONAL_MASK", "DTPNG_CACHE", "CLDR_FIELD_APPEND", "CLDR_FIELD_NAME", "FIELD_NAME", "CANONICAL_ITEMS", "CANONICAL_SET", "cldrAvailableFormatKeys", "DATE_MASK", "TIME_MASK", "DELTA", "NUMERIC", "NONE", "NARROW", "SHORTER", "SHORT", "LONG", "EXTRA_FIELD", "MISSING_FIELD", "types" ]
}