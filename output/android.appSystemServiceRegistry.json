{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/SystemServiceRegistry.java",
  "packageName" : "android.app",
  "className" : "SystemServiceRegistry",
  "comment" : "\n * Manages all of the system services that can be returned by {@link Context#getSystemService}.\n * Used by {@link ContextImpl}.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sEnableServiceNotFoundWtf",
    "type" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_SERVICE_NAMES",
    "type" : "Map<Class<?>, String>",
    "comment" : " This information is never changed once static initialization has completed.",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_SERVICE_FETCHERS",
    "type" : "Map<String, ServiceFetcher<?>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SYSTEM_SERVICE_CLASS_NAMES",
    "type" : "Map<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sServiceCacheSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInitializing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static void ensureInitializing(String methodName)",
    "returnType" : "void",
    "comment" : " Throws {@link IllegalStateException} if not during a static initialization. ",
    "links" : [ "IllegalStateException" ]
  }, {
    "name" : "public static Object[] createServiceCache()",
    "returnType" : "Object[]",
    "comment" : "\n     * Creates an array which is used to cache per-Context service instances.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Object getSystemService(ContextImpl ctx, String name)",
    "returnType" : "Object",
    "comment" : "\n     * Gets a system service from a given context.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getSystemServiceName(Class<?> serviceClass)",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the system-level service that is represented by the specified class.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void registerService(@NonNull String serviceName, @NonNull Class<T> serviceClass, @NonNull ServiceFetcher<T> serviceFetcher)",
    "returnType" : "void",
    "comment" : "\n     * Statically registers a system service with the context.\n     * This method must be called during static initialization only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getSystemServiceClassName(@NonNull String name)",
    "returnType" : "String",
    "comment" : "\n     * Returns system service class name by system service name. This method is mostly an inverse of\n     * {@link #getSystemServiceName(Class)}\n     *\n     * @return system service class name. {@code null} if service name is invalid.\n     * @hide\n     ",
    "links" : [ "#getSystemServiceName" ]
  }, {
    "name" : "public static void registerStaticService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull StaticServiceProducerWithBinder<TServiceClass> serviceProducer)",
    "returnType" : "void",
    "comment" : "\n     * Used by apex modules to register a \"service wrapper\" that is not tied to any {@link Context}.\n     *\n     * <p>This can only be called from the methods called by the static initializer of\n     * {@link SystemServiceRegistry}. (Otherwise it throws a {@link IllegalStateException}.)\n     *\n     * @param serviceName the name of the binder object, such as\n     *     {@link Context#JOB_SCHEDULER_SERVICE}.\n     * @param serviceWrapperClass the wrapper class, such as the class of\n     *     {@link android.app.job.JobScheduler}.\n     * @param serviceProducer Callback that takes the service binder object with the name\n     *     {@code serviceName} and returns an actual service wrapper instance.\n     *\n     * @hide\n     ",
    "links" : [ "Context", "SystemServiceRegistry", "IllegalStateException", "Context#JOB_SCHEDULER_SERVICE", "android.app.job.JobScheduler" ]
  }, {
    "name" : "public static void registerStaticService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull StaticServiceProducerWithoutBinder<TServiceClass> serviceProducer)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #registerStaticService(String, Class, StaticServiceProducerWithBinder)},\n     * but used for a \"service wrapper\" that doesn't take a service binder in its constructor.\n     *\n     * @hide\n     ",
    "links" : [ "#registerStaticService" ]
  }, {
    "name" : "public static void registerContextAwareService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull ContextAwareServiceProducerWithBinder<TServiceClass> serviceProducer)",
    "returnType" : "void",
    "comment" : "\n     * Used by apex modules to register a \"service wrapper\" that is tied to a specific\n     * {@link Context}.\n     *\n     * <p>This can only be called from the methods called by the static initializer of\n     * {@link SystemServiceRegistry}. (Otherwise it throws a {@link IllegalStateException}.)\n     *\n     * @param serviceName the name of the binder object, such as\n     *     {@link Context#JOB_SCHEDULER_SERVICE}.\n     * @param serviceWrapperClass the wrapper class, such as the class of\n     *     {@link android.app.job.JobScheduler}.\n     * @param serviceProducer lambda that takes the service binder object with the name\n     *     {@code serviceName}, a {@link Context} and returns an actual service wrapper instance.\n     *\n     * @hide\n     ",
    "links" : [ "Context", "SystemServiceRegistry", "IllegalStateException", "Context#JOB_SCHEDULER_SERVICE", "android.app.job.JobScheduler", "Context" ]
  }, {
    "name" : "public static void registerContextAwareService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull ContextAwareServiceProducerWithoutBinder<TServiceClass> serviceProducer)",
    "returnType" : "void",
    "comment" : "\n     * Similar to {@link #registerContextAwareService(String, Class,\n     * ContextAwareServiceProducerWithBinder)},\n     * but used for a \"service wrapper\" that doesn't take a service binder in its constructor.\n     *\n     * @hide\n     ",
    "links" : [ "#registerContextAwareService" ]
  }, {
    "name" : "public static void onServiceNotFound(ServiceNotFoundException e)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sEnableServiceNotFoundWtf", "SYSTEM_SERVICE_NAMES", "SYSTEM_SERVICE_FETCHERS", "SYSTEM_SERVICE_CLASS_NAMES", "sServiceCacheSize", "sInitializing" ],
  "methodNames" : [ "private static void ensureInitializing(String methodName)", "public static Object[] createServiceCache()", "public static Object getSystemService(ContextImpl ctx, String name)", "public static String getSystemServiceName(Class<?> serviceClass)", "private static void registerService(@NonNull String serviceName, @NonNull Class<T> serviceClass, @NonNull ServiceFetcher<T> serviceFetcher)", "public static String getSystemServiceClassName(@NonNull String name)", "public static void registerStaticService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull StaticServiceProducerWithBinder<TServiceClass> serviceProducer)", "public static void registerStaticService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull StaticServiceProducerWithoutBinder<TServiceClass> serviceProducer)", "public static void registerContextAwareService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull ContextAwareServiceProducerWithBinder<TServiceClass> serviceProducer)", "public static void registerContextAwareService(@NonNull String serviceName, @NonNull Class<TServiceClass> serviceWrapperClass, @NonNull ContextAwareServiceProducerWithoutBinder<TServiceClass> serviceProducer)", "public static void onServiceNotFound(ServiceNotFoundException e)" ]
}