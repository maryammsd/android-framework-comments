{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/ElemText.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "ElemText",
  "comment" : "\n * Implement xsl:template.\n * This primarily acts as a marker on the element\n * stack to signal that whitespace should be preserved.\n * <pre>\n * <!ELEMENT xsl:text (#PCDATA)>\n * <!ATTLIST xsl:text\n *   disable-output-escaping (yes|no) \"no\"\n * >\n * </pre>\n * @see <a href=\"http://www.w3.org/TR/xslt#section-Creating-Text\">section-Creating-Text in XSLT Specification</a>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_disableOutputEscaping",
    "type" : "boolean",
    "comment" : "\n   * Tells if this element should disable escaping.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setDisableOutputEscaping(boolean v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @param v Boolean flag indicating whether this element should disable escaping\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getDisableOutputEscaping()",
    "returnType" : "boolean",
    "comment" : "\n   * Get the \"disable-output-escaping\" attribute.\n   * Normally, the xml output method escapes & and < (and\n   * possibly other characters) when outputting text nodes.\n   * This ensures that the output is well-formed XML. However,\n   * it is sometimes convenient to be able to produce output\n   * that is almost, but not quite well-formed XML; for\n   * example, the output may include ill-formed sections\n   * which are intended to be transformed into well-formed\n   * XML by a subsequent non-XML aware process. For this reason,\n   * XSLT provides a mechanism for disabling output escaping.\n   * An xsl:value-of or xsl:text element may have a\n   * disable-output-escaping attribute; the allowed values\n   * are yes or no; the default is no; if the value is yes,\n   * then a text node generated by instantiating the xsl:value-of\n   * or xsl:text element should be output without any escaping.\n   * @see <a href=\"http://www.w3.org/TR/xslt#disable-output-escaping\">disable-output-escaping in XSLT Specification</a>\n   *\n   * @return Boolean flag indicating whether this element should disable escaping\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an integer representation of the element type.\n   *\n   * @return An integer representation of the element, defined in the\n   *     Constants class.\n   * @see org.apache.xalan.templates.Constants\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return The element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public ElemTemplateElement appendChild(ElemTemplateElement newChild)",
    "returnType" : "ElemTemplateElement",
    "comment" : "\n   * Add a child to the child list.\n   *\n   * @param newChild Child to add to children list\n   *\n   * @return Child added to children list\n   *\n   * @throws DOMException\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setDisableOutputEscaping(boolean v)", "public boolean getDisableOutputEscaping()", "public int getXSLToken()", "public String getNodeName()", "public ElemTemplateElement appendChild(ElemTemplateElement newChild)" ],
  "variableNames" : [ "serialVersionUID", "m_disableOutputEscaping" ]
}