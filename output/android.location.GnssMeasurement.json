{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/location/GnssMeasurement.java",
  "packageName" : "android.location",
  "className" : "GnssMeasurement",
  "comment" : "\n * A class representing a GNSS satellite measurement, containing raw and computed information.\n ",
  "variables" : [ {
    "name" : "mFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSvid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mConstellationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimeOffsetNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivedSvTimeNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReceivedSvTimeUncertaintyNanos",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCn0DbHz",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBasebandCn0DbHz",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeRateMetersPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPseudorangeRateUncertaintyMetersPerSecond",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAccumulatedDeltaRangeUncertaintyMeters",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierFrequencyHz",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierCycles",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierPhase",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCarrierPhaseUncertainty",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMultipathIndicator",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSnrInDb",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutomaticGainControlLevelInDb",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCodeType",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullInterSignalBiasNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullInterSignalBiasUncertaintyNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSatelliteInterSignalBiasNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSatelliteInterSignalBiasUncertaintyNanos",
    "type" : "double",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_NO_FLAGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_CODE_TYPE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HAS_BASEBAND_CN0",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The indicator is not available or the presence or absence of multipath is unknown.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_DETECTED",
    "type" : "int",
    "comment" : "\n     * The measurement shows signs of multi-path.\n     ",
    "links" : [ ]
  }, {
    "name" : "MULTIPATH_INDICATOR_NOT_DETECTED",
    "type" : "int",
    "comment" : "\n     * The measurement shows no signs of multi-path.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_UNKNOWN",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state is invalid or unknown. ",
    "links" : [ ]
  }, {
    "name" : "STATE_CODE_LOCK",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has code lock. ",
    "links" : [ ]
  }, {
    "name" : "STATE_BIT_SYNC",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has bit sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_SUBFRAME_SYNC",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has sub-frame sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_TOW_DECODED",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has time-of-week decoded. ",
    "links" : [ ]
  }, {
    "name" : "STATE_MSEC_AMBIGUOUS",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state contains millisecond ambiguity. ",
    "links" : [ ]
  }, {
    "name" : "STATE_SYMBOL_SYNC",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has symbol sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_GLO_STRING_SYNC",
    "type" : "int",
    "comment" : " This Glonass measurement's tracking state has string sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_GLO_TOD_DECODED",
    "type" : "int",
    "comment" : " This Glonass measurement's tracking state has time-of-day decoded. ",
    "links" : [ ]
  }, {
    "name" : "STATE_BDS_D2_BIT_SYNC",
    "type" : "int",
    "comment" : " This Beidou measurement's tracking state has D2 bit sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_BDS_D2_SUBFRAME_SYNC",
    "type" : "int",
    "comment" : " This Beidou measurement's tracking state has D2 sub-frame sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_GAL_E1BC_CODE_LOCK",
    "type" : "int",
    "comment" : " This Galileo measurement's tracking state has E1B/C code lock. ",
    "links" : [ ]
  }, {
    "name" : "STATE_GAL_E1C_2ND_CODE_LOCK",
    "type" : "int",
    "comment" : " This Galileo measurement's tracking state has E1C secondary code lock. ",
    "links" : [ ]
  }, {
    "name" : "STATE_GAL_E1B_PAGE_SYNC",
    "type" : "int",
    "comment" : " This Galileo measurement's tracking state has E1B page sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_SBAS_SYNC",
    "type" : "int",
    "comment" : " This SBAS measurement's tracking state has whole second level sync. ",
    "links" : [ ]
  }, {
    "name" : "STATE_TOW_KNOWN",
    "type" : "int",
    "comment" : "\n     * This GNSS measurement's tracking state has time-of-week known, possibly not decoded\n     * over the air but has been determined from other sources. If TOW decoded is set then TOW Known\n     * will also be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_GLO_TOD_KNOWN",
    "type" : "int",
    "comment" : "\n     * This Glonass measurement's tracking state has time-of-day known, possibly not decoded\n     * over the air but has been determined from other sources. If TOD decoded is set then TOD Known\n     * will also be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "STATE_2ND_CODE_LOCK",
    "type" : "int",
    "comment" : " This GNSS measurement's tracking state has secondary code lock. ",
    "links" : [ ]
  }, {
    "name" : "STATE_ALL",
    "type" : "int",
    "comment" : " 2 bits + 4 bits + 4 bits + 4 bits = 14 bits",
    "links" : [ ]
  }, {
    "name" : "ADR_STATE_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * The state of the value {@link #getAccumulatedDeltaRangeMeters()} is invalid or unknown.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "ADR_STATE_VALID",
    "type" : "int",
    "comment" : "\n     * The state of the {@link #getAccumulatedDeltaRangeMeters()} is valid.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "ADR_STATE_RESET",
    "type" : "int",
    "comment" : "\n     * The state of the {@link #getAccumulatedDeltaRangeMeters()} has detected a reset.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "ADR_STATE_CYCLE_SLIP",
    "type" : "int",
    "comment" : "\n     * The state of the {@link #getAccumulatedDeltaRangeMeters()} has a cycle slip detected.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "ADR_STATE_HALF_CYCLE_RESOLVED",
    "type" : "int",
    "comment" : "\n     * Reports whether the value {@link #getAccumulatedDeltaRangeMeters()} has resolved the half\n     * cycle ambiguity.\n     *\n     * <p> When this bit is set, the {@link #getAccumulatedDeltaRangeMeters()} corresponds to the\n     * carrier phase measurement plus an accumulated integer number of carrier full cycles.\n     *\n     * <p> When this bit is unset, the {@link #getAccumulatedDeltaRangeMeters()} corresponds to the\n     * carrier phase measurement plus an accumulated integer number of carrier half cycles.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "ADR_STATE_HALF_CYCLE_REPORTED",
    "type" : "int",
    "comment" : "\n     * Reports whether the flag {@link #ADR_STATE_HALF_CYCLE_RESOLVED} has been reported by the\n     * GNSS hardware.\n     *\n     * <p> When this bit is set, the value of {@link #getAccumulatedDeltaRangeUncertaintyMeters()}\n     * can be low (centimeter level) whether or not the half cycle ambiguity is resolved.\n     *\n     * <p> When this bit is unset, the value of {@link #getAccumulatedDeltaRangeUncertaintyMeters()}\n     * is larger, to cover the potential error due to half cycle ambiguity being unresolved.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeUncertaintyMeters()", "#ADR_STATE_HALF_CYCLE_RESOLVED" ]
  }, {
    "name" : "ADR_STATE_ALL",
    "type" : "int",
    "comment" : "\n     * All the 'Accumulated Delta Range' flags.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<GnssMeasurement>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void set(GnssMeasurement measurement)",
    "returnType" : "void",
    "comment" : "\n     * Sets all contents to the values stored in the provided object.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets all the contents to its original state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSvid()",
    "returnType" : "int",
    "comment" : "\n     * Gets the satellite ID.\n     *\n     * <p>Interpretation depends on {@link #getConstellationType()}.\n     * See {@link GnssStatus#getSvid(int)}.\n     ",
    "links" : [ "#getConstellationType()", "android.location.GnssStatus#getSvid(int)" ]
  }, {
    "name" : "public void setSvid(int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Satellite ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConstellationType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the constellation type.\n     *\n     * <p>The return value is one of those constants with {@code CONSTELLATION_} prefix in\n     * {@link GnssStatus}.\n     ",
    "links" : [ "android.location.GnssStatus" ]
  }, {
    "name" : "public void setConstellationType(@GnssStatus.ConstellationType int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the constellation type.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getTimeOffsetNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the time offset at which the measurement was taken in nanoseconds.\n     *\n     * <p>The reference receiver's time from which this is offset is specified by\n     * {@link GnssClock#getTimeNanos()}.\n     *\n     * <p>The sign of this value is given by the following equation:\n     * <pre>\n     *      measurement time = TimeNanos + TimeOffsetNanos</pre>\n     *\n     * <p>The value provides an individual time-stamp for the measurement, and allows sub-nanosecond\n     * accuracy.\n     ",
    "links" : [ "android.location.GnssClock#getTimeNanos()" ]
  }, {
    "name" : "public void setTimeOffsetNanos(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the time offset at which the measurement was taken in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets per-satellite sync state.\n     *\n     * <p>It represents the current sync state for the associated satellite.\n     *\n     * <p>This value helps interpret {@link #getReceivedSvTimeNanos()}.\n     ",
    "links" : [ "#getReceivedSvTimeNanos()" ]
  }, {
    "name" : "public void setState(@State int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the sync state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getStateString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'sync state'.\n     *\n     * <p>For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getReceivedSvTimeNanos()",
    "returnType" : "long",
    "comment" : "\n     * Gets the received GNSS satellite time, at the measurement time, in nanoseconds.\n     *\n     * <p>The received satellite time is relative to the beginning of the system week for all\n     * constellations except for Glonass where it is relative to the beginning of the Glonass\n     * system day.\n     *\n     * <p>The table below indicates the valid range of the received GNSS satellite time. These\n     * ranges depend on the constellation and code being tracked and the state of the tracking\n     * algorithms given by the {@link #getState} method. The minimum value of this field is zero.\n     * The maximum value of this field is determined by looking across all of the state flags\n     * that are set, for the given constellation and code type, and finding the the maximum value\n     * in this table.\n     *\n     * <p>For example, for GPS L1 C/A, if STATE_TOW_KNOWN is set, this field can be any value from 0\n     * to 1 week (in nanoseconds), and for GAL E1B code, if only STATE_GAL_E1BC_CODE_LOCK is set,\n     * then this field can be any value from 0 to 4 milliseconds (in nanoseconds.)\n     *\n     * <table border=\"1\">\n     *   <thead>\n     *     <tr>\n     *       <td />\n     *       <td colspan=\"3\"><strong>GPS/QZSS</strong></td>\n     *       <td><strong>GLNS</strong></td>\n     *       <td colspan=\"2\"><strong>BDS</strong></td>\n     *       <td colspan=\"3\"><strong>GAL</strong></td>\n     *       <td><strong>SBAS</strong></td>\n     *     </tr>\n     *     <tr>\n     *       <td><strong>State Flag</strong></td>\n     *       <td><strong>L1 C/A</strong></td>\n     *       <td><strong>L5I</strong></td>\n     *       <td><strong>L5Q</strong></td>\n     *       <td><strong>L1OF</strong></td>\n     *       <td><strong>B1I (D1)</strong></td>\n     *       <td><strong>B1I &nbsp;(D2)</strong></td>\n     *       <td><strong>E1B</strong></td>\n     *       <td><strong>E1C</strong></td>\n     *       <td><strong>E5AQ</strong></td>\n     *       <td><strong>L1 C/A</strong></td>\n     *     </tr>\n     *   </thead>\n     *   <tbody>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_UNKNOWN</strong>\n     *       </td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *       <td>0</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_CODE_LOCK</strong>\n     *       </td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>1 ms</td>\n     *       <td>1 ms</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_SYMBOL_SYNC</strong>\n     *       </td>\n     *       <td>20 ms (optional)</td>\n     *       <td>10 ms</td>\n     *       <td>1 ms (optional)</td>\n     *       <td>10 ms</td>\n     *       <td>20 ms (optional)</td>\n     *       <td>2 ms</td>\n     *       <td>4 ms (optional)</td>\n     *       <td>4 ms (optional)</td>\n     *       <td>1 ms (optional)</td>\n     *       <td>2 ms</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_BIT_SYNC</strong>\n     *       </td>\n     *       <td>20 ms</td>\n     *       <td>20 ms</td>\n     *       <td>1 ms (optional)</td>\n     *       <td>20 ms</td>\n     *       <td>20 ms</td>\n     *       <td>-</td>\n     *       <td>8 ms</td>\n     *       <td>-</td>\n     *       <td>1 ms (optional)</td>\n     *       <td>4 ms</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_SUBFRAME_SYNC</strong>\n     *       </td>\n     *       <td>6s</td>\n     *       <td>6s</td>\n     *       <td>-</td>\n     *       <td>2 s</td>\n     *       <td>6 s</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>100 ms</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_TOW_DECODED</strong>\n     *       </td>\n     *       <td colspan=\"2\">1 week</td>\n     *       <td>-</td>\n     *       <td>1 day</td>\n     *       <td colspan=\"2\">1 week</td>\n     *       <td colspan=\"2\">1 week</td>\n     *       <td>-</td>\n     *       <td>1 week</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_TOW_KNOWN</strong>\n     *       </td>\n     *       <td colspan=\"3\">1 week</td>\n     *       <td>1 day</td>\n     *       <td colspan=\"2\">1 week</td>\n     *       <td colspan=\"3\">1 week</td>\n     *       <td>1 week</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GLO_STRING_SYNC</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>2 s</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GLO_TOD_DECODED</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>1 day</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GLO_TOD_KNOWN</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>1 day</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_BDS_D2_BIT_SYNC</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>2 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_BDS_D2_SUBFRAME_SYNC</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>600 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GAL_E1BC_CODE_LOCK</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>4 ms</td>\n     *       <td>4 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GAL_E1C_2ND_CODE_LOCK</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>100 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_2ND_CODE_LOCK</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>10 ms (optional)</td>\n     *       <td>20 ms</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>100 ms (optional)</td>\n     *       <td>100 ms</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_GAL_E1B_PAGE_SYNC</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>2 s</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *     </tr>\n     *     <tr>\n     *       <td>\n     *         <strong>STATE_SBAS_SYNC</strong>\n     *       </td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>-</td>\n     *       <td>1 s</td>\n     *     </tr>\n     *   </tbody>\n     * </table>\n     *\n     * <p>Note: TOW Known refers to the case where TOW is possibly not decoded over the air but has\n     * been determined from other sources. If TOW decoded is set then TOW Known must also be set.\n     *\n     * <p>Note well: if there is any ambiguity in integer millisecond, STATE_MSEC_AMBIGUOUS must be\n     * set accordingly, in the 'state' field. This value must be populated, unless the 'state' ==\n     * STATE_UNKNOWN.\n     *\n     * <p>Note on optional flags:\n     * <ul>\n     *     <li> For L1 C/A and B1I, STATE_SYMBOL_SYNC is optional since the symbol length is the\n     *     same as the bit length.\n     *     <li> For L5Q and E5aQ, STATE_BIT_SYNC and STATE_SYMBOL_SYNC are optional since they are\n     *     implied by STATE_CODE_LOCK.\n     *     <li> STATE_2ND_CODE_LOCK for L5I is optional since it is implied by STATE_SYMBOL_SYNC.\n     *     <li> STATE_2ND_CODE_LOCK for E1C is optional since it is implied by\n     *     STATE_GAL_E1C_2ND_CODE_LOCK.\n     *     <li> For E1B and E1C, STATE_SYMBOL_SYNC is optional, because it is implied by\n     *     STATE_GAL_E1BC_CODE_LOCK.\n     * </ul>\n     ",
    "links" : [ "#getState" ]
  }, {
    "name" : "public void setReceivedSvTimeNanos(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the received GNSS time in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getReceivedSvTimeUncertaintyNanos()",
    "returnType" : "long",
    "comment" : "\n     * Gets the error estimate (1-sigma) for the received GNSS time, in nanoseconds.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReceivedSvTimeUncertaintyNanos(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the received GNSS time uncertainty (1-Sigma) in nanoseconds.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getCn0DbHz()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Carrier-to-noise density in dB-Hz.\n     *\n     * <p>Typical range: 10-50 dB-Hz. The range of possible C/N0 values is 0-63 dB-Hz to handle\n     * some edge cases.\n     *\n     * <p>The value contains the measured C/N0 for the signal at the antenna input.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCn0DbHz(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the carrier-to-noise density in dB-Hz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasBasebandCn0DbHz()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getBasebandCn0DbHz()} is available, {@code false} otherwise.\n     ",
    "links" : [ "#getBasebandCn0DbHz()" ]
  }, {
    "name" : "public double getBasebandCn0DbHz()",
    "returnType" : "double",
    "comment" : "\n     * Gets the baseband carrier-to-noise density in dB-Hz.\n     *\n     * <p>Typical range: 10-50 dB-Hz. The range of possible baseband C/N0 values is 0-63 dB-Hz to\n     * handle some edge cases.\n     *\n     * <p>The value contains the measured C/N0 for the signal at the baseband. This is typically\n     * a few dB weaker than the value estimated for C/N0 at the antenna port, which is reported\n     * in {@link #getCn0DbHz()}.\n     ",
    "links" : [ "#getCn0DbHz()" ]
  }, {
    "name" : "public void setBasebandCn0DbHz(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the baseband carrier-to-noise density in dB-Hz.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetBasebandCn0DbHz()",
    "returnType" : "void",
    "comment" : "\n     * Resets the baseband carrier-to-noise density in dB-Hz.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getPseudorangeRateMetersPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Pseudorange rate at the timestamp in m/s.\n     *\n     * <p>The error estimate for this value is\n     * {@link #getPseudorangeRateUncertaintyMetersPerSecond()}.\n     *\n     * <p>The value is uncorrected, i.e. corrections for receiver and satellite clock frequency\n     * errors are not included.\n     *\n     * <p>A positive 'uncorrected' value indicates that the SV is moving away from the receiver. The\n     * sign of the 'uncorrected' 'pseudorange rate' and its relation to the sign of 'doppler shift'\n     * is given by the equation:\n     *\n     * <pre>\n     *      pseudorange rate = -k * doppler shift   (where k is a constant)</pre>\n     ",
    "links" : [ "#getPseudorangeRateUncertaintyMetersPerSecond()" ]
  }, {
    "name" : "public void setPseudorangeRateMetersPerSecond(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pseudorange rate at the timestamp in m/s.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getPseudorangeRateUncertaintyMetersPerSecond()",
    "returnType" : "double",
    "comment" : "\n     * Gets the pseudorange's rate uncertainty (1-Sigma) in m/s.\n     *\n     * <p>The uncertainty is represented as an absolute (single sided) value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPseudorangeRateUncertaintyMetersPerSecond(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the pseudorange's rate uncertainty (1-Sigma) in m/s.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAccumulatedDeltaRangeState()",
    "returnType" : "int",
    "comment" : "\n     * Gets 'Accumulated Delta Range' state.\n     *\n     * <p>It indicates whether {@link #getAccumulatedDeltaRangeMeters()} is reset or there is a\n     * cycle slip (indicating 'loss of lock').\n     ",
    "links" : [ "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeState(@AdrState int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the 'Accumulated Delta Range' state.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getAccumulatedDeltaRangeStateString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'Accumulated Delta Range state'.\n     *\n     * <p>For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAccumulatedDeltaRangeMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the accumulated delta range since the last channel reset, in meters.\n     *\n     * <p>The error estimate for this value is {@link #getAccumulatedDeltaRangeUncertaintyMeters()}.\n     *\n     * <p>The availability of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     *\n     * <p>A positive value indicates that the SV is moving away from the receiver.\n     * The sign of {@link #getAccumulatedDeltaRangeMeters()} and its relation to the sign of\n     * {@link #getCarrierPhase()} is given by the equation:\n     *\n     * <pre>\n     *          accumulated delta range = -k * carrier phase    (where k is a constant)</pre>\n     *\n     * <p>Similar to the concept of an RTCM \"Phaserange\", when the accumulated delta range is\n     * initially chosen, and whenever it is reset, it will retain the integer nature\n     * of the relative carrier phase offset between satellites observed by this receiver, such that\n     * the double difference of this value between receivers and satellites may be used, together\n     * with integer ambiguity resolution, to determine highly precise relative location between\n     * receivers.\n     *\n     * <p>This includes ensuring that all half-cycle ambiguities are resolved before this value is\n     * reported as {@link #ADR_STATE_VALID}.\n     *\n     * <p>The alignment of the phase measurement will not be adjusted by the receiver so the\n     * in-phase and quadrature phase components will have a quarter cycle offset as they do when\n     * transmitted from the satellites. If the measurement is from a combination of the in-phase\n     * and quadrature phase components, then the alignment of the phase measurement will be aligned\n     * to the in-phase component.\n     ",
    "links" : [ "#getCarrierPhase()", "#ADR_STATE_VALID", "#getAccumulatedDeltaRangeUncertaintyMeters()", "#getAccumulatedDeltaRangeMeters()", "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the accumulated delta range in meters.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAccumulatedDeltaRangeUncertaintyMeters()",
    "returnType" : "double",
    "comment" : "\n     * Gets the accumulated delta range's uncertainty (1-Sigma) in meters.\n     *\n     * <p>The uncertainty is represented as an absolute (single sided) value.\n     *\n     * <p>The status of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     ",
    "links" : [ "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public void setAccumulatedDeltaRangeUncertaintyMeters(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the accumulated delta range's uncertainty (1-sigma) in meters.\n     *\n     * <p>The status of the value is represented by {@link #getAccumulatedDeltaRangeState()}.\n     *\n     * @hide\n     ",
    "links" : [ "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public boolean hasCarrierFrequencyHz()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getCarrierFrequencyHz()} is available, {@code false}\n     * otherwise.\n     ",
    "links" : [ "#getCarrierFrequencyHz()" ]
  }, {
    "name" : "public float getCarrierFrequencyHz()",
    "returnType" : "float",
    "comment" : "\n     * Gets the carrier frequency of the tracked signal.\n     *\n     * <p>For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz,\n     * L5 = 1176.45 MHz, varying GLO channels, etc. If the field is not set, it is the primary\n     * common use central frequency, e.g. L1 = 1575.45 MHz for GPS.\n     *\n     * <p> For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two raw\n     * measurement objects will be reported for this same satellite, in one of the measurement\n     * objects, all the values related to L1 will be filled, and in the other all of the values\n     * related to L5 will be filled.\n     *\n     * <p>The value is only available if {@link #hasCarrierFrequencyHz()} is {@code true}.\n     *\n     * @return the carrier frequency of the signal tracked in Hz.\n     ",
    "links" : [ "#hasCarrierFrequencyHz()" ]
  }, {
    "name" : "public void setCarrierFrequencyHz(float carrierFrequencyHz)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Carrier frequency in Hz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCarrierFrequencyHz()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Carrier frequency in Hz.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCarrierCycles()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getCarrierCycles()} is available, {@code false} otherwise.\n     * \n     * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n     ",
    "links" : [ "#getCarrierCycles()", "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public long getCarrierCycles()",
    "returnType" : "long",
    "comment" : "\n     * The number of full carrier cycles between the satellite and the receiver.\n     *\n     * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.\n     *\n     * <p>The value is only available if {@link #hasCarrierCycles()} is {@code true}.\n     *\n     * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.\n     ",
    "links" : [ "#getCarrierFrequencyHz()", "#getAccumulatedDeltaRangeMeters()", "#hasCarrierCycles()" ]
  }, {
    "name" : "public void setCarrierCycles(long value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the number of full carrier cycles between the satellite and the receiver.\n     *\n     * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * \n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeMeters(double)" ]
  }, {
    "name" : "public void resetCarrierCycles()",
    "returnType" : "void",
    "comment" : "\n     * Resets the number of full carrier cycles between the satellite and the receiver.\n     * \n     * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeMeters(double)" ]
  }, {
    "name" : "public boolean hasCarrierPhase()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getCarrierPhase()} is available, {@code false} otherwise.\n     * \n     * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n     ",
    "links" : [ "#getCarrierPhase()", "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public double getCarrierPhase()",
    "returnType" : "double",
    "comment" : "\n     * Gets the RF phase detected by the receiver.\n     *\n     * <p>Range: [0.0, 1.0].\n     *\n     * <p>This is the fractional part of the complete carrier phase measurement.\n     *\n     * <p>The reference frequency is given by the value of {@link #getCarrierFrequencyHz()}.\n     *\n     * <p>The error estimate for this value is {@link #getCarrierPhaseUncertainty()}.\n     *\n     * <p>The value is only available if {@link #hasCarrierPhase()} is {@code true}.\n     *\n     * @deprecated use {@link #getAccumulatedDeltaRangeMeters()} instead.\n     ",
    "links" : [ "#hasCarrierPhase()", "#getCarrierPhaseUncertainty()", "#getCarrierFrequencyHz()", "#getAccumulatedDeltaRangeMeters()" ]
  }, {
    "name" : "public void setCarrierPhase(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the RF phase detected by the receiver.\n     * \n     * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * \n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeMeters(double)" ]
  }, {
    "name" : "public void resetCarrierPhase()",
    "returnType" : "void",
    "comment" : "\n     * Resets the RF phase detected by the receiver.\n     * \n     * @deprecated use {@link #setAccumulatedDeltaRangeMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * \n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeMeters(double)" ]
  }, {
    "name" : "public boolean hasCarrierPhaseUncertainty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getCarrierPhaseUncertainty()} is available, {@code false}\n     * otherwise.\n     * \n     * @deprecated use {@link #getAccumulatedDeltaRangeState()} instead.\n     ",
    "links" : [ "#getCarrierPhaseUncertainty()", "#getAccumulatedDeltaRangeState()" ]
  }, {
    "name" : "public double getCarrierPhaseUncertainty()",
    "returnType" : "double",
    "comment" : "\n     * Gets the carrier-phase's uncertainty (1-Sigma).\n     *\n     * <p>The uncertainty is represented as an absolute (single sided) value.\n     *\n     * <p>The value is only available if {@link #hasCarrierPhaseUncertainty()} is {@code true}.\n     *\n     * @deprecated use {@link #getAccumulatedDeltaRangeUncertaintyMeters()} instead.\n     ",
    "links" : [ "#hasCarrierPhaseUncertainty()", "#getAccumulatedDeltaRangeUncertaintyMeters()" ]
  }, {
    "name" : "public void setCarrierPhaseUncertainty(double value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Carrier-phase's uncertainty (1-Sigma) in cycles.\n     * \n     * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * \n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeUncertaintyMeters(double)" ]
  }, {
    "name" : "public void resetCarrierPhaseUncertainty()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Carrier-phase's uncertainty (1-Sigma) in cycles.\n     * \n     * @deprecated use {@link #setAccumulatedDeltaRangeUncertaintyMeters(double)}\n     * and {@link #setAccumulatedDeltaRangeState(int)} instead.\n     * \n     * @hide\n     ",
    "links" : [ "#setAccumulatedDeltaRangeState(int)", "#setAccumulatedDeltaRangeUncertaintyMeters(double)" ]
  }, {
    "name" : "public int getMultipathIndicator()",
    "returnType" : "int",
    "comment" : "\n     * Gets a value indicating the 'multipath' state of the event.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMultipathIndicator(@MultipathIndicator int value)",
    "returnType" : "void",
    "comment" : "\n     * Sets the 'multi-path' indicator.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getMultipathIndicatorString()",
    "returnType" : "String",
    "comment" : "\n     * Gets a string representation of the 'multi-path indicator'.\n     *\n     * <p>For internal and logging use only.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSnrInDb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getSnrInDb()} is available, {@code false} otherwise.\n     ",
    "links" : [ "#getSnrInDb()" ]
  }, {
    "name" : "public double getSnrInDb()",
    "returnType" : "double",
    "comment" : "\n     * Gets the (post-correlation & integration) Signal-to-Noise ratio (SNR) in dB.\n     *\n     * <p>The value is only available if {@link #hasSnrInDb()} is {@code true}.\n     ",
    "links" : [ "#hasSnrInDb()" ]
  }, {
    "name" : "public void setSnrInDb(double snrInDb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Signal-to-noise ratio (SNR) in dB.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetSnrInDb()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Signal-to-noise ratio (SNR) in dB.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAutomaticGainControlLevelDb()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getAutomaticGainControlLevelDb()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getAutomaticGainControlLevelDb()" ]
  }, {
    "name" : "public double getAutomaticGainControlLevelDb()",
    "returnType" : "double",
    "comment" : "\n     * Gets the Automatic Gain Control level in dB.\n     *\n     * <p> AGC acts as a variable gain amplifier adjusting the power of the incoming signal. The AGC\n     * level may be used to indicate potential interference. When AGC is at a nominal level, this\n     * value must be set as 0. Higher gain (and/or lower input power) shall be output as a positive\n     * number. Hence in cases of strong jamming, in the band of this signal, this value will go more\n     * negative.\n     *\n     * <p> Note: Different hardware designs (e.g. antenna, pre-amplification, or other RF HW\n     * components) may also affect the typical output of of this value on any given hardware design\n     * in an open sky test - the important aspect of this output is that changes in this value are\n     * indicative of changes on input signal power in the frequency band for this measurement.\n     *\n     * <p> The value is only available if {@link #hasAutomaticGainControlLevelDb()} is {@code true}\n     ",
    "links" : [ "#hasAutomaticGainControlLevelDb()" ]
  }, {
    "name" : "public void setAutomaticGainControlLevelInDb(double agcLevelDb)",
    "returnType" : "void",
    "comment" : "\n     * Sets the Automatic Gain Control level in dB.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetAutomaticGainControlLevel()",
    "returnType" : "void",
    "comment" : "\n     * Resets the Automatic Gain Control level.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasCodeType()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getCodeType()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getCodeType()" ]
  }, {
    "name" : "public String getCodeType()",
    "returnType" : "String",
    "comment" : "\n     * Gets the GNSS measurement's code type.\n     *\n     * <p>Similar to the Attribute field described in RINEX 3.03, e.g., in Tables 4-10, and Table\n     * A2 at the RINEX 3.03 Update 1 Document.\n     *\n     * <p>Returns \"A\" for GALILEO E1A, GALILEO E6A, IRNSS L5A, IRNSS SA.\n     *\n     * <p>Returns \"B\" for GALILEO E1B, GALILEO E6B, IRNSS L5B, IRNSS SB.\n     *\n     * <p>Returns \"C\" for GPS L1 C/A,  GPS L2 C/A, GLONASS G1 C/A, GLONASS G2 C/A, GALILEO E1C,\n     * GALILEO E6C, SBAS L1 C/A, QZSS L1 C/A, IRNSS L5C.\n     *\n     * <p>Returns \"D\" for BDS B1C D.\n     *\n     * <p>Returns \"I\" for GPS L5 I, GLONASS G3 I, GALILEO E5a I, GALILEO E5b I, GALILEO E5a+b I,\n     * SBAS L5 I, QZSS L5 I, BDS B1 I, BDS B2 I, BDS B3 I.\n     *\n     * <p>Returns \"L\" for GPS L1C (P), GPS L2C (L), QZSS L1C (P), QZSS L2C (L), LEX(6) L.\n     *\n     * <p>Returns \"M\" for GPS L1M, GPS L2M.\n     *\n     * <p>Returns \"N\" for GPS L1 codeless, GPS L2 codeless.\n     *\n     * <p>Returns \"P\" for GPS L1P, GPS L2P, GLONASS G1P, GLONASS G2P, BDS B1C P.\n     *\n     * <p>Returns \"Q\" for GPS L5 Q, GLONASS G3 Q, GALILEO E5a Q, GALILEO E5b Q, GALILEO E5a+b Q,\n     * SBAS L5 Q, QZSS L5 Q, BDS B1 Q, BDS B2 Q, BDS B3 Q.\n     *\n     * <p>Returns \"S\" for GPS L1C (D), GPS L2C (M), QZSS L1C (D), QZSS L2C (M), LEX(6) S.\n     *\n     * <p>Returns \"W\" for GPS L1 Z-tracking, GPS L2 Z-tracking.\n     *\n     * <p>Returns \"X\" for GPS L1C (D+P), GPS L2C (M+L), GPS L5 (I+Q), GLONASS G3 (I+Q), GALILEO\n     * E1 (B+C), GALILEO E5a (I+Q), GALILEO E5b (I+Q), GALILEO E5a+b(I+Q), GALILEO E6 (B+C), SBAS\n     * L5 (I+Q), QZSS L1C (D+P), QZSS L2C (M+L), QZSS L5 (I+Q), LEX(6) (S+L), BDS B1 (I+Q), BDS\n     * B1C (D+P), BDS B2 (I+Q), BDS B3 (I+Q), IRNSS L5 (B+C).\n     *\n     * <p>Returns \"Y\" for GPS L1Y, GPS L2Y.\n     *\n     * <p>Returns \"Z\" for GALILEO E1 (A+B+C), GALILEO E6 (A+B+C), QZSS L1-SAIF.\n     *\n     * <p>Returns \"UNKNOWN\" if the GNSS Measurement's code type is unknown.\n     *\n     * <p>This is used to specify the observation descriptor defined in GNSS Observation Data File\n     * Header Section Description in the RINEX standard (Version 3.XX), in cases where the code type\n     * does not align with the above listed values. For example, if a code type \"G\" is added, this\n     * string shall be set to \"G\".\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCodeType(@NonNull String codeType)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS measurement's code type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetCodeType()",
    "returnType" : "void",
    "comment" : "\n     * Resets the GNSS measurement's code type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFullInterSignalBiasNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getFullInterSignalBiasNanos()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getFullInterSignalBiasNanos()" ]
  }, {
    "name" : "public double getFullInterSignalBiasNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the GNSS measurement's inter-signal bias in nanoseconds with sub-nanosecond accuracy.\n     *\n     * <p>This value is the sum of the estimated receiver-side and the space-segment-side\n     * inter-system bias, inter-frequency bias and inter-code bias, including:\n     *\n     * <ul>\n     * <li>Receiver inter-constellation bias (with respect to the constellation in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Receiver inter-frequency bias (with respect to the carrier frequency in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Receiver inter-code bias (with respect to the code type in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Master clock bias (e.g., GPS-GAL Time Offset (GGTO), GPS-UTC Time Offset (TauGps),\n     * BDS-GLO Time Offset (BGTO))(with respect to the constellation in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Group delay (e.g., Total Group Delay (TGD))</li>\n     * <li>Satellite inter-frequency bias (GLO only) (with respect to the carrier frequency in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Satellite inter-code bias (e.g., Differential Code Bias (DCB)) (with respect to the code\n     * type in {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * </ul>\n     *\n     * <p>If a component of the above is already compensated in the provided\n     * {@link GnssMeasurement#getReceivedSvTimeNanos()}, then it must not be included in the\n     * reported full ISB.\n     *\n     * <p>The value does not include the inter-frequency Ionospheric bias.\n     *\n     * <p>The value is only available if {@link #hasFullInterSignalBiasNanos()} is {@code true}.\n     ",
    "links" : [ "android.location.GnssMeasurement#getReceivedSvTimeNanos()", "#hasFullInterSignalBiasNanos()", "android.location.GnssClock#getReferenceConstellationTypeForIsb())" ]
  }, {
    "name" : "public void setFullInterSignalBiasNanos(double fullInterSignalBiasNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS measurement's inter-signal bias in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetFullInterSignalBiasNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the GNSS measurement's inter-signal bias in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasFullInterSignalBiasUncertaintyNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getFullInterSignalBiasUncertaintyNanos()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getFullInterSignalBiasUncertaintyNanos()" ]
  }, {
    "name" : "public double getFullInterSignalBiasUncertaintyNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the GNSS measurement's inter-signal bias uncertainty (1 sigma) in\n     * nanoseconds with sub-nanosecond accuracy.\n     *\n     * <p>The value is only available if {@link #hasFullInterSignalBiasUncertaintyNanos()} is\n     * {@code true}.\n     ",
    "links" : [ "#hasFullInterSignalBiasUncertaintyNanos()" ]
  }, {
    "name" : "public void setFullInterSignalBiasUncertaintyNanos(@FloatRange(from = 0.0) double fullInterSignalBiasUncertaintyNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS measurement's inter-signal bias uncertainty (1 sigma) in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetFullInterSignalBiasUncertaintyNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the GNSS measurement's inter-signal bias uncertainty (1 sigma) in\n     * nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSatelliteInterSignalBiasNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getSatelliteInterSignalBiasNanos()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getSatelliteInterSignalBiasNanos()" ]
  }, {
    "name" : "public double getSatelliteInterSignalBiasNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the GNSS measurement's satellite inter-signal bias in nanoseconds with sub-nanosecond\n     * accuracy.\n     *\n     * <p>This value is the space-segment-side inter-system bias, inter-frequency bias and\n     * inter-code bias, including:\n     *\n     * <ul>\n     * <li>Master clock bias (e.g., GPS-GAL Time Offset (GGTO), GPS-UTC Time Offset (TauGps),\n     * BDS-GLO Time Offset (BGTO))(with respect to the constellation in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Group delay (e.g., Total Group Delay (TGD))</li>\n     * <li>Satellite inter-frequency bias (GLO only) (with respect to the carrier frequency in\n     * {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * <li>Satellite inter-code bias (e.g., Differential Code Bias (DCB)) (with respect to the code\n     * type in {@link GnssClock#getReferenceConstellationTypeForIsb())</li>\n     * </ul>\n     *\n     * <p>The value is only available if {@link #hasSatelliteInterSignalBiasNanos()} is {@code\n     * true}.\n     ",
    "links" : [ "android.location.GnssClock#getReferenceConstellationTypeForIsb())", "#hasSatelliteInterSignalBiasNanos()" ]
  }, {
    "name" : "public void setSatelliteInterSignalBiasNanos(double satelliteInterSignalBiasNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS measurement's satellite inter-signal bias in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetSatelliteInterSignalBiasNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the GNSS measurement's satellite inter-signal bias in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasSatelliteInterSignalBiasUncertaintyNanos()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if {@link #getSatelliteInterSignalBiasUncertaintyNanos()} is available,\n     * {@code false} otherwise.\n     ",
    "links" : [ "#getSatelliteInterSignalBiasUncertaintyNanos()" ]
  }, {
    "name" : "public double getSatelliteInterSignalBiasUncertaintyNanos()",
    "returnType" : "double",
    "comment" : "\n     * Gets the GNSS measurement's satellite inter-signal bias uncertainty (1 sigma) in\n     * nanoseconds with sub-nanosecond accuracy.\n     *\n     * <p>The value is only available if {@link #hasSatelliteInterSignalBiasUncertaintyNanos()} is\n     * {@code true}.\n     ",
    "links" : [ "#hasSatelliteInterSignalBiasUncertaintyNanos()" ]
  }, {
    "name" : "public void setSatelliteInterSignalBiasUncertaintyNanos(@FloatRange(from = 0.0) double satelliteInterSignalBiasUncertaintyNanos)",
    "returnType" : "void",
    "comment" : "\n     * Sets the GNSS measurement's satellite inter-signal bias uncertainty (1 sigma) in nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetSatelliteInterSignalBiasUncertaintyNanos()",
    "returnType" : "void",
    "comment" : "\n     * Resets the GNSS measurement's satellite inter-signal bias uncertainty (1 sigma) in\n     * nanoseconds.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void initialize()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void resetFlag(int flag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isFlagSet(int flag)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFlags", "mSvid", "mConstellationType", "mTimeOffsetNanos", "mState", "mReceivedSvTimeNanos", "mReceivedSvTimeUncertaintyNanos", "mCn0DbHz", "mBasebandCn0DbHz", "mPseudorangeRateMetersPerSecond", "mPseudorangeRateUncertaintyMetersPerSecond", "mAccumulatedDeltaRangeState", "mAccumulatedDeltaRangeMeters", "mAccumulatedDeltaRangeUncertaintyMeters", "mCarrierFrequencyHz", "mCarrierCycles", "mCarrierPhase", "mCarrierPhaseUncertainty", "mMultipathIndicator", "mSnrInDb", "mAutomaticGainControlLevelInDb", "mCodeType", "mFullInterSignalBiasNanos", "mFullInterSignalBiasUncertaintyNanos", "mSatelliteInterSignalBiasNanos", "mSatelliteInterSignalBiasUncertaintyNanos", "HAS_NO_FLAGS", "HAS_CODE_TYPE", "HAS_BASEBAND_CN0", "MULTIPATH_INDICATOR_UNKNOWN", "MULTIPATH_INDICATOR_DETECTED", "MULTIPATH_INDICATOR_NOT_DETECTED", "STATE_UNKNOWN", "STATE_CODE_LOCK", "STATE_BIT_SYNC", "STATE_SUBFRAME_SYNC", "STATE_TOW_DECODED", "STATE_MSEC_AMBIGUOUS", "STATE_SYMBOL_SYNC", "STATE_GLO_STRING_SYNC", "STATE_GLO_TOD_DECODED", "STATE_BDS_D2_BIT_SYNC", "STATE_BDS_D2_SUBFRAME_SYNC", "STATE_GAL_E1BC_CODE_LOCK", "STATE_GAL_E1C_2ND_CODE_LOCK", "STATE_GAL_E1B_PAGE_SYNC", "STATE_SBAS_SYNC", "STATE_TOW_KNOWN", "STATE_GLO_TOD_KNOWN", "STATE_2ND_CODE_LOCK", "STATE_ALL", "ADR_STATE_UNKNOWN", "ADR_STATE_VALID", "ADR_STATE_RESET", "ADR_STATE_CYCLE_SLIP", "ADR_STATE_HALF_CYCLE_RESOLVED", "ADR_STATE_HALF_CYCLE_REPORTED", "ADR_STATE_ALL", "CREATOR" ],
  "methodNames" : [ "public void set(GnssMeasurement measurement)", "public void reset()", "public int getSvid()", "public void setSvid(int value)", "public int getConstellationType()", "public void setConstellationType(@GnssStatus.ConstellationType int value)", "public double getTimeOffsetNanos()", "public void setTimeOffsetNanos(double value)", "public int getState()", "public void setState(@State int value)", "private String getStateString()", "public long getReceivedSvTimeNanos()", "public void setReceivedSvTimeNanos(long value)", "public long getReceivedSvTimeUncertaintyNanos()", "public void setReceivedSvTimeUncertaintyNanos(long value)", "public double getCn0DbHz()", "public void setCn0DbHz(double value)", "public boolean hasBasebandCn0DbHz()", "public double getBasebandCn0DbHz()", "public void setBasebandCn0DbHz(double value)", "public void resetBasebandCn0DbHz()", "public double getPseudorangeRateMetersPerSecond()", "public void setPseudorangeRateMetersPerSecond(double value)", "public double getPseudorangeRateUncertaintyMetersPerSecond()", "public void setPseudorangeRateUncertaintyMetersPerSecond(double value)", "public int getAccumulatedDeltaRangeState()", "public void setAccumulatedDeltaRangeState(@AdrState int value)", "private String getAccumulatedDeltaRangeStateString()", "public double getAccumulatedDeltaRangeMeters()", "public void setAccumulatedDeltaRangeMeters(double value)", "public double getAccumulatedDeltaRangeUncertaintyMeters()", "public void setAccumulatedDeltaRangeUncertaintyMeters(double value)", "public boolean hasCarrierFrequencyHz()", "public float getCarrierFrequencyHz()", "public void setCarrierFrequencyHz(float carrierFrequencyHz)", "public void resetCarrierFrequencyHz()", "public boolean hasCarrierCycles()", "public long getCarrierCycles()", "public void setCarrierCycles(long value)", "public void resetCarrierCycles()", "public boolean hasCarrierPhase()", "public double getCarrierPhase()", "public void setCarrierPhase(double value)", "public void resetCarrierPhase()", "public boolean hasCarrierPhaseUncertainty()", "public double getCarrierPhaseUncertainty()", "public void setCarrierPhaseUncertainty(double value)", "public void resetCarrierPhaseUncertainty()", "public int getMultipathIndicator()", "public void setMultipathIndicator(@MultipathIndicator int value)", "private String getMultipathIndicatorString()", "public boolean hasSnrInDb()", "public double getSnrInDb()", "public void setSnrInDb(double snrInDb)", "public void resetSnrInDb()", "public boolean hasAutomaticGainControlLevelDb()", "public double getAutomaticGainControlLevelDb()", "public void setAutomaticGainControlLevelInDb(double agcLevelDb)", "public void resetAutomaticGainControlLevel()", "public boolean hasCodeType()", "public String getCodeType()", "public void setCodeType(@NonNull String codeType)", "public void resetCodeType()", "public boolean hasFullInterSignalBiasNanos()", "public double getFullInterSignalBiasNanos()", "public void setFullInterSignalBiasNanos(double fullInterSignalBiasNanos)", "public void resetFullInterSignalBiasNanos()", "public boolean hasFullInterSignalBiasUncertaintyNanos()", "public double getFullInterSignalBiasUncertaintyNanos()", "public void setFullInterSignalBiasUncertaintyNanos(@FloatRange(from = 0.0) double fullInterSignalBiasUncertaintyNanos)", "public void resetFullInterSignalBiasUncertaintyNanos()", "public boolean hasSatelliteInterSignalBiasNanos()", "public double getSatelliteInterSignalBiasNanos()", "public void setSatelliteInterSignalBiasNanos(double satelliteInterSignalBiasNanos)", "public void resetSatelliteInterSignalBiasNanos()", "public boolean hasSatelliteInterSignalBiasUncertaintyNanos()", "public double getSatelliteInterSignalBiasUncertaintyNanos()", "public void setSatelliteInterSignalBiasUncertaintyNanos(@FloatRange(from = 0.0) double satelliteInterSignalBiasUncertaintyNanos)", "public void resetSatelliteInterSignalBiasUncertaintyNanos()", "public void writeToParcel(Parcel parcel, int flags)", "public int describeContents()", "public String toString()", "private void initialize()", "private void setFlag(int flag)", "private void resetFlag(int flag)", "private boolean isFlagSet(int flag)" ]
}