{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/ConcurrentSkipListSet.java",
  "packageName" : "java.util.concurrent",
  "className" : "ConcurrentSkipListSet",
  "comment" : "\n * A scalable concurrent {@link NavigableSet} implementation based on\n * a {@link ConcurrentSkipListMap}.  The elements of the set are kept\n * sorted according to their {@linkplain Comparable natural ordering},\n * or by a {@link Comparator} provided at set creation time, depending\n * on which constructor is used.\n *\n * <p>This implementation provides expected average <i>log(n)</i> time\n * cost for the {@code contains}, {@code add}, and {@code remove}\n * operations and their variants.  Insertion, removal, and access\n * operations safely execute concurrently by multiple threads.\n *\n * <p>Iterators and spliterators are\n * <a href=\"package-summary.html#Weakly\"><i>weakly consistent</i></a>.\n *\n * <p>Ascending ordered views and their iterators are faster than\n * descending ones.\n *\n * <p>Beware that, unlike in most collections, the {@code size}\n * method is <em>not</em> a constant-time operation. Because of the\n * asynchronous nature of these sets, determining the current number\n * of elements requires a traversal of the elements, and so may report\n * inaccurate results if this collection is modified during traversal.\n *\n * <p>Bulk operations that add, remove, or examine multiple elements,\n * such as {@link #addAll}, {@link #removeIf} or {@link #forEach},\n * are <em>not</em> guaranteed to be performed atomically.\n * For example, a {@code forEach} traversal concurrent with an {@code\n * addAll} operation might observe only some of the added elements.\n *\n * <p>This class and its iterators implement all of the\n * <em>optional</em> methods of the {@link Set} and {@link Iterator}\n * interfaces. Like most other concurrent collection implementations,\n * this class does not permit the use of {@code null} elements,\n * because {@code null} arguments and return values cannot be reliably\n * distinguished from the absence of elements.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author Doug Lea\n * @param <E> the type of elements maintained by this set\n * @since 1.6\n ",
  "links" : [ "java.util.concurrent.ConcurrentSkipListMap", "#forEach", "java.util.Iterator", "java.util.AbstractSet", "java.util.NavigableSet", "java.util.Comparator", "#addAll", "#removeIf" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m",
    "type" : "ConcurrentNavigableMap<E, Object>",
    "comment" : "\n     * The underlying map. Uses Boolean.TRUE as value for each\n     * element.  This field is declared final for the sake of thread\n     * safety, which entails some ugliness in clone().\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ConcurrentSkipListSet<E> clone()",
    "returnType" : "ConcurrentSkipListSet<E>",
    "comment" : "\n     * Returns a shallow copy of this {@code ConcurrentSkipListSet}\n     * instance. (The elements themselves are not cloned.)\n     *\n     * @return a shallow copy of this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this set.  If this set\n     * contains more than {@code Integer.MAX_VALUE} elements, it\n     * returns {@code Integer.MAX_VALUE}.\n     *\n     * <p>Beware that, unlike in most collections, this method is\n     * <em>NOT</em> a constant-time operation. Because of the\n     * asynchronous nature of these sets, determining the current\n     * number of elements requires traversing them all to count them.\n     * Additionally, it is possible for the size to change during\n     * execution of this method, in which case the returned result\n     * will be inaccurate. Thus, this method is typically not very\n     * useful in concurrent applications.\n     *\n     * @return the number of elements in this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains no elements.\n     * @return {@code true} if this set contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this set contains the specified element.\n     * More formally, returns {@code true} if and only if this set\n     * contains an element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this set\n     * @return {@code true} if this set contains the specified element\n     * @throws ClassCastException if the specified element cannot be\n     *         compared with the elements currently in this set\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds the specified element to this set if it is not already present.\n     * More formally, adds the specified element {@code e} to this set if\n     * the set contains no element {@code e2} such that {@code e.equals(e2)}.\n     * If this set already contains the element, the call leaves the set\n     * unchanged and returns {@code false}.\n     *\n     * @param e element to be added to this set\n     * @return {@code true} if this set did not already contain the\n     *         specified element\n     * @throws ClassCastException if {@code e} cannot be compared\n     *         with the elements currently in this set\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the specified element from this set if it is present.\n     * More formally, removes an element {@code e} such that\n     * {@code o.equals(e)}, if this set contains such an element.\n     * Returns {@code true} if this set contained the element (or\n     * equivalently, if this set changed as a result of the call).\n     * (This set will not contain the element once the call returns.)\n     *\n     * @param o object to be removed from this set, if present\n     * @return {@code true} if this set contained the specified element\n     * @throws ClassCastException if {@code o} cannot be compared\n     *         with the elements currently in this set\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set in ascending order.\n     *\n     * @return an iterator over the elements in this set in ascending order\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this set in descending order.\n     *\n     * @return an iterator over the elements in this set in descending order\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this set for equality.  Returns\n     * {@code true} if the specified object is also a set, the two sets\n     * have the same size, and every member of the specified set is\n     * contained in this set (or equivalently, every member of this set is\n     * contained in the specified set).  This definition ensures that the\n     * equals method works properly across different implementations of the\n     * set interface.\n     *\n     * @param o the object to be compared for equality with this set\n     * @return {@code true} if the specified object is equal to this set\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this set all of its elements that are contained in\n     * the specified collection.  If the specified collection is also\n     * a set, this operation effectively modifies this set so that its\n     * value is the <i>asymmetric set difference</i> of the two sets.\n     *\n     * @param  c collection containing elements to be removed from this set\n     * @return {@code true} if this set changed as a result of the call\n     * @throws ClassCastException if the class of an element of this set\n     *         is incompatible with the specified collection\n     * (<a href=\"{@docRoot}/java.base/java/util/Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E lower(E e)",
    "returnType" : "E",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E floor(E e)",
    "returnType" : "E",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E ceiling(E e)",
    "returnType" : "E",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E higher(E e)",
    "returnType" : "E",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Comparator<? super E> comparator()",
    "returnType" : "Comparator<? super E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E first()",
    "returnType" : "E",
    "comment" : "\n     * @throws java.util.NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E last()",
    "returnType" : "E",
    "comment" : "\n     * @throws java.util.NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * set's comparison method determines the position of elements, so explicit positioning\n     * is not supported.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Throws {@code UnsupportedOperationException}. The encounter order induced by this\n     * set's comparison method determines the position of elements, so explicit positioning\n     * is not supported.\n     *\n     * @throws UnsupportedOperationException always\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code fromElement} or\n     *         {@code toElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> headSet(E toElement, boolean inclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code toElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> tailSet(E fromElement, boolean inclusive)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code fromElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> subSet(E fromElement, E toElement)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code fromElement} or\n     *         {@code toElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> headSet(E toElement)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code toElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> tailSet(E fromElement)",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * @throws ClassCastException {@inheritDoc}\n     * @throws NullPointerException if {@code fromElement} is null\n     * @throws IllegalArgumentException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public NavigableSet<E> descendingSet()",
    "returnType" : "NavigableSet<E>",
    "comment" : "\n     * Returns a reverse order view of the elements contained in this set.\n     * The descending set is backed by this set, so changes to the set are\n     * reflected in the descending set, and vice-versa.\n     *\n     * <p>The returned set has an ordering equivalent to\n     * {@link Collections#reverseOrder(Comparator) Collections.reverseOrder}{@code (comparator())}.\n     * The expression {@code s.descendingSet().descendingSet()} returns a\n     * view of {@code s} essentially equivalent to {@code s}.\n     *\n     * @return a reverse order view of this set\n     ",
    "links" : [ "java.util.Collections#reverseOrder(Comparator)" ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Returns a {@link Spliterator} over the elements in this set.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#CONCURRENT},\n     * {@link Spliterator#NONNULL}, {@link Spliterator#DISTINCT},\n     * {@link Spliterator#SORTED} and {@link Spliterator#ORDERED}, with an\n     * encounter order that is ascending order.  Overriding implementations\n     * should document the reporting of additional characteristic values.\n     *\n     * <p>The {@linkplain Spliterator#getComparator() spliterator's comparator}\n     * is {@code null} if the {@linkplain #comparator() set's comparator}\n     * is {@code null}.\n     * Otherwise, the spliterator's comparator is the same as or imposes the\n     * same total ordering as the set's comparator.\n     *\n     * @return a {@code Spliterator} over the elements in this set\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SORTED", "java.util.Spliterator#NONNULL", "java.util.Spliterator#DISTINCT", "java.util.Spliterator#CONCURRENT", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "private void setMap(ConcurrentNavigableMap<E, Object> map)",
    "returnType" : "void",
    "comment" : " Initializes map field; for use in clone. ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ConcurrentSkipListSet<E> clone()", "public int size()", "public boolean isEmpty()", "public boolean contains(Object o)", "public boolean add(E e)", "public boolean remove(Object o)", "public void clear()", "public Iterator<E> iterator()", "public Iterator<E> descendingIterator()", "public boolean equals(Object o)", "public boolean removeAll(Collection<?> c)", "public E lower(E e)", "public E floor(E e)", "public E ceiling(E e)", "public E higher(E e)", "public E pollFirst()", "public E pollLast()", "public Comparator<? super E> comparator()", "public E first()", "public E last()", "public void addFirst(E e)", "public void addLast(E e)", "public NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)", "public NavigableSet<E> headSet(E toElement, boolean inclusive)", "public NavigableSet<E> tailSet(E fromElement, boolean inclusive)", "public NavigableSet<E> subSet(E fromElement, E toElement)", "public NavigableSet<E> headSet(E toElement)", "public NavigableSet<E> tailSet(E fromElement)", "public NavigableSet<E> descendingSet()", "public Spliterator<E> spliterator()", "private void setMap(ConcurrentNavigableMap<E, Object> map)" ],
  "variableNames" : [ "serialVersionUID", "m" ]
}