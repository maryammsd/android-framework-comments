{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/MediaSyncEvent.java",
  "packageName" : "android.media",
  "className" : "MediaSyncEvent",
  "comment" : "\n * The MediaSyncEvent class defines events that can be used to synchronize playback or capture\n * actions between different players and recorders.\n * <p>For instance, {@link AudioRecord#startRecording(MediaSyncEvent)} is used to start capture\n * only when the playback on a particular audio session is complete.\n * The audio session ID is retrieved from a player (e.g {@link MediaPlayer}, {@link AudioTrack} or\n * {@link ToneGenerator}) by use of the getAudioSessionId() method.\n ",
  "variables" : [ {
    "name" : "SYNC_EVENT_NONE",
    "type" : "int",
    "comment" : "\n     * No sync event specified. When used with a synchronized playback or capture method, the\n     * behavior is equivalent to calling the corresponding non synchronized method.\n     ",
    "links" : [ ]
  }, {
    "name" : "SYNC_EVENT_PRESENTATION_COMPLETE",
    "type" : "int",
    "comment" : "\n     * The corresponding action is triggered only when the presentation is completed\n     * (meaning the media has been presented to the user) on the specified session.\n     * A synchronization of this type requires a source audio session ID to be set via\n     * {@link #setAudioSessionId(int)} method.\n     ",
    "links" : [ "#setAudioSessionId" ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioSession",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static MediaSyncEvent createEvent(int eventType) throws IllegalArgumentException",
    "returnType" : "MediaSyncEvent",
    "comment" : "\n     * Creates a synchronization event of the sepcified type.\n     *\n     * <p>The type specifies which kind of event is monitored.\n     * For instance, event {@link #SYNC_EVENT_PRESENTATION_COMPLETE} corresponds to the audio being\n     * presented to the user on a particular audio session.\n     * @param eventType the synchronization event type.\n     * @return the MediaSyncEvent created.\n     * @throws java.lang.IllegalArgumentException\n     ",
    "links" : [ "#SYNC_EVENT_PRESENTATION_COMPLETE" ]
  }, {
    "name" : "public MediaSyncEvent setAudioSessionId(int audioSessionId) throws IllegalArgumentException",
    "returnType" : "MediaSyncEvent",
    "comment" : "\n     * Sets the event source audio session ID.\n     *\n     * <p>The audio session ID specifies on which audio session the synchronization event should be\n     * monitored.\n     * It is mandatory for certain event types (e.g. {@link #SYNC_EVENT_PRESENTATION_COMPLETE}).\n     * For instance, the audio session ID can be retrieved via\n     * {@link MediaPlayer#getAudioSessionId()} when monitoring an event on a particular MediaPlayer.\n     * @param audioSessionId the audio session ID of the event source being monitored.\n     * @return the MediaSyncEvent the method is called on.\n     * @throws java.lang.IllegalArgumentException\n     ",
    "links" : [ "#SYNC_EVENT_PRESENTATION_COMPLETE", "MediaPlayer#getAudioSessionId" ]
  }, {
    "name" : "public int getType()",
    "returnType" : "int",
    "comment" : "\n     * Gets the synchronization event type.\n     *\n     * @return the synchronization event type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAudioSessionId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the synchronization event audio session ID.\n     *\n     * @return the synchronization audio session ID. The returned audio session ID is 0 if it has\n     * not been set.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidType(int type)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "SYNC_EVENT_NONE", "SYNC_EVENT_PRESENTATION_COMPLETE", "mType", "mAudioSession" ],
  "methodNames" : [ "public static MediaSyncEvent createEvent(int eventType) throws IllegalArgumentException", "public MediaSyncEvent setAudioSessionId(int audioSessionId) throws IllegalArgumentException", "public int getType()", "public int getAudioSessionId()", "private static boolean isValidType(int type)" ]
}