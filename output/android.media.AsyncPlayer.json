{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AsyncPlayer.java",
  "packageName" : "android.media",
  "className" : "AsyncPlayer",
  "comment" : "\n * Plays a series of audio URIs, but does all the hard work on another thread\n * so that any slowness with preparing or loading doesn't block the calling thread.\n ",
  "variables" : [ {
    "name" : "PLAY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STOP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDebug",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCmdQueue",
    "type" : "LinkedList<Command>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTag",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThread",
    "type" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPlayer",
    "type" : "MediaPlayer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWakeLock",
    "type" : "PowerManager.WakeLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "int",
    "comment" : " because of the asynchronous nature of this class.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void startSound(Command cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void play(Context context, Uri uri, boolean looping, int stream)",
    "returnType" : "void",
    "comment" : "\n     * Start playing the sound.  It will actually start playing at some\n     * point in the future.  There are no guarantees about latency here.\n     * Calling this before another audio file is done playing will stop\n     * that one and start the new one.\n     *\n     * @param context Your application's context.\n     * @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})\n     * @param looping Whether the audio should loop forever.  \n     *          (see {@link MediaPlayer#setLooping(boolean)})\n     * @param stream the AudioStream to use.\n     *          (see {@link MediaPlayer#setAudioStreamType(int)})\n     * @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead\n     ",
    "links" : [ "android.media.MediaPlayer#setDataSource(Context", "android.media.MediaPlayer#setAudioStreamType(int)", "android.media.MediaPlayer#setLooping(boolean)", "#play(Context" ]
  }, {
    "name" : "public void play(@NonNull Context context, @NonNull Uri uri, boolean looping, @NonNull AudioAttributes attributes) throws IllegalArgumentException",
    "returnType" : "void",
    "comment" : "\n     * Start playing the sound.  It will actually start playing at some\n     * point in the future.  There are no guarantees about latency here.\n     * Calling this before another audio file is done playing will stop\n     * that one and start the new one.\n     *\n     * @param context the non-null application's context.\n     * @param uri the non-null URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)})\n     * @param looping whether the audio should loop forever.\n     *          (see {@link MediaPlayer#setLooping(boolean)})\n     * @param attributes the non-null {@link AudioAttributes} to use.\n     *          (see {@link MediaPlayer#setAudioAttributes(AudioAttributes)})\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "android.media.MediaPlayer#setDataSource(Context", "android.media.MediaPlayer#setLooping(boolean)", "android.media.MediaPlayer#setAudioAttributes(AudioAttributes)", "android.media.AudioAttributes" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     * Stop a previously played sound.  It can't be played again or unpaused\n     * at this point.  Calling this multiple times has no ill effects.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void enqueueLocked(Command cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setUsesWakeLock(Context context)",
    "returnType" : "void",
    "comment" : "\n     * We want to hold a wake lock while we do the prepare and play.  The stop probably is\n     * optional, but it won't hurt to have it too.  The problem is that if you start a sound\n     * while you're holding a wake lock (e.g. an alarm starting a notification), you want the\n     * sound to play, but if the CPU turns off before mThread gets to work, it won't.  The\n     * simplest way to deal with this is to make it so there is a wake lock held while the\n     * thread is starting or running.  You're going to need the WAKE_LOCK permission if you're\n     * going to call this.\n     *\n     * This must be called before the first time play is called.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void acquireWakeLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseWakeLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "PLAY", "STOP", "mDebug", "mCmdQueue", "mTag", "mThread", "mPlayer", "mWakeLock", "mState" ],
  "methodNames" : [ "private void startSound(Command cmd)", "public void play(Context context, Uri uri, boolean looping, int stream)", "public void play(@NonNull Context context, @NonNull Uri uri, boolean looping, @NonNull AudioAttributes attributes) throws IllegalArgumentException", "public void stop()", "private void enqueueLocked(Command cmd)", "public void setUsesWakeLock(Context context)", "private void acquireWakeLock()", "private void releaseWakeLock()" ]
}