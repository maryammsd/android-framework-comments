{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/annotation/IncompleteAnnotationException.java",
  "packageName" : "java.lang.annotation",
  "className" : "IncompleteAnnotationException",
  "comment" : "\n * Thrown to indicate that a program has attempted to access an element of\n * an annotation interface that was added to the annotation interface definition\n * after the annotation was compiled (or serialized). This exception will not be\n * thrown if the new element has a default value.\n * This exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since 1.5\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "annotationType",
    "type" : "Class<? extends Annotation>",
    "comment" : "\n     * The annotation interface.\n     ",
    "links" : [ ]
  }, {
    "name" : "elementName",
    "type" : "String",
    "comment" : "\n     * The element name.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Class<? extends Annotation> annotationType()",
    "returnType" : "Class<? extends Annotation>",
    "comment" : "\n     * Returns the Class object for the annotation interface with the\n     * missing element.\n     *\n     * @return the Class object for the annotation interface with the\n     *     missing element\n     ",
    "links" : [ ]
  }, {
    "name" : "public String elementName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the missing element.\n     *\n     * @return the name of the missing element\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Class<? extends Annotation> annotationType()", "public String elementName()" ],
  "variableNames" : [ "serialVersionUID", "annotationType", "elementName" ]
}