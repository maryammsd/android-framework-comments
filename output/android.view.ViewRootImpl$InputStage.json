{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/ViewRootImpl.java",
  "packageName" : "android.view",
  "className" : "InputStage",
  "comment" : "\n     * Base class for implementing a stage in the chain of responsibility\n     * for processing input events.\n     * <p>\n     * Events are delivered to the stage by the {@link #deliver} method.  The stage\n     * then has the choice of finishing the event or forwarding it to the next stage.\n     * </p>\n     ",
  "links" : [ "#deliver" ],
  "variables" : [ {
    "name" : "mNext",
    "type" : "InputStage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FORWARD",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FINISH_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FINISH_NOT_HANDLED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTracePrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final void deliver(QueuedInputEvent q)",
    "returnType" : "void",
    "comment" : "\n         * Delivers an event to be processed.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void finish(QueuedInputEvent q, boolean handled)",
    "returnType" : "void",
    "comment" : "\n         * Marks the input event as finished then forwards it to the next stage.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void forward(QueuedInputEvent q)",
    "returnType" : "void",
    "comment" : "\n         * Forwards the event to the next stage.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void apply(QueuedInputEvent q, int result)",
    "returnType" : "void",
    "comment" : "\n         * Applies a result code from {@link #onProcess} to the specified event.\n         ",
    "links" : [ "#onProcess" ]
  }, {
    "name" : "protected int onProcess(QueuedInputEvent q)",
    "returnType" : "int",
    "comment" : "\n         * Called when an event is ready to be processed.\n         * @return A result code indicating how the event was handled.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void onDeliverToNext(QueuedInputEvent q)",
    "returnType" : "void",
    "comment" : "\n         * Called when an event is being delivered to the next stage.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected void onWindowFocusChanged(boolean hasWindowFocus)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void onDetachedFromWindow()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean shouldDropInputEvent(QueuedInputEvent q)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dump(String prefix, PrintWriter writer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean isBack(InputEvent event)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void traceEvent(QueuedInputEvent q, long traceTag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public final void deliver(QueuedInputEvent q)", "protected void finish(QueuedInputEvent q, boolean handled)", "protected void forward(QueuedInputEvent q)", "protected void apply(QueuedInputEvent q, int result)", "protected int onProcess(QueuedInputEvent q)", "protected void onDeliverToNext(QueuedInputEvent q)", "protected void onWindowFocusChanged(boolean hasWindowFocus)", "protected void onDetachedFromWindow()", "protected boolean shouldDropInputEvent(QueuedInputEvent q)", " void dump(String prefix, PrintWriter writer)", " boolean isBack(InputEvent event)", "private void traceEvent(QueuedInputEvent q, long traceTag)" ],
  "variableNames" : [ "mNext", "FORWARD", "FINISH_HANDLED", "FINISH_NOT_HANDLED", "mTracePrefix" ]
}