{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/drawable/AnimatedImageDrawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "AnimatedImageDrawable",
  "comment" : "\n * {@link Drawable} for drawing animated images (like GIF).\n *\n * <p>The framework handles decoding subsequent frames in another thread and\n * updating when necessary. The drawable will only animate while it is being\n * displayed.</p>\n *\n * <p>Created by {@link ImageDecoder#decodeDrawable}. A user needs to call\n * {@link #start} to start the animation.</p>\n *\n * <p>It can also be defined in XML using the <code>&lt;animated-image></code>\n * element.</p>\n *\n * @attr ref android.R.styleable#AnimatedImageDrawable_src\n * @attr ref android.R.styleable#AnimatedImageDrawable_autoStart\n * @attr ref android.R.styleable#AnimatedImageDrawable_repeatCount\n * @attr ref android.R.styleable#AnimatedImageDrawable_autoMirrored\n ",
  "variables" : [ {
    "name" : "mIntrinsicWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIntrinsicHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStarting",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mState",
    "type" : "State",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunnable",
    "type" : "Runnable",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColorFilter",
    "type" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "REPEAT_INFINITE",
    "type" : "int",
    "comment" : "\n     *  Pass this to {@link #setRepeatCount} to repeat infinitely.\n     *\n     *  <p>{@link Animatable2.AnimationCallback#onAnimationEnd} will never be\n     *  called unless there is an error.</p>\n     ",
    "links" : [ "#setRepeatCount", "Animatable2.AnimationCallback#onAnimationEnd" ]
  }, {
    "name" : "LOOP_INFINITE",
    "type" : "int",
    "comment" : " @removed\n     * @deprecated Replaced with REPEAT_INFINITE to match other APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "REPEAT_UNDEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "FINISHED",
    "type" : "int",
    "comment" : " nDraw returns -1 if the animation has finished.",
    "links" : [ ]
  }, {
    "name" : "mAnimationCallbacks",
    "type" : "ArrayList<Animatable2.AnimationCallback>",
    "comment" : " Animatable2 overrides",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setRepeatCount(@IntRange(from = REPEAT_INFINITE) int repeatCount)",
    "returnType" : "void",
    "comment" : "\n     *  Specify the number of times to repeat the animation.\n     *\n     *  <p>By default, the repeat count in the encoded data is respected. If set\n     *  to {@link #REPEAT_INFINITE}, the animation will repeat as long as it is\n     *  displayed. If the value is {@code 0}, the animation will play once.</p>\n     *\n     *  <p>This call replaces the current repeat count. If the encoded data\n     *  specified a repeat count of {@code 2} (meaning that\n     *  {@link #getRepeatCount()} returns {@code 2}, the animation will play\n     *  three times. Calling {@code setRepeatCount(1)} will result in playing only\n     *  twice and {@link #getRepeatCount()} returning {@code 1}.</p>\n     *\n     *  <p>If the animation is already playing, the iterations that have already\n     *  occurred count towards the new count. If the animation has already\n     *  repeated the appropriate number of times (or more), it will finish its\n     *  current iteration and then stop.</p>\n     ",
    "links" : [ "#REPEAT_INFINITE", "#getRepeatCount", "#getRepeatCount" ]
  }, {
    "name" : "public void setLoopCount(int loopCount)",
    "returnType" : "void",
    "comment" : " @removed\n     * @deprecated Replaced with setRepeatCount to match other APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRepeatCount()",
    "returnType" : "int",
    "comment" : "\n     *  Retrieve the number of times the animation will repeat.\n     *\n     *  <p>By default, the repeat count in the encoded data is respected. If the\n     *  value is {@link #REPEAT_INFINITE}, the animation will repeat as long as\n     *  it is displayed. If the value is {@code 0}, it will play once.</p>\n     *\n     *  <p>Calling {@link #setRepeatCount} will make future calls to this method\n     *  return the value passed to {@link #setRepeatCount}.</p>\n     ",
    "links" : [ "#REPEAT_INFINITE", "#setRepeatCount", "#setRepeatCount" ]
  }, {
    "name" : "public int getLoopCount(int loopCount)",
    "returnType" : "int",
    "comment" : " @removed\n     * @deprecated Replaced with getRepeatCount to match other APIs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateStateFromTypedArray(TypedArray a, int srcDensityOverride) throws XmlPullParserException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getIntrinsicHeight()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void draw(@NonNull Canvas canvas)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAlpha(@IntRange(from = 0, to = 255) int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getAlpha()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setColorFilter(@Nullable ColorFilter colorFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ColorFilter getColorFilter()",
    "returnType" : "ColorFilter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOpacity()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoMirrored(boolean mirrored)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onLayoutDirectionChanged(int layoutDirection)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final boolean isAutoMirrored()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isRunning()",
    "returnType" : "boolean",
    "comment" : "\n     *  Return whether the animation is currently running.\n     *\n     *  <p>When this drawable is created, this will return {@code false}. A client\n     *  needs to call {@link #start} to start the animation.</p>\n     ",
    "links" : [ "#start" ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "\n     *  Start the animation.\n     *\n     *  <p>Does nothing if the animation is already running. If the animation is stopped,\n     *  this will reset it.</p>\n     *\n     *  <p>When the drawable is drawn, starting the animation,\n     *  {@link Animatable2.AnimationCallback#onAnimationStart} will be called.</p>\n     ",
    "links" : [ "Animatable2.AnimationCallback#onAnimationStart" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : "\n     *  Stop the animation.\n     *\n     *  <p>If the animation is stopped, it will continue to display the frame\n     *  it was displaying when stopped.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerAnimationCallback(@NonNull AnimationCallback callback)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean unregisterAnimationCallback(@NonNull AnimationCallback callback)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void clearAnimationCallbacks()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postOnAnimationStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void postOnAnimationEnd()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onAnimationEnd()",
    "returnType" : "void",
    "comment" : "\n     *  Called by JNI.\n     *\n     *  The JNI code has already posted this to the thread that created the\n     *  callback, so no need to post.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native long nCreate(long nativeImageDecoder, @Nullable ImageDecoder decoder, int width, int height, long colorSpaceHandle, boolean extended, Rect cropRect) throws IOException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nGetNativeFinalizer()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nDraw(long nativePtr, long canvasNativePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetAlpha(long nativePtr, int alpha)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetAlpha(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetColorFilter(long nativePtr, long nativeFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nIsRunning(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nStart(long nativePtr)",
    "returnType" : "boolean",
    "comment" : " Return whether the animation started.",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nStop(long nativePtr)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nGetRepeatCount(long nativePtr)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetRepeatCount(long nativePtr, int repeatCount)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetOnAnimationEndListener(long nativePtr, @Nullable AnimatedImageDrawable drawable)",
    "returnType" : "void",
    "comment" : " Pass the drawable down to native so it can call onAnimationEnd.",
    "links" : [ ]
  }, {
    "name" : "private static native long nNativeByteSize(long nativePtr)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nSetMirrored(long nativePtr, boolean mirror)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mIntrinsicWidth", "mIntrinsicHeight", "mStarting", "mHandler", "mState", "mRunnable", "mColorFilter", "REPEAT_INFINITE", "LOOP_INFINITE", "REPEAT_UNDEFINED", "FINISHED", "mAnimationCallbacks" ],
  "methodNames" : [ "public void setRepeatCount(@IntRange(from = REPEAT_INFINITE) int repeatCount)", "public void setLoopCount(int loopCount)", "public int getRepeatCount()", "public int getLoopCount(int loopCount)", "public void inflate(Resources r, XmlPullParser parser, AttributeSet attrs, Theme theme) throws XmlPullParserException, IOException", "private void updateStateFromTypedArray(TypedArray a, int srcDensityOverride) throws XmlPullParserException", "public int getIntrinsicWidth()", "public int getIntrinsicHeight()", "public void draw(@NonNull Canvas canvas)", "public void setAlpha(@IntRange(from = 0, to = 255) int alpha)", "public int getAlpha()", "public void setColorFilter(@Nullable ColorFilter colorFilter)", "public ColorFilter getColorFilter()", "public int getOpacity()", "public void setAutoMirrored(boolean mirrored)", "public boolean onLayoutDirectionChanged(int layoutDirection)", "public final boolean isAutoMirrored()", "public boolean isRunning()", "public void start()", "public void stop()", "public void registerAnimationCallback(@NonNull AnimationCallback callback)", "public boolean unregisterAnimationCallback(@NonNull AnimationCallback callback)", "public void clearAnimationCallbacks()", "private void postOnAnimationStart()", "private void postOnAnimationEnd()", "private Handler getHandler()", "private void onAnimationEnd()", "private static native long nCreate(long nativeImageDecoder, @Nullable ImageDecoder decoder, int width, int height, long colorSpaceHandle, boolean extended, Rect cropRect) throws IOException", "private static native long nGetNativeFinalizer()", "private static native long nDraw(long nativePtr, long canvasNativePtr)", "private static native void nSetAlpha(long nativePtr, int alpha)", "private static native int nGetAlpha(long nativePtr)", "private static native void nSetColorFilter(long nativePtr, long nativeFilter)", "private static native boolean nIsRunning(long nativePtr)", "private static native boolean nStart(long nativePtr)", "private static native boolean nStop(long nativePtr)", "private static native int nGetRepeatCount(long nativePtr)", "private static native void nSetRepeatCount(long nativePtr, int repeatCount)", "private static native void nSetOnAnimationEndListener(long nativePtr, @Nullable AnimatedImageDrawable drawable)", "private static native long nNativeByteSize(long nativePtr)", "private static native void nSetMirrored(long nativePtr, boolean mirror)" ]
}