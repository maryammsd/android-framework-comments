{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/job/JobScheduler.java",
  "packageName" : "android.app.job",
  "className" : "JobScheduler",
  "comment" : "\n * This is an API for scheduling various types of jobs against the framework that will be executed\n * in your application's own process.\n * <p>\n * See {@link android.app.job.JobInfo} for more description of the types of jobs that can be run\n * and how to construct them. You will construct these JobInfo objects and pass them to the\n * JobScheduler with {@link #schedule(JobInfo)}. When the criteria declared are met, the\n * system will execute this job on your application's {@link android.app.job.JobService}.\n * You identify the service component that implements the logic for your job when you\n * construct the JobInfo using\n * {@link android.app.job.JobInfo.Builder#Builder(int,android.content.ComponentName)}.\n * </p>\n * <p>\n * The framework will be intelligent about when it executes jobs, and attempt to batch\n * and defer them as much as possible. Typically, if you don't specify a deadline on a job, it\n * can be run at any moment depending on the current state of the JobScheduler's internal queue.\n * </p>\n * <p>\n * Starting in Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n * JobScheduler may try to optimize job execution by shifting execution to times with more available\n * system resources in order to lower user impact. Factors in system health include sufficient\n * battery, idle, charging, and access to an un-metered network. Jobs will initially be treated as\n * if they have all these requirements, but as their deadlines approach, restrictions will become\n * less strict. Requested requirements will not be affected by this change.\n * </p>\n *\n * {@see android.app.job.JobInfo.Builder#setRequiresBatteryNotLow(boolean)}\n * {@see android.app.job.JobInfo.Builder#setRequiresDeviceIdle(boolean)}\n * {@see android.app.job.JobInfo.Builder#setRequiresCharging(boolean)}\n * {@see android.app.job.JobInfo.Builder#setRequiredNetworkType(int)}\n *\n * <p>\n * While a job is running, the system holds a wakelock on behalf of your app.  For this reason,\n * you do not need to take any action to guarantee that the device stays awake for the\n * duration of the job.\n * </p>\n * <p>You do not\n * instantiate this class directly; instead, retrieve it through\n * {@link android.content.Context#getSystemService\n * Context.getSystemService(Context.JOB_SCHEDULER_SERVICE)}.\n *\n * <p> Prior to Android version {@link android.os.Build.VERSION_CODES#S}, jobs could only have\n * a maximum of 100 jobs scheduled at a time. Starting with Android version\n * {@link android.os.Build.VERSION_CODES#S}, that limit has been increased to 150.\n * Expedited jobs also count towards the limit.\n *\n * <p> In Android version {@link android.os.Build.VERSION_CODES#LOLLIPOP}, jobs had a maximum\n * execution time of one minute. Starting with Android version\n * {@link android.os.Build.VERSION_CODES#M} and ending with Android version\n * {@link android.os.Build.VERSION_CODES#R}, jobs had a maximum execution time of 10 minutes.\n * Starting from Android version {@link android.os.Build.VERSION_CODES#S}, jobs will still be\n * stopped after 10 minutes if the system is busy or needs the resources, but if not, jobs\n * may continue running longer than 10 minutes.\n *\n * <p class=\"caution\"><strong>Note:</strong> Beginning with API 30\n * ({@link android.os.Build.VERSION_CODES#R}), JobScheduler will throttle runaway applications.\n * Calling {@link #schedule(JobInfo)} and other such methods with very high frequency can have a\n * high cost and so, to make sure the system doesn't get overwhelmed, JobScheduler will begin\n * to throttle apps, regardless of target SDK version.\n ",
  "links" : [ "android.app.job.JobInfo.Builder#Builder(int", "android.app.job.JobService", "android.os.Build.VERSION_CODES#R", "android.os.Build.VERSION_CODES#LOLLIPOP", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.os.Build.VERSION_CODES#S", "android.content.Context#getSystemServiceContext.getSystemService(Context.JOB_SCHEDULER_SERVICE)", "android.app.job.JobInfo", "#schedule(JobInfo)", "android.os.Build.VERSION_CODES#M" ],
  "variables" : [ {
    "name" : "THROW_ON_INVALID_DATA_TRANSFER_IMPLEMENTATION",
    "type" : "long",
    "comment" : "\n     * Whether to throw an exception when an app doesn't properly implement all the necessary\n     * data transfer APIs.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "RESULT_FAILURE",
    "type" : "int",
    "comment" : "\n     * Returned from {@link #schedule(JobInfo)} if a job wasn't scheduled successfully. Scheduling\n     * can fail for a variety of reasons, including, but not limited to:\n     * <ul>\n     * <li>an invalid parameter was supplied (eg. the run-time for your job is too short, or the\n     * system can't resolve the requisite {@link JobService} in your package)</li>\n     * <li>the app has too many jobs scheduled</li>\n     * <li>the app has tried to schedule too many jobs in a short amount of time</li>\n     * </ul>\n     * Attempting to schedule the job again immediately after receiving this result will not\n     * guarantee a successful schedule.\n     ",
    "links" : [ "android.app.job.JobService", "#schedule(JobInfo)" ]
  }, {
    "name" : "RESULT_SUCCESS",
    "type" : "int",
    "comment" : "\n     * Returned from {@link #schedule(JobInfo)} if this job has been successfully scheduled.\n     ",
    "links" : [ "#schedule(JobInfo)" ]
  }, {
    "name" : "PENDING_JOB_REASON_INVALID_JOB_ID",
    "type" : "int",
    "comment" : " The job doesn't exist. ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_EXECUTING",
    "type" : "int",
    "comment" : " The job is currently running and is therefore not pending. ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_UNDEFINED",
    "type" : "int",
    "comment" : "\n     * There is no known reason why the job is pending.\n     * If additional reasons are added on newer Android versions, the system may return this reason\n     * to apps whose target SDK is not high enough to expect that reason.\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_APP",
    "type" : "int",
    "comment" : "\n     * The app is in a state that prevents the job from running\n     * (eg. the {@link JobService} component is disabled).\n     ",
    "links" : [ "android.app.job.JobService" ]
  }, {
    "name" : "PENDING_JOB_REASON_APP_STANDBY",
    "type" : "int",
    "comment" : "\n     * The current standby bucket prevents the job from running.\n     *\n     * @see UsageStatsManager#STANDBY_BUCKET_RESTRICTED\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_BACKGROUND_RESTRICTION",
    "type" : "int",
    "comment" : "\n     * The app is restricted from running in the background.\n     *\n     * @see ActivityManager#isBackgroundRestricted()\n     * @see PackageManager#isInstantApp()\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_BATTERY_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * The requested battery-not-low constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresBatteryNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_CHARGING",
    "type" : "int",
    "comment" : "\n     * The requested charging constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresCharging(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_CONNECTIVITY",
    "type" : "int",
    "comment" : "\n     * The requested connectivity constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#setRequiredNetwork(NetworkRequest)\n     * @see JobInfo.Builder#setRequiredNetworkType(int)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_CONTENT_TRIGGER",
    "type" : "int",
    "comment" : "\n     * The requested content trigger constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#addTriggerContentUri(JobInfo.TriggerContentUri)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_DEVICE_IDLE",
    "type" : "int",
    "comment" : "\n     * The requested idle constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresDeviceIdle(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_MINIMUM_LATENCY",
    "type" : "int",
    "comment" : "\n     * The minimum latency has not transpired.\n     *\n     * @see JobInfo.Builder#setMinimumLatency(long)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_PREFETCH",
    "type" : "int",
    "comment" : "\n     * The system's estimate of when the app will be launched is far away enough to warrant delaying\n     * this job.\n     *\n     * @see JobInfo#isPrefetch()\n     * @see JobInfo.Builder#setPrefetch(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_CONSTRAINT_STORAGE_NOT_LOW",
    "type" : "int",
    "comment" : "\n     * The requested storage-not-low constraint is not satisfied.\n     *\n     * @see JobInfo.Builder#setRequiresStorageNotLow(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_DEVICE_STATE",
    "type" : "int",
    "comment" : "\n     * The job is being deferred due to the device state (eg. Doze, battery saver, memory usage,\n     * thermal status, etc.).\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_JOB_SCHEDULER_OPTIMIZATION",
    "type" : "int",
    "comment" : "\n     * JobScheduler thinks it can defer this job to a more optimal running time.\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_QUOTA",
    "type" : "int",
    "comment" : "\n     * The app has consumed all of its current quota.\n     *\n     * @see UsageStatsManager#getAppStandbyBucket()\n     * @see JobParameters#STOP_REASON_QUOTA\n     ",
    "links" : [ ]
  }, {
    "name" : "PENDING_JOB_REASON_USER",
    "type" : "int",
    "comment" : "\n     * JobScheduler is respecting one of the user's actions (eg. force stop or adb shell commands)\n     * to defer this job.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public JobScheduler forNamespace(@NonNull String namespace)",
    "returnType" : "JobScheduler",
    "comment" : "\n     * Get a JobScheduler instance that is dedicated to a specific namespace. Any API calls using\n     * this instance will interact with jobs in that namespace, unless the API documentation says\n     * otherwise. Attempting to update a job scheduled in another namespace will not be possible\n     * but will instead create or update the job inside the current namespace. A JobScheduler\n     * instance dedicated to a namespace must be used to schedule or update jobs in that namespace.\n     *\n     * <p class=\"note\">Since leading and trailing whitespace can lead to hard-to-debug issues,\n     * they will be {@link String#trim() trimmed}. An empty String (after trimming) is not allowed.\n     * @see #getNamespace()\n     ",
    "links" : [ "#trim()" ]
  }, {
    "name" : "public String getNamespace()",
    "returnType" : "String",
    "comment" : "\n     * Get the namespace this JobScheduler instance is operating in. A {@code null} value means\n     * that the app has not specified a namespace for this instance, and it is therefore using the\n     * default namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String sanitizeNamespace(@Nullable String namespace)",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public abstract int schedule(@NonNull JobInfo job)",
    "returnType" : "int",
    "comment" : "\n     * Schedule a job to be executed.  Will replace any currently scheduled job with the same\n     * ID with the new information in the {@link JobInfo}.  If a job with the given ID is currently\n     * running, it will be stopped.\n     *\n     * <p class=\"caution\"><strong>Note:</strong> Scheduling a job can have a high cost, even if it's\n     * rescheduling the same job and the job didn't execute, especially on platform versions before\n     * version {@link android.os.Build.VERSION_CODES#Q}. As such, the system may throttle calls to\n     * this API if calls are made too frequently in a short amount of time.\n     *\n     * <p>Note: The JobService component needs to be enabled in order to successfully schedule a\n     * job.\n     *\n     * @param job The job you wish scheduled. See\n     * {@link android.app.job.JobInfo.Builder JobInfo.Builder} for more detail on the sorts of jobs\n     * you can schedule.\n     * @return the result of the schedule request.\n     * @throws IllegalArgumentException if the specified {@link JobService} doesn't exist or is\n     * disabled.\n     ",
    "links" : [ "android.app.job.JobService", "android.os.Build.VERSION_CODES#Q", "android.app.job.JobInfo", "android.app.job.JobInfo.Builder" ]
  }, {
    "name" : "public abstract int enqueue(@NonNull JobInfo job, @NonNull JobWorkItem work)",
    "returnType" : "int",
    "comment" : "\n     * Similar to {@link #schedule}, but allows you to enqueue work for a new <em>or existing</em>\n     * job.  If a job with the same ID is already scheduled, it will be replaced with the\n     * new {@link JobInfo}, but any previously enqueued work will remain and be dispatched the\n     * next time it runs.  If a job with the same ID is already running, the new work will be\n     * enqueued for it without stopping the job.\n     *\n     * <p>The work you enqueue is later retrieved through\n     * {@link JobParameters#dequeueWork() JobParameters.dequeueWork}.  Be sure to see there\n     * about how to process work; the act of enqueueing work changes how you should handle the\n     * overall lifecycle of an executing job.</p>\n     *\n     * <p>It is strongly encouraged that you use the same {@link JobInfo} for all work you\n     * enqueue.  This will allow the system to optimally schedule work along with any pending\n     * and/or currently running work.  If the JobInfo changes from the last time the job was\n     * enqueued, the system will need to update the associated JobInfo, which can cause a disruption\n     * in execution.  In particular, this can result in any currently running job that is processing\n     * previous work to be stopped and restarted with the new JobInfo.</p>\n     *\n     * <p>It is recommended that you avoid using\n     * {@link JobInfo.Builder#setExtras(PersistableBundle)} or\n     * {@link JobInfo.Builder#setTransientExtras(Bundle)} with a JobInfo you are using to\n     * enqueue work.  The system will try to compare these extras with the previous JobInfo,\n     * but there are situations where it may get this wrong and count the JobInfo as changing.\n     * (That said, you should be relatively safe with a simple set of consistent data in these\n     * fields.)  You should never use {@link JobInfo.Builder#setClipData(ClipData, int)} with\n     * work you are enqueuing, since currently this will always be treated as a different JobInfo,\n     * even if the ClipData contents are exactly the same.</p>\n     *\n     * <p class=\"caution\"><strong>Note:</strong> Scheduling a job can have a high cost, even if it's\n     * rescheduling the same job and the job didn't execute, especially on platform versions before\n     * version {@link android.os.Build.VERSION_CODES#Q}. As such, the system may throttle calls to\n     * this API if calls are made too frequently in a short amount of time.\n     *\n     * <p class=\"caution\"><strong>Note:</strong> Prior to Android version\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, JobWorkItems could not be persisted.\n     * Apps were not allowed to enqueue JobWorkItems with persisted jobs and the system would throw\n     * an {@link IllegalArgumentException} if they attempted to do so. Starting with\n     * {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE},\n     * JobWorkItems can be persisted alongside the hosting job.\n     * However, Intents cannot be persisted. Set a {@link PersistableBundle} using\n     * {@link JobWorkItem.Builder#setExtras(PersistableBundle)} for any information that needs\n     * to be persisted.\n     *\n     * <p>Note: The JobService component needs to be enabled in order to successfully schedule a\n     * job.\n     *\n     * @param job The job you wish to enqueue work for. See\n     * {@link android.app.job.JobInfo.Builder JobInfo.Builder} for more detail on the sorts of jobs\n     * you can schedule.\n     * @param work New work to enqueue.  This will be available later when the job starts running.\n     * @return the result of the enqueue request.\n     * @throws IllegalArgumentException if the specified {@link JobService} doesn't exist or is\n     * disabled.\n     ",
    "links" : [ "JobWorkItem.Builder#setExtras(PersistableBundle)", "JobInfo.Builder#setClipData(ClipData", "JobInfo.Builder#setTransientExtras(Bundle)", "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "android.app.job.JobService", "android.os.Build.VERSION_CODES#Q", "android.os.PersistableBundle", "android.app.job.JobInfo", "#schedule", "android.app.job.JobParameters#dequeueWork()", "IllegalArgumentException", "JobInfo.Builder#setExtras(PersistableBundle)", "android.app.job.JobInfo.Builder" ]
  }, {
    "name" : "public abstract int scheduleAsPackage(@NonNull JobInfo job, @NonNull String packageName, int userId, String tag)",
    "returnType" : "int",
    "comment" : "\n     *\n     * @param job The job to be scheduled.\n     * @param packageName The package on behalf of which the job is to be scheduled. This will be\n     *                    used to track battery usage and appIdleState.\n     * @param userId    User on behalf of whom this job is to be scheduled.\n     * @param tag Debugging tag for dumps associated with this job (instead of the service class)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void cancel(int jobId)",
    "returnType" : "void",
    "comment" : "\n     * Cancel the specified job.  If the job is currently executing, it is stopped\n     * immediately and the return value from its {@link JobService#onStopJob(JobParameters)}\n     * method is ignored.\n     *\n     * @param jobId unique identifier for the job to be canceled, as supplied to\n     *     {@link JobInfo.Builder#Builder(int, android.content.ComponentName)\n     *     JobInfo.Builder(int, android.content.ComponentName)}.\n     ",
    "links" : [ "android.app.job.JobService#onStopJob(JobParameters)", "JobInfo.Builder#Builder(int" ]
  }, {
    "name" : "public abstract void cancelAll()",
    "returnType" : "void",
    "comment" : "\n     * Cancel all jobs that have been scheduled in the current namespace by the\n     * calling application.\n     *\n     * <p>\n     * Starting with Android version {@link android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE}, this\n     * will only cancel within the current namespace. If a namespace hasn't been explicitly set\n     * with {@link #forNamespace(String)}, then this will cancel jobs in the default namespace.\n     * To cancel all jobs scheduled by the application,\n     * use {@link #cancelInAllNamespaces()} instead.\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#UPSIDE_DOWN_CAKE", "#forNamespace(String)", "#cancelInAllNamespaces()" ]
  }, {
    "name" : "public void cancelInAllNamespaces()",
    "returnType" : "void",
    "comment" : "\n     * Cancel <em>all</em> jobs that have been scheduled by the calling application, regardless of\n     * namespace.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract List<JobInfo> getAllPendingJobs()",
    "returnType" : "List<JobInfo>",
    "comment" : "\n     * Retrieve all jobs that have been scheduled by the calling application.\n     *\n     * @return a list of all of the app's scheduled jobs.  This includes jobs that are\n     *     currently started as well as those that are still waiting to run.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, List<JobInfo>> getPendingJobsInAllNamespaces()",
    "returnType" : "Map<String, List<JobInfo>>",
    "comment" : "\n     * Retrieve all jobs that have been scheduled by the calling application within the current\n     * namespace.\n     *\n     * @return a list of all of the app's scheduled jobs scheduled with the current namespace.\n     * If a namespace hasn't been explicitly set with {@link #forNamespace(String)},\n     * then this will return jobs in the default namespace.\n     * This includes jobs that are currently started as well as those that are still waiting to run.\n     ",
    "links" : [ "#forNamespace(String)" ]
  }, {
    "name" : "public abstract JobInfo getPendingJob(int jobId)",
    "returnType" : "JobInfo",
    "comment" : "\n     * Look up the description of a scheduled job.\n     *\n     * @return The {@link JobInfo} description of the given scheduled job, or {@code null}\n     *     if the supplied job ID does not correspond to any job.\n     ",
    "links" : [ "android.app.job.JobInfo" ]
  }, {
    "name" : "public int getPendingJobReason(int jobId)",
    "returnType" : "int",
    "comment" : "\n     * Returns a reason why the job is pending and not currently executing. If there are multiple\n     * reasons why a job may be pending, this will only return one of them.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canRunUserInitiatedJobs()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the calling app currently holds the\n     * {@link android.Manifest.permission#RUN_USER_INITIATED_JOBS} permission, allowing it to run\n     * user-initiated jobs.\n     ",
    "links" : [ "android.Manifest.permission#RUN_USER_INITIATED_JOBS" ]
  }, {
    "name" : "public boolean hasRunUserInitiatedJobsPermission(@NonNull String packageName, @UserIdInt int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the app currently holds the\n     * {@link android.Manifest.permission#RUN_USER_INITIATED_JOBS} permission, allowing it to run\n     * user-initiated jobs.\n     * @hide\n     * TODO(255371817): consider exposing this to apps who could call\n     * {@link #scheduleAsPackage(JobInfo, String, int, String)}\n     ",
    "links" : [ "android.Manifest.permission#RUN_USER_INITIATED_JOBS", "#scheduleAsPackage(JobInfo" ]
  }, {
    "name" : "public List<JobInfo> getStartedJobs()",
    "returnType" : "List<JobInfo>",
    "comment" : "\n     * <b>For internal system callers only!</b>\n     * Returns a list of all currently-executing jobs.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<JobSnapshot> getAllJobSnapshots()",
    "returnType" : "List<JobSnapshot>",
    "comment" : "\n     * <b>For internal system callers only!</b>\n     * Returns a snapshot of the state of all jobs known to the system.\n     *\n     * <p class=\"note\">This is a slow operation, so it should be called sparingly.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerUserVisibleJobObserver(@NonNull IUserVisibleJobObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void unregisterUserVisibleJobObserver(@NonNull IUserVisibleJobObserver observer)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void notePendingUserRequestedAppStop(@NonNull String packageName, int userId, @Nullable String debugReason)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public JobScheduler forNamespace(@NonNull String namespace)", "public String getNamespace()", "public static String sanitizeNamespace(@Nullable String namespace)", "public abstract int schedule(@NonNull JobInfo job)", "public abstract int enqueue(@NonNull JobInfo job, @NonNull JobWorkItem work)", "public abstract int scheduleAsPackage(@NonNull JobInfo job, @NonNull String packageName, int userId, String tag)", "public abstract void cancel(int jobId)", "public abstract void cancelAll()", "public void cancelInAllNamespaces()", "public abstract List<JobInfo> getAllPendingJobs()", "public Map<String, List<JobInfo>> getPendingJobsInAllNamespaces()", "public abstract JobInfo getPendingJob(int jobId)", "public int getPendingJobReason(int jobId)", "public boolean canRunUserInitiatedJobs()", "public boolean hasRunUserInitiatedJobsPermission(@NonNull String packageName, @UserIdInt int userId)", "public List<JobInfo> getStartedJobs()", "public List<JobSnapshot> getAllJobSnapshots()", "public void registerUserVisibleJobObserver(@NonNull IUserVisibleJobObserver observer)", "public void unregisterUserVisibleJobObserver(@NonNull IUserVisibleJobObserver observer)", "public void notePendingUserRequestedAppStop(@NonNull String packageName, int userId, @Nullable String debugReason)" ],
  "variableNames" : [ "THROW_ON_INVALID_DATA_TRANSFER_IMPLEMENTATION", "RESULT_FAILURE", "RESULT_SUCCESS", "PENDING_JOB_REASON_INVALID_JOB_ID", "PENDING_JOB_REASON_EXECUTING", "PENDING_JOB_REASON_UNDEFINED", "PENDING_JOB_REASON_APP", "PENDING_JOB_REASON_APP_STANDBY", "PENDING_JOB_REASON_BACKGROUND_RESTRICTION", "PENDING_JOB_REASON_CONSTRAINT_BATTERY_NOT_LOW", "PENDING_JOB_REASON_CONSTRAINT_CHARGING", "PENDING_JOB_REASON_CONSTRAINT_CONNECTIVITY", "PENDING_JOB_REASON_CONSTRAINT_CONTENT_TRIGGER", "PENDING_JOB_REASON_CONSTRAINT_DEVICE_IDLE", "PENDING_JOB_REASON_CONSTRAINT_MINIMUM_LATENCY", "PENDING_JOB_REASON_CONSTRAINT_PREFETCH", "PENDING_JOB_REASON_CONSTRAINT_STORAGE_NOT_LOW", "PENDING_JOB_REASON_DEVICE_STATE", "PENDING_JOB_REASON_JOB_SCHEDULER_OPTIMIZATION", "PENDING_JOB_REASON_QUOTA", "PENDING_JOB_REASON_USER" ]
}