{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/Notification.java",
  "packageName" : "android.app",
  "className" : "CarExtender",
  "comment" : "\n     * <p>Helper class to add Android Auto extensions to notifications. To create a notification\n     * with car extensions:\n     *\n     * <ol>\n     *  <li>Create an {@link Notification.Builder}, setting any desired\n     *  properties.\n     *  <li>Create a {@link CarExtender}.\n     *  <li>Set car-specific properties using the {@code add} and {@code set} methods of\n     *  {@link CarExtender}.\n     *  <li>Call {@link Notification.Builder#extend(Notification.Extender)}\n     *  to apply the extensions to a notification.\n     * </ol>\n     *\n     * <pre class=\"prettyprint\">\n     * Notification notification = new Notification.Builder(context)\n     *         ...\n     *         .extend(new CarExtender()\n     *                 .set*(...))\n     *         .build();\n     * </pre>\n     *\n     * <p>Car extensions can be accessed on an existing notification by using the\n     * {@code CarExtender(Notification)} constructor, and then using the {@code get} methods\n     * to access values.\n     ",
  "links" : [ "CarExtender", "Notification.Builder", "Notification.Builder#extend(Notification.Extender)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CAR_EXTENDER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_LARGE_ICON",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CONVERSATION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_COLOR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLargeIcon",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnreadConversation",
    "type" : "UnreadConversation",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColor",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Notification.Builder extend(Notification.Builder builder)",
    "returnType" : "Notification.Builder",
    "comment" : "\n         * Apply car extensions to a notification that is being built. This is typically called by\n         * the {@link Notification.Builder#extend(Notification.Extender)}\n         * method of {@link Notification.Builder}.\n         ",
    "links" : [ "Notification.Builder", "Notification.Builder#extend(Notification.Extender)" ]
  }, {
    "name" : "public CarExtender setColor(@ColorInt int color)",
    "returnType" : "CarExtender",
    "comment" : "\n         * Sets the accent color to use when Android Auto presents the notification.\n         *\n         * Android Auto uses the color set with {@link Notification.Builder#setColor(int)}\n         * to accent the displayed notification. However, not all colors are acceptable in an\n         * automotive setting. This method can be used to override the color provided in the\n         * notification in such a situation.\n         ",
    "links" : [ "Notification.Builder#setColor(int)" ]
  }, {
    "name" : "public int getColor()",
    "returnType" : "int",
    "comment" : "\n         * Gets the accent color.\n         *\n         * @see #setColor\n         ",
    "links" : [ ]
  }, {
    "name" : "public CarExtender setLargeIcon(Bitmap largeIcon)",
    "returnType" : "CarExtender",
    "comment" : "\n         * Sets the large icon of the car notification.\n         *\n         * If no large icon is set in the extender, Android Auto will display the icon\n         * specified by {@link Notification.Builder#setLargeIcon(android.graphics.Bitmap)}\n         *\n         * @param largeIcon The large icon to use in the car notification.\n         * @return This object for method chaining.\n         ",
    "links" : [ "Notification.Builder#setLargeIcon(android.graphics.Bitmap)" ]
  }, {
    "name" : "public Bitmap getLargeIcon()",
    "returnType" : "Bitmap",
    "comment" : "\n         * Gets the large icon used in this car notification, or null if no icon has been set.\n         *\n         * @return The large icon for the car notification.\n         * @see CarExtender#setLargeIcon\n         ",
    "links" : [ ]
  }, {
    "name" : "public CarExtender setUnreadConversation(UnreadConversation unreadConversation)",
    "returnType" : "CarExtender",
    "comment" : "\n         * Sets the unread conversation in a message notification.\n         *\n         * @param unreadConversation The unread part of the conversation this notification conveys.\n         * @return This object for method chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public UnreadConversation getUnreadConversation()",
    "returnType" : "UnreadConversation",
    "comment" : "\n         * Returns the unread conversation conveyed by this notification.\n         *\n         * @see #setUnreadConversation(UnreadConversation)\n         ",
    "links" : [ ]
  }, {
    "name" : "private void visitUris(@NonNull Consumer<Uri> visitor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Notification.Builder extend(Notification.Builder builder)", "public CarExtender setColor(@ColorInt int color)", "public int getColor()", "public CarExtender setLargeIcon(Bitmap largeIcon)", "public Bitmap getLargeIcon()", "public CarExtender setUnreadConversation(UnreadConversation unreadConversation)", "public UnreadConversation getUnreadConversation()", "private void visitUris(@NonNull Consumer<Uri> visitor)" ],
  "variableNames" : [ "TAG", "EXTRA_CAR_EXTENDER", "EXTRA_LARGE_ICON", "EXTRA_CONVERSATION", "EXTRA_COLOR", "mLargeIcon", "mUnreadConversation", "mColor" ]
}