{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/DateIntervalFormat.java",
  "packageName" : "android.icu.text",
  "className" : "DateIntervalFormat",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "LOCAL_PATTERN_CACHE",
    "type" : "ICUCache<String, Map<String, PatternInfo>>",
    "comment" : " Cache for the locale interval pattern",
    "links" : [ ]
  }, {
    "name" : "fInfo",
    "type" : "DateIntervalInfo",
    "comment" : "\n     * The interval patterns for this locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "fDateFormat",
    "type" : "SimpleDateFormat",
    "comment" : "\n     * The DateFormat object used to format single pattern.\n     * Because fDateFormat is modified during format operations, all\n     * access to it from logically const, thread safe functions must be synchronized.\n     ",
    "links" : [ ]
  }, {
    "name" : "fFromCalendar",
    "type" : "Calendar",
    "comment" : "\n     * The 2 calendars with the from and to date.\n     * could re-use the calendar in fDateFormat,\n     * but keeping 2 calendars make it clear and clean.\n     * Because these Calendars are modified during format operations, all\n     * access to them from logically const, thread safe functions must be synchronized.\n     ",
    "links" : [ ]
  }, {
    "name" : "fToCalendar",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fSkeleton",
    "type" : "String",
    "comment" : "\n     * Following are transient interval information\n     * relevant (locale) to this formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "isDateIntervalInfoDefault",
    "type" : "boolean",
    "comment" : "\n     * Needed for efficient deserialization. If set, it means we can use the\n     * cache to initialize fIntervalPatterns.\n     ",
    "links" : [ ]
  }, {
    "name" : "fIntervalPatterns",
    "type" : "Map<String, PatternInfo>",
    "comment" : "\n     *  Interval patterns for this instance's locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "fDatePattern",
    "type" : "String",
    "comment" : "\n     * Patterns for fallback formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "fTimePattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fDateTimeFormat",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "fCapitalizationSetting",
    "type" : "DisplayContext",
    "comment" : "\n     * Capitalization context, new in ICU 68\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton and  the default <code>FORMAT</code> locale.\n     *\n     * This is a convenient override of\n     * getInstance(String skeleton, ULocale locale)\n     * with the value of locale as default <code>FORMAT</code> locale.\n     *\n     * @param skeleton  the skeleton on which interval format based.\n     * @return          a date time interval formatter.\n     * @see Category#FORMAT\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton, Locale locale)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton and a given locale.\n     *\n     * This is a convenient override of\n     * getInstance(String skeleton, ULocale locale)\n     *\n     * <p>Example code:{@sample external/icu/android_icu4j/src/samples/java/android/icu/samples/text/dateintervalformat/DateIntervalFormatSample.java dtitvfmtPreDefinedExample}\n     * @param skeleton  the skeleton on which interval format based.\n     * @param locale    the given locale\n     * @return          a date time interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton, ULocale locale)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton and a given locale.\n     * <P>\n     * In this factory method,\n     * the date interval pattern information is load from resource files.\n     * Users are encouraged to created date interval formatter this way and\n     * to use the pre-defined skeleton macros.\n     *\n     * <P>\n     * There are pre-defined skeletons in DateFormat,\n     * such as MONTH_DAY, YEAR_MONTH_WEEKDAY_DAY etc.\n     *\n     * Those skeletons have pre-defined interval patterns in resource files.\n     * Users are encouraged to use them.\n     * For example:\n     * DateIntervalFormat.getInstance(DateFormat.MONTH_DAY, false, loc);\n     *\n     * The given Locale provides the interval patterns.\n     * For example, for en_GB, if skeleton is YEAR_ABBR_MONTH_WEEKDAY_DAY,\n     * which is \"yMMMEEEd\",\n     * the interval patterns defined in resource file to above skeleton are:\n     * \"EEE, d MMM, yyyy - EEE, d MMM, yyyy\" for year differs,\n     * \"EEE, d MMM - EEE, d MMM, yyyy\" for month differs,\n     * \"EEE, d - EEE, d MMM, yyyy\" for day differs,\n     * @param skeleton  the skeleton on which interval format based.\n     * @param locale    the given locale\n     * @return          a date time interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton, DateIntervalInfo dtitvinf)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton\n     *  DateIntervalInfo, and the default <code>FORMAT</code> locale.\n     *\n     * This is a convenient override of\n     * getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf)\n     * with the locale value as default <code>FORMAT</code> locale.\n     *\n     * @param skeleton  the skeleton on which interval format based.\n     * @param dtitvinf  the DateIntervalInfo object to be adopted.\n     * @return          a date time interval formatter.\n     * @see Category#FORMAT\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton, Locale locale, DateIntervalInfo dtitvinf)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton\n     * a DateIntervalInfo, and the given locale.\n     *\n     * This is a convenient override of\n     * getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf)\n     *\n     * <p>Example code:{@sample external/icu/android_icu4j/src/samples/java/android/icu/samples/text/dateintervalformat/DateIntervalFormatSample.java dtitvfmtCustomizedExample}\n     * @param skeleton  the skeleton on which interval format based.\n     * @param locale    the given locale\n     * @param dtitvinf  the DateIntervalInfo object to be adopted.\n     * @return          a date time interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final DateIntervalFormat getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf)",
    "returnType" : "DateIntervalFormat",
    "comment" : "\n     * Construct a DateIntervalFormat from skeleton\n     * a DateIntervalInfo, and the given locale.\n     *\n     * <P>\n     * In this factory method, user provides its own date interval pattern\n     * information, instead of using those pre-defined data in resource file.\n     * This factory method is for powerful users who want to provide their own\n     * interval patterns.\n     *\n     * <P>\n     * There are pre-defined skeleton in DateFormat,\n     * such as MONTH_DAY, YEAR_MONTH_WEEKDAY_DAY etc.\n     *\n     * Those skeletons have pre-defined interval patterns in resource files.\n     * Users are encouraged to use them.\n     * For example:\n     * DateIntervalFormat.getInstance(DateFormat.MONTH_DAY, false, loc,itvinf);\n     *\n     * the DateIntervalInfo provides the interval patterns.\n     *\n     * User are encouraged to set default interval pattern in DateIntervalInfo\n     * as well, if they want to set other interval patterns ( instead of\n     * reading the interval patterns from resource files).\n     * When the corresponding interval pattern for a largest calendar different\n     * field is not found ( if user not set it ), interval format fallback to\n     * the default interval pattern.\n     * If user does not provide default interval pattern, it fallback to\n     * \"{date0} - {date1}\"\n     *\n     * @param skeleton  the skeleton on which interval format based.\n     * @param locale    the given locale\n     * @param dtitvinf  the DateIntervalInfo object to be adopted.\n     * @return          a date time interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Clone this Format object polymorphically.\n     * @return    A copy of the object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StringBuffer format(Object obj, StringBuffer appendTo, FieldPosition fieldPosition)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Format an object to produce a string. This method handles Formattable\n     * objects with a DateInterval type.\n     * If a the Formattable object type is not a DateInterval,\n     * IllegalArgumentException is thrown.\n     *\n     * @param obj               The object to format.\n     *                          Must be a DateInterval.\n     * @param appendTo          Output parameter to receive result.\n     *                          Result is appended to existing contents.\n     * @param fieldPosition     On input: an alignment field, if desired.\n     *                          On output: the offsets of the alignment field.\n     *                          There may be multiple instances of a given field type\n     *                          in an interval format; in this case the fieldPosition\n     *                          offsets refer to the first instance.\n     * @return                  Reference to 'appendTo' parameter.\n     * @throws    IllegalArgumentException  if the formatted object is not\n     *                                      DateInterval object\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StringBuffer format(DateInterval dtInterval, StringBuffer appendTo, FieldPosition fieldPosition)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Format a DateInterval to produce a string.\n     *\n     * @param dtInterval        DateInterval to be formatted.\n     * @param appendTo          Output parameter to receive result.\n     *                          Result is appended to existing contents.\n     * @param fieldPosition     On input: an alignment field, if desired.\n     *                          On output: the offsets of the alignment field.\n     *                          There may be multiple instances of a given field type\n     *                          in an interval format; in this case the fieldPosition\n     *                          offsets refer to the first instance.\n     * @return                  Reference to 'appendTo' parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedDateInterval formatToValue(DateInterval dtInterval)",
    "returnType" : "FormattedDateInterval",
    "comment" : "\n     * Format a DateInterval to produce a FormattedDateInterval.\n     *\n     * The FormattedDateInterval exposes field information about the formatted string.\n     *\n     * @param dtInterval        DateInterval to be formatted.\n     * @return                  A FormattedDateInterval containing the format result.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized StringBuffer formatIntervalImpl(DateInterval dtInterval, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPatterns(Calendar fromCalendar, Calendar toCalendar, Output<String> part2)",
    "returnType" : "String",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public final StringBuffer format(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, FieldPosition pos)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Format 2 Calendars to produce a string.\n     *\n     * @param fromCalendar      calendar set to the from date in date interval\n     *                          to be formatted into date interval string\n     * @param toCalendar        calendar set to the to date in date interval\n     *                          to be formatted into date interval string\n     * @param appendTo          Output parameter to receive result.\n     *                          Result is appended to existing contents.\n     * @param pos               On input: an alignment field, if desired.\n     *                          On output: the offsets of the alignment field.\n     *                          There may be multiple instances of a given field type\n     *                          in an interval format; in this case the fieldPosition\n     *                          offsets refer to the first instance.\n     * @return                  Reference to 'appendTo' parameter.\n     * @throws    IllegalArgumentException  if the two calendars are not equivalent.\n     ",
    "links" : [ ]
  }, {
    "name" : "public FormattedDateInterval formatToValue(Calendar fromCalendar, Calendar toCalendar)",
    "returnType" : "FormattedDateInterval",
    "comment" : "\n     * Format 2 Calendars to produce a FormattedDateInterval.\n     *\n     * The FormattedDateInterval exposes field information about the formatted string.\n     *\n     * @param fromCalendar      calendar set to the from date in date interval\n     *                          to be formatted into date interval string\n     * @param toCalendar        calendar set to the to date in date interval\n     *                          to be formatted into date interval string\n     * @return                  A FormattedDateInterval containing the format result.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized StringBuffer formatImpl(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)",
    "returnType" : "StringBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private final void fallbackFormatRange(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, StringBuilder patternSB, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)",
    "returnType" : "void",
    "comment" : " Like fallbackFormat, but specifically for ranges. ",
    "links" : [ ]
  }, {
    "name" : "private final StringBuffer fallbackFormat(Calendar fromCalendar, Calendar toCalendar, boolean fromToOnSameDay, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Format 2 Calendars to using fall-back interval pattern\n     *\n     * The full pattern used in this fall-back format is the\n     * full pattern of the date formatter.\n     *\n     * @param fromCalendar      calendar set to the from date in date interval\n     *                          to be formatted into date interval string\n     * @param toCalendar        calendar set to the to date in date interval\n     *                          to be formatted into date interval string\n     * @param appendTo          Output parameter to receive result.\n     *                          Result is appended to existing contents.\n     * @param pos               On input: an alignment field, if desired.\n     *                          On output: the offsets of the alignment field.\n     * @return                  Reference to 'appendTo' parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "private final StringBuffer fallbackFormat(Calendar fromCalendar, Calendar toCalendar, boolean fromToOnSameDay, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes, String fullPattern)",
    "returnType" : "StringBuffer",
    "comment" : "\n     * Format 2 Calendars to using fall-back interval pattern\n     *\n     * This fall-back pattern is generated on a given full pattern,\n     * not the full pattern of the date formatter.\n     *\n     * @param fromCalendar      calendar set to the from date in date interval\n     *                          to be formatted into date interval string\n     * @param toCalendar        calendar set to the to date in date interval\n     *                          to be formatted into date interval string\n     * @param appendTo          Output parameter to receive result.\n     *                          Result is appended to existing contents.\n     * @param pos               On input: an alignment field, if desired.\n     *                          On output: the offsets of the alignment field.\n     * @param fullPattern       the full pattern need to apply to date formatter\n     * @return                  Reference to 'appendTo' parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object parseObject(String source, ParsePosition parse_pos)",
    "returnType" : "Object",
    "comment" : "\n     * Date interval parsing is not supported.\n     * <P>\n     * This method should handle parsing of\n     * date time interval strings into Formattable objects with\n     * DateInterval type, which is a pair of UDate.\n     * <P>\n     * Before calling, set parse_pos.index to the offset you want to start\n     * parsing at in the source. After calling, parse_pos.index is the end of\n     * the text you parsed. If error occurs, index is unchanged.\n     * <P>\n     * When parsing, leading whitespace is discarded (with a successful parse),\n     * while trailing whitespace is left as is.\n     * <P>\n     * See Format.parseObject() for more.\n     *\n     * @param source    The string to be parsed into an object.\n     * @param parse_pos The position to start parsing at. Since no parsing\n     *                  is supported, upon return this param is unchanged.\n     * @return          A newly created {@code Formattable} object, or NULL\n     *                  on failure.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public DateIntervalInfo getDateIntervalInfo()",
    "returnType" : "DateIntervalInfo",
    "comment" : "\n     * Gets the date time interval patterns.\n     * @return a copy of the date time interval patterns associated with\n     * this date interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDateIntervalInfo(DateIntervalInfo newItvPattern)",
    "returnType" : "void",
    "comment" : "\n     * Set the date time interval patterns.\n     * @param newItvPattern   the given interval patterns to copy.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimeZone getTimeZone()",
    "returnType" : "TimeZone",
    "comment" : "\n     * Get the TimeZone\n     * @return A copy of the TimeZone associated with this date interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTimeZone(TimeZone zone)",
    "returnType" : "void",
    "comment" : "\n     * Set the TimeZone for the calendar used by this DateIntervalFormat object.\n     * @param zone The new TimeZone, will be cloned for use by this DateIntervalFormat.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setContext(DisplayContext context)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Set a particular DisplayContext value in the formatter,\n     * such as CAPITALIZATION_FOR_STANDALONE. This causes the formatted\n     * result to be capitalized appropriately for the context in which\n     * it is intended to be used, considering both the locale and the\n     * type of field at the beginning of the formatted result.\n     *\n     * @param context The DisplayContext value to set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DisplayContext getContext(DisplayContext.Type type)",
    "returnType" : "DisplayContext",
    "comment" : "\n     * <strong>[icu]</strong> Get the formatter's DisplayContext value for the specified DisplayContext.Type,\n     * such as CAPITALIZATION.\n     *\n     * @param type the DisplayContext.Type whose value to return\n     * @return the current DisplayContext setting for the specified type\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized DateFormat getDateFormat()",
    "returnType" : "DateFormat",
    "comment" : "\n     * Gets the date formatter\n     * @return a copy of the date formatter associated with\n     * this date interval formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void initializePattern(ICUCache<String, Map<String, PatternInfo>> cache)",
    "returnType" : "void",
    "comment" : "\n     * Initialize interval patterns locale to this formatter.\n     ",
    "links" : [ ]
  }, {
    "name" : "private Map<String, PatternInfo> initializeIntervalPattern(String fullPattern, ULocale locale)",
    "returnType" : "Map<String, PatternInfo>",
    "comment" : "\n     * Initialize interval patterns locale to this formatter\n     *\n     * This code is a bit complicated since\n     * 1. the interval patterns saved in resource bundle files are interval\n     *    patterns based on date or time only.\n     *    It does not have interval patterns based on both date and time.\n     *    Interval patterns on both date and time are algorithm generated.\n     *\n     *    For example, it has interval patterns on skeleton \"dMy\" and \"hm\",\n     *    but it does not have interval patterns on skeleton \"dMyhm\".\n     *\n     *    The rule to generate interval patterns for both date and time skeleton are\n     *    1) when the year, month, or day differs, concatenate the two original\n     *    expressions with a separator between,\n     *    For example, interval pattern from \"Jan 10, 2007 10:10 am\"\n     *    to \"Jan 11, 2007 10:10am\" is\n     *    \"Jan 10, 2007 10:10 am - Jan 11, 2007 10:10am\"\n     *\n     *    2) otherwise, present the date followed by the range expression\n     *    for the time.\n     *    For example, interval pattern from \"Jan 10, 2007 10:10 am\"\n     *    to \"Jan 10, 2007 11:10am\" is\n     *    \"Jan 10, 2007 10:10 am - 11:10am\"\n     *\n     * 2. even a pattern does not request a certain calendar field,\n     *    the interval pattern needs to include such field if such fields are\n     *    different between 2 dates.\n     *    For example, a pattern/skeleton is \"hm\", but the interval pattern\n     *    includes year, month, and date when year, month, and date differs.\n     *\n     *\n     * @param fullPattern  formatter's full pattern\n     * @param locale       the given locale.\n     * @return             interval patterns' hash map\n     ",
    "links" : [ ]
  }, {
    "name" : "private String getConcatenationPattern(ULocale locale)",
    "returnType" : "String",
    "comment" : "\n     * Retrieves the concatenation DateTime pattern from the resource bundle.\n     * @param locale Locale to retrieve.\n     * @return Concatenation DateTime pattern.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void genFallbackPattern(int field, String skeleton, Map<String, PatternInfo> intervalPatterns, DateTimePatternGenerator dtpng)",
    "returnType" : "void",
    "comment" : "\n     * Generate fall back interval pattern given a calendar field,\n     * a skeleton, and a date time pattern generator\n     * @param field      the largest different calendar field\n     * @param skeleton   a skeleton\n     * @param dtpng      date time pattern generator\n     * @param intervalPatterns interval patterns\n     ",
    "links" : [ ]
  }, {
    "name" : "private String normalizeHourMetacharacters(String skeleton, ULocale locale)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void getDateTimeSkeleton(String skeleton, StringBuilder dateSkeleton, StringBuilder normalizedDateSkeleton, StringBuilder timeSkeleton, StringBuilder normalizedTimeSkeleton)",
    "returnType" : "void",
    "comment" : "\n     * get separated date and time skeleton from a combined skeleton.\n     *\n     * The difference between date skeleton and normalizedDateSkeleton are:\n     * 1. both 'y' and 'd' are appeared only once in normalizeDateSkeleton\n     * 2. 'E' and 'EE' are normalized into 'EEE'\n     * 3. 'MM' is normalized into 'M'\n     *\n     ** the difference between time skeleton and normalizedTimeSkeleton are:\n     * 1. both 'H' and 'h' are normalized as 'h' in normalized time skeleton,\n     * 2. 'a' is omitted in normalized time skeleton.\n     * 3. there is only one appearance for 'h', 'm','v', 'z' in normalized time\n     *    skeleton\n     *\n     *\n     *  @param skeleton               given combined skeleton.\n     *  @param date                   Output parameter for date only skeleton.\n     *  @param normalizedDate         Output parameter for normalized date only\n     *\n     *  @param time                   Output parameter for time only skeleton.\n     *  @param normalizedTime         Output parameter for normalized time only\n     *                                skeleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean genSeparateDateTimePtn(String dateSkeleton, String timeSkeleton, Map<String, PatternInfo> intervalPatterns, DateTimePatternGenerator dtpng)",
    "returnType" : "boolean",
    "comment" : "\n     * Generate date or time interval pattern from resource.\n     *\n     * It needs to handle the following:\n     * 1. need to adjust field width.\n     *    For example, the interval patterns saved in DateIntervalInfo\n     *    includes \"dMMMy\", but not \"dMMMMy\".\n     *    Need to get interval patterns for dMMMMy from dMMMy.\n     *    Another example, the interval patterns saved in DateIntervalInfo\n     *    includes \"hmv\", but not \"hmz\".\n     *    Need to get interval patterns for \"hmz' from 'hmv'\n     *\n     * 2. there might be no pattern for 'y' differ for skeleton \"Md\",\n     *    in order to get interval patterns for 'y' differ,\n     *    need to look for it from skeleton 'yMd'\n     *\n     * @param dateSkeleton   normalized date skeleton\n     * @param timeSkeleton   normalized time skeleton\n     * @param intervalPatterns interval patterns\n     * @return whether there is interval patterns for the skeleton.\n     *         true if there is, false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "private SkeletonAndItsBestMatch genIntervalPattern(int field, String skeleton, String bestSkeleton, int differenceInfo, Map<String, PatternInfo> intervalPatterns)",
    "returnType" : "SkeletonAndItsBestMatch",
    "comment" : "\n     * Generate interval pattern from existing resource\n     *\n     * It not only save the interval patterns,\n     * but also return the skeleton and its best match skeleton.\n     *\n     * @param field           largest different calendar field\n     * @param skeleton        skeleton\n     * @param bestSkeleton    the best match skeleton which has interval pattern\n     *                        defined in resource\n     * @param differenceInfo  the difference between skeleton and best skeleton\n     *         0 means the best matched skeleton is the same as input skeleton\n     *         1 means the fields are the same, but field width are different\n     *         2 means the only difference between fields are v/z,\n     *        -1 means there are other fields difference\n     *\n     * @param intervalPatterns interval patterns\n     *\n     * @return  an extended skeleton or extended best skeleton if applicable.\n     *          null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String adjustFieldWidth(String inputSkeleton, String bestMatchSkeleton, String bestMatchIntervalPattern, int differenceInfo, boolean suppressDayPeriodField)",
    "returnType" : "String",
    "comment" : "\n     * Adjust field width in best match interval pattern to match\n     * the field width in input skeleton.\n     *\n     * TODO (xji) make a general solution\n     * The adjusting rule can be:\n     * 1. always adjust\n     * 2. never adjust\n     * 3. default adjust, which means adjust according to the following rules\n     * 3.1 always adjust string, such as MMM and MMMM\n     * 3.2 never adjust between string and numeric, such as MM and MMM\n     * 3.3 always adjust year\n     * 3.4 do not adjust 'd', 'h', or 'm' if h presents\n     * 3.5 do not adjust 'M' if it is numeric(?)\n     *\n     * Since date interval format is well-formed format,\n     * date and time skeletons are normalized previously,\n     * till this stage, the adjust here is only \"adjust strings, such as MMM\n     * and MMMM, EEE and EEEE.\n     *\n     * @param inputSkeleton            the input skeleton\n     * @param bestMatchSkeleton        the best match skeleton\n     * @param bestMatchIntervalpattern the best match interval pattern\n     * @param differenceInfo           the difference between 2 skeletons\n     *                                 1 means only field width differs\n     *                                 2 means v/z exchange\n     * @param suppressDayPeriodField   if true, remove the day period field from the result\n     * @return the adjusted interval pattern\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String findReplaceInPattern(String targetString, String strToReplace, String strToReplaceWith)",
    "returnType" : "String",
    "comment" : "\n     * Does the same thing as String.replace(), except that it won't perform the\n     * substitution inside quoted literal text.\n     * @param targetString The string to perform the find-replace operation on.\n     * @param strToReplace The string to search for and replace in the target string.\n     * @param strToReplaceWith The string to substitute in wherever {@code stringToReplace} was found.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void concatSingleDate2TimeInterval(String dtfmt, String datePattern, int field, Map<String, PatternInfo> intervalPatterns)",
    "returnType" : "void",
    "comment" : "\n     * Concat a single date pattern with a time interval pattern,\n     * set it into the intervalPatterns, while field is time field.\n     * This is used to handle time interval patterns on skeleton with\n     * both time and date. Present the date followed by\n     * the range expression for the time.\n     * @param dtfmt                  date and time format\n     * @param datePattern            date pattern\n     * @param field                  time calendar field: AM_PM, HOUR, MINUTE\n     * @param intervalPatterns       interval patterns\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean fieldExistsInSkeleton(int field, String skeleton)",
    "returnType" : "boolean",
    "comment" : "\n     * check whether a calendar field present in a skeleton.\n     * @param field      calendar field need to check\n     * @param skeleton   given skeleton on which to check the calendar field\n     * @return           true if field present in a skeleton.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * readObject.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, PatternInfo> getRawPatterns()",
    "returnType" : "Map<String, PatternInfo>",
    "comment" : "\n     * Get the internal patterns for the skeleton\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final DateIntervalFormat getInstance(String skeleton)", "public static final DateIntervalFormat getInstance(String skeleton, Locale locale)", "public static final DateIntervalFormat getInstance(String skeleton, ULocale locale)", "public static final DateIntervalFormat getInstance(String skeleton, DateIntervalInfo dtitvinf)", "public static final DateIntervalFormat getInstance(String skeleton, Locale locale, DateIntervalInfo dtitvinf)", "public static final DateIntervalFormat getInstance(String skeleton, ULocale locale, DateIntervalInfo dtitvinf)", "public synchronized Object clone()", "public final StringBuffer format(Object obj, StringBuffer appendTo, FieldPosition fieldPosition)", "public final StringBuffer format(DateInterval dtInterval, StringBuffer appendTo, FieldPosition fieldPosition)", "public FormattedDateInterval formatToValue(DateInterval dtInterval)", "private synchronized StringBuffer formatIntervalImpl(DateInterval dtInterval, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)", "public String getPatterns(Calendar fromCalendar, Calendar toCalendar, Output<String> part2)", "public final StringBuffer format(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, FieldPosition pos)", "public FormattedDateInterval formatToValue(Calendar fromCalendar, Calendar toCalendar)", "private synchronized StringBuffer formatImpl(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)", "private final void fallbackFormatRange(Calendar fromCalendar, Calendar toCalendar, StringBuffer appendTo, StringBuilder patternSB, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)", "private final StringBuffer fallbackFormat(Calendar fromCalendar, Calendar toCalendar, boolean fromToOnSameDay, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes)", "private final StringBuffer fallbackFormat(Calendar fromCalendar, Calendar toCalendar, boolean fromToOnSameDay, StringBuffer appendTo, FieldPosition pos, FormatOutput output, List<FieldPosition> attributes, String fullPattern)", "public Object parseObject(String source, ParsePosition parse_pos)", "public DateIntervalInfo getDateIntervalInfo()", "public void setDateIntervalInfo(DateIntervalInfo newItvPattern)", "public TimeZone getTimeZone()", "public void setTimeZone(TimeZone zone)", "public void setContext(DisplayContext context)", "public DisplayContext getContext(DisplayContext.Type type)", "public synchronized DateFormat getDateFormat()", "private void initializePattern(ICUCache<String, Map<String, PatternInfo>> cache)", "private Map<String, PatternInfo> initializeIntervalPattern(String fullPattern, ULocale locale)", "private String getConcatenationPattern(ULocale locale)", "private void genFallbackPattern(int field, String skeleton, Map<String, PatternInfo> intervalPatterns, DateTimePatternGenerator dtpng)", "private String normalizeHourMetacharacters(String skeleton, ULocale locale)", "private static void getDateTimeSkeleton(String skeleton, StringBuilder dateSkeleton, StringBuilder normalizedDateSkeleton, StringBuilder timeSkeleton, StringBuilder normalizedTimeSkeleton)", "private boolean genSeparateDateTimePtn(String dateSkeleton, String timeSkeleton, Map<String, PatternInfo> intervalPatterns, DateTimePatternGenerator dtpng)", "private SkeletonAndItsBestMatch genIntervalPattern(int field, String skeleton, String bestSkeleton, int differenceInfo, Map<String, PatternInfo> intervalPatterns)", "private static String adjustFieldWidth(String inputSkeleton, String bestMatchSkeleton, String bestMatchIntervalPattern, int differenceInfo, boolean suppressDayPeriodField)", "private static String findReplaceInPattern(String targetString, String strToReplace, String strToReplaceWith)", "private void concatSingleDate2TimeInterval(String dtfmt, String datePattern, int field, Map<String, PatternInfo> intervalPatterns)", "private static boolean fieldExistsInSkeleton(int field, String skeleton)", "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException", "public Map<String, PatternInfo> getRawPatterns()" ],
  "variableNames" : [ "serialVersionUID", "LOCAL_PATTERN_CACHE", "fInfo", "fDateFormat", "fFromCalendar", "fToCalendar", "fSkeleton", "isDateIntervalInfoDefault", "fIntervalPatterns", "fDatePattern", "fTimePattern", "fDateTimeFormat", "fCapitalizationSetting" ]
}