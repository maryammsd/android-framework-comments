{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/health/connect/internal/datatypes/IntervalRecordInternal.java",
  "packageName" : "android.health.connect.internal.datatypes",
  "className" : "IntervalRecordInternal",
  "comment" : "\n * Base class for all health connect datatype records that require a start and end time.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mStartTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartZoneOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndTime",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEndZoneOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getStartTimeInMillis()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getStartZoneOffsetInSeconds()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getEndTimeInMillis()",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEndZoneOffsetInSeconds()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void populateRecordTo(@NonNull Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void populateRecordFrom(@NonNull Parcel parcel)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Instant getStartTime()",
    "returnType" : "Instant",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntervalRecordInternal<T> setStartTime(long startTime)",
    "returnType" : "IntervalRecordInternal<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ZoneOffset getStartZoneOffset()",
    "returnType" : "ZoneOffset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntervalRecordInternal<T> setStartZoneOffset(int startZoneOffset)",
    "returnType" : "IntervalRecordInternal<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Instant getEndTime()",
    "returnType" : "Instant",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntervalRecordInternal<T> setEndTime(long endTime)",
    "returnType" : "IntervalRecordInternal<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ZoneOffset getEndZoneOffset()",
    "returnType" : "ZoneOffset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IntervalRecordInternal<T> setEndZoneOffset(int endZoneOffset)",
    "returnType" : "IntervalRecordInternal<T>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public LocalDate getLocalDate()",
    "returnType" : "LocalDate",
    "comment" : "\n     * @return the {@link LocalDate} object of this activity start time.\n     ",
    "links" : [ "java.time.LocalDate" ]
  }, {
    "name" : " abstract void populateIntervalRecordFrom(@NonNull Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Child class must implement this method and populates itself with the data present in {@param\n     * bundle}. Reads should be in the same order as write\n     ",
    "links" : [ ]
  }, {
    "name" : " abstract void populateIntervalRecordTo(@NonNull Parcel parcel)",
    "returnType" : "void",
    "comment" : "\n     * Populate {@param bundle} with the data required to un-bundle self. This is used during IPC\n     * transmissions\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public long getStartTimeInMillis()", "public int getStartZoneOffsetInSeconds()", "public long getEndTimeInMillis()", "public int getEndZoneOffsetInSeconds()", " void populateRecordTo(@NonNull Parcel parcel)", " void populateRecordFrom(@NonNull Parcel parcel)", " Instant getStartTime()", "public IntervalRecordInternal<T> setStartTime(long startTime)", " ZoneOffset getStartZoneOffset()", "public IntervalRecordInternal<T> setStartZoneOffset(int startZoneOffset)", " Instant getEndTime()", "public IntervalRecordInternal<T> setEndTime(long endTime)", " ZoneOffset getEndZoneOffset()", "public IntervalRecordInternal<T> setEndZoneOffset(int endZoneOffset)", "public LocalDate getLocalDate()", " abstract void populateIntervalRecordFrom(@NonNull Parcel parcel)", " abstract void populateIntervalRecordTo(@NonNull Parcel parcel)" ],
  "variableNames" : [ "mStartTime", "mStartZoneOffset", "mEndTime", "mEndZoneOffset" ]
}