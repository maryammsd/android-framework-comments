{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/StackStreamFactory.java",
  "packageName" : "java.lang",
  "className" : "FrameBuffer",
  "comment" : "\n     * Frame buffer\n     *\n     * Each specialized AbstractStackWalker subclass may subclass the FrameBuffer.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "START_POS",
    "type" : "int",
    "comment" : " 0th and 1st elements are reserved",
    "links" : [ ]
  }, {
    "name" : "currentBatchSize",
    "type" : "int",
    "comment" : " current batch size",
    "links" : [ ]
  }, {
    "name" : "origin",
    "type" : "int",
    "comment" : " index to the current traversed stack frame",
    "links" : [ ]
  }, {
    "name" : "fence",
    "type" : "int",
    "comment" : " index to the last frame in the current batch",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract F[] frames()",
    "returnType" : "F[]",
    "comment" : " must not return null",
    "links" : [ ]
  }, {
    "name" : " abstract void resize(int startIndex, int elements)",
    "returnType" : "void",
    "comment" : "\n         * Resizes the buffers for VM to fill in the next batch of stack frames.\n         * The next batch will start at the given startIndex with the maximum number\n         * of elements.\n         *\n         * <p> Subclass may override this method to manage the allocated buffers.\n         *\n         * @param startIndex the start index for the first frame of the next batch to fill in.\n         * @param elements the number of elements for the next batch to fill in.\n         *\n         ",
    "links" : [ ]
  }, {
    "name" : " abstract Class<?> at(int index)",
    "returnType" : "Class<?>",
    "comment" : "\n         * Return the class at the given position in the current batch.\n         * @param index the position of the frame.\n         * @return the class at the given position in the current batch.\n         ",
    "links" : [ ]
  }, {
    "name" : " int startIndex()",
    "returnType" : "int",
    "comment" : "\n         * Returns the start index for this frame buffer is refilled.\n         *\n         * This implementation reuses the allocated buffer for the next batch\n         * of stack frames.  For subclass to retain the fetched stack frames,\n         * it should override this method to return the index at which the frame\n         * should be filled in for the next batch.\n         ",
    "links" : [ ]
  }, {
    "name" : " F nextStackFrame()",
    "returnType" : "F",
    "comment" : "\n         * Returns next StackFrame object in the current batch of stack frames\n         ",
    "links" : [ ]
  }, {
    "name" : " final int curBatchFrameCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n         * Tests if this frame buffer is empty.  All frames are fetched.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void freeze()",
    "returnType" : "void",
    "comment" : "\n         * Freezes this frame buffer.  The stack stream source is done fetching.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean isActive()",
    "returnType" : "boolean",
    "comment" : "\n         * Tests if this frame buffer is active.  It is inactive when\n         * it is done for traversal.  All stack frames have been traversed.\n         ",
    "links" : [ ]
  }, {
    "name" : " final Class<?> next()",
    "returnType" : "Class<?>",
    "comment" : "\n         * Gets the class at the current frame and move to the next frame.\n         ",
    "links" : [ ]
  }, {
    "name" : " final Class<?> get()",
    "returnType" : "Class<?>",
    "comment" : "\n         * Gets the class at the current frame.\n         ",
    "links" : [ ]
  }, {
    "name" : " final int getIndex()",
    "returnType" : "int",
    "comment" : "\n         * Returns the index of the current frame.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void setBatch(int depth, int startIndex, int endIndex)",
    "returnType" : "void",
    "comment" : "\n         * Set the start and end index of a new batch of stack frames that have\n         * been filled in this frame buffer.\n         ",
    "links" : [ ]
  }, {
    "name" : " final void check(int skipFrames)",
    "returnType" : "void",
    "comment" : "\n         * Checks if the origin is the expected start index.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract F[] frames()", " abstract void resize(int startIndex, int elements)", " abstract Class<?> at(int index)", " int startIndex()", " F nextStackFrame()", " final int curBatchFrameCount()", " final boolean isEmpty()", " final void freeze()", " final boolean isActive()", " final Class<?> next()", " final Class<?> get()", " final int getIndex()", " final void setBatch(int depth, int startIndex, int endIndex)", " final void check(int skipFrames)" ],
  "variableNames" : [ "START_POS", "currentBatchSize", "origin", "fence" ]
}