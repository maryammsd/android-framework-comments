{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/LocusId.java",
  "packageName" : "android.content",
  "className" : "LocusId",
  "comment" : "\n * An identifier for an unique state (locus) in the application. Should be stable across reboots and\n * backup / restore.\n *\n * <p>Locus is a new concept introduced on\n * {@link android.os.Build.VERSION_CODES#Q Android Q} and it lets the intelligence service provided\n * by the Android System to correlate state between different subsystems such as content capture,\n * shortcuts, and notifications.\n *\n * <p>For example, if your app provides an activiy representing a chat between 2 users\n * (say {@code A} and {@code B}, this chat state could be represented by:\n *\n * <pre><code>\n * LocusId chatId = new LocusId(\"Chat_A_B\");\n * </code></pre>\n *\n * <p>And then you should use that {@code chatId} by:\n *\n * <ul>\n *   <li>Setting it in the chat notification (through\n *   {@link android.app.Notification.Builder#setLocusId(LocusId)\n *   Notification.Builder.setLocusId(chatId)}).\n *   <li>Setting it into the {@link android.content.pm.ShortcutInfo} (through\n *   {@link android.content.pm.ShortcutInfo.Builder#setLocusId(LocusId)\n *   ShortcutInfo.Builder.setLocusId(chatId)}), if you provide a launcher shortcut for that chat\n *   conversation.\n *   <li>Associating it with the {@link android.view.contentcapture.ContentCaptureContext} of the\n *   root view of the chat conversation activity (through\n *   {@link android.view.View#getContentCaptureSession()}, then\n *   {@link android.view.contentcapture.ContentCaptureContext.Builder\n *   new ContentCaptureContext.Builder(chatId).build()} and\n *   {@link android.view.contentcapture.ContentCaptureSession#setContentCaptureContext(\n *   android.view.contentcapture.ContentCaptureContext)} - see {@link ContentCaptureManager}\n *   for more info about content capture).\n *   <li>Configuring your app to launch the chat conversation through the\n *   {@link Intent#ACTION_VIEW_LOCUS} intent.\n * </ul>\n ",
  "variables" : [ {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<LocusId>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getId()",
    "returnType" : "String",
    "comment" : "\n     * Gets the canonical {@code id} associated with the locus.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(@NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private String getSanitizedId()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel parcel, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mId", "CREATOR" ],
  "methodNames" : [ "public String getId()", "public int hashCode()", "public boolean equals(Object obj)", "public String toString()", "public void dump(@NonNull PrintWriter pw)", "private String getSanitizedId()", "public int describeContents()", "public void writeToParcel(Parcel parcel, int flags)" ]
}