{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/window/WindowTokenClientController.java",
  "packageName" : "android.window",
  "className" : "WindowTokenClientController",
  "comment" : "\n * Singleton controller to manage the attached {@link WindowTokenClient}s, and to dispatch\n * corresponding window configuration change from server side.\n * @hide\n ",
  "links" : [ "android.window.WindowTokenClient" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sController",
    "type" : "WindowTokenClientController",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppThread",
    "type" : "IApplicationThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowTokenClientMap",
    "type" : "ArrayMap<IBinder, WindowTokenClient>",
    "comment" : " Mapping from a client defined token to the {@link WindowTokenClient} it represents. ",
    "links" : [ "android.window.WindowTokenClient" ]
  } ],
  "methods" : [ {
    "name" : "public static WindowTokenClientController getInstance()",
    "returnType" : "WindowTokenClientController",
    "comment" : " Gets the singleton controller. ",
    "links" : [ ]
  }, {
    "name" : "public static void overrideForTesting(@NonNull WindowTokenClientController controller)",
    "returnType" : "void",
    "comment" : " Overrides the {@link #getInstance()} for test only. ",
    "links" : [ "#getInstance()" ]
  }, {
    "name" : "public static WindowTokenClientController createInstanceForTesting()",
    "returnType" : "WindowTokenClientController",
    "comment" : " Creates a new instance for test only. ",
    "links" : [ ]
  }, {
    "name" : "public Context getWindowContext(@NonNull IBinder clientToken)",
    "returnType" : "Context",
    "comment" : " Gets the {@link WindowContext} instance for the token. ",
    "links" : [ "android.window.WindowContext" ]
  }, {
    "name" : "public boolean attachToDisplayArea(@NonNull WindowTokenClient client, @WindowType int type, int displayId, @Nullable Bundle options)",
    "returnType" : "boolean",
    "comment" : "\n     * Attaches a {@link WindowTokenClient} to a {@link com.android.server.wm.DisplayArea}.\n     *\n     * @param client The {@link WindowTokenClient} to attach.\n     * @param type The window type of the {@link WindowContext}\n     * @param displayId The {@link Context#getDisplayId() ID of display} to associate with\n     * @param options The window context launched option\n     * @return {@code true} if attaching successfully.\n     ",
    "links" : [ "com.android.server.wm.DisplayArea", "android.window.WindowTokenClient", "android.content.Context#getDisplayId()", "android.window.WindowContext" ]
  }, {
    "name" : "public boolean attachToDisplayContent(@NonNull WindowTokenClient client, int displayId)",
    "returnType" : "boolean",
    "comment" : "\n     * Attaches a {@link WindowTokenClient} to a {@code DisplayContent}.\n     *\n     * @param client The {@link WindowTokenClient} to attach.\n     * @param displayId The {@link Context#getDisplayId() ID of display} to associate with\n     * @return {@code true} if attaching successfully.\n     ",
    "links" : [ "android.window.WindowTokenClient", "android.content.Context#getDisplayId()" ]
  }, {
    "name" : "public boolean attachToWindowToken(@NonNull WindowTokenClient client, @NonNull IBinder windowToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Attaches this {@link WindowTokenClient} to a {@code windowToken}.\n     *\n     * @param client The {@link WindowTokenClient} to attach.\n     * @param windowToken the window token to associated with\n     * @return {@code true} if attaching successfully.\n     ",
    "links" : [ "android.window.WindowTokenClient" ]
  }, {
    "name" : "public void detachIfNeeded(@NonNull WindowTokenClient client)",
    "returnType" : "void",
    "comment" : " Detaches a {@link WindowTokenClient} from associated WindowContainer if there's one. ",
    "links" : [ "android.window.WindowTokenClient" ]
  }, {
    "name" : "private void onWindowContextTokenAttached(@NonNull WindowTokenClient client, @NonNull WindowContextInfo info, boolean shouldReportConfigChange)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)",
    "returnType" : "void",
    "comment" : " Called when receives {@link WindowContextInfoChangeItem}. ",
    "links" : [ "android.app.servertransaction.WindowContextInfoChangeItem" ]
  }, {
    "name" : "public void onWindowContextWindowRemoved(@NonNull IBinder clientToken)",
    "returnType" : "void",
    "comment" : " Called when receives {@link WindowContextWindowRemovalItem}. ",
    "links" : [ "android.app.servertransaction.WindowContextWindowRemovalItem" ]
  }, {
    "name" : "private WindowTokenClient getWindowTokenClient(@NonNull IBinder clientToken)",
    "returnType" : "WindowTokenClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public IWindowManager getWindowManagerService()",
    "returnType" : "IWindowManager",
    "comment" : " Gets the {@link IWindowManager}. ",
    "links" : [ "android.view.IWindowManager" ]
  } ],
  "methodNames" : [ "public static WindowTokenClientController getInstance()", "public static void overrideForTesting(@NonNull WindowTokenClientController controller)", "public static WindowTokenClientController createInstanceForTesting()", "public Context getWindowContext(@NonNull IBinder clientToken)", "public boolean attachToDisplayArea(@NonNull WindowTokenClient client, @WindowType int type, int displayId, @Nullable Bundle options)", "public boolean attachToDisplayContent(@NonNull WindowTokenClient client, int displayId)", "public boolean attachToWindowToken(@NonNull WindowTokenClient client, @NonNull IBinder windowToken)", "public void detachIfNeeded(@NonNull WindowTokenClient client)", "private void onWindowContextTokenAttached(@NonNull WindowTokenClient client, @NonNull WindowContextInfo info, boolean shouldReportConfigChange)", "public void onWindowContextInfoChanged(@NonNull IBinder clientToken, @NonNull WindowContextInfo info)", "public void onWindowContextWindowRemoved(@NonNull IBinder clientToken)", "private WindowTokenClient getWindowTokenClient(@NonNull IBinder clientToken)", "public IWindowManager getWindowManagerService()" ],
  "variableNames" : [ "TAG", "sController", "mLock", "mAppThread", "mWindowTokenClientMap" ]
}