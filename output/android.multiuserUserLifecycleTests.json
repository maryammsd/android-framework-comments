{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/multiuser/UserLifecycleTests.java",
  "packageName" : "android.multiuser",
  "className" : "UserLifecycleTests",
  "comment" : "\n * Perf tests for user life cycle events.\n *\n * Running the tests:\n *\n * make MultiUserPerfTests &&\n * adb install -r \\\n *     ${ANDROID_PRODUCT_OUT}/data/app/MultiUserPerfTests/MultiUserPerfTests.apk &&\n * adb shell am instrument -e class android.multiuser.UserLifecycleTests \\\n *     -w com.android.perftests.multiuser/androidx.test.runner.AndroidJUnitRunner\n *\n * or\n *\n * bit MultiUserPerfTests:android.multiuser.UserLifecycleTests\n *\n * Note: If you use bit for running the tests, benchmark results won't be printed on the host side.\n * But in either case, results can be checked on the device side 'adb logcat -s UserLifecycleTests'\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIMEOUT_IN_SECOND",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHECK_USER_REMOVED_INTERVAL_MS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DUMMY_PACKAGE_NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PACKAGE_WHITELIST_MODE_PROP",
    "type" : "String",
    "comment" : " Copy of UserSystemPackageInstaller whitelist mode constants.",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_PACKAGE_WHITELIST_MODE_DISABLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_PACKAGE_WHITELIST_MODE_ENFORCE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "USER_TYPE_PACKAGE_WHITELIST_MODE_DEVICE_DEFAULT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUm",
    "type" : "UserManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAm",
    "type" : "ActivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIam",
    "type" : "IActivityManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPm",
    "type" : "PackageManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsersToRemove",
    "type" : "ArrayList<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasManagedUserFeature",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRunner",
    "type" : "BenchmarkRunner",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReporter",
    "type" : "BenchmarkResultsReporter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setUp()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void tearDown()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createUser()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void createAndStartUser() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void startUser() throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Measures the time until ACTION_USER_STARTED is received.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void startAndUnlockUser() throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Measures the time until unlock listener is triggered and user is unlocked.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void switchUser() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void switchUser_stopped() throws Exception",
    "returnType" : "void",
    "comment" : " Tests switching to an already-created, but no-longer-running, user. ",
    "links" : [ ]
  }, {
    "name" : "public void switchUser_running() throws Exception",
    "returnType" : "void",
    "comment" : " Tests switching to an already-created already-running non-owner user. ",
    "links" : [ ]
  }, {
    "name" : "public void stopUser() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void lockedBootCompleted() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void ephemeralUserStopped() throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileCreate() throws Exception",
    "returnType" : "void",
    "comment" : " Tests creating a new profile. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlock() throws Exception",
    "returnType" : "void",
    "comment" : " Tests starting (unlocking) a newly-created profile. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlock_stopped() throws Exception",
    "returnType" : "void",
    "comment" : " Tests starting (unlocking) an already-created, but no-longer-running, profile. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlockAndLaunchApp() throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Tests starting (unlocking) and launching an already-installed app in a newly-created profile.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlockAndLaunchApp_stopped() throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Tests starting (unlocking) and launching a previously-launched app\n     * in an already-created, but no-longer-running, profile.\n     * A sort of combination of {@link #managedProfileUnlockAndLaunchApp} and\n     * {@link #managedProfileUnlock_stopped}}.\n     ",
    "links" : [ "#managedProfileUnlockAndLaunchApp", "#managedProfileUnlock_stopped" ]
  }, {
    "name" : "public void managedProfileInstall() throws Exception",
    "returnType" : "void",
    "comment" : " Tests installing a pre-existing app in a newly-created profile. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileCreateUnlockInstallAndLaunchApp() throws Exception",
    "returnType" : "void",
    "comment" : "\n     * Tests creating a new profile, starting (unlocking) it, installing an app,\n     * and launching that app in it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileStopped() throws Exception",
    "returnType" : "void",
    "comment" : " Tests stopping a profile. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlock_usingWhitelist() throws Exception",
    "returnType" : "void",
    "comment" : " Tests starting (unlocking) a newly-created profile using the user-type-pkg-whitelist. ",
    "links" : [ ]
  }, {
    "name" : "public void managedProfileUnlock_notUsingWhitelist() throws Exception",
    "returnType" : "void",
    "comment" : " Tests starting (unlocking) a newly-created profile NOT using the user-type-pkg-whitelist. ",
    "links" : [ ]
  }, {
    "name" : "private int createUserNoFlags()",
    "returnType" : "int",
    "comment" : " Creates a new user, returning its userId. ",
    "links" : [ ]
  }, {
    "name" : "private int createUserWithFlags(int flags)",
    "returnType" : "int",
    "comment" : " Creates a new user with the given flags, returning its userId. ",
    "links" : [ ]
  }, {
    "name" : "private int createManagedProfile()",
    "returnType" : "int",
    "comment" : " Creates a managed (work) profile under the current user, returning its userId. ",
    "links" : [ ]
  }, {
    "name" : "private void startUserInBackgroundAndWaitForUnlock(int userId)",
    "returnType" : "void",
    "comment" : "\n     * Start user in background and wait for it to unlock by waiting for\n     * UserState.mUnlockProgress.finish().\n     * <p> To start in foreground instead, see {@link #switchUser(int)}.\n     * <p> This should always be used for profiles since profiles cannot be started in foreground.\n     ",
    "links" : [ "#switchUser" ]
  }, {
    "name" : "private void switchUser(int userId) throws Exception",
    "returnType" : "void",
    "comment" : " Starts the given user in the foreground. ",
    "links" : [ ]
  }, {
    "name" : "private void stopUser(int userId, boolean force) throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int initializeNewUserAndSwitchBack(boolean stopNewUser) throws Exception",
    "returnType" : "int",
    "comment" : "\n     * Creates a user and waits for its ACTION_USER_UNLOCKED.\n     * Then switches to back to the original user and waits for its switchUser() to finish.\n     *\n     * @param stopNewUser whether to stop the new user after switching to otherUser.\n     * @return userId of the newly created user.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void installPreexistingApp(int userId, String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Installs the given package in the given user.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void startApp(int userId, String packageName) throws RemoteException",
    "returnType" : "void",
    "comment" : "\n     * Launches the given package in the given user.\n     * Make sure the keyguard has been dismissed prior to calling.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void registerUserSwitchObserver(final CountDownLatch switchLatch, final CountDownLatch bootCompleteLatch, final int userId) throws Exception",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void registerBroadcastReceiver(final String action, final CountDownLatch latch, final int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getUserTypePackageWhitelistMode()",
    "returnType" : "int",
    "comment" : " Gets the PACKAGE_WHITELIST_MODE_PROP System Property. ",
    "links" : [ ]
  }, {
    "name" : "private void setUserTypePackageWhitelistMode(int mode)",
    "returnType" : "void",
    "comment" : " Sets the PACKAGE_WHITELIST_MODE_PROP System Property to the given value. ",
    "links" : [ ]
  }, {
    "name" : "private void removeUser(int userId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attestTrue(String message, boolean assertion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void attestFalse(String message, boolean assertion)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "TIMEOUT_IN_SECOND", "CHECK_USER_REMOVED_INTERVAL_MS", "DUMMY_PACKAGE_NAME", "PACKAGE_WHITELIST_MODE_PROP", "USER_TYPE_PACKAGE_WHITELIST_MODE_DISABLE", "USER_TYPE_PACKAGE_WHITELIST_MODE_ENFORCE", "USER_TYPE_PACKAGE_WHITELIST_MODE_IMPLICIT_WHITELIST", "USER_TYPE_PACKAGE_WHITELIST_MODE_DEVICE_DEFAULT", "mUm", "mAm", "mIam", "mPm", "mUsersToRemove", "mHasManagedUserFeature", "mRunner", "mReporter" ],
  "methodNames" : [ "public void setUp()", "public void tearDown()", "public void createUser()", "public void createAndStartUser() throws Exception", "public void startUser() throws Exception", "public void startAndUnlockUser() throws Exception", "public void switchUser() throws Exception", "public void switchUser_stopped() throws Exception", "public void switchUser_running() throws Exception", "public void stopUser() throws Exception", "public void lockedBootCompleted() throws Exception", "public void ephemeralUserStopped() throws Exception", "public void managedProfileCreate() throws Exception", "public void managedProfileUnlock() throws Exception", "public void managedProfileUnlock_stopped() throws Exception", "public void managedProfileUnlockAndLaunchApp() throws Exception", "public void managedProfileUnlockAndLaunchApp_stopped() throws Exception", "public void managedProfileInstall() throws Exception", "public void managedProfileCreateUnlockInstallAndLaunchApp() throws Exception", "public void managedProfileStopped() throws Exception", "public void managedProfileUnlock_usingWhitelist() throws Exception", "public void managedProfileUnlock_notUsingWhitelist() throws Exception", "private int createUserNoFlags()", "private int createUserWithFlags(int flags)", "private int createManagedProfile()", "private void startUserInBackgroundAndWaitForUnlock(int userId)", "private void switchUser(int userId) throws Exception", "private void stopUser(int userId, boolean force) throws Exception", "private int initializeNewUserAndSwitchBack(boolean stopNewUser) throws Exception", "private void installPreexistingApp(int userId, String packageName) throws RemoteException", "private void startApp(int userId, String packageName) throws RemoteException", "private void registerUserSwitchObserver(final CountDownLatch switchLatch, final CountDownLatch bootCompleteLatch, final int userId) throws Exception", "private void registerBroadcastReceiver(final String action, final CountDownLatch latch, final int userId)", "private int getUserTypePackageWhitelistMode()", "private void setUserTypePackageWhitelistMode(int mode)", "private void removeUser(int userId)", "private void attestTrue(String message, boolean assertion)", "private void attestFalse(String message, boolean assertion)" ]
}