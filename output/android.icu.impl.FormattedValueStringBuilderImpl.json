{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/FormattedValueStringBuilderImpl.java",
  "packageName" : "android.icu.impl",
  "className" : "FormattedValueStringBuilderImpl",
  "comment" : "\n * Implementation of FormattedValue based on FormattedStringBuilder.\n *\n * The implementation currently revolves around numbers and number fields.\n * However, it can be generalized in the future when there is a need.\n *\n * In C++, this implements FormattedValue. In Java, it is a stateless\n * collection of static functions to avoid having to use nested objects.\n *\n * @author sffc (Shane Carr)\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static int findSpan(FormattedStringBuilder self, Object value)",
    "returnType" : "int",
    "comment" : "\n     * Finds the index at which a span field begins.\n     *\n     * @param value The value of the span field to search for.\n     * @return The index, or -1 if not found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void applySpanRange(FormattedStringBuilder self, UFormat.SpanField spanField, Object value, int start, int end)",
    "returnType" : "void",
    "comment" : "\n     * Upgrade a range of a string to a span field.\n     *\n     * Similar to appendSpanInfo in ICU4C.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean nextFieldPosition(FormattedStringBuilder self, FieldPosition fp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static AttributedCharacterIterator toCharacterIterator(FormattedStringBuilder self, Field numericField)",
    "returnType" : "AttributedCharacterIterator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean nextPosition(FormattedStringBuilder self, ConstrainedFieldPosition cfpos, Field numericField)",
    "returnType" : "boolean",
    "comment" : "\n     * Implementation of nextPosition consistent with the contract of FormattedValue.\n     *\n     * @param cfpos\n     *            The argument passed to the public API.\n     * @param numericField\n     *            Optional. If non-null, apply this field to the entire numeric portion of the string.\n     * @return See FormattedValue#nextPosition.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isIntOrGroup(Object field)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isNumericField(Object field)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isTrimmable(Object field)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int trimBack(FormattedStringBuilder self, int limit)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int trimFront(FormattedStringBuilder self, int start)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static int findSpan(FormattedStringBuilder self, Object value)", "public static void applySpanRange(FormattedStringBuilder self, UFormat.SpanField spanField, Object value, int start, int end)", "public static boolean nextFieldPosition(FormattedStringBuilder self, FieldPosition fp)", "public static AttributedCharacterIterator toCharacterIterator(FormattedStringBuilder self, Field numericField)", "public static boolean nextPosition(FormattedStringBuilder self, ConstrainedFieldPosition cfpos, Field numericField)", "private static boolean isIntOrGroup(Object field)", "private static boolean isNumericField(Object field)", "private static boolean isTrimmable(Object field)", "private static int trimBack(FormattedStringBuilder self, int limit)", "private static int trimFront(FormattedStringBuilder self, int start)" ],
  "variableNames" : [ ]
}