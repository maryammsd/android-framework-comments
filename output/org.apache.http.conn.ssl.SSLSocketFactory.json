{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/http/conn/ssl/SSLSocketFactory.java",
  "packageName" : "org.apache.http.conn.ssl",
  "className" : "SSLSocketFactory",
  "comment" : "\n * Layered socket factory for TLS/SSL connections, based on JSSE.\n *.\n * <p>\n * SSLSocketFactory can be used to validate the identity of the HTTPS \n * server against a list of trusted certificates and to authenticate to\n * the HTTPS server using a private key. \n * </p>\n * \n * <p>\n * SSLSocketFactory will enable server authentication when supplied with\n * a {@link KeyStore truststore} file containg one or several trusted\n * certificates. The client secure socket will reject the connection during\n * the SSL session handshake if the target HTTPS server attempts to\n * authenticate itself with a non-trusted certificate.\n * </p>\n * \n * <p>\n * Use JDK keytool utility to import a trusted certificate and generate a truststore file:    \n *    <pre>\n *     keytool -import -alias \"my server cert\" -file server.crt -keystore my.truststore\n *    </pre>\n * </p>\n * \n * <p>\n * SSLSocketFactory will enable client authentication when supplied with\n * a {@link KeyStore keystore} file containg a private key/public certificate\n * pair. The client secure socket will use the private key to authenticate\n * itself to the target HTTPS server during the SSL session handshake if\n * requested to do so by the server.\n * The target HTTPS server will in its turn verify the certificate presented\n * by the client in order to establish client's authenticity\n * </p>\n * \n * <p>\n * Use the following sequence of actions to generate a keystore file\n * </p>\n *   <ul>\n *     <li>\n *      <p>\n *      Use JDK keytool utility to generate a new key\n *      <pre>keytool -genkey -v -alias \"my client key\" -validity 365 -keystore my.keystore</pre>\n *      For simplicity use the same password for the key as that of the keystore\n *      </p>\n *     </li>\n *     <li>\n *      <p>\n *      Issue a certificate signing request (CSR)\n *      <pre>keytool -certreq -alias \"my client key\" -file mycertreq.csr -keystore my.keystore</pre>\n *     </p>\n *     </li>\n *     <li>\n *      <p>\n *      Send the certificate request to the trusted Certificate Authority for signature. \n *      One may choose to act as their own CA and sign the certificate request using a PKI\n *      tool, such as OpenSSL.\n *      </p>\n *     </li>\n *     <li>\n *      <p>\n *       Import the trusted CA root certificate\n *       <pre>keytool -import -alias \"my trusted ca\" -file caroot.crt -keystore my.keystore</pre> \n *      </p>\n *     </li>\n *     <li>\n *      <p>\n *       Import the PKCS#7 file containg the complete certificate chain\n *       <pre>keytool -import -alias \"my client key\" -file mycert.p7 -keystore my.keystore</pre> \n *      </p>\n *     </li>\n *     <li>\n *      <p>\n *       Verify the content the resultant keystore file\n *       <pre>keytool -list -v -keystore my.keystore</pre> \n *      </p>\n *     </li>\n *   </ul>\n * @author <a href=\"mailto:oleg at ural.ru\">Oleg Kalnichevski</a>\n * @author Julius Davies\n *\n * @deprecated Please use {@link java.net.URL#openConnection} instead.\n *     Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>\n *     for further details.\n ",
  "links" : [ "java.security.KeyStore", "java.net.URL#openConnection" ],
  "variables" : [ {
    "name" : "TLS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SSL",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SSLV2",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ALLOW_ALL_HOSTNAME_VERIFIER",
    "type" : "X509HostnameVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BROWSER_COMPATIBLE_HOSTNAME_VERIFIER",
    "type" : "X509HostnameVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STRICT_HOSTNAME_VERIFIER",
    "type" : "X509HostnameVerifier",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sslcontext",
    "type" : "SSLContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "socketfactory",
    "type" : "javax.net.ssl.SSLSocketFactory",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "nameResolver",
    "type" : "HostNameResolver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "hostnameVerifier",
    "type" : "X509HostnameVerifier",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static SSLSocketFactory getSocketFactory()",
    "returnType" : "SSLSocketFactory",
    "comment" : "\n     * Gets an singleton instance of the SSLProtocolSocketFactory.\n     * @return a SSLProtocolSocketFactory\n     ",
    "links" : [ ]
  }, {
    "name" : "private static KeyManager[] createKeyManagers(final KeyStore keystore, final String password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "KeyManager[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static TrustManager[] createTrustManagers(final KeyStore keystore) throws KeyStoreException, NoSuchAlgorithmException",
    "returnType" : "TrustManager[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket() throws IOException",
    "returnType" : "Socket",
    "comment" : " non-javadoc, see interface org.apache.http.conn.SocketFactory",
    "links" : [ ]
  }, {
    "name" : "public Socket connectSocket(final Socket sock, final String host, final int port, final InetAddress localAddress, int localPort, final HttpParams params) throws IOException",
    "returnType" : "Socket",
    "comment" : " non-javadoc, see interface org.apache.http.conn.SocketFactory",
    "links" : [ ]
  }, {
    "name" : "public boolean isSecure(Socket sock) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * Checks whether a socket connection is secure.\n     * This factory creates TLS/SSL socket connections\n     * which, by default, are considered secure.\n     * <br/>\n     * Derived classes may override this method to perform\n     * runtime checks, for example based on the cypher suite.\n     *\n     * @param sock      the connected socket\n     *\n     * @return  <code>true</code>\n     *\n     * @throws IllegalArgumentException if the argument is invalid\n     ",
    "links" : [ ]
  }, {
    "name" : "public Socket createSocket(final Socket socket, final String host, final int port, final boolean autoClose) throws IOException, UnknownHostException",
    "returnType" : "Socket",
    "comment" : " non-javadoc, see interface LayeredSocketFactory",
    "links" : [ ]
  }, {
    "name" : "public void setHostnameVerifier(X509HostnameVerifier hostnameVerifier)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public X509HostnameVerifier getHostnameVerifier()",
    "returnType" : "X509HostnameVerifier",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static SSLSocketFactory getSocketFactory()", "private static KeyManager[] createKeyManagers(final KeyStore keystore, final String password) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException", "private static TrustManager[] createTrustManagers(final KeyStore keystore) throws KeyStoreException, NoSuchAlgorithmException", "public Socket createSocket() throws IOException", "public Socket connectSocket(final Socket sock, final String host, final int port, final InetAddress localAddress, int localPort, final HttpParams params) throws IOException", "public boolean isSecure(Socket sock) throws IllegalArgumentException", "public Socket createSocket(final Socket socket, final String host, final int port, final boolean autoClose) throws IOException, UnknownHostException", "public void setHostnameVerifier(X509HostnameVerifier hostnameVerifier)", "public X509HostnameVerifier getHostnameVerifier()" ],
  "variableNames" : [ "TLS", "SSL", "SSLV2", "ALLOW_ALL_HOSTNAME_VERIFIER", "BROWSER_COMPATIBLE_HOSTNAME_VERIFIER", "STRICT_HOSTNAME_VERIFIER", "sslcontext", "socketfactory", "nameResolver", "hostnameVerifier" ]
}