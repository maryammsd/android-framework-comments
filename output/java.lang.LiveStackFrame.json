{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/LiveStackFrame.java",
  "packageName" : "java.lang",
  "className" : "LiveStackFrame",
  "comment" : " package-private ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public Object[] getMonitors()",
    "returnType" : "Object[]",
    "comment" : "\n     * Return the monitors held by this stack frame. This method returns\n     * an empty array if no monitor is held by this stack frame.\n     *\n     * @return the monitors held by this stack frames\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] getLocals()",
    "returnType" : "Object[]",
    "comment" : "\n     * Gets the local variable array of this stack frame.\n     *\n     * <p>A single local variable can hold a value of type boolean, byte, char,\n     * short, int, float, reference or returnAddress.  A pair of local variables\n     * can hold a value of type long or double (JVMS section 2.6.1).  Primitive\n     * locals are represented in the returned array as {@code PrimitiveSlot}s,\n     * with longs and doubles occupying a pair of consecutive\n     * {@code PrimitiveSlot}s.\n     *\n     * <p>The current VM implementation does not provide specific type\n     * information for primitive locals.  This method simply returns the raw\n     * contents of the VM's primitive locals on a best-effort basis, without\n     * indicating a specific type.\n     *\n     * <p>The returned array may contain null entries for local variables that\n     * are not live.\n     *\n     * @implNote\n     * <p> The specific subclass of {@code PrimitiveSlot} will reflect the\n     * underlying architecture, and will be either {@code PrimitiveSlot32} or\n     * {@code PrimitiveSlot64}.\n     *\n     * <p>How a long or double value is stored in the pair of\n     * {@code PrimitiveSlot}s can vary based on the underlying architecture and\n     * VM implementation.  On 32-bit architectures, long/double values are split\n     * between the two {@code PrimitiveSlot32}s.\n     * On 64-bit architectures, the entire value may be stored in one of the\n     * {@code PrimitiveSlot64}s, with the other {@code PrimitiveSlot64} being\n     * unused.\n     *\n     * <p>The contents of the unused, high-order portion of a\n     * {@code PrimitiveSlot64} (when storing a primitive other than a long or\n     * double) is unspecified.  In particular, the unused bits are not\n     * necessarily zeroed out.\n     *\n     * @return  the local variable array of this stack frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] getStack()",
    "returnType" : "Object[]",
    "comment" : "\n     * Gets the operand stack of this stack frame.\n     *\n     * <p>\n     * The 0-th element of the returned array represents the top of the operand stack.\n     * This method returns an empty array if the operand stack is empty.\n     *\n     * <p>Each entry on the operand stack can hold a value of any Java Virtual\n     * Machine Type.\n     * For a value of primitive type, the element in the returned array is\n     * a {@link PrimitiveSlot} object; otherwise, the element is the {@code Object}\n     * on the operand stack.\n     *\n     * @return the operand stack of this stack frame.\n     ",
    "links" : [ "PrimitiveSlot" ]
  }, {
    "name" : "public static StackWalker getStackWalker()",
    "returnType" : "StackWalker",
    "comment" : "\n     * Gets {@code StackWalker} that can get locals and operands.\n     *\n     * @throws SecurityException if the security manager is present and\n     * denies access to {@code RuntimePermission(\"liveStackFrames\")}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static StackWalker getStackWalker(Set<StackWalker.Option> options)",
    "returnType" : "StackWalker",
    "comment" : "\n     * Gets a {@code StackWalker} instance with the given options specifying\n     * the stack frame information it can access, and which will traverse at most\n     * the given {@code maxDepth} number of stack frames.  If no option is\n     * specified, this {@code StackWalker} obtains the method name and\n     * the class name with all\n     * {@linkplain StackWalker.Option#SHOW_HIDDEN_FRAMES hidden frames} skipped.\n     * The returned {@code StackWalker} can get locals and operands.\n     *\n     * @param options stack walk {@link StackWalker.Option options}\n     *\n     * @throws SecurityException if the security manager is present and\n     * it denies access to {@code RuntimePermission(\"liveStackFrames\")};\n     * or if the given {@code options} contains\n     * {@link StackWalker.Option#RETAIN_CLASS_REFERENCE Option.RETAIN_CLASS_REFERENCE}\n     * and it denies access to {@code RuntimePermission(\"getStackWalkerWithClassReference\")}.\n     ",
    "links" : [ "StackWalker.Option#RETAIN_CLASS_REFERENCE", "StackWalker.Option" ]
  } ],
  "methodNames" : [ "public Object[] getMonitors()", "public Object[] getLocals()", "public Object[] getStack()", "public static StackWalker getStackWalker()", "public static StackWalker getStackWalker(Set<StackWalker.Option> options)" ],
  "variableNames" : [ ]
}