{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/tv/tuner/Descrambler.java",
  "packageName" : "android.media.tv.tuner",
  "className" : "Descrambler",
  "comment" : "\n * This class is used to interact with descramblers.\n *\n * <p> Descrambler is a hardware component used to descramble data.\n *\n * <p> This class controls the TIS interaction with Tuner HAL.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "PID_TYPE_T",
    "type" : "int",
    "comment" : "\n     * Packet ID is used to specify packets in transport stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "PID_TYPE_MMTP",
    "type" : "int",
    "comment" : "\n     * Packet ID is used to specify packets in MMTP.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsClosed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private native int nativeAddPid(int pidType, int pid, Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeRemovePid(int pidType, int pid, Filter filter)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeSetKeyToken(byte[] keyToken)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native int nativeClose()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int addPid(@PidType int pidType, int pid, @Nullable Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Add packets' PID to the descrambler for descrambling.\n     *\n     * The descrambler will start descrambling packets with this PID. Multiple PIDs can be added\n     * into one descrambler instance because descambling can happen simultaneously on packets\n     * from different PIDs.\n     *\n     * If the Descrambler previously contained a filter for the PID, the old filter is replaced\n     * by the specified filter.\n     *\n     * @param pidType the type of the PID.\n     * @param pid the PID of packets to start to be descrambled.\n     * @param filter an optional filter instance to identify upper stream.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int removePid(@PidType int pidType, int pid, @Nullable Filter filter)",
    "returnType" : "int",
    "comment" : "\n     * Remove packets' PID from the descrambler\n     *\n     * The descrambler will stop descrambling packets with this PID.\n     *\n     * @param pidType the type of the PID.\n     * @param pid the PID of packets to stop to be descrambled.\n     * @param filter an optional filter instance to identify upper stream.\n     * @return result status of the operation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int setKeyToken(@NonNull byte[] keyToken)",
    "returnType" : "int",
    "comment" : "\n     * Set a key token to link descrambler to a key slot. Use {@link isValidKeyToken(byte[])} to\n     * validate the key token format. Invalid key token would cause no-op and return\n     * {@link Tuner.RESULT_INVALID_ARGUMENT}.\n     *\n     * <p>A descrambler instance can have only one key slot to link, but a key slot can hold a few\n     * keys for different purposes. {@link Tuner.VOID_KEYTOKEN} is considered valid.\n     *\n     * @param keyToken the token to be used to link the key slot. Use {@link Tuner#VOID_KEYTOKEN}\n     *        to remove the current key from descrambler. If the current keyToken comes from a\n     *        MediaCas session, use {@link Tuner#VOID_KEYTOKEN} to remove current key before\n     *        closing the MediaCas session.\n     * @return result status of the operation.\n     ",
    "links" : [ "isValidKeyToken(byte", "Tuner.RESULT_INVALID_ARGUMENT", "Tuner.VOID_KEYTOKEN", "android.media.tv.tuner.Tuner#VOID_KEYTOKEN" ]
  }, {
    "name" : "public static boolean isValidKeyToken(@NonNull byte[] keyToken)",
    "returnType" : "boolean",
    "comment" : "\n     * Validate the key token format as the parameter of {@link setKeyToken(byte[])}.\n     *\n     * <p>The key token is expected to be less than 128 bits.\n     *\n     * @param keyToken the token to be validated.\n     * @return true if the given key token is a valid one.\n     ",
    "links" : [ "setKeyToken(byte" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Release the descrambler instance.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private native int nativeAddPid(int pidType, int pid, Filter filter)", "private native int nativeRemovePid(int pidType, int pid, Filter filter)", "private native int nativeSetKeyToken(byte[] keyToken)", "private native int nativeClose()", "public int addPid(@PidType int pidType, int pid, @Nullable Filter filter)", "public int removePid(@PidType int pidType, int pid, @Nullable Filter filter)", "public int setKeyToken(@NonNull byte[] keyToken)", "public static boolean isValidKeyToken(@NonNull byte[] keyToken)", "public void close()" ],
  "variableNames" : [ "PID_TYPE_T", "PID_TYPE_MMTP", "TAG", "mNativeContext", "mIsClosed", "mLock" ]
}