{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/autofill/AutofillManager.java",
  "packageName" : "android.view.autofill",
  "className" : "CompatibilityBridge",
  "comment" : "\n     * Implementation of the accessibility based compatibility.\n     ",
  "variables" : [ {
    "name" : "mFocusedBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTempBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusedWindowId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFocusedNodeId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCompatServiceInfo",
    "type" : "AccessibilityServiceInfo",
    "comment" : " Need to report a fake service in case a11y clients check the service list",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private AccessibilityServiceInfo getCompatServiceInfo()",
    "returnType" : "AccessibilityServiceInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isEnabled(boolean accessibilityEnabled)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getRelevantEventTypes(int relevantEventTypes)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(List<AccessibilityServiceInfo> installedServices)",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags, List<AccessibilityServiceInfo> enabledService)",
    "returnType" : "List<AccessibilityServiceInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AccessibilityEvent onAccessibilityEvent(AccessibilityEvent event, boolean accessibilityEnabled, int relevantEventTypes)",
    "returnType" : "AccessibilityEvent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean notifyViewEntered(int windowId, long nodeId, Rect focusedBounds)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyViewExited(int windowId, long nodeId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyValueChanged(int windowId, long nodeId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void notifyViewClicked(int windowId, long nodeId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateTrackedViewsLocked()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private View findViewByAccessibilityId(int windowId, long nodeId)",
    "returnType" : "View",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private AccessibilityNodeInfo findVirtualNodeByAccessibilityId(View view, int virtualId)",
    "returnType" : "AccessibilityNodeInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isVirtualNode(int nodeId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "mFocusedBounds", "mTempBounds", "mFocusedWindowId", "mFocusedNodeId", "mCompatServiceInfo" ],
  "methodNames" : [ "private AccessibilityServiceInfo getCompatServiceInfo()", "public boolean isEnabled(boolean accessibilityEnabled)", "public int getRelevantEventTypes(int relevantEventTypes)", "public List<AccessibilityServiceInfo> getInstalledAccessibilityServiceList(List<AccessibilityServiceInfo> installedServices)", "public List<AccessibilityServiceInfo> getEnabledAccessibilityServiceList(int feedbackTypeFlags, List<AccessibilityServiceInfo> enabledService)", "public AccessibilityEvent onAccessibilityEvent(AccessibilityEvent event, boolean accessibilityEnabled, int relevantEventTypes)", "private boolean notifyViewEntered(int windowId, long nodeId, Rect focusedBounds)", "private void notifyViewExited(int windowId, long nodeId)", "private void notifyValueChanged(int windowId, long nodeId)", "private void notifyViewClicked(int windowId, long nodeId)", "private void updateTrackedViewsLocked()", "private View findViewByAccessibilityId(int windowId, long nodeId)", "private AccessibilityNodeInfo findVirtualNodeByAccessibilityId(View view, int virtualId)", "private boolean isVirtualNode(int nodeId)" ]
}