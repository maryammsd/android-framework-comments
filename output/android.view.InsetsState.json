{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/InsetsState.java",
  "packageName" : "android.view",
  "className" : "InsetsState",
  "comment" : "\n * Holder for state of system windows that cause window insets for all other windows in the system.\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSources",
    "type" : "SparseArray<InsetsSource>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisplayFrame",
    "type" : "Rect",
    "comment" : "\n     * The frame of the display these sources are relative to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mDisplayCutout",
    "type" : "DisplayCutout.ParcelableWrapper",
    "comment" : " The area cut from the display. ",
    "links" : [ ]
  }, {
    "name" : "mRoundedCornerFrame",
    "type" : "Rect",
    "comment" : "\n     * The frame that rounded corners are relative to.\n     *\n     * There are 2 cases that will draw fake rounded corners:\n     *   1. In split-screen mode\n     *   2. Devices with a task bar\n     * We need to report these fake rounded corners to apps by re-calculating based on this frame.\n     ",
    "links" : [ ]
  }, {
    "name" : "mRoundedCorners",
    "type" : "RoundedCorners",
    "comment" : " The rounded corners on the display ",
    "links" : [ ]
  }, {
    "name" : "mPrivacyIndicatorBounds",
    "type" : "PrivacyIndicatorBounds",
    "comment" : " The bounds of the Privacy Indicator ",
    "links" : [ ]
  }, {
    "name" : "mDisplayShape",
    "type" : "DisplayShape",
    "comment" : " The display shape ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<InsetsState>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public WindowInsets calculateInsets(Rect frame, @Nullable InsetsState ignoringVisibilityState, boolean isScreenRound, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags, int windowType, @ActivityType int activityType, @Nullable @InternalInsetsSide SparseIntArray idSideMap)",
    "returnType" : "WindowInsets",
    "comment" : "\n     * Calculates {@link WindowInsets} based on the current source configuration.\n     *\n     * @param frame The frame to calculate the insets relative to.\n     * @param ignoringVisibilityState {@link InsetsState} used to calculate\n     *        {@link WindowInsets#getInsetsIgnoringVisibility(int)} information, or pass\n     *        {@code null} to use this state to calculate that information.\n     * @return The calculated insets.\n     ",
    "links" : [ "android.view.InsetsState", "android.view.WindowInsets#getInsetsIgnoringVisibility(int)", "android.view.WindowInsets" ]
  }, {
    "name" : "private DisplayCutout calculateRelativeCutout(Rect frame)",
    "returnType" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private RoundedCorners calculateRelativeRoundedCorners(Rect frame)",
    "returnType" : "RoundedCorners",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private PrivacyIndicatorBounds calculateRelativePrivacyIndicatorBounds(Rect frame)",
    "returnType" : "PrivacyIndicatorBounds",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private DisplayShape calculateRelativeDisplayShape(Rect frame)",
    "returnType" : "DisplayShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateInsets(Rect frame, @InsetsType int types, boolean ignoreVisibility)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateInsets(Rect frame, @InsetsType int types, @InsetsType int requestedVisibleTypes)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Insets calculateVisibleInsets(Rect frame, int windowType, @ActivityType int activityType, @SoftInputModeFlags int softInputMode, int windowFlags)",
    "returnType" : "Insets",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int calculateUncontrollableInsetsFromFrame(Rect frame)",
    "returnType" : "int",
    "comment" : "\n     * Calculate which insets *cannot* be controlled, because the frame does not cover the\n     * respective side of the inset.\n     *\n     * If the frame of our window doesn't cover the entire inset, the control API makes very\n     * little sense, as we don't deal with negative insets.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean canControlSource(Rect frame, InsetsSource source)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processSource(InsetsSource source, Rect relativeFrame, boolean ignoreVisibility, Insets[] typeInsetsMap, @Nullable @InternalInsetsSide SparseIntArray idSideMap, @Nullable boolean[] typeVisibilityMap, Rect[][] typeBoundingRectsMap)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void processSourceAsPublicType(InsetsSource source, Insets[] typeInsetsMap, @InternalInsetsSide @Nullable SparseIntArray idSideMap, @Nullable boolean[] typeVisibilityMap, Rect[][] typeBoundingRectsMap, Insets insets, Rect[] boundingRects, int type)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Rect[] concatenate(Rect[] a, Rect[] b)",
    "returnType" : "Rect[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource getOrCreateSource(int id, int type)",
    "returnType" : "InsetsSource",
    "comment" : "\n     * Gets the source mapped from the ID, or creates one if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource peekSource(int id)",
    "returnType" : "InsetsSource",
    "comment" : "\n     * Gets the source mapped from the ID, or <code>null</code> if no such mapping has been made.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int sourceIdAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Given an index in the range <code>0...sourceSize()-1</code>, returns the source ID from the\n     * <code>index</code>th ID-source mapping that this state stores.\n     ",
    "links" : [ ]
  }, {
    "name" : "public InsetsSource sourceAt(int index)",
    "returnType" : "InsetsSource",
    "comment" : "\n     * Given an index in the range <code>0...sourceSize()-1</code>, returns the source from the\n     * <code>index</code>th ID-source mapping that this state stores.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int sourceSize()",
    "returnType" : "int",
    "comment" : "\n     * Returns the amount of the sources.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSourceOrDefaultVisible(int id, @InsetsType int type)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns if the source is visible or the type is default visible and the source doesn't exist.\n     *\n     * @param id The ID of the source.\n     * @param type The {@link InsetsType} to see if it is default visible.\n     * @return {@code true} if the source is visible or the type is default visible and the source\n     *         doesn't exist.\n     ",
    "links" : [ "android.view.WindowInsets.Type.InsetsType" ]
  }, {
    "name" : "public void setDisplayFrame(Rect frame)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Rect getDisplayFrame()",
    "returnType" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayCutout(DisplayCutout cutout)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayCutout getDisplayCutout()",
    "returnType" : "DisplayCutout",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void getDisplayCutoutSafe(Rect outBounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRoundedCorners(RoundedCorners roundedCorners)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RoundedCorners getRoundedCorners()",
    "returnType" : "RoundedCorners",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setRoundedCornerFrame(Rect frame)",
    "returnType" : "void",
    "comment" : "\n     * Set the frame that will be used to calculate the rounded corners.\n     *\n     * @see #mRoundedCornerFrame\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPrivacyIndicatorBounds(PrivacyIndicatorBounds bounds)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PrivacyIndicatorBounds getPrivacyIndicatorBounds()",
    "returnType" : "PrivacyIndicatorBounds",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setDisplayShape(DisplayShape displayShape)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DisplayShape getDisplayShape()",
    "returnType" : "DisplayShape",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void removeSource(int id)",
    "returnType" : "void",
    "comment" : "\n     * Removes the source which has the ID from this state, if there was any.\n     *\n     * @param id The ID of the source to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeSourceAt(int index)",
    "returnType" : "void",
    "comment" : "\n     * Removes the source at the specified index.\n     *\n     * @param index The index of the source to remove.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSourceVisible(int id, boolean visible)",
    "returnType" : "void",
    "comment" : "\n     * A shortcut for setting the visibility of the source.\n     *\n     * @param id The ID of the source to set the visibility\n     * @param visible {@code true} for visible\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n     * Scales the frame and the visible frame (if there is one) of each source.\n     *\n     * @param scale the scale to be applied\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(InsetsState other)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(InsetsState other, boolean copySources)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void set(InsetsState other, @InsetsType int types)",
    "returnType" : "void",
    "comment" : "\n     * Sets the values from the other InsetsState. But for sources, only specific types of source\n     * would be set.\n     *\n     * @param other the other InsetsState.\n     * @param types the only types of sources would be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addSource(InsetsSource source)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean clearsCompatInsets(int windowType, int windowFlags, @ActivityType int activityType, @InsetsType int forceConsumingTypes)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dump(String prefix, PrintWriter pw)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(@Nullable Object o, boolean excludesCaptionBar, boolean excludesInvisibleIme)",
    "returnType" : "boolean",
    "comment" : "\n     * An equals method can exclude the caption insets. This is useful because we assemble the\n     * caption insets information on the client side, and when we communicate with server, it's\n     * excluded.\n     * @param excludesCaptionBar If {@link Type#captionBar()}} should be ignored.\n     * @param excludesInvisibleIme If {@link WindowInsets.Type#ime()} should be ignored when IME is\n     *                             not visible.\n     * @return {@code true} if the two InsetsState objects are equal, {@code false} otherwise.\n     ",
    "links" : [ "android.app.WindowConfiguration.ActivityType#captionBar()", "WindowInsets.Type#ime()" ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SparseArray<InsetsSource> readFromParcel(Parcel in)",
    "returnType" : "SparseArray<InsetsSource>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void traverse(InsetsState state1, InsetsState state2, OnTraverseCallbacks cb)",
    "returnType" : "void",
    "comment" : "\n     * Traverses sources in two {@link InsetsState}s and calls back when events defined in\n     * {@link OnTraverseCallbacks} happen. This is optimized for {@link SparseArray} that we avoid\n     * triggering the binary search while getting the key or the value.\n     *\n     * This can be used to copy attributes of sources from one InsetsState to the other one, or to\n     * remove sources existing in one InsetsState but not in the other one.\n     *\n     * @param state1 The first {@link InsetsState} to be traversed.\n     * @param state2 The second {@link InsetsState} to be traversed.\n     * @param cb The {@link OnTraverseCallbacks} to call back to the caller.\n     ",
    "links" : [ "android.util.SparseArray", "android.view.InsetsState", "OnTraverseCallbacks" ]
  } ],
  "methodNames" : [ "public WindowInsets calculateInsets(Rect frame, @Nullable InsetsState ignoringVisibilityState, boolean isScreenRound, int legacySoftInputMode, int legacyWindowFlags, int legacySystemUiFlags, int windowType, @ActivityType int activityType, @Nullable @InternalInsetsSide SparseIntArray idSideMap)", "private DisplayCutout calculateRelativeCutout(Rect frame)", "private RoundedCorners calculateRelativeRoundedCorners(Rect frame)", "private PrivacyIndicatorBounds calculateRelativePrivacyIndicatorBounds(Rect frame)", "private DisplayShape calculateRelativeDisplayShape(Rect frame)", "public Insets calculateInsets(Rect frame, @InsetsType int types, boolean ignoreVisibility)", "public Insets calculateInsets(Rect frame, @InsetsType int types, @InsetsType int requestedVisibleTypes)", "public Insets calculateVisibleInsets(Rect frame, int windowType, @ActivityType int activityType, @SoftInputModeFlags int softInputMode, int windowFlags)", "public int calculateUncontrollableInsetsFromFrame(Rect frame)", "private static boolean canControlSource(Rect frame, InsetsSource source)", "private void processSource(InsetsSource source, Rect relativeFrame, boolean ignoreVisibility, Insets[] typeInsetsMap, @Nullable @InternalInsetsSide SparseIntArray idSideMap, @Nullable boolean[] typeVisibilityMap, Rect[][] typeBoundingRectsMap)", "private void processSourceAsPublicType(InsetsSource source, Insets[] typeInsetsMap, @InternalInsetsSide @Nullable SparseIntArray idSideMap, @Nullable boolean[] typeVisibilityMap, Rect[][] typeBoundingRectsMap, Insets insets, Rect[] boundingRects, int type)", "private static Rect[] concatenate(Rect[] a, Rect[] b)", "public InsetsSource getOrCreateSource(int id, int type)", "public InsetsSource peekSource(int id)", "public int sourceIdAt(int index)", "public InsetsSource sourceAt(int index)", "public int sourceSize()", "public boolean isSourceOrDefaultVisible(int id, @InsetsType int type)", "public void setDisplayFrame(Rect frame)", "public Rect getDisplayFrame()", "public void setDisplayCutout(DisplayCutout cutout)", "public DisplayCutout getDisplayCutout()", "public void getDisplayCutoutSafe(Rect outBounds)", "public void setRoundedCorners(RoundedCorners roundedCorners)", "public RoundedCorners getRoundedCorners()", "public void setRoundedCornerFrame(Rect frame)", "public void setPrivacyIndicatorBounds(PrivacyIndicatorBounds bounds)", "public PrivacyIndicatorBounds getPrivacyIndicatorBounds()", "public void setDisplayShape(DisplayShape displayShape)", "public DisplayShape getDisplayShape()", "public void removeSource(int id)", "public void removeSourceAt(int index)", "public void setSourceVisible(int id, boolean visible)", "public void scale(float scale)", "public void set(InsetsState other)", "public void set(InsetsState other, boolean copySources)", "public void set(InsetsState other, @InsetsType int types)", "public void addSource(InsetsSource source)", "public static boolean clearsCompatInsets(int windowType, int windowFlags, @ActivityType int activityType, @InsetsType int forceConsumingTypes)", "public void dump(String prefix, PrintWriter pw)", " void dumpDebug(ProtoOutputStream proto, long fieldId)", "public boolean equals(@Nullable Object o)", "public boolean equals(@Nullable Object o, boolean excludesCaptionBar, boolean excludesInvisibleIme)", "public int hashCode()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public SparseArray<InsetsSource> readFromParcel(Parcel in)", "public String toString()", "public static void traverse(InsetsState state1, InsetsState state2, OnTraverseCallbacks cb)" ],
  "variableNames" : [ "mSources", "mDisplayFrame", "mDisplayCutout", "mRoundedCornerFrame", "mRoundedCorners", "mPrivacyIndicatorBounds", "mDisplayShape", "CREATOR" ]
}