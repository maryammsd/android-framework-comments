{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/security/keystore2/AndroidKeyStoreSpi.java",
  "packageName" : "android.security.keystore2",
  "className" : "AndroidKeyStoreSpi",
  "comment" : "\n * A java.security.KeyStore interface for the Android KeyStore. An instance of\n * it can be created via the {@link java.security.KeyStore#getInstance(String)\n * KeyStore.getInstance(\"AndroidKeyStore\")} interface. This returns a\n * java.security.KeyStore backed by this \"AndroidKeyStore\" implementation.\n * <p>\n * This is built on top of Android's keystore daemon. The convention of alias\n * use is:\n * <p>\n * PrivateKeyEntry will have a Credentials.USER_PRIVATE_KEY as the private key,\n * Credentials.USER_CERTIFICATE as the first certificate in the chain (the one\n * that corresponds to the private key), and then a Credentials.CA_CERTIFICATE\n * entry which will have the rest of the chain concatenated in BER format.\n * <p>\n * TrustedCertificateEntry will just have a Credentials.CA_CERTIFICATE entry\n * with a single certificate.\n *\n * @hide\n ",
  "links" : [ "java.security.KeyStore#getInstance(String)" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyStore",
    "type" : "KeyStore2",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNamespace",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyDescriptor makeKeyDescriptor(@NonNull String alias)",
    "returnType" : "KeyDescriptor",
    "comment" : "\n     * Make a key descriptor from the given alias and the mNamespace member.\n     * If mNamespace is -1 it sets the domain field to {@link Domain#APP} and {@link Domain#SELINUX}\n     * otherwise. The blob field is always set to null and the alias field to {@code alias}\n     * @param alias The alias of the new key descriptor.\n     * @return A new key descriptor.\n     ",
    "links" : [ "android.system.keystore2.Domain#APP", "android.system.keystore2.Domain#SELINUX" ]
  }, {
    "name" : "private int getTargetDomain()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyEntryResponse getKeyMetadata(String alias)",
    "returnType" : "KeyEntryResponse",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Certificate[] engineGetCertificateChain(String alias)",
    "returnType" : "Certificate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Certificate engineGetCertificate(String alias)",
    "returnType" : "Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static X509Certificate toCertificate(byte[] bytes)",
    "returnType" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Collection<X509Certificate> toCertificates(byte[] bytes)",
    "returnType" : "Collection<X509Certificate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean getMgf1DigestSetterFlag()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date engineGetCreationDate(String alias)",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static KeyProtection getLegacyKeyProtectionParameter(PrivateKey key) throws KeyStoreException",
    "returnType" : "KeyProtection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPrivateKeyEntry(String alias, PrivateKey key, Certificate[] chain, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getKeymasterEcCurve(PrivateKey key)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void assertCanReplace(String alias, @Domain int targetDomain, int targetNamespace, KeyDescriptor descriptor) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSecretKeyEntry(String alias, SecretKey key, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setWrappedKeyEntry(String alias, WrappedKeyEntry entry, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetKeyEntry(String alias, byte[] userKey, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "\n     * This function sets a trusted certificate entry. It fails if the given\n     * alias is already taken by an actual key entry. However, if the entry is a\n     * trusted certificate it will get silently replaced.\n     * @param alias the alias name\n     * @param cert the certificate\n     *\n     * @throws KeyStoreException if the alias is already taken by a secret or private\n     *         key entry.\n     * @throws KeyStoreException with a nested {@link CertificateEncodingException}\n     *         if the {@code cert.getEncoded()} throws.\n     * @throws KeyStoreException with a nested {@link android.security.KeyStoreException} if\n     *         something went wrong while inserting the certificate into keystore.\n     * @throws NullPointerException if cert or alias is null.\n     *\n     * @hide\n     ",
    "links" : [ "android.security.KeyStoreException", "java.security.cert.CertificateEncodingException" ]
  }, {
    "name" : "public void engineDeleteEntry(String alias) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private KeyDescriptor[] getAliasesBatch(String startPastAlias)",
    "returnType" : "KeyDescriptor[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> engineAliases()",
    "returnType" : "Enumeration<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineContainsAlias(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int engineSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineIsKeyEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isKeyEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineIsCertificateEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String engineGetCertificateAlias(Certificate cert)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void initForTesting(KeyStore2 keystore)",
    "returnType" : "void",
    "comment" : "\n     * Used by Tests to initialize with a fake KeyStore2.\n     * @hide\n     * @param keystore\n     ",
    "links" : [ ]
  }, {
    "name" : "public void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineLoad(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetEntry(String alias, Entry entry, ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException", "private KeyDescriptor makeKeyDescriptor(@NonNull String alias)", "private int getTargetDomain()", "private KeyEntryResponse getKeyMetadata(String alias)", "public Certificate[] engineGetCertificateChain(String alias)", "public Certificate engineGetCertificate(String alias)", " static X509Certificate toCertificate(byte[] bytes)", "private static Collection<X509Certificate> toCertificates(byte[] bytes)", "private static boolean getMgf1DigestSetterFlag()", "public Date engineGetCreationDate(String alias)", "public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException", "private static KeyProtection getLegacyKeyProtectionParameter(PrivateKey key) throws KeyStoreException", "private void setPrivateKeyEntry(String alias, PrivateKey key, Certificate[] chain, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "private int getKeymasterEcCurve(PrivateKey key)", "private static void assertCanReplace(String alias, @Domain int targetDomain, int targetNamespace, KeyDescriptor descriptor) throws KeyStoreException", "private void setSecretKeyEntry(String alias, SecretKey key, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "private void setWrappedKeyEntry(String alias, WrappedKeyEntry entry, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "public void engineSetKeyEntry(String alias, byte[] userKey, Certificate[] chain) throws KeyStoreException", "public void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException", "public void engineDeleteEntry(String alias) throws KeyStoreException", "private KeyDescriptor[] getAliasesBatch(String startPastAlias)", "public Enumeration<String> engineAliases()", "public boolean engineContainsAlias(String alias)", "public int engineSize()", "public boolean engineIsKeyEntry(String alias)", "private boolean isKeyEntry(String alias)", "public boolean engineIsCertificateEntry(String alias)", "public String engineGetCertificateAlias(Certificate cert)", "public void initForTesting(KeyStore2 keystore)", "public void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineLoad(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineSetEntry(String alias, Entry entry, ProtectionParameter param) throws KeyStoreException" ],
  "variableNames" : [ "TAG", "NAME", "mKeyStore", "mNamespace" ]
}