{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/input/InputDeviceVibrator.java",
  "packageName" : "android.hardware.input",
  "className" : "InputDeviceVibrator",
  "comment" : "\n * Vibrator implementation that communicates with the input device vibrators.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDeviceId",
    "type" : "int",
    "comment" : " mDeviceId represents InputDevice ID the vibrator belongs to",
    "links" : [ ]
  }, {
    "name" : "mVibratorInfo",
    "type" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "Binder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGlobal",
    "type" : "InputManagerGlobal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDelegates",
    "type" : "ArrayMap<OnVibratorStateChangedListener, OnVibratorStateChangedListenerDelegate>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public VibratorInfo getInfo()",
    "returnType" : "VibratorInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean hasVibrator()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isVibrating()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state changes. Callbacks will be executed on the main thread.\n     * If the listener was previously added and not removed, this call will be ignored.\n     *\n     * @param listener listener to be added\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Adds a listener for vibrator state change. If the listener was previously added and not\n     * removed, this call will be ignored.\n     *\n     * @param listener Listener to be added.\n     * @param executor The {@link Executor} on which the listener's callbacks will be executed on.\n     ",
    "links" : [ "android.annotation.CallbackExecutor" ]
  }, {
    "name" : "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Removes the listener for vibrator state changes. If the listener was not previously\n     * registered, this call will do nothing.\n     *\n     * @param listener Listener to be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAmplitudeControl()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect effect, String reason, @NonNull VibrationAttributes attributes)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void cancel()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void cancel(int usageFilter)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public VibratorInfo getInfo()", "public boolean hasVibrator()", "public boolean isVibrating()", "public void addVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public void addVibratorStateListener(@NonNull @CallbackExecutor Executor executor, @NonNull OnVibratorStateChangedListener listener)", "public void removeVibratorStateListener(@NonNull OnVibratorStateChangedListener listener)", "public boolean hasAmplitudeControl()", "public void vibrate(int uid, String opPkg, @NonNull VibrationEffect effect, String reason, @NonNull VibrationAttributes attributes)", "public void cancel()", "public void cancel(int usageFilter)" ],
  "variableNames" : [ "TAG", "mDeviceId", "mVibratorInfo", "mToken", "mGlobal", "mDelegates" ]
}