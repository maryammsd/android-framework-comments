{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/locks/ReentrantReadWriteLock.java",
  "packageName" : "java.util.concurrent.locks",
  "className" : "Sync",
  "comment" : "\n     * Synchronization implementation for ReentrantReadWriteLock.\n     * Subclassed into fair and nonfair versions.\n     ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHARED_SHIFT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SHARED_UNIT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXCLUSIVE_MASK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "readHolds",
    "type" : "ThreadLocalHoldCounter",
    "comment" : "\n         * The number of reentrant read locks held by current thread.\n         * Initialized only in constructor and readObject.\n         * Removed whenever a thread's read hold count drops to 0.\n         ",
    "links" : [ ]
  }, {
    "name" : "cachedHoldCounter",
    "type" : "HoldCounter",
    "comment" : "\n         * The hold count of the last thread to successfully acquire\n         * readLock. This saves ThreadLocal lookup in the common case\n         * where the next thread to release is the last one to\n         * acquire. This is non-volatile since it is just used\n         * as a heuristic, and would be great for threads to cache.\n         *\n         * <p>Can outlive the Thread for which it is caching the read\n         * hold count, but avoids garbage retention by not retaining a\n         * reference to the Thread.\n         *\n         * <p>Accessed via a benign data race; relies on the memory\n         * model's final field and out-of-thin-air guarantees.\n         ",
    "links" : [ ]
  }, {
    "name" : "firstReader",
    "type" : "Thread",
    "comment" : "\n         * firstReader is the first thread to have acquired the read lock.\n         * firstReaderHoldCount is firstReader's hold count.\n         *\n         * <p>More precisely, firstReader is the unique thread that last\n         * changed the shared count from 0 to 1, and has not released the\n         * read lock since then; null if there is no such thread.\n         *\n         * <p>Cannot cause garbage retention unless the thread terminated\n         * without relinquishing its read locks, since tryReleaseShared\n         * sets it to null.\n         *\n         * <p>Accessed via a benign data race; relies on the memory\n         * model's out-of-thin-air guarantees for references.\n         *\n         * <p>This allows tracking of read holds for uncontended read\n         * locks to be very cheap.\n         ",
    "links" : [ ]
  }, {
    "name" : "firstReaderHoldCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static int sharedCount(int c)",
    "returnType" : "int",
    "comment" : " Returns the number of shared holds represented in count. ",
    "links" : [ ]
  }, {
    "name" : " static int exclusiveCount(int c)",
    "returnType" : "int",
    "comment" : " Returns the number of exclusive holds represented in count. ",
    "links" : [ ]
  }, {
    "name" : " abstract boolean readerShouldBlock()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the current thread, when trying to acquire\n         * the read lock, and otherwise eligible to do so, should block\n         * because of policy for overtaking other waiting threads.\n         ",
    "links" : [ ]
  }, {
    "name" : " abstract boolean writerShouldBlock()",
    "returnType" : "boolean",
    "comment" : "\n         * Returns true if the current thread, when trying to acquire\n         * the write lock, and otherwise eligible to do so, should block\n         * because of policy for overtaking other waiting threads.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean tryRelease(int releases)",
    "returnType" : "boolean",
    "comment" : "\n         * Note that tryRelease and tryAcquire can be called by\n         * Conditions. So it is possible that their arguments contain\n         * both read and write holds that are all released during a\n         * condition wait and re-established in tryAcquire.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean tryAcquire(int acquires)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final boolean tryReleaseShared(int unused)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IllegalMonitorStateException unmatchedUnlockException()",
    "returnType" : "IllegalMonitorStateException",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final int tryAcquireShared(int unused)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int fullTryAcquireShared(Thread current)",
    "returnType" : "int",
    "comment" : "\n         * Full version of acquire for reads, that handles CAS misses\n         * and reentrant reads not dealt with in tryAcquireShared.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean tryWriteLock()",
    "returnType" : "boolean",
    "comment" : "\n         * Performs tryLock for write, enabling barging in both modes.\n         * This is identical in effect to tryAcquire except for lack\n         * of calls to writerShouldBlock.\n         ",
    "links" : [ ]
  }, {
    "name" : " final boolean tryReadLock()",
    "returnType" : "boolean",
    "comment" : "\n         * Performs tryLock for read, enabling barging in both modes.\n         * This is identical in effect to tryAcquireShared except for\n         * lack of calls to readerShouldBlock.\n         ",
    "links" : [ ]
  }, {
    "name" : "protected final boolean isHeldExclusively()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final ConditionObject newCondition()",
    "returnType" : "ConditionObject",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Thread getOwner()",
    "returnType" : "Thread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getReadLockCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final boolean isWriteLocked()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getWriteHoldCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final int getReadHoldCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n         * Reconstitutes the instance from a stream (that is, deserializes it).\n         ",
    "links" : [ ]
  }, {
    "name" : " final int getCount()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static int sharedCount(int c)", " static int exclusiveCount(int c)", " abstract boolean readerShouldBlock()", " abstract boolean writerShouldBlock()", "protected final boolean tryRelease(int releases)", "protected final boolean tryAcquire(int acquires)", "protected final boolean tryReleaseShared(int unused)", "private static IllegalMonitorStateException unmatchedUnlockException()", "protected final int tryAcquireShared(int unused)", " final int fullTryAcquireShared(Thread current)", " final boolean tryWriteLock()", " final boolean tryReadLock()", "protected final boolean isHeldExclusively()", " final ConditionObject newCondition()", " final Thread getOwner()", " final int getReadLockCount()", " final boolean isWriteLocked()", " final int getWriteHoldCount()", " final int getReadHoldCount()", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", " final int getCount()" ],
  "variableNames" : [ "serialVersionUID", "SHARED_SHIFT", "SHARED_UNIT", "MAX_COUNT", "EXCLUSIVE_MASK", "readHolds", "cachedHoldCounter", "firstReader", "firstReaderHoldCount" ]
}