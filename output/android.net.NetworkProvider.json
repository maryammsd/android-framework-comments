{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/NetworkProvider.java",
  "packageName" : "android.net",
  "className" : "NetworkProvider",
  "comment" : "\n * Base class for network providers such as telephony or Wi-Fi. NetworkProviders connect the device\n * to networks and makes them available to the core network stack by creating\n * {@link NetworkAgent}s. The networks can then provide connectivity to apps and can be interacted\n * with via networking APIs such as {@link ConnectivityManager}.\n *\n * Subclasses should implement {@link #onNetworkRequested} and {@link #onNetworkRequestWithdrawn}\n * to receive {@link NetworkRequest}s sent by the system and by apps. A network that is not the\n * best (highest-scoring) network for any request is generally not used by the system, and torn\n * down.\n *\n * @hide\n ",
  "links" : [ "android.net.ConnectivityManager", "#onNetworkRequested", "android.net.NetworkAgent", "#onNetworkRequestWithdrawn", "android.net.NetworkRequest" ],
  "variables" : [ {
    "name" : "ID_NONE",
    "type" : "int",
    "comment" : "\n     * {@code providerId} value that indicates the absence of a provider. It is the providerId of\n     * any NetworkProvider that is not currently registered, and of any NetworkRequest that is not\n     * currently being satisfied by a network.\n     ",
    "links" : [ ]
  }, {
    "name" : "FIRST_PROVIDER_ID",
    "type" : "int",
    "comment" : "\n     * The first providerId value that will be allocated.\n     * @hide only used by ConnectivityService.\n     ",
    "links" : [ ]
  }, {
    "name" : "CMD_REQUEST_NETWORK",
    "type" : "int",
    "comment" : " @hide only used by ConnectivityService ",
    "links" : [ ]
  }, {
    "name" : "CMD_CANCEL_REQUEST",
    "type" : "int",
    "comment" : " @hide only used by ConnectivityService ",
    "links" : [ ]
  }, {
    "name" : "mMessenger",
    "type" : "Messenger",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProviderId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProxies",
    "type" : "ArrayList<NetworkOfferCallbackProxy>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Messenger getMessenger()",
    "returnType" : "Messenger",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getProviderId()",
    "returnType" : "int",
    "comment" : "\n     * Returns the ID of this provider. This is known only once the provider is registered via\n     * {@link ConnectivityManager#registerNetworkProvider()}, otherwise the ID is {@link #ID_NONE}.\n     * This ID must be used when registering any {@link NetworkAgent}s.\n     ",
    "links" : [ "#ID_NONE", "android.net.ConnectivityManager#registerNetworkProvider()", "android.net.NetworkAgent" ]
  }, {
    "name" : "public void setProviderId(int providerId)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onNetworkRequested(@NonNull NetworkRequest request, @IntRange(from = 0, to = 99) int score, int providerId)",
    "returnType" : "void",
    "comment" : "\n     *  Called when a NetworkRequest is received. The request may be a new request or an existing\n     *  request with a different score.\n     *\n     * @param request the NetworkRequest being received\n     * @param score the score of the network currently satisfying the request, or 0 if none.\n     * @param providerId the ID of the provider that created the network currently satisfying this\n     *                   request, or {@link #ID_NONE} if none.\n     *\n     *  @hide\n     ",
    "links" : [ "#ID_NONE" ]
  }, {
    "name" : "public void onNetworkRequestWithdrawn(@NonNull NetworkRequest request)",
    "returnType" : "void",
    "comment" : "\n     *  Called when a NetworkRequest is withdrawn.\n     *  @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void declareNetworkRequestUnfulfillable(@NonNull NetworkRequest request)",
    "returnType" : "void",
    "comment" : "\n     * Asserts that no provider will ever be able to satisfy the specified request. The provider\n     * must only call this method if it knows that it is the only provider on the system capable of\n     * satisfying this request, and that the request cannot be satisfied. The application filing the\n     * request will receive an {@link NetworkCallback#onUnavailable()} callback.\n     *\n     * @param request the request that permanently cannot be fulfilled\n     * @hide\n     ",
    "links" : [ "#onUnavailable()" ]
  }, {
    "name" : "private NetworkOfferCallbackProxy findProxyForCallback(@NonNull final NetworkOfferCallback cb)",
    "returnType" : "NetworkOfferCallbackProxy",
    "comment" : " Returns the proxy associated with this callback, or null if none.",
    "links" : [ ]
  }, {
    "name" : "public void registerNetworkOffer(@NonNull final NetworkScore score, @NonNull final NetworkCapabilities caps, @NonNull final Executor executor, @NonNull final NetworkOfferCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Register or update an offer for network with the passed capabilities and score.\n     *\n     * A NetworkProvider's role is to provide networks. This method is how a provider tells the\n     * connectivity stack what kind of network it may provide. The score and caps arguments act\n     * as filters that the connectivity stack uses to tell when the offer is valuable. When an\n     * offer might be preferred over existing networks, the provider will receive a call to\n     * the associated callback's {@link NetworkOfferCallback#onNetworkNeeded} method. The provider\n     * should then try to bring up this network. When an offer is no longer useful, the stack\n     * will inform the provider by calling {@link NetworkOfferCallback#onNetworkUnneeded}. The\n     * provider should stop trying to bring up such a network, or disconnect it if it already has\n     * one.\n     *\n     * The stack determines what offers are valuable according to what networks are currently\n     * available to the system, and what networking requests are made by applications. If an\n     * offer looks like it could connect a better network than any existing network for any\n     * particular request, that's when the stack decides the network is needed. If the current\n     * networking requests are all satisfied by networks that this offer couldn't possibly be a\n     * better match for, that's when the offer is no longer valuable. An offer starts out as\n     * unneeded ; the provider should not try to bring up the network until\n     * {@link NetworkOfferCallback#onNetworkNeeded} is called.\n     *\n     * Note that the offers are non-binding to the providers, in particular because providers\n     * often don't know if they will be able to bring up such a network at any given time. For\n     * example, no wireless network may be in range when the offer would be valuable. This is fine\n     * and expected ; the provider should simply continue to try to bring up the network and do so\n     * if/when it becomes possible. In the mean time, the stack will continue to satisfy requests\n     * with the best network currently available, or if none, keep the apps informed that no\n     * network can currently satisfy this request. When/if the provider can bring up the network,\n     * the connectivity stack will match it against requests, and inform interested apps of the\n     * availability of this network. This may, in turn, render the offer of some other provider\n     * low-value if all requests it used to satisfy are now better served by this network.\n     *\n     * A network can become unneeded for a reason like the above : whether the provider managed\n     * to bring up the offered network after it became needed or not, some other provider may\n     * bring up a better network than this one, making this network unneeded. A network may also\n     * become unneeded if the application making the request withdrew it (for example, after it\n     * is done transferring data, or if the user canceled an operation).\n     *\n     * The capabilities and score act as filters as to what requests the provider will see.\n     * They are not promises, but for best performance, the providers should strive to put\n     * as much known information as possible in the offer. For the score, it should put as\n     * strong a score as the networks will have, since this will filter what requests the\n     * provider sees – it's not a promise, it only serves to avoid sending requests that\n     * the provider can't ever hope to satisfy better than any current network. For capabilities,\n     * it should put all NetworkAgent-managed capabilities a network may have, even if it doesn't\n     * have them at first. This applies to INTERNET, for example ; if a provider thinks the\n     * network it can bring up for this offer may offer Internet access it should include the\n     * INTERNET bit. It's fine if the brought up network ends up not actually having INTERNET.\n     *\n     * TODO : in the future, to avoid possible infinite loops, there should be constraints on\n     * what can be put in capabilities of networks brought up for an offer. If a provider might\n     * bring up a network with or without INTERNET, then it should file two offers : this will\n     * let it know precisely what networks are needed, so it can avoid bringing up networks that\n     * won't actually satisfy requests and remove the risk for bring-up-bring-down loops.\n     *\n     * @hide\n     ",
    "links" : [ "#onNetworkUnneeded", "#onNetworkNeeded" ]
  }, {
    "name" : "public void unregisterNetworkOffer(@NonNull final NetworkOfferCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Withdraw a network offer previously made to the networking stack.\n     *\n     * If a provider can no longer provide a network they offered, it should call this method.\n     * An example of usage could be if the hardware necessary to bring up the network was turned\n     * off in UI by the user. Note that because offers are never binding, the provider might\n     * alternatively decide not to withdraw this offer and simply refuse to bring up the network\n     * even when it's needed. However, withdrawing the request is slightly more resource-efficient\n     * because the networking stack won't have to compare this offer to exiting networks to see\n     * if it could beat any of them, and may be advantageous to the provider's implementation that\n     * can rely on no longer receiving callbacks for a network that they can't bring up anyways.\n     *\n     * Warning: This method executes asynchronously. The NetworkOfferCallback object can continue\n     * receiving onNetworkNeeded and onNetworkUnneeded callbacks even after this method has\n     * returned. In this case, it is on the caller to take appropriate steps in order to prevent\n     * bringing up a network.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Messenger getMessenger()", "public String getName()", "public int getProviderId()", "public void setProviderId(int providerId)", "public void onNetworkRequested(@NonNull NetworkRequest request, @IntRange(from = 0, to = 99) int score, int providerId)", "public void onNetworkRequestWithdrawn(@NonNull NetworkRequest request)", "public void declareNetworkRequestUnfulfillable(@NonNull NetworkRequest request)", "private NetworkOfferCallbackProxy findProxyForCallback(@NonNull final NetworkOfferCallback cb)", "public void registerNetworkOffer(@NonNull final NetworkScore score, @NonNull final NetworkCapabilities caps, @NonNull final Executor executor, @NonNull final NetworkOfferCallback callback)", "public void unregisterNetworkOffer(@NonNull final NetworkOfferCallback callback)" ],
  "variableNames" : [ "ID_NONE", "FIRST_PROVIDER_ID", "CMD_REQUEST_NETWORK", "CMD_CANCEL_REQUEST", "mMessenger", "mName", "mContext", "mProviderId", "mProxies" ]
}