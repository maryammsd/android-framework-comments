{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/sip/SipAudioCall.java",
  "packageName" : "android.net.sip",
  "className" : "SipAudioCall",
  "comment" : "\n * Handles an Internet audio call over SIP. You can instantiate this class with {@link SipManager},\n * using {@link SipManager#makeAudioCall makeAudioCall()} and  {@link SipManager#takeAudioCall\n * takeAudioCall()}.\n *\n * <p class=\"note\"><strong>Note:</strong> Using this class require the\n *   {@link android.Manifest.permission#INTERNET} and\n *   {@link android.Manifest.permission#USE_SIP} permissions. In addition, {@link\n *   #startAudio} requires the\n *   {@link android.Manifest.permission#RECORD_AUDIO},\n *   {@link android.Manifest.permission#ACCESS_WIFI_STATE}, and\n *   {@link android.Manifest.permission#WAKE_LOCK} permissions; and {@link #setSpeakerMode\n *   setSpeakerMode()} requires the\n *   {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} permission.</p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about using SIP, read the\n * <a href=\"{@docRoot}guide/topics/network/sip.html\">Session Initiation Protocol</a>\n * developer guide.</p>\n * </div>\n * @deprecated {@link android.net.sip.SipManager} and associated classes are no longer supported and\n * should not be used as the basis of future VOIP apps.\n ",
  "links" : [ "android.Manifest.permission#WAKE_LOCK", "android.net.sip.SipManager#takeAudioCalltakeAudioCall()", "android.Manifest.permission#USE_SIP", "android.Manifest.permission#ACCESS_WIFI_STATE", "#setSpeakerModesetSpeakerMode()", "android.Manifest.permission#INTERNET", "android.Manifest.permission#MODIFY_AUDIO_SETTINGS", "android.net.sip.SipManager#makeAudioCall", "android.Manifest.permission#RECORD_AUDIO", "android.net.sip.SipManager", "#startAudio" ],
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RELEASE_SOCKET",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DONT_RELEASE_SOCKET",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SESSION_TIMEOUT",
    "type" : "int",
    "comment" : " in seconds",
    "links" : [ ]
  }, {
    "name" : "TRANSFER_TIMEOUT",
    "type" : "int",
    "comment" : " in seconds",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLocalProfile",
    "type" : "SipProfile",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mListener",
    "type" : "SipAudioCall.Listener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSipSession",
    "type" : "SipSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransferringSession",
    "type" : "SipSession",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionId",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPeerSd",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioStream",
    "type" : "AudioStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioGroup",
    "type" : "AudioGroup",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInCall",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMuted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHold",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWm",
    "type" : "WifiManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWifiHighPerfLock",
    "type" : "WifiManager.WifiLock",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mErrorMessage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setListener(SipAudioCall.Listener listener)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to listen to the audio call events. The method calls\n     * {@link #setListener setListener(listener, false)}.\n     *\n     * @param listener to listen to the audio call events of this object\n     * @see #setListener(Listener, boolean)\n     ",
    "links" : [ "#setListener" ]
  }, {
    "name" : "public void setListener(SipAudioCall.Listener listener, boolean callbackImmediately)",
    "returnType" : "void",
    "comment" : "\n     * Sets the listener to listen to the audio call events. A\n     * {@link SipAudioCall} can only hold one listener at a time. Subsequent\n     * calls to this method override the previous listener.\n     *\n     * @param listener to listen to the audio call events of this object\n     * @param callbackImmediately set to true if the caller wants to be called\n     *      back immediately on the current state\n     ",
    "links" : [ "android.net.sip.SipAudioCall" ]
  }, {
    "name" : "public boolean isInCall()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the call is established.\n     *\n     * @return true if the call is established\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOnHold()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the call is on hold.\n     *\n     * @return true if the call is on hold\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Closes this object. This object is not usable after being closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private synchronized void close(boolean closeRtp)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public SipProfile getLocalProfile()",
    "returnType" : "SipProfile",
    "comment" : "\n     * Gets the local SIP profile.\n     *\n     * @return the local SIP profile\n     ",
    "links" : [ ]
  }, {
    "name" : "public SipProfile getPeerProfile()",
    "returnType" : "SipProfile",
    "comment" : "\n     * Gets the peer's SIP profile.\n     *\n     * @return the peer's SIP profile\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getState()",
    "returnType" : "int",
    "comment" : "\n     * Gets the state of the {@link SipSession} that carries this call.\n     * The value returned must be one of the states in {@link SipSession.State}.\n     *\n     * @return the session state\n     ",
    "links" : [ "android.net.sip.SipSession", "SipSession.State" ]
  }, {
    "name" : "public SipSession getSipSession()",
    "returnType" : "SipSession",
    "comment" : "\n     * Gets the {@link SipSession} that carries this call.\n     *\n     * @return the session object that carries this call\n     * @hide\n     ",
    "links" : [ "android.net.sip.SipSession" ]
  }, {
    "name" : "private synchronized void transferToNewSession()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SipSession.Listener createListener()",
    "returnType" : "SipSession.Listener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onError(int errorCode, String message)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void attachCall(SipSession session, String sessionDescription) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Attaches an incoming call to this call object.\n     *\n     * @param session the session that receives the incoming call\n     * @param sessionDescription the session description of the incoming call\n     * @throws SipException if the SIP service fails to attach this object to\n     *        the session or VOIP API is not supported by the device\n     * @see SipManager#isVoipSupported\n     ",
    "links" : [ ]
  }, {
    "name" : "public void makeCall(SipProfile peerProfile, SipSession sipSession, int timeout) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Initiates an audio call to the specified profile. The attempt will be\n     * timed out if the call is not established within {@code timeout} seconds\n     * and {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param peerProfile the SIP profile to make the call to\n     * @param sipSession the {@link SipSession} for carrying out the call\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @see Listener#onError\n     * @throws SipException if the SIP service fails to create a session for the\n     *        call or VOIP API is not supported by the device\n     * @see SipManager#isVoipSupported\n     ",
    "links" : [ "android.net.sip.SipSession", "#onError" ]
  }, {
    "name" : "public void endCall() throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Ends a call.\n     * @throws SipException if the SIP service fails to end the call\n     ",
    "links" : [ ]
  }, {
    "name" : "public void holdCall(int timeout) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Puts a call on hold.  When succeeds, {@link Listener#onCallHeld} is\n     * called. The attempt will be timed out if the call is not established\n     * within {@code timeout} seconds and\n     * {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @see Listener#onError\n     * @throws SipException if the SIP service fails to hold the call\n     ",
    "links" : [ "#onError", "#onCallHeld" ]
  }, {
    "name" : "public void answerCall(int timeout) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Answers a call. The attempt will be timed out if the call is not\n     * established within {@code timeout} seconds and\n     * {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @see Listener#onError\n     * @throws SipException if the SIP service fails to answer the call\n     ",
    "links" : [ "#onError" ]
  }, {
    "name" : "public void continueCall(int timeout) throws SipException",
    "returnType" : "void",
    "comment" : "\n     * Continues a call that's on hold. When succeeds,\n     * {@link Listener#onCallEstablished} is called. The attempt will be timed\n     * out if the call is not established within {@code timeout} seconds and\n     * {@link Listener#onError onError(SipAudioCall, SipErrorCode.TIME_OUT, String)}\n     * will be called.\n     *\n     * @param timeout the timeout value in seconds. Default value (defined by\n     *        SIP protocol) is used if {@code timeout} is zero or negative.\n     * @see Listener#onError\n     * @throws SipException if the SIP service fails to unhold the call\n     ",
    "links" : [ "#onError", "#onCallEstablished" ]
  }, {
    "name" : "private SimpleSessionDescription createOffer()",
    "returnType" : "SimpleSessionDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SimpleSessionDescription createAnswer(String offerSd)",
    "returnType" : "SimpleSessionDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SimpleSessionDescription createHoldOffer()",
    "returnType" : "SimpleSessionDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private SimpleSessionDescription createContinueOffer()",
    "returnType" : "SimpleSessionDescription",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void grabWifiHighPerfLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void releaseWifiHighPerfLock()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isWifiOn()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toggleMute()",
    "returnType" : "void",
    "comment" : " Toggles mute. ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMuted()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the call is muted.\n     *\n     * @return true if the call is muted\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSpeakerMode(boolean speakerMode)",
    "returnType" : "void",
    "comment" : "\n     * Puts the device to speaker mode.\n     * <p class=\"note\"><strong>Note:</strong> Requires the\n     *   {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} permission.</p>\n     *\n     * @param speakerMode set true to enable speaker mode; false to disable\n     ",
    "links" : [ "android.Manifest.permission#MODIFY_AUDIO_SETTINGS" ]
  }, {
    "name" : "private boolean isSpeakerOn()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void sendDtmf(int code)",
    "returnType" : "void",
    "comment" : "\n     * Sends a DTMF code. According to <a href=\"http://tools.ietf.org/html/rfc2833\">RFC 2883</a>,\n     * event 0--9 maps to decimal\n     * value 0--9, '*' to 10, '#' to 11, event 'A'--'D' to 12--15, and event\n     * flash to 16. Currently, event flash is not supported.\n     *\n     * @param code the DTMF code to send. Value 0 to 15 (inclusive) are valid\n     *        inputs.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sendDtmf(int code, Message result)",
    "returnType" : "void",
    "comment" : "\n     * Sends a DTMF code. According to <a href=\"http://tools.ietf.org/html/rfc2833\">RFC 2883</a>,\n     * event 0--9 maps to decimal\n     * value 0--9, '*' to 10, '#' to 11, event 'A'--'D' to 12--15, and event\n     * flash to 16. Currently, event flash is not supported.\n     *\n     * @param code the DTMF code to send. Value 0 to 15 (inclusive) are valid\n     *        inputs.\n     * @param result the result message to send when done\n     ",
    "links" : [ ]
  }, {
    "name" : "public AudioStream getAudioStream()",
    "returnType" : "AudioStream",
    "comment" : "\n     * Gets the {@link AudioStream} object used in this call. The object\n     * represents the RTP stream that carries the audio data to and from the\n     * peer. The object may not be created before the call is established. And\n     * it is undefined after the call ends or the {@link #close} method is\n     * called.\n     *\n     * @return the {@link AudioStream} object or null if the RTP stream has not\n     *      yet been set up\n     * @hide\n     ",
    "links" : [ "android.net.rtp.AudioStream", "#close" ]
  }, {
    "name" : "public AudioGroup getAudioGroup()",
    "returnType" : "AudioGroup",
    "comment" : "\n     * Gets the {@link AudioGroup} object which the {@link AudioStream} object\n     * joins. The group object may not exist before the call is established.\n     * Also, the {@code AudioStream} may change its group during a call (e.g.,\n     * after the call is held/un-held). Finally, the {@code AudioGroup} object\n     * returned by this method is undefined after the call ends or the\n     * {@link #close} method is called. If a group object is set by\n     * {@link #setAudioGroup(AudioGroup)}, then this method returns that object.\n     *\n     * @return the {@link AudioGroup} object or null if the RTP stream has not\n     *      yet been set up\n     * @see #getAudioStream\n     * @hide\n     ",
    "links" : [ "android.net.rtp.AudioStream", "android.net.rtp.AudioGroup", "#close", "#setAudioGroup(AudioGroup)" ]
  }, {
    "name" : "public void setAudioGroup(@NonNull AudioGroup group)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioGroup} object which the {@link AudioStream} object\n     * joins. If {@code audioGroup} is null, then the {@code AudioGroup} object\n     * will be dynamically created when needed. Note that the mode of the\n     * {@code AudioGroup} is not changed according to the audio settings (i.e.,\n     * hold, mute, speaker phone) of this object. This is mainly used to merge\n     * multiple {@code SipAudioCall} objects to form a conference call. The\n     * settings of the first object (that merges others) override others'.\n     *\n     * @see #getAudioStream\n     * @hide\n     ",
    "links" : [ "android.net.rtp.AudioStream", "android.net.rtp.AudioGroup" ]
  }, {
    "name" : "public void startAudio()",
    "returnType" : "void",
    "comment" : "\n     * Starts the audio for the established call. This method should be called\n     * after {@link Listener#onCallEstablished} is called.\n     * <p class=\"note\"><strong>Note:</strong> Requires the\n     *   {@link android.Manifest.permission#RECORD_AUDIO},\n     *   {@link android.Manifest.permission#ACCESS_WIFI_STATE} and\n     *   {@link android.Manifest.permission#WAKE_LOCK} permissions.</p>\n     ",
    "links" : [ "android.Manifest.permission#WAKE_LOCK", "android.Manifest.permission#ACCESS_WIFI_STATE", "android.Manifest.permission#RECORD_AUDIO", "#onCallEstablished" ]
  }, {
    "name" : "private synchronized void startAudioInternal() throws UnknownHostException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setAudioGroupMode()",
    "returnType" : "void",
    "comment" : " set audio group mode based on current audio configuration",
    "links" : [ ]
  }, {
    "name" : "private void stopCall(boolean releaseSocket)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private String getLocalIp()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void throwSipException(Throwable throwable) throws SipException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void log(String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loge(String s)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void loge(String s, Throwable t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setListener(SipAudioCall.Listener listener)", "public void setListener(SipAudioCall.Listener listener, boolean callbackImmediately)", "public boolean isInCall()", "public boolean isOnHold()", "public void close()", "private synchronized void close(boolean closeRtp)", "public SipProfile getLocalProfile()", "public SipProfile getPeerProfile()", "public int getState()", "public SipSession getSipSession()", "private synchronized void transferToNewSession()", "private SipSession.Listener createListener()", "private void onError(int errorCode, String message)", "public void attachCall(SipSession session, String sessionDescription) throws SipException", "public void makeCall(SipProfile peerProfile, SipSession sipSession, int timeout) throws SipException", "public void endCall() throws SipException", "public void holdCall(int timeout) throws SipException", "public void answerCall(int timeout) throws SipException", "public void continueCall(int timeout) throws SipException", "private SimpleSessionDescription createOffer()", "private SimpleSessionDescription createAnswer(String offerSd)", "private SimpleSessionDescription createHoldOffer()", "private SimpleSessionDescription createContinueOffer()", "private void grabWifiHighPerfLock()", "private void releaseWifiHighPerfLock()", "private boolean isWifiOn()", "public void toggleMute()", "public boolean isMuted()", "public void setSpeakerMode(boolean speakerMode)", "private boolean isSpeakerOn()", "public void sendDtmf(int code)", "public void sendDtmf(int code, Message result)", "public AudioStream getAudioStream()", "public AudioGroup getAudioGroup()", "public void setAudioGroup(@NonNull AudioGroup group)", "public void startAudio()", "private synchronized void startAudioInternal() throws UnknownHostException", "private void setAudioGroupMode()", "private void stopCall(boolean releaseSocket)", "private String getLocalIp()", "private void throwSipException(Throwable throwable) throws SipException", "private void log(String s)", "private void loge(String s)", "private void loge(String s, Throwable t)" ],
  "variableNames" : [ "LOG_TAG", "DBG", "RELEASE_SOCKET", "DONT_RELEASE_SOCKET", "SESSION_TIMEOUT", "TRANSFER_TIMEOUT", "mContext", "mLocalProfile", "mListener", "mSipSession", "mTransferringSession", "mSessionId", "mPeerSd", "mAudioStream", "mAudioGroup", "mInCall", "mMuted", "mHold", "mWm", "mWifiHighPerfLock", "mErrorCode", "mErrorMessage", "mLock" ]
}