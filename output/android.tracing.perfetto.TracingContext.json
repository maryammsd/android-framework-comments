{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/tracing/perfetto/TracingContext.java",
  "packageName" : "android.tracing.perfetto",
  "className" : "TracingContext",
  "comment" : "\n * Argument passed to the lambda function passed to Trace().\n *\n * @param <DataSourceInstanceType> The type of the datasource this tracing context is for.\n * @param <TlsStateType> The type of the custom TLS state, if any is used.\n * @param <IncrementalStateType> The type of the custom incremental state, if any is used.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mDataSource",
    "type" : "DataSource<DataSourceInstanceType, TlsStateType, IncrementalStateType>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInstanceIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTracePackets",
    "type" : "List<ProtoOutputStream>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ProtoOutputStream newTracePacket()",
    "returnType" : "ProtoOutputStream",
    "comment" : "\n     * Creates a new output stream to be used to write a trace packet to. The output stream will be\n     * encoded to the proto binary representation when the callback trace function finishes and\n     * send over to the native side to be included in the proto buffer.\n     *\n     * @return A proto output stream to write a trace packet proto to\n     ",
    "links" : [ ]
  }, {
    "name" : "public TlsStateType getCustomTlsState()",
    "returnType" : "TlsStateType",
    "comment" : "\n     * Can optionally be used to store custom per-sequence\n     * session data, which is not reset when incremental state is cleared\n     * (e.g. configuration options).\n     *h\n     * @return The TlsState instance for the tracing thread and instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IncrementalStateType getIncrementalState()",
    "returnType" : "IncrementalStateType",
    "comment" : "\n     * Can optionally be used store custom per-sequence\n     * incremental data (e.g., interning tables).\n     *\n     * @return The current IncrementalState object instance.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected byte[][] getAndClearAllPendingTracePackets()",
    "returnType" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Object nativeGetCustomTls(long nativeDsPtr)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetCustomTls(long nativeDsPtr, Object tlsState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native Object nativeGetIncrementalState(long nativeDsPtr)",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSetIncrementalState(long nativeDsPtr, Object incrementalState)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ProtoOutputStream newTracePacket()", "public TlsStateType getCustomTlsState()", "public IncrementalStateType getIncrementalState()", "protected byte[][] getAndClearAllPendingTracePackets()", "private static native Object nativeGetCustomTls(long nativeDsPtr)", "private static native void nativeSetCustomTls(long nativeDsPtr, Object tlsState)", "private static native Object nativeGetIncrementalState(long nativeDsPtr)", "private static native void nativeSetIncrementalState(long nativeDsPtr, Object incrementalState)" ],
  "variableNames" : [ "mDataSource", "mInstanceIndex", "mTracePackets" ]
}