{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/RemoteController.java",
  "packageName" : "android.media",
  "className" : "RemoteController",
  "comment" : "\n * The RemoteController class is used to control media playback, display and update media metadata\n * and playback status, published by applications using the {@link RemoteControlClient} class.\n * <p>\n * A RemoteController shall be registered through\n * {@link AudioManager#registerRemoteController(RemoteController)} in order for the system to send\n * media event updates to the {@link OnClientUpdateListener} listener set in the class constructor.\n * Implement the methods of the interface to receive the information published by the active\n * {@link RemoteControlClient} instances.\n * <br>By default an {@link OnClientUpdateListener} implementation will not receive bitmaps for\n * album art. Use {@link #setArtworkConfiguration(int, int)} to receive images as well.\n * <p>\n * Registration requires the {@link OnClientUpdateListener} listener to be one of the enabled\n * notification listeners (see {@link android.service.notification.NotificationListenerService}).\n *\n * @deprecated Use {@link MediaController} instead.\n ",
  "variables" : [ {
    "name" : "MAX_BITMAP_DIMENSION",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mInfoLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMaxBitmapDimension",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMetadataEditor",
    "type" : "MetadataEditor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionManager",
    "type" : "MediaSessionManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionListener",
    "type" : "MediaSessionManager.OnActiveSessionsChangedListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSessionCb",
    "type" : "MediaController.Callback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsRegistered",
    "type" : "boolean",
    "comment" : "\n     * Synchronized on mInfoLock\n     ",
    "links" : [ ]
  }, {
    "name" : "mOnClientUpdateListener",
    "type" : "OnClientUpdateListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLastPlaybackInfo",
    "type" : "PlaybackInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArtworkWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mArtworkHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnabled",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCurrentSession",
    "type" : "MediaController",
    "comment" : " synchronized on mInfoLock, for USE_SESSION apis.",
    "links" : [ ]
  }, {
    "name" : "POSITION_SYNCHRONIZATION_NONE",
    "type" : "int",
    "comment" : "\n     * Default playback position synchronization mode where the RemoteControlClient is not\n     * asked regularly for its playback position to see if it has drifted from the estimated\n     * position.\n     ",
    "links" : [ ]
  }, {
    "name" : "POSITION_SYNCHRONIZATION_CHECK",
    "type" : "int",
    "comment" : "\n     * The playback position synchronization mode where the RemoteControlClient instances which\n     * expose their playback position to the framework, will be regularly polled to check\n     * whether any drift has been noticed between their estimated position and the one they report.\n     * Note that this mode should only ever be used when needing to display very accurate playback\n     * position, as regularly polling a RemoteControlClient for its position may have an impact\n     * on battery life (if applicable) when this query will trigger network transactions in the\n     * case of remote playback.\n     ",
    "links" : [ ]
  }, {
    "name" : "mEventHandler",
    "type" : "EventHandler",
    "comment" : " Event handling",
    "links" : [ ]
  }, {
    "name" : "MSG_CLIENT_CHANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NEW_PLAYBACK_STATE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_NEW_MEDIA_METADATA",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SENDMSG_REPLACE",
    "type" : "int",
    "comment" : " If the msg is already queued, replace it with this one. ",
    "links" : [ ]
  }, {
    "name" : "SENDMSG_NOOP",
    "type" : "int",
    "comment" : " If the msg is already queued, ignore this one and leave the old. ",
    "links" : [ ]
  }, {
    "name" : "SENDMSG_QUEUE",
    "type" : "int",
    "comment" : " If the msg is already queued, queue this one and leave the old. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public long getEstimatedMediaPosition()",
    "returnType" : "long",
    "comment" : "\n     * Return the estimated playback position of the current media track or a negative value\n     * if not available.\n     *\n     * <p>The value returned is estimated by the current process and may not be perfect.\n     * The time returned by this method is calculated from the last state change time based\n     * on the current play position at that time and the last known playback speed.\n     * An application may call {@link #setSynchronizationMode(int)} to apply\n     * a synchronization policy that will periodically re-sync the estimated position\n     * with the RemoteControlClient.</p>\n     *\n     * @return the current estimated playback position in milliseconds or a negative value\n     *         if not available\n     *\n     * @see OnClientUpdateListener#onClientPlaybackStateUpdate(int, long, long, float)\n     ",
    "links" : [ "#setSynchronizationMode" ]
  }, {
    "name" : "public boolean sendMediaKeyEvent(KeyEvent keyEvent) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * Send a simulated key event for a media button to be received by the current client.\n     * To simulate a key press, you must first send a KeyEvent built with\n     * a {@link KeyEvent#ACTION_DOWN} action, then another event with the {@link KeyEvent#ACTION_UP}\n     * action.\n     * <p>The key event will be sent to the registered receiver\n     * (see {@link AudioManager#registerMediaButtonEventReceiver(PendingIntent)}) whose associated\n     * {@link RemoteControlClient}'s metadata and playback state is published (there may be\n     * none under some circumstances).\n     * @param keyEvent a {@link KeyEvent} instance whose key code is one of\n     *     {@link KeyEvent#KEYCODE_MUTE},\n     *     {@link KeyEvent#KEYCODE_HEADSETHOOK},\n     *     {@link KeyEvent#KEYCODE_MEDIA_PLAY},\n     *     {@link KeyEvent#KEYCODE_MEDIA_PAUSE},\n     *     {@link KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE},\n     *     {@link KeyEvent#KEYCODE_MEDIA_STOP},\n     *     {@link KeyEvent#KEYCODE_MEDIA_NEXT},\n     *     {@link KeyEvent#KEYCODE_MEDIA_PREVIOUS},\n     *     {@link KeyEvent#KEYCODE_MEDIA_REWIND},\n     *     {@link KeyEvent#KEYCODE_MEDIA_RECORD},\n     *     {@link KeyEvent#KEYCODE_MEDIA_FAST_FORWARD},\n     *     {@link KeyEvent#KEYCODE_MEDIA_CLOSE},\n     *     {@link KeyEvent#KEYCODE_MEDIA_EJECT},\n     *     or {@link KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK}.\n     * @return true if the event was successfully sent, false otherwise.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "KeyEvent#ACTION_DOWN", "KeyEvent#ACTION_UP", "AudioManager#registerMediaButtonEventReceiver", "RemoteControlClient", "KeyEvent", "KeyEvent#KEYCODE_MUTE", "KeyEvent#KEYCODE_HEADSETHOOK", "KeyEvent#KEYCODE_MEDIA_PLAY", "KeyEvent#KEYCODE_MEDIA_PAUSE", "KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE", "KeyEvent#KEYCODE_MEDIA_STOP", "KeyEvent#KEYCODE_MEDIA_NEXT", "KeyEvent#KEYCODE_MEDIA_PREVIOUS", "KeyEvent#KEYCODE_MEDIA_REWIND", "KeyEvent#KEYCODE_MEDIA_RECORD", "KeyEvent#KEYCODE_MEDIA_FAST_FORWARD", "KeyEvent#KEYCODE_MEDIA_CLOSE", "KeyEvent#KEYCODE_MEDIA_EJECT", "KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK" ]
  }, {
    "name" : "public boolean seekTo(long timeMs) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * Sets the new playback position.\n     * This method can only be called on a registered RemoteController.\n     * @param timeMs a 0 or positive value for the new playback position, expressed in ms.\n     * @return true if the command to set the playback position was successfully sent.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setArtworkConfiguration(boolean wantBitmap, int width, int height) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     * @param wantBitmap\n     * @param width\n     * @param height\n     * @return true if successful\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setArtworkConfiguration(int width, int height) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * Set the maximum artwork image dimensions to be received in the metadata.\n     * No bitmaps will be received unless this has been specified.\n     * @param width the maximum width in pixels\n     * @param height  the maximum height in pixels\n     * @return true if the artwork dimension was successfully set.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean clearArtworkConfiguration()",
    "returnType" : "boolean",
    "comment" : "\n     * Prevents this RemoteController from receiving artwork images.\n     * @return true if receiving artwork images was successfully disabled.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setSynchronizationMode(int sync) throws IllegalArgumentException",
    "returnType" : "boolean",
    "comment" : "\n     * Set the playback position synchronization mode.\n     * Must be called on a registered RemoteController.\n     * @param sync {@link #POSITION_SYNCHRONIZATION_NONE} or {@link #POSITION_SYNCHRONIZATION_CHECK}\n     * @return true if the synchronization mode was successfully set.\n     * @throws IllegalArgumentException\n     ",
    "links" : [ "#POSITION_SYNCHRONIZATION_NONE", "#POSITION_SYNCHRONIZATION_CHECK" ]
  }, {
    "name" : "public MetadataEditor editMetadata()",
    "returnType" : "MetadataEditor",
    "comment" : "\n     * Creates a {@link MetadataEditor} for updating metadata values of the editable keys of\n     * the current {@link RemoteControlClient}.\n     * This method can only be called on a registered RemoteController.\n     * @return a new MetadataEditor instance.\n     ",
    "links" : [ "MetadataEditor", "RemoteControlClient" ]
  }, {
    "name" : " void startListeningToSessions()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " void stopListeningToSessions()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void sendMsg(Handler handler, int msg, int existingMsgPolicy, int arg1, int arg2, Object obj, int delayMs)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onClientChange(boolean clearing)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateController(MediaController controller)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onNewPlaybackState(PlaybackState state)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void onNewMediaMetadata(MediaMetadata metadata)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " OnClientUpdateListener getUpdateListener()",
    "returnType" : "OnClientUpdateListener",
    "comment" : "\n     * @hide\n     * Used by AudioManager to access user listener receiving the client update notifications\n     * @return\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "MAX_BITMAP_DIMENSION", "TAG", "DEBUG", "mInfoLock", "mContext", "mMaxBitmapDimension", "mMetadataEditor", "mSessionManager", "mSessionListener", "mSessionCb", "mIsRegistered", "mOnClientUpdateListener", "mLastPlaybackInfo", "mArtworkWidth", "mArtworkHeight", "mEnabled", "mCurrentSession", "POSITION_SYNCHRONIZATION_NONE", "POSITION_SYNCHRONIZATION_CHECK", "mEventHandler", "MSG_CLIENT_CHANGE", "MSG_NEW_PLAYBACK_STATE", "MSG_NEW_MEDIA_METADATA", "SENDMSG_REPLACE", "SENDMSG_NOOP", "SENDMSG_QUEUE" ],
  "methodNames" : [ "public long getEstimatedMediaPosition()", "public boolean sendMediaKeyEvent(KeyEvent keyEvent) throws IllegalArgumentException", "public boolean seekTo(long timeMs) throws IllegalArgumentException", "public boolean setArtworkConfiguration(boolean wantBitmap, int width, int height) throws IllegalArgumentException", "public boolean setArtworkConfiguration(int width, int height) throws IllegalArgumentException", "public boolean clearArtworkConfiguration()", "public boolean setSynchronizationMode(int sync) throws IllegalArgumentException", "public MetadataEditor editMetadata()", " void startListeningToSessions()", " void stopListeningToSessions()", "private static void sendMsg(Handler handler, int msg, int existingMsgPolicy, int arg1, int arg2, Object obj, int delayMs)", "private void onClientChange(boolean clearing)", "private void updateController(MediaController controller)", "private void onNewPlaybackState(PlaybackState state)", "private void onNewMediaMetadata(MediaMetadata metadata)", " OnClientUpdateListener getUpdateListener()" ]
}