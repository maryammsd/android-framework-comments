{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/animation/ObjectAnimator.java",
  "packageName" : "android.animation",
  "className" : "ObjectAnimator",
  "comment" : "\n * This subclass of {@link ValueAnimator} provides support for animating properties on target objects.\n * The constructors of this class take parameters to define the target object that will be animated\n * as well as the name of the property that will be animated. Appropriate set/get functions\n * are then determined internally and the animation will call these functions as necessary to\n * animate the property.\n *\n * <p>Animators can be created from either code or resource files, as shown here:</p>\n *\n * {@sample development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources}\n *\n * <p>Starting from API 23, it is possible to use {@link PropertyValuesHolder} and\n * {@link Keyframe} in resource files to create more complex animations. Using PropertyValuesHolders\n * allows animators to animate several properties in parallel, as shown in this sample:</p>\n *\n * {@sample development/samples/ApiDemos/res/anim/object_animator_pvh.xml\n * PropertyValuesHolderResources}\n *\n * <p>Using Keyframes allows animations to follow more complex paths from the start\n * to the end values. Note that you can specify explicit fractional values (from 0 to 1) for\n * each keyframe to determine when, in the overall duration, the animation should arrive at that\n * value. Alternatively, you can leave the fractions off and the keyframes will be equally\n * distributed within the total duration. Also, a keyframe with no value will derive its value\n * from the target object when the animator starts, just like animators with only one\n * value specified. In addition, an optional interpolator can be specified. The interpolator will\n * be applied on the interval between the keyframe that the interpolator is set on and the previous\n * keyframe. When no interpolator is supplied, the default {@link AccelerateDecelerateInterpolator}\n * will be used. </p>\n *\n * {@sample development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources}\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about animating with {@code ObjectAnimator}, read the\n * <a href=\"{@docRoot}guide/topics/graphics/prop-animation.html#object-animator\">Property\n * Animation</a> developer guide.</p>\n * </div>\n *\n * @see #setPropertyName(String)\n *\n ",
  "variables" : [ {
    "name" : "LOG_TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTarget",
    "type" : "WeakReference<Object>",
    "comment" : "\n     * A weak reference to the target object on which the property exists, set\n     * in the constructor. We'll cancel the animation if this goes away.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPropertyName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProperty",
    "type" : "Property",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAutoCancel",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setPropertyName(@NonNull String propertyName)",
    "returnType" : "void",
    "comment" : "\n     * Sets the name of the property that will be animated. This name is used to derive\n     * a setter function that will be called to set animated values.\n     * For example, a property name of <code>foo</code> will result\n     * in a call to the function <code>setFoo()</code> on the target object. If either\n     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will\n     * also be derived and called.\n     *\n     * <p>For best performance of the mechanism that calls the setter function determined by the\n     * name of the property being animated, use <code>float</code> or <code>int</code> typed values,\n     * and make the setter function for those properties have a <code>void</code> return value. This\n     * will cause the code to take an optimized path for these constrained circumstances. Other\n     * property types and return types will work, but will have more overhead in processing\n     * the requests due to normal reflection mechanisms.</p>\n     *\n     * <p>Note that the setter function derived from this property name\n     * must take the same parameter type as the\n     * <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to\n     * the setter function will fail.</p>\n     *\n     * <p>If this ObjectAnimator has been set up to animate several properties together,\n     * using more than one PropertyValuesHolder objects, then setting the propertyName simply\n     * sets the propertyName in the first of those PropertyValuesHolder objects.</p>\n     *\n     * @param propertyName The name of the property being animated. Should not be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperty(@NonNull Property property)",
    "returnType" : "void",
    "comment" : "\n     * Sets the property that will be animated. Property objects will take precedence over\n     * properties specified by the {@link #setPropertyName(String)} method. Animations should\n     * be set up to use one or the other, not both.\n     *\n     * @param property The property being animated. Should not be null.\n     ",
    "links" : [ "#setPropertyName(String)" ]
  }, {
    "name" : "public String getPropertyName()",
    "returnType" : "String",
    "comment" : "\n     * Gets the name of the property that will be animated. This name will be used to derive\n     * a setter function that will be called to set animated values.\n     * For example, a property name of <code>foo</code> will result\n     * in a call to the function <code>setFoo()</code> on the target object. If either\n     * <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will\n     * also be derived and called.\n     *\n     * <p>If this animator was created with a {@link Property} object instead of the\n     * string name of a property, then this method will return the {@link\n     * Property#getName() name} of that Property object instead. If this animator was\n     * created with one or more {@link PropertyValuesHolder} objects, then this method\n     * will return the {@link PropertyValuesHolder#getPropertyName() name} of that\n     * object (if there was just one) or a comma-separated list of all of the\n     * names (if there are more than one).</p>\n     ",
    "links" : [ "android.animation.PropertyValuesHolder", "android.animation.PropertyValuesHolder#getPropertyName()", "android.util.Property", "android.util.Property#getName()" ]
  }, {
    "name" : " String getNameForTrace()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofInt(Object target, String propertyName, int... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between int values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated. This object should\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter.\n     * @param propertyName The name of the property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofInt(Object target, String xPropertyName, String yPropertyName, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>\n     * using two properties. A <code>Path</code></> animation moves in two dimensions, animating\n     * coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are integers that are set to separate properties designated by\n     * <code>xPropertyName</code> and <code>yPropertyName</code>.\n     *\n     * @param target The object whose properties are to be animated. This object should\n     *               have public methods on it called <code>setNameX()</code> and\n     *               <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>\n     *               are the value of <code>xPropertyName</code> and <code>yPropertyName</code>\n     *               parameters, respectively.\n     * @param xPropertyName The name of the property for the x coordinate being animated.\n     * @param yPropertyName The name of the property for the y coordinate being animated.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofInt(T target, Property<T, Integer> property, int... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between int values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofInt(T target, Property<T, Integer> xProperty, Property<T, Integer> yProperty, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>\n     * using two properties.  A <code>Path</code></> animation moves in two dimensions, animating\n     * coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are integers that are set to separate properties, <code>xProperty</code> and\n     * <code>yProperty</code>.\n     *\n     * @param target The object whose properties are to be animated.\n     * @param xProperty The property for the x coordinate being animated.\n     * @param yProperty The property for the y coordinate being animated.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiInt(Object target, String propertyName, int[][] values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates over int values for a multiple\n     * parameters setter. Only public methods that take only int parameters are supported.\n     * Each <code>int[]</code> contains a complete set of parameters to the setter method.\n     * At least two <code>int[]</code> values must be provided, a start and end. More than two\n     * values imply a starting value, values to animate through along the way, and an ending\n     * value (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiInt(Object target, String propertyName, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates the target using a multi-int setter\n     * along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,\n     * animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are integer x and y coordinates used in the first and second parameter of the\n     * setter, respectively.\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiInt(Object target, String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, T... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates over values for a multiple int\n     * parameters setter. Only public methods that take only int parameters are supported.\n     * <p>At least two values must be provided, a start and end. More than two\n     * values imply a starting value, values to animate through along the way, and an ending\n     * value (these values will be distributed evenly across the duration of the animation).</p>\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param converter Converts T objects into int parameters for the multi-value setter.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofArgb(Object target, String propertyName, int... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between color values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated. This object should\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter.\n     * @param propertyName The name of the property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofArgb(T target, Property<T, Integer> property, int... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between color values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofFloat(Object target, String propertyName, float... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between float values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated. This object should\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter.\n     * @param propertyName The name of the property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofFloat(Object target, String xPropertyName, String yPropertyName, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>\n     * using two properties. A <code>Path</code></> animation moves in two dimensions, animating\n     * coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are floats that are set to separate properties designated by\n     * <code>xPropertyName</code> and <code>yPropertyName</code>.\n     *\n     * @param target The object whose properties are to be animated. This object should\n     *               have public methods on it called <code>setNameX()</code> and\n     *               <code>setNameY</code>, where <code>nameX</code> and <code>nameY</code>\n     *               are the value of the <code>xPropertyName</code> and <code>yPropertyName</code>\n     *               parameters, respectively.\n     * @param xPropertyName The name of the property for the x coordinate being animated.\n     * @param yPropertyName The name of the property for the y coordinate being animated.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofFloat(T target, Property<T, Float> property, float... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between float values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofFloat(T target, Property<T, Float> xProperty, Property<T, Float> yProperty, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>\n     * using two properties. A <code>Path</code></> animation moves in two dimensions, animating\n     * coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are floats that are set to separate properties, <code>xProperty</code> and\n     * <code>yProperty</code>.\n     *\n     * @param target The object whose properties are to be animated.\n     * @param xProperty The property for the x coordinate being animated.\n     * @param yProperty The property for the y coordinate being animated.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, float[][] values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates over float values for a multiple\n     * parameters setter. Only public methods that take only float parameters are supported.\n     * Each <code>float[]</code> contains a complete set of parameters to the setter method.\n     * At least two <code>float[]</code> values must be provided, a start and end. More than two\n     * values imply a starting value, values to animate through along the way, and an ending\n     * value (these values will be distributed evenly across the duration of the animation).\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates the target using a multi-float setter\n     * along the given <code>Path</code>. A <code>Path</code></> animation moves in two dimensions,\n     * animating coordinates <code>(x, y)</code> together to follow the line. In this variation, the\n     * coordinates are float x and y coordinates used in the first and second parameter of the\n     * setter, respectively.\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, T... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates over values for a multiple float\n     * parameters setter. Only public methods that take only float parameters are supported.\n     * <p>At least two values must be provided, a start and end. More than two\n     * values imply a starting value, values to animate through along the way, and an ending\n     * value (these values will be distributed evenly across the duration of the animation).</p>\n     *\n     * @param target The object whose property is to be animated. This object may\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter. <code>propertyName</code> may also\n     * be the case-sensitive complete name of the public setter method.\n     * @param propertyName The name of the property being animated or the name of the setter method.\n     * @param converter Converts T objects into float parameters for the multi-value setter.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between Object values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * <p><strong>Note:</strong> The values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the animator. If the objects will be mutated externally after\n     * this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param target The object whose property is to be animated. This object should\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter.\n     * @param propertyName The name of the property being animated.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofObject(Object target, String propertyName, @Nullable TypeConverter<PointF, ?> converter, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.\n     * A <code>Path</code></> animation moves in two dimensions, animating coordinates\n     * <code>(x, y)</code> together to follow the line. This variant animates the coordinates\n     * in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>\n     * associated with <code>propertyName</code> uses a type other than <code>PointF</code>,\n     * <code>converter</code> can be used to change from <code>PointF</code> to the type\n     * associated with the <code>Property</code>.\n     *\n     * @param target The object whose property is to be animated. This object should\n     * have a public method on it called <code>setName()</code>, where <code>name</code> is\n     * the value of the <code>propertyName</code> parameter.\n     * @param propertyName The name of the property being animated.\n     * @param converter Converts a PointF to the type associated with the setter. May be\n     *                  null if conversion is unnecessary.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofObject(T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between Object values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     *\n     * <p><strong>Note:</strong> The values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the animator. If the objects will be mutated externally after\n     * this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()" ]
  }, {
    "name" : "public static ObjectAnimator ofObject(T target, Property<T, P> property, TypeConverter<V, P> converter, TypeEvaluator<V> evaluator, V... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between Object values. A single\n     * value implies that that value is the one being animated to, in which case the start value\n     * will be derived from the property being animated and the target object when {@link #start()}\n     * is called for the first time. Two values imply starting and ending values. More than two\n     * values imply a starting value, values to animate through along the way, and an ending value\n     * (these values will be distributed evenly across the duration of the animation).\n     * This variant supplies a <code>TypeConverter</code> to convert from the animated values to the\n     * type of the property. If only one value is supplied, the <code>TypeConverter</code> must be a\n     * {@link android.animation.BidirectionalTypeConverter} to retrieve the current value.\n     *\n     * <p><strong>Note:</strong> The values are stored as references to the original\n     * objects, which means that changes to those objects after this method is called will\n     * affect the values on the animator. If the objects will be mutated externally after\n     * this method is called, callers should pass a copy of those objects instead.\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated.\n     * @param converter Converts the animated object to the Property type.\n     * @param evaluator A TypeEvaluator that will be called on each animation frame to\n     * provide the necessary interpolation between the Object values to derive the animated\n     * value.\n     * @param values A set of values that the animation will animate between over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "#start()", "android.animation.BidirectionalTypeConverter" ]
  }, {
    "name" : "public static ObjectAnimator ofObject(T target, @NonNull Property<T, V> property, @Nullable TypeConverter<PointF, V> converter, Path path)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.\n     * A <code>Path</code></> animation moves in two dimensions, animating coordinates\n     * <code>(x, y)</code> together to follow the line. This variant animates the coordinates\n     * in a <code>PointF</code> to follow the <code>Path</code>. If <code>property</code>\n     * uses a type other than <code>PointF</code>, <code>converter</code> can be used to change\n     * from <code>PointF</code> to the type associated with the <code>Property</code>.\n     *\n     * <p>The PointF passed to <code>converter</code> or <code>property</code>, if\n     * <code>converter</code> is <code>null</code>, is reused on each animation frame and should\n     * not be stored by the setter or TypeConverter.</p>\n     *\n     * @param target The object whose property is to be animated.\n     * @param property The property being animated. Should not be null.\n     * @param converter Converts a PointF to the type associated with the setter. May be\n     *                  null if conversion is unnecessary.\n     * @param path The <code>Path</code> to animate values along.\n     * @return An ObjectAnimator object that is set up to animate along <code>path</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Constructs and returns an ObjectAnimator that animates between the sets of values specified\n     * in <code>PropertyValueHolder</code> objects. This variant should be used when animating\n     * several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows\n     * you to associate a set of animation values with a property name.\n     *\n     * @param target The object whose property is to be animated. Depending on how the\n     * PropertyValuesObjects were constructed, the target object should either have the {@link\n     * android.util.Property} objects used to construct the PropertyValuesHolder objects or (if the\n     * PropertyValuesHOlder objects were created with property names) the target object should have\n     * public methods on it called <code>setName()</code>, where <code>name</code> is the name of\n     * the property passed in as the <code>propertyName</code> parameter for each of the\n     * PropertyValuesHolder objects.\n     * @param values A set of PropertyValuesHolder objects whose values will be animated between\n     * over time.\n     * @return An ObjectAnimator object that is set up to animate between the given values.\n     ",
    "links" : [ "android.util.Property" ]
  }, {
    "name" : "public void setIntValues(int... values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setFloatValues(float... values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setObjectValues(Object... values)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setAutoCancel(boolean cancel)",
    "returnType" : "void",
    "comment" : "\n     * autoCancel controls whether an ObjectAnimator will be canceled automatically\n     * when any other ObjectAnimator with the same target and properties is started.\n     * Setting this flag may make it easier to run different animators on the same target\n     * object without having to keep track of whether there are conflicting animators that\n     * need to be manually canceled. Canceling animators must have the same exact set of\n     * target properties, in the same order.\n     *\n     * @param cancel Whether future ObjectAnimators with the same target and properties\n     * as this ObjectAnimator will cause this ObjectAnimator to be canceled.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasSameTargetAndProperties(@Nullable Animator anim)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void start()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean shouldAutoCancel(AnimationHandler.AnimationFrameCallback anim)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void initAnimation()",
    "returnType" : "void",
    "comment" : "\n     * This function is called immediately before processing the first animation\n     * frame of an animation. If there is a nonzero <code>startDelay</code>, the\n     * function is called after that delay ends.\n     * It takes care of the final initialization steps for the\n     * animation. This includes setting mEvaluator, if the user has not yet\n     * set it up, and the setter/getter methods, if the user did not supply\n     * them.\n     *\n     *  <p>Overriders of this method should call the superclass method to cause\n     *  internal mechanisms to be set up correctly.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public ObjectAnimator setDuration(long duration)",
    "returnType" : "ObjectAnimator",
    "comment" : "\n     * Sets the length of the animation. The default duration is 300 milliseconds.\n     *\n     * @param duration The length of the animation, in milliseconds.\n     * @return ObjectAnimator The object called with setDuration(). This return\n     * value makes it easier to compose statements together that construct and then set the\n     * duration, as in\n     * <code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getTarget()",
    "returnType" : "Object",
    "comment" : "\n     * The target object whose property will be animated by this animation\n     *\n     * @return The object being animated\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTarget(@Nullable Object target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setupStartValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setupEndValues()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void animateValue(float fraction)",
    "returnType" : "void",
    "comment" : "\n     * This method is called with the elapsed fraction of the animation during every\n     * animation frame. This function turns the elapsed fraction into an interpolated fraction\n     * and then into an animated value (from the evaluator. The function is called mostly during\n     * animation updates, but it is also called when the <code>end()</code>\n     * function is called, to set the final value on the property.\n     *\n     * <p>Overrides of this method must call the superclass to perform the calculation\n     * of the animated value.</p>\n     *\n     * @param fraction The elapsed fraction of the animation.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isInitialized()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ObjectAnimator clone()",
    "returnType" : "ObjectAnimator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOG_TAG", "DBG", "mTarget", "mPropertyName", "mProperty", "mAutoCancel" ],
  "methodNames" : [ "public void setPropertyName(@NonNull String propertyName)", "public void setProperty(@NonNull Property property)", "public String getPropertyName()", " String getNameForTrace()", "public static ObjectAnimator ofInt(Object target, String propertyName, int... values)", "public static ObjectAnimator ofInt(Object target, String xPropertyName, String yPropertyName, Path path)", "public static ObjectAnimator ofInt(T target, Property<T, Integer> property, int... values)", "public static ObjectAnimator ofInt(T target, Property<T, Integer> xProperty, Property<T, Integer> yProperty, Path path)", "public static ObjectAnimator ofMultiInt(Object target, String propertyName, int[][] values)", "public static ObjectAnimator ofMultiInt(Object target, String propertyName, Path path)", "public static ObjectAnimator ofMultiInt(Object target, String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, T... values)", "public static ObjectAnimator ofArgb(Object target, String propertyName, int... values)", "public static ObjectAnimator ofArgb(T target, Property<T, Integer> property, int... values)", "public static ObjectAnimator ofFloat(Object target, String propertyName, float... values)", "public static ObjectAnimator ofFloat(Object target, String xPropertyName, String yPropertyName, Path path)", "public static ObjectAnimator ofFloat(T target, Property<T, Float> property, float... values)", "public static ObjectAnimator ofFloat(T target, Property<T, Float> xProperty, Property<T, Float> yProperty, Path path)", "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, float[][] values)", "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, Path path)", "public static ObjectAnimator ofMultiFloat(Object target, String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, T... values)", "public static ObjectAnimator ofObject(Object target, String propertyName, TypeEvaluator evaluator, Object... values)", "public static ObjectAnimator ofObject(Object target, String propertyName, @Nullable TypeConverter<PointF, ?> converter, Path path)", "public static ObjectAnimator ofObject(T target, Property<T, V> property, TypeEvaluator<V> evaluator, V... values)", "public static ObjectAnimator ofObject(T target, Property<T, P> property, TypeConverter<V, P> converter, TypeEvaluator<V> evaluator, V... values)", "public static ObjectAnimator ofObject(T target, @NonNull Property<T, V> property, @Nullable TypeConverter<PointF, V> converter, Path path)", "public static ObjectAnimator ofPropertyValuesHolder(Object target, PropertyValuesHolder... values)", "public void setIntValues(int... values)", "public void setFloatValues(float... values)", "public void setObjectValues(Object... values)", "public void setAutoCancel(boolean cancel)", "private boolean hasSameTargetAndProperties(@Nullable Animator anim)", "public void start()", " boolean shouldAutoCancel(AnimationHandler.AnimationFrameCallback anim)", " void initAnimation()", "public ObjectAnimator setDuration(long duration)", "public Object getTarget()", "public void setTarget(@Nullable Object target)", "public void setupStartValues()", "public void setupEndValues()", " void animateValue(float fraction)", " boolean isInitialized()", "public ObjectAnimator clone()", "public String toString()" ]
}