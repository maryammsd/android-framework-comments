{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/view/inputmethod/EditorInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "EditorInfo",
  "comment" : "\n * An EditorInfo describes several attributes of a text editing object\n * that an input method is communicating with (typically an EditText), most\n * importantly the type of text content it contains and the current cursor position.\n ",
  "variables" : [ {
    "name" : "inputType",
    "type" : "int",
    "comment" : "\n     * The content type of the text box, whose bits are defined by\n     * {@link InputType}.\n     *\n     * @see InputType\n     * @see #TYPE_MASK_CLASS\n     * @see #TYPE_MASK_VARIATION\n     * @see #TYPE_MASK_FLAGS\n     ",
    "links" : [ "android.text.InputType" ]
  }, {
    "name" : "IME_MASK_ACTION",
    "type" : "int",
    "comment" : "\n     * Set of bits in {@link #imeOptions} that provide alternative actions\n     * associated with the \"enter\" key.  This both helps the IME provide\n     * better feedback about what the enter key will do, and also allows it\n     * to provide alternative mechanisms for providing that command.\n     ",
    "links" : [ "#imeOptions" ]
  }, {
    "name" : "IME_ACTION_UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: no specific action has been\n     * associated with this editor, let the editor come up with its own if\n     * it can.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_NONE",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: there is no available action.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_GO",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: the action key performs a \"go\"\n     * operation to take the user to the target of the text they typed.\n     * Typically used, for example, when entering a URL.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_SEARCH",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: the action key performs a \"search\"\n     * operation, taking the user to the results of searching for the text\n     * they have typed (in whatever context is appropriate).\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_SEND",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: the action key performs a \"send\"\n     * operation, delivering the text to its target.  This is typically used\n     * when composing a message in IM or SMS where sending is immediate.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_NEXT",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: the action key performs a \"next\"\n     * operation, taking the user to the next field that will accept text.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_DONE",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: the action key performs a \"done\"\n     * operation, typically meaning there is nothing more to input and the\n     * IME will be closed.\n     ",
    "links" : [ "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_ACTION_PREVIOUS",
    "type" : "int",
    "comment" : "\n     * Bits of {@link #IME_MASK_ACTION}: like {@link #IME_ACTION_NEXT}, but\n     * for moving to the previous field.  This will normally not be used to\n     * specify an action (since it precludes {@link #IME_ACTION_NEXT}), but\n     * can be returned to the app if it sets {@link #IME_FLAG_NAVIGATE_PREVIOUS}.\n     ",
    "links" : [ "#IME_FLAG_NAVIGATE_PREVIOUS", "#IME_ACTION_NEXT", "#IME_MASK_ACTION" ]
  }, {
    "name" : "IME_FLAG_NO_PERSONALIZED_LEARNING",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used to request that the IME should not update any personalized\n     * data such as typing history and personalized language model based on what the user typed on\n     * this text editing object.  Typical use cases are:\n     * <ul>\n     *     <li>When the application is in a special mode, where user's activities are expected to be\n     *     not recorded in the application's history.  Some web browsers and chat applications may\n     *     have this kind of modes.</li>\n     *     <li>When storing typing history does not make much sense.  Specifying this flag in typing\n     *     games may help to avoid typing history from being filled up with words that the user is\n     *     less likely to type in their daily life.  Another example is that when the application\n     *     already knows that the expected input is not a valid word (e.g. a promotion code that is\n     *     not a valid word in any natural language).</li>\n     * </ul>\n     *\n     * <p>Applications need to be aware that the flag is not a guarantee, and some IMEs may not\n     * respect it.</p>\n     ",
    "links" : [ "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NO_FULLSCREEN",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used to request that the IME never go\n     * into fullscreen mode.\n     * By default, IMEs may go into full screen mode when they think\n     * it's appropriate, for example on small screens in landscape\n     * orientation where displaying a software keyboard may occlude\n     * such a large portion of the screen that the remaining part is\n     * too small to meaningfully display the application UI.\n     * If this flag is set, compliant IMEs will never go into full screen mode,\n     * and always leave some space to display the application UI.\n     * Applications need to be aware that the flag is not a guarantee, and\n     * some IMEs may ignore it.\n     ",
    "links" : [ "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NAVIGATE_PREVIOUS",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: like {@link #IME_FLAG_NAVIGATE_NEXT}, but\n     * specifies there is something interesting that a backward navigation\n     * can focus on.  If the user selects the IME's facility to backward\n     * navigate, this will show up in the application as an {@link #IME_ACTION_PREVIOUS}\n     * at {@link InputConnection#performEditorAction(int)\n     * InputConnection.performEditorAction(int)}.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#performEditorAction(int)", "#IME_ACTION_PREVIOUS", "#IME_FLAG_NAVIGATE_NEXT", "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NAVIGATE_NEXT",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used to specify that there is something\n     * interesting that a forward navigation can focus on. This is like using\n     * {@link #IME_ACTION_NEXT}, except allows the IME to be multiline (with\n     * an enter key) as well as provide forward navigation.  Note that some\n     * IMEs may not be able to do this, especially when running on a small\n     * screen where there is little space.  In that case it does not need to\n     * present a UI for this option.  Like {@link #IME_ACTION_NEXT}, if the\n     * user selects the IME's facility to forward navigate, this will show up\n     * in the application at {@link InputConnection#performEditorAction(int)\n     * InputConnection.performEditorAction(int)}.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#performEditorAction(int)", "#IME_ACTION_NEXT", "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NO_EXTRACT_UI",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used to specify that the IME does not need\n     * to show its extracted text UI.  For input methods that may be fullscreen,\n     * often when in landscape mode, this allows them to be smaller and let part\n     * of the application be shown behind, through transparent UI parts in the\n     * fullscreen IME. The part of the UI visible to the user may not be responsive\n     * to touch because the IME will receive touch events, which may confuse the\n     * user; use {@link #IME_FLAG_NO_FULLSCREEN} instead for a better experience.\n     * Using this flag is discouraged and it may become deprecated in the future.\n     * Its meaning is unclear in some situations and it may not work appropriately\n     * on older versions of the platform.\n     ",
    "links" : [ "#IME_FLAG_NO_FULLSCREEN", "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NO_ACCESSORY_ACTION",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used in conjunction with one of the actions\n     * masked by {@link #IME_MASK_ACTION}, this indicates that the action\n     * should not be available as an accessory button on the right of the extracted\n     * text when the input method is full-screen. Note that by setting this flag,\n     * there can be cases where the action is simply never available to the\n     * user. Setting this generally means that you think that in fullscreen mode,\n     * where there is little space to show the text, it's not worth taking some\n     * screen real estate to display the action and it should be used instead\n     * to show more text.\n     ",
    "links" : [ "#IME_MASK_ACTION", "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_NO_ENTER_ACTION",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used in conjunction with one of the actions\n     * masked by {@link #IME_MASK_ACTION}. If this flag is not set, IMEs will\n     * normally replace the \"enter\" key with the action supplied. This flag\n     * indicates that the action should not be available in-line as a replacement\n     * for the \"enter\" key. Typically this is because the action has such a\n     * significant impact or is not recoverable enough that accidentally hitting\n     * it should be avoided, such as sending a message. Note that\n     * {@link android.widget.TextView} will automatically set this flag for you\n     * on multi-line text views.\n     ",
    "links" : [ "android.widget.TextView", "#IME_MASK_ACTION", "#imeOptions" ]
  }, {
    "name" : "IME_FLAG_FORCE_ASCII",
    "type" : "int",
    "comment" : "\n     * Flag of {@link #imeOptions}: used to request an IME that is capable of\n     * inputting ASCII characters.  The intention of this flag is to ensure that\n     * the user can type Roman alphabet characters in a {@link android.widget.TextView}.\n     * It is typically used for an account ID or password input. A lot of the time,\n     * IMEs are already able to input ASCII even without being told so (such IMEs\n     * already respect this flag in a sense), but there are cases when this is not\n     * the default. For instance, users of languages using a different script like\n     * Arabic, Greek, Hebrew or Russian typically have a keyboard that can't\n     * input ASCII characters by default. Applications need to be\n     * aware that the flag is not a guarantee, and some IMEs may not respect it.\n     * However, it is strongly recommended for IME authors to respect this flag\n     * especially when their IME could end up with a state where only languages\n     * using non-ASCII are enabled.\n     ",
    "links" : [ "android.widget.TextView", "#imeOptions" ]
  }, {
    "name" : "IME_NULL",
    "type" : "int",
    "comment" : "\n     * Generic unspecified type for {@link #imeOptions}.\n     ",
    "links" : [ "#imeOptions" ]
  }, {
    "name" : "imeOptions",
    "type" : "int",
    "comment" : "\n     * Extended type information for the editor, to help the IME better\n     * integrate with it.\n     ",
    "links" : [ ]
  }, {
    "name" : "privateImeOptions",
    "type" : "String",
    "comment" : "\n     * A string supplying additional information options that are\n     * private to a particular IME implementation.  The string must be\n     * scoped to a package owned by the implementation, to ensure there are\n     * no conflicts between implementations, but other than that you can put\n     * whatever you want in it to communicate with the IME.  For example,\n     * you could have a string that supplies an argument like\n     * <code>\"com.example.myapp.SpecialMode=3\"</code>.  This field is can be\n     * filled in from the {@link android.R.attr#privateImeOptions}\n     * attribute of a TextView.\n     ",
    "links" : [ "android.R.attr#privateImeOptions" ]
  }, {
    "name" : "actionLabel",
    "type" : "CharSequence",
    "comment" : "\n     * In some cases an IME may be able to display an arbitrary label for\n     * a command the user can perform, which you can specify here. This is\n     * typically used as the label for the action to use in-line as a replacement\n     * for the \"enter\" key (see {@link #actionId}). Remember the key where\n     * this will be displayed is typically very small, and there are significant\n     * localization challenges to make this fit in all supported languages. Also\n     * you can not count absolutely on this being used, as some IMEs may\n     * ignore this.\n     ",
    "links" : [ "#actionId" ]
  }, {
    "name" : "actionId",
    "type" : "int",
    "comment" : "\n     * If {@link #actionLabel} has been given, this is the id for that command\n     * when the user presses its button that is delivered back with\n     * {@link InputConnection#performEditorAction(int)\n     * InputConnection.performEditorAction()}.\n     ",
    "links" : [ "#actionLabel", "android.view.inputmethod.InputConnection#performEditorAction(int)" ]
  }, {
    "name" : "initialSelStart",
    "type" : "int",
    "comment" : "\n     * The text offset of the start of the selection at the time editing\n     * begins; -1 if not known. Keep in mind that, without knowing the cursor\n     * position, many IMEs will not be able to offer their full feature set and\n     * may even behave in unpredictable ways: pass the actual cursor position\n     * here if possible at all.\n     *\n     * <p>Also, this needs to be the cursor position <strong>right now</strong>,\n     * not at some point in the past, even if input is starting in the same text field\n     * as before. When the app is filling this object, input is about to start by\n     * definition, and this value will override any value the app may have passed to\n     * {@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)}\n     * before.</p>\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#updateSelection(android.view.View" ]
  }, {
    "name" : "initialSelEnd",
    "type" : "int",
    "comment" : "\n     * <p>The text offset of the end of the selection at the time editing\n     * begins; -1 if not known. Keep in mind that, without knowing the cursor\n     * position, many IMEs will not be able to offer their full feature set and\n     * may behave in unpredictable ways: pass the actual cursor position\n     * here if possible at all.</p>\n     *\n     * <p>Also, this needs to be the cursor position <strong>right now</strong>,\n     * not at some point in the past, even if input is starting in the same text field\n     * as before. When the app is filling this object, input is about to start by\n     * definition, and this value will override any value the app may have passed to\n     * {@link InputMethodManager#updateSelection(android.view.View, int, int, int, int)}\n     * before.</p>\n     ",
    "links" : [ "android.view.inputmethod.InputMethodManager#updateSelection(android.view.View" ]
  }, {
    "name" : "initialCapsMode",
    "type" : "int",
    "comment" : "\n     * The capitalization mode of the first character being edited in the\n     * text.  Values may be any combination of\n     * {@link TextUtils#CAP_MODE_CHARACTERS TextUtils.CAP_MODE_CHARACTERS},\n     * {@link TextUtils#CAP_MODE_WORDS TextUtils.CAP_MODE_WORDS}, and\n     * {@link TextUtils#CAP_MODE_SENTENCES TextUtils.CAP_MODE_SENTENCES}, though\n     * you should generally just take a non-zero value to mean \"start out in\n     * caps mode\".\n     ",
    "links" : [ "android.text.TextUtils#CAP_MODE_WORDS", "android.text.TextUtils#CAP_MODE_SENTENCES", "android.text.TextUtils#CAP_MODE_CHARACTERS" ]
  }, {
    "name" : "hintText",
    "type" : "CharSequence",
    "comment" : "\n     * The \"hint\" text of the text view, typically shown in-line when the\n     * text is empty to tell the user what to enter.\n     ",
    "links" : [ ]
  }, {
    "name" : "label",
    "type" : "CharSequence",
    "comment" : "\n     * A label to show to the user describing the text they are writing.\n     ",
    "links" : [ ]
  }, {
    "name" : "packageName",
    "type" : "String",
    "comment" : "\n     * Name of the package that owns this editor.\n     *\n     * <p><strong>IME authors:</strong> In API level 22\n     * {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} and prior, do not trust this package\n     * name. The system had not verified the consistency between the package name here and\n     * application's uid. Consider to use {@link InputBinding#getUid()}, which is trustworthy.\n     * Starting from {@link android.os.Build.VERSION_CODES#M}, the system verifies the consistency\n     * between this package name and application uid before {@link EditorInfo} is passed to the\n     * input method.</p>\n     *\n     * <p><strong>Editor authors:</strong> Starting from {@link android.os.Build.VERSION_CODES#M},\n     * the application is no longer\n     * able to establish input connections if the package name provided here is inconsistent with\n     * application's uid.</p>\n     ",
    "links" : [ "android.os.Build.VERSION_CODES#LOLLIPOP_MR1", "android.view.inputmethod.InputBinding#getUid()", "android.view.inputmethod.EditorInfo", "android.os.Build.VERSION_CODES#M" ]
  }, {
    "name" : "autofillId",
    "type" : "AutofillId",
    "comment" : "\n     * Autofill Id for the field that's currently on focus.\n     *\n     * <p> Marked as hide since it's only used by framework.</p>\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "fieldId",
    "type" : "int",
    "comment" : "\n     * Identifier for the editor's field.  This is optional, and may be\n     * 0.  By default it is filled in with the result of\n     * {@link android.view.View#getId() View.getId()} on the View that\n     * is being edited.\n     ",
    "links" : [ "android.view.View#getId()" ]
  }, {
    "name" : "fieldName",
    "type" : "String",
    "comment" : "\n     * Additional name for the editor's field.  This can supply additional\n     * name information for the field.  By default it is null.  The actual\n     * contents have no meaning.\n     ",
    "links" : [ ]
  }, {
    "name" : "extras",
    "type" : "Bundle",
    "comment" : "\n     * Any extra data to supply to the input method.  This is for extended\n     * communication with specific input methods; the name fields in the\n     * bundle should be scoped (such as \"com.mydomain.im.SOME_FIELD\") so\n     * that they don't conflict with others.  This field can be\n     * filled in from the {@link android.R.attr#editorExtras}\n     * attribute of a TextView.\n     ",
    "links" : [ "android.R.attr#editorExtras" ]
  }, {
    "name" : "hintLocales",
    "type" : "LocaleList",
    "comment" : "\n     * List of the languages that the user is supposed to switch to no matter what input method\n     * subtype is currently used.  This special \"hint\" can be used mainly for, but not limited to,\n     * multilingual users who want IMEs to switch language context automatically.\n     *\n     * <p>{@code null} means that no special language \"hint\" is needed.</p>\n     *\n     * <p><strong>Editor authors:</strong> Specify this only when you are confident that the user\n     * will switch to certain languages in this context no matter what input method subtype is\n     * currently selected.  Otherwise, keep this {@code null}.  Explicit user actions and/or\n     * preferences would be good signals to specify this special \"hint\",  For example, a chat\n     * application may be able to put the last used language at the top of {@link #hintLocales}\n     * based on whom the user is going to talk, by remembering what language is used in the last\n     * conversation.  Do not specify {@link android.widget.TextView#getTextLocales()} only because\n     * it is used for text rendering.</p>\n     *\n     * @see android.widget.TextView#setImeHintLocales(LocaleList)\n     * @see android.widget.TextView#getImeHintLocales()\n     ",
    "links" : [ "android.widget.TextView#getTextLocales()", "#hintLocales" ]
  }, {
    "name" : "contentMimeTypes",
    "type" : "String[]",
    "comment" : "\n     * List of acceptable MIME types for\n     * {@link InputConnection#commitContent(InputContentInfo, int, Bundle)}.\n     *\n     * <p>{@code null} or an empty array means that\n     * {@link InputConnection#commitContent(InputContentInfo, int, Bundle)} is not supported in this\n     * editor.</p>\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#commitContent(InputContentInfo" ]
  }, {
    "name" : "targetInputMethodUser",
    "type" : "UserHandle",
    "comment" : "\n     * If not {@code null}, this editor needs to talk to IMEs that run for the specified user, no\n     * matter what user ID the calling process has.\n     *\n     * <p>Note: This field will be silently ignored when\n     * {@link com.android.server.inputmethod.InputMethodSystemProperty#MULTI_CLIENT_IME_ENABLED} is\n     * {@code true}.</p>\n     *\n     * <p>Note also that pseudo handles such as {@link UserHandle#ALL} are not supported.</p>\n     *\n     * @hide\n     ",
    "links" : [ "android.os.UserHandle#ALL", "com.android.server.inputmethod.InputMethodSystemProperty#MULTI_CLIENT_IME_ENABLED" ]
  }, {
    "name" : "MEMORY_EFFICIENT_TEXT_LENGTH",
    "type" : "int",
    "comment" : "\n     * The maximum length of initialSurroundingText. When the input text from\n     * {@code setInitialSurroundingText(CharSequence)} is longer than this, trimming shall be\n     * performed to keep memory efficiency.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_INITIAL_SELECTION_LENGTH",
    "type" : "int",
    "comment" : "\n     * When the input text is longer than {@code #MEMORY_EFFICIENT_TEXT_LENGTH}, we start trimming\n     * the input text into three parts: BeforeCursor, Selection, and AfterCursor. We don't want to\n     * trim the Selection but we also don't want it consumes all available space. Therefore, the\n     * maximum acceptable Selection length is half of {@code #MEMORY_EFFICIENT_TEXT_LENGTH}.\n     ",
    "links" : [ ]
  }, {
    "name" : "mInitialSurroundingText",
    "type" : "InitialSurroundingText",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<EditorInfo>",
    "comment" : "\n     * Used to make this class parcelable.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setInitialSurroundingText(@NonNull CharSequence sourceText)",
    "returnType" : "void",
    "comment" : "\n     * Editors may use this method to provide initial input text to IMEs. As the surrounding text\n     * could be used to provide various input assistance, we recommend editors to provide the\n     * complete initial input text in its {@link View#onCreateInputConnection(EditorInfo)} callback.\n     * The supplied text will then be processed to serve {@code #getInitialTextBeforeCursor},\n     * {@code #getInitialSelectedText}, and {@code #getInitialTextBeforeCursor}. System is allowed\n     * to trim {@code sourceText} for various reasons while keeping the most valuable data to IMEs.\n     *\n     * <p><strong>Editor authors: </strong>Providing the initial input text helps reducing IPC calls\n     * for IMEs to provide many modern features right after the connection setup. We recommend\n     * calling this method in your implementation.\n     *\n     * @param sourceText The complete input text.\n     ",
    "links" : [ "android.view.View#onCreateInputConnection(EditorInfo)" ]
  }, {
    "name" : "public void setInitialSurroundingSubText(@NonNull CharSequence subText, int subTextStart)",
    "returnType" : "void",
    "comment" : "\n     * Editors may use this method to provide initial input text to IMEs. As the surrounding text\n     * could be used to provide various input assistance, we recommend editors to provide the\n     * complete initial input text in its {@link View#onCreateInputConnection(EditorInfo)} callback.\n     * When trimming the input text is needed, call this method instead of\n     * {@code setInitialSurroundingText(CharSequence)} and provide the trimmed position info. Always\n     * try to include the selected text within {@code subText} to give the system best flexibility\n     * to choose where and how to trim {@code subText} when necessary.\n     *\n     * @param subText The input text. When it was trimmed, {@code subTextStart} must be provided\n     *                correctly.\n     * @param subTextStart  The position that the input text got trimmed. For example, when the\n     *                      editor wants to trim out the first 10 chars, subTextStart should be 10.\n     ",
    "links" : [ "android.view.View#onCreateInputConnection(EditorInfo)" ]
  }, {
    "name" : "private void trimLongSurroundingText(CharSequence subText, int selStart, int selEnd)",
    "returnType" : "void",
    "comment" : "\n     * Trims the initial surrounding text when it is over sized. Fundamental trimming rules are:\n     * - The text before the cursor is the most important information to IMEs.\n     * - The text after the cursor is the second important information to IMEs.\n     * - The selected text is the least important information but it shall NEVER be truncated. When\n     *    it is too long, just drop it.\n     *<p><pre>\n     * For example, the subText can be viewed as\n     *     TextBeforeCursor + Selection + TextAfterCursor\n     * The result could be\n     *     1. (maybeTrimmedAtHead)TextBeforeCursor + Selection + TextAfterCursor(maybeTrimmedAtTail)\n     *     2. (maybeTrimmedAtHead)TextBeforeCursor + TextAfterCursor(maybeTrimmedAtTail)</pre>\n     *\n     * @param subText The long text that needs to be trimmed.\n     * @param selStart The text offset of the start of the selection.\n     * @param selEnd The text offset of the end of the selection\n     ",
    "links" : [ ]
  }, {
    "name" : "public CharSequence getInitialTextBeforeCursor(int length, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get <var>length</var> characters of text before the current cursor position. May be\n     * {@code null} when the protocol is not supported.\n     *\n     * @param length The expected length of the text.\n     * @param flags Supplies additional options controlling how the text is returned. May be\n     * either 0 or {@link InputConnection#GET_TEXT_WITH_STYLES}.\n     * @return the text before the cursor position; the length of the returned text might be less\n     * than <var>length</var>. When there is no text before the cursor, an empty string will be\n     * returned. It could also be {@code null} when the editor or system could not support this\n     * protocol.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#GET_TEXT_WITH_STYLES" ]
  }, {
    "name" : "public CharSequence getInitialSelectedText(int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Gets the selected text, if any. May be {@code null} when the protocol is not supported or the\n     * selected text is way too long.\n     *\n     * @param flags Supplies additional options controlling how the text is returned. May be\n     * either 0 or {@link InputConnection#GET_TEXT_WITH_STYLES}.\n     * @return the text that is currently selected, if any. It could be an empty string when there\n     * is no text selected. When {@code null} is returned, the selected text might be too long or\n     * this protocol is not supported.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#GET_TEXT_WITH_STYLES" ]
  }, {
    "name" : "public CharSequence getInitialTextAfterCursor(int length, int flags)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Get <var>length</var> characters of text after the current cursor position. May be\n     * {@code null} when the protocol is not supported.\n     *\n     * @param length The expected length of the text.\n     * @param flags Supplies additional options controlling how the text is returned. May be\n     * either 0 or {@link InputConnection#GET_TEXT_WITH_STYLES}.\n     * @return the text after the cursor position; the length of the returned text might be less\n     * than <var>length</var>. When there is no text after the cursor, an empty string will be\n     * returned. It could also be {@code null} when the editor or system could not support this\n     * protocol.\n     ",
    "links" : [ "android.view.inputmethod.InputConnection#GET_TEXT_WITH_STYLES" ]
  }, {
    "name" : "private static boolean isCutOnSurrogate(CharSequence sourceText, int cutPosition, @TrimPolicy int policy)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isPasswordInputType(int inputType)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final void makeCompatible(int targetSdkVersion)",
    "returnType" : "void",
    "comment" : "\n     * Ensure that the data in this EditorInfo is compatible with an application\n     * that was developed against the given target API version.  This can\n     * impact the following input types:\n     * {@link InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS},\n     * {@link InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD},\n     * {@link InputType#TYPE_NUMBER_VARIATION_NORMAL},\n     * {@link InputType#TYPE_NUMBER_VARIATION_PASSWORD}.\n     *\n     * <p>This is called by the framework for input method implementations;\n     * you should not generally need to call it yourself.\n     *\n     * @param targetSdkVersion The API version number that the compatible\n     * application was developed against.\n     ",
    "links" : [ "android.text.InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD", "android.text.InputType#TYPE_NUMBER_VARIATION_NORMAL", "android.text.InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS", "android.text.InputType#TYPE_NUMBER_VARIATION_PASSWORD" ]
  }, {
    "name" : "public void dump(Printer pw, String prefix)",
    "returnType" : "void",
    "comment" : "\n     * Write debug output of this object.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "android.os.Parcel" ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "inputType", "IME_MASK_ACTION", "IME_ACTION_UNSPECIFIED", "IME_ACTION_NONE", "IME_ACTION_GO", "IME_ACTION_SEARCH", "IME_ACTION_SEND", "IME_ACTION_NEXT", "IME_ACTION_DONE", "IME_ACTION_PREVIOUS", "IME_FLAG_NO_PERSONALIZED_LEARNING", "IME_FLAG_NO_FULLSCREEN", "IME_FLAG_NAVIGATE_PREVIOUS", "IME_FLAG_NAVIGATE_NEXT", "IME_FLAG_NO_EXTRACT_UI", "IME_FLAG_NO_ACCESSORY_ACTION", "IME_FLAG_NO_ENTER_ACTION", "IME_FLAG_FORCE_ASCII", "IME_NULL", "imeOptions", "privateImeOptions", "actionLabel", "actionId", "initialSelStart", "initialSelEnd", "initialCapsMode", "hintText", "label", "packageName", "autofillId", "fieldId", "fieldName", "extras", "hintLocales", "contentMimeTypes", "targetInputMethodUser", "MEMORY_EFFICIENT_TEXT_LENGTH", "MAX_INITIAL_SELECTION_LENGTH", "mInitialSurroundingText", "CREATOR" ],
  "methodNames" : [ "public void setInitialSurroundingText(@NonNull CharSequence sourceText)", "public void setInitialSurroundingSubText(@NonNull CharSequence subText, int subTextStart)", "private void trimLongSurroundingText(CharSequence subText, int selStart, int selEnd)", "public CharSequence getInitialTextBeforeCursor(int length, int flags)", "public CharSequence getInitialSelectedText(int flags)", "public CharSequence getInitialTextAfterCursor(int length, int flags)", "private static boolean isCutOnSurrogate(CharSequence sourceText, int cutPosition, @TrimPolicy int policy)", "private static boolean isPasswordInputType(int inputType)", "public final void makeCompatible(int targetSdkVersion)", "public void dump(Printer pw, String prefix)", "public void writeToParcel(Parcel dest, int flags)", "public int describeContents()" ]
}