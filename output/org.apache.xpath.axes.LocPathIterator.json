{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xpath/axes/LocPathIterator.java",
  "packageName" : "org.apache.xpath.axes",
  "className" : "LocPathIterator",
  "comment" : "\n * This class extends NodeSetDTM, which implements NodeIterator,\n * and fetches nodes one at a time in document order based on a XPath\n * <a href=\"http://www.w3.org/TR/xpath#NT-LocationPath>LocationPath</a>.\n *\n * <p>If setShouldCacheNodes(true) is called,\n * as each node is iterated via nextNode(), the node is also stored\n * in the NodeVector, so that previousNode() can easily be done, except in\n * the case where the LocPathIterator is \"owned\" by a UnionPathIterator,\n * in which case the UnionPathIterator will cache the nodes.</p>\n * @xsl.usage advanced\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_allowDetach",
    "type" : "boolean",
    "comment" : " Control over whether it is OK for detach to reset the iterator. ",
    "links" : [ ]
  }, {
    "name" : "m_clones",
    "type" : "IteratorPool",
    "comment" : " \n   * The pool for cloned iterators.  Iterators need to be cloned\n   * because the hold running state, and thus the original iterator\n   * expression from the stylesheet pool can not be used.          \n   ",
    "links" : [ ]
  }, {
    "name" : "m_cdtm",
    "type" : "DTM",
    "comment" : " \n   * The dtm of the context node.  Careful about using this... it may not \n   * be the dtm of the current node.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_stackFrame",
    "type" : "int",
    "comment" : "\n   * The stack frame index for this iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_isTopLevel",
    "type" : "boolean",
    "comment" : "\n   * Value determined at compile time, indicates that this is an\n   * iterator at the top level of the expression, rather than inside\n   * a predicate.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_lastFetched",
    "type" : "int",
    "comment" : " The last node that was fetched, usually by nextNode. ",
    "links" : [ ]
  }, {
    "name" : "m_context",
    "type" : "int",
    "comment" : "\n   * The context node for this iterator, which doesn't change through\n   * the course of the iteration.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_currentContextNode",
    "type" : "int",
    "comment" : "\n   * The node context from where the expression is being\n   * executed from (i.e. for current() support).  Different\n   * from m_context in that this is the context for the entire\n   * expression, rather than the context for the subexpression.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_pos",
    "type" : "int",
    "comment" : "\n   * The current position of the context node.\n   ",
    "links" : [ ]
  }, {
    "name" : "m_length",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_prefixResolver",
    "type" : "PrefixResolver",
    "comment" : "\n   * Fast access to the current prefix resolver.  It isn't really\n   * clear that this is needed.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_execContext",
    "type" : "XPathContext",
    "comment" : "\n   * The XPathContext reference, needed for execution of many\n   * operations.\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getAnalysisBits()",
    "returnType" : "int",
    "comment" : " \n   * Get the analysis bits for this walker, as defined in the WalkerFactory.\n   * @return One of WalkerFactory#BIT_DESCENDANT, etc.\n   ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * Read the object from a serialization stream.\n   *\n   * @param stream Input stream to read from\n   *\n   * @throws java.io.IOException\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setEnvironment(Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Set the environment in which this iterator operates, which should provide:\n   * a node (the context node... same value as \"root\" defined below) \n   * a pair of non-zero positive integers (the context position and the context size) \n   * a set of variable bindings \n   * a function library \n   * the set of namespace declarations in scope for the expression.\n   * \n   * <p>At this time the exact implementation of this environment is application \n   * dependent.  Probably a proper interface will be created fairly soon.</p>\n   * \n   * @param environment The environment object.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTM getDTM(int nodeHandle)",
    "returnType" : "DTM",
    "comment" : "\n   * Get an instance of a DTM that \"owns\" a node handle.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTM using just the iterator.\n   *\n   * @param nodeHandle the nodeHandle.\n   *\n   * @return a non-null DTM reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMManager getDTMManager()",
    "returnType" : "DTMManager",
    "comment" : "\n   * Get an instance of the DTMManager.  Since a node \n   * iterator may be passed without a DTMManager, this allows the \n   * caller to easily get the DTMManager using just the iterator.\n   *\n   * @return a non-null DTMManager reference.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "XObject",
    "comment" : "\n   * Execute this iterator, meaning create a clone that can\n   * store state, and initialize it for fast execution from\n   * the current runtime state.  When this is called, no actual\n   * query from the current context node is performed.\n   *\n   * @param xctxt The XPath execution context.\n   *\n   * @return An XNodeSet reference that holds this iterator.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void executeCharsToContentHandler(XPathContext xctxt, org.xml.sax.ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException",
    "returnType" : "void",
    "comment" : "\n   * Execute an expression in the XPath runtime context, and return the\n   * result of the expression.\n   *\n   *\n   * @param xctxt The XPath runtime context.\n   * @param handler The target content handler.\n   *\n   * @return The result of the expression in the form of a <code>XObject</code>.\n   *\n   * @throws javax.xml.transform.TransformerException if a runtime exception\n   *         occurs.\n   * @throws org.xml.sax.SAXException\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator asIterator(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Given an select expression and a context, evaluate the XPath\n   * and return the resulting iterator.\n   * \n   * @param xctxt The execution context.\n   * @param contextNode The node that \".\" expresses.\n   * @throws TransformerException thrown if the active ProblemListener decides\n   * the error condition is severe enough to halt processing.\n   *\n   * @throws javax.xml.transform.TransformerException\n   * @xsl.usage experimental\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isNodesetExpr()",
    "returnType" : "boolean",
    "comment" : "\n   * Tell if the expression is a nodeset expression.\n   * \n   * @return true if the expression can be represented as a nodeset.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "int",
    "comment" : "\n   * Return the first node out of the nodeset, if this expression is \n   * a nodeset expression.  This is the default implementation for \n   * nodesets.  Derived classes should try and override this and return a \n   * value without having to do a clone operation.\n   * @param xctxt The XPath runtime context.\n   * @return the first node out of the nodeset, or DTM.NULL.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException",
    "returnType" : "boolean",
    "comment" : "\n   * Evaluate this operation directly to a boolean.\n   *\n   * @param xctxt The runtime execution context.\n   *\n   * @return The result of the operation as a boolean.\n   *\n   * @throws javax.xml.transform.TransformerException\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setIsTopLevel(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * Set if this is an iterator at the upper level of\n   * the XPath.\n   *\n   * @param b true if this location path is at the top level of the\n   *          expression.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getIsTopLevel()",
    "returnType" : "boolean",
    "comment" : "\n   * Get if this is an iterator at the upper level of\n   * the XPath.\n   *\n   * @return true if this location path is at the top level of the\n   *          expression.\n   * @xsl.usage advanced\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setRoot(int context, Object environment)",
    "returnType" : "void",
    "comment" : "\n   * Initialize the context values for this expression\n   * after it is cloned.\n   *\n   * @param context The XPath runtime context for this\n   * transformation.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected void setNextPosition(int next)",
    "returnType" : "void",
    "comment" : "\n   * Set the next position index of this iterator.\n   *\n   * @param next A value greater than or equal to zero that indicates the next\n   * node position to fetch.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentPos()",
    "returnType" : "int",
    "comment" : "\n   * Get the current position, which is one less than\n   * the next nextNode() call will retrieve.  i.e. if\n   * you call getCurrentPos() and the return is 0, the next\n   * fetch will take place at index 1.\n   *\n   * @return A value greater than or equal to zero that indicates the next\n   * node position to fetch.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setShouldCacheNodes(boolean b)",
    "returnType" : "void",
    "comment" : "\n   * If setShouldCacheNodes(true) is called, then nodes will\n   * be cached.  They are not cached by default.\n   *\n   * @param b True if this iterator should cache nodes.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isMutable()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this iterator can have nodes added to it or set via \n   * the <code>setItem(int node, int index)</code> method.\n   * \n   * @return True if the nodelist can be mutated.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setCurrentPos(int i)",
    "returnType" : "void",
    "comment" : "\n   * Set the current position in the node set.\n   *\n   * @param i Must be a valid index greater\n   * than or equal to zero and less than m_cachedNodes.size().\n   ",
    "links" : [ ]
  }, {
    "name" : "public void incrementCurrentPos()",
    "returnType" : "void",
    "comment" : "\n   * Increment the current position in the node set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n   * Get the length of the cached nodes.\n   *\n   * <p>Note: for the moment at least, this only returns\n   * the size of the nodes that have been fetched to date,\n   * it doesn't attempt to run to the end to make sure we\n   * have found everything.  This should be reviewed.</p>\n   *\n   * @return The size of the current cache list.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int item(int index)",
    "returnType" : "int",
    "comment" : "\n   *  Returns the <code>index</code> th item in the collection. If\n   * <code>index</code> is greater than or equal to the number of nodes in\n   * the list, this returns <code>null</code> .\n   * @param index  Index into the collection.\n   * @return  The node at the <code>index</code> th position in the\n   *   <code>NodeList</code> , or <code>null</code> if that is not a valid\n   *   index.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setItem(int node, int index)",
    "returnType" : "void",
    "comment" : "\n   * Sets the node at the specified index of this vector to be the\n   * specified node. The previous component at that position is discarded.\n   *\n   * <p>The index must be a value greater than or equal to 0 and less\n   * than the current size of the vector.  \n   * The iterator must be in cached mode.</p>\n   * \n   * <p>Meant to be used for sorted iterators.</p>\n   *\n   * @param node Node to set\n   * @param index Index of where to set the node\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLength()",
    "returnType" : "int",
    "comment" : "\n   *  The number of nodes in the list. The range of valid child node indices\n   * is 0 to <code>length-1</code> inclusive.\n   *\n   * @return The number of nodes in the list, always greater or equal to zero.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFresh()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if this NodeSetDTM is \"fresh\", in other words, if\n   * the first nextNode() that is called will return the\n   * first node in the set.\n   *\n   * @return true of nextNode has not been called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int previousNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the previous node in the set and moves the position of the\n   * iterator backwards in the set.\n   * @return  The previous <code>Node</code> in the set being iterated over,\n   *   or<code>null</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getWhatToShow()",
    "returnType" : "int",
    "comment" : "\n   * This attribute determines which node types are presented via the\n   * iterator. The available set of constants is defined in the\n   * <code>NodeFilter</code> interface.\n   *\n   * <p>This is somewhat useless at this time, since it doesn't\n   * really return information that tells what this iterator will\n   * show.  It is here only to fullfill the DOM NodeIterator\n   * interface.</p>\n   *\n   * @return For now, always NodeFilter.SHOW_ALL & ~NodeFilter.SHOW_ENTITY_REFERENCE.\n   * @see org.w3c.dom.traversal.NodeIterator\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMFilter getFilter()",
    "returnType" : "DTMFilter",
    "comment" : "\n   *  The filter used to screen nodes.  Not used at this time,\n   * this is here only to fullfill the DOM NodeIterator\n   * interface.\n   *\n   * @return Always null.\n   * @see org.w3c.dom.traversal.NodeIterator\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getRoot()",
    "returnType" : "int",
    "comment" : "\n   * The root node of the Iterator, as specified when it was created.\n   *\n   * @return The \"root\" of this iterator, which, in XPath terms,\n   * is the node context for this iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean getExpandEntityReferences()",
    "returnType" : "boolean",
    "comment" : "\n   *  The value of this flag determines whether the children of entity\n   * reference nodes are visible to the iterator. If false, they will be\n   * skipped over.\n   * <br> To produce a view of the document that has entity references\n   * expanded and does not expose the entity reference node itself, use the\n   * whatToShow flags to hide the entity reference node and set\n   * expandEntityReferences to true when creating the iterator. To produce\n   * a view of the document that has entity reference nodes but no entity\n   * expansion, use the whatToShow flags to show the entity reference node\n   * and set expandEntityReferences to false.\n   *\n   * @return Always true, since entity reference nodes are not\n   * visible in the XPath model.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void allowDetachToRelease(boolean allowRelease)",
    "returnType" : "void",
    "comment" : "\n   * Specify if it's OK for detach to release the iterator for reuse.\n   * \n   * @param allowRelease true if it is OK for detach to release this iterator \n   * for pooling.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void detach()",
    "returnType" : "void",
    "comment" : "\n   *  Detaches the iterator from the set which it iterated over, releasing\n   * any computational resources and placing the iterator in the INVALID\n   * state. After<code>detach</code> has been invoked, calls to\n   * <code>nextNode</code> or<code>previousNode</code> will raise the\n   * exception INVALID_STATE_ERR.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n   * Reset the iterator.\n   ",
    "links" : [ ]
  }, {
    "name" : "public DTMIterator cloneWithReset() throws CloneNotSupportedException",
    "returnType" : "DTMIterator",
    "comment" : "\n   * Get a cloned Iterator that is reset to the beginning\n   * of the query.\n   *\n   * @return A cloned NodeIterator set of the start of the query.\n   *\n   * @throws CloneNotSupportedException\n   ",
    "links" : [ ]
  }, {
    "name" : "public abstract int nextNode()",
    "returnType" : "int",
    "comment" : "\n   *  Returns the next node in the set and advances the position of the\n   * iterator in the set. After a NodeIterator is created, the first call\n   * to nextNode() returns the first node in the set.\n   * @return  The next <code>Node</code> in the set being iterated over, or\n   *   <code>null</code> if there are no more members in that set.\n   ",
    "links" : [ ]
  }, {
    "name" : "protected int returnNextNode(int nextNode)",
    "returnType" : "int",
    "comment" : "\n   * Bottleneck the return of a next node, to make returns\n   * easier from nextNode().\n   *\n   * @param nextNode The next node found, may be null.\n   *\n   * @return The same node that was passed as an argument.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getCurrentNode()",
    "returnType" : "int",
    "comment" : "\n   * Return the last fetched node.  Needed to support the UnionPathIterator.\n   *\n   * @return The last fetched node, or null if the last fetch was null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void runTo(int index)",
    "returnType" : "void",
    "comment" : "\n   * If an index is requested, NodeSetDTM will call this method\n   * to run the iterator to the index.  By default this sets\n   * m_next to the index.  If the index argument is -1, this\n   * signals that the iterator should be run to the end.\n   *\n   * @param index The index to run to, or -1 if the iterator\n   * should run to the end.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final boolean getFoundLast()",
    "returnType" : "boolean",
    "comment" : "\n   * Tells if we've found the last node yet.\n   *\n   * @return true if the last nextNode returned null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final XPathContext getXPathContext()",
    "returnType" : "XPathContext",
    "comment" : "\n   * The XPath execution context we are operating on.\n   *\n   * @return XPath execution context this iterator is operating on,\n   * or null if setRoot has not been called.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getContext()",
    "returnType" : "int",
    "comment" : "\n   * The node context for the iterator.\n   *\n   * @return The node context, same as getRoot().\n   ",
    "links" : [ ]
  }, {
    "name" : "public final int getCurrentContextNode()",
    "returnType" : "int",
    "comment" : "\n   * The node context from where the expression is being\n   * executed from (i.e. for current() support).\n   *\n   * @return The top-level node context of the entire expression.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final void setCurrentContextNode(int n)",
    "returnType" : "void",
    "comment" : "\n   * Set the current context node for this iterator.\n   *\n   * @param n Must be a non-null reference to the node context.\n   ",
    "links" : [ ]
  }, {
    "name" : "public final PrefixResolver getPrefixResolver()",
    "returnType" : "PrefixResolver",
    "comment" : "\n   * Return the saved reference to the prefix resolver that\n   * was in effect when this iterator was created.\n   *\n   * @return The prefix resolver or this iterator, which may be null.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)",
    "returnType" : "void",
    "comment" : "\n   * @see org.apache.xpath.XPathVisitable#callVisitors(ExpressionOwner, XPathVisitor)\n   ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDocOrdered()",
    "returnType" : "boolean",
    "comment" : "\n   * Returns true if all the nodes in the iteration well be returned in document \n   * order.\n   * \n   * @return true as a default.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getAxis()",
    "returnType" : "int",
    "comment" : "\n   * Returns the axis being iterated, if it is known.\n   * \n   * @return Axis.CHILD, etc., or -1 if the axis is not known or is of multiple \n   * types.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getLastPos(XPathContext xctxt)",
    "returnType" : "int",
    "comment" : "\n   * @see PredicatedNodeTest#getLastPos(XPathContext)\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int getAnalysisBits()", "private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, javax.xml.transform.TransformerException", "public void setEnvironment(Object environment)", "public DTM getDTM(int nodeHandle)", "public DTMManager getDTMManager()", "public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void executeCharsToContentHandler(XPathContext xctxt, org.xml.sax.ContentHandler handler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException", "public DTMIterator asIterator(XPathContext xctxt, int contextNode) throws javax.xml.transform.TransformerException", "public boolean isNodesetExpr()", "public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException", "public void setIsTopLevel(boolean b)", "public boolean getIsTopLevel()", "public void setRoot(int context, Object environment)", "protected void setNextPosition(int next)", "public final int getCurrentPos()", "public void setShouldCacheNodes(boolean b)", "public boolean isMutable()", "public void setCurrentPos(int i)", "public void incrementCurrentPos()", "public int size()", "public int item(int index)", "public void setItem(int node, int index)", "public int getLength()", "public boolean isFresh()", "public int previousNode()", "public int getWhatToShow()", "public DTMFilter getFilter()", "public int getRoot()", "public boolean getExpandEntityReferences()", "public void allowDetachToRelease(boolean allowRelease)", "public void detach()", "public void reset()", "public DTMIterator cloneWithReset() throws CloneNotSupportedException", "public abstract int nextNode()", "protected int returnNextNode(int nextNode)", "public int getCurrentNode()", "public void runTo(int index)", "public final boolean getFoundLast()", "public final XPathContext getXPathContext()", "public final int getContext()", "public final int getCurrentContextNode()", "public final void setCurrentContextNode(int n)", "public final PrefixResolver getPrefixResolver()", "public void callVisitors(ExpressionOwner owner, XPathVisitor visitor)", "public boolean isDocOrdered()", "public int getAxis()", "public int getLastPos(XPathContext xctxt)" ],
  "variableNames" : [ "serialVersionUID", "m_allowDetach", "m_clones", "m_cdtm", "m_stackFrame", "m_isTopLevel", "m_lastFetched", "m_context", "m_currentContextNode", "m_pos", "m_length", "m_prefixResolver", "m_execContext" ]
}