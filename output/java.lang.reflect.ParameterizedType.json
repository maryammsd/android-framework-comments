{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/ParameterizedType.java",
  "packageName" : "java.lang.reflect",
  "className" : "ParameterizedType",
  "comment" : "\n * ParameterizedType represents a parameterized type such as\n * Collection&lt;String&gt;.\n *\n * <p>A parameterized type is created the first time it is needed by a\n * reflective method, as specified in this package. When a\n * parameterized type p is created, the generic type declaration that\n * p instantiates is resolved, and all type arguments of p are created\n * recursively. See {@link java.lang.reflect.TypeVariable\n * TypeVariable} for details on the creation process for type\n * variables. Repeated creation of a parameterized type has no effect.\n *\n * <p>Instances of classes that implement this interface must implement\n * an equals() method that equates any two instances that share the\n * same generic type declaration and have equal type parameters.\n *\n * @since 1.5\n ",
  "links" : [ "java.lang.reflect.TypeVariableTypeVariable" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " Type[] getActualTypeArguments()",
    "returnType" : "Type[]",
    "comment" : "\n     * Returns an array of {@code Type} objects representing the actual type\n     * arguments to this type.\n     *\n     * <p>Note that in some cases, the returned array be empty. This can occur\n     * if this type represents a non-parameterized type nested within\n     * a parameterized type.\n     *\n     * @return an array of {@code Type} objects representing the actual type\n     *     arguments to this type\n     * @throws TypeNotPresentException if any of the\n     *     actual type arguments refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if any of the\n     *     actual type parameters refer to a parameterized type that cannot\n     *     be instantiated for any reason\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " Type getRawType()",
    "returnType" : "Type",
    "comment" : "\n     * Returns the {@code Type} object representing the class or interface\n     * that declared this type.\n     *\n     * @return the {@code Type} object representing the class or interface\n     *     that declared this type\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " Type getOwnerType()",
    "returnType" : "Type",
    "comment" : "\n     * Returns a {@code Type} object representing the type that this type\n     * is a member of.  For example, if this type is {@code O<T>.I<S>},\n     * return a representation of {@code O<T>}.\n     *\n     * <p>If this type is a top-level type, {@code null} is returned.\n     *\n     * @return a {@code Type} object representing the type that\n     *     this type is a member of. If this type is a top-level type,\n     *     {@code null} is returned\n     * @throws TypeNotPresentException if the owner type\n     *     refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if the owner type\n     *     refers to a parameterized type that cannot be instantiated\n     *     for any reason\n     * @since 1.5\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " Type[] getActualTypeArguments()", " Type getRawType()", " Type getOwnerType()" ],
  "variableNames" : [ ]
}