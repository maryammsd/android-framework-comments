{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inspector/IntFlagMapping.java",
  "packageName" : "android.view.inspector",
  "className" : "IntFlagMapping",
  "comment" : "\n * Maps the values of an {@code int} property to sets of string for properties that encode flags.\n *\n * An {@link InspectionCompanion} may provide an instance of this class to a {@link PropertyMapper}\n * for flag values packed into primitive {@code int} properties.\n *\n * Each flag has a mask and a target value, for non-exclusive flags, the target can also be used as\n * the mask. A given integer value is compared against each flag to find what flags are active for\n * it by bitwise anding it with the mask and comparing the result against the target, that is,\n * {@code (value & mask) == target}.\n *\n * @see PropertyMapper#mapIntFlag(String, int, java.util.function.IntFunction)\n ",
  "links" : [ "android.view.inspector.PropertyMapper", "android.view.inspector.InspectionCompanion" ],
  "variables" : [ {
    "name" : "mFlags",
    "type" : "List<Flag>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Set<String> get(int value)",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get a set of the names of enabled flags for a given property value.\n     *\n     * @param value The value of the property\n     * @return The names of the enabled flags, empty if no flags enabled\n     ",
    "links" : [ ]
  }, {
    "name" : "public void add(int mask, int target, @NonNull String name)",
    "returnType" : "void",
    "comment" : "\n     * Add a mutually exclusive flag to the map.\n     *\n     * @param mask The bit mask to compare to and with a value\n     * @param target The target value to compare the masked value with\n     * @param name The name of the flag to include if enabled\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public Set<String> get(int value)", "public void add(int mask, int target, @NonNull String name)" ],
  "variableNames" : [ "mFlags" ]
}