{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/content/ComponentName.java",
  "packageName" : "android.content",
  "className" : "ComponentName",
  "comment" : "\n * Identifier for a specific application component\n * ({@link android.app.Activity}, {@link android.app.Service},\n * {@link android.content.BroadcastReceiver}, or\n * {@link android.content.ContentProvider}) that is available.  Two\n * pieces of information, encapsulated here, are required to identify\n * a component: the package (a String) it exists in, and the class (a String)\n * name inside of that package.\n *\n ",
  "variables" : [ {
    "name" : "mPackage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClass",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<ComponentName>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ComponentName createRelative(@NonNull String pkg, @NonNull String cls)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Create a new component identifier where the class name may be specified\n     * as either absolute or relative to the containing package.\n     *\n     * <p>Relative package names begin with a <code>'.'</code> character. For a package\n     * <code>\"com.example\"</code> and class name <code>\".app.MyActivity\"</code> this method\n     * will return a ComponentName with the package <code>\"com.example\"</code>and class name\n     * <code>\"com.example.app.MyActivity\"</code>. Fully qualified class names are also\n     * permitted.</p>\n     *\n     * @param pkg the name of the package the component exists in\n     * @param cls the name of the class inside of <var>pkg</var> that implements\n     *            the component\n     * @return the new ComponentName\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName createRelative(@NonNull Context pkg, @NonNull String cls)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Create a new component identifier where the class name may be specified\n     * as either absolute or relative to the containing package.\n     *\n     * <p>Relative package names begin with a <code>'.'</code> character. For a package\n     * <code>\"com.example\"</code> and class name <code>\".app.MyActivity\"</code> this method\n     * will return a ComponentName with the package <code>\"com.example\"</code>and class name\n     * <code>\"com.example.app.MyActivity\"</code>. Fully qualified class names are also\n     * permitted.</p>\n     *\n     * @param pkg a Context for the package implementing the component\n     * @param cls the name of the class inside of <var>pkg</var> that implements\n     *            the component\n     * @return the new ComponentName\n     ",
    "links" : [ ]
  }, {
    "name" : "public ComponentName clone()",
    "returnType" : "ComponentName",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : "\n     * Return the package name of this component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getClassName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name of this component.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getShortClassName()",
    "returnType" : "String",
    "comment" : "\n     * Return the class name, either fully qualified or in a shortened form\n     * (with a leading '.') if it is a suffix of the package.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void appendShortClassName(StringBuilder sb, String packageName, String className)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void printShortClassName(PrintWriter pw, String packageName, String className)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String flattenToShortString(@Nullable ComponentName componentName)",
    "returnType" : "String",
    "comment" : "\n     * Helper to get {@link #flattenToShortString()} in a {@link ComponentName} reference that can\n     * be {@code null}.\n     *\n     * @hide\n     ",
    "links" : [ "#flattenToShortString", "ComponentName" ]
  }, {
    "name" : "public String flattenToString()",
    "returnType" : "String",
    "comment" : "\n     * Return a String that unambiguously describes both the package and\n     * class names contained in the ComponentName.  You can later recover\n     * the ComponentName from this string through\n     * {@link #unflattenFromString(String)}.\n     *\n     * @return Returns a new String holding the package and class names.  This\n     * is represented as the package name, concatenated with a '/' and then the\n     * class name.\n     *\n     * @see #unflattenFromString(String)\n     ",
    "links" : [ "#unflattenFromString" ]
  }, {
    "name" : "public String flattenToShortString()",
    "returnType" : "String",
    "comment" : "\n     * The same as {@link #flattenToString()}, but abbreviates the class\n     * name if it is a suffix of the package.  The result can still be used\n     * with {@link #unflattenFromString(String)}.\n     *\n     * @return Returns a new String holding the package and class names.  This\n     * is represented as the package name, concatenated with a '/' and then the\n     * class name.\n     *\n     * @see #unflattenFromString(String)\n     ",
    "links" : [ "#flattenToString", "#unflattenFromString" ]
  }, {
    "name" : "public void appendShortString(StringBuilder sb)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void appendShortString(StringBuilder sb, String packageName, String className)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void printShortString(PrintWriter pw, String packageName, String className)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ComponentName unflattenFromString(@NonNull String str)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Recover a ComponentName from a String that was previously created with\n     * {@link #flattenToString()}.  It splits the string at the first '/',\n     * taking the part before as the package name and the part after as the\n     * class name.  As a special convenience (to use, for example, when\n     * parsing component names on the command line), if the '/' is immediately\n     * followed by a '.' then the final class name will be the concatenation\n     * of the package name with the string following the '/'.  Thus\n     * \"com.foo/.Blah\" becomes package=\"com.foo\" class=\"com.foo.Blah\".\n     *\n     * @param str The String that was returned by flattenToString().\n     * @return Returns a new ComponentName containing the package and class\n     * names that were encoded in <var>str</var>\n     *\n     * @see #flattenToString()\n     ",
    "links" : [ "#flattenToString" ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return string representation of this class without the class's name\n     * as a prefix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(ProtoOutputStream proto, long fieldId)",
    "returnType" : "void",
    "comment" : " Put this here so that individual services don't have to reimplement this. @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * <p>Two components are considered to be equal if the packages in which they reside have the\n     * same name, and if the classes that implement each component also have the same name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int compareTo(ComponentName that)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void writeToParcel(ComponentName c, Parcel out)",
    "returnType" : "void",
    "comment" : "\n     * Write a ComponentName to a Parcel, handling null pointers.  Must be\n     * read with {@link #readFromParcel(Parcel)}.\n     *\n     * @param c The ComponentName to be written.\n     * @param out The Parcel in which the ComponentName will be placed.\n     *\n     * @see #readFromParcel(Parcel)\n     ",
    "links" : [ "#readFromParcel" ]
  }, {
    "name" : "public static ComponentName readFromParcel(Parcel in)",
    "returnType" : "ComponentName",
    "comment" : "\n     * Read a ComponentName from a Parcel that was previously written\n     * with {@link #writeToParcel(ComponentName, Parcel)}, returning either\n     * a null or new object as appropriate.\n     *\n     * @param in The Parcel from which to read the ComponentName\n     * @return Returns a new ComponentName matching the previously written\n     * object, or null if a null had been written.\n     *\n     * @see #writeToParcel(ComponentName, Parcel)\n     ",
    "links" : [ "#writeToParcel" ]
  } ],
  "variableNames" : [ "mPackage", "mClass", "CREATOR" ],
  "methodNames" : [ "public static ComponentName createRelative(@NonNull String pkg, @NonNull String cls)", "public static ComponentName createRelative(@NonNull Context pkg, @NonNull String cls)", "public ComponentName clone()", "public String getPackageName()", "public String getClassName()", "public String getShortClassName()", "private static void appendShortClassName(StringBuilder sb, String packageName, String className)", "private static void printShortClassName(PrintWriter pw, String packageName, String className)", "public static String flattenToShortString(@Nullable ComponentName componentName)", "public String flattenToString()", "public String flattenToShortString()", "public void appendShortString(StringBuilder sb)", "public static void appendShortString(StringBuilder sb, String packageName, String className)", "public static void printShortString(PrintWriter pw, String packageName, String className)", "public static ComponentName unflattenFromString(@NonNull String str)", "public String toShortString()", "public String toString()", "public void dumpDebug(ProtoOutputStream proto, long fieldId)", "public boolean equals(Object obj)", "public int hashCode()", "public int compareTo(ComponentName that)", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public static void writeToParcel(ComponentName c, Parcel out)", "public static ComponentName readFromParcel(Parcel in)" ]
}