{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/ExifInterface.java",
  "packageName" : "android.media",
  "className" : "ExifInterface",
  "comment" : "\n * This is a class for reading and writing Exif tags in a JPEG file or a RAW image file.\n * <p>\n * Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF, PEF, SRW, RAF and HEIF.\n * <p>\n * Attribute mutation is supported for JPEG image files.\n * <p>\n * Note: It is recommended to use the <a href=\"{@docRoot}jetpack/androidx.html\">AndroidX</a>\n * <a href=\"{@docRoot}reference/androidx/exifinterface/media/ExifInterface.html\">ExifInterface\n * Library</a> since it is a superset of this class. In addition to the functionalities of this\n * class, it supports parsing extra metadata such as exposure and data compression information\n * as well as setting extra metadata such as GPS and datetime information.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ARTIST",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_BITS_PER_SAMPLE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_COMPRESSION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_COPYRIGHT",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DATETIME",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_IMAGE_DESCRIPTION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_IMAGE_LENGTH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_IMAGE_WIDTH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_JPEG_INTERCHANGE_FORMAT",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_JPEG_INTERCHANGE_FORMAT_LENGTH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_MAKE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_MODEL",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ORIENTATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_PHOTOMETRIC_INTERPRETATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_PLANAR_CONFIGURATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_PRIMARY_CHROMATICITIES",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_REFERENCE_BLACK_WHITE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_RESOLUTION_UNIT",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ROWS_PER_STRIP",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SAMPLES_PER_PIXEL",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SOFTWARE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_STRIP_BYTE_COUNTS",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_STRIP_OFFSETS",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_TRANSFER_FUNCTION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_WHITE_POINT",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_X_RESOLUTION",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_Y_CB_CR_COEFFICIENTS",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_Y_CB_CR_POSITIONING",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_Y_CB_CR_SUB_SAMPLING",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_Y_RESOLUTION",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_APERTURE_VALUE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_BRIGHTNESS_VALUE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_CFA_PATTERN",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_COLOR_SPACE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_COMPONENTS_CONFIGURATION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_COMPRESSED_BITS_PER_PIXEL",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_CONTRAST",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_CUSTOM_RENDERED",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DATETIME_DIGITIZED",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DATETIME_ORIGINAL",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DEVICE_SETTING_DESCRIPTION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DIGITAL_ZOOM_RATIO",
    "type" : "String",
    "comment" : " Type is double. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXIF_VERSION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXPOSURE_BIAS_VALUE",
    "type" : "String",
    "comment" : " Type is double. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXPOSURE_INDEX",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXPOSURE_MODE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXPOSURE_PROGRAM",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXPOSURE_TIME",
    "type" : "String",
    "comment" : " Type is double. ",
    "links" : [ ]
  }, {
    "name" : "TAG_F_NUMBER",
    "type" : "String",
    "comment" : " Type is double. ",
    "links" : [ ]
  }, {
    "name" : "TAG_APERTURE",
    "type" : "String",
    "comment" : "\n     * Type is double.\n     *\n     * @deprecated use {@link #TAG_F_NUMBER} instead\n     ",
    "links" : [ "#TAG_F_NUMBER" ]
  }, {
    "name" : "TAG_FILE_SOURCE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FLASH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FLASH_ENERGY",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FLASHPIX_VERSION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FOCAL_LENGTH",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FOCAL_LENGTH_IN_35MM_FILM",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FOCAL_PLANE_RESOLUTION_UNIT",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FOCAL_PLANE_X_RESOLUTION",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_FOCAL_PLANE_Y_RESOLUTION",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GAIN_CONTROL",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ISO_SPEED_RATINGS",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ISO",
    "type" : "String",
    "comment" : "\n     * Type is int.\n     *\n     * @deprecated use {@link #TAG_ISO_SPEED_RATINGS} instead\n     ",
    "links" : [ "#TAG_ISO_SPEED_RATINGS" ]
  }, {
    "name" : "TAG_IMAGE_UNIQUE_ID",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_LIGHT_SOURCE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_MAKER_NOTE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_MAX_APERTURE_VALUE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_METERING_MODE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_NEW_SUBFILE_TYPE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_OECF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_OFFSET_TIME",
    "type" : "String",
    "comment" : "\n     *  <p>A tag used to record the offset from UTC (the time difference from Universal Time\n     *  Coordinated including daylight saving time) of the time of DateTime tag. The format when\n     *  recording the offset is \"±HH:MM\". The part of \"±\" shall be recorded as \"+\" or \"-\". When\n     *  the offsets are unknown, all the character spaces except colons (\":\") should be filled\n     *  with blank characters, or else the Interoperability field should be filled with blank\n     *  characters. The character string length is 7 Bytes including NULL for termination. When\n     *  the field is left blank, it is treated as unknown.</p>\n     *\n     *  <ul>\n     *      <li>Tag = 36880</li>\n     *      <li>Type = String</li>\n     *      <li>Length = 7</li>\n     *      <li>Default = None</li>\n     *  </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_OFFSET_TIME_ORIGINAL",
    "type" : "String",
    "comment" : "\n     *  <p>A tag used to record the offset from UTC (the time difference from Universal Time\n     *  Coordinated including daylight saving time) of the time of DateTimeOriginal tag. The format\n     *  when recording the offset is \"±HH:MM\". The part of \"±\" shall be recorded as \"+\" or \"-\". When\n     *  the offsets are unknown, all the character spaces except colons (\":\") should be filled\n     *  with blank characters, or else the Interoperability field should be filled with blank\n     *  characters. The character string length is 7 Bytes including NULL for termination. When\n     *  the field is left blank, it is treated as unknown.</p>\n     *\n     *  <ul>\n     *      <li>Tag = 36881</li>\n     *      <li>Type = String</li>\n     *      <li>Length = 7</li>\n     *      <li>Default = None</li>\n     *  </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_OFFSET_TIME_DIGITIZED",
    "type" : "String",
    "comment" : "\n     *  <p>A tag used to record the offset from UTC (the time difference from Universal Time\n     *  Coordinated including daylight saving time) of the time of DateTimeDigitized tag. The format\n     *  when recording the offset is \"±HH:MM\". The part of \"±\" shall be recorded as \"+\" or \"-\". When\n     *  the offsets are unknown, all the character spaces except colons (\":\") should be filled\n     *  with blank characters, or else the Interoperability field should be filled with blank\n     *  characters. The character string length is 7 Bytes including NULL for termination. When\n     *  the field is left blank, it is treated as unknown.</p>\n     *\n     *  <ul>\n     *      <li>Tag = 36882</li>\n     *      <li>Type = String</li>\n     *      <li>Length = 7</li>\n     *      <li>Default = None</li>\n     *  </ul>\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_PIXEL_X_DIMENSION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_PIXEL_Y_DIMENSION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_RELATED_SOUND_FILE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SATURATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SCENE_CAPTURE_TYPE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SCENE_TYPE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SENSING_METHOD",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SHARPNESS",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SHUTTER_SPEED_VALUE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SPATIAL_FREQUENCY_RESPONSE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SPECTRAL_SENSITIVITY",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBFILE_TYPE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBSEC_TIME",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBSEC_TIME_DIG",
    "type" : "String",
    "comment" : "\n     * Type is String.\n     *\n     * @deprecated use {@link #TAG_SUBSEC_TIME_DIGITIZED} instead\n     ",
    "links" : [ "#TAG_SUBSEC_TIME_DIGITIZED" ]
  }, {
    "name" : "TAG_SUBSEC_TIME_DIGITIZED",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBSEC_TIME_ORIG",
    "type" : "String",
    "comment" : "\n     * Type is String.\n     *\n     * @deprecated use {@link #TAG_SUBSEC_TIME_ORIGINAL} instead\n     ",
    "links" : [ "#TAG_SUBSEC_TIME_ORIGINAL" ]
  }, {
    "name" : "TAG_SUBSEC_TIME_ORIGINAL",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBJECT_AREA",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBJECT_DISTANCE",
    "type" : "String",
    "comment" : " Type is double. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBJECT_DISTANCE_RANGE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_SUBJECT_LOCATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_USER_COMMENT",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_WHITE_BALANCE",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_ALTITUDE",
    "type" : "String",
    "comment" : "\n     * The altitude (in meters) based on the reference in TAG_GPS_ALTITUDE_REF.\n     * Type is rational.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_ALTITUDE_REF",
    "type" : "String",
    "comment" : "\n     * 0 if the altitude is above sea level. 1 if the altitude is below sea\n     * level. Type is int.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_AREA_INFORMATION",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DOP",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DATESTAMP",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_BEARING",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_BEARING_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_DISTANCE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_DISTANCE_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_LATITUDE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_LATITUDE_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_LONGITUDE",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DEST_LONGITUDE_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_DIFFERENTIAL",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_IMG_DIRECTION",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_IMG_DIRECTION_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_LATITUDE",
    "type" : "String",
    "comment" : " Type is rational. Format is \"num1/denom1,num2/denom2,num3/denom3\". ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_LATITUDE_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_LONGITUDE",
    "type" : "String",
    "comment" : " Type is rational. Format is \"num1/denom1,num2/denom2,num3/denom3\". ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_LONGITUDE_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_MAP_DATUM",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_MEASURE_MODE",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_PROCESSING_METHOD",
    "type" : "String",
    "comment" : " Type is String. Name of GPS processing method used for location finding. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_SATELLITES",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_SPEED",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_SPEED_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_STATUS",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_TIMESTAMP",
    "type" : "String",
    "comment" : " Type is String. Format is \"hh:mm:ss\". ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_TRACK",
    "type" : "String",
    "comment" : " Type is rational. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_TRACK_REF",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_VERSION_ID",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_INTEROPERABILITY_INDEX",
    "type" : "String",
    "comment" : " Type is String. ",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_IMAGE_LENGTH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_IMAGE_WIDTH",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_ORIENTATION",
    "type" : "String",
    "comment" : " Type is int. ",
    "links" : [ ]
  }, {
    "name" : "TAG_DNG_VERSION",
    "type" : "String",
    "comment" : " Type is int. DNG Specification 1.4.0.0. Section 4 ",
    "links" : [ ]
  }, {
    "name" : "TAG_DEFAULT_CROP_SIZE",
    "type" : "String",
    "comment" : " Type is int. DNG Specification 1.4.0.0. Section 4 ",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_THUMBNAIL_IMAGE",
    "type" : "String",
    "comment" : " Type is undefined. See Olympus MakerNote tags in http://www.exiv2.org/tags-olympus.html. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_PREVIEW_IMAGE_START",
    "type" : "String",
    "comment" : " Type is int. See Olympus Camera Settings tags in http://www.exiv2.org/tags-olympus.html. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_PREVIEW_IMAGE_LENGTH",
    "type" : "String",
    "comment" : " Type is int. See Olympus Camera Settings tags in http://www.exiv2.org/tags-olympus.html. ",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_ASPECT_FRAME",
    "type" : "String",
    "comment" : " Type is int. See Olympus Image Processing tags in http://www.exiv2.org/tags-olympus.html. ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_SENSOR_BOTTOM_BORDER",
    "type" : "String",
    "comment" : "\n     * Type is int. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_SENSOR_LEFT_BORDER",
    "type" : "String",
    "comment" : "\n     * Type is int. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_SENSOR_RIGHT_BORDER",
    "type" : "String",
    "comment" : "\n     * Type is int. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_SENSOR_TOP_BORDER",
    "type" : "String",
    "comment" : "\n     * Type is int. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_ISO",
    "type" : "String",
    "comment" : "\n     * Type is int. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_RW2_JPG_FROM_RAW",
    "type" : "String",
    "comment" : "\n     * Type is undefined. See PanasonicRaw tags in\n     * http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/PanasonicRaw.html\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_XMP",
    "type" : "String",
    "comment" : "\n     * Type is byte[]. See <a href=\n     * \"https://en.wikipedia.org/wiki/Extensible_Metadata_Platform\">Extensible\n     * Metadata Platform (XMP)</a> for details on contents.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_EXIF_IFD_POINTER",
    "type" : "String",
    "comment" : "\n     * Private tags used for pointing the other IFD offsets.\n     * The types of the following tags are int.\n     * See JEITA CP-3451C Section 4.6.3: Exif-specific IFD.\n     * For SubIFD, see Note 1 of Adobe PageMaker® 6.0 TIFF Technical Notes.\n     ",
    "links" : [ ]
  }, {
    "name" : "TAG_GPS_INFO_IFD_POINTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_INTEROPERABILITY_IFD_POINTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_SUB_IFD_POINTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_CAMERA_SETTINGS_IFD_POINTER",
    "type" : "String",
    "comment" : " See http://www.exiv2.org/tags-olympus.html",
    "links" : [ ]
  }, {
    "name" : "TAG_ORF_IMAGE_PROCESSING_IFD_POINTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_HAS_THUMBNAIL",
    "type" : "String",
    "comment" : " Private tags used for thumbnail information.",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_OFFSET",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_LENGTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TAG_THUMBNAIL_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_THUMBNAIL_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_UNDEFINED",
    "type" : "int",
    "comment" : " Constants used for the Orientation Exif tag.",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_NORMAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_FLIP_HORIZONTAL",
    "type" : "int",
    "comment" : " left right reversed mirror",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_ROTATE_180",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_FLIP_VERTICAL",
    "type" : "int",
    "comment" : " upside down mirror",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_TRANSPOSE",
    "type" : "int",
    "comment" : " flipped about top-left <--> bottom-right axis",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_ROTATE_90",
    "type" : "int",
    "comment" : " rotate 90 cw to right it",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_TRANSVERSE",
    "type" : "int",
    "comment" : " flipped about top-right <--> bottom-left axis",
    "links" : [ ]
  }, {
    "name" : "ORIENTATION_ROTATE_270",
    "type" : "int",
    "comment" : " rotate 270 to right it",
    "links" : [ ]
  }, {
    "name" : "WHITEBALANCE_AUTO",
    "type" : "int",
    "comment" : " Constants used for white balance",
    "links" : [ ]
  }, {
    "name" : "WHITEBALANCE_MANUAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_FULL_IMAGE_DATA",
    "type" : "int",
    "comment" : "\n     * Constant used to indicate that the input stream contains the full image data.\n     * <p>\n     * The format of the image data should follow one of the image formats supported by this class.\n     ",
    "links" : [ ]
  }, {
    "name" : "STREAM_TYPE_EXIF_DATA_ONLY",
    "type" : "int",
    "comment" : "\n     * Constant used to indicate that the input stream contains only Exif data.\n     * <p>\n     * The format of the Exif-only data must follow the below structure:\n     *     Exif Identifier Code (\"Exif\\0\\0\") + TIFF header + IFD data\n     * See JEITA CP-3451C Section 4.5.2 and 4.5.4 specifications for more details.\n     ",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_CHECK_SIZE",
    "type" : "int",
    "comment" : " Maximum size for checking file type signature (see image_type_recognition_lite.cc)",
    "links" : [ ]
  }, {
    "name" : "JPEG_SIGNATURE",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_SIGNATURE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_OFFSET_TO_JPEG_IMAGE_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_INFO_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RAF_JPEG_LENGTH_VALUE_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEIF_TYPE_FTYP",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEIF_BRAND_MIF1",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HEIF_BRAND_HEIC",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORF_SIGNATURE_1",
    "type" : "short",
    "comment" : " See http://fileformats.archiveteam.org/wiki/Olympus_ORF",
    "links" : [ ]
  }, {
    "name" : "ORF_SIGNATURE_2",
    "type" : "short",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORF_MAKER_NOTE_HEADER_1",
    "type" : "byte[]",
    "comment" : " See http://www.exiv2.org/makernote.html#R1",
    "links" : [ ]
  }, {
    "name" : "ORF_MAKER_NOTE_HEADER_2",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORF_MAKER_NOTE_HEADER_1_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORF_MAKER_NOTE_HEADER_2_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "RW2_SIGNATURE",
    "type" : "short",
    "comment" : " See http://fileformats.archiveteam.org/wiki/RW2",
    "links" : [ ]
  }, {
    "name" : "PEF_SIGNATURE",
    "type" : "String",
    "comment" : " See http://fileformats.archiveteam.org/wiki/Pentax_PEF",
    "links" : [ ]
  }, {
    "name" : "PEF_MAKER_NOTE_SKIP_SIZE",
    "type" : "int",
    "comment" : " See http://www.exiv2.org/makernote.html#R11",
    "links" : [ ]
  }, {
    "name" : "PNG_SIGNATURE",
    "type" : "byte[]",
    "comment" : " 3.1. PNG file signature",
    "links" : [ ]
  }, {
    "name" : "PNG_CHUNK_TYPE_EXIF",
    "type" : "byte[]",
    "comment" : " 3.7. eXIf Exchangeable Image File (Exif) Profile",
    "links" : [ ]
  }, {
    "name" : "PNG_CHUNK_TYPE_IHDR",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PNG_CHUNK_TYPE_IEND",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PNG_CHUNK_TYPE_BYTE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PNG_CHUNK_CRC_BYTE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEBP_SIGNATURE_1",
    "type" : "byte[]",
    "comment" : " See https://developers.google.com/speed/webp/docs/riff_container, Section \"WebP File Header\"",
    "links" : [ ]
  }, {
    "name" : "WEBP_SIGNATURE_2",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEBP_FILE_SIZE_BYTE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEBP_CHUNK_TYPE_EXIF",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEBP_CHUNK_TYPE_BYTE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "WEBP_CHUNK_SIZE_BYTE_LENGTH",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFormatter",
    "type" : "SimpleDateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sFormatterTz",
    "type" : "SimpleDateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BYTE_ALIGN_II",
    "type" : "short",
    "comment" : " II: Intel order",
    "links" : [ ]
  }, {
    "name" : "BYTE_ALIGN_MM",
    "type" : "short",
    "comment" : " MM: Motorola order",
    "links" : [ ]
  }, {
    "name" : "START_CODE",
    "type" : "byte",
    "comment" : " 42",
    "links" : [ ]
  }, {
    "name" : "IFD_OFFSET",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_BYTE",
    "type" : "int",
    "comment" : " Formats for the value in IFD entry (See TIFF 6.0 Section 2, \"Image File Directory\".)",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_STRING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_USHORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_ULONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_URATIONAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_SBYTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_UNDEFINED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_SSHORT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_SLONG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_SRATIONAL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_SINGLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_DOUBLE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_IFD",
    "type" : "int",
    "comment" : " Format indicating a new IFD entry (See Adobe PageMaker® 6.0 TIFF Technical Notes, \"New Tag\")",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_NAMES",
    "type" : "String[]",
    "comment" : " Names for the data formats for debugging purpose.",
    "links" : [ ]
  }, {
    "name" : "IFD_FORMAT_BYTES_PER_FORMAT",
    "type" : "int[]",
    "comment" : " Sizes of the components of each IFD value format",
    "links" : [ ]
  }, {
    "name" : "EXIF_ASCII_PREFIX",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_UNCOMPRESSED",
    "type" : "int",
    "comment" : "\n     * Constants used for Compression tag.\n     * For Value 1, 2, 32773, see TIFF 6.0 Spec Section 3: Bilevel Images, Compression\n     * For Value 6, see TIFF 6.0 Spec Section 22: JPEG Compression, Extensions to Existing Fields\n     * For Value 7, 8, 34892, see DNG Specification 1.4.0.0. Section 3, Compression\n     ",
    "links" : [ ]
  }, {
    "name" : "DATA_HUFFMAN_COMPRESSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_JPEG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_JPEG_COMPRESSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_DEFLATE_ZIP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_PACK_BITS_COMPRESSED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DATA_LOSSY_JPEG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_RGB",
    "type" : "int[]",
    "comment" : "\n     * Constants used for BitsPerSample tag.\n     * For RGB, see TIFF 6.0 Spec Section 6, Differences from Palette Color Images\n     * For Greyscale, see TIFF 6.0 Spec Section 4, Differences from Bilevel Images\n     ",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_GREYSCALE_1",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BITS_PER_SAMPLE_GREYSCALE_2",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO",
    "type" : "int",
    "comment" : "\n     * Constants used for PhotometricInterpretation tag.\n     * For White/Black, see Section 3, Color.\n     * See TIFF 6.0 Spec Section 22, Minimum Requirements for TIFF with JPEG Compression.\n     ",
    "links" : [ ]
  }, {
    "name" : "PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHOTOMETRIC_INTERPRETATION_RGB",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PHOTOMETRIC_INTERPRETATION_YCBCR",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORIGINAL_RESOLUTION_IMAGE",
    "type" : "int",
    "comment" : "\n     * Constants used for NewSubfileType tag.\n     * See TIFF 6.0 Spec Section 8\n     * ",
    "links" : [ ]
  }, {
    "name" : "REDUCED_RESOLUTION_IMAGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TIFF_TAGS",
    "type" : "ExifTag[]",
    "comment" : " Primary image IFD TIFF tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)",
    "links" : [ ]
  }, {
    "name" : "IFD_EXIF_TAGS",
    "type" : "ExifTag[]",
    "comment" : " Primary image IFD Exif Private tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)",
    "links" : [ ]
  }, {
    "name" : "IFD_GPS_TAGS",
    "type" : "ExifTag[]",
    "comment" : " Primary image IFD GPS Info tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)",
    "links" : [ ]
  }, {
    "name" : "IFD_INTEROPERABILITY_TAGS",
    "type" : "ExifTag[]",
    "comment" : " Primary image IFD Interoperability tag (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)",
    "links" : [ ]
  }, {
    "name" : "IFD_THUMBNAIL_TAGS",
    "type" : "ExifTag[]",
    "comment" : " IFD Thumbnail tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)",
    "links" : [ ]
  }, {
    "name" : "TAG_RAF_IMAGE_SIZE",
    "type" : "ExifTag",
    "comment" : " RAF file tag (See piex.cc line 372)",
    "links" : [ ]
  }, {
    "name" : "ORF_MAKER_NOTE_TAGS",
    "type" : "ExifTag[]",
    "comment" : " ORF file tags (See http://www.exiv2.org/tags-olympus.html)",
    "links" : [ ]
  }, {
    "name" : "ORF_CAMERA_SETTINGS_TAGS",
    "type" : "ExifTag[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ORF_IMAGE_PROCESSING_TAGS",
    "type" : "ExifTag[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PEF_TAGS",
    "type" : "ExifTag[]",
    "comment" : " PEF file tag (See http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Pentax.html)",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_PRIMARY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_EXIF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_GPS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_INTEROPERABILITY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_THUMBNAIL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_PREVIEW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_ORF_MAKER_NOTE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_ORF_CAMERA_SETTINGS",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_ORF_IMAGE_PROCESSING",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IFD_TYPE_PEF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXIF_TAGS",
    "type" : "ExifTag[][]",
    "comment" : " List of Exif tag groups",
    "links" : [ ]
  }, {
    "name" : "EXIF_POINTER_TAGS",
    "type" : "ExifTag[]",
    "comment" : " List of tags for pointing to the other image file directory offset.",
    "links" : [ ]
  }, {
    "name" : "JPEG_INTERCHANGE_FORMAT_TAG",
    "type" : "ExifTag",
    "comment" : " Tags for indicating the thumbnail offset and length",
    "links" : [ ]
  }, {
    "name" : "JPEG_INTERCHANGE_FORMAT_LENGTH_TAG",
    "type" : "ExifTag",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sExifTagMapsForReading",
    "type" : "HashMap[]",
    "comment" : " Mappings from tag number to tag name and each item represents one IFD tag group.",
    "links" : [ ]
  }, {
    "name" : "sExifTagMapsForWriting",
    "type" : "HashMap[]",
    "comment" : " Mappings from tag name to tag number and each item represents one IFD tag group.",
    "links" : [ ]
  }, {
    "name" : "sTagSetForCompatibility",
    "type" : "HashSet<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sExifPointerTagMap",
    "type" : "HashMap<Integer, Integer>",
    "comment" : " Mappings from tag number to IFD type for pointer tags.",
    "links" : [ ]
  }, {
    "name" : "ASCII",
    "type" : "Charset",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_EXIF_APP1",
    "type" : "byte[]",
    "comment" : " Identifier for EXIF APP1 segment in JPEG",
    "links" : [ ]
  }, {
    "name" : "IDENTIFIER_XMP_APP1",
    "type" : "byte[]",
    "comment" : " Identifier for XMP APP1 segment in JPEG",
    "links" : [ ]
  }, {
    "name" : "MARKER",
    "type" : "byte",
    "comment" : " of frame(baseline DCT) and the image size info exists in its beginning part.",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOI",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF0",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF1",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF2",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF3",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF5",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF6",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF7",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF9",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF10",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF11",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF13",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF14",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOF15",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_SOS",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_APP1",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_COM",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MARKER_EOI",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_UNKNOWN",
    "type" : "int",
    "comment" : " Supported Image File Types",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_ARW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_CR2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_DNG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_JPEG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_NEF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_NRW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_ORF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_PEF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_RAF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_RW2",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_SRW",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_HEIF",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_PNG",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "IMAGE_TYPE_WEBP",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFilename",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSeekableFileDescriptor",
    "type" : "FileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAssetInputStream",
    "type" : "AssetManager.AssetInputStream",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsInputStream",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMimeType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsExifDataOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributes",
    "type" : "HashMap[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandledIfdOffsets",
    "type" : "Set<Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExifByteOrder",
    "type" : "ByteOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbnail",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasThumbnailStrips",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAreThumbnailStripsConsecutive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbnailOffset",
    "type" : "int",
    "comment" : " Used to indicate the position of the thumbnail (includes offset to EXIF data segment).",
    "links" : [ ]
  }, {
    "name" : "mThumbnailLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbnailBytes",
    "type" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbnailCompression",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExifOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrfMakerNoteOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrfThumbnailOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mOrfThumbnailLength",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRw2JpgFromRawOffset",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsSupportedFile",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mModified",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mXmpIsFromSeparateMarker",
    "type" : "boolean",
    "comment" : " separate data marker (a separate MARKER_APP1).",
    "links" : [ ]
  }, {
    "name" : "sNonZeroTimePattern",
    "type" : "Pattern",
    "comment" : " Pattern to check non zero timestamp",
    "links" : [ ]
  }, {
    "name" : "sGpsTimestampPattern",
    "type" : "Pattern",
    "comment" : " Pattern to check gps timestamp",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static boolean isSupportedMimeType(@NonNull String mimeType)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether ExifInterface currently supports parsing data from the specified mime type\n     * or not.\n     *\n     * @param mimeType the string value of mime type\n     ",
    "links" : [ ]
  }, {
    "name" : "private ExifAttribute getExifAttribute(@NonNull String tag)",
    "returnType" : "ExifAttribute",
    "comment" : "\n     * Returns the EXIF attribute of the specified tag or {@code null} if there is no such tag in\n     * the image file.\n     *\n     * @param tag the name of the tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getAttribute(@NonNull String tag)",
    "returnType" : "String",
    "comment" : "\n     * Returns the value of the specified tag or {@code null} if there\n     * is no such tag in the image file.\n     *\n     * @param tag the name of the tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAttributeInt(@NonNull String tag, int defaultValue)",
    "returnType" : "int",
    "comment" : "\n     * Returns the integer value of the specified tag. If there is no such tag\n     * in the image file or the value cannot be parsed as integer, return\n     * <var>defaultValue</var>.\n     *\n     * @param tag the name of the tag.\n     * @param defaultValue the value to return if the tag is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAttributeDouble(@NonNull String tag, double defaultValue)",
    "returnType" : "double",
    "comment" : "\n     * Returns the double value of the tag that is specified as rational or contains a\n     * double-formatted value. If there is no such tag in the image file or the value cannot be\n     * parsed as double, return <var>defaultValue</var>.\n     *\n     * @param tag the name of the tag.\n     * @param defaultValue the value to return if the tag is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAttribute(@NonNull String tag, @Nullable String value)",
    "returnType" : "void",
    "comment" : "\n     * Set the value of the specified tag.\n     *\n     * @param tag the name of the tag.\n     * @param value the value of the tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean updateAttribute(String tag, ExifAttribute value)",
    "returnType" : "boolean",
    "comment" : "\n     * Update the values of the tags in the tag groups if any value for the tag already was stored.\n     *\n     * @param tag the name of the tag.\n     * @param value the value of the tag in a form of {@link ExifAttribute}.\n     * @return Returns {@code true} if updating is placed.\n     ",
    "links" : [ "ExifAttribute" ]
  }, {
    "name" : "private void removeAttribute(String tag)",
    "returnType" : "void",
    "comment" : "\n     * Remove any values of the specified tag.\n     *\n     * @param tag the name of the tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void loadAttributes(@NonNull InputStream in)",
    "returnType" : "void",
    "comment" : "\n     * This function decides which parser to read the image data according to the given input stream\n     * type and the content of the input stream.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isSeekableFD(FileDescriptor fd)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void printAttributes()",
    "returnType" : "void",
    "comment" : " Prints out attributes for debugging.",
    "links" : [ ]
  }, {
    "name" : "public void saveAttributes() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Save the tag data into the original image file. This is expensive because\n     * it involves copying all the data from one file to another and deleting\n     * the old file and renaming the other. It's best to use\n     * {@link #setAttribute(String,String)} to set all attributes to write and\n     * make a single call rather than multiple calls for each attribute.\n     * <p>\n     * This method is only supported for JPEG and PNG files.\n     * <p class=\"note\">\n     * Note: after calling this method, any attempts to obtain range information\n     * from {@link #getAttributeRange(String)} or {@link #getThumbnailRange()}\n     * will throw {@link IllegalStateException}, since the offsets may have\n     * changed in the newly written file.\n     * </p>\n     ",
    "links" : [ "#setAttribute", "#getAttributeRange", "#getThumbnailRange", "IllegalStateException" ]
  }, {
    "name" : "public boolean hasThumbnail()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the image file has a thumbnail.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasAttribute(@NonNull String tag)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the image file has the given attribute defined.\n     *\n     * @param tag the name of the tag.\n     ",
    "links" : [ ]
  }, {
    "name" : "public byte[] getThumbnail()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the JPEG compressed thumbnail inside the image file, or {@code null} if there is no\n     * JPEG compressed thumbnail.\n     * The returned data can be decoded using\n     * {@link android.graphics.BitmapFactory#decodeByteArray(byte[],int,int)}\n     ",
    "links" : [ "android.graphics.BitmapFactory#decodeByteArray" ]
  }, {
    "name" : "public byte[] getThumbnailBytes()",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the thumbnail bytes inside the image file, regardless of the compression type of the\n     * thumbnail image.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bitmap getThumbnailBitmap()",
    "returnType" : "Bitmap",
    "comment" : "\n     * Creates and returns a Bitmap object of the thumbnail image based on the byte array and the\n     * thumbnail compression value, or {@code null} if the compression type is unsupported.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isThumbnailCompressed()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if thumbnail image is JPEG Compressed, or false if either thumbnail image does\n     * not exist or thumbnail image is uncompressed.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long[] getThumbnailRange()",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the offset and length of thumbnail inside the image file, or\n     * {@code null} if either there is no thumbnail or the thumbnail bytes are stored\n     * non-consecutively.\n     *\n     * @return two-element array, the offset in the first value, and length in\n     *         the second, or {@code null} if no thumbnail was found or the thumbnail strips are\n     *         not placed consecutively.\n     * @throws IllegalStateException if {@link #saveAttributes()} has been\n     *             called since the underlying file was initially parsed, since\n     *             that means offsets may have changed.\n     ",
    "links" : [ "#saveAttributes" ]
  }, {
    "name" : "public long[] getAttributeRange(@NonNull String tag)",
    "returnType" : "long[]",
    "comment" : "\n     * Returns the offset and length of the requested tag inside the image file,\n     * or {@code null} if the tag is not contained.\n     *\n     * @return two-element array, the offset in the first value, and length in\n     *         the second, or {@code null} if no tag was found.\n     * @throws IllegalStateException if {@link #saveAttributes()} has been\n     *             called since the underlying file was initially parsed, since\n     *             that means offsets may have changed.\n     ",
    "links" : [ "#saveAttributes" ]
  }, {
    "name" : "public byte[] getAttributeBytes(@NonNull String tag)",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the raw bytes for the value of the requested tag inside the image\n     * file, or {@code null} if the tag is not contained.\n     *\n     * @return raw bytes for the value of the requested tag, or {@code null} if\n     *         no tag was found.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getLatLong(float[] output)",
    "returnType" : "boolean",
    "comment" : "\n     * Stores the latitude and longitude value in a float array. The first element is\n     * the latitude, and the second element is the longitude. Returns false if the\n     * Exif tags are not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double getAltitude(double defaultValue)",
    "returnType" : "double",
    "comment" : "\n     * Return the altitude in meters. If the exif tag does not exist, return\n     * <var>defaultValue</var>.\n     *\n     * @param defaultValue the value to return if the tag is not available.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDateTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns parsed {@code DateTime} value, or -1 if unavailable or invalid.\n     * \n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDateTimeDigitized()",
    "returnType" : "long",
    "comment" : "\n     * Returns parsed {@code DateTimeDigitized} value, or -1 if unavailable or\n     * invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getDateTimeOriginal()",
    "returnType" : "long",
    "comment" : "\n     * Returns parsed {@code DateTimeOriginal} value, or -1 if unavailable or\n     * invalid.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long parseDateTime(@Nullable String dateTimeString, @Nullable String subSecs, @Nullable String offsetString)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public long getGpsDateTime()",
    "returnType" : "long",
    "comment" : "\n     * Returns number of milliseconds since Jan. 1, 1970, midnight UTC.\n     * Returns -1 if the date time information if not available.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static float convertRationalLatLonToFloat(String rationalString, String ref)",
    "returnType" : "float",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "private void initForFilename(String filename) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getMimeType(BufferedInputStream in) throws IOException",
    "returnType" : "int",
    "comment" : " Checks the type of image file",
    "links" : [ ]
  }, {
    "name" : "private static boolean isJpegFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * This method looks at the first 3 bytes to determine if this file is a JPEG file.\n     * See http://www.media.mit.edu/pia/Research/deepview/exif.html, \"JPEG format and Marker\"\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isRafFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * This method looks at the first 15 bytes to determine if this file is a RAF file.\n     * There is no official specification for RAF files from Fuji, but there is an online archive of\n     * image file specifications:\n     * http://fileformats.archiveteam.org/wiki/Fujifilm_RAF\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isHeifFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isOrfFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * ORF has a similar structure to TIFF but it contains a different signature at the TIFF Header.\n     * This method looks at the 2 bytes following the Byte Order bytes to determine if this file is\n     * an ORF file.\n     * There is no official specification for ORF files from Olympus, but there is an online archive\n     * of image file specifications:\n     * http://fileformats.archiveteam.org/wiki/Olympus_ORF\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isRw2Format(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * RW2 is TIFF-based, but stores 0x55 signature byte instead of 0x42 at the header\n     * See http://lclevy.free.fr/raw/\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isPngFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * PNG's file signature is first 8 bytes.\n     * See PNG (Portable Network Graphics) Specification, Version 1.2, 3.1. PNG file signature\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isWebpFormat(byte[] signatureCheckBytes) throws IOException",
    "returnType" : "boolean",
    "comment" : "\n     * WebP's file signature is composed of 12 bytes:\n     *   'RIFF' (4 bytes) + file length value (4 bytes) + 'WEBP' (4 bytes)\n     * See https://developers.google.com/speed/webp/docs/riff_container, Section \"WebP File Header\"\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isExifDataOnly(BufferedInputStream in) throws IOException",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getJpegAttributes(ByteOrderedDataInputStream in, int jpegOffset, int imageType) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Loads EXIF attributes from a JPEG input stream.\n     *\n     * @param in The input stream that starts with the JPEG data.\n     * @param jpegOffset The offset value in input stream for JPEG data.\n     * @param imageType The image type from which to retrieve metadata. Use IFD_TYPE_PRIMARY for\n     *                   primary image, IFD_TYPE_PREVIEW for preview image, and\n     *                   IFD_TYPE_THUMBNAIL for thumbnail image.\n     * @throws IOException If the data contains invalid JPEG markers, offsets, or length values.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getRawAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getRafAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * RAF files contains a JPEG and a CFA data.\n     * The JPEG contains two images, a preview and a thumbnail, while the CFA contains a RAW image.\n     * This method looks at the first 160 bytes of a RAF file to retrieve the offset and length\n     * values for the JPEG and CFA data.\n     * Using that data, it parses the JPEG data to retrieve the preview and thumbnail image data,\n     * then parses the CFA metadata to retrieve the primary image length/width values.\n     * For data format details, see http://fileformats.archiveteam.org/wiki/Fujifilm_RAF\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getHeifAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getStandaloneAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getOrfAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * ORF files contains a primary image data and a MakerNote data that contains preview/thumbnail\n     * images. Both data takes the form of IFDs and can therefore be read with the\n     * readImageFileDirectory() method.\n     * This method reads all the necessary data and updates the primary/preview/thumbnail image\n     * information according to the GetOlympusPreviewImage() method in piex.cc.\n     * For data format details, see the following:\n     * http://fileformats.archiveteam.org/wiki/Olympus_ORF\n     * https://libopenraw.freedesktop.org/wiki/Olympus_ORF\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getRw2Attributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : " See https://libopenraw.freedesktop.org/wiki/Panasonic_RAW/ and piex.cc Rw2GetPreviewData()",
    "links" : [ ]
  }, {
    "name" : "private void getPngAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : " PNG contains the EXIF data as a Special-Purpose Chunk",
    "links" : [ ]
  }, {
    "name" : "private void getWebpAttributes(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : " https://developers.google.com/speed/webp/docs/riff_container",
    "links" : [ ]
  }, {
    "name" : "private void saveJpegAttributes(InputStream inputStream, OutputStream outputStream) throws IOException",
    "returnType" : "void",
    "comment" : " Stores a new JPEG image with EXIF attributes into a given output stream.",
    "links" : [ ]
  }, {
    "name" : "private void savePngAttributes(InputStream inputStream, OutputStream outputStream) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readExifSegment(byte[] exifBytes, int imageType) throws IOException",
    "returnType" : "void",
    "comment" : " Reads the given EXIF byte area and save its tag data into attributes.",
    "links" : [ ]
  }, {
    "name" : "private void addDefaultValuesForCompatibility()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private ByteOrder readByteOrder(ByteOrderedDataInputStream dataInputStream) throws IOException",
    "returnType" : "ByteOrder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void parseTiffHeaders(ByteOrderedDataInputStream dataInputStream, int exifBytesLength) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readImageFileDirectory(ByteOrderedDataInputStream dataInputStream, @IfdType int ifdType) throws IOException",
    "returnType" : "void",
    "comment" : " Reads image file directory, which is a tag group in EXIF.",
    "links" : [ ]
  }, {
    "name" : "private void retrieveJpegImageSize(ByteOrderedDataInputStream in, int imageType) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * JPEG compressed images do not contain IMAGE_LENGTH & IMAGE_WIDTH tags.\n     * This value uses JpegInterchangeFormat(JPEG data offset) value, and calls getJpegAttributes()\n     * to locate SOF(Start of Frame) marker and update the image length & width values.\n     * See JEITA CP-3451C Table 5 and Section 4.8.1. B.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setThumbnailData(ByteOrderedDataInputStream in) throws IOException",
    "returnType" : "void",
    "comment" : " Sets thumbnail offset & length attributes based on JpegInterchangeFormat or StripOffsets tags",
    "links" : [ ]
  }, {
    "name" : "private void handleThumbnailFromJfif(ByteOrderedDataInputStream in, HashMap thumbnailData) throws IOException",
    "returnType" : "void",
    "comment" : " and reads the corresponding bytes if stream does not support seek function",
    "links" : [ ]
  }, {
    "name" : "private void handleThumbnailFromStrips(ByteOrderedDataInputStream in, HashMap thumbnailData) throws IOException",
    "returnType" : "void",
    "comment" : " Check StripOffsets & StripByteCounts tags to retrieve thumbnail offset & length values",
    "links" : [ ]
  }, {
    "name" : "private boolean isSupportedDataType(HashMap thumbnailData) throws IOException",
    "returnType" : "boolean",
    "comment" : " Check if thumbnail data type is currently supported or not",
    "links" : [ ]
  }, {
    "name" : "private boolean isThumbnail(HashMap map) throws IOException",
    "returnType" : "boolean",
    "comment" : " See Section 4.8 of http://standardsproposals.bsigroup.com/Home/getPDF/567",
    "links" : [ ]
  }, {
    "name" : "private void validateImages() throws IOException",
    "returnType" : "void",
    "comment" : " Validate primary, preview, thumbnail image data by comparing image size",
    "links" : [ ]
  }, {
    "name" : "private void updateImageSizeValues(ByteOrderedDataInputStream in, int imageType) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * If image is uncompressed, ImageWidth/Length tags are used to store size info.\n     * However, uncompressed images often store extra pixels around the edges of the final image,\n     * which results in larger values for TAG_IMAGE_WIDTH and TAG_IMAGE_LENGTH tags.\n     * This method corrects those tag values by checking first the values of TAG_DEFAULT_CROP_SIZE\n     * See DNG Specification 1.4.0.0. Section 4. (DefaultCropSize)\n     *\n     * If image is a RW2 file, valid image sizes are stored in SensorBorder tags.\n     * See tiff_parser.cc GetFullDimension32()\n     * ",
    "links" : [ ]
  }, {
    "name" : "private int writeExifSegment(ByteOrderedDataOutputStream dataOutputStream) throws IOException",
    "returnType" : "int",
    "comment" : " Writes an Exif segment into the given output stream.",
    "links" : [ ]
  }, {
    "name" : "private static Pair<Integer, Integer> guessDataFormat(String entryValue)",
    "returnType" : "Pair<Integer, Integer>",
    "comment" : "\n     * Determines the data format of EXIF entry value.\n     *\n     * @param entryValue The value to be determined.\n     * @return Returns two data formats guessed as a pair in integer. If there is no two candidate\n               data formats for the given entry value, returns {@code -1} in the second of the pair.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void swapBasedOnImageSize(@IfdType int firstIfdType, @IfdType int secondIfdType) throws IOException",
    "returnType" : "void",
    "comment" : " Swaps image data based on image size",
    "links" : [ ]
  }, {
    "name" : "private boolean containsMatch(byte[] mainBytes, byte[] findBytes)",
    "returnType" : "boolean",
    "comment" : " Checks if there is a match",
    "links" : [ ]
  }, {
    "name" : "private static void copy(InputStream in, OutputStream out, int numBytes) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Copies the given number of the bytes from {@code in} to {@code out}. Neither stream is\n     * closed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static long[] convertToLongArray(Object inputObj)",
    "returnType" : "long[]",
    "comment" : "\n     * Convert given int[] to long[]. If long[] is given, just return it.\n     * Return null for other types of input.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String byteArrayToHexString(byte[] bytes)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "DEBUG", "TAG_ARTIST", "TAG_BITS_PER_SAMPLE", "TAG_COMPRESSION", "TAG_COPYRIGHT", "TAG_DATETIME", "TAG_IMAGE_DESCRIPTION", "TAG_IMAGE_LENGTH", "TAG_IMAGE_WIDTH", "TAG_JPEG_INTERCHANGE_FORMAT", "TAG_JPEG_INTERCHANGE_FORMAT_LENGTH", "TAG_MAKE", "TAG_MODEL", "TAG_ORIENTATION", "TAG_PHOTOMETRIC_INTERPRETATION", "TAG_PLANAR_CONFIGURATION", "TAG_PRIMARY_CHROMATICITIES", "TAG_REFERENCE_BLACK_WHITE", "TAG_RESOLUTION_UNIT", "TAG_ROWS_PER_STRIP", "TAG_SAMPLES_PER_PIXEL", "TAG_SOFTWARE", "TAG_STRIP_BYTE_COUNTS", "TAG_STRIP_OFFSETS", "TAG_TRANSFER_FUNCTION", "TAG_WHITE_POINT", "TAG_X_RESOLUTION", "TAG_Y_CB_CR_COEFFICIENTS", "TAG_Y_CB_CR_POSITIONING", "TAG_Y_CB_CR_SUB_SAMPLING", "TAG_Y_RESOLUTION", "TAG_APERTURE_VALUE", "TAG_BRIGHTNESS_VALUE", "TAG_CFA_PATTERN", "TAG_COLOR_SPACE", "TAG_COMPONENTS_CONFIGURATION", "TAG_COMPRESSED_BITS_PER_PIXEL", "TAG_CONTRAST", "TAG_CUSTOM_RENDERED", "TAG_DATETIME_DIGITIZED", "TAG_DATETIME_ORIGINAL", "TAG_DEVICE_SETTING_DESCRIPTION", "TAG_DIGITAL_ZOOM_RATIO", "TAG_EXIF_VERSION", "TAG_EXPOSURE_BIAS_VALUE", "TAG_EXPOSURE_INDEX", "TAG_EXPOSURE_MODE", "TAG_EXPOSURE_PROGRAM", "TAG_EXPOSURE_TIME", "TAG_F_NUMBER", "TAG_APERTURE", "TAG_FILE_SOURCE", "TAG_FLASH", "TAG_FLASH_ENERGY", "TAG_FLASHPIX_VERSION", "TAG_FOCAL_LENGTH", "TAG_FOCAL_LENGTH_IN_35MM_FILM", "TAG_FOCAL_PLANE_RESOLUTION_UNIT", "TAG_FOCAL_PLANE_X_RESOLUTION", "TAG_FOCAL_PLANE_Y_RESOLUTION", "TAG_GAIN_CONTROL", "TAG_ISO_SPEED_RATINGS", "TAG_ISO", "TAG_IMAGE_UNIQUE_ID", "TAG_LIGHT_SOURCE", "TAG_MAKER_NOTE", "TAG_MAX_APERTURE_VALUE", "TAG_METERING_MODE", "TAG_NEW_SUBFILE_TYPE", "TAG_OECF", "TAG_OFFSET_TIME", "TAG_OFFSET_TIME_ORIGINAL", "TAG_OFFSET_TIME_DIGITIZED", "TAG_PIXEL_X_DIMENSION", "TAG_PIXEL_Y_DIMENSION", "TAG_RELATED_SOUND_FILE", "TAG_SATURATION", "TAG_SCENE_CAPTURE_TYPE", "TAG_SCENE_TYPE", "TAG_SENSING_METHOD", "TAG_SHARPNESS", "TAG_SHUTTER_SPEED_VALUE", "TAG_SPATIAL_FREQUENCY_RESPONSE", "TAG_SPECTRAL_SENSITIVITY", "TAG_SUBFILE_TYPE", "TAG_SUBSEC_TIME", "TAG_SUBSEC_TIME_DIG", "TAG_SUBSEC_TIME_DIGITIZED", "TAG_SUBSEC_TIME_ORIG", "TAG_SUBSEC_TIME_ORIGINAL", "TAG_SUBJECT_AREA", "TAG_SUBJECT_DISTANCE", "TAG_SUBJECT_DISTANCE_RANGE", "TAG_SUBJECT_LOCATION", "TAG_USER_COMMENT", "TAG_WHITE_BALANCE", "TAG_GPS_ALTITUDE", "TAG_GPS_ALTITUDE_REF", "TAG_GPS_AREA_INFORMATION", "TAG_GPS_DOP", "TAG_GPS_DATESTAMP", "TAG_GPS_DEST_BEARING", "TAG_GPS_DEST_BEARING_REF", "TAG_GPS_DEST_DISTANCE", "TAG_GPS_DEST_DISTANCE_REF", "TAG_GPS_DEST_LATITUDE", "TAG_GPS_DEST_LATITUDE_REF", "TAG_GPS_DEST_LONGITUDE", "TAG_GPS_DEST_LONGITUDE_REF", "TAG_GPS_DIFFERENTIAL", "TAG_GPS_IMG_DIRECTION", "TAG_GPS_IMG_DIRECTION_REF", "TAG_GPS_LATITUDE", "TAG_GPS_LATITUDE_REF", "TAG_GPS_LONGITUDE", "TAG_GPS_LONGITUDE_REF", "TAG_GPS_MAP_DATUM", "TAG_GPS_MEASURE_MODE", "TAG_GPS_PROCESSING_METHOD", "TAG_GPS_SATELLITES", "TAG_GPS_SPEED", "TAG_GPS_SPEED_REF", "TAG_GPS_STATUS", "TAG_GPS_TIMESTAMP", "TAG_GPS_TRACK", "TAG_GPS_TRACK_REF", "TAG_GPS_VERSION_ID", "TAG_INTEROPERABILITY_INDEX", "TAG_THUMBNAIL_IMAGE_LENGTH", "TAG_THUMBNAIL_IMAGE_WIDTH", "TAG_THUMBNAIL_ORIENTATION", "TAG_DNG_VERSION", "TAG_DEFAULT_CROP_SIZE", "TAG_ORF_THUMBNAIL_IMAGE", "TAG_ORF_PREVIEW_IMAGE_START", "TAG_ORF_PREVIEW_IMAGE_LENGTH", "TAG_ORF_ASPECT_FRAME", "TAG_RW2_SENSOR_BOTTOM_BORDER", "TAG_RW2_SENSOR_LEFT_BORDER", "TAG_RW2_SENSOR_RIGHT_BORDER", "TAG_RW2_SENSOR_TOP_BORDER", "TAG_RW2_ISO", "TAG_RW2_JPG_FROM_RAW", "TAG_XMP", "TAG_EXIF_IFD_POINTER", "TAG_GPS_INFO_IFD_POINTER", "TAG_INTEROPERABILITY_IFD_POINTER", "TAG_SUB_IFD_POINTER", "TAG_ORF_CAMERA_SETTINGS_IFD_POINTER", "TAG_ORF_IMAGE_PROCESSING_IFD_POINTER", "TAG_HAS_THUMBNAIL", "TAG_THUMBNAIL_OFFSET", "TAG_THUMBNAIL_LENGTH", "TAG_THUMBNAIL_DATA", "MAX_THUMBNAIL_SIZE", "ORIENTATION_UNDEFINED", "ORIENTATION_NORMAL", "ORIENTATION_FLIP_HORIZONTAL", "ORIENTATION_ROTATE_180", "ORIENTATION_FLIP_VERTICAL", "ORIENTATION_TRANSPOSE", "ORIENTATION_ROTATE_90", "ORIENTATION_TRANSVERSE", "ORIENTATION_ROTATE_270", "WHITEBALANCE_AUTO", "WHITEBALANCE_MANUAL", "STREAM_TYPE_FULL_IMAGE_DATA", "STREAM_TYPE_EXIF_DATA_ONLY", "SIGNATURE_CHECK_SIZE", "JPEG_SIGNATURE", "RAF_SIGNATURE", "RAF_OFFSET_TO_JPEG_IMAGE_OFFSET", "RAF_INFO_SIZE", "RAF_JPEG_LENGTH_VALUE_SIZE", "HEIF_TYPE_FTYP", "HEIF_BRAND_MIF1", "HEIF_BRAND_HEIC", "ORF_SIGNATURE_1", "ORF_SIGNATURE_2", "ORF_MAKER_NOTE_HEADER_1", "ORF_MAKER_NOTE_HEADER_2", "ORF_MAKER_NOTE_HEADER_1_SIZE", "ORF_MAKER_NOTE_HEADER_2_SIZE", "RW2_SIGNATURE", "PEF_SIGNATURE", "PEF_MAKER_NOTE_SKIP_SIZE", "PNG_SIGNATURE", "PNG_CHUNK_TYPE_EXIF", "PNG_CHUNK_TYPE_IHDR", "PNG_CHUNK_TYPE_IEND", "PNG_CHUNK_TYPE_BYTE_LENGTH", "PNG_CHUNK_CRC_BYTE_LENGTH", "WEBP_SIGNATURE_1", "WEBP_SIGNATURE_2", "WEBP_FILE_SIZE_BYTE_LENGTH", "WEBP_CHUNK_TYPE_EXIF", "WEBP_CHUNK_TYPE_BYTE_LENGTH", "WEBP_CHUNK_SIZE_BYTE_LENGTH", "sFormatter", "sFormatterTz", "BYTE_ALIGN_II", "BYTE_ALIGN_MM", "START_CODE", "IFD_OFFSET", "IFD_FORMAT_BYTE", "IFD_FORMAT_STRING", "IFD_FORMAT_USHORT", "IFD_FORMAT_ULONG", "IFD_FORMAT_URATIONAL", "IFD_FORMAT_SBYTE", "IFD_FORMAT_UNDEFINED", "IFD_FORMAT_SSHORT", "IFD_FORMAT_SLONG", "IFD_FORMAT_SRATIONAL", "IFD_FORMAT_SINGLE", "IFD_FORMAT_DOUBLE", "IFD_FORMAT_IFD", "IFD_FORMAT_NAMES", "IFD_FORMAT_BYTES_PER_FORMAT", "EXIF_ASCII_PREFIX", "DATA_UNCOMPRESSED", "DATA_HUFFMAN_COMPRESSED", "DATA_JPEG", "DATA_JPEG_COMPRESSED", "DATA_DEFLATE_ZIP", "DATA_PACK_BITS_COMPRESSED", "DATA_LOSSY_JPEG", "BITS_PER_SAMPLE_RGB", "BITS_PER_SAMPLE_GREYSCALE_1", "BITS_PER_SAMPLE_GREYSCALE_2", "PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO", "PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO", "PHOTOMETRIC_INTERPRETATION_RGB", "PHOTOMETRIC_INTERPRETATION_YCBCR", "ORIGINAL_RESOLUTION_IMAGE", "REDUCED_RESOLUTION_IMAGE", "IFD_TIFF_TAGS", "IFD_EXIF_TAGS", "IFD_GPS_TAGS", "IFD_INTEROPERABILITY_TAGS", "IFD_THUMBNAIL_TAGS", "TAG_RAF_IMAGE_SIZE", "ORF_MAKER_NOTE_TAGS", "ORF_CAMERA_SETTINGS_TAGS", "ORF_IMAGE_PROCESSING_TAGS", "PEF_TAGS", "IFD_TYPE_PRIMARY", "IFD_TYPE_EXIF", "IFD_TYPE_GPS", "IFD_TYPE_INTEROPERABILITY", "IFD_TYPE_THUMBNAIL", "IFD_TYPE_PREVIEW", "IFD_TYPE_ORF_MAKER_NOTE", "IFD_TYPE_ORF_CAMERA_SETTINGS", "IFD_TYPE_ORF_IMAGE_PROCESSING", "IFD_TYPE_PEF", "EXIF_TAGS", "EXIF_POINTER_TAGS", "JPEG_INTERCHANGE_FORMAT_TAG", "JPEG_INTERCHANGE_FORMAT_LENGTH_TAG", "sExifTagMapsForReading", "sExifTagMapsForWriting", "sTagSetForCompatibility", "sExifPointerTagMap", "ASCII", "IDENTIFIER_EXIF_APP1", "IDENTIFIER_XMP_APP1", "MARKER", "MARKER_SOI", "MARKER_SOF0", "MARKER_SOF1", "MARKER_SOF2", "MARKER_SOF3", "MARKER_SOF5", "MARKER_SOF6", "MARKER_SOF7", "MARKER_SOF9", "MARKER_SOF10", "MARKER_SOF11", "MARKER_SOF13", "MARKER_SOF14", "MARKER_SOF15", "MARKER_SOS", "MARKER_APP1", "MARKER_COM", "MARKER_EOI", "IMAGE_TYPE_UNKNOWN", "IMAGE_TYPE_ARW", "IMAGE_TYPE_CR2", "IMAGE_TYPE_DNG", "IMAGE_TYPE_JPEG", "IMAGE_TYPE_NEF", "IMAGE_TYPE_NRW", "IMAGE_TYPE_ORF", "IMAGE_TYPE_PEF", "IMAGE_TYPE_RAF", "IMAGE_TYPE_RW2", "IMAGE_TYPE_SRW", "IMAGE_TYPE_HEIF", "IMAGE_TYPE_PNG", "IMAGE_TYPE_WEBP", "mFilename", "mSeekableFileDescriptor", "mAssetInputStream", "mIsInputStream", "mMimeType", "mIsExifDataOnly", "mAttributes", "mHandledIfdOffsets", "mExifByteOrder", "mHasThumbnail", "mHasThumbnailStrips", "mAreThumbnailStripsConsecutive", "mThumbnailOffset", "mThumbnailLength", "mThumbnailBytes", "mThumbnailCompression", "mExifOffset", "mOrfMakerNoteOffset", "mOrfThumbnailOffset", "mOrfThumbnailLength", "mRw2JpgFromRawOffset", "mIsSupportedFile", "mModified", "mXmpIsFromSeparateMarker", "sNonZeroTimePattern", "sGpsTimestampPattern" ],
  "methodNames" : [ "public static boolean isSupportedMimeType(@NonNull String mimeType)", "private ExifAttribute getExifAttribute(@NonNull String tag)", "public String getAttribute(@NonNull String tag)", "public int getAttributeInt(@NonNull String tag, int defaultValue)", "public double getAttributeDouble(@NonNull String tag, double defaultValue)", "public void setAttribute(@NonNull String tag, @Nullable String value)", "private boolean updateAttribute(String tag, ExifAttribute value)", "private void removeAttribute(String tag)", "private void loadAttributes(@NonNull InputStream in)", "private static boolean isSeekableFD(FileDescriptor fd)", "private void printAttributes()", "public void saveAttributes() throws IOException", "public boolean hasThumbnail()", "public boolean hasAttribute(@NonNull String tag)", "public byte[] getThumbnail()", "public byte[] getThumbnailBytes()", "public Bitmap getThumbnailBitmap()", "public boolean isThumbnailCompressed()", "public long[] getThumbnailRange()", "public long[] getAttributeRange(@NonNull String tag)", "public byte[] getAttributeBytes(@NonNull String tag)", "public boolean getLatLong(float[] output)", "public double getAltitude(double defaultValue)", "public long getDateTime()", "public long getDateTimeDigitized()", "public long getDateTimeOriginal()", "private static long parseDateTime(@Nullable String dateTimeString, @Nullable String subSecs, @Nullable String offsetString)", "public long getGpsDateTime()", "public static float convertRationalLatLonToFloat(String rationalString, String ref)", "private void initForFilename(String filename) throws IOException", "private int getMimeType(BufferedInputStream in) throws IOException", "private static boolean isJpegFormat(byte[] signatureCheckBytes) throws IOException", "private boolean isRafFormat(byte[] signatureCheckBytes) throws IOException", "private boolean isHeifFormat(byte[] signatureCheckBytes) throws IOException", "private boolean isOrfFormat(byte[] signatureCheckBytes) throws IOException", "private boolean isRw2Format(byte[] signatureCheckBytes) throws IOException", "private boolean isPngFormat(byte[] signatureCheckBytes) throws IOException", "private boolean isWebpFormat(byte[] signatureCheckBytes) throws IOException", "private static boolean isExifDataOnly(BufferedInputStream in) throws IOException", "private void getJpegAttributes(ByteOrderedDataInputStream in, int jpegOffset, int imageType) throws IOException", "private void getRawAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getRafAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getHeifAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getStandaloneAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getOrfAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getRw2Attributes(ByteOrderedDataInputStream in) throws IOException", "private void getPngAttributes(ByteOrderedDataInputStream in) throws IOException", "private void getWebpAttributes(ByteOrderedDataInputStream in) throws IOException", "private void saveJpegAttributes(InputStream inputStream, OutputStream outputStream) throws IOException", "private void savePngAttributes(InputStream inputStream, OutputStream outputStream) throws IOException", "private void readExifSegment(byte[] exifBytes, int imageType) throws IOException", "private void addDefaultValuesForCompatibility()", "private ByteOrder readByteOrder(ByteOrderedDataInputStream dataInputStream) throws IOException", "private void parseTiffHeaders(ByteOrderedDataInputStream dataInputStream, int exifBytesLength) throws IOException", "private void readImageFileDirectory(ByteOrderedDataInputStream dataInputStream, @IfdType int ifdType) throws IOException", "private void retrieveJpegImageSize(ByteOrderedDataInputStream in, int imageType) throws IOException", "private void setThumbnailData(ByteOrderedDataInputStream in) throws IOException", "private void handleThumbnailFromJfif(ByteOrderedDataInputStream in, HashMap thumbnailData) throws IOException", "private void handleThumbnailFromStrips(ByteOrderedDataInputStream in, HashMap thumbnailData) throws IOException", "private boolean isSupportedDataType(HashMap thumbnailData) throws IOException", "private boolean isThumbnail(HashMap map) throws IOException", "private void validateImages() throws IOException", "private void updateImageSizeValues(ByteOrderedDataInputStream in, int imageType) throws IOException", "private int writeExifSegment(ByteOrderedDataOutputStream dataOutputStream) throws IOException", "private static Pair<Integer, Integer> guessDataFormat(String entryValue)", "private void swapBasedOnImageSize(@IfdType int firstIfdType, @IfdType int secondIfdType) throws IOException", "private boolean containsMatch(byte[] mainBytes, byte[] findBytes)", "private static void copy(InputStream in, OutputStream out, int numBytes) throws IOException", "private static long[] convertToLongArray(Object inputObj)", "private static String byteArrayToHexString(byte[] bytes)" ]
}