{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/security/keystore/AndroidKeyStoreSpi.java",
  "packageName" : "android.security.keystore",
  "className" : "AndroidKeyStoreSpi",
  "comment" : "\n * A java.security.KeyStore interface for the Android KeyStore. An instance of\n * it can be created via the {@link java.security.KeyStore#getInstance(String)\n * KeyStore.getInstance(\"AndroidKeyStore\")} interface. This returns a\n * java.security.KeyStore backed by this \"AndroidKeyStore\" implementation.\n * <p>\n * This is built on top of Android's keystore daemon. The convention of alias\n * use is:\n * <p>\n * PrivateKeyEntry will have a Credentials.USER_PRIVATE_KEY as the private key,\n * Credentials.USER_CERTIFICATE as the first certificate in the chain (the one\n * that corresponds to the private key), and then a Credentials.CA_CERTIFICATE\n * entry which will have the rest of the chain concatenated in BER format.\n * <p>\n * TrustedCertificateEntry will just have a Credentials.CA_CERTIFICATE entry\n * with a single certificate.\n *\n * @hide\n ",
  "variables" : [ {
    "name" : "NAME",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mKeyStore",
    "type" : "KeyStore",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException",
    "returnType" : "Key",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Certificate[] engineGetCertificateChain(String alias)",
    "returnType" : "Certificate[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Certificate engineGetCertificate(String alias)",
    "returnType" : "Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Certificate getCertificateForTrustedCertificateEntry(byte[] encodedCert)",
    "returnType" : "Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Certificate getCertificateForPrivateKeyEntry(String alias, byte[] encodedCert)",
    "returnType" : "Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static KeyStoreX509Certificate wrapIntoKeyStoreCertificate(String privateKeyAlias, int uid, X509Certificate certificate)",
    "returnType" : "KeyStoreX509Certificate",
    "comment" : "\n     * Wraps the provided cerificate into {@link KeyStoreX509Certificate} so that the public key\n     * returned by the certificate contains information about the alias of the private key in\n     * keystore. This is needed so that Android Keystore crypto operations using public keys can\n     * find out which key alias to use. These operations cannot work without an alias.\n     ",
    "links" : [ "KeyStoreX509Certificate" ]
  }, {
    "name" : "private static X509Certificate toCertificate(byte[] bytes)",
    "returnType" : "X509Certificate",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static Collection<X509Certificate> toCertificates(byte[] bytes)",
    "returnType" : "Collection<X509Certificate>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Date getModificationDate(String alias)",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Date engineGetCreationDate(String alias)",
    "returnType" : "Date",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static KeyProtection getLegacyKeyProtectionParameter(PrivateKey key) throws KeyStoreException",
    "returnType" : "KeyProtection",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setPrivateKeyEntry(String alias, PrivateKey key, Certificate[] chain, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setSecretKeyEntry(String entryAlias, SecretKey key, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setWrappedKeyEntry(String alias, WrappedKeyEntry entry, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetKeyEntry(String alias, byte[] userKey, Certificate[] chain) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineDeleteEntry(String alias) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private Set<String> getUniqueAliases()",
    "returnType" : "Set<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Enumeration<String> engineAliases()",
    "returnType" : "Enumeration<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineContainsAlias(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int engineSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineIsKeyEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isKeyEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isCertificateEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean engineIsCertificateEntry(String alias)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String engineGetCertificateAlias(Certificate cert)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineLoad(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void engineSetEntry(String alias, Entry entry, ProtectionParameter param) throws KeyStoreException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "NAME", "mKeyStore", "mUid" ],
  "methodNames" : [ "public Key engineGetKey(String alias, char[] password) throws NoSuchAlgorithmException, UnrecoverableKeyException", "public Certificate[] engineGetCertificateChain(String alias)", "public Certificate engineGetCertificate(String alias)", "private Certificate getCertificateForTrustedCertificateEntry(byte[] encodedCert)", "private Certificate getCertificateForPrivateKeyEntry(String alias, byte[] encodedCert)", "private static KeyStoreX509Certificate wrapIntoKeyStoreCertificate(String privateKeyAlias, int uid, X509Certificate certificate)", "private static X509Certificate toCertificate(byte[] bytes)", "private static Collection<X509Certificate> toCertificates(byte[] bytes)", "private Date getModificationDate(String alias)", "public Date engineGetCreationDate(String alias)", "public void engineSetKeyEntry(String alias, Key key, char[] password, Certificate[] chain) throws KeyStoreException", "private static KeyProtection getLegacyKeyProtectionParameter(PrivateKey key) throws KeyStoreException", "private void setPrivateKeyEntry(String alias, PrivateKey key, Certificate[] chain, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "private void setSecretKeyEntry(String entryAlias, SecretKey key, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "private void setWrappedKeyEntry(String alias, WrappedKeyEntry entry, java.security.KeyStore.ProtectionParameter param) throws KeyStoreException", "public void engineSetKeyEntry(String alias, byte[] userKey, Certificate[] chain) throws KeyStoreException", "public void engineSetCertificateEntry(String alias, Certificate cert) throws KeyStoreException", "public void engineDeleteEntry(String alias) throws KeyStoreException", "private Set<String> getUniqueAliases()", "public Enumeration<String> engineAliases()", "public boolean engineContainsAlias(String alias)", "public int engineSize()", "public boolean engineIsKeyEntry(String alias)", "private boolean isKeyEntry(String alias)", "private boolean isCertificateEntry(String alias)", "public boolean engineIsCertificateEntry(String alias)", "public String engineGetCertificateAlias(Certificate cert)", "public void engineStore(OutputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineLoad(InputStream stream, char[] password) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineLoad(LoadStoreParameter param) throws IOException, NoSuchAlgorithmException, CertificateException", "public void engineSetEntry(String alias, Entry entry, ProtectionParameter param) throws KeyStoreException" ]
}