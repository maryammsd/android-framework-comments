{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/database/sqlite/SQLiteProgram.java",
  "packageName" : "android.database.sqlite",
  "className" : "SQLiteProgram",
  "comment" : "\n * A base class for compiled SQLite programs.\n * <p>\n * This class is not thread-safe.\n * </p>\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "EMPTY_STRING_ARRAY",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDatabase",
    "type" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSql",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mReadOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mColumnNames",
    "type" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNumParameters",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mBindArgs",
    "type" : "Object[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " final SQLiteDatabase getDatabase()",
    "returnType" : "SQLiteDatabase",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final String getSql()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final Object[] getBindArgs()",
    "returnType" : "Object[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " final String[] getColumnNames()",
    "returnType" : "String[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected final SQLiteSession getSession()",
    "returnType" : "SQLiteSession",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected final int getConnectionFlags()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected final void onCorruption()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public final int getUniqueId()",
    "returnType" : "int",
    "comment" : "\n     * Unimplemented.\n     * @deprecated This method is deprecated and must not be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bindNull(int index)",
    "returnType" : "void",
    "comment" : "\n     * Bind a NULL value to this statement. The value remains bound until\n     * {@link #clearBindings} is called.\n     *\n     * @param index The 1-based index to the parameter to bind null to\n     ",
    "links" : [ "#clearBindings" ]
  }, {
    "name" : "public void bindLong(int index, long value)",
    "returnType" : "void",
    "comment" : "\n     * Bind a long value to this statement. The value remains bound until\n     * {@link #clearBindings} is called.\n     *addToBindArgs\n     * @param index The 1-based index to the parameter to bind\n     * @param value The value to bind\n     ",
    "links" : [ "#clearBindings" ]
  }, {
    "name" : "public void bindDouble(int index, double value)",
    "returnType" : "void",
    "comment" : "\n     * Bind a double value to this statement. The value remains bound until\n     * {@link #clearBindings} is called.\n     *\n     * @param index The 1-based index to the parameter to bind\n     * @param value The value to bind\n     ",
    "links" : [ "#clearBindings" ]
  }, {
    "name" : "public void bindString(int index, String value)",
    "returnType" : "void",
    "comment" : "\n     * Bind a String value to this statement. The value remains bound until\n     * {@link #clearBindings} is called.\n     *\n     * @param index The 1-based index to the parameter to bind\n     * @param value The value to bind, must not be null\n     ",
    "links" : [ "#clearBindings" ]
  }, {
    "name" : "public void bindBlob(int index, byte[] value)",
    "returnType" : "void",
    "comment" : "\n     * Bind a byte array value to this statement. The value remains bound until\n     * {@link #clearBindings} is called.\n     *\n     * @param index The 1-based index to the parameter to bind\n     * @param value The value to bind, must not be null\n     ",
    "links" : [ "#clearBindings" ]
  }, {
    "name" : "public void clearBindings()",
    "returnType" : "void",
    "comment" : "\n     * Clears all existing bindings. Unset bindings are treated as NULL.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void bindAllArgsAsStrings(String[] bindArgs)",
    "returnType" : "void",
    "comment" : "\n     * Given an array of String bindArgs, this method binds all of them in one single call.\n     *\n     * @param bindArgs the String array of bind args, none of which must be null.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void onAllReferencesReleased()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void bind(int index, Object value)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " final SQLiteDatabase getDatabase()", " final String getSql()", " final Object[] getBindArgs()", " final String[] getColumnNames()", "protected final SQLiteSession getSession()", "protected final int getConnectionFlags()", "protected final void onCorruption()", "public final int getUniqueId()", "public void bindNull(int index)", "public void bindLong(int index, long value)", "public void bindDouble(int index, double value)", "public void bindString(int index, String value)", "public void bindBlob(int index, byte[] value)", "public void clearBindings()", "public void bindAllArgsAsStrings(String[] bindArgs)", "protected void onAllReferencesReleased()", "private void bind(int index, Object value)" ],
  "variableNames" : [ "EMPTY_STRING_ARRAY", "mDatabase", "mSql", "mReadOnly", "mColumnNames", "mNumParameters", "mBindArgs" ]
}