{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/SecurityManager.java",
  "packageName" : "java.lang",
  "className" : "SecurityManager",
  "comment" : "\n * Legacy security code; do not use.\n *\n * <p>Security managers do <i>not</i> provide a secure environment for\n * executing untrusted code and are unsupported on Android. Untrusted code\n * cannot be safely isolated within a single VM on Android. Application\n * developers can assume that there's no SecurityManager installed,\n * i.e. {@link java.lang.System#getSecurityManager()} will return null.\n ",
  "links" : [ "java.lang.System#getSecurityManager()" ],
  "variables" : [ {
    "name" : "inCheck",
    "type" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  } ],
  "methods" : [ {
    "name" : "public boolean getInCheck()",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected Class[] getClassContext()",
    "returnType" : "Class[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected ClassLoader currentClassLoader()",
    "returnType" : "ClassLoader",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected Class<?> currentLoadedClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected int classDepth(String name)",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected int classLoaderDepth()",
    "returnType" : "int",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected boolean inClass(String name)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "protected boolean inClassLoader()",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated Use {@link #checkPermission} instead.\n     ",
    "links" : [ "#checkPermission" ]
  }, {
    "name" : "public Object getSecurityContext()",
    "returnType" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPermission(Permission perm)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPermission(Permission perm, Object context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkCreateClassLoader()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkAccess(Thread t)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkAccess(ThreadGroup g)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkExit(int status)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkExec(String cmd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkLink(String lib)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkRead(FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkRead(String file)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkRead(String file, Object context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkWrite(FileDescriptor fd)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkWrite(String file)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkDelete(String file)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkConnect(String host, int port)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkConnect(String host, int port, Object context)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkListen(int port)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkAccept(String host, int port)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkMulticast(InetAddress maddr)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkMulticast(InetAddress maddr, byte ttl)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated use {@link #checkMulticast(java.net.InetAddress)} instead.\n     ",
    "links" : [ "#checkMulticast(java.net.InetAddress)" ]
  }, {
    "name" : "public void checkPropertiesAccess()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPropertyAccess(String key)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean checkTopLevelWindow(Object window)",
    "returnType" : "boolean",
    "comment" : "\n     * @deprecated this method is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void checkPrintJobAccess()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkSystemClipboardAccess()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkAwtEventQueueAccess()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPackageAccess(String pkg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkPackageDefinition(String pkg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkSetFactory()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void checkMemberAccess(Class<?> clazz, int which)",
    "returnType" : "void",
    "comment" : "\n     * @deprecated this method is deprecated.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void checkSecurityAccess(String target)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ThreadGroup getThreadGroup()",
    "returnType" : "ThreadGroup",
    "comment" : "\n     * Returns the current thread's thread group.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean getInCheck()", "protected Class[] getClassContext()", "protected ClassLoader currentClassLoader()", "protected Class<?> currentLoadedClass()", "protected int classDepth(String name)", "protected int classLoaderDepth()", "protected boolean inClass(String name)", "protected boolean inClassLoader()", "public Object getSecurityContext()", "public void checkPermission(Permission perm)", "public void checkPermission(Permission perm, Object context)", "public void checkCreateClassLoader()", "public void checkAccess(Thread t)", "public void checkAccess(ThreadGroup g)", "public void checkExit(int status)", "public void checkExec(String cmd)", "public void checkLink(String lib)", "public void checkRead(FileDescriptor fd)", "public void checkRead(String file)", "public void checkRead(String file, Object context)", "public void checkWrite(FileDescriptor fd)", "public void checkWrite(String file)", "public void checkDelete(String file)", "public void checkConnect(String host, int port)", "public void checkConnect(String host, int port, Object context)", "public void checkListen(int port)", "public void checkAccept(String host, int port)", "public void checkMulticast(InetAddress maddr)", "public void checkMulticast(InetAddress maddr, byte ttl)", "public void checkPropertiesAccess()", "public void checkPropertyAccess(String key)", "public boolean checkTopLevelWindow(Object window)", "public void checkPrintJobAccess()", "public void checkSystemClipboardAccess()", "public void checkAwtEventQueueAccess()", "public void checkPackageAccess(String pkg)", "public void checkPackageDefinition(String pkg)", "public void checkSetFactory()", "public void checkMemberAccess(Class<?> clazz, int which)", "public void checkSecurityAccess(String target)", "public ThreadGroup getThreadGroup()" ],
  "variableNames" : [ "inCheck" ]
}