{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/text/RuleBasedCollator.java",
  "packageName" : "java.text",
  "className" : "RuleBasedCollator",
  "comment" : "\n * The {@code RuleBasedCollator} class is a concrete subclass of\n * {@code Collator} that provides a simple, data-driven, table\n * collator.  With this class you can create a customized table-based\n * {@code Collator}.  {@code RuleBasedCollator} maps\n * characters to sort keys.\n *\n * <p>\n * {@code RuleBasedCollator} has the following restrictions\n * for efficiency (other subclasses may be used for more complex languages) :\n * <ol>\n * <li>If a special collation rule controlled by a &lt;modifier&gt; is\n *     specified it applies to the whole collator object.\n * <li>All non-mentioned characters are at the end of the\n *     collation order.\n * </ol>\n *\n * <p>\n * The collation table is composed of a list of collation rules, where each\n * rule is of one of three forms:\n * <pre>\n *    &lt;modifier&gt;\n *    &lt;relation&gt; &lt;text-argument&gt;\n *    &lt;reset&gt; &lt;text-argument&gt;\n * </pre>\n * The definitions of the rule elements is as follows:\n * <UL>\n *    <LI><strong>Text-Argument</strong>: A text-argument is any sequence of\n *        characters, excluding special characters (that is, common\n *        whitespace characters [0009-000D, 0020] and rule syntax characters\n *        [0021-002F, 003A-0040, 005B-0060, 007B-007E]). If those\n *        characters are desired, you can put them in single quotes\n *        (e.g. ampersand =&gt; '&amp;'). Note that unquoted white space characters\n *        are ignored; e.g. {@code b c} is treated as {@code bc}.\n *    <LI><strong>Modifier</strong>: There are currently two modifiers that\n *        turn on special collation rules.\n *        <UL>\n *            <LI>'@' : Turns on backwards sorting of accents (secondary\n *                      differences), as in French.\n *            <LI>'!' : Turns on Thai/Lao vowel-consonant swapping.  If this\n *                      rule is in force when a Thai vowel of the range\n *                      &#92;U0E40-&#92;U0E44 precedes a Thai consonant of the range\n *                      &#92;U0E01-&#92;U0E2E OR a Lao vowel of the range &#92;U0EC0-&#92;U0EC4\n *                      precedes a Lao consonant of the range &#92;U0E81-&#92;U0EAE then\n *                      the vowel is placed after the consonant for collation\n *                      purposes.\n *        </UL>\n *        <p>'@' : Indicates that accents are sorted backwards, as in French.\n *    <LI><strong>Relation</strong>: The relations are the following:\n *        <UL>\n *            <LI>'&lt;' : Greater, as a letter difference (primary)\n *            <LI>';' : Greater, as an accent difference (secondary)\n *            <LI>',' : Greater, as a case difference (tertiary)\n *            <LI>'=' : Equal\n *        </UL>\n *    <LI><strong>Reset</strong>: There is a single reset\n *        which is used primarily for contractions and expansions, but which\n *        can also be used to add a modification at the end of a set of rules.\n *        <p>'&amp;' : Indicates that the next rule follows the position to where\n *            the reset text-argument would be sorted.\n * </UL>\n *\n * <p>\n * This sounds more complicated than it is in practice. For example, the\n * following are equivalent ways of expressing the same thing:\n * <blockquote>\n * <pre>\n * a &lt; b &lt; c\n * a &lt; b &amp; b &lt; c\n * a &lt; c &amp; a &lt; b\n * </pre>\n * </blockquote>\n * Notice that the order is important, as the subsequent item goes immediately\n * after the text-argument. The following are not equivalent:\n * <blockquote>\n * <pre>\n * a &lt; b &amp; a &lt; c\n * a &lt; c &amp; a &lt; b\n * </pre>\n * </blockquote>\n * Either the text-argument must already be present in the sequence, or some\n * initial substring of the text-argument must be present. (e.g. \"a &lt; b &amp; ae &lt;\n * e\" is valid since \"a\" is present in the sequence before \"ae\" is reset). In\n * this latter case, \"ae\" is not entered and treated as a single character;\n * instead, \"e\" is sorted as if it were expanded to two characters: \"a\"\n * followed by an \"e\". This difference appears in natural languages: in\n * traditional Spanish \"ch\" is treated as though it contracts to a single\n * character (expressed as \"c &lt; ch &lt; d\"), while in traditional German\n * a-umlaut is treated as though it expanded to two characters\n * (expressed as \"a,A &lt; b,B ... &amp;ae;&#92;u00e3&amp;AE;&#92;u00c3\").\n * [&#92;u00e3 and &#92;u00c3 are, of course, the escape sequences for a-umlaut.]\n * <p>\n * <strong>Ignorable Characters</strong>\n * <p>\n * For ignorable characters, the first rule must start with a relation (the\n * examples we have used above are really fragments; \"a &lt; b\" really should be\n * \"&lt; a &lt; b\"). If, however, the first relation is not \"&lt;\", then all the all\n * text-arguments up to the first \"&lt;\" are ignorable. For example, \", - &lt; a &lt; b\"\n * makes \"-\" an ignorable character, as we saw earlier in the word\n * \"black-birds\". In the samples for different languages, you see that most\n * accents are ignorable.\n *\n * <p><strong>Normalization and Accents</strong>\n * <p>\n * {@code RuleBasedCollator} automatically processes its rule table to\n * include both pre-composed and combining-character versions of\n * accented characters.  Even if the provided rule string contains only\n * base characters and separate combining accent characters, the pre-composed\n * accented characters matching all canonical combinations of characters from\n * the rule string will be entered in the table.\n * <p>\n * This allows you to use a RuleBasedCollator to compare accented strings\n * even when the collator is set to NO_DECOMPOSITION.  There are two caveats,\n * however.  First, if the strings to be collated contain combining\n * sequences that may not be in canonical order, you should set the collator to\n * CANONICAL_DECOMPOSITION or FULL_DECOMPOSITION to enable sorting of\n * combining sequences.  Second, if the strings contain characters with\n * compatibility decompositions (such as full-width and half-width forms),\n * you must use FULL_DECOMPOSITION, since the rule tables only include\n * canonical mappings.\n *\n * <p><strong>Errors</strong>\n * <p>\n * The following are errors:\n * <UL>\n *     <LI>A text-argument contains unquoted punctuation symbols\n *        (e.g. \"a &lt; b-c &lt; d\").\n *     <LI>A relation or reset character not followed by a text-argument\n *        (e.g. \"a &lt; ,b\").\n *     <LI>A reset where the text-argument (or an initial substring of the\n *         text-argument) is not already in the sequence.\n *         (e.g. \"a &lt; b &amp; e &lt; f\")\n * </UL>\n * If you produce one of these errors, a {@code RuleBasedCollator} throws\n * a {@code ParseException}.\n *\n * <p><strong>Examples</strong>\n * <p>Simple:     \"&lt; a &lt; b &lt; c &lt; d\"\n * <p>Norwegian:  \"&lt; a, A &lt; b, B &lt; c, C &lt; d, D &lt; e, E &lt; f, F\n *                 &lt; g, G &lt; h, H &lt; i, I &lt; j, J &lt; k, K &lt; l, L\n *                 &lt; m, M &lt; n, N &lt; o, O &lt; p, P &lt; q, Q &lt; r, R\n *                 &lt; s, S &lt; t, T &lt; u, U &lt; v, V &lt; w, W &lt; x, X\n *                 &lt; y, Y &lt; z, Z\n *                 &lt; &#92;u00E6, &#92;u00C6\n *                 &lt; &#92;u00F8, &#92;u00D8\n *                 &lt; &#92;u00E5 = a&#92;u030A, &#92;u00C5 = A&#92;u030A;\n *                      aa, AA\"\n *\n * <p>\n * To create a {@code RuleBasedCollator} object with specialized\n * rules tailored to your needs, you construct the {@code RuleBasedCollator}\n * with the rules contained in a {@code String} object. For example:\n * <blockquote>\n * <pre>\n * String simple = \"&lt; a&lt; b&lt; c&lt; d\";\n * RuleBasedCollator mySimple = new RuleBasedCollator(simple);\n * </pre>\n * </blockquote>\n * Or:\n * <blockquote>\n * <pre>\n * String Norwegian = \"&lt; a, A &lt; b, B &lt; c, C &lt; d, D &lt; e, E &lt; f, F &lt; g, G &lt; h, H &lt; i, I\" +\n *                    \"&lt; j, J &lt; k, K &lt; l, L &lt; m, M &lt; n, N &lt; o, O &lt; p, P &lt; q, Q &lt; r, R\" +\n *                    \"&lt; s, S &lt; t, T &lt; u, U &lt; v, V &lt; w, W &lt; x, X &lt; y, Y &lt; z, Z\" +\n *                    \"&lt; &#92;u00E6, &#92;u00C6\" +     // Latin letter ae &amp; AE\n *                    \"&lt; &#92;u00F8, &#92;u00D8\" +     // Latin letter o &amp; O with stroke\n *                    \"&lt; &#92;u00E5 = a&#92;u030A,\" +  // Latin letter a with ring above\n *                    \"  &#92;u00C5 = A&#92;u030A;\" +  // Latin letter A with ring above\n *                    \"  aa, AA\";\n * RuleBasedCollator myNorwegian = new RuleBasedCollator(Norwegian);\n * </pre>\n * </blockquote>\n *\n * <p>\n * A new collation rules string can be created by concatenating rules\n * strings. For example, the rules returned by {@link #getRules()} could\n * be concatenated to combine multiple {@code RuleBasedCollator}s.\n *\n * <p>\n * The following example demonstrates how to change the order of\n * non-spacing accents,\n * <blockquote>\n * <pre>\n * // old rule\n * String oldRules = \"=&#92;u0301;&#92;u0300;&#92;u0302;&#92;u0308\"    // main accents\n *                 + \";&#92;u0327;&#92;u0303;&#92;u0304;&#92;u0305\"    // main accents\n *                 + \";&#92;u0306;&#92;u0307;&#92;u0309;&#92;u030A\"    // main accents\n *                 + \";&#92;u030B;&#92;u030C;&#92;u030D;&#92;u030E\"    // main accents\n *                 + \";&#92;u030F;&#92;u0310;&#92;u0311;&#92;u0312\"    // main accents\n *                 + \"&lt; a , A ; ae, AE ; &#92;u00e6 , &#92;u00c6\"\n *                 + \"&lt; b , B &lt; c, C &lt; e, E &amp; C &lt; d, D\";\n * // change the order of accent characters\n * String addOn = \"&amp; &#92;u0300 ; &#92;u0308 ; &#92;u0302\";\n * RuleBasedCollator myCollator = new RuleBasedCollator(oldRules + addOn);\n * </pre>\n * </blockquote>\n *\n * @see        Collator\n * @see        CollationElementIterator\n * @author     Helena Shih, Laura Werner, Richard Gillam\n * @since 1.1\n ",
  "links" : [ "#getRules()" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public String getRules()",
    "returnType" : "String",
    "comment" : "\n     * Gets the table-based rules for the collation object.\n     *\n     * <p>On Android, the returned string will be empty unless this instance was\n     * constructed using {@link #RuleBasedCollator(String)}.\n     *\n     * @return returns the collation rules that the table collation object\n     * was created from.\n     ",
    "links" : [ "#RuleBasedCollator(String)" ]
  }, {
    "name" : "public CollationElementIterator getCollationElementIterator(String source)",
    "returnType" : "CollationElementIterator",
    "comment" : "\n     * Returns a CollationElementIterator for the given String.\n     *\n     * @param source the string to be collated\n     * @return a {@code CollationElementIterator} object\n     * @see java.text.CollationElementIterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public CollationElementIterator getCollationElementIterator(CharacterIterator source)",
    "returnType" : "CollationElementIterator",
    "comment" : "\n     * Returns a CollationElementIterator for the given CharacterIterator.\n     *\n     * @param source the character iterator to be collated\n     * @return a {@code CollationElementIterator} object\n     * @see java.text.CollationElementIterator\n     * @since 1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized int compare(String source, String target)",
    "returnType" : "int",
    "comment" : "\n     * Compares the character data stored in two different strings based on the\n     * collation rules.  Returns information about whether a string is less\n     * than, greater than or equal to another string in a language.\n     * This can be overridden in a subclass.\n     *\n     * @throws    NullPointerException if {@code source} or {@code target} is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public synchronized CollationKey getCollationKey(String source)",
    "returnType" : "CollationKey",
    "comment" : "\n     * Transforms the string into a series of characters that can be compared\n     * with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.\n     * It can be overridden in a subclass.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone()",
    "returnType" : "Object",
    "comment" : "\n     * Standard override; no change in semantics.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the equality of two collation objects.\n     * @param obj the table-based collation object to be compared with this.\n     * @return true if the current table-based collation object is the same\n     * as the table-based collation object obj; false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generates the hash code for the table-based collation object\n     ",
    "links" : [ ]
  }, {
    "name" : "private android.icu.text.RuleBasedCollator collAsICU()",
    "returnType" : "android.icu.text.RuleBasedCollator",
    "comment" : " Android-added: collAsIcu helper method.",
    "links" : [ ]
  } ],
  "methodNames" : [ "public String getRules()", "public CollationElementIterator getCollationElementIterator(String source)", "public CollationElementIterator getCollationElementIterator(CharacterIterator source)", "public synchronized int compare(String source, String target)", "public synchronized CollationKey getCollationKey(String source)", "public Object clone()", "public boolean equals(Object obj)", "public int hashCode()", "private android.icu.text.RuleBasedCollator collAsICU()" ],
  "variableNames" : [ ]
}