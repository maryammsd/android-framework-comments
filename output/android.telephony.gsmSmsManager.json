{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/gsm/SmsManager.java",
  "packageName" : "android.telephony.gsm",
  "className" : "SmsManager",
  "comment" : "\n * Manages SMS operations such as sending data, text, and pdu SMS messages.\n * Get this object by calling the static method SmsManager.getDefault().\n * @deprecated Replaced by android.telephony.SmsManager that supports both GSM and CDMA.\n ",
  "variables" : [ {
    "name" : "sInstance",
    "type" : "SmsManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSmsMgrProxy",
    "type" : "android.telephony.SmsManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "STATUS_ON_SIM_FREE",
    "type" : "int",
    "comment" : " Free space (TS 51.011 10.5.3).\n     *  @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ON_SIM_READ",
    "type" : "int",
    "comment" : " Received and read (TS 51.011 10.5.3).\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ON_SIM_UNREAD",
    "type" : "int",
    "comment" : " Received and unread (TS 51.011 10.5.3).\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ON_SIM_SENT",
    "type" : "int",
    "comment" : " Stored and sent (TS 51.011 10.5.3).\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "STATUS_ON_SIM_UNSENT",
    "type" : "int",
    "comment" : " Stored and unsent (TS 51.011 10.5.3).\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_GENERIC_FAILURE",
    "type" : "int",
    "comment" : " Generic failure cause\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_RADIO_OFF",
    "type" : "int",
    "comment" : " Failed because radio was explicitly turned off\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_NULL_PDU",
    "type" : "int",
    "comment" : " Failed because no pdu provided\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  }, {
    "name" : "RESULT_ERROR_NO_SERVICE",
    "type" : "int",
    "comment" : " Failed because service is currently unavailable\n     * @deprecated Use android.telephony.SmsManager. ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final SmsManager getDefault()",
    "returnType" : "SmsManager",
    "comment" : " Get the default instance of the SmsManager\n     *\n     * @return the default instance of the SmsManager\n     * @deprecated Use android.telephony.SmsManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void sendTextMessage(String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)",
    "returnType" : "void",
    "comment" : "\n     * Send a text based SMS.\n     *\n     * @param destinationAddress the address to send the message to\n     * @param scAddress is the service center address or null to use\n     *  the current default SMSC\n     * @param text the body of the message to send\n     * @param sentIntent if not NULL this <code>PendingIntent</code> is\n     *  broadcast when the message is successfully sent, or failed.\n     *  The result code will be <code>Activity.RESULT_OK<code> for success,\n     *  or one of these errors:\n     *  <code>RESULT_ERROR_GENERIC_FAILURE</code>\n     *  <code>RESULT_ERROR_RADIO_OFF</code>\n     *  <code>RESULT_ERROR_NULL_PDU</code>.\n     *  The per-application based SMS control checks sentIntent. If sentIntent\n     *  is NULL the caller will be checked against all unknown applications,\n     *  which cause smaller number of SMS to be sent in checking period.\n     * @param deliveryIntent if not NULL this <code>PendingIntent</code> is\n     *  broadcast when the message is delivered to the recipient.  The\n     *  raw pdu of the status report is in the extended data (\"pdu\").\n     *\n     * @throws IllegalArgumentException if destinationAddress or text are empty\n     * @deprecated Use android.telephony.SmsManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<String> divideMessage(String text)",
    "returnType" : "ArrayList<String>",
    "comment" : "\n     * Divide a text message into several messages, none bigger than\n     * the maximum SMS message size.\n     *\n     * @param text the original message.  Must not be null.\n     * @return an <code>ArrayList</code> of strings that, in order,\n     *   comprise the original message\n     * @deprecated Use android.telephony.SmsManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void sendMultipartTextMessage(String destinationAddress, String scAddress, ArrayList<String> parts, ArrayList<PendingIntent> sentIntents, ArrayList<PendingIntent> deliveryIntents)",
    "returnType" : "void",
    "comment" : "\n     * Send a multi-part text based SMS.  The callee should have already\n     * divided the message into correctly sized parts by calling\n     * <code>divideMessage</code>.\n     *\n     * @param destinationAddress the address to send the message to\n     * @param scAddress is the service center address or null to use\n     *   the current default SMSC\n     * @param parts an <code>ArrayList</code> of strings that, in order,\n     *   comprise the original message\n     * @param sentIntents if not null, an <code>ArrayList</code> of\n     *   <code>PendingIntent</code>s (one for each message part) that is\n     *   broadcast when the corresponding message part has been sent.\n     *   The result code will be <code>Activity.RESULT_OK<code> for success,\n     *   or one of these errors:\n     *   <code>RESULT_ERROR_GENERIC_FAILURE</code>\n     *   <code>RESULT_ERROR_RADIO_OFF</code>\n     *   <code>RESULT_ERROR_NULL_PDU</code>.\n     *   The per-application based SMS control checks sentIntent. If sentIntent\n     *   is NULL the caller will be checked against all unknown applicaitons,\n     *   which cause smaller number of SMS to be sent in checking period.\n     * @param deliveryIntents if not null, an <code>ArrayList</code> of\n     *   <code>PendingIntent</code>s (one for each message part) that is\n     *   broadcast when the corresponding message part has been delivered\n     *   to the recipient.  The raw pdu of the status report is in the\n     *   extended data (\"pdu\").\n     *\n     * @throws IllegalArgumentException if destinationAddress or data are empty\n     * @deprecated Use android.telephony.SmsManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final void sendDataMessage(String destinationAddress, String scAddress, short destinationPort, byte[] data, PendingIntent sentIntent, PendingIntent deliveryIntent)",
    "returnType" : "void",
    "comment" : "\n     * Send a data based SMS to a specific application port.\n     *\n     * @param destinationAddress the address to send the message to\n     * @param scAddress is the service center address or null to use\n     *  the current default SMSC\n     * @param destinationPort the port to deliver the message to\n     * @param data the body of the message to send\n     * @param sentIntent if not NULL this <code>PendingIntent</code> is\n     *  broadcast when the message is sucessfully sent, or failed.\n     *  The result code will be <code>Activity.RESULT_OK<code> for success,\n     *  or one of these errors:\n     *  <code>RESULT_ERROR_GENERIC_FAILURE</code>\n     *  <code>RESULT_ERROR_RADIO_OFF</code>\n     *  <code>RESULT_ERROR_NULL_PDU</code>.\n     *  The per-application based SMS control checks sentIntent. If sentIntent\n     *  is NULL the caller will be checked against all unknown applicaitons,\n     *  which cause smaller number of SMS to be sent in checking period.\n     * @param deliveryIntent if not NULL this <code>PendingIntent</code> is\n     *  broadcast when the message is delivered to the recipient.  The\n     *  raw pdu of the status report is in the extended data (\"pdu\").\n     *\n     * @throws IllegalArgumentException if destinationAddress or data are empty\n     * @deprecated Use android.telephony.SmsManager.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean copyMessageToSim(byte[] smsc, byte[] pdu, int status)",
    "returnType" : "boolean",
    "comment" : "\n     * Copy a raw SMS PDU to the SIM.\n     *\n     * @param smsc the SMSC for this message, or NULL for the default SMSC\n     * @param pdu the raw PDU to store\n     * @param status message status (STATUS_ON_SIM_READ, STATUS_ON_SIM_UNREAD,\n     *               STATUS_ON_SIM_SENT, STATUS_ON_SIM_UNSENT)\n     * @return true for success\n     * @deprecated Use android.telephony.SmsManager.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean deleteMessageFromSim(int messageIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Delete the specified message from the SIM.\n     *\n     * @param messageIndex is the record index of the message on SIM\n     * @return true for success\n     * @deprecated Use android.telephony.SmsManager.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final boolean updateMessageOnSim(int messageIndex, int newStatus, byte[] pdu)",
    "returnType" : "boolean",
    "comment" : "\n     * Update the specified message on the SIM.\n     *\n     * @param messageIndex record index of message to update\n     * @param newStatus new message status (STATUS_ON_SIM_READ,\n     *                  STATUS_ON_SIM_UNREAD, STATUS_ON_SIM_SENT,\n     *                  STATUS_ON_SIM_UNSENT, STATUS_ON_SIM_FREE)\n     * @param pdu the raw PDU to store\n     * @return true for success\n     * @deprecated Use android.telephony.SmsManager.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final ArrayList<android.telephony.SmsMessage> getAllMessagesFromSim()",
    "returnType" : "ArrayList<android.telephony.SmsMessage>",
    "comment" : "\n     * Retrieves all messages currently stored on SIM.\n     * @return <code>ArrayList</code> of <code>SmsMessage</code> objects\n     * @deprecated Use android.telephony.SmsManager.\n     * {@hide}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "sInstance", "mSmsMgrProxy", "STATUS_ON_SIM_FREE", "STATUS_ON_SIM_READ", "STATUS_ON_SIM_UNREAD", "STATUS_ON_SIM_SENT", "STATUS_ON_SIM_UNSENT", "RESULT_ERROR_GENERIC_FAILURE", "RESULT_ERROR_RADIO_OFF", "RESULT_ERROR_NULL_PDU", "RESULT_ERROR_NO_SERVICE" ],
  "methodNames" : [ "public static final SmsManager getDefault()", "public final void sendTextMessage(String destinationAddress, String scAddress, String text, PendingIntent sentIntent, PendingIntent deliveryIntent)", "public final ArrayList<String> divideMessage(String text)", "public final void sendMultipartTextMessage(String destinationAddress, String scAddress, ArrayList<String> parts, ArrayList<PendingIntent> sentIntents, ArrayList<PendingIntent> deliveryIntents)", "public final void sendDataMessage(String destinationAddress, String scAddress, short destinationPort, byte[] data, PendingIntent sentIntent, PendingIntent deliveryIntent)", "public final boolean copyMessageToSim(byte[] smsc, byte[] pdu, int status)", "public final boolean deleteMessageFromSim(int messageIndex)", "public final boolean updateMessageOnSim(int messageIndex, int newStatus, byte[] pdu)", "public final ArrayList<android.telephony.SmsMessage> getAllMessagesFromSim()" ]
}