{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/UrlQuerySanitizer.java",
  "packageName" : "android.net",
  "className" : "UrlQuerySanitizer",
  "comment" : "\n *\n * Sanitizes the Query portion of a URL. Simple example:\n * <pre class=\"prettyprint\">\n * UrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n * sanitizer.setAllowUnregisteredParamaters(true);\n * sanitizer.parseUrl(\"http://example.com/?name=Joe+User\");\n * String name = sanitizer.getValue(\"name\"));\n * // name now contains \"Joe_User\"\n * </pre>\n *\n * Register ValueSanitizers to customize the way individual\n * parameters are sanitized:\n * <pre class=\"prettyprint\">\n * UrlQuerySanitizer sanitizer = new UrlQuerySanitizer();\n * sanitizer.registerParamater(\"name\", UrlQuerySanitizer.createSpaceLegal());\n * sanitizer.parseUrl(\"http://example.com/?name=Joe+User\");\n * String name = sanitizer.getValue(\"name\"));\n * // name now contains \"Joe User\". (The string is first decoded, which\n * // converts the '+' to a ' '. Then the string is sanitized, which\n * // converts the ' ' to an '_'. (The ' ' is converted because the default\n * unregistered parameter sanitizer does not allow any special characters,\n * and ' ' is a special character.)\n * </pre>\n * <p>\n * There are several ways to create ValueSanitizers. In order of increasing\n * sophistication:\n* </p>\n * <ol>\n * <li>Call one of the UrlQuerySanitizer.createXXX() methods.\n * <li>Construct your own instance of\n * UrlQuerySanitizer.IllegalCharacterValueSanitizer.\n * <li>Subclass UrlQuerySanitizer.ValueSanitizer to define your own value\n * sanitizer.\n * </ol>\n *\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mSanitizers",
    "type" : "HashMap<String, ValueSanitizer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntries",
    "type" : "HashMap<String, String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEntriesList",
    "type" : "ArrayList<ParameterValuePair>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllowUnregisteredParamaters",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPreferFirstRepeatedParameter",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUnregisteredParameterValueSanitizer",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllIllegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllButNulLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllButWhitespaceLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sURLLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sUrlAndSpaceLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAmpLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAmpAndSpaceLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sSpaceLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sAllButNulAndAngleBracketsLegal",
    "type" : "ValueSanitizer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "plusOrPercent",
    "type" : "Pattern",
    "comment" : "\n     * Unescape an escaped string.\n     * <ul>\n     * <li>'+' characters are replaced by\n     * ' ' characters.\n     * <li>Valid \"%xx\" escape sequences are replaced by the\n     * corresponding unescaped character.\n     * <li>Invalid escape sequences such as %1z\", are passed through unchanged.\n     * <ol>\n     * @param string the escaped string\n     * @return the unescaped string.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public ValueSanitizer getUnregisteredParameterValueSanitizer()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Get the current value sanitizer used when processing\n     * unregistered parameter values.\n     * <p>\n     * <b>Note:</b> The default unregistered parameter value sanitizer is\n     * one that doesn't allow any special characters, similar to what\n     * is returned by calling createAllIllegal.\n     *\n     * @return the current ValueSanitizer used to sanitize unregistered\n     * parameter values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUnregisteredParameterValueSanitizer(ValueSanitizer sanitizer)",
    "returnType" : "void",
    "comment" : "\n     * Set the value sanitizer used when processing unregistered\n     * parameter values.\n     * @param sanitizer set the ValueSanitizer used to sanitize unregistered\n     * parameter values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAllIllegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that does not allow any special characters,\n     * and also does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAllButNulLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that allows everything except Nul ('\\0')\n     * characters. Script URLs are allowed.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAllButWhitespaceLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that allows everything except Nul ('\\0')\n     * characters, space (' '), and other whitespace characters.\n     * Script URLs are allowed.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getUrlLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that allows all the characters used by\n     * encoded URLs. Does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getUrlAndSpaceLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that allows all the characters used by\n     * encoded URLs and allows spaces, which are not technically legal\n     * in encoded URLs, but commonly appear anyway.\n     * Does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAmpLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that does not allow any special characters\n     * except ampersand ('&'). Does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAmpAndSpaceLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that does not allow any special characters\n     * except ampersand ('&') and space (' '). Does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getSpaceLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that does not allow any special characters\n     * except space (' '). Does not allow script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ValueSanitizer getAllButNulAndAngleBracketsLegal()",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Return a value sanitizer that allows any special characters\n     * except angle brackets ('<' and '>') and Nul ('\\0').\n     * Allows script URLs.\n     * @return a value sanitizer\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parseUrl(String url)",
    "returnType" : "void",
    "comment" : "\n     * Parse the query parameters out of an encoded URL.\n     * Works by extracting the query portion from the URL and then\n     * calling parseQuery(). If there is no query portion it is\n     * treated as if the query portion is an empty string.\n     * @param url the encoded URL to parse.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void parseQuery(String query)",
    "returnType" : "void",
    "comment" : "\n     * Parse a query. A query string is any number of parameter-value clauses\n     * separated by any non-zero number of ampersands. A parameter-value clause\n     * is a parameter followed by an equal sign, followed by a value. If the\n     * equal sign is missing, the value is assumed to be the empty string.\n     * @param query the query to parse.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Set<String> getParameterSet()",
    "returnType" : "Set<String>",
    "comment" : "\n     * Get a set of all of the parameters found in the sanitized query.\n     * <p>\n     * Note: Do not modify this set. Treat it as a read-only set.\n     * @return all the parameters found in the current query.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<ParameterValuePair> getParameterList()",
    "returnType" : "List<ParameterValuePair>",
    "comment" : "\n     * An array list of all of the parameter-value pairs in the sanitized\n     * query, in the order they appeared in the query. May contain duplicate\n     * parameters.\n     * <p class=\"note\"><b>Note:</b> Do not modify this list. Treat it as a read-only list.</p>\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasParameter(String parameter)",
    "returnType" : "boolean",
    "comment" : "\n     * Check if a parameter exists in the current sanitized query.\n     * @param parameter the unencoded name of a parameter.\n     * @return true if the parameter exists in the current sanitized queary.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getValue(String parameter)",
    "returnType" : "String",
    "comment" : "\n     * Get the value for a parameter in the current sanitized query.\n     * Returns null if the parameter does not\n     * exit.\n     * @param parameter the unencoded name of a parameter.\n     * @return the sanitized unencoded value of the parameter,\n     * or null if the parameter does not exist.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerParameter(String parameter, ValueSanitizer valueSanitizer)",
    "returnType" : "void",
    "comment" : "\n     * Register a value sanitizer for a particular parameter. Can also be used\n     * to replace or remove an already-set value sanitizer.\n     * <p>\n     * Registering a non-null value sanitizer for a particular parameter\n     * makes that parameter a registered parameter.\n     * @param parameter an unencoded parameter name\n     * @param valueSanitizer the value sanitizer to use for a particular\n     * parameter. May be null in order to unregister that parameter.\n     * @see #getAllowUnregisteredParamaters()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerParameters(String[] parameters, ValueSanitizer valueSanitizer)",
    "returnType" : "void",
    "comment" : "\n     * Register a value sanitizer for an array of parameters.\n     * @param parameters An array of unencoded parameter names.\n     * @param valueSanitizer\n     * @see #registerParameter\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAllowUnregisteredParamaters(boolean allowUnregisteredParamaters)",
    "returnType" : "void",
    "comment" : "\n     * Set whether or not unregistered parameters are allowed. If they\n     * are not allowed, then they will be dropped when a query is sanitized.\n     * <p>\n     * Defaults to false.\n     * @param allowUnregisteredParamaters true to allow unregistered parameters.\n     * @see #getAllowUnregisteredParamaters()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAllowUnregisteredParamaters()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether or not unregistered parameters are allowed. If not\n     * allowed, they will be dropped when a query is parsed.\n     * @return true if unregistered parameters are allowed.\n     * @see #setAllowUnregisteredParamaters(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPreferFirstRepeatedParameter(boolean preferFirstRepeatedParameter)",
    "returnType" : "void",
    "comment" : "\n     * Set whether or not the first occurrence of a repeated parameter is\n     * preferred. True means the first repeated parameter is preferred.\n     * False means that the last repeated parameter is preferred.\n     * <p>\n     * The preferred parameter is the one that is returned when getParameter\n     * is called.\n     * <p>\n     * defaults to false.\n     * @param preferFirstRepeatedParameter True if the first repeated\n     * parameter is preferred.\n     * @see #getPreferFirstRepeatedParameter()\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getPreferFirstRepeatedParameter()",
    "returnType" : "boolean",
    "comment" : "\n     * Get whether or not the first occurrence of a repeated parameter is\n     * preferred.\n     * @return true if the first occurrence of a repeated parameter is\n     * preferred.\n     * @see #setPreferFirstRepeatedParameter(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void parseEntry(String parameter, String value)",
    "returnType" : "void",
    "comment" : "\n     * Parse an escaped parameter-value pair. The default implementation\n     * unescapes both the parameter and the value, then looks up the\n     * effective value sanitizer for the parameter and uses it to sanitize\n     * the value. If all goes well then addSanitizedValue is called with\n     * the unescaped parameter and the sanitized unescaped value.\n     * @param parameter an escaped parameter\n     * @param value an unsanitized escaped value\n     ",
    "links" : [ ]
  }, {
    "name" : "protected void addSanitizedEntry(String parameter, String value)",
    "returnType" : "void",
    "comment" : "\n     * Record a sanitized parameter-value pair. Override if you want to\n     * do additional filtering or validation.\n     * @param parameter an unescaped parameter\n     * @param value a sanitized unescaped value\n     ",
    "links" : [ ]
  }, {
    "name" : "public ValueSanitizer getValueSanitizer(String parameter)",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Get the value sanitizer for a parameter. Returns null if there\n     * is no value sanitizer registered for the parameter.\n     * @param parameter the unescaped parameter\n     * @return the currently registered value sanitizer for this parameter.\n     * @see #registerParameter(String, android.net.UrlQuerySanitizer.ValueSanitizer)\n     ",
    "links" : [ ]
  }, {
    "name" : "public ValueSanitizer getEffectiveValueSanitizer(String parameter)",
    "returnType" : "ValueSanitizer",
    "comment" : "\n     * Get the effective value sanitizer for a parameter. Like getValueSanitizer,\n     * except if there is no value sanitizer registered for a parameter, and\n     * unregistered parameters are allowed, then the default value sanitizer is\n     * returned.\n     * @param parameter an unescaped parameter\n     * @return the effective value sanitizer for a parameter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String unescape(String string)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean isHexDigit(char c)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a character is a hexidecimal digit. Both upper case and lower\n     * case hex digits are allowed.\n     * @param c the character to test\n     * @return true if c is a hex digit.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int decodeHexDigit(char c)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void clear()",
    "returnType" : "void",
    "comment" : "\n     * Clear the existing entries. Called to get ready to parse a new\n     * query string.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public ValueSanitizer getUnregisteredParameterValueSanitizer()", "public void setUnregisteredParameterValueSanitizer(ValueSanitizer sanitizer)", "public static final ValueSanitizer getAllIllegal()", "public static final ValueSanitizer getAllButNulLegal()", "public static final ValueSanitizer getAllButWhitespaceLegal()", "public static final ValueSanitizer getUrlLegal()", "public static final ValueSanitizer getUrlAndSpaceLegal()", "public static final ValueSanitizer getAmpLegal()", "public static final ValueSanitizer getAmpAndSpaceLegal()", "public static final ValueSanitizer getSpaceLegal()", "public static final ValueSanitizer getAllButNulAndAngleBracketsLegal()", "public void parseUrl(String url)", "public void parseQuery(String query)", "public Set<String> getParameterSet()", "public List<ParameterValuePair> getParameterList()", "public boolean hasParameter(String parameter)", "public String getValue(String parameter)", "public void registerParameter(String parameter, ValueSanitizer valueSanitizer)", "public void registerParameters(String[] parameters, ValueSanitizer valueSanitizer)", "public void setAllowUnregisteredParamaters(boolean allowUnregisteredParamaters)", "public boolean getAllowUnregisteredParamaters()", "public void setPreferFirstRepeatedParameter(boolean preferFirstRepeatedParameter)", "public boolean getPreferFirstRepeatedParameter()", "protected void parseEntry(String parameter, String value)", "protected void addSanitizedEntry(String parameter, String value)", "public ValueSanitizer getValueSanitizer(String parameter)", "public ValueSanitizer getEffectiveValueSanitizer(String parameter)", "public String unescape(String string)", "protected boolean isHexDigit(char c)", "protected int decodeHexDigit(char c)", "protected void clear()" ],
  "variableNames" : [ "mSanitizers", "mEntries", "mEntriesList", "mAllowUnregisteredParamaters", "mPreferFirstRepeatedParameter", "mUnregisteredParameterValueSanitizer", "sAllIllegal", "sAllButNulLegal", "sAllButWhitespaceLegal", "sURLLegal", "sUrlAndSpaceLegal", "sAmpLegal", "sAmpAndSpaceLegal", "sSpaceLegal", "sAllButNulAndAngleBracketsLegal", "plusOrPercent" ]
}