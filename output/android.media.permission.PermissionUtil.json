{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/permission/PermissionUtil.java",
  "packageName" : "android.media.permission",
  "className" : "PermissionUtil",
  "comment" : "\n * This module provides some utility methods for facilitating our permission enforcement patterns.\n * <p>\n * <h1>Intended usage:</h1>\n * Close to the client-facing edge of the server, first authenticate the client, using {@link\n * #establishIdentityDirect(Identity)}, or {@link #establishIdentityIndirect(Context, String,\n * Identity, Identity)}, depending on whether the client is trying to authenticate as the\n * originator or a middleman. Those methods will establish a scope with the originator in the\n * {@link android.media.permission.IdentityContext} and a cleared binder calling identity.\n * Typically there would be two distinct API methods for the two different options, and typically\n * those API methods would be used to establish a client session which is associated with the\n * originator for the lifetime of the session.\n * <p>\n * When performing an operation that requires permissions, use {@link\n * #checkPermissionForPreflight(Context, Identity, String)} or {@link\n * #checkPermissionForDataDelivery(Context, Identity, String, String)} on the originator\n * identity. Note that this won't typically be the identity pulled from the {@link\n * android.media.permission.IdentityContext}, since we are working with a session-based approach,\n * the originator identity will be established once upon creation of a session, and then all\n * interactions with this session will using the identity attached to the session. This also covers\n * performing checks prior to invoking client callbacks for data delivery.\n *\n * @hide\n ",
  "links" : [ "#establishIdentityIndirect(Context", "android.media.permission.IdentityContext", "#checkPermissionForDataDelivery(Context", "#establishIdentityDirect(Identity)", "#checkPermissionForPreflight(Context" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static SafeCloseable establishIdentityIndirect(@NonNull Context context, @NonNull String middlemanPermission, @NonNull Identity middlemanIdentity, @NonNull Identity originatorIdentity)",
    "returnType" : "SafeCloseable",
    "comment" : "\n     * Authenticate an originator, where the binder call is coming from a middleman.\n     *\n     * The middleman is expected to hold a special permission to act as such, or else a\n     * {@link SecurityException} will be thrown. If the call succeeds:\n     * <ul>\n     *     <li>The passed middlemanIdentity argument will have its uid/pid fields overridden with\n     *     those provided by binder.\n     *     <li>An {@link SafeCloseable} is returned, used to established a scope in which the\n     *     originator identity is available via {@link android.media.permission.IdentityContext}\n     *     and in which the binder\n     *     calling ID is cleared.\n     * </ul>\n     * Example usage:\n     * <pre>\n     *     try (SafeCloseable ignored = PermissionUtil.establishIdentityIndirect(...)) {\n     *         // Within this scope we have the identity context established, and the binder calling\n     *         // identity cleared.\n     *         ...\n     *         Identity originator = IdentityContext.getNonNull();\n     *         ...\n     *     }\n     *     // outside the scope, everything is back to the prior state.\n     * </pre>\n     * <p>\n     * <b>Important note:</b> The binder calling ID will be used to securely establish the identity\n     * of the middleman. However, if the middleman is on the same process as the server,\n     * the middleman must remember to clear the binder calling identity, or else the binder calling\n     * ID will reflect the process calling into the middleman, not the middleman process itself. If\n     * the middleman itself is using this API, this is typically not an issue, since this method\n     * will take care of that.\n     *\n     * @param context             A {@link Context}, used for permission checks.\n     * @param middlemanPermission The permission that will be checked in order to authorize the\n     *                            middleman to act as such (i.e. be trusted to convey the\n     *                            originator\n     *                            identity reliably).\n     * @param middlemanIdentity   The identity of the middleman.\n     * @param originatorIdentity  The identity of the originator.\n     * @return A {@link SafeCloseable}, used to establish a scope, as mentioned above.\n     ",
    "links" : [ "android.media.permission.SafeCloseable", "android.content.Context", "SecurityException", "android.media.permission.IdentityContext" ]
  }, {
    "name" : "public static SafeCloseable establishIdentityDirect(@NonNull Identity originatorIdentity)",
    "returnType" : "SafeCloseable",
    "comment" : "\n     * Authenticate an originator, where the binder call is coming directly from the originator.\n     *\n     * If the call succeeds:\n     * <ul>\n     *     <li>The passed originatorIdentity argument will have its uid/pid fields overridden with\n     *     those provided by binder.\n     *     <li>A {@link SafeCloseable} is returned, used to established a scope in which the\n     *     originator identity is available via {@link IdentityContext} and in which the binder\n     *     calling ID is cleared.\n     * </ul>\n     * Example usage:\n     * <pre>\n     *     try (AutoClosable ignored = PermissionUtil.establishIdentityDirect(...)) {\n     *         // Within this scope we have the identity context established, and the binder calling\n     *         // identity cleared.\n     *         ...\n     *         Identity originator = IdentityContext.getNonNull();\n     *         ...\n     *     }\n     *     // outside the scope, everything is back to the prior state.\n     * </pre>\n     * <p>\n     * <b>Important note:</b> The binder calling ID will be used to securely establish the identity\n     * of the client. However, if the client is on the same process as the server, and is itself a\n     * binder server, it must remember to clear the binder calling identity, or else the binder\n     * calling ID will reflect the process calling into the client, not the client process itself.\n     * If the client itself is using this API, this is typically not an issue, since this method\n     * will take care of that.\n     *\n     * @param originatorIdentity The identity of the originator.\n     * @return A {@link SafeCloseable}, used to establish a scope, as mentioned above.\n     ",
    "links" : [ "android.media.permission.SafeCloseable", "android.media.permission.IdentityContext" ]
  }, {
    "name" : "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull Identity identity, @NonNull String permission, @NonNull String reason)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the given identity has the given permission to receive data.\n     *\n     * @param context    A {@link Context}, used for permission checks.\n     * @param identity   The identity to check.\n     * @param permission The identifier of the permission we want to check.\n     * @param reason     The reason why we're requesting the permission, for auditing purposes.\n     * @return The permission check result which is either\n     * {@link PermissionChecker#PERMISSION_GRANTED}\n     * or {@link PermissionChecker#PERMISSION_SOFT_DENIED} or\n     * {@link PermissionChecker#PERMISSION_HARD_DENIED}.\n     ",
    "links" : [ "android.content.Context", "android.content.PermissionChecker#PERMISSION_GRANTED", "android.content.PermissionChecker#PERMISSION_HARD_DENIED", "android.content.PermissionChecker#PERMISSION_SOFT_DENIED" ]
  }, {
    "name" : "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull Identity identity, @NonNull String permission)",
    "returnType" : "int",
    "comment" : "\n     * Checks whether the given identity has the given permission.\n     *\n     * @param context    A {@link Context}, used for permission checks.\n     * @param identity   The identity to check.\n     * @param permission The identifier of the permission we want to check.\n     * @return The permission check result which is either\n     * {@link PermissionChecker#PERMISSION_GRANTED}\n     * or {@link PermissionChecker#PERMISSION_SOFT_DENIED} or\n     * {@link PermissionChecker#PERMISSION_HARD_DENIED}.\n     ",
    "links" : [ "android.content.Context", "android.content.PermissionChecker#PERMISSION_GRANTED", "android.content.PermissionChecker#PERMISSION_HARD_DENIED", "android.content.PermissionChecker#PERMISSION_SOFT_DENIED" ]
  } ],
  "methodNames" : [ "public static SafeCloseable establishIdentityIndirect(@NonNull Context context, @NonNull String middlemanPermission, @NonNull Identity middlemanIdentity, @NonNull Identity originatorIdentity)", "public static SafeCloseable establishIdentityDirect(@NonNull Identity originatorIdentity)", "public static int checkPermissionForDataDelivery(@NonNull Context context, @NonNull Identity identity, @NonNull String permission, @NonNull String reason)", "public static int checkPermissionForPreflight(@NonNull Context context, @NonNull Identity identity, @NonNull String permission)" ],
  "variableNames" : [ ]
}