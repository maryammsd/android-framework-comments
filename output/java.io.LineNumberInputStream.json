{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/io/LineNumberInputStream.java",
  "packageName" : "java.io",
  "className" : "LineNumberInputStream",
  "comment" : "\n * This class is an input stream filter that provides the added\n * functionality of keeping track of the current line number.\n * <p>\n * A line is a sequence of bytes ending with a carriage return\n * character ({@code '\\u005Cr'}), a newline character\n * ({@code '\\u005Cn'}), or a carriage return character followed\n * immediately by a linefeed character. In all three cases, the line\n * terminating character(s) are returned as a single newline character.\n * <p>\n * The line number begins at {@code 0}, and is incremented by\n * {@code 1} when a {@code read} returns a newline character.\n *\n * @author     Arthur van Hoff\n * @see        java.io.LineNumberReader\n * @since      1.0\n * @deprecated This class incorrectly assumes that bytes adequately represent\n *             characters.  As of JDK&nbsp;1.1, the preferred way to operate on\n *             character streams is via the new character-stream classes, which\n *             include a class for counting line numbers.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "pushBack",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "lineNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "markLineNumber",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "markPushBack",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int read() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads the next byte of data from this input stream. The value\n     * byte is returned as an {@code int} in the range\n     * {@code 0} to {@code 255}. If no byte is available\n     * because the end of the stream has been reached, the value\n     * {@code -1} is returned. This method blocks until input data\n     * is available, the end of the stream is detected, or an exception\n     * is thrown.\n     * <p>\n     * The {@code read} method of\n     * {@code LineNumberInputStream} calls the {@code read}\n     * method of the underlying input stream. It checks for carriage\n     * returns and newline characters in the input, and modifies the\n     * current line number as appropriate. A carriage-return character or\n     * a carriage return followed by a newline character are both\n     * converted into a single newline character.\n     *\n     * @return     the next byte of data, or {@code -1} if the end of this\n     *             stream is reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.LineNumberInputStream#getLineNumber()\n     ",
    "links" : [ ]
  }, {
    "name" : "public int read(byte[] b, int off, int len) throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Reads up to {@code len} bytes of data from this input stream\n     * into an array of bytes. This method blocks until some input is available.\n     * <p>\n     * The {@code read} method of\n     * {@code LineNumberInputStream} repeatedly calls the\n     * {@code read} method of zero arguments to fill in the byte array.\n     *\n     * @param      b     the buffer into which the data is read.\n     * @param      off   the start offset of the data.\n     * @param      len   the maximum number of bytes read.\n     * @return     the total number of bytes read into the buffer, or\n     *             {@code -1} if there is no more data because the end of\n     *             this stream has been reached.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.LineNumberInputStream#read()\n     ",
    "links" : [ ]
  }, {
    "name" : "public long skip(long n) throws IOException",
    "returnType" : "long",
    "comment" : "\n     * Skips over and discards {@code n} bytes of data from this\n     * input stream. The {@code skip} method may, for a variety of\n     * reasons, end up skipping over some smaller number of bytes,\n     * possibly {@code 0}. The actual number of bytes skipped is\n     * returned.  If {@code n} is negative, no bytes are skipped.\n     * <p>\n     * The {@code skip} method of {@code LineNumberInputStream} creates\n     * a byte array and then repeatedly reads into it until\n     * {@code n} bytes have been read or the end of the stream has\n     * been reached.\n     *\n     * @param      n   the number of bytes to be skipped.\n     * @return     the actual number of bytes skipped.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setLineNumber(int lineNumber)",
    "returnType" : "void",
    "comment" : "\n     * Sets the line number to the specified argument.\n     *\n     * @param      lineNumber   the new line number.\n     * @see #getLineNumber\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLineNumber()",
    "returnType" : "int",
    "comment" : "\n     * Returns the current line number.\n     *\n     * @return     the current line number.\n     * @see #setLineNumber\n     ",
    "links" : [ ]
  }, {
    "name" : "public int available() throws IOException",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of bytes that can be read from this input\n     * stream without blocking.\n     * <p>\n     * Note that if the underlying input stream is able to supply\n     * <i>k</i> input characters without blocking, the\n     * {@code LineNumberInputStream} can guarantee only to provide\n     * <i>k</i>/2 characters without blocking, because the\n     * <i>k</i> characters from the underlying input stream might\n     * consist of <i>k</i>/2 pairs of {@code '\\u005Cr'} and\n     * {@code '\\u005Cn'}, which are converted to just\n     * <i>k</i>/2 {@code '\\u005Cn'} characters.\n     *\n     * @return     the number of bytes that can be read from this input stream\n     *             without blocking.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     ",
    "links" : [ ]
  }, {
    "name" : "public void mark(int readlimit)",
    "returnType" : "void",
    "comment" : "\n     * Marks the current position in this input stream. A subsequent\n     * call to the {@code reset} method repositions this stream at\n     * the last marked position so that subsequent reads re-read the same bytes.\n     * <p>\n     * The {@code mark} method of\n     * {@code LineNumberInputStream} remembers the current line\n     * number in a private variable, and then calls the {@code mark}\n     * method of the underlying input stream.\n     *\n     * @param   readlimit   the maximum limit of bytes that can be read before\n     *                      the mark position becomes invalid.\n     * @see     java.io.FilterInputStream#in\n     * @see     java.io.LineNumberInputStream#reset()\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Repositions this stream to the position at the time the\n     * {@code mark} method was last called on this input stream.\n     * <p>\n     * The {@code reset} method of\n     * {@code LineNumberInputStream} resets the line number to be\n     * the line number at the time the {@code mark} method was\n     * called, and then calls the {@code reset} method of the\n     * underlying input stream.\n     * <p>\n     * Stream marks are intended to be used in\n     * situations where you need to read ahead a little to see what's in\n     * the stream. Often this is most easily done by invoking some\n     * general parser. If the stream is of the type handled by the\n     * parser, it just chugs along happily. If the stream is not of\n     * that type, the parser should toss an exception when it fails,\n     * which, if it happens within readlimit bytes, allows the outer\n     * code to reset the stream and try another parser.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @see        java.io.FilterInputStream#in\n     * @see        java.io.LineNumberInputStream#mark(int)\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int read() throws IOException", "public int read(byte[] b, int off, int len) throws IOException", "public long skip(long n) throws IOException", "public void setLineNumber(int lineNumber)", "public int getLineNumber()", "public int available() throws IOException", "public void mark(int readlimit)", "public void reset() throws IOException" ],
  "variableNames" : [ "pushBack", "lineNumber", "markLineNumber", "markPushBack" ]
}