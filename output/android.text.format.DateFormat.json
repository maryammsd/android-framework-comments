{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/text/format/DateFormat.java",
  "packageName" : "android.text.format",
  "className" : "DateFormat",
  "comment" : "\n * Utility class for producing strings with formatted date/time.\n *\n * <p>Most callers should avoid supplying their own format strings to this\n * class' {@code format} methods and rely on the correctly localized ones\n * supplied by the system. This class' factory methods return\n * appropriately-localized {@link java.text.DateFormat} instances, suitable\n * for both formatting and parsing dates. For the canonical documentation\n * of format strings, see {@link java.text.SimpleDateFormat}.\n *\n * <p>In cases where the system does not provide a suitable pattern,\n * this class offers the {@link #getBestDateTimePattern} method.\n *\n * <p>The {@code format} methods in this class implement a subset of Unicode\n * <a href=\"http://www.unicode.org/reports/tr35/#Date_Format_Patterns\">UTS #35</a> patterns.\n * The subset currently supported by this class includes the following format characters:\n * {@code acdEHhLKkLMmsyz}. Up to API level 17, only {@code adEhkMmszy} were supported.\n * Note that this class incorrectly implements {@code k} as if it were {@code H} for backwards\n * compatibility.\n *\n * <p>See {@link java.text.SimpleDateFormat} for more documentation\n * about patterns, or if you need a more complete or correct implementation.\n * Note that the non-{@code format} methods in this class are implemented by\n * {@code SimpleDateFormat}.\n ",
  "links" : [ "java.text.SimpleDateFormat", "#getBestDateTimePattern", "java.text.DateFormat" ],
  "variables" : [ {
    "name" : "QUOTE",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code '} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "AM_PM",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'a'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "CAPITAL_AM_PM",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'a'} instead; 'A' was always equivalent to 'a'.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "DATE",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'd'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "DAY",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'E'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'h'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "HOUR_OF_DAY",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'H'} (for compatibility with {@link SimpleDateFormat}\n     * and Unicode) or {@code 'k'} (for compatibility with Android releases up to and including\n     * Jelly Bean MR-1) instead. Note that the two are incompatible.\n     *\n     * @removed\n     ",
    "links" : [ "java.text.SimpleDateFormat" ]
  }, {
    "name" : "MINUTE",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'm'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "MONTH",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'M'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "STANDALONE_MONTH",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'L'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "SECONDS",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 's'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "TIME_ZONE",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'z'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "YEAR",
    "type" : "char",
    "comment" : "\n     * @deprecated Use a literal {@code 'y'} instead.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "sLocaleLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIs24HourLocale",
    "type" : "Locale",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sIs24Hour",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISALLOW_DUPLICATE_FIELD_IN_SKELETON",
    "type" : "long",
    "comment" : "\n     * {@link #getBestDateTimePattern(Locale, String)} does not allow non-consecutive repeated\n     * symbol in the skeleton. For example, please use a skeleton of {@code \"jmm\"} or\n     * {@code \"hmma\"} instead of {@code \"ahmma\"} or {@code \"jmma\"}, because the field 'j' could\n     * mean using 12-hour in some locales and, in this case, is duplicated as the 'a' field.\n     ",
    "links" : [ "#getBestDateTimePattern(Locale" ]
  } ],
  "methods" : [ {
    "name" : "public static boolean is24HourFormat(Context context)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if times should be formatted as 24 hour times, false if times should be\n     * formatted as 12 hour (AM/PM) times. Based on the user's chosen locale and other preferences.\n     * @param context the context to use for the content resolver\n     * @return true if 24 hour time format is selected, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is24HourFormat(Context context, int userHandle)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if times should be formatted as 24 hour times, false if times should be\n     * formatted as 12 hour (AM/PM) times. Based on the user's chosen locale and other preferences.\n     * @param context the context to use for the content resolver\n     * @param userHandle the user handle of the user to query.\n     * @return true if 24 hour time format is selected, false otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is24HourLocale(@NonNull Locale locale)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the specified locale uses a 24-hour time format by default, ignoring user\n     * settings.\n     * @param locale the locale to check\n     * @return true if the locale uses a 24 hour time format by default, false otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getBestDateTimePattern(Locale locale, String skeleton)",
    "returnType" : "String",
    "comment" : "\n     * Returns the best possible localized form of the given skeleton for the given\n     * locale. A skeleton is similar to, and uses the same format characters as, a Unicode\n     * <a href=\"http://www.unicode.org/reports/tr35/#Date_Format_Patterns\">UTS #35</a>\n     * pattern.\n     *\n     * <p>One difference is that order is irrelevant. For example, \"MMMMd\" will return\n     * \"MMMM d\" in the {@code en_US} locale, but \"d. MMMM\" in the {@code de_CH} locale.\n     *\n     * <p>Note also in that second example that the necessary punctuation for German was\n     * added. For the same input in {@code es_ES}, we'd have even more extra text:\n     * \"d 'de' MMMM\".\n     *\n     * <p>This method will automatically correct for grammatical necessity. Given the\n     * same \"MMMMd\" input, this method will return \"d LLLL\" in the {@code fa_IR} locale,\n     * where stand-alone months are necessary. Lengths are preserved where meaningful,\n     * so \"Md\" would give a different result to \"MMMd\", say, except in a locale such as\n     * {@code ja_JP} where there is only one length of month.\n     *\n     * <p>This method will only return patterns that are in CLDR, and is useful whenever\n     * you know what elements you want in your format string but don't want to make your\n     * code specific to any one locale.\n     *\n     * @param locale the locale into which the skeleton should be localized\n     * @param skeleton a skeleton as described above\n     * @return a string pattern suitable for use with {@link java.text.SimpleDateFormat}.\n     ",
    "links" : [ "java.text.SimpleDateFormat" ]
  }, {
    "name" : "public static java.text.DateFormat getTimeFormat(Context context)",
    "returnType" : "java.text.DateFormat",
    "comment" : "\n     * Returns a {@link java.text.DateFormat} object that can format the time according\n     * to the context's locale and the user's 12-/24-hour clock preference.\n     * @param context the application context\n     * @return the {@link java.text.DateFormat} object that properly formats the time.\n     ",
    "links" : [ "java.text.DateFormat" ]
  }, {
    "name" : "public static String getTimeFormatString(Context context)",
    "returnType" : "String",
    "comment" : "\n     * Returns a String pattern that can be used to format the time according\n     * to the context's locale and the user's 12-/24-hour clock preference.\n     * @param context the application context\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getTimeFormatString(Context context, int userHandle)",
    "returnType" : "String",
    "comment" : "\n     * Returns a String pattern that can be used to format the time according\n     * to the context's locale and the user's 12-/24-hour clock preference.\n     * @param context the application context\n     * @param userHandle the user handle of the user to query the format for\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static java.text.DateFormat getDateFormat(Context context)",
    "returnType" : "java.text.DateFormat",
    "comment" : "\n     * Returns a {@link java.text.DateFormat} object that can format the date\n     * in short form according to the context's locale.\n     *\n     * @param context the application context\n     * @return the {@link java.text.DateFormat} object that properly formats the date.\n     ",
    "links" : [ "java.text.DateFormat" ]
  }, {
    "name" : "public static java.text.DateFormat getLongDateFormat(Context context)",
    "returnType" : "java.text.DateFormat",
    "comment" : "\n     * Returns a {@link java.text.DateFormat} object that can format the date\n     * in long form (such as {@code Monday, January 3, 2000}) for the context's locale.\n     * @param context the application context\n     * @return the {@link java.text.DateFormat} object that formats the date in long form.\n     ",
    "links" : [ "java.text.DateFormat" ]
  }, {
    "name" : "public static java.text.DateFormat getMediumDateFormat(Context context)",
    "returnType" : "java.text.DateFormat",
    "comment" : "\n     * Returns a {@link java.text.DateFormat} object that can format the date\n     * in medium form (such as {@code Jan 3, 2000}) for the context's locale.\n     * @param context the application context\n     * @return the {@link java.text.DateFormat} object that formats the date in long form.\n     ",
    "links" : [ "java.text.DateFormat" ]
  }, {
    "name" : "public static char[] getDateFormatOrder(Context context)",
    "returnType" : "char[]",
    "comment" : "\n     * Gets the current date format stored as a char array. Returns a 3 element\n     * array containing the day ({@code 'd'}), month ({@code 'M'}), and year ({@code 'y'}))\n     * in the order specified by the user's format preference.  Note that this order is\n     * <i>only</i> appropriate for all-numeric dates; spelled-out (MEDIUM and LONG)\n     * dates will generally contain other punctuation, spaces, or words,\n     * not just the day, month, and year, and not necessarily in the same\n     * order returned here.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static char[] getDateFormatOrder(String pattern)",
    "returnType" : "char[]",
    "comment" : "\n     * @hide Used by internal framework class {@link android.widget.DatePickerSpinnerDelegate}.\n     ",
    "links" : [ "android.widget.DatePickerSpinnerDelegate" ]
  }, {
    "name" : "private static String getDateFormatString(Context context)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence format(CharSequence inFormat, long inTimeInMillis)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Given a format string and a time in milliseconds since Jan 1, 1970 GMT, returns a\n     * CharSequence containing the requested date.\n     * @param inFormat the format string, as described in {@link android.text.format.DateFormat}\n     * @param inTimeInMillis in milliseconds since Jan 1, 1970 GMT\n     * @return a {@link CharSequence} containing the requested text\n     ",
    "links" : [ "android.text.format.DateFormat", "CharSequence" ]
  }, {
    "name" : "public static CharSequence format(CharSequence inFormat, Date inDate)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Given a format string and a {@link java.util.Date} object, returns a CharSequence containing\n     * the requested date.\n     * @param inFormat the format string, as described in {@link android.text.format.DateFormat}\n     * @param inDate the date to format\n     * @return a {@link CharSequence} containing the requested text\n     ",
    "links" : [ "android.text.format.DateFormat", "java.util.Date", "CharSequence" ]
  }, {
    "name" : "public static boolean hasSeconds(CharSequence inFormat)",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the specified format string contains seconds.\n     *\n     * Always returns false if the input format is null.\n     *\n     * @param inFormat the format string, as described in {@link android.text.format.DateFormat}\n     *\n     * @return true if the format string contains {@link #SECONDS}, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ "android.text.format.DateFormat", "#SECONDS" ]
  }, {
    "name" : "public static boolean hasDesignator(CharSequence inFormat, char designator)",
    "returnType" : "boolean",
    "comment" : "\n     * Test if a format string contains the given designator. Always returns\n     * {@code false} if the input format is {@code null}.\n     *\n     * Note that this is intended for searching for designators, not arbitrary\n     * characters. So searching for a literal single quote would not work correctly.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static CharSequence format(CharSequence inFormat, Calendar inDate)",
    "returnType" : "CharSequence",
    "comment" : "\n     * Given a format string and a {@link java.util.Calendar} object, returns a CharSequence\n     * containing the requested date.\n     * @param inFormat the format string, as described in {@link android.text.format.DateFormat}\n     * @param inDate the date to format\n     * @return a {@link CharSequence} containing the requested text\n     ",
    "links" : [ "android.text.format.DateFormat", "java.util.Calendar", "CharSequence" ]
  }, {
    "name" : "private static String getDayOfWeekString(DateFormatSymbols dfs, int day, int count, int kind)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getMonthString(DateFormatSymbols dfs, int month, int count, int kind)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getTimeZoneString(Calendar inDate, int count)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String formatZoneOffset(int offset, int count)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static String getYearString(int year, int count)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static int appendQuotedText(SpannableStringBuilder formatString, int index)",
    "returnType" : "int",
    "comment" : "\n     * Strips quotation marks from the {@code formatString} and appends the result back to the\n     * {@code formatString}.\n     *\n     * @param formatString the format string, as described in\n     *                     {@link android.text.format.DateFormat}, to be modified\n     * @param index        index of the first quote\n     * @return the length of the quoted text that was appended.\n     * @hide\n     ",
    "links" : [ "android.text.format.DateFormat" ]
  }, {
    "name" : "private static String zeroPad(int inValue, int inMinDigits)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static DateFormatSymbols getIcuDateFormatSymbols(Locale locale)",
    "returnType" : "DateFormatSymbols",
    "comment" : "\n     * We use Gregorian calendar for date formats in android.text.format and various UI widget\n     * historically. It's a utility method to get an {@link DateFormatSymbols} instance. Note that\n     * {@link DateFormatSymbols} has cache, and external cache is not needed unless same instance is\n     * requested repeatedly in the performance critical code.\n     *\n     * @hide\n     ",
    "links" : [ "android.icu.text.DateFormatSymbols" ]
  }, {
    "name" : "private static String getCompatibleEnglishPattern(ULocale locale, String pattern)",
    "returnType" : "String",
    "comment" : "\n     * See http://b/266731719. It mirrors the implementation in\n     * {@link libcore.icu.SimpleDateFormatData.DateTimeFormatStringGenerator#postProcessPattern}\n     ",
    "links" : [ "libcore.icu.SimpleDateFormatData.DateTimeFormatStringGenerator#postProcessPattern" ]
  } ],
  "methodNames" : [ "public static boolean is24HourFormat(Context context)", "public static boolean is24HourFormat(Context context, int userHandle)", "public static boolean is24HourLocale(@NonNull Locale locale)", "public static String getBestDateTimePattern(Locale locale, String skeleton)", "public static java.text.DateFormat getTimeFormat(Context context)", "public static String getTimeFormatString(Context context)", "public static String getTimeFormatString(Context context, int userHandle)", "public static java.text.DateFormat getDateFormat(Context context)", "public static java.text.DateFormat getLongDateFormat(Context context)", "public static java.text.DateFormat getMediumDateFormat(Context context)", "public static char[] getDateFormatOrder(Context context)", "public static char[] getDateFormatOrder(String pattern)", "private static String getDateFormatString(Context context)", "public static CharSequence format(CharSequence inFormat, long inTimeInMillis)", "public static CharSequence format(CharSequence inFormat, Date inDate)", "public static boolean hasSeconds(CharSequence inFormat)", "public static boolean hasDesignator(CharSequence inFormat, char designator)", "public static CharSequence format(CharSequence inFormat, Calendar inDate)", "private static String getDayOfWeekString(DateFormatSymbols dfs, int day, int count, int kind)", "private static String getMonthString(DateFormatSymbols dfs, int month, int count, int kind)", "private static String getTimeZoneString(Calendar inDate, int count)", "private static String formatZoneOffset(int offset, int count)", "private static String getYearString(int year, int count)", "public static int appendQuotedText(SpannableStringBuilder formatString, int index)", "private static String zeroPad(int inValue, int inMinDigits)", "public static DateFormatSymbols getIcuDateFormatSymbols(Locale locale)", "private static String getCompatibleEnglishPattern(ULocale locale, String pattern)" ],
  "variableNames" : [ "QUOTE", "AM_PM", "CAPITAL_AM_PM", "DATE", "DAY", "HOUR", "HOUR_OF_DAY", "MINUTE", "MONTH", "STANDALONE_MONTH", "SECONDS", "TIME_ZONE", "YEAR", "sLocaleLock", "sIs24HourLocale", "sIs24Hour", "DISALLOW_DUPLICATE_FIELD_IN_SKELETON" ]
}