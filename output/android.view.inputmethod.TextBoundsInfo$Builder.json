{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/view/inputmethod/TextBoundsInfo.java",
  "packageName" : "android.view.inputmethod",
  "className" : "Builder",
  "comment" : "\n     * The builder class to create a {@link TextBoundsInfo} object.\n     ",
  "links" : [ "android.view.inputmethod.TextBoundsInfo" ],
  "variables" : [ {
    "name" : "mMatrixValues",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatrixInitialized",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStart",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnd",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterBounds",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterFlags",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCharacterBidiLevels",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLineSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWordSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGraphemeSegmentFinder",
    "type" : "SegmentFinder",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Builder clear()",
    "returnType" : "Builder",
    "comment" : " Clear all the parameters set on this {@link Builder} to reuse it. ",
    "links" : [ "Builder" ]
  }, {
    "name" : "public Builder setMatrix(@NonNull Matrix matrix)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the matrix that transforms local coordinates into screen coordinates.\n         *\n         * @param matrix transformation matrix from local coordinates into screen coordinates.\n         * @throws NullPointerException if the given {@code matrix} is {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setStartAndEnd(@IntRange(from = 0) int start, @IntRange(from = 0) int end)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the start and end index of the {@link TextBoundsInfo}. It's the range of the\n         * characters whose information is available in the {@link TextBoundsInfo}.\n         *\n         * @param start the start index of the {@link TextBoundsInfo}, inclusive.\n         * @param end the end index of the {@link TextBoundsInfo}, exclusive.\n         * @throws IllegalArgumentException if the given {@code start} or {@code end} is negative,\n         * or {@code end} is smaller than the {@code start}.\n         ",
    "links" : [ "android.view.inputmethod.TextBoundsInfo" ]
  }, {
    "name" : "public Builder setCharacterBounds(@NonNull float[] characterBounds)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the characters bounds, in the coordinates of the editor. <br/>\n         *\n         * The given array should be divided into groups of four where each element represents\n         * left, top, right and bottom of the character bounds respectively.\n         * The bounds of the i-th character in the editor should be stored at index\n         * 4 * (i - start). The length of the given array must equal to 4 * (end - start). <br/>\n         *\n         * Sometimes multiple characters in a single grapheme are rendered as one symbol on the\n         * screen. So those characters only have one shared bounds. In this case, we recommend the\n         * editor to assign all the width to the bounds of the first character in the grapheme,\n         * and make the rest characters' bounds zero-width. <br/>\n         *\n         * For example, the string \"'0xD83D' '0xDE00'\" is rendered as one grapheme - a grinning face\n         * emoji. If the bounds of the grapheme is: Rect(5, 10, 15, 20), the character bounds of the\n         * string should be: [ Rect(5, 10, 15, 20), Rect(15, 10, 15, 20) ].\n         *\n         * @param characterBounds the array of the flattened character bounds.\n         * @throws NullPointerException if the given {@code characterBounds} is {@code null}.\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setCharacterFlags(@NonNull int[] characterFlags)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the flags of the characters. The flags of the i-th character in the editor is stored\n         * at index (i - start). The length of the given array must equal to (end - start).\n         * The flags contain the following information:\n         * <ul>\n         *     <li>The {@link #FLAG_CHARACTER_WHITESPACE} flag, indicating the character is a\n         *     whitespace. </li>\n         *     <li>The {@link #FLAG_CHARACTER_LINEFEED} flag, indicating the character is a\n         *     linefeed. </li>\n         *     <li>The {@link #FLAG_CHARACTER_PUNCTUATION} flag, indicating the character is a\n         *     punctuation. </li>\n         *     <li>The {@link #FLAG_LINE_IS_RTL} flag, indicating the line this character belongs to\n         *     is RTL. All all character in the same line must have the same line direction. Check\n         *     {@link #getLineSegmentFinder()} for more information of line boundaries. </li>\n         * </ul>\n         *\n         * @param characterFlags the array of the character's flags.\n         * @throws NullPointerException if the given {@code characterFlags} is {@code null}.\n         * @throws IllegalArgumentException if the given {@code characterFlags} contains invalid\n         * flags.\n         *\n         * @see #getCharacterFlags(int)\n         ",
    "links" : [ "#FLAG_LINE_IS_RTL", "#FLAG_CHARACTER_LINEFEED", "#FLAG_CHARACTER_WHITESPACE", "#getLineSegmentFinder()", "#FLAG_CHARACTER_PUNCTUATION" ]
  }, {
    "name" : "public Builder setCharacterBidiLevel(@NonNull int[] characterBidiLevels)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the BiDi levels for the character. The bidiLevel of the i-th character in the editor\n         * is stored at index (i - start). The length of the given array must equal to\n         * (end - start). <br/>\n         *\n         * BiDi level is defined by\n         * <a href=\"https://unicode.org/reports/tr9/#Basic_Display_Algorithm\" >the unicode\n         * bidirectional algorithm </a>. One can determine whether a character's direction is\n         * right-to-left (RTL) or left-to-right (LTR) by checking the last bit of the BiDi level.\n         * If it's 1, the character is RTL, otherwise the character is LTR. The BiDi level of a\n         * character must be in the range of [0, 125].\n         * @param characterBidiLevels the array of the character's BiDi level.\n         *\n         * @throws NullPointerException if the given {@code characterBidiLevels} is {@code null}.\n         * @throws IllegalArgumentException if the given {@code characterBidiLevels} contains an\n         * element that's out of the range [0, 125].\n         *\n         * @see #getCharacterBidiLevel(int)\n         ",
    "links" : [ ]
  }, {
    "name" : "public Builder setGraphemeSegmentFinder(@NonNull SegmentFinder graphemeSegmentFinder)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link SegmentFinder} that locates the grapheme cluster boundaries. Grapheme is\n         * defined in <a href=\"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries\">\n         * the unicode annex #29: unicode text segmentation<a/>. It's a user-perspective character.\n         * And it's usually the minimal unit for selection, backspace, deletion etc. <br/>\n         *\n         * Please note that only the grapheme segments within the range from start to end will\n         * be available to the IME. The remaining information will be discarded during serialization\n         * for better performance.\n         *\n         * @param graphemeSegmentFinder the {@link SegmentFinder} that locates the grapheme cluster\n         *                              boundaries.\n         * @throws NullPointerException if the given {@code graphemeSegmentFinder} is {@code null}.\n         *\n         * @see #getGraphemeSegmentFinder()\n         * @see SegmentFinder\n         * @see SegmentFinder.PrescribedSegmentFinder\n         ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public Builder setWordSegmentFinder(@NonNull SegmentFinder wordSegmentFinder)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link SegmentFinder} that locates the word boundaries. <br/>\n         *\n         * Please note that only the word segments within the range from start to end will\n         * be available to the IME. The remaining information will be discarded during serialization\n         * for better performance.\n         * @param wordSegmentFinder set the {@link SegmentFinder} that locates the word boundaries.\n         * @throws NullPointerException if the given {@code wordSegmentFinder} is {@code null}.\n         *\n         * @see #getWordSegmentFinder()\n         * @see SegmentFinder\n         * @see SegmentFinder.PrescribedSegmentFinder\n         ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public Builder setLineSegmentFinder(@NonNull SegmentFinder lineSegmentFinder)",
    "returnType" : "Builder",
    "comment" : "\n         * Set the {@link SegmentFinder} that locates the line boundaries. Aside from the hard\n         * breaks in the text, it should also locate the soft line breaks added by the editor.\n         * It is expected that the characters within the same line is rendered on the same baseline.\n         * (Except for some text formatted as subscript and superscript.) <br/>\n         *\n         * Please note that only the line segments within the range from start to end will\n         * be available to the IME. The remaining information will be discarded during serialization\n         * for better performance.\n         * @param lineSegmentFinder set the {@link SegmentFinder} that locates the line boundaries.\n         * @throws NullPointerException if the given {@code lineSegmentFinder} is {@code null}.\n         *\n         * @see #getLineSegmentFinder()\n         * @see SegmentFinder\n         * @see SegmentFinder.PrescribedSegmentFinder\n         ",
    "links" : [ "android.text.SegmentFinder" ]
  }, {
    "name" : "public TextBoundsInfo build()",
    "returnType" : "TextBoundsInfo",
    "comment" : "\n         * Create the {@link TextBoundsInfo} using the parameters in this {@link Builder}.\n         *\n         * @throws IllegalStateException in the following conditions:\n         * <ul>\n         *     <li>if the {@code start} or {@code end} is not set.</li>\n         *     <li>if the {@code matrix} is not set.</li>\n         *     <li>if {@code characterBounds} is not set or its length doesn't equal to\n         *     4 * ({@code end} - {@code start}).</li>\n         *     <li>if the {@code characterFlags} is not set or its length doesn't equal to\n         *     ({@code end} - {@code start}).</li>\n         *     <li>if {@code graphemeSegmentFinder}, {@code wordSegmentFinder} or\n         *     {@code lineSegmentFinder} is not set.</li>\n         *     <li>if characters in the same line has inconsistent {@link #FLAG_LINE_IS_RTL}\n         *     flag.</li>\n         * </ul>\n         ",
    "links" : [ "#FLAG_LINE_IS_RTL", "android.view.inputmethod.TextBoundsInfo", "Builder" ]
  } ],
  "methodNames" : [ "public Builder clear()", "public Builder setMatrix(@NonNull Matrix matrix)", "public Builder setStartAndEnd(@IntRange(from = 0) int start, @IntRange(from = 0) int end)", "public Builder setCharacterBounds(@NonNull float[] characterBounds)", "public Builder setCharacterFlags(@NonNull int[] characterFlags)", "public Builder setCharacterBidiLevel(@NonNull int[] characterBidiLevels)", "public Builder setGraphemeSegmentFinder(@NonNull SegmentFinder graphemeSegmentFinder)", "public Builder setWordSegmentFinder(@NonNull SegmentFinder wordSegmentFinder)", "public Builder setLineSegmentFinder(@NonNull SegmentFinder lineSegmentFinder)", "public TextBoundsInfo build()" ],
  "variableNames" : [ "mMatrixValues", "mMatrixInitialized", "mStart", "mEnd", "mCharacterBounds", "mCharacterFlags", "mCharacterBidiLevels", "mLineSegmentFinder", "mWordSegmentFinder", "mGraphemeSegmentFinder" ]
}