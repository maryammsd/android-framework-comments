{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/wifi/ScanResult.java",
  "packageName" : "android.net.wifi",
  "className" : "ScanResult",
  "comment" : "\n * Describes information about a detected access point. In addition\n * to the attributes described here, the supplicant keeps track of\n * {@code quality}, {@code noise}, and {@code maxbitrate} attributes,\n * but does not currently report them to external clients.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SSID",
    "type" : "String",
    "comment" : "\n     * The network name.\n     *\n     * @deprecated Use {@link #getWifiSsid()} instead.\n     ",
    "links" : [ "#getWifiSsid()" ]
  }, {
    "name" : "wifiSsid",
    "type" : "WifiSsid",
    "comment" : "\n     * Ascii encoded SSID. This will replace SSID when we deprecate it. @hide\n     *\n     * @deprecated Use {@link #getWifiSsid()} instead.\n     ",
    "links" : [ "#getWifiSsid()" ]
  }, {
    "name" : "BSSID",
    "type" : "String",
    "comment" : "\n     * The address of the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "mApMldMacAddress",
    "type" : "MacAddress",
    "comment" : "\n     * The Multi-Link Device (MLD) address of the access point.\n     * Only applicable for Wi-Fi 7 access points, null otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "mApMloLinkId",
    "type" : "int",
    "comment" : "\n     * The Multi-Link Operation (MLO) link id for the access point.\n     * Only applicable for Wi-Fi 7 access points.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAffiliatedMloLinks",
    "type" : "List<MloLink>",
    "comment" : "\n     * The Multi-Link Operation (MLO) affiliated Links.\n     * Only applicable for Wi-Fi 7 access points.\n     * Note: the list of links includes the access point for this ScanResult.\n     ",
    "links" : [ ]
  }, {
    "name" : "hessid",
    "type" : "long",
    "comment" : "\n     * The HESSID from the beacon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpDomainId",
    "type" : "int",
    "comment" : "\n     * The ANQP Domain ID from the Hotspot 2.0 Indication element, if present.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "capabilities",
    "type" : "String",
    "comment" : "\n     * Describes the authentication, key management, and encryption schemes\n     * supported by the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "ifaceName",
    "type" : "String",
    "comment" : "\n     * The interface name on which the scan result was received.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No security protocol.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_WPA",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: WPA version 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_RSN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: RSN, for WPA version 2, and version 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_OSEN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type:\n     * OSU Server-only authenticated layer 2 Encryption Network.\n     * Used for Hotspot 2.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_WAPI",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: WAPI.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No security key management scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_EAP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_PSK_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: PSK_SHA256\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: EAP_SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OSEN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OSEN.\n     * Used for Hotspot 2.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_SAE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OWE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OWE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP_SUITE_B_192",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: SUITE_B_192.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_SAE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OWE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OWE in transition mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_WAPI_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: WAPI_PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_WAPI_CERT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: WAPI_CERT.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FILS_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FILS_SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FILS_SHA384",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FILS_SHA384.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_DPP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: DPP.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_SAE_EXT_KEY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: SAE_EXT_KEY.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_SAE_EXT_KEY",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_SAE_EXT_KEY.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: any unknown AKM.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No cipher suite.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_NO_GROUP_ADDRESSED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No group addressed, only used for group data cipher.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_TKIP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: TKIP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_CCMP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: CCMP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_GCMP_256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: GCMP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_SMS4",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: SMS4\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_GCMP_128",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: GCMP_128\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_BIP_GMAC_128",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: BIP_GMAC_128\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_BIP_GMAC_256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: BIP_GMAC_256\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_BIP_CMAC_256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: BIP_CMAC_256\n     ",
    "links" : [ ]
  }, {
    "name" : "level",
    "type" : "int",
    "comment" : "\n     * The detected signal level in dBm, also known as the RSSI.\n     *\n     * <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into\n     * an absolute signal level which can be displayed to a user.\n     ",
    "links" : [ "android.net.wifi.WifiManager#calculateSignalLevel" ]
  }, {
    "name" : "frequency",
    "type" : "int",
    "comment" : "\n     * The center frequency of the primary 20 MHz frequency (in MHz) of the channel over which the\n     * client is communicating with the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 20 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_40MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 40 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 80 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_160MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 160 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ_PLUS_MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_320MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 320 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_LEGACY",
    "type" : "int",
    "comment" : "\n     * Preamble type: Legacy.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HT",
    "type" : "int",
    "comment" : "\n     * Preamble type: HT.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_VHT",
    "type" : "int",
    "comment" : "\n     * Preamble type: VHT.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_HE",
    "type" : "int",
    "comment" : "\n     * Preamble type: HE.\n     ",
    "links" : [ ]
  }, {
    "name" : "PREAMBLE_EHT",
    "type" : "int",
    "comment" : "\n     * Preamble type: EHT.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Wi-Fi unknown standard\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_LEGACY",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11a/b/g\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11N",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11n\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11AC",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11ac\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11AX",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11ax\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11AD",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11ad\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11BE",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11be\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_24_GHZ",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 2.4 GHz band.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 5 GHz band.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_6_GHZ",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 6 GHz band.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_60_GHZ",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 60 GHz band.\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_LOW",
    "type" : "int",
    "comment" : "\n     * Constant used for dual 5GHz multi-internet use-case only. Not to be used for regular scan\n     * result reporting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_BAND_5_GHZ_HIGH",
    "type" : "int",
    "comment" : "\n     * Constant used for dual 5GHz multi-internet use-case only. Not to be used for regular scan\n     * result reporting.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mWifiStandard",
    "type" : "int",
    "comment" : "\n     * AP wifi standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "channelWidth",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth; one of {@link #CHANNEL_WIDTH_20MHZ}, {@link #CHANNEL_WIDTH_40MHZ},\n     * {@link #CHANNEL_WIDTH_80MHZ}, {@link #CHANNEL_WIDTH_160MHZ}, {@link #CHANNEL_WIDTH_320MHZ},\n     * or {@link #CHANNEL_WIDTH_80MHZ_PLUS_MHZ}, or {@link #CHANNEL_WIDTH_320MHZ}\n     ",
    "links" : [ "#CHANNEL_WIDTH_80MHZ", "#CHANNEL_WIDTH_40MHZ", "#CHANNEL_WIDTH_160MHZ", "#CHANNEL_WIDTH_20MHZ", "#CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "#CHANNEL_WIDTH_320MHZ" ]
  }, {
    "name" : "centerFreq0",
    "type" : "int",
    "comment" : "\n     * Not used if the AP bandwidth is 20 MHz\n     * If the AP use 40, 80, 160 or 320MHz, this is the center frequency (in MHz)\n     * if the AP use 80 + 80 MHz, this is the center frequency of the first segment (in MHz)\n     ",
    "links" : [ ]
  }, {
    "name" : "centerFreq1",
    "type" : "int",
    "comment" : "\n     * Only used if the AP bandwidth is 80 + 80 MHz\n     * if the AP use 80 + 80 MHz, this is the center frequency of the second segment (in MHz)\n     ",
    "links" : [ ]
  }, {
    "name" : "is80211McRTTResponder",
    "type" : "boolean",
    "comment" : "\n     * @deprecated use is80211mcResponder() instead\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "timestamp",
    "type" : "long",
    "comment" : "\n     * timestamp in microseconds (since boot) when\n     * this result was last seen.\n     ",
    "links" : [ ]
  }, {
    "name" : "seen",
    "type" : "long",
    "comment" : "\n     * Timestamp representing date when this result was last seen, in milliseconds from 1970\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "radioChainInfos",
    "type" : "RadioChainInfo[]",
    "comment" : "\n     * Information about the list of the radio chains used to receive this scan result\n     * (probe response or beacon).\n     *\n     * For Example: On devices with 2 hardware radio chains, this list could hold 1 or 2\n     * entries based on whether this scan result was received using one or both the chains.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "untrusted",
    "type" : "boolean",
    "comment" : "\n     * Status indicating the scan result does not correspond to a user's saved configuration\n     * @hide\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "numUsage",
    "type" : "int",
    "comment" : "\n     * Number of time autojoin used it\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "distanceCm",
    "type" : "int",
    "comment" : "\n     * The approximate distance to the AP in centimeter, if available.  Else\n     * {@link #UNSPECIFIED}.\n     * {@hide}\n     ",
    "links" : [ "#UNSPECIFIED" ]
  }, {
    "name" : "distanceSdCm",
    "type" : "int",
    "comment" : "\n     * The standard deviation of the distance to the access point, if available.\n     * Else {@link #UNSPECIFIED}.\n     * {@hide}\n     ",
    "links" : [ "#UNSPECIFIED" ]
  }, {
    "name" : "FLAG_PASSPOINT_NETWORK",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FLAG_80211mc_RESPONDER",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FLAG_80211az_NTB_RESPONDER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "FLAG_TWT_RESPONDER",
    "type" : "long",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "long",
    "comment" : "\n     * Defines flags; such as {@link #FLAG_PASSPOINT_NETWORK}.\n     * {@hide}\n     ",
    "links" : [ "#FLAG_PASSPOINT_NETWORK" ]
  }, {
    "name" : "venueName",
    "type" : "CharSequence",
    "comment" : "\n     * Indicates venue name (such as 'San Francisco Airport') published by access point; only\n     * available on Passpoint network and if published by access point.\n     * @deprecated - This information is not provided\n     ",
    "links" : [ ]
  }, {
    "name" : "operatorFriendlyName",
    "type" : "CharSequence",
    "comment" : "\n     * Indicates Passpoint operator name published by access point.\n     * @deprecated - Use {@link WifiInfo#getPasspointProviderFriendlyName()}\n     ",
    "links" : [ "android.net.wifi.WifiInfo#getPasspointProviderFriendlyName()" ]
  }, {
    "name" : "UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * The unspecified value.\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 5 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 5 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 5 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 5 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 6 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 6 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 6 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 6 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_PSC_START_MHZ",
    "type" : "int",
    "comment" : "\n     * The center frequency of the first 6Ghz preferred scanning channel, as defined by\n     * IEEE802.11ax draft 7.0 section 26.17.2.3.3.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_PSC_STEP_SIZE_MHZ",
    "type" : "int",
    "comment" : "\n     * The number of MHz to increment in order to get the next 6Ghz preferred scanning channel\n     * as defined by IEEE802.11ax draft 7.0 section 26.17.2.3.3.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_OP_CLASS_136_CH_2_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 6 GHz band operating class 136 channel 2 center frequency in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_60_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 60 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_60_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 60 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_60_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 60 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_60_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 60 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_LOW_HIGHEST_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * The highest frequency in 5GHz low\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_HIGH_LOWEST_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * The lowest frequency in 5GHz high\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpLines",
    "type" : "List<String>",
    "comment" : "\n     *  @hide\n     * anqp lines from supplicant BSS response\n     ",
    "links" : [ ]
  }, {
    "name" : "informationElements",
    "type" : "InformationElement[]",
    "comment" : "\n     * information elements found in the beacon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpElements",
    "type" : "AnqpInformationElement[]",
    "comment" : " ANQP response elements.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ScanResult>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setWifiSsid(@NonNull WifiSsid ssid)",
    "returnType" : "void",
    "comment" : "\n     * Set the SSID of the access point.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public WifiSsid getWifiSsid()",
    "returnType" : "WifiSsid",
    "comment" : "\n     * The SSID of the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "public MacAddress getApMldMacAddress()",
    "returnType" : "MacAddress",
    "comment" : "\n     * Return the access point Multi-Link Device (MLD) MAC Address for Wi-Fi 7 access points.\n     * i.e. {@link #getWifiStandard()} returns {@link #WIFI_STANDARD_11BE}.\n     *\n     * @return MLD MAC Address for access point if exists (Wi-Fi 7 access points), null otherwise.\n     ",
    "links" : [ "#getWifiStandard()", "#WIFI_STANDARD_11BE" ]
  }, {
    "name" : "public void setApMldMacAddress(@Nullable MacAddress address)",
    "returnType" : "void",
    "comment" : "\n     * Set the access point Multi-Link Device (MLD) MAC Address.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getApMloLinkId()",
    "returnType" : "int",
    "comment" : "\n     * Return the access point Multi-Link Operation (MLO) link-id for Wi-Fi 7 access points.\n     * i.e. when {@link #getWifiStandard()} returns {@link #WIFI_STANDARD_11BE}, otherwise return\n     * {@link MloLink#INVALID_MLO_LINK_ID}.\n     *\n     * Valid values are 0-15 as described in IEEE 802.11be Specification, section 9.4.2.295b.2.\n     *\n     * @return {@link MloLink#INVALID_MLO_LINK_ID} or a valid value (0-15).\n     ",
    "links" : [ "#getWifiStandard()", "#WIFI_STANDARD_11BE", "android.net.wifi.MloLink#INVALID_MLO_LINK_ID" ]
  }, {
    "name" : "public void setApMloLinkId(int linkId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the access point Multi-Link Operation (MLO) link-id\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<MloLink> getAffiliatedMloLinks()",
    "returnType" : "List<MloLink>",
    "comment" : "\n     * Return the Multi-Link Operation (MLO) affiliated Links for Wi-Fi 7 access points.\n     * i.e. when {@link #getWifiStandard()} returns {@link #WIFI_STANDARD_11BE}.\n     *\n     * @return List of affiliated MLO links, or an empty list if access point is not Wi-Fi 7\n     ",
    "links" : [ "#getWifiStandard()", "#WIFI_STANDARD_11BE" ]
  }, {
    "name" : "public void setAffiliatedMloLinks(@NonNull List<MloLink> links)",
    "returnType" : "void",
    "comment" : "\n     * Set the Multi-Link Operation (MLO) affiliated Links.\n     * Only applicable for Wi-Fi 7 access points.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getWifiStandard()",
    "returnType" : "int",
    "comment" : "\n     * return the AP wifi standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWifiStandard(@WifiStandard int standard)",
    "returnType" : "void",
    "comment" : "\n     * sets the AP wifi standard.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String wifiStandardToString(@WifiStandard int standard)",
    "returnType" : "String",
    "comment" : "\n     * Convert Wi-Fi standard to string\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFlag(long flag)",
    "returnType" : "void",
    "comment" : "\n     * sets a flag in {@link #flags} field\n     * @param flag flag to set\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "public void clearFlag(long flag)",
    "returnType" : "void",
    "comment" : "\n     * clears a flag in {@link #flags} field\n     * @param flag flag to set\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "public boolean is80211mcResponder()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean is80211azNtbResponder()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether AP is a IEEE802.11az Non-Trigger based Ranging Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspointNetwork()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isTwtResponder()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether AP is Target Wake Time (TWT) Responder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is24GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 2.4 GHz band\n     * @param freqMhz frequency in MHz\n     * @return true if within 2.4GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is5GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 5 GHz band\n     * @param freqMhz frequency in MHz\n     * @return true if within 5GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is6GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 6 GHz band\n     * @param freqMhz\n     * @return true if within 6GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is6GHzPsc(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency is 6Ghz PSC channel.\n     * @param freqMhz\n     * @return true if the frequency is 6GHz PSC, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is60GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 60 GHz band\n     * @param freqMhz\n     * @return true if within 60GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isValidCombinedBandForDual5GHz(int freqMhz1, int freqMhz2)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check whether 2 frequencies are valid for multi-internet connection\n     * when dual-5GHz is supported.\n     *\n     * The allowed combinations are:\n     * - 2.4GHz + Any 5GHz\n     * - 2.4GHz + 6Ghz\n     * - 5GHz low + 5GHz high\n     * - 5GHz low + 6GHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertChannelToFrequencyMhzIfSupported(int channel, @WifiBand int band)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to convert Wi-Fi channel number to frequency in MHz.\n     *\n     * Reference the Wi-Fi channel numbering and the channelization in IEEE 802.11-2016\n     * specifications, section 17.3.8.4.2, 17.3.8.4.3 and Table 15-6.\n     *\n     * See also {@link #convertFrequencyMhzToChannelIfSupported(int)}.\n     *\n     * @param channel number to convert.\n     * @param band of channel to convert. One of the following bands:\n     *        {@link #WIFI_BAND_24_GHZ},  {@link #WIFI_BAND_5_GHZ},\n     *        {@link #WIFI_BAND_6_GHZ},  {@link #WIFI_BAND_60_GHZ}.\n     * @return center frequency in Mhz of the channel, {@link #UNSPECIFIED} if no match\n     ",
    "links" : [ "#WIFI_BAND_60_GHZ", "#WIFI_BAND_6_GHZ", "#WIFI_BAND_24_GHZ", "#UNSPECIFIED", "#WIFI_BAND_5_GHZ", "#convertFrequencyMhzToChannelIfSupported(int)" ]
  }, {
    "name" : "public static int getBandFromOpClass(int opClass, int channel)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to convert Operating Class into a band\n     *\n     * Use 802.11 Specification Table E-4: Global Operating Classes for decoding\n     *\n     * @param opClass operating class\n     * @param channel number\n     *\n     * @return one of {@link WifiScanner.WIFI_BAND_24_GHZ}, {@link WifiScanner.WIFI_BAND_5_GHZ}, or\n     *         {@link WifiScanner.WIFI_BAND_6_GHZ} for a valid opClass, channel pair, otherwise\n     *         {@link WifiScanner.WIFI_BAND_UNSPECIFIED} is returned.\n     *\n     * @hide\n     ",
    "links" : [ "WifiScanner.WIFI_BAND_6_GHZ", "WifiScanner.WIFI_BAND_24_GHZ", "WifiScanner.WIFI_BAND_5_GHZ", "WifiScanner.WIFI_BAND_UNSPECIFIED" ]
  }, {
    "name" : "public static int convertFrequencyMhzToChannelIfSupported(int freqMhz)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to convert frequency in MHz to channel number.\n     *\n     * See also {@link #convertChannelToFrequencyMhzIfSupported(int, int)}.\n     *\n     * @param freqMhz frequency in MHz\n     * @return channel number associated with given frequency, {@link #UNSPECIFIED} if no match\n     ",
    "links" : [ "#convertChannelToFrequencyMhzIfSupported(int", "#UNSPECIFIED" ]
  }, {
    "name" : "public static int toBand(int frequency)",
    "returnType" : "int",
    "comment" : "\n     * Returns the band for the ScanResult according to its frequency.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getBand()",
    "returnType" : "int",
    "comment" : "\n     * Returns the band for the ScanResult according to its frequency.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is24GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is5GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GhzPsc()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is60GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<InformationElement> getInformationElements()",
    "returnType" : "List<InformationElement>",
    "comment" : "\n     * Get all information elements found in the beacon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getSecurityTypes()",
    "returnType" : "int[]",
    "comment" : "\n     * Get all the security types supported by this ScanResult.\n     * @return array of {@code WifiInfo#SECURITY_TYPE_*}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean isHiddenSsid(@NonNull WifiSsid wifiSsid)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether a WifiSsid represents a \"hidden\" SSID of all zero values.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setWifiSsid(@NonNull WifiSsid ssid)", "public WifiSsid getWifiSsid()", "public MacAddress getApMldMacAddress()", "public void setApMldMacAddress(@Nullable MacAddress address)", "public int getApMloLinkId()", "public void setApMloLinkId(int linkId)", "public List<MloLink> getAffiliatedMloLinks()", "public void setAffiliatedMloLinks(@NonNull List<MloLink> links)", "public int getWifiStandard()", "public void setWifiStandard(@WifiStandard int standard)", "public static String wifiStandardToString(@WifiStandard int standard)", "public void setFlag(long flag)", "public void clearFlag(long flag)", "public boolean is80211mcResponder()", "public boolean is80211azNtbResponder()", "public boolean isPasspointNetwork()", "public boolean isTwtResponder()", "public static boolean is24GHz(int freqMhz)", "public static boolean is5GHz(int freqMhz)", "public static boolean is6GHz(int freqMhz)", "public static boolean is6GHzPsc(int freqMhz)", "public static boolean is60GHz(int freqMhz)", "public static boolean isValidCombinedBandForDual5GHz(int freqMhz1, int freqMhz2)", "public static int convertChannelToFrequencyMhzIfSupported(int channel, @WifiBand int band)", "public static int getBandFromOpClass(int opClass, int channel)", "public static int convertFrequencyMhzToChannelIfSupported(int freqMhz)", "public static int toBand(int frequency)", "public int getBand()", "public boolean is24GHz()", "public boolean is5GHz()", "public boolean is6GHz()", "public boolean is6GhzPsc()", "public boolean is60GHz()", "public List<InformationElement> getInformationElements()", "public int[] getSecurityTypes()", "private boolean isHiddenSsid(@NonNull WifiSsid wifiSsid)", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ],
  "variableNames" : [ "TAG", "SSID", "wifiSsid", "BSSID", "mApMldMacAddress", "mApMloLinkId", "mAffiliatedMloLinks", "hessid", "anqpDomainId", "capabilities", "ifaceName", "PROTOCOL_NONE", "PROTOCOL_WPA", "PROTOCOL_RSN", "PROTOCOL_OSEN", "PROTOCOL_WAPI", "KEY_MGMT_NONE", "KEY_MGMT_PSK", "KEY_MGMT_EAP", "KEY_MGMT_FT_PSK", "KEY_MGMT_FT_EAP", "KEY_MGMT_PSK_SHA256", "KEY_MGMT_EAP_SHA256", "KEY_MGMT_OSEN", "KEY_MGMT_SAE", "KEY_MGMT_OWE", "KEY_MGMT_EAP_SUITE_B_192", "KEY_MGMT_FT_SAE", "KEY_MGMT_OWE_TRANSITION", "KEY_MGMT_WAPI_PSK", "KEY_MGMT_WAPI_CERT", "KEY_MGMT_FILS_SHA256", "KEY_MGMT_FILS_SHA384", "KEY_MGMT_DPP", "KEY_MGMT_SAE_EXT_KEY", "KEY_MGMT_FT_SAE_EXT_KEY", "KEY_MGMT_UNKNOWN", "CIPHER_NONE", "CIPHER_NO_GROUP_ADDRESSED", "CIPHER_TKIP", "CIPHER_CCMP", "CIPHER_GCMP_256", "CIPHER_SMS4", "CIPHER_GCMP_128", "CIPHER_BIP_GMAC_128", "CIPHER_BIP_GMAC_256", "CIPHER_BIP_CMAC_256", "level", "frequency", "CHANNEL_WIDTH_20MHZ", "CHANNEL_WIDTH_40MHZ", "CHANNEL_WIDTH_80MHZ", "CHANNEL_WIDTH_160MHZ", "CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "CHANNEL_WIDTH_320MHZ", "PREAMBLE_LEGACY", "PREAMBLE_HT", "PREAMBLE_VHT", "PREAMBLE_HE", "PREAMBLE_EHT", "WIFI_STANDARD_UNKNOWN", "WIFI_STANDARD_LEGACY", "WIFI_STANDARD_11N", "WIFI_STANDARD_11AC", "WIFI_STANDARD_11AX", "WIFI_STANDARD_11AD", "WIFI_STANDARD_11BE", "WIFI_BAND_24_GHZ", "WIFI_BAND_5_GHZ", "WIFI_BAND_6_GHZ", "WIFI_BAND_60_GHZ", "WIFI_BAND_5_GHZ_LOW", "WIFI_BAND_5_GHZ_HIGH", "mWifiStandard", "channelWidth", "centerFreq0", "centerFreq1", "is80211McRTTResponder", "timestamp", "seen", "radioChainInfos", "untrusted", "numUsage", "distanceCm", "distanceSdCm", "FLAG_PASSPOINT_NETWORK", "FLAG_80211mc_RESPONDER", "FLAG_80211az_NTB_RESPONDER", "FLAG_TWT_RESPONDER", "flags", "venueName", "operatorFriendlyName", "UNSPECIFIED", "BAND_24_GHZ_FIRST_CH_NUM", "BAND_24_GHZ_LAST_CH_NUM", "BAND_24_GHZ_START_FREQ_MHZ", "BAND_24_GHZ_END_FREQ_MHZ", "BAND_5_GHZ_FIRST_CH_NUM", "BAND_5_GHZ_LAST_CH_NUM", "BAND_5_GHZ_START_FREQ_MHZ", "BAND_5_GHZ_END_FREQ_MHZ", "BAND_6_GHZ_FIRST_CH_NUM", "BAND_6_GHZ_LAST_CH_NUM", "BAND_6_GHZ_START_FREQ_MHZ", "BAND_6_GHZ_END_FREQ_MHZ", "BAND_6_GHZ_PSC_START_MHZ", "BAND_6_GHZ_PSC_STEP_SIZE_MHZ", "BAND_6_GHZ_OP_CLASS_136_CH_2_FREQ_MHZ", "BAND_60_GHZ_FIRST_CH_NUM", "BAND_60_GHZ_LAST_CH_NUM", "BAND_60_GHZ_START_FREQ_MHZ", "BAND_60_GHZ_END_FREQ_MHZ", "BAND_5_GHZ_LOW_HIGHEST_FREQ_MHZ", "BAND_5_GHZ_HIGH_LOWEST_FREQ_MHZ", "anqpLines", "informationElements", "anqpElements", "CREATOR" ]
}