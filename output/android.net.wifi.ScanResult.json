{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/ScanResult.java",
  "packageName" : "android.net.wifi",
  "className" : "ScanResult",
  "comment" : "\n * Describes information about a detected access point. In addition\n * to the attributes described here, the supplicant keeps track of\n * {@code quality}, {@code noise}, and {@code maxbitrate} attributes,\n * but does not currently report them to external clients.\n ",
  "variables" : [ {
    "name" : "SSID",
    "type" : "String",
    "comment" : "\n     * The network name.\n     ",
    "links" : [ ]
  }, {
    "name" : "wifiSsid",
    "type" : "WifiSsid",
    "comment" : "\n     * Ascii encoded SSID. This will replace SSID when we deprecate it. @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BSSID",
    "type" : "String",
    "comment" : "\n     * The address of the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "hessid",
    "type" : "long",
    "comment" : "\n     * The HESSID from the beacon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpDomainId",
    "type" : "int",
    "comment" : "\n     * The ANQP Domain ID from the Hotspot 2.0 Indication element, if present.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "capabilities",
    "type" : "String",
    "comment" : "\n     * Describes the authentication, key management, and encryption schemes\n     * supported by the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No security protocol.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_WPA",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: WPA version 1.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_RSN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: RSN, for WPA version 2, and version 3.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_OSEN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type:\n     * OSU Server-only authenticated layer 2 Encryption Network.\n     * Used for Hotspot 2.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "PROTOCOL_WAPI",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security protocol type: WAPI.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No security key management scheme.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_EAP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_EAP.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_PSK_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: PSK_SHA256\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: EAP_SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OSEN",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OSEN.\n     * Used for Hotspot 2.0.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_SAE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OWE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OWE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_EAP_SUITE_B_192",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: SUITE_B_192.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FT_SAE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FT_SAE.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_OWE_TRANSITION",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: OWE in transition mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_WAPI_PSK",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: WAPI_PSK.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_WAPI_CERT",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: WAPI_CERT.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FILS_SHA256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FILS_SHA256.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_MGMT_FILS_SHA384",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Security key management scheme: FILS_SHA384.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_NONE",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No cipher suite.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_NO_GROUP_ADDRESSED",
    "type" : "int",
    "comment" : "\n     * @hide\n     * No group addressed, only used for group data cipher.\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_TKIP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: TKIP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_CCMP",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: CCMP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_GCMP_256",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: GCMP\n     ",
    "links" : [ ]
  }, {
    "name" : "CIPHER_SMS4",
    "type" : "int",
    "comment" : "\n     * @hide\n     * Cipher suite: SMS4\n     ",
    "links" : [ ]
  }, {
    "name" : "level",
    "type" : "int",
    "comment" : "\n     * The detected signal level in dBm, also known as the RSSI.\n     *\n     * <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into\n     * an absolute signal level which can be displayed to a user.\n     ",
    "links" : [ "android.net.wifi.WifiManager#calculateSignalLevel" ]
  }, {
    "name" : "frequency",
    "type" : "int",
    "comment" : "\n     * The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating\n     * with the access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_20MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 20 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_40MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 40 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 80 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_160MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 160 MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "CHANNEL_WIDTH_80MHZ_PLUS_MHZ",
    "type" : "int",
    "comment" : "\n    * AP Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ\n    ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_UNKNOWN",
    "type" : "int",
    "comment" : "\n     * Wi-Fi unknown standard\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_LEGACY",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11a/b/g\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11N",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11n\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11AC",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11ac\n     ",
    "links" : [ ]
  }, {
    "name" : "WIFI_STANDARD_11AX",
    "type" : "int",
    "comment" : "\n     * Wi-Fi 802.11ax\n     ",
    "links" : [ ]
  }, {
    "name" : "mWifiStandard",
    "type" : "int",
    "comment" : "\n     * AP wifi standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "channelWidth",
    "type" : "int",
    "comment" : "\n     * AP Channel bandwidth; one of {@link #CHANNEL_WIDTH_20MHZ}, {@link #CHANNEL_WIDTH_40MHZ},\n     * {@link #CHANNEL_WIDTH_80MHZ}, {@link #CHANNEL_WIDTH_160MHZ}\n     * or {@link #CHANNEL_WIDTH_80MHZ_PLUS_MHZ}.\n     ",
    "links" : [ "#CHANNEL_WIDTH_80MHZ", "#CHANNEL_WIDTH_40MHZ", "#CHANNEL_WIDTH_160MHZ", "#CHANNEL_WIDTH_20MHZ", "#CHANNEL_WIDTH_80MHZ_PLUS_MHZ" ]
  }, {
    "name" : "centerFreq0",
    "type" : "int",
    "comment" : "\n     * Not used if the AP bandwidth is 20 MHz\n     * If the AP use 40, 80 or 160 MHz, this is the center frequency (in MHz)\n     * if the AP use 80 + 80 MHz, this is the center frequency of the first segment (in MHz)\n     ",
    "links" : [ ]
  }, {
    "name" : "centerFreq1",
    "type" : "int",
    "comment" : "\n     * Only used if the AP bandwidth is 80 + 80 MHz\n     * if the AP use 80 + 80 MHz, this is the center frequency of the second segment (in MHz)\n     ",
    "links" : [ ]
  }, {
    "name" : "is80211McRTTResponder",
    "type" : "boolean",
    "comment" : "\n     * @deprecated use is80211mcResponder() instead\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "timestamp",
    "type" : "long",
    "comment" : "\n     * timestamp in microseconds (since boot) when\n     * this result was last seen.\n     ",
    "links" : [ ]
  }, {
    "name" : "seen",
    "type" : "long",
    "comment" : "\n     * Timestamp representing date when this result was last seen, in milliseconds from 1970\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "radioChainInfos",
    "type" : "RadioChainInfo[]",
    "comment" : "\n     * Information about the list of the radio chains used to receive this scan result\n     * (probe response or beacon).\n     *\n     * For Example: On devices with 2 hardware radio chains, this list could hold 1 or 2\n     * entries based on whether this scan result was received using one or both the chains.\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "untrusted",
    "type" : "boolean",
    "comment" : "\n     * Status indicating the scan result does not correspond to a user's saved configuration\n     * @hide\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "numUsage",
    "type" : "int",
    "comment" : "\n     * Number of time autojoin used it\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "distanceCm",
    "type" : "int",
    "comment" : "\n     * The approximate distance to the AP in centimeter, if available.  Else\n     * {@link UNSPECIFIED}.\n     * {@hide}\n     ",
    "links" : [ "UNSPECIFIED" ]
  }, {
    "name" : "distanceSdCm",
    "type" : "int",
    "comment" : "\n     * The standard deviation of the distance to the access point, if available.\n     * Else {@link UNSPECIFIED}.\n     * {@hide}\n     ",
    "links" : [ "UNSPECIFIED" ]
  }, {
    "name" : "FLAG_PASSPOINT_NETWORK",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "FLAG_80211mc_RESPONDER",
    "type" : "long",
    "comment" : " {@hide} ",
    "links" : [ ]
  }, {
    "name" : "flags",
    "type" : "long",
    "comment" : "\n     * Defines flags; such as {@link #FLAG_PASSPOINT_NETWORK}.\n     * {@hide}\n     ",
    "links" : [ "#FLAG_PASSPOINT_NETWORK" ]
  }, {
    "name" : "venueName",
    "type" : "CharSequence",
    "comment" : "\n     * Indicates venue name (such as 'San Francisco Airport') published by access point; only\n     * available on Passpoint network and if published by access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "operatorFriendlyName",
    "type" : "CharSequence",
    "comment" : "\n     * Indicates Passpoint operator name published by access point.\n     ",
    "links" : [ ]
  }, {
    "name" : "UNSPECIFIED",
    "type" : "int",
    "comment" : "\n     * {@hide}\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_24_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 2.4 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 5 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 5 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 5 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_5_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 5 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_FIRST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 6 GHz band first channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_LAST_CH_NUM",
    "type" : "int",
    "comment" : "\n     * 6 GHz band last channel number\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_START_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 6 GHz band frequency of first channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "BAND_6_GHZ_END_FREQ_MHZ",
    "type" : "int",
    "comment" : "\n     * 6 GHz band frequency of last channel in MHz\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpLines",
    "type" : "List<String>",
    "comment" : "\n     *  @hide\n     * anqp lines from supplicant BSS response\n     ",
    "links" : [ ]
  }, {
    "name" : "informationElements",
    "type" : "InformationElement[]",
    "comment" : "\n     * information elements found in the beacon.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "anqpElements",
    "type" : "AnqpInformationElement[]",
    "comment" : " ANQP response elements.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<ScanResult>",
    "comment" : " Implement the Parcelable interface ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public int getWifiStandard()",
    "returnType" : "int",
    "comment" : "\n     * return the AP wifi standard.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setWifiStandard(@WifiStandard int standard)",
    "returnType" : "void",
    "comment" : "\n     * sets the AP wifi standard.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String wifiStandardToString(@WifiStandard int standard)",
    "returnType" : "String",
    "comment" : "\n     * Convert Wi-Fi standard to string\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFlag(long flag)",
    "returnType" : "void",
    "comment" : "\n     * sets a flag in {@link #flags} field\n     * @param flag flag to set\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "public void clearFlag(long flag)",
    "returnType" : "void",
    "comment" : "\n     * clears a flag in {@link #flags} field\n     * @param flag flag to set\n     * @hide\n     ",
    "links" : [ "#flags" ]
  }, {
    "name" : "public boolean is80211mcResponder()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean isPasspointNetwork()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static boolean is24GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 2.4 GHz band\n     * @param freqMhz frequency in MHz\n     * @return true if within 2.4GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is5GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 5 GHz band\n     * @param freqMhz frequency in MHz\n     * @return true if within 5GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean is6GHz(int freqMhz)",
    "returnType" : "boolean",
    "comment" : "\n     * Utility function to check if a frequency within 6 GHz band\n     * @param freqMhz\n     * @return true if within 6GHz, false otherwise\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int convertChannelToFrequencyMhz(int channel, @WifiScanner.WifiBand int band)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to convert channel number/band to frequency in MHz\n     * @param channel number to convert\n     * @param band of channel to convert\n     * @return center frequency in Mhz of the channel, {@link UNSPECIFIED} if no match\n     *\n     * @hide\n     ",
    "links" : [ "UNSPECIFIED" ]
  }, {
    "name" : "public static int convertFrequencyMhzToChannel(int freqMhz)",
    "returnType" : "int",
    "comment" : "\n     * Utility function to convert frequency in MHz to channel number\n     * @param freqMhz frequency in MHz\n     * @return channel number associated with given frequency, {@link UNSPECIFIED} if no match\n     *\n     * @hide\n     ",
    "links" : [ "UNSPECIFIED" ]
  }, {
    "name" : "public boolean is24GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is5GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean is6GHz()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<InformationElement> getInformationElements()",
    "returnType" : "List<InformationElement>",
    "comment" : "\n     * Get all information elements found in the beacon.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : " Implement the Parcelable interface {@hide} ",
    "links" : [ ]
  } ],
  "variableNames" : [ "SSID", "wifiSsid", "BSSID", "hessid", "anqpDomainId", "capabilities", "PROTOCOL_NONE", "PROTOCOL_WPA", "PROTOCOL_RSN", "PROTOCOL_OSEN", "PROTOCOL_WAPI", "KEY_MGMT_NONE", "KEY_MGMT_PSK", "KEY_MGMT_EAP", "KEY_MGMT_FT_PSK", "KEY_MGMT_FT_EAP", "KEY_MGMT_PSK_SHA256", "KEY_MGMT_EAP_SHA256", "KEY_MGMT_OSEN", "KEY_MGMT_SAE", "KEY_MGMT_OWE", "KEY_MGMT_EAP_SUITE_B_192", "KEY_MGMT_FT_SAE", "KEY_MGMT_OWE_TRANSITION", "KEY_MGMT_WAPI_PSK", "KEY_MGMT_WAPI_CERT", "KEY_MGMT_FILS_SHA256", "KEY_MGMT_FILS_SHA384", "CIPHER_NONE", "CIPHER_NO_GROUP_ADDRESSED", "CIPHER_TKIP", "CIPHER_CCMP", "CIPHER_GCMP_256", "CIPHER_SMS4", "level", "frequency", "CHANNEL_WIDTH_20MHZ", "CHANNEL_WIDTH_40MHZ", "CHANNEL_WIDTH_80MHZ", "CHANNEL_WIDTH_160MHZ", "CHANNEL_WIDTH_80MHZ_PLUS_MHZ", "WIFI_STANDARD_UNKNOWN", "WIFI_STANDARD_LEGACY", "WIFI_STANDARD_11N", "WIFI_STANDARD_11AC", "WIFI_STANDARD_11AX", "mWifiStandard", "channelWidth", "centerFreq0", "centerFreq1", "is80211McRTTResponder", "timestamp", "seen", "radioChainInfos", "untrusted", "numUsage", "distanceCm", "distanceSdCm", "FLAG_PASSPOINT_NETWORK", "FLAG_80211mc_RESPONDER", "flags", "venueName", "operatorFriendlyName", "UNSPECIFIED", "BAND_24_GHZ_FIRST_CH_NUM", "BAND_24_GHZ_LAST_CH_NUM", "BAND_24_GHZ_START_FREQ_MHZ", "BAND_24_GHZ_END_FREQ_MHZ", "BAND_5_GHZ_FIRST_CH_NUM", "BAND_5_GHZ_LAST_CH_NUM", "BAND_5_GHZ_START_FREQ_MHZ", "BAND_5_GHZ_END_FREQ_MHZ", "BAND_6_GHZ_FIRST_CH_NUM", "BAND_6_GHZ_LAST_CH_NUM", "BAND_6_GHZ_START_FREQ_MHZ", "BAND_6_GHZ_END_FREQ_MHZ", "anqpLines", "informationElements", "anqpElements", "CREATOR" ],
  "methodNames" : [ "public int getWifiStandard()", "public void setWifiStandard(@WifiStandard int standard)", "private static String wifiStandardToString(@WifiStandard int standard)", "public void setFlag(long flag)", "public void clearFlag(long flag)", "public boolean is80211mcResponder()", "public boolean isPasspointNetwork()", "public static boolean is24GHz(int freqMhz)", "public static boolean is5GHz(int freqMhz)", "public static boolean is6GHz(int freqMhz)", "public static int convertChannelToFrequencyMhz(int channel, @WifiScanner.WifiBand int band)", "public static int convertFrequencyMhzToChannel(int freqMhz)", "public boolean is24GHz()", "public boolean is5GHz()", "public boolean is6GHz()", "public List<InformationElement> getInformationElements()", "public String toString()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)" ]
}