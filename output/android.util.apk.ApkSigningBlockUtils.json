{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/util/apk/ApkSigningBlockUtils.java",
  "packageName" : "android.util.apk",
  "className" : "ApkSigningBlockUtils",
  "comment" : "\n * Utility class for an APK Signature Scheme using the APK Signing Block.\n *\n * @hide for internal use only.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "CHUNK_SIZE_BYTES",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_RSA_PSS_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_RSA_PSS_WITH_SHA512",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_ECDSA_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_ECDSA_WITH_SHA512",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_DSA_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_VERITY_RSA_PKCS1_V1_5_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_VERITY_ECDSA_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "SIGNATURE_VERITY_DSA_WITH_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_DIGEST_CHUNKED_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_DIGEST_CHUNKED_SHA512",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_DIGEST_VERITY_CHUNKED_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONTENT_DIGEST_SHA256",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_SIG_BLOCK_MAGIC_HI",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_SIG_BLOCK_MAGIC_LO",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "APK_SIG_BLOCK_MIN_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static SignatureInfo findSignature(RandomAccessFile apk, int blockId) throws IOException, SignatureNotFoundException",
    "returnType" : "SignatureInfo",
    "comment" : "\n     * Returns the APK Signature Scheme block contained in the provided APK file and the\n     * additional information relevant for verifying the block against the file.\n     *\n     * @param blockId the ID value in the APK Signing Block's sequence of ID-value pairs\n     *                identifying the appropriate block to find, e.g. the APK Signature Scheme v2\n     *                block ID.\n     * @throws SignatureNotFoundException if the APK is not signed using this scheme.\n     * @throws IOException                if an I/O error occurs while reading the APK file.\n     ",
    "links" : [ ]
  }, {
    "name" : " static void verifyIntegrity(Map<Integer, byte[]> expectedDigests, RandomAccessFile apk, SignatureInfo signatureInfo) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static boolean isSupportedSignatureAlgorithm(int sigAlgorithm)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void verifyIntegrityFor1MbChunkBasedAlgorithm(Map<Integer, byte[]> expectedDigests, FileDescriptor apkFileDescriptor, SignatureInfo signatureInfo) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static byte[][] computeContentDigestsPer1MbChunk(int[] digestAlgorithms, FileDescriptor apkFileDescriptor, SignatureInfo signatureInfo) throws DigestException",
    "returnType" : "byte[][]",
    "comment" : "\n     * Calculate digests using digestAlgorithms for apkFileDescriptor.\n     * This will skip signature block described by signatureInfo.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static byte[][] computeContentDigestsPer1MbChunk(int[] digestAlgorithms, DataSource[] contents) throws DigestException",
    "returnType" : "byte[][]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] parseVerityDigestAndVerifySourceLength(byte[] data, long fileSize, SignatureInfo signatureInfo) throws SecurityException",
    "returnType" : "byte[]",
    "comment" : "\n     * Return the verity digest only if the length of digest content looks correct.\n     * When verity digest is generated, the last incomplete 4k chunk is padded with 0s before\n     * hashing. This means two almost identical APKs with different number of 0 at the end will have\n     * the same verity digest. To avoid this problem, the length of the source content (excluding\n     * Signing Block) is appended to the verity digest, and the digest is returned only if the\n     * length is consistent to the current APK.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void verifyIntegrityForVerityBasedAlgorithm(byte[] expectedDigest, RandomAccessFile apk, SignatureInfo signatureInfo) throws SecurityException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Pair<ByteBuffer, Long> getEocd(RandomAccessFile apk) throws IOException, SignatureNotFoundException",
    "returnType" : "Pair<ByteBuffer, Long>",
    "comment" : "\n     * Returns the ZIP End of Central Directory (EoCD) and its offset in the file.\n     *\n     * @throws IOException                if an I/O error occurs while reading the file.\n     * @throws SignatureNotFoundException if the EoCD could not be found.\n     ",
    "links" : [ ]
  }, {
    "name" : " static long getCentralDirOffset(ByteBuffer eocd, long eocdOffset) throws SignatureNotFoundException",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static long getChunkCount(long inputSizeBytes)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int compareSignatureAlgorithm(int sigAlgorithm1, int sigAlgorithm2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int compareContentDigestAlgorithm(int digestAlgorithm1, int digestAlgorithm2)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static int getSignatureAlgorithmContentDigestAlgorithm(int sigAlgorithm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String getContentDigestAlgorithmJcaDigestAlgorithm(int digestAlgorithm)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static int getContentDigestAlgorithmOutputSizeBytes(int digestAlgorithm)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static String getSignatureAlgorithmJcaKeyAlgorithm(int sigAlgorithm)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Pair<String, ? extends AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm)",
    "returnType" : "Pair<String, ? extends AlgorithmParameterSpec>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ByteBuffer sliceFromTo(ByteBuffer source, int start, int end)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Returns new byte buffer whose content is a shared subsequence of this buffer's content\n     * between the specified start (inclusive) and end (exclusive) positions. As opposed to\n     * {@link ByteBuffer#slice()}, the returned buffer's byte order is the same as the source\n     * buffer's byte order.\n     ",
    "links" : [ "java.nio.ByteBuffer#slice()" ]
  }, {
    "name" : " static ByteBuffer getByteBuffer(ByteBuffer source, int size) throws BufferUnderflowException",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Relative <em>get</em> method for reading {@code size} number of bytes from the current\n     * position of this buffer.\n     *\n     * <p>This method reads the next {@code size} bytes at this buffer's current position,\n     * returning them as a {@code ByteBuffer} with start set to 0, limit and capacity set to\n     * {@code size}, byte order set to this buffer's byte order; and then increments the position by\n     * {@code size}.\n     ",
    "links" : [ ]
  }, {
    "name" : " static ByteBuffer getLengthPrefixedSlice(ByteBuffer source) throws IOException",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static byte[] readLengthPrefixedByteArray(ByteBuffer buf) throws IOException",
    "returnType" : "byte[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static void setUnsignedInt32LittleEndian(int value, byte[] result, int offset)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static Pair<ByteBuffer, Long> findApkSigningBlock(RandomAccessFile apk, long centralDirOffset) throws IOException, SignatureNotFoundException",
    "returnType" : "Pair<ByteBuffer, Long>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static ByteBuffer findApkSignatureSchemeBlock(ByteBuffer apkSigningBlock, int blockId) throws SignatureNotFoundException",
    "returnType" : "ByteBuffer",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void checkByteOrderLittleEndian(ByteBuffer buffer)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " static VerifiedProofOfRotation verifyProofOfRotationStruct(ByteBuffer porBuf, CertificateFactory certFactory) throws SecurityException, IOException",
    "returnType" : "VerifiedProofOfRotation",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ " static SignatureInfo findSignature(RandomAccessFile apk, int blockId) throws IOException, SignatureNotFoundException", " static void verifyIntegrity(Map<Integer, byte[]> expectedDigests, RandomAccessFile apk, SignatureInfo signatureInfo) throws SecurityException", " static boolean isSupportedSignatureAlgorithm(int sigAlgorithm)", "private static void verifyIntegrityFor1MbChunkBasedAlgorithm(Map<Integer, byte[]> expectedDigests, FileDescriptor apkFileDescriptor, SignatureInfo signatureInfo) throws SecurityException", "public static byte[][] computeContentDigestsPer1MbChunk(int[] digestAlgorithms, FileDescriptor apkFileDescriptor, SignatureInfo signatureInfo) throws DigestException", "private static byte[][] computeContentDigestsPer1MbChunk(int[] digestAlgorithms, DataSource[] contents) throws DigestException", " static byte[] parseVerityDigestAndVerifySourceLength(byte[] data, long fileSize, SignatureInfo signatureInfo) throws SecurityException", "private static void verifyIntegrityForVerityBasedAlgorithm(byte[] expectedDigest, RandomAccessFile apk, SignatureInfo signatureInfo) throws SecurityException", " static Pair<ByteBuffer, Long> getEocd(RandomAccessFile apk) throws IOException, SignatureNotFoundException", " static long getCentralDirOffset(ByteBuffer eocd, long eocdOffset) throws SignatureNotFoundException", "private static long getChunkCount(long inputSizeBytes)", " static int compareSignatureAlgorithm(int sigAlgorithm1, int sigAlgorithm2)", "private static int compareContentDigestAlgorithm(int digestAlgorithm1, int digestAlgorithm2)", " static int getSignatureAlgorithmContentDigestAlgorithm(int sigAlgorithm)", " static String getContentDigestAlgorithmJcaDigestAlgorithm(int digestAlgorithm)", "private static int getContentDigestAlgorithmOutputSizeBytes(int digestAlgorithm)", " static String getSignatureAlgorithmJcaKeyAlgorithm(int sigAlgorithm)", " static Pair<String, ? extends AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm)", " static ByteBuffer sliceFromTo(ByteBuffer source, int start, int end)", " static ByteBuffer getByteBuffer(ByteBuffer source, int size) throws BufferUnderflowException", " static ByteBuffer getLengthPrefixedSlice(ByteBuffer source) throws IOException", " static byte[] readLengthPrefixedByteArray(ByteBuffer buf) throws IOException", " static void setUnsignedInt32LittleEndian(int value, byte[] result, int offset)", " static Pair<ByteBuffer, Long> findApkSigningBlock(RandomAccessFile apk, long centralDirOffset) throws IOException, SignatureNotFoundException", " static ByteBuffer findApkSignatureSchemeBlock(ByteBuffer apkSigningBlock, int blockId) throws SignatureNotFoundException", "private static void checkByteOrderLittleEndian(ByteBuffer buffer)", " static VerifiedProofOfRotation verifyProofOfRotationStruct(ByteBuffer porBuf, CertificateFactory certFactory) throws SecurityException, IOException" ],
  "variableNames" : [ "CHUNK_SIZE_BYTES", "SIGNATURE_RSA_PSS_WITH_SHA256", "SIGNATURE_RSA_PSS_WITH_SHA512", "SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256", "SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512", "SIGNATURE_ECDSA_WITH_SHA256", "SIGNATURE_ECDSA_WITH_SHA512", "SIGNATURE_DSA_WITH_SHA256", "SIGNATURE_VERITY_RSA_PKCS1_V1_5_WITH_SHA256", "SIGNATURE_VERITY_ECDSA_WITH_SHA256", "SIGNATURE_VERITY_DSA_WITH_SHA256", "CONTENT_DIGEST_CHUNKED_SHA256", "CONTENT_DIGEST_CHUNKED_SHA512", "CONTENT_DIGEST_VERITY_CHUNKED_SHA256", "CONTENT_DIGEST_SHA256", "APK_SIG_BLOCK_MAGIC_HI", "APK_SIG_BLOCK_MAGIC_LO", "APK_SIG_BLOCK_MIN_SIZE" ]
}