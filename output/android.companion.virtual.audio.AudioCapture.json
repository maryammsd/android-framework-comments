{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/companion/virtual/audio/AudioCapture.java",
  "packageName" : "android.companion.virtual.audio",
  "className" : "AudioCapture",
  "comment" : " The stop() actually doesn't release resources, so should not force implementing Closeable.",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioFormat",
    "type" : "AudioFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioRecord",
    "type" : "AudioRecord",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingState",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " void setAudioRecord(@Nullable AudioRecord audioRecord)",
    "returnType" : "void",
    "comment" : "\n     * Sets the {@link AudioRecord} to handle audio capturing.\n     *\n     * <p>Callers may call this multiple times with different audio records to change the underlying\n     * {@link AudioRecord} without stopping and re-starting recording.\n     *\n     * @param audioRecord The underlying {@link AudioRecord} to use for capture, or null if no audio\n     *   (i.e. silence) should be captured while still keeping the record in a recording state.\n     ",
    "links" : [ "android.media.AudioRecord" ]
  }, {
    "name" : " void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public AudioFormat getFormat()",
    "returnType" : "AudioFormat",
    "comment" : " See {@link AudioRecord#getFormat()} ",
    "links" : [ "android.media.AudioRecord#getFormat()" ]
  }, {
    "name" : "public int read(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(byte[], int, int)} ",
    "links" : [ "android.media.AudioRecord#read(byte" ]
  }, {
    "name" : "public int read(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes, @AudioRecord.ReadMode int readMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(byte[], int, int, int)} ",
    "links" : [ "android.media.AudioRecord#read(byte" ]
  }, {
    "name" : "public int read(@NonNull ByteBuffer audioBuffer, int sizeInBytes)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(ByteBuffer, int)}. ",
    "links" : [ "android.media.AudioRecord#read(ByteBuffer" ]
  }, {
    "name" : "public int read(@NonNull ByteBuffer audioBuffer, int sizeInBytes, @AudioRecord.ReadMode int readMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(ByteBuffer, int, int)}. ",
    "links" : [ "android.media.AudioRecord#read(ByteBuffer" ]
  }, {
    "name" : "public int read(@NonNull float[] audioData, int offsetInFloats, int sizeInFloats, @AudioRecord.ReadMode int readMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(float[], int, int, int)}. ",
    "links" : [ "android.media.AudioRecord#read(float" ]
  }, {
    "name" : "public int read(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(short[], int, int)}. ",
    "links" : [ "android.media.AudioRecord#read(short" ]
  }, {
    "name" : "public int read(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts, @AudioRecord.ReadMode int readMode)",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#read(short[], int, int, int)}. ",
    "links" : [ "android.media.AudioRecord#read(short" ]
  }, {
    "name" : "public void startRecording()",
    "returnType" : "void",
    "comment" : " See {@link AudioRecord#startRecording()}. ",
    "links" : [ "android.media.AudioRecord#startRecording()" ]
  }, {
    "name" : "public void stop()",
    "returnType" : "void",
    "comment" : " See {@link AudioRecord#stop()}. ",
    "links" : [ "android.media.AudioRecord#stop()" ]
  }, {
    "name" : "public int getRecordingState()",
    "returnType" : "int",
    "comment" : " See {@link AudioRecord#getRecordingState()}. ",
    "links" : [ "android.media.AudioRecord#getRecordingState()" ]
  } ],
  "methodNames" : [ " void setAudioRecord(@Nullable AudioRecord audioRecord)", " void close()", "public AudioFormat getFormat()", "public int read(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes)", "public int read(@NonNull byte[] audioData, int offsetInBytes, int sizeInBytes, @AudioRecord.ReadMode int readMode)", "public int read(@NonNull ByteBuffer audioBuffer, int sizeInBytes)", "public int read(@NonNull ByteBuffer audioBuffer, int sizeInBytes, @AudioRecord.ReadMode int readMode)", "public int read(@NonNull float[] audioData, int offsetInFloats, int sizeInFloats, @AudioRecord.ReadMode int readMode)", "public int read(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts)", "public int read(@NonNull short[] audioData, int offsetInShorts, int sizeInShorts, @AudioRecord.ReadMode int readMode)", "public void startRecording()", "public void stop()", "public int getRecordingState()" ],
  "variableNames" : [ "TAG", "mAudioFormat", "mLock", "mAudioRecord", "mRecordingState" ]
}