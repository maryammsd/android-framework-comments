{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/Modifier.java",
  "packageName" : "android.icu.impl.number",
  "className" : "Modifier",
  "comment" : "\n * A Modifier is an object that can be passed through the formatting pipeline until it is finally applied\n * to the string builder. A Modifier usually contains a prefix and a suffix that are applied, but it\n * could contain something else, like a {@link android.icu.text.SimpleFormatter} pattern.\n *\n * A Modifier is usually immutable, except in cases such as {@link MutablePatternModifier}, which are\n * mutable for performance reasons.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ "android.icu.impl.number.MutablePatternModifier", "android.icu.text.SimpleFormatter" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public int apply(FormattedStringBuilder output, int leftIndex, int rightIndex)",
    "returnType" : "int",
    "comment" : "\n     * Apply this Modifier to the string builder.\n     *\n     * @param output\n     *            The string builder to which to apply this modifier.\n     * @param leftIndex\n     *            The left index of the string within the builder. Equal to 0 when only one number is\n     *            being formatted.\n     * @param rightIndex\n     *            The right index of the string within the string builder. Equal to length when only one\n     *            number is being formatted.\n     * @return The number of characters (UTF-16 code units) that were added to the string builder.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPrefixLength()",
    "returnType" : "int",
    "comment" : "\n     * Gets the length of the prefix. This information can be used in combination with {@link #apply} to\n     * extract the prefix and suffix strings.\n     *\n     * @return The number of characters (UTF-16 code units) in the prefix.\n     ",
    "links" : [ "#apply" ]
  }, {
    "name" : "public int getCodePointCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of code points in the modifier, prefix plus suffix.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isStrong()",
    "returnType" : "boolean",
    "comment" : "\n     * Whether this modifier is strong. If a modifier is strong, it should always be applied immediately\n     * and not allowed to bubble up. With regard to padding, strong modifiers are considered to be on the\n     * inside of the prefix and suffix.\n     *\n     * @return Whether the modifier is strong.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean containsField(Field currency)",
    "returnType" : "boolean",
    "comment" : "\n     * Whether the modifier contains at least one occurrence of the given field.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Parameters getParameters()",
    "returnType" : "Parameters",
    "comment" : "\n     * Gets a set of \"parameters\" for this Modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean strictEquals(Modifier other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this Modifier equals another Modifier.\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean semanticallyEquivalent(Modifier other)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether this Modifier is *semantically equivalent* to the other Modifier;\n     * in many cases, this is the same as equal, but parameters should be ignored.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public int apply(FormattedStringBuilder output, int leftIndex, int rightIndex)", "public int getPrefixLength()", "public int getCodePointCount()", "public boolean isStrong()", "public boolean containsField(Field currency)", "public Parameters getParameters()", "public boolean strictEquals(Modifier other)", " boolean semanticallyEquivalent(Modifier other)" ],
  "variableNames" : [ ]
}