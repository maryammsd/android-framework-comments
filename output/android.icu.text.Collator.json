{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/Collator.java",
  "packageName" : "android.icu.text",
  "className" : "Collator",
  "comment" : "\n* <strong>[icu enhancement]</strong> ICU's replacement for {@link java.text.Collator}.&nbsp;Methods, fields, and other functionality specific to ICU are labeled '<strong>[icu]</strong>'.\n*\n* <p>Collator performs locale-sensitive string comparison. A concrete\n* subclass, RuleBasedCollator, allows customization of the collation\n* ordering by the use of rule sets.\n*\n* <p>A Collator is thread-safe only when frozen. See {@link #isFrozen()} and {@link Freezable}.\n*\n* <p>Following the <a href=http://www.unicode.org>Unicode\n* Consortium</a>'s specifications for the\n* <a href=\"https://www.unicode.org/reports/tr10/\">Unicode Collation\n* Algorithm (UCA)</a>, there are 5 different levels of strength used\n* in comparisons:\n*\n* <ul>\n* <li>PRIMARY strength: Typically, this is used to denote differences between\n*     base characters (for example, \"a\" &lt; \"b\").\n*     It is the strongest difference. For example, dictionaries are divided\n*     into different sections by base character.\n* <li>SECONDARY strength: Accents in the characters are considered secondary\n*     differences (for example, \"as\" &lt; \"&agrave;s\" &lt; \"at\"). Other\n*     differences\n*     between letters can also be considered secondary differences, depending\n*     on the language. A secondary difference is ignored when there is a\n*     primary difference anywhere in the strings.\n* <li>TERTIARY strength: Upper and lower case differences in characters are\n*     distinguished at tertiary strength (for example, \"ao\" &lt; \"Ao\" &lt;\n*     \"a&ograve;\"). In addition, a variant of a letter differs from the base\n*     form on the tertiary strength (such as \"A\" and \"â’¶\"). Another\n*     example is the\n*     difference between large and small Kana. A tertiary difference is ignored\n*     when there is a primary or secondary difference anywhere in the strings.\n* <li>QUATERNARY strength: When punctuation is ignored\n*     (see <a href=\"https://unicode-org.github.io/icu/userguide/collation/concepts#ignoring-punctuation\">\n*     Ignoring Punctuations in the User Guide</a>) at PRIMARY to TERTIARY\n*     strength, an additional strength level can\n*     be used to distinguish words with and without punctuation (for example,\n*     \"ab\" &lt; \"a-b\" &lt; \"aB\").\n*     This difference is ignored when there is a PRIMARY, SECONDARY or TERTIARY\n*     difference. The QUATERNARY strength should only be used if ignoring\n*     punctuation is required.\n* <li>IDENTICAL strength:\n*     When all other strengths are equal, the IDENTICAL strength is used as a\n*     tiebreaker. The Unicode code point values of the NFD form of each string\n*     are compared, just in case there is no difference.\n*     For example, Hebrew cantillation marks are only distinguished at this\n*     strength. This strength should be used sparingly, as only code point\n*     value differences between two strings is an extremely rare occurrence.\n*     Using this strength substantially decreases the performance for both\n*     comparison and collation key generation APIs. This strength also\n*     increases the size of the collation key.\n* </ul>\n*\n* Unlike the JDK, ICU4J's Collator deals only with 2 decomposition modes,\n* the canonical decomposition mode and one that does not use any decomposition.\n* The compatibility decomposition mode, java.text.Collator.FULL_DECOMPOSITION\n* is not supported here. If the canonical\n* decomposition mode is set, the Collator handles un-normalized text properly,\n* producing the same results as if the text were normalized in NFD. If\n* canonical decomposition is turned off, it is the user's responsibility to\n* ensure that all text is already in the appropriate form before performing\n* a comparison or before getting a CollationKey.\n*\n* <p>For more information about the collation service see the\n* <a href=\"https://unicode-org.github.io/icu/userguide/collation\">User Guide</a>.\n*\n* <p>Examples of use\n* <pre>\n* // Get the Collator for US English and set its strength to PRIMARY\n* Collator usCollator = Collator.getInstance(Locale.US);\n* usCollator.setStrength(Collator.PRIMARY);\n* if (usCollator.compare(\"abc\", \"ABC\") == 0) {\n*     System.out.println(\"Strings are equivalent\");\n* }\n*\n* The following example shows how to compare two strings using the\n* Collator for the default locale.\n*\n* // Compare two strings in the default locale\n* Collator myCollator = Collator.getInstance();\n* myCollator.setDecomposition(NO_DECOMPOSITION);\n* if (myCollator.compare(\"&agrave;&#92;u0325\", \"a&#92;u0325&#768;\") != 0) {\n*     System.out.println(\"&agrave;&#92;u0325 is not equals to a&#92;u0325&#768; without decomposition\");\n*     myCollator.setDecomposition(CANONICAL_DECOMPOSITION);\n*     if (myCollator.compare(\"&agrave;&#92;u0325\", \"a&#92;u0325&#768;\") != 0) {\n*         System.out.println(\"Error: &agrave;&#92;u0325 should be equals to a&#92;u0325&#768; with decomposition\");\n*     }\n*     else {\n*         System.out.println(\"&agrave;&#92;u0325 is equals to a&#92;u0325&#768; with decomposition\");\n*     }\n* }\n* else {\n*     System.out.println(\"Error: &agrave;&#92;u0325 should be not equals to a&#92;u0325&#768; without decomposition\");\n* }\n* </pre>\n*\n* @see RuleBasedCollator\n* @see CollationKey\n* @author Syn Wee Quek\n",
  "links" : [ "android.icu.util.Freezable", "#isFrozen()", "java.text.Collator" ],
  "variables" : [ {
    "name" : "PRIMARY",
    "type" : "int",
    "comment" : "\n     * Strongest collator strength value. Typically used to denote differences\n     * between base characters. See class documentation for more explanation.\n     * @see #setStrength\n     * @see #getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "SECONDARY",
    "type" : "int",
    "comment" : "\n     * Second level collator strength value.\n     * Accents in the characters are considered secondary differences.\n     * Other differences between letters can also be considered secondary\n     * differences, depending on the language.\n     * See class documentation for more explanation.\n     * @see #setStrength\n     * @see #getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "TERTIARY",
    "type" : "int",
    "comment" : "\n     * Third level collator strength value.\n     * Upper and lower case differences in characters are distinguished at this\n     * strength level. In addition, a variant of a letter differs from the base\n     * form on the tertiary level.\n     * See class documentation for more explanation.\n     * @see #setStrength\n     * @see #getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "QUATERNARY",
    "type" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Fourth level collator strength value.\n     * When punctuation is ignored\n     * (see <a href=\"https://unicode-org.github.io/icu/userguide/collation/concepts#ignoring-punctuation\">\n     * Ignoring Punctuation in the User Guide</a>) at PRIMARY to TERTIARY\n     * strength, an additional strength level can\n     * be used to distinguish words with and without punctuation.\n     * See class documentation for more explanation.\n     * @see #setStrength\n     * @see #getStrength\n     ",
    "links" : [ ]
  }, {
    "name" : "IDENTICAL",
    "type" : "int",
    "comment" : "\n     * Smallest Collator strength value. When all other strengths are equal,\n     * the IDENTICAL strength is used as a tiebreaker. The Unicode code point\n     * values of the NFD form of each string are compared, just in case there\n     * is no difference.\n     * See class documentation for more explanation.\n     * <p>\n     * Note this value is different from JDK's\n     ",
    "links" : [ ]
  }, {
    "name" : "FULL_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * <strong>[icu] Note:</strong> This is for backwards compatibility with Java APIs only.  It\n     * should not be used, IDENTICAL should be used instead.  ICU's\n     * collation does not support Java's FULL_DECOMPOSITION mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "NO_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * Decomposition mode value. With NO_DECOMPOSITION set, Strings\n     * will not be decomposed for collation. This is the default\n     * decomposition setting unless otherwise specified by the locale\n     * used to create the Collator.\n     *\n     * <p><strong>Note</strong> this value is different from the JDK's.\n     * @see #CANONICAL_DECOMPOSITION\n     * @see #getDecomposition\n     * @see #setDecomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "CANONICAL_DECOMPOSITION",
    "type" : "int",
    "comment" : "\n     * Decomposition mode value. With CANONICAL_DECOMPOSITION set,\n     * characters that are canonical variants according to the Unicode standard\n     * will be decomposed for collation.\n     *\n     * <p>CANONICAL_DECOMPOSITION corresponds to Normalization Form D as\n     * described in <a href=\"https://www.unicode.org/reports/tr15/\">\n     * Unicode Technical Report #15</a>.\n     *\n     * @see #NO_DECOMPOSITION\n     * @see #getDecomposition\n     * @see #setDecomposition\n     ",
    "links" : [ ]
  }, {
    "name" : "shim",
    "type" : "ServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEYWORDS",
    "type" : "String[]",
    "comment" : "\n     * The list of keywords for this service.  This must be kept in sync with\n     * the resource data.\n     ",
    "links" : [ ]
  }, {
    "name" : "RESOURCE",
    "type" : "String",
    "comment" : "\n     * The resource name for this service.  Note that this is not the same as\n     * the keyword for this service.\n     ",
    "links" : [ ]
  }, {
    "name" : "BASE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEBUG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the equality of two Collator objects. Collator objects are equal if they have the same\n     * collation (sorting &amp; searching) behavior.\n     *\n     * <p>The base class checks for null and for equal types.\n     * Subclasses should override.\n     *\n     * @param obj the Collator to compare to.\n     * @return true if this Collator has exactly the same collation behavior as obj, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Generates a hash code for this Collator object.\n     *\n     * <p>The implementation exists just for consistency with {@link #equals(Object)}\n     * implementation in this class and does not generate a useful hash code.\n     * Subclasses should override this implementation.\n     *\n     * @return a hash code value.\n     ",
    "links" : [ "#equals(Object)" ]
  }, {
    "name" : "private void checkNotFrozen()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void setStrength(int newStrength)",
    "returnType" : "void",
    "comment" : "\n     * Sets this Collator's strength attribute. The strength attribute\n     * determines the minimum level of difference considered significant\n     * during comparison.\n     *\n     * <p>The base class method does nothing. Subclasses should override it if appropriate.\n     *\n     * <p>See the Collator class description for an example of use.\n     * @param newStrength the new strength value.\n     * @see #getStrength\n     * @see #PRIMARY\n     * @see #SECONDARY\n     * @see #TERTIARY\n     * @see #QUATERNARY\n     * @see #IDENTICAL\n     * @throws IllegalArgumentException if the new strength value is not valid.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collator setStrength2(int newStrength)",
    "returnType" : "Collator",
    "comment" : "\n     * @return this, for chaining\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setDecomposition(int decomposition)",
    "returnType" : "void",
    "comment" : "\n     * Sets the decomposition mode of this Collator.  Setting this\n     * decomposition attribute with CANONICAL_DECOMPOSITION allows the\n     * Collator to handle un-normalized text properly, producing the\n     * same results as if the text were normalized. If\n     * NO_DECOMPOSITION is set, it is the user's responsibility to\n     * insure that all text is already in the appropriate form before\n     * a comparison or before getting a CollationKey. Adjusting\n     * decomposition mode allows the user to select between faster and\n     * more complete collation behavior.\n     *\n     * <p>Since a great many of the world's languages do not require\n     * text normalization, most locales set NO_DECOMPOSITION as the\n     * default decomposition mode.\n     *\n     * <p>The base class method does nothing. Subclasses should override it if appropriate.\n     *\n     * <p>See getDecomposition for a description of decomposition\n     * mode.\n     *\n     * @param decomposition the new decomposition mode\n     * @see #getDecomposition\n     * @see #NO_DECOMPOSITION\n     * @see #CANONICAL_DECOMPOSITION\n     * @throws IllegalArgumentException If the given value is not a valid\n     *            decomposition mode.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setReorderCodes(int... order)",
    "returnType" : "void",
    "comment" : "\n     * Sets the reordering codes for this collator.\n     * Collation reordering allows scripts and some other groups of characters\n     * to be moved relative to each other. This reordering is done on top of\n     * the DUCET/CLDR standard collation order. Reordering can specify groups to be placed\n     * at the start and/or the end of the collation order. These groups are specified using\n     * UScript codes and {@link Collator.ReorderCodes} entries.\n     *\n     * <p>By default, reordering codes specified for the start of the order are placed in the\n     * order given after several special non-script blocks. These special groups of characters\n     * are space, punctuation, symbol, currency, and digit. These special groups are represented with\n     * {@link Collator.ReorderCodes} entries. Script groups can be intermingled with\n     * these special non-script groups if those special groups are explicitly specified in the reordering.\n     *\n     * <p>The special code {@link Collator.ReorderCodes#OTHERS OTHERS}\n     * stands for any script that is not explicitly\n     * mentioned in the list of reordering codes given. Anything that is after OTHERS\n     * will go at the very end of the reordering in the order given.\n     *\n     * <p>The special reorder code {@link Collator.ReorderCodes#DEFAULT DEFAULT}\n     * will reset the reordering for this collator\n     * to the default for this collator. The default reordering may be the DUCET/CLDR order or may be a reordering that\n     * was specified when this collator was created from resource data or from rules. The\n     * DEFAULT code <b>must</b> be the sole code supplied when it is used.\n     * If not, then an {@link IllegalArgumentException} will be thrown.\n     *\n     * <p>The special reorder code {@link Collator.ReorderCodes#NONE NONE}\n     * will remove any reordering for this collator.\n     * The result of setting no reordering will be to have the DUCET/CLDR ordering used. The\n     * NONE code <b>must</b> be the sole code supplied when it is used.\n     *\n     * @param order the reordering codes to apply to this collator; if this is null or an empty array\n     * then this clears any existing reordering\n     * @see #getReorderCodes\n     * @see #getEquivalentReorderCodes\n     * @see Collator.ReorderCodes\n     * @see UScript\n     ",
    "links" : [ "Collator.ReorderCodes#DEFAULT", "Collator.ReorderCodes#OTHERS", "Collator.ReorderCodes", "IllegalArgumentException", "Collator.ReorderCodes#NONE" ]
  }, {
    "name" : "public static final Collator getInstance()",
    "returnType" : "Collator",
    "comment" : "\n     * Returns the Collator for the current default locale.\n     * The default locale is determined by java.util.Locale.getDefault().\n     * @return the Collator for the default locale (for example, en_US) if it\n     *         is created successfully. Otherwise if there is no Collator\n     *         associated with the current locale, the root collator\n     *         will be returned.\n     * @see java.util.Locale#getDefault()\n     * @see #getInstance(Locale)\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object clone() throws CloneNotSupportedException",
    "returnType" : "Object",
    "comment" : "\n     * Clones the collator.\n     * @return a clone of this collator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ServiceShim getShim()",
    "returnType" : "ServiceShim",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean getYesOrNo(String keyword, String s)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getIntValue(String keyword, String s, String... values)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getReorderCode(String keyword, String s)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setAttributesFromKeywords(ULocale loc, Collator coll, RuleBasedCollator rbc)",
    "returnType" : "void",
    "comment" : "\n     * Sets collation attributes according to locale keywords. See\n     * http://www.unicode.org/reports/tr35/tr35-collation.html#Collation_Settings\n     *\n     * Using \"alias\" keywords and values where defined:\n     * http://www.unicode.org/reports/tr35/tr35.html#Old_Locale_Extension_Syntax\n     * http://unicode.org/repos/cldr/trunk/common/bcp47/collation.xml\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Collator getInstance(ULocale locale)",
    "returnType" : "Collator",
    "comment" : "\n     * <strong>[icu]</strong> Returns the Collator for the desired locale.\n     *\n     * <p>For some languages, multiple collation types are available;\n     * for example, \"de@collation=phonebook\".\n     * Starting with ICU 54, collation attributes can be specified via locale keywords as well,\n     * in the old locale extension syntax (\"el@colCaseFirst=upper\")\n     * or in language tag syntax (\"el-u-kf-upper\").\n     * See <a href=\"https://unicode-org.github.io/icu/userguide/collation/api\">User Guide: Collation API</a>.\n     *\n     * @param locale the desired locale.\n     * @return Collator for the desired locale if it is created successfully.\n     *         Otherwise if there is no Collator\n     *         associated with the current locale, the root collator will\n     *         be returned.\n     * @see java.util.Locale\n     * @see java.util.ResourceBundle\n     * @see #getInstance(Locale)\n     * @see #getInstance()\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Collator getInstance(Locale locale)",
    "returnType" : "Collator",
    "comment" : "\n     * Returns the Collator for the desired locale.\n     *\n     * <p>For some languages, multiple collation types are available;\n     * for example, \"de-u-co-phonebk\".\n     * Starting with ICU 54, collation attributes can be specified via locale keywords as well,\n     * in the old locale extension syntax (\"el@colCaseFirst=upper\", only with {@link ULocale})\n     * or in language tag syntax (\"el-u-kf-upper\").\n     * See <a href=\"https://unicode-org.github.io/icu/userguide/collation/api\">User Guide: Collation API</a>.\n     *\n     * @param locale the desired locale.\n     * @return Collator for the desired locale if it is created successfully.\n     *         Otherwise if there is no Collator\n     *         associated with the current locale, the root collator will\n     *         be returned.\n     * @see java.util.Locale\n     * @see java.util.ResourceBundle\n     * @see #getInstance(ULocale)\n     * @see #getInstance()\n     ",
    "links" : [ "android.icu.util.ULocale" ]
  }, {
    "name" : "public static final Object registerInstance(Collator collator, ULocale locale)",
    "returnType" : "Object",
    "comment" : "\n     * <strong>[icu]</strong> Registers a collator as the default collator for the provided locale.  The\n     * collator should not be modified after it is registered.\n     *\n     * <p>Because ICU may choose to cache Collator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Collator.getInstance to avoid undefined behavior.\n     *\n     * @param collator the collator to register\n     * @param locale the locale for which this is the default collator\n     * @return an object that can be used to unregister the registered collator.\n     *\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Object registerFactory(CollatorFactory factory)",
    "returnType" : "Object",
    "comment" : "\n     * <strong>[icu]</strong> Registers a collator factory.\n     *\n     * <p>Because ICU may choose to cache Collator objects internally, this must\n     * be called at application startup, prior to any calls to\n     * Collator.getInstance to avoid undefined behavior.\n     *\n     * @param factory the factory to register\n     * @return an object that can be used to unregister the registered factory.\n     *\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean unregister(Object registryKey)",
    "returnType" : "boolean",
    "comment" : "\n     * <strong>[icu]</strong> Unregisters a collator previously registered using registerInstance.\n     * @param registryKey the object previously returned by registerInstance.\n     * @return true if the collator was successfully unregistered.\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public static Locale[] getAvailableLocales()",
    "returnType" : "Locale[]",
    "comment" : "\n     * Returns the set of locales, as Locale objects, for which collators\n     * are installed.  Note that Locale objects do not support RFC 3066.\n     * @return the list of locales in which collators are installed.\n     * This list includes any that have been registered, in addition to\n     * those that are installed with ICU4J.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale[] getAvailableULocales()",
    "returnType" : "ULocale[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns the set of locales, as ULocale objects, for which collators\n     * are installed.  ULocale objects support RFC 3066.\n     * @return the list of locales in which collators are installed.\n     * This list includes any that have been registered, in addition to\n     * those that are installed with ICU4J.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getKeywords()",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Returns an array of all possible keywords that are relevant to\n     * collation. At this point, the only recognized keyword for this\n     * service is \"collation\".\n     * @return an array of valid collation keywords.\n     * @see #getKeywordValues\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getKeywordValues(String keyword)",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Given a keyword, returns an array of all values for\n     * that keyword that are currently in use.\n     * @param keyword one of the keywords returned by getKeywords.\n     * @see #getKeywords\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getKeywordValuesForLocale(String key, ULocale locale, boolean commonlyUsed)",
    "returnType" : "String[]",
    "comment" : "\n     * <strong>[icu]</strong> Given a key and a locale, returns an array of string values in a preferred\n     * order that would make a difference. These are all and only those values where\n     * the open (creation) of the service with the locale formed from the input locale\n     * plus input keyword and that value has different behavior than creation with the\n     * input locale alone.\n     * @param key           one of the keys supported by this service.  For now, only\n     *                      \"collation\" is supported.\n     * @param locale        the locale\n     * @param commonlyUsed  if set to true it will return only commonly used values\n     *                      with the given locale in preferred order.  Otherwise,\n     *                      it will return all the available values for the locale.\n     * @return an array of string values for the given key and the locale.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale getFunctionalEquivalent(String keyword, ULocale locID, boolean[] isAvailable)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the functionally equivalent locale for the given\n     * requested locale, with respect to given keyword, for the\n     * collation service.  If two locales return the same result, then\n     * collators instantiated for these locales will behave\n     * equivalently.  The converse is not always true; two collators\n     * may in fact be equivalent, but return different results, due to\n     * internal details.  The return result has no other meaning than\n     * that stated above, and implies nothing as to the relationship\n     * between the two locales.  This is intended for use by\n     * applications who wish to cache collators, or otherwise reuse\n     * collators when possible.  The functional equivalent may change\n     * over time.  For more information, please see the <a\n     * href=\"https://unicode-org.github.io/icu/userguide/locale#locales-and-services\">\n     * Locales and Services</a> section of the ICU User Guide.\n     * @param keyword a particular keyword as enumerated by\n     * getKeywords.\n     * @param locID The requested locale\n     * @param isAvailable If non-null, isAvailable[0] will receive and\n     * output boolean that indicates whether the requested locale was\n     * 'available' to the collation service. If non-null, isAvailable\n     * must have length &gt;= 1.\n     * @return the locale\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final ULocale getFunctionalEquivalent(String keyword, ULocale locID)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the functionally equivalent locale for the given\n     * requested locale, with respect to given keyword, for the\n     * collation service.\n     * @param keyword a particular keyword as enumerated by\n     * getKeywords.\n     * @param locID The requested locale\n     * @return the locale\n     * @see #getFunctionalEquivalent(String,ULocale,boolean[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(Locale objectLocale, Locale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the name of the collator for the objectLocale, localized for the\n     * displayLocale.\n     * @param objectLocale the locale of the collator\n     * @param displayLocale the locale for the collator's display name\n     * @return the display name\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(ULocale objectLocale, ULocale displayLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the name of the collator for the objectLocale, localized for the\n     * displayLocale.\n     * @param objectLocale the locale of the collator\n     * @param displayLocale the locale for the collator's display name\n     * @return the display name\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(Locale objectLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the name of the collator for the objectLocale, localized for the\n     * default <code>DISPLAY</code> locale.\n     * @param objectLocale the locale of the collator\n     * @return the display name\n     * @see android.icu.util.ULocale.Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getDisplayName(ULocale objectLocale)",
    "returnType" : "String",
    "comment" : "\n     * <strong>[icu]</strong> Returns the name of the collator for the objectLocale, localized for the\n     * default <code>DISPLAY</code> locale.\n     * @param objectLocale the locale of the collator\n     * @return the display name\n     * @see android.icu.util.ULocale.Category#DISPLAY\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStrength()",
    "returnType" : "int",
    "comment" : "\n     * Returns this Collator's strength attribute. The strength attribute\n     * determines the minimum level of difference considered significant.\n     * <strong>[icu] Note:</strong> This can return QUATERNARY strength, which is not supported by the\n     * JDK version.\n     * <p>\n     * See the Collator class description for more details.\n     * <p>The base class method always returns {@link #TERTIARY}.\n     * Subclasses should override it if appropriate.\n     *\n     * @return this Collator's current strength attribute.\n     * @see #setStrength\n     * @see #PRIMARY\n     * @see #SECONDARY\n     * @see #TERTIARY\n     * @see #QUATERNARY\n     * @see #IDENTICAL\n     ",
    "links" : [ "#TERTIARY" ]
  }, {
    "name" : "public int getDecomposition()",
    "returnType" : "int",
    "comment" : "\n     * Returns the decomposition mode of this Collator. The decomposition mode\n     * determines how Unicode composed characters are handled.\n     * <p>\n     * See the Collator class description for more details.\n     * <p>The base class method always returns {@link #NO_DECOMPOSITION}.\n     * Subclasses should override it if appropriate.\n     *\n     * @return the decomposition mode\n     * @see #setDecomposition\n     * @see #NO_DECOMPOSITION\n     * @see #CANONICAL_DECOMPOSITION\n     ",
    "links" : [ "#NO_DECOMPOSITION" ]
  }, {
    "name" : "public boolean equals(String source, String target)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the equality of two text Strings using\n     * this Collator's rules, strength and decomposition mode.  Convenience method.\n     * @param source the source string to be compared.\n     * @param target the target string to be compared.\n     * @return true if the strings are equal according to the collation\n     *         rules, otherwise false.\n     * @see #compare\n     * @throws NullPointerException thrown if either arguments is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public UnicodeSet getTailoredSet()",
    "returnType" : "UnicodeSet",
    "comment" : "\n     * <strong>[icu]</strong> Returns a UnicodeSet that contains all the characters and sequences tailored\n     * in this collator.\n     * @return a pointer to a UnicodeSet object containing all the\n     *         code points and sequences that may sort differently than\n     *         in the root collator.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int compare(String source, String target)",
    "returnType" : "int",
    "comment" : "\n     * Compares the source text String to the target text String according to\n     * this Collator's rules, strength and decomposition mode.\n     * Returns an integer less than,\n     * equal to or greater than zero depending on whether the source String is\n     * less than, equal to or greater than the target String. See the Collator\n     * class description for an example of use.\n     *\n     * @param source the source String.\n     * @param target the target String.\n     * @return Returns an integer value. Value is less than zero if source is\n     *         less than target, value is zero if source and target are equal,\n     *         value is greater than zero if source is greater than target.\n     * @see CollationKey\n     * @see #getCollationKey\n     * @throws NullPointerException thrown if either argument is null.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int compare(Object source, Object target)",
    "returnType" : "int",
    "comment" : "\n     * Compares the source Object to the target Object.\n     *\n     * @param source the source Object.\n     * @param target the target Object.\n     * @return Returns an integer value. Value is less than zero if source is\n     *         less than target, value is zero if source and target are equal,\n     *         value is greater than zero if source is greater than target.\n     * @throws ClassCastException thrown if either arguments cannot be cast to CharSequence.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int doCompare(CharSequence left, CharSequence right)",
    "returnType" : "int",
    "comment" : "\n     * Compares two CharSequences.\n     * The base class just calls compare(left.toString(), right.toString()).\n     * Subclasses should instead implement this method and have the String API call this method.\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract CollationKey getCollationKey(String source)",
    "returnType" : "CollationKey",
    "comment" : "\n     * <p>\n     * Transforms the String into a CollationKey suitable for efficient\n     * repeated comparison.  The resulting key depends on the collator's\n     * rules, strength and decomposition mode.\n     *\n     * <p>Note that collation keys are often less efficient than simply doing comparison.\n     * For more details, see the ICU User Guide.\n     *\n     * <p>See the CollationKey class documentation for more information.\n     * @param source the string to be transformed into a CollationKey.\n     * @return the CollationKey for the given String based on this Collator's\n     *         collation rules. If the source String is null, a null\n     *         CollationKey is returned.\n     * @see CollationKey\n     * @see #compare(String, String)\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract RawCollationKey getRawCollationKey(String source, RawCollationKey key)",
    "returnType" : "RawCollationKey",
    "comment" : "\n     * <strong>[icu]</strong> Returns the simpler form of a CollationKey for the String source following\n     * the rules of this Collator and stores the result into the user provided argument\n     * key.  If key has a internal byte array of length that's too small for the result,\n     * the internal byte array will be grown to the exact required size.\n     *\n     * <p>Note that collation keys are often less efficient than simply doing comparison.\n     * For more details, see the ICU User Guide.\n     *\n     * @param source the text String to be transformed into a RawCollationKey\n     * @return If key is null, a new instance of RawCollationKey will be\n     *         created and returned, otherwise the user provided key will be\n     *         returned.\n     * @see #compare(String, String)\n     * @see #getCollationKey\n     * @see RawCollationKey\n     * @hide unsupported on Android\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collator setMaxVariable(int group)",
    "returnType" : "Collator",
    "comment" : "\n     * <strong>[icu]</strong> Sets the variable top to the top of the specified reordering group.\n     * The variable top determines the highest-sorting character\n     * which is affected by the alternate handling behavior.\n     * If that attribute is set to UCOL_NON_IGNORABLE, then the variable top has no effect.\n     *\n     * <p>The base class implementation throws an UnsupportedOperationException.\n     * @param group one of Collator.ReorderCodes.SPACE, Collator.ReorderCodes.PUNCTUATION,\n     *              Collator.ReorderCodes.SYMBOL, Collator.ReorderCodes.CURRENCY;\n     *              or Collator.ReorderCodes.DEFAULT to restore the default max variable group\n     * @return this\n     * @see #getMaxVariable\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMaxVariable()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Returns the maximum reordering group whose characters are affected by\n     * the alternate handling behavior.\n     *\n     * <p>The base class implementation returns Collator.ReorderCodes.PUNCTUATION.\n     * @return the maximum variable reordering group.\n     * @see #setMaxVariable\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract int setVariableTop(String varTop)",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Sets the variable top to the primary weight of the specified string.\n     *\n     * <p>Beginning with ICU 53, the variable top is pinned to\n     * the top of one of the supported reordering groups,\n     * and it must not be beyond the last of those groups.\n     * See {@link #setMaxVariable(int)}.\n     *\n     * @param varTop one or more (if contraction) characters to which the\n     *               variable top should be set\n     * @return variable top primary weight\n     * @exception IllegalArgumentException\n     *                is thrown if varTop argument is not a valid variable top element. A variable top element is\n     *                invalid when\n     *                <ul>\n     *                <li>it is a contraction that does not exist in the Collation order\n     *                <li>the variable top is beyond\n     *                    the last reordering group supported by setMaxVariable()\n     *                <li>when the varTop argument is null or zero in length.\n     *                </ul>\n     * @see #getVariableTop\n     * @see RuleBasedCollator#setAlternateHandlingShifted\n     * @deprecated ICU 53 Call {@link #setMaxVariable(int)} instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#setMaxVariable(int)" ]
  }, {
    "name" : "public abstract int getVariableTop()",
    "returnType" : "int",
    "comment" : "\n     * <strong>[icu]</strong> Gets the variable top value of a Collator.\n     *\n     * @return the variable top primary weight\n     * @see #getMaxVariable\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void setVariableTop(int varTop)",
    "returnType" : "void",
    "comment" : "\n     * <strong>[icu]</strong> Sets the variable top to the specified primary weight.\n     *\n     * <p>Beginning with ICU 53, the variable top is pinned to\n     * the top of one of the supported reordering groups,\n     * and it must not be beyond the last of those groups.\n     * See {@link #setMaxVariable(int)}.\n     *\n     * @param varTop primary weight, as returned by setVariableTop or getVariableTop\n     * @see #getVariableTop\n     * @see #setVariableTop(String)\n     * @deprecated ICU 53 Call setMaxVariable() instead.\n     * @hide original deprecated declaration\n     ",
    "links" : [ "#setMaxVariable(int)" ]
  }, {
    "name" : "public abstract VersionInfo getVersion()",
    "returnType" : "VersionInfo",
    "comment" : "\n     * <strong>[icu]</strong> Returns the version of this collator object.\n     * @return the version object associated with this collator\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract VersionInfo getUCAVersion()",
    "returnType" : "VersionInfo",
    "comment" : "\n     * <strong>[icu]</strong> Returns the UCA version of this collator object.\n     * @return the version object associated with this collator\n     ",
    "links" : [ ]
  }, {
    "name" : "public int[] getReorderCodes()",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves the reordering codes for this collator.\n     * These reordering codes are a combination of UScript codes and ReorderCodes.\n     * @return a copy of the reordering codes for this collator;\n     * if none are set then returns an empty array\n     * @see #setReorderCodes\n     * @see #getEquivalentReorderCodes\n     * @see Collator.ReorderCodes\n     * @see UScript\n     ",
    "links" : [ ]
  }, {
    "name" : "public static int[] getEquivalentReorderCodes(int reorderCode)",
    "returnType" : "int[]",
    "comment" : "\n     * Retrieves all the reorder codes that are grouped with the given reorder code. Some reorder\n     * codes are grouped and must reorder together.\n     * Beginning with ICU 55, scripts only reorder together if they are primary-equal,\n     * for example Hiragana and Katakana.\n     *\n     * @param reorderCode The reorder code to determine equivalence for.\n     * @return the set of all reorder codes in the same group as the given reorder code.\n     * @see #setReorderCodes\n     * @see #getReorderCodes\n     * @see Collator.ReorderCodes\n     * @see UScript\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isFrozen()",
    "returnType" : "boolean",
    "comment" : "\n     * Determines whether the object has been frozen or not.\n     *\n     * <p>An unfrozen Collator is mutable and not thread-safe.\n     * A frozen Collator is immutable and thread-safe.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collator freeze()",
    "returnType" : "Collator",
    "comment" : "\n     * Freezes the collator.\n     * @return the collator itself.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Collator cloneAsThawed()",
    "returnType" : "Collator",
    "comment" : "\n     * Provides for the clone operation. Any clone is initially unfrozen.\n     ",
    "links" : [ ]
  }, {
    "name" : "public ULocale getLocale(ULocale.Type type)",
    "returnType" : "ULocale",
    "comment" : "\n     * <strong>[icu]</strong> Returns the locale that was used to create this object, or null.\n     * This may may differ from the locale requested at the time of\n     * this object's creation.  For example, if an object is created\n     * for locale <tt>en_US_CALIFORNIA</tt>, the actual data may be\n     * drawn from <tt>en</tt> (the <i>actual</i> locale), and\n     * <tt>en_US</tt> may be the most specific locale that exists (the\n     * <i>valid</i> locale).\n     *\n     * <p>Note: This method will be implemented in ICU 3.0; ICU 2.8\n     * contains a partial preview implementation.  The <i>actual</i>\n     * locale is returned correctly, but the <i>valid</i> locale is\n     * not, in most cases.\n     *\n     * <p>The base class method always returns {@link ULocale#ROOT}.\n     * Subclasses should override it if appropriate.\n     *\n     * @param type type of information requested, either {@link\n     * android.icu.util.ULocale#VALID_LOCALE} or {@link\n     * android.icu.util.ULocale#ACTUAL_LOCALE}.\n     * @return the information specified by <i>type</i>, or null if\n     * this object was not constructed from locale data.\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ "android.icu.util.ULocale#ACTUAL_LOCALE", "android.icu.util.ULocale#ROOT", "android.icu.util.ULocale#VALID_LOCALE" ]
  }, {
    "name" : " void setLocale(ULocale valid, ULocale actual)",
    "returnType" : "void",
    "comment" : "\n     * Set information about the locales that were used to create this\n     * object.  If the object was not constructed from locale data,\n     * both arguments should be set to null.  Otherwise, neither\n     * should be null.  The actual locale must be at the same level or\n     * less specific than the valid locale.  This method is intended\n     * for use by factories or other entities that create objects of\n     * this class.\n     *\n     * <p>The base class method does nothing. Subclasses should override it if appropriate.\n     *\n     * @param valid the most specific locale containing any resource\n     * data, or null\n     * @param actual the locale containing data used to construct this\n     * object, or null\n     * @see android.icu.util.ULocale\n     * @see android.icu.util.ULocale#VALID_LOCALE\n     * @see android.icu.util.ULocale#ACTUAL_LOCALE\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object obj)", "public int hashCode()", "private void checkNotFrozen()", "public void setStrength(int newStrength)", "public Collator setStrength2(int newStrength)", "public void setDecomposition(int decomposition)", "public void setReorderCodes(int... order)", "public static final Collator getInstance()", "public Object clone() throws CloneNotSupportedException", "private static ServiceShim getShim()", "private static final boolean getYesOrNo(String keyword, String s)", "private static final int getIntValue(String keyword, String s, String... values)", "private static final int getReorderCode(String keyword, String s)", "private static void setAttributesFromKeywords(ULocale loc, Collator coll, RuleBasedCollator rbc)", "public static final Collator getInstance(ULocale locale)", "public static final Collator getInstance(Locale locale)", "public static final Object registerInstance(Collator collator, ULocale locale)", "public static final Object registerFactory(CollatorFactory factory)", "public static final boolean unregister(Object registryKey)", "public static Locale[] getAvailableLocales()", "public static final ULocale[] getAvailableULocales()", "public static final String[] getKeywords()", "public static final String[] getKeywordValues(String keyword)", "public static final String[] getKeywordValuesForLocale(String key, ULocale locale, boolean commonlyUsed)", "public static final ULocale getFunctionalEquivalent(String keyword, ULocale locID, boolean[] isAvailable)", "public static final ULocale getFunctionalEquivalent(String keyword, ULocale locID)", "public static String getDisplayName(Locale objectLocale, Locale displayLocale)", "public static String getDisplayName(ULocale objectLocale, ULocale displayLocale)", "public static String getDisplayName(Locale objectLocale)", "public static String getDisplayName(ULocale objectLocale)", "public int getStrength()", "public int getDecomposition()", "public boolean equals(String source, String target)", "public UnicodeSet getTailoredSet()", "public abstract int compare(String source, String target)", "public int compare(Object source, Object target)", "protected int doCompare(CharSequence left, CharSequence right)", "public abstract CollationKey getCollationKey(String source)", "public abstract RawCollationKey getRawCollationKey(String source, RawCollationKey key)", "public Collator setMaxVariable(int group)", "public int getMaxVariable()", "public abstract int setVariableTop(String varTop)", "public abstract int getVariableTop()", "public abstract void setVariableTop(int varTop)", "public abstract VersionInfo getVersion()", "public abstract VersionInfo getUCAVersion()", "public int[] getReorderCodes()", "public static int[] getEquivalentReorderCodes(int reorderCode)", "public boolean isFrozen()", "public Collator freeze()", "public Collator cloneAsThawed()", "public ULocale getLocale(ULocale.Type type)", " void setLocale(ULocale valid, ULocale actual)" ],
  "variableNames" : [ "PRIMARY", "SECONDARY", "TERTIARY", "QUATERNARY", "IDENTICAL", "FULL_DECOMPOSITION", "NO_DECOMPOSITION", "CANONICAL_DECOMPOSITION", "shim", "KEYWORDS", "RESOURCE", "BASE", "DEBUG" ]
}