{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/os/health/HealthStats.java",
  "packageName" : "android.os.health",
  "className" : "HealthStats",
  "comment" : "\n * A HealthStats object contains system health data about an application.\n *\n * <p>\n * <b>Data Types</b><br>\n * Each of the keys references data in one of five data types:\n *\n * <p>\n * A <b>measurement</b> metric contains a sinlge {@code long} value. That value may\n * be a count, a time, or some other type of value. The unit for a measurement\n * (COUNT, MS, etc) will always be in the name of the constant for the key to\n * retrieve it. For example, the\n * {@link android.os.health.UidHealthStats#MEASUREMENT_WIFI_TX_MS UidHealthStats.MEASUREMENT_WIFI_TX_MS}\n * value is the number of milliseconds (ms) that were spent transmitting on wifi by an\n * application.  The\n * {@link android.os.health.UidHealthStats#MEASUREMENT_MOBILE_RX_PACKETS UidHealthStats.MEASUREMENT_MOBILE_RX_PACKETS}\n * measurement is the number of packets received on behalf of an application.\n * The {@link android.os.health.UidHealthStats#MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT\n *     UidHealthStats.MEASUREMENT_TOUCH_USER_ACTIVITY_COUNT}\n * measurement is the number of times the user touched the screen, causing the\n * screen to stay awake.\n *\n *\n * <p>\n * A <b>timer</b> metric contains an {@code int} count and a {@code long} time,\n * measured in milliseconds. Timers track how many times a resource was used, and\n * the total duration for that usage. For example, the\n * {@link android.os.health.UidHealthStats#TIMER_FLASHLIGHT}\n * timer tracks how many times the application turned on the flashlight, and for\n * how many milliseconds total it kept it on.\n *\n * <p>\n * A <b>measurement map</b> metric is a mapping of {@link java.lang.String} names to\n * {@link java.lang.Long} values.  The names typically are application provided names. For\n * example, the\n * {@link android.os.health.PackageHealthStats#MEASUREMENTS_WAKEUP_ALARMS_COUNT\n *         PackageHealthStats.MEASUREMENTS_WAKEUP_ALARMS_COUNT}\n * measurement map is a mapping of the tag provided to the\n * {@link android.app.AlarmManager} when the alarm is scheduled.\n *\n * <p>\n * A <b>timer map</b> metric is a mapping of {@link java.lang.String} names to\n * {@link android.os.health.TimerStat} objects. The names are typically application\n * provided names.  For example, the\n * {@link android.os.health.UidHealthStats#TIMERS_WAKELOCKS_PARTIAL UidHealthStats.TIMERS_WAKELOCKS_PARTIAL}\n * is a mapping of tag provided to the {@link android.os.PowerManager} when the\n * wakelock is created to the number of times and for how long each wakelock was\n * active.\n *\n * <p>\n * Lastly, a <b>health stats</b> metric is a mapping of {@link java.lang.String}\n * names to a recursive {@link android.os.health.HealthStats} object containing\n * more detailed information. For example, the\n * {@link android.os.health.UidHealthStats#STATS_PACKAGES UidHealthStats.STATS_PACKAGES}\n * metric is a mapping of the package names for each of the APKs sharing a uid to\n * the information recorded for that apk.  The returned HealthStats objects will\n * each be associated with a different set of constants.  For the HealthStats\n * returned for UidHealthStats.STATS_PACKAGES, the keys come from the\n * {@link android.os.health.PackageHealthStats}  class.\n *\n * <p>\n * The keys that are available are subject to change, depending on what a particular\n * device or software version is capable of recording. Applications must handle the absence of\n * data without crashing.\n ",
  "variables" : [ {
    "name" : "mDataType",
    "type" : "String",
    "comment" : " Header fields",
    "links" : [ ]
  }, {
    "name" : "mTimerKeys",
    "type" : "int[]",
    "comment" : " TimerStat fields",
    "links" : [ ]
  }, {
    "name" : "mTimerCounts",
    "type" : "int[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimerTimes",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeasurementKeys",
    "type" : "int[]",
    "comment" : " Measurement fields",
    "links" : [ ]
  }, {
    "name" : "mMeasurementValues",
    "type" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStatsKeys",
    "type" : "int[]",
    "comment" : " Stats fields",
    "links" : [ ]
  }, {
    "name" : "mStatsValues",
    "type" : "ArrayMap<String, HealthStats>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTimersKeys",
    "type" : "int[]",
    "comment" : " Timers fields",
    "links" : [ ]
  }, {
    "name" : "mTimersValues",
    "type" : "ArrayMap<String, TimerStat>[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMeasurementsKeys",
    "type" : "int[]",
    "comment" : " Measurements fields",
    "links" : [ ]
  }, {
    "name" : "mMeasurementsValues",
    "type" : "ArrayMap<String, Long>[]",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public String getDataType()",
    "returnType" : "String",
    "comment" : "\n     * Get a name representing the contents of this object.\n     *\n     * @see UidHealthStats\n     * @see PackageHealthStats\n     * @see PidHealthStats\n     * @see ProcessHealthStats\n     * @see ServiceHealthStats\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasTimer(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this object contains a TimerStat for the supplied key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public TimerStat getTimer(int key)",
    "returnType" : "TimerStat",
    "comment" : "\n     * Return a TimerStat object for the given key.\n     *\n     * This will allocate a new {@link TimerStat} object, which may be wasteful. Instead, use\n     * {@link #getTimerCount} and {@link #getTimerTime}.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasTimer hasTimer(int) To check if a value for the given key is present.\n     ",
    "links" : [ "android.os.health.TimerStat", "#getTimerCount", "#getTimerTime" ]
  }, {
    "name" : "public int getTimerCount(int key)",
    "returnType" : "int",
    "comment" : "\n     * Get the count for the timer for the given key.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasTimer hasTimer(int) To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getTimerTime(int key)",
    "returnType" : "long",
    "comment" : "\n     * Get the time for the timer for the given key, in milliseconds.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasTimer hasTimer(int) To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimerKeyCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of timer values in this object. Can be used to iterate through\n     * the available timers.\n     *\n     * @see #getTimerKeyAt\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimerKeyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the key for the timer at the given index.  Index must be between 0 and the result\n     * of {@link #getTimerKeyCount getTimerKeyCount()}.\n     *\n     * @see #getTimerKeyCount\n     ",
    "links" : [ "#getTimerKeyCount" ]
  }, {
    "name" : "public boolean hasMeasurement(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this object contains a measurement for the supplied key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getMeasurement(int key)",
    "returnType" : "long",
    "comment" : "\n     * Get the measurement for the given key.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasMeasurement hasMeasurement(int) To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeasurementKeyCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of measurement values in this object. Can be used to iterate through\n     * the available measurements.\n     *\n     * @see #getMeasurementKeyAt\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeasurementKeyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the key for the measurement at the given index.  Index must be between 0 and the result\n     * of {@link #getMeasurementKeyCount getMeasurementKeyCount()}.\n     *\n     * @see #getMeasurementKeyCount\n     ",
    "links" : [ "#getMeasurementKeyCount" ]
  }, {
    "name" : "public boolean hasStats(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this object contains a HealthStats map for the supplied key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, HealthStats> getStats(int key)",
    "returnType" : "Map<String, HealthStats>",
    "comment" : "\n     * Get the HealthStats map for the given key.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasStats hasStats(int) To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatsKeyCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of HealthStat map values in this object. Can be used to iterate through\n     * the available measurements.\n     *\n     * @see #getMeasurementKeyAt\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStatsKeyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the key for the timer at the given index.  Index must be between 0 and the result\n     * of {@link #getStatsKeyCount getStatsKeyCount()}.\n     *\n     * @see #getStatsKeyCount\n     ",
    "links" : [ "#getStatsKeyCount" ]
  }, {
    "name" : "public boolean hasTimers(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this object contains a timers map for the supplied key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, TimerStat> getTimers(int key)",
    "returnType" : "Map<String, TimerStat>",
    "comment" : "\n     * Get the TimerStat map for the given key.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasTimers hasTimers(int) To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimersKeyCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of timer map values in this object. Can be used to iterate through\n     * the available timer maps.\n     *\n     * @see #getTimersKeyAt\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getTimersKeyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the key for the timer map at the given index.  Index must be between 0 and the result\n     * of {@link #getTimersKeyCount getTimersKeyCount()}.\n     *\n     * @see #getTimersKeyCount\n     ",
    "links" : [ "#getTimersKeyCount" ]
  }, {
    "name" : "public boolean hasMeasurements(int key)",
    "returnType" : "boolean",
    "comment" : "\n     * Return whether this object contains a measurements map for the supplied key.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Long> getMeasurements(int key)",
    "returnType" : "Map<String, Long>",
    "comment" : "\n     * Get the measurements map for the given key.\n     *\n     * @throws IndexOutOfBoundsException When the key is not present in this object.\n     * @see #hasMeasurements To check if a value for the given key is present.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeasurementsKeyCount()",
    "returnType" : "int",
    "comment" : "\n     * Get the number of measurement map values in this object. Can be used to iterate through\n     * the available measurement maps.\n     *\n     * @see #getMeasurementsKeyAt\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeasurementsKeyAt(int index)",
    "returnType" : "int",
    "comment" : "\n     * Get the key for the measurement map at the given index.\n     * Index must be between 0 and the result\n     * of {@link #getMeasurementsKeyCount getMeasurementsKeyCount()}.\n     *\n     * @see #getMeasurementsKeyCount\n     ",
    "links" : [ "#getMeasurementsKeyCount" ]
  }, {
    "name" : "private static int getIndex(int[] keys, int key)",
    "returnType" : "int",
    "comment" : "\n     * Get the index in keys of key.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayMap<String, HealthStats> createHealthStatsMap(Parcel in)",
    "returnType" : "ArrayMap<String, HealthStats>",
    "comment" : "\n     * Create an ArrayMap<String,HealthStats> from the given Parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayMap<String, T> createParcelableMap(Parcel in, Parcelable.Creator<T> creator)",
    "returnType" : "ArrayMap<String, T>",
    "comment" : "\n     * Create an ArrayMap<String,T extends Parcelable> from the given Parcel using\n     * the given Parcelable.Creator.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayMap<String, Long> createLongsMap(Parcel in)",
    "returnType" : "ArrayMap<String, Long>",
    "comment" : "\n     * Create an ArrayMap<String,Long> from the given Parcel.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDataType", "mTimerKeys", "mTimerCounts", "mTimerTimes", "mMeasurementKeys", "mMeasurementValues", "mStatsKeys", "mStatsValues", "mTimersKeys", "mTimersValues", "mMeasurementsKeys", "mMeasurementsValues" ],
  "methodNames" : [ "public String getDataType()", "public boolean hasTimer(int key)", "public TimerStat getTimer(int key)", "public int getTimerCount(int key)", "public long getTimerTime(int key)", "public int getTimerKeyCount()", "public int getTimerKeyAt(int index)", "public boolean hasMeasurement(int key)", "public long getMeasurement(int key)", "public int getMeasurementKeyCount()", "public int getMeasurementKeyAt(int index)", "public boolean hasStats(int key)", "public Map<String, HealthStats> getStats(int key)", "public int getStatsKeyCount()", "public int getStatsKeyAt(int index)", "public boolean hasTimers(int key)", "public Map<String, TimerStat> getTimers(int key)", "public int getTimersKeyCount()", "public int getTimersKeyAt(int index)", "public boolean hasMeasurements(int key)", "public Map<String, Long> getMeasurements(int key)", "public int getMeasurementsKeyCount()", "public int getMeasurementsKeyAt(int index)", "private static int getIndex(int[] keys, int key)", "private static ArrayMap<String, HealthStats> createHealthStatsMap(Parcel in)", "private static ArrayMap<String, T> createParcelableMap(Parcel in, Parcelable.Creator<T> creator)", "private static ArrayMap<String, Long> createLongsMap(Parcel in)" ]
}