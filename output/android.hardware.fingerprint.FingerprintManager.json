{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/fingerprint/FingerprintManager.java",
  "packageName" : "android.hardware.fingerprint",
  "className" : "FingerprintManager",
  "comment" : "\n * A class that coordinates access to the fingerprint hardware.\n * @deprecated See {@link BiometricPrompt} which shows a system-provided dialog upon starting\n * authentication. In a world where devices may have different types of biometric authentication,\n * it's much more realistic to have a system-provided authentication dialog since the method may\n * vary by vendor/device.\n ",
  "links" : [ "android.hardware.biometrics.BiometricPrompt" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ENROLL_FIND_SENSOR",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ENROLL_ENROLL",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UDFPS_UI_OVERLAY_SHOWN",
    "type" : "int",
    "comment" : "\n     * Udfps ui event of overlay is shown on the screen.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "UDFPS_UI_READY",
    "type" : "int",
    "comment" : "\n     * Udfps ui event of the udfps UI being ready (e.g. HBM illumination is enabled).\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "SENSOR_ID_ANY",
    "type" : "int",
    "comment" : "\n     * Request authentication with any single sensor.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IFingerprintService",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mToken",
    "type" : "IBinder",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEnrollStageThresholds",
    "type" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mProps",
    "type" : "List<FingerprintSensorPropertiesInternal>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExecutor",
    "type" : "HandlerExecutor",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public List<SensorProperties> getSensorProperties()",
    "returnType" : "List<SensorProperties>",
    "comment" : "\n     * Retrieves a list of properties for all fingerprint sensors on the device.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public BiometricTestSession createTestSession(int sensorId)",
    "returnType" : "BiometricTestSession",
    "comment" : "\n     * Retrieves a test session for FingerprintManager.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void useHandler(Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Use the provided handler thread for events.\n     * @param handler\n     ",
    "links" : [ ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)",
    "returnType" : "void",
    "comment" : "\n     * Request authentication of a crypto object. This call warms up the fingerprint hardware\n     * and starts scanning for a fingerprint. It terminates when\n     * {@link AuthenticationCallback#onAuthenticationError(int, CharSequence)} or\n     * {@link AuthenticationCallback#onAuthenticationSucceeded(AuthenticationResult)} is called, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     *\n     * @param crypto object associated with the call or null if none required.\n     * @param cancel an object that can be used to cancel authentication\n     * @param flags optional flags; should be 0\n     * @param callback an object to receive authentication events\n     * @param handler an optional handler to handle callback events\n     *\n     * @throws IllegalArgumentException if the crypto operation is not supported or is not backed\n     *         by <a href=\"{@docRoot}training/articles/keystore.html\">Android Keystore\n     *         facility</a>.\n     * @throws IllegalStateException if the crypto primitive is not initialized.\n     * @deprecated See {@link BiometricPrompt#authenticate(CancellationSignal, Executor,\n     * BiometricPrompt.AuthenticationCallback)} and {@link BiometricPrompt#authenticate(\n     * BiometricPrompt.CryptoObject, CancellationSignal, Executor,\n     * BiometricPrompt.AuthenticationCallback)}\n     ",
    "links" : [ "#onAuthenticationError(int", "android.hardware.biometrics.BiometricPrompt#authenticate(CancellationSignal", "#onAuthenticationSucceeded(AuthenticationResult)", "android.hardware.biometrics.BiometricPrompt#authenticate(" ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, Handler handler, int userId)",
    "returnType" : "void",
    "comment" : "\n     * Per-user version of authenticate.\n     * @deprecated use {@link #authenticate(CryptoObject, CancellationSignal, AuthenticationCallback, Handler, FingerprintAuthenticateOptions)}.\n     * @hide\n     ",
    "links" : [ "#authenticate(CryptoObject" ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, Handler handler, int sensorId, int userId, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Per-user and per-sensor version of authenticate.\n     * @deprecated use {@link #authenticate(CryptoObject, CancellationSignal, AuthenticationCallback, Handler, FingerprintAuthenticateOptions)}.\n     * @hide\n     ",
    "links" : [ "#authenticate(CryptoObject" ]
  }, {
    "name" : "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @NonNull Handler handler, @NonNull FingerprintAuthenticateOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Version of authenticate with additional options.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void detectFingerprint(@NonNull CancellationSignal cancel, @NonNull FingerprintDetectionCallback callback, @NonNull FingerprintAuthenticateOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Uses the fingerprint hardware to detect for the presence of a finger, without giving details\n     * about accept/reject/lockout.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void enroll(byte[] hardwareAuthToken, CancellationSignal cancel, int userId, EnrollmentCallback callback, @EnrollReason int enrollReason, FingerprintEnrollOptions options)",
    "returnType" : "void",
    "comment" : "\n     * Request fingerprint enrollment. This call warms up the fingerprint hardware\n     * and starts scanning for fingerprints. Progress will be indicated by callbacks to the\n     * {@link EnrollmentCallback} object. It terminates when\n     * {@link EnrollmentCallback#onEnrollmentError(int, CharSequence)} or\n     * {@link EnrollmentCallback#onEnrollmentProgress(int) is called with remaining == 0, at\n     * which point the object is no longer valid. The operation can be canceled by using the\n     * provided cancel object.\n     * @param token a unique token provided by a recent creation or verification of device\n     * credentials (e.g. pin, pattern or password).\n     * @param cancel an object that can be used to cancel enrollment\n     * @param userId the user to whom this fingerprint will belong to\n     * @param callback an object to receive enrollment events\n     * @param shouldLogMetrics a flag that indicates if enrollment failure/success metrics\n     * should be logged.\n     * @hide\n     ",
    "links" : [ "#onEnrollmentProgress(int)", "#onEnrollmentError(int", "EnrollmentCallback" ]
  }, {
    "name" : "public void generateChallenge(int sensorId, int userId, GenerateChallengeCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Generates a unique random challenge in the TEE. A typical use case is to have it wrapped in a\n     * HardwareAuthenticationToken, minted by Gatekeeper upon PIN/Pattern/Password verification.\n     * The HardwareAuthenticationToken can then be sent to the biometric HAL together with a\n     * request to perform sensitive operation(s) (for example enroll), represented by the challenge.\n     * Doing this ensures that a the sensitive operation cannot be performed unless the user has\n     * entered confirmed PIN/Pattern/Password.\n     *\n     * @see com.android.server.locksettings.LockSettingsService\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void generateChallenge(int userId, GenerateChallengeCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Same as {@link #generateChallenge(int, GenerateChallengeCallback)}, but assumes the first\n     * enumerated sensor.\n     * @hide\n     ",
    "links" : [ "#generateChallenge(int" ]
  }, {
    "name" : "public void revokeChallenge(int userId, long challenge)",
    "returnType" : "void",
    "comment" : "\n     * Revokes the specified challenge.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void resetLockout(int sensorId, int userId, @Nullable byte[] hardwareAuthToken)",
    "returnType" : "void",
    "comment" : "\n     * Reset the lockout when user authenticates with strong auth (e.g. PIN, pattern or password)\n     *\n     * @param sensorId Sensor ID that this operation takes effect for\n     * @param userId User ID that this operation takes effect for.\n     * @param hardwareAuthToken An opaque token returned by password confirmation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void remove(Fingerprint fp, int userId, RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Remove given fingerprint template from fingerprint hardware and/or protected storage.\n     * @param fp the fingerprint item to remove\n     * @param userId the user who this fingerprint belongs to\n     * @param callback an optional callback to verify that fingerprint templates have been\n     * successfully removed. May be null of no callback is required.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeAll(int userId, @NonNull RemovalCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Removes all fingerprint templates for the given user.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void rename(int fpId, int userId, String newName)",
    "returnType" : "void",
    "comment" : "\n     * Renames the given fingerprint template\n     * @param fpId the fingerprint id\n     * @param userId the user who this fingerprint belongs to\n     * @param newName the new name\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Fingerprint> getEnrolledFingerprints(int userId)",
    "returnType" : "List<Fingerprint>",
    "comment" : "\n     * Obtain the list of enrolled fingerprints templates.\n     * @return list of current fingerprint items\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Fingerprint> getEnrolledFingerprints()",
    "returnType" : "List<Fingerprint>",
    "comment" : "\n     * Obtain the list of enrolled fingerprints templates.\n     * @return list of current fingerprint items\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledTemplates(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUdfpsOverlayController(@NonNull IUdfpsOverlayController controller)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void registerBiometricStateListener(@NonNull BiometricStateListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Forwards BiometricStateListener to FingerprintService\n     * @param listener new BiometricStateListener being added\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerDown(long requestId, int sensorId, int x, int y, float minor, float major)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerUp(long requestId, int sensorId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerDown(long requestId, int sensorId, int pointerId, float x, float y, float minor, float major, float orientation, long time, long gestureStart, boolean isAod)",
    "returnType" : "void",
    "comment" : "\n     * TODO(b/218388821): The parameter list should be replaced with PointerContext.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPointerUp(long requestId, int sensorId, int pointerId, float x, float y, float minor, float major, float orientation, long time, long gestureStart, boolean isAod)",
    "returnType" : "void",
    "comment" : "\n     * TODO(b/218388821): The parameter list should be replaced with PointerContext.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onUdfpsUiEvent(@UdfpsUiEvent int event, long requestId, int sensorId)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onPowerPressed()",
    "returnType" : "void",
    "comment" : "\n     * This is triggered by SideFpsEventHandler\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean hasEnrolledFingerprints()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if there is at least one fingerprint enrolled.\n     *\n     * @return true if at least one fingerprint is enrolled, false otherwise\n     * @deprecated See {@link BiometricPrompt} and\n     * {@link FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS}\n     ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt", "android.hardware.fingerprint.FingerprintManager#FINGERPRINT_ERROR_NO_FINGERPRINTS" ]
  }, {
    "name" : "public boolean hasEnrolledFingerprints(int userId)",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isHardwareDetected()",
    "returnType" : "boolean",
    "comment" : "\n     * Determine if fingerprint hardware is present and functional.\n     *\n     * @return true if hardware is present and functional, false otherwise.\n     * @deprecated See {@link BiometricPrompt} and\n     * {@link FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE}\n     ",
    "links" : [ "android.hardware.biometrics.BiometricPrompt", "android.hardware.fingerprint.FingerprintManager#FINGERPRINT_ERROR_HW_UNAVAILABLE" ]
  }, {
    "name" : "public List<FingerprintSensorPropertiesInternal> getSensorPropertiesInternal()",
    "returnType" : "List<FingerprintSensorPropertiesInternal>",
    "comment" : "\n     * Get statically configured sensor properties.\n     * @deprecated Generally unsafe to use, use\n     * {@link FingerprintManager#addAuthenticatorsRegisteredCallback} API instead.\n     * In most cases this method will work as expected, but during early boot up, it will be\n     * null/empty and there is no way for the caller to know when it's actual value is ready.\n     * @hide\n     ",
    "links" : [ "android.hardware.fingerprint.FingerprintManager#addAuthenticatorsRegisteredCallback" ]
  }, {
    "name" : "public boolean isPowerbuttonFps()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether the device has a power button fingerprint sensor.\n     * @return boolean indicating whether power button is fingerprint sensor\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addAuthenticatorsRegisteredCallback(IFingerprintAuthenticatorsRegisteredCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * Adds a callback that gets called when the service registers all of the fingerprint\n     * authenticators (HALs).\n     *\n     * If the fingerprint authenticators are already registered when the callback is added, the\n     * callback is invoked immediately.\n     *\n     * The callback is automatically removed after it's invoked.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLockoutModeForUser(int sensorId, int userId)",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scheduleWatchdog()",
    "returnType" : "void",
    "comment" : "\n     * Schedules a watchdog.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLockoutResetCallback(final LockoutResetCallback callback)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void sendPowerPressed()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int getCurrentUserId()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private FingerprintSensorPropertiesInternal getFirstFingerprintSensor()",
    "returnType" : "FingerprintSensorPropertiesInternal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelEnrollment(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelAuthentication(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cancelFingerprintDetect(long requestId)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getEnrollStageCount()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getEnrollStageThreshold(int index)",
    "returnType" : "float",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private float[] createEnrollStageThresholds(@NonNull Context context)",
    "returnType" : "float[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static String getErrorString(Context context, int errMsg, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public List<SensorProperties> getSensorProperties()", "public BiometricTestSession createTestSession(int sensorId)", "private void useHandler(Handler handler)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, int flags, @NonNull AuthenticationCallback callback, @Nullable Handler handler)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, Handler handler, int userId)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, Handler handler, int sensorId, int userId, int flags)", "public void authenticate(@Nullable CryptoObject crypto, @Nullable CancellationSignal cancel, @NonNull AuthenticationCallback callback, @NonNull Handler handler, @NonNull FingerprintAuthenticateOptions options)", "public void detectFingerprint(@NonNull CancellationSignal cancel, @NonNull FingerprintDetectionCallback callback, @NonNull FingerprintAuthenticateOptions options)", "public void enroll(byte[] hardwareAuthToken, CancellationSignal cancel, int userId, EnrollmentCallback callback, @EnrollReason int enrollReason, FingerprintEnrollOptions options)", "public void generateChallenge(int sensorId, int userId, GenerateChallengeCallback callback)", "public void generateChallenge(int userId, GenerateChallengeCallback callback)", "public void revokeChallenge(int userId, long challenge)", "public void resetLockout(int sensorId, int userId, @Nullable byte[] hardwareAuthToken)", "public void remove(Fingerprint fp, int userId, RemovalCallback callback)", "public void removeAll(int userId, @NonNull RemovalCallback callback)", "public void rename(int fpId, int userId, String newName)", "public List<Fingerprint> getEnrolledFingerprints(int userId)", "public List<Fingerprint> getEnrolledFingerprints()", "public boolean hasEnrolledTemplates()", "public boolean hasEnrolledTemplates(int userId)", "public void setUdfpsOverlayController(@NonNull IUdfpsOverlayController controller)", "public void registerBiometricStateListener(@NonNull BiometricStateListener listener)", "public void onPointerDown(long requestId, int sensorId, int x, int y, float minor, float major)", "public void onPointerUp(long requestId, int sensorId)", "public void onPointerDown(long requestId, int sensorId, int pointerId, float x, float y, float minor, float major, float orientation, long time, long gestureStart, boolean isAod)", "public void onPointerUp(long requestId, int sensorId, int pointerId, float x, float y, float minor, float major, float orientation, long time, long gestureStart, boolean isAod)", "public void onUdfpsUiEvent(@UdfpsUiEvent int event, long requestId, int sensorId)", "public void onPowerPressed()", "public boolean hasEnrolledFingerprints()", "public boolean hasEnrolledFingerprints(int userId)", "public boolean isHardwareDetected()", "public List<FingerprintSensorPropertiesInternal> getSensorPropertiesInternal()", "public boolean isPowerbuttonFps()", "public void addAuthenticatorsRegisteredCallback(IFingerprintAuthenticatorsRegisteredCallback callback)", "public int getLockoutModeForUser(int sensorId, int userId)", "public void scheduleWatchdog()", "public void addLockoutResetCallback(final LockoutResetCallback callback)", "private void sendPowerPressed()", "private int getCurrentUserId()", "private FingerprintSensorPropertiesInternal getFirstFingerprintSensor()", "private void cancelEnrollment(long requestId)", "private void cancelAuthentication(long requestId)", "private void cancelFingerprintDetect(long requestId)", "public int getEnrollStageCount()", "public float getEnrollStageThreshold(int index)", "private float[] createEnrollStageThresholds(@NonNull Context context)", "public static String getErrorString(Context context, int errMsg, int vendorCode)", "public static String getAcquiredString(Context context, int acquireInfo, int vendorCode)" ],
  "variableNames" : [ "TAG", "ENROLL_FIND_SENSOR", "ENROLL_ENROLL", "UDFPS_UI_OVERLAY_SHOWN", "UDFPS_UI_READY", "SENSOR_ID_ANY", "mService", "mContext", "mToken", "mHandler", "mEnrollStageThresholds", "mProps", "mExecutor" ]
}