{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/net/InMemoryCookieStore.java",
  "packageName" : "java.net",
  "className" : "InMemoryCookieStore",
  "comment" : "\n * A simple in-memory java.net.CookieStore implementation\n *\n * @author Edward Wang\n * @since 1.6\n * @hide Visible for testing only.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "uriIndex",
    "type" : "Map<URI, List<HttpCookie>>",
    "comment" : " END Android-removed: Remove cookieJar and domainIndex.",
    "links" : [ ]
  }, {
    "name" : "lock",
    "type" : "ReentrantLock",
    "comment" : " use ReentrantLock instead of syncronized for scalability",
    "links" : [ ]
  }, {
    "name" : "applyMCompatibility",
    "type" : "boolean",
    "comment" : " BEGIN Android-changed: Add targetSdkVersion and remove cookieJar and domainIndex.",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(URI uri, HttpCookie cookie)",
    "returnType" : "void",
    "comment" : "\n     * Add one cookie into cookie store.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<HttpCookie> get(URI uri)",
    "returnType" : "List<HttpCookie>",
    "comment" : "\n     * Get all cookies, which:\n     *  1) given uri domain-matches with, or, associated with\n     *     given uri when added to the cookie store.\n     *  3) not expired.\n     * See RFC 2965 sec. 3.3.4 for more detail.\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<HttpCookie> getCookies()",
    "returnType" : "List<HttpCookie>",
    "comment" : "\n     * Get all cookies in cookie store, except those have expired\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<URI> getURIs()",
    "returnType" : "List<URI>",
    "comment" : "\n     * Get all URIs, which are associated with at least one cookie\n     * of this cookie store.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(URI uri, HttpCookie ck)",
    "returnType" : "boolean",
    "comment" : "\n     * Remove a cookie from store\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll()",
    "returnType" : "boolean",
    "comment" : "\n     * Remove all cookies in this cookie store.\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean netscapeDomainMatches(String domain, String host)",
    "returnType" : "boolean",
    "comment" : "\n     * This is almost the same as HttpCookie.domainMatches except for\n     * one difference: It won't reject cookies when the 'H' part of the\n     * domain contains a dot ('.').\n     * I.E.: RFC 2965 section 3.3.2 says that if host is x.y.domain.com\n     * and the cookie domain is .domain.com, then it should be rejected.\n     * However that's not how the real world works. Browsers don't reject and\n     * some sites, like yahoo.com do actually expect these cookies to be\n     * passed along.\n     * And should be used for 'old' style cookies (aka Netscape type of cookies)\n     ",
    "links" : [ ]
  }, {
    "name" : "private void getInternal1(List<HttpCookie> cookies, Map<URI, List<HttpCookie>> cookieIndex, String host)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void getInternal2(List<HttpCookie> cookies, Map<T, List<HttpCookie>> cookieIndex, T comparator)",
    "returnType" : "void",
    "comment" : "                          a cookie in index should be returned",
    "links" : [ ]
  }, {
    "name" : "private void addIndex(Map<T, List<HttpCookie>> indexStore, T index, HttpCookie cookie)",
    "returnType" : "void",
    "comment" : " add 'cookie' indexed by 'index' into 'indexStore'",
    "links" : [ ]
  }, {
    "name" : "private URI getEffectiveURI(URI uri)",
    "returnType" : "URI",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(URI uri, HttpCookie cookie)", "public List<HttpCookie> get(URI uri)", "public List<HttpCookie> getCookies()", "public List<URI> getURIs()", "public boolean remove(URI uri, HttpCookie ck)", "public boolean removeAll()", "private boolean netscapeDomainMatches(String domain, String host)", "private void getInternal1(List<HttpCookie> cookies, Map<URI, List<HttpCookie>> cookieIndex, String host)", "private void getInternal2(List<HttpCookie> cookies, Map<T, List<HttpCookie>> cookieIndex, T comparator)", "private void addIndex(Map<T, List<HttpCookie>> indexStore, T index, HttpCookie cookie)", "private URI getEffectiveURI(URI uri)" ],
  "variableNames" : [ "uriIndex", "lock", "applyMCompatibility" ]
}