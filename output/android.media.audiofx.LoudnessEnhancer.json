{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/audiofx/LoudnessEnhancer.java",
  "packageName" : "android.media.audiofx",
  "className" : "LoudnessEnhancer",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "PARAM_TARGET_GAIN_MB",
    "type" : "int",
    "comment" : "\n     * The maximum gain applied applied to the signal to process.\n     * It is expressed in millibels (100mB = 1dB) where 0mB corresponds to no amplification.\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListener",
    "type" : "OnParameterChangeListener",
    "comment" : "\n     * Registered listener for parameter changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mBaseParamListener",
    "type" : "BaseParameterListener",
    "comment" : "\n     * Listener used internally to to receive raw parameter change events\n     * from AudioEffect super class\n     ",
    "links" : [ ]
  }, {
    "name" : "mParamListenerLock",
    "type" : "Object",
    "comment" : "\n     * Lock for access to mParamListener\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setTargetGain(int gainmB) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * Set the target gain for the audio effect.\n     * The target gain is the maximum value by which a sample value will be amplified when the\n     * effect is enabled.\n     * @param gainmB the effect target gain expressed in mB. 0mB corresponds to no amplification.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public float getTargetGain() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "float",
    "comment" : "\n     * Return the target gain.\n     * @return the effect target gain expressed in mB.\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameterListener(OnParameterChangeListener listener)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Registers an OnParameterChangeListener interface.\n     * @param listener OnParameterChangeListener interface registered\n     ",
    "links" : [ ]
  }, {
    "name" : "public LoudnessEnhancer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "LoudnessEnhancer.Settings",
    "comment" : "\n     * @hide\n     * Gets the LoudnessEnhancer properties. This method is useful when a snapshot of current\n     * effect settings must be saved by the application.\n     * @return a LoudnessEnhancer.Settings object containing all current parameters values\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setProperties(LoudnessEnhancer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Sets the LoudnessEnhancer properties. This method is useful when bass boost settings\n     * have to be applied from a previous backup.\n     * @param settings a LoudnessEnhancer.Settings object containing the properties to apply\n     * @throws IllegalStateException\n     * @throws IllegalArgumentException\n     * @throws UnsupportedOperationException\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setTargetGain(int gainmB) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public float getTargetGain() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setParameterListener(OnParameterChangeListener listener)", "public LoudnessEnhancer.Settings getProperties() throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException", "public void setProperties(LoudnessEnhancer.Settings settings) throws IllegalStateException, IllegalArgumentException, UnsupportedOperationException" ],
  "variableNames" : [ "TAG", "PARAM_TARGET_GAIN_MB", "mParamListener", "mBaseParamListener", "mParamListenerLock" ]
}