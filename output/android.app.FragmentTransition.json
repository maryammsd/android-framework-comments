{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/FragmentTransition.java",
  "packageName" : "android.app",
  "className" : "FragmentTransition",
  "comment" : "\n * Contains the Fragment Transition functionality for both ordered and reordered\n * Fragment Transactions. With reordered fragment transactions, all Views have been\n * added to the View hierarchy prior to calling startTransitions. With ordered\n * fragment transactions, Views will be removed and added after calling startTransitions.\n ",
  "variables" : [ {
    "name" : "INVERSE_OPS",
    "type" : "int[]",
    "comment" : "\n     * The inverse of all BackStackRecord operation commands. This assumes that\n     * REPLACE operations have already been replaced by add/remove operations.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " static void startTransitions(FragmentManagerImpl fragmentManager, ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex, boolean isReordered)",
    "returnType" : "void",
    "comment" : "\n     * The main entry point for Fragment Transitions, this starts the transitions\n     * set on the leaving Fragment's {@link Fragment#getExitTransition()}, the\n     * entering Fragment's {@link Fragment#getEnterTransition()} and\n     * {@link Fragment#getSharedElementEnterTransition()}. When popping,\n     * the leaving Fragment's {@link Fragment#getReturnTransition()} and\n     * {@link Fragment#getSharedElementReturnTransition()} and the entering\n     * {@link Fragment#getReenterTransition()} will be run.\n     * <p>\n     * With reordered Fragment Transitions, all Views have been added to the\n     * View hierarchy prior to calling this method. The incoming Fragment's Views\n     * will be INVISIBLE. With ordered Fragment Transitions, this method\n     * is called before any change has been made to the hierarchy. That means\n     * that the added Fragments have not created their Views yet and the hierarchy\n     * is unknown.\n     *\n     * @param fragmentManager The executing FragmentManagerImpl\n     * @param records The list of transactions being executed.\n     * @param isRecordPop For each transaction, whether it is a pop transaction or not.\n     * @param startIndex The first index into records and isRecordPop to execute as\n     *                   part of this transition.\n     * @param endIndex One past the last index into records and isRecordPop to execute\n     *                 as part of this transition.\n     * @param isReordered true if this is a reordered transaction, meaning that the\n     *                    Views of incoming fragments have been added. false if the\n     *                    transaction has yet to be run and Views haven't been created.\n     ",
    "links" : [ "android.app.Fragment#getExitTransition()", "android.app.Fragment#getReenterTransition()", "android.app.Fragment#getSharedElementEnterTransition()", "android.app.Fragment#getEnterTransition()", "android.app.Fragment#getReturnTransition()", "android.app.Fragment#getSharedElementReturnTransition()" ]
  }, {
    "name" : "private static ArrayMap<String, String> calculateNameOverrides(int containerId, ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)",
    "returnType" : "ArrayMap<String, String>",
    "comment" : "\n     * Iterates through the transactions that affect a given fragment container\n     * and tracks the shared element names across transactions. This is most useful\n     * in pop transactions where the names of shared elements are known.\n     *\n     * @param containerId The container ID that is executing the transition.\n     * @param records The list of transactions being executed.\n     * @param isRecordPop For each transaction, whether it is a pop transaction or not.\n     * @param startIndex The first index into records and isRecordPop to execute as\n     *                   part of this transition.\n     * @param endIndex One past the last index into records and isRecordPop to execute\n     *                 as part of this transition.\n     * @return A map from the initial shared element name to the final shared element name\n     * before any onMapSharedElements is run.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void configureTransitionsReordered(FragmentManagerImpl fragmentManager, int containerId, FragmentContainerTransition fragments, View nonExistentView, ArrayMap<String, String> nameOverrides)",
    "returnType" : "void",
    "comment" : "\n     * Configures a transition for a single fragment container for which the transaction was\n     * reordered. That means that all Fragment Views have been added and incoming fragment\n     * Views are marked invisible.\n     *\n     * @param fragmentManager The executing FragmentManagerImpl\n     * @param containerId The container ID that is executing the transition.\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @param nonExistentView A View that does not exist in the hierarchy. This is used to\n     *                        prevent transitions from acting on other Views when there is no\n     *                        other target.\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View" ]
  }, {
    "name" : "private static void configureTransitionsOrdered(FragmentManagerImpl fragmentManager, int containerId, FragmentContainerTransition fragments, View nonExistentView, ArrayMap<String, String> nameOverrides)",
    "returnType" : "void",
    "comment" : "\n     * Configures a transition for a single fragment container for which the transaction was\n     * ordered. That means that the transaction has not been executed yet, so incoming\n     * Views are not yet known.\n     *\n     * @param fragmentManager The executing FragmentManagerImpl\n     * @param containerId The container ID that is executing the transition.\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @param nonExistentView A View that does not exist in the hierarchy. This is used to\n     *                        prevent transitions from acting on other Views when there is no\n     *                        other target.\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View" ]
  }, {
    "name" : "private static void replaceHide(Transition exitTransition, Fragment exitingFragment, final ArrayList<View> exitingViews)",
    "returnType" : "void",
    "comment" : "\n     * Replace hide operations with visibility changes on the exiting views. Instead of making\n     * the entire fragment's view GONE, make each exiting view INVISIBLE. At the end of the\n     * transition, make the fragment's view GONE.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void scheduleTargetChange(final ViewGroup sceneRoot, final Fragment inFragment, final View nonExistentView, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final ArrayList<View> enteringViews, final Transition exitTransition, final ArrayList<View> exitingViews)",
    "returnType" : "void",
    "comment" : "\n     * This method is used for fragment transitions for ordered transactions to change the\n     * enter and exit transition targets after the call to\n     * {@link TransitionManager#beginDelayedTransition(ViewGroup, Transition)}. The exit transition\n     * must ensure that it does not target any Views and the enter transition must start targeting\n     * the Views of the incoming Fragment.\n     *\n     * @param sceneRoot The fragment container View\n     * @param inFragment The last fragment that is entering\n     * @param nonExistentView A view that does not exist in the hierarchy that is used as a\n     *                        transition target to ensure no View is targeted.\n     * @param sharedElementsIn The shared element Views of the incoming fragment\n     * @param enterTransition The enter transition of the incoming fragment\n     * @param enteringViews The entering Views of the incoming fragment\n     * @param exitTransition The exit transition of the outgoing fragment\n     * @param exitingViews The exiting views of the outgoing fragment\n     ",
    "links" : [ "android.transition.TransitionManager#beginDelayedTransition(ViewGroup" ]
  }, {
    "name" : "private static TransitionSet getSharedElementTransition(Fragment inFragment, Fragment outFragment, boolean isPop)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Returns a TransitionSet containing the shared element transition. The wrapping TransitionSet\n     * targets all shared elements to ensure that no other Views are targeted. The shared element\n     * transition can then target any or all shared elements without worrying about accidentally\n     * targeting entering or exiting Views.\n     *\n     * @param inFragment The incoming fragment\n     * @param outFragment the outgoing fragment\n     * @param isPop True if this is a pop transaction or false if it is a normal (add) transaction.\n     * @return A TransitionSet wrapping the shared element transition or null if no such transition\n     * exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Transition getEnterTransition(Fragment inFragment, boolean isPop)",
    "returnType" : "Transition",
    "comment" : "\n     * Returns a clone of the enter transition or null if no such transition exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Transition getExitTransition(Fragment outFragment, boolean isPop)",
    "returnType" : "Transition",
    "comment" : "\n     * Returns a clone of the exit transition or null if no such transition exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Transition cloneTransition(Transition transition)",
    "returnType" : "Transition",
    "comment" : "\n     * Returns a clone of a transition or null if it is null\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TransitionSet configureSharedElementsReordered(final ViewGroup sceneRoot, final View nonExistentView, ArrayMap<String, String> nameOverrides, final FragmentContainerTransition fragments, final ArrayList<View> sharedElementsOut, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final Transition exitTransition)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Configures the shared elements of an reordered fragment transaction's transition.\n     * This retrieves the shared elements of the outgoing and incoming fragments, maps the\n     * views, and sets up the epicenter on the transitions.\n     * <p>\n     * The epicenter of exit and shared element transitions is the first shared element\n     * in the outgoing fragment. The epicenter of the entering transition is the first shared\n     * element in the incoming fragment.\n     *\n     * @param sceneRoot The fragment container View\n     * @param nonExistentView A View that does not exist in the hierarchy. This is used to\n     *                        prevent transitions from acting on other Views when there is no\n     *                        other target.\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @param sharedElementsOut A list modified to contain the shared elements in the outgoing\n     *                          fragment\n     * @param sharedElementsIn A list modified to contain the shared elements in the incoming\n     *                         fragment\n     * @param enterTransition The transition used for entering Views, modified by applying the\n     *                        epicenter\n     * @param exitTransition The transition used for exiting Views, modified by applying the\n     *                       epicenter\n     * @return The shared element transition or null if no shared elements exist\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View" ]
  }, {
    "name" : "private static void addSharedElementsWithMatchingNames(ArrayList<View> views, ArrayMap<String, View> sharedElements, Collection<String> nameOverridesSet)",
    "returnType" : "void",
    "comment" : "\n     * Add Views from sharedElements into views that have the transitionName in the\n     * nameOverridesSet.\n     *\n     * @param views               Views list to add shared elements to\n     * @param sharedElements      List of shared elements\n     * @param nameOverridesSet    The transition names for all views to be copied from\n     *                            sharedElements to views.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static TransitionSet configureSharedElementsOrdered(final ViewGroup sceneRoot, final View nonExistentView, ArrayMap<String, String> nameOverrides, final FragmentContainerTransition fragments, final ArrayList<View> sharedElementsOut, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final Transition exitTransition)",
    "returnType" : "TransitionSet",
    "comment" : "\n     * Configures the shared elements of an ordered fragment transaction's transition.\n     * This retrieves the shared elements of the incoming fragments, and schedules capturing\n     * the incoming fragment's shared elements. It also maps the views, and sets up the epicenter\n     * on the transitions.\n     * <p>\n     * The epicenter of exit and shared element transitions is the first shared element\n     * in the outgoing fragment. The epicenter of the entering transition is the first shared\n     * element in the incoming fragment.\n     *\n     * @param sceneRoot The fragment container View\n     * @param nonExistentView A View that does not exist in the hierarchy. This is used to\n     *                        prevent transitions from acting on other Views when there is no\n     *                        other target.\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @param sharedElementsOut A list modified to contain the shared elements in the outgoing\n     *                          fragment\n     * @param sharedElementsIn A list modified to contain the shared elements in the incoming\n     *                         fragment\n     * @param enterTransition The transition used for entering Views, modified by applying the\n     *                        epicenter\n     * @param exitTransition The transition used for exiting Views, modified by applying the\n     *                       epicenter\n     * @return The shared element transition or null if no shared elements exist\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View" ]
  }, {
    "name" : "private static ArrayMap<String, View> captureOutSharedElements(ArrayMap<String, String> nameOverrides, TransitionSet sharedElementTransition, FragmentContainerTransition fragments)",
    "returnType" : "ArrayMap<String, View>",
    "comment" : "\n     * Finds the shared elements in the outgoing fragment. It also calls\n     * {@link SharedElementCallback#onMapSharedElements(List, Map)} to allow more control\n     * of the shared element mapping. {@code nameOverrides} is updated to match the\n     * actual transition name of the mapped shared elements.\n     *\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     * @param sharedElementTransition The shared element transition\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @return The mapping of shared element names to the Views in the hierarchy or null\n     * if there is no shared element transition.\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View", "android.app.SharedElementCallback#onMapSharedElements(List" ]
  }, {
    "name" : "private static ArrayMap<String, View> captureInSharedElements(ArrayMap<String, String> nameOverrides, TransitionSet sharedElementTransition, FragmentContainerTransition fragments)",
    "returnType" : "ArrayMap<String, View>",
    "comment" : "\n     * Finds the shared elements in the incoming fragment. It also calls\n     * {@link SharedElementCallback#onMapSharedElements(List, Map)} to allow more control\n     * of the shared element mapping. {@code nameOverrides} is updated to match the\n     * actual transition name of the mapped shared elements.\n     *\n     * @param nameOverrides A map of the shared element names from the starting fragment to\n     *                      the final fragment's Views as given in\n     *                      {@link FragmentTransaction#addSharedElement(View, String)}.\n     * @param sharedElementTransition The shared element transition\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @return The mapping of shared element names to the Views in the hierarchy or null\n     * if there is no shared element transition.\n     ",
    "links" : [ "android.app.FragmentTransaction#addSharedElement(View", "android.app.SharedElementCallback#onMapSharedElements(List" ]
  }, {
    "name" : "private static String findKeyForValue(ArrayMap<String, String> map, String value)",
    "returnType" : "String",
    "comment" : "\n     * Utility to find the String key in {@code map} that maps to {@code value}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static View getInEpicenterView(ArrayMap<String, View> inSharedElements, FragmentContainerTransition fragments, Transition enterTransition, boolean inIsPop)",
    "returnType" : "View",
    "comment" : "\n     * Returns the View in the incoming Fragment that should be used as the epicenter.\n     *\n     * @param inSharedElements The mapping of shared element names to Views in the\n     *                         incoming fragment.\n     * @param fragments A structure holding the transitioning fragments in this container.\n     * @param enterTransition The transition used for the incoming Fragment's views\n     * @param inIsPop Is the incoming fragment being added as a pop transaction?\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setOutEpicenter(TransitionSet sharedElementTransition, Transition exitTransition, ArrayMap<String, View> outSharedElements, boolean outIsPop, BackStackRecord outTransaction)",
    "returnType" : "void",
    "comment" : "\n     * Sets the epicenter for the exit transition.\n     *\n     * @param sharedElementTransition The shared element transition\n     * @param exitTransition The transition for the outgoing fragment's views\n     * @param outSharedElements Shared elements in the outgoing fragment\n     * @param outIsPop Is the outgoing fragment being removed as a pop transaction?\n     * @param outTransaction The transaction that caused the fragment to be removed.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void setEpicenter(Transition transition, View view)",
    "returnType" : "void",
    "comment" : "\n     * Sets a transition epicenter to the rectangle of a given View.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void retainValues(ArrayMap<String, String> nameOverrides, ArrayMap<String, View> namedViews)",
    "returnType" : "void",
    "comment" : "\n     * A utility to retain only the mappings in {@code nameOverrides} that have a value\n     * that has a key in {@code namedViews}. This is a useful equivalent to\n     * {@link ArrayMap#retainAll(Collection)} for values.\n     ",
    "links" : [ "android.util.ArrayMap#retainAll(Collection)" ]
  }, {
    "name" : "private static void callSharedElementStartEnd(Fragment inFragment, Fragment outFragment, boolean isPop, ArrayMap<String, View> sharedElements, boolean isStart)",
    "returnType" : "void",
    "comment" : "\n     * Calls the {@link SharedElementCallback#onSharedElementStart(List, List, List)} or\n     * {@link SharedElementCallback#onSharedElementEnd(List, List, List)} on the appropriate\n     * incoming or outgoing fragment.\n     *\n     * @param inFragment The incoming fragment\n     * @param outFragment The outgoing fragment\n     * @param isPop Is the incoming fragment part of a pop transaction?\n     * @param sharedElements The shared element Views\n     * @param isStart Call the start or end call on the SharedElementCallback\n     ",
    "links" : [ "android.app.SharedElementCallback#onSharedElementEnd(List", "android.app.SharedElementCallback#onSharedElementStart(List" ]
  }, {
    "name" : "private static void setSharedElementTargets(TransitionSet transition, View nonExistentView, ArrayList<View> sharedViews)",
    "returnType" : "void",
    "comment" : "\n     * Finds all children of the shared elements and sets the wrapping TransitionSet\n     * targets to point to those. It also limits transitions that have no targets to the\n     * specific shared elements. This allows developers to target child views of the\n     * shared elements specifically, but this doesn't happen by default.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void bfsAddViewChildren(final List<View> views, final View startView)",
    "returnType" : "void",
    "comment" : "\n     * Uses a breadth-first scheme to add startView and all of its children to views.\n     * It won't add a child if it is already in views.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean containedBeforeIndex(final List<View> views, final View view, final int maxIndex)",
    "returnType" : "boolean",
    "comment" : "\n     * Does a linear search through views for view, limited to maxIndex.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void scheduleRemoveTargets(final Transition overalTransition, final Transition enterTransition, final ArrayList<View> enteringViews, final Transition exitTransition, final ArrayList<View> exitingViews, final TransitionSet sharedElementTransition, final ArrayList<View> sharedElementsIn)",
    "returnType" : "void",
    "comment" : "\n     * After the transition has started, remove all targets that we added to the transitions\n     * so that the transitions are left in a clean state.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void replaceTargets(Transition transition, ArrayList<View> oldTargets, ArrayList<View> newTargets)",
    "returnType" : "void",
    "comment" : "\n     * This method removes the views from transitions that target ONLY those views and\n     * replaces them with the new targets list.\n     * The views list should match those added in addTargets and should contain\n     * one view that is not in the view hierarchy (state.nonExistentView).\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void addTargets(Transition transition, ArrayList<View> views)",
    "returnType" : "void",
    "comment" : "\n     * This method adds views as targets to the transition, but only if the transition\n     * doesn't already have a target. It is best for views to contain one View object\n     * that does not exist in the view hierarchy (state.nonExistentView) so that\n     * when they are removed later, a list match will suffice to remove the targets.\n     * Otherwise, if you happened to have targeted the exact views for the transition,\n     * the replaceTargets call will remove them unexpectedly.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean hasSimpleTarget(Transition transition)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if there are any targets based on ID, transition or type.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isNullOrEmpty(List list)",
    "returnType" : "boolean",
    "comment" : "\n     * Simple utility to detect if a list is null or has no elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ArrayList<View> configureEnteringExitingViews(Transition transition, Fragment fragment, ArrayList<View> sharedElements, View nonExistentView)",
    "returnType" : "ArrayList<View>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setViewVisibility(ArrayList<View> views, @View.Visibility int visibility)",
    "returnType" : "void",
    "comment" : "\n     * Sets the visibility of all Views in {@code views} to {@code visibility}.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Transition mergeTransitions(Transition enterTransition, Transition exitTransition, Transition sharedElementTransition, Fragment inFragment, boolean isPop)",
    "returnType" : "Transition",
    "comment" : "\n     * Merges exit, shared element, and enter transitions so that they act together or\n     * sequentially as defined in the fragments.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void calculateFragments(BackStackRecord transaction, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isReordered)",
    "returnType" : "void",
    "comment" : "\n     * Finds the first removed fragment and last added fragments when going forward.\n     * If none of the fragments have transitions, then both lists will be empty.\n     *\n     * @param transitioningFragments Keyed on the container ID, the first fragments to be removed,\n     *                               and last fragments to be added. This will be modified by\n     *                               this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void calculatePopFragments(BackStackRecord transaction, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isReordered)",
    "returnType" : "void",
    "comment" : "\n     * Finds the first removed fragment and last added fragments when popping the back stack.\n     * If none of the fragments have transitions, then both lists will be empty.\n     *\n     * @param transitioningFragments Keyed on the container ID, the first fragments to be removed,\n     *                               and last fragments to be added. This will be modified by\n     *                               this method.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void addToFirstInLastOut(BackStackRecord transaction, BackStackRecord.Op op, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isPop, boolean isReorderedTransaction)",
    "returnType" : "void",
    "comment" : "\n     * Examines the {@code command} and may set the first out or last in fragment for the fragment's\n     * container.\n     *\n     * @param transaction The executing transaction\n     * @param op The operation being run.\n     * @param transitioningFragments A structure holding the first in and last out fragments\n     *                               for each fragment container.\n     * @param isPop Is the operation a pop?\n     * @param isReorderedTransaction True if the operations have been partially executed and the\n     *                               added fragments have Views in the hierarchy or false if the\n     *                               operations haven't been executed yet.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static FragmentContainerTransition ensureContainer(FragmentContainerTransition containerTransition, SparseArray<FragmentContainerTransition> transitioningFragments, int containerId)",
    "returnType" : "FragmentContainerTransition",
    "comment" : "\n     * Ensures that a FragmentContainerTransition has been added to the SparseArray. If so,\n     * it returns the existing one. If not, one is created and added to the SparseArray and\n     * returned.\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "INVERSE_OPS" ],
  "methodNames" : [ " static void startTransitions(FragmentManagerImpl fragmentManager, ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex, boolean isReordered)", "private static ArrayMap<String, String> calculateNameOverrides(int containerId, ArrayList<BackStackRecord> records, ArrayList<Boolean> isRecordPop, int startIndex, int endIndex)", "private static void configureTransitionsReordered(FragmentManagerImpl fragmentManager, int containerId, FragmentContainerTransition fragments, View nonExistentView, ArrayMap<String, String> nameOverrides)", "private static void configureTransitionsOrdered(FragmentManagerImpl fragmentManager, int containerId, FragmentContainerTransition fragments, View nonExistentView, ArrayMap<String, String> nameOverrides)", "private static void replaceHide(Transition exitTransition, Fragment exitingFragment, final ArrayList<View> exitingViews)", "private static void scheduleTargetChange(final ViewGroup sceneRoot, final Fragment inFragment, final View nonExistentView, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final ArrayList<View> enteringViews, final Transition exitTransition, final ArrayList<View> exitingViews)", "private static TransitionSet getSharedElementTransition(Fragment inFragment, Fragment outFragment, boolean isPop)", "private static Transition getEnterTransition(Fragment inFragment, boolean isPop)", "private static Transition getExitTransition(Fragment outFragment, boolean isPop)", "private static Transition cloneTransition(Transition transition)", "private static TransitionSet configureSharedElementsReordered(final ViewGroup sceneRoot, final View nonExistentView, ArrayMap<String, String> nameOverrides, final FragmentContainerTransition fragments, final ArrayList<View> sharedElementsOut, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final Transition exitTransition)", "private static void addSharedElementsWithMatchingNames(ArrayList<View> views, ArrayMap<String, View> sharedElements, Collection<String> nameOverridesSet)", "private static TransitionSet configureSharedElementsOrdered(final ViewGroup sceneRoot, final View nonExistentView, ArrayMap<String, String> nameOverrides, final FragmentContainerTransition fragments, final ArrayList<View> sharedElementsOut, final ArrayList<View> sharedElementsIn, final Transition enterTransition, final Transition exitTransition)", "private static ArrayMap<String, View> captureOutSharedElements(ArrayMap<String, String> nameOverrides, TransitionSet sharedElementTransition, FragmentContainerTransition fragments)", "private static ArrayMap<String, View> captureInSharedElements(ArrayMap<String, String> nameOverrides, TransitionSet sharedElementTransition, FragmentContainerTransition fragments)", "private static String findKeyForValue(ArrayMap<String, String> map, String value)", "private static View getInEpicenterView(ArrayMap<String, View> inSharedElements, FragmentContainerTransition fragments, Transition enterTransition, boolean inIsPop)", "private static void setOutEpicenter(TransitionSet sharedElementTransition, Transition exitTransition, ArrayMap<String, View> outSharedElements, boolean outIsPop, BackStackRecord outTransaction)", "private static void setEpicenter(Transition transition, View view)", "private static void retainValues(ArrayMap<String, String> nameOverrides, ArrayMap<String, View> namedViews)", "private static void callSharedElementStartEnd(Fragment inFragment, Fragment outFragment, boolean isPop, ArrayMap<String, View> sharedElements, boolean isStart)", "private static void setSharedElementTargets(TransitionSet transition, View nonExistentView, ArrayList<View> sharedViews)", "private static void bfsAddViewChildren(final List<View> views, final View startView)", "private static boolean containedBeforeIndex(final List<View> views, final View view, final int maxIndex)", "private static void scheduleRemoveTargets(final Transition overalTransition, final Transition enterTransition, final ArrayList<View> enteringViews, final Transition exitTransition, final ArrayList<View> exitingViews, final TransitionSet sharedElementTransition, final ArrayList<View> sharedElementsIn)", "public static void replaceTargets(Transition transition, ArrayList<View> oldTargets, ArrayList<View> newTargets)", "public static void addTargets(Transition transition, ArrayList<View> views)", "private static boolean hasSimpleTarget(Transition transition)", "private static boolean isNullOrEmpty(List list)", "private static ArrayList<View> configureEnteringExitingViews(Transition transition, Fragment fragment, ArrayList<View> sharedElements, View nonExistentView)", "private static void setViewVisibility(ArrayList<View> views, @View.Visibility int visibility)", "private static Transition mergeTransitions(Transition enterTransition, Transition exitTransition, Transition sharedElementTransition, Fragment inFragment, boolean isPop)", "public static void calculateFragments(BackStackRecord transaction, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isReordered)", "public static void calculatePopFragments(BackStackRecord transaction, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isReordered)", "private static void addToFirstInLastOut(BackStackRecord transaction, BackStackRecord.Op op, SparseArray<FragmentContainerTransition> transitioningFragments, boolean isPop, boolean isReorderedTransaction)", "private static FragmentContainerTransition ensureContainer(FragmentContainerTransition containerTransition, SparseArray<FragmentContainerTransition> transitioningFragments, int containerId)" ]
}