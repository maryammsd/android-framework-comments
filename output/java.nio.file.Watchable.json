{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/nio/file/Watchable.java",
  "packageName" : "java.nio.file",
  "className" : "Watchable",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " WatchKey register(WatchService watcher, WatchEvent.Kind<?>[] events, WatchEvent.Modifier... modifiers) throws IOException",
    "returnType" : "WatchKey",
    "comment" : "\n     * Registers an object with a watch service.\n     *\n     * <p> If the file system object identified by this object is currently\n     * registered with the watch service then the watch key, representing that\n     * registration, is returned after changing the event set or modifiers to\n     * those specified by the {@code events} and {@code modifiers} parameters.\n     * Changing the event set does not cause pending events for the object to be\n     * discarded. Objects are automatically registered for the {@link\n     * StandardWatchEventKinds#OVERFLOW OVERFLOW} event. This event is not\n     * required to be present in the array of events.\n     *\n     * <p> Otherwise the file system object has not yet been registered with the\n     * given watch service, so it is registered and the resulting new key is\n     * returned.\n     *\n     * <p> Implementations of this interface should specify the events they\n     * support.\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     * @param   modifiers\n     *          the modifiers, if any, that modify how the object is registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events or modifiers are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid of combination of events are modifiers are specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission required to monitor this object. Implementations of\n     *          this interface should specify the permission checks.\n     ",
    "links" : [ "java.nio.file.StandardWatchEventKinds#OVERFLOW" ]
  }, {
    "name" : " WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) throws IOException",
    "returnType" : "WatchKey",
    "comment" : "\n     * Registers an object with a watch service.\n     *\n     * <p> An invocation of this method behaves in exactly the same way as the\n     * invocation\n     * <pre>\n     *     watchable.{@link #register(WatchService,WatchEvent.Kind[],WatchEvent.Modifier[]) register}(watcher, events, new WatchEvent.Modifier[0]);\n     * </pre>\n     *\n     * @param   watcher\n     *          the watch service to which this object is to be registered\n     * @param   events\n     *          the events for which this object should be registered\n     *\n     * @return  a key representing the registration of this object with the\n     *          given watch service\n     *\n     * @throws  UnsupportedOperationException\n     *          if unsupported events are specified\n     * @throws  IllegalArgumentException\n     *          if an invalid of combination of events are specified\n     * @throws  ClosedWatchServiceException\n     *          if the watch service is closed\n     * @throws  IOException\n     *          if an I/O error occurs\n     * @throws  SecurityException\n     *          if a security manager is installed and it denies an unspecified\n     *          permission required to monitor this object. Implementations of\n     *          this interface should specify the permission checks.\n     ",
    "links" : [ "#register(WatchService" ]
  } ],
  "methodNames" : [ " WatchKey register(WatchService watcher, WatchEvent.Kind<?>[] events, WatchEvent.Modifier... modifiers) throws IOException", " WatchKey register(WatchService watcher, WatchEvent.Kind<?>... events) throws IOException" ],
  "variableNames" : [ ]
}