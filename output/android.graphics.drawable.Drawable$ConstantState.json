{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/graphics/drawable/Drawable.java",
  "packageName" : "android.graphics.drawable",
  "className" : "ConstantState",
  "comment" : "\n     * This abstract class is used by {@link Drawable}s to store shared constant state and data\n     * between Drawables. {@link BitmapDrawable}s created from the same resource will for instance\n     * share a unique bitmap stored in their ConstantState.\n     *\n     * <p>\n     * {@link #newDrawable(Resources)} can be used as a factory to create new Drawable instances\n     * from this ConstantState.\n     * </p>\n     *\n     * Use {@link Drawable#getConstantState()} to retrieve the ConstantState of a Drawable. Calling\n     * {@link Drawable#mutate()} on a Drawable should typically create a new ConstantState for that\n     * Drawable.\n     ",
  "links" : [ "#newDrawable(Resources)", "android.graphics.drawable.Drawable#getConstantState()", "android.graphics.drawable.Drawable#mutate()", "android.graphics.drawable.BitmapDrawable", "android.graphics.drawable.Drawable" ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Drawable newDrawable()",
    "returnType" : "Drawable",
    "comment" : "\n         * Creates a new Drawable instance from its constant state.\n         * <p>\n         * <strong>Note:</strong> Using this method means density-dependent\n         * properties, such as pixel dimensions or bitmap images, will not be\n         * updated to match the density of the target display. To ensure\n         * correct scaling, use {@link #newDrawable(Resources)} instead to\n         * provide an appropriate Resources object.\n         *\n         * @return a new drawable object based on this constant state\n         * @see #newDrawable(Resources)\n         ",
    "links" : [ "#newDrawable(Resources)" ]
  }, {
    "name" : "public Drawable newDrawable(@Nullable Resources res)",
    "returnType" : "Drawable",
    "comment" : "\n         * Creates a new Drawable instance from its constant state using the\n         * specified resources. This method should be implemented for drawables\n         * that have density-dependent properties.\n         * <p>\n         * The default implementation for this method calls through to\n         * {@link #newDrawable()}.\n         *\n         * @param res the resources of the context in which the drawable will\n         *            be displayed\n         * @return a new drawable object based on this constant state\n         ",
    "links" : [ "#newDrawable()" ]
  }, {
    "name" : "public Drawable newDrawable(@Nullable Resources res, @Nullable @SuppressWarnings(\"unused\") Theme theme)",
    "returnType" : "Drawable",
    "comment" : "\n         * Creates a new Drawable instance from its constant state using the\n         * specified resources and theme. This method should be implemented for\n         * drawables that have theme-dependent properties.\n         * <p>\n         * The default implementation for this method calls through to\n         * {@link #newDrawable(Resources)}.\n         *\n         * @param res the resources of the context in which the drawable will\n         *            be displayed\n         * @param theme the theme of the context in which the drawable will be\n         *              displayed\n         * @return a new drawable object based on this constant state\n         ",
    "links" : [ "#newDrawable(Resources)" ]
  }, {
    "name" : "public abstract int getChangingConfigurations()",
    "returnType" : "int",
    "comment" : "\n         * Return a bit mask of configuration changes that will impact\n         * this drawable (and thus require completely reloading it).\n         ",
    "links" : [ ]
  }, {
    "name" : "public boolean canApplyTheme()",
    "returnType" : "boolean",
    "comment" : "\n         * Return whether this constant state can have a theme applied.\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public abstract Drawable newDrawable()", "public Drawable newDrawable(@Nullable Resources res)", "public Drawable newDrawable(@Nullable Resources res, @Nullable @SuppressWarnings(\"unused\") Theme theme)", "public abstract int getChangingConfigurations()", "public boolean canApplyTheme()" ],
  "variableNames" : [ ]
}