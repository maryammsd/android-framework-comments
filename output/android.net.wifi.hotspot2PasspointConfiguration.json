{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/net/wifi/hotspot2/PasspointConfiguration.java",
  "packageName" : "android.net.wifi.hotspot2",
  "className" : "PasspointConfiguration",
  "comment" : "\n * Class representing Passpoint configuration.  This contains configurations specified in\n * PerProviderSubscription (PPS) Management Object (MO) tree.\n *\n * For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0\n * Release 2 Technical Specification.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CERTIFICATE_SHA256_BYTES",
    "type" : "int",
    "comment" : "\n     * Number of bytes for certificate SHA-256 fingerprint byte array.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_URL_BYTES",
    "type" : "int",
    "comment" : "\n     * Maximum bytes for URL string.\n     ",
    "links" : [ ]
  }, {
    "name" : "NULL_VALUE",
    "type" : "int",
    "comment" : "\n     * Integer value used for indicating null value in the Parcel.\n     ",
    "links" : [ ]
  }, {
    "name" : "mHomeSp",
    "type" : "HomeSp",
    "comment" : "\n     * Configurations under HomeSp subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAaaServerTrustedNames",
    "type" : "String[]",
    "comment" : "\n     * Configurations under AAAServerTrustedNames subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCredential",
    "type" : "Credential",
    "comment" : "\n     * Configurations under Credential subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "mPolicy",
    "type" : "Policy",
    "comment" : "\n     * Configurations under Policy subtree.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionUpdate",
    "type" : "UpdateParameter",
    "comment" : "\n     * Meta data for performing subscription update.\n     ",
    "links" : [ ]
  }, {
    "name" : "mTrustRootCertList",
    "type" : "Map<String, byte[]>",
    "comment" : "\n     * List of HTTPS URL for retrieving trust root certificate and the corresponding SHA-256\n     * fingerprint of the certificate.  The certificates are used for verifying AAA server's\n     * identity during EAP authentication.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUpdateIdentifier",
    "type" : "int",
    "comment" : "\n     * Set by the subscription server, updated every time the configuration is updated by\n     * the subscription server.\n     *\n     * Use Integer.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCredentialPriority",
    "type" : "int",
    "comment" : "\n     * The priority of the credential.\n     *\n     * Use Integer.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionCreationTimeInMillis",
    "type" : "long",
    "comment" : "\n     * The time this subscription is created. It is in the format of number\n     * of milliseconds since January 1, 1970, 00:00:00 GMT.\n     *\n     * Use Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionExpirationTimeMillis",
    "type" : "long",
    "comment" : "\n     * The time this subscription will expire. It is in the format of number\n     * of milliseconds since January 1, 1970, 00:00:00 GMT.\n     *\n     * Use Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mSubscriptionType",
    "type" : "String",
    "comment" : "\n     * The type of the subscription.  This is defined by the provider and the value is provider\n     * specific.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsageLimitUsageTimePeriodInMinutes",
    "type" : "long",
    "comment" : "\n     * The time period for usage statistics accumulation. A value of zero means that usage\n     * statistics are not accumulated on a periodic basis (e.g., a one-time limit for\n     * “pay as you go” - PAYG service). A non-zero value specifies the usage interval in minutes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsageLimitStartTimeInMillis",
    "type" : "long",
    "comment" : "\n     * The time at which usage statistic accumulation  begins.  It is in the format of number\n     * of milliseconds since January 1, 1970, 00:00:00 GMT.\n     *\n     * Use Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ ]
  }, {
    "name" : "mUsageLimitDataLimit",
    "type" : "long",
    "comment" : "\n     * The cumulative data limit in megabytes for the {@link #usageLimitUsageTimePeriodInMinutes}.\n     * A value of zero indicate unlimited data usage.\n     *\n     * Use Long.MIN_VALUE to indicate unset value.\n     ",
    "links" : [ "#usageLimitUsageTimePeriodInMinutes" ]
  }, {
    "name" : "mUsageLimitTimeLimitInMinutes",
    "type" : "long",
    "comment" : "\n     * The cumulative time limit in minutes for the {@link #usageLimitUsageTimePeriodInMinutes}.\n     * A value of zero indicate unlimited time usage.\n     ",
    "links" : [ "#usageLimitUsageTimePeriodInMinutes" ]
  }, {
    "name" : "mServiceFriendlyNames",
    "type" : "Map<String, String>",
    "comment" : "\n     * The map of OSU service provider names whose each element is presented in different\n     * languages for the service provider, which is used for finding a matching\n     * PasspointConfiguration with a given service provider name.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCarrierId",
    "type" : "int",
    "comment" : "\n     * The carrier ID identifies the operator who provides this network configuration.\n     *    see {@link TelephonyManager#getSimCarrierId()}\n     ",
    "links" : [ "TelephonyManager#getSimCarrierId" ]
  }, {
    "name" : "mIsAutojoinEnabled",
    "type" : "boolean",
    "comment" : "\n     * The auto-join configuration specifies whether or not the Passpoint Configuration is\n     * considered for auto-connection. If true then yes, if false then it isn't considered as part\n     * of auto-connection - but can still be manually connected to.\n     ",
    "links" : [ ]
  }, {
    "name" : "mIsMacRandomizationEnabled",
    "type" : "boolean",
    "comment" : "\n     * The mac randomization setting specifies whether a randomized or device MAC address will\n     * be used to connect to the passpoint network. If true, a randomized MAC will be used.\n     * Otherwise, the device MAC address will be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "mMeteredOverride",
    "type" : "int",
    "comment" : "\n     * Indicates if the end user has expressed an explicit opinion about the\n     * meteredness of this network, such as through the Settings app.\n     * This value is one of {@link #METERED_OVERRIDE_NONE}, {@link #METERED_OVERRIDE_METERED},\n     * or {@link #METERED_OVERRIDE_NOT_METERED}.\n     * <p>\n     * This should always override any values from {@link WifiInfo#getMeteredHint()}.\n     *\n     * By default this field is set to {@link #METERED_OVERRIDE_NONE}.\n     ",
    "links" : [ "#METERED_OVERRIDE_NONE", "#METERED_OVERRIDE_METERED", "#METERED_OVERRIDE_NOT_METERED", "WifiInfo#getMeteredHint", "#METERED_OVERRIDE_NONE" ]
  }, {
    "name" : "CREATOR",
    "type" : "Creator<PasspointConfiguration>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setHomeSp(HomeSp homeSp)",
    "returnType" : "void",
    "comment" : "\n     * Set the Home SP (Service Provider) information.\n     *\n     * @param homeSp The Home SP information to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public HomeSp getHomeSp()",
    "returnType" : "HomeSp",
    "comment" : "\n     * Get the Home SP (Service Provider) information.\n     *\n     * @return Home SP information\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAaaServerTrustedNames(@Nullable String[] aaaServerTrustedNames)",
    "returnType" : "void",
    "comment" : "\n     * Set the AAA server trusted names information.\n     *\n     * @param aaaServerTrustedNames The AAA server trusted names information to set to\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String[] getAaaServerTrustedNames()",
    "returnType" : "String[]",
    "comment" : "\n     * Get the AAA server trusted names information.\n     *\n     * @return AAA server trusted names information\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCredential(Credential credential)",
    "returnType" : "void",
    "comment" : "\n     * Set the credential information.\n     *\n     * @param credential The credential information to set to\n     ",
    "links" : [ ]
  }, {
    "name" : "public Credential getCredential()",
    "returnType" : "Credential",
    "comment" : "\n     * Get the credential information.\n     *\n     * @return credential information\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPolicy(Policy policy)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Policy getPolicy()",
    "returnType" : "Policy",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionUpdate(UpdateParameter subscriptionUpdate)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public UpdateParameter getSubscriptionUpdate()",
    "returnType" : "UpdateParameter",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTrustRootCertList(Map<String, byte[]> trustRootCertList)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, byte[]> getTrustRootCertList()",
    "returnType" : "Map<String, byte[]>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUpdateIdentifier(int updateIdentifier)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getUpdateIdentifier()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCredentialPriority(int credentialPriority)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCredentialPriority()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionCreationTimeInMillis(long subscriptionCreationTimeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSubscriptionCreationTimeInMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionExpirationTimeInMillis(long subscriptionExpirationTimeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getSubscriptionExpirationTimeMillis()",
    "returnType" : "long",
    "comment" : "\n     *  Utility method to get the time this subscription will expire. It is in the format of number\n     *  of milliseconds since January 1, 1970, 00:00:00 GMT.\n     *\n     *  @return The time this subscription will expire, or Long.MIN_VALUE to indicate unset value\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setSubscriptionType(String subscriptionType)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getSubscriptionType()",
    "returnType" : "String",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsageLimitUsageTimePeriodInMinutes(long usageLimitUsageTimePeriodInMinutes)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsageLimitUsageTimePeriodInMinutes()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsageLimitStartTimeInMillis(long usageLimitStartTimeInMillis)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsageLimitStartTimeInMillis()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsageLimitDataLimit(long usageLimitDataLimit)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsageLimitDataLimit()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUsageLimitTimeLimitInMinutes(long usageLimitTimeLimitInMinutes)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public long getUsageLimitTimeLimitInMinutes()",
    "returnType" : "long",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setServiceFriendlyNames(Map<String, String> serviceFriendlyNames)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<String, String> getServiceFriendlyNames()",
    "returnType" : "Map<String, String>",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getServiceFriendlyName()",
    "returnType" : "String",
    "comment" : "\n     * Return the friendly Name for current language from the list of friendly names of OSU\n     * provider.\n     * The string matching the default locale will be returned if it is found, otherwise the\n     * first string in the list will be returned.  A null will be returned if the list is empty.\n     *\n     * @return String matching the default locale, null otherwise\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCarrierId(int carrierId)",
    "returnType" : "void",
    "comment" : "\n     * Set the carrier ID associated with current configuration.\n     * @param carrierId {@code mCarrierId}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getCarrierId()",
    "returnType" : "int",
    "comment" : "\n     * Get the carrier ID associated with current configuration.\n     * @return {@code mCarrierId}\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAutojoinEnabled(boolean autojoinEnabled)",
    "returnType" : "void",
    "comment" : "\n     * Configures the auto-association status of this Passpoint configuration. A value of true\n     * indicates that the configuration will be considered for auto-connection, a value of false\n     * indicates that only manual connection will work - the framework will not auto-associate to\n     * this Passpoint network.\n     *\n     * @param autojoinEnabled true to be considered for framework auto-connection, false otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMacRandomizationEnabled(boolean enabled)",
    "returnType" : "void",
    "comment" : "\n     * Configures the MAC randomization setting for this Passpoint configuration.\n     * If set to true, the framework will use a randomized MAC address to connect to this Passpoint\n     * network. Otherwise, the framework will use the device MAC address.\n     *\n     * @param enabled true to use randomized MAC address, false to use device MAC address.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setMeteredOverride(@MeteredOverride int meteredOverride)",
    "returnType" : "void",
    "comment" : "\n     * Sets the metered override setting for this Passpoint configuration.\n     *\n     * @param meteredOverride One of the values in {@link MeteredOverride}\n     * @hide\n     ",
    "links" : [ "MeteredOverride" ]
  }, {
    "name" : "public boolean isAutojoinEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether the Passpoint configuration may be auto-connected to by the framework. A\n     * value of true indicates that auto-connection can happen, a value of false indicates that it\n     * cannot. However, even when auto-connection is not possible manual connection by the user is\n     * possible.\n     *\n     * @return the auto-join configuration: true for auto-connection (or join) enabled, false\n     * otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getMeteredOverride()",
    "returnType" : "int",
    "comment" : "\n     * Indicates whether the user chose this configuration to be treated as metered or not.\n     *\n     * @return One of the values in {@link MeteredOverride}\n     * @hide\n     ",
    "links" : [ "MeteredOverride" ]
  }, {
    "name" : "public boolean isMacRandomizationEnabled()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates whether a randomized MAC address or device MAC address will be used for\n     * connections to this Passpoint network. If true, a randomized MAC address will be used.\n     * Otherwise, the device MAC address will be used.\n     *\n     * @return true for MAC randomization enabled. False for disabled.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object thatObject)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean validate()",
    "returnType" : "boolean",
    "comment" : "\n     * Validate the R1 configuration data.\n     *\n     * @return true on success or false on failure\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean validateForR2()",
    "returnType" : "boolean",
    "comment" : "\n     * Validate the R2 configuration data.\n     *\n     * @return true on success or false on failure\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean validateForCommonR1andR2()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void writeTrustRootCerts(Parcel dest, Map<String, byte[]> trustRootCerts)",
    "returnType" : "void",
    "comment" : "\n     * Helper function for writing trust root certificate information list.\n     *\n     * @param dest The Parcel to write to\n     * @param trustRootCerts The list of trust root certificate URL with the corresponding\n     *                       certificate fingerprint\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isTrustRootCertListEquals(Map<String, byte[]> list1, Map<String, byte[]> list2)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper function for comparing two trust root certificate list.  Cannot use Map#equals\n     * method since the value type (byte[]) doesn't override equals method.\n     *\n     * @param list1 The first trust root certificate list\n     * @param list2 The second trust root certificate list\n     * @return true if the two list are equal\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isOsuProvisioned()",
    "returnType" : "boolean",
    "comment" : "\n     * Indicates if the Passpoint Configuration was provisioned by a subscription (OSU) server,\n     * which means that it's an R2 (or R3) profile.\n     *\n     * @return true if the Passpoint Configuration was provisioned by a subscription server.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getUniqueId()",
    "returnType" : "String",
    "comment" : "\n     * Get a unique identifier for a PasspointConfiguration object. The identifier depends on the\n     * configuration that identify the service provider under the HomeSp subtree, and on the\n     * credential configuration under the Credential subtree.\n     * The method throws an {@link IllegalStateException} if the configuration under HomeSp subtree\n     * or the configuration under Credential subtree are not initialized.\n     *\n     * @return A unique identifier\n     ",
    "links" : [ "IllegalStateException" ]
  } ],
  "variableNames" : [ "TAG", "CERTIFICATE_SHA256_BYTES", "MAX_URL_BYTES", "NULL_VALUE", "mHomeSp", "mAaaServerTrustedNames", "mCredential", "mPolicy", "mSubscriptionUpdate", "mTrustRootCertList", "mUpdateIdentifier", "mCredentialPriority", "mSubscriptionCreationTimeInMillis", "mSubscriptionExpirationTimeMillis", "mSubscriptionType", "mUsageLimitUsageTimePeriodInMinutes", "mUsageLimitStartTimeInMillis", "mUsageLimitDataLimit", "mUsageLimitTimeLimitInMinutes", "mServiceFriendlyNames", "mCarrierId", "mIsAutojoinEnabled", "mIsMacRandomizationEnabled", "mMeteredOverride", "CREATOR" ],
  "methodNames" : [ "public void setHomeSp(HomeSp homeSp)", "public HomeSp getHomeSp()", "public void setAaaServerTrustedNames(@Nullable String[] aaaServerTrustedNames)", "public String[] getAaaServerTrustedNames()", "public void setCredential(Credential credential)", "public Credential getCredential()", "public void setPolicy(Policy policy)", "public Policy getPolicy()", "public void setSubscriptionUpdate(UpdateParameter subscriptionUpdate)", "public UpdateParameter getSubscriptionUpdate()", "public void setTrustRootCertList(Map<String, byte[]> trustRootCertList)", "public Map<String, byte[]> getTrustRootCertList()", "public void setUpdateIdentifier(int updateIdentifier)", "public int getUpdateIdentifier()", "public void setCredentialPriority(int credentialPriority)", "public int getCredentialPriority()", "public void setSubscriptionCreationTimeInMillis(long subscriptionCreationTimeInMillis)", "public long getSubscriptionCreationTimeInMillis()", "public void setSubscriptionExpirationTimeInMillis(long subscriptionExpirationTimeInMillis)", "public long getSubscriptionExpirationTimeMillis()", "public void setSubscriptionType(String subscriptionType)", "public String getSubscriptionType()", "public void setUsageLimitUsageTimePeriodInMinutes(long usageLimitUsageTimePeriodInMinutes)", "public long getUsageLimitUsageTimePeriodInMinutes()", "public void setUsageLimitStartTimeInMillis(long usageLimitStartTimeInMillis)", "public long getUsageLimitStartTimeInMillis()", "public void setUsageLimitDataLimit(long usageLimitDataLimit)", "public long getUsageLimitDataLimit()", "public void setUsageLimitTimeLimitInMinutes(long usageLimitTimeLimitInMinutes)", "public long getUsageLimitTimeLimitInMinutes()", "public void setServiceFriendlyNames(Map<String, String> serviceFriendlyNames)", "public Map<String, String> getServiceFriendlyNames()", "public String getServiceFriendlyName()", "public void setCarrierId(int carrierId)", "public int getCarrierId()", "public void setAutojoinEnabled(boolean autojoinEnabled)", "public void setMacRandomizationEnabled(boolean enabled)", "public void setMeteredOverride(@MeteredOverride int meteredOverride)", "public boolean isAutojoinEnabled()", "public int getMeteredOverride()", "public boolean isMacRandomizationEnabled()", "public int describeContents()", "public void writeToParcel(Parcel dest, int flags)", "public boolean equals(Object thatObject)", "public int hashCode()", "public String toString()", "public boolean validate()", "public boolean validateForR2()", "private boolean validateForCommonR1andR2()", "private static void writeTrustRootCerts(Parcel dest, Map<String, byte[]> trustRootCerts)", "private static boolean isTrustRootCertListEquals(Map<String, byte[]> list1, Map<String, byte[]> list2)", "public boolean isOsuProvisioned()", "public String getUniqueId()" ]
}