{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/tv/TvTrackInfo.java",
  "packageName" : "android.media.tv",
  "className" : "TvTrackInfo",
  "comment" : "\n * Encapsulates the format of tracks played in {@link TvInputService}.\n ",
  "variables" : [ {
    "name" : "TYPE_AUDIO",
    "type" : "int",
    "comment" : "\n     * The type value for audio tracks.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_VIDEO",
    "type" : "int",
    "comment" : "\n     * The type value for video tracks.\n     ",
    "links" : [ ]
  }, {
    "name" : "TYPE_SUBTITLE",
    "type" : "int",
    "comment" : "\n     * The type value for subtitle tracks.\n     ",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mId",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLanguage",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDescription",
    "type" : "CharSequence",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncoding",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mEncrypted",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioChannelCount",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioSampleRate",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAudioDescription",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHardOfHearing",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpokenSubtitle",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoFrameRate",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoPixelAspectRatio",
    "type" : "float",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVideoActiveFormatDescription",
    "type" : "byte",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExtra",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<TvTrackInfo>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final int getType()",
    "returnType" : "int",
    "comment" : "\n     * Returns the type of the track. The type should be one of the followings:\n     * {@link #TYPE_AUDIO}, {@link #TYPE_VIDEO} and {@link #TYPE_SUBTITLE}.\n     ",
    "links" : [ "#TYPE_AUDIO", "#TYPE_VIDEO", "#TYPE_SUBTITLE" ]
  }, {
    "name" : "public final String getId()",
    "returnType" : "String",
    "comment" : "\n     * Returns the ID of the track.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getLanguage()",
    "returnType" : "String",
    "comment" : "\n     * Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. If the language\n     * is unknown or could not be determined, the corresponding value will be {@code null}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CharSequence getDescription()",
    "returnType" : "CharSequence",
    "comment" : "\n     * Returns a user readable description for the current track.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getEncoding()",
    "returnType" : "String",
    "comment" : "\n     * Returns the codec in the form of mime type. If the encoding is unknown or could not be\n     * determined, the corresponding value will be {@code null}.\n     *\n     * <p>For example of broadcast, codec information may be referred to broadcast standard (e.g.\n     * Component Descriptor of ETSI EN 300 468). In the case that track type is subtitle, mime type\n     * could be defined in broadcast standard (e.g. \"text/dvb.subtitle\" or \"text/dvb.teletext\" in\n     * ETSI TS 102 812 V1.3.1 section 7.6).\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEncrypted()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the track is encrypted, {@code false} otherwise. If the encryption\n     * status is unknown or could not be determined, the corresponding value will be {@code false}.\n     *\n     * <p>For example: ISO/IEC 13818-1 defines a CA descriptor that can be used to determine the\n     * encryption status of some broadcast streams.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int getAudioChannelCount()",
    "returnType" : "int",
    "comment" : "\n     * Returns the audio channel count. Valid only for {@link #TYPE_AUDIO} tracks.\n     *\n     * @throws IllegalStateException if not called on an audio track\n     ",
    "links" : [ "#TYPE_AUDIO" ]
  }, {
    "name" : "public final int getAudioSampleRate()",
    "returnType" : "int",
    "comment" : "\n     * Returns the audio sample rate, in the unit of Hz. Valid only for {@link #TYPE_AUDIO} tracks.\n     *\n     * @throws IllegalStateException if not called on an audio track\n     ",
    "links" : [ "#TYPE_AUDIO" ]
  }, {
    "name" : "public boolean isAudioDescription()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the track is an audio description intended for people with visual\n     * impairment, {@code false} otherwise. Valid only for {@link #TYPE_AUDIO} tracks.\n     *\n     * <p>For example of broadcast, audio description information may be referred to broadcast\n     * standard (e.g. ISO 639 Language Descriptor of ISO/IEC 13818-1, Supplementary Audio Language\n     * Descriptor, AC-3 Descriptor, Enhanced AC-3 Descriptor, AAC Descriptor of ETSI EN 300 468).\n     *\n     * @throws IllegalStateException if not called on an audio track\n     ",
    "links" : [ "#TYPE_AUDIO" ]
  }, {
    "name" : "public boolean isHardOfHearing()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the track is intended for people with hearing impairment, {@code\n     * false} otherwise. Valid only for {@link #TYPE_AUDIO} and {@link #TYPE_SUBTITLE} tracks.\n     *\n     * <p>For example of broadcast, hard of hearing information may be referred to broadcast\n     * standard (e.g. ISO 639 Language Descriptor of ISO/IEC 13818-1, Supplementary Audio Language\n     * Descriptor, AC-3 Descriptor, Enhanced AC-3 Descriptor, AAC Descriptor of ETSI EN 300 468).\n     *\n     * @throws IllegalStateException if not called on an audio track or a subtitle track\n     ",
    "links" : [ "#TYPE_AUDIO", "#TYPE_SUBTITLE" ]
  }, {
    "name" : "public boolean isSpokenSubtitle()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if the track is a spoken subtitle for people with visual impairment,\n     * {@code false} otherwise. Valid only for {@link #TYPE_AUDIO} tracks.\n     *\n     * <p>For example of broadcast, spoken subtitle information may be referred to broadcast\n     * standard (e.g. Supplementary Audio Language Descriptor of ETSI EN 300 468).\n     *\n     * @throws IllegalStateException if not called on an audio track\n     ",
    "links" : [ "#TYPE_AUDIO" ]
  }, {
    "name" : "public final int getVideoWidth()",
    "returnType" : "int",
    "comment" : "\n     * Returns the width of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO}\n     * tracks.\n     *\n     * @throws IllegalStateException if not called on a video track\n     ",
    "links" : [ "#TYPE_VIDEO" ]
  }, {
    "name" : "public final int getVideoHeight()",
    "returnType" : "int",
    "comment" : "\n     * Returns the height of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO}\n     * tracks.\n     *\n     * @throws IllegalStateException if not called on a video track\n     ",
    "links" : [ "#TYPE_VIDEO" ]
  }, {
    "name" : "public final float getVideoFrameRate()",
    "returnType" : "float",
    "comment" : "\n     * Returns the frame rate of the video, in the unit of fps (frames per second). Valid only for\n     * {@link #TYPE_VIDEO} tracks.\n     *\n     * @throws IllegalStateException if not called on a video track\n     ",
    "links" : [ "#TYPE_VIDEO" ]
  }, {
    "name" : "public final float getVideoPixelAspectRatio()",
    "returnType" : "float",
    "comment" : "\n     * Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video.\n     * Valid only for {@link #TYPE_VIDEO} tracks.\n     *\n     * @throws IllegalStateException if not called on a video track\n     ",
    "links" : [ "#TYPE_VIDEO" ]
  }, {
    "name" : "public final byte getVideoActiveFormatDescription()",
    "returnType" : "byte",
    "comment" : "\n     * Returns the Active Format Description (AFD) code of the video.\n     * Valid only for {@link #TYPE_VIDEO} tracks.\n     *\n     * <p>The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part\n     * 4 and SMPTE 2016-1-2007.\n     *\n     * @throws IllegalStateException if not called on a video track\n     ",
    "links" : [ "#TYPE_VIDEO" ]
  }, {
    "name" : "public final Bundle getExtra()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the extra information about the current track.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(@NonNull Parcel dest, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Used to package this object into a {@link Parcel}.\n     *\n     * @param dest The {@link Parcel} to be written.\n     * @param flags The flags used for parceling.\n     ",
    "links" : [ "Parcel", "Parcel" ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TYPE_AUDIO", "TYPE_VIDEO", "TYPE_SUBTITLE", "mType", "mId", "mLanguage", "mDescription", "mEncoding", "mEncrypted", "mAudioChannelCount", "mAudioSampleRate", "mAudioDescription", "mHardOfHearing", "mSpokenSubtitle", "mVideoWidth", "mVideoHeight", "mVideoFrameRate", "mVideoPixelAspectRatio", "mVideoActiveFormatDescription", "mExtra", "CREATOR" ],
  "methodNames" : [ "public final int getType()", "public final String getId()", "public final String getLanguage()", "public final CharSequence getDescription()", "public String getEncoding()", "public boolean isEncrypted()", "public final int getAudioChannelCount()", "public final int getAudioSampleRate()", "public boolean isAudioDescription()", "public boolean isHardOfHearing()", "public boolean isSpokenSubtitle()", "public final int getVideoWidth()", "public final int getVideoHeight()", "public final float getVideoFrameRate()", "public final float getVideoPixelAspectRatio()", "public final byte getVideoActiveFormatDescription()", "public final Bundle getExtra()", "public int describeContents()", "public void writeToParcel(@NonNull Parcel dest, int flags)", "public boolean equals(Object o)", "public int hashCode()" ]
}