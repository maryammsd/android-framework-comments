{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/telephony/ims/compat/feature/MMTelFeature.java",
  "packageName" : "android.telephony.ims.compat.feature",
  "className" : "MMTelFeature",
  "comment" : "",
  "variables" : [ {
    "name" : "mLock",
    "type" : "Object",
    "comment" : " Lock for feature synchronization",
    "links" : [ ]
  }, {
    "name" : "mImsMMTelBinder",
    "type" : "IImsMMTelFeature",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public final IImsMMTelFeature getBinder()",
    "returnType" : "IImsMMTelFeature",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int startSession(PendingIntent incomingCallIntent, IImsRegistrationListener listener)",
    "returnType" : "int",
    "comment" : "\n     * Notifies the MMTel feature that you would like to start a session. This should always be\n     * done before making/receiving IMS calls. The IMS service will register the device to the\n     * operator's network with the credentials (from ISIM) periodically in order to receive calls\n     * from the operator's network. When the IMS service receives a new call, it will send out an\n     * intent with the provided action string. The intent contains a call ID extra\n     * {@link IImsCallSession#getCallId} and it can be used to take a call.\n     *\n     * @param incomingCallIntent When an incoming call is received, the IMS service will call\n     * {@link PendingIntent#send} to send back the intent to the caller with\n     * ImsManager#INCOMING_CALL_RESULT_CODE as the result code and the intent to fill in the call\n     * ID; It cannot be null.\n     * @param listener To listen to IMS registration events; It cannot be null\n     * @return an integer (greater than 0) representing the session id associated with the session\n     * that has been started.\n     ",
    "links" : [ "android.app.PendingIntent#send", "com.android.ims.internal.IImsCallSession#getCallId" ]
  }, {
    "name" : "public void endSession(int sessionId)",
    "returnType" : "void",
    "comment" : "\n     * End a previously started session using the associated sessionId.\n     * @param sessionId an integer (greater than 0) representing the ongoing session. See\n     * {@link #startSession}.\n     ",
    "links" : [ "#startSession" ]
  }, {
    "name" : "public boolean isConnected(int callSessionType, int callType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the IMS service has successfully registered to the IMS network with the specified\n     * service & call type.\n     *\n     * @param callSessionType a service type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NORMAL}\n     *        {@link ImsCallProfile#SERVICE_TYPE_EMERGENCY}\n     * @param callType a call type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#CALL_TYPE_VOICE_N_VIDEO}\n     *        {@link ImsCallProfile#CALL_TYPE_VOICE}\n     *        {@link ImsCallProfile#CALL_TYPE_VT}\n     *        {@link ImsCallProfile#CALL_TYPE_VS}\n     * @return true if the specified service id is connected to the IMS network; false otherwise\n     ",
    "links" : [ "android.telephony.ims.ImsCallProfile", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VOICE_N_VIDEO", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VOICE", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_NORMAL", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_EMERGENCY", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS" ]
  }, {
    "name" : "public boolean isOpened()",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if the specified IMS service is opened.\n     *\n     * @return true if the specified service id is opened; false otherwise\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addRegistrationListener(IImsRegistrationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Add a new registration listener for the client associated with the session Id.\n     * @param listener An implementation of IImsRegistrationListener.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void removeRegistrationListener(IImsRegistrationListener listener)",
    "returnType" : "void",
    "comment" : "\n     * Remove a previously registered listener using {@link #addRegistrationListener} for the client\n     * associated with the session Id.\n     * @param listener A previously registered IImsRegistrationListener\n     ",
    "links" : [ "#addRegistrationListener" ]
  }, {
    "name" : "public ImsCallProfile createCallProfile(int sessionId, int callSessionType, int callType)",
    "returnType" : "ImsCallProfile",
    "comment" : "\n     * Creates a {@link ImsCallProfile} from the service capabilities & IMS registration state.\n     *\n     * @param sessionId a session id which is obtained from {@link #startSession}\n     * @param callSessionType a service type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NONE}\n     *        {@link ImsCallProfile#SERVICE_TYPE_NORMAL}\n     *        {@link ImsCallProfile#SERVICE_TYPE_EMERGENCY}\n     * @param callType a call type that is specified in {@link ImsCallProfile}\n     *        {@link ImsCallProfile#CALL_TYPE_VOICE}\n     *        {@link ImsCallProfile#CALL_TYPE_VT}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_RX}\n     *        {@link ImsCallProfile#CALL_TYPE_VT_NODIR}\n     *        {@link ImsCallProfile#CALL_TYPE_VS}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_TX}\n     *        {@link ImsCallProfile#CALL_TYPE_VS_RX}\n     * @return a {@link ImsCallProfile} object\n     ",
    "links" : [ "#startSession", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_RX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS_RX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VOICE", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_NORMAL", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_NONE", "android.telephony.ims.ImsCallProfile", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_NODIR", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT_TX", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS_TX", "android.telephony.ims.ImsCallProfile#SERVICE_TYPE_EMERGENCY", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VT", "android.telephony.ims.ImsCallProfile#CALL_TYPE_VS" ]
  }, {
    "name" : "public IImsCallSession createCallSession(int sessionId, ImsCallProfile profile, IImsCallSessionListener listener)",
    "returnType" : "IImsCallSession",
    "comment" : "\n     * Creates an {@link ImsCallSession} with the specified call profile.\n     * Use other methods, if applicable, instead of interacting with\n     * {@link ImsCallSession} directly.\n     *\n     * @param sessionId a session id which is obtained from {@link #startSession}\n     * @param profile a call profile to make the call\n     ",
    "links" : [ "#startSession", "android.telephony.ims.ImsCallSession" ]
  }, {
    "name" : "public IImsCallSession getPendingCallSession(int sessionId, String callId)",
    "returnType" : "IImsCallSession",
    "comment" : "\n     * Retrieves the call session associated with a pending call.\n     *\n     * @param sessionId a session id which is obtained from {@link #startSession}\n     * @param callId a call id to make the call\n     ",
    "links" : [ "#startSession" ]
  }, {
    "name" : "public ImsUtImplBase getUtInterface()",
    "returnType" : "ImsUtImplBase",
    "comment" : "\n     * @return The Ut interface for the supplementary service configuration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public IImsConfig getConfigInterface()",
    "returnType" : "IImsConfig",
    "comment" : "\n     * @return The config interface for IMS Configuration\n     ",
    "links" : [ ]
  }, {
    "name" : "public void turnOnIms()",
    "returnType" : "void",
    "comment" : "\n     * Signal the MMTelFeature to turn on IMS when it has been turned off using {@link #turnOffIms}\n     ",
    "links" : [ "#turnOffIms" ]
  }, {
    "name" : "public void turnOffIms()",
    "returnType" : "void",
    "comment" : "\n     * Signal the MMTelFeature to turn off IMS when it has been turned on using {@link #turnOnIms}\n     ",
    "links" : [ "#turnOnIms" ]
  }, {
    "name" : "public ImsEcbmImplBase getEcbmInterface()",
    "returnType" : "ImsEcbmImplBase",
    "comment" : "\n     * @return The Emergency call-back mode interface for emergency VoLTE calls that support it.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setUiTTYMode(int uiTtyMode, Message onComplete)",
    "returnType" : "void",
    "comment" : "\n     * Sets the current UI TTY mode for the MMTelFeature.\n     * @param uiTtyMode An integer containing the new UI TTY Mode.\n     * @param onComplete A {@link Message} to be used when the mode has been set.\n     ",
    "links" : [ "android.os.Message" ]
  }, {
    "name" : "public ImsMultiEndpointImplBase getMultiEndpointInterface()",
    "returnType" : "ImsMultiEndpointImplBase",
    "comment" : "\n     * @return MultiEndpoint interface for DEP notifications\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureReady()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void onFeatureRemoved()",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mLock", "mImsMMTelBinder" ],
  "methodNames" : [ "public final IImsMMTelFeature getBinder()", "public int startSession(PendingIntent incomingCallIntent, IImsRegistrationListener listener)", "public void endSession(int sessionId)", "public boolean isConnected(int callSessionType, int callType)", "public boolean isOpened()", "public void addRegistrationListener(IImsRegistrationListener listener)", "public void removeRegistrationListener(IImsRegistrationListener listener)", "public ImsCallProfile createCallProfile(int sessionId, int callSessionType, int callType)", "public IImsCallSession createCallSession(int sessionId, ImsCallProfile profile, IImsCallSessionListener listener)", "public IImsCallSession getPendingCallSession(int sessionId, String callId)", "public ImsUtImplBase getUtInterface()", "public IImsConfig getConfigInterface()", "public void turnOnIms()", "public void turnOffIms()", "public ImsEcbmImplBase getEcbmInterface()", "public void setUiTTYMode(int uiTtyMode, Message onComplete)", "public ImsMultiEndpointImplBase getMultiEndpointInterface()", "public void onFeatureReady()", "public void onFeatureRemoved()" ]
}