{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/net/http/UrlRequest.java",
  "packageName" : "android.net.http",
  "className" : "Builder",
  "comment" : " e.g. ExperimentalUrlRequest.Builder",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public abstract Builder setHttpMethod(@NonNull String method)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets the HTTP method verb to use for this request.\n         *\n         * <p>The default when this method is not called is \"GET\" if the request has\n         * no body or \"POST\" if it does.\n         *\n         * @param method \"GET\", \"HEAD\", \"DELETE\", \"POST\" or \"PUT\".\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder addHeader(@NonNull String header, @NonNull String value)",
    "returnType" : "Builder",
    "comment" : "\n         * Adds a request header.\n         *\n         * @param header header name.\n         * @param value header value.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setCacheDisabled(boolean disableCache)",
    "returnType" : "Builder",
    "comment" : "\n         * Whether to disable cache for the request. If the engine is not set up to use cache,\n         * this call has no effect.\n         * @param disableCache {@code true} to disable cache, {@code false} otherwise.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setPriority(int priority)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets priority of the request which should be one of the {@link #REQUEST_PRIORITY_IDLE\n         * REQUEST_PRIORITY_*} values. The request is given {@link #REQUEST_PRIORITY_MEDIUM}\n         * priority if this method is not called.\n         *\n         * @param priority priority of the request which should be one of the {@link\n         * #REQUEST_PRIORITY_IDLE REQUEST_PRIORITY_*} values.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "#REQUEST_PRIORITY_MEDIUM", "#REQUEST_PRIORITY_IDLEREQUEST_PRIORITY_", "#REQUEST_PRIORITY_IDLE" ]
  }, {
    "name" : "public abstract Builder setUploadDataProvider(@NonNull UploadDataProvider uploadDataProvider, @NonNull Executor executor)",
    "returnType" : "Builder",
    "comment" : " Also, UploadDataProvider is a class to provide an upload body and getter is not useful",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setDirectExecutorAllowed(boolean allowDirectExecutor)",
    "returnType" : "Builder",
    "comment" : "\n         * Marks whether the executors this request will use to notify callbacks (for\n         * {@code UploadDataProvider}s and {@code UrlRequest.Callback}s) is intentionally performing\n         * inline execution, like Guava's directExecutor or\n         * {@link java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy}.\n         *\n         * <p><b>Warning:</b> If set to true: This option makes it easy to accidentally block the\n         * network thread. This should not be done if your callbacks perform disk I/O, acquire\n         * locks, or call into other code you don't carefully control and audit.\n         *\n         * @param allowDirectExecutor {@code true} to allow executors performing inline execution,\n         *                            {@code false} otherwise.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy" ]
  }, {
    "name" : "public abstract Builder bindToNetwork(@Nullable Network network)",
    "returnType" : "Builder",
    "comment" : "\n         * Binds the request to the specified network. The HTTP stack will send this request\n         * only using the network associated to this handle. If this network disconnects the request\n         * will fail, the exact error will depend on the stage of request processing when\n         * the network disconnects.\n         *\n         * @param network the network to bind the request to. Specify {@code null} to unbind.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ ]
  }, {
    "name" : "public abstract Builder setTrafficStatsTag(int tag)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets {@link android.net.TrafficStats} tag to use when accounting socket traffic caused by\n         * this request. See {@link android.net.TrafficStats} for more information. If no tag is\n         * set (e.g. this method isn't called), then Android accounts for the socket traffic caused\n         * by this request as if the tag value were set to 0.\n         * <p>\n         * <b>NOTE:</b>Setting a tag disallows sharing of sockets with requests\n         * with other tags, which may adversely effect performance by prohibiting\n         * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n         * and QUIC) will only be allowed if all requests have the same socket tag.\n         *\n         * @param tag the tag value used to when accounting for socket traffic caused by this\n         *            request. Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used\n         *            internally by system services like {@link android.app.DownloadManager} when\n         *            performing traffic on behalf of an application.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.app.DownloadManager", "android.net.TrafficStats" ]
  }, {
    "name" : "public abstract Builder setTrafficStatsUid(int uid)",
    "returnType" : "Builder",
    "comment" : "\n         * Sets specific UID to use when accounting socket traffic caused by this request. See\n         * {@link android.net.TrafficStats} for more information. Designed for use when performing\n         * an operation on behalf of another application. Caller must hold\n         * {@code android.Manifest.permission#MODIFY_NETWORK_ACCOUNTING} permission. By default\n         * traffic is attributed to UID of caller.\n         * <p>\n         * <b>NOTE:</b>Setting a UID disallows sharing of sockets with requests\n         * with other UIDs, which may adversely effect performance by prohibiting\n         * connection sharing. In other words use of multiplexed sockets (e.g. HTTP/2\n         * and QUIC) will only be allowed if all requests have the same UID set.\n         *\n         * @param uid the UID to attribute socket traffic caused by this request.\n         * @return the builder to facilitate chaining.\n         ",
    "links" : [ "android.net.TrafficStats" ]
  }, {
    "name" : "public abstract UrlRequest build()",
    "returnType" : "UrlRequest",
    "comment" : "\n         * Creates a {@link UrlRequest} using configuration within this {@link Builder}. The\n         * returned\n         * {@code UrlRequest} can then be started by calling {@link UrlRequest#start}.\n         *\n         * @return constructed {@link UrlRequest} using configuration within this {@link Builder}.\n         ",
    "links" : [ "Builder", "android.net.http.UrlRequest", "android.net.http.UrlRequest#start" ]
  } ],
  "methodNames" : [ "public abstract Builder setHttpMethod(@NonNull String method)", "public abstract Builder addHeader(@NonNull String header, @NonNull String value)", "public abstract Builder setCacheDisabled(boolean disableCache)", "public abstract Builder setPriority(int priority)", "public abstract Builder setUploadDataProvider(@NonNull UploadDataProvider uploadDataProvider, @NonNull Executor executor)", "public abstract Builder setDirectExecutorAllowed(boolean allowDirectExecutor)", "public abstract Builder bindToNetwork(@Nullable Network network)", "public abstract Builder setTrafficStatsTag(int tag)", "public abstract Builder setTrafficStatsUid(int uid)", "public abstract UrlRequest build()" ],
  "variableNames" : [ ]
}