{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/security/cert/Certificate.java",
  "packageName" : "javax.security.cert",
  "className" : "Certificate",
  "comment" : "\n * <p>Abstract class for managing a variety of identity certificates.\n * An identity certificate is a guarantee by a principal that\n * a public key is that of another principal.  (A principal represents\n * an entity such as an individual user, a group, or a corporation.)\n *<p>\n * This class is an abstraction for certificates that have different\n * formats but important common uses.  For example, different types of\n * certificates, such as X.509 and PGP, share general certificate\n * functionality (like encoding and verifying) and\n * some types of information (like a public key).\n * <p>\n * X.509, PGP, and SDSI certificates can all be implemented by\n * subclassing the Certificate class, even though they contain different\n * sets of information, and they store and retrieve the information in\n * different ways.\n *\n * <p><em>Note: The classes in the package {@code javax.security.cert}\n * exist for compatibility with earlier versions of the\n * Java Secure Sockets Extension (JSSE). New applications should instead\n * use the standard Java SE certificate classes located in\n * {@code java.security.cert}.</em></p>\n *\n * @since 1.4\n * @see X509Certificate\n *\n * @author Hemma Prafullchandra\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this certificate for equality with the specified\n     * object. If the {@code other} object is an\n     * {@code instanceof} {@code Certificate}, then\n     * its encoded form is retrieved and compared with the\n     * encoded form of this certificate.\n     *\n     * @param other the object to test for equality with this certificate.\n     * @return true if the encoded forms of the two certificates\n     *         match, false otherwise.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode value for this certificate from its\n     * encoded form.\n     *\n     * @return the hashcode value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract byte[] getEncoded() throws CertificateEncodingException",
    "returnType" : "byte[]",
    "comment" : "\n     * Returns the encoded form of this certificate. It is\n     * assumed that each certificate type would have only a single\n     * form of encoding; for example, X.509 certificates would\n     * be encoded as ASN.1 DER.\n     *\n     * @return encoded form of this certificate\n     * @exception CertificateEncodingException on internal certificate\n     *            encoding failure\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this certificate was signed using the\n     * private key that corresponds to the specified public key.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     *\n     * @exception NoSuchAlgorithmException on unsupported signature\n     * algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException if there's no default provider.\n     * @exception SignatureException on signature errors.\n     * @exception CertificateException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException",
    "returnType" : "void",
    "comment" : "\n     * Verifies that this certificate was signed using the\n     * private key that corresponds to the specified public key.\n     * This method uses the signature verification engine\n     * supplied by the specified provider.\n     *\n     * @param key the PublicKey used to carry out the verification.\n     * @param sigProvider the name of the signature provider.\n     * @exception NoSuchAlgorithmException on unsupported signature algorithms.\n     * @exception InvalidKeyException on incorrect key.\n     * @exception NoSuchProviderException on incorrect provider.\n     * @exception SignatureException on signature errors.\n     * @exception CertificateException on encoding errors.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string representation of this certificate.\n     *\n     * @return a string representation of this certificate.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract PublicKey getPublicKey()",
    "returnType" : "PublicKey",
    "comment" : "\n     * Gets the public key from this certificate.\n     *\n     * @return the public key.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public boolean equals(Object other)", "public int hashCode()", "public abstract byte[] getEncoded() throws CertificateEncodingException", "public abstract void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public abstract void verify(PublicKey key, String sigProvider) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException", "public abstract String toString()", "public abstract PublicKey getPublicKey()" ],
  "variableNames" : [ ]
}