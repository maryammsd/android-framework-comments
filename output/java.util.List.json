{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/List.java",
  "packageName" : "java.util",
  "className" : "List",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this list.  If this list contains\n     * more than {@code Integer.MAX_VALUE} elements, returns\n     * {@code Integer.MAX_VALUE}.\n     *\n     * @return the number of elements in this list\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains no elements.\n     *\n     * @return {@code true} if this list contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains the specified element.\n     * More formally, returns {@code true} if and only if this list contains\n     * at least one element {@code e} such that\n     * {@code Objects.equals(o, e)}.\n     *\n     * @param o element whose presence in this list is to be tested\n     * @return {@code true} if this list contains the specified element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this list\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this list in proper sequence.\n     *\n     * @return an iterator over the elements in this list in proper sequence\n     ",
    "links" : [ ]
  }, {
    "name" : " Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list in proper\n     * sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this list.  (In other words, this method must\n     * allocate a new array even if this list is backed by an array).\n     * The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this list in proper\n     *         sequence\n     * @see Arrays#asList(Object[])\n     ",
    "links" : [ ]
  }, {
    "name" : " T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this list in\n     * proper sequence (from first to last element); the runtime type of\n     * the returned array is that of the specified array.  If the list fits\n     * in the specified array, it is returned therein.  Otherwise, a new\n     * array is allocated with the runtime type of the specified array and\n     * the size of this list.\n     *\n     * <p>If the list fits in the specified array with room to spare (i.e.,\n     * the array has more elements than the list), the element in the array\n     * immediately following the end of the list is set to {@code null}.\n     * (This is useful in determining the length of the list <i>only</i> if\n     * the caller knows that the list does not contain any null elements.)\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a list known to contain only strings.\n     * The following code can be used to dump the list into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre>{@code\n     *     String[] y = x.toArray(new String[0]);\n     * }</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of this list are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose.\n     * @return an array containing the elements of this list\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this list\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : " boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends the specified element to the end of this list (optional\n     * operation).\n     *\n     * <p>Lists that support this operation may place limitations on what\n     * elements may be added to this list.  In particular, some\n     * lists will refuse to add null elements, and others will impose\n     * restrictions on the type of elements that may be added.  List\n     * classes should clearly specify in their documentation any restrictions\n     * on what elements may be added.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this list\n     ",
    "links" : [ "java.util.Collection#add" ]
  }, {
    "name" : " boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element from this list,\n     * if it is present (optional operation).  If this list does not contain\n     * the element, it is unchanged.  More formally, removes the element with\n     * the lowest index {@code i} such that\n     * {@code Objects.equals(o, get(i))}\n     * (if such an element exists).  Returns {@code true} if this list\n     * contained the specified element (or equivalently, if this list changed\n     * as a result of the call).\n     *\n     * @param o element to be removed from this list, if present\n     * @return {@code true} if this list contained the specified element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this list\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws UnsupportedOperationException if the {@code remove} operation\n     *         is not supported by this list\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean containsAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this list contains all of the elements of the\n     * specified collection.\n     *\n     * @param  c collection to be checked for containment in this list\n     * @return {@code true} if this list contains all of the elements of the\n     *         specified collection\n     * @throws ClassCastException if the types of one or more elements\n     *         in the specified collection are incompatible with this\n     *         list\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this list does not permit null\n     *         elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Appends all of the elements in the specified collection to the end of\n     * this list, in the order that they are returned by the specified\n     * collection's iterator (optional operation).  The behavior of this\n     * operation is undefined if the specified collection is modified while\n     * the operation is in progress.  (Note that this will occur if the\n     * specified collection is this list, and it's nonempty.)\n     *\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code addAll} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this list\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this list does not permit null\n     *         elements, or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this list\n     * @see #add(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean addAll(int index, Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts all of the elements in the specified collection into this\n     * list at the specified position (optional operation).  Shifts the\n     * element currently at that position (if any) and any subsequent\n     * elements to the right (increases their indices).  The new elements\n     * will appear in this list in the order that they are returned by the\n     * specified collection's iterator.  The behavior of this operation is\n     * undefined if the specified collection is modified while the\n     * operation is in progress.  (Note that this will occur if the specified\n     * collection is this list, and it's nonempty.)\n     *\n     * @param index index at which to insert the first element from the\n     *              specified collection\n     * @param c collection containing elements to be added to this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code addAll} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of an element of the specified\n     *         collection prevents it from being added to this list\n     * @throws NullPointerException if the specified collection contains one\n     *         or more null elements and this list does not permit null\n     *         elements, or if the specified collection is null\n     * @throws IllegalArgumentException if some property of an element of the\n     *         specified collection prevents it from being added to this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes from this list all of its elements that are contained in the\n     * specified collection (optional operation).\n     *\n     * @param c collection containing elements to be removed from this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code removeAll} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Retains only the elements in this list that are contained in the\n     * specified collection (optional operation).  In other words, removes\n     * from this list all of its elements that are not contained in the\n     * specified collection.\n     *\n     * @param c collection containing elements to be retained in this list\n     * @return {@code true} if this list changed as a result of the call\n     * @throws UnsupportedOperationException if the {@code retainAll} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of an element of this list\n     *         is incompatible with the specified collection\n     * (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if this list contains a null element and the\n     *         specified collection does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>),\n     *         or if the specified collection is null\n     * @see #remove(Object)\n     * @see #contains(Object)\n     ",
    "links" : [ ]
  }, {
    "name" : " void replaceAll(UnaryOperator<E> operator)",
    "returnType" : "void",
    "comment" : "\n     * Replaces each element of this list with the result of applying the\n     * operator to that element.  Errors or runtime exceptions thrown by\n     * the operator are relayed to the caller.\n     *\n     * @implSpec\n     * The default implementation is equivalent to, for this {@code list}:\n     * <pre>{@code\n     *     final ListIterator<E> li = list.listIterator();\n     *     while (li.hasNext()) {\n     *         li.set(operator.apply(li.next()));\n     *     }\n     * }</pre>\n     *\n     * If the list's list-iterator does not support the {@code set} operation\n     * then an {@code UnsupportedOperationException} will be thrown when\n     * replacing the first element.\n     *\n     * @param operator the operator to apply to each element\n     * @throws UnsupportedOperationException if this list is unmodifiable.\n     *         Implementations may throw this exception if an element\n     *         cannot be replaced or if, in general, modification is not\n     *         supported\n     * @throws NullPointerException if the specified operator is null or\n     *         if the operator result is a null value and this list does\n     *         not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : " void sort(Comparator<? super E> c)",
    "returnType" : "void",
    "comment" : "\n     * Sorts this list according to the order induced by the specified\n     * {@link Comparator}.\n     *\n     * <p>All elements in this list must be <i>mutually comparable</i> using the\n     * specified comparator (that is, {@code c.compare(e1, e2)} must not throw\n     * a {@code ClassCastException} for any elements {@code e1} and {@code e2}\n     * in the list).\n     *\n     * <p>If the specified comparator is {@code null} then all elements in this\n     * list must implement the {@link Comparable} interface and the elements'\n     * {@linkplain Comparable natural ordering} should be used.\n     *\n     * <p>This list must be modifiable, but need not be resizable.\n     *\n     * <p>For apps running on and targeting Android versions greater than\n     * Nougat (API level {@code > 25}), {@link Collections#sort(List)}\n     * delegates to this method. Such apps must not call\n     * {@link Collections#sort(List)} from this method. Instead, prefer\n     * not overriding this method at all. If you must override it, consider\n     * this implementation:\n     * <pre>\n     * &#064;Override\n     * public void sort(Comparator&lt;? super E&gt; c) {\n     *   Object[] elements = toArray();\n     *   Arrays.sort(elements, c);\n     *   ListIterator&lt;E&gt; iterator = (ListIterator&lt;Object&gt;) listIterator();\n     *   for (Object element : elements) {\n     *     iterator.next();\n     *     iterator.set((E) element);\n     *   }\n     * }\n     * </pre>\n     *\n     * @implSpec\n     * The default implementation obtains an array containing all elements in\n     * this list, sorts the array, and iterates over this list resetting each\n     * element from the corresponding position in the array. (This avoids the\n     * n<sup>2</sup> log(n) performance that would result from attempting\n     * to sort a linked list in place.)\n     *\n     * @implNote\n     * This implementation is a stable, adaptive, iterative mergesort that\n     * requires far fewer than n lg(n) comparisons when the input array is\n     * partially sorted, while offering the performance of a traditional\n     * mergesort when the input array is randomly ordered.  If the input array\n     * is nearly sorted, the implementation requires approximately n\n     * comparisons.  Temporary storage requirements vary from a small constant\n     * for nearly sorted input arrays to n/2 object references for randomly\n     * ordered input arrays.\n     *\n     * <p>The implementation takes equal advantage of ascending and\n     * descending order in its input array, and can take advantage of\n     * ascending and descending order in different parts of the same\n     * input array.  It is well-suited to merging two or more sorted arrays:\n     * simply concatenate the arrays and sort the resulting array.\n     *\n     * <p>The implementation was adapted from Tim Peters's list sort for Python\n     * (<a href=\"http://svn.python.org/projects/python/trunk/Objects/listsort.txt\">\n     * TimSort</a>).  It uses techniques from Peter McIlroy's \"Optimistic\n     * Sorting and Information Theoretic Complexity\", in Proceedings of the\n     * Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474,\n     * January 1993.\n     *\n     * @param c the {@code Comparator} used to compare list elements.\n     *          A {@code null} value indicates that the elements'\n     *          {@linkplain Comparable natural ordering} should be used\n     * @throws ClassCastException if the list contains elements that are not\n     *         <i>mutually comparable</i> using the specified comparator\n     * @throws UnsupportedOperationException if the list's list-iterator does\n     *         not support the {@code set} operation\n     * @throws IllegalArgumentException\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     *         if the comparator is found to violate the {@link Comparator}\n     *         contract\n     * @since 1.8\n     ",
    "links" : [ "Comparable", "java.util.Comparator", "java.util.Collections#sort(List)" ]
  }, {
    "name" : " void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this list (optional operation).\n     * The list will be empty after this call returns.\n     *\n     * @throws UnsupportedOperationException if the {@code clear} operation\n     *         is not supported by this list\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares the specified object with this list for equality.  Returns\n     * {@code true} if and only if the specified object is also a list, both\n     * lists have the same size, and all corresponding pairs of elements in\n     * the two lists are <i>equal</i>.  (Two elements {@code e1} and\n     * {@code e2} are <i>equal</i> if {@code Objects.equals(e1, e2)}.)\n     * In other words, two lists are defined to be\n     * equal if they contain the same elements in the same order.  This\n     * definition ensures that the equals method works properly across\n     * different implementations of the {@code List} interface.\n     *\n     * @param o the object to be compared for equality with this list\n     * @return {@code true} if the specified object is equal to this list\n     ",
    "links" : [ ]
  }, {
    "name" : " int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns the hash code value for this list.  The hash code of a list\n     * is defined to be the result of the following calculation:\n     * <pre>{@code\n     *     int hashCode = 1;\n     *     for (E e : list)\n     *         hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());\n     * }</pre>\n     * This ensures that {@code list1.equals(list2)} implies that\n     * {@code list1.hashCode()==list2.hashCode()} for any two lists,\n     * {@code list1} and {@code list2}, as required by the general\n     * contract of {@link Object#hashCode}.\n     *\n     * @return the hash code value for this list\n     * @see Object#equals(Object)\n     * @see #equals(Object)\n     ",
    "links" : [ "#hashCode" ]
  }, {
    "name" : " E get(int index)",
    "returnType" : "E",
    "comment" : "\n     * Returns the element at the specified position in this list.\n     *\n     * @param index index of the element to return\n     * @return the element at the specified position in this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ ]
  }, {
    "name" : " E set(int index, E element)",
    "returnType" : "E",
    "comment" : "\n     * Replaces the element at the specified position in this list with the\n     * specified element (optional operation).\n     *\n     * @param index index of the element to replace\n     * @param element element to be stored at the specified position\n     * @return the element previously at the specified position\n     * @throws UnsupportedOperationException if the {@code set} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and\n     *         this list does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ ]
  }, {
    "name" : " void add(int index, E element)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the specified position in this list\n     * (optional operation).  Shifts the element currently at that position\n     * (if any) and any subsequent elements to the right (adds one to their\n     * indices).\n     *\n     * @param index index at which the specified element is to be inserted\n     * @param element element to be inserted\n     * @throws UnsupportedOperationException if the {@code add} operation\n     *         is not supported by this list\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this list\n     * @throws NullPointerException if the specified element is null and\n     *         this list does not permit null elements\n     * @throws IllegalArgumentException if some property of the specified\n     *         element prevents it from being added to this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     ",
    "links" : [ ]
  }, {
    "name" : " E remove(int index)",
    "returnType" : "E",
    "comment" : "\n     * Removes the element at the specified position in this list (optional\n     * operation).  Shifts any subsequent elements to the left (subtracts one\n     * from their indices).  Returns the element that was removed from the\n     * list.\n     *\n     * @param index the index of the element to be removed\n     * @return the element previously at the specified position\n     * @throws UnsupportedOperationException if the {@code remove} operation\n     *         is not supported by this list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index >= size()})\n     ",
    "links" : [ ]
  }, {
    "name" : " int indexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the first occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the lowest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the first occurrence of the specified element in\n     *         this list, or -1 if this list does not contain the element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this list\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " int lastIndexOf(Object o)",
    "returnType" : "int",
    "comment" : "\n     * Returns the index of the last occurrence of the specified element\n     * in this list, or -1 if this list does not contain the element.\n     * More formally, returns the highest index {@code i} such that\n     * {@code Objects.equals(o, get(i))},\n     * or -1 if there is no such index.\n     *\n     * @param o element to search for\n     * @return the index of the last occurrence of the specified element in\n     *         this list, or -1 if this list does not contain the element\n     * @throws ClassCastException if the type of the specified element\n     *         is incompatible with this list\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     * @throws NullPointerException if the specified element is null and this\n     *         list does not permit null elements\n     *         (<a href=\"Collection.html#optional-restrictions\">optional</a>)\n     ",
    "links" : [ ]
  }, {
    "name" : " ListIterator<E> listIterator()",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence).\n     *\n     * @return a list iterator over the elements in this list (in proper\n     *         sequence)\n     ",
    "links" : [ ]
  }, {
    "name" : " ListIterator<E> listIterator(int index)",
    "returnType" : "ListIterator<E>",
    "comment" : "\n     * Returns a list iterator over the elements in this list (in proper\n     * sequence), starting at the specified position in the list.\n     * The specified index indicates the first element that would be\n     * returned by an initial call to {@link ListIterator#next next}.\n     * An initial call to {@link ListIterator#previous previous} would\n     * return the element with the specified index minus one.\n     *\n     * @param index index of the first element to be returned from the\n     *        list iterator (by a call to {@link ListIterator#next next})\n     * @return a list iterator over the elements in this list (in proper\n     *         sequence), starting at the specified position in the list\n     * @throws IndexOutOfBoundsException if the index is out of range\n     *         ({@code index < 0 || index > size()})\n     ",
    "links" : [ "java.util.ListIterator#next", "java.util.ListIterator#previous" ]
  }, {
    "name" : " List<E> subList(int fromIndex, int toIndex)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns a view of the portion of this list between the specified\n     * {@code fromIndex}, inclusive, and {@code toIndex}, exclusive.  (If\n     * {@code fromIndex} and {@code toIndex} are equal, the returned list is\n     * empty.)  The returned list is backed by this list, so non-structural\n     * changes in the returned list are reflected in this list, and vice-versa.\n     * The returned list supports all of the optional list operations supported\n     * by this list.<p>\n     *\n     * This method eliminates the need for explicit range operations (of\n     * the sort that commonly exist for arrays).  Any operation that expects\n     * a list can be used as a range operation by passing a subList view\n     * instead of a whole list.  For example, the following idiom\n     * removes a range of elements from a list:\n     * <pre>{@code\n     *      list.subList(from, to).clear();\n     * }</pre>\n     * Similar idioms may be constructed for {@code indexOf} and\n     * {@code lastIndexOf}, and all of the algorithms in the\n     * {@code Collections} class can be applied to a subList.<p>\n     *\n     * The semantics of the list returned by this method become undefined if\n     * the backing list (i.e., this list) is <i>structurally modified</i> in\n     * any way other than via the returned list.  (Structural modifications are\n     * those that change the size of this list, or otherwise perturb it in such\n     * a fashion that iterations in progress may yield incorrect results.)\n     *\n     * @param fromIndex low endpoint (inclusive) of the subList\n     * @param toIndex high endpoint (exclusive) of the subList\n     * @return a view of the specified range within this list\n     * @throws IndexOutOfBoundsException for an illegal endpoint index value\n     *         ({@code fromIndex < 0 || toIndex > size ||\n     *         fromIndex > toIndex})\n     ",
    "links" : [ ]
  }, {
    "name" : " Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a {@link Spliterator} over the elements in this list.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED} and\n     * {@link Spliterator#ORDERED}.  Implementations should document the\n     * reporting of additional characteristic values.\n     *\n     * @implSpec\n     * The default implementation creates a\n     * <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * spliterator as follows:\n     * <ul>\n     * <li>If the list is an instance of {@link RandomAccess} then the default\n     *     implementation creates a spliterator that traverses elements by\n     *     invoking the method {@link List#get}.  If such invocation results or\n     *     would result in an {@code IndexOutOfBoundsException} then the\n     *     spliterator will <em>fail-fast</em> and throw a\n     *     {@code ConcurrentModificationException}.\n     *     If the list is also an instance of {@link AbstractList} then the\n     *     spliterator will use the list's {@link AbstractList#modCount modCount}\n     *     field to provide additional <em>fail-fast</em> behavior.\n     * <li>Otherwise, the default implementation creates a spliterator from the\n     *     list's {@code Iterator}.  The spliterator inherits the\n     *     <em>fail-fast</em> of the list's iterator.\n     * </ul>\n     *\n     * @implNote\n     * The created {@code Spliterator} additionally reports\n     * {@link Spliterator#SUBSIZED}.\n     *\n     * @return a {@code Spliterator} over the elements in this list\n     * @since 1.8\n     ",
    "links" : [ "java.util.RandomAccess", "java.util.AbstractList#modCount", "java.util.Spliterator#SIZED", "java.util.AbstractList", "java.util.List#get", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : " void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface calls {@code add(0, e)}.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface calls {@code add(e)}.\n     *\n     * @throws NullPointerException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this List is not empty, the implementation in this interface returns the result\n     * of calling {@code get(0)}. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E getLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this List is not empty, the implementation in this interface returns the result\n     * of calling {@code get(size() - 1)}. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this List is not empty, the implementation in this interface returns the result\n     * of calling {@code remove(0)}. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * If this List is not empty, the implementation in this interface returns the result\n     * of calling {@code remove(size() - 1)}. Otherwise, it throws {@code NoSuchElementException}.\n     *\n     * @throws NoSuchElementException {@inheritDoc}\n     * @throws UnsupportedOperationException {@inheritDoc}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " List<E> reversed()",
    "returnType" : "List<E>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @implSpec\n     * The implementation in this interface returns a reverse-ordered List\n     * view. The {@code reversed()} method of the view returns a reference\n     * to this List. Other operations on the view are implemented via calls to\n     * public methods on this List. The exact relationship between calls on the\n     * view and calls on this List is unspecified. However, order-sensitive\n     * operations generally delegate to the appropriate method with the opposite\n     * orientation. For example, calling {@code getFirst} on the view results in\n     * a call to {@code getLast} on this List.\n     *\n     * @return a reverse-ordered view of this collection, as a {@code List}\n     * @since 21\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of()",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing zero elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @return an empty {@code List}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing one element.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the single element\n     * @return a {@code List} containing the specified element\n     * @throws NullPointerException if the element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing two elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing three elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing four elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing five elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing six elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing seven elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing eight elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing nine elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @param e9 the ninth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing ten elements.\n     *\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param e1 the first element\n     * @param e2 the second element\n     * @param e3 the third element\n     * @param e4 the fourth element\n     * @param e5 the fifth element\n     * @param e6 the sixth element\n     * @param e7 the seventh element\n     * @param e8 the eighth element\n     * @param e9 the ninth element\n     * @param e10 the tenth element\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ ]
  }, {
    "name" : " static List<E> of(E... elements)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an unmodifiable list containing an arbitrary number of elements.\n     * See <a href=\"#unmodifiable\">Unmodifiable Lists</a> for details.\n     *\n     * @apiNote\n     * This method also accepts a single array as an argument. The element type of\n     * the resulting list will be the component type of the array, and the size of\n     * the list will be equal to the length of the array. To create a list with\n     * a single element that is an array, do the following:\n     *\n     * <pre>{@code\n     *     String[] array = ... ;\n     *     List<String[]> list = List.<String[]>of(array);\n     * }</pre>\n     *\n     * This will cause the {@link List#of(Object) List.of(E)} method\n     * to be invoked instead.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param elements the elements to be contained in the list\n     * @return a {@code List} containing the specified elements\n     * @throws NullPointerException if an element is {@code null} or if the array is {@code null}\n     *\n     * @since 9\n     ",
    "links" : [ "java.util.List#of(Object)" ]
  }, {
    "name" : " static List<E> copyOf(Collection<? extends E> coll)",
    "returnType" : "List<E>",
    "comment" : "\n     * Returns an <a href=\"#unmodifiable\">unmodifiable List</a> containing the elements of\n     * the given Collection, in its iteration order. The given Collection must not be null,\n     * and it must not contain any null elements. If the given Collection is subsequently\n     * modified, the returned List will not reflect such modifications.\n     *\n     * @implNote\n     * If the given Collection is an <a href=\"#unmodifiable\">unmodifiable List</a>,\n     * calling copyOf will generally not create a copy.\n     *\n     * @param <E> the {@code List}'s element type\n     * @param coll a {@code Collection} from which elements are drawn, must be non-null\n     * @return a {@code List} containing the elements of the given {@code Collection}\n     * @throws NullPointerException if coll is null, or if it contains any nulls\n     * @since 10\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " int size()", " boolean isEmpty()", " boolean contains(Object o)", " Iterator<E> iterator()", " Object[] toArray()", " T[] toArray(T[] a)", " boolean add(E e)", " boolean remove(Object o)", " boolean containsAll(Collection<?> c)", " boolean addAll(Collection<? extends E> c)", " boolean addAll(int index, Collection<? extends E> c)", " boolean removeAll(Collection<?> c)", " boolean retainAll(Collection<?> c)", " void replaceAll(UnaryOperator<E> operator)", " void sort(Comparator<? super E> c)", " void clear()", " boolean equals(Object o)", " int hashCode()", " E get(int index)", " E set(int index, E element)", " void add(int index, E element)", " E remove(int index)", " int indexOf(Object o)", " int lastIndexOf(Object o)", " ListIterator<E> listIterator()", " ListIterator<E> listIterator(int index)", " List<E> subList(int fromIndex, int toIndex)", " Spliterator<E> spliterator()", " void addFirst(E e)", " void addLast(E e)", " E getFirst()", " E getLast()", " E removeFirst()", " E removeLast()", " List<E> reversed()", " static List<E> of()", " static List<E> of(E e1)", " static List<E> of(E e1, E e2)", " static List<E> of(E e1, E e2, E e3)", " static List<E> of(E e1, E e2, E e3, E e4)", " static List<E> of(E e1, E e2, E e3, E e4, E e5)", " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)", " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)", " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)", " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)", " static List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)", " static List<E> of(E... elements)", " static List<E> copyOf(Collection<? extends E> coll)" ],
  "variableNames" : [ ]
}