{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/appsearch/AppSearchSchema.java",
  "packageName" : "android.app.appsearch",
  "className" : "StringPropertyConfig",
  "comment" : " Configuration for a property of type String in a Document. ",
  "links" : [ ],
  "variables" : [ {
    "name" : "INDEXING_TYPE_NONE",
    "type" : "int",
    "comment" : " Content in this property will not be tokenized or indexed. ",
    "links" : [ ]
  }, {
    "name" : "INDEXING_TYPE_EXACT_TERMS",
    "type" : "int",
    "comment" : "\n         * Content in this property should only be returned for queries matching the exact tokens\n         * appearing in this property.\n         *\n         * <p>For example, a property with \"fool\" should NOT match a query for \"foo\".\n         ",
    "links" : [ ]
  }, {
    "name" : "INDEXING_TYPE_PREFIXES",
    "type" : "int",
    "comment" : "\n         * Content in this property should be returned for queries that are either exact matches or\n         * query matches of the tokens appearing in this property.\n         *\n         * <p>For example, a property with \"fool\" <b>should</b> match a query for \"foo\".\n         ",
    "links" : [ ]
  }, {
    "name" : "TOKENIZER_TYPE_NONE",
    "type" : "int",
    "comment" : "\n         * This value indicates that no tokens should be extracted from this property.\n         *\n         * <p>It is only valid for tokenizer_type to be 'NONE' if {@link #getIndexingType} is {@link\n         * #INDEXING_TYPE_NONE}.\n         ",
    "links" : [ "#getIndexingType", "#INDEXING_TYPE_NONE" ]
  }, {
    "name" : "TOKENIZER_TYPE_PLAIN",
    "type" : "int",
    "comment" : "\n         * Tokenization for plain text. This value indicates that tokens should be extracted from\n         * this property based on word breaks. Segments of whitespace and punctuation are not\n         * considered tokens.\n         *\n         * <p>For example, a property with \"foo bar. baz.\" will produce tokens for \"foo\", \"bar\" and\n         * \"baz\". The segments \" \" and \".\" will not be considered tokens.\n         *\n         * <p>It is only valid for tokenizer_type to be 'PLAIN' if {@link #getIndexingType} is\n         * {@link #INDEXING_TYPE_EXACT_TERMS} or {@link #INDEXING_TYPE_PREFIXES}.\n         ",
    "links" : [ "#INDEXING_TYPE_EXACT_TERMS", "#getIndexingType", "#INDEXING_TYPE_PREFIXES" ]
  }, {
    "name" : "TOKENIZER_TYPE_VERBATIM",
    "type" : "int",
    "comment" : "\n         * This value indicates that no normalization or segmentation should be applied to string\n         * values that are tokenized using this type. Therefore, the output token is equivalent to\n         * the raw string value.\n         *\n         * <p>For example, a property with \"Hello, world!\" will produce the token \"Hello, world!\",\n         * preserving punctuation and capitalization, and not creating separate tokens between the\n         * space.\n         *\n         * <p>It is only valid for tokenizer_type to be 'VERBATIM' if {@link #getIndexingType} is\n         * {@link #INDEXING_TYPE_EXACT_TERMS} or {@link #INDEXING_TYPE_PREFIXES}.\n         ",
    "links" : [ "#INDEXING_TYPE_EXACT_TERMS", "#getIndexingType", "#INDEXING_TYPE_PREFIXES" ]
  }, {
    "name" : "TOKENIZER_TYPE_RFC822",
    "type" : "int",
    "comment" : "\n         * Tokenization for emails. This value indicates that tokens should be extracted from this\n         * property based on email structure.\n         *\n         * <p>For example, a property with \"alex.sav@google.com\" will produce tokens for \"alex\",\n         * \"sav\", \"alex.sav\", \"google\", \"com\", and \"alexsav@google.com\"\n         *\n         * <p>It is only valid for tokenizer_type to be 'RFC822' if {@link #getIndexingType} is\n         * {@link #INDEXING_TYPE_EXACT_TERMS} or {@link #INDEXING_TYPE_PREFIXES}.\n         ",
    "links" : [ "#INDEXING_TYPE_EXACT_TERMS", "#getIndexingType", "#INDEXING_TYPE_PREFIXES" ]
  }, {
    "name" : "JOINABLE_VALUE_TYPE_NONE",
    "type" : "int",
    "comment" : " Content in this property is not joinable. ",
    "links" : [ ]
  }, {
    "name" : "JOINABLE_VALUE_TYPE_QUALIFIED_ID",
    "type" : "int",
    "comment" : "\n         * Content in this string property will be used as a qualified id to join documents.\n         *\n         * <ul>\n         *   <li>Qualified id: a unique identifier for a document, and this joinable value type is\n         *       similar to primary and foreign key in relational database. See {@link\n         *       android.app.appsearch.util.DocumentIdUtil} for more details.\n         *   <li>Currently we only support single string joining, so it should only be used with\n         *       {@link PropertyConfig#CARDINALITY_OPTIONAL} and {@link\n         *       PropertyConfig#CARDINALITY_REQUIRED}.\n         * </ul>\n         ",
    "links" : [ "android.app.appsearch.util.DocumentIdUtil", "#CARDINALITY_REQUIRED", "#CARDINALITY_OPTIONAL" ]
  } ],
  "methods" : [ {
    "name" : "public int getIndexingType()",
    "returnType" : "int",
    "comment" : " Returns how the property is indexed. ",
    "links" : [ ]
  }, {
    "name" : "public int getTokenizerType()",
    "returnType" : "int",
    "comment" : " Returns how this property is tokenized (split into words). ",
    "links" : [ ]
  }, {
    "name" : "public int getJoinableValueType()",
    "returnType" : "int",
    "comment" : "\n         * Returns how this property is going to be used to join documents from other schema types.\n         ",
    "links" : [ ]
  }, {
    "name" : " void appendStringPropertyConfigFields(@NonNull IndentingStringBuilder builder)",
    "returnType" : "void",
    "comment" : "\n         * Appends a debug string for the {@link StringPropertyConfig} instance to the given string\n         * builder.\n         *\n         * <p>This appends fields specific to a {@link StringPropertyConfig} instance.\n         *\n         * @param builder the builder to append to.\n         ",
    "links" : [ "StringPropertyConfig" ]
  } ],
  "methodNames" : [ "public int getIndexingType()", "public int getTokenizerType()", "public int getJoinableValueType()", " void appendStringPropertyConfigFields(@NonNull IndentingStringBuilder builder)" ],
  "variableNames" : [ "INDEXING_TYPE_NONE", "INDEXING_TYPE_EXACT_TERMS", "INDEXING_TYPE_PREFIXES", "TOKENIZER_TYPE_NONE", "TOKENIZER_TYPE_PLAIN", "TOKENIZER_TYPE_VERBATIM", "TOKENIZER_TYPE_RFC822", "JOINABLE_VALUE_TYPE_NONE", "JOINABLE_VALUE_TYPE_QUALIFIED_ID" ]
}