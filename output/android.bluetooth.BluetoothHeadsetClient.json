{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothHeadsetClient.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothHeadsetClient",
  "comment" : "\n * This class provides the System APIs to interact with the Hands-Free Client profile.\n *\n * <p>BluetoothHeadsetClient is a proxy object for controlling the Bluetooth HFP Client Service via\n * IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothHeadsetClient proxy object.\n *\n * @hide\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the HFP Client profile.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     *\n     * @hide\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_AUDIO_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent sent whenever audio state changes.\n     *\n     * <p>It includes two mandatory extras: {@link BluetoothProfile#EXTRA_STATE}, {@link\n     * BluetoothProfile#EXTRA_PREVIOUS_STATE}, with possible values: {@link\n     * #STATE_AUDIO_CONNECTING}, {@link #STATE_AUDIO_CONNECTED}, {@link #STATE_AUDIO_DISCONNECTED}\n     *\n     * <p>When <code>EXTRA_STATE</code> is set to </code>STATE_AUDIO_CONNECTED</code>, it also\n     * includes {@link #EXTRA_AUDIO_WBS} indicating wide band speech support.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothProfile#EXTRA_PREVIOUS_STATE", "#EXTRA_AUDIO_WBS", "android.bluetooth.BluetoothProfile#EXTRA_STATE", "#STATE_AUDIO_CONNECTED", "#STATE_AUDIO_CONNECTING", "#STATE_AUDIO_DISCONNECTED" ]
  }, {
    "name" : "ACTION_AG_EVENT",
    "type" : "String",
    "comment" : "\n     * Intent sending updates of the Audio Gateway state. Each extra is being sent only when value\n     * it represents has been changed recently on AG.\n     *\n     * <p>It can contain one or more of the following extras: {@link #EXTRA_NETWORK_STATUS}, {@link\n     * #EXTRA_NETWORK_SIGNAL_STRENGTH}, {@link #EXTRA_NETWORK_ROAMING}, {@link\n     * #EXTRA_BATTERY_LEVEL}, {@link #EXTRA_OPERATOR_NAME}, {@link #EXTRA_VOICE_RECOGNITION}, {@link\n     * #EXTRA_IN_BAND_RING}\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_OPERATOR_NAME", "#EXTRA_NETWORK_ROAMING", "#EXTRA_VOICE_RECOGNITION", "#EXTRA_NETWORK_SIGNAL_STRENGTH", "#EXTRA_NETWORK_STATUS", "#EXTRA_BATTERY_LEVEL", "#EXTRA_IN_BAND_RING" ]
  }, {
    "name" : "ACTION_CALL_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent sent whenever state of a call changes.\n     *\n     * <p>It includes: {@link #EXTRA_CALL}, with value of {@link BluetoothHeadsetClientCall}\n     * instance, representing actual call state.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothHeadsetClientCall", "#EXTRA_CALL" ]
  }, {
    "name" : "ACTION_RESULT",
    "type" : "String",
    "comment" : "\n     * Intent that notifies about the result of the last issued action. Please note that not every\n     * action results in explicit action result code being sent. Instead other notifications about\n     * new Audio Gateway state might be sent, like <code>ACTION_AG_EVENT</code> with <code>\n     * EXTRA_VOICE_RECOGNITION</code> value when for example user started voice recognition from HF\n     * unit.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_VENDOR_SPECIFIC_HEADSETCLIENT_EVENT",
    "type" : "String",
    "comment" : "\n     * Intent that notifies about vendor specific event arrival. Events not defined in HFP spec will\n     * be matched with supported vendor event list and this intent will be broadcasted upon a match.\n     * Supported vendor events are of format of \"+eventCode\" or \"+eventCode=xxxx\" or\n     * \"+eventCode:=xxxx\". Vendor event can be a response to a vendor specific command or\n     * unsolicited.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_LAST_VTAG",
    "type" : "String",
    "comment" : "\n     * Intent that notifies about the number attached to the last voice tag recorded on AG.\n     *\n     * <p>It contains: {@link #EXTRA_NUMBER}, with a <code>String</code> value representing phone\n     * number.\n     *\n     * @hide\n     ",
    "links" : [ "#EXTRA_NUMBER" ]
  }, {
    "name" : "STATE_AUDIO_DISCONNECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_AUDIO_CONNECTING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "STATE_AUDIO_CONNECTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AUDIO_WBS",
    "type" : "String",
    "comment" : "\n     * Extra with information if connected audio is WBS.\n     *\n     * <p>Possible values: <code>true</code>, <code>false</code>.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NETWORK_STATUS",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT indicates network status.\n     *\n     * <p>Value: 0 - network unavailable, 1 - network available\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NETWORK_SIGNAL_STRENGTH",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates network signal strength.\n     *\n     * <p>Value: <code>Integer</code> representing signal strength.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_NETWORK_ROAMING",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates roaming state.\n     *\n     * <p>Value: 0 - no roaming 1 - active roaming\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_BATTERY_LEVEL",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates the battery level.\n     *\n     * <p>Value: <code>Integer</code> representing signal strength.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_OPERATOR_NAME",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates operator name.\n     *\n     * <p>Value: <code>String</code> representing operator name.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VOICE_RECOGNITION",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates voice recognition state.\n     *\n     * <p>Value: 0 - voice recognition stopped, 1 - voice recognition started.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_IN_BAND_RING",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates in band ring state.\n     *\n     * <p>Value: 0 - in band ring tone not supported, or 1 - in band ring tone supported.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SUBSCRIBER_INFO",
    "type" : "String",
    "comment" : "\n     * Extra for AG_EVENT intent indicates subscriber info.\n     *\n     * <p>Value: <code>String</code> containing subscriber information.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CALL",
    "type" : "String",
    "comment" : "\n     * Extra for AG_CALL_CHANGED intent indicates the {@link BluetoothHeadsetClientCall} object that\n     * has changed.\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothHeadsetClientCall" ]
  }, {
    "name" : "EXTRA_NUMBER",
    "type" : "String",
    "comment" : "\n     * Extra for ACTION_LAST_VTAG intent.\n     *\n     * <p>Value: <code>String</code> representing phone number corresponding to last voice tag\n     * recorded on AG\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_RESULT_CODE",
    "type" : "String",
    "comment" : "\n     * Extra for ACTION_RESULT intent that shows the result code of last issued action.\n     *\n     * <p>Possible results: {@link #ACTION_RESULT_OK}, {@link #ACTION_RESULT_ERROR}, {@link\n     * #ACTION_RESULT_ERROR_NO_CARRIER}, {@link #ACTION_RESULT_ERROR_BUSY}, {@link\n     * #ACTION_RESULT_ERROR_NO_ANSWER}, {@link #ACTION_RESULT_ERROR_DELAYED}, {@link\n     * #ACTION_RESULT_ERROR_BLACKLISTED}, {@link #ACTION_RESULT_ERROR_CME}\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_RESULT_OK", "#ACTION_RESULT_ERROR_BLACKLISTED", "#ACTION_RESULT_ERROR_NO_CARRIER", "#ACTION_RESULT_ERROR_NO_ANSWER", "#ACTION_RESULT_ERROR_DELAYED", "#ACTION_RESULT_ERROR", "#ACTION_RESULT_ERROR_CME", "#ACTION_RESULT_ERROR_BUSY" ]
  }, {
    "name" : "EXTRA_CME_CODE",
    "type" : "String",
    "comment" : "\n     * Extra for ACTION_RESULT intent that shows the extended result code of last issued action.\n     *\n     * <p>Value: <code>Integer</code> - error code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VENDOR_ID",
    "type" : "String",
    "comment" : "\n     * Extra for VENDOR_SPECIFIC_HEADSETCLIENT_EVENT intent that indicates vendor ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VENDOR_EVENT_CODE",
    "type" : "String",
    "comment" : "\n     * Extra for VENDOR_SPECIFIC_HEADSETCLIENT_EVENT intent that indicates vendor event code.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_VENDOR_EVENT_FULL_ARGS",
    "type" : "String",
    "comment" : "\n     * Extra for VENDOR_SPECIFIC_HEADSETCLIENT_EVENT intent that contains full vendor event\n     * including event code and full arguments.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_3WAY_CALLING",
    "type" : "String",
    "comment" : "\n     * AG feature: three way calling.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_VOICE_RECOGNITION",
    "type" : "String",
    "comment" : "\n     * AG feature: voice recognition.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_ATTACH_NUMBER_TO_VT",
    "type" : "String",
    "comment" : "\n     * AG feature: fetching phone number for voice tagging procedure.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_REJECT_CALL",
    "type" : "String",
    "comment" : "\n     * AG feature: ability to reject incoming call.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_ECC",
    "type" : "String",
    "comment" : "\n     * AG feature: enhanced call handling (terminate specific call, private consultation).\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_RESPONSE_AND_HOLD",
    "type" : "String",
    "comment" : "\n     * AG feature: response and hold.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_ACCEPT_HELD_OR_WAITING_CALL",
    "type" : "String",
    "comment" : "\n     * AG call handling feature: accept held or waiting call in three way calling scenarios.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_RELEASE_HELD_OR_WAITING_CALL",
    "type" : "String",
    "comment" : "\n     * AG call handling feature: release held or waiting call in three way calling scenarios.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_RELEASE_AND_ACCEPT",
    "type" : "String",
    "comment" : "\n     * AG call handling feature: release active call and accept held or waiting call in three way\n     * calling scenarios.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_MERGE",
    "type" : "String",
    "comment" : "\n     * AG call handling feature: merge two calls, held and active - multi party conference mode.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_AG_FEATURE_MERGE_AND_DETACH",
    "type" : "String",
    "comment" : "\n     * AG call handling feature: merge calls and disconnect from multi party conversation leaving\n     * peers connected to each other. Note that this feature needs to be supported by mobile network\n     * operator as it requires connection and billing transfer.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_OK",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_NO_CARRIER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_BUSY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_NO_ANSWER",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_DELAYED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_BLACKLISTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ACTION_RESULT_ERROR_CME",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_PHONE_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NO_CONNECTION_TO_PHONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_OPERATION_NOT_ALLOWED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_OPERATION_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_PHSIM_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_PHFSIM_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_PHFSIM_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_NOT_INSERTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_BUSY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_WRONG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_INCORRECT_PASSWORD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_PIN2_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIM_PUK2_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_MEMORY_FULL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_INVALID_INDEX",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NOT_FOUND",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_MEMORY_FAILURE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_TEXT_STRING_TOO_LONG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_INVALID_CHARACTER_IN_TEXT_STRING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_DIAL_STRING_TOO_LONG",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_INVALID_CHARACTER_IN_DIAL_STRING",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NO_NETWORK_SERVICE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NETWORK_TIMEOUT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_EMERGENCY_SERVICE_ONLY",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NO_SIMULTANEOUS_VOIP_CS_CALLS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NOT_SUPPORTED_FOR_VOIP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SIP_RESPONSE_CODE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NETWORK_PERSONALIZATION_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NETWORK_PERSONALIZATION_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NETWORK_SUBSET_PERSONALIZATION_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_NETWORK_SUBSET_PERSONALIZATION_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SERVICE_PROVIDER_PERSONALIZATION_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_SERVICE_PROVIDER_PERSONALIZATION_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_CORPORATE_PERSONALIZATION_PIN_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_CORPORATE_PERSONALIZATION_PUK_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_HIDDEN_KEY_REQUIRED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_EAP_NOT_SUPPORTED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CME_INCORRECT_PARAMETERS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CALL_ACCEPT_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CALL_ACCEPT_HOLD",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "CALL_ACCEPT_TERMINATE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothHeadsetClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_NETWORK_SERVICE_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in network service state of an HFP Client device\n     *\n     * <p>This intent will have 2 extras:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     *   <li>{@link EXTRA_NETWORK_SERVICE_STATE} - A {@link NetworkServiceState} object.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "EXTRA_NETWORK_SERVICE_STATE", "NetworkServiceState" ]
  }, {
    "name" : "EXTRA_NETWORK_SERVICE_STATE",
    "type" : "String",
    "comment" : "\n     * Extra for the network service state changed intent.\n     *\n     * <p>This extra represents the current network service state of a connected Bluetooth device.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "\n     * Close the connection to the backing service. Other public functions of BluetoothHeadsetClient\n     * will return default error results once close() has been called. Multiple invocations of\n     * close() are ok.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothHeadsetClient getService()",
    "returnType" : "IBluetoothHeadsetClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean connect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Connects to remote device.\n     *\n     * <p>Currently, the system supports only 1 connection. So, in case of the second connection,\n     * this implementation will disconnect already connected device automatically and will process\n     * the new one.\n     *\n     * @param device a remote device we want connect to\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CONNECTION_STATE_CHANGED} intent.\n     * @hide\n     ",
    "links" : [ "#ACTION_CONNECTION_STATE_CHANGED" ]
  }, {
    "name" : "public boolean disconnect(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Disconnects remote device\n     *\n     * @param device a remote device we want disconnect\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CONNECTION_STATE_CHANGED} intent.\n     * @hide\n     ",
    "links" : [ "#ACTION_CONNECTION_STATE_CHANGED" ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setPriority(BluetoothDevice device, int priority)",
    "returnType" : "boolean",
    "comment" : "\n     * Set priority of the profile\n     *\n     * <p>The device should already be paired. Priority can be one of {@link #PRIORITY_ON} or {@link\n     * #PRIORITY_OFF}\n     *\n     * @param device Paired bluetooth device\n     * @return true if priority is set, false on error\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF" ]
  }, {
    "name" : "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getPriority(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the priority of the profile.\n     *\n     * <p>The priority can be any of: {@link #PRIORITY_OFF}, {@link #PRIORITY_ON}, {@link\n     * #PRIORITY_UNDEFINED}\n     *\n     * @param device Bluetooth device\n     * @return priority of the device\n     * @hide\n     ",
    "links" : [ "#PRIORITY_ON", "#PRIORITY_OFF", "#PRIORITY_UNDEFINED" ]
  }, {
    "name" : "public int getConnectionPolicy(@NonNull BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public boolean startVoiceRecognition(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Starts voice recognition.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_AG_EVENT} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_VOICE_RECOGNITION}. This method invocation will fail silently when\n     *     feature is not supported.\n     * @hide\n     ",
    "links" : [ "#EXTRA_AG_FEATURE_VOICE_RECOGNITION", "#ACTION_AG_EVENT" ]
  }, {
    "name" : "public boolean sendVendorAtCommand(BluetoothDevice device, int vendorId, String atCommand)",
    "returnType" : "boolean",
    "comment" : "\n     * Send vendor specific AT command.\n     *\n     * @param device remote device\n     * @param vendorId vendor number by Bluetooth SIG\n     * @param atCommand command to be sent. It start with + prefix and only one command at one time.\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean stopVoiceRecognition(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Stops voice recognition.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_AG_EVENT} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_VOICE_RECOGNITION}. This method invocation will fail silently when\n     *     feature is not supported.\n     * @hide\n     ",
    "links" : [ "#EXTRA_AG_FEATURE_VOICE_RECOGNITION", "#ACTION_AG_EVENT" ]
  }, {
    "name" : "public List<BluetoothHeadsetClientCall> getCurrentCalls(BluetoothDevice device)",
    "returnType" : "List<BluetoothHeadsetClientCall>",
    "comment" : "\n     * Returns list of all calls in any state.\n     *\n     * @param device remote device\n     * @return list of calls; empty list if none call exists\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle getCurrentAgEvents(BluetoothDevice device)",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns list of current values of AG indicators.\n     *\n     * @param device remote device\n     * @return bundle of AG indicators; null if device is not in CONNECTED state\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean acceptCall(BluetoothDevice device, int flag)",
    "returnType" : "boolean",
    "comment" : "\n     * Accepts a call\n     *\n     * @param device remote device\n     * @param flag action policy while accepting a call. Possible values {@link #CALL_ACCEPT_NONE},\n     *     {@link #CALL_ACCEPT_HOLD}, {@link #CALL_ACCEPT_TERMINATE}\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     * @hide\n     ",
    "links" : [ "#CALL_ACCEPT_NONE", "#CALL_ACCEPT_TERMINATE", "#CALL_ACCEPT_HOLD", "#ACTION_CALL_CHANGED" ]
  }, {
    "name" : "public boolean holdCall(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Holds a call.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     * @hide\n     ",
    "links" : [ "#ACTION_CALL_CHANGED" ]
  }, {
    "name" : "public boolean rejectCall(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Rejects a call.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_REJECT_CALL}. This method invocation will fail silently when feature is\n     *     not supported.\n     * @hide\n     ",
    "links" : [ "#EXTRA_AG_FEATURE_REJECT_CALL", "#ACTION_CALL_CHANGED" ]
  }, {
    "name" : "public boolean terminateCall(BluetoothDevice device, BluetoothHeadsetClientCall call)",
    "returnType" : "boolean",
    "comment" : "\n     * Terminates a specified call.\n     *\n     * <p>Works only when Extended Call Control is supported by Audio Gateway.\n     *\n     * @param device remote device\n     * @param call Handle of call obtained in {@link #dial(BluetoothDevice, String)} or obtained via\n     *     {@link #ACTION_CALL_CHANGED}. {@code call} may be null in which case we will hangup all\n     *     active calls.\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_ECC}. This method invocation will fail silently when feature is not\n     *     supported.\n     * @hide\n     ",
    "links" : [ "#dial(BluetoothDevice", "#ACTION_CALL_CHANGED", "#EXTRA_AG_FEATURE_ECC" ]
  }, {
    "name" : "public boolean enterPrivateMode(BluetoothDevice device, int index)",
    "returnType" : "boolean",
    "comment" : "\n     * Enters private mode with a specified call.\n     *\n     * <p>Works only when Extended Call Control is supported by Audio Gateway.\n     *\n     * @param device remote device\n     * @param index index of the call to connect in private mode\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_ECC}. This method invocation will fail silently when feature is not\n     *     supported.\n     * @hide\n     ",
    "links" : [ "#ACTION_CALL_CHANGED", "#EXTRA_AG_FEATURE_ECC" ]
  }, {
    "name" : "public boolean explicitCallTransfer(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Performs explicit call transfer.\n     *\n     * <p>That means connect other calls and disconnect.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_CALL_CHANGED} intent.\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_MERGE_AND_DETACH}. This method invocation will fail silently when\n     *     feature is not supported.\n     * @hide\n     ",
    "links" : [ "#EXTRA_AG_FEATURE_MERGE_AND_DETACH", "#ACTION_CALL_CHANGED" ]
  }, {
    "name" : "public BluetoothHeadsetClientCall dial(BluetoothDevice device, String number)",
    "returnType" : "BluetoothHeadsetClientCall",
    "comment" : "\n     * Places a call with specified number.\n     *\n     * @param device remote device\n     * @param number valid phone number\n     * @return <code>{@link BluetoothHeadsetClientCall} call</code> if command has been issued\n     *     successfully; <code>{@code null}</code> otherwise; upon completion HFP sends {@link\n     *     #ACTION_CALL_CHANGED} intent in case of success; {@link #ACTION_RESULT} is sent\n     *     otherwise;\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothHeadsetClientCall", "#ACTION_CALL_CHANGED", "#ACTION_RESULT" ]
  }, {
    "name" : "public boolean sendDTMF(BluetoothDevice device, byte code)",
    "returnType" : "boolean",
    "comment" : "\n     * Sends DTMF code.\n     *\n     * <p>Possible code values : 0,1,2,3,4,5,6,7,8,9,A,B,C,D,*,#\n     *\n     * @param device remote device\n     * @param code ASCII code\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_RESULT} intent;\n     * @hide\n     ",
    "links" : [ "#ACTION_RESULT" ]
  }, {
    "name" : "public boolean getLastVoiceTagNumber(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Get a number corresponding to last voice tag recorded on AG.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_LAST_VTAG} or {@link #ACTION_RESULT}\n     *     intent;\n     *     <p>Feature required for successful execution is being reported by: {@link\n     *     #EXTRA_AG_FEATURE_ATTACH_NUMBER_TO_VT}. This method invocation will fail silently when\n     *     feature is not supported.\n     * @hide\n     ",
    "links" : [ "#EXTRA_AG_FEATURE_ATTACH_NUMBER_TO_VT", "#ACTION_LAST_VTAG", "#ACTION_RESULT" ]
  }, {
    "name" : "public int getAudioState(BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Returns current audio state of Audio Gateway.\n     *\n     * <p>Note: This is an internal function and shouldn't be exposed\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAudioRouteAllowed(BluetoothDevice device, boolean allowed)",
    "returnType" : "void",
    "comment" : "\n     * Sets whether audio routing is allowed.\n     *\n     * @param device remote device\n     * @param allowed if routing is allowed to the device Note: This is an internal function and\n     *     shouldn't be exposed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAudioRouteAllowed(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether audio routing is allowed.\n     *\n     * @param device remote device\n     * @return whether the command succeeded Note: This is an internal function and shouldn't be\n     *     exposed\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean connectAudio(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Initiates a connection of audio channel.\n     *\n     * <p>It setup SCO channel with remote connected Handsfree AG device.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_AUDIO_STATE_CHANGED} intent;\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED" ]
  }, {
    "name" : "public boolean disconnectAudio(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "\n     * Disconnects audio channel.\n     *\n     * <p>It tears down the SCO channel from remote AG device.\n     *\n     * @param device remote device\n     * @return <code>true</code> if command has been issued successfully; <code>false</code>\n     *     otherwise; upon completion HFP sends {@link #ACTION_AUDIO_STATE_CHANGED} intent;\n     * @hide\n     ",
    "links" : [ "#ACTION_AUDIO_STATE_CHANGED" ]
  }, {
    "name" : "public Bundle getCurrentAgFeatures(BluetoothDevice device)",
    "returnType" : "Bundle",
    "comment" : "\n     * Get Audio Gateway features\n     *\n     * @param device remote device\n     * @return bundle of AG features; null if no service or AG not connected\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public NetworkServiceState getNetworkServiceState(@NonNull BluetoothDevice device)",
    "returnType" : "NetworkServiceState",
    "comment" : "\n     * Get the network service state for a device\n     *\n     * @param device The {@link BluetoothDevice} you want the network service state for\n     * @return A {@link NetworkServiceState} representing the network service state of the device,\n     *     or null if the device is not connected\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice", "NetworkServiceState" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothHeadsetClient getService()", "public BluetoothAdapter getAdapter()", "protected void finalize()", "public boolean connect(BluetoothDevice device)", "public boolean disconnect(BluetoothDevice device)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@NonNull BluetoothDevice device)", "public boolean setPriority(BluetoothDevice device, int priority)", "public boolean setConnectionPolicy(@NonNull BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getPriority(BluetoothDevice device)", "public int getConnectionPolicy(@NonNull BluetoothDevice device)", "public boolean startVoiceRecognition(BluetoothDevice device)", "public boolean sendVendorAtCommand(BluetoothDevice device, int vendorId, String atCommand)", "public boolean stopVoiceRecognition(BluetoothDevice device)", "public List<BluetoothHeadsetClientCall> getCurrentCalls(BluetoothDevice device)", "public Bundle getCurrentAgEvents(BluetoothDevice device)", "public boolean acceptCall(BluetoothDevice device, int flag)", "public boolean holdCall(BluetoothDevice device)", "public boolean rejectCall(BluetoothDevice device)", "public boolean terminateCall(BluetoothDevice device, BluetoothHeadsetClientCall call)", "public boolean enterPrivateMode(BluetoothDevice device, int index)", "public boolean explicitCallTransfer(BluetoothDevice device)", "public BluetoothHeadsetClientCall dial(BluetoothDevice device, String number)", "public boolean sendDTMF(BluetoothDevice device, byte code)", "public boolean getLastVoiceTagNumber(BluetoothDevice device)", "public int getAudioState(BluetoothDevice device)", "public void setAudioRouteAllowed(BluetoothDevice device, boolean allowed)", "public boolean getAudioRouteAllowed(BluetoothDevice device)", "public boolean connectAudio(BluetoothDevice device)", "public boolean disconnectAudio(BluetoothDevice device)", "public Bundle getCurrentAgFeatures(BluetoothDevice device)", "public NetworkServiceState getNetworkServiceState(@NonNull BluetoothDevice device)", "private boolean isEnabled()", "private static boolean isValidDevice(BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "ACTION_CONNECTION_STATE_CHANGED", "ACTION_AUDIO_STATE_CHANGED", "ACTION_AG_EVENT", "ACTION_CALL_CHANGED", "ACTION_RESULT", "ACTION_VENDOR_SPECIFIC_HEADSETCLIENT_EVENT", "ACTION_LAST_VTAG", "STATE_AUDIO_DISCONNECTED", "STATE_AUDIO_CONNECTING", "STATE_AUDIO_CONNECTED", "EXTRA_AUDIO_WBS", "EXTRA_NETWORK_STATUS", "EXTRA_NETWORK_SIGNAL_STRENGTH", "EXTRA_NETWORK_ROAMING", "EXTRA_BATTERY_LEVEL", "EXTRA_OPERATOR_NAME", "EXTRA_VOICE_RECOGNITION", "EXTRA_IN_BAND_RING", "EXTRA_SUBSCRIBER_INFO", "EXTRA_CALL", "EXTRA_NUMBER", "EXTRA_RESULT_CODE", "EXTRA_CME_CODE", "EXTRA_VENDOR_ID", "EXTRA_VENDOR_EVENT_CODE", "EXTRA_VENDOR_EVENT_FULL_ARGS", "EXTRA_AG_FEATURE_3WAY_CALLING", "EXTRA_AG_FEATURE_VOICE_RECOGNITION", "EXTRA_AG_FEATURE_ATTACH_NUMBER_TO_VT", "EXTRA_AG_FEATURE_REJECT_CALL", "EXTRA_AG_FEATURE_ECC", "EXTRA_AG_FEATURE_RESPONSE_AND_HOLD", "EXTRA_AG_FEATURE_ACCEPT_HELD_OR_WAITING_CALL", "EXTRA_AG_FEATURE_RELEASE_HELD_OR_WAITING_CALL", "EXTRA_AG_FEATURE_RELEASE_AND_ACCEPT", "EXTRA_AG_FEATURE_MERGE", "EXTRA_AG_FEATURE_MERGE_AND_DETACH", "ACTION_RESULT_OK", "ACTION_RESULT_ERROR", "ACTION_RESULT_ERROR_NO_CARRIER", "ACTION_RESULT_ERROR_BUSY", "ACTION_RESULT_ERROR_NO_ANSWER", "ACTION_RESULT_ERROR_DELAYED", "ACTION_RESULT_ERROR_BLACKLISTED", "ACTION_RESULT_ERROR_CME", "CME_PHONE_FAILURE", "CME_NO_CONNECTION_TO_PHONE", "CME_OPERATION_NOT_ALLOWED", "CME_OPERATION_NOT_SUPPORTED", "CME_PHSIM_PIN_REQUIRED", "CME_PHFSIM_PIN_REQUIRED", "CME_PHFSIM_PUK_REQUIRED", "CME_SIM_NOT_INSERTED", "CME_SIM_PIN_REQUIRED", "CME_SIM_PUK_REQUIRED", "CME_SIM_FAILURE", "CME_SIM_BUSY", "CME_SIM_WRONG", "CME_INCORRECT_PASSWORD", "CME_SIM_PIN2_REQUIRED", "CME_SIM_PUK2_REQUIRED", "CME_MEMORY_FULL", "CME_INVALID_INDEX", "CME_NOT_FOUND", "CME_MEMORY_FAILURE", "CME_TEXT_STRING_TOO_LONG", "CME_INVALID_CHARACTER_IN_TEXT_STRING", "CME_DIAL_STRING_TOO_LONG", "CME_INVALID_CHARACTER_IN_DIAL_STRING", "CME_NO_NETWORK_SERVICE", "CME_NETWORK_TIMEOUT", "CME_EMERGENCY_SERVICE_ONLY", "CME_NO_SIMULTANEOUS_VOIP_CS_CALLS", "CME_NOT_SUPPORTED_FOR_VOIP", "CME_SIP_RESPONSE_CODE", "CME_NETWORK_PERSONALIZATION_PIN_REQUIRED", "CME_NETWORK_PERSONALIZATION_PUK_REQUIRED", "CME_NETWORK_SUBSET_PERSONALIZATION_PIN_REQUIRED", "CME_NETWORK_SUBSET_PERSONALIZATION_PUK_REQUIRED", "CME_SERVICE_PROVIDER_PERSONALIZATION_PIN_REQUIRED", "CME_SERVICE_PROVIDER_PERSONALIZATION_PUK_REQUIRED", "CME_CORPORATE_PERSONALIZATION_PIN_REQUIRED", "CME_CORPORATE_PERSONALIZATION_PUK_REQUIRED", "CME_HIDDEN_KEY_REQUIRED", "CME_EAP_NOT_SUPPORTED", "CME_INCORRECT_PARAMETERS", "CALL_ACCEPT_NONE", "CALL_ACCEPT_HOLD", "CALL_ACCEPT_TERMINATE", "mAdapter", "mAttributionSource", "mService", "ACTION_NETWORK_SERVICE_STATE_CHANGED", "EXTRA_NETWORK_SERVICE_STATE" ]
}