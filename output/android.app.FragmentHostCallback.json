{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/app/FragmentHostCallback.java",
  "packageName" : "android.app",
  "className" : "FragmentHostCallback",
  "comment" : "\n * Integration points with the Fragment host.\n * <p>\n * Fragments may be hosted by any object; such as an {@link Activity}. In order to\n * host fragments, implement {@link FragmentHostCallback}, overriding the methods\n * applicable to the host.\n *\n * @deprecated Use the <a href=\"{@docRoot}tools/extras/support-library.html\">Support Library</a>\n *      {@link androidx.fragment.app.FragmentHostCallback}\n ",
  "links" : [ "androidx.fragment.app.FragmentHostCallback", "android.app.FragmentHostCallback", "android.app.Activity" ],
  "variables" : [ {
    "name" : "mActivity",
    "type" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWindowAnimations",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFragmentManager",
    "type" : "FragmentManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAllLoaderManagers",
    "type" : "ArrayMap<String, LoaderManager>",
    "comment" : " The loader managers for individual fragments [i.e. Fragment#getLoaderManager()] ",
    "links" : [ ]
  }, {
    "name" : "mRetainLoaders",
    "type" : "boolean",
    "comment" : " Whether or not fragment loaders should retain their state ",
    "links" : [ ]
  }, {
    "name" : "mLoaderManager",
    "type" : "LoaderManagerImpl",
    "comment" : " The loader manager for the fragment host [i.e. Activity#getLoaderManager()] ",
    "links" : [ ]
  }, {
    "name" : "mCheckedForLoaderManager",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLoadersStarted",
    "type" : "boolean",
    "comment" : " Whether or not the fragment host loader manager was started ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static Handler chooseHandler(Context context, Handler handler)",
    "returnType" : "Handler",
    "comment" : "\n     * Used internally in {@link #FragmentHostCallback(Context, Handler, int)} to choose\n     * the Activity's handler or the provided handler.\n     ",
    "links" : [ "#FragmentHostCallback(Context" ]
  }, {
    "name" : "public void onDump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "\n     * Print internal state into the given stream.\n     *\n     * @param prefix Desired prefix to prepend at each line of output.\n     * @param fd The raw file descriptor that the dump is being sent to.\n     * @param writer The PrintWriter to which you should dump your state. This will be closed\n     *                  for you after you return.\n     * @param args additional arguments to the dump request.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean onShouldSaveFragmentState(Fragment fragment)",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the fragment's state needs to be saved.\n     ",
    "links" : [ ]
  }, {
    "name" : "public LayoutInflater onGetLayoutInflater()",
    "returnType" : "LayoutInflater",
    "comment" : "\n     * Return a {@link LayoutInflater}.\n     * See {@link Activity#getLayoutInflater()}.\n     ",
    "links" : [ "android.app.Activity#getLayoutInflater()", "android.view.LayoutInflater" ]
  }, {
    "name" : "public boolean onUseFragmentManagerInflaterFactory()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if the FragmentManager's LayoutInflaterFactory should be used.\n     ",
    "links" : [ ]
  }, {
    "name" : "public abstract E onGetHost()",
    "returnType" : "E",
    "comment" : "\n     * Return the object that's currently hosting the fragment. If a {@link Fragment}\n     * is hosted by a {@link Activity}, the object returned here should be the same\n     * object returned from {@link Fragment#getActivity()}.\n     ",
    "links" : [ "android.app.Fragment", "android.app.Fragment#getActivity()", "android.app.Activity" ]
  }, {
    "name" : "public void onInvalidateOptionsMenu()",
    "returnType" : "void",
    "comment" : "\n     * Invalidates the activity's options menu.\n     * See {@link Activity#invalidateOptionsMenu()}\n     ",
    "links" : [ "android.app.Activity#invalidateOptionsMenu()" ]
  }, {
    "name" : "public void onStartActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options)",
    "returnType" : "void",
    "comment" : "\n     * Starts a new {@link Activity} from the given fragment.\n     * See {@link Activity#startActivityForResult(Intent, int)}.\n     ",
    "links" : [ "android.app.Activity#startActivityForResult(Intent", "android.app.Activity" ]
  }, {
    "name" : "public void onStartActivityAsUserFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options, UserHandle userHandle)",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     * Starts a new {@link Activity} from the given fragment.\n     * See {@link Activity#startActivityForResult(Intent, int)}.\n     ",
    "links" : [ "android.app.Activity#startActivityForResult(Intent", "android.app.Activity" ]
  }, {
    "name" : "public void onStartIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException",
    "returnType" : "void",
    "comment" : "\n     * Starts a new {@link IntentSender} from the given fragment.\n     * See {@link Activity#startIntentSender(IntentSender, Intent, int, int, int, Bundle)}.\n     ",
    "links" : [ "android.content.IntentSender", "android.app.Activity#startIntentSender(IntentSender" ]
  }, {
    "name" : "public void onRequestPermissionsFromFragment(@NonNull Fragment fragment, @NonNull String[] permissions, int requestCode)",
    "returnType" : "void",
    "comment" : "\n     * Requests permissions from the given fragment.\n     * See {@link Activity#requestPermissions(String[], int)}\n     ",
    "links" : [ "android.app.Activity#requestPermissions(String" ]
  }, {
    "name" : "public boolean onHasWindowAnimations()",
    "returnType" : "boolean",
    "comment" : "\n     * Return {@code true} if there are window animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int onGetWindowAnimations()",
    "returnType" : "int",
    "comment" : "\n     * Return the window animations.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onAttachFragment(Fragment fragment)",
    "returnType" : "void",
    "comment" : "\n     * Called when a {@link Fragment} is being attached to this host, immediately\n     * after the call to its {@link Fragment#onAttach(Context)} method and before\n     * {@link Fragment#onCreate(Bundle)}.\n     ",
    "links" : [ "android.app.Fragment", "android.app.Fragment#onAttach(Context)", "android.app.Fragment#onCreate(Bundle)" ]
  }, {
    "name" : "public T onFindViewById(int id)",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean onHasView()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " boolean getRetainLoaders()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Activity getActivity()",
    "returnType" : "Activity",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Context getContext()",
    "returnType" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " Handler getHandler()",
    "returnType" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " FragmentManagerImpl getFragmentManagerImpl()",
    "returnType" : "FragmentManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LoaderManagerImpl getLoaderManagerImpl()",
    "returnType" : "LoaderManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void inactivateFragment(String who)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doLoaderStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doLoaderStop(boolean retain)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doLoaderRetain()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void doLoaderDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void reportLoaderStart()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " LoaderManagerImpl getLoaderManager(String who, boolean started, boolean create)",
    "returnType" : "LoaderManagerImpl",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " ArrayMap<String, LoaderManager> retainLoaderNonConfig()",
    "returnType" : "ArrayMap<String, LoaderManager>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void restoreLoaderNonConfig(ArrayMap<String, LoaderManager> loaderManagers)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " void dumpLoaders(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static Handler chooseHandler(Context context, Handler handler)", "public void onDump(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)", "public boolean onShouldSaveFragmentState(Fragment fragment)", "public LayoutInflater onGetLayoutInflater()", "public boolean onUseFragmentManagerInflaterFactory()", "public abstract E onGetHost()", "public void onInvalidateOptionsMenu()", "public void onStartActivityFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options)", "public void onStartActivityAsUserFromFragment(Fragment fragment, Intent intent, int requestCode, Bundle options, UserHandle userHandle)", "public void onStartIntentSenderFromFragment(Fragment fragment, IntentSender intent, int requestCode, @Nullable Intent fillInIntent, int flagsMask, int flagsValues, int extraFlags, Bundle options) throws IntentSender.SendIntentException", "public void onRequestPermissionsFromFragment(@NonNull Fragment fragment, @NonNull String[] permissions, int requestCode)", "public boolean onHasWindowAnimations()", "public int onGetWindowAnimations()", "public void onAttachFragment(Fragment fragment)", "public T onFindViewById(int id)", "public boolean onHasView()", " boolean getRetainLoaders()", " Activity getActivity()", " Context getContext()", " Handler getHandler()", " FragmentManagerImpl getFragmentManagerImpl()", " LoaderManagerImpl getLoaderManagerImpl()", " void inactivateFragment(String who)", " void doLoaderStart()", " void doLoaderStop(boolean retain)", " void doLoaderRetain()", " void doLoaderDestroy()", " void reportLoaderStart()", " LoaderManagerImpl getLoaderManager(String who, boolean started, boolean create)", " ArrayMap<String, LoaderManager> retainLoaderNonConfig()", " void restoreLoaderNonConfig(ArrayMap<String, LoaderManager> loaderManagers)", " void dumpLoaders(String prefix, FileDescriptor fd, PrintWriter writer, String[] args)" ],
  "variableNames" : [ "mActivity", "mContext", "mHandler", "mWindowAnimations", "mFragmentManager", "mAllLoaderManagers", "mRetainLoaders", "mLoaderManager", "mCheckedForLoaderManager", "mLoadersStarted" ]
}