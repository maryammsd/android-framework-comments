{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/provider/Browser.java",
  "packageName" : "android.provider",
  "className" : "Browser",
  "comment" : "",
  "variables" : [ {
    "name" : "LOGTAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "BOOKMARKS_URI",
    "type" : "Uri",
    "comment" : "\n     * A table containing both bookmarks and history items. The columns of the table are defined in\n     * {@link BookmarkColumns}.\n     * @removed\n     ",
    "links" : [ "BookmarkColumns" ]
  }, {
    "name" : "INITIAL_ZOOM_LEVEL",
    "type" : "String",
    "comment" : "\n     * The name of extra data when starting Browser with ACTION_VIEW or\n     * ACTION_SEARCH intent.\n     * <p>\n     * The value should be an integer between 0 and 1000. If not set or set to\n     * 0, the Browser will use default. If set to 100, the Browser will start\n     * with 100%.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_APPLICATION_ID",
    "type" : "String",
    "comment" : "\n     * The name of the extra data when starting the Browser from another\n     * application.\n     * <p>\n     * The value is a unique identification string that will be used to\n     * identify the calling application. The Browser will attempt to reuse the\n     * same window each time the application launches the Browser with the same\n     * identifier.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_HEADERS",
    "type" : "String",
    "comment" : "\n     * The name of the extra data in the VIEW intent. The data are key/value\n     * pairs in the format of Bundle. They will be sent in the HTTP request\n     * headers for the provided url. The keys can't be the standard HTTP headers\n     * as they are set by the WebView. The url's schema must be http(s).\n     * <p>\n     ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION",
    "type" : "String[]",
    "comment" : " @removed if you change column order you must also change indices below ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_ID_INDEX",
    "type" : "int",
    "comment" : " @removed these indices dependent on HISTORY_PROJECTION ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_URL_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_VISITS_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_DATE_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_BOOKMARK_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_TITLE_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_FAVICON_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_THUMBNAIL_INDEX",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "HISTORY_PROJECTION_TOUCH_ICON_INDEX",
    "type" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "TRUNCATE_HISTORY_PROJECTION",
    "type" : "String[]",
    "comment" : " @removed columns needed to determine whether to truncate history @removed ",
    "links" : [ ]
  }, {
    "name" : "TRUNCATE_HISTORY_PROJECTION_ID_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "TRUNCATE_N_OLDEST",
    "type" : "int",
    "comment" : " @removed truncate this many history items at a time ",
    "links" : [ ]
  }, {
    "name" : "SEARCHES_URI",
    "type" : "Uri",
    "comment" : "\n     * A table containing a log of browser searches. The columns of the table are defined in\n     * {@link SearchColumns}.\n     * @removed\n     ",
    "links" : [ "SearchColumns" ]
  }, {
    "name" : "SEARCHES_PROJECTION",
    "type" : "String[]",
    "comment" : "\n     * A projection of {@link #SEARCHES_URI} that contains {@link SearchColumns#_ID},\n     * {@link SearchColumns#SEARCH}, and {@link SearchColumns#DATE}.\n     * @removed\n     ",
    "links" : [ "#SEARCHES_URI", "#_ID", "#SEARCH", "#DATE" ]
  }, {
    "name" : "SEARCHES_PROJECTION_SEARCH_INDEX",
    "type" : "int",
    "comment" : " @removed these indices dependent on SEARCHES_PROJECTION ",
    "links" : [ ]
  }, {
    "name" : "SEARCHES_PROJECTION_DATE_INDEX",
    "type" : "int",
    "comment" : " @removed ",
    "links" : [ ]
  }, {
    "name" : "MAX_HISTORY_COUNT",
    "type" : "int",
    "comment" : " Set a cap on the count of history items in the history/bookmark\n       table, to prevent db and layout operations from dragging to a\n       crawl.  Revisit this cap when/if db/layout performance\n       improvements are made.  Note: this does not affect bookmark\n       entries -- if the user wants more bookmarks than the cap, they\n       get them. ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_CREATE_NEW_TAB",
    "type" : "String",
    "comment" : "\n     * Boolean extra passed along with an Intent to a browser, specifying that\n     * a new tab be created.  Overrides EXTRA_APPLICATION_ID; if both are set,\n     * a new tab will be used, rather than using the same one.\n     ",
    "links" : [ ]
  }, {
    "name" : "EXTRA_SHARE_SCREENSHOT",
    "type" : "String",
    "comment" : "\n     * Stores a Bitmap extra in an {@link Intent} representing the screenshot of\n     * a page to share.  When receiving an {@link Intent#ACTION_SEND} from the\n     * Browser, use this to access the screenshot.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_SEND", "android.content.Intent" ]
  }, {
    "name" : "EXTRA_SHARE_FAVICON",
    "type" : "String",
    "comment" : "\n     * Stores a Bitmap extra in an {@link Intent} representing the favicon of a\n     * page to share.  When receiving an {@link Intent#ACTION_SEND} from the\n     * Browser, use this to access the favicon.\n     * @hide\n     ",
    "links" : [ "android.content.Intent#ACTION_SEND", "android.content.Intent" ]
  } ],
  "methods" : [ {
    "name" : "public static final void saveBookmark(Context c, String title, String url)",
    "returnType" : "void",
    "comment" : "\n     *  Open an activity to save a bookmark. Launch with a title\n     *  and/or a url, both of which can be edited by the user before saving.\n     *\n     *  @param c        Context used to launch the activity to add a bookmark.\n     *  @param title    Title for the bookmark. Can be null or empty string.\n     *  @param url      Url for the bookmark. Can be null or empty string.\n     *  @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void sendString(Context context, String string)",
    "returnType" : "void",
    "comment" : "\n     * Sends the given string using an Intent with {@link Intent#ACTION_SEND} and a mime type\n     * of text/plain. The string is put into {@link Intent#EXTRA_TEXT}.\n     *\n     * @param context the context used to start the activity\n     * @param string the string to send\n     ",
    "links" : [ "android.content.Intent#EXTRA_TEXT", "android.content.Intent#ACTION_SEND" ]
  }, {
    "name" : "public static final void sendString(Context c, String stringToSend, String chooserDialogTitle)",
    "returnType" : "void",
    "comment" : "\n     *  Find an application to handle the given string and, if found, invoke\n     *  it with the given string as a parameter.\n     *  @param c Context used to launch the new activity.\n     *  @param stringToSend The string to be handled.\n     *  @param chooserDialogTitle The title of the dialog that allows the user\n     *  to select between multiple applications that are all capable of handling\n     *  the string.\n     *  @hide pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final Cursor getAllBookmarks(ContentResolver cr) throws IllegalStateException",
    "returnType" : "Cursor",
    "comment" : "\n     *  Return a cursor pointing to a list of all the bookmarks. The cursor will have a single\n     *  column, {@link BookmarkColumns#URL}.\n     *\n     *  @param cr   The ContentResolver used to access the database.\n     *  @removed\n     ",
    "links" : [ "#URL" ]
  }, {
    "name" : "public static final Cursor getAllVisitedUrls(ContentResolver cr) throws IllegalStateException",
    "returnType" : "Cursor",
    "comment" : "\n     *  Return a cursor pointing to a list of all visited site urls. The cursor will\n     *  have a single column, {@link BookmarkColumns#URL}.\n     *\n     *  @param cr   The ContentResolver used to access the database.\n     *  @removed\n     ",
    "links" : [ "#URL" ]
  }, {
    "name" : "private static final void addOrUrlEquals(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final Cursor getVisitedLike(ContentResolver cr, String url)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static final void updateVisitedHistory(ContentResolver cr, String url, boolean real)",
    "returnType" : "void",
    "comment" : "\n     *  Update the visited history to acknowledge that a site has been\n     *  visited.\n     *\n     *  @param cr   The ContentResolver used to access the database.\n     *  @param url  The site being visited.\n     *  @param real If true, this is an actual visit, and should add to the\n     *              number of visits.  If false, the user entered it manually.\n     *  @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String[] getVisitedHistory(ContentResolver cr)",
    "returnType" : "String[]",
    "comment" : "\n     *  Returns all the URLs in the history.\n     *\n     *  @param cr   The ContentResolver used to access the database.\n     *  @hide pending API council approval\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void truncateHistory(ContentResolver cr)",
    "returnType" : "void",
    "comment" : "\n     * If there are more than MAX_HISTORY_COUNT non-bookmark history\n     * items in the bookmark/history table, delete TRUNCATE_N_OLDEST\n     * of them.  This is used to keep our history table to a\n     * reasonable size.  Note: it does not prune bookmarks.  If the\n     * user wants 1000 bookmarks, the user gets 1000 bookmarks.\n     *\n     * @param cr The ContentResolver used to access the database.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final boolean canClearHistory(ContentResolver cr)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether there is any history to clear.\n     *\n     * @param cr   The ContentResolver used to access the database.\n     * @return boolean  True if the history can be cleared.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void clearHistory(ContentResolver cr)",
    "returnType" : "void",
    "comment" : "\n     *  Delete all entries from the bookmarks/history table which are\n     *  not bookmarks.  Also set all visited bookmarks to unvisited.\n     *\n     *  @param cr   The ContentResolver used to access the database.\n     *  @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void deleteHistoryTimeFrame(ContentResolver cr, long begin, long end)",
    "returnType" : "void",
    "comment" : "\n     * Delete all history items from begin to end.\n     *\n     * @param cr    The ContentResolver used to access the database.\n     * @param begin First date to remove.  If -1, all dates before end.\n     *              Inclusive.\n     * @param end   Last date to remove. If -1, all dates after begin.\n     *              Non-inclusive.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void deleteFromHistory(ContentResolver cr, String url)",
    "returnType" : "void",
    "comment" : "\n     * Remove a specific url from the history database.\n     *\n     * @param cr    The ContentResolver used to access the database.\n     * @param url   url to remove.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void addSearchUrl(ContentResolver cr, String search)",
    "returnType" : "void",
    "comment" : "\n     * Add a search string to the searches database.\n     *\n     * @param cr   The ContentResolver used to access the database.\n     * @param search    The string to add to the searches database.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void clearSearches(ContentResolver cr)",
    "returnType" : "void",
    "comment" : "\n     * Remove all searches from the search database.\n     *\n     * @param cr   The ContentResolver used to access the database.\n     * @removed\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final void requestAllIcons(ContentResolver cr, String where, WebIconDatabase.IconListener listener)",
    "returnType" : "void",
    "comment" : "\n     *  Request all icons from the database.  This call must either be called\n     *  in the main thread or have had Looper.prepare() invoked in the calling\n     *  thread.\n     *\n     *  @param  cr The ContentResolver used to access the database.\n     *  @param  where Clause to be used to limit the query from the database.\n     *          Must be an allowable string to be passed into a database query.\n     *  @param  listener IconListener that gets the icons once they are\n     *          retrieved.\n     *  @removed\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "LOGTAG", "BOOKMARKS_URI", "INITIAL_ZOOM_LEVEL", "EXTRA_APPLICATION_ID", "EXTRA_HEADERS", "HISTORY_PROJECTION", "HISTORY_PROJECTION_ID_INDEX", "HISTORY_PROJECTION_URL_INDEX", "HISTORY_PROJECTION_VISITS_INDEX", "HISTORY_PROJECTION_DATE_INDEX", "HISTORY_PROJECTION_BOOKMARK_INDEX", "HISTORY_PROJECTION_TITLE_INDEX", "HISTORY_PROJECTION_FAVICON_INDEX", "HISTORY_PROJECTION_THUMBNAIL_INDEX", "HISTORY_PROJECTION_TOUCH_ICON_INDEX", "TRUNCATE_HISTORY_PROJECTION", "TRUNCATE_HISTORY_PROJECTION_ID_INDEX", "TRUNCATE_N_OLDEST", "SEARCHES_URI", "SEARCHES_PROJECTION", "SEARCHES_PROJECTION_SEARCH_INDEX", "SEARCHES_PROJECTION_DATE_INDEX", "MAX_HISTORY_COUNT", "EXTRA_CREATE_NEW_TAB", "EXTRA_SHARE_SCREENSHOT", "EXTRA_SHARE_FAVICON" ],
  "methodNames" : [ "public static final void saveBookmark(Context c, String title, String url)", "public static final void sendString(Context context, String string)", "public static final void sendString(Context c, String stringToSend, String chooserDialogTitle)", "public static final Cursor getAllBookmarks(ContentResolver cr) throws IllegalStateException", "public static final Cursor getAllVisitedUrls(ContentResolver cr) throws IllegalStateException", "private static final void addOrUrlEquals(StringBuilder sb)", "private static final Cursor getVisitedLike(ContentResolver cr, String url)", "public static final void updateVisitedHistory(ContentResolver cr, String url, boolean real)", "public static final String[] getVisitedHistory(ContentResolver cr)", "public static final void truncateHistory(ContentResolver cr)", "public static final boolean canClearHistory(ContentResolver cr)", "public static final void clearHistory(ContentResolver cr)", "public static final void deleteHistoryTimeFrame(ContentResolver cr, long begin, long end)", "public static final void deleteFromHistory(ContentResolver cr, String url)", "public static final void addSearchUrl(ContentResolver cr, String search)", "public static final void clearSearches(ContentResolver cr)", "public static final void requestAllIcons(ContentResolver cr, String where, WebIconDatabase.IconListener listener)" ]
}