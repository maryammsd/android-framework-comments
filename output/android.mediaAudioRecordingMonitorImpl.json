{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/media/AudioRecordingMonitorImpl.java",
  "packageName" : "android.media",
  "className" : "AudioRecordingMonitorImpl",
  "comment" : "\n * Implementation of AudioRecordingMonitor interface.\n * @hide\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sService",
    "type" : "IAudioService",
    "comment" : "lazy initialization, use getService()",
    "links" : [ ]
  }, {
    "name" : "mClient",
    "type" : "AudioRecordingMonitorClient",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MSG_RECORDING_CONFIG_CHANGE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordCallbackLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordCallbackList",
    "type" : "LinkedList<AudioRecordingCallbackInfo>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingCallbackHandlerThread",
    "type" : "HandlerThread",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingCallbackHandler",
    "type" : "Handler",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRecordingCallback",
    "type" : "IRecordingConfigDispatcher",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void registerAudioRecordingCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AudioManager.AudioRecordingCallback cb)",
    "returnType" : "void",
    "comment" : "\n     * Register a callback to be notified of audio capture changes via a\n     * {@link AudioManager.AudioRecordingCallback}. A callback is received when the capture path\n     * configuration changes (pre-processing, format, sampling rate...) or capture is\n     * silenced/unsilenced by the system.\n     * @param executor {@link Executor} to handle the callbacks.\n     * @param cb non-null callback to register\n     ",
    "links" : [ "AudioManager.AudioRecordingCallback", "Executor" ]
  }, {
    "name" : "public void unregisterAudioRecordingCallback(@NonNull AudioManager.AudioRecordingCallback cb)",
    "returnType" : "void",
    "comment" : "\n     * Unregister an audio recording callback previously registered with\n     * {@link #registerAudioRecordingCallback(Executor, AudioManager.AudioRecordingCallback)}.\n     * @param cb non-null callback to unregister\n     ",
    "links" : [ "#registerAudioRecordingCallback" ]
  }, {
    "name" : "public AudioRecordingConfiguration getActiveRecordingConfiguration()",
    "returnType" : "AudioRecordingConfiguration",
    "comment" : "\n     * Returns the current active audio recording for this audio recorder.\n     * @return a valid {@link AudioRecordingConfiguration} if this recorder is active\n     * or null otherwise.\n     * @see AudioRecordingConfiguration\n     ",
    "links" : [ "AudioRecordingConfiguration" ]
  }, {
    "name" : "private void beginRecordingCallbackHandling()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void endRecordingCallbackHandling()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " AudioRecordingConfiguration getMyConfig(List<AudioRecordingConfiguration> configs)",
    "returnType" : "AudioRecordingConfiguration",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static IAudioService getService()",
    "returnType" : "IAudioService",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "sService", "mClient", "MSG_RECORDING_CONFIG_CHANGE", "mRecordCallbackLock", "mRecordCallbackList", "mRecordingCallbackHandlerThread", "mRecordingCallbackHandler", "mRecordingCallback" ],
  "methodNames" : [ "public void registerAudioRecordingCallback(@NonNull @CallbackExecutor Executor executor, @NonNull AudioManager.AudioRecordingCallback cb)", "public void unregisterAudioRecordingCallback(@NonNull AudioManager.AudioRecordingCallback cb)", "public AudioRecordingConfiguration getActiveRecordingConfiguration()", "private void beginRecordingCallbackHandling()", "private void endRecordingCallbackHandling()", " AudioRecordingConfiguration getMyConfig(List<AudioRecordingConfiguration> configs)", "private static IAudioService getService()" ]
}