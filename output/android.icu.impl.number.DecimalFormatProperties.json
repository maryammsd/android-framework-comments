{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/DecimalFormatProperties.java",
  "packageName" : "android.icu.impl.number",
  "className" : "DecimalFormatProperties",
  "comment" : "\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT",
    "type" : "DecimalFormatProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : " Auto-generated. ",
    "links" : [ ]
  }, {
    "name" : "compactCustomData",
    "type" : "Map<String, Map<String, String>>",
    "comment" : " ICU4J-only",
    "links" : [ ]
  }, {
    "name" : "compactStyle",
    "type" : "CompactStyle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currency",
    "type" : "Currency",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencyPluralInfo",
    "type" : "CurrencyPluralInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencyUsage",
    "type" : "CurrencyUsage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decimalPatternMatchRequired",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "decimalSeparatorAlwaysShown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "exponentSignAlwaysShown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "currencyAsDecimal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "formatWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupingSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "groupingUsed",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "magnitudeMultiplier",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mathContext",
    "type" : "MathContext",
    "comment" : " ICU4J-only",
    "links" : [ ]
  }, {
    "name" : "maximumFractionDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maximumIntegerDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "maximumSignificantDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumExponentDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumFractionDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumGroupingDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumIntegerDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "minimumSignificantDigits",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "multiplier",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "negativePrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "negativePrefixPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "negativeSuffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "negativeSuffixPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "padPosition",
    "type" : "PadPosition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "padString",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseCaseSensitive",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseIntegerOnly",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseMode",
    "type" : "ParseMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseNoExponent",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "parseToBigDecimal",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "pluralRules",
    "type" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "positivePrefix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "positivePrefixPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "positiveSuffix",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "positiveSuffixPattern",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "roundingIncrement",
    "type" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "roundingMode",
    "type" : "RoundingMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "secondaryGroupingSize",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "signAlwaysShown",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private DecimalFormatProperties _clear()",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets all properties to their defaults (unset).\n     *\n     * <p>\n     * All integers default to -1 EXCEPT FOR MAGNITUDE MULTIPLIER which has a default of 0 (since\n     * negative numbers are important).\n     *\n     * <p>\n     * All booleans default to false.\n     *\n     * <p>\n     * All non-primitive types default to null.\n     *\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "private DecimalFormatProperties _copyFrom(DecimalFormatProperties other)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean _equals(DecimalFormatProperties other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean _equalsHelper(boolean mine, boolean theirs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean _equalsHelper(int mine, int theirs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean _equalsHelper(Object mine, Object theirs)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int _hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int _hashCodeHelper(boolean value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int _hashCodeHelper(int value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private int _hashCodeHelper(Object value)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties clear()",
    "returnType" : "DecimalFormatProperties",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties clone()",
    "returnType" : "DecimalFormatProperties",
    "comment" : " Creates and returns a shallow copy of the property bag. ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties copyFrom(DecimalFormatProperties other)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Shallow-copies the properties from the given property bag into this property bag.\n     *\n     * @param other\n     *            The property bag from which to copy and which will not be modified.\n     * @return The current property bag (the one modified by this operation), for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object other)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Map<String, Map<String, String>> getCompactCustomData()",
    "returnType" : "Map<String, Map<String, String>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CompactStyle getCompactStyle()",
    "returnType" : "CompactStyle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Currency getCurrency()",
    "returnType" : "Currency",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CurrencyPluralInfo getCurrencyPluralInfo()",
    "returnType" : "CurrencyPluralInfo",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public CurrencyUsage getCurrencyUsage()",
    "returnType" : "CurrencyUsage",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getDecimalPatternMatchRequired()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getDecimalSeparatorAlwaysShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getExponentSignAlwaysShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getCurrencyAsDecimal()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getFormatWidth()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getGroupingSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getGroupingUsed()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMagnitudeMultiplier()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public MathContext getMathContext()",
    "returnType" : "MathContext",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumFractionDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumIntegerDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaximumSignificantDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumExponentDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumFractionDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumGroupingDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumIntegerDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMinimumSignificantDigits()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal getMultiplier()",
    "returnType" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNegativePrefix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNegativePrefixPattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNegativeSuffix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getNegativeSuffixPattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PadPosition getPadPosition()",
    "returnType" : "PadPosition",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPadString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getParseCaseSensitive()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getParseIntegerOnly()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public ParseMode getParseMode()",
    "returnType" : "ParseMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getParseNoExponent()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getParseToBigDecimal()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public PluralRules getPluralRules()",
    "returnType" : "PluralRules",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPositivePrefix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPositivePrefixPattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPositiveSuffix()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String getPositiveSuffixPattern()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BigDecimal getRoundingIncrement()",
    "returnType" : "BigDecimal",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public RoundingMode getRoundingMode()",
    "returnType" : "RoundingMode",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getSecondaryGroupingSize()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean getSignAlwaysShown()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : " Custom serialization: re-create object from serialized properties. ",
    "links" : [ ]
  }, {
    "name" : " void readObjectImpl(ObjectInputStream ois) throws IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : " package-private ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setCompactCustomData(Map<String, Map<String, String>> compactCustomData)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Specifies custom data to be used instead of CLDR data when constructing a CompactDecimalFormat.\n     * The argument should be a map with the following structure:\n     *\n     * <pre>\n     * {\n     *   \"1000\": {\n     *     \"one\": \"0 thousand\",\n     *     \"other\": \"0 thousand\"\n     *   },\n     *   \"10000\": {\n     *     \"one\": \"00 thousand\",\n     *     \"other\": \"00 thousand\"\n     *   },\n     *   // ...\n     * }\n     * </pre>\n     *\n     * This API endpoint is used by the CLDR Survey Tool.\n     *\n     * @param compactCustomData\n     *            A map with the above structure.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setCompactStyle(CompactStyle compactStyle)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Use compact decimal formatting with the specified {@link CompactStyle}. CompactStyle.SHORT\n     * produces output like \"10K\" in locale <em>en-US</em>, whereas CompactStyle.LONG produces output\n     * like \"10 thousand\" in that locale.\n     *\n     * @param compactStyle\n     *            The style of prefixes/suffixes to append.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "android.icu.text.CompactDecimalFormat.CompactStyle" ]
  }, {
    "name" : "public DecimalFormatProperties setCurrency(Currency currency)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Use the specified currency to substitute currency placeholders ('¤') in the pattern string.\n     *\n     * @param currency\n     *            The currency.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setCurrencyPluralInfo(CurrencyPluralInfo currencyPluralInfo)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Use the specified {@link CurrencyPluralInfo} instance when formatting currency long names.\n     *\n     * @param currencyPluralInfo\n     *            The currency plural info object.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "android.icu.text.CurrencyPluralInfo" ]
  }, {
    "name" : "public DecimalFormatProperties setCurrencyUsage(CurrencyUsage currencyUsage)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Use the specified {@link CurrencyUsage} instance, which provides default rounding rules for the\n     * currency in two styles, CurrencyUsage.CASH and CurrencyUsage.STANDARD.\n     *\n     * <p>\n     * The CurrencyUsage specified here will not be used unless there is a currency placeholder in the\n     * pattern.\n     *\n     * @param currencyUsage\n     *            The currency usage. Defaults to CurrencyUsage.STANDARD.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "android.icu.util.Currency.CurrencyUsage" ]
  }, {
    "name" : "public DecimalFormatProperties setDecimalPatternMatchRequired(boolean decimalPatternMatchRequired)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * PARSING: Whether to require that the presence of decimal point matches the pattern. If a decimal\n     * point is not present, but the pattern contained a decimal point, parse will not succeed: null will\n     * be returned from <code>parse()</code>, and an error index will be set in the\n     * {@link ParsePosition}.\n     *\n     * @param decimalPatternMatchRequired\n     *            true to set an error if decimal is not present\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "java.text.ParsePosition" ]
  }, {
    "name" : "public DecimalFormatProperties setDecimalSeparatorAlwaysShown(boolean alwaysShowDecimal)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets whether to always show the decimal point, even if the number doesn't require one. For\n     * example, if always show decimal is true, the number 123 would be formatted as \"123.\" in locale\n     * <em>en-US</em>.\n     *\n     * @param alwaysShowDecimal\n     *            Whether to show the decimal point when it is optional.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setExponentSignAlwaysShown(boolean exponentSignAlwaysShown)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets whether to show the plus sign in the exponent part of numbers with a zero or positive\n     * exponent. For example, the number \"1200\" with the pattern \"0.0E0\" would be formatted as \"1.2E+3\"\n     * instead of \"1.2E3\" in <em>en-US</em>.\n     *\n     * @param exponentSignAlwaysShown\n     *            Whether to show the plus sign in positive exponents.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setCurrencyAsDecimal(boolean currencyAsDecimal)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets whether the currency symbol should replace the decimal separator.\n     *\n     * @param currencyAsDecimal\n     *              Whether the currency symbol should replace the decimal separator.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setFormatWidth(int paddingWidth)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum width of the string output by the formatting pipeline. For example, if padding is\n     * enabled and paddingWidth is set to 6, formatting the number \"3.14159\" with the pattern \"0.00\" will\n     * result in \"··3.14\" if '·' is your padding string.\n     *\n     * <p>\n     * If the number is longer than your padding width, the number will display as if no padding width\n     * had been specified, which may result in strings longer than the padding width.\n     *\n     * <p>\n     * Width is counted in UTF-16 code units.\n     *\n     * @param paddingWidth\n     *            The output width.\n     * @return The property bag, for chaining.\n     * @see #setPadPosition\n     * @see #setPadString\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setGroupingSize(int groupingSize)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the number of digits between grouping separators. For example, the <em>en-US</em> locale uses\n     * a grouping size of 3, so the number 1234567 would be formatted as \"1,234,567\". For locales whose\n     * grouping sizes vary with magnitude, see {@link #setSecondaryGroupingSize(int)}.\n     *\n     * @param groupingSize\n     *            The primary grouping size.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "#setSecondaryGroupingSize(int)" ]
  }, {
    "name" : "public DecimalFormatProperties setGroupingUsed(boolean groupingUsed)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets whether to enable grouping when formatting.\n     *\n     * @param groupingUsed\n     *            true to enable the display of grouping separators; false to disable.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMagnitudeMultiplier(int magnitudeMultiplier)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Multiply all numbers by this power of ten before formatting. Negative multipliers reduce the\n     * magnitude and make numbers smaller (closer to zero).\n     *\n     * @param magnitudeMultiplier\n     *            The number of powers of ten to scale.\n     * @return The property bag, for chaining.\n     * @see #setMultiplier\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMathContext(MathContext mathContext)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the {@link MathContext} to be used during math and rounding operations. A MathContext\n     * encapsulates a RoundingMode and the number of significant digits in the output.\n     *\n     * @param mathContext\n     *            The math context to use when rounding is required.\n     * @return The property bag, for chaining.\n     * @see MathContext\n     * @see #setRoundingMode\n     ",
    "links" : [ "java.math.MathContext" ]
  }, {
    "name" : "public DecimalFormatProperties setMaximumFractionDigits(int maximumFractionDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the maximum number of digits to display after the decimal point. If the number has fewer than\n     * this number of digits, the number will be rounded off using the rounding mode specified by\n     * {@link #setRoundingMode(RoundingMode)}. The pattern \"#00.0#\", for example, corresponds to 2\n     * maximum fraction digits, and the number 456.789 would be formatted as \"456.79\" in locale\n     * <em>en-US</em> with the default rounding mode. Note that the number 456.999 would be formatted as\n     * \"457.0\" given the same configurations.\n     *\n     * @param maximumFractionDigits\n     *            The maximum number of fraction digits to output.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "#setRoundingMode(RoundingMode)" ]
  }, {
    "name" : "public DecimalFormatProperties setMaximumIntegerDigits(int maximumIntegerDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the maximum number of digits to display before the decimal point. If the number has more than\n     * this number of digits, the extra digits will be truncated. For example, if maximum integer digits\n     * is 2, and you attempt to format the number 1970, you will get \"70\" in locale <em>en-US</em>. It is\n     * not possible to specify the maximum integer digits using a pattern string, except in the special\n     * case of a scientific format pattern.\n     *\n     * @param maximumIntegerDigits\n     *            The maximum number of integer digits to output.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMaximumSignificantDigits(int maximumSignificantDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the maximum number of significant digits to display. The number of significant digits is\n     * equal to the number of digits counted from the leftmost nonzero digit through the rightmost\n     * nonzero digit; for example, the number \"2010\" has 3 significant digits. If the number has more\n     * significant digits than specified here, the extra significant digits will be rounded off using the\n     * rounding mode specified by {@link #setRoundingMode(RoundingMode)}. For example, if maximum\n     * significant digits is 3, the number 1234.56 will be formatted as \"1230\" in locale <em>en-US</em>\n     * with the default rounding mode.\n     *\n     * <p>\n     * If both maximum significant digits and maximum integer/fraction digits are set at the same time,\n     * the behavior is undefined.\n     *\n     * <p>\n     * The number of significant digits can be specified in a pattern string using the '@' character. For\n     * example, the pattern \"@@#\" corresponds to a minimum of 2 and a maximum of 3 significant digits.\n     *\n     * @param maximumSignificantDigits\n     *            The maximum number of significant digits to display.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "#setRoundingMode(RoundingMode)" ]
  }, {
    "name" : "public DecimalFormatProperties setMinimumExponentDigits(int minimumExponentDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum number of digits to display in the exponent. For example, the number \"1200\" with\n     * the pattern \"0.0E00\", which has 2 exponent digits, would be formatted as \"1.2E03\" in\n     * <em>en-US</em>.\n     *\n     * @param minimumExponentDigits\n     *            The minimum number of digits to display in the exponent field.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMinimumFractionDigits(int minimumFractionDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum number of digits to display after the decimal point. If the number has fewer than\n     * this number of digits, the number will be padded with zeros. The pattern \"#00.0#\", for example,\n     * corresponds to 1 minimum fraction digit, and the number 456 would be formatted as \"456.0\" in\n     * locale <em>en-US</em>.\n     *\n     * @param minimumFractionDigits\n     *            The minimum number of fraction digits to output.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMinimumGroupingDigits(int minimumGroupingDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum number of digits required to be beyond the first grouping separator in order to\n     * enable grouping. For example, if the minimum grouping digits is 2, then 1234 would be formatted as\n     * \"1234\" but 12345 would be formatted as \"12,345\" in <em>en-US</em>. Note that 1234567 would still\n     * be formatted as \"1,234,567\", not \"1234,567\".\n     *\n     * @param minimumGroupingDigits\n     *            How many digits must appear before a grouping separator before enabling grouping.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMinimumIntegerDigits(int minimumIntegerDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum number of digits to display before the decimal point. If the number has fewer\n     * than this number of digits, the number will be padded with zeros. The pattern \"#00.0#\", for\n     * example, corresponds to 2 minimum integer digits, and the number 5.3 would be formatted as \"05.3\"\n     * in locale <em>en-US</em>.\n     *\n     * @param minimumIntegerDigits\n     *            The minimum number of integer digits to output.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setMinimumSignificantDigits(int minimumSignificantDigits)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the minimum number of significant digits to display. If, after rounding to the number of\n     * significant digits specified by {@link #setMaximumSignificantDigits}, the number of remaining\n     * significant digits is less than the minimum, the number will be padded with zeros. For example, if\n     * minimum significant digits is 3, the number 5.8 will be formatted as \"5.80\" in locale\n     * <em>en-US</em>. Note that minimum significant digits is relevant only when numbers have digits\n     * after the decimal point.\n     *\n     * <p>\n     * If both minimum significant digits and minimum integer/fraction digits are set at the same time,\n     * both values will be respected, and the one that results in the greater number of padding zeros\n     * will be used. For example, formatting the number 73 with 3 minimum significant digits and 2\n     * minimum fraction digits will produce \"73.00\".\n     *\n     * <p>\n     * The number of significant digits can be specified in a pattern string using the '@' character. For\n     * example, the pattern \"@@#\" corresponds to a minimum of 2 and a maximum of 3 significant digits.\n     *\n     * @param minimumSignificantDigits\n     *            The minimum number of significant digits to display.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "#setMaximumSignificantDigits" ]
  }, {
    "name" : "public DecimalFormatProperties setMultiplier(BigDecimal multiplier)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Multiply all numbers by this amount before formatting.\n     *\n     * @param multiplier\n     *            The amount to multiply by.\n     * @return The property bag, for chaining.\n     * @see #setMagnitudeMultiplier\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setNegativePrefix(String negativePrefix)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the prefix to prepend to negative numbers. The prefix will be interpreted literally. For\n     * example, if you set a negative prefix of <code>n</code>, then the number -123 will be formatted as\n     * \"n123\" in the locale <em>en-US</em>. Note that if the negative prefix is left unset, the locale's\n     * minus sign is used.\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param negativePrefix\n     *            The CharSequence to prepend to negative numbers.\n     * @return The property bag, for chaining.\n     * @see #setNegativePrefixPattern\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setNegativePrefixPattern(String negativePrefixPattern)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the prefix to prepend to negative numbers. Locale-specific symbols will be substituted into\n     * the string according to Unicode Technical Standard #35 (LDML).\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param negativePrefixPattern\n     *            The CharSequence to prepend to negative numbers after locale symbol substitutions take\n     *            place.\n     * @return The property bag, for chaining.\n     * @see #setNegativePrefix\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setNegativeSuffix(String negativeSuffix)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the suffix to append to negative numbers. The suffix will be interpreted literally. For\n     * example, if you set a suffix prefix of <code>n</code>, then the number -123 will be formatted as\n     * \"-123n\" in the locale <em>en-US</em>. Note that the minus sign is prepended by default unless\n     * otherwise specified in either the pattern string or in one of the {@link #setNegativePrefix}\n     * methods.\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param negativeSuffix\n     *            The CharSequence to append to negative numbers.\n     * @return The property bag, for chaining.\n     * @see #setNegativeSuffixPattern\n     ",
    "links" : [ "#setNegativePrefix", "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setNegativeSuffixPattern(String negativeSuffixPattern)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the suffix to append to negative numbers. Locale-specific symbols will be substituted into\n     * the string according to Unicode Technical Standard #35 (LDML).\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param negativeSuffixPattern\n     *            The CharSequence to append to negative numbers after locale symbol substitutions take\n     *            place.\n     * @return The property bag, for chaining.\n     * @see #setNegativeSuffix\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setPadPosition(PadPosition paddingLocation)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the location where the padding string is to be inserted to maintain the padding width: one of\n     * BEFORE_PREFIX, AFTER_PREFIX, BEFORE_SUFFIX, or AFTER_SUFFIX.\n     *\n     * <p>\n     * Must be used in conjunction with {@link #setFormatWidth}.\n     *\n     * @param paddingLocation\n     *            The output width.\n     * @return The property bag, for chaining.\n     * @see #setFormatWidth\n     ",
    "links" : [ "#setFormatWidth" ]
  }, {
    "name" : "public DecimalFormatProperties setPadString(String paddingString)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the string used for padding. The string should contain a single character or grapheme\n     * cluster.\n     *\n     * <p>\n     * Must be used in conjunction with {@link #setFormatWidth}.\n     *\n     * @param paddingString\n     *            The padding string. Defaults to an ASCII space (U+0020).\n     * @return The property bag, for chaining.\n     * @see #setFormatWidth\n     ",
    "links" : [ "#setFormatWidth" ]
  }, {
    "name" : "public DecimalFormatProperties setParseCaseSensitive(boolean parseCaseSensitive)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Whether to require cases to match when parsing strings; default is true. Case sensitivity applies\n     * to prefixes, suffixes, the exponent separator, the symbol \"NaN\", and the infinity symbol. Grouping\n     * separators, decimal separators, and padding are always case-sensitive. Currencies are always\n     * case-insensitive.\n     *\n     * <p>\n     * This setting is ignored in fast mode. In fast mode, strings are always compared in a\n     * case-sensitive way.\n     *\n     * @param parseCaseSensitive\n     *            true to be case-sensitive when parsing; false to allow any case.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setParseIntegerOnly(boolean parseIntegerOnly)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Whether to ignore the fractional part of numbers. For example, parses \"123.4\" to \"123\" instead of\n     * \"123.4\".\n     *\n     * @param parseIntegerOnly\n     *            true to parse integers only; false to parse integers with their fraction parts\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setParseMode(ParseMode parseMode)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Controls certain rules for how strict this parser is when reading strings. See\n     * {@link ParseMode#LENIENT} and {@link ParseMode#STRICT}.\n     *\n     * @param parseMode\n     *            Either {@link ParseMode#LENIENT} or {@link ParseMode#STRICT}.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ "#LENIENT", "#STRICT" ]
  }, {
    "name" : "public DecimalFormatProperties setParseNoExponent(boolean parseNoExponent)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Whether to ignore the exponential part of numbers. For example, parses \"123E4\" to \"123\" instead of\n     * \"1230000\".\n     *\n     * @param parseNoExponent\n     *            true to ignore exponents; false to parse them.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setParseToBigDecimal(boolean parseToBigDecimal)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Whether to always return a BigDecimal from parse methods. By default, a Long or a BigInteger are\n     * returned when possible.\n     *\n     * @param parseToBigDecimal\n     *            true to always return a BigDecimal; false to return a Long or a BigInteger when\n     *            possible.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setPluralRules(PluralRules pluralRules)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the PluralRules object to use instead of the default for the locale.\n     *\n     * @param pluralRules\n     *            The object to reference.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setPositivePrefix(String positivePrefix)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the prefix to prepend to positive numbers. The prefix will be interpreted literally. For\n     * example, if you set a positive prefix of <code>p</code>, then the number 123 will be formatted as\n     * \"p123\" in the locale <em>en-US</em>.\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param positivePrefix\n     *            The CharSequence to prepend to positive numbers.\n     * @return The property bag, for chaining.\n     * @see #setPositivePrefixPattern\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setPositivePrefixPattern(String positivePrefixPattern)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the prefix to prepend to positive numbers. Locale-specific symbols will be substituted into\n     * the string according to Unicode Technical Standard #35 (LDML).\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param positivePrefixPattern\n     *            The CharSequence to prepend to positive numbers after locale symbol substitutions take\n     *            place.\n     * @return The property bag, for chaining.\n     * @see #setPositivePrefix\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setPositiveSuffix(String positiveSuffix)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the suffix to append to positive numbers. The suffix will be interpreted literally. For\n     * example, if you set a positive suffix of <code>p</code>, then the number 123 will be formatted as\n     * \"123p\" in the locale <em>en-US</em>.\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param positiveSuffix\n     *            The CharSequence to append to positive numbers.\n     * @return The property bag, for chaining.\n     * @see #setPositiveSuffixPattern\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setPositiveSuffixPattern(String positiveSuffixPattern)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the suffix to append to positive numbers. Locale-specific symbols will be substituted into\n     * the string according to Unicode Technical Standard #35 (LDML).\n     *\n     * <p>\n     * For more information on prefixes and suffixes, see {@link MutablePatternModifier}.\n     *\n     * @param positiveSuffixPattern\n     *            The CharSequence to append to positive numbers after locale symbol substitutions take\n     *            place.\n     * @return The property bag, for chaining.\n     * @see #setPositiveSuffix\n     ",
    "links" : [ "android.icu.impl.number.MutablePatternModifier" ]
  }, {
    "name" : "public DecimalFormatProperties setRoundingIncrement(BigDecimal roundingIncrement)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the increment to which to round numbers. For example, with a rounding interval of 0.05, the\n     * number 11.17 would be formatted as \"11.15\" in locale <em>en-US</em> with the default rounding\n     * mode.\n     *\n     * <p>\n     * You can use either a rounding increment or significant digits, but not both at the same time.\n     *\n     * <p>\n     * The rounding increment can be specified in a pattern string. For example, the pattern \"#,##0.05\"\n     * corresponds to a rounding interval of 0.05 with 1 minimum integer digit and a grouping size of 3.\n     *\n     * @param roundingIncrement\n     *            The interval to which to round.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setRoundingMode(RoundingMode roundingMode)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the rounding mode, which determines under which conditions extra decimal places are rounded\n     * either up or down. See {@link RoundingMode} for details on the choices of rounding mode. The\n     * default if not set explicitly is {@link RoundingMode#HALF_EVEN}.\n     *\n     * <p>\n     * This setting is ignored if {@link #setMathContext} is used.\n     *\n     * @param roundingMode\n     *            The rounding mode to use when rounding is required.\n     * @return The property bag, for chaining.\n     * @see RoundingMode\n     * @see #setMathContext\n     ",
    "links" : [ "#setMathContext", "java.math.RoundingMode#HALF_EVEN", "java.math.RoundingMode" ]
  }, {
    "name" : "public DecimalFormatProperties setSecondaryGroupingSize(int secondaryGroupingSize)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets the number of digits between grouping separators higher than the least-significant grouping\n     * separator. For example, the locale <em>hi</em> uses a primary grouping size of 3 and a secondary\n     * grouping size of 2, so the number 1234567 would be formatted as \"12,34,567\".\n     *\n     * <p>\n     * The two levels of grouping separators can be specified in the pattern string. For example, the\n     * <em>hi</em> locale's default decimal format pattern is \"#,##,##0.###\".\n     *\n     * @param secondaryGroupingSize\n     *            The secondary grouping size.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public DecimalFormatProperties setSignAlwaysShown(boolean signAlwaysShown)",
    "returnType" : "DecimalFormatProperties",
    "comment" : "\n     * Sets whether to always display of a plus sign on positive numbers.\n     *\n     * <p>\n     * If the location of the negative sign is specified by the decimal format pattern (or by the\n     * negative prefix/suffix pattern methods), a plus sign is substituted into that location, in\n     * accordance with Unicode Technical Standard #35 (LDML) section 3.2.1. Otherwise, the plus sign is\n     * prepended to the number. For example, if the decimal format pattern <code>#;#-</code> is used,\n     * then formatting 123 would result in \"123+\" in the locale <em>en-US</em>.\n     *\n     * <p>\n     * This method should be used <em>instead of</em> setting the positive prefix/suffix. The behavior is\n     * undefined if alwaysShowPlusSign is set but the positive prefix/suffix already contains a plus\n     * sign.\n     *\n     * @param signAlwaysShown\n     *            Whether positive numbers should display a plus sign.\n     * @return The property bag, for chaining.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public void toStringBare(StringBuilder result)",
    "returnType" : "void",
    "comment" : "\n     * Appends a string containing properties that differ from the default, but without being surrounded\n     * by &lt;Properties&gt;.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(ObjectOutputStream oos) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Custom serialization: save fields along with their name, so that fields can be easily added in the\n     * future in any order. Only save fields that differ from their default value.\n     ",
    "links" : [ ]
  }, {
    "name" : " void writeObjectImpl(ObjectOutputStream oos) throws IOException",
    "returnType" : "void",
    "comment" : " package-private ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private DecimalFormatProperties _clear()", "private DecimalFormatProperties _copyFrom(DecimalFormatProperties other)", "private boolean _equals(DecimalFormatProperties other)", "private boolean _equalsHelper(boolean mine, boolean theirs)", "private boolean _equalsHelper(int mine, int theirs)", "private boolean _equalsHelper(Object mine, Object theirs)", "private int _hashCode()", "private int _hashCodeHelper(boolean value)", "private int _hashCodeHelper(int value)", "private int _hashCodeHelper(Object value)", "public DecimalFormatProperties clear()", "public DecimalFormatProperties clone()", "public DecimalFormatProperties copyFrom(DecimalFormatProperties other)", "public boolean equals(Object other)", "public Map<String, Map<String, String>> getCompactCustomData()", "public CompactStyle getCompactStyle()", "public Currency getCurrency()", "public CurrencyPluralInfo getCurrencyPluralInfo()", "public CurrencyUsage getCurrencyUsage()", "public boolean getDecimalPatternMatchRequired()", "public boolean getDecimalSeparatorAlwaysShown()", "public boolean getExponentSignAlwaysShown()", "public boolean getCurrencyAsDecimal()", "public int getFormatWidth()", "public int getGroupingSize()", "public boolean getGroupingUsed()", "public int getMagnitudeMultiplier()", "public MathContext getMathContext()", "public int getMaximumFractionDigits()", "public int getMaximumIntegerDigits()", "public int getMaximumSignificantDigits()", "public int getMinimumExponentDigits()", "public int getMinimumFractionDigits()", "public int getMinimumGroupingDigits()", "public int getMinimumIntegerDigits()", "public int getMinimumSignificantDigits()", "public BigDecimal getMultiplier()", "public String getNegativePrefix()", "public String getNegativePrefixPattern()", "public String getNegativeSuffix()", "public String getNegativeSuffixPattern()", "public PadPosition getPadPosition()", "public String getPadString()", "public boolean getParseCaseSensitive()", "public boolean getParseIntegerOnly()", "public ParseMode getParseMode()", "public boolean getParseNoExponent()", "public boolean getParseToBigDecimal()", "public PluralRules getPluralRules()", "public String getPositivePrefix()", "public String getPositivePrefixPattern()", "public String getPositiveSuffix()", "public String getPositiveSuffixPattern()", "public BigDecimal getRoundingIncrement()", "public RoundingMode getRoundingMode()", "public int getSecondaryGroupingSize()", "public boolean getSignAlwaysShown()", "public int hashCode()", "private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException", " void readObjectImpl(ObjectInputStream ois) throws IOException, ClassNotFoundException", "public DecimalFormatProperties setCompactCustomData(Map<String, Map<String, String>> compactCustomData)", "public DecimalFormatProperties setCompactStyle(CompactStyle compactStyle)", "public DecimalFormatProperties setCurrency(Currency currency)", "public DecimalFormatProperties setCurrencyPluralInfo(CurrencyPluralInfo currencyPluralInfo)", "public DecimalFormatProperties setCurrencyUsage(CurrencyUsage currencyUsage)", "public DecimalFormatProperties setDecimalPatternMatchRequired(boolean decimalPatternMatchRequired)", "public DecimalFormatProperties setDecimalSeparatorAlwaysShown(boolean alwaysShowDecimal)", "public DecimalFormatProperties setExponentSignAlwaysShown(boolean exponentSignAlwaysShown)", "public DecimalFormatProperties setCurrencyAsDecimal(boolean currencyAsDecimal)", "public DecimalFormatProperties setFormatWidth(int paddingWidth)", "public DecimalFormatProperties setGroupingSize(int groupingSize)", "public DecimalFormatProperties setGroupingUsed(boolean groupingUsed)", "public DecimalFormatProperties setMagnitudeMultiplier(int magnitudeMultiplier)", "public DecimalFormatProperties setMathContext(MathContext mathContext)", "public DecimalFormatProperties setMaximumFractionDigits(int maximumFractionDigits)", "public DecimalFormatProperties setMaximumIntegerDigits(int maximumIntegerDigits)", "public DecimalFormatProperties setMaximumSignificantDigits(int maximumSignificantDigits)", "public DecimalFormatProperties setMinimumExponentDigits(int minimumExponentDigits)", "public DecimalFormatProperties setMinimumFractionDigits(int minimumFractionDigits)", "public DecimalFormatProperties setMinimumGroupingDigits(int minimumGroupingDigits)", "public DecimalFormatProperties setMinimumIntegerDigits(int minimumIntegerDigits)", "public DecimalFormatProperties setMinimumSignificantDigits(int minimumSignificantDigits)", "public DecimalFormatProperties setMultiplier(BigDecimal multiplier)", "public DecimalFormatProperties setNegativePrefix(String negativePrefix)", "public DecimalFormatProperties setNegativePrefixPattern(String negativePrefixPattern)", "public DecimalFormatProperties setNegativeSuffix(String negativeSuffix)", "public DecimalFormatProperties setNegativeSuffixPattern(String negativeSuffixPattern)", "public DecimalFormatProperties setPadPosition(PadPosition paddingLocation)", "public DecimalFormatProperties setPadString(String paddingString)", "public DecimalFormatProperties setParseCaseSensitive(boolean parseCaseSensitive)", "public DecimalFormatProperties setParseIntegerOnly(boolean parseIntegerOnly)", "public DecimalFormatProperties setParseMode(ParseMode parseMode)", "public DecimalFormatProperties setParseNoExponent(boolean parseNoExponent)", "public DecimalFormatProperties setParseToBigDecimal(boolean parseToBigDecimal)", "public DecimalFormatProperties setPluralRules(PluralRules pluralRules)", "public DecimalFormatProperties setPositivePrefix(String positivePrefix)", "public DecimalFormatProperties setPositivePrefixPattern(String positivePrefixPattern)", "public DecimalFormatProperties setPositiveSuffix(String positiveSuffix)", "public DecimalFormatProperties setPositiveSuffixPattern(String positiveSuffixPattern)", "public DecimalFormatProperties setRoundingIncrement(BigDecimal roundingIncrement)", "public DecimalFormatProperties setRoundingMode(RoundingMode roundingMode)", "public DecimalFormatProperties setSecondaryGroupingSize(int secondaryGroupingSize)", "public DecimalFormatProperties setSignAlwaysShown(boolean signAlwaysShown)", "public String toString()", "public void toStringBare(StringBuilder result)", "private void writeObject(ObjectOutputStream oos) throws IOException", " void writeObjectImpl(ObjectOutputStream oos) throws IOException" ],
  "variableNames" : [ "DEFAULT", "serialVersionUID", "compactCustomData", "compactStyle", "currency", "currencyPluralInfo", "currencyUsage", "decimalPatternMatchRequired", "decimalSeparatorAlwaysShown", "exponentSignAlwaysShown", "currencyAsDecimal", "formatWidth", "groupingSize", "groupingUsed", "magnitudeMultiplier", "mathContext", "maximumFractionDigits", "maximumIntegerDigits", "maximumSignificantDigits", "minimumExponentDigits", "minimumFractionDigits", "minimumGroupingDigits", "minimumIntegerDigits", "minimumSignificantDigits", "multiplier", "negativePrefix", "negativePrefixPattern", "negativeSuffix", "negativeSuffixPattern", "padPosition", "padString", "parseCaseSensitive", "parseIntegerOnly", "parseMode", "parseNoExponent", "parseToBigDecimal", "pluralRules", "positivePrefix", "positivePrefixPattern", "positiveSuffix", "positiveSuffixPattern", "roundingIncrement", "roundingMode", "secondaryGroupingSize", "signAlwaysShown" ]
}