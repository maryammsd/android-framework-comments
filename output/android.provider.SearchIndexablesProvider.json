{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/SearchIndexablesProvider.java",
  "packageName" : "android.provider",
  "className" : "SearchIndexablesProvider",
  "comment" : "\n * Base class for a search indexable provider. Such provider offers data to be indexed either\n * as a reference to an XML file (like a {@link android.preference.PreferenceScreen}) or either\n * as some raw data.\n *\n * @see SearchIndexableResource\n * @see SearchIndexableData\n * @see SearchIndexablesContract\n *\n * To create a search indexables provider, extend this class, then implement the abstract methods,\n * and add it to your manifest like this:\n *\n * <pre class=\"prettyprint\">&lt;manifest&gt;\n *    ...\n *    &lt;application&gt;\n *        ...\n *        &lt;provider\n *            android:name=\"com.example.MyIndexablesProvider\"\n *            android:authorities=\"com.example.myindexablesprovider\"\n *            android:exported=\"true\"\n *            android:grantUriPermissions=\"true\"\n *            android:permission=\"android.permission.READ_SEARCH_INDEXABLES\"\n *            &lt;intent-filter&gt;\n *                &lt;action android:name=\"android.content.action.SEARCH_INDEXABLES_PROVIDER\" /&gt;\n *            &lt;/intent-filter&gt;\n *        &lt;/provider&gt;\n *        ...\n *    &lt;/application&gt;\n *&lt;/manifest&gt;</pre>\n * <p>\n * When defining your provider, you must protect it with\n * {@link android.Manifest.permission#READ_SEARCH_INDEXABLES}, which is a permission only the system\n * can obtain.\n * </p>\n *\n * @hide\n ",
  "links" : [ "android.Manifest.permission#READ_SEARCH_INDEXABLES", "android.preference.PreferenceScreen" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAuthority",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMatcher",
    "type" : "UriMatcher",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_RES_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_RAW_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_NON_INDEXABLE_KEYS_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_SITE_MAP_PAIRS_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_SLICE_URI_PAIRS_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MATCH_DYNAMIC_RAW_CODE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void attachInfo(Context context, ProviderInfo info)",
    "returnType" : "void",
    "comment" : "\n     * Implementation is provided by the parent class.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)",
    "returnType" : "Cursor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public abstract Cursor queryXmlResources(String[] projection)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns all {@link android.provider.SearchIndexablesContract.XmlResource}.\n     *\n     * Those are Xml resource IDs to some {@link android.preference.PreferenceScreen}.\n     *\n     * @param projection list of {@link android.provider.SearchIndexablesContract.XmlResource}\n     *                   columns to put into the cursor. If {@code null} all supported columns\n     *                   should be included.\n     ",
    "links" : [ "android.provider.SearchIndexablesContract.XmlResource", "android.preference.PreferenceScreen" ]
  }, {
    "name" : "public abstract Cursor queryRawData(String[] projection)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns all {@link android.provider.SearchIndexablesContract.RawData}.\n     *\n     * Those are the raw indexable data.\n     *\n     * @param projection list of {@link android.provider.SearchIndexablesContract.RawData} columns\n     *                   to put into the cursor. If {@code null} all supported columns should be\n     *                   included.\n     ",
    "links" : [ "android.provider.SearchIndexablesContract.RawData" ]
  }, {
    "name" : "public abstract Cursor queryNonIndexableKeys(String[] projection)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns all {@link android.provider.SearchIndexablesContract.NonIndexableKey}.\n     *\n     * Those are the non indexable data keys.\n     *\n     * @param projection list of {@link android.provider.SearchIndexablesContract.NonIndexableKey}\n     *                   columns to put into the cursor. If {@code null} all supported columns\n     *                   should be included.\n     ",
    "links" : [ "android.provider.SearchIndexablesContract.NonIndexableKey" ]
  }, {
    "name" : "public Cursor querySiteMapPairs()",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a {@link Cursor}, where rows are [parent class, child class] entries to form a site\n     * map. The list of pairs should be as complete as possible.\n     *\n     * @hide\n     ",
    "links" : [ "android.database.Cursor" ]
  }, {
    "name" : "public Cursor querySliceUriPairs()",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns a {@link Cursor} linking {@link Slice} {@link Uri Uris} to the\n     * corresponding Settings key.\n     ",
    "links" : [ "android.app.slice.Slice", "android.net.Uri", "android.database.Cursor" ]
  }, {
    "name" : "public Cursor queryDynamicRawData(@Nullable String[] projection)",
    "returnType" : "Cursor",
    "comment" : "\n     * Returns all {@link android.provider.SearchIndexablesContract.RawData}.\n     *\n     * Those are the dynamic raw indexable data.\n     *\n     * @param projection list of {@link android.provider.SearchIndexablesContract.RawData} columns\n     *                   to put into the cursor. If {@code null} all supported columns should be\n     *                   included.\n     ",
    "links" : [ "android.provider.SearchIndexablesContract.RawData" ]
  }, {
    "name" : "public String getType(Uri uri)",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public final Uri insert(Uri uri, ContentValues values)",
    "returnType" : "Uri",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int delete(Uri uri, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and cannot be overridden.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)",
    "returnType" : "int",
    "comment" : "\n     * Implementation is provided by the parent class. Throws by default, and cannot be overridden.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void attachInfo(Context context, ProviderInfo info)", "public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)", "public abstract Cursor queryXmlResources(String[] projection)", "public abstract Cursor queryRawData(String[] projection)", "public abstract Cursor queryNonIndexableKeys(String[] projection)", "public Cursor querySiteMapPairs()", "public Cursor querySliceUriPairs()", "public Cursor queryDynamicRawData(@Nullable String[] projection)", "public String getType(Uri uri)", "public final Uri insert(Uri uri, ContentValues values)", "public final int delete(Uri uri, String selection, String[] selectionArgs)", "public final int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)" ],
  "variableNames" : [ "TAG", "mAuthority", "mMatcher", "MATCH_RES_CODE", "MATCH_RAW_CODE", "MATCH_NON_INDEXABLE_KEYS_CODE", "MATCH_SITE_MAP_PAIRS_CODE", "MATCH_SLICE_URI_PAIRS_CODE", "MATCH_DYNAMIC_RAW_CODE" ]
}