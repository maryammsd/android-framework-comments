{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/widget/AlphabetIndexer.java",
  "packageName" : "android.widget",
  "className" : "AlphabetIndexer",
  "comment" : "\n * A helper class for adapters that implement the SectionIndexer interface.\n * If the items in the adapter are sorted by simple alphabet-based sorting, then\n * this class provides a way to do fast indexing of large lists using binary search.\n * It caches the indices that have been determined through the binary search and also\n * invalidates the cache if changes occur in the cursor.\n * <p/>\n * Your adapter is responsible for updating the cursor by calling {@link #setCursor} if the\n * cursor changes. {@link #getPositionForSection} method does the binary search for the starting\n * index of a given section (alphabet).\n ",
  "variables" : [ {
    "name" : "mDataCursor",
    "type" : "Cursor",
    "comment" : "\n     * Cursor that is used by the adapter of the list view.\n     ",
    "links" : [ ]
  }, {
    "name" : "mColumnIndex",
    "type" : "int",
    "comment" : "\n     * The index of the cursor column that this list is sorted on.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAlphabet",
    "type" : "CharSequence",
    "comment" : "\n     * The string of characters that make up the indexing sections.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAlphabetLength",
    "type" : "int",
    "comment" : "\n     * Cached length of the alphabet array.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAlphaMap",
    "type" : "SparseIntArray",
    "comment" : "\n     * This contains a cache of the computed indices so far. It will get reset whenever\n     * the dataset changes or the cursor changes.\n     ",
    "links" : [ ]
  }, {
    "name" : "mCollator",
    "type" : "java.text.Collator",
    "comment" : "\n     * Use a collator to compare strings in a localized manner.\n     ",
    "links" : [ ]
  }, {
    "name" : "mAlphabetArray",
    "type" : "String[]",
    "comment" : "\n     * The section array converted from the alphabet string.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public Object[] getSections()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns the section array constructed from the alphabet provided in the constructor.\n     * @return the section array\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setCursor(Cursor cursor)",
    "returnType" : "void",
    "comment" : "\n     * Sets a new cursor as the data set and resets the cache of indices.\n     * @param cursor the new cursor to use as the data set\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int compare(String word, String letter)",
    "returnType" : "int",
    "comment" : "\n     * Default implementation compares the first character of word with letter.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPositionForSection(int sectionIndex)",
    "returnType" : "int",
    "comment" : "\n     * Performs a binary search or cache lookup to find the first row that\n     * matches a given section's starting letter.\n     * @param sectionIndex the section to search for\n     * @return the row index of the first occurrence, or the nearest next letter.\n     * For instance, if searching for \"T\" and no \"T\" is found, then the first\n     * row starting with \"U\" or any higher letter is returned. If there is no\n     * data following \"T\" at all, then the list size is returned.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSectionForPosition(int position)",
    "returnType" : "int",
    "comment" : "\n     * Returns the section index for a given position in the list by querying the item\n     * and comparing it with all items in the section array.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onChanged()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void onInvalidated()",
    "returnType" : "void",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "mDataCursor", "mColumnIndex", "mAlphabet", "mAlphabetLength", "mAlphaMap", "mCollator", "mAlphabetArray" ],
  "methodNames" : [ "public Object[] getSections()", "public void setCursor(Cursor cursor)", "protected int compare(String word, String letter)", "public int getPositionForSection(int sectionIndex)", "public int getSectionForPosition(int position)", "public void onChanged()", "public void onInvalidated()" ]
}