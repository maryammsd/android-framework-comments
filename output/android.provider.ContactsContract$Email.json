{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/provider/ContactsContract.java",
  "packageName" : "android.provider",
  "className" : "Email",
  "comment" : "\n         * <p>\n         * A data kind representing an email address.\n         * </p>\n         * <p>\n         * You can use all columns defined for {@link ContactsContract.Data} as\n         * well as the following aliases.\n         * </p>\n         * <h2>Column aliases</h2>\n         * <table class=\"jd-sumtable\">\n         * <tr>\n         * <th>Type</th>\n         * <th>Alias</th><th colspan='2'>Data column</th>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #ADDRESS}</td>\n         * <td>{@link #DATA1}</td>\n         * <td>Email address itself.</td>\n         * </tr>\n         * <tr>\n         * <td>int</td>\n         * <td>{@link #TYPE}</td>\n         * <td>{@link #DATA2}</td>\n         * <td>Allowed values are:\n         * <p>\n         * <ul>\n         * <li>{@link #TYPE_CUSTOM}. Put the actual type in {@link #LABEL}.</li>\n         * <li>{@link #TYPE_HOME}</li>\n         * <li>{@link #TYPE_WORK}</li>\n         * <li>{@link #TYPE_OTHER}</li>\n         * <li>{@link #TYPE_MOBILE}</li>\n         * </ul>\n         * </p>\n         * </td>\n         * </tr>\n         * <tr>\n         * <td>String</td>\n         * <td>{@link #LABEL}</td>\n         * <td>{@link #DATA3}</td>\n         * <td></td>\n         * </tr>\n         * </table>\n         ",
  "links" : [ "#DATA3", "#DATA1", "#DATA2", "#TYPE_HOME", "#LABEL", "ContactsContract.Data", "#TYPE_WORK", "#TYPE", "#TYPE_MOBILE", "#TYPE_CUSTOM", "#ADDRESS", "#TYPE_OTHER" ],
  "variables" : [ {
    "name" : "CONTENT_ITEM_TYPE",
    "type" : "String",
    "comment" : " MIME type used when storing this in data table. ",
    "links" : [ ]
  }, {
    "name" : "CONTENT_TYPE",
    "type" : "String",
    "comment" : "\n             * The MIME type of {@link #CONTENT_URI} providing a directory of email addresses.\n             ",
    "links" : [ "#CONTENT_URI" ]
  }, {
    "name" : "CONTENT_URI",
    "type" : "Uri",
    "comment" : "\n             * The content:// style URI for all data records of the\n             * {@link #CONTENT_ITEM_TYPE} MIME type, combined with the\n             * associated raw contact and aggregate contact data.\n             ",
    "links" : [ "#CONTENT_ITEM_TYPE" ]
  }, {
    "name" : "CONTENT_LOOKUP_URI",
    "type" : "Uri",
    "comment" : "\n             * <p>\n             * The content:// style URL for looking up data rows by email address. The\n             * lookup argument, an email address, should be passed as an additional path segment\n             * after this URI.\n             * </p>\n             * <p>Example:\n             * <pre>\n             * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(email));\n             * Cursor c = getContentResolver().query(uri,\n             *          new String[]{Email.CONTACT_ID, Email.DISPLAY_NAME, Email.DATA},\n             *          null, null, null);\n             * </pre>\n             * </p>\n             ",
    "links" : [ ]
  }, {
    "name" : "ENTERPRISE_CONTENT_LOOKUP_URI",
    "type" : "Uri",
    "comment" : "\n             * URI used for looking up contacts by email on the contact databases of both the\n             * calling user and the managed profile that is linked to it.\n             * <p>\n             * It supports the same semantics as {@link #CONTENT_LOOKUP_URI} and returns the same\n             * columns.<br>\n             * If the device has no managed profile that is linked to the calling user, it behaves\n             * in the exact same way as {@link #CONTENT_LOOKUP_URI}.<br>\n             * If there is a managed profile linked to the calling user, it first queries the\n             * calling user's contact database, and only if no matching contacts are found there it\n             * then queries the managed profile database.\n             * <p class=\"caution\">\n             * If a result is from the managed profile, the following changes are made to the data:\n             * <ul>\n             *     <li>{@link #PHOTO_THUMBNAIL_URI} and {@link #PHOTO_URI} will be rewritten to\n             *     specialURIs. Use {@link ContentResolver#openAssetFileDescriptor} or its siblings\n             *     to load pictures from them.\n             *     <li>{@link #PHOTO_ID} and {@link #PHOTO_FILE_ID} will be set to null. Don't use\n             *     them.\n             *     <li>{@link #CONTACT_ID} and {@link #LOOKUP_KEY} will be replaced with artificial\n             *     values. These values will be consistent across multiple queries, but do not use\n             *     them in places that do not explicitly say they accept them. If they are used in\n             *     the {@code selection} param in {@link android.content.ContentProvider#query}, the\n             *     result is undefined.\n             *     <li>In order to tell whether a contact is from the managed profile, use\n             *     {@link ContactsContract.Contacts#isEnterpriseContactId(long)}.\n             * <p>\n             * A contact lookup URL built by\n             * {@link ContactsContract.Contacts#getLookupUri(long, String)}\n             * with a {@link #CONTACT_ID} and a {@link #LOOKUP_KEY} returned by this API can be\n             * passed to {@link ContactsContract.QuickContact#showQuickContact} even if a contact is\n             * from the managed profile.\n             * <pre>\n             * Uri lookupUri = Uri.withAppendedPath(Email.ENTERPRISE_CONTENT_LOOKUP_URI,\n             *         Uri.encode(email));\n             ",
    "links" : [ "ContactsContract.QuickContact#showQuickContact", "android.content.ContentProvider#query", "#PHOTO_FILE_ID", "#PHOTO_THUMBNAIL_URI", "#PHOTO_URI", "#PHOTO_ID", "#CONTACT_ID", "ContactsContract.Contacts#getLookupUri(long", "android.content.ContentResolver#openAssetFileDescriptor", "ContactsContract.Contacts#isEnterpriseContactId(long)", "#CONTENT_LOOKUP_URI", "#LOOKUP_KEY" ]
  }, {
    "name" : "CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n             * <p>The content:// style URL for email lookup using a filter. The filter returns\n             * records of MIME type {@link #CONTENT_ITEM_TYPE}. The filter is applied\n             * to display names as well as email addresses. The filter argument should be passed\n             * as an additional path segment after this URI.\n             * </p>\n             *\n             * <p class=\"caution\"><b>Caution: </b>If you publish your app to the Google Play Store,\n             * this field doesn't sort results based on contacts frequency. For more information,\n             * see the\n             * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n             * page.</p>\n             *\n             * <p>The query in the following example will return \"Robert Parr (bob@incredibles.com)\"\n             * as well as \"Bob Parr (incredible@android.com)\".\n             * <pre>\n             * Uri uri = Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI, Uri.encode(\"bob\"));\n             * Cursor c = getContentResolver().query(uri,\n             *          new String[]{Email.DISPLAY_NAME, Email.DATA},\n             *          null, null, null);\n             * </pre>\n             * </p>\n             ",
    "links" : [ "#CONTENT_ITEM_TYPE" ]
  }, {
    "name" : "ENTERPRISE_CONTENT_FILTER_URI",
    "type" : "Uri",
    "comment" : "\n             * <p>It supports the similar semantics as {@link #CONTENT_FILTER_URI} and returns the\n             * same columns. This URI requires {@link ContactsContract#DIRECTORY_PARAM_KEY} in\n             * parameters, otherwise it will throw IllegalArgumentException. The passed directory\n             * can belong either to the calling user or to a managed profile that is linked to it.\n             * <p class=\"caution\">\n             * <b>Caution: </b>If you publish your app to the Google Play Store,\n             * this field doesn't sort results based on contacts frequency. For more information,\n             * see the\n             * <a href=\"/guide/topics/providers/contacts-provider#ObsoleteData\">Contacts Provider</a>\n             * page.\n             ",
    "links" : [ "#CONTENT_FILTER_URI", "android.provider.ContactsContract#DIRECTORY_PARAM_KEY" ]
  }, {
    "name" : "ADDRESS",
    "type" : "String",
    "comment" : "\n             * The email address.\n             * <P>Type: TEXT</P>\n             ",
    "links" : [ ]
  }, {
    "name" : "TYPE_HOME",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_WORK",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_OTHER",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TYPE_MOBILE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISPLAY_NAME",
    "type" : "String",
    "comment" : "\n             * The display name for the email address\n             * <P>Type: TEXT</P>\n             ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final int getTypeLabelResource(int type)",
    "returnType" : "int",
    "comment" : "\n             * Return the string resource that best describes the given\n             * {@link #TYPE}. Will always return a valid resource.\n             ",
    "links" : [ "#TYPE" ]
  }, {
    "name" : "public static final CharSequence getTypeLabel(Resources res, int type, @Nullable CharSequence label)",
    "returnType" : "CharSequence",
    "comment" : "\n             * Return a {@link CharSequence} that best describes the given type,\n             * possibly substituting the given {@link #LABEL} value\n             * for {@link #TYPE_CUSTOM}.\n             ",
    "links" : [ "#LABEL", "CharSequence", "#TYPE_CUSTOM" ]
  } ],
  "methodNames" : [ "public static final int getTypeLabelResource(int type)", "public static final CharSequence getTypeLabel(Resources res, int type, @Nullable CharSequence label)" ],
  "variableNames" : [ "CONTENT_ITEM_TYPE", "CONTENT_TYPE", "CONTENT_URI", "CONTENT_LOOKUP_URI", "ENTERPRISE_CONTENT_LOOKUP_URI", "CONTENT_FILTER_URI", "ENTERPRISE_CONTENT_FILTER_URI", "ADDRESS", "TYPE_HOME", "TYPE_WORK", "TYPE_OTHER", "TYPE_MOBILE", "DISPLAY_NAME" ]
}