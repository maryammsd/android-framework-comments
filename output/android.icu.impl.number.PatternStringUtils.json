{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/number/PatternStringUtils.java",
  "packageName" : "android.icu.impl.number",
  "className" : "PatternStringUtils",
  "comment" : "\n * Assorted utilities relating to decimal formatting pattern strings.\n * @hide Only a subset of ICU is exposed in Android\n ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static boolean ignoreRoundingIncrement(BigDecimal roundIncrDec, int maxFrac)",
    "returnType" : "boolean",
    "comment" : "\n     * Determine whether a given roundingIncrement should be ignored for formatting\n     * based on the current maxFrac value (maximum fraction digits). For example a\n     * roundingIncrement of 0.01 should be ignored if maxFrac is 1, but not if maxFrac\n     * is 2 or more. Note that roundingIncrements are rounded up in significance, so\n     * a roundingIncrement of 0.006 is treated like 0.01 for this determination, i.e.\n     * it should not be ignored if maxFrac is 2 or more (but a roundingIncrement of\n     * 0.005 is treated like 0.001 for significance).\n     *\n     * This test is needed for both NumberPropertyMapper.oldToNew and\n     * PatternStringUtils.propertiesToPatternString, but NumberPropertyMapper\n     * is package-private so we have it here.\n     *\n     * @param roundIncrDec\n     *            The roundingIncrement to be checked. Must be non-null.\n     * @param maxFrac\n     *            The current maximum fraction digits value.\n     * @return true if roundIncr should be ignored for formatting.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static String propertiesToPatternString(DecimalFormatProperties properties)",
    "returnType" : "String",
    "comment" : "\n     * Creates a pattern string from a property bag.\n     *\n     * <p>\n     * Since pattern strings support only a subset of the functionality available in a property bag, a\n     * new property bag created from the string returned by this function may not be the same as the\n     * original property bag.\n     *\n     * @param properties\n     *            The property bag to serialize.\n     * @return A pattern string approximately serializing the property bag.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static int escapePaddingString(CharSequence input, StringBuilder output, int startIndex)",
    "returnType" : "int",
    "comment" : " @return The number of chars inserted. ",
    "links" : [ ]
  }, {
    "name" : "public static String convertLocalized(String input, DecimalFormatSymbols symbols, boolean toLocalized)",
    "returnType" : "String",
    "comment" : "\n     * Converts a pattern between standard notation and localized notation. Localized notation means that\n     * instead of using generic placeholders in the pattern, you use the corresponding locale-specific\n     * characters instead. For example, in locale <em>fr-FR</em>, the period in the pattern \"0.000\" means\n     * \"decimal\" in standard notation (as it does in every other locale), but it means \"grouping\" in\n     * localized notation.\n     *\n     * <p>\n     * A greedy string-substitution strategy is used to substitute locale symbols. If two symbols are\n     * ambiguous or have the same prefix, the result is not well-defined.\n     *\n     * <p>\n     * Locale symbols are not allowed to contain the ASCII quote character.\n     *\n     * <p>\n     * This method is provided for backwards compatibility and should not be used in any new code.\n     *\n     * @param input\n     *            The pattern to convert.\n     * @param symbols\n     *            The symbols corresponding to the localized pattern.\n     * @param toLocalized\n     *            true to convert from standard to localized notation; false to convert from localized to\n     *            standard notation.\n     * @return The pattern expressed in the other notation.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void patternInfoToStringBuilder(AffixPatternProvider patternInfo, boolean isPrefix, PatternSignType patternSignType, boolean approximately, StandardPlural plural, boolean perMilleReplacesPercent, StringBuilder output)",
    "returnType" : "void",
    "comment" : "\n     * This method contains the heart of the logic for rendering LDML affix strings. It handles\n     * sign-always-shown resolution, whether to use the positive or negative subpattern, permille\n     * substitution, and plural forms for CurrencyPluralInfo.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static PatternSignType resolveSignDisplay(SignDisplay signDisplay, Signum signum)",
    "returnType" : "PatternSignType",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean ignoreRoundingIncrement(BigDecimal roundIncrDec, int maxFrac)", "public static String propertiesToPatternString(DecimalFormatProperties properties)", "private static int escapePaddingString(CharSequence input, StringBuilder output, int startIndex)", "public static String convertLocalized(String input, DecimalFormatSymbols symbols, boolean toLocalized)", "public static void patternInfoToStringBuilder(AffixPatternProvider patternInfo, boolean isPrefix, PatternSignType patternSignType, boolean approximately, StandardPlural plural, boolean perMilleReplacesPercent, StringBuilder output)", "public static PatternSignType resolveSignDisplay(SignDisplay signDisplay, Signum signum)" ],
  "variableNames" : [ ]
}