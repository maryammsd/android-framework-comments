{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/concurrent/atomic/DoubleAdder.java",
  "packageName" : "java.util.concurrent.atomic",
  "className" : "DoubleAdder",
  "comment" : "\n * One or more variables that together maintain an initially zero\n * {@code double} sum.  When updates (method {@link #add}) are\n * contended across threads, the set of variables may grow dynamically\n * to reduce contention.  Method {@link #sum} (or, equivalently {@link\n * #doubleValue}) returns the current total combined across the\n * variables maintaining the sum. The order of accumulation within or\n * across threads is not guaranteed. Thus, this class may not be\n * applicable if numerical stability is required, especially when\n * combining values of substantially different orders of magnitude.\n *\n * <p>This class is usually preferable to alternatives when multiple\n * threads update a common value that is used for purposes such as\n * summary statistics that are frequently updated but less frequently\n * read.\n *\n * <p>This class extends {@link Number}, but does <em>not</em> define\n * methods such as {@code equals}, {@code hashCode} and {@code\n * compareTo} because instances are expected to be mutated, and so are\n * not useful as collection keys.\n *\n * @since 1.8\n * @author Doug Lea\n ",
  "links" : [ "Number", "#doubleValue", "#sum", "#add" ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void add(double x)",
    "returnType" : "void",
    "comment" : "\n     * Adds the given value.\n     *\n     * @param x the value to add\n     ",
    "links" : [ ]
  }, {
    "name" : "public double sum()",
    "returnType" : "double",
    "comment" : "\n     * Returns the current sum.  The returned value is <em>NOT</em> an\n     * atomic snapshot; invocation in the absence of concurrent\n     * updates returns an accurate result, but concurrent updates that\n     * occur while the sum is being calculated might not be\n     * incorporated.  Also, because floating-point arithmetic is not\n     * strictly associative, the returned result need not be identical\n     * to the value that would be obtained in a sequential series of\n     * updates to a single variable.\n     *\n     * @return the sum\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets variables maintaining the sum to zero.  This method may\n     * be a useful alternative to creating a new adder, but is only\n     * effective if there are no concurrent updates.  Because this\n     * method is intrinsically racy, it should only be used when it is\n     * known that no threads are concurrently updating.\n     ",
    "links" : [ ]
  }, {
    "name" : "public double sumThenReset()",
    "returnType" : "double",
    "comment" : "\n     * Equivalent in effect to {@link #sum} followed by {@link\n     * #reset}. This method may apply for example during quiescent\n     * points between multithreaded computations.  If there are\n     * updates concurrent with this method, the returned value is\n     * <em>not</em> guaranteed to be the final value occurring before\n     * the reset.\n     *\n     * @return the sum\n     ",
    "links" : [ "#reset", "#sum" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns the String representation of the {@link #sum}.\n     * @return the String representation of the {@link #sum}\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public double doubleValue()",
    "returnType" : "double",
    "comment" : "\n     * Equivalent to {@link #sum}.\n     *\n     * @return the sum\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public long longValue()",
    "returnType" : "long",
    "comment" : "\n     * Returns the {@link #sum} as a {@code long} after a\n     * narrowing primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public int intValue()",
    "returnType" : "int",
    "comment" : "\n     * Returns the {@link #sum} as an {@code int} after a\n     * narrowing primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "public float floatValue()",
    "returnType" : "float",
    "comment" : "\n     * Returns the {@link #sum} as a {@code float}\n     * after a narrowing primitive conversion.\n     ",
    "links" : [ "#sum" ]
  }, {
    "name" : "private Object writeReplace()",
    "returnType" : "Object",
    "comment" : "\n     * Returns a\n     * <a href=\"{@docRoot}/serialized-form.html#java.util.concurrent.atomic.DoubleAdder.SerializationProxy\">\n     * SerializationProxy</a>\n     * representing the state of this instance.\n     *\n     * @return a {@link SerializationProxy}\n     * representing the state of this instance\n     ",
    "links" : [ "SerializationProxy" ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException",
    "returnType" : "void",
    "comment" : "\n     * @param s the stream\n     * @throws java.io.InvalidObjectException always\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void add(double x)", "public double sum()", "public void reset()", "public double sumThenReset()", "public String toString()", "public double doubleValue()", "public long longValue()", "public int intValue()", "public float floatValue()", "private Object writeReplace()", "private void readObject(java.io.ObjectInputStream s) throws java.io.InvalidObjectException" ],
  "variableNames" : [ "serialVersionUID" ]
}