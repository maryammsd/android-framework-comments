{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/stream/Node.java",
  "packageName" : "java.util.stream",
  "className" : "OfPrimitive",
  "comment" : "",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : " T_SPLITR spliterator()",
    "returnType" : "T_SPLITR",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @return a {@link Spliterator.OfPrimitive} describing the elements of\n         *         this node\n         ",
    "links" : [ "Spliterator.OfPrimitive" ]
  }, {
    "name" : " void forEach(T_CONS action)",
    "returnType" : "void",
    "comment" : "\n         * Traverses the elements of this node, and invoke the provided\n         * {@code action} with each element.\n         *\n         * @param action a consumer that is to be invoked with each\n         *        element in this {@code Node.OfPrimitive}\n         ",
    "links" : [ ]
  }, {
    "name" : " T_NODE getChild(int i)",
    "returnType" : "T_NODE",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " T_NODE truncate(long from, long to, IntFunction<T[]> generator)",
    "returnType" : "T_NODE",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : " T[] asArray(IntFunction<T[]> generator)",
    "returnType" : "T[]",
    "comment" : "\n         * {@inheritDoc}\n         *\n         * @implSpec the default implementation invokes the generator to create\n         * an instance of a boxed primitive array with a length of\n         * {@link #count()} and then invokes {@link #copyInto(T[], int)} with\n         * that array at an offset of 0.\n         ",
    "links" : [ "#copyInto(T", "#count()" ]
  }, {
    "name" : " T_ARR asPrimitiveArray()",
    "returnType" : "T_ARR",
    "comment" : "\n         * Views this node as a primitive array.\n         *\n         * <p>Depending on the underlying implementation this may return a\n         * reference to an internal array rather than a copy.  It is the callers\n         * responsibility to decide if either this node or the array is utilized\n         * as the primary reference for the data.</p>\n         *\n         * @return an array containing the contents of this {@code Node}\n         ",
    "links" : [ ]
  }, {
    "name" : " T_ARR newArray(int count)",
    "returnType" : "T_ARR",
    "comment" : "\n         * Creates a new primitive array.\n         *\n         * @param count the length of the primitive array.\n         * @return the new primitive array.\n         ",
    "links" : [ ]
  }, {
    "name" : " void copyInto(T_ARR array, int offset)",
    "returnType" : "void",
    "comment" : "\n         * Copies the content of this {@code Node} into a primitive array,\n         * starting at a given offset into the array.  It is the caller's\n         * responsibility to ensure there is sufficient room in the array.\n         *\n         * @param array the array into which to copy the contents of this\n         *              {@code Node}\n         * @param offset the starting offset within the array\n         * @throws IndexOutOfBoundsException if copying would cause access of\n         *         data outside array bounds\n         * @throws NullPointerException if {@code array} is {@code null}\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ " T_SPLITR spliterator()", " void forEach(T_CONS action)", " T_NODE getChild(int i)", " T_NODE truncate(long from, long to, IntFunction<T[]> generator)", " T[] asArray(IntFunction<T[]> generator)", " T_ARR asPrimitiveArray()", " T_ARR newArray(int count)", " void copyInto(T_ARR array, int offset)" ],
  "variableNames" : [ ]
}