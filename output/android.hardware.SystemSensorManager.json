{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/SystemSensorManager.java",
  "packageName" : "android.hardware",
  "className" : "SystemSensorManager",
  "comment" : "\n * Sensor manager implementation that communicates with the built-in\n * system sensors.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEBUG_DYNAMIC_SENSOR",
    "type" : "boolean",
    "comment" : "TODO: disable extra logging before release",
    "links" : [ ]
  }, {
    "name" : "MIN_DIRECT_CHANNEL_BUFFER_SIZE",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_LISTENER_COUNT",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPPED_SAMPLING_PERIOD_US",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CAPPED_SAMPLING_RATE_LEVEL",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "HIGH_SAMPLING_RATE_SENSORS_PERMISSION",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CHANGE_ID_SAMPLING_RATE_SENSORS_PERMISSION",
    "type" : "long",
    "comment" : "\n     * For apps targeting S and above, a SecurityException is thrown when they do not have\n     * HIGH_SAMPLING_RATE_SENSORS permission, run in debug mode, and request sampling rates that\n     * are faster than 200 Hz.\n     ",
    "links" : [ ]
  }, {
    "name" : "sLock",
    "type" : "Object",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sNativeClassInited",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sInjectEventQueue",
    "type" : "InjectEventQueue",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullSensorsList",
    "type" : "ArrayList<Sensor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullDynamicSensorsList",
    "type" : "List<Sensor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFullRuntimeSensorListByDevice",
    "type" : "SparseArray<List<Sensor>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRuntimeSensorListByDeviceByType",
    "type" : "SparseArray<SparseArray<List<Sensor>>>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDynamicSensorListDirty",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHandleToSensor",
    "type" : "HashMap<Integer, Sensor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSensorListeners",
    "type" : "HashMap<SensorEventListener, SensorEventQueue>",
    "comment" : " Listener list",
    "links" : [ ]
  }, {
    "name" : "mTriggerListeners",
    "type" : "HashMap<TriggerEventListener, TriggerEventQueue>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDynamicSensorCallbacks",
    "type" : "HashMap<DynamicSensorCallback, Handler>",
    "comment" : " Dynamic Sensor callbacks",
    "links" : [ ]
  }, {
    "name" : "mDynamicSensorBroadcastReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRuntimeSensorBroadcastReceiver",
    "type" : "BroadcastReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVirtualDeviceListener",
    "type" : "VirtualDeviceManager.VirtualDeviceListener",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mMainLooper",
    "type" : "Looper",
    "comment" : " Looper associated with the context in which this instance was created.",
    "links" : [ ]
  }, {
    "name" : "mTargetSdkLevel",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsPackageDebuggable",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mContext",
    "type" : "Context",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mNativeInstance",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mVdm",
    "type" : "VirtualDeviceManager",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHasHighSamplingRateSensorsPermission",
    "type" : "Optional<Boolean>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private static native void nativeClassInit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native long nativeCreate(String opPackageName)",
    "returnType" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetSensorAtIndex(long nativeInstance, Sensor sensor, int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeGetDefaultDeviceSensorAtIndex(long nativeInstance, Sensor sensor, int index)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetDynamicSensors(long nativeInstance, List<Sensor> list)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeGetRuntimeSensors(long nativeInstance, int deviceId, List<Sensor> list)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsDataInjectionEnabled(long nativeInstance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsReplayDataInjectionEnabled(long nativeInstance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native boolean nativeIsHalBypassReplayDataInjectionEnabled(long nativeInstance)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeCreateDirectChannel(long nativeInstance, int deviceId, long size, int channelType, int fd, HardwareBuffer buffer)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeDestroyDirectChannel(long nativeInstance, int channelHandle)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeConfigDirectChannel(long nativeInstance, int channelHandle, int sensorHandle, int rate)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static native int nativeSetOperationParameter(long nativeInstance, int handle, int type, float[] floatValues, int[] intValues)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public List<Sensor> getSensorList(int type)",
    "returnType" : "List<Sensor>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected List<Sensor> getFullSensorList()",
    "returnType" : "List<Sensor>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Sensor getSensorByHandle(int sensorHandle)",
    "returnType" : "Sensor",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected List<Sensor> getFullDynamicSensorList()",
    "returnType" : "List<Sensor>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean registerListenerImpl(SensorEventListener listener, Sensor sensor, int delayUs, Handler handler, int maxBatchReportLatencyUs, int reservedFlags)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void unregisterListenerImpl(SensorEventListener listener, Sensor sensor)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean requestTriggerSensorImpl(TriggerEventListener listener, Sensor sensor)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean cancelTriggerSensorImpl(TriggerEventListener listener, Sensor sensor, boolean disable)",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean flushImpl(SensorEventListener listener)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean initDataInjectionImpl(boolean enable, @DataInjectionMode int mode)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected boolean injectSensorDataImpl(Sensor sensor, float[] values, int accuracy, long timestamp)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void cleanupSensorConnection(Sensor sensor)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void updateDynamicSensorList()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private List<Sensor> createRuntimeSensorListLocked(int deviceId)",
    "returnType" : "List<Sensor>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupRuntimeSensorBroadcastReceiver()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupVirtualDeviceListener()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setupDynamicSensorBroadcastReceiver()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void registerDynamicSensorCallbackImpl(DynamicSensorCallback callback, Handler handler)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void unregisterDynamicSensorCallbackImpl(DynamicSensorCallback callback)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private static boolean diffSortedSensorList(List<Sensor> oldList, List<Sensor> newList, List<Sensor> updated, List<Sensor> added, List<Sensor> removed)",
    "returnType" : "boolean",
    "comment" : "\n     * Find the difference of two List<Sensor> assuming List are sorted by handle of sensor,\n     * assuming the input list is already sorted by handle. Inputs are ol and nl; outputs are\n     * updated, added and removed. Any of the output lists can be null in case the result is not\n     * interested.\n     ",
    "links" : [ ]
  }, {
    "name" : "protected int configureDirectChannelImpl(SensorDirectChannel channel, Sensor sensor, int rate)",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected SensorDirectChannel createDirectChannelImpl(MemoryFile memoryFile, HardwareBuffer hardwareBuffer)",
    "returnType" : "SensorDirectChannel",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected void destroyDirectChannelImpl(SensorDirectChannel channel)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "protected boolean setOperationParameterImpl(SensorAdditionalInfo parameter)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isDeviceSensorPolicyDefault(int deviceId)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean isSensorInCappedSet(int sensorType)",
    "returnType" : "boolean",
    "comment" : "\n     * Checks if a sensor should be capped according to HIGH_SAMPLING_RATE_SENSORS\n     * permission.\n     *\n     * This needs to be kept in sync with the list defined on the native side\n     * in frameworks/native/services/sensorservice/SensorService.cpp\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean hasHighSamplingRateSensorsPermission()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "private static native void nativeClassInit()", "private static native long nativeCreate(String opPackageName)", "private static native boolean nativeGetSensorAtIndex(long nativeInstance, Sensor sensor, int index)", "private static native boolean nativeGetDefaultDeviceSensorAtIndex(long nativeInstance, Sensor sensor, int index)", "private static native void nativeGetDynamicSensors(long nativeInstance, List<Sensor> list)", "private static native void nativeGetRuntimeSensors(long nativeInstance, int deviceId, List<Sensor> list)", "private static native boolean nativeIsDataInjectionEnabled(long nativeInstance)", "private static native boolean nativeIsReplayDataInjectionEnabled(long nativeInstance)", "private static native boolean nativeIsHalBypassReplayDataInjectionEnabled(long nativeInstance)", "private static native int nativeCreateDirectChannel(long nativeInstance, int deviceId, long size, int channelType, int fd, HardwareBuffer buffer)", "private static native void nativeDestroyDirectChannel(long nativeInstance, int channelHandle)", "private static native int nativeConfigDirectChannel(long nativeInstance, int channelHandle, int sensorHandle, int rate)", "private static native int nativeSetOperationParameter(long nativeInstance, int handle, int type, float[] floatValues, int[] intValues)", "public List<Sensor> getSensorList(int type)", "protected List<Sensor> getFullSensorList()", "public Sensor getSensorByHandle(int sensorHandle)", "protected List<Sensor> getFullDynamicSensorList()", "protected boolean registerListenerImpl(SensorEventListener listener, Sensor sensor, int delayUs, Handler handler, int maxBatchReportLatencyUs, int reservedFlags)", "protected void unregisterListenerImpl(SensorEventListener listener, Sensor sensor)", "protected boolean requestTriggerSensorImpl(TriggerEventListener listener, Sensor sensor)", "protected boolean cancelTriggerSensorImpl(TriggerEventListener listener, Sensor sensor, boolean disable)", "protected boolean flushImpl(SensorEventListener listener)", "protected boolean initDataInjectionImpl(boolean enable, @DataInjectionMode int mode)", "protected boolean injectSensorDataImpl(Sensor sensor, float[] values, int accuracy, long timestamp)", "private void cleanupSensorConnection(Sensor sensor)", "private void updateDynamicSensorList()", "private List<Sensor> createRuntimeSensorListLocked(int deviceId)", "private void setupRuntimeSensorBroadcastReceiver()", "private void setupVirtualDeviceListener()", "private void setupDynamicSensorBroadcastReceiver()", "protected void registerDynamicSensorCallbackImpl(DynamicSensorCallback callback, Handler handler)", "protected void unregisterDynamicSensorCallbackImpl(DynamicSensorCallback callback)", "private static boolean diffSortedSensorList(List<Sensor> oldList, List<Sensor> newList, List<Sensor> updated, List<Sensor> added, List<Sensor> removed)", "protected int configureDirectChannelImpl(SensorDirectChannel channel, Sensor sensor, int rate)", "protected SensorDirectChannel createDirectChannelImpl(MemoryFile memoryFile, HardwareBuffer hardwareBuffer)", "protected void destroyDirectChannelImpl(SensorDirectChannel channel)", "protected boolean setOperationParameterImpl(SensorAdditionalInfo parameter)", "private boolean isDeviceSensorPolicyDefault(int deviceId)", "private boolean isSensorInCappedSet(int sensorType)", "private boolean hasHighSamplingRateSensorsPermission()" ],
  "variableNames" : [ "DEBUG_DYNAMIC_SENSOR", "MIN_DIRECT_CHANNEL_BUFFER_SIZE", "MAX_LISTENER_COUNT", "CAPPED_SAMPLING_PERIOD_US", "CAPPED_SAMPLING_RATE_LEVEL", "HIGH_SAMPLING_RATE_SENSORS_PERMISSION", "CHANGE_ID_SAMPLING_RATE_SENSORS_PERMISSION", "sLock", "sNativeClassInited", "sInjectEventQueue", "mFullSensorsList", "mFullDynamicSensorsList", "mFullRuntimeSensorListByDevice", "mRuntimeSensorListByDeviceByType", "mDynamicSensorListDirty", "mHandleToSensor", "mSensorListeners", "mTriggerListeners", "mDynamicSensorCallbacks", "mDynamicSensorBroadcastReceiver", "mRuntimeSensorBroadcastReceiver", "mVirtualDeviceListener", "mMainLooper", "mTargetSdkLevel", "mIsPackageDebuggable", "mContext", "mNativeInstance", "mVdm", "mHasHighSamplingRateSensorsPermission" ]
}