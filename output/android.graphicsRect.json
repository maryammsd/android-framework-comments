{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/graphics/Rect.java",
  "packageName" : "android.graphics",
  "className" : "Rect",
  "comment" : "\n * Rect holds four integer coordinates for a rectangle. The rectangle is\n * represented by the coordinates of its 4 edges (left, top, right bottom).\n * These fields can be accessed directly. Use width() and height() to retrieve\n * the rectangle's width and height. Note: most methods do not check to see that\n * the coordinates are sorted correctly (i.e. left <= right and top <= bottom).\n * <p>\n * Note that the right and bottom coordinates are exclusive. This means a Rect\n * being drawn untransformed onto a {@link android.graphics.Canvas} will draw\n * into the column and row described by its left and top coordinates, but not\n * those of its bottom and right.\n ",
  "variables" : [ {
    "name" : "left",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "top",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "right",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "bottom",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CREATOR",
    "type" : "Parcelable.Creator<Rect>",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static Rect copyOrNull(@Nullable Rect r)",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a copy of {@code r} if {@code r} is not {@code null}, or {@code null} otherwise.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object o)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toShortString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the rectangle in a compact form.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toShortString(@NonNull StringBuilder sb)",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the rectangle in a compact form.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public String flattenToString()",
    "returnType" : "String",
    "comment" : "\n     * Return a string representation of the rectangle in a well-defined format.\n     *\n     * <p>You can later recover the Rect from this string through\n     * {@link #unflattenFromString(String)}.\n     * \n     * @return Returns a new String of the form \"left top right bottom\"\n     ",
    "links" : [ "#unflattenFromString" ]
  }, {
    "name" : "public static Rect unflattenFromString(@Nullable String str)",
    "returnType" : "Rect",
    "comment" : "\n     * Returns a Rect from a string of the form returned by {@link #flattenToString},\n     * or null if the string is not of that form.\n     ",
    "links" : [ "#flattenToString" ]
  }, {
    "name" : "public void printShortString(@NonNull PrintWriter pw)",
    "returnType" : "void",
    "comment" : "\n     * Print short representation to given writer.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void dumpDebug(@NonNull ProtoOutputStream protoOutputStream, long fieldId)",
    "returnType" : "void",
    "comment" : "\n     * Write to a protocol buffer output stream.\n     * Protocol buffer message definition at {@link android.graphics.RectProto}\n     *\n     * @param protoOutputStream Stream to write the Rect object to.\n     * @param fieldId           Field Id of the Rect as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.graphics.RectProto" ]
  }, {
    "name" : "public void readFromProto(@NonNull ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException",
    "returnType" : "void",
    "comment" : "\n     * Read from a protocol buffer input stream.\n     * Protocol buffer message definition at {@link android.graphics.RectProto}\n     *\n     * @param proto     Stream to read the Rect object from.\n     * @param fieldId   Field Id of the Rect as defined in the parent message\n     * @hide\n     ",
    "links" : [ "android.graphics.RectProto" ]
  }, {
    "name" : "public final boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if the rectangle is empty (left >= right or top >= bottom)\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int width()",
    "returnType" : "int",
    "comment" : "\n     * @return the rectangle's width. This does not check for a valid rectangle\n     * (i.e. left <= right) so the result may be negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int height()",
    "returnType" : "int",
    "comment" : "\n     * @return the rectangle's height. This does not check for a valid rectangle\n     * (i.e. top <= bottom) so the result may be negative.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int centerX()",
    "returnType" : "int",
    "comment" : "\n     * @return the horizontal center of the rectangle. If the computed value\n     *         is fractional, this method returns the largest integer that is\n     *         less than the computed value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final int centerY()",
    "returnType" : "int",
    "comment" : "\n     * @return the vertical center of the rectangle. If the computed value\n     *         is fractional, this method returns the largest integer that is\n     *         less than the computed value.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float exactCenterX()",
    "returnType" : "float",
    "comment" : "\n     * @return the exact horizontal center of the rectangle as a float.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final float exactCenterY()",
    "returnType" : "float",
    "comment" : "\n     * @return the exact vertical center of the rectangle as a float.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setEmpty()",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle to (0,0,0,0)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle's coordinates to the specified values. Note: no range\n     * checking is performed, so it is up to the caller to ensure that\n     * left <= right and top <= bottom.\n     *\n     * @param left   The X coordinate of the left side of the rectangle\n     * @param top    The Y coordinate of the top of the rectangle\n     * @param right  The X coordinate of the right side of the rectangle\n     * @param bottom The Y coordinate of the bottom of the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void set(@NonNull Rect src)",
    "returnType" : "void",
    "comment" : "\n     * Copy the coordinates from src into this rectangle.\n     *\n     * @param src The rectangle whose coordinates are copied into this\n     *           rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offset(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Offset the rectangle by adding dx to its left and right coordinates, and\n     * adding dy to its top and bottom coordinates.\n     *\n     * @param dx The amount to add to the rectangle's left and right coordinates\n     * @param dy The amount to add to the rectangle's top and bottom coordinates\n     ",
    "links" : [ ]
  }, {
    "name" : "public void offsetTo(int newLeft, int newTop)",
    "returnType" : "void",
    "comment" : "\n     * Offset the rectangle to a specific (left, top) position,\n     * keeping its width and height the same.\n     *\n     * @param newLeft   The new \"left\" coordinate for the rectangle\n     * @param newTop    The new \"top\" coordinate for the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inset(int dx, int dy)",
    "returnType" : "void",
    "comment" : "\n     * Inset the rectangle by (dx,dy). If dx is positive, then the sides are\n     * moved inwards, making the rectangle narrower. If dx is negative, then the\n     * sides are moved outwards, making the rectangle wider. The same holds true\n     * for dy and the top and bottom.\n     *\n     * @param dx The amount to add(subtract) from the rectangle's left(right)\n     * @param dy The amount to add(subtract) from the rectangle's top(bottom)\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inset(@NonNull Rect insets)",
    "returnType" : "void",
    "comment" : "\n     * Insets the rectangle on all sides specified by the dimensions of the {@code insets}\n     * rectangle.\n     * @hide\n     * @param insets The rectangle specifying the insets on all side.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inset(Insets insets)",
    "returnType" : "void",
    "comment" : "\n     * Insets the rectangle on all sides specified by the dimensions of {@code insets}.\n     * @hide\n     * @param insets The insets to inset the rect by.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void inset(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Insets the rectangle on all sides specified by the insets.\n     * @hide\n     * @param left The amount to add from the rectangle's left\n     * @param top The amount to add from the rectangle's top\n     * @param right The amount to subtract from the rectangle's right\n     * @param bottom The amount to subtract from the rectangle's bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int x, int y)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if (x,y) is inside the rectangle. The left and top are\n     * considered to be inside, while the right and bottom are not. This means\n     * that for a x,y to be contained: left <= x < right and top <= y < bottom.\n     * An empty rectangle never contains any point.\n     *\n     * @param x The X coordinate of the point being tested for containment\n     * @param y The Y coordinate of the point being tested for containment\n     * @return true iff (x,y) are contained by the rectangle, where containment\n     *              means left <= x < right and top <= y < bottom\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the 4 specified sides of a rectangle are inside or equal\n     * to this rectangle. i.e. is this rectangle a superset of the specified\n     * rectangle. An empty rectangle never contains another rectangle.\n     *\n     * @param left The left side of the rectangle being tested for containment\n     * @param top The top of the rectangle being tested for containment\n     * @param right The right side of the rectangle being tested for containment\n     * @param bottom The bottom of the rectangle being tested for containment\n     * @return true iff the the 4 specified sides of a rectangle are inside or\n     *              equal to this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the specified rectangle r is inside or equal to this\n     * rectangle. An empty rectangle never contains another rectangle.\n     *\n     * @param r The rectangle being tested for containment.\n     * @return true iff the specified rectangle r is inside or equal to this\n     *              rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersect(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * If the rectangle specified by left,top,right,bottom intersects this\n     * rectangle, return true and set this rectangle to that intersection,\n     * otherwise return false and do not change this rectangle. No check is\n     * performed to see if either rectangle is empty. Note: To just test for\n     * intersection, use {@link #intersects(Rect, Rect)}.\n     *\n     * @param left The left side of the rectangle being intersected with this\n     *             rectangle\n     * @param top The top of the rectangle being intersected with this rectangle\n     * @param right The right side of the rectangle being intersected with this\n     *              rectangle.\n     * @param bottom The bottom of the rectangle being intersected with this\n     *             rectangle.\n     * @return true if the specified rectangle and this rectangle intersect\n     *              (and this rectangle is then set to that intersection) else\n     *              return false and do not change this rectangle.\n     ",
    "links" : [ "#intersects" ]
  }, {
    "name" : "public boolean intersect(@NonNull Rect r)",
    "returnType" : "boolean",
    "comment" : "\n     * If the specified rectangle intersects this rectangle, return true and set\n     * this rectangle to that intersection, otherwise return false and do not\n     * change this rectangle. No check is performed to see if either rectangle\n     * is empty. To just test for intersection, use intersects()\n     *\n     * @param r The rectangle being intersected with this rectangle.\n     * @return true if the specified rectangle and this rectangle intersect\n     *              (and this rectangle is then set to that intersection) else\n     *              return false and do not change this rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void intersectUnchecked(@NonNull Rect other)",
    "returnType" : "void",
    "comment" : "\n     * If the specified rectangle intersects this rectangle, set this rectangle to that\n     * intersection, otherwise set this rectangle to the empty rectangle.\n     * @see #inset(int, int, int, int) but without checking if the rects overlap.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean setIntersect(@NonNull Rect a, @NonNull Rect b)",
    "returnType" : "boolean",
    "comment" : "\n     * If rectangles a and b intersect, return true and set this rectangle to\n     * that intersection, otherwise return false and do not change this\n     * rectangle. No check is performed to see if either rectangle is empty.\n     * To just test for intersection, use intersects()\n     *\n     * @param a The first rectangle being intersected with\n     * @param b The second rectangle being intersected with\n     * @return true iff the two specified rectangles intersect. If they do, set\n     *              this rectangle to that intersection. If they do not, return\n     *              false and do not change this rectangle.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean intersects(int left, int top, int right, int bottom)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this rectangle intersects the specified rectangle.\n     * In no event is this rectangle modified. No check is performed to see\n     * if either rectangle is empty. To record the intersection, use intersect()\n     * or setIntersect().\n     *\n     * @param left The left side of the rectangle being tested for intersection\n     * @param top The top of the rectangle being tested for intersection\n     * @param right The right side of the rectangle being tested for\n     *              intersection\n     * @param bottom The bottom of the rectangle being tested for intersection\n     * @return true iff the specified rectangle intersects this rectangle. In\n     *              no event is this rectangle modified.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static boolean intersects(@NonNull Rect a, @NonNull Rect b)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true iff the two specified rectangles intersect. In no event are\n     * either of the rectangles modified. To record the intersection,\n     * use {@link #intersect(Rect)} or {@link #setIntersect(Rect, Rect)}.\n     *\n     * @param a The first rectangle being tested for intersection\n     * @param b The second rectangle being tested for intersection\n     * @return true iff the two specified rectangles intersect. In no event are\n     *              either of the rectangles modified.\n     ",
    "links" : [ "#intersect", "#setIntersect" ]
  }, {
    "name" : "public void union(int left, int top, int right, int bottom)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the specified rectangle. If the\n     * specified rectangle is empty, nothing is done. If this rectangle is empty\n     * it is set to the specified rectangle.\n     *\n     * @param left The left edge being unioned with this rectangle\n     * @param top The top edge being unioned with this rectangle\n     * @param right The right edge being unioned with this rectangle\n     * @param bottom The bottom edge being unioned with this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void union(@NonNull Rect r)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the specified rectangle. If the\n     * specified rectangle is empty, nothing is done. If this rectangle is empty\n     * it is set to the specified rectangle.\n     *\n     * @param r The rectangle being unioned with this rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void union(int x, int y)",
    "returnType" : "void",
    "comment" : "\n     * Update this Rect to enclose itself and the [x,y] coordinate. There is no\n     * check to see that this rectangle is non-empty.\n     *\n     * @param x The x coordinate of the point to add to the rectangle\n     * @param y The y coordinate of the point to add to the rectangle\n     ",
    "links" : [ ]
  }, {
    "name" : "public void sort()",
    "returnType" : "void",
    "comment" : "\n     * Swap top/bottom or left/right if there are flipped (i.e. left > right\n     * and/or top > bottom). This can be called if\n     * the edges are computed separately, and may have crossed over each other.\n     * If the edges are already correct (i.e. left <= right and top <= bottom)\n     * then nothing is done.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int describeContents()",
    "returnType" : "int",
    "comment" : "\n     * Parcelable interface methods\n     ",
    "links" : [ ]
  }, {
    "name" : "public void writeToParcel(Parcel out, int flags)",
    "returnType" : "void",
    "comment" : "\n     * Write this rectangle to the specified parcel. To restore a rectangle from\n     * a parcel, use readFromParcel()\n     * @param out The parcel to write the rectangle's coordinates into\n     ",
    "links" : [ ]
  }, {
    "name" : "public void readFromParcel(@NonNull Parcel in)",
    "returnType" : "void",
    "comment" : "\n     * Set the rectangle's coordinates from the data stored in the specified\n     * parcel. To write a rectangle to a parcel, call writeToParcel().\n     *\n     * @param in The parcel to read the rectangle's coordinates from\n     ",
    "links" : [ ]
  }, {
    "name" : "public void scale(float scale)",
    "returnType" : "void",
    "comment" : "\n     * Scales up the rect by the given scale.\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "variableNames" : [ "left", "top", "right", "bottom", "CREATOR" ],
  "methodNames" : [ "public static Rect copyOrNull(@Nullable Rect r)", "public boolean equals(Object o)", "public int hashCode()", "public String toString()", "public String toShortString()", "public String toShortString(@NonNull StringBuilder sb)", "public String flattenToString()", "public static Rect unflattenFromString(@Nullable String str)", "public void printShortString(@NonNull PrintWriter pw)", "public void dumpDebug(@NonNull ProtoOutputStream protoOutputStream, long fieldId)", "public void readFromProto(@NonNull ProtoInputStream proto, long fieldId) throws IOException, WireTypeMismatchException", "public final boolean isEmpty()", "public final int width()", "public final int height()", "public final int centerX()", "public final int centerY()", "public final float exactCenterX()", "public final float exactCenterY()", "public void setEmpty()", "public void set(int left, int top, int right, int bottom)", "public void set(@NonNull Rect src)", "public void offset(int dx, int dy)", "public void offsetTo(int newLeft, int newTop)", "public void inset(int dx, int dy)", "public void inset(@NonNull Rect insets)", "public void inset(Insets insets)", "public void inset(int left, int top, int right, int bottom)", "public boolean contains(int x, int y)", "public boolean contains(int left, int top, int right, int bottom)", "public boolean contains(@NonNull Rect r)", "public boolean intersect(int left, int top, int right, int bottom)", "public boolean intersect(@NonNull Rect r)", "public void intersectUnchecked(@NonNull Rect other)", "public boolean setIntersect(@NonNull Rect a, @NonNull Rect b)", "public boolean intersects(int left, int top, int right, int bottom)", "public static boolean intersects(@NonNull Rect a, @NonNull Rect b)", "public void union(int left, int top, int right, int bottom)", "public void union(@NonNull Rect r)", "public void union(int x, int y)", "public void sort()", "public int describeContents()", "public void writeToParcel(Parcel out, int flags)", "public void readFromParcel(@NonNull Parcel in)", "public void scale(float scale)" ]
}