{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/hardware/camera2/DngCreator.java",
  "packageName" : "android.hardware.camera2",
  "className" : "DngCreator",
  "comment" : "\n * The {@link DngCreator} class provides functions to write raw pixel data as a DNG file.\n *\n * <p>\n * This class is designed to be used with the {@link android.graphics.ImageFormat#RAW_SENSOR}\n * buffers available from {@link android.hardware.camera2.CameraDevice}, or with Bayer-type raw\n * pixel data that is otherwise generated by an application.  The DNG metadata tags will be\n * generated from a {@link android.hardware.camera2.CaptureResult} object or set directly.\n * </p>\n *\n * <p>\n * The DNG file format is a cross-platform file format that is used to store pixel data from\n * camera sensors with minimal pre-processing applied.  DNG files allow for pixel data to be\n * defined in a user-defined colorspace, and have associated metadata that allow for this\n * pixel data to be converted to the standard CIE XYZ colorspace during post-processing.\n * </p>\n *\n * <p>\n * For more information on the DNG file format and associated metadata, please refer to the\n * <a href=\n * \"https://wwwimages2.adobe.com/content/dam/Adobe/en/products/photoshop/pdfs/dng_spec_1.4.0.0.pdf\">\n * Adobe DNG 1.4.0.0 specification</a>.\n * </p>\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "MAX_THUMBNAIL_DIMENSION",
    "type" : "int",
    "comment" : " max pixel dimension for TIFF/EP",
    "links" : [ ]
  }, {
    "name" : "GPS_LAT_REF_NORTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_LAT_REF_SOUTH",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_LONG_REF_EAST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_LONG_REF_WEST",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "GPS_DATE_FORMAT_STR",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "TIFF_DATETIME_FORMAT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "sExifGPSDateStamp",
    "type" : "DateFormat",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mGPSTimeStampCalendar",
    "type" : "Calendar",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DEFAULT_PIXEL_STRIDE",
    "type" : "int",
    "comment" : " bytes per sample",
    "links" : [ ]
  }, {
    "name" : "BYTES_PER_RGB_PIX",
    "type" : "int",
    "comment" : " byts per pixel",
    "links" : [ ]
  }, {
    "name" : "TAG_ORIENTATION_UNKNOWN",
    "type" : "int",
    "comment" : " TIFF tag values needed to map between public API and TIFF spec",
    "links" : [ ]
  }, {
    "name" : "mNativeContext",
    "type" : "long",
    "comment" : "\n     * This field is used by native code, do not access or modify.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public DngCreator setOrientation(int orientation)",
    "returnType" : "DngCreator",
    "comment" : "\n     * Set the orientation value to write.\n     *\n     * <p>\n     * This will be written as the TIFF \"Orientation\" tag {@code (0x0112)}.\n     * Calling this will override any prior settings for this tag.\n     * </p>\n     *\n     * @param orientation the orientation value to set, one of:\n     *                    <ul>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_NORMAL}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_FLIP_HORIZONTAL}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_ROTATE_180}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_FLIP_VERTICAL}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_TRANSPOSE}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_ROTATE_90}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_TRANSVERSE}</li>\n     *                      <li>{@link android.media.ExifInterface#ORIENTATION_ROTATE_270}</li>\n     *                    </ul>\n     * @return this {@link #DngCreator} object.\n     ",
    "links" : [ "android.media.ExifInterface#ORIENTATION_NORMAL", "android.media.ExifInterface#ORIENTATION_FLIP_HORIZONTAL", "android.media.ExifInterface#ORIENTATION_ROTATE_180", "android.media.ExifInterface#ORIENTATION_FLIP_VERTICAL", "android.media.ExifInterface#ORIENTATION_TRANSPOSE", "android.media.ExifInterface#ORIENTATION_ROTATE_90", "android.media.ExifInterface#ORIENTATION_TRANSVERSE", "android.media.ExifInterface#ORIENTATION_ROTATE_270", "#DngCreator" ]
  }, {
    "name" : "public DngCreator setThumbnail(@NonNull Bitmap pixels)",
    "returnType" : "DngCreator",
    "comment" : "\n     * Set the thumbnail image.\n     *\n     * <p>\n     * Pixel data will be converted to a Baseline TIFF RGB image, with 8 bits per color channel.\n     * The alpha channel will be discarded.  Thumbnail images with a dimension larger than\n     * {@link #MAX_THUMBNAIL_DIMENSION} will be rejected.\n     * </p>\n     *\n     * @param pixels a {@link android.graphics.Bitmap} of pixel data.\n     * @return this {@link #DngCreator} object.\n     * @throws java.lang.IllegalArgumentException if the given thumbnail image has a dimension\n     *      larger than {@link #MAX_THUMBNAIL_DIMENSION}.\n     ",
    "links" : [ "#MAX_THUMBNAIL_DIMENSION", "android.graphics.Bitmap", "#DngCreator", "#MAX_THUMBNAIL_DIMENSION" ]
  }, {
    "name" : "public DngCreator setThumbnail(@NonNull Image pixels)",
    "returnType" : "DngCreator",
    "comment" : "\n     * Set the thumbnail image.\n     *\n     * <p>\n     * Pixel data is interpreted as a {@link android.graphics.ImageFormat#YUV_420_888} image.\n     * Thumbnail images with a dimension larger than {@link #MAX_THUMBNAIL_DIMENSION} will be\n     * rejected.\n     * </p>\n     *\n     * @param pixels an {@link android.media.Image} object with the format\n     *               {@link android.graphics.ImageFormat#YUV_420_888}.\n     * @return this {@link #DngCreator} object.\n     * @throws java.lang.IllegalArgumentException if the given thumbnail image has a dimension\n     *      larger than {@link #MAX_THUMBNAIL_DIMENSION}.\n     ",
    "links" : [ "android.graphics.ImageFormat#YUV_420_888", "#MAX_THUMBNAIL_DIMENSION", "android.media.Image", "android.graphics.ImageFormat#YUV_420_888", "#DngCreator", "#MAX_THUMBNAIL_DIMENSION" ]
  }, {
    "name" : "public DngCreator setLocation(@NonNull Location location)",
    "returnType" : "DngCreator",
    "comment" : "\n     * Set image location metadata.\n     *\n     * <p>\n     * The given location object must contain at least a valid time, latitude, and longitude\n     * (equivalent to the values returned by {@link android.location.Location#getTime()},\n     * {@link android.location.Location#getLatitude()}, and\n     * {@link android.location.Location#getLongitude()} methods).\n     * </p>\n     *\n     * @param location an {@link android.location.Location} object to set.\n     * @return this {@link #DngCreator} object.\n     *\n     * @throws java.lang.IllegalArgumentException if the given location object doesn't\n     *          contain enough information to set location metadata.\n     ",
    "links" : [ "android.location.Location#getTime", "android.location.Location#getLatitude", "android.location.Location#getLongitude", "android.location.Location", "#DngCreator" ]
  }, {
    "name" : "public DngCreator setDescription(@NonNull String description)",
    "returnType" : "DngCreator",
    "comment" : "\n     * Set the user description string to write.\n     *\n     * <p>\n     * This is equivalent to setting the TIFF \"ImageDescription\" tag {@code (0x010E)}.\n     * </p>\n     *\n     * @param description the user description string.\n     * @return this {@link #DngCreator} object.\n     ",
    "links" : [ "#DngCreator" ]
  }, {
    "name" : "public void writeInputStream(@NonNull OutputStream dngOutput, @NonNull Size size, @NonNull InputStream pixels, @IntRange(from = 0) long offset) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the {@link android.graphics.ImageFormat#RAW_SENSOR} pixel data to a DNG file with\n     * the currently configured metadata.\n     *\n     * <p>\n     * Raw pixel data must have 16 bits per pixel, and the input must contain at least\n     * {@code offset + 2 * width * height)} bytes.  The width and height of\n     * the input are taken from the width and height set in the {@link DngCreator} metadata tags,\n     * and will typically be equal to the width and height of\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE}.  Prior to\n     * API level 23, this was always the same as\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE}.\n     * The pixel layout in the input is determined from the reported color filter arrangement (CFA)\n     * set in {@link CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT}.  If insufficient\n     * metadata is available to write a well-formatted DNG file, an\n     * {@link java.lang.IllegalStateException} will be thrown.\n     * </p>\n     *\n     * @param dngOutput an {@link java.io.OutputStream} to write the DNG file to.\n     * @param size the {@link Size} of the image to write, in pixels.\n     * @param pixels an {@link java.io.InputStream} of pixel data to write.\n     * @param offset the offset of the raw image in bytes.  This indicates how many bytes will\n     *               be skipped in the input before any pixel data is read.\n     *\n     * @throws IOException if an error was encountered in the input or output stream.\n     * @throws java.lang.IllegalStateException if not enough metadata information has been\n     *          set to write a well-formatted DNG file.\n     * @throws java.lang.IllegalArgumentException if the size passed in does not match the\n     ",
    "links" : [ "android.graphics.ImageFormat#RAW_SENSOR", "DngCreator", "CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE", "CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE", "CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "java.lang.IllegalStateException", "java.io.OutputStream", "Size", "java.io.InputStream" ]
  }, {
    "name" : "public void writeByteBuffer(@NonNull OutputStream dngOutput, @NonNull Size size, @NonNull ByteBuffer pixels, @IntRange(from = 0) long offset) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the {@link android.graphics.ImageFormat#RAW_SENSOR} pixel data to a DNG file with\n     * the currently configured metadata.\n     *\n     * <p>\n     * Raw pixel data must have 16 bits per pixel, and the input must contain at least\n     * {@code offset + 2 * width * height)} bytes.  The width and height of\n     * the input are taken from the width and height set in the {@link DngCreator} metadata tags,\n     * and will typically be equal to the width and height of\n     * {@link CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE}.  Prior to\n     * API level 23, this was always the same as\n     * {@link CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE}.\n     * The pixel layout in the input is determined from the reported color filter arrangement (CFA)\n     * set in {@link CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT}.  If insufficient\n     * metadata is available to write a well-formatted DNG file, an\n     * {@link java.lang.IllegalStateException} will be thrown.\n     * </p>\n     *\n     * <p>\n     * Any mark or limit set on this {@link ByteBuffer} is ignored, and will be cleared by this\n     * method.\n     * </p>\n     *\n     * @param dngOutput an {@link java.io.OutputStream} to write the DNG file to.\n     * @param size the {@link Size} of the image to write, in pixels.\n     * @param pixels an {@link java.nio.ByteBuffer} of pixel data to write.\n     * @param offset the offset of the raw image in bytes.  This indicates how many bytes will\n     *               be skipped in the input before any pixel data is read.\n     *\n     * @throws IOException if an error was encountered in the input or output stream.\n     * @throws java.lang.IllegalStateException if not enough metadata information has been\n     *          set to write a well-formatted DNG file.\n     ",
    "links" : [ "android.graphics.ImageFormat#RAW_SENSOR", "DngCreator", "CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE", "CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE", "CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT", "java.lang.IllegalStateException", "ByteBuffer", "java.io.OutputStream", "Size", "java.nio.ByteBuffer" ]
  }, {
    "name" : "public void writeImage(@NonNull OutputStream dngOutput, @NonNull Image pixels) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Write the pixel data to a DNG file with the currently configured metadata.\n     *\n     * <p>\n     * For this method to succeed, the {@link android.media.Image} input must contain\n     * {@link android.graphics.ImageFormat#RAW_SENSOR} pixel data, otherwise an\n     * {@link java.lang.IllegalArgumentException} will be thrown.\n     * </p>\n     *\n     * @param dngOutput an {@link java.io.OutputStream} to write the DNG file to.\n     * @param pixels an {@link android.media.Image} to write.\n     *\n     * @throws java.io.IOException if an error was encountered in the output stream.\n     * @throws java.lang.IllegalArgumentException if an image with an unsupported format was used.\n     * @throws java.lang.IllegalStateException if not enough metadata information has been\n     *          set to write a well-formatted DNG file.\n     ",
    "links" : [ "android.media.Image", "android.graphics.ImageFormat#RAW_SENSOR", "java.lang.IllegalArgumentException", "java.io.OutputStream", "android.media.Image" ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "protected void finalize() throws Throwable",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void writeByteBuffer(int width, int height, ByteBuffer pixels, OutputStream dngOutput, int pixelStride, int rowStride, long offset) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Offset, rowStride, and pixelStride are given in bytes.  Height and width are given in pixels.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void yuvToRgb(byte[] yuvData, int outOffset, byte[] rgbOut)",
    "returnType" : "void",
    "comment" : "\n     * Convert a single YUV pixel to RGB.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void colorToRgb(int color, int outOffset, byte[] rgbOut)",
    "returnType" : "void",
    "comment" : "\n     * Convert a single {@link Color} pixel to RGB.\n     ",
    "links" : [ "Color" ]
  }, {
    "name" : "private static ByteBuffer convertToRGB(Image yuvImage)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Generate a direct RGB {@link ByteBuffer} from a YUV420_888 {@link Image}.\n     ",
    "links" : [ "ByteBuffer", "Image" ]
  }, {
    "name" : "private static ByteBuffer convertToRGB(Bitmap argbBitmap)",
    "returnType" : "ByteBuffer",
    "comment" : "\n     * Generate a direct RGB {@link ByteBuffer} from a {@link Bitmap}.\n     ",
    "links" : [ "ByteBuffer", "Bitmap" ]
  }, {
    "name" : "private static int[] toExifLatLong(double value)",
    "returnType" : "int[]",
    "comment" : "\n     * Convert coordinate to EXIF GPS tag format.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeClassInit()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeInit(CameraMetadataNative nativeCharacteristics, CameraMetadataNative nativeResult, String captureTime)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeDestroy()",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeSetOrientation(int orientation)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeSetDescription(String description)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeSetGpsTags(int[] latTag, String latRef, int[] longTag, String longRef, String dateTag, int[] timeTag)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeSetThumbnail(ByteBuffer buffer, int width, int height)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeWriteImage(OutputStream out, int width, int height, ByteBuffer rawBuffer, int rowStride, int pixStride, long offset, boolean isDirect) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private native synchronized void nativeWriteInputStream(OutputStream out, InputStream rawStream, int width, int height, long offset) throws IOException",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "MAX_THUMBNAIL_DIMENSION", "GPS_LAT_REF_NORTH", "GPS_LAT_REF_SOUTH", "GPS_LONG_REF_EAST", "GPS_LONG_REF_WEST", "GPS_DATE_FORMAT_STR", "TIFF_DATETIME_FORMAT", "sExifGPSDateStamp", "mGPSTimeStampCalendar", "DEFAULT_PIXEL_STRIDE", "BYTES_PER_RGB_PIX", "TAG_ORIENTATION_UNKNOWN", "mNativeContext" ],
  "methodNames" : [ "public DngCreator setOrientation(int orientation)", "public DngCreator setThumbnail(@NonNull Bitmap pixels)", "public DngCreator setThumbnail(@NonNull Image pixels)", "public DngCreator setLocation(@NonNull Location location)", "public DngCreator setDescription(@NonNull String description)", "public void writeInputStream(@NonNull OutputStream dngOutput, @NonNull Size size, @NonNull InputStream pixels, @IntRange(from = 0) long offset) throws IOException", "public void writeByteBuffer(@NonNull OutputStream dngOutput, @NonNull Size size, @NonNull ByteBuffer pixels, @IntRange(from = 0) long offset) throws IOException", "public void writeImage(@NonNull OutputStream dngOutput, @NonNull Image pixels) throws IOException", "public void close()", "protected void finalize() throws Throwable", "private void writeByteBuffer(int width, int height, ByteBuffer pixels, OutputStream dngOutput, int pixelStride, int rowStride, long offset) throws IOException", "private static void yuvToRgb(byte[] yuvData, int outOffset, byte[] rgbOut)", "private static void colorToRgb(int color, int outOffset, byte[] rgbOut)", "private static ByteBuffer convertToRGB(Image yuvImage)", "private static ByteBuffer convertToRGB(Bitmap argbBitmap)", "private static int[] toExifLatLong(double value)", "private static native void nativeClassInit()", "private native synchronized void nativeInit(CameraMetadataNative nativeCharacteristics, CameraMetadataNative nativeResult, String captureTime)", "private native synchronized void nativeDestroy()", "private native synchronized void nativeSetOrientation(int orientation)", "private native synchronized void nativeSetDescription(String description)", "private native synchronized void nativeSetGpsTags(int[] latTag, String latRef, int[] longTag, String longRef, String dateTag, int[] timeTag)", "private native synchronized void nativeSetThumbnail(ByteBuffer buffer, int width, int height)", "private native synchronized void nativeWriteImage(OutputStream out, int width, int height, ByteBuffer rawBuffer, int rowStride, int pixStride, long offset, boolean isDirect) throws IOException", "private native synchronized void nativeWriteInputStream(OutputStream out, InputStream rawStream, int width, int height, long offset) throws IOException" ]
}