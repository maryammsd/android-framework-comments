{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/impl/Normalizer2Impl.java",
  "packageName" : "android.icu.impl",
  "className" : "UTF16Plus",
  "comment" : "\n     * @hide Only a subset of ICU is exposed in Android\n     ",
  "links" : [ ],
  "variables" : [ ],
  "methods" : [ {
    "name" : "public static boolean isLeadSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\n         * Is this code point a lead surrogate (U+d800..U+dbff)?\n         * @param c code unit or code point\n         * @return true or false\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isTrailSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\n         * Is this code point a trail surrogate (U+dc00..U+dfff)?\n         * @param c code unit or code point\n         * @return true or false\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSurrogate(int c)",
    "returnType" : "boolean",
    "comment" : "\n         * Is this code point a surrogate (U+d800..U+dfff)?\n         * @param c code unit or code point\n         * @return true or false\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean isSurrogateLead(int c)",
    "returnType" : "boolean",
    "comment" : "\n         * Assuming c is a surrogate code point (UTF16.isSurrogate(c)),\n         * is it a lead surrogate?\n         * @param c code unit or code point\n         * @return true or false\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean equal(CharSequence s1, CharSequence s2)",
    "returnType" : "boolean",
    "comment" : "\n         * Compares two CharSequence objects for binary equality.\n         * @param s1 first sequence\n         * @param s2 second sequence\n         * @return true if s1 contains the same text as s2\n         ",
    "links" : [ ]
  }, {
    "name" : "public static boolean equal(CharSequence s1, int start1, int limit1, CharSequence s2, int start2, int limit2)",
    "returnType" : "boolean",
    "comment" : "\n         * Compares two CharSequence subsequences for binary equality.\n         * @param s1 first sequence\n         * @param start1 start offset in first sequence\n         * @param limit1 limit offset in first sequence\n         * @param s2 second sequence\n         * @param start2 start offset in second sequence\n         * @param limit2 limit offset in second sequence\n         * @return true if s1.subSequence(start1, limit1) contains the same text\n         *              as s2.subSequence(start2, limit2)\n         ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static boolean isLeadSurrogate(int c)", "public static boolean isTrailSurrogate(int c)", "public static boolean isSurrogate(int c)", "public static boolean isSurrogateLead(int c)", "public static boolean equal(CharSequence s1, CharSequence s2)", "public static boolean equal(CharSequence s1, int start1, int limit1, CharSequence s2, int start2, int limit2)" ],
  "variableNames" : [ ]
}