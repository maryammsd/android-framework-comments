{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/security/cert/CertPathBuilder.java",
  "packageName" : "java.security.cert",
  "className" : "CertPathBuilder",
  "comment" : "\n * A class for building certification paths (also known as certificate chains).\n * <p>\n * This class uses a provider-based architecture.\n * To create a {@code CertPathBuilder}, call\n * one of the static {@code getInstance} methods, passing in the\n * algorithm name of the {@code CertPathBuilder} desired and optionally\n * the name of the provider desired.\n *\n * <p>Once a {@code CertPathBuilder} object has been created, certification\n * paths can be constructed by calling the {@link #build build} method and\n * passing it an algorithm-specific set of parameters. If successful, the\n * result (including the {@code CertPath} that was built) is returned\n * in an object that implements the {@code CertPathBuilderResult}\n * interface.\n *\n * <p>The {@link #getRevocationChecker} method allows an application to specify\n * additional algorithm-specific parameters and options used by the\n * {@code CertPathBuilder} when checking the revocation status of certificates.\n * Here is an example demonstrating how it is used with the PKIX algorithm:\n *\n * <pre>\n * CertPathBuilder cpb = CertPathBuilder.getInstance(\"PKIX\");\n * PKIXRevocationChecker rc = (PKIXRevocationChecker)cpb.getRevocationChecker();\n * rc.setOptions(EnumSet.of(Option.PREFER_CRLS));\n * params.addCertPathChecker(rc);\n * CertPathBuilderResult cpbr = cpb.build(params);\n * </pre>\n *\n * <p>Every implementation of the Java platform is required to support the\n * following standard {@code CertPathBuilder} algorithm:\n * <ul>\n * <li>{@code PKIX}</li>\n * </ul>\n * This algorithm is described in the <a href=\n * \"{@docRoot}/../specs/security/standard-names.html#certpathbuilder-algorithms\">\n * CertPathBuilder section</a> of the\n * Java Security Standard Algorithm Names Specification.\n * Consult the release documentation for your implementation to see if any\n * other algorithms are supported.\n *\n * <p>\n * <b>Concurrent Access</b>\n * <p>\n * The static methods of this class are guaranteed to be thread-safe.\n * Multiple threads may concurrently invoke the static methods defined in\n * this class with no ill effects.\n * <p>\n * However, this is not true for the non-static methods defined by this class.\n * Unless otherwise documented by a specific provider, threads that need to\n * access a single {@code CertPathBuilder} instance concurrently should\n * synchronize amongst themselves and provide the necessary locking. Multiple\n * threads each manipulating a different {@code CertPathBuilder} instance\n * need not synchronize.\n *\n * @see CertPath\n *\n * @since       1.4\n * @author      Sean Mullan\n * @author      Yassir Elley\n ",
  "links" : [ "#getRevocationChecker", "#build" ],
  "variables" : [ {
    "name" : "CPB_TYPE",
    "type" : "String",
    "comment" : "\n     * Constant to lookup in the Security properties file to determine\n     * the default certpathbuilder type. In the Security properties file,\n     * the default certpathbuilder type is given as:\n     * <pre>\n     * certpathbuilder.type=PKIX\n     * </pre>\n     ",
    "links" : [ ]
  }, {
    "name" : "builderSpi",
    "type" : "CertPathBuilderSpi",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "provider",
    "type" : "Provider",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "algorithm",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static CertPathBuilder getInstance(String algorithm) throws NoSuchAlgorithmException",
    "returnType" : "CertPathBuilder",
    "comment" : "\n     * Returns a {@code CertPathBuilder} object that implements the\n     * specified algorithm.\n     *\n     * <p> This method traverses the list of registered security Providers,\n     * starting with the most preferred Provider.\n     * A new CertPathBuilder object encapsulating the\n     * CertPathBuilderSpi implementation from the first\n     * Provider that supports the specified algorithm is returned.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @implNote\n     * The JDK Reference Implementation additionally uses the\n     * {@code jdk.security.provider.preferred}\n     * {@link Security#getProperty(String) Security} property to determine\n     * the preferred provider order for the specified algorithm. This\n     * may be different than the order of providers returned by\n     * {@link Security#getProviders() Security.getProviders()}.\n     *\n     * @param algorithm the name of the requested {@code CertPathBuilder}\n     *  algorithm.  See the CertPathBuilder section in the <a href=\n     *  \"{@docRoot}/../specs/security/standard-names.html#certpathbuilder-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @return a {@code CertPathBuilder} object that implements the\n     *         specified algorithm\n     *\n     * @throws NoSuchAlgorithmException if no {@code Provider} supports a\n     *         {@code CertPathBuilderSpi} implementation for the\n     *         specified algorithm\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProperty(String)", "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static CertPathBuilder getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException",
    "returnType" : "CertPathBuilder",
    "comment" : "\n     * Returns a {@code CertPathBuilder} object that implements the\n     * specified algorithm.\n     *\n     * <p> A new CertPathBuilder object encapsulating the\n     * CertPathBuilderSpi implementation from the specified provider\n     * is returned.  The specified provider must be registered\n     * in the security provider list.\n     *\n     * <p> Note that the list of registered providers may be retrieved via\n     * the {@link Security#getProviders() Security.getProviders()} method.\n     *\n     * @param algorithm the name of the requested {@code CertPathBuilder}\n     *  algorithm.  See the CertPathBuilder section in the <a href=\n     *  \"{@docRoot}/../specs/security/standard-names.html#certpathbuilder-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the name of the provider.\n     *\n     * @return a {@code CertPathBuilder} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         {@code null} or empty\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertPathBuilderSpi}\n     *         implementation for the specified algorithm is not\n     *         available from the specified provider\n     *\n     * @throws NoSuchProviderException if the specified provider is not\n     *         registered in the security provider list\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ "java.security.Security#getProviders()" ]
  }, {
    "name" : "public static CertPathBuilder getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException",
    "returnType" : "CertPathBuilder",
    "comment" : "\n     * Returns a {@code CertPathBuilder} object that implements the\n     * specified algorithm.\n     *\n     * <p> A new CertPathBuilder object encapsulating the\n     * CertPathBuilderSpi implementation from the specified Provider\n     * object is returned.  Note that the specified Provider object\n     * does not have to be registered in the provider list.\n     *\n     * @param algorithm the name of the requested {@code CertPathBuilder}\n     *  algorithm.  See the CertPathBuilder section in the <a href=\n     *  \"{@docRoot}/../specs/security/standard-names.html#certpathbuilder-algorithms\">\n     * Java Security Standard Algorithm Names Specification</a>\n     * for information about standard algorithm names.\n     *\n     * @param provider the provider.\n     *\n     * @return a {@code CertPathBuilder} object that implements the\n     *         specified algorithm\n     *\n     * @throws IllegalArgumentException if the {@code provider} is\n     *         {@code null}\n     *\n     * @throws NoSuchAlgorithmException if a {@code CertPathBuilderSpi}\n     *         implementation for the specified algorithm is not available\n     *         from the specified {@code Provider} object\n     *\n     * @throws NullPointerException if {@code algorithm} is {@code null}\n     *\n     * @see java.security.Provider\n     ",
    "links" : [ ]
  }, {
    "name" : "public final Provider getProvider()",
    "returnType" : "Provider",
    "comment" : "\n     * Returns the provider of this {@code CertPathBuilder}.\n     *\n     * @return the provider of this {@code CertPathBuilder}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final String getAlgorithm()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the algorithm of this {@code CertPathBuilder}.\n     *\n     * @return the name of the algorithm of this {@code CertPathBuilder}\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException",
    "returnType" : "CertPathBuilderResult",
    "comment" : "\n     * Attempts to build a certification path using the specified algorithm\n     * parameter set.\n     *\n     * @param params the algorithm parameters\n     * @return the result of the build algorithm\n     * @throws CertPathBuilderException if the builder is unable to construct\n     *  a certification path that satisfies the specified parameters\n     * @throws InvalidAlgorithmParameterException if the specified parameters\n     * are inappropriate for this {@code CertPathBuilder}\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final String getDefaultType()",
    "returnType" : "String",
    "comment" : "\n     * Returns the default {@code CertPathBuilder} type as specified by\n     * the {@code certpathbuilder.type} security property, or the string\n     * {@literal \"PKIX\"} if no such property exists.\n     *\n     * <p>The default {@code CertPathBuilder} type can be used by\n     * applications that do not want to use a hard-coded type when calling one\n     * of the {@code getInstance} methods, and want to provide a default\n     * type in case a user does not specify its own.\n     *\n     * <p>The default {@code CertPathBuilder} type can be changed by\n     * setting the value of the {@code certpathbuilder.type} security property\n     * to the desired type.\n     *\n     * @see java.security.Security security properties\n     * @return the default {@code CertPathBuilder} type as specified\n     * by the {@code certpathbuilder.type} security property, or the string\n     * {@literal \"PKIX\"} if no such property exists.\n     ",
    "links" : [ ]
  }, {
    "name" : "public final CertPathChecker getRevocationChecker()",
    "returnType" : "CertPathChecker",
    "comment" : "\n     * Returns a {@code CertPathChecker} that the encapsulated\n     * {@code CertPathBuilderSpi} implementation uses to check the revocation\n     * status of certificates. A PKIX implementation returns objects of\n     * type {@code PKIXRevocationChecker}. Each invocation of this method\n     * returns a new instance of {@code CertPathChecker}.\n     *\n     * <p>The primary purpose of this method is to allow callers to specify\n     * additional input parameters and options specific to revocation checking.\n     * See the class description for an example.\n     *\n     * @return a {@code CertPathChecker}\n     * @throws UnsupportedOperationException if the service provider does not\n     *         support this method\n     * @since 1.8\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static CertPathBuilder getInstance(String algorithm) throws NoSuchAlgorithmException", "public static CertPathBuilder getInstance(String algorithm, String provider) throws NoSuchAlgorithmException, NoSuchProviderException", "public static CertPathBuilder getInstance(String algorithm, Provider provider) throws NoSuchAlgorithmException", "public final Provider getProvider()", "public final String getAlgorithm()", "public final CertPathBuilderResult build(CertPathParameters params) throws CertPathBuilderException, InvalidAlgorithmParameterException", "public static final String getDefaultType()", "public final CertPathChecker getRevocationChecker()" ],
  "variableNames" : [ "CPB_TYPE", "builderSpi", "provider", "algorithm" ]
}