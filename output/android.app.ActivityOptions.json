{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/app/ActivityOptions.java",
  "packageName" : "android.app",
  "className" : "ActivityOptions",
  "comment" : "\n * Helper class for building an options Bundle that can be used with\n * {@link android.content.Context#startActivity(android.content.Intent, android.os.Bundle)\n * Context.startActivity(Intent, Bundle)} and related methods.\n ",
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "EXTRA_USAGE_TIME_REPORT",
    "type" : "String",
    "comment" : "\n     * A long in the extras delivered by {@link #requestUsageTimeReport} that contains\n     * the total time (in ms) the user spent in the app flow.\n     ",
    "links" : [ "#requestUsageTimeReport" ]
  }, {
    "name" : "EXTRA_USAGE_TIME_REPORT_PACKAGES",
    "type" : "String",
    "comment" : "\n     * A Bundle in the extras delivered by {@link #requestUsageTimeReport} that contains\n     * detailed information about the time spent in each package associated with the app;\n     * each key is a package name, whose value is a long containing the time (in ms).\n     ",
    "links" : [ "#requestUsageTimeReport" ]
  }, {
    "name" : "KEY_PACKAGE_NAME",
    "type" : "String",
    "comment" : "\n     * The package name that created the options.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_BOUNDS",
    "type" : "String",
    "comment" : "\n     * The bounds (window size) that the activity should be launched in. Set to null explicitly for\n     * full screen. If the key is not found, previous bounds will be preserved.\n     * NOTE: This value is ignored on devices that don't have\n     * {@link android.content.pm.PackageManager#FEATURE_FREEFORM_WINDOW_MANAGEMENT} or\n     * {@link android.content.pm.PackageManager#FEATURE_PICTURE_IN_PICTURE} enabled.\n     * @hide\n     ",
    "links" : [ "android.content.pm.PackageManager#FEATURE_PICTURE_IN_PICTURE", "android.content.pm.PackageManager#FEATURE_FREEFORM_WINDOW_MANAGEMENT" ]
  }, {
    "name" : "KEY_ANIM_TYPE",
    "type" : "String",
    "comment" : "\n     * Type of animation that arguments specify.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_ENTER_RES_ID",
    "type" : "String",
    "comment" : "\n     * Custom enter animation resource ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_EXIT_RES_ID",
    "type" : "String",
    "comment" : "\n     * Custom exit animation resource ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_IN_PLACE_RES_ID",
    "type" : "String",
    "comment" : "\n     * Custom in-place animation resource ID.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_THUMBNAIL",
    "type" : "String",
    "comment" : "\n     * Bitmap for thumbnail animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_START_X",
    "type" : "String",
    "comment" : "\n     * Start X position of thumbnail animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_START_Y",
    "type" : "String",
    "comment" : "\n     * Start Y position of thumbnail animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_WIDTH",
    "type" : "String",
    "comment" : "\n     * Initial width of the animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_HEIGHT",
    "type" : "String",
    "comment" : "\n     * Initial height of the animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_START_LISTENER",
    "type" : "String",
    "comment" : "\n     * Callback for when animation is started.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIMATION_FINISHED_LISTENER",
    "type" : "String",
    "comment" : "\n     * Callback for when the last frame of the animation is played.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_ANIM_SPECS",
    "type" : "String",
    "comment" : "\n     * Descriptions of app transition animations to be played during the activity launch.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LOCK_TASK_MODE",
    "type" : "String",
    "comment" : "\n     * Whether the activity should be launched into LockTask mode.\n     * @see #setLockTaskEnabled(boolean)\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_DISPLAY_ID",
    "type" : "String",
    "comment" : "\n     * The display id the activity should be launched into.\n     * @see #setLaunchDisplayId(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_CALLER_DISPLAY_ID",
    "type" : "String",
    "comment" : "\n     * The id of the display where the caller was on.\n     * @see #setCallerDisplayId(int)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_TASK_DISPLAY_AREA_TOKEN",
    "type" : "String",
    "comment" : "\n     * The task display area token the activity should be launched into.\n     * @see #setLaunchTaskDisplayArea(WindowContainerToken)\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_WINDOWING_MODE",
    "type" : "String",
    "comment" : "\n     * The windowing mode the activity should be launched into.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_ACTIVITY_TYPE",
    "type" : "String",
    "comment" : "\n     * The activity type the activity should be launched as.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_LAUNCH_TASK_ID",
    "type" : "String",
    "comment" : "\n     * The task id the activity should be launched into.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_PENDING_INTENT_LAUNCH_FLAGS",
    "type" : "String",
    "comment" : "\n     * See {@link #setPendingIntentLaunchFlags(int)}\n     * @hide\n     ",
    "links" : [ "#setPendingIntentLaunchFlags(int)" ]
  }, {
    "name" : "KEY_TASK_ALWAYS_ON_TOP",
    "type" : "String",
    "comment" : "\n     * See {@link #setTaskAlwaysOnTop}.\n     * @hide\n     ",
    "links" : [ "#setTaskAlwaysOnTop" ]
  }, {
    "name" : "KEY_TASK_OVERLAY",
    "type" : "String",
    "comment" : "\n     * See {@link #setTaskOverlay}.\n     * @hide\n     ",
    "links" : [ "#setTaskOverlay" ]
  }, {
    "name" : "KEY_TASK_OVERLAY_CAN_RESUME",
    "type" : "String",
    "comment" : "\n     * See {@link #setTaskOverlay}.\n     * @hide\n     ",
    "links" : [ "#setTaskOverlay" ]
  }, {
    "name" : "KEY_AVOID_MOVE_TO_FRONT",
    "type" : "String",
    "comment" : "\n     * See {@link #setAvoidMoveToFront()}.\n     * @hide\n     ",
    "links" : [ "#setAvoidMoveToFront()" ]
  }, {
    "name" : "KEY_FREEZE_RECENT_TASKS_REORDERING",
    "type" : "String",
    "comment" : "\n     * See {@link #setFreezeRecentTasksReordering()}.\n     * @hide\n     ",
    "links" : [ "#setFreezeRecentTasksReordering()" ]
  }, {
    "name" : "KEY_SPLIT_SCREEN_CREATE_MODE",
    "type" : "String",
    "comment" : "\n     * Where the split-screen-primary stack should be positioned.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_DISALLOW_ENTER_PICTURE_IN_PICTURE_WHILE_LAUNCHING",
    "type" : "String",
    "comment" : "\n     * Determines whether to disallow the outgoing activity from entering picture-in-picture as the\n     * result of a new activity being launched.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_APPLY_ACTIVITY_FLAGS_FOR_BUBBLES",
    "type" : "String",
    "comment" : "\n     * Indicates flags should be applied to the launching activity such that it will behave\n     * correctly in a bubble.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TRANSITION_COMPLETE_LISTENER",
    "type" : "String",
    "comment" : "\n     * For Activity transitions, the calling Activity's TransitionListener used to\n     * notify the called Activity when the shared element and the exit transitions\n     * complete.\n     ",
    "links" : [ ]
  }, {
    "name" : "KEY_TRANSITION_IS_RETURNING",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_TRANSITION_SHARED_ELEMENTS",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_RESULT_DATA",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_RESULT_CODE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_EXIT_COORDINATOR_INDEX",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_USAGE_TIME_REPORT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_ROTATION_ANIMATION_HINT",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_INSTANT_APP_VERIFICATION_BUNDLE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_SPECS_FUTURE",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "KEY_REMOTE_ANIMATION_ADAPTER",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ANIM_UNDEFINED",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_NONE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_CUSTOM",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_SCALE_UP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_THUMBNAIL_SCALE_UP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_THUMBNAIL_SCALE_DOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_SCENE_TRANSITION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_DEFAULT",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_LAUNCH_TASK_BEHIND",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_THUMBNAIL_ASPECT_SCALE_UP",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_THUMBNAIL_ASPECT_SCALE_DOWN",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_CUSTOM_IN_PLACE",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_CLIP_REVEAL",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_OPEN_CROSS_PROFILE_APPS",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "ANIM_REMOTE_ANIMATION",
    "type" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "mPackageName",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchBounds",
    "type" : "Rect",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomEnterResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomExitResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCustomInPlaceResId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mThumbnail",
    "type" : "Bitmap",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartX",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mStartY",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mWidth",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mHeight",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationStartedListener",
    "type" : "IRemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimationFinishedListener",
    "type" : "IRemoteCallback",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTransitionReceiver",
    "type" : "ResultReceiver",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mIsReturning",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSharedElementNames",
    "type" : "ArrayList<String>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultData",
    "type" : "Intent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mResultCode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mExitCoordinatorIndex",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mUsageTimeReport",
    "type" : "PendingIntent",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCallerDisplayId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchTaskDisplayArea",
    "type" : "WindowContainerToken",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchWindowingMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchActivityType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLaunchTaskId",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPendingIntentLaunchFlags",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSplitScreenCreateMode",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mLockTaskMode",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDisallowEnterPictureInPictureWhileLaunching",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mApplyActivityFlagsForBubbles",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskAlwaysOnTop",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskOverlay",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTaskOverlayCanResume",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAvoidMoveToFront",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mFreezeRecentTasksReordering",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAnimSpecs",
    "type" : "AppTransitionAnimationSpec[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRotationAnimationHint",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAppVerificationBundle",
    "type" : "Bundle",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSpecsFuture",
    "type" : "IAppTransitionAnimationSpecsFuture",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRemoteAnimationAdapter",
    "type" : "RemoteAnimationAdapter",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static ActivityOptions makeCustomAnimation(Context context, int enterResId, int exitResId)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying a custom animation to run when\n     * the activity is displayed.\n     *\n     * @param context Who is defining this.  This is the application that the\n     * animation resources will be loaded from.\n     * @param enterResId A resource ID of the animation resource to use for\n     * the incoming activity.  Use 0 for no animation.\n     * @param exitResId A resource ID of the animation resource to use for\n     * the outgoing activity.  Use 0 for no animation.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeCustomAnimation(Context context, int enterResId, int exitResId, Handler handler, OnAnimationStartedListener listener)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying a custom animation to run when\n     * the activity is displayed.\n     *\n     * @param context Who is defining this.  This is the application that the\n     * animation resources will be loaded from.\n     * @param enterResId A resource ID of the animation resource to use for\n     * the incoming activity.  Use 0 for no animation.\n     * @param exitResId A resource ID of the animation resource to use for\n     * the outgoing activity.  Use 0 for no animation.\n     * @param handler If <var>listener</var> is non-null this must be a valid\n     * Handler on which to dispatch the callback; otherwise it should be null.\n     * @param listener Optional OnAnimationStartedListener to find out when the\n     * requested animation has started running.  If for some reason the animation\n     * is not executed, the callback will happen immediately.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeCustomAnimation(@NonNull Context context, int enterResId, int exitResId, @Nullable Handler handler, @Nullable OnAnimationStartedListener startedListener, @Nullable OnAnimationFinishedListener finishedListener)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying a custom animation to run when\n     * the activity is displayed.\n     *\n     * @param context Who is defining this.  This is the application that the\n     * animation resources will be loaded from.\n     * @param enterResId A resource ID of the animation resource to use for\n     * the incoming activity.  Use 0 for no animation.\n     * @param exitResId A resource ID of the animation resource to use for\n     * the outgoing activity.  Use 0 for no animation.\n     * @param handler If <var>listener</var> is non-null this must be a valid\n     * Handler on which to dispatch the callback; otherwise it should be null.\n     * @param startedListener Optional OnAnimationStartedListener to find out when the\n     * requested animation has started running.  If for some reason the animation\n     * is not executed, the callback will happen immediately.\n     * @param finishedListener Optional OnAnimationFinishedListener when the animation\n     * has finished running.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeCustomInPlaceAnimation(Context context, int animId)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Creates an ActivityOptions specifying a custom animation to run in place on an existing\n     * activity.\n     *\n     * @param context Who is defining this.  This is the application that the\n     * animation resources will be loaded from.\n     * @param animId A resource ID of the animation resource to use for\n     * the incoming activity.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when running an in-place animation.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private void setOnAnimationStartedListener(final Handler handler, final OnAnimationStartedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private void setOnAnimationFinishedListener(final Handler handler, final OnAnimationFinishedListener listener)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeScaleUpAnimation(View source, int startX, int startY, int width, int height)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where the new\n     * activity is scaled from a small originating area of the screen to\n     * its final full representation.\n     *\n     * <p>If the Intent this is being used with has not set its\n     * {@link android.content.Intent#setSourceBounds Intent.setSourceBounds},\n     * those bounds will be filled in for you based on the initial\n     * bounds passed in here.\n     *\n     * @param source The View that the new activity is animating from.  This\n     * defines the coordinate space for <var>startX</var> and <var>startY</var>.\n     * @param startX The x starting location of the new activity, relative to <var>source</var>.\n     * @param startY The y starting location of the activity, relative to <var>source</var>.\n     * @param width The initial width of the new activity.\n     * @param height The initial height of the new activity.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     ",
    "links" : [ "android.content.Intent#setSourceBounds" ]
  }, {
    "name" : "public static ActivityOptions makeClipRevealAnimation(View source, int startX, int startY, int width, int height)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where the new\n     * activity is revealed from a small originating area of the screen to\n     * its final full representation.\n     *\n     * @param source The View that the new activity is animating from.  This\n     * defines the coordinate space for <var>startX</var> and <var>startY</var>.\n     * @param startX The x starting location of the new activity, relative to <var>source</var>.\n     * @param startY The y starting location of the activity, relative to <var>source</var>.\n     * @param width The initial width of the new activity.\n     * @param height The initial height of the new activity.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeOpenCrossProfileAppsAnimation()",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Creates an {@link ActivityOptions} object specifying an animation where the new activity\n     * is started in another user profile by calling {@link\n     * android.content.pm.crossprofile.CrossProfileApps#startMainActivity(ComponentName, UserHandle)\n     * }.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityOptions", "android.content.pm.crossprofile.CrossProfileApps#startMainActivity(ComponentName" ]
  }, {
    "name" : "public static ActivityOptions makeThumbnailScaleUpAnimation(View source, Bitmap thumbnail, int startX, int startY)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where a thumbnail\n     * is scaled from a given position to the new activity window that is\n     * being started.\n     *\n     * <p>If the Intent this is being used with has not set its\n     * {@link android.content.Intent#setSourceBounds Intent.setSourceBounds},\n     * those bounds will be filled in for you based on the initial\n     * thumbnail location and size provided here.\n     *\n     * @param source The View that this thumbnail is animating from.  This\n     * defines the coordinate space for <var>startX</var> and <var>startY</var>.\n     * @param thumbnail The bitmap that will be shown as the initial thumbnail\n     * of the animation.\n     * @param startX The x starting location of the bitmap, relative to <var>source</var>.\n     * @param startY The y starting location of the bitmap, relative to <var>source</var>.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     ",
    "links" : [ "android.content.Intent#setSourceBounds" ]
  }, {
    "name" : "private static ActivityOptions makeThumbnailScaleUpAnimation(View source, Bitmap thumbnail, int startX, int startY, OnAnimationStartedListener listener)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where a thumbnail\n     * is scaled from a given position to the new activity window that is\n     * being started.\n     *\n     * @param source The View that this thumbnail is animating from.  This\n     * defines the coordinate space for <var>startX</var> and <var>startY</var>.\n     * @param thumbnail The bitmap that will be shown as the initial thumbnail\n     * of the animation.\n     * @param startX The x starting location of the bitmap, relative to <var>source</var>.\n     * @param startY The y starting location of the bitmap, relative to <var>source</var>.\n     * @param listener Optional OnAnimationStartedListener to find out when the\n     * requested animation has started running.  If for some reason the animation\n     * is not executed, the callback will happen immediately.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ActivityOptions makeThumbnailAnimation(View source, Bitmap thumbnail, int startX, int startY, OnAnimationStartedListener listener, boolean scaleUp)",
    "returnType" : "ActivityOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeMultiThumbFutureAspectScaleAnimation(Context context, Handler handler, IAppTransitionAnimationSpecsFuture specsFuture, OnAnimationStartedListener listener, boolean scaleUp)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where a list of activity windows and\n     * thumbnails are aspect scaled to/from a new location.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source, Bitmap thumbnail, int startX, int startY, int targetWidth, int targetHeight, Handler handler, OnAnimationStartedListener listener)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions specifying an animation where the new activity\n     * window and a thumbnail is aspect-scaled to a new location.\n     *\n     * @param source The View that this thumbnail is animating to.  This\n     * defines the coordinate space for <var>startX</var> and <var>startY</var>.\n     * @param thumbnail The bitmap that will be shown as the final thumbnail\n     * of the animation.\n     * @param startX The x end location of the bitmap, relative to <var>source</var>.\n     * @param startY The y end location of the bitmap, relative to <var>source</var>.\n     * @param handler If <var>listener</var> is non-null this must be a valid\n     * Handler on which to dispatch the callback; otherwise it should be null.\n     * @param listener Optional OnAnimationStartedListener to find out when the\n     * requested animation has started running.  If for some reason the animation\n     * is not executed, the callback will happen immediately.\n     * @return Returns a new ActivityOptions object that you can use to\n     * supply these options as the options Bundle when starting an activity.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static ActivityOptions makeAspectScaledThumbnailAnimation(View source, Bitmap thumbnail, int startX, int startY, int targetWidth, int targetHeight, Handler handler, OnAnimationStartedListener listener, boolean scaleUp)",
    "returnType" : "ActivityOptions",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source, AppTransitionAnimationSpec[] specs, Handler handler, OnAnimationStartedListener onAnimationStartedListener, OnAnimationFinishedListener onAnimationFinishedListener)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeSceneTransitionAnimation(Activity activity, View sharedElement, String sharedElementName)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions to transition between Activities using cross-Activity scene\n     * animations. This method carries the position of one shared element to the started Activity.\n     * The position of <code>sharedElement</code> will be used as the epicenter for the\n     * exit Transition. The position of the shared element in the launched Activity will be the\n     * epicenter of its entering Transition.\n     *\n     * <p>This requires {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS} to be\n     * enabled on the calling Activity to cause an exit transition. The same must be in\n     * the called Activity to get an entering transition.</p>\n     * @param activity The Activity whose window contains the shared elements.\n     * @param sharedElement The View to transition to the started Activity.\n     * @param sharedElementName The shared element name as used in the target Activity. This\n     *                          must not be null.\n     * @return Returns a new ActivityOptions object that you can use to\n     *         supply these options as the options Bundle when starting an activity.\n     * @see android.transition.Transition#setEpicenterCallback(\n     *          android.transition.Transition.EpicenterCallback)\n     ",
    "links" : [ "android.view.Window#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public static ActivityOptions makeSceneTransitionAnimation(Activity activity, Pair<View, String>... sharedElements)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an ActivityOptions to transition between Activities using cross-Activity scene\n     * animations. This method carries the position of multiple shared elements to the started\n     * Activity. The position of the first element in sharedElements\n     * will be used as the epicenter for the exit Transition. The position of the associated\n     * shared element in the launched Activity will be the epicenter of its entering Transition.\n     *\n     * <p>This requires {@link android.view.Window#FEATURE_ACTIVITY_TRANSITIONS} to be\n     * enabled on the calling Activity to cause an exit transition. The same must be in\n     * the called Activity to get an entering transition.</p>\n     * @param activity The Activity whose window contains the shared elements.\n     * @param sharedElements The names of the shared elements to transfer to the called\n     *                       Activity and their associated Views. The Views must each have\n     *                       a unique shared element name.\n     * @return Returns a new ActivityOptions object that you can use to\n     *         supply these options as the options Bundle when starting an activity.\n     * @see android.transition.Transition#setEpicenterCallback(\n     *          android.transition.Transition.EpicenterCallback)\n     ",
    "links" : [ "android.view.Window#FEATURE_ACTIVITY_TRANSITIONS" ]
  }, {
    "name" : "public static ActivityOptions startSharedElementAnimation(Window window, Pair<View, String>... sharedElements)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Call this immediately prior to startActivity to begin a shared element transition\n     * from a non-Activity. The window must support Window.FEATURE_ACTIVITY_TRANSITIONS.\n     * The exit transition will start immediately and the shared element transition will\n     * start once the launched Activity's shared element is ready.\n     * <p>\n     * When all transitions have completed and the shared element has been transfered,\n     * the window's decor View will have its visibility set to View.GONE.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void stopSharedElementAnimation(Window window)",
    "returnType" : "void",
    "comment" : "\n     * This method should be called when the {@link #startSharedElementAnimation(Window, Pair[])}\n     * animation must be stopped and the Views reset. This can happen if there was an error\n     * from startActivity or a springboard activity and the animation should stop and reset.\n     *\n     * @hide\n     ",
    "links" : [ "#startSharedElementAnimation(Window" ]
  }, {
    "name" : " static ExitTransitionCoordinator makeSceneTransitionAnimation(Activity activity, Window window, ActivityOptions opts, SharedElementCallback callback, Pair<View, String>[] sharedElements)",
    "returnType" : "ExitTransitionCoordinator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public static void setExitTransitionTimeout(long timeoutMillis)",
    "returnType" : "void",
    "comment" : "\n     * Needed for virtual devices because they can be slow enough that the 1 second timeout\n     * triggers when it doesn't on normal devices.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : " static ActivityOptions makeSceneTransitionAnimation(Activity activity, ExitTransitionCoordinator exitCoordinator, ArrayList<String> sharedElementNames, int resultCode, Intent resultData)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeTaskLaunchBehind()",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * If set along with Intent.FLAG_ACTIVITY_NEW_DOCUMENT then the task being launched will not be\n     * presented to the user but will instead be only available through the recents task list.\n     * In addition, the new task wil be affiliated with the launching activity's task.\n     * Affiliated tasks are grouped together in the recents task list.\n     *\n     * <p>This behavior is not supported for activities with {@link\n     * android.R.styleable#AndroidManifestActivity_launchMode launchMode} values of\n     * <code>singleInstance</code> or <code>singleTask</code>.\n     ",
    "links" : [ "android.R.styleable#AndroidManifestActivity_launchMode" ]
  }, {
    "name" : "public static ActivityOptions makeBasic()",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create a basic ActivityOptions that has no special animation associated with it.\n     * Other options can still be set.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions makeRemoteAnimation(RemoteAnimationAdapter remoteAnimationAdapter)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Create an {@link ActivityOptions} instance that lets the application control the entire\n     * animation using a {@link RemoteAnimationAdapter}.\n     * @hide\n     ",
    "links" : [ "android.app.ActivityOptions", "android.view.RemoteAnimationAdapter" ]
  }, {
    "name" : "public boolean getLaunchTaskBehind()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions setLaunchBounds(@Nullable Rect screenSpacePixelRect)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Sets the bounds (window size and position) that the activity should be launched in.\n     * Rect position should be provided in pixels and in screen coordinates.\n     * Set to {@code null} to explicitly launch fullscreen.\n     * <p>\n     * <strong>NOTE:</strong> This value is ignored on devices that don't have\n     * {@link android.content.pm.PackageManager#FEATURE_FREEFORM_WINDOW_MANAGEMENT} or\n     * {@link android.content.pm.PackageManager#FEATURE_PICTURE_IN_PICTURE} enabled.\n     * @param screenSpacePixelRect launch bounds or {@code null} for fullscreen\n     * @return {@code this} {@link ActivityOptions} instance\n     ",
    "links" : [ "android.app.ActivityOptions", "android.content.pm.PackageManager#FEATURE_PICTURE_IN_PICTURE", "android.content.pm.PackageManager#FEATURE_FREEFORM_WINDOW_MANAGEMENT" ]
  }, {
    "name" : "public String getPackageName()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Rect getLaunchBounds()",
    "returnType" : "Rect",
    "comment" : "\n     * Returns the bounds that should be used to launch the activity.\n     * @see #setLaunchBounds(Rect)\n     * @return Bounds used to launch the activity.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getAnimationType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCustomEnterResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCustomExitResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getCustomInPlaceResId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public GraphicBuffer getThumbnail()",
    "returnType" : "GraphicBuffer",
    "comment" : "\n     * The thumbnail is copied into a hardware bitmap when it is bundled and sent to the system, so\n     * it should always be backed by a GraphicBuffer on the other end.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getStartX()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getStartY()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getWidth()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getHeight()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IRemoteCallback getAnimationStartedListener()",
    "returnType" : "IRemoteCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IRemoteCallback getAnimationFinishedListener()",
    "returnType" : "IRemoteCallback",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getExitCoordinatorKey()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void abort()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isReturning()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : " boolean isCrossTask()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns whether or not the ActivityOptions was created with\n     * {@link #startSharedElementAnimation(Window, Pair[])}.\n     *\n     * @hide\n     ",
    "links" : [ "#startSharedElementAnimation(Window" ]
  }, {
    "name" : "public ArrayList<String> getSharedElementNames()",
    "returnType" : "ArrayList<String>",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ResultReceiver getResultReceiver()",
    "returnType" : "ResultReceiver",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getResultCode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public Intent getResultData()",
    "returnType" : "Intent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public PendingIntent getUsageTimeReport()",
    "returnType" : "PendingIntent",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public AppTransitionAnimationSpec[] getAnimSpecs()",
    "returnType" : "AppTransitionAnimationSpec[]",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public IAppTransitionAnimationSpecsFuture getSpecsFuture()",
    "returnType" : "IAppTransitionAnimationSpecsFuture",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public RemoteAnimationAdapter getRemoteAnimationAdapter()",
    "returnType" : "RemoteAnimationAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setRemoteAnimationAdapter(RemoteAnimationAdapter remoteAnimationAdapter)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static ActivityOptions fromBundle(Bundle bOptions)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public static void abort(ActivityOptions options)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean getLockTaskMode()",
    "returnType" : "boolean",
    "comment" : "\n     * Gets whether the activity is to be launched into LockTask mode.\n     * @return {@code true} if the activity is to be launched into LockTask mode.\n     * @see Activity#startLockTask()\n     * @see android.app.admin.DevicePolicyManager#setLockTaskPackages(ComponentName, String[])\n     ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions setLockTaskEnabled(boolean lockTaskMode)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Sets whether the activity is to be launched into LockTask mode.\n     *\n     * Use this option to start an activity in LockTask mode. Note that only apps permitted by\n     * {@link android.app.admin.DevicePolicyManager} can run in LockTask mode. Therefore, if\n     * {@link android.app.admin.DevicePolicyManager#isLockTaskPermitted(String)} returns\n     * {@code false} for the package of the target activity, a {@link SecurityException} will be\n     * thrown during {@link Context#startActivity(Intent, Bundle)}. This method doesn't affect\n     * activities that are already running — relaunch the activity to run in lock task mode.\n     *\n     * Defaults to {@code false} if not set.\n     *\n     * @param lockTaskMode {@code true} if the activity is to be launched into LockTask mode.\n     * @return {@code this} {@link ActivityOptions} instance.\n     * @see Activity#startLockTask()\n     * @see android.app.admin.DevicePolicyManager#setLockTaskPackages(ComponentName, String[])\n     ",
    "links" : [ "android.app.ActivityOptions", "android.app.admin.DevicePolicyManager", "SecurityException", "android.app.admin.DevicePolicyManager#isLockTaskPermitted(String)", "android.content.Context#startActivity(Intent" ]
  }, {
    "name" : "public int getLaunchDisplayId()",
    "returnType" : "int",
    "comment" : "\n     * Gets the id of the display where activity should be launched.\n     * @return The id of the display where activity should be launched,\n     *         {@link android.view.Display#INVALID_DISPLAY} if not set.\n     * @see #setLaunchDisplayId(int)\n     ",
    "links" : [ "android.view.Display#INVALID_DISPLAY" ]
  }, {
    "name" : "public ActivityOptions setLaunchDisplayId(int launchDisplayId)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Sets the id of the display where activity should be launched.\n     * An app can launch activities on public displays or private displays that are owned by the app\n     * or where an app already has activities. Otherwise, trying to launch on a private display\n     * or providing an invalid display id will result in an exception.\n     * <p>\n     * Setting launch display id will be ignored on devices that don't have\n     * {@link android.content.pm.PackageManager#FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS}.\n     * @param launchDisplayId The id of the display where the activity should be launched.\n     * @return {@code this} {@link ActivityOptions} instance.\n     ",
    "links" : [ "android.app.ActivityOptions", "android.content.pm.PackageManager#FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS" ]
  }, {
    "name" : "public int getCallerDisplayId()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions setCallerDisplayId(int callerDisplayId)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public WindowContainerToken getLaunchTaskDisplayArea()",
    "returnType" : "WindowContainerToken",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions setLaunchTaskDisplayArea(WindowContainerToken windowContainerToken)",
    "returnType" : "ActivityOptions",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public int getLaunchWindowingMode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLaunchWindowingMode(int windowingMode)",
    "returnType" : "void",
    "comment" : "\n     * Sets the windowing mode the activity should launch into. If the input windowing mode is\n     * {@link android.app.WindowConfiguration#WINDOWING_MODE_SPLIT_SCREEN_SECONDARY} and the device\n     * isn't currently in split-screen windowing mode, then the activity will be launched in\n     * {@link android.app.WindowConfiguration#WINDOWING_MODE_FULLSCREEN} windowing mode. For clarity\n     * on this you can use\n     * {@link android.app.WindowConfiguration#WINDOWING_MODE_FULLSCREEN_OR_SPLIT_SCREEN_SECONDARY}\n     *\n     * @hide\n     ",
    "links" : [ "android.app.WindowConfiguration#WINDOWING_MODE_FULLSCREEN", "android.app.WindowConfiguration#WINDOWING_MODE_SPLIT_SCREEN_SECONDARY", "android.app.WindowConfiguration#WINDOWING_MODE_FULLSCREEN_OR_SPLIT_SCREEN_SECONDARY" ]
  }, {
    "name" : "public int getLaunchActivityType()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLaunchActivityType(int activityType)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setLaunchTaskId(int taskId)",
    "returnType" : "void",
    "comment" : "\n     * Sets the task the activity will be launched in.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getLaunchTaskId()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setPendingIntentLaunchFlags(@android.content.Intent.Flags int flags)",
    "returnType" : "void",
    "comment" : "\n     * Specifies intent flags to be applied for any activity started from a PendingIntent.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getPendingIntentLaunchFlags()",
    "returnType" : "int",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTaskAlwaysOnTop(boolean alwaysOnTop)",
    "returnType" : "void",
    "comment" : "\n     * Set's whether the task for the activity launched with this option should always be on top.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getTaskAlwaysOnTop()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setTaskOverlay(boolean taskOverlay, boolean canResume)",
    "returnType" : "void",
    "comment" : "\n     * Set's whether the activity launched with this option should be a task overlay. That is the\n     * activity will always be the top activity of the task.\n     * @param canResume {@code false} if the task will also not be moved to the front of the stack.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getTaskOverlay()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canTaskOverlayResume()",
    "returnType" : "boolean",
    "comment" : "\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setAvoidMoveToFront()",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the activity launched should not cause the activity stack it is contained in to\n     * be moved to the front as a part of launching.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean getAvoidMoveToFront()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the activity launch should prevent moving the associated activity stack to\n     *         the front.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFreezeRecentTasksReordering()",
    "returnType" : "void",
    "comment" : "\n     * Sets whether the launch of this activity should freeze the recent task list reordering until\n     * the next user interaction or timeout. This flag is only applied when starting an activity\n     * in recents.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean freezeRecentTasksReordering()",
    "returnType" : "boolean",
    "comment" : "\n     * @return whether the launch of this activity should freeze the recent task list reordering\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getSplitScreenCreateMode()",
    "returnType" : "int",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setSplitScreenCreateMode(int splitScreenCreateMode)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setDisallowEnterPictureInPictureWhileLaunching(boolean disallow)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean disallowEnterPictureInPictureWhileLaunching()",
    "returnType" : "boolean",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void setApplyActivityFlagsForBubbles(boolean apply)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public boolean isApplyActivityFlagsForBubbles()",
    "returnType" : "boolean",
    "comment" : "  @hide ",
    "links" : [ ]
  }, {
    "name" : "public void update(ActivityOptions otherOptions)",
    "returnType" : "void",
    "comment" : "\n     * Update the current values in this ActivityOptions from those supplied\n     * in <var>otherOptions</var>.  Any values\n     * defined in <var>otherOptions</var> replace those in the base options.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Bundle toBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Returns the created options as a Bundle, which can be passed to\n     * {@link android.content.Context#startActivity(android.content.Intent, android.os.Bundle)\n     * Context.startActivity(Intent, Bundle)} and related methods.\n     * Note that the returned Bundle is still owned by the ActivityOptions\n     * object; you must not modify it, but can supply it to the startActivity\n     * methods that take an options Bundle.\n     ",
    "links" : [ "android.content.Context#startActivity(android.content.Intent" ]
  }, {
    "name" : "public void requestUsageTimeReport(PendingIntent receiver)",
    "returnType" : "void",
    "comment" : "\n     * Ask the system track that time the user spends in the app being launched, and\n     * report it back once done.  The report will be sent to the given receiver, with\n     * the extras {@link #EXTRA_USAGE_TIME_REPORT} and {@link #EXTRA_USAGE_TIME_REPORT_PACKAGES}\n     * filled in.\n     *\n     * <p>The time interval tracked is from launching this activity until the user leaves\n     * that activity's flow.  They are considered to stay in the flow as long as\n     * new activities are being launched or returned to from the original flow,\n     * even if this crosses package or task boundaries.  For example, if the originator\n     * starts an activity to view an image, and while there the user selects to share,\n     * which launches their email app in a new task, and they complete the share, the\n     * time during that entire operation will be included until they finally hit back from\n     * the original image viewer activity.</p>\n     *\n     * <p>The user is considered to complete a flow once they switch to another\n     * activity that is not part of the tracked flow.  This may happen, for example, by\n     * using the notification shade, launcher, or recents to launch or switch to another\n     * app.  Simply going in to these navigation elements does not break the flow (although\n     * the launcher and recents stops time tracking of the session); it is the act of\n     * going somewhere else that completes the tracking.</p>\n     *\n     * @param receiver A broadcast receiver that willl receive the report.\n     ",
    "links" : [ "#EXTRA_USAGE_TIME_REPORT", "#EXTRA_USAGE_TIME_REPORT_PACKAGES" ]
  }, {
    "name" : "public ActivityOptions forTargetActivity()",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Return the filtered options only meant to be seen by the target activity itself\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getRotationAnimationHint()",
    "returnType" : "int",
    "comment" : "\n     * Returns the rotation animation set by {@link setRotationAnimationHint} or -1\n     * if unspecified.\n     * @hide\n     ",
    "links" : [ "setRotationAnimationHint" ]
  }, {
    "name" : "public void setRotationAnimationHint(int hint)",
    "returnType" : "void",
    "comment" : "\n     * Set a rotation animation to be used if launching the activity\n     * triggers an orientation change, or -1 to clear. See\n     * {@link android.view.WindowManager.LayoutParams} for rotation\n     * animation values.\n     * @hide\n     ",
    "links" : [ "android.view.WindowManager.LayoutParams" ]
  }, {
    "name" : "public Bundle popAppVerificationBundle()",
    "returnType" : "Bundle",
    "comment" : "\n     * Pop the extra verification bundle for the installer.\n     * This removes the bundle from the ActivityOptions to make sure the installer bundle\n     * is only available once.\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public ActivityOptions setAppVerificationBundle(Bundle bundle)",
    "returnType" : "ActivityOptions",
    "comment" : "\n     * Set the {@link Bundle} that is provided to the app installer for additional verification\n     * if the call to {@link Context#startActivity} results in an app being installed.\n     *\n     * This Bundle is not provided to any other app besides the installer.\n     ",
    "links" : [ "android.os.Bundle", "android.content.Context#startActivity" ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : " @hide ",
    "links" : [ ]
  } ],
  "variableNames" : [ "TAG", "EXTRA_USAGE_TIME_REPORT", "EXTRA_USAGE_TIME_REPORT_PACKAGES", "KEY_PACKAGE_NAME", "KEY_LAUNCH_BOUNDS", "KEY_ANIM_TYPE", "KEY_ANIM_ENTER_RES_ID", "KEY_ANIM_EXIT_RES_ID", "KEY_ANIM_IN_PLACE_RES_ID", "KEY_ANIM_THUMBNAIL", "KEY_ANIM_START_X", "KEY_ANIM_START_Y", "KEY_ANIM_WIDTH", "KEY_ANIM_HEIGHT", "KEY_ANIM_START_LISTENER", "KEY_ANIMATION_FINISHED_LISTENER", "KEY_ANIM_SPECS", "KEY_LOCK_TASK_MODE", "KEY_LAUNCH_DISPLAY_ID", "KEY_CALLER_DISPLAY_ID", "KEY_LAUNCH_TASK_DISPLAY_AREA_TOKEN", "KEY_LAUNCH_WINDOWING_MODE", "KEY_LAUNCH_ACTIVITY_TYPE", "KEY_LAUNCH_TASK_ID", "KEY_PENDING_INTENT_LAUNCH_FLAGS", "KEY_TASK_ALWAYS_ON_TOP", "KEY_TASK_OVERLAY", "KEY_TASK_OVERLAY_CAN_RESUME", "KEY_AVOID_MOVE_TO_FRONT", "KEY_FREEZE_RECENT_TASKS_REORDERING", "KEY_SPLIT_SCREEN_CREATE_MODE", "KEY_DISALLOW_ENTER_PICTURE_IN_PICTURE_WHILE_LAUNCHING", "KEY_APPLY_ACTIVITY_FLAGS_FOR_BUBBLES", "KEY_TRANSITION_COMPLETE_LISTENER", "KEY_TRANSITION_IS_RETURNING", "KEY_TRANSITION_SHARED_ELEMENTS", "KEY_RESULT_DATA", "KEY_RESULT_CODE", "KEY_EXIT_COORDINATOR_INDEX", "KEY_USAGE_TIME_REPORT", "KEY_ROTATION_ANIMATION_HINT", "KEY_INSTANT_APP_VERIFICATION_BUNDLE", "KEY_SPECS_FUTURE", "KEY_REMOTE_ANIMATION_ADAPTER", "ANIM_UNDEFINED", "ANIM_NONE", "ANIM_CUSTOM", "ANIM_SCALE_UP", "ANIM_THUMBNAIL_SCALE_UP", "ANIM_THUMBNAIL_SCALE_DOWN", "ANIM_SCENE_TRANSITION", "ANIM_DEFAULT", "ANIM_LAUNCH_TASK_BEHIND", "ANIM_THUMBNAIL_ASPECT_SCALE_UP", "ANIM_THUMBNAIL_ASPECT_SCALE_DOWN", "ANIM_CUSTOM_IN_PLACE", "ANIM_CLIP_REVEAL", "ANIM_OPEN_CROSS_PROFILE_APPS", "ANIM_REMOTE_ANIMATION", "mPackageName", "mLaunchBounds", "mAnimationType", "mCustomEnterResId", "mCustomExitResId", "mCustomInPlaceResId", "mThumbnail", "mStartX", "mStartY", "mWidth", "mHeight", "mAnimationStartedListener", "mAnimationFinishedListener", "mTransitionReceiver", "mIsReturning", "mSharedElementNames", "mResultData", "mResultCode", "mExitCoordinatorIndex", "mUsageTimeReport", "mLaunchDisplayId", "mCallerDisplayId", "mLaunchTaskDisplayArea", "mLaunchWindowingMode", "mLaunchActivityType", "mLaunchTaskId", "mPendingIntentLaunchFlags", "mSplitScreenCreateMode", "mLockTaskMode", "mDisallowEnterPictureInPictureWhileLaunching", "mApplyActivityFlagsForBubbles", "mTaskAlwaysOnTop", "mTaskOverlay", "mTaskOverlayCanResume", "mAvoidMoveToFront", "mFreezeRecentTasksReordering", "mAnimSpecs", "mRotationAnimationHint", "mAppVerificationBundle", "mSpecsFuture", "mRemoteAnimationAdapter" ],
  "methodNames" : [ "public static ActivityOptions makeCustomAnimation(Context context, int enterResId, int exitResId)", "public static ActivityOptions makeCustomAnimation(Context context, int enterResId, int exitResId, Handler handler, OnAnimationStartedListener listener)", "public static ActivityOptions makeCustomAnimation(@NonNull Context context, int enterResId, int exitResId, @Nullable Handler handler, @Nullable OnAnimationStartedListener startedListener, @Nullable OnAnimationFinishedListener finishedListener)", "public static ActivityOptions makeCustomInPlaceAnimation(Context context, int animId)", "private void setOnAnimationStartedListener(final Handler handler, final OnAnimationStartedListener listener)", "private void setOnAnimationFinishedListener(final Handler handler, final OnAnimationFinishedListener listener)", "public static ActivityOptions makeScaleUpAnimation(View source, int startX, int startY, int width, int height)", "public static ActivityOptions makeClipRevealAnimation(View source, int startX, int startY, int width, int height)", "public static ActivityOptions makeOpenCrossProfileAppsAnimation()", "public static ActivityOptions makeThumbnailScaleUpAnimation(View source, Bitmap thumbnail, int startX, int startY)", "private static ActivityOptions makeThumbnailScaleUpAnimation(View source, Bitmap thumbnail, int startX, int startY, OnAnimationStartedListener listener)", "private static ActivityOptions makeThumbnailAnimation(View source, Bitmap thumbnail, int startX, int startY, OnAnimationStartedListener listener, boolean scaleUp)", "public static ActivityOptions makeMultiThumbFutureAspectScaleAnimation(Context context, Handler handler, IAppTransitionAnimationSpecsFuture specsFuture, OnAnimationStartedListener listener, boolean scaleUp)", "public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source, Bitmap thumbnail, int startX, int startY, int targetWidth, int targetHeight, Handler handler, OnAnimationStartedListener listener)", "private static ActivityOptions makeAspectScaledThumbnailAnimation(View source, Bitmap thumbnail, int startX, int startY, int targetWidth, int targetHeight, Handler handler, OnAnimationStartedListener listener, boolean scaleUp)", "public static ActivityOptions makeThumbnailAspectScaleDownAnimation(View source, AppTransitionAnimationSpec[] specs, Handler handler, OnAnimationStartedListener onAnimationStartedListener, OnAnimationFinishedListener onAnimationFinishedListener)", "public static ActivityOptions makeSceneTransitionAnimation(Activity activity, View sharedElement, String sharedElementName)", "public static ActivityOptions makeSceneTransitionAnimation(Activity activity, Pair<View, String>... sharedElements)", "public static ActivityOptions startSharedElementAnimation(Window window, Pair<View, String>... sharedElements)", "public static void stopSharedElementAnimation(Window window)", " static ExitTransitionCoordinator makeSceneTransitionAnimation(Activity activity, Window window, ActivityOptions opts, SharedElementCallback callback, Pair<View, String>[] sharedElements)", "public static void setExitTransitionTimeout(long timeoutMillis)", " static ActivityOptions makeSceneTransitionAnimation(Activity activity, ExitTransitionCoordinator exitCoordinator, ArrayList<String> sharedElementNames, int resultCode, Intent resultData)", "public static ActivityOptions makeTaskLaunchBehind()", "public static ActivityOptions makeBasic()", "public static ActivityOptions makeRemoteAnimation(RemoteAnimationAdapter remoteAnimationAdapter)", "public boolean getLaunchTaskBehind()", "public ActivityOptions setLaunchBounds(@Nullable Rect screenSpacePixelRect)", "public String getPackageName()", "public Rect getLaunchBounds()", "public int getAnimationType()", "public int getCustomEnterResId()", "public int getCustomExitResId()", "public int getCustomInPlaceResId()", "public GraphicBuffer getThumbnail()", "public int getStartX()", "public int getStartY()", "public int getWidth()", "public int getHeight()", "public IRemoteCallback getAnimationStartedListener()", "public IRemoteCallback getAnimationFinishedListener()", "public int getExitCoordinatorKey()", "public void abort()", "public boolean isReturning()", " boolean isCrossTask()", "public ArrayList<String> getSharedElementNames()", "public ResultReceiver getResultReceiver()", "public int getResultCode()", "public Intent getResultData()", "public PendingIntent getUsageTimeReport()", "public AppTransitionAnimationSpec[] getAnimSpecs()", "public IAppTransitionAnimationSpecsFuture getSpecsFuture()", "public RemoteAnimationAdapter getRemoteAnimationAdapter()", "public void setRemoteAnimationAdapter(RemoteAnimationAdapter remoteAnimationAdapter)", "public static ActivityOptions fromBundle(Bundle bOptions)", "public static void abort(ActivityOptions options)", "public boolean getLockTaskMode()", "public ActivityOptions setLockTaskEnabled(boolean lockTaskMode)", "public int getLaunchDisplayId()", "public ActivityOptions setLaunchDisplayId(int launchDisplayId)", "public int getCallerDisplayId()", "public ActivityOptions setCallerDisplayId(int callerDisplayId)", "public WindowContainerToken getLaunchTaskDisplayArea()", "public ActivityOptions setLaunchTaskDisplayArea(WindowContainerToken windowContainerToken)", "public int getLaunchWindowingMode()", "public void setLaunchWindowingMode(int windowingMode)", "public int getLaunchActivityType()", "public void setLaunchActivityType(int activityType)", "public void setLaunchTaskId(int taskId)", "public int getLaunchTaskId()", "public void setPendingIntentLaunchFlags(@android.content.Intent.Flags int flags)", "public int getPendingIntentLaunchFlags()", "public void setTaskAlwaysOnTop(boolean alwaysOnTop)", "public boolean getTaskAlwaysOnTop()", "public void setTaskOverlay(boolean taskOverlay, boolean canResume)", "public boolean getTaskOverlay()", "public boolean canTaskOverlayResume()", "public void setAvoidMoveToFront()", "public boolean getAvoidMoveToFront()", "public void setFreezeRecentTasksReordering()", "public boolean freezeRecentTasksReordering()", "public int getSplitScreenCreateMode()", "public void setSplitScreenCreateMode(int splitScreenCreateMode)", "public void setDisallowEnterPictureInPictureWhileLaunching(boolean disallow)", "public boolean disallowEnterPictureInPictureWhileLaunching()", "public void setApplyActivityFlagsForBubbles(boolean apply)", "public boolean isApplyActivityFlagsForBubbles()", "public void update(ActivityOptions otherOptions)", "public Bundle toBundle()", "public void requestUsageTimeReport(PendingIntent receiver)", "public ActivityOptions forTargetActivity()", "public int getRotationAnimationHint()", "public void setRotationAnimationHint(int hint)", "public Bundle popAppVerificationBundle()", "public ActivityOptions setAppVerificationBundle(Bundle bundle)", "public String toString()" ]
}