{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xalan/templates/KeyDeclaration.java",
  "packageName" : "org.apache.xalan.templates",
  "className" : "KeyDeclaration",
  "comment" : "\n * Holds the attribute declarations for the xsl:keys element.\n * A stylesheet declares a set of keys for each document using\n * the xsl:key element. When this set of keys contains a member\n * with node x, name y and value z, we say that node x has a key\n * with name y and value z.\n * @see <a href=\"http://www.w3.org/TR/xslt#key\">key in XSLT Specification</a>\n * @xsl.usage internal\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "m_name",
    "type" : "QName",
    "comment" : "\n   * The \"name\" property.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_matchPattern",
    "type" : "XPath",
    "comment" : "\n   * The \"match\" attribute.\n   * @serial\n   ",
    "links" : [ ]
  }, {
    "name" : "m_use",
    "type" : "XPath",
    "comment" : "\n   * The \"use\" attribute.\n   * @serial\n   ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void setName(QName name)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"name\" attribute.\n   * The name attribute specifies the name of the key. The value\n   * of the name attribute is a QName, which is expanded as\n   * described in [2.4 Qualified Names].\n   *\n   * @param name Value to set for the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public QName getName()",
    "returnType" : "QName",
    "comment" : "\n   * Get the \"name\" attribute.\n   * The name attribute specifies the name of the key. The value\n   * of the name attribute is a QName, which is expanded as\n   * described in [2.4 Qualified Names].\n   *\n   * @return Value of the \"name\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public String getNodeName()",
    "returnType" : "String",
    "comment" : "\n   * Return the node name.\n   *\n   * @return the element's name\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setMatch(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"match\" attribute.\n   * The match attribute is a Pattern; an xsl:key element gives\n   * information about the keys of any node that matches the\n   * pattern specified in the match attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#patterns\">patterns in XSLT Specification</a>\n   *\n   * @param v Value to set for the \"match\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getMatch()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"match\" attribute.\n   * The match attribute is a Pattern; an xsl:key element gives\n   * information about the keys of any node that matches the\n   * pattern specified in the match attribute.\n   * @see <a href=\"http://www.w3.org/TR/xslt#patterns\">patterns in XSLT Specification</a>\n   *\n   * @return Value of the \"match\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void setUse(XPath v)",
    "returnType" : "void",
    "comment" : "\n   * Set the \"use\" attribute.\n   * The use attribute is an expression specifying the values\n   * of the key; the expression is evaluated once for each node\n   * that matches the pattern.\n   *\n   * @param v Value to set for the \"use\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public XPath getUse()",
    "returnType" : "XPath",
    "comment" : "\n   * Get the \"use\" attribute.\n   * The use attribute is an expression specifying the values\n   * of the key; the expression is evaluated once for each node\n   * that matches the pattern.\n   *\n   * @return Value of the \"use\" attribute.\n   ",
    "links" : [ ]
  }, {
    "name" : "public int getXSLToken()",
    "returnType" : "int",
    "comment" : "\n   * Get an int constant identifying the type of element.\n   * @see org.apache.xalan.templates.Constants\n   *\n   * @return The token ID for this element\n   ",
    "links" : [ ]
  }, {
    "name" : "public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException",
    "returnType" : "void",
    "comment" : "\n   * This function is called after everything else has been\n   * recomposed, and allows the template to set remaining\n   * values that may be based on some other property that\n   * depends on recomposition.\n   ",
    "links" : [ ]
  }, {
    "name" : "public void recompose(StylesheetRoot root)",
    "returnType" : "void",
    "comment" : "\n   * This function is called during recomposition to\n   * control how this element is composed.\n   * @param root The root stylesheet for this transformation.\n   ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void setName(QName name)", "public QName getName()", "public String getNodeName()", "public void setMatch(XPath v)", "public XPath getMatch()", "public void setUse(XPath v)", "public XPath getUse()", "public int getXSLToken()", "public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException", "public void recompose(StylesheetRoot root)" ],
  "variableNames" : [ "serialVersionUID", "m_name", "m_matchPattern", "m_use" ]
}