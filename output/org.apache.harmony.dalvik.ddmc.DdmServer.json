{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/harmony/dalvik/ddmc/DdmServer.java",
  "packageName" : "org.apache.harmony.dalvik.ddmc",
  "className" : "DdmServer",
  "comment" : "\n * This represents our connection to the DDM Server.\n *\n * @hide\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "mHandlerMap",
    "type" : "HashMap<Integer, ChunkHandler>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "CONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DISCONNECTED",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistrationComplete",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mRegistrationTimedOut",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static void registerHandler(int type, ChunkHandler handler)",
    "returnType" : "void",
    "comment" : "\n     * Register an instance of the {@link ChunkHandler} class to handle a specific\n     * chunk type.\n     *\n     * Throws an exception if the type already has a handler registered.\n     *\n     * @param type    int describing registered handler\n     * @param handler handler to be registered\n     * @throws NullPointerException if {@code handler} is {@code null}\n     *\n     * @hide\n     ",
    "links" : [ "org.apache.harmony.dalvik.ddmc.ChunkHandler" ]
  }, {
    "name" : "public static ChunkHandler unregisterHandler(int type)",
    "returnType" : "ChunkHandler",
    "comment" : "\n     * Unregister the existing handler for the specified type.\n     *\n     * Returns the old handler.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void registrationComplete()",
    "returnType" : "void",
    "comment" : "\n     * The application must call here after it finishes registering\n     * handlers.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public static void sendChunk(Chunk chunk)",
    "returnType" : "void",
    "comment" : "\n     * Send a chunk of data to the DDM server.  This takes the form of a\n     * JDWP \"event\", which does not elicit a response from the server.\n     *\n     * Use this for \"unsolicited\" chunks.\n     *\n     * @param chunk to send\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static native void nativeSendChunk(int type, byte[] data, int offset, int length)",
    "returnType" : "void",
    "comment" : " send a chunk to the DDM server ",
    "links" : [ ]
  }, {
    "name" : "private static void broadcast(int event)",
    "returnType" : "void",
    "comment" : "\n     * Called by the VM when the DDM server connects or disconnects.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "private static Chunk dispatch(int type, byte[] data, int offset, int length)",
    "returnType" : "Chunk",
    "comment" : "\n     * This is called by the VM when a chunk arrives.\n     *\n     * For a DDM-aware application, we want to wait until the app has had\n     * a chance to register all of its chunk handlers.  Otherwise, we'll\n     * end up dropping early-arriving packets on the floor.\n     *\n     * For a non-DDM-aware application, we'll end up waiting here forever\n     * if DDMS happens to connect.  It's hard to know for sure that\n     * registration isn't going to happen, so we settle for a timeout.\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static void registerHandler(int type, ChunkHandler handler)", "public static ChunkHandler unregisterHandler(int type)", "public static void registrationComplete()", "public static void sendChunk(Chunk chunk)", "private static native void nativeSendChunk(int type, byte[] data, int offset, int length)", "private static void broadcast(int event)", "private static Chunk dispatch(int type, byte[] data, int offset, int length)" ],
  "variableNames" : [ "mHandlerMap", "CONNECTED", "DISCONNECTED", "mRegistrationComplete", "mRegistrationTimedOut" ]
}