{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/hardware/usb/UsbConstants.java",
  "packageName" : "android.hardware.usb",
  "className" : "UsbConstants",
  "comment" : "\n * Contains constants for the USB protocol.\n * These constants correspond to definitions in linux/usb/ch9.h in the linux kernel.\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "USB_ENDPOINT_DIR_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used for extracting the {@link UsbEndpoint} direction from its address field.\n     * @see UsbEndpoint#getAddress\n     * @see UsbEndpoint#getDirection\n     * @see #USB_DIR_OUT\n     * @see #USB_DIR_IN\n     *\n     ",
    "links" : [ "android.hardware.usb.UsbEndpoint" ]
  }, {
    "name" : "USB_DIR_OUT",
    "type" : "int",
    "comment" : " 0",
    "links" : [ ]
  }, {
    "name" : "USB_DIR_IN",
    "type" : "int",
    "comment" : " 0x80",
    "links" : [ ]
  }, {
    "name" : "USB_ENDPOINT_NUMBER_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used for extracting the {@link UsbEndpoint} number its address field.\n     * @see UsbEndpoint#getAddress\n     * @see UsbEndpoint#getEndpointNumber\n     ",
    "links" : [ "android.hardware.usb.UsbEndpoint" ]
  }, {
    "name" : "USB_ENDPOINT_XFERTYPE_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used for extracting the {@link UsbEndpoint} type from its address field.\n     * @see UsbEndpoint#getAddress\n     * @see UsbEndpoint#getType\n     * @see #USB_ENDPOINT_XFER_CONTROL\n     * @see #USB_ENDPOINT_XFER_ISOC\n     * @see #USB_ENDPOINT_XFER_BULK\n     * @see #USB_ENDPOINT_XFER_INT\n     ",
    "links" : [ "android.hardware.usb.UsbEndpoint" ]
  }, {
    "name" : "USB_ENDPOINT_XFER_CONTROL",
    "type" : "int",
    "comment" : "\n     * Control endpoint type (endpoint zero)\n     * @see UsbEndpoint#getType\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_ENDPOINT_XFER_ISOC",
    "type" : "int",
    "comment" : "\n     * Isochronous endpoint type (currently not supported)\n     * @see UsbEndpoint#getType\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_ENDPOINT_XFER_BULK",
    "type" : "int",
    "comment" : "\n     * Bulk endpoint type\n     * @see UsbEndpoint#getType\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_ENDPOINT_XFER_INT",
    "type" : "int",
    "comment" : "\n     * Interrupt endpoint type\n     * @see UsbEndpoint#getType\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_TYPE_MASK",
    "type" : "int",
    "comment" : "\n     * Bitmask used for encoding the request type for a control request on endpoint zero.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_TYPE_STANDARD",
    "type" : "int",
    "comment" : "\n     * Used to specify that an endpoint zero control request is a standard request.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_TYPE_CLASS",
    "type" : "int",
    "comment" : "\n     * Used to specify that an endpoint zero control request is a class specific request.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_TYPE_VENDOR",
    "type" : "int",
    "comment" : "\n     * Used to specify that an endpoint zero control request is a vendor specific request.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_TYPE_RESERVED",
    "type" : "int",
    "comment" : "\n     * Reserved endpoint zero control request type (currently unused).\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_PER_INTERFACE",
    "type" : "int",
    "comment" : "\n     * USB class indicating that the class is determined on a per-interface basis.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_AUDIO",
    "type" : "int",
    "comment" : "\n     * USB class for audio devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_COMM",
    "type" : "int",
    "comment" : "\n     * USB class for communication devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_HID",
    "type" : "int",
    "comment" : "\n     * USB class for human interface devices (for example, mice and keyboards).\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_PHYSICA",
    "type" : "int",
    "comment" : "\n     * USB class for physical devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_STILL_IMAGE",
    "type" : "int",
    "comment" : "\n     * USB class for still image devices (digital cameras).\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_PRINTER",
    "type" : "int",
    "comment" : "\n     * USB class for printers.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_MASS_STORAGE",
    "type" : "int",
    "comment" : "\n     * USB class for mass storage devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_HUB",
    "type" : "int",
    "comment" : "\n     * USB class for USB hubs.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_CDC_DATA",
    "type" : "int",
    "comment" : "\n     * USB class for CDC devices (communications device class).\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_CSCID",
    "type" : "int",
    "comment" : "\n     * USB class for content smart card devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_CONTENT_SEC",
    "type" : "int",
    "comment" : "\n     * USB class for content security devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_VIDEO",
    "type" : "int",
    "comment" : "\n     * USB class for video devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_WIRELESS_CONTROLLER",
    "type" : "int",
    "comment" : "\n     * USB class for wireless controller devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_MISC",
    "type" : "int",
    "comment" : "\n     * USB class for wireless miscellaneous devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_APP_SPEC",
    "type" : "int",
    "comment" : "\n     * Application specific USB class.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_CLASS_VENDOR_SPEC",
    "type" : "int",
    "comment" : "\n     * Vendor specific USB class.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_INTERFACE_SUBCLASS_BOOT",
    "type" : "int",
    "comment" : "\n     * Boot subclass for HID devices.\n     ",
    "links" : [ ]
  }, {
    "name" : "USB_SUBCLASS_VENDOR_SPEC",
    "type" : "int",
    "comment" : "\n     * Vendor specific USB subclass.\n     ",
    "links" : [ ]
  } ],
  "methods" : [ ],
  "methodNames" : [ ],
  "variableNames" : [ "USB_ENDPOINT_DIR_MASK", "USB_DIR_OUT", "USB_DIR_IN", "USB_ENDPOINT_NUMBER_MASK", "USB_ENDPOINT_XFERTYPE_MASK", "USB_ENDPOINT_XFER_CONTROL", "USB_ENDPOINT_XFER_ISOC", "USB_ENDPOINT_XFER_BULK", "USB_ENDPOINT_XFER_INT", "USB_TYPE_MASK", "USB_TYPE_STANDARD", "USB_TYPE_CLASS", "USB_TYPE_VENDOR", "USB_TYPE_RESERVED", "USB_CLASS_PER_INTERFACE", "USB_CLASS_AUDIO", "USB_CLASS_COMM", "USB_CLASS_HID", "USB_CLASS_PHYSICA", "USB_CLASS_STILL_IMAGE", "USB_CLASS_PRINTER", "USB_CLASS_MASS_STORAGE", "USB_CLASS_HUB", "USB_CLASS_CDC_DATA", "USB_CLASS_CSCID", "USB_CLASS_CONTENT_SEC", "USB_CLASS_VIDEO", "USB_CLASS_WIRELESS_CONTROLLER", "USB_CLASS_MISC", "USB_CLASS_APP_SPEC", "USB_CLASS_VENDOR_SPEC", "USB_INTERFACE_SUBCLASS_BOOT", "USB_SUBCLASS_VENDOR_SPEC" ]
}