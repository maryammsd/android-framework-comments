{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/media/MediaTranscodingManager.java",
  "packageName" : "android.media",
  "className" : "Builder",
  "comment" : "\n         * Builder to build a {@link TranscodingRequest} object.\n         *\n         * @param <T> The subclass to be built.\n         ",
  "links" : [ "TranscodingRequest" ],
  "variables" : [ {
    "name" : "mSourceUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestinationUri",
    "type" : "Uri",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mSourceFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mDestinationFileDescriptor",
    "type" : "ParcelFileDescriptor",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientUid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mClientPid",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mType",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mPriority",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mTestConfig",
    "type" : "TranscodingTestConfig",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " abstract T self()",
    "returnType" : "T",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T setSourceFileDescriptor(@NonNull ParcelFileDescriptor fileDescriptor)",
    "returnType" : "T",
    "comment" : "\n             * Specifies the fileDescriptor opened from the source media file.\n             *\n             * This call is optional. If the source fileDescriptor is provided, TranscodingSession\n             * will use it directly instead of opening the uri from {@link #Builder(int, Uri, Uri)}.\n             * It is client's responsibility to make sure the fileDescriptor is opened from the\n             * source uri.\n             * @param fileDescriptor a {@link ParcelFileDescriptor} opened from source media file.\n             * @return The same builder instance.\n             * @throws IllegalArgumentException if fileDescriptor is invalid.\n             ",
    "links" : [ "android.os.ParcelFileDescriptor", "#Builder(int" ]
  }, {
    "name" : "public T setDestinationFileDescriptor(@NonNull ParcelFileDescriptor fileDescriptor)",
    "returnType" : "T",
    "comment" : "\n             * Specifies the fileDescriptor opened from the destination media file.\n             *\n             * This call is optional. If the destination fileDescriptor is provided,\n             * TranscodingSession will use it directly instead of opening the source uri from\n             * {@link #Builder(int, Uri, Uri)} upon transcoding starts. It is client's\n             * responsibility to make sure the fileDescriptor is opened from the destination uri.\n             * @param fileDescriptor a {@link ParcelFileDescriptor} opened from destination media\n             *                       file.\n             * @return The same builder instance.\n             * @throws IllegalArgumentException if fileDescriptor is invalid.\n             ",
    "links" : [ "android.os.ParcelFileDescriptor", "#Builder(int" ]
  }, {
    "name" : "public T setClientUid(int uid)",
    "returnType" : "T",
    "comment" : "\n             * Specify the UID of the client that this request is for.\n             * <p>\n             * Only privilege caller with android.permission.WRITE_MEDIA_STORAGE could forward the\n             * pid. Note that the permission check happens on the service side upon starting the\n             * transcoding. If the client does not have the permission, the transcoding will fail.\n             *\n             * @param uid client Uid.\n             * @return The same builder instance.\n             * @throws IllegalArgumentException if uid is invalid.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setClientPid(int pid)",
    "returnType" : "T",
    "comment" : "\n             * Specify the pid of the client that this request is for.\n             * <p>\n             * Only privilege caller with android.permission.WRITE_MEDIA_STORAGE could forward the\n             * pid. Note that the permission check happens on the service side upon starting the\n             * transcoding. If the client does not have the permission, the transcoding will fail.\n             *\n             * @param pid client Pid.\n             * @return The same builder instance.\n             * @throws IllegalArgumentException if pid is invalid.\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setPriority(@TranscodingPriority int priority)",
    "returnType" : "T",
    "comment" : "\n             * Specifies the priority of the transcoding.\n             *\n             * @param priority Must be one of the {@code PRIORITY_*}\n             * @return The same builder instance.\n             * @throws IllegalArgumentException if flags is invalid.\n             * @hide\n             ",
    "links" : [ ]
  }, {
    "name" : "public T setTestConfig(@NonNull TranscodingTestConfig config)",
    "returnType" : "T",
    "comment" : "\n             * Sets the delay in processing this request.\n             * @param config test config.\n             * @return The same builder instance.\n             * @hide\n             ",
    "links" : [ ]
  } ],
  "methodNames" : [ " abstract T self()", "public T setSourceFileDescriptor(@NonNull ParcelFileDescriptor fileDescriptor)", "public T setDestinationFileDescriptor(@NonNull ParcelFileDescriptor fileDescriptor)", "public T setClientUid(int uid)", "public T setClientPid(int pid)", "public T setPriority(@TranscodingPriority int priority)", "public T setTestConfig(@NonNull TranscodingTestConfig config)" ],
  "variableNames" : [ "mSourceUri", "mDestinationUri", "mSourceFileDescriptor", "mDestinationFileDescriptor", "mClientUid", "mClientPid", "mType", "mPriority", "mTestConfig" ]
}