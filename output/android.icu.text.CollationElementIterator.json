{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/icu/text/CollationElementIterator.java",
  "packageName" : "android.icu.text",
  "className" : "CollationElementIterator",
  "comment" : "\n * <code>CollationElementIterator</code> is an iterator created by\n * a RuleBasedCollator to walk through a string. The return result of\n * each iteration is a 32-bit collation element (CE) that defines the\n * ordering priority of the next character or sequence of characters\n * in the source string.\n *\n * <p>For illustration, consider the following in Slovak and in traditional Spanish collation:\n * <blockquote>\n * <pre>\n * \"ca\" -&gt; the first collation element is CE('c') and the second\n *         collation element is CE('a').\n * \"cha\" -&gt; the first collation element is CE('ch') and the second\n *          collation element is CE('a').\n * </pre>\n * </blockquote>\n * And in German phonebook collation,\n * <blockquote>\n * <pre>\n * Since the character '&#230;' is a composed character of 'a' and 'e', the\n * iterator returns two collation elements for the single character '&#230;'\n *\n * \"&#230;b\" -&gt; the first collation element is collation_element('a'), the\n *              second collation element is collation_element('e'), and the\n *              third collation element is collation_element('b').\n * </pre>\n * </blockquote>\n *\n * <p>For collation ordering comparison, the collation element results\n * can not be compared simply by using basic arithmetic operators,\n * e.g. &lt;, == or &gt;, further processing has to be done. Details\n * can be found in the ICU\n * <a href=\"https://unicode-org.github.io/icu/userguide/collation/architecture\">\n * User Guide</a>. An example of using the CollationElementIterator\n * for collation ordering comparison is the class\n * {@link android.icu.text.StringSearch}.\n *\n * <p>To construct a CollationElementIterator object, users\n * call the method getCollationElementIterator() on a\n * RuleBasedCollator that defines the desired sorting order.\n *\n * <p> Example:\n * <blockquote>\n * <pre>\n *  String testString = \"This is a test\";\n *  RuleBasedCollator rbc = new RuleBasedCollator(\"&amp;a&lt;b\");\n *  CollationElementIterator iterator = rbc.getCollationElementIterator(testString);\n *  int primaryOrder = iterator.IGNORABLE;\n *  while (primaryOrder != iterator.NULLORDER) {\n *      int order = iterator.next();\n *      if (order != iterator.IGNORABLE &amp;&amp;\n *          order != iterator.NULLORDER) {\n *          // order is valid, not ignorable and we have not passed the end\n *          // of the iteration, we do something\n *          primaryOrder = CollationElementIterator.primaryOrder(order);\n *          System.out.println(\"Next primary order 0x\" +\n *                             Integer.toHexString(primaryOrder));\n *      }\n *  }\n * </pre>\n * </blockquote>\n * <p>\n * The method next() returns the collation order of the next character based on\n * the comparison level of the collator. The method previous() returns the\n * collation order of the previous character based on the comparison level of\n * the collator. The Collation Element Iterator moves only in one direction\n * between calls to reset(), setOffset(), or setText(). That is, next() and\n * previous() can not be inter-used. Whenever previous() is to be called after\n * next() or vice versa, reset(), setOffset() or setText() has to be called first\n * to reset the status, shifting current position to either the end or the start of\n * the string (reset() or setText()), or the specified position (setOffset()).\n * Hence at the next call of next() or previous(), the first or last collation order,\n * or collation order at the specified position will be returned. If a change of\n * direction is done without one of these calls, the result is undefined.\n * <p>\n * This class is not subclassable.\n * @see Collator\n * @see RuleBasedCollator\n * @see StringSearch\n * @author Syn Wee Quek\n ",
  "links" : [ "android.icu.text.StringSearch" ],
  "variables" : [ {
    "name" : "iter_",
    "type" : "CollationIterator",
    "comment" : " owned",
    "links" : [ ]
  }, {
    "name" : "rbc_",
    "type" : "RuleBasedCollator",
    "comment" : " aliased",
    "links" : [ ]
  }, {
    "name" : "otherHalf_",
    "type" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "dir_",
    "type" : "byte",
    "comment" : "\n     * &lt;0: backwards; 0: just after reset() (previous() begins from end);\n     * 1: just after setOffset(); >1: forward\n     ",
    "links" : [ ]
  }, {
    "name" : "offsets_",
    "type" : "UVector32",
    "comment" : "\n     * Stores offsets from expansions and from unsafe-backwards iteration,\n     * so that getOffset() returns intermediate offsets for the CEs\n     * that are consistent with forward iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "string_",
    "type" : "String",
    "comment" : " TODO: needed in Java? if so, then add a UCharacterIterator field too?",
    "links" : [ ]
  }, {
    "name" : "NULLORDER",
    "type" : "int",
    "comment" : "\n     * This constant is returned by the iterator in the methods\n     * next() and previous() when the end or the beginning of the\n     * source string has been reached, and there are no more valid\n     * collation elements to return.\n     *\n     * <p>See class documentation for an example of use.\n     * @see #next\n     * @see #previous ",
    "links" : [ ]
  }, {
    "name" : "IGNORABLE",
    "type" : "int",
    "comment" : "\n     * This constant is returned by the iterator in the methods\n     * next() and previous() when a collation element result is to be\n     * ignored.\n     *\n     * <p>See class documentation for an example of use.\n     * @see #next\n     * @see #previous ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public static final int primaryOrder(int ce)",
    "returnType" : "int",
    "comment" : "\n     * Return the primary order of the specified collation element,\n     * i.e. the first 16 bits.  This value is unsigned.\n     * @param ce the collation element\n     * @return the element's 16 bits primary order.\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int secondaryOrder(int ce)",
    "returnType" : "int",
    "comment" : "\n     * Return the secondary order of the specified collation element,\n     * i.e. the 16th to 23th bits, inclusive.  This value is unsigned.\n     * @param ce the collation element\n     * @return the element's 8 bits secondary order\n     ",
    "links" : [ ]
  }, {
    "name" : "public static final int tertiaryOrder(int ce)",
    "returnType" : "int",
    "comment" : "\n     * Return the tertiary order of the specified collation element, i.e. the last\n     * 8 bits.  This value is unsigned.\n     * @param ce the collation element\n     * @return the element's 8 bits tertiary order\n     ",
    "links" : [ ]
  }, {
    "name" : "private static final int getFirstHalf(long p, int lower32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final int getSecondHalf(long p, int lower32)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static final boolean ceNeedsTwoParts(long ce)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getOffset()",
    "returnType" : "int",
    "comment" : "\n     * Returns the character offset in the source string\n     * corresponding to the next collation element. I.e., getOffset()\n     * returns the position in the source string corresponding to the\n     * collation element that will be returned by the next call to\n     * next() or previous(). This value could be any of:\n     * <ul>\n     * <li> The index of the <b>first</b> character corresponding to\n     * the next collation element. (This means that if\n     * <code>setOffset(offset)</code> sets the index in the middle of\n     * a contraction, <code>getOffset()</code> returns the index of\n     * the first character in the contraction, which may not be equal\n     * to the original offset that was set. Hence calling getOffset()\n     * immediately after setOffset(offset) does not guarantee that the\n     * original offset set will be returned.)\n     * <li> If normalization is on, the index of the <b>immediate</b>\n     * subsequent character, or composite character with the first\n     * character, having a combining class of 0.\n     * <li> The length of the source string, if iteration has reached\n     * the end.\n     *</ul>\n     *\n     * @return The character offset in the source string corresponding to the\n     *         collation element that will be returned by the next call to\n     *         next() or previous().\n     ",
    "links" : [ ]
  }, {
    "name" : "public int next()",
    "returnType" : "int",
    "comment" : "\n     * Get the next collation element in the source string.\n     *\n     * <p>This iterator iterates over a sequence of collation elements\n     * that were built from the string. Because there isn't\n     * necessarily a one-to-one mapping from characters to collation\n     * elements, this doesn't mean the same thing as \"return the\n     * collation element [or ordering priority] of the next character\n     * in the string\".\n     *\n     * <p>This function returns the collation element that the\n     * iterator is currently pointing to, and then updates the\n     * internal pointer to point to the next element.\n     *\n     * @return the next collation element or NULLORDER if the end of the\n     *         iteration has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int previous()",
    "returnType" : "int",
    "comment" : "\n     * Get the previous collation element in the source string.\n     *\n     * <p>This iterator iterates over a sequence of collation elements\n     * that were built from the string. Because there isn't\n     * necessarily a one-to-one mapping from characters to collation\n     * elements, this doesn't mean the same thing as \"return the\n     * collation element [or ordering priority] of the previous\n     * character in the string\".\n     *\n     * <p>This function updates the iterator's internal pointer to\n     * point to the collation element preceding the one it's currently\n     * pointing to and then returns that element, while next() returns\n     * the current element and then updates the pointer.\n     *\n     * @return the previous collation element, or NULLORDER when the start of\n     *             the iteration has been reached.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void reset()",
    "returnType" : "void",
    "comment" : "\n     * Resets the cursor to the beginning of the string. The next\n     * call to next() or previous() will return the first and last\n     * collation element in the string, respectively.\n     *\n     * <p>If the RuleBasedCollator used by this iterator has had its\n     * attributes changed, calling reset() will reinitialize the\n     * iterator to use the new attributes.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setOffset(int newOffset)",
    "returnType" : "void",
    "comment" : "\n     * Sets the iterator to point to the collation element\n     * corresponding to the character at the specified offset. The\n     * value returned by the next call to next() will be the collation\n     * element corresponding to the characters at offset.\n     *\n     * <p>If offset is in the middle of a contracting character\n     * sequence, the iterator is adjusted to the start of the\n     * contracting sequence. This means that getOffset() is not\n     * guaranteed to return the same value set by this method.\n     *\n     * <p>If the decomposition mode is on, and offset is in the middle\n     * of a decomposible range of source text, the iterator may not\n     * return a correct result for the next forwards or backwards\n     * iteration.  The user must ensure that the offset is not in the\n     * middle of a decomposible range.\n     *\n     * @param newOffset the character offset into the original source string to\n     *        set. Note that this is not an offset into the corresponding\n     *        sequence of collation elements.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(String source)",
    "returnType" : "void",
    "comment" : "\n     * Set a new source string for iteration, and reset the offset\n     * to the beginning of the text.\n     *\n     * @param source the new source string for iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(UCharacterIterator source)",
    "returnType" : "void",
    "comment" : "\n     * Set a new source string iterator for iteration, and reset the\n     * offset to the beginning of the text.\n     *\n     * <p>The source iterator's integrity will be preserved since a new copy\n     * will be created for use.\n     * @param source the new source string iterator for iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setText(CharacterIterator source)",
    "returnType" : "void",
    "comment" : "\n     * Set a new source string iterator for iteration, and reset the\n     * offset to the beginning of the text.\n     *\n     * @param source the new source string iterator for iteration.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final Map<Integer, Integer> computeMaxExpansions(CollationData data)",
    "returnType" : "Map<Integer, Integer>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public int getMaxExpansion(int ce)",
    "returnType" : "int",
    "comment" : "\n     * Returns the maximum length of any expansion sequence that ends with\n     * the specified collation element. If there is no expansion with this\n     * collation element as the last element, returns 1.\n     *\n     * @param ce a collation element returned by previous() or next().\n     * @return the maximum length of any expansion sequence ending\n     *         with the specified collation element.\n     ",
    "links" : [ ]
  }, {
    "name" : " static int getMaxExpansion(Map<Integer, Integer> maxExpansions, int order)",
    "returnType" : "int",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private byte normalizeDir()",
    "returnType" : "byte",
    "comment" : " Normalizes dir_=1 (just after setOffset()) to dir_=0 (just after reset()). ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object that)",
    "returnType" : "boolean",
    "comment" : "\n     * Tests that argument object is equals to this CollationElementIterator.\n     * Iterators are equal if the objects uses the same RuleBasedCollator,\n     * the same source text and have the same current position in iteration.\n     * @param that object to test if it is equals to this\n     *             CollationElementIterator\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Mock implementation of hashCode(). This implementation always returns a constant\n     * value. When Java assertion is enabled, this method triggers an assertion failure.\n     * @hide original deprecated declaration\n     ",
    "links" : [ ]
  }, {
    "name" : "public RuleBasedCollator getRuleBasedCollator()",
    "returnType" : "RuleBasedCollator",
    "comment" : "\n     * @deprecated This API is ICU internal only.\n     * @hide original deprecated declaration\n     * @hide draft / provisional / internal are hidden on Android\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public static final int primaryOrder(int ce)", "public static final int secondaryOrder(int ce)", "public static final int tertiaryOrder(int ce)", "private static final int getFirstHalf(long p, int lower32)", "private static final int getSecondHalf(long p, int lower32)", "private static final boolean ceNeedsTwoParts(long ce)", "public int getOffset()", "public int next()", "public int previous()", "public void reset()", "public void setOffset(int newOffset)", "public void setText(String source)", "public void setText(UCharacterIterator source)", "public void setText(CharacterIterator source)", " static final Map<Integer, Integer> computeMaxExpansions(CollationData data)", "public int getMaxExpansion(int ce)", " static int getMaxExpansion(Map<Integer, Integer> maxExpansions, int order)", "private byte normalizeDir()", "public boolean equals(Object that)", "public int hashCode()", "public RuleBasedCollator getRuleBasedCollator()" ],
  "variableNames" : [ "iter_", "rbc_", "otherHalf_", "dir_", "offsets_", "string_", "NULLORDER", "IGNORABLE" ]
}