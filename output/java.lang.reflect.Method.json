{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/lang/reflect/Method.java",
  "packageName" : "java.lang.reflect",
  "className" : "Method",
  "comment" : "\n * A {@code Method} provides information about, and access to, a single method\n * on a class or interface.  The reflected method may be a class method\n * or an instance method (including an abstract method).\n *\n * <p>A {@code Method} permits widening conversions to occur when matching the\n * actual parameters to invoke with the underlying method's formal\n * parameters, but it throws an {@code IllegalArgumentException} if a\n * narrowing conversion would occur.\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getMethods()\n * @see java.lang.Class#getMethod(String, Class[])\n * @see java.lang.Class#getDeclaredMethods()\n * @see java.lang.Class#getDeclaredMethod(String, Class[])\n *\n * @author Kenneth Russell\n * @author Nakul Saraiya\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "ORDER_BY_SIGNATURE",
    "type" : "Comparator<Method>",
    "comment" : "\n     * Orders methods by their name, parameters and return type.\n     *\n     * @hide\n     ",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : " boolean hasGenericInformation()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getDeclaringClass()",
    "returnType" : "Class<?>",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getName()",
    "returnType" : "String",
    "comment" : "\n     * Returns the name of the method represented by this {@code Method}\n     * object, as a {@code String}.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getModifiers()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public TypeVariable<Method>[] getTypeParameters()",
    "returnType" : "TypeVariable<Method>[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?> getReturnType()",
    "returnType" : "Class<?>",
    "comment" : "\n     * Returns a {@code Class} object that represents the formal return type\n     * of the method represented by this {@code Method} object.\n     *\n     * @return the return type for the method this object represents\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type getGenericReturnType()",
    "returnType" : "Type",
    "comment" : "\n     * Returns a {@code Type} object that represents the formal return\n     * type of the method represented by this {@code Method} object.\n     *\n     * <p>If the return type is a parameterized type,\n     * the {@code Type} object returned must accurately reflect\n     * the actual type parameters used in the source code.\n     *\n     * <p>If the return type is a type variable or a parameterized type, it\n     * is created. Otherwise, it is resolved.\n     *\n     * @return  a {@code Type} object that represents the formal return\n     *     type of the underlying  method\n     * @throws GenericSignatureFormatError\n     *     if the generic method signature does not conform to the format\n     *     specified in\n     *     <cite>The Java&trade; Virtual Machine Specification</cite>\n     * @throws TypeNotPresentException if the underlying method's\n     *     return type refers to a non-existent type declaration\n     * @throws MalformedParameterizedTypeException if the\n     *     underlying method's return typed refers to a parameterized\n     *     type that cannot be instantiated for any reason\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Class<?>[] getParameterTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public int getParameterCount()",
    "returnType" : "int",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericParameterTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @throws TypeNotPresentException {@inheritDoc}\n     * @throws MalformedParameterizedTypeException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public native Class<?>[] getExceptionTypes()",
    "returnType" : "Class<?>[]",
    "comment" : "\n     * {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public Type[] getGenericExceptionTypes()",
    "returnType" : "Type[]",
    "comment" : "\n     * {@inheritDoc}\n     * @throws GenericSignatureFormatError {@inheritDoc}\n     * @throws TypeNotPresentException {@inheritDoc}\n     * @throws MalformedParameterizedTypeException {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean equals(Object obj)",
    "returnType" : "boolean",
    "comment" : "\n     * Compares this {@code Method} against the specified object.  Returns\n     * true if the objects are the same.  Two {@code Methods} are the same if\n     * they were declared by the same class and have the same name\n     * and formal parameter types and return type.\n     ",
    "links" : [ ]
  }, {
    "name" : "public int hashCode()",
    "returnType" : "int",
    "comment" : "\n     * Returns a hashcode for this {@code Method}.  The hashcode is computed\n     * as the exclusive-or of the hashcodes for the underlying\n     * method's declaring class name and the method's name.\n     ",
    "links" : [ ]
  }, {
    "name" : "public String toString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Method}.  The string is\n     * formatted as the method access modifiers, if any, followed by\n     * the method return type, followed by a space, followed by the\n     * class declaring the method, followed by a period, followed by\n     * the method name, followed by a parenthesized, comma-separated\n     * list of the method's formal parameter types. If the method\n     * throws checked exceptions, the parameter list is followed by a\n     * space, followed by the word throws followed by a\n     * comma-separated list of the thrown exception types.\n     * For example:\n     * <pre>\n     *    public boolean java.lang.Object.equals(java.lang.Object)\n     * </pre>\n     *\n     * <p>The access modifiers are placed in canonical order as\n     * specified by \"The Java Language Specification\".  This is\n     * {@code public}, {@code protected} or {@code private} first,\n     * and then other modifiers in the following order:\n     * {@code abstract}, {@code default}, {@code static}, {@code final},\n     * {@code synchronized}, {@code native}, {@code strictfp}.\n     *\n     * @return a string describing this {@code Method}\n     *\n     * @jls 8.4.3 Method Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : " void specificToStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public String toGenericString()",
    "returnType" : "String",
    "comment" : "\n     * Returns a string describing this {@code Method}, including\n     * type parameters.  The string is formatted as the method access\n     * modifiers, if any, followed by an angle-bracketed\n     * comma-separated list of the method's type parameters, if any,\n     * followed by the method's generic return type, followed by a\n     * space, followed by the class declaring the method, followed by\n     * a period, followed by the method name, followed by a\n     * parenthesized, comma-separated list of the method's generic\n     * formal parameter types.\n     *\n     * If this method was declared to take a variable number of\n     * arguments, instead of denoting the last parameter as\n     * \"<tt><i>Type</i>[]</tt>\", it is denoted as\n     * \"<tt><i>Type</i>...</tt>\".\n     *\n     * A space is used to separate access modifiers from one another\n     * and from the type parameters or return type.  If there are no\n     * type parameters, the type parameter list is elided; if the type\n     * parameter list is present, a space separates the list from the\n     * class name.  If the method is declared to throw exceptions, the\n     * parameter list is followed by a space, followed by the word\n     * throws followed by a comma-separated list of the generic thrown\n     * exception types.\n     *\n     * <p>The access modifiers are placed in canonical order as\n     * specified by \"The Java Language Specification\".  This is\n     * {@code public}, {@code protected} or {@code private} first,\n     * and then other modifiers in the following order:\n     * {@code abstract}, {@code default}, {@code static}, {@code final},\n     * {@code synchronized}, {@code native}, {@code strictfp}.\n     *\n     * @return a string describing this {@code Method},\n     * include type parameters\n     *\n     * @since 1.5\n     *\n     * @jls 8.4.3 Method Modifiers\n     ",
    "links" : [ ]
  }, {
    "name" : " void specificToGenericStringHeader(StringBuilder sb)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public native Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException",
    "returnType" : "Object",
    "comment" : "\n     * Invokes the underlying method represented by this {@code Method}\n     * object, on the specified object with the specified parameters.\n     * Individual parameters are automatically unwrapped to match\n     * primitive formal parameters, and both primitive and reference\n     * parameters are subject to method invocation conversions as\n     * necessary.\n     *\n     * <p>If the underlying method is static, then the specified {@code obj}\n     * argument is ignored. It may be null.\n     *\n     * <p>If the number of formal parameters required by the underlying method is\n     * 0, the supplied {@code args} array may be of length 0 or null.\n     *\n     * <p>If the underlying method is an instance method, it is invoked\n     * using dynamic method lookup as documented in The Java Language\n     * Specification, Second Edition, section 15.12.4.4; in particular,\n     * overriding based on the runtime type of the target object will occur.\n     *\n     * <p>If the underlying method is static, the class that declared\n     * the method is initialized if it has not already been initialized.\n     *\n     * <p>If the method completes normally, the value it returns is\n     * returned to the caller of invoke; if the value has a primitive\n     * type, it is first appropriately wrapped in an object. However,\n     * if the value has the type of an array of a primitive type, the\n     * elements of the array are <i>not</i> wrapped in objects; in\n     * other words, an array of primitive type is returned.  If the\n     * underlying method return type is void, the invocation returns\n     * null.\n     *\n     * @param obj  the object the underlying method is invoked from\n     * @param args the arguments used for the method call\n     * @return the result of dispatching the method represented by\n     * this object on {@code obj} with parameters\n     * {@code args}\n     *\n     * @exception IllegalAccessException    if this {@code Method} object\n     *              is enforcing Java language access control and the underlying\n     *              method is inaccessible.\n     * @exception IllegalArgumentException  if the method is an\n     *              instance method and the specified object argument\n     *              is not an instance of the class or interface\n     *              declaring the underlying method (or of a subclass\n     *              or implementor thereof); if the number of actual\n     *              and formal parameters differ; if an unwrapping\n     *              conversion for primitive arguments fails; or if,\n     *              after possible unwrapping, a parameter value\n     *              cannot be converted to the corresponding formal\n     *              parameter type by a method invocation conversion.\n     * @exception InvocationTargetException if the underlying method\n     *              throws an exception.\n     * @exception NullPointerException      if the specified object is null\n     *              and the method is an instance method.\n     * @exception ExceptionInInitializerError if the initialization\n     * provoked by this method fails.\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isBridge()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this method is a bridge\n     * method; returns {@code false} otherwise.\n     *\n     * @return true if and only if this method is a bridge\n     * method as defined by the Java Language Specification.\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isVarArgs()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isSynthetic()",
    "returnType" : "boolean",
    "comment" : "\n     * {@inheritDoc}\n     * @jls 13.1 The Form of a Binary\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isDefault()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this method is a default\n     * method; returns {@code false} otherwise.\n     *\n     * A default method is a public non-abstract instance method, that\n     * is, a non-static method with a body, declared in an interface\n     * type.\n     *\n     * @return true if and only if this method is a default\n     * method as defined by the Java Language Specification.\n     * @since 1.8\n     ",
    "links" : [ ]
  }, {
    "name" : "public native Object getDefaultValue()",
    "returnType" : "Object",
    "comment" : " Android-changed: isDefault() implemented natively.",
    "links" : [ ]
  }, {
    "name" : "public T getAnnotation(Class<T> annotationClass)",
    "returnType" : "T",
    "comment" : "\n     * {@inheritDoc}\n     * @throws NullPointerException  {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[] getDeclaredAnnotations()",
    "returnType" : "Annotation[]",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : "public Annotation[][] getParameterAnnotations()",
    "returnType" : "Annotation[][]",
    "comment" : "\n     * {@inheritDoc}\n     * @since 1.5\n     ",
    "links" : [ ]
  }, {
    "name" : " boolean equalNameAndParameters(Method m)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns true if this and {@code method} have the same name and the same\n     * parameters in the same order. Such methods can share implementation if\n     * one method's return types is assignable to the other.\n     *\n     * @hide needed by Proxy\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ " boolean hasGenericInformation()", "public Class<?> getDeclaringClass()", "public String getName()", "public int getModifiers()", "public TypeVariable<Method>[] getTypeParameters()", "public Class<?> getReturnType()", "public Type getGenericReturnType()", "public Class<?>[] getParameterTypes()", "public int getParameterCount()", "public Type[] getGenericParameterTypes()", "public native Class<?>[] getExceptionTypes()", "public Type[] getGenericExceptionTypes()", "public boolean equals(Object obj)", "public int hashCode()", "public String toString()", " void specificToStringHeader(StringBuilder sb)", "public String toGenericString()", " void specificToGenericStringHeader(StringBuilder sb)", "public native Object invoke(Object obj, Object... args) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException", "public boolean isBridge()", "public boolean isVarArgs()", "public boolean isSynthetic()", "public boolean isDefault()", "public native Object getDefaultValue()", "public T getAnnotation(Class<T> annotationClass)", "public Annotation[] getDeclaredAnnotations()", "public Annotation[][] getParameterAnnotations()", " boolean equalNameAndParameters(Method m)" ],
  "variableNames" : [ "ORDER_BY_SIGNATURE" ]
}