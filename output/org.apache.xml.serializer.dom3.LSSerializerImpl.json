{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/org/apache/xml/serializer/dom3/LSSerializerImpl.java",
  "packageName" : "org.apache.xml.serializer.dom3",
  "className" : "LSSerializerImpl",
  "comment" : "\r\n * Implemenatation of DOM Level 3 org.w3c.ls.LSSerializer and \r\n * org.w3c.dom.ls.DOMConfiguration.  Serialization is achieved by delegating \r\n * serialization calls to <CODE>org.apache.xml.serializer.ToStream</CODE> or \r\n * one of its derived classes depending on the serialization method, while walking\r\n * the DOM in DOM3TreeWalker.  \r\n * @see <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/load-save.html#LS-LSSerializer\">org.w3c.dom.ls.LSSerializer</a>\r\n * @see <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration\">org.w3c.dom.DOMConfiguration</a>\r\n *  \r\n * @version $Id:  \r\n * \r\n * @xsl.usage internal \r\n ",
  "links" : [ ],
  "variables" : [ {
    "name" : "DEFAULT_END_OF_LINE",
    "type" : "String",
    "comment" : " The default end-of-line character sequence used in serialization.",
    "links" : [ ]
  }, {
    "name" : "fXMLSerializer",
    "type" : "Serializer",
    "comment" : " private data members ",
    "links" : [ ]
  }, {
    "name" : "fFeatures",
    "type" : "int",
    "comment" : " Tracks DOMConfiguration features. ",
    "links" : [ ]
  }, {
    "name" : "fDOMSerializer",
    "type" : "DOM3Serializer",
    "comment" : " Common DOM serializer",
    "links" : [ ]
  }, {
    "name" : "fSerializerFilter",
    "type" : "LSSerializerFilter",
    "comment" : " A filter set on the LSSerializer",
    "links" : [ ]
  }, {
    "name" : "fVisitedNode",
    "type" : "Node",
    "comment" : " Stores the nodeArg parameter to speed up multiple writes of the same node.",
    "links" : [ ]
  }, {
    "name" : "fEndOfLine",
    "type" : "String",
    "comment" : " The end-of-line character sequence used in serialization. \"\\n\" is whats used on the web.",
    "links" : [ ]
  }, {
    "name" : "fDOMErrorHandler",
    "type" : "DOMErrorHandler",
    "comment" : " The DOMErrorhandler.",
    "links" : [ ]
  }, {
    "name" : "fDOMConfigProperties",
    "type" : "Properties",
    "comment" : " The Configuration parameter to pass to the Underlying serilaizer.",
    "links" : [ ]
  }, {
    "name" : "fEncoding",
    "type" : "String",
    "comment" : " The encoding to use during serialization.",
    "links" : [ ]
  }, {
    "name" : "CANONICAL",
    "type" : "int",
    "comment" : " Parameter canonical-form, true [optional] - NOT SUPPORTED ",
    "links" : [ ]
  }, {
    "name" : "CDATA",
    "type" : "int",
    "comment" : " Parameter cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "CHARNORMALIZE",
    "type" : "int",
    "comment" : " Parameter check-character-normalization, true [optional] - NOT SUPPORTED ",
    "links" : [ ]
  }, {
    "name" : "COMMENTS",
    "type" : "int",
    "comment" : " Parameter comments, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "DTNORMALIZE",
    "type" : "int",
    "comment" : " Parameter datatype-normalization, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "ELEM_CONTENT_WHITESPACE",
    "type" : "int",
    "comment" : " Parameter element-content-whitespace, true [required] (default) - value - false [optional] NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "ENTITIES",
    "type" : "int",
    "comment" : " Parameter entities, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "INFOSET",
    "type" : "int",
    "comment" : " Parameter infoset, true [required] (default), false has no effect --> True has no effect for the serializer",
    "links" : [ ]
  }, {
    "name" : "NAMESPACES",
    "type" : "int",
    "comment" : " Parameter namespaces, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "NAMESPACEDECLS",
    "type" : "int",
    "comment" : " Parameter namespace-declarations, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "NORMALIZECHARS",
    "type" : "int",
    "comment" : " Parameter normalize-characters, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "SPLITCDATA",
    "type" : "int",
    "comment" : " Parameter split-cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "VALIDATE",
    "type" : "int",
    "comment" : " Parameter validate, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "SCHEMAVALIDATE",
    "type" : "int",
    "comment" : " Parameter validate-if-schema, true [optional] - NOT SUPPORTED",
    "links" : [ ]
  }, {
    "name" : "WELLFORMED",
    "type" : "int",
    "comment" : " Parameter split-cdata-sections, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "DISCARDDEFAULT",
    "type" : "int",
    "comment" : " Not sure how this will be used in level 2 Documents",
    "links" : [ ]
  }, {
    "name" : "PRETTY_PRINT",
    "type" : "int",
    "comment" : " Parameter format-pretty-print, true [optional] ",
    "links" : [ ]
  }, {
    "name" : "IGNORE_CHAR_DENORMALIZE",
    "type" : "int",
    "comment" : " We currently do not support XML 1.1 character normalization",
    "links" : [ ]
  }, {
    "name" : "XMLDECL",
    "type" : "int",
    "comment" : " Parameter discard-default-content, true [required] (default)",
    "links" : [ ]
  }, {
    "name" : "fRecognizedParameters",
    "type" : "String[]",
    "comment" : " Recognized parameters for which atleast one value can be set",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void initializeSerializerProps()",
    "returnType" : "void",
    "comment" : "\r\n     * Initializes the underlying serializer's configuration depending on the\r\n     * default DOMConfiguration parameters. This method must be called before a\r\n     * node is to be serialized.\r\n     * \r\n     * @xsl.usage internal\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean canSetParameter(String name, Object value)",
    "returnType" : "boolean",
    "comment" : " \r\n     * Checks if setting a parameter to a specific value is supported.    \r\n     *  \r\n     * @see org.w3c.dom.DOMConfiguration#canSetParameter(java.lang.String, java.lang.Object)\r\n     * @since DOM Level 3\r\n     * @param name A String containing the DOMConfiguration parameter name.\r\n     * @param value An Object specifying the value of the corresponding parameter. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object getParameter(String name) throws DOMException",
    "returnType" : "Object",
    "comment" : "\r\n     * This method returns the value of a parameter if known.\r\n     * \r\n     * @see org.w3c.dom.DOMConfiguration#getParameter(java.lang.String)\r\n     * \r\n     * @param name A String containing the DOMConfiguration parameter name \r\n     *             whose value is to be returned.\r\n     * @return Object The value of the parameter if known. \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMStringList getParameterNames()",
    "returnType" : "DOMStringList",
    "comment" : "\r\n     * This method returns a of the parameters supported by this DOMConfiguration object \r\n     * and for which at least one value can be set by the application\r\n     * \r\n     * @see org.w3c.dom.DOMConfiguration#getParameterNames()\r\n     * \r\n     * @return DOMStringList A list of DOMConfiguration parameters recognized\r\n     *                       by the serializer\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setParameter(String name, Object value) throws DOMException",
    "returnType" : "void",
    "comment" : "\r\n     * This method sets the value of the named parameter.\r\n     *   \r\n     * @see org.w3c.dom.DOMConfiguration#setParameter(java.lang.String, java.lang.Object)\r\n     * \r\n     * @param name A String containing the DOMConfiguration parameter name.\r\n     * @param value An Object contaiing the parameters value to set.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMConfiguration getDomConfig()",
    "returnType" : "DOMConfiguration",
    "comment" : " \r\n     * Returns the DOMConfiguration of the LSSerializer.\r\n     *  \r\n     * @see org.w3c.dom.ls.LSSerializer#getDomConfig()\r\n     * @since DOM Level 3\r\n     * @return A DOMConfiguration object.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public LSSerializerFilter getFilter()",
    "returnType" : "LSSerializerFilter",
    "comment" : " \r\n     * Returns the DOMConfiguration of the LSSerializer.\r\n     *  \r\n     * @see org.w3c.dom.ls.LSSerializer#getFilter()\r\n     * @since DOM Level 3\r\n     * @return A LSSerializerFilter object.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public String getNewLine()",
    "returnType" : "String",
    "comment" : " \r\n     * Returns the End-Of-Line sequence of characters to be used in the XML \r\n     * being serialized.  If none is set a default \"\\n\" is returned.\r\n     * \r\n     * @see org.w3c.dom.ls.LSSerializer#getNewLine()\r\n     * @since DOM Level 3\r\n     * @return A String containing the end-of-line character sequence  used in \r\n     * serialization.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setFilter(LSSerializerFilter filter)",
    "returnType" : "void",
    "comment" : " \r\n     * Set a LSSerilizerFilter on the LSSerializer.  When set, the filter is\r\n     * called before each node is serialized which depending on its implemention\r\n     * determines if the node is to be serialized or not.    \r\n     *  \r\n     * @see org.w3c.dom.ls.LSSerializer#setFilter\r\n     * @since DOM Level 3\r\n     * @param filter A LSSerializerFilter to be applied to the stream to serialize.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public void setNewLine(String newLine)",
    "returnType" : "void",
    "comment" : " \r\n     * Sets the End-Of-Line sequence of characters to be used in the XML \r\n     * being serialized.  Setting this attribute to null will reset its \r\n     * value to the default value i.e. \"\\n\".\r\n     * \r\n     * @see org.w3c.dom.ls.LSSerializer#setNewLine\r\n     * @since DOM Level 3\r\n     * @param newLine a String that is the end-of-line character sequence to be used in \r\n     * serialization.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean write(Node nodeArg, LSOutput destination) throws LSException",
    "returnType" : "boolean",
    "comment" : " \r\n     * Serializes the specified node to the specified LSOutput and returns true if the Node \r\n     * was successfully serialized. \r\n     * \r\n     * @see org.w3c.dom.ls.LSSerializer#write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput)\r\n     * @since DOM Level 3\r\n     * @param nodeArg The Node to serialize.\r\n     * @throws org.w3c.dom.ls.LSException SERIALIZE_ERR: Raised if the \r\n     * LSSerializer was unable to serialize the node.\r\n     *      \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public String writeToString(Node nodeArg) throws DOMException, LSException",
    "returnType" : "String",
    "comment" : " \r\n     * Serializes the specified node and returns a String with the serialized\r\n     * data to the caller.  \r\n     * \r\n     * @see org.w3c.dom.ls.LSSerializer#writeToString(org.w3c.dom.Node)\r\n     * @since DOM Level 3\r\n     * @param nodeArg The Node to serialize.\r\n     * @throws org.w3c.dom.ls.LSException SERIALIZE_ERR: Raised if the \r\n     * LSSerializer was unable to serialize the node.\r\n     *      \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean writeToURI(Node nodeArg, String uri) throws LSException",
    "returnType" : "boolean",
    "comment" : " \r\n     * Serializes the specified node to the specified URI and returns true if the Node \r\n     * was successfully serialized. \r\n     * \r\n     * @see org.w3c.dom.ls.LSSerializer#writeToURI(org.w3c.dom.Node, String)\r\n     * @since DOM Level 3\r\n     * @param nodeArg The Node to serialize.\r\n     * @throws org.w3c.dom.ls.LSException SERIALIZE_ERR: Raised if the \r\n     * LSSerializer was unable to serialize the node.\r\n     *      \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String getXMLVersion(Node nodeArg)",
    "returnType" : "String",
    "comment" : "protected String getXMLVersion(Node nodeArg) throws Throwable {",
    "links" : [ ]
  }, {
    "name" : "protected String getXMLEncoding(Node nodeArg)",
    "returnType" : "String",
    "comment" : " \r\n     * Determines the XML Encoding of the Document Node to serialize.  If the Document Node\r\n     * is not a DOM Level 3 Node, then the default encoding \"UTF-8\" is returned.\r\n     * \r\n     * @param  nodeArg The Node to serialize\r\n     * @return A String containing the encoding pseudo-attribute of the XMLDecl.  \r\n     * @throws Throwable if the DOM implementation does not implement Document.getXmlEncoding()     \r\n     ",
    "links" : [ ]
  }, {
    "name" : "protected String getInputEncoding(Node nodeArg)",
    "returnType" : "String",
    "comment" : " \r\n     * Determines the Input Encoding of the Document Node to serialize.  If the Document Node\r\n     * is not a DOM Level 3 Node, then null is returned.\r\n     * \r\n     * @param  nodeArg The Node to serialize\r\n     * @return A String containing the input encoding.  \r\n     ",
    "links" : [ ]
  }, {
    "name" : "public DOMErrorHandler getErrorHandler()",
    "returnType" : "DOMErrorHandler",
    "comment" : "\r\n     * This method returns the LSSerializer's error handler.\r\n     * \r\n     * @return Returns the fDOMErrorHandler.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "private static String getPathWithoutEscapes(String origPath)",
    "returnType" : "String",
    "comment" : "\r\n     * Replaces all escape sequences in the given path with their literal characters.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "private static boolean isHexDigit(char c)",
    "returnType" : "boolean",
    "comment" : " \r\n     * Returns true if the given character is a valid hex character.\r\n     ",
    "links" : [ ]
  }, {
    "name" : "private static LSException createLSException(short code, Throwable cause)",
    "returnType" : "LSException",
    "comment" : "\r\n     * Creates an LSException. On J2SE 1.4 and above the cause for the exception will be set.\r\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void initializeSerializerProps()", "public boolean canSetParameter(String name, Object value)", "public Object getParameter(String name) throws DOMException", "public DOMStringList getParameterNames()", "public void setParameter(String name, Object value) throws DOMException", "public DOMConfiguration getDomConfig()", "public LSSerializerFilter getFilter()", "public String getNewLine()", "public void setFilter(LSSerializerFilter filter)", "public void setNewLine(String newLine)", "public boolean write(Node nodeArg, LSOutput destination) throws LSException", "public String writeToString(Node nodeArg) throws DOMException, LSException", "public boolean writeToURI(Node nodeArg, String uri) throws LSException", "protected String getXMLVersion(Node nodeArg)", "protected String getXMLEncoding(Node nodeArg)", "protected String getInputEncoding(Node nodeArg)", "public DOMErrorHandler getErrorHandler()", "private static String getPathWithoutEscapes(String origPath)", "private static boolean isHexDigit(char c)", "private static LSException createLSException(short code, Throwable cause)" ],
  "variableNames" : [ "DEFAULT_END_OF_LINE", "fXMLSerializer", "fFeatures", "fDOMSerializer", "fSerializerFilter", "fVisitedNode", "fEndOfLine", "fDOMErrorHandler", "fDOMConfigProperties", "fEncoding", "CANONICAL", "CDATA", "CHARNORMALIZE", "COMMENTS", "DTNORMALIZE", "ELEM_CONTENT_WHITESPACE", "ENTITIES", "INFOSET", "NAMESPACES", "NAMESPACEDECLS", "NORMALIZECHARS", "SPLITCDATA", "VALIDATE", "SCHEMAVALIDATE", "WELLFORMED", "DISCARDDEFAULT", "PRETTY_PRINT", "IGNORE_CHAR_DENORMALIZE", "XMLDECL", "fRecognizedParameters" ]
}