{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/javax/crypto/CipherOutputStream.java",
  "packageName" : "javax.crypto",
  "className" : "CipherOutputStream",
  "comment" : "",
  "links" : [ ],
  "variables" : [ {
    "name" : "cipher",
    "type" : "Cipher",
    "comment" : " the cipher engine to use to process stream data",
    "links" : [ ]
  }, {
    "name" : "output",
    "type" : "OutputStream",
    "comment" : " the underlying output stream",
    "links" : [ ]
  }, {
    "name" : "ibuffer",
    "type" : "byte[]",
    "comment" : " the buffer holding one byte of incoming data ",
    "links" : [ ]
  }, {
    "name" : "obuffer",
    "type" : "byte[]",
    "comment" : " the buffer holding data ready to be written out",
    "links" : [ ]
  }, {
    "name" : "closed",
    "type" : "boolean",
    "comment" : " stream status",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "public void write(int b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes the specified byte to this output stream.\n     *\n     * @param      b   the <code>byte</code>.\n     * @exception  IOException  if an I/O error occurs.\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>b.length</code> bytes from the specified byte array\n     * to this output stream.\n     * <p>\n     * The <code>write</code> method of\n     * <code>CipherOutputStream</code> calls the <code>write</code>\n     * method of three arguments with the three arguments\n     * <code>b</code>, <code>0</code>, and <code>b.length</code>.\n     *\n     * @param      b   the data.\n     * @exception  NullPointerException if <code>b</code> is null.\n     * @exception  IOException  if an I/O error occurs.\n     * @see        javax.crypto.CipherOutputStream#write(byte[], int, int)\n     * @since JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void write(byte[] b, int off, int len) throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Writes <code>len</code> bytes from the specified byte array\n     * starting at offset <code>off</code> to this output stream.\n     *\n     * @param      b     the data.\n     * @param      off   the start offset in the data.\n     * @param      len   the number of bytes to write.\n     * @exception  IOException  if an I/O error occurs.\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void flush() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Flushes this output stream by forcing any buffered output bytes\n     * that have already been processed by the encapsulated cipher object\n     * to be written out.\n     *\n     * <p>Any bytes buffered by the encapsulated cipher\n     * and waiting to be processed by it will not be written out. For example,\n     * if the encapsulated cipher is a block cipher, and the total number of\n     * bytes written using one of the <code>write</code> methods is less than\n     * the cipher's block size, no bytes will be written out.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  }, {
    "name" : "public void close() throws IOException",
    "returnType" : "void",
    "comment" : "\n     * Closes this output stream and releases any system resources\n     * associated with this stream.\n     * <p>\n     * This method invokes the <code>doFinal</code> method of the encapsulated\n     * cipher object, which causes any bytes buffered by the encapsulated\n     * cipher to be processed. The result is written out by calling the\n     * <code>flush</code> method of this output stream.\n     * <p>\n     * This method resets the encapsulated cipher object to its initial state\n     * and calls the <code>close</code> method of the underlying output\n     * stream.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     * @since      JCE1.2\n     ",
    "links" : [ ]
  } ],
  "methodNames" : [ "public void write(int b) throws IOException", "public void write(byte[] b) throws IOException", "public void write(byte[] b, int off, int len) throws IOException", "public void flush() throws IOException", "public void close() throws IOException" ],
  "variableNames" : [ "cipher", "output", "ibuffer", "obuffer", "closed" ]
}