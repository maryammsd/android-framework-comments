{
  "filePath" : "/home/maryam/clearblue/files/android-source-30/android/appwidget/AppWidgetProvider.java",
  "packageName" : "android.appwidget",
  "className" : "AppWidgetProvider",
  "comment" : "\n * A convenience class to aid in implementing an AppWidget provider.\n * Everything you can do with AppWidgetProvider, you can do with a regular {@link BroadcastReceiver}.\n * AppWidgetProvider merely parses the relevant fields out of the Intent that is received in\n * {@link #onReceive(Context,Intent) onReceive(Context,Intent)}, and calls hook methods\n * with the received extras.\n *\n * <p>Extend this class and override one or more of the {@link #onUpdate}, {@link #onDeleted},\n * {@link #onEnabled} or {@link #onDisabled} methods to implement your own AppWidget functionality.\n * </p>\n *\n * <div class=\"special reference\">\n * <h3>Developer Guides</h3>\n * <p>For more information about how to write an app widget provider, read the\n * <a href=\"{@docRoot}guide/topics/appwidgets/index.html#AppWidgetProvider\">App Widgets</a>\n * developer guide.</p>\n * </div>\n ",
  "variables" : [ ],
  "methods" : [ {
    "name" : "public void onReceive(Context context, Intent intent)",
    "returnType" : "void",
    "comment" : " BEGIN_INCLUDE(onReceive)",
    "links" : [ ]
  }, {
    "name" : "public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_UPDATE} and\n     * {@link AppWidgetManager#ACTION_APPWIDGET_RESTORED} broadcasts when this AppWidget\n     * provider is being asked to provide {@link android.widget.RemoteViews RemoteViews}\n     * for a set of AppWidgets.  Override this method to implement your own AppWidget functionality.\n     *\n     * {@more}\n     * \n     * @param context   The {@link android.content.Context Context} in which this receiver is\n     *                  running.\n     * @param appWidgetManager A {@link AppWidgetManager} object you can call {@link\n     *                  AppWidgetManager#updateAppWidget} on.\n     * @param appWidgetIds The appWidgetIds for which an update is needed.  Note that this\n     *                  may be all of the AppWidget instances for this provider, or just\n     *                  a subset of them.\n     *\n     * @see AppWidgetManager#ACTION_APPWIDGET_UPDATE\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_UPDATE", "AppWidgetManager#ACTION_APPWIDGET_RESTORED", "android.widget.RemoteViews", "android.content.Context", "AppWidgetManager" ]
  }, {
    "name" : "public void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED}\n     * broadcast when this widget has been layed out at a new size.\n     *\n     * {@more}\n     *\n     * @param context   The {@link android.content.Context Context} in which this receiver is\n     *                  running.\n     * @param appWidgetManager A {@link AppWidgetManager} object you can call {@link\n     *                  AppWidgetManager#updateAppWidget} on.\n     * @param appWidgetId The appWidgetId of the widget whose size changed.\n     * @param newOptions The appWidgetId of the widget whose size changed.\n     *\n     * @see AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED", "android.content.Context", "AppWidgetManager" ]
  }, {
    "name" : "public void onDeleted(Context context, int[] appWidgetIds)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_DELETED} broadcast when\n     * one or more AppWidget instances have been deleted.  Override this method to implement\n     * your own AppWidget functionality.\n     *\n     * {@more}\n     * \n     * @param context   The {@link android.content.Context Context} in which this receiver is\n     *                  running.\n     * @param appWidgetIds The appWidgetIds that have been deleted from their host.\n     *\n     * @see AppWidgetManager#ACTION_APPWIDGET_DELETED\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_DELETED", "android.content.Context" ]
  }, {
    "name" : "public void onEnabled(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_ENABLED} broadcast when\n     * the a AppWidget for this provider is instantiated.  Override this method to implement your\n     * own AppWidget functionality.\n     *\n     * {@more}\n     * When the last AppWidget for this provider is deleted,\n     * {@link AppWidgetManager#ACTION_APPWIDGET_DISABLED} is sent by the AppWidget manager, and\n     * {@link #onDisabled} is called.  If after that, an AppWidget for this provider is created\n     * again, onEnabled() will be called again.\n     *\n     * @param context   The {@link android.content.Context Context} in which this receiver is\n     *                  running.\n     *\n     * @see AppWidgetManager#ACTION_APPWIDGET_ENABLED\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_ENABLED", "AppWidgetManager#ACTION_APPWIDGET_DISABLED", "#onDisabled", "android.content.Context" ]
  }, {
    "name" : "public void onDisabled(Context context)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_DISABLED} broadcast, which\n     * is sent when the last AppWidget instance for this provider is deleted.  Override this method\n     * to implement your own AppWidget functionality.\n     *\n     * {@more}\n     * \n     * @param context   The {@link android.content.Context Context} in which this receiver is\n     *                  running.\n     *\n     * @see AppWidgetManager#ACTION_APPWIDGET_DISABLED\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_DISABLED", "android.content.Context" ]
  }, {
    "name" : "public void onRestored(Context context, int[] oldWidgetIds, int[] newWidgetIds)",
    "returnType" : "void",
    "comment" : "\n     * Called in response to the {@link AppWidgetManager#ACTION_APPWIDGET_RESTORED} broadcast\n     * when instances of this AppWidget provider have been restored from backup.  If your\n     * provider maintains any persistent data about its widget instances, override this method\n     * to remap the old AppWidgetIds to the new values and update any other app state that may\n     * be relevant.\n     *\n     * <p>This callback will be followed immediately by a call to {@link #onUpdate} so your\n     * provider can immediately generate new RemoteViews suitable for its newly-restored set\n     * of instances.\n     *\n     * <p>In addition, you should set {@link AppWidgetManager#OPTION_APPWIDGET_RESTORE_COMPLETED}\n     * to true indicate if a widget has been restored successfully from the provider's side.\n     *\n     * {@more}\n     *\n     * @param context\n     * @param oldWidgetIds\n     * @param newWidgetIds\n     ",
    "links" : [ "AppWidgetManager#ACTION_APPWIDGET_RESTORED", "#onUpdate", "AppWidgetManager#OPTION_APPWIDGET_RESTORE_COMPLETED" ]
  } ],
  "variableNames" : [ ],
  "methodNames" : [ "public void onReceive(Context context, Intent intent)", "public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds)", "public void onAppWidgetOptionsChanged(Context context, AppWidgetManager appWidgetManager, int appWidgetId, Bundle newOptions)", "public void onDeleted(Context context, int[] appWidgetIds)", "public void onEnabled(Context context)", "public void onDisabled(Context context)", "public void onRestored(Context context, int[] oldWidgetIds, int[] newWidgetIds)" ]
}