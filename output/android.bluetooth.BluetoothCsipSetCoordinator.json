{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/android/bluetooth/BluetoothCsipSetCoordinator.java",
  "packageName" : "android.bluetooth",
  "className" : "BluetoothCsipSetCoordinator",
  "comment" : "\n * This class provides the public APIs to control the Bluetooth CSIP set coordinator.\n *\n * <p>BluetoothCsipSetCoordinator is a proxy object for controlling the Bluetooth CSIP set Service\n * via IPC. Use {@link BluetoothAdapter#getProfileProxy} to get the BluetoothCsipSetCoordinator\n * proxy object.\n ",
  "links" : [ "android.bluetooth.BluetoothAdapter#getProfileProxy" ],
  "variables" : [ {
    "name" : "TAG",
    "type" : "String",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "DBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "VDBG",
    "type" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mCloseGuard",
    "type" : "CloseGuard",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "ACTION_CSIS_CONNECTION_STATE_CHANGED",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast the change in connection state of the CSIS Client.\n     *\n     * <p>This intent will have 3 extras:\n     *\n     * <ul>\n     *   <li>{@link #EXTRA_STATE} - The current state of the profile.\n     *   <li>{@link #EXTRA_PREVIOUS_STATE}- The previous state of the profile.\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device.\n     * </ul>\n     *\n     * <p>{@link #EXTRA_STATE} or {@link #EXTRA_PREVIOUS_STATE} can be any of {@link\n     * #STATE_DISCONNECTED}, {@link #STATE_CONNECTING}, {@link #STATE_CONNECTED}, {@link\n     * #STATE_DISCONNECTING}.\n     ",
    "links" : [ "#STATE_DISCONNECTED", "#STATE_DISCONNECTING", "#EXTRA_STATE", "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#STATE_CONNECTING", "#STATE_CONNECTED", "#EXTRA_PREVIOUS_STATE" ]
  }, {
    "name" : "ACTION_CSIS_DEVICE_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Intent used to expose broadcast receiving device.\n     *\n     * <p>This intent will have 2 extras:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote Broadcast receiver device.\n     *   <li>{@link #EXTRA_CSIS_GROUP_ID} - Group identifier.\n     *   <li>{@link #EXTRA_CSIS_GROUP_SIZE} - Group size.\n     *   <li>{@link #EXTRA_CSIS_GROUP_TYPE_UUID} - Group type UUID.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#EXTRA_CSIS_GROUP_SIZE", "#EXTRA_CSIS_GROUP_TYPE_UUID", "#EXTRA_CSIS_GROUP_ID" ]
  }, {
    "name" : "EXTRA_CSIS_GROUP_ID",
    "type" : "String",
    "comment" : "\n     * Used as an extra field in {@link #ACTION_CSIS_DEVICE_AVAILABLE} intent. Contains the group\n     * id.\n     *\n     * <p>Possible Values: {@link GROUP_ID_INVALID} Invalid group identifier 0x01 - 0xEF Valid group\n     * identifier\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_CSIS_DEVICE_AVAILABLE", "GROUP_ID_INVALID" ]
  }, {
    "name" : "EXTRA_CSIS_GROUP_SIZE",
    "type" : "String",
    "comment" : "\n     * Group size as int extra field in {@link #ACTION_CSIS_DEVICE_AVAILABLE} intent.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_CSIS_DEVICE_AVAILABLE" ]
  }, {
    "name" : "EXTRA_CSIS_GROUP_TYPE_UUID",
    "type" : "String",
    "comment" : "\n     * Group type uuid extra field in {@link #ACTION_CSIS_DEVICE_AVAILABLE} intent.\n     *\n     * @hide\n     ",
    "links" : [ "#ACTION_CSIS_DEVICE_AVAILABLE" ]
  }, {
    "name" : "ACTION_CSIS_SET_MEMBER_AVAILABLE",
    "type" : "String",
    "comment" : "\n     * Intent used to broadcast information about identified set member ready to connect.\n     *\n     * <p>This intent will have one extra:\n     *\n     * <ul>\n     *   <li>{@link BluetoothDevice#EXTRA_DEVICE} - The remote device. It can be null if no device\n     *       is active.\n     *   <li>{@link #EXTRA_CSIS_GROUP_ID} - Group identifier.\n     * </ul>\n     *\n     * @hide\n     ",
    "links" : [ "android.bluetooth.BluetoothDevice#EXTRA_DEVICE", "#EXTRA_CSIS_GROUP_ID" ]
  }, {
    "name" : "GROUP_ID_INVALID",
    "type" : "int",
    "comment" : "\n     * This represents an invalid group ID.\n     *\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "mAdapter",
    "type" : "BluetoothAdapter",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mAttributionSource",
    "type" : "AttributionSource",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "mService",
    "type" : "IBluetoothCsipSetCoordinator",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "protected void finalize()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void close()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceConnected(IBinder service)",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public void onServiceDisconnected()",
    "returnType" : "void",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "private IBluetoothCsipSetCoordinator getService()",
    "returnType" : "IBluetoothCsipSetCoordinator",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public BluetoothAdapter getAdapter()",
    "returnType" : "BluetoothAdapter",
    "comment" : " @hide ",
    "links" : [ ]
  }, {
    "name" : "public UUID lockGroup(int groupId, @NonNull @CallbackExecutor Executor executor, @NonNull ClientLockCallback callback)",
    "returnType" : "UUID",
    "comment" : "\n     * Lock the set.\n     *\n     * @param groupId group ID to lock,\n     * @param executor callback executor,\n     * @param callback callback to report lock and unlock events - stays valid until the app unlocks\n     *     using the returned lock identifier or the lock timeouts on the remote side, as per CSIS\n     *     specification,\n     * @return unique lock identifier used for unlocking or null if lock has failed.\n     * @throws IllegalArgumentException when executor or callback is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean unlockGroup(@NonNull UUID lockUuid)",
    "returnType" : "boolean",
    "comment" : "\n     * Unlock the set.\n     *\n     * @param lockUuid unique lock identifier\n     * @return true if unlocked, false on error\n     * @throws IllegalArgumentException when lockUuid is null\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public Map<Integer, ParcelUuid> getGroupUuidMapByDevice(@Nullable BluetoothDevice device)",
    "returnType" : "Map<Integer, ParcelUuid>",
    "comment" : "\n     * Get device's groups.\n     *\n     * @param device the active device\n     * @return Map of groups ids and related UUIDs\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<Integer> getAllGroupIds(@Nullable ParcelUuid uuid)",
    "returnType" : "List<Integer>",
    "comment" : "\n     * Get group id for the given UUID\n     *\n     * @return list of group IDs\n     * @hide\n     ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getConnectedDevices()",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)",
    "returnType" : "List<BluetoothDevice>",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public int getConnectionState(@Nullable BluetoothDevice device)",
    "returnType" : "int",
    "comment" : " {@inheritDoc} ",
    "links" : [ ]
  }, {
    "name" : "public boolean setConnectionPolicy(@Nullable BluetoothDevice device, @ConnectionPolicy int connectionPolicy)",
    "returnType" : "boolean",
    "comment" : "\n     * Set connection policy of the profile\n     *\n     * <p>The device should already be paired. Connection policy can be one of {@link\n     * #CONNECTION_POLICY_ALLOWED}, {@link #CONNECTION_POLICY_FORBIDDEN}, {@link\n     * #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Paired bluetooth device\n     * @param connectionPolicy is the connection policy to set to for this profile\n     * @return true if connectionPolicy is set, false on error\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "public int getConnectionPolicy(@Nullable BluetoothDevice device)",
    "returnType" : "int",
    "comment" : "\n     * Get the connection policy of the profile.\n     *\n     * <p>The connection policy can be any of: {@link #CONNECTION_POLICY_ALLOWED}, {@link\n     * #CONNECTION_POLICY_FORBIDDEN}, {@link #CONNECTION_POLICY_UNKNOWN}\n     *\n     * @param device Bluetooth device\n     * @return connection policy of the device\n     * @hide\n     ",
    "links" : [ "#CONNECTION_POLICY_FORBIDDEN", "#CONNECTION_POLICY_ALLOWED", "#CONNECTION_POLICY_UNKNOWN" ]
  }, {
    "name" : "private boolean isEnabled()",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isValidDevice(@Nullable BluetoothDevice device)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void log(String msg)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  } ],
  "methodNames" : [ "protected void finalize()", "public void close()", "public void onServiceConnected(IBinder service)", "public void onServiceDisconnected()", "private IBluetoothCsipSetCoordinator getService()", "public BluetoothAdapter getAdapter()", "public UUID lockGroup(int groupId, @NonNull @CallbackExecutor Executor executor, @NonNull ClientLockCallback callback)", "public boolean unlockGroup(@NonNull UUID lockUuid)", "public Map<Integer, ParcelUuid> getGroupUuidMapByDevice(@Nullable BluetoothDevice device)", "public List<Integer> getAllGroupIds(@Nullable ParcelUuid uuid)", "public List<BluetoothDevice> getConnectedDevices()", "public List<BluetoothDevice> getDevicesMatchingConnectionStates(@NonNull int[] states)", "public int getConnectionState(@Nullable BluetoothDevice device)", "public boolean setConnectionPolicy(@Nullable BluetoothDevice device, @ConnectionPolicy int connectionPolicy)", "public int getConnectionPolicy(@Nullable BluetoothDevice device)", "private boolean isEnabled()", "private static boolean isValidDevice(@Nullable BluetoothDevice device)", "private static void log(String msg)" ],
  "variableNames" : [ "TAG", "DBG", "VDBG", "mCloseGuard", "ACTION_CSIS_CONNECTION_STATE_CHANGED", "ACTION_CSIS_DEVICE_AVAILABLE", "EXTRA_CSIS_GROUP_ID", "EXTRA_CSIS_GROUP_SIZE", "EXTRA_CSIS_GROUP_TYPE_UUID", "ACTION_CSIS_SET_MEMBER_AVAILABLE", "GROUP_ID_INVALID", "mAdapter", "mAttributionSource", "mService" ]
}