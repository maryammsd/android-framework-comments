{
  "filePath" : "/home/maryam/clearblue/files/android-source-35/java/util/ArrayDeque.java",
  "packageName" : "java.util",
  "className" : "ArrayDeque",
  "comment" : "\n * Resizable-array implementation of the {@link Deque} interface.  Array\n * deques have no capacity restrictions; they grow as necessary to support\n * usage.  They are not thread-safe; in the absence of external\n * synchronization, they do not support concurrent access by multiple threads.\n * Null elements are prohibited.  This class is likely to be faster than\n * {@link Stack} when used as a stack, and faster than {@link LinkedList}\n * when used as a queue.\n *\n * <p>Most {@code ArrayDeque} operations run in amortized constant time.\n * Exceptions include\n * {@link #remove(Object) remove},\n * {@link #removeFirstOccurrence removeFirstOccurrence},\n * {@link #removeLastOccurrence removeLastOccurrence},\n * {@link #contains contains},\n * {@link #iterator iterator.remove()},\n * and the bulk operations, all of which run in linear time.\n *\n * <p>The iterators returned by this class's {@link #iterator() iterator}\n * method are <em>fail-fast</em>: If the deque is modified at any time after\n * the iterator is created, in any way except through the iterator's own\n * {@code remove} method, the iterator will generally throw a {@link\n * ConcurrentModificationException}.  Thus, in the face of concurrent\n * modification, the iterator fails quickly and cleanly, rather than risking\n * arbitrary, non-deterministic behavior at an undetermined time in the\n * future.\n *\n * <p>Note that the fail-fast behavior of an iterator cannot be guaranteed\n * as it is, generally speaking, impossible to make any hard guarantees in the\n * presence of unsynchronized concurrent modification.  Fail-fast iterators\n * throw {@code ConcurrentModificationException} on a best-effort basis.\n * Therefore, it would be wrong to write a program that depended on this\n * exception for its correctness: <i>the fail-fast behavior of iterators\n * should be used only to detect bugs.</i>\n *\n * <p>This class and its iterator implement all of the <em>optional</em> methods of the\n * {@link Collection}, {@link SequencedCollection}, and {@link Iterator} interfaces.\n *\n * <p>This class is a member of the\n * <a href=\"{@docRoot}/java.base/java/util/package-summary.html#CollectionsFramework\">\n * Java Collections Framework</a>.\n *\n * @author  Josh Bloch and Doug Lea\n * @param <E> the type of elements held in this deque\n * @since   1.6\n ",
  "links" : [ "java.util.Iterator", "#iterator", "java.util.Collection", "#contains", "java.util.Deque", "java.util.Stack", "#iterator()", "#removeLastOccurrence", "#removeFirstOccurrence", "java.util.LinkedList", "java.util.ConcurrentModificationException", "#remove(Object)", "java.util.SequencedCollection" ],
  "variables" : [ {
    "name" : "elements",
    "type" : "Object[]",
    "comment" : "\n     * The array in which the elements of the deque are stored.\n     * All array cells not holding deque elements are always null.\n     * The array always has at least one null slot (at tail).\n     ",
    "links" : [ ]
  }, {
    "name" : "head",
    "type" : "int",
    "comment" : "\n     * The index of the element at the head of the deque (which is the\n     * element that would be removed by remove() or pop()); or an\n     * arbitrary number 0 <= head < elements.length equal to tail if\n     * the deque is empty.\n     ",
    "links" : [ ]
  }, {
    "name" : "tail",
    "type" : "int",
    "comment" : "\n     * The index at which the next element would be added to the tail\n     * of the deque (via addLast(E), add(E), or push(E));\n     * elements[tail] is always null.\n     ",
    "links" : [ ]
  }, {
    "name" : "MAX_ARRAY_SIZE",
    "type" : "int",
    "comment" : "\n     * The maximum size of array to allocate.\n     * Some VMs reserve some header words in an array.\n     * Attempts to allocate larger arrays may result in\n     * OutOfMemoryError: Requested array size exceeds VM limit\n     ",
    "links" : [ ]
  }, {
    "name" : "serialVersionUID",
    "type" : "long",
    "comment" : "",
    "links" : [ ]
  } ],
  "methods" : [ {
    "name" : "private void grow(int needed)",
    "returnType" : "void",
    "comment" : "\n     * Increases the capacity of this deque by at least the given amount.\n     *\n     * @param needed the required minimum extra capacity; must be positive\n     ",
    "links" : [ ]
  }, {
    "name" : "private int newCapacity(int needed, int jump)",
    "returnType" : "int",
    "comment" : " Capacity calculation for edge conditions, especially overflow. ",
    "links" : [ ]
  }, {
    "name" : " static final int inc(int i, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Circularly increments i, mod modulus.\n     * Precondition and postcondition: 0 <= i < modulus.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int dec(int i, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Circularly decrements i, mod modulus.\n     * Precondition and postcondition: 0 <= i < modulus.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int inc(int i, int distance, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Circularly adds the given distance to index i, mod modulus.\n     * Precondition: 0 <= i < modulus, 0 <= distance <= modulus.\n     * @return index 0 <= i < modulus\n     ",
    "links" : [ ]
  }, {
    "name" : " static final int sub(int i, int j, int modulus)",
    "returnType" : "int",
    "comment" : "\n     * Subtracts j from i, mod modulus.\n     * Index i must be logically ahead of index j.\n     * Precondition: 0 <= i < modulus, 0 <= j < modulus.\n     * @return the \"circular distance\" from j to i; corner case i == j\n     * is disambiguated to \"empty\", returning 0.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final E elementAt(Object[] es, int i)",
    "returnType" : "E",
    "comment" : "\n     * Returns element at array index i.\n     * This is a slight abuse of generics, accepted by javac.\n     ",
    "links" : [ ]
  }, {
    "name" : " static final E nonNullElementAt(Object[] es, int i)",
    "returnType" : "E",
    "comment" : "\n     * A version of elementAt that checks for null elements.\n     * This check doesn't catch all possible comodifications,\n     * but does catch ones that corrupt traversal.\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addFirst(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the front of this deque.\n     *\n     * @param e the element to add\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ ]
  }, {
    "name" : "public void addLast(E e)",
    "returnType" : "void",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #add}.\n     *\n     * @param e the element to add\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#add" ]
  }, {
    "name" : "public boolean addAll(Collection<? extends E> c)",
    "returnType" : "boolean",
    "comment" : "\n     * Adds all of the elements in the specified collection at the end\n     * of this deque, as if by calling {@link #addLast} on each one,\n     * in the order that they are returned by the collection's iterator.\n     *\n     * @param c the elements to be inserted into this deque\n     * @return {@code true} if this deque changed as a result of the call\n     * @throws NullPointerException if the specified collection or any\n     *         of its elements are null\n     ",
    "links" : [ "#addLast" ]
  }, {
    "name" : "private void copyElements(Collection<? extends E> c)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean offerFirst(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the front of this deque.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Deque#offerFirst})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Deque#offerFirst" ]
  }, {
    "name" : "public boolean offerLast(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Deque#offerLast})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "java.util.Deque#offerLast" ]
  }, {
    "name" : "public E removeFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E removeLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E pollFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E pollLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E getFirst()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E getLast()",
    "returnType" : "E",
    "comment" : "\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public E peekFirst()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public E peekLast()",
    "returnType" : "E",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public boolean removeFirstOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the first occurrence of the specified element in this\n     * deque (when traversing the deque from head to tail).\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeLastOccurrence(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the last occurrence of the specified element in this\n     * deque (when traversing the deque from head to tail).\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the last element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if the deque contained the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean add(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #addLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Collection#add})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#addLast", "java.util.Collection#add" ]
  }, {
    "name" : "public boolean offer(E e)",
    "returnType" : "boolean",
    "comment" : "\n     * Inserts the specified element at the end of this deque.\n     *\n     * <p>This method is equivalent to {@link #offerLast}.\n     *\n     * @param e the element to add\n     * @return {@code true} (as specified by {@link Queue#offer})\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#offerLast", "java.util.Queue#offer" ]
  }, {
    "name" : "public E remove()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque.\n     *\n     * This method differs from {@link #poll() poll()} only in that it\n     * throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #removeFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ "#poll()", "#removeFirst" ]
  }, {
    "name" : "public E poll()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves and removes the head of the queue represented by this deque\n     * (in other words, the first element of this deque), or returns\n     * {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #pollFirst}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         {@code null} if this deque is empty\n     ",
    "links" : [ "#pollFirst" ]
  }, {
    "name" : "public E element()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque.  This method differs from {@link #peek peek} only in\n     * that it throws an exception if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #getFirst}.\n     *\n     * @return the head of the queue represented by this deque\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ "#getFirst", "#peek" ]
  }, {
    "name" : "public E peek()",
    "returnType" : "E",
    "comment" : "\n     * Retrieves, but does not remove, the head of the queue represented by\n     * this deque, or returns {@code null} if this deque is empty.\n     *\n     * <p>This method is equivalent to {@link #peekFirst}.\n     *\n     * @return the head of the queue represented by this deque, or\n     *         {@code null} if this deque is empty\n     ",
    "links" : [ "#peekFirst" ]
  }, {
    "name" : "public void push(E e)",
    "returnType" : "void",
    "comment" : "\n     * Pushes an element onto the stack represented by this deque.  In other\n     * words, inserts the element at the front of this deque.\n     *\n     * <p>This method is equivalent to {@link #addFirst}.\n     *\n     * @param e the element to push\n     * @throws NullPointerException if the specified element is null\n     ",
    "links" : [ "#addFirst" ]
  }, {
    "name" : "public E pop()",
    "returnType" : "E",
    "comment" : "\n     * Pops an element from the stack represented by this deque.  In other\n     * words, removes and returns the first element of this deque.\n     *\n     * <p>This method is equivalent to {@link #removeFirst()}.\n     *\n     * @return the element at the front of this deque (which is the top\n     *         of the stack represented by this deque)\n     * @throws NoSuchElementException {@inheritDoc}\n     ",
    "links" : [ "#removeFirst()" ]
  }, {
    "name" : " boolean delete(int i)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes the element at the specified position in the elements array.\n     * This can result in forward or backwards motion of array elements.\n     * We optimize for least element motion.\n     *\n     * <p>This method is called delete rather than remove to emphasize\n     * that its semantics differ from those of {@link List#remove(int)}.\n     *\n     * @return true if elements near tail moved backwards\n     ",
    "links" : [ "java.util.List#remove(int)" ]
  }, {
    "name" : "public int size()",
    "returnType" : "int",
    "comment" : "\n     * Returns the number of elements in this deque.\n     *\n     * @return the number of elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean isEmpty()",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains no elements.\n     *\n     * @return {@code true} if this deque contains no elements\n     ",
    "links" : [ ]
  }, {
    "name" : "public Iterator<E> iterator()",
    "returnType" : "Iterator<E>",
    "comment" : "\n     * Returns an iterator over the elements in this deque.  The elements\n     * will be ordered from first (head) to last (tail).  This is the same\n     * order that elements would be dequeued (via successive calls to\n     * {@link #remove} or popped (via successive calls to {@link #pop}).\n     *\n     * @return an iterator over the elements in this deque\n     ",
    "links" : [ "#remove", "#pop" ]
  }, {
    "name" : "public Iterator<E> descendingIterator()",
    "returnType" : "Iterator<E>",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public Spliterator<E> spliterator()",
    "returnType" : "Spliterator<E>",
    "comment" : "\n     * Creates a <em><a href=\"Spliterator.html#binding\">late-binding</a></em>\n     * and <em>fail-fast</em> {@link Spliterator} over the elements in this\n     * deque.\n     *\n     * <p>The {@code Spliterator} reports {@link Spliterator#SIZED},\n     * {@link Spliterator#SUBSIZED}, {@link Spliterator#ORDERED}, and\n     * {@link Spliterator#NONNULL}.  Overriding implementations should document\n     * the reporting of additional characteristic values.\n     *\n     * @return a {@code Spliterator} over the elements in this deque\n     * @since 1.8\n     ",
    "links" : [ "java.util.Spliterator#SIZED", "java.util.Spliterator#NONNULL", "java.util.Spliterator#SUBSIZED", "java.util.Spliterator", "java.util.Spliterator#ORDERED" ]
  }, {
    "name" : "public void forEach(Consumer<? super E> action)",
    "returnType" : "void",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeIf(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean removeAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean retainAll(Collection<?> c)",
    "returnType" : "boolean",
    "comment" : "\n     * @throws NullPointerException {@inheritDoc}\n     ",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemove(Predicate<? super E> filter)",
    "returnType" : "boolean",
    "comment" : " Implementation of bulk remove methods. ",
    "links" : [ ]
  }, {
    "name" : "private static long[] nBits(int n)",
    "returnType" : "long[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static void setBit(long[] bits, int i)",
    "returnType" : "void",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private static boolean isClear(long[] bits, int i)",
    "returnType" : "boolean",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "private boolean bulkRemoveModified(Predicate<? super E> filter, final int beg)",
    "returnType" : "boolean",
    "comment" : "\n     * Helper for bulkRemove, in case of at least one deletion.\n     * Tolerate predicates that reentrantly access the collection for\n     * read (but writers still get CME), so traverse once to find\n     * elements to delete, a second pass to physically expunge.\n     *\n     * @param beg valid index of first element to be deleted\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean contains(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Returns {@code true} if this deque contains the specified element.\n     * More formally, returns {@code true} if and only if this deque contains\n     * at least one element {@code e} such that {@code o.equals(e)}.\n     *\n     * @param o object to be checked for containment in this deque\n     * @return {@code true} if this deque contains the specified element\n     ",
    "links" : [ ]
  }, {
    "name" : "public boolean remove(Object o)",
    "returnType" : "boolean",
    "comment" : "\n     * Removes a single instance of the specified element from this deque.\n     * If the deque does not contain the element, it is unchanged.\n     * More formally, removes the first element {@code e} such that\n     * {@code o.equals(e)} (if such an element exists).\n     * Returns {@code true} if this deque contained the specified element\n     * (or equivalently, if this deque changed as a result of the call).\n     *\n     * <p>This method is equivalent to {@link #removeFirstOccurrence(Object)}.\n     *\n     * @param o element to be removed from this deque, if present\n     * @return {@code true} if this deque contained the specified element\n     ",
    "links" : [ "#removeFirstOccurrence(Object)" ]
  }, {
    "name" : "public void clear()",
    "returnType" : "void",
    "comment" : "\n     * Removes all of the elements from this deque.\n     * The deque will be empty after this call returns.\n     ",
    "links" : [ ]
  }, {
    "name" : "private static void circularClear(Object[] es, int i, int end)",
    "returnType" : "void",
    "comment" : "\n     * Nulls out slots starting at array index i, up to index end.\n     * Condition i == end means \"empty\" - nothing to do.\n     ",
    "links" : [ ]
  }, {
    "name" : "public Object[] toArray()",
    "returnType" : "Object[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque\n     * in proper sequence (from first to last element).\n     *\n     * <p>The returned array will be \"safe\" in that no references to it are\n     * maintained by this deque.  (In other words, this method must allocate\n     * a new array).  The caller is thus free to modify the returned array.\n     *\n     * <p>This method acts as bridge between array-based and collection-based\n     * APIs.\n     *\n     * @return an array containing all of the elements in this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "private T[] toArray(Class<T[]> klazz)",
    "returnType" : "T[]",
    "comment" : "",
    "links" : [ ]
  }, {
    "name" : "public T[] toArray(T[] a)",
    "returnType" : "T[]",
    "comment" : "\n     * Returns an array containing all of the elements in this deque in\n     * proper sequence (from first to last element); the runtime type of the\n     * returned array is that of the specified array.  If the deque fits in\n     * the specified array, it is returned therein.  Otherwise, a new array\n     * is allocated with the runtime type of the specified array and the\n     * size of this deque.\n     *\n     * <p>If this deque fits in the specified array with room to spare\n     * (i.e., the array has more elements than this deque), the element in\n     * the array immediately following the end of the deque is set to\n     * {@code null}.\n     *\n     * <p>Like the {@link #toArray()} method, this method acts as bridge between\n     * array-based and collection-based APIs.  Further, this method allows\n     * precise control over the runtime type of the output array, and may,\n     * under certain circumstances, be used to save allocation costs.\n     *\n     * <p>Suppose {@code x} is a deque known to contain only strings.\n     * The following code can be used to dump the deque into a newly\n     * allocated array of {@code String}:\n     *\n     * <pre> {@code String[] y = x.toArray(new String[0]);}</pre>\n     *\n     * Note that {@code toArray(new Object[0])} is identical in function to\n     * {@code toArray()}.\n     *\n     * @param a the array into which the elements of the deque are to\n     *          be stored, if it is big enough; otherwise, a new array of the\n     *          same runtime type is allocated for this purpose\n     * @return an array containing all of the elements in this deque\n     * @throws ArrayStoreException if the runtime type of the specified array\n     *         is not a supertype of the runtime type of every element in\n     *         this deque\n     * @throws NullPointerException if the specified array is null\n     ",
    "links" : [ "#toArray()" ]
  }, {
    "name" : "public ArrayDeque<E> clone()",
    "returnType" : "ArrayDeque<E>",
    "comment" : "\n     * Returns a copy of this deque.\n     *\n     * @return a copy of this deque\n     ",
    "links" : [ ]
  }, {
    "name" : "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException",
    "returnType" : "void",
    "comment" : "\n     * Saves this deque to a stream (that is, serializes it).\n     *\n     * @param s the stream\n     * @throws java.io.IOException if an I/O error occurs\n     * @serialData The current size ({@code int}) of the deque,\n     * followed by all of its elements (each an object reference) in\n     * first-to-last order.\n     ",
    "links" : [ ]
  }, {
    "name" : "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException",
    "returnType" : "void",
    "comment" : "\n     * Reconstitutes this deque from a stream (that is, deserializes it).\n     * @param s the stream\n     * @throws ClassNotFoundException if the class of a serialized object\n     *         could not be found\n     * @throws java.io.IOException if an I/O error occurs\n     ",
    "links" : [ ]
  }, {
    "name" : " void checkInvariants()",
    "returnType" : "void",
    "comment" : " debugging ",
    "links" : [ ]
  } ],
  "methodNames" : [ "private void grow(int needed)", "private int newCapacity(int needed, int jump)", " static final int inc(int i, int modulus)", " static final int dec(int i, int modulus)", " static final int inc(int i, int distance, int modulus)", " static final int sub(int i, int j, int modulus)", " static final E elementAt(Object[] es, int i)", " static final E nonNullElementAt(Object[] es, int i)", "public void addFirst(E e)", "public void addLast(E e)", "public boolean addAll(Collection<? extends E> c)", "private void copyElements(Collection<? extends E> c)", "public boolean offerFirst(E e)", "public boolean offerLast(E e)", "public E removeFirst()", "public E removeLast()", "public E pollFirst()", "public E pollLast()", "public E getFirst()", "public E getLast()", "public E peekFirst()", "public E peekLast()", "public boolean removeFirstOccurrence(Object o)", "public boolean removeLastOccurrence(Object o)", "public boolean add(E e)", "public boolean offer(E e)", "public E remove()", "public E poll()", "public E element()", "public E peek()", "public void push(E e)", "public E pop()", " boolean delete(int i)", "public int size()", "public boolean isEmpty()", "public Iterator<E> iterator()", "public Iterator<E> descendingIterator()", "public Spliterator<E> spliterator()", "public void forEach(Consumer<? super E> action)", "public boolean removeIf(Predicate<? super E> filter)", "public boolean removeAll(Collection<?> c)", "public boolean retainAll(Collection<?> c)", "private boolean bulkRemove(Predicate<? super E> filter)", "private static long[] nBits(int n)", "private static void setBit(long[] bits, int i)", "private static boolean isClear(long[] bits, int i)", "private boolean bulkRemoveModified(Predicate<? super E> filter, final int beg)", "public boolean contains(Object o)", "public boolean remove(Object o)", "public void clear()", "private static void circularClear(Object[] es, int i, int end)", "public Object[] toArray()", "private T[] toArray(Class<T[]> klazz)", "public T[] toArray(T[] a)", "public ArrayDeque<E> clone()", "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException", "private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException", " void checkInvariants()" ],
  "variableNames" : [ "elements", "head", "tail", "MAX_ARRAY_SIZE", "serialVersionUID" ]
}